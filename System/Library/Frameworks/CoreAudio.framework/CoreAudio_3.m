uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E50178](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B591D40C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = result;
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v7[1] = a4;
    v7[2] = v9 | 0x8000000000000000;
    *v7 = result;
    v7 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v7 = v10;
    v7 = (_QWORD *)((char *)v7 + 1);
  }
  *(_BYTE *)v7 = 0;
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E50178](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B591D53C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  uint64_t v8;
  std::__node<char> *first;
  std::__node<char> *v10;

  v2 = __c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = operator new();
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &off_1E6998998;
    *(_QWORD *)(v8 + 8) = first;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = operator new();
    v10 = this->__end_->__first_;
    *(_QWORD *)v8 = &off_1E69989E0;
    *(_QWORD *)(v8 + 8) = v10;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = v2;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &off_1E6998A28;
  *(_QWORD *)(v5 + 8) = v7;
  *(_BYTE *)(v5 + 16) = v2;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_1B591D678(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  std::locale *v2;
  void (__cdecl **v4)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale(v2);
  v4 = v1[1];
  if (v4)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  MEMORY[0x1B5E50688](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E69989E0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E69989E0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E6998998;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E6998998;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  std::basic_regex<char>::value_type v6;
  int v7;
  int v8;
  unsigned __int8 v9;
  char v10;
  unsigned __int8 v11;
  char v12;
  std::basic_regex<char>::value_type v13;
  unsigned __int8 v14;
  std::basic_regex<char>::value_type v15;
  __int16 v16;

  v4 = a2;
  if (a2 != a3)
  {
    v5 = *a2;
    v6 = v5;
    if ((char)v5 > 109)
    {
      switch((char)v5)
      {
        case 'n':
          if (!a4)
          {
            v6 = 10;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v16 = 10;
          goto LABEL_79;
        case 'r':
          if (!a4)
          {
            v6 = 13;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v16 = 13;
          goto LABEL_79;
        case 't':
          if (!a4)
          {
            v6 = 9;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v16 = 9;
          goto LABEL_79;
        case 'u':
          if (v4 + 1 != a3)
          {
            v7 = v4[1];
            if ((v7 & 0xF8) == 0x30 || (v7 & 0xFE) == 0x38 || (v7 | 0x20u) - 97 < 6)
            {
              v4 += 2;
              if (v4 != a3)
              {
                v8 = *v4;
                if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6)
                  goto LABEL_27;
              }
            }
          }
          goto LABEL_89;
        case 'v':
          if (!a4)
          {
            v6 = 11;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v16 = 11;
          break;
        case 'x':
LABEL_27:
          if (v4 + 1 == a3)
            goto LABEL_89;
          v9 = v4[1];
          v10 = -48;
          if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38)
            goto LABEL_32;
          v9 |= 0x20u;
          if ((v9 - 97) >= 6u)
            goto LABEL_89;
          v10 = -87;
LABEL_32:
          if (v4 + 2 == a3)
            goto LABEL_89;
          v11 = v4[2];
          v12 = -48;
          if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38)
            goto LABEL_37;
          v11 |= 0x20u;
          if ((v11 - 97) >= 6u)
            goto LABEL_89;
          v12 = -87;
LABEL_37:
          v13 = v12 + v11 + 16 * (v10 + v9);
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((_BYTE *)a4 + 23) = 1;
            }
            *(_BYTE *)a4 = v13;
            *((_BYTE *)a4 + 1) = 0;
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v13);
          }
          v4 += 3;
          return v4;
        default:
          goto LABEL_51;
      }
      goto LABEL_79;
    }
    if ((char)v5 == 48)
    {
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return ++v4;
      }
      v6 = 0;
      goto LABEL_67;
    }
    if ((char)v5 != 99)
    {
      if ((char)v5 == 102)
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v16 = 12;
LABEL_79:
          *(_WORD *)a4 = v16;
          return ++v4;
        }
        v6 = 12;
LABEL_67:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return ++v4;
      }
LABEL_51:
      if ((char)v5 != 95 && ((char)v5 < 0 || (a1->__traits_.__ct_->__tab_[v5] & 0x500) == 0))
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          *(_BYTE *)a4 = v5;
          *((_BYTE *)a4 + 1) = 0;
          return ++v4;
        }
        goto LABEL_67;
      }
LABEL_89:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if (v4 + 1 == a3)
      goto LABEL_89;
    v14 = v4[1];
    if (((v14 & 0xDF) - 65) > 0x19u)
      goto LABEL_89;
    v15 = v14 & 0x1F;
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v15;
      *((_BYTE *)a4 + 1) = 0;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v15);
    }
    v4 += 2;
  }
  return v4;
}

void std::regex_traits<char>::__lookup_collatename<char const*>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&__s, a3, a4, a4 - a3);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v13, *(_QWORD *)(a2 + 16), v10, (char *)v10 + size);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = v13;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a1 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_1B591DEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E50178](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B591DF48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E50178](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B591DF94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::vector<std::string>::pointer std::vector<std::string>::__push_back_slow_path<std::string const&>(std::vector<std::string> *a1, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  std::allocator<std::string> *p_end_cap;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  std::__split_buffer<std::string>::pointer end;
  __int128 v11;
  std::vector<std::string>::pointer v12;
  std::__split_buffer<std::string> __v;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_ - (char *)a1->__begin_) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  if (0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) > v3)
    v3 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  else
    v7 = v3;
  __v.__end_cap_.__value_ = p_end_cap;
  if (v7)
  {
    v9 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  end = v9 + v2;
  __v.__first_ = v9;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v9[v8];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v11 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v11;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
  v12 = a1->__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v12;
}

void sub_1B591E0B4(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v6;

  v6 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v6 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  JUMPOUT(0x1B5E50688);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  char *current;
  char *last;
  char v6;
  char v7;
  uint64_t v8;
  _BOOL4 negate;
  std::string::size_type size;
  int v11;
  std::string::size_type v12;
  std::string *p_s;
  std::vector<std::pair<char, char>>::pointer begin;
  uint64_t v15;
  uint64_t v16;
  char *p_second;
  std::vector<std::pair<std::string, std::string>>::pointer v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  std::string::size_type v24;
  unsigned __int8 v25;
  std::vector<char>::pointer v26;
  unint64_t v27;
  int v28;
  std::regex_traits<char>::char_class_type v29;
  int v30;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v32;
  char *v33;
  std::vector<std::pair<std::string, std::string>>::pointer v34;
  std::vector<std::pair<std::string, std::string>>::pointer v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  std::vector<std::string>::pointer v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  unint64_t v44;
  __int128 v45;
  std::string::size_type v46;
  uint64_t v47;
  BOOL v48;
  std::string *v49;
  std::string::size_type v50;
  int v51;
  std::string *v52;
  std::string *v53;
  uint64_t v54;
  std::string::size_type v55;
  int v56;
  std::regex_traits<char>::char_class_type v57;
  int v58;
  std::vector<std::string>::pointer v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  unint64_t v63;
  __int128 v64;
  std::string::size_type v65;
  uint64_t v66;
  BOOL v67;
  std::string *v68;
  std::string::size_type v69;
  int v70;
  std::string *v71;
  std::string *v72;
  uint64_t v73;
  int v74;
  std::regex_traits<char>::char_class_type mask;
  const std::ctype_base::mask *tab;
  std::ctype_base::mask v77;
  std::regex_traits<char>::char_class_type neg_mask;
  int v79;
  std::__node<char> *first;
  int v81;
  std::string *v82;
  _BOOL4 v83;
  unint64_t v84;
  uint64_t v85;
  std::string __p;
  __int16 v87;
  std::string v88;
  std::string __s;

  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v8 = 0;
    negate = this->__negate_;
    goto LABEL_172;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_36;
  v6 = *current;
  LOBYTE(v87) = *current;
  v7 = current[1];
  HIBYTE(v87) = v7;
  if (this->__icase_)
  {
    LOBYTE(v87) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(v87) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
  LOWORD(__s.__r_.__value_.__l.__data_) = v87;
  __s.__r_.__value_.__s.__data_[2] = 0;
  memset(&__p, 0, sizeof(__p));
  std::__get_collation_name(&v88, (const char *)&__s);
  __p = v88;
  size = HIBYTE(v88.__r_.__value_.__r.__words[2]);
  v11 = SHIBYTE(v88.__r_.__value_.__r.__words[2]);
  if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v88.__r_.__value_.__l.__size_;
  if (size)
    goto LABEL_11;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_11;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    v12 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      goto LABEL_16;
    p_s = &__s;
  }
  (*(void (**)(std::string *__return_ptr, const std::collate<char> *, std::string *, char *))(*(_QWORD *)this->__traits_.__col_ + 32))(&v88, this->__traits_.__col_, p_s, (char *)p_s + v12);
  if (v11 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v88;
  if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v88.__r_.__value_.__r.__words[2]) != 12 && HIBYTE(v88.__r_.__value_.__r.__words[2]) != 1)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_11;
    }
    goto LABEL_115;
  }
  if (__p.__r_.__value_.__l.__size_ == 1 || __p.__r_.__value_.__l.__size_ == 12)
  {
LABEL_115:
    std::string::operator=(&__p, &__s);
    goto LABEL_11;
  }
  *__p.__r_.__value_.__l.__data_ = 0;
  __p.__r_.__value_.__l.__size_ = 0;
LABEL_11:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
LABEL_16:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v24 = __p.__r_.__value_.__l.__size_;
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v24)
      goto LABEL_18;
LABEL_36:
    negate = 0;
    v8 = 1;
    goto LABEL_37;
  }
  if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
    goto LABEL_36;
LABEL_18:
  begin = this->__digraphs_.__begin_;
  v15 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v15)
  {
    v16 = v15 >> 1;
    if ((unint64_t)(v15 >> 1) <= 1)
      v16 = 1;
    p_second = &begin->second;
    while (v87 != *(p_second - 1) || HIBYTE(v87) != *p_second)
    {
      p_second += 2;
      if (!--v16)
        goto LABEL_27;
    }
    goto LABEL_169;
  }
LABEL_27:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    negate = 0;
  }
  else
  {
    std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v87, (char *)&v88);
    v19 = this->__ranges_.__begin_;
    v20 = (char *)this->__ranges_.__end_ - (char *)v19;
    if (v20)
    {
      v21 = 0;
      v22 = 0xAAAAAAAAAAAAAAABLL * (v20 >> 4);
      while ((int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v19, &__s) << 24) > 0xFFFFFF|| (int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s, v19->second.__r_.__value_.__r.__words) << 24) >= 0x1000000)
      {
        ++v21;
        ++v19;
        if (v21 >= v22)
          goto LABEL_34;
      }
      negate = 1;
      v23 = 5;
    }
    else
    {
LABEL_34:
      negate = 0;
      v23 = 0;
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (negate)
      goto LABEL_147;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_151:
    if ((char)v87 < 0)
    {
      neg_mask = this->__neg_mask_;
    }
    else
    {
      mask = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      v77 = tab[v87];
      if (((v77 & mask) != 0 || v87 == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(v87) & 0x80000000) == 0
        && ((tab[HIBYTE(v87)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(v87) == 95))
      {
        goto LABEL_169;
      }
      neg_mask = this->__neg_mask_;
      if ((v77 & neg_mask) != 0 || v87 == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_168:
        v79 = negate;
LABEL_170:
        negate = v79;
        goto LABEL_171;
      }
    }
    if ((SHIBYTE(v87) & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[HIBYTE(v87)] & neg_mask) == 0)
      {
        v79 = 1;
        if (HIBYTE(v87) != 95 || (neg_mask & 0x80) == 0)
          goto LABEL_170;
      }
      goto LABEL_168;
    }
LABEL_169:
    v79 = 1;
    goto LABEL_170;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v87, (char *)&v88);
  v59 = this->__equivalences_.__begin_;
  v60 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  v61 = (char *)this->__equivalences_.__end_ - (char *)v59;
  if (!v61)
  {
    if ((*((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x80) != 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    goto LABEL_151;
  }
  v62 = 0;
  v63 = v61 / 24;
  v64 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v65 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  else
    v65 = __s.__r_.__value_.__l.__size_;
  if (v63 <= 1)
    v66 = 1;
  else
    v66 = v61 / 24;
  v67 = 1;
  while (1)
  {
    v68 = &v59[v62];
    v69 = HIBYTE(v68->__r_.__value_.__r.__words[2]);
    v70 = (char)v69;
    if ((v69 & 0x80u) != 0)
      v69 = v68->__r_.__value_.__l.__size_;
    if (v65 != v69)
      goto LABEL_142;
    v71 = v70 >= 0 ? &v59[v62] : (std::string *)v68->__r_.__value_.__r.__words[0];
    if ((v60 & 0x80) == 0)
      break;
    v84 = v63;
    v85 = v60;
    v74 = memcmp((const void *)v64, v71, *((size_t *)&v64 + 1));
    v63 = v84;
    v60 = v85;
    if (!v74)
    {
      v23 = 5;
      negate = 1;
      goto LABEL_145;
    }
LABEL_142:
    v67 = ++v62 < v63;
    if (v62 == v66)
    {
      v23 = 0;
      goto LABEL_144;
    }
  }
  if (!(_DWORD)v60)
  {
    negate = 1;
    if (v67)
      goto LABEL_171;
    goto LABEL_151;
  }
  v72 = &__s;
  v73 = v60;
  do
  {
    if (v72->__r_.__value_.__s.__data_[0] != v71->__r_.__value_.__s.__data_[0])
      goto LABEL_142;
    v72 = (std::string *)((char *)v72 + 1);
    v71 = (std::string *)((char *)v71 + 1);
    --v73;
  }
  while (v73);
  negate = 1;
  v23 = 5;
LABEL_144:
  if ((v60 & 0x80) != 0)
LABEL_145:
    operator delete(__s.__r_.__value_.__l.__data_);
  if (!v67)
    goto LABEL_151;
LABEL_147:
  if (v23)
  {
LABEL_171:
    v8 = 2;
    goto LABEL_172;
  }
  v8 = 2;
LABEL_37:
  v25 = *a2->__current_;
  v88.__r_.__value_.__s.__data_[0] = v25;
  if (this->__icase_)
  {
    v25 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v25);
    v88.__r_.__value_.__s.__data_[0] = v25;
  }
  v26 = this->__chars_.__begin_;
  v27 = this->__chars_.__end_ - v26;
  if (v27)
  {
    if (v27 <= 1)
      v27 = 1;
    while (1)
    {
      v28 = *v26++;
      if (v28 == v25)
        break;
      if (!--v27)
        goto LABEL_44;
    }
LABEL_104:
    negate = 1;
    goto LABEL_172;
  }
LABEL_44:
  v29 = this->__neg_mask_;
  if (v29 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v25 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v25] & v29) == 0)
      v30 = (v25 == 95) & (v29 >> 7);
    else
      LOBYTE(v30) = 1;
    end = this->__neg_chars_.__end_;
    v32 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v25, end - this->__neg_chars_.__begin_);
    v33 = v32 ? v32 : end;
    if ((v30 & 1) == 0 && v33 == end)
      goto LABEL_104;
  }
  v35 = this->__ranges_.__begin_;
  v34 = this->__ranges_.__end_;
  if (v35 != v34)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v88, &v88.__r_.__value_.__s.__data_[1]);
      v35 = this->__ranges_.__begin_;
      v34 = this->__ranges_.__end_;
    }
    else
    {
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v25;
    }
    v36 = (char *)v34 - (char *)v35;
    if (v36)
    {
      v37 = 0;
      v38 = 0xAAAAAAAAAAAAAAABLL * (v36 >> 4);
      while ((int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v35, &__s) << 24) > 0xFFFFFF|| (int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s, v35->second.__r_.__value_.__r.__words) << 24) >= 0x1000000)
      {
        ++v37;
        ++v35;
        if (v37 >= v38)
          goto LABEL_65;
      }
      v39 = 1;
      negate = 1;
    }
    else
    {
LABEL_65:
      v39 = 0;
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if ((v39 & 1) != 0)
      goto LABEL_172;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_99;
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v88, &v88.__r_.__value_.__s.__data_[1]);
  v40 = this->__equivalences_.__begin_;
  v41 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  v42 = (char *)this->__equivalences_.__end_ - (char *)v40;
  if (!v42)
  {
    if ((*((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x80) != 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    goto LABEL_99;
  }
  v43 = 0;
  v44 = v42 / 24;
  v45 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v46 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  else
    v46 = __s.__r_.__value_.__l.__size_;
  if (v44 <= 1)
    v47 = 1;
  else
    v47 = v42 / 24;
  v48 = 1;
  while (2)
  {
    v49 = &v40[v43];
    v50 = HIBYTE(v49->__r_.__value_.__r.__words[2]);
    v51 = (char)v50;
    if ((v50 & 0x80u) != 0)
      v50 = v49->__r_.__value_.__l.__size_;
    if (v46 != v50)
    {
LABEL_92:
      v48 = ++v43 < v44;
      if (v43 == v47)
      {
LABEL_93:
        if ((v41 & 0x80) == 0)
          goto LABEL_95;
        goto LABEL_94;
      }
      continue;
    }
    break;
  }
  if (v51 >= 0)
    v52 = &v40[v43];
  else
    v52 = (std::string *)v49->__r_.__value_.__r.__words[0];
  if ((v41 & 0x80) != 0)
  {
    v83 = negate;
    v55 = v46;
    v82 = v40;
    v56 = memcmp((const void *)v45, v52, *((size_t *)&v45 + 1));
    v40 = v82;
    v46 = v55;
    negate = v83;
    if (!v56)
    {
      negate = 1;
LABEL_94:
      operator delete(__s.__r_.__value_.__l.__data_);
      goto LABEL_95;
    }
    goto LABEL_92;
  }
  if ((_DWORD)v41)
  {
    v53 = &__s;
    v54 = v41;
    while (v53->__r_.__value_.__s.__data_[0] == v52->__r_.__value_.__s.__data_[0])
    {
      v53 = (std::string *)((char *)v53 + 1);
      v52 = (std::string *)((char *)v52 + 1);
      if (!--v54)
      {
        negate = 1;
        goto LABEL_93;
      }
    }
    goto LABEL_92;
  }
  negate = 1;
LABEL_95:
  if (!v48)
  {
LABEL_99:
    if (v88.__r_.__value_.__s.__data_[0] < 0)
      goto LABEL_172;
    v57 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v88.__r_.__value_.__s.__data_[0]] & v57) == 0)
    {
      v58 = (v57 >> 7) & 1;
      if (v88.__r_.__value_.__s.__data_[0] != 95)
        v58 = 0;
      if (v58 != 1)
        goto LABEL_172;
    }
    goto LABEL_104;
  }
LABEL_172:
  if (negate == this->__negate_)
  {
    first = 0;
    v81 = -993;
  }
  else
  {
    a2->__current_ += v8;
    first = this->__first_;
    v81 = -995;
  }
  a2->__do_ = v81;
  a2->__node_ = first;
}

void sub_1B591EB1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a18 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v5;
  void **v6;
  void *__p[2];
  unsigned __int8 v8;

  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, a3, a4, a4 - a3);
  v5 = v8;
  if ((v8 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v8 & 0x80u) != 0)
    v5 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0)
    operator delete(__p[0]);
}

void sub_1B591EBE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, a3, a4, a4 - a3);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a1 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a1;
      else
        v10 = *(_BYTE **)a1;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_1B591ECE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > this->__marked_count_)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E50178](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B591EE64(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<char> *first;
  uint64_t (**v11)();

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    v11 = &off_1E6998A70;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)v11;
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    v11 = &off_1E6998AB8;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &off_1E6998B00;
  *(_QWORD *)(v5 + 8) = v7;
  *(_DWORD *)(v5 + 16) = __i;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1B5E50688);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    v10 = *((_QWORD *)v6 + 1);
  }
  else
  {
    v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E6998AB8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E6998AB8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(v3 + 24 * v2 + 16))
  {
    v4 = (unsigned __int8 **)(v3 + 24 * v2);
    v5 = *v4;
    v6 = v4[1] - *v4;
    v7 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v7 + v6;
        v8 = *(_QWORD *)(result + 8);
        goto LABEL_9;
      }
      v9 = v6;
      v10 = *(unsigned __int8 **)(a2 + 16);
      while (1)
      {
        v12 = *v5++;
        v11 = v12;
        v13 = *v10++;
        if (v11 != v13)
          break;
        if (!--v9)
          goto LABEL_8;
      }
    }
  }
  v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(_QWORD *)(a2 + 80) = v8;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E6998A70;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E6998A70;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(_BYTE *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v5 >= v4)
    {
      v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v5 + v4;
        v6 = *(_QWORD *)(v7 + 8);
        goto LABEL_10;
      }
      v8 = 0;
      while (1)
      {
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)v3 + v8));
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v8));
        if (v9 != (_DWORD)result)
          break;
        if (v4 == ++v8)
        {
          v5 = *(_QWORD *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(_QWORD *)(a2 + 80) = v6;
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  char *v3;
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  int v8;
  unsigned __int8 *v9;
  char *v11;
  std::__node<char> *v12;
  std::__owns_one_state<char> *v13;
  std::__node<char> *first;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int8 *v18;
  _BOOL4 v19;
  uint64_t v20;
  size_t v21;
  int v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  int v25;
  unsigned __int8 *v26;
  size_t v27;
  size_t v28;
  std::basic_regex<char> *v29;
  int v31;
  int v32;

  v3 = (char *)a2;
  if (a2 != a3)
  {
    end = a1->__end_;
    marked_count = a1->__marked_count_;
    v9 = a2 + 1;
    v8 = *a2;
    if ((a2 + 1 != a3 || v8 != 36)
      && ((v8 - 46) > 0x2E || ((1 << (v8 - 46)) & 0x600000000001) == 0))
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
      goto LABEL_29;
    }
    v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(a1, a2, a3);
    if (v11 == v3)
    {
      if (*v3 == 46)
      {
        v12 = (std::__node<char> *)operator new();
        v13 = a1->__end_;
        first = v13->__first_;
        v12->__vftable = (std::__node<char>_vtbl *)&off_1E6998D88;
        v12[1].__vftable = (std::__node<char>_vtbl *)first;
        v13->__first_ = v12;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
        goto LABEL_29;
      }
      v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, v3, (char *)a3);
    }
    if (v11 == v3 && v11 != (char *)a3)
    {
      if (v9 == a3 || *v3 != 92)
        return v3;
      v15 = *v9;
      if (v15 == 40)
      {
        v16 = (uint64_t)(v3 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        v17 = a1->__marked_count_;
        do
        {
          v18 = (unsigned __int8 *)v16;
          v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v16, a3);
        }
        while ((unsigned __int8 *)v16 != v18);
        if (v18 == a3 || v18 + 1 == a3 || *v18 != 92 || v18[1] != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        v11 = (char *)(v18 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v17);
      }
      else
      {
        v19 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v15);
        v20 = 2;
        if (!v19)
          v20 = 0;
        v11 = &v3[v20];
      }
    }
    v9 = (unsigned __int8 *)v11;
    if (v11 != v3)
    {
LABEL_29:
      if (v9 == a3)
        return (char *)a3;
      v21 = a1->__marked_count_ + 1;
      v22 = *v9;
      if (v22 == 42)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, end, marked_count + 1, a1->__marked_count_ + 1, 1);
        return (char *)(v9 + 1);
      }
      if (v9 + 1 == a3 || v22 != 92 || v9[1] != 123)
        return (char *)v9;
      v32 = 0;
      v23 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v9 + 2, a3, &v32);
      if (v23 == v9 + 2)
LABEL_45:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
      if (v23 != a3)
      {
        v24 = v23 + 1;
        v25 = *v23;
        if (v25 == 44)
        {
          v31 = -1;
          v26 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v23 + 1, a3, &v31);
          if (v26 != a3 && v26 + 1 != a3 && *v26 == 92 && v26[1] == 125)
          {
            v28 = v31;
            v27 = v32;
            if (v31 == -1)
            {
              v28 = -1;
            }
            else if (v31 < v32)
            {
              goto LABEL_45;
            }
            v3 = (char *)&v26[2 * (v26[1] == 125)];
            v29 = a1;
LABEL_53:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v29, v27, v28, end, marked_count + 1, v21, 1);
            return v3;
          }
        }
        else if (v24 != a3 && v25 == 92 && *v24 == 125)
        {
          v3 = (char *)(v23 + 2);
          v27 = v32;
          v29 = a1;
          v28 = v32;
          goto LABEL_53;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v3;
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(std::basic_regex<char> *a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int v4;

  v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, char *a3)
{
  int v6;
  int v7;
  char *v8;
  BOOL v9;
  char *v10;
  int v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t (**v19)();
  unsigned __int8 *result;
  int v21;
  BOOL v22;
  unsigned int marked_count;
  std::__owns_one_state<char> *v24;
  unsigned int v25;
  int *p_open_count;
  char *v27;
  char *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  int v32;
  unsigned int v33;
  std::__node<char> *v34;
  std::__owns_one_state<char> *v35;
  std::__node<char> *v36;
  unsigned int v37;
  char *v38;
  int v39;
  int v40;
  std::basic_regex<char> *v41;
  BOOL v42;
  std::basic_regex<char> *v43;
  BOOL v44;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  int v46;
  std::__bracket_expression<char, std::regex_traits<char>> *v47;
  unsigned __int8 *v48;
  std::basic_regex<char> *v49;
  BOOL v50;
  std::basic_regex<char> v51;

  if (a2 == (unsigned __int8 *)a3)
    return a2;
  v6 = (char)*a2;
  v7 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 == (unsigned __int8 *)a3)
        goto LABEL_32;
      v21 = a2[1];
      if (v21 == 66)
      {
        v22 = 1;
      }
      else
      {
        if (v21 != 98)
          goto LABEL_31;
        v22 = 0;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v22);
      return a2 + 2;
    }
    if (v6 != 94)
      goto LABEL_32;
    v15 = operator new();
    v16 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
    v19 = &off_1E6998830;
LABEL_21:
    *(_QWORD *)v15 = v19;
    *(_QWORD *)(v15 + 8) = first;
    *(_BYTE *)(v15 + 16) = v16;
    end->__first_ = (std::__node<char> *)v15;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return a2 + 1;
  }
  if (v6 == 36)
  {
    v15 = operator new();
    v16 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
    v19 = &off_1E6998878;
    goto LABEL_21;
  }
  v9 = v6 == 40;
  v8 = (char *)(a2 + 1);
  v9 = !v9 || v8 == a3;
  if (!v9)
  {
    v10 = (char *)(a2 + 2);
    if (*v8 == 63 && v10 != a3)
    {
      v12 = *v10;
      if (v12 == 33)
      {
        std::regex_traits<char>::regex_traits(&v51.__traits_);
        memset(&v51.__flags_, 0, 40);
        v51.__flags_ = this->__flags_;
        v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v51, a2 + 3, a3);
        marked_count = v51.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v51, 1, this->__marked_count_);
        this->__marked_count_ += marked_count;
        if (v13 == a3 || *v13 != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_30:
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v51.__start_);
        std::locale::~locale(&v51.__traits_.__loc_);
        result = (unsigned __int8 *)(v13 + 1);
        if (v13 + 1 != (char *)a2)
          return result;
        goto LABEL_31;
      }
      if (v12 == 61)
      {
        std::regex_traits<char>::regex_traits(&v51.__traits_);
        memset(&v51.__flags_, 0, 40);
        v51.__flags_ = this->__flags_;
        v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v51, a2 + 3, a3);
        v14 = v51.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v51, 0, this->__marked_count_);
        this->__marked_count_ += v14;
        if (v13 == a3 || *v13 != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        goto LABEL_30;
      }
    }
LABEL_31:
    v7 = *a2;
  }
LABEL_32:
  v24 = this->__end_;
  v25 = this->__marked_count_;
  if ((char)v7 <= 91)
  {
    result = a2;
    switch((char)v7)
    {
      case '$':
      case ')':
        return result;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_60;
      case '(':
        if (a2 + 1 == (unsigned __int8 *)a3)
          goto LABEL_97;
        if (a2 + 2 != (unsigned __int8 *)a3 && a2[1] == 63 && a2[2] == 58)
        {
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 3, a3);
          if (v27 == a3)
            goto LABEL_97;
          v28 = v27;
          if (*v27 != 41)
            goto LABEL_97;
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
          v37 = this->__marked_count_;
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          v38 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 1, a3);
          if (v38 == a3 || (v28 = v38, *v38 != 41))
LABEL_97:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, v37);
        }
        --*p_open_count;
        v30 = (unsigned __int8 *)(v28 + 1);
        goto LABEL_57;
      case '*':
      case '+':
        goto LABEL_64;
      case '.':
        v34 = (std::__node<char> *)operator new();
        v35 = this->__end_;
        v36 = v35->__first_;
        v34->__vftable = (std::__node<char>_vtbl *)&off_1E6998950;
        v34[1].__vftable = (std::__node<char>_vtbl *)v36;
        v35->__first_ = v34;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        goto LABEL_61;
      default:
        if ((char)v7 == 91)
        {
          v30 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, a3);
          goto LABEL_57;
        }
        if ((char)v7 != 63)
          goto LABEL_60;
        goto LABEL_64;
    }
  }
  v29 = ((char)v7 - 92);
  if (v29 > 0x21)
  {
LABEL_60:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v7);
LABEL_61:
    v30 = a2 + 1;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v30, (unsigned __int8 *)a3, v24, v25 + 1, this->__marked_count_ + 1);
  }
  if (((1 << (v7 - 92)) & 0x300000006) != 0)
    return a2;
  if ((char)v7 != 92)
  {
    if (v29 == 31)
LABEL_64:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
    goto LABEL_60;
  }
  if (v7 != 92)
    return a2;
  v31 = a2 + 1;
  if (a2 + 1 == (unsigned __int8 *)a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v32 = *v31;
  v33 = v32 - 48;
  if (v32 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v33);
LABEL_96:
    v30 = a2 + 2;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v30, (unsigned __int8 *)a3, v24, v25 + 1, this->__marked_count_ + 1);
  }
  if ((v32 - 49) > 8)
    goto LABEL_76;
  v30 = a2 + 2;
  if (a2 + 2 == (unsigned __int8 *)a3)
  {
    v30 = (unsigned __int8 *)a3;
  }
  else
  {
    while (1)
    {
      v39 = *v30;
      if ((v39 - 48) > 9)
        break;
      if (v33 >= 0x19999999)
        goto LABEL_98;
      ++v30;
      v33 = v39 + 10 * v33 - 48;
      if (v30 == (unsigned __int8 *)a3)
      {
        v30 = (unsigned __int8 *)a3;
        break;
      }
    }
    if (!v33)
LABEL_98:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  if (v33 > v25)
    goto LABEL_98;
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v33);
  if (v30 == v31)
  {
LABEL_76:
    v40 = (char)*v31;
    if (v40 > 99)
    {
      if (v40 == 119)
      {
        v41 = this;
        v42 = 0;
        goto LABEL_88;
      }
      if (v40 == 115)
      {
        v49 = this;
        v50 = 0;
LABEL_94:
        started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v49, v50);
        v46 = started->__mask_ | 0x4000;
        goto LABEL_95;
      }
      if (v40 != 100)
      {
LABEL_89:
        v48 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(this, a2 + 1, (unsigned __int8 *)a3, 0);
        if (v48 == v31)
          v30 = a2;
        else
          v30 = v48;
        goto LABEL_57;
      }
      v43 = this;
      v44 = 0;
    }
    else
    {
      if (v40 != 68)
      {
        if (v40 != 83)
        {
          if (v40 == 87)
          {
            v41 = this;
            v42 = 1;
LABEL_88:
            v47 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v41, v42);
            v47->__mask_ |= 0x500u;
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v47, 95);
            goto LABEL_96;
          }
          goto LABEL_89;
        }
        v49 = this;
        v50 = 1;
        goto LABEL_94;
      }
      v43 = this;
      v44 = 1;
    }
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v43, v44);
    v46 = started->__mask_ | 0x400;
LABEL_95:
    started->__mask_ = v46;
    goto LABEL_96;
  }
LABEL_57:
  result = a2;
  if (v30 != a2)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v30, (unsigned __int8 *)a3, v24, v25 + 1, this->__marked_count_ + 1);
  return result;
}

void sub_1B591FD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E50178](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B591FDD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1B5E50688);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
  uint64_t v4;
  std::__node<char> *first;

  v4 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v4 = &off_1E69988C0;
  *(_QWORD *)(v4 + 8) = first;
  std::locale::locale((std::locale *)(v4 + 16), &this->__traits_.__loc_);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&this->__traits_.__ct_;
  *(_BYTE *)(v4 + 40) = a2;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  uint64_t v8;
  std::__node<char> *first;
  std::__shared_weak_count *cntrl;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v8 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v8 = &off_1E6998908;
  *(_QWORD *)(v8 + 8) = first;
  std::locale::locale((std::locale *)(v8 + 16), &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *(_QWORD *)(v8 + 56) = a2->__start_.__ptr_;
  *(_QWORD *)(v8 + 64) = cntrl;
  if (cntrl)
  {
    p_shared_owners = (unint64_t *)&cntrl->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  *(_QWORD *)(v8 + 72) = a2->__end_;
  *(_DWORD *)(v8 + 80) = a4;
  *(_BYTE *)(v8 + 84) = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E6998908;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E6998908;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1B5E50688);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  std::vector<std::csub_match>::size_type v4;
  uint64_t v5;
  const char *v6;
  BOOL v7;
  char v8;
  std::vector<std::csub_match>::pointer begin;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  std::sub_match<const char *> *v15;
  uint64_t v16;
  std::vector<std::csub_match> __p;
  std::vector<std::csub_match>::value_type v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  std::vector<std::csub_match>::value_type v23;
  char v24;
  uint64_t v25;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  memset(&v23, 0, 17);
  v24 = 0;
  v25 = 0;
  memset(&__p, 0, sizeof(__p));
  v4 = (*(_DWORD *)(a1 + 44) + 1);
  v5 = *(_QWORD *)(a2 + 16);
  v19.first = *(const char **)(a2 + 24);
  v19.second = v19.first;
  v19.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v19);
  v20 = v5;
  v21 = v5;
  v22 = 0;
  v23 = v19;
  v25 = v5;
  v24 = 1;
  v6 = *(const char **)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v7 = v6 == *(const char **)(a2 + 8);
  else
    v7 = 0;
  v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  begin = __p.__begin_;
  v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin)
      return;
    goto LABEL_14;
  }
  v11 = *(_DWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = 2;
  v14 = 1;
  do
  {
    v15 = &begin[v14];
    v16 = v12 + 24 * (v11 + v13 - 2);
    *(std::pair<const char *, const char *> *)v16 = v15->std::pair<const char *, const char *>;
    *(_BYTE *)(v16 + 16) = v15->matched;
    v14 = v13;
  }
  while (v10 > v13++);
LABEL_14:
  operator delete(begin);
}

void sub_1B5920204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E69988C0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E69988C0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_17;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(_BYTE *)(a2 + 88) & 8) == 0)
    {
      v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  v7 = *(v4 - 1);
  v8 = *v4;
  v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  v11 = (_DWORD)v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    v12 = 0;
    v13 = -993;
  }
  else
  {
    v12 = *(_QWORD *)(result + 8);
    v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(_QWORD *)(a2 + 80) = v12;
  return result;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x80000001B5D5CC98))
    return a1 + 24;
  else
    return 0;
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1B5E50688);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__end_state<char>::~__end_state()
{
  JUMPOUT(0x1B5E50688);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

char *std::vector<__CFString const*>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 61)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(8 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * a2];
  return result;
}

CFIndex ___ZNK20HALS_SettingsManager21GetNumberSettingsKeysEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  CFIndex result;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3)
  {
    CASettingsStorage::RefreshSettings(*(CASettingsStorage **)(v2 + 24));
    result = CFDictionaryGetCount(*(CFDictionaryRef *)(v3 + 16));
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

CFPropertyListRef HALS_SettingsManager::_ReadSetting(CFDictionaryRef *this, const __CFString *a2, uint64_t a3, const void *a4)
{
  CFPropertyListRef DeepCopy;
  CFPropertyListRef propertyList;

  if (!this)
    return 0;
  propertyList = 0;
  CASettingsStorage::CopyCFTypeValue(this, a2, &propertyList, a4);
  DeepCopy = CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE08], propertyList, 0);
  if (propertyList)
    CFRelease(propertyList);
  return DeepCopy;
}

void sub_1B5920628(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B59205E4);
}

void HALS_SettingsManager::_WriteSetting(CFMutableDictionaryRef **this, const __CFString *a2, CFPropertyListRef propertyList)
{
  CFPropertyListRef DeepCopy;

  if (this[3])
  {
    DeepCopy = CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE08], propertyList, 0);
    CASettingsStorage::SetCFTypeValue(this[3], a2, DeepCopy);
    CFRelease(DeepCopy);
  }
}

void sub_1B59206A4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5920680);
}

void CACFNumber::~CACFNumber(CACFNumber *this)
{
  const void *v2;

  if (*((_BYTE *)this + 8))
  {
    v2 = *(const void **)this;
    if (*(_QWORD *)this)
      CFRelease(v2);
  }
}

uint64_t ___ZN20HALS_SettingsManager12ForceRefreshEv_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 32) + 48) = 1;
  return result;
}

uint64_t HALS_SettingsManager::ReadSetting(HALS_SettingsManager *this, const __CFString *a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  _QWORD block[7];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v2 = *((_QWORD *)this + 2);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN20HALS_SettingsManager11ReadSettingEPK10__CFString_block_invoke;
  block[3] = &unk_1E69744F0;
  block[4] = &v7;
  block[5] = this;
  block[6] = a2;
  v3 = atomic_load((unsigned __int8 *)(v2 + 32));
  if ((v3 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(v2 + 33));
  dispatch_sync(*(dispatch_queue_t *)v2, block);
  v4 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v4;
}

CFPropertyListRef ___ZN20HALS_SettingsManager11ReadSettingEPK10__CFString_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CFPropertyListRef result;

  result = HALS_SettingsManager::_ReadSetting(*(CFDictionaryRef **)(*(_QWORD *)(a1 + 40) + 24), *(const __CFString **)(a1 + 48), a3, a4);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void HALS_SettingsManager::WriteSetting(HALS_SettingsManager *this, CFTypeRef cf, const void *a3)
{
  uint64_t v6;
  CFTypeRef v7;
  CFTypeRef v8;
  unsigned __int8 v9;
  NSObject *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  CFTypeRef v15;
  CFTypeRef v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef cfa;
  uint64_t v26;

  if (cf)
  {
    CFRetain(cf);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cfa, cf);
  }
  else
  {
    cfa = 0;
  }
  mcp_applesauce::CF::PropertyListRef::from_get((mcp_applesauce::CF::PropertyListRef *)&v24, a3);
  v6 = *((_QWORD *)this + 2);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v20, *(_QWORD *)this, *((std::__shared_weak_count **)this + 1));
  v7 = cfa;
  if (cfa)
    CFRetain(cfa);
  v22 = v7;
  v8 = v24;
  if (v24)
    CFRetain(v24);
  v23 = v8;
  v9 = atomic_load((unsigned __int8 *)(v6 + 32));
  if ((v9 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(v6 + 33));
  v10 = *(NSObject **)v6;
  v11 = (_QWORD *)operator new();
  v12 = v21;
  *v11 = v20;
  v11[1] = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = v22;
  if (v22)
    CFRetain(v22);
  v11[2] = v15;
  v16 = v23;
  if (v23)
    CFRetain(v23);
  v11[3] = v16;
  v26 = 0;
  dispatch_async_f(v10, v11, (dispatch_function_t)applesauce::dispatch::v1::async<HALS_SettingsManager::WriteSetting(__CFString const*,void const*)::$_0 &>(dispatch_queue_s *,HALS_SettingsManager::WriteSetting(__CFString const*,void const*)::$_0 &)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<HALS_SettingsManager::WriteSetting(__CFString const*,void const*)::$_0,std::default_delete<HALS_SettingsManager::WriteSetting(__CFString const*,void const*)::$_0>>::~unique_ptr[abi:ne180100](&v26);
  if (v23)
    CFRelease(v23);
  if (v22)
    CFRelease(v22);
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v24)
    CFRelease(v24);
  if (cfa)
    CFRelease(cfa);
}

void sub_1B59209A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  const void *v7;
  va_list va;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, const void *);
  mcp_applesauce::CF::PropertyListRef::~PropertyListRef((const void **)va);
  applesauce::CF::StringRef::~StringRef((const void **)va1);
  _Unwind_Resume(a1);
}

uint64_t *applesauce::dispatch::v1::async<HALS_SettingsManager::WriteSetting(__CFString const*,void const*)::$_0 &>(dispatch_queue_s *,HALS_SettingsManager::WriteSetting(__CFString const*,void const*)::$_0 &)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  HALS_SettingsManager::_WriteSetting(*(CFMutableDictionaryRef ***)a1, *(const __CFString **)(a1 + 16), *(CFPropertyListRef *)(a1 + 24));
  return std::unique_ptr<HALS_SettingsManager::WriteSetting(__CFString const*,void const*)::$_0,std::default_delete<HALS_SettingsManager::WriteSetting(__CFString const*,void const*)::$_0>>::~unique_ptr[abi:ne180100](&v2);
}

void sub_1B5920A04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<HALS_SettingsManager::WriteSetting(__CFString const*,void const*)::$_0,std::default_delete<HALS_SettingsManager::WriteSetting(__CFString const*,void const*)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<HALS_SettingsManager::WriteSetting(__CFString const*,void const*)::$_0,std::default_delete<HALS_SettingsManager::WriteSetting(__CFString const*,void const*)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  uint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(const void **)(v2 + 24);
    if (v3)
      CFRelease(v3);
    v4 = *(const void **)(v2 + 16);
    if (v4)
      CFRelease(v4);
    v5 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
    MEMORY[0x1B5E50688](v5, 0xE0C402E8C7BDELL);
  }
  return a1;
}

uint64_t HALS_SettingsManager::HasServerSetting(HALS_SettingsManager *this, const __CFString *a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  _QWORD block[7];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v2 = *((_QWORD *)this + 2);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN20HALS_SettingsManager16HasServerSettingEPK10__CFString_block_invoke;
  block[3] = &unk_1E6974560;
  block[4] = &v7;
  block[5] = this;
  block[6] = CFSTR("AirPlayIsAlwaysTransient");
  v3 = atomic_load((unsigned __int8 *)(v2 + 32));
  if ((v3 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(v2 + 33));
  dispatch_sync(*(dispatch_queue_t *)v2, block);
  v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v4;
}

CFIndex ___ZN20HALS_SettingsManager16HasServerSettingEPK10__CFString_block_invoke(CFIndex result)
{
  CFIndex v1;
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  BOOL v5;

  v1 = result;
  v2 = *(_QWORD *)(result + 40);
  v3 = *(_QWORD *)(v2 + 32);
  if (v3)
  {
    v4 = *(const void **)(result + 48);
    CASettingsStorage::RefreshSettings(*(CASettingsStorage **)(v2 + 32));
    result = CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v3 + 16), v4);
    v5 = result > 0;
  }
  else
  {
    v5 = 0;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24) = v5;
  return result;
}

uint64_t HALS_SettingsManager::ReadServerSetting(HALS_SettingsManager *this, const __CFString *a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  _QWORD block[7];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v2 = *((_QWORD *)this + 2);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN20HALS_SettingsManager17ReadServerSettingEPK10__CFString_block_invoke;
  block[3] = &unk_1E6974588;
  block[4] = &v7;
  block[5] = this;
  block[6] = a2;
  v3 = atomic_load((unsigned __int8 *)(v2 + 32));
  if ((v3 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(v2 + 33));
  dispatch_sync(*(dispatch_queue_t *)v2, block);
  v4 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_1B5920C98(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5920C78);
}

uint64_t HALS_SettingsManager::ReadServerIntSetting(HALS_SettingsManager *this, const __CFString *a2)
{
  const __CFNumber *ServerSetting;
  CFTypeID v3;
  CFNumberType Type;
  uint64_t v5;
  CFNumberRef number;
  char v8;
  unsigned int valuePtr;

  valuePtr = 0;
  ServerSetting = (const __CFNumber *)HALS_SettingsManager::ReadServerSetting(this, CFSTR("RingBufferMode"));
  number = ServerSetting;
  v8 = 1;
  if (ServerSetting && (v3 = CFGetTypeID(ServerSetting), v3 == CFNumberGetTypeID()))
  {
    Type = CFNumberGetType(number);
    CFNumberGetValue(number, Type, &valuePtr);
    v5 = valuePtr;
  }
  else
  {
    v5 = 0;
  }
  CACFObject<void const*>::~CACFObject((uint64_t)&number);
  return v5;
}

void sub_1B5920D2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CACFObject<void const*>::~CACFObject((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_SettingsManager::ReadServerBooleanSetting(HALS_SettingsManager *this, const __CFString *a2, uint64_t a3)
{
  const __CFBoolean *ServerSetting;
  CFTypeID v5;
  BOOL v6;
  CFTypeID v7;
  uint64_t valuePtr;
  CFBooleanRef BOOLean;
  char v11;

  ServerSetting = (const __CFBoolean *)HALS_SettingsManager::ReadServerSetting(this, a2);
  BOOLean = ServerSetting;
  v11 = 1;
  if (ServerSetting)
  {
    v5 = CFGetTypeID(ServerSetting);
    if (v5 == CFBooleanGetTypeID())
    {
      v6 = CFBooleanGetValue(BOOLean) == 0;
    }
    else
    {
      v7 = CFGetTypeID(BOOLean);
      if (v7 != CFNumberGetTypeID())
        goto LABEL_9;
      valuePtr = 0;
      CFNumberGetValue(BOOLean, kCFNumberSInt64Type, &valuePtr);
      v6 = valuePtr == 0;
    }
    a3 = !v6;
  }
LABEL_9:
  CACFObject<void const*>::~CACFObject((uint64_t)&BOOLean);
  return a3;
}

void sub_1B5920DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  CACFObject<void const*>::~CACFObject((uint64_t)va);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Manifest_Counter::start(uint64_t a1, AMCP::DAL::DAL_Time *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  double sample_time;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *exception;
  __int128 v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  std::string v20;
  std::logic_error v21;
  std::logic_error v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint8_t buf[8];
  __int16 v30;
  char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  _BYTE v35[14];
  const char *v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)a2 + 3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 4);
  if (!v4)
  {
    if (v5 == *(_QWORD *)(a1 + 24))
      goto LABEL_9;
LABEL_11:
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v11 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v13;
      v30 = 2080;
      v31 = "Manifest_Counter.cpp";
      v32 = 1024;
      v33 = 22;
      v34 = 2080;
      *(_QWORD *)v35 = "not (anchor_time.get_clock() == m_master_timebase)";
      _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v20);
    std::logic_error::logic_error(&v21, &v20);
    v21.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v23 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    *(_QWORD *)&v35[6] = "void AMCP::Graph::Manifest_Counter::start(const DAL_Time &)";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Counter.cpp";
    v37 = 22;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  v8 = *(_QWORD *)(a1 + 24);
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (v5 != v8)
    goto LABEL_11;
LABEL_9:
  sample_time = AMCP::DAL::DAL_Time::get_sample_time(a2);
  *(double *)(a1 + 8) = sample_time;
  *(double *)(a1 + 16) = sample_time;
  *(_BYTE *)a1 = 1;
}

void sub_1B5921084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 112) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 104);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 104) = 0;
  MEMORY[0x1B5E500E8](v29 - 128);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 129));
  _Unwind_Resume(a1);
}

double AMCP::Graph::Manifest_Counter::advance(uint64_t a1, double a2)
{
  double result;
  NSObject *v3;
  _opaque_pthread_t *v4;
  mach_port_t v5;
  void *exception;
  __int128 v7;
  uint64_t v8;
  uint64_t (**v9)();
  __int128 v10;
  uint64_t v11;
  std::string v12;
  std::logic_error v13;
  std::logic_error v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint8_t buf[8];
  __int16 v22;
  char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  _BYTE v27[14];
  const char *v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)a1)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v3 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = pthread_self();
      v5 = pthread_mach_thread_np(v4);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v5;
      v22 = 2080;
      v23 = "Manifest_Counter.cpp";
      v24 = 1024;
      v25 = 58;
      v26 = 2080;
      *(_QWORD *)v27 = "not (is_running())";
      _os_log_error_impl(&dword_1B57BA000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v12);
    std::logic_error::logic_error(&v13, &v12);
    v13.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v14, &v13);
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = -1;
    v14.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v15 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    *(_QWORD *)&v27[6] = "void AMCP::Graph::Manifest_Counter::advance(Sample_Time)";
    v28 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Counter.cpp";
    v29 = 58;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v7);
    v10 = v7;
    v11 = v8;
    v7 = 0uLL;
    v8 = 0;
    v9 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v9);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  result = a2 + *(double *)(a1 + 16);
  *(double *)(a1 + 16) = result;
  ++*(_DWORD *)(a1 + 40);
  return result;
}

void sub_1B5921394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

double AMCP::Graph::Manifest_Counter::adjust_cycle_anchor_for_buffer_size_change(double *a1, double a2)
{
  double result;
  NSObject *v3;
  _opaque_pthread_t *v4;
  mach_port_t v5;
  void *exception;
  __int128 v7;
  uint64_t v8;
  uint64_t (**v9)();
  __int128 v10;
  uint64_t v11;
  std::string v12;
  std::logic_error v13;
  std::logic_error v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint8_t buf[8];
  __int16 v22;
  char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  _BYTE v27[14];
  const char *v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)a1)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v3 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = pthread_self();
      v5 = pthread_mach_thread_np(v4);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v5;
      v22 = 2080;
      v23 = "Manifest_Counter.cpp";
      v24 = 1024;
      v25 = 67;
      v26 = 2080;
      *(_QWORD *)v27 = "not (is_running())";
      _os_log_error_impl(&dword_1B57BA000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v12);
    std::logic_error::logic_error(&v13, &v12);
    v13.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v14, &v13);
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = -1;
    v14.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v15 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    *(_QWORD *)&v27[6] = "void AMCP::Graph::Manifest_Counter::adjust_cycle_anchor_for_buffer_size_change(Sample_Time)";
    v28 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Counter.cpp";
    v29 = 67;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v7);
    v10 = v7;
    v11 = v8;
    v7 = 0uLL;
    v8 = 0;
    v9 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v9);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  result = a2 + a1[2];
  a1[2] = result;
  return result;
}

void sub_1B5921698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Manifest_Counter::get_anchor_time(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  void *exception;
  __int128 v11;
  uint64_t v12;
  uint64_t (**v13)();
  __int128 v14;
  uint64_t v15;
  std::string v16;
  std::logic_error v17;
  std::logic_error v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint8_t buf[8];
  __int16 v26;
  char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  _BYTE v31[14];
  const char *v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)a2)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v7 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v9;
      v26 = 2080;
      v27 = "Manifest_Counter.cpp";
      v28 = 1024;
      v29 = 75;
      v30 = 2080;
      *(_QWORD *)v31 = "not (is_running())";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v24);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v16);
    std::logic_error::logic_error(&v17, &v16);
    v17.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v18, &v17);
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = -1;
    v18.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v19 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v18);
    *(_QWORD *)&v31[6] = "DAL_Time AMCP::Graph::Manifest_Counter::get_anchor_time() const";
    v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Counter.cpp";
    v33 = 75;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v11);
    v14 = v11;
    v15 = v12;
    v11 = 0uLL;
    v12 = 0;
    v13 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v13);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_DWORD *)this = 2;
  *(_QWORD *)(this + 8) = v2;
  *(_QWORD *)(this + 16) = 0;
  *(_OWORD *)(this + 24) = v3;
  return this;
}

void sub_1B59219C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Manifest_Counter::get_current_cycle_anchor_time(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  void *exception;
  __int128 v11;
  uint64_t v12;
  uint64_t (**v13)();
  __int128 v14;
  uint64_t v15;
  std::string v16;
  std::logic_error v17;
  std::logic_error v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint8_t buf[8];
  __int16 v26;
  char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  _BYTE v31[14];
  const char *v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)a2)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v7 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v9;
      v26 = 2080;
      v27 = "Manifest_Counter.cpp";
      v28 = 1024;
      v29 = 83;
      v30 = 2080;
      *(_QWORD *)v31 = "not (is_running())";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v24);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v16);
    std::logic_error::logic_error(&v17, &v16);
    v17.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v18, &v17);
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = -1;
    v18.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v19 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v18);
    *(_QWORD *)&v31[6] = "DAL_Time AMCP::Graph::Manifest_Counter::get_current_cycle_anchor_time() const";
    v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Counter.cpp";
    v33 = 83;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v11);
    v14 = v11;
    v15 = v12;
    v11 = 0uLL;
    v12 = 0;
    v13 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v13);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_DWORD *)this = 2;
  *(_QWORD *)(this + 8) = v2;
  *(_QWORD *)(this + 16) = 0;
  *(_OWORD *)(this + 24) = v3;
  return this;
}

void sub_1B5921CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

double AMCP::Graph::Manifest_Counter::get_cycle_anchor_for_timebase(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double result;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_OWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  LODWORD(v20) = 2;
  *((_QWORD *)&v20 + 1) = v5;
  v21 = 0;
  v22 = v6;
  v11 = *(_QWORD *)(a2 + 24);
  v10 = *(std::__shared_weak_count **)(a2 + 32);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v14 = *a3;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    if (v14 != v11)
      goto LABEL_12;
LABEL_18:
    *(_OWORD *)a1 = v20;
    *(_QWORD *)(a1 + 16) = v21;
    result = *(double *)&v22;
    *(_OWORD *)(a1 + 24) = v22;
    return result;
  }
  if (*a3 == v11)
    goto LABEL_18;
LABEL_12:
  AMCP::DAL::DAL_Time::translate_time(a1, (AMCP::DAL::DAL_Time *)&v20, a3);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return result;
}

void sub_1B5921F34(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

double AMCP::DAL::DAL_Time::floor(AMCP::DAL::DAL_Time *this, uint64_t a2)
{
  double sample_time;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  double result;

  sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a2);
  v5 = *(_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_DWORD *)this = 2;
  result = floor(sample_time);
  *((double *)this + 1) = result;
  *((_QWORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 24) = v5;
  return result;
}

AMCP::DAL::DAL_Time *boost::operators_impl::operator-(AMCP::DAL::DAL_Time *a1, uint64_t a2, AMCP::DAL::DAL_Time_Delta *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *((_QWORD *)a1 + 2) = *(_QWORD *)(a2 + 16);
  *((_QWORD *)a1 + 3) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *((_QWORD *)a1 + 4) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return AMCP::DAL::DAL_Time::operator-=(a1, a3);
}

void sub_1B5922000(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Manifest_Counter::calculate_buffer_start(AMCP::DAL::DAL_Time *a1, uint64_t a2, uint64_t *a3, uint64_t a4, AMCP::DAL::DAL_Time_Delta *a5, float a6)
{
  int v8;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  __n128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  __int128 v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  _BYTE v62[32];
  std::__shared_weak_count *v63;
  uint8_t buf[8];
  double v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;

  v8 = a4;
  v68 = *MEMORY[0x1E0C80C00];
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a3 + 144))(*a3, a4);
  v13 = v12;
  v14 = HIDWORD(v12);
  if (v8)
  {
    AMCP::Graph::Manifest_Counter::get_cycle_anchor_for_timebase((uint64_t)v62, a2, a3);
    AMCP::DAL::DAL_Time::floor((AMCP::DAL::DAL_Time *)buf, (uint64_t)v62);
    boost::operators_impl::operator-(a1, (uint64_t)buf, a5);
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
    if (*((_QWORD *)&v67 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = *(_OWORD *)a3;
    v19 = a3[1];
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    *(_DWORD *)buf = 2;
    v65 = (double)v13;
    v66 = 0;
    v67 = v18;
    AMCP::DAL::DAL_Time::operator-=(a1, (AMCP::DAL::DAL_Time_Delta *)buf);
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
    if (*((_QWORD *)&v67 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = *(_OWORD *)a3;
    v26 = a3[1];
    if (v26)
    {
      v27 = (unint64_t *)(v26 + 8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    *(_DWORD *)buf = 2;
    v65 = (double)v14;
    v66 = 0;
    v67 = v25;
    AMCP::DAL::DAL_Time::operator-=(a1, (AMCP::DAL::DAL_Time_Delta *)buf);
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
    if (*((_QWORD *)&v67 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    if ((*(_DWORD *)a1 & 0xFFFFFFFE) == 2)
      v29.n128_f64[0] = AMCP::DAL::DAL_Time::get_sample_time(a1);
    v33 = v63;
    if (v63)
    {
      p_shared_owners = (unint64_t *)&v63->__shared_owners_;
      do
        v35 = __ldaxr(p_shared_owners);
      while (__stlxr(v35 - 1, p_shared_owners));
LABEL_62:
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v33->__on_zero_shared)(v33, v29);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }
  else
  {
    AMCP::Graph::Manifest_Counter::get_cycle_anchor_for_timebase((uint64_t)v62, a2, a3);
    AMCP::DAL::DAL_Time::floor(a1, (uint64_t)v62);
    v36 = *(_OWORD *)a3;
    v37 = a3[1];
    if (v37)
    {
      v38 = (unint64_t *)(v37 + 8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    *(_DWORD *)buf = 2;
    v65 = (double)v13;
    v66 = 0;
    v67 = v36;
    AMCP::DAL::DAL_Time::operator+=(a1, (uint64_t)buf);
    v40 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
    if (*((_QWORD *)&v67 + 1))
    {
      v41 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = *(_OWORD *)a3;
    v44 = a3[1];
    if (v44)
    {
      v45 = (unint64_t *)(v44 + 8);
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    *(_DWORD *)buf = 2;
    v65 = (double)v14;
    v66 = 0;
    v67 = v43;
    AMCP::DAL::DAL_Time::operator+=(a1, (uint64_t)buf);
    v47 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
    if (*((_QWORD *)&v67 + 1))
    {
      v48 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v51 = *((_QWORD *)a5 + 3);
    v50 = (std::__shared_weak_count *)*((_QWORD *)a5 + 4);
    v58 = *(_OWORD *)a5;
    v59 = *((_QWORD *)a5 + 2);
    v60 = v51;
    v61 = v50;
    if (v50)
    {
      v52 = (unint64_t *)&v50->__shared_owners_;
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
    if ((v58 & 1) != 0)
      v59 = (uint64_t)(a6 * (double)v59);
    if ((v58 & 2) != 0)
      *((double *)&v58 + 1) = *((double *)&v58 + 1) * a6;
    AMCP::DAL::DAL_Time::operator+=(a1, (uint64_t)&v58);
    if ((*(_DWORD *)a1 & 0xFFFFFFFE) == 2)
      v29.n128_f64[0] = AMCP::DAL::DAL_Time::get_sample_time(a1);
    v54 = v61;
    if (v61)
    {
      v55 = (unint64_t *)&v61->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v54->__on_zero_shared)(v54, v29);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v33 = v63;
    if (v63)
    {
      v57 = (unint64_t *)&v63->__shared_owners_;
      do
        v35 = __ldaxr(v57);
      while (__stlxr(v35 - 1, v57));
      goto LABEL_62;
    }
  }
}

void sub_1B5922930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, void *__p, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,std::__shared_weak_count *a49)
{
  uint64_t v49;
  unint64_t *p_shared_owners;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;

  if (a29)
  {
    p_shared_owners = (unint64_t *)&a29->__shared_owners_;
    do
      v52 = __ldaxr(p_shared_owners);
    while (__stlxr(v52 - 1, p_shared_owners));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))a29->__on_zero_shared)(a29);
      std::__shared_weak_count::__release_weak(a29);
    }
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v49 + 24);
  if (a49)
  {
    v53 = (unint64_t *)&a49->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))a49->__on_zero_shared)(a49);
      std::__shared_weak_count::__release_weak(a49);
    }
  }
  _Unwind_Resume(a1);
}

void AMCP::IOAudio1::Engine::~Engine(AMCP::IOAudio1::Engine *this)
{
  AMCP::IOAudio1::Engine::~Engine(this);
  JUMPOUT(0x1B5E50688);
}

{
  unsigned int *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  const void *v7;
  std::__shared_weak_count *v8;
  void **v9;

  *(_QWORD *)this = &off_1E69745B8;
  AMCP::IOAudio1::Engine::set_transport_state((uint64_t)this, 0);
  v9 = (void **)((char *)this + 768);
  std::vector<std::vector<std::byte>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)((char *)this + 744);
  std::vector<std::vector<std::byte>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v2 = (unsigned int *)*((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v2)
    std::default_delete<applesauce::iokit::mapped_memory>::operator()[abi:ne180100](v2);
  IOConnectRelease(*((_DWORD *)this + 181));
  AMCP::IO_Clock::~IO_Clock((AMCP::IOAudio1::Engine *)((char *)this + 560));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::IOAudio1::Engine *)((char *)this + 240));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 224);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 208);
  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
    operator delete(v3);
  v4 = (void *)*((_QWORD *)this + 18);
  if (v4)
    operator delete(v4);
  v5 = (void *)*((_QWORD *)this + 12);
  if (v5)
  {
    *((_QWORD *)this + 13) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 9);
  if (v6)
  {
    *((_QWORD *)this + 10) = v6;
    operator delete(v6);
  }
  v7 = (const void *)*((_QWORD *)this + 3);
  if (v7)
    CFRelease(v7);
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

_QWORD *AMCP::IOAudio1::Engine::get_device_uid@<X0>(const void **this@<X0>, _QWORD *a2@<X8>)
{
  return AMCP::Core::Implementation::Simple_Engine_Data::get_device_uid(a2, this[3]);
}

double AMCP::IOAudio1::Engine::get_sample_rate(AMCP::IOAudio1::Engine *this)
{
  return *((double *)this + 4);
}

uint64_t AMCP::IOAudio1::Engine::get_max_io_buffer_frame_size(AMCP::IOAudio1::Engine *this)
{
  return (3 * *((_DWORD *)this + 10)) >> 3;
}

uint64_t AMCP::IOAudio1::Engine::get_suggested_ring_buffer_frame_size(AMCP::IOAudio1::Engine *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t AMCP::IOAudio1::Engine::get_clock_domain(AMCP::IOAudio1::Engine *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t AMCP::IOAudio1::Engine::supports_prewarming(AMCP::IOAudio1::Engine *this)
{
  return *((unsigned __int8 *)this + 48);
}

BOOL AMCP::IOAudio1::Engine::has_input_streams(AMCP::IOAudio1::Engine *this)
{
  return *((_QWORD *)this + 9) != *((_QWORD *)this + 10);
}

BOOL AMCP::IOAudio1::Engine::has_output_streams(AMCP::IOAudio1::Engine *this)
{
  return *((_QWORD *)this + 12) != *((_QWORD *)this + 13);
}

uint64_t AMCP::IOAudio1::Engine::get_input_safety_offset(AMCP::IOAudio1::Engine *this)
{
  return *((unsigned int *)this + 13);
}

uint64_t AMCP::IOAudio1::Engine::get_output_safety_offset(AMCP::IOAudio1::Engine *this)
{
  return *((unsigned int *)this + 14);
}

uint64_t AMCP::IOAudio1::Engine::get_input_latency(AMCP::IOAudio1::Engine *this)
{
  return *((unsigned int *)this + 15);
}

uint64_t AMCP::IOAudio1::Engine::get_output_latency(AMCP::IOAudio1::Engine *this)
{
  return *((unsigned int *)this + 16);
}

void AMCP::IOAudio1::Engine::get_input_format_list(AMCP::IOAudio1::Engine *this@<X0>, AMCP::Core::Implementation::Simple_Engine_Data *a2@<X8>)
{
  AMCP::Core::Implementation::Simple_Engine_Data::get_input_format_list(a2, *((_QWORD *)this + 9), *((_QWORD *)this + 10));
}

void AMCP::IOAudio1::Engine::get_output_format_list(AMCP::IOAudio1::Engine *this@<X0>, AMCP::Core::Implementation::Simple_Engine_Data *a2@<X8>)
{
  AMCP::Core::Implementation::Simple_Engine_Data::get_output_format_list(a2, *((_QWORD *)this + 12), *((_QWORD *)this + 13));
}

__n128 AMCP::IOAudio1::Engine::get_stream_format@<Q0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;

  v4 = a1 + 72;
  v5 = 72;
  if (!a2)
  {
    v5 = 96;
    v4 = a1 + 96;
  }
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(v4 + 8);
  while (1)
  {
    if (v6 == v7)
    {
      *(_QWORD *)(a4 + 32) = 0;
      result.n128_u64[0] = 0;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      return result;
    }
    if (*(_DWORD *)v6 == a3)
      break;
    v6 += 56;
  }
  result = *(__n128 *)(v6 + 16);
  v9 = *(_OWORD *)(v6 + 32);
  *(__n128 *)a4 = result;
  *(_OWORD *)(a4 + 16) = v9;
  *(_QWORD *)(a4 + 32) = *(_QWORD *)(v6 + 48);
  return result;
}

uint64_t AMCP::IOAudio1::Engine::get_transport_state(AMCP::IOAudio1::Engine *this)
{
  return atomic_load((unsigned int *)this + 34);
}

uint64_t *AMCP::IOAudio1::Engine::set_transport_state(uint64_t a1, signed int a2)
{
  int v4;
  int v5;
  BOOL v6;
  unsigned int *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  size_t v19;
  mach_port_t v20;
  unsigned int *v21;
  unsigned int *j;
  uint64_t v23;
  uint64_t v24;
  mach_port_t v25;
  mach_port_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  mach_port_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *result;
  std::runtime_error *exception;
  std::runtime_error *v38;
  std::runtime_error *v39;
  std::runtime_error *v40;
  int v41;
  uint64_t v42;
  char v43;
  void *__p;
  _BYTE *v45;

  v4 = atomic_load((unsigned int *)(a1 + 136));
  v5 = MEMORY[0x1B5E5064C]();
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 720));
  if (v4)
    v6 = 1;
  else
    v6 = a2 < 1;
  if (v6)
  {
    if (v4 >= 1 && a2 == 0)
      AMCP::IOAudio1::Engine::stop((AMCP::IOAudio1::Engine *)a1);
  }
  else
  {
    AMCP::Core::Implementation::Simple_Engine_IO_State::take_power_assertions((uint64_t *)(a1 + 120));
    AMCP::IO_Clock::reset_time((os_unfair_lock_s *)(a1 + 560));
    v8 = (unsigned int *)operator new();
    applesauce::iokit::mapped_memory::mapped_memory(v8, *(_DWORD *)(a1 + 724), 0);
    v10 = *(unsigned int **)(a1 + 728);
    *(_QWORD *)(a1 + 728) = v8;
    if (v10)
      std::default_delete<applesauce::iokit::mapped_memory>::operator()[abi:ne180100](v10);
    v11 = MEMORY[0x1B5E5064C](0, v9);
    v41 = v11;
    v42 = a1;
    v15 = MEMORY[0x1B5E5064C](v11, v12, v13, v14);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v17 = *(_QWORD *)(a1 + 72);
    for (i = *(_QWORD *)(a1 + 80); v17 != i; v17 += 56)
    {
      v19 = v16 * *(unsigned int *)(v17 + 40) + 16;
      v43 = 0;
      std::vector<std::byte>::vector(&__p, v19, &v43);
      v20 = *(_DWORD *)(a1 + 724);
      if (!v20)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "cannot create io_connect_proxy from null io_object");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone,unsigned int const&,unsigned long,unsigned long,unsigned int &>(v20, *(_DWORD *)(v17 + 4), (uint64_t)__p, v45 - (_BYTE *)__p, *(_DWORD *)(a1 + 736));
      std::vector<std::vector<std::byte>>::push_back[abi:ne180100]((char **)(a1 + 744), (uint64_t)&__p);
      if (__p)
      {
        v45 = __p;
        operator delete(__p);
      }
    }
    v21 = *(unsigned int **)(a1 + 96);
    for (j = *(unsigned int **)(a1 + 104); v21 != j; v21 += 14)
    {
      v23 = v21[10];
      if ((_DWORD)v23)
        v24 = v16 * v23;
      else
        v24 = v21[8];
      v43 = 0;
      std::vector<std::byte>::vector(&__p, v24 + 16, &v43);
      v25 = *(_DWORD *)(a1 + 724);
      if (!v25)
      {
        v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v38, "cannot create io_connect_proxy from null io_object");
        __cxa_throw(v38, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone,unsigned int const&,unsigned long,unsigned long,unsigned int &>(v25, v21[1], (uint64_t)__p, v45 - (_BYTE *)__p, *(_DWORD *)(a1 + 736));
      std::vector<std::vector<std::byte>>::push_back[abi:ne180100]((char **)(a1 + 768), (uint64_t)&__p);
      if (__p)
      {
        v45 = __p;
        operator delete(__p);
      }
    }
    kdebug_trace();
    v26 = *(_DWORD *)(a1 + 724);
    if (!v26)
    {
      v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v39, "cannot create io_connect_proxy from null io_object");
      __cxa_throw(v39, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone>(v26, 3u, 0, 0);
    v27 = kdebug_trace();
    v28 = MEMORY[0x1B5E5064C](v27);
    v29 = v28;
    v31 = MEMORY[0x1B5E5064C](v28, v30);
    if ((int)v31 > v29)
    {
      v33 = *(_DWORD *)(a1 + 724);
      if (!v33)
      {
        v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v40, "cannot create io_connect_proxy from null io_object");
        __cxa_throw(v40, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone>(v33, 4u, 0, 0);
    }
    if ((int)MEMORY[0x1B5E5064C](v31, v32) > v15)
      AMCP::IOAudio1::Engine::release_buffers((AMCP::IOAudio1::Engine *)a1);
    applesauce::raii::v1::detail::ScopeGuard<AMCP::IOAudio1::Engine::start(void)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)&v41);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 720));
  atomic_store(a2, (unsigned int *)(a1 + 136));
  result = (uint64_t *)MEMORY[0x1B5E5064C](v34, v35);
  if ((int)result > v5)
  {
    atomic_store(0, (unsigned int *)(a1 + 136));
    return AMCP::IOAudio1::Engine::stop((AMCP::IOAudio1::Engine *)a1);
  }
  return result;
}

void sub_1B5923190(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  __cxa_free_exception(v11);
  __clang_call_terminate(a1);
}

void sub_1B59231C4()
{
  uint64_t v0;

  MEMORY[0x1B5E50688](v0, 0x1000C4017768742);
  JUMPOUT(0x1B5923254);
}

void sub_1B59231E4()
{
  JUMPOUT(0x1B5923254);
}

void sub_1B59231EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  os_unfair_lock_s *v15;
  AMCP::IOAudio1::Engine *v16;
  int v17;

  if ((int)MEMORY[0x1B5E5064C]() > v17)
    AMCP::IOAudio1::Engine::release_buffers(v16);
  applesauce::raii::v1::detail::ScopeGuard<AMCP::IOAudio1::Engine::start(void)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)&a11);
  os_unfair_lock_unlock(v15);
  applesauce::raii::v1::detail::ScopeGuard<AMCP::IOAudio1::Engine::set_transport_state(AMCP::Transport_State)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B5923220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  if (a14)
    operator delete(a14);
  JUMPOUT(0x1B5923238);
}

void AMCP::IOAudio1::Engine::get_input_stream_active_list(os_unfair_lock_s *this@<X0>, AMCP::Core::Implementation::Simple_Engine_IO_State *a2@<X8>)
{
  AMCP::Core::Implementation::Simple_Engine_IO_State::get_input_stream_active_list(a2, this + 30);
}

void AMCP::IOAudio1::Engine::set_input_stream_active_list(uint64_t a1, uint64_t a2)
{
  void *__p;

  AMCP::Core::Implementation::Simple_Engine_IO_State::set_input_stream_active_list(&__p, a1 + 120, a2);
  if (__p)
    operator delete(__p);
}

void AMCP::IOAudio1::Engine::get_output_stream_active_list(os_unfair_lock_s *this@<X0>, AMCP::Core::Implementation::Simple_Engine_IO_State *a2@<X8>)
{
  AMCP::Core::Implementation::Simple_Engine_IO_State::get_output_stream_active_list(a2, this + 30);
}

void AMCP::IOAudio1::Engine::set_output_stream_active_list(uint64_t a1, uint64_t a2)
{
  void *__p;

  AMCP::Core::Implementation::Simple_Engine_IO_State::set_output_stream_active_list(&__p, a1 + 120, a2);
  if (__p)
    operator delete(__p);
}

uint64_t AMCP::IOAudio1::Engine::supports_past_data(AMCP::IOAudio1::Engine *this)
{
  return 0;
}

uint64_t AMCP::IOAudio1::Engine::is_past_data_enabled(AMCP::IOAudio1::Engine *this)
{
  return 0;
}

uint64_t AMCP::IOAudio1::Engine::set_past_data_enabled(AMCP::IOAudio1::Engine *this)
{
  return 0;
}

uint64_t AMCP::IOAudio1::Engine::available_past_data(AMCP::IOAudio1::Engine *this)
{
  return 0;
}

uint64_t AMCP::IOAudio1::Engine::maximum_past_data(AMCP::IOAudio1::Engine *this)
{
  return 0;
}

uint64_t AMCP::IOAudio1::Engine::begin_io_thread(AMCP::IOAudio1::Engine *this)
{
  return 1;
}

uint64_t AMCP::IOAudio1::Engine::end_io_thread(AMCP::IOAudio1::Engine *this)
{
  return 1;
}

uint64_t AMCP::IOAudio1::Engine::begin_io_cycle(AMCP::IOAudio1::Engine *this)
{
  return 1;
}

uint64_t AMCP::IOAudio1::Engine::end_io_cycle(AMCP::IOAudio1::Engine *this)
{
  return 1;
}

BOOL AMCP::IOAudio1::Engine::begin_reading(os_unfair_lock_s *this, unint64_t a2, unint64_t a3, double a4, int a5, int a6)
{
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  int *v17;
  _DWORD *v18;
  int v19;
  int v20;
  int v21;
  double v22;
  unint64_t os_unfair_lock_opaque;
  double v24;
  double v25;
  double v26;
  float v27;
  kern_return_t v28;
  AMCP::Log::Scope_Registry *v29;
  float v30;
  _BOOL8 v31;
  AMCP::Log::Scope_Registry *v32;
  int v33;
  std::__shared_weak_count *v34;
  NSObject *v35;
  unint64_t *v36;
  unint64_t v37;
  _opaque_pthread_t *v38;
  mach_port_t v39;
  NSObject *v40;
  os_log_type_t v41;
  std::__shared_weak_count *v42;
  NSObject *v43;
  unint64_t *v44;
  unint64_t v45;
  _opaque_pthread_t *v46;
  mach_port_t v47;
  std::__shared_weak_count *v48;
  NSObject *v49;
  unint64_t *v50;
  unint64_t v51;
  _opaque_pthread_t *v52;
  mach_port_t v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint8_t buf[8];
  _BYTE v61[10];
  __int16 v62;
  int v63;
  __int16 v64;
  kern_return_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)&this[18]._os_unfair_lock_opaque != *(_QWORD *)&this[20]._os_unfair_lock_opaque)
  {
    v10 = this + 180;
    os_unfair_lock_lock(this + 180);
    v11 = *(_QWORD *)&this[18]._os_unfair_lock_opaque;
    v12 = *(_QWORD *)&this[20]._os_unfair_lock_opaque - v11;
    if (v12)
    {
      v13 = v12 / 56;
      v14 = *(_QWORD *)&this[186]._os_unfair_lock_opaque;
      v15 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)&this[188]._os_unfair_lock_opaque - v14) >> 3);
      if (v13 <= 1)
        v13 = 1;
      v16 = (_DWORD *)(v14 + 8);
      v17 = (int *)(v11 + 40);
      do
      {
        if (!v15)
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        v18 = (_DWORD *)*((_QWORD *)v16 - 1);
        v20 = *v17;
        v17 += 14;
        v19 = v20;
        *v18 = v20 * a5;
        v18[1] = a5;
        v21 = *v16;
        v16 += 6;
        v18[2] = v21 - (_DWORD)v18 - 16;
        v18[3] = v19 * a6;
        --v15;
        --v13;
      }
      while (v13);
    }
    AMCP::IO_Clock::get_current_zts((AMCP::IO_Clock *)buf, (uint64_t)&this[140]);
    v22 = *(double *)buf;
    os_unfair_lock_opaque = this[10]._os_unfair_lock_opaque;
    v24 = AMCP::Core::Engine::calculate_safety_violation_read((AMCP::Core::Engine *)this, a4);
    v25 = (double)os_unfair_lock_opaque;
    v26 = fmod(a4 - v22, (double)os_unfair_lock_opaque);
    if (v26 >= 0.0)
      v25 = -0.0;
    v27 = v24;
    if (v27 <= -5.0)
      kdebug_trace();
    kdebug_trace();
    v28 = IOConnectTrap4(this[181]._os_unfair_lock_opaque, 0, (unint64_t)(v26 + v25), ((unint64_t)a4 / os_unfair_lock_opaque), 1uLL, this[184]._os_unfair_lock_opaque);
    kdebug_trace();
    v30 = AMCP::Core::Engine::calculate_safety_violation_read((AMCP::Core::Engine *)this, a4);
    if ((int)v30 <= -5)
      v29 = (AMCP::Log::Scope_Registry *)kdebug_trace();
    v31 = v28 == 0;
    if (!v28)
      goto LABEL_46;
    AMCP::Log::Scope_Registry::get(v29);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v58, "com.apple.coreaudio", "AMCP");
    v33 = *(_DWORD *)(v58 + 16);
    switch(v33)
    {
      case 3:
        AMCP::Log::Scope_Registry::get(v32);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v48 = *(std::__shared_weak_count **)v61;
        v49 = **(NSObject ***)buf;
        if (*(_QWORD *)v61)
        {
          v50 = (unint64_t *)(*(_QWORD *)v61 + 8);
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        if (!os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
          goto LABEL_41;
        v52 = pthread_self();
        v53 = pthread_mach_thread_np(v52);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v53;
        *(_WORD *)v61 = 2080;
        *(_QWORD *)&v61[2] = "IOAudio1_Engine.cpp";
        v62 = 1024;
        v63 = 252;
        v64 = 1024;
        v65 = v28;
        v40 = v49;
        v41 = OS_LOG_TYPE_INFO;
        break;
      case 2:
        AMCP::Log::Scope_Registry::get(v32);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v42 = *(std::__shared_weak_count **)v61;
        v43 = **(NSObject ***)buf;
        if (*(_QWORD *)v61)
        {
          v44 = (unint64_t *)(*(_QWORD *)v61 + 8);
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
        {
          v46 = pthread_self();
          v47 = pthread_mach_thread_np(v46);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v47;
          *(_WORD *)v61 = 2080;
          *(_QWORD *)&v61[2] = "IOAudio1_Engine.cpp";
          v62 = 1024;
          v63 = 252;
          v64 = 1024;
          v65 = v28;
          _os_log_debug_impl(&dword_1B57BA000, v43, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d IOAudio1 engine begin_reading got an error from the kernel trap: %d", buf, 0x1Eu);
        }
        goto LABEL_41;
      case 1:
        AMCP::Log::Scope_Registry::get(v32);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v34 = *(std::__shared_weak_count **)v61;
        v35 = **(NSObject ***)buf;
        if (*(_QWORD *)v61)
        {
          v36 = (unint64_t *)(*(_QWORD *)v61 + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
LABEL_41:
          v54 = v59;
          if (v59)
          {
            p_shared_owners = (unint64_t *)&v59->__shared_owners_;
            do
              v56 = __ldaxr(p_shared_owners);
            while (__stlxr(v56 - 1, p_shared_owners));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
          }
LABEL_46:
          os_unfair_lock_unlock(v10);
          return v31;
        }
        v38 = pthread_self();
        v39 = pthread_mach_thread_np(v38);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v39;
        *(_WORD *)v61 = 2080;
        *(_QWORD *)&v61[2] = "IOAudio1_Engine.cpp";
        v62 = 1024;
        v63 = 252;
        v64 = 1024;
        v65 = v28;
        v40 = v35;
        v41 = OS_LOG_TYPE_DEFAULT;
        break;
      default:
        goto LABEL_41;
    }
    _os_log_impl(&dword_1B57BA000, v40, v41, "%6u %32s:%-5d IOAudio1 engine begin_reading got an error from the kernel trap: %d", buf, 0x1Eu);
    goto LABEL_41;
  }
  return 1;
}

void sub_1B5923874(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::IOAudio1::Engine::read_data_from_stream(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, size_t **a7)
{
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;

  v11 = (os_unfair_lock_s *)(a1 + 720);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 720));
  v12 = *(_QWORD *)(a1 + 744);
  v13 = *(_QWORD *)(a1 + 752);
  if (v12 != v13 && 0xAAAAAAAAAAAAAAABLL * ((v13 - v12) >> 3) > a4)
  {
    v14 = (_QWORD *)(v12 + 24 * a4);
    v15 = **a7;
    if (v15 + a5 <= v14[1] - *v14 - 16)
      memcpy((void *)(*a7)[1], (const void *)(*v14 + a5 + 16), v15);
  }
  os_unfair_lock_unlock(v11);
  return 1;
}

uint64_t AMCP::IOAudio1::Engine::end_reading(AMCP::IOAudio1::Engine *this, double a2)
{
  return 1;
}

uint64_t AMCP::IOAudio1::Engine::begin_writing(AMCP::IOAudio1::Engine *this, double a2)
{
  return 1;
}

uint64_t AMCP::IOAudio1::Engine::write_data_to_stream(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, size_t **a7)
{
  os_unfair_lock_s *v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;

  if (*(_QWORD *)(a1 + 768) != *(_QWORD *)(a1 + 776))
  {
    v11 = (os_unfair_lock_s *)(a1 + 720);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 720));
    v12 = *(_QWORD *)(a1 + 768);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 776) - v12) >> 3) > a4)
    {
      v13 = (_QWORD *)(v12 + 24 * a4);
      v14 = **a7;
      if (v14 + a5 <= v13[1] - *v13 - 16)
        memcpy((void *)(*v13 + a5 + 16), (const void *)(*a7)[1], v14);
    }
    os_unfair_lock_unlock(v11);
  }
  return 1;
}

BOOL AMCP::IOAudio1::Engine::end_writing(AMCP::IOAudio1::Engine *this, unint64_t a2, unint64_t a3, double a4, int a5, int a6)
{
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  int *v17;
  _DWORD *v18;
  int v19;
  int v20;
  int v21;
  float v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  double v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  AMCP::Log::Scope_Registry *v31;
  int v32;
  _BOOL8 v33;
  AMCP::Log::Scope_Registry *v34;
  int v35;
  std::__shared_weak_count *v36;
  NSObject *v37;
  unint64_t *v38;
  unint64_t v39;
  _opaque_pthread_t *v40;
  mach_port_t v41;
  NSObject *v42;
  os_log_type_t v43;
  std::__shared_weak_count *v44;
  NSObject *v45;
  unint64_t *v46;
  unint64_t v47;
  _opaque_pthread_t *v48;
  mach_port_t v49;
  std::__shared_weak_count *v50;
  NSObject *v51;
  unint64_t *v52;
  unint64_t v53;
  _opaque_pthread_t *v54;
  mach_port_t v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  float v59;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint8_t buf[8];
  _BYTE v64[10];
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 12) == *((_QWORD *)this + 13))
    return 1;
  v10 = (os_unfair_lock_s *)((char *)this + 720);
  os_unfair_lock_lock((os_unfair_lock_t)this + 180);
  v11 = *((_QWORD *)this + 12);
  v12 = *((_QWORD *)this + 13) - v11;
  if (v12)
  {
    v13 = v12 / 56;
    v14 = *((_QWORD *)this + 96);
    v15 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 97) - v14) >> 3);
    if (v13 <= 1)
      v13 = 1;
    v16 = (_DWORD *)(v14 + 8);
    v17 = (int *)(v11 + 40);
    do
    {
      if (!v15)
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      v18 = (_DWORD *)*((_QWORD *)v16 - 1);
      v20 = *v17;
      v17 += 14;
      v19 = v20;
      *v18 = v20 * a5;
      v18[1] = a5;
      v21 = *v16;
      v16 += 6;
      v18[2] = v21 - (_DWORD)v18 - 16;
      v18[3] = v19 * a6;
      --v15;
      --v13;
    }
    while (v13);
  }
  v22 = AMCP::Core::Engine::calculate_safety_violation_write(this, a4);
  if (v22 < 0.0)
    kdebug_trace();
  kdebug_trace();
  AMCP::IO_Clock::get_current_zts((AMCP::IO_Clock *)buf, (uint64_t)this + 560);
  v23 = *((unsigned int *)this + 10);
  v24 = (unint64_t)(a4 - *(double *)buf) % v23;
  v25 = (unint64_t)a4 / v23;
  os_unfair_lock_lock((os_unfair_lock_t)this + 160);
  v26 = *((double *)this + 78);
  os_unfair_lock_unlock((os_unfair_lock_t)this + 160);
  v27 = vcvtmd_u64_f64(v26);
  v28 = vcvtd_n_u64_f64(v26 - floor(v26), 0x20uLL);
  if (*((_BYTE *)this + 792))
    v29 = v27;
  else
    v29 = (unint64_t)v26 >> 32;
  if (*((_BYTE *)this + 792))
    v30 = v28;
  else
    v30 = (unint64_t)v26;
  v31 = (AMCP::Log::Scope_Registry *)MEMORY[0x1B5E4FADC](*((unsigned int *)this + 181), 0, v24, v25, 0, *((unsigned int *)this + 184), v29, v30);
  v32 = (int)v31;
  v33 = (_DWORD)v31 == 0;
  if ((_DWORD)v31)
  {
    AMCP::Log::Scope_Registry::get(v31);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v61, "com.apple.coreaudio", "AMCP");
    v35 = *(_DWORD *)(v61 + 16);
    switch(v35)
    {
      case 3:
        AMCP::Log::Scope_Registry::get(v34);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v50 = *(std::__shared_weak_count **)v64;
        v51 = **(NSObject ***)buf;
        if (*(_QWORD *)v64)
        {
          v52 = (unint64_t *)(*(_QWORD *)v64 + 8);
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        if (!os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
          goto LABEL_43;
        v54 = pthread_self();
        v55 = pthread_mach_thread_np(v54);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v55;
        *(_WORD *)v64 = 2080;
        *(_QWORD *)&v64[2] = "IOAudio1_Engine.cpp";
        v65 = 1024;
        v66 = 352;
        v67 = 1024;
        v68 = v32;
        v42 = v51;
        v43 = OS_LOG_TYPE_INFO;
        break;
      case 2:
        AMCP::Log::Scope_Registry::get(v34);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v44 = *(std::__shared_weak_count **)v64;
        v45 = **(NSObject ***)buf;
        if (*(_QWORD *)v64)
        {
          v46 = (unint64_t *)(*(_QWORD *)v64 + 8);
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
        {
          v48 = pthread_self();
          v49 = pthread_mach_thread_np(v48);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v49;
          *(_WORD *)v64 = 2080;
          *(_QWORD *)&v64[2] = "IOAudio1_Engine.cpp";
          v65 = 1024;
          v66 = 352;
          v67 = 1024;
          v68 = v32;
          _os_log_debug_impl(&dword_1B57BA000, v45, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d IOAudio1 engine end_writing got an error from the kernel trap: %d", buf, 0x1Eu);
        }
        goto LABEL_43;
      case 1:
        AMCP::Log::Scope_Registry::get(v34);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v36 = *(std::__shared_weak_count **)v64;
        v37 = **(NSObject ***)buf;
        if (*(_QWORD *)v64)
        {
          v38 = (unint64_t *)(*(_QWORD *)v64 + 8);
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        if (!os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
LABEL_43:
          v56 = v62;
          if (v62)
          {
            p_shared_owners = (unint64_t *)&v62->__shared_owners_;
            do
              v58 = __ldaxr(p_shared_owners);
            while (__stlxr(v58 - 1, p_shared_owners));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
          goto LABEL_48;
        }
        v40 = pthread_self();
        v41 = pthread_mach_thread_np(v40);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v41;
        *(_WORD *)v64 = 2080;
        *(_QWORD *)&v64[2] = "IOAudio1_Engine.cpp";
        v65 = 1024;
        v66 = 352;
        v67 = 1024;
        v68 = v32;
        v42 = v37;
        v43 = OS_LOG_TYPE_DEFAULT;
        break;
      default:
        goto LABEL_43;
    }
    _os_log_impl(&dword_1B57BA000, v42, v43, "%6u %32s:%-5d IOAudio1 engine end_writing got an error from the kernel trap: %d", buf, 0x1Eu);
    goto LABEL_43;
  }
LABEL_48:
  kdebug_trace();
  v59 = AMCP::Core::Engine::calculate_safety_violation_write(this, a4);
  if ((int)v59 < 0)
    kdebug_trace();
  os_unfair_lock_unlock(v10);
  return v33;
}

void sub_1B5923F7C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

double AMCP::IOAudio1::Engine::get_zero_time_stamp@<D0>(AMCP::IOAudio1::Engine *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 *v3;
  __int128 v4;
  double result;

  v2 = *((_QWORD *)this + 91);
  if (v2 && (v3 = *(__int128 **)(v2 + 16)) != 0)
  {
    v4 = *v3;
    *(double *)a2 = (double)(*((unsigned int *)this + 10) * (unint64_t)HIDWORD(*(_QWORD *)v3));
    *(_QWORD *)(a2 + 8) = *((_QWORD *)&v4 + 1);
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_QWORD *)(a2 + 48) = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  *(_QWORD *)&result = 3;
  *(_QWORD *)(a2 + 56) = 3;
  return result;
}

uint64_t AMCP::IOAudio1::Engine::update_time(AMCP::IOAudio1::Engine *this)
{
  return AMCP::IO_Clock::update_time((AMCP::IOAudio1::Engine *)((char *)this + 560));
}

BOOL AMCP::IOAudio1::Engine::reset_time(os_unfair_lock_s *this)
{
  return AMCP::IO_Clock::reset_time(this + 140);
}

BOOL AMCP::IOAudio1::Engine::has_time(os_unfair_lock_s *this)
{
  return AMCP::IO_Clock::has_time(this + 140);
}

void AMCP::IOAudio1::Engine::get_current_time(AMCP::IOAudio1::Engine *this@<X0>, AMCP::IO_Clock *a2@<X8>)
{
  AMCP::IO_Clock::get_current_time(a2, (uint64_t)this + 560);
}

double AMCP::IOAudio1::Engine::get_current_host_ticks_per_frame(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  double v3;

  v2 = this + 160;
  os_unfair_lock_lock(this + 160);
  v3 = *(double *)&this[156]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2);
  return v3;
}

unint64_t AMCP::IOAudio1::Engine::convert_sample_to_host_time(os_unfair_lock_s *this, double a2)
{
  return AMCP::IO_Clock::convert_sample_to_host_time(this + 140, a2);
}

double AMCP::IOAudio1::Engine::convert_host_to_sample_time(os_unfair_lock_s *this, unint64_t a2)
{
  AMCP::IO_Clock *v3;
  os_unfair_lock_s *v4;
  double v5;

  v3 = (AMCP::IO_Clock *)&this[140];
  v4 = this + 160;
  os_unfair_lock_lock(this + 160);
  v5 = AMCP::IO_Clock::convert_host_to_sample_time_internal(v3, a2);
  os_unfair_lock_unlock(v4);
  return v5;
}

uint64_t *AMCP::IOAudio1::Engine::take_power_assertions(AMCP::IOAudio1::Engine *this)
{
  return AMCP::Core::Implementation::Simple_Engine_IO_State::take_power_assertions((uint64_t *)this + 15);
}

uint64_t *AMCP::IOAudio1::Engine::release_power_assertions(AMCP::IOAudio1::Engine *this)
{
  return AMCP::Core::Implementation::Simple_Engine_IO_State::release_power_assertions((uint64_t *)this + 15);
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<AMCP::IOAudio1::Engine::set_transport_state(AMCP::Transport_State)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  unsigned int *v2;

  if ((int)MEMORY[0x1B5E5064C]() > *(_DWORD *)a1)
  {
    v2 = *(unsigned int **)(a1 + 8);
    atomic_store(0, v2 + 34);
    AMCP::IOAudio1::Engine::stop((AMCP::IOAudio1::Engine *)v2);
  }
  return a1;
}

uint64_t *AMCP::IOAudio1::Engine::stop(AMCP::IOAudio1::Engine *this)
{
  mach_port_t v2;
  unsigned int *v3;
  std::runtime_error *exception;

  kdebug_trace();
  v2 = *((_DWORD *)this + 181);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_connect_proxy from null io_object");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone>(v2, 4u, 0, 0);
  kdebug_trace();
  AMCP::IOAudio1::Engine::release_buffers(this);
  v3 = (unsigned int *)*((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v3)
    std::default_delete<applesauce::iokit::mapped_memory>::operator()[abi:ne180100](v3);
  (*(void (**)(AMCP::IOAudio1::Engine *))(*(_QWORD *)this + 320))(this);
  return AMCP::Core::Implementation::Simple_Engine_IO_State::release_power_assertions((uint64_t *)this + 15);
}

void sub_1B592423C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, NSObject **a9, __int128 a10, __int16 a11, int a12)
{
  void *v12;
  AMCP::Log::Scope_Registry *v14;
  NSObject *v15;
  _opaque_pthread_t *v17;
  mach_port_t v18;

  if (a2)
  {
    __cxa_free_exception(v12);
    v14 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a9, "com.apple.coreaudio", "AMCP");
    v15 = *a9;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v17 = pthread_self();
      v18 = pthread_mach_thread_np(v17);
      LODWORD(a9) = 67109634;
      HIDWORD(a9) = v18;
      LOWORD(a10) = 2080;
      *(_QWORD *)((char *)&a10 + 2) = "IOAudio1_Engine.cpp";
      WORD5(a10) = 1024;
      HIDWORD(a10) = 489;
      _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception while telling driver to stop!", (uint8_t *)&a9, 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B5924188);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::IOAudio1::Engine::release_buffers(AMCP::IOAudio1::Engine *this)
{
  uint64_t *v2;
  uint64_t *v3;
  mach_port_t v4;
  uint64_t *v5;
  uint64_t *v6;
  mach_port_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;

  v2 = (uint64_t *)*((_QWORD *)this + 93);
  v3 = (uint64_t *)*((_QWORD *)this + 94);
  while (v2 != v3)
  {
    v4 = *((_DWORD *)this + 181);
    if (!v4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "cannot create io_connect_proxy from null io_object");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone,unsigned long,unsigned int &>(v4, *v2, *((_DWORD *)this + 184));
    v2 += 3;
  }
  v5 = (uint64_t *)*((_QWORD *)this + 96);
  v6 = (uint64_t *)*((_QWORD *)this + 97);
  while (v5 != v6)
  {
    v7 = *((_DWORD *)this + 181);
    if (!v7)
    {
      v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v9, "cannot create io_connect_proxy from null io_object");
      __cxa_throw(v9, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone,unsigned long,unsigned int &>(v7, *v5, *((_DWORD *)this + 184));
    v5 += 3;
  }
  std::vector<std::vector<std::byte>>::__clear[abi:ne180100]((uint64_t *)this + 93);
  std::vector<std::vector<std::byte>>::__clear[abi:ne180100]((uint64_t *)this + 96);
}

void sub_1B5924528(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B5924530);
  __clang_call_terminate(a1);
}

void std::default_delete<applesauce::iokit::mapped_memory>::operator()[abi:ne180100](unsigned int *a1)
{
  if (*((_QWORD *)a1 + 2))
    MEMORY[0x1B5E4FAE8](*a1, a1[1], a1[2]);
  IOConnectRelease(*a1);
  JUMPOUT(0x1B5E50688);
}

void applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone,unsigned long,unsigned int &>(mach_port_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  void *exception;
  const std::error_category *v5;
  std::string *v6;
  std::string::size_type size;
  std::string *v8;
  __int128 v9;
  std::string v10;
  std::string v11;
  __int128 v12;
  std::string::size_type v13;
  size_t v14;
  void *__p[3];
  uint32_t outputCnt;
  char *v17[3];
  uint64_t input[2];

  input[0] = a2;
  input[1] = a3;
  memset(v17, 0, sizeof(v17));
  outputCnt = 0;
  memset(__p, 0, sizeof(__p));
  v14 = 0;
  v3 = IOConnectCallMethod(a1, 1u, input, 2u, 0, 0, 0, &outputCnt, 0, &v14);
  if ((_DWORD)v3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = std::system_category();
    v11.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&v11.__r_.__value_.__r.__words[1] = xmmword_1B5D68C20;
    strcpy(v11.__r_.__value_.__l.__data_, "Error on IOConnectCallScalarMethod for selector ");
    std::to_string(&v10, 1u);
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v10;
    else
      v6 = (std::string *)v10.__r_.__value_.__r.__words[0];
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
    else
      size = v10.__r_.__value_.__l.__size_;
    v8 = std::string::append(&v11, (const std::string::value_type *)v6, size);
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v13 = v8->__r_.__value_.__r.__words[2];
    v12 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1B5E50238](exception, v3, v5, &v12);
    __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  std::vector<unsigned long long>::resize(v17, outputCnt);
  if (v14)
  {
    std::vector<unsigned char>::__append((unint64_t *)__p, v14);
    if (__p[0])
      operator delete(__p[0]);
  }
  if (v17[0])
    operator delete(v17[0]);
}

void sub_1B5924714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31)
{
  void *v31;
  int v32;
  uint64_t v33;
  void *v35;

  if (a28 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v32 & 1) == 0)
    {
LABEL_10:
      v35 = *(void **)(v33 - 88);
      if (v35)
        operator delete(v35);
      _Unwind_Resume(a1);
    }
  }
  else if (!v32)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v31);
  goto LABEL_10;
}

void std::vector<std::vector<std::byte>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

unsigned int *applesauce::iokit::mapped_memory::mapped_memory(unsigned int *a1, io_connect_t connect, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v9;
  void *exception;
  const std::error_category *v11;
  void *v12;
  const std::error_category *v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  std::string v18;
  std::string v19;
  __int128 v20;
  std::string::size_type v21;

  *a1 = connect;
  v5 = IOConnectAddRef(connect);
  if ((_DWORD)v5)
  {
    v9 = v5;
    exception = __cxa_allocate_exception(0x20uLL);
    v11 = std::system_category();
    MEMORY[0x1B5E5022C](exception, v9, v11, "Error on IOConnectAddRef");
    __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  v6 = *MEMORY[0x1E0C83DA0];
  a1[1] = a3;
  a1[2] = v6;
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v7 = MEMORY[0x1B5E4FAA0](*a1, a3);
  if ((_DWORD)v7)
  {
    v12 = __cxa_allocate_exception(0x20uLL);
    v13 = std::system_category();
    v19.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
    *(_OWORD *)&v19.__r_.__value_.__r.__words[1] = xmmword_1B5D68C40;
    strcpy(v19.__r_.__value_.__l.__data_, "Error, could not create memory type ");
    std::to_string(&v18, a3);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v18;
    else
      v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    else
      size = v18.__r_.__value_.__l.__size_;
    v16 = std::string::append(&v19, (const std::string::value_type *)v14, size);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v21 = v16->__r_.__value_.__r.__words[2];
    v20 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1B5E50238](v12, v7, v13, &v20);
    __cxa_throw(v12, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  return a1;
}

void sub_1B59249A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  io_connect_t *v26;
  int v27;
  void *v28;

  if (a26 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v27 & 1) == 0)
    {
LABEL_10:
      applesauce::iokit::io_connect_holder::~io_connect_holder(v26);
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<AMCP::IOAudio1::Engine::start(void)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;

  if ((int)MEMORY[0x1B5E5064C]() > *(_DWORD *)a1)
  {
    v2 = *(_QWORD *)(a1 + 8);
    v3 = *(unsigned int **)(v2 + 728);
    *(_QWORD *)(v2 + 728) = 0;
    if (v3)
      std::default_delete<applesauce::iokit::mapped_memory>::operator()[abi:ne180100](v3);
  }
  return a1;
}

void applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone,unsigned int const&,unsigned long,unsigned long,unsigned int &>(mach_port_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  void *exception;
  const std::error_category *v7;
  std::string *v8;
  std::string::size_type size;
  std::string *v10;
  __int128 v11;
  std::string v12;
  std::string v13;
  __int128 v14;
  std::string::size_type v15;
  size_t v16;
  void *__p[3];
  uint32_t outputCnt;
  char *v19[3];
  uint64_t input[4];

  input[0] = a2;
  input[1] = a3;
  input[2] = a4;
  input[3] = a5;
  memset(v19, 0, sizeof(v19));
  outputCnt = 0;
  memset(__p, 0, sizeof(__p));
  v16 = 0;
  v5 = IOConnectCallMethod(a1, 0, input, 4u, 0, 0, 0, &outputCnt, 0, &v16);
  if ((_DWORD)v5)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v7 = std::system_category();
    v13.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&v13.__r_.__value_.__r.__words[1] = xmmword_1B5D68C20;
    strcpy(v13.__r_.__value_.__l.__data_, "Error on IOConnectCallScalarMethod for selector ");
    std::to_string(&v12, 0);
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v12;
    else
      v8 = (std::string *)v12.__r_.__value_.__r.__words[0];
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    else
      size = v12.__r_.__value_.__l.__size_;
    v10 = std::string::append(&v13, (const std::string::value_type *)v8, size);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v15 = v10->__r_.__value_.__r.__words[2];
    v14 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1B5E50238](exception, v5, v7, &v14);
    __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  std::vector<unsigned long long>::resize(v19, outputCnt);
  if (v16)
  {
    std::vector<unsigned char>::__append((unint64_t *)__p, v16);
    if (__p[0])
      operator delete(__p[0]);
  }
  if (v19[0])
    operator delete(v19[0]);
}

void sub_1B5924C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31)
{
  void *v31;
  int v32;
  uint64_t v33;
  void *v35;

  if (a28 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v32 & 1) == 0)
    {
LABEL_10:
      v35 = *(void **)(v33 - 104);
      if (v35)
        operator delete(v35);
      _Unwind_Resume(a1);
    }
  }
  else if (!v32)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v31);
  goto LABEL_10;
}

void std::vector<std::vector<std::byte>>::push_back[abi:ne180100](char **a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  void *v19;
  void *v20;

  v4 = a1[1];
  v5 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v5)
  {
    *(_QWORD *)v4 = 0;
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *(_OWORD *)v4 = *(_OWORD *)a2;
    *((_QWORD *)v4 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v6 = v4 + 24;
    goto LABEL_18;
  }
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v8 = v7 + 1;
  if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)*a1) >> 3);
  if (2 * v9 > v8)
    v8 = 2 * v9;
  if (v9 >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  if (v8 > 0xAAAAAAAAAAAAAAALL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v10 = 3 * v8;
  v11 = (char *)operator new(24 * v8);
  v12 = &v11[24 * v7];
  v13 = &v11[8 * v10];
  *(_OWORD *)v12 = *(_OWORD *)a2;
  *((_QWORD *)v12 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v6 = v12 + 24;
  v14 = *a1;
  v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v12;
    a1[1] = v6;
    a1[2] = v13;
    if (!v15)
      goto LABEL_18;
    goto LABEL_17;
  }
  do
  {
    *((_QWORD *)v12 - 3) = 0;
    *((_QWORD *)v12 - 2) = 0;
    v12 -= 24;
    *((_QWORD *)v12 + 2) = 0;
    v16 = *(_OWORD *)(v15 - 24);
    v15 -= 24;
    *(_OWORD *)v12 = v16;
    *((_QWORD *)v12 + 2) = *((_QWORD *)v15 + 2);
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = 0;
  }
  while (v15 != v14);
  v15 = *a1;
  v17 = a1[1];
  *a1 = v12;
  a1[1] = v6;
  a1[2] = v13;
  if (v17 != v15)
  {
    v18 = v17;
    do
    {
      v20 = (void *)*((_QWORD *)v18 - 3);
      v18 -= 24;
      v19 = v20;
      if (v20)
      {
        *((_QWORD *)v17 - 2) = v19;
        operator delete(v19);
      }
      v17 = v18;
    }
    while (v18 != v15);
  }
  if (v15)
LABEL_17:
    operator delete(v15);
LABEL_18:
  a1[1] = v6;
}

void applesauce::iokit::io_connect_holder::~io_connect_holder(io_connect_t *this)
{
  IOConnectRelease(*this);
}

void AMCP::Core::Implementation::Simple_Engine_Data::get_output_format_list(AMCP::Core::Implementation::Simple_Engine_Data *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _OWORD *v6;
  __int128 *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  _OWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (a2 != a3)
  {
    v4 = a2;
    v6 = 0;
    do
    {
      v7 = (__int128 *)(v4 + 16);
      v8 = *((_QWORD *)this + 2);
      if ((unint64_t)v6 >= v8)
      {
        v11 = *(_OWORD **)this;
        v12 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v6 - *(_QWORD *)this) >> 3);
        v13 = v12 + 1;
        if (v12 + 1 > 0x666666666666666)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - (_QWORD)v11) >> 3);
        if (2 * v14 > v13)
          v13 = 2 * v14;
        if (v14 >= 0x333333333333333)
          v15 = 0x666666666666666;
        else
          v15 = v13;
        if (v15)
          v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v15);
        else
          v16 = 0;
        v17 = v15 + 40 * v12;
        v18 = *v7;
        v19 = *(_OWORD *)(v4 + 32);
        *(_QWORD *)(v17 + 32) = *(_QWORD *)(v4 + 48);
        *(_OWORD *)v17 = v18;
        *(_OWORD *)(v17 + 16) = v19;
        if (v6 == v11)
        {
          v23 = v15 + 40 * v12;
        }
        else
        {
          v20 = v15 + 40 * v12;
          do
          {
            v21 = *(_OWORD *)((char *)v6 - 40);
            v22 = *(_OWORD *)((char *)v6 - 24);
            v23 = v20 - 40;
            *(_QWORD *)(v20 - 8) = *((_QWORD *)v6 - 1);
            *(_OWORD *)(v20 - 24) = v22;
            *(_OWORD *)(v20 - 40) = v21;
            v6 = (_OWORD *)((char *)v6 - 40);
            v20 -= 40;
          }
          while (v6 != v11);
        }
        v6 = (_OWORD *)(v17 + 40);
        *(_QWORD *)this = v23;
        *((_QWORD *)this + 2) = v15 + 40 * v16;
        if (v11)
          operator delete(v11);
      }
      else
      {
        v9 = *v7;
        v10 = *(_OWORD *)(v4 + 32);
        *((_QWORD *)v6 + 4) = *(_QWORD *)(v4 + 48);
        *v6 = v9;
        v6[1] = v10;
        v6 = (_OWORD *)((char *)v6 + 40);
      }
      *((_QWORD *)this + 1) = v6;
      v4 += 56;
    }
    while (v4 != a3);
  }
}

void AMCP::Core::Implementation::Simple_Engine_Data::get_input_format_list(AMCP::Core::Implementation::Simple_Engine_Data *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _OWORD *v6;
  __int128 *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  _OWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (a2 != a3)
  {
    v4 = a2;
    v6 = 0;
    do
    {
      v7 = (__int128 *)(v4 + 16);
      v8 = *((_QWORD *)this + 2);
      if ((unint64_t)v6 >= v8)
      {
        v11 = *(_OWORD **)this;
        v12 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v6 - *(_QWORD *)this) >> 3);
        v13 = v12 + 1;
        if (v12 + 1 > 0x666666666666666)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - (_QWORD)v11) >> 3);
        if (2 * v14 > v13)
          v13 = 2 * v14;
        if (v14 >= 0x333333333333333)
          v15 = 0x666666666666666;
        else
          v15 = v13;
        if (v15)
          v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v15);
        else
          v16 = 0;
        v17 = v15 + 40 * v12;
        v18 = *v7;
        v19 = *(_OWORD *)(v4 + 32);
        *(_QWORD *)(v17 + 32) = *(_QWORD *)(v4 + 48);
        *(_OWORD *)v17 = v18;
        *(_OWORD *)(v17 + 16) = v19;
        if (v6 == v11)
        {
          v23 = v15 + 40 * v12;
        }
        else
        {
          v20 = v15 + 40 * v12;
          do
          {
            v21 = *(_OWORD *)((char *)v6 - 40);
            v22 = *(_OWORD *)((char *)v6 - 24);
            v23 = v20 - 40;
            *(_QWORD *)(v20 - 8) = *((_QWORD *)v6 - 1);
            *(_OWORD *)(v20 - 24) = v22;
            *(_OWORD *)(v20 - 40) = v21;
            v6 = (_OWORD *)((char *)v6 - 40);
            v20 -= 40;
          }
          while (v6 != v11);
        }
        v6 = (_OWORD *)(v17 + 40);
        *(_QWORD *)this = v23;
        *((_QWORD *)this + 2) = v15 + 40 * v16;
        if (v11)
          operator delete(v11);
      }
      else
      {
        v9 = *v7;
        v10 = *(_OWORD *)(v4 + 32);
        *((_QWORD *)v6 + 4) = *(_QWORD *)(v4 + 48);
        *v6 = v9;
        v6[1] = v10;
        v6 = (_OWORD *)((char *)v6 + 40);
      }
      *((_QWORD *)this + 1) = v6;
      v4 += 56;
    }
    while (v4 != a3);
  }
}

_QWORD *AMCP::Core::Implementation::Simple_Engine_Data::get_device_uid(_QWORD *this, const void *a2)
{
  _QWORD *v3;

  v3 = this;
  if (a2)
    this = CFRetain(a2);
  *v3 = a2;
  return this;
}

void std::vector<std::vector<std::byte>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<std::byte>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::__function::__func<AMCP::IOAudio1::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,BOOL,double,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::IOAudio1::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,BOOL,double,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio1::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,BOOL,double,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::IOAudio1::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,BOOL,double,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6974770;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio1::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,BOOL,double,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::IOAudio1::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,BOOL,double,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6974770;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio1::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,BOOL,double,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::IOAudio1::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,BOOL,double,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 304))(*(_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<AMCP::IOAudio1::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,BOOL,double,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::IOAudio1::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,BOOL,double,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio16EngineC1EN10applesauce5iokit17io_connect_holderENS2_2CF9StringRefEbdbjjjjjjRKNSt3__16vectorINS_4Core14Implementation18Simple_Engine_Data11Stream_InfoENS7_9allocatorISC_EEEESH_RKNS_7Utility14Dispatch_QueueEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio1::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,BOOL,double,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::IOAudio1::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,BOOL,double,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::target_type()
{
}

void HALS_IOStreamGroup::FilterClocklessReferenceStreamOnlyEngines::~FilterClocklessReferenceStreamOnlyEngines(HALS_IOStreamGroup::FilterClocklessReferenceStreamOnlyEngines *this)
{
  JUMPOUT(0x1B5E50688);
}

uint64_t HALS_IOStreamGroup::FilterClocklessReferenceStreamOnlyEngines::should_exclude(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v2 = *(_QWORD **)a2;
  if (*(_DWORD *)(*(_QWORD *)a2 + 108))
  {
    v3 = (_QWORD *)v2[14];
    if ((_QWORD *)v2[15] == v3 || v3 == 0)
    {
      if (v2[51])
        goto LABEL_12;
    }
    else if (*v3)
    {
LABEL_12:
      v5 = (_QWORD *)v2[14];
      if ((_QWORD *)v2[15] != v5 && v5 != 0)
        return (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v5 + 320))(*v5) ^ 1;
      goto LABEL_17;
    }
  }
  else if (v2[51])
  {
LABEL_17:
    v5 = v2 + 51;
    return (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v5 + 320))(*v5) ^ 1;
  }
  return 1;
}

uint64_t VisitableVector<HALS_IOStreamInfo>::apply<>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v12, a2);
  v3 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
  {
LABEL_9:
    v7 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    while (1)
    {
      if ((v6 & 1) != 0)
        v5 = 0;
      else
        ++v5;
      v11[0] = v3;
      v11[1] = v5;
      if (!v13)
        std::__throw_bad_function_call[abi:ne180100]();
      v7 = (*(uint64_t (**)(_BYTE *, _QWORD *))(*(_QWORD *)v13 + 48))(v13, v11);
      if ((_DWORD)v7)
        break;
      v6 = 0;
      v3 += 424;
      if (v3 == v4)
        goto LABEL_9;
    }
  }
  v8 = v13;
  if (v13 == v12)
  {
    v9 = 4;
    v8 = v12;
    goto LABEL_14;
  }
  if (v13)
  {
    v9 = 5;
LABEL_14:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_1B59254D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  _Unwind_Resume(exception_object);
}

void std::__function::__func<HALS_IOStreamGroup::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOStreamGroup::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOStreamGroup::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOStreamGroup::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6974808;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOStreamGroup::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOStreamGroup::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6974808;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_IOStreamGroup::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOStreamGroup::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  v6 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v4 + 48))(v4, &v6, v3);
}

uint64_t std::__function::__func<HALS_IOStreamGroup::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOStreamGroup::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN18HALS_IOStreamGroup16apply_to_streamsEmNSt3__18functionIFimR17HALS_IOStreamInfoEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOStreamGroup::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOStreamGroup::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target_type()
{
}

void AMCP::Clock::~Clock(AMCP::Clock *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t AMCP::Clock::Clock(uint64_t a1, uint64_t a2, unsigned int a3)
{
  AMCP::Object *v4;
  uint64_t v5;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  NSObject **v10;
  __int16 v11;
  char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = (AMCP::Object *)AMCP::Object::Object(a1, a2, a3);
  *(_QWORD *)v4 = &off_1E6974888;
  v5 = AMCP::Object::constructed_correct_class(v4, (AMCP *)0x61636C6B);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    v7 = *v10;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v10);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      v11 = 2080;
      v12 = "Clock.cpp";
      v13 = 1024;
      v14 = 27;
      v15 = 2080;
      v16 = "constructed_correct_class(k_class_id_clock)";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1B59257BC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  *v1 = &off_1E696F358;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Clock::Clock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_mutex_base *v5;
  uint64_t v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v17;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  _QWORD v20[2];
  uint8_t buf[8];
  _BYTE v22[10];
  __int16 v23;
  int v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  v5 = *(std::__shared_mutex_base **)(**(_QWORD **)a2 + 16);
  *(_QWORD *)buf = &off_1E69748C0;
  *(_QWORD *)v22 = a3;
  v25[0] = buf;
  AMCP::Core::Broker::fetch_first_core_if (v20, v5, (uint64_t)buf);
  *(_QWORD *)a1 = &off_1E696F358;
  v6 = v20[0];
  if (v20[0])
    v7 = *(_DWORD *)v20[0];
  else
    v7 = 0;
  *(_DWORD *)(a1 + 8) = v7;
  v8 = (std::__shared_weak_count *)v20[1];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v8;
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 32) = a2;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = a2;
  }
  v13 = (uint8_t *)v25[0];
  if ((uint8_t *)v25[0] == buf)
  {
    v14 = 4;
    v13 = buf;
  }
  else
  {
    if (!v25[0])
      goto LABEL_17;
    v14 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_17:
  *(_QWORD *)a1 = &off_1E6974888;
  v15 = AMCP::Object::constructed_correct_class((AMCP::Object *)a1, (AMCP *)0x61636C6B);
  if ((v15 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v15);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v17 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = pthread_self();
      v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v19;
      *(_WORD *)v22 = 2080;
      *(_QWORD *)&v22[2] = "Clock.cpp";
      v23 = 1024;
      v24 = 43;
      LOWORD(v25[0]) = 2080;
      *(_QWORD *)((char *)v25 + 2) = "constructed_correct_class(k_class_id_clock)";
      _os_log_error_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", buf, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1B59259F8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  *v1 = v2;
  v4 = (std::__shared_weak_count *)v1[3];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::Clock::Clock(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Clock::Clock(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Clock::Clock(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Clock::Clock(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69748C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Clock::Clock(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Clock::Clock(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69748C0;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<AMCP::Clock::Clock(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Clock::Clock(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  unsigned int simple_required;
  _BOOL8 v5;
  CFTypeRef cf;

  simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
  if (!AMCP::is_base_of((AMCP *)0x61636C6B, simple_required))
    return 0;
  AMCP::Core::Core::get_simple_required_property<1969841184u>(&cf, *a2);
  v5 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(**(const __CFString ***)(a1 + 8), (const __CFString **)&cf) == kCFCompareEqualTo;
  if (cf)
    CFRelease(cf);
  return v5;
}

uint64_t std::__function::__func<AMCP::Clock::Clock(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Clock::Clock(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP5ClockC1ERNS_14System_ContextEN10applesauce2CF9StringRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Clock::Clock(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Clock::Clock(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

uint64_t AMCP::Clock::Clock(uint64_t result, uint64_t a2, int **a3)
{
  int *v3;
  int v4;
  int *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)result = &off_1E696F358;
  v3 = *a3;
  if (*a3)
    v4 = *v3;
  else
    v4 = 0;
  *(_DWORD *)(result + 8) = v4;
  v5 = a3[1];
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 4);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(result + 32) = a2;
  *(_QWORD *)result = &off_1E6974888;
  return result;
}

{
  int *v3;
  int v4;
  int *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)result = &off_1E696F358;
  v3 = *a3;
  if (*a3)
    v4 = *v3;
  else
    v4 = 0;
  *(_DWORD *)(result + 8) = v4;
  v5 = a3[1];
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 4);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(result + 32) = a2;
  *(_QWORD *)result = &off_1E6974888;
  return result;
}

void AMCP::Clock::get_device_uid(AMCP::Clock *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
      AMCP::Core::Core::get_simple_required_property<1969841184u>(a2, v7);
    else
      *a2 = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
  }
}

void AMCP::Clock::get_model_uid(AMCP::Clock *this@<X0>, _BYTE *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  int v11;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
    {
      v10 = 0x676C6F626D756964;
      v11 = 0;
      AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a2, v7, (const AMCP::Address *)&v10);
    }
    else
    {
      *a2 = 0;
      a2[8] = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
}

void AMCP::Clock::get_model_uid(AMCP::Clock *this@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  AMCP::Core::Core *v8;
  const void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  int v13;

  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v6)
  {
    v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      v8 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
      if (v8)
      {
        v12 = 0x676C6F626D756964;
        v13 = 0;
        AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a3, v8, (AMCP::Address *)&v12, a2);
LABEL_9:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  v9 = *a2;
  if (v9)
    CFRetain(v9);
  *a3 = v9;
  if (v7)
    goto LABEL_9;
}

unint64_t AMCP::Clock::get_transport_type(AMCP::Clock *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  unint64_t simple_required;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
    simple_required = AMCP::Core::Core::get_simple_required_property<1953653102u>(v5);
  else
    simple_required = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return simple_required;
}

unint64_t AMCP::Core::Core::get_simple_required_property<1953653102u>(AMCP::Core::Core *a1)
{
  unint64_t result;
  NSObject *v2;
  _opaque_pthread_t *v3;
  mach_port_t v4;
  void *__p[2];
  char v6;
  _BYTE buf[10];
  char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  void **v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  strcpy(buf, "nartbolg");
  buf[9] = 0;
  LOWORD(v8) = 0;
  result = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!HIDWORD(result))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v2 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3 = pthread_self();
      v4 = pthread_mach_thread_np(v3);
      v6 = 4;
      strcpy((char *)__p, "tran");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v4;
      *(_WORD *)&buf[8] = 2080;
      v8 = "Core.h";
      v9 = 1024;
      v10 = 391;
      v11 = 2080;
      v12 = "optional_value.operator BOOL() == true";
      v13 = 2080;
      v14 = __p;
      v15 = 1024;
      v16 = 1735159650;
      v17 = 1024;
      v18 = 0;
      _os_log_error_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v6 < 0)
        operator delete(__p[0]);
    }
    abort();
  }
  return result;
}

void sub_1B5926050(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

BOOL AMCP::Clock::is_hidden(AMCP::Clock *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  AMCP::Log::Scope_Registry *v6;
  _BOOL8 v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *__p[2];
  char v15;
  _BYTE buf[10];
  char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void **v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
  {
    strcpy(buf, "ndihbolg");
    buf[9] = 0;
    LOWORD(v17) = 0;
    v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if ((unsigned __int16)v6 <= 0xFFu)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v11 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = pthread_self();
        v13 = pthread_mach_thread_np(v12);
        v15 = 4;
        strcpy((char *)__p, "hidn");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&buf[4] = v13;
        *(_WORD *)&buf[8] = 2080;
        v17 = "Core.h";
        v18 = 1024;
        v19 = 391;
        v20 = 2080;
        v21 = "optional_value.operator BOOL() == true";
        v22 = 2080;
        v23 = __p;
        v24 = 1024;
        v25 = 1735159650;
        v26 = 1024;
        v27 = 0;
        _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v15 < 0)
          operator delete(__p[0]);
      }
      abort();
    }
    v7 = v6 != 0;
  }
  else
  {
    v7 = 0;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v7;
}

void sub_1B5926238(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

unint64_t AMCP::Clock::get_clock_domain(AMCP::Clock *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  unint64_t simple_required;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
    simple_required = AMCP::Core::Core::get_simple_required_property<1668049764u>(v5);
  else
    simple_required = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return simple_required;
}

unint64_t AMCP::Core::Core::get_simple_required_property<1668049764u>(AMCP::Core::Core *a1)
{
  unint64_t result;
  NSObject *v2;
  _opaque_pthread_t *v3;
  mach_port_t v4;
  void *__p[2];
  char v6;
  _BYTE buf[10];
  char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  void **v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  strcpy(buf, "dklcbolg");
  buf[9] = 0;
  LOWORD(v8) = 0;
  result = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!HIDWORD(result))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v2 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3 = pthread_self();
      v4 = pthread_mach_thread_np(v3);
      v6 = 4;
      strcpy((char *)__p, "clkd");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v4;
      *(_WORD *)&buf[8] = 2080;
      v8 = "Core.h";
      v9 = 1024;
      v10 = 391;
      v11 = 2080;
      v12 = "optional_value.operator BOOL() == true";
      v13 = 2080;
      v14 = __p;
      v15 = 1024;
      v16 = 1735159650;
      v17 = 1024;
      v18 = 0;
      _os_log_error_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v6 < 0)
        operator delete(__p[0]);
    }
    abort();
  }
  return result;
}

void sub_1B5926434(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

unint64_t AMCP::Clock::get_input_latency(AMCP::Clock *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  unint64_t simple_required;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
    simple_required = AMCP::Core::Core::get_simple_required_property<1819569763u>(v5, 1768845428);
  else
    simple_required = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return simple_required;
}

unint64_t AMCP::Core::Core::get_simple_required_property<1819569763u>(AMCP::Core::Core *a1, int a2)
{
  unint64_t result;
  NSObject *v4;
  _opaque_pthread_t *v5;
  mach_port_t v6;
  void *__p[2];
  char v8;
  uint8_t buf[8];
  _BYTE v10[10];
  __int16 v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  void **v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)buf = 1819569763;
  *(_DWORD *)&buf[4] = a2;
  *(_DWORD *)v10 = 0;
  result = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!HIDWORD(result))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v4 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = pthread_self();
      v6 = pthread_mach_thread_np(v5);
      v8 = 4;
      strcpy((char *)__p, "ltnc");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v6;
      *(_WORD *)v10 = 2080;
      *(_QWORD *)&v10[2] = "Core.h";
      v11 = 1024;
      v12 = 391;
      v13 = 2080;
      v14 = "optional_value.operator BOOL() == true";
      v15 = 2080;
      v16 = __p;
      v17 = 1024;
      v18 = a2;
      v19 = 1024;
      v20 = 0;
      _os_log_error_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v8 < 0)
        operator delete(__p[0]);
    }
    abort();
  }
  return result;
}

void sub_1B5926634(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

unint64_t AMCP::Clock::get_output_latency(AMCP::Clock *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  unint64_t simple_required;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
    simple_required = AMCP::Core::Core::get_simple_required_property<1819569763u>(v5, 1869968496);
  else
    simple_required = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return simple_required;
}

double AMCP::Clock::get_sample_rate(AMCP::Clock *this)
{
  std::__shared_weak_count *v2;
  double simple_required;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  AMCP::Core::Core *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  simple_required = 0.0;
  if (v2)
  {
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
      if (v6)
        simple_required = AMCP::Core::Core::get_simple_required_property<1853059700u>(v6);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  return simple_required;
}

double AMCP::Core::Core::get_simple_required_property<1853059700u>(AMCP::Core::Core *a1)
{
  AMCP::Log::Scope_Registry *v1;
  char v2;
  NSObject *v4;
  _opaque_pthread_t *v5;
  mach_port_t v6;
  void *__p[2];
  char v8;
  _BYTE buf[10];
  char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  void **v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  strcpy(buf, "trsnbolg");
  buf[9] = 0;
  LOWORD(v10) = 0;
  v1 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<double,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!v2)
  {
    AMCP::Log::Scope_Registry::get(v1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v4 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = pthread_self();
      v6 = pthread_mach_thread_np(v5);
      v8 = 4;
      strcpy((char *)__p, "nsrt");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v6;
      *(_WORD *)&buf[8] = 2080;
      v10 = "Core.h";
      v11 = 1024;
      v12 = 391;
      v13 = 2080;
      v14 = "optional_value.operator BOOL() == true";
      v15 = 2080;
      v16 = __p;
      v17 = 1024;
      v18 = 1735159650;
      v19 = 1024;
      v20 = 0;
      _os_log_error_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v8 < 0)
        operator delete(__p[0]);
    }
    abort();
  }
  return *(double *)&v1;
}

void sub_1B59268BC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Core::Core::get_typed_property_value<double,std::enable_if<true,void>>(AMCP::Core::Core *a1, const AMCP::Address *a2)
{
  double v2;
  _QWORD *v5;
  unint64_t v6;
  double v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _BYTE v14[32];
  void (*v15)(_QWORD, _BYTE *, _QWORD, _QWORD);
  _QWORD *v16;
  std::__shared_weak_count *v17;

  if (!AMCP::Core::Core::has_property(a1, a2))
    goto LABEL_15;
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v16, (int8x8_t *)a1, (unsigned int *)a2);
  v5 = v16;
  if (!v16)
    goto LABEL_9;
  v6 = AMCP::Implementation::get_type_marker<std::function<double ()(void)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v5, v6))
  {
    v9 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v5, v9))
    {
      AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v14, v5);
      v2 = AMCP::Thing::convert_to<double>((uint64_t)v14);
      if (v15)
        v15(0, v14, 0, 0);
      goto LABEL_5;
    }
LABEL_9:
    v8 = 1;
    goto LABEL_10;
  }
  AMCP::Core::Operation::call_function<double>(v5);
  v2 = v7;
LABEL_5:
  v8 = 0;
LABEL_10:
  v10 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (!v8)
        return *(_QWORD *)&v2;
      goto LABEL_15;
    }
  }
  if (v8)
LABEL_15:
    *(_QWORD *)&v2 &= 0xFFFFFFFFFFFFFF00;
  return *(_QWORD *)&v2;
}

uint64_t AMCP::Clock::set_sample_rate(AMCP::Clock *this, double a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  int v19;
  double v20;
  _QWORD v21[4];
  BOOL (*v22)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  _QWORD *v23;
  std::__shared_weak_count *v24;

  v20 = a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    v18 = 0x676C6F626E737274;
    v19 = 0;
    if (!AMCP::Core::Core::is_property_settable((int8x8_t *)v7, (const AMCP::Address *)&v18))
    {
LABEL_20:
      v7 = 0;
      goto LABEL_22;
    }
    AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v23, (int8x8_t *)v7, (unsigned int *)&v18);
    v8 = v23;
    if (v23)
    {
      v9 = AMCP::Implementation::get_type_marker<std::function<void ()(double const&)>>();
      if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
      {
        AMCP::Core::Operation::call_function<void,double const&>(v8, (uint64_t)&v20);
LABEL_8:
        v10 = 0;
LABEL_14:
        v12 = v24;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        if ((v10 & 1) == 0)
        {
          v7 = 1;
          goto LABEL_22;
        }
        goto LABEL_20;
      }
      v11 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
      if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v11))
      {
        memset(&v21[1], 0, 24);
        *(double *)v21 = a2;
        v22 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
        AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v21);
        if (v22)
          v22(0, (uint64_t)v21, 0, 0);
        goto LABEL_8;
      }
    }
    v10 = 1;
    goto LABEL_14;
  }
LABEL_22:
  v15 = (unint64_t *)&v6->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v7;
}

void sub_1B5926B8C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5926B30);
}

uint64_t AMCP::Clock::set_sample_rate_and_wait(AMCP::Clock *this, double a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  int v19;
  double v20;
  _QWORD v21[4];
  BOOL (*v22)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  _QWORD *v23;
  std::__shared_weak_count *v24;

  v20 = a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    v18 = 0x676C6F626E737274;
    v19 = 0;
    if (!AMCP::Core::Core::is_property_settable((int8x8_t *)v7, (const AMCP::Address *)&v18))
    {
LABEL_20:
      v7 = 0;
      goto LABEL_22;
    }
    AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v23, (int8x8_t *)v7, (unsigned int *)&v18);
    v8 = v23;
    if (v23)
    {
      v9 = AMCP::Implementation::get_type_marker<std::function<void ()(double const&)>>();
      if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
      {
        AMCP::Core::Operation::call_function<void,double const&>(v8, (uint64_t)&v20);
LABEL_8:
        v10 = 0;
LABEL_14:
        v12 = v24;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        if ((v10 & 1) == 0)
        {
          v7 = 1;
          goto LABEL_22;
        }
        goto LABEL_20;
      }
      v11 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
      if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v11))
      {
        memset(&v21[1], 0, 24);
        *(double *)v21 = a2;
        v22 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
        AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v21);
        if (v22)
          v22(0, (uint64_t)v21, 0, 0);
        goto LABEL_8;
      }
    }
    v10 = 1;
    goto LABEL_14;
  }
LABEL_22:
  v15 = (unint64_t *)&v6->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v7;
}

void sub_1B5926D5C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5926D00);
}

void AMCP::Clock::get_available_sample_rate_list(AMCP::Clock *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  AMCP::Log::Scope_Registry *has_property;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  _opaque_pthread_t *v20;
  mach_port_t v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  void *__p[2];
  char v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  _BYTE buf[18];
  __int16 v30;
  int v31;
  __int16 v32;
  _BYTE v33[18];
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v4 || (v5 = std::__shared_weak_count::lock(v4)) == 0)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  v6 = v5;
  v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v7)
  {
    v22 = 0x676C6F626E737223;
    v23 = 0;
    has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::has_property(v7, (const AMCP::Address *)&v22);
    if (!(_DWORD)has_property)
      goto LABEL_27;
    has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v27, (int8x8_t *)v7, (unsigned int *)&v22);
    v9 = v27;
    if (v27)
    {
      v10 = AMCP::Implementation::get_type_marker<std::function<CA::ValueRangeList ()(void)>>();
      if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10))
      {
        has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Operation::call_function<CA::ValueRangeList>((uint64_t)buf, v9);
        v11 = 0;
        v24 = *(_OWORD *)buf;
        goto LABEL_15;
      }
      v12 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
      has_property = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v12);
      if (has_property)
      {
        AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)buf, v9);
        has_property = (AMCP::Log::Scope_Registry *)AMCP::Thing::convert_to<CA::ValueRangeList>(__p, (uint64_t)buf);
        v24 = *(_OWORD *)__p;
        if (*(_QWORD *)&v33[6])
          has_property = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(_QWORD, _BYTE *, _QWORD, _QWORD))&v33[6])(0, buf, 0, 0);
        v11 = 0;
LABEL_15:
        v13 = v28;
        if (v28)
        {
          p_shared_owners = (unint64_t *)&v28->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        if (!v11)
        {
          *a2 = 0;
          a2[1] = 0;
          a2[2] = 0;
          v16 = (void *)v24;
          std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>(a2, (const void *)v24, *((uint64_t *)&v24 + 1), (uint64_t)(*((_QWORD *)&v24 + 1) - v24) >> 4);
          if (v16)
            operator delete(v16);
          goto LABEL_23;
        }
LABEL_27:
        LOBYTE(v24) = 0;
        AMCP::Log::Scope_Registry::get(has_property);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v19 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          v20 = pthread_self();
          v21 = pthread_mach_thread_np(v20);
          v26 = 4;
          strcpy((char *)__p, "nsr#");
          *(_DWORD *)buf = 67110658;
          *(_DWORD *)&buf[4] = v21;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "Core.h";
          v30 = 1024;
          v31 = 391;
          v32 = 2080;
          *(_QWORD *)v33 = "optional_value.operator BOOL() == true";
          *(_WORD *)&v33[8] = 2080;
          *(_QWORD *)&v33[10] = __p;
          v34 = 1024;
          v35 = 1735159650;
          v36 = 1024;
          v37 = 0;
          _os_log_error_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v26 < 0)
            operator delete(__p[0]);
        }
        abort();
      }
    }
    v11 = 1;
    goto LABEL_15;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
LABEL_23:
  v17 = (unint64_t *)&v6->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1B59270AC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__tree_node<std::__value_type<applesauce::CF::StringRef,BOOL>,void *> *,long>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  uint64_t **leaf_high;
  _QWORD *v15;
  BOOL v16;
  uint64_t *i;
  uint64_t *v18;
  const __CFString **v19;
  uint64_t **v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24[2];
  char v25;

  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    if (!v8)
    {
      v18 = 0;
LABEL_27:
      std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(v18);
      goto LABEL_28;
    }
    v9 = std::__tree<DSP_Host_Types::AudioProcessingType>::_DetachedTreeCache::__detach_next((uint64_t)v8);
    if (a2 != a3)
    {
      v10 = v8;
      v11 = a2;
      do
      {
        v8 = v9;
        v12 = (const void *)v10[4];
        v13 = (const void *)v11[4];
        v10[4] = (uint64_t)v13;
        if (v13)
          CFRetain(v13);
        if (v12)
          CFRelease(v12);
        *((_BYTE *)v10 + 40) = *((_BYTE *)v11 + 40);
        leaf_high = (uint64_t **)std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::__find_leaf_high(a1, v24, (const __CFString **)v10 + 4);
        std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at((uint64_t **)a1, v24[0], leaf_high, v10);
        if (v8)
          v9 = std::__tree<DSP_Host_Types::AudioProcessingType>::_DetachedTreeCache::__detach_next((uint64_t)v8);
        else
          v9 = 0;
        v15 = (_QWORD *)v11[1];
        if (v15)
        {
          do
          {
            a2 = v15;
            v15 = (_QWORD *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            a2 = (_QWORD *)v11[2];
            v16 = *a2 == (_QWORD)v11;
            v11 = a2;
          }
          while (!v16);
        }
        if (!v8)
          break;
        v10 = v8;
        v11 = a2;
      }
      while (a2 != a3);
    }
    std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(v8);
    if (v9)
    {
      for (i = (uint64_t *)v9[2]; i; i = (uint64_t *)i[2])
        v9 = i;
      v18 = v9;
      goto LABEL_27;
    }
  }
LABEL_28:
  if (a2 != a3)
  {
    do
    {
      v19 = (const __CFString **)operator new(0x30uLL);
      v24[1] = a1 + 8;
      std::pair<applesauce::CF::StringRef const,BOOL>::pair[abi:ne180100]((uint64_t)(v19 + 4), (uint64_t)(a2 + 4));
      v25 = 1;
      v20 = (uint64_t **)std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::__find_leaf_high(a1, &v23, v19 + 4);
      std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at((uint64_t **)a1, v23, v20, (uint64_t *)v19);
      v24[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,BOOL>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,BOOL>,void *>>>>::reset[abi:ne180100]((uint64_t)v24);
      v21 = (_QWORD *)a2[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)a2[2];
          v16 = *v22 == (_QWORD)a2;
          a2 = v22;
        }
        while (!v16);
      }
      a2 = v22;
    }
    while (v22 != a3);
  }
}

void std::vector<MutationItinerary::Device>::__assign_with_size[abi:ne180100]<MutationItinerary::Device*,MutationItinerary::Device*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  const void *v18;

  v6 = a2;
  v8 = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    std::vector<MutationItinerary::Device>::__vdeallocate((void **)a1);
    if (a4 > 0x555555555555555)
      goto LABEL_20;
    v9 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v9 <= a4)
      v9 = a4;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL
        ? 0x555555555555555
        : v9;
    if (v10 > 0x555555555555555)
LABEL_20:
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MutationItinerary::Device>>(v10);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v11;
    *(_QWORD *)(a1 + 16) = &v11[48 * v12];
    while (v6 != a3)
    {
      v13 = std::construct_at[abi:ne180100]<MutationItinerary::Device,MutationItinerary::Device&,MutationItinerary::Device*>((uint64_t)v11, v6);
      v6 += 48;
      v11 = (char *)(v13 + 48);
    }
    goto LABEL_16;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 4) < a4)
  {
    v14 = a2 + 16 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 4);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<MutationItinerary::Device *,MutationItinerary::Device *,MutationItinerary::Device *>(a2, v14, (uint64_t)v8);
    v11 = *(char **)(a1 + 8);
    while (v14 != a3)
    {
      v15 = std::construct_at[abi:ne180100]<MutationItinerary::Device,MutationItinerary::Device&,MutationItinerary::Device*>((uint64_t)v11, v14);
      v14 += 48;
      v11 = (char *)(v15 + 48);
    }
LABEL_16:
    *(_QWORD *)(a1 + 8) = v11;
    return;
  }
  v16 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<MutationItinerary::Device *,MutationItinerary::Device *,MutationItinerary::Device *>(a2, a3, (uint64_t)v8);
  for (i = *(_QWORD *)(a1 + 8); i != v16; i -= 48)
  {
    v18 = *(const void **)(i - 48);
    std::__destroy_at[abi:ne180100]<MutationItinerary::Device,0>(v18);
  }
  *(_QWORD *)(a1 + 8) = v16;
}

_QWORD *std::vector<CAStreamBasicDescription>::__assign_with_size[abi:ne180100]<CAStreamBasicDescription*,CAStreamBasicDescription*>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *result) >> 3) < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x666666666666666)
      goto LABEL_23;
    v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    v12 = v10 >= 0x333333333333333 ? 0x666666666666666 : v11;
    if (v12 > 0x666666666666666)
LABEL_23:
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v13 = 5 * v12;
    result = operator new(40 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v16 - v9) >> 3) >= a4)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = (void *)*result;
LABEL_21:
    result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

void MutationItinerary::~MutationItinerary(MutationItinerary *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 32);
  std::vector<MutationItinerary::Device>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(*((_QWORD **)this + 2));
}

void std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<MutationItinerary::Device>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  const void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (const void *)*((_QWORD *)v4 - 6);
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<MutationItinerary::Device,0>(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(*a1);
    std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef const,BOOL>,0>((const void *)a1[4]);
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef const,BOOL>,0>(const void *a1)
{
  if (a1)
    CFRelease(a1);
}

void std::__destroy_at[abi:ne180100]<MutationItinerary::Device,0>(const void *a1)
{
  if (a1)
    CFRelease(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<MutationItinerary::Device *,MutationItinerary::Device *,MutationItinerary::Device *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  const void *v6;
  const void *v7;
  __int128 v8;
  __int128 v9;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *(const void **)a3;
      v7 = *(const void **)v5;
      *(_QWORD *)a3 = *(_QWORD *)v5;
      if (v7)
        CFRetain(v7);
      if (v6)
        CFRelease(v6);
      v8 = *(_OWORD *)(v5 + 8);
      v9 = *(_OWORD *)(v5 + 24);
      *(_QWORD *)(a3 + 37) = *(_QWORD *)(v5 + 37);
      *(_OWORD *)(a3 + 24) = v9;
      *(_OWORD *)(a3 + 8) = v8;
      a3 += 48;
      v5 += 48;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t std::construct_at[abi:ne180100]<MutationItinerary::Device,MutationItinerary::Device&,MutationItinerary::Device*>(uint64_t a1, uint64_t a2)
{
  CFTypeRef v4;
  __int128 v5;
  __int128 v6;

  v4 = *(CFTypeRef *)a2;
  if (*(_QWORD *)a2)
    CFRetain(*(CFTypeRef *)a2);
  *(_QWORD *)a1 = v4;
  v5 = *(_OWORD *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 37) = *(_QWORD *)(a2 + 37);
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 8) = v5;
  return a1;
}

void std::vector<MutationItinerary::Device>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  const void *v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = (const void *)*((_QWORD *)v3 - 6);
        v3 -= 48;
        std::__destroy_at[abi:ne180100]<MutationItinerary::Device,0>(v5);
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MutationItinerary::Device>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a1);
}

_QWORD *std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::__find_leaf_high(uint64_t a1, _QWORD *a2, const __CFString **a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v5 = (_QWORD *)v4;
        if ((unint64_t)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*a3, (const __CFString **)(v4 + 32)) < 2)break;
        v4 = *v5;
        result = v5;
        if (!*v5)
          goto LABEL_8;
      }
      v4 = v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_8:
  *a2 = v5;
  return result;
}

uint64_t std::pair<applesauce::CF::StringRef const,BOOL>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  CFTypeRef v4;

  v4 = *(CFTypeRef *)a2;
  if (*(_QWORD *)a2)
    CFRetain(*(CFTypeRef *)a2);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,BOOL>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,BOOL>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  const void **v1;

  v1 = *(const void ***)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef const,BOOL>,0>(v1[4]);
    operator delete(v1);
  }
}

void HALS_MutationChangeSynchronizer::~HALS_MutationChangeSynchronizer(HALS_MutationChangeSynchronizer *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 56);
  std::vector<MutationItinerary::Device>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(*((_QWORD **)this + 5));
  v3 = (void **)this;
  std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

_QWORD *HALS_MutationChangeSynchronizer::SetItinerary(_QWORD *this, const MutationItinerary *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v3 = this;
  v4 = (_QWORD *)*this;
  v5 = (_QWORD *)this[1];
  while (v5 != v4)
  {
    v6 = (_QWORD *)*--v5;
    this = v6;
    *v5 = 0;
    if (v6)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  v3[1] = v4;
  *((_WORD *)v3 + 12) = *(_WORD *)a2;
  if (v3 + 3 != (_QWORD *)a2)
  {
    std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__tree_node<std::__value_type<applesauce::CF::StringRef,BOOL>,void *> *,long>>((uint64_t)(v3 + 4), *((_QWORD **)a2 + 1), (_QWORD *)a2 + 2);
    std::vector<MutationItinerary::Device>::__assign_with_size[abi:ne180100]<MutationItinerary::Device*,MutationItinerary::Device*>((uint64_t)(v3 + 7), *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 4));
    return std::vector<CAStreamBasicDescription>::__assign_with_size[abi:ne180100]<CAStreamBasicDescription*,CAStreamBasicDescription*>(v3 + 10, *((char **)a2 + 7), *((char **)a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3));
  }
  return this;
}

void HALS_MutationChangeSynchronizer::Wait(AMCP::Log::Scope_Registry **this, HALS_MutationChangeSynchronizer *a2)
{
  AMCP::Log::Scope_Registry **v3;
  AMCP::Log::Scope_Registry *v4;
  _BOOL8 v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int v10;
  std::chrono::steady_clock::time_point v11;
  int v12;
  std::chrono::steady_clock::time_point v13;
  std::chrono::system_clock::time_point v14;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v16;
  int v17;
  _BOOL8 v18;
  std::__shared_weak_count *v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  unsigned int v25;
  int8x8_t v26;
  int8x8_t v27;
  int32x4_t v28;
  uint32x4_t v29;
  int16x8_t v30;
  _opaque_pthread_t *v31;
  mach_port_t v32;
  unsigned int v33;
  int8x8_t v34;
  int8x8_t v35;
  int32x4_t v36;
  uint32x4_t v37;
  int16x8_t v38;
  std::unique_lock<std::mutex> __lk;
  void *__p[2];
  char v41;
  void *v42[2];
  char v43;
  void *v44[2];
  char v45;
  uint8_t buf[8];
  _BYTE v47[10];
  __int16 v48;
  int v49;
  __int16 v50;
  AMCP::Log::Scope_Registry *v51;
  __int16 v52;
  void **v53;
  __int16 v54;
  void **v55;
  __int16 v56;
  void **v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (this == (AMCP::Log::Scope_Registry **)a2)
    return;
  v3 = this;
  do
  {
    v4 = *v3;
    if (!HALB_ChangeSynchronizer::SetStateIf(*v3, 2u, 3u))
      goto LABEL_12;
    if ((*(unsigned int (**)(AMCP::Log::Scope_Registry *))(*(_QWORD *)v4 + 16))(v4))
    {
      v5 = HALB_ChangeSynchronizer::SetStateIf(v4, 3u, 4u);
      if (!v5)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v6 = *(std::__shared_weak_count **)v47;
        v7 = **(NSObject ***)buf;
        if (*(_QWORD *)v47)
        {
          v8 = (unint64_t *)(*(_QWORD *)v47 + 8);
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 - 1, v8));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          v23 = pthread_self();
          v24 = pthread_mach_thread_np(v23);
          v25 = *((_DWORD *)v4 + 39);
          v26.i32[0] = bswap32(*((_DWORD *)v4 + 38));
          v27 = vzip1_s8(v26, v26);
          v28.i64[0] = 0x1F0000001FLL;
          v28.i64[1] = 0x1F0000001FLL;
          v29.i64[0] = 0x5F0000005FLL;
          v29.i64[1] = 0x5F0000005FLL;
          *(int8x8_t *)v30.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v29, (uint32x4_t)vsraq_n_s32(v28, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v27), 0x18uLL), 0x18uLL))), v27, (int8x8_t)0x2E002E002E002ELL);
          v45 = 4;
          *(int8x8_t *)v30.i8 = vmovn_s16(v30);
          LODWORD(v44[0]) = v30.i32[0];
          BYTE4(v44[0]) = 0;
          v30.i32[0] = bswap32(v25);
          *(int8x8_t *)v30.i8 = vzip1_s8(*(int8x8_t *)v30.i8, *(int8x8_t *)v30.i8);
          v28.i64[0] = 0x1F0000001FLL;
          v28.i64[1] = 0x1F0000001FLL;
          *(int8x8_t *)v30.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v29, (uint32x4_t)vsraq_n_s32(v28, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v30.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v30.i8, (int8x8_t)0x2E002E002E002ELL);
          v43 = 4;
          *(int8x8_t *)v30.i8 = vmovn_s16(v30);
          LODWORD(v42[0]) = v30.i32[0];
          BYTE4(v42[0]) = 0;
          v30.i32[0] = bswap32(*((_DWORD *)v4 + 40));
          *(int8x8_t *)v30.i8 = vzip1_s8(*(int8x8_t *)v30.i8, *(int8x8_t *)v30.i8);
          v28.i64[0] = 0x1F0000001FLL;
          v28.i64[1] = 0x1F0000001FLL;
          v41 = 4;
          *(int8x8_t *)v30.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v29, (uint32x4_t)vsraq_n_s32(v28, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v30.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v30.i8, (int8x8_t)0x2E002E002E002ELL);
          LODWORD(__p[0]) = vmovn_s16(v30).u32[0];
          BYTE4(__p[0]) = 0;
          *(_DWORD *)buf = 67110658;
          *(_DWORD *)&buf[4] = v24;
          *(_WORD *)v47 = 2080;
          *(_QWORD *)&v47[2] = "HALB_ChangeSynchronizer.cpp";
          v48 = 1024;
          v49 = 190;
          v50 = 2048;
          v51 = v4;
          v52 = 2080;
          v53 = v44;
          v54 = 2080;
          v55 = v42;
          v56 = 2080;
          v57 = __p;
          _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp] HALB_ChangeSynchronizer::WaitForChangeCompletion: Change synchronizer (%p) about to wait for change, discovered that it is already done, but unable to transition from state Waiting to state Completed [%s, %s, %s]", buf, 0x40u);
          if (v41 < 0)
            operator delete(__p[0]);
          if (v43 < 0)
            operator delete(v42[0]);
          if (v45 < 0)
            operator delete(v44[0]);
        }
      }
LABEL_12:
      atomic_load((unsigned int *)v4 + 2);
      goto LABEL_13;
    }
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)v4 + 40);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)((char *)v4 + 40));
    v10 = *((_DWORD *)v4 + 9);
    v11.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * v10;
    while (1)
    {
      v12 = atomic_load((unsigned int *)v4 + 2);
      if (v12 > 3)
        break;
      if (v11.__d_.__rep_ <= std::chrono::steady_clock::now().__d_.__rep_)
        goto LABEL_32;
      v13.__d_.__rep_ = v11.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
      if (v13.__d_.__rep_ >= 1)
      {
        std::chrono::steady_clock::now();
        v14.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v14.__d_.__rep_)
        {
          v15 = 0;
          goto LABEL_27;
        }
        if (v14.__d_.__rep_ < 1)
        {
          if ((unint64_t)v14.__d_.__rep_ >= 0xFFDF3B645A1CAC09)
            goto LABEL_26;
          v15 = 0x8000000000000000;
        }
        else
        {
          if ((unint64_t)v14.__d_.__rep_ > 0x20C49BA5E353F7)
          {
            v15 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_27;
          }
LABEL_26:
          v15 = 1000 * v14.__d_.__rep_;
LABEL_27:
          if (v15 > (v13.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v16.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_30:
            std::condition_variable::__do_timed_wait((std::condition_variable *)((char *)v4 + 104), &__lk, v16);
            std::chrono::steady_clock::now();
            goto LABEL_31;
          }
        }
        v16.__d_.__rep_ = v15 + v13.__d_.__rep_;
        goto LABEL_30;
      }
LABEL_31:
      if (std::chrono::steady_clock::now().__d_.__rep_ >= v11.__d_.__rep_)
      {
LABEL_32:
        v17 = atomic_load((unsigned int *)v4 + 2);
        if (v17 <= 3)
        {
          v18 = HALB_ChangeSynchronizer::SetStateIf(v4, 3u, 5u);
          if (!v18)
          {
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v18);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            v19 = *(std::__shared_weak_count **)v47;
            v20 = **(NSObject ***)buf;
            if (*(_QWORD *)v47)
            {
              v21 = (unint64_t *)(*(_QWORD *)v47 + 8);
              do
                v22 = __ldaxr(v21);
              while (__stlxr(v22 - 1, v21));
              if (!v22)
              {
                ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                std::__shared_weak_count::__release_weak(v19);
              }
            }
            if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            {
              v31 = pthread_self();
              v32 = pthread_mach_thread_np(v31);
              v33 = *((_DWORD *)v4 + 39);
              v34.i32[0] = bswap32(*((_DWORD *)v4 + 38));
              v35 = vzip1_s8(v34, v34);
              v36.i64[0] = 0x1F0000001FLL;
              v36.i64[1] = 0x1F0000001FLL;
              v37.i64[0] = 0x5F0000005FLL;
              v37.i64[1] = 0x5F0000005FLL;
              *(int8x8_t *)v38.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v37, (uint32x4_t)vsraq_n_s32(v36, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v35), 0x18uLL), 0x18uLL))), v35, (int8x8_t)0x2E002E002E002ELL);
              v45 = 4;
              *(int8x8_t *)v38.i8 = vmovn_s16(v38);
              LODWORD(v44[0]) = v38.i32[0];
              BYTE4(v44[0]) = 0;
              v38.i32[0] = bswap32(v33);
              *(int8x8_t *)v38.i8 = vzip1_s8(*(int8x8_t *)v38.i8, *(int8x8_t *)v38.i8);
              v36.i64[0] = 0x1F0000001FLL;
              v36.i64[1] = 0x1F0000001FLL;
              *(int8x8_t *)v38.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v37, (uint32x4_t)vsraq_n_s32(v36, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v38.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v38.i8, (int8x8_t)0x2E002E002E002ELL);
              v43 = 4;
              *(int8x8_t *)v38.i8 = vmovn_s16(v38);
              LODWORD(v42[0]) = v38.i32[0];
              BYTE4(v42[0]) = 0;
              v38.i32[0] = bswap32(*((_DWORD *)v4 + 40));
              *(int8x8_t *)v38.i8 = vzip1_s8(*(int8x8_t *)v38.i8, *(int8x8_t *)v38.i8);
              v36.i64[0] = 0x1F0000001FLL;
              v36.i64[1] = 0x1F0000001FLL;
              v41 = 4;
              *(int8x8_t *)v38.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v37, (uint32x4_t)vsraq_n_s32(v36, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v38.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v38.i8, (int8x8_t)0x2E002E002E002ELL);
              LODWORD(__p[0]) = vmovn_s16(v38).u32[0];
              BYTE4(__p[0]) = 0;
              *(_DWORD *)buf = 67110658;
              *(_DWORD *)&buf[4] = v32;
              *(_WORD *)v47 = 2080;
              *(_QWORD *)&v47[2] = "HALB_ChangeSynchronizer.cpp";
              v48 = 1024;
              v49 = 217;
              v50 = 2048;
              v51 = v4;
              v52 = 2080;
              v53 = v44;
              v54 = 2080;
              v55 = v42;
              v56 = 2080;
              v57 = __p;
              _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp] HALB_ChangeSynchronizer::WaitForChangeCompletion: Change synchronizer (%p) waiting for change to execute timed out, but unable to transition from state Waiting to state Timeout [%s, %s, %s]", buf, 0x40u);
              if (v41 < 0)
                operator delete(__p[0]);
              if (v43 < 0)
                operator delete(v42[0]);
              if (v45 < 0)
                operator delete(v44[0]);
            }
          }
        }
        break;
      }
    }
    atomic_load((unsigned int *)v4 + 2);
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
LABEL_13:
    ++v3;
  }
  while (v3 != (AMCP::Log::Scope_Registry **)a2);
}

void sub_1B59280F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, char a13)
{
  if (a13)
    std::mutex::unlock(a12);
  _Unwind_Resume(exception_object);
}

void AMCP::Utility::OSStatus_Error_Category::~OSStatus_Error_Category(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x1B5E50688);
}

const char *AMCP::Utility::OSStatus_Error_Category::name(AMCP::Utility::OSStatus_Error_Category *this)
{
  return "OSStatus";
}

void AMCP::Utility::OSStatus_Error_Category::message(uint64_t a1@<X1>, uint64_t a2@<X8>, int16x8_t a3@<Q0>)
{
  int32x4_t v4;
  uint32x4_t v5;
  void *__p;
  char v7;

  a3.i32[0] = bswap32(a1);
  *(int8x8_t *)a3.i8 = vzip1_s8(*(int8x8_t *)a3.i8, *(int8x8_t *)a3.i8);
  v4.i64[0] = 0x1F0000001FLL;
  v4.i64[1] = 0x1F0000001FLL;
  v5.i64[0] = 0x5F0000005FLL;
  v5.i64[1] = 0x5F0000005FLL;
  *(int8x8_t *)a3.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v5, (uint32x4_t)vsraq_n_s32(v4, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)a3.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)a3.i8, (int8x8_t)0x2E002E002E002ELL);
  v7 = 4;
  LODWORD(__p) = vmovn_s16(a3).u32[0];
  BYTE4(__p) = 0;
  caulk::make_string((caulk *)"OSStatus Code: '%s' %d 0x%X", a2, &__p, a1, a1);
  if (v7 < 0)
    operator delete(__p);
}

void AMCP::Utility::OSStatus_Error_Category::get(AMCP::Utility::OSStatus_Error_Category *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      AMCP::Utility::OSStatus_Error_Category::get(void)::s_category = (uint64_t)&off_1E6974940;
    }
  }
}

uint64_t OS::CF::UntypedObject::operator=(uint64_t a1, CFTypeRef cf)
{
  const void *v3;

  v3 = *(const void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = cf;
  if (cf)
    CFRetain(cf);
  if (v3)
    CFRelease(v3);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>>>::find<AMCP::Wire_Identifier>(_QWORD *a1, unsigned __int8 **a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;

  v4 = std::hash<AMCP::Wire_Identifier>::operator()((uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    do
    {
      v12 = v11[1];
      if (v12 == v6)
      {
        if (std::equal_to<AMCP::Wire_Identifier>::operator()[abi:ne180100]((uint64_t)(v11 + 2), a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(_QWORD *)&v5)
            v12 %= *(_QWORD *)&v5;
        }
        else
        {
          v12 &= *(_QWORD *)&v5 - 1;
        }
        if (v12 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t AMCP::Graph::Wire_Index::add_to_index(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void ***v13;
  void **i;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  std::string *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  void **v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t result;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  __int128 v50;
  __int128 v51;
  void *v52;
  unsigned __int8 **v53[3];
  void **v54;
  std::string *v55;
  std::string *v56;
  unint64_t v57;
  _QWORD *v58;

  v7 = std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::find<AMCP::Terminal_Identifier>((_QWORD *)a1, (unsigned __int8 **)a2);
  if (v7)
    goto LABEL_79;
  v51 = 0uLL;
  v52 = 0;
  v8 = std::hash<AMCP::Terminal_Identifier>::operator()(a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ****)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = (void **)*i)
      {
        v15 = (unint64_t)i[1];
        if (v15 == v9)
        {
          v54 = i + 2;
          v55 = (std::string *)(i + 5);
          v56 = (std::string *)(i + 6);
          v53[0] = (unsigned __int8 **)a2;
          v53[1] = (unsigned __int8 **)(a2 + 24);
          v53[2] = (unsigned __int8 **)(a2 + 32);
          if (std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)&v54, v53))
          {
            v48 = 0;
            v50 = 0u;
            goto LABEL_78;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (char *)operator new(0x50uLL);
  v17 = (_QWORD *)(a1 + 16);
  v54 = (void **)v16;
  v55 = (std::string *)(a1 + 16);
  LOBYTE(v56) = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v9;
  v18 = (std::string *)(v16 + 16);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v16 + 4) = *(_QWORD *)(a2 + 16);
  }
  *((_QWORD *)v16 + 5) = *(_QWORD *)(a2 + 24);
  *((_DWORD *)v16 + 12) = *(_DWORD *)(a2 + 32);
  *((_QWORD *)v16 + 8) = 0;
  *((_QWORD *)v16 + 9) = 0;
  *((_QWORD *)v16 + 7) = 0;
  LOBYTE(v56) = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v10)
      goto LABEL_34;
    if (*(_QWORD *)&prime < v10)
    {
      v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = *(void **)a1;
          *(_QWORD *)a1 = v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD *)*v17;
          if (*v17)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v17;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v28;
                    goto LABEL_59;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v35);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_59:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_63;
        }
        v49 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v49)
          operator delete(v49);
        v10 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_63:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v36 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
  i = v54;
  if (v36)
  {
    *v54 = *v36;
  }
  else
  {
    *v54 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = i;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v17;
    if (!*i)
      goto LABEL_77;
    v37 = *((_QWORD *)*i + 1);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v37 >= v10)
        v37 %= v10;
    }
    else
    {
      v37 &= v10 - 1;
    }
    v36 = (void **)(*(_QWORD *)a1 + 8 * v37);
  }
  *v36 = i;
LABEL_77:
  v54 = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v54);
  v50 = v51;
  v48 = v52;
LABEL_78:
  std::vector<AMCP::Wire_Identifier>::__vdeallocate(i + 7);
  *(_OWORD *)(i + 7) = v50;
  i[9] = v48;
  v52 = 0;
  v51 = 0uLL;
  v54 = (void **)&v51;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100](&v54);
  v7 = std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::find<AMCP::Terminal_Identifier>((_QWORD *)a1, (unsigned __int8 **)a2);
LABEL_79:
  v38 = v7[9];
  v39 = v7[8];
  if (v39 >= v38)
  {
    v42 = v7[7];
    v43 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v42) >> 4);
    if (v43 + 1 > 0x333333333333333)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v44 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v38 - v42) >> 4);
    v45 = 2 * v44;
    if (2 * v44 <= v43 + 1)
      v45 = v43 + 1;
    if (v44 >= 0x199999999999999)
      v46 = 0x333333333333333;
    else
      v46 = v45;
    v58 = v7 + 9;
    if (v46)
      v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Identifier>>(v46);
    else
      v47 = 0;
    v54 = (void **)v46;
    v55 = (std::string *)(v46 + 80 * v43);
    v56 = v55;
    v57 = v46 + 80 * v47;
    std::construct_at[abi:ne180100]<AMCP::Wire_Identifier,AMCP::Wire_Identifier const&,AMCP::Wire_Identifier*>(v55, a3);
    v56 = (std::string *)((char *)v56 + 80);
    std::vector<AMCP::Wire_Identifier>::__swap_out_circular_buffer(v7 + 7, &v54);
    v41 = v7[8];
    result = std::__split_buffer<AMCP::Wire_Identifier>::~__split_buffer((uint64_t)&v54);
  }
  else
  {
    result = (uint64_t)std::construct_at[abi:ne180100]<AMCP::Wire_Identifier,AMCP::Wire_Identifier const&,AMCP::Wire_Identifier*>((std::string *)v7[8], a3);
    v41 = v39 + 80;
    v7[8] = v39 + 80;
  }
  v7[8] = v41;
  return result;
}

void sub_1B5928930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, void **);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,void *>>>>::reset[abi:ne180100]((uint64_t)va2);
  va_copy((va_list)v11, va);
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<AMCP::Wire_Identifier,AMCP::Wire_Description>::~pair(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  v5 = (void **)(a1 + 248);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(_QWORD *)(a1 + 192) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 160);
  if (v3)
  {
    *(_QWORD *)(a1 + 168) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void AMCP::Wire_Identifier::~Wire_Identifier(void **this)
{
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

unint64_t std::hash<AMCP::Wire_Identifier>::operator()(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = std::hash<AMCP::Terminal_Identifier>::operator()(a1);
  v3 = 0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v2) ^ ((0xC6A4A7935BD1E995 * v2) >> 47)) + 3864292196u;
  v4 = std::hash<AMCP::Terminal_Identifier>::operator()(a1 + 40);
  return 3864292196u
       - 0x395B586CA42E166BLL
       * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v4) ^ ((0xC6A4A7935BD1E995 * v4) >> 47))) ^ v3);
}

BOOL std::equal_to<AMCP::Wire_Identifier>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 **a2)
{
  _BOOL8 result;
  unsigned __int8 **v5;
  unsigned __int8 **v6;
  unsigned __int8 **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = a1;
  v9 = a1 + 24;
  v10 = a1 + 32;
  v5 = a2;
  v6 = a2 + 3;
  v7 = a2 + 4;
  result = std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)&v8, &v5);
  if (result)
  {
    v8 = a1 + 40;
    v9 = a1 + 64;
    v10 = a1 + 72;
    v5 = a2 + 5;
    v6 = a2 + 8;
    v7 = a2 + 9;
    return std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)&v8, &v5);
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<AMCP::Wire_Identifier const,AMCP::Graph::Graph_Wire>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<AMCP::Wire_Identifier const,AMCP::Graph::Graph_Wire>,0>(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v4;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 512);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 496);
  std::__optional_destruct_base<AMCP::Graph::Graph_Wire::Connection,false>::~__optional_destruct_base[abi:ne180100](a1 + 272);
  v4 = (void **)(a1 + 248);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(_QWORD *)(a1 + 192) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 160);
  if (v3)
  {
    *(_QWORD *)(a1 + 168) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

std::string *AMCP::Wire_Description::Wire_Description(std::string *this, const AMCP::Wire_Description *a2)
{
  __int128 v4;
  std::string::size_type v5;
  __int128 v6;
  std::string::size_type v7;
  int v8;
  __int128 v9;
  __int128 v10;
  std::string::value_type v11;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_QWORD *)a2 + 3);
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 8);
  this[1].__r_.__value_.__r.__words[0] = v5;
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 40);
    this[2].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 7);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = v6;
  }
  v7 = *((_QWORD *)a2 + 8);
  v8 = *((_DWORD *)a2 + 18);
  this[3].__r_.__value_.__l.__size_ = 0;
  LODWORD(this[3].__r_.__value_.__l.__data_) = v8;
  this[2].__r_.__value_.__r.__words[2] = v7;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__r.__words[0] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this[3].__r_.__value_.__l.__size_, *((const void **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 2);
  this[4].__r_.__value_.__l.__size_ = 0;
  this[4].__r_.__value_.__r.__words[2] = 0;
  this[5].__r_.__value_.__r.__words[0] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&this[4].__r_.__value_.__l.__size_, *((const void **)a2 + 13), *((_QWORD *)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 2);
  v9 = *((_OWORD *)a2 + 8);
  v10 = *((_OWORD *)a2 + 9);
  v11 = *((_BYTE *)a2 + 160);
  this[7].__r_.__value_.__r.__words[0] = 0;
  this[6].__r_.__value_.__s.__data_[16] = v11;
  *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = v10;
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = v9;
  this[7].__r_.__value_.__l.__size_ = 0;
  this[7].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 7, *((__int128 **)a2 + 21), *((__int128 **)a2 + 22), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 22) - *((_QWORD *)a2 + 21)) >> 3));
  return this;
}

void sub_1B5928D7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>(_QWORD *a1, unsigned __int8 **a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;

  v4 = std::hash<AMCP::Wire_Identifier>::operator()((uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    do
    {
      v12 = v11[1];
      if (v6 == v12)
      {
        if (std::equal_to<AMCP::Wire_Identifier>::operator()[abi:ne180100]((uint64_t)(v11 + 2), a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(_QWORD *)&v5)
            v12 %= *(_QWORD *)&v5;
        }
        else
        {
          v12 &= *(_QWORD *)&v5 - 1;
        }
        if (v12 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::pair<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>::~pair(uint64_t a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 80);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<AMCP::Wire_Identifier const,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<AMCP::Wire_Identifier const,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,0>(uint64_t a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 80);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__shared_ptr_emplace<AMCP::Graph::Wire_Volume_Connection>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69749A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Graph::Wire_Volume_Connection>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69749A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E5067CLL);
}

void std::__shared_ptr_emplace<AMCP::Graph::Wire_Volume_Connection>::__on_zero_shared_weak()
{
  JUMPOUT(0x1B5E5067CLL);
}

_QWORD *std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::find<AMCP::Terminal_Identifier>(_QWORD *a1, unsigned __int8 **a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unsigned __int8 **v14[3];
  _QWORD v15[3];

  v4 = std::hash<AMCP::Terminal_Identifier>::operator()((uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    do
    {
      v12 = v11[1];
      if (v12 == v6)
      {
        v15[0] = v11 + 2;
        v15[1] = v11 + 5;
        v15[2] = v11 + 6;
        v14[0] = a2;
        v14[1] = a2 + 3;
        v14[2] = a2 + 4;
        if (std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)v15, v14))
        {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(_QWORD *)&v5)
            v12 %= *(_QWORD *)&v5;
        }
        else
        {
          v12 &= *(_QWORD *)&v5 - 1;
        }
        if (v12 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unsigned __int8 **v14[3];
  _QWORD v15[3];

  v4 = std::hash<AMCP::Terminal_Identifier>::operator()((uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    do
    {
      v12 = v11[1];
      if (v6 == v12)
      {
        v15[0] = v11 + 2;
        v15[1] = v11 + 5;
        v15[2] = v11 + 6;
        v14[0] = a2;
        v14[1] = a2 + 3;
        v14[2] = a2 + 4;
        if (std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)v15, v14))
        {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(_QWORD *)&v5)
            v12 %= *(_QWORD *)&v5;
        }
        else
        {
          v12 &= *(_QWORD *)&v5 - 1;
        }
        if (v12 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

void std::vector<AMCP::Wire_Identifier>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 80;
        std::__destroy_at[abi:ne180100]<AMCP::Wire_Identifier,0>(v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *std::construct_at[abi:ne180100]<AMCP::Wire_Identifier,AMCP::Wire_Identifier const&,AMCP::Wire_Identifier*>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string::size_type v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_QWORD *)a2 + 3);
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 8);
  this[1].__r_.__value_.__r.__words[0] = v5;
  v6 = (std::string *)((char *)this + 40);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v7 = *(__int128 *)((char *)a2 + 40);
    this[2].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 7);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  v8 = *((_QWORD *)a2 + 8);
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 18);
  this[2].__r_.__value_.__r.__words[2] = v8;
  return this;
}

void sub_1B5929218(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Identifier>>(unint64_t a1)
{
  if (a1 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(80 * a1);
}

uint64_t *std::vector<AMCP::Wire_Identifier>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 80;
      v6 = *(_OWORD *)(v3 - 80);
      *(_QWORD *)(v4 - 64) = *(_QWORD *)(v3 - 64);
      *(_OWORD *)(v4 - 80) = v6;
      *(_QWORD *)(v3 - 72) = 0;
      *(_QWORD *)(v3 - 64) = 0;
      *(_QWORD *)(v3 - 80) = 0;
      v7 = *(_QWORD *)(v3 - 56);
      *(_DWORD *)(v4 - 48) = *(_DWORD *)(v3 - 48);
      *(_QWORD *)(v4 - 56) = v7;
      v8 = *(_OWORD *)(v3 - 40);
      *(_QWORD *)(v4 - 24) = *(_QWORD *)(v3 - 24);
      *(_OWORD *)(v4 - 40) = v8;
      *(_QWORD *)(v3 - 32) = 0;
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 40) = 0;
      v9 = *(_QWORD *)(v3 - 16);
      *(_DWORD *)(v4 - 8) = *(_DWORD *)(v3 - 8);
      *(_QWORD *)(v4 - 16) = v9;
      v3 -= 80;
      v4 -= 80;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v10 = *result;
  *result = v5;
  a2[1] = v10;
  v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<AMCP::Wire_Identifier>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    std::__destroy_at[abi:ne180100]<AMCP::Wire_Identifier,0>(i - 80);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<AMCP::Terminal_Identifier const,std::vector<AMCP::Wire_Identifier>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<AMCP::Terminal_Identifier const,std::vector<AMCP::Wire_Identifier>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 40);
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void AMCP::Graph::Wire_Index::remove_from_index(_QWORD *a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  __int128 v10;
  int v11;
  void **v12;
  __int128 v13;
  uint64_t v14;
  _DWORD *v15;
  unsigned __int8 **v16;
  unsigned __int8 **v17;
  unsigned __int8 **v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;

  v4 = std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::find<AMCP::Terminal_Identifier>(a1, a2);
  if (v4)
  {
    v5 = v4;
    v7 = v4[7];
    v6 = v4[8];
    if (v7 == v6)
    {
      v8 = v4[7];
    }
    else
    {
      v8 = v4[7];
      while (1)
      {
        v19 = (_DWORD *)v8;
        v20 = (_DWORD *)(v8 + 24);
        v21 = (_DWORD *)(v8 + 32);
        v16 = a3;
        v17 = a3 + 3;
        v18 = a3 + 4;
        if (std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)&v19, &v16))
        {
          v19 = (_DWORD *)(v8 + 40);
          v20 = (_DWORD *)(v8 + 64);
          v21 = (_DWORD *)(v8 + 72);
          v16 = a3 + 5;
          v17 = a3 + 8;
          v18 = a3 + 9;
          if (std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)&v19, &v16))
          {
            break;
          }
        }
        v8 += 80;
        if (v8 == v6)
        {
          v8 = v6;
          break;
        }
      }
    }
    if (v8 != v6)
    {
      if (v8 + 80 != v6)
      {
        v9 = (_DWORD *)(v7 + 16 * ((v8 - v7) >> 4) + 152);
        do
        {
          v19 = v9 - 18;
          v20 = v9 - 12;
          v21 = v9 - 10;
          v16 = a3;
          v17 = a3 + 3;
          v18 = a3 + 4;
          if (!std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)&v19, &v16)|| (v19 = v9 - 8, v20 = v9 - 2, v21 = v9, v16 = a3 + 5, v17 = a3 + 8, v18 = a3 + 9, !std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)&v19, &v16)))
          {
            if (*(char *)(v8 + 23) < 0)
              operator delete(*(void **)v8);
            v10 = *(_OWORD *)(v9 - 18);
            *(_QWORD *)(v8 + 16) = *((_QWORD *)v9 - 7);
            *(_OWORD *)v8 = v10;
            *((_BYTE *)v9 - 49) = 0;
            *((_BYTE *)v9 - 72) = 0;
            v11 = *(v9 - 10);
            *(_QWORD *)(v8 + 24) = *((_QWORD *)v9 - 6);
            *(_DWORD *)(v8 + 32) = v11;
            v12 = (void **)(v8 + 40);
            if (*(char *)(v8 + 63) < 0)
              operator delete(*v12);
            v13 = *((_OWORD *)v9 - 2);
            *(_QWORD *)(v8 + 56) = *((_QWORD *)v9 - 2);
            *(_OWORD *)v12 = v13;
            *((_BYTE *)v9 - 9) = 0;
            *((_BYTE *)v9 - 32) = 0;
            v14 = *((_QWORD *)v9 - 1);
            *(_DWORD *)(v8 + 72) = *v9;
            *(_QWORD *)(v8 + 64) = v14;
            v8 += 80;
          }
          v15 = v9 + 2;
          v9 += 20;
        }
        while (v15 != (_DWORD *)v6);
        v6 = v5[8];
      }
      if (v8 != v6)
      {
        while (v6 != v8)
        {
          v6 -= 80;
          std::__destroy_at[abi:ne180100]<AMCP::Wire_Identifier,0>(v6);
        }
        v5[8] = v8;
      }
    }
  }
}

void AMCP::Graph::Wire_Index::get_wires_for_terminal(_QWORD *a1, _QWORD *a2, unsigned __int8 **a3)
{
  _QWORD *v5;
  unsigned __int8 **v6;
  unsigned __int8 **v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::find<AMCP::Terminal_Identifier>(a2, a3);
  if (v5)
  {
    v6 = (unsigned __int8 **)v5[7];
    v7 = (unsigned __int8 **)v5[8];
    if (v6 != v7)
    {
      v8 = 0;
      v9 = a2 + 5;
      do
      {
        v10 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>(v9, v6);
        if (v10)
        {
          v11 = v10 + 12;
          v12 = a1[2];
          if ((unint64_t)v8 >= v12)
          {
            v14 = (_QWORD *)*a1;
            v15 = ((uint64_t)v8 - *a1) >> 3;
            v16 = v15 + 1;
            if ((unint64_t)(v15 + 1) >> 61)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v17 = v12 - (_QWORD)v14;
            if (v17 >> 2 > v16)
              v16 = v17 >> 2;
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
              v18 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v18 = v16;
            if (v18)
              v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v18);
            else
              v19 = 0;
            v20 = (_QWORD *)(v18 + 8 * v15);
            *v20 = v11;
            v13 = v20 + 1;
            if (v8 != v14)
            {
              do
              {
                v21 = *--v8;
                *--v20 = v21;
              }
              while (v8 != v14);
              v8 = (_QWORD *)*a1;
            }
            *a1 = v20;
            a1[1] = v13;
            a1[2] = v18 + 8 * v19;
            if (v8)
              operator delete(v8);
          }
          else
          {
            *v8 = v11;
            v13 = v8 + 1;
          }
          a1[1] = v13;
          v8 = v13;
        }
        v6 += 10;
      }
      while (v6 != v7);
    }
  }
}

void sub_1B5929830(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::Wire_Index::get_wires_for_terminal(char **a1, _QWORD *a2, unsigned __int8 **a3)
{
  _QWORD *v5;
  unsigned __int8 **v6;
  unsigned __int8 **v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::find<AMCP::Terminal_Identifier>(a2, a3);
  if (v5)
  {
    v6 = (unsigned __int8 **)v5[7];
    v7 = (unsigned __int8 **)v5[8];
    if (v6 != v7)
    {
      v8 = 0;
      v9 = a2 + 5;
      do
      {
        v10 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>>>::find<AMCP::Wire_Identifier>(v9, v6);
        if (v10)
        {
          v11 = v10 + 12;
          v12 = (unint64_t)a1[2];
          if ((unint64_t)v8 >= v12)
          {
            v14 = *a1;
            v15 = (v8 - *a1) >> 3;
            v16 = v15 + 1;
            if ((unint64_t)(v15 + 1) >> 61)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v17 = v12 - (_QWORD)v14;
            if (v17 >> 2 > v16)
              v16 = v17 >> 2;
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
              v18 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v18 = v16;
            if (v18)
            {
              if (v18 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v19 = (char *)operator new(8 * v18);
            }
            else
            {
              v19 = 0;
            }
            v20 = &v19[8 * v15];
            *(_QWORD *)v20 = v11;
            v13 = v20 + 8;
            if (v8 != v14)
            {
              do
              {
                v21 = *((_QWORD *)v8 - 1);
                v8 -= 8;
                *((_QWORD *)v20 - 1) = v21;
                v20 -= 8;
              }
              while (v8 != v14);
              v8 = *a1;
            }
            *a1 = v20;
            a1[1] = v13;
            a1[2] = &v19[8 * v18];
            if (v8)
              operator delete(v8);
          }
          else
          {
            *(_QWORD *)v8 = v11;
            v13 = v8 + 8;
          }
          a1[1] = v13;
          v8 = v13;
        }
        v6 += 10;
      }
      while (v6 != v7);
    }
  }
}

void sub_1B5929ACC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<AMCP::Wire_Identifier const,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<AMCP::Wire_Identifier const,AMCP::Graph::Graph_Wire>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<AMCP::Terminal_Identifier const,std::vector<AMCP::Wire_Identifier>>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void AMCP::Graph::Wire_Index::get_wires(AMCP::Graph::Wire_Index *this, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  unsigned __int8 **v5;
  unsigned __int8 **v6;
  _QWORD *v7;
  void *v8[2];
  char v9;
  void *v10;
  char v11;
  void *v12;
  void *v13;
  void *__p;
  void *v15;
  uint64_t v16;
  void **v17;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  v2 = *(_QWORD **)(a2 + 16);
  if (v2)
  {
    v4 = (_QWORD *)(a2 + 40);
    do
    {
      v5 = (unsigned __int8 **)v2[7];
      v6 = (unsigned __int8 **)v2[8];
      while (v5 != v6)
      {
        v7 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>(v4, v5);
        if (v7)
        {
          AMCP::Graph::Graph_Wire::get_description((AMCP::Graph::Graph_Wire *)v8, (uint64_t)(v7 + 12));
          std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__emplace_unique_key_args<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)this, (uint64_t)v8, (__int128 *)v8);
          v17 = (void **)&v16;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v17);
          if (__p)
          {
            v15 = __p;
            operator delete(__p);
          }
          if (v12)
          {
            v13 = v12;
            operator delete(v12);
          }
          if (v11 < 0)
            operator delete(v10);
          if (v9 < 0)
            operator delete(v8[0]);
        }
        v5 += 10;
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
}

void sub_1B5929C98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  AMCP::Wire_Description::~Wire_Description((AMCP::Wire_Description *)va);
  std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__emplace_unique_key_args<AMCP::Wire_Description,AMCP::Wire_Description>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint8x8_t v22;
  unint64_t v23;
  uint64_t **v24;
  uint64_t *v25;
  unint64_t v26;
  const void *v27;
  const void *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  _BOOL4 v31;
  _QWORD *v32;
  _QWORD *v33;
  float v34;
  float v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  int8x8_t prime;
  void *v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint8x8_t v45;
  unint64_t v46;
  uint8x8_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  void *v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  uint64_t v57;
  const void *v58;
  size_t v59;
  void *__s2;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  size_t __n;
  unsigned __int8 *v71;
  __int128 *v72;
  unsigned __int8 **v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t *v77;
  uint64_t *v78;

  v6 = std::hash<AMCP::Terminal_Identifier>::operator()(a2);
  v7 = std::hash<AMCP::Terminal_Identifier>::operator()(a2 + 40);
  v8 = *(unsigned int **)(a2 + 80);
  v9 = *(unsigned int **)(a2 + 88);
  v72 = a3;
  if (v8 == v9)
  {
    v12 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v11 = *v8++;
      v10 = 3864292196u
          - 0x395B586CA42E166BLL
          * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v11) ^ ((0xC6A4A7935BD1E995 * v11) >> 47))) ^ v10);
    }
    while (v8 != v9);
    v12 = 0xC6A4A7935BD1E995 * v10;
  }
  v13 = *(int *)(a2 + 128);
  v69 = *(int *)(a2 + 132);
  v68 = *(int *)(a2 + 136);
  v65 = *(int *)(a2 + 140);
  v63 = *(int *)(a2 + 148);
  v64 = *(int *)(a2 + 144);
  v66 = *(int *)(a2 + 156);
  v67 = *(int *)(a2 + 152);
  v62 = *(unsigned __int8 *)(a2 + 160);
  v14 = 3864292196u
      - 0x395B586CA42E166BLL
      * ((3864292196u
        - 0x395B586CA42E166BLL
        * ((3864292196u
          - 0x395B586CA42E166BLL
          * ((3864292196u
            - 0x395B586CA42E166BLL
            * ((3864292196u
              - 0x395B586CA42E166BLL
              * ((3864292196u
                - 0x395B586CA42E166BLL
                * ((3864292196u
                  - 0x395B586CA42E166BLL
                  * ((3864292196u
                    - 0x395B586CA42E166BLL
                    * ((3864292196u
                      - 0x395B586CA42E166BLL
                      * ((3864292196u
                        - 0x395B586CA42E166BLL
                        * ((0xC6A4A7935BD1E995 * (v12 ^ (v12 >> 47))) ^ (3864292196u
                                                                         - 0x395B586CA42E166BLL
                                                                         * ((0xC6A4A7935BD1E995
                                                                           * ((0xC6A4A7935BD1E995 * v7) ^ ((0xC6A4A7935BD1E995 * v7) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v6) ^ ((0xC6A4A7935BD1E995 * v6) >> 47)) + 3864292196u))))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v13) ^ ((0xC6A4A7935BD1E995 * v13) >> 47))))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v69) ^ ((0xC6A4A7935BD1E995 * v69) >> 47))))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v68) ^ ((0xC6A4A7935BD1E995 * v68) >> 47))))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v65) ^ ((0xC6A4A7935BD1E995 * v65) >> 47))))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v64) ^ ((0xC6A4A7935BD1E995 * v64) >> 47))))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v63) ^ ((0xC6A4A7935BD1E995 * v63) >> 47))))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v67) ^ ((0xC6A4A7935BD1E995 * v67) >> 47))))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v66) ^ ((0xC6A4A7935BD1E995 * v66) >> 47))))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v62) ^ ((0xC6A4A7935BD1E995 * v62) >> 47))));
  v16 = *(_QWORD *)(a2 + 168);
  v15 = *(_QWORD *)(a2 + 176);
  v71 = (unsigned __int8 *)v16;
  for (i = 0; v16 != v15; v16 += 24)
  {
    v18 = std::__string_hash<char>::operator()[abi:ne180100](v16);
    i = 3864292196u
      - 0x395B586CA42E166BLL
      * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v18) ^ ((0xC6A4A7935BD1E995 * v18) >> 47))) ^ i);
  }
  v19 = v14 ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * i) ^ ((0xC6A4A7935BD1E995 * i) >> 47)));
  v20 = 3864292196u - 0x395B586CA42E166BLL * v19;
  v21 = *(_QWORD *)(a1 + 8);
  if (v21)
  {
    v61 = v13;
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
    v22.i16[0] = vaddlv_u8(v22);
    v23 = v22.u32[0];
    if (v22.u32[0] > 1uLL)
    {
      v13 = 3864292196u - 0x395B586CA42E166BLL * v19;
      if (v20 >= v21)
        v13 = v20 % v21;
    }
    else
    {
      v13 = (v21 - 1) & v20;
    }
    v24 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v13);
    if (v24)
    {
      v25 = *v24;
      if (*v24)
      {
        __s2 = *(void **)(a2 + 80);
        __n = *(_QWORD *)(a2 + 88) - (_QWORD)__s2;
        v58 = *(const void **)(a2 + 104);
        v59 = *(_QWORD *)(a2 + 112) - (_QWORD)v58;
        v57 = v15 - (_QWORD)v71;
        do
        {
          v26 = v25[1];
          if (v26 == v20)
          {
            v76 = v25 + 2;
            v77 = v25 + 5;
            v78 = v25 + 6;
            v73 = (unsigned __int8 **)a2;
            v74 = a2 + 24;
            v75 = a2 + 32;
            if (std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)&v76, &v73))
            {
              v76 = v25 + 7;
              v77 = v25 + 10;
              v78 = v25 + 11;
              v73 = (unsigned __int8 **)(a2 + 40);
              v74 = a2 + 64;
              v75 = a2 + 72;
              if (std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)&v76, &v73))
              {
                v27 = (const void *)v25[12];
                if (v25[13] - (_QWORD)v27 == __n && !memcmp(v27, __s2, __n))
                {
                  v28 = (const void *)v25[15];
                  if (v25[16] - (_QWORD)v28 == v59
                    && !memcmp(v28, v58, v59)
                    && *((_DWORD *)v25 + 36) == v61
                    && *((_DWORD *)v25 + 37) == (_DWORD)v69
                    && *((_DWORD *)v25 + 38) == (_DWORD)v68
                    && *((_DWORD *)v25 + 42) == (_DWORD)v67
                    && *((_DWORD *)v25 + 43) == (_DWORD)v66
                    && *((_DWORD *)v25 + 39) == (_DWORD)v65
                    && *((_DWORD *)v25 + 40) == (_DWORD)v64
                    && *((_DWORD *)v25 + 41) == (_DWORD)v63
                    && *((unsigned __int8 *)v25 + 176) == (_DWORD)v62)
                  {
                    v29 = (unsigned __int8 *)v25[23];
                    v55 = (unsigned __int8 *)v25[24];
                    if (v55 - v29 == v57)
                    {
                      if (v29 == v55)
                        return;
                      v30 = v71;
                      do
                      {
                        v56 = v29;
                        v31 = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v29, v30);
                        if (!v31)
                          break;
                        v29 = v56 + 24;
                        v30 += 24;
                      }
                      while (v56 + 24 != v55);
                      if (v31)
                        return;
                    }
                  }
                }
              }
            }
          }
          else
          {
            if (v23 > 1)
            {
              if (v26 >= v21)
                v26 %= v21;
            }
            else
            {
              v26 &= v21 - 1;
            }
            if (v26 != v13)
              break;
          }
          v25 = (uint64_t *)*v25;
        }
        while (v25);
      }
    }
  }
  v32 = (_QWORD *)(a1 + 16);
  v33 = operator new(0xD0uLL);
  v76 = v33;
  v77 = (uint64_t *)(a1 + 16);
  *v33 = 0;
  v33[1] = v20;
  std::construct_at[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description,AMCP::Wire_Description*>((uint64_t)(v33 + 2), v72);
  LOBYTE(v78) = 1;
  v34 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v35 = *(float *)(a1 + 32);
  if (!v21 || (float)(v35 * (float)v21) < v34)
  {
    v36 = 1;
    if (v21 >= 3)
      v36 = (v21 & (v21 - 1)) != 0;
    v37 = v36 | (2 * v21);
    v38 = vcvtps_u32_f32(v34 / v35);
    if (v37 <= v38)
      prime = (int8x8_t)v38;
    else
      prime = (int8x8_t)v37;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v21 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v21)
      goto LABEL_58;
    if (*(_QWORD *)&prime < v21)
    {
      v46 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v21 < 3 || (v47 = (uint8x8_t)vcnt_s8((int8x8_t)v21), v47.i16[0] = vaddlv_u8(v47), v47.u32[0] > 1uLL))
      {
        v46 = std::__next_prime(v46);
      }
      else
      {
        v48 = 1 << -(char)__clz(v46 - 1);
        if (v46 >= 2)
          v46 = v48;
      }
      if (*(_QWORD *)&prime <= v46)
        prime = (int8x8_t)v46;
      if (*(_QWORD *)&prime >= v21)
      {
        v21 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_58:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v40 = operator new(8 * *(_QWORD *)&prime);
          v41 = *(void **)a1;
          *(_QWORD *)a1 = v40;
          if (v41)
            operator delete(v41);
          v42 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v42++) = 0;
          while (*(_QWORD *)&prime != v42);
          v43 = (_QWORD *)*v32;
          if (*v32)
          {
            v44 = v43[1];
            v45 = (uint8x8_t)vcnt_s8(prime);
            v45.i16[0] = vaddlv_u8(v45);
            if (v45.u32[0] > 1uLL)
            {
              if (v44 >= *(_QWORD *)&prime)
                v44 %= *(_QWORD *)&prime;
            }
            else
            {
              v44 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v44) = v32;
            v49 = (_QWORD *)*v43;
            if (*v43)
            {
              do
              {
                v50 = v49[1];
                if (v45.u32[0] > 1uLL)
                {
                  if (v50 >= *(_QWORD *)&prime)
                    v50 %= *(_QWORD *)&prime;
                }
                else
                {
                  v50 &= *(_QWORD *)&prime - 1;
                }
                if (v50 != v44)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v50))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v50) = v43;
                    goto LABEL_83;
                  }
                  *v43 = *v49;
                  *v49 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v50);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v50) = v49;
                  v49 = v43;
                }
                v50 = v44;
LABEL_83:
                v43 = v49;
                v49 = (_QWORD *)*v49;
                v44 = v50;
              }
              while (v49);
            }
          }
          v21 = (unint64_t)prime;
          goto LABEL_87;
        }
        v54 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v54)
          operator delete(v54);
        v21 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_87:
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v20 >= v21)
        v13 = v20 % v21;
      else
        v13 = v20;
    }
    else
    {
      v13 = (v21 - 1) & v20;
    }
  }
  v51 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
  v52 = v76;
  if (v51)
  {
    *v76 = *v51;
LABEL_100:
    *v51 = v52;
    goto LABEL_101;
  }
  *v76 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v52;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v32;
  if (*v52)
  {
    v53 = *(_QWORD *)(*v52 + 8);
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v53 >= v21)
        v53 %= v21;
    }
    else
    {
      v53 &= v21 - 1;
    }
    v51 = (_QWORD *)(*(_QWORD *)a1 + 8 * v53);
    goto LABEL_100;
  }
LABEL_101:
  v76 = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<AMCP::Wire_Description,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<AMCP::Wire_Description,void *>>>>::reset[abi:ne180100]((uint64_t)&v76);
}

void sub_1B592A46C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<AMCP::Wire_Description,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<AMCP::Wire_Description,void *>>>>::reset[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::__destroy_at[abi:ne180100]<AMCP::Wire_Description,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

__n128 std::construct_at[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description,AMCP::Wire_Description*>(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __n128 result;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v3 = *((_QWORD *)a2 + 3);
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(__int128 *)((char *)a2 + 40);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  *(_OWORD *)(a1 + 40) = v4;
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 5) = 0;
  v5 = *((_QWORD *)a2 + 8);
  *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 12) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = *(__int128 *)((char *)a2 + 104);
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  v6 = a2[8];
  v7 = a2[9];
  *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
  *(_OWORD *)(a1 + 128) = v6;
  *(_OWORD *)(a1 + 144) = v7;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  result = *(__n128 *)((char *)a2 + 168);
  *(__n128 *)(a1 + 168) = result;
  *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 21) = 0;
  *((_QWORD *)a2 + 22) = 0;
  *((_QWORD *)a2 + 23) = 0;
  return result;
}

void std::unique_ptr<std::__hash_node<AMCP::Wire_Description,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<AMCP::Wire_Description,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<AMCP::Wire_Description,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void AMCP::Graph::Wire_Index::get_wires_for_node(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t i;
  std::string::size_type v11;
  void **v12;
  uint64_t v13;
  std::string::size_type v14;
  void **v15;
  uint64_t *v16;
  uint64_t *v17;
  std::string v18;
  void **v19;
  _QWORD *v20;
  std::string v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  void *__p[2];
  std::string::size_type v26;
  uint64_t v27;
  int v28;
  void *v29;
  char v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;

  v22 = 0;
  v23 = 0;
  v24 = 0;
  if (a4)
  {
    for (i = 0; i != a4; ++i)
    {
      if (*(char *)(a3 + 23) < 0)
        std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      else
        v21 = *(std::string *)a3;
      *(_OWORD *)__p = *(_OWORD *)&v21.__r_.__value_.__l.__data_;
      v11 = v21.__r_.__value_.__r.__words[2];
      memset(&v21, 0, sizeof(v21));
      v26 = v11;
      v27 = i;
      v28 = 1;
      AMCP::Graph::Wire_Index::get_wires_for_terminal(&v19, a2, (unsigned __int8 **)__p);
      v12 = v19;
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::reference_wrapper<AMCP::Graph::Graph_Wire const> *>,std::__wrap_iter<std::reference_wrapper<AMCP::Graph::Graph_Wire const> *>,std::back_insert_iterator<std::vector<std::reference_wrapper<AMCP::Graph::Graph_Wire const>>>,0>(v19, v20, (void **)&v22);
      if (v12)
        operator delete(v12);
      if (SHIBYTE(v26) < 0)
        operator delete(__p[0]);
    }
  }
  if (a5)
  {
    v13 = 0;
    do
    {
      if (*(char *)(a3 + 23) < 0)
        std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      else
        v18 = *(std::string *)a3;
      *(_OWORD *)__p = *(_OWORD *)&v18.__r_.__value_.__l.__data_;
      v14 = v18.__r_.__value_.__r.__words[2];
      memset(&v18, 0, sizeof(v18));
      v26 = v14;
      v27 = v13;
      v28 = 0;
      AMCP::Graph::Wire_Index::get_wires_for_terminal(&v19, a2, (unsigned __int8 **)__p);
      v15 = v19;
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::reference_wrapper<AMCP::Graph::Graph_Wire const> *>,std::__wrap_iter<std::reference_wrapper<AMCP::Graph::Graph_Wire const> *>,std::back_insert_iterator<std::vector<std::reference_wrapper<AMCP::Graph::Graph_Wire const>>>,0>(v19, v20, (void **)&v22);
      if (v15)
        operator delete(v15);
      if (SHIBYTE(v26) < 0)
        operator delete(__p[0]);
      ++v13;
    }
    while (a5 != v13);
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v16 = v22;
  v17 = v23;
  if (v22 != v23)
  {
    do
    {
      AMCP::Graph::Graph_Wire::get_description((AMCP::Graph::Graph_Wire *)__p, *v16);
      std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__emplace_unique_key_args<AMCP::Wire_Description,AMCP::Wire_Description>(a1, (uint64_t)__p, (__int128 *)__p);
      v19 = (void **)&v35;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
      if (v33)
      {
        v34 = v33;
        operator delete(v33);
      }
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      if (v30 < 0)
        operator delete(v29);
      if (SHIBYTE(v26) < 0)
        operator delete(__p[0]);
      ++v16;
    }
    while (v16 != v17);
    v16 = v22;
  }
  if (v16)
  {
    v23 = v16;
    operator delete(v16);
  }
}

void sub_1B592A830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::reference_wrapper<AMCP::Graph::Graph_Wire const> *>,std::__wrap_iter<std::reference_wrapper<AMCP::Graph::Graph_Wire const> *>,std::back_insert_iterator<std::vector<std::reference_wrapper<AMCP::Graph::Graph_Wire const>>>,0>(_QWORD *a1, _QWORD *a2, void **a3)
{
  _QWORD *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  if (a1 != a2)
  {
    v5 = a1;
    v6 = (char *)a3[1];
    do
    {
      v7 = (unint64_t)a3[2];
      if ((unint64_t)v6 >= v7)
      {
        v8 = (v6 - (_BYTE *)*a3) >> 3;
        if ((unint64_t)(v8 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v9 = v7 - (_QWORD)*a3;
        v10 = v9 >> 2;
        if (v9 >> 2 <= (unint64_t)(v8 + 1))
          v10 = v8 + 1;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v11);
        else
          v12 = 0;
        v13 = (char *)(v11 + 8 * v8);
        *(_QWORD *)v13 = *v5;
        v6 = v13 + 8;
        v15 = (char *)*a3;
        v14 = (char *)a3[1];
        if (v14 != *a3)
        {
          do
          {
            v16 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          v14 = (char *)*a3;
        }
        *a3 = v13;
        a3[1] = v6;
        a3[2] = (void *)(v11 + 8 * v12);
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_QWORD *)v6 = *v5;
        v6 += 8;
      }
      a3[1] = v6;
      ++v5;
    }
    while (v5 != a2);
  }
}

void AMCP::Graph::Wire_Index::get_tgid_for_wire(AMCP::Graph::Wire_Index *this, const AMCP::Wire_Identifier *a2, unsigned __int8 **a3)
{
  _QWORD *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::string v9;
  void *v10;
  char v11;
  void *v12[2];
  uint64_t v13;
  void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  void *__p;
  void *v18;

  v4 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>((_QWORD *)a2 + 5, a3);
  if (v4 && *((_BYTE *)v4 + 504))
  {
    AMCP::Graph::Graph_Wire::Connection::Connection(&v9, (const AMCP::Graph::Graph_Wire::Connection *)(v4 + 36));
    *(_OWORD *)this = *(_OWORD *)v12;
    v5 = __p;
    *((_QWORD *)this + 2) = v13;
    v12[0] = 0;
    v12[1] = 0;
    v13 = 0;
    if (v5)
    {
      v18 = v5;
      operator delete(v5);
    }
    v6 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (v14)
    {
      v15 = v14;
      operator delete(v14);
    }
    if (SHIBYTE(v13) < 0)
      operator delete(v12[0]);
    if (v11 < 0)
      operator delete(v10);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
}

_QWORD *std::__tree<std::string>::find<std::string>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  char v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6 >= 0)
      v5 = v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

void HALB_FormatList::~HALB_FormatList(HALB_FormatList *this)
{
  HALB_FormatList::~HALB_FormatList(this);
  JUMPOUT(0x1B5E50688);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E69749F0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

void HALB_FormatList::GetFormatListWithUpdatedSampleRate(HALB_FormatList *this, const HALB_FormatList *a2, HALB_FormatList *a3, Float64 a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  HALB_FormatList *v11;
  __int128 v12;
  AudioStreamRangedDescription v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (this != a2)
  {
    v14 = v7;
    v15 = v6;
    v16 = v4;
    v17 = v5;
    v11 = this;
    do
    {
      v12 = *((_OWORD *)v11 + 1);
      *(_OWORD *)&v13.mFormat.mSampleRate = *(_OWORD *)v11;
      *(_OWORD *)&v13.mFormat.mBytesPerPacket = v12;
      *(_QWORD *)&v13.mFormat.mBitsPerChannel = *((_QWORD *)v11 + 4);
      v13.mFormat.mSampleRate = a4;
      v13.mSampleRateRange.mMinimum = a4;
      v13.mSampleRateRange.mMaximum = a4;
      HALB_FormatList::AddPhysicalFormat(a3, &v13, (const AudioStreamRangedDescription *)a3);
      v11 = (HALB_FormatList *)((char *)v11 + 56);
    }
    while (v11 != a2);
  }
}

void HALB_FormatList::AddPhysicalFormat(HALB_FormatList *this, const AudioStreamRangedDescription *a2, const AudioStreamRangedDescription *a3)
{
  void **v5;
  CAStreamRangedDescription *v6;
  CAStreamRangedDescription *v7;
  __int128 v8;
  CAStreamRangedDescription *v9;
  unint64_t v10;
  CAStreamRangedDescription *v11;
  int v12;
  __int128 v13;
  const AudioStreamRangedDescription *v14;
  __int128 v15;
  void **v16;
  CAStreamRangedDescription *v17;
  CAStreamRangedDescription *v18;
  CAStreamRangedDescription *v19;
  unint64_t v20;
  CAStreamRangedDescription *v21;
  int v22;
  AudioStreamRangedDescription v23;
  AudioStreamRangedDescription v24;
  AudioStreamRangedDescription v25;
  AudioStreamRangedDescription v26;

  v6 = (CAStreamRangedDescription *)*((_QWORD *)this + 4);
  v7 = (CAStreamRangedDescription *)*((_QWORD *)this + 5);
  v5 = (void **)((char *)this + 32);
  v8 = *(_OWORD *)&a2->mFormat.mBytesPerPacket;
  *(_OWORD *)&v26.mFormat.mSampleRate = *(_OWORD *)&a2->mFormat.mSampleRate;
  *(_OWORD *)&v26.mFormat.mBytesPerPacket = v8;
  *(_OWORD *)&v26.mFormat.mBitsPerChannel = *(_OWORD *)&a2->mFormat.mBitsPerChannel;
  v26.mSampleRateRange.mMaximum = a2->mSampleRateRange.mMaximum;
  if (v6 != v7)
  {
    v9 = v6;
    while (!CAStreamRangedDescription::IsExactlyEqual(v9, &v26, a3))
    {
      v9 = (CAStreamRangedDescription *)((char *)v9 + 56);
      if (v9 == v7)
        goto LABEL_7;
    }
    if (v9 != v7)
      return;
LABEL_7:
    if (v7 == v6)
    {
      v6 = v7;
    }
    else
    {
      v10 = 0x6DB6DB6DB6DB6DB7 * ((v7 - v6) >> 3);
      do
      {
        v11 = (CAStreamRangedDescription *)((char *)v6 + 56 * (v10 >> 1));
        v12 = CAStreamRangedDescription::Sorter(v11, a2, a3);
        if (v12)
          v10 += ~(v10 >> 1);
        else
          v10 >>= 1;
        if (v12)
          v6 = (CAStreamRangedDescription *)((char *)v11 + 56);
      }
      while (v10);
    }
  }
  v13 = *(_OWORD *)&a2->mFormat.mBytesPerPacket;
  *(_OWORD *)&v25.mFormat.mSampleRate = *(_OWORD *)&a2->mFormat.mSampleRate;
  *(_OWORD *)&v25.mFormat.mBytesPerPacket = v13;
  *(_QWORD *)&v25.mFormat.mBitsPerChannel = *(_QWORD *)&a2->mFormat.mBitsPerChannel;
  v25.mSampleRateRange = a2->mSampleRateRange;
  std::vector<CAStreamRangedDescription>::insert(v5, v6, (__int128 *)&v25);
  v15 = *(_OWORD *)&a2->mFormat.mBytesPerPacket;
  *(_OWORD *)&v25.mFormat.mSampleRate = *(_OWORD *)&a2->mFormat.mSampleRate;
  *(_OWORD *)&v25.mFormat.mBytesPerPacket = v15;
  *(_OWORD *)&v25.mFormat.mBitsPerChannel = *(_OWORD *)&a2->mFormat.mBitsPerChannel;
  v25.mSampleRateRange.mMaximum = a2->mSampleRateRange.mMaximum;
  if (v25.mFormat.mFormatID == 1819304813 && (v25.mFormat.mFormatFlags & 0x40) == 0)
  {
    v25.mFormat.mFormatFlags = 9;
    v25.mFormat.mBytesPerPacket = 4 * v25.mFormat.mChannelsPerFrame;
    v25.mFormat.mFramesPerPacket = 1;
    v25.mFormat.mBytesPerFrame = 4 * v25.mFormat.mChannelsPerFrame;
    v25.mFormat.mBitsPerChannel = 32;
  }
  v17 = (CAStreamRangedDescription *)*((_QWORD *)this + 1);
  v18 = (CAStreamRangedDescription *)*((_QWORD *)this + 2);
  v16 = (void **)((char *)this + 8);
  v24 = v25;
  if (v17 != v18)
  {
    v19 = v17;
    while (!CAStreamRangedDescription::IsExactlyEqual(v19, &v24, v14))
    {
      v19 = (CAStreamRangedDescription *)((char *)v19 + 56);
      if (v19 == v18)
        goto LABEL_26;
    }
    if (v19 != v18)
      return;
LABEL_26:
    if (v18 == v17)
    {
      v17 = v18;
    }
    else
    {
      v20 = 0x6DB6DB6DB6DB6DB7 * ((v18 - v17) >> 3);
      do
      {
        v21 = (CAStreamRangedDescription *)((char *)v17 + 56 * (v20 >> 1));
        v22 = CAStreamRangedDescription::Sorter(v21, &v25, v14);
        if (v22)
          v20 += ~(v20 >> 1);
        else
          v20 >>= 1;
        if (v22)
          v17 = (CAStreamRangedDescription *)((char *)v21 + 56);
      }
      while (v20);
    }
  }
  v23 = v25;
  std::vector<CAStreamRangedDescription>::insert(v16, v17, (__int128 *)&v23);
}

BOOL CAStreamRangedDescription::IsExactlyEqual(CAStreamRangedDescription *this, const AudioStreamRangedDescription *a2, const AudioStreamRangedDescription *a3)
{
  double v3;
  double mMinimum;
  double v5;
  double mMaximum;

  if (*(double *)this != a2->mFormat.mSampleRate)
    return 0;
  if (*((_DWORD *)this + 2) != a2->mFormat.mFormatID)
    return 0;
  if (*((_DWORD *)this + 3) != a2->mFormat.mFormatFlags)
    return 0;
  if (*((_DWORD *)this + 4) != a2->mFormat.mBytesPerPacket)
    return 0;
  if (*((_DWORD *)this + 5) != a2->mFormat.mFramesPerPacket)
    return 0;
  if (*((_DWORD *)this + 6) != a2->mFormat.mBytesPerFrame)
    return 0;
  if (*((_DWORD *)this + 7) != a2->mFormat.mChannelsPerFrame)
    return 0;
  if (*((_DWORD *)this + 8) != a2->mFormat.mBitsPerChannel)
    return 0;
  v3 = *((double *)this + 6);
  mMinimum = a2->mSampleRateRange.mMinimum;
  if (v3 < mMinimum)
    return 0;
  v5 = *((double *)this + 5);
  mMaximum = a2->mSampleRateRange.mMaximum;
  if (v5 < mMinimum && v3 <= mMaximum)
    return 0;
  if (v5 < mMinimum && v3 > mMaximum)
    return 0;
  if (v3 == mMaximum)
    return v5 == mMinimum;
  return 0;
}

void std::vector<CAStreamRangedDescription>::insert(void **a1, _BYTE *a2, __int128 *a3)
{
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  char *v40;
  void *v41;
  uint64_t v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  void *i;
  __int128 v47;
  __int128 v48;
  void *v49;

  v6 = *a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_BYTE *)*a1;
  v8 = v7 / 56;
  v9 = (uint64_t)*a1 + 56 * (v7 / 56);
  v10 = (unint64_t)a1[2];
  if (v5 >= v10)
  {
    v17 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - (_QWORD)v6) >> 3) + 1;
    if (v17 > 0x492492492492492)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v19 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v10 - (_QWORD)v6) >> 3);
    if (2 * v19 > v17)
      v17 = 2 * v19;
    if (v19 >= 0x249249249249249)
      v20 = 0x492492492492492;
    else
      v20 = v17;
    if (v20)
    {
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v20);
    }
    else
    {
      v22 = 0;
      v21 = 0;
    }
    v25 = &v22[56 * v8];
    v26 = &v22[56 * v21];
    if (v8 == v21)
    {
      if (v7 < 1)
      {
        if (v6 == a2)
          v35 = 1;
        else
          v35 = 2 * v8;
        v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v35);
        v25 = &v36[56 * (v35 >> 2)];
        v26 = &v36[56 * v37];
        if (v22)
          operator delete(v22);
      }
      else
      {
        v27 = 0x6DB6DB6DB6DB6DB7 * ((56 * v8) >> 3);
        if (v27 >= -1)
          v28 = v27 + 1;
        else
          v28 = v27 + 2;
        v25 -= 56 * (v28 >> 1);
      }
    }
    v38 = *a3;
    v39 = a3[1];
    *((_QWORD *)v25 + 4) = *((_QWORD *)a3 + 4);
    *(_OWORD *)v25 = v38;
    *((_OWORD *)v25 + 1) = v39;
    *(_OWORD *)(v25 + 40) = *(__int128 *)((char *)a3 + 40);
    v40 = v25 + 56;
    v41 = *a1;
    if (*a1 == (void *)v9)
    {
      v43 = v25;
    }
    else
    {
      v42 = v9;
      do
      {
        v43 = v25 - 56;
        v44 = *(_OWORD *)(v42 - 56);
        v45 = *(_OWORD *)(v42 - 40);
        *((_QWORD *)v25 - 3) = *(_QWORD *)(v42 - 24);
        *(_OWORD *)(v25 - 40) = v45;
        *(_OWORD *)(v25 - 56) = v44;
        *((_OWORD *)v25 - 1) = *(_OWORD *)(v42 - 16);
        v42 -= 56;
        v25 -= 56;
      }
      while ((void *)v42 != v41);
    }
    for (i = a1[1]; (void *)v9 != i; v9 += 56)
    {
      v47 = *(_OWORD *)v9;
      v48 = *(_OWORD *)(v9 + 16);
      *((_QWORD *)v40 + 4) = *(_QWORD *)(v9 + 32);
      *(_OWORD *)v40 = v47;
      *((_OWORD *)v40 + 1) = v48;
      *(_OWORD *)(v40 + 40) = *(_OWORD *)(v9 + 40);
      v40 += 56;
    }
    v49 = *a1;
    *a1 = v43;
    a1[1] = v40;
    a1[2] = v26;
    if (v49)
      operator delete(v49);
  }
  else if (v9 == v5)
  {
    v23 = *a3;
    v24 = a3[1];
    *(_QWORD *)(v9 + 32) = *((_QWORD *)a3 + 4);
    *(_OWORD *)v9 = v23;
    *(_OWORD *)(v9 + 16) = v24;
    *(_OWORD *)(v9 + 40) = *(__int128 *)((char *)a3 + 40);
    a1[1] = (void *)(v9 + 56);
  }
  else
  {
    v11 = v9 + 56;
    v12 = v5 - 56;
    if (v5 < 0x38)
    {
      v14 = (char *)a1[1];
    }
    else
    {
      v13 = v5 - 56;
      v14 = (char *)a1[1];
      do
      {
        v15 = *(_OWORD *)v13;
        v16 = *(_OWORD *)(v13 + 16);
        *((_QWORD *)v14 + 4) = *(_QWORD *)(v13 + 32);
        *(_OWORD *)v14 = v15;
        *((_OWORD *)v14 + 1) = v16;
        *(_OWORD *)(v14 + 40) = *(_OWORD *)(v13 + 40);
        v14 += 56;
        v13 += 56;
      }
      while (v13 < v5);
    }
    a1[1] = v14;
    if (v5 != v11)
    {
      v29 = 8 * ((uint64_t)(v5 - v11) >> 3);
      v30 = (uint64_t)&v6[56 * v8 - 16];
      do
      {
        v31 = *(_OWORD *)(v30 + v29 - 40);
        v32 = *(_OWORD *)(v30 + v29 - 24);
        *(_QWORD *)(v12 + 32) = *(_QWORD *)(v30 + v29 - 8);
        *(_OWORD *)v12 = v31;
        *(_OWORD *)(v12 + 16) = v32;
        *(_OWORD *)(v12 + 40) = *(_OWORD *)(v30 + v29);
        v12 -= 56;
        v29 -= 56;
      }
      while (v29);
    }
    v33 = *a3;
    v34 = a3[1];
    *(_QWORD *)(v9 + 32) = *((_QWORD *)a3 + 4);
    *(_OWORD *)v9 = v33;
    *(_OWORD *)(v9 + 16) = v34;
    *(_OWORD *)(v9 + 40) = *(__int128 *)((char *)a3 + 40);
  }
}

void sub_1B592B284(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

BOOL HALB_FormatList::IsVirtualFormatSupported(const AudioStreamBasicDescription *this, AudioStreamBasicDescription *a2, uint64_t a3)
{
  HALB_FormatList *v3;
  __int128 v4;
  HALB_FormatList *v5;
  double v6;
  _OWORD v9[2];
  uint64_t v10;
  int v11;

  v3 = (HALB_FormatList *)this;
  v4 = *(_OWORD *)(a3 + 16);
  v9[0] = *(_OWORD *)a3;
  v9[1] = v4;
  v10 = *(_QWORD *)(a3 + 32);
  v11 = 3;
  if (this == a2)
  {
    v5 = (HALB_FormatList *)this;
  }
  else
  {
    v5 = (HALB_FormatList *)a2;
    v6 = *(double *)v9;
    while (!CA::StreamDescription::IsEquivalent((CA::Implementation *)v9, (const AudioStreamBasicDescription *)v3, 3u)
         || *((double *)v3 + 5) > v6
         || *((double *)v3 + 6) < v6)
    {
      v3 = (HALB_FormatList *)((char *)v3 + 56);
      if (v3 == v5)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL CA::StreamDescription::IsEquivalent(CA::Implementation *a1, const AudioStreamBasicDescription *a2, unsigned int a3)
{
  double v3;
  int v5;
  AudioFormatID mFormatID;
  int v7;
  UInt32 mBytesPerPacket;
  int v9;
  UInt32 mFramesPerPacket;
  int v11;
  UInt32 mBytesPerFrame;
  int v13;
  UInt32 mChannelsPerFrame;
  int v15;
  UInt32 mBitsPerChannel;

  v3 = *(double *)a1;
  if ((a3 & 1) != 0)
  {
    if (v3 != 0.0 && a2->mSampleRate != 0.0 && v3 != a2->mSampleRate)
      return 0;
    v5 = *((_DWORD *)a1 + 2);
    if (v5)
    {
      mFormatID = a2->mFormatID;
      if (mFormatID)
      {
        if (v5 != mFormatID)
          return 0;
      }
    }
    v7 = *((_DWORD *)a1 + 4);
    if (v7)
    {
      mBytesPerPacket = a2->mBytesPerPacket;
      if (mBytesPerPacket)
      {
        if (v7 != mBytesPerPacket)
          return 0;
      }
    }
    v9 = *((_DWORD *)a1 + 5);
    if (v9)
    {
      mFramesPerPacket = a2->mFramesPerPacket;
      if (mFramesPerPacket)
      {
        if (v9 != mFramesPerPacket)
          return 0;
      }
    }
    v11 = *((_DWORD *)a1 + 6);
    if (v11)
    {
      mBytesPerFrame = a2->mBytesPerFrame;
      if (mBytesPerFrame)
      {
        if (v11 != mBytesPerFrame)
          return 0;
      }
    }
    v13 = *((_DWORD *)a1 + 7);
    if (v13)
    {
      mChannelsPerFrame = a2->mChannelsPerFrame;
      if (mChannelsPerFrame)
      {
        if (v13 != mChannelsPerFrame)
          return 0;
      }
    }
    v15 = *((_DWORD *)a1 + 8);
    if (!v15)
      return CA::Implementation::EquivalentFormatFlags(a1, a2, (const AudioStreamBasicDescription *)((a3 >> 1) & 1), a3 & 1);
    mBitsPerChannel = a2->mBitsPerChannel;
    if (!mBitsPerChannel)
      return CA::Implementation::EquivalentFormatFlags(a1, a2, (const AudioStreamBasicDescription *)((a3 >> 1) & 1), a3 & 1);
  }
  else
  {
    if (v3 != a2->mSampleRate
      || *((_DWORD *)a1 + 2) != a2->mFormatID
      || *((_DWORD *)a1 + 4) != a2->mBytesPerPacket
      || *((_DWORD *)a1 + 5) != a2->mFramesPerPacket
      || *((_DWORD *)a1 + 7) != a2->mChannelsPerFrame)
    {
      return 0;
    }
    v15 = *((_DWORD *)a1 + 8);
    mBitsPerChannel = a2->mBitsPerChannel;
  }
  if (v15 != mBitsPerChannel)
    return 0;
  return CA::Implementation::EquivalentFormatFlags(a1, a2, (const AudioStreamBasicDescription *)((a3 >> 1) & 1), a3 & 1);
}

void HALB_FormatList::BestMatchForVirtualFormat(HALB_FormatList *this, const AudioStreamBasicDescription *a2, const AudioStreamBasicDescription *a3, AudioStreamBasicDescription *a4, double mSampleRate)
{
  AudioFormatID mFormatID;
  __int128 *v7;
  __int128 *v8;
  __int128 *v11;
  _BOOL8 IsEquivalent;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double v21;
  AudioFormatID v22;
  _BYTE v23[28];
  int v24;

  mFormatID = a2->mFormatID;
  if (a2->mSampleRate != 0.0)
    mSampleRate = a2->mSampleRate;
  v7 = (__int128 *)*((_QWORD *)this + 1);
  v8 = (__int128 *)*((_QWORD *)this + 2);
  v21 = mSampleRate;
  v22 = mFormatID;
  *(_OWORD *)v23 = *(_OWORD *)&a2->mFormatFlags;
  *(_OWORD *)&v23[12] = *(_OWORD *)&a2->mBytesPerFrame;
  v24 = 3;
  if (v7 == v8)
LABEL_19:
    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
  v11 = v7;
  while (1)
  {
    IsEquivalent = CA::StreamDescription::IsEquivalent((CA::Implementation *)&v21, (const AudioStreamBasicDescription *)v11, 3u);
    if (IsEquivalent && *((double *)v11 + 5) <= mSampleRate && *((double *)v11 + 6) >= mSampleRate)
      break;
    v11 = (__int128 *)((char *)v11 + 56);
    if (v11 == v8)
      goto LABEL_13;
  }
  if (v11 != v8)
  {
    v19 = *v11;
    v20 = v11[1];
    *(_QWORD *)&a3->mBitsPerChannel = *((_QWORD *)v11 + 4);
    *(_OWORD *)&a3->mSampleRate = v19;
    *(_OWORD *)&a3->mBytesPerPacket = v20;
    goto LABEL_24;
  }
LABEL_13:
  if (v7 == v8)
    goto LABEL_19;
  v14 = v7;
  do
  {
    if (*((_DWORD *)v14 + 2) == mFormatID)
    {
      v17 = *v14;
      v18 = v14[1];
      *(_QWORD *)&a3->mBitsPerChannel = *((_QWORD *)v14 + 4);
      *(_OWORD *)&a3->mSampleRate = v17;
      *(_OWORD *)&a3->mBytesPerPacket = v18;
      goto LABEL_21;
    }
    v14 = (__int128 *)((char *)v14 + 56);
  }
  while (v14 != v8);
  if (v8 == v7)
    goto LABEL_19;
  v15 = *v7;
  v16 = v7[1];
  *(_QWORD *)&a3->mBitsPerChannel = *((_QWORD *)v7 + 4);
  *(_OWORD *)&a3->mSampleRate = v15;
  *(_OWORD *)&a3->mBytesPerPacket = v16;
  v14 = (__int128 *)*((_QWORD *)this + 1);
  if (*((__int128 **)this + 2) == v14)
    goto LABEL_19;
LABEL_21:
  mSampleRate = HALB_FormatList::GetCommonSampleRateInRangeByIndex((HALB_FormatList *)IsEquivalent, *((double *)v14 + 5), *((double *)v14 + 6));
LABEL_24:
  a3->mSampleRate = mSampleRate;
}

double HALB_FormatList::GetCommonSampleRateInRangeByIndex(HALB_FormatList *this, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  double v6;
  int v7;
  unint64_t v8;
  double v9;

  v3 = 0;
  while (HALB_FormatList::sCommonSampleRates[v3] < a2)
  {
    if (++v3 == 15)
    {
      LODWORD(v4) = 15;
      goto LABEL_11;
    }
  }
  if (v3 > 0xE)
  {
    LODWORD(v4) = v3;
  }
  else
  {
    v4 = v3;
    do
    {
      if (HALB_FormatList::sCommonSampleRates[v4] >= a3)
        break;
      ++v4;
    }
    while (v4 != 15);
  }
LABEL_11:
  v5 = 0;
  do
  {
    v6 = HALB_FormatList::sCommonSampleRates[v5];
    if (v5 > 0xD)
      break;
    ++v5;
  }
  while (v6 != a2);
  v7 = v4 - v3;
  if (v6 == a2)
    goto LABEL_19;
  v8 = 0;
  do
  {
    v9 = HALB_FormatList::sCommonSampleRates[v8];
    if (v8 > 0xD)
      break;
    ++v8;
  }
  while (v9 != a3);
  if (v9 == a3)
LABEL_19:
    ++v7;
  if (v7)
    return HALB_FormatList::sCommonSampleRates[v3];
  else
    return 0.0;
}

uint64_t HALB_FormatList::GetVirtualFormats(uint64_t this, char a2, unint64_t a3, unint64_t *a4, AudioStreamRangedDescription *a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Float64 *v9;
  AudioStreamRangedDescription *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  *a4 = 0;
  if (a3)
  {
    v5 = 0;
    v6 = 0;
    v7 = -1;
    do
    {
      v8 = *(_QWORD *)(this + 8);
      if (++v7 >= (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(this + 16) - v8) >> 3)))
        break;
      v9 = (Float64 *)(v8 + v5);
      v10 = &a5[v6];
      v11 = *(_OWORD *)v9;
      v12 = *((_OWORD *)v9 + 1);
      v13 = *((_OWORD *)v9 + 2);
      v10->mSampleRateRange.mMaximum = v9[6];
      *(_OWORD *)&v10->mFormat.mBytesPerPacket = v12;
      *(_OWORD *)&v10->mFormat.mBitsPerChannel = v13;
      *(_OWORD *)&v10->mFormat.mSampleRate = v11;
      v14 = *a4;
      if ((a2 & 1) == 0)
        a5[v14].mFormat.mFormatFlags |= 2u;
      v5 += 56;
      v6 = v14 + 1;
      *a4 = v6;
    }
    while (v6 < a3);
  }
  return this;
}

uint64_t HALB_FormatList::GetVirtualFormats(uint64_t this, char a2, unint64_t a3, unint64_t *a4, AudioStreamBasicDescription *a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 *v10;
  AudioStreamBasicDescription *v11;
  __int128 v12;
  __int128 v13;
  double v14;
  uint64_t v15;

  *a4 = 0;
  if (a3)
  {
    v5 = 0;
    v6 = 0;
    v7 = *(_QWORD *)(this + 8);
    v8 = *(_QWORD *)(this + 16);
    v9 = -1;
    do
    {
      if (++v9 >= 0x6DB6DB6DB6DB6DB7 * ((v8 - v7) >> 3))
        break;
      v10 = (__int128 *)(v7 + v5);
      v11 = &a5[v6];
      v12 = *v10;
      v13 = v10[1];
      *(_QWORD *)&v11->mBitsPerChannel = *((_QWORD *)v10 + 4);
      *(_OWORD *)&v11->mSampleRate = v12;
      *(_OWORD *)&v11->mBytesPerPacket = v13;
      v7 = *(_QWORD *)(this + 8);
      v8 = *(_QWORD *)(this + 16);
      if (0x6DB6DB6DB6DB6DB7 * ((v8 - v7) >> 3) <= v9)
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      v14 = *(double *)(v7 + v5 + 40);
      if (v14 != *(double *)(v7 + v5 + 48))
        v14 = 0.0;
      v15 = *a4;
      a5[*a4].mSampleRate = v14;
      if ((a2 & 1) == 0)
        a5[v15].mFormatFlags |= 2u;
      v5 += 56;
      v6 = v15 + 1;
      *a4 = v6;
    }
    while (v6 < a3);
  }
  return this;
}

void HALB_FormatList::BestMatchForPhysicalFormat(HALB_FormatList *this, const AudioStreamBasicDescription *a2, const AudioStreamBasicDescription *a3, AudioStreamBasicDescription *a4, double mSampleRate)
{
  AudioFormatID mFormatID;
  __int128 *v7;
  __int128 *v8;
  __int128 *v11;
  _BOOL8 IsEquivalent;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double v21;
  AudioFormatID v22;
  _BYTE v23[28];
  int v24;

  mFormatID = a2->mFormatID;
  if (a2->mSampleRate != 0.0)
    mSampleRate = a2->mSampleRate;
  v7 = (__int128 *)*((_QWORD *)this + 4);
  v8 = (__int128 *)*((_QWORD *)this + 5);
  v21 = mSampleRate;
  v22 = mFormatID;
  *(_OWORD *)v23 = *(_OWORD *)&a2->mFormatFlags;
  *(_OWORD *)&v23[12] = *(_OWORD *)&a2->mBytesPerFrame;
  v24 = 3;
  if (v7 == v8)
LABEL_19:
    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
  v11 = v7;
  while (1)
  {
    IsEquivalent = CA::StreamDescription::IsEquivalent((CA::Implementation *)&v21, (const AudioStreamBasicDescription *)v11, 3u);
    if (IsEquivalent && *((double *)v11 + 5) <= mSampleRate && *((double *)v11 + 6) >= mSampleRate)
      break;
    v11 = (__int128 *)((char *)v11 + 56);
    if (v11 == v8)
      goto LABEL_13;
  }
  if (v11 != v8)
  {
    v19 = *v11;
    v20 = v11[1];
    *(_QWORD *)&a3->mBitsPerChannel = *((_QWORD *)v11 + 4);
    *(_OWORD *)&a3->mSampleRate = v19;
    *(_OWORD *)&a3->mBytesPerPacket = v20;
    goto LABEL_24;
  }
LABEL_13:
  if (v7 == v8)
    goto LABEL_19;
  v14 = v7;
  do
  {
    if (*((_DWORD *)v14 + 2) == mFormatID)
    {
      v17 = *v14;
      v18 = v14[1];
      *(_QWORD *)&a3->mBitsPerChannel = *((_QWORD *)v14 + 4);
      *(_OWORD *)&a3->mSampleRate = v17;
      *(_OWORD *)&a3->mBytesPerPacket = v18;
      goto LABEL_21;
    }
    v14 = (__int128 *)((char *)v14 + 56);
  }
  while (v14 != v8);
  if (v8 == v7)
    goto LABEL_19;
  v15 = *v7;
  v16 = v7[1];
  *(_QWORD *)&a3->mBitsPerChannel = *((_QWORD *)v7 + 4);
  *(_OWORD *)&a3->mSampleRate = v15;
  *(_OWORD *)&a3->mBytesPerPacket = v16;
  v14 = (__int128 *)*((_QWORD *)this + 4);
  if (*((__int128 **)this + 5) == v14)
    goto LABEL_19;
LABEL_21:
  mSampleRate = HALB_FormatList::GetCommonSampleRateInRangeByIndex((HALB_FormatList *)IsEquivalent, *((double *)v14 + 5), *((double *)v14 + 6));
LABEL_24:
  a3->mSampleRate = mSampleRate;
}

uint64_t HALB_FormatList::GetPhysicalFormats(uint64_t this, unint64_t a2, unint64_t *a3, AudioStreamBasicDescription *a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 *v9;
  AudioStreamBasicDescription *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  double v14;
  uint64_t v15;

  *a3 = 0;
  if (a2)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)(this + 32);
    v7 = *(_QWORD *)(this + 40);
    v8 = -1;
    do
    {
      if (++v8 >= 0x6DB6DB6DB6DB6DB7 * ((v7 - v6) >> 3))
        break;
      v9 = (__int128 *)(v6 + v4);
      v10 = &a4[v5];
      v11 = *v9;
      v12 = v9[1];
      *(_QWORD *)&v10->mBitsPerChannel = *((_QWORD *)v9 + 4);
      *(_OWORD *)&v10->mSampleRate = v11;
      *(_OWORD *)&v10->mBytesPerPacket = v12;
      v6 = *(_QWORD *)(this + 32);
      v7 = *(_QWORD *)(this + 40);
      if (0x6DB6DB6DB6DB6DB7 * ((v7 - v6) >> 3) <= v8)
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      v13 = v6 + v4;
      v4 += 56;
      v14 = *(double *)(v13 + 40);
      if (v14 != *(double *)(v13 + 48))
        v14 = 0.0;
      v15 = *a3;
      a4[*a3].mSampleRate = v14;
      v5 = v15 + 1;
      *a3 = v5;
    }
    while (v5 < a2);
  }
  return this;
}

void sub_1B592BAA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B592BB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1B592BBF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)Core_Audio_Driver_Service_Client;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B592BCC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B592BDB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B592C018(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B592C074(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1B592C06CLL);
}

void sub_1B592C314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1B592C414(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1B592C4C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1B592C620(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B592C93C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<-[Core_Audio_Driver_Service_Client deferred_driver_loaded:reply:]::$_10>::~unique_ptr[abi:ne180100]((id **)va);
  _Unwind_Resume(a1);
}

void sub_1B592C9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B592CBF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_32c77_ZTSKZ64__Core_Audio_Driver_Service_Client_load_driver_driver_endpoint__E3__6(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[2];
  a1[2] = result;
  return result;
}

id __copy_helper_block_ea8_32c77_ZTSKZ64__Core_Audio_Driver_Service_Client_load_driver_driver_endpoint__E3__5(uint64_t a1, uint64_t a2)
{
  void *v3;
  id result;

  v3 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  result = v3;
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c77_ZTSKZ64__Core_Audio_Driver_Service_Client_load_driver_driver_endpoint__E3__5(uint64_t a1)
{

}

void ___ZN10applesauce8dispatch2v19sync_implIZ56__Core_Audio_Driver_Service_Client_get_lazy_connection__E3__4EEvPU28objcproto17OS_dispatch_queue8NSObjectOT_NSt3__117integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(*(id *)v1, "connection_to_driver_service");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v2)
  {
    v3 = *(id *)v1;
    v4 = *(std::__shared_weak_count **)(v1 + 16);
    v10 = *(_QWORD *)(v1 + 8);
    v11 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    objc_msgSend(v3, "connect_to_driver_service:", &v10);
    v7 = v11;
    if (v11)
    {
      v8 = (unint64_t *)&v11->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B592CD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void ___ZZ62__Core_Audio_Driver_Service_Client_connect_to_driver_service__ENK3__2cvU13block_pointerFvvEEv_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  NSObject *v8;
  _OWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  _OWORD v17[20];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  NSLog(CFSTR("connection to driver service is invalidated"));
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_msgSend(v2, "driver_service_undertaker");
    v3 = v14;
    if (v14)
    {
      v4 = *(void **)(a1 + 32);
      if (v4)
      {
        objc_msgSend(v4, "queue");
        v3 = v14;
      }
      else
      {
        memset(v17, 0, sizeof(v17));
      }
      *(_QWORD *)&v12 = v3;
      *((_QWORD *)&v12 + 1) = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v6 = __ldxr(p_shared_owners);
        while (__stxr(v6 + 1, p_shared_owners));
      }
      v7 = *(void **)(a1 + 32);
      if (v7)
        objc_msgSend(v7, "driver_file");
      else
        v13 = 0uLL;
      v8 = *(id *)&v17[0];
      v9 = (_OWORD *)operator new();
      *v9 = v12;
      v9[1] = v13;
      v16 = 0;
      dispatch_async_f(v8, v9, (dispatch_function_t)applesauce::dispatch::v1::async<-[Core_Audio_Driver_Service_Client connect_to_driver_service:]::$_2::operator() const(void)::{lambda(void)#1}>(NSObject  {objcproto17OS_dispatch_queue}*,-[Core_Audio_Driver_Service_Client connect_to_driver_service:]::$_2::operator() const(void)::{lambda(void)#1} &&)::{lambda(void *)#1}::__invoke);
      std::unique_ptr<-[Core_Audio_Driver_Service_Client connect_to_driver_service:]::$_2::operator() const(void)::{lambda(void)#1},std::default_delete<-[Core_Audio_Driver_Service_Client connect_to_driver_service:]::$_2::operator() const(void)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&v16);

      AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v17);
    }
  }
  else
  {
    v15 = 0;
  }
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1B592CF80(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, std::__shared_weak_count *a8, uint64_t a9, ...)
{
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  va_list va;

  va_start(va, a9);
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)va);
  if (a8)
  {
    v12 = (unint64_t *)&a8->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a8->__on_zero_shared)(a8);
      std::__shared_weak_count::__release_weak(a8);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZZ62__Core_Audio_Driver_Service_Client_connect_to_driver_service__ENK3__3cvU13block_pointerFvvEEv_block_invoke(uint64_t a1)
{
  NSLog(CFSTR("connection to driver service is interrupted"));
  return objc_msgSend(*(id *)(a1 + 32), "invalidate");
}

id __copy_helper_block_ea8_32c75_ZTSKZ62__Core_Audio_Driver_Service_Client_connect_to_driver_service__E3__3(uint64_t a1, uint64_t a2)
{
  id result;

  result = *(id *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_ea8_32c75_ZTSKZ62__Core_Audio_Driver_Service_Client_connect_to_driver_service__E3__3(uint64_t a1)
{

}

id __copy_helper_block_ea8_32c75_ZTSKZ62__Core_Audio_Driver_Service_Client_connect_to_driver_service__E3__2(uint64_t a1, uint64_t a2)
{
  id result;

  result = *(id *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_ea8_32c75_ZTSKZ62__Core_Audio_Driver_Service_Client_connect_to_driver_service__E3__2(uint64_t a1)
{

}

void sub_1B592D158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = a12;
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  std::unique_ptr<-[Core_Audio_Driver_Service_Client connect_to_driver_service:]::$_2::operator() const(void)::{lambda(void)#1},std::default_delete<-[Core_Audio_Driver_Service_Client connect_to_driver_service:]::$_2::operator() const(void)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c80_ZTSKZ67__Core_Audio_Driver_Service_Client_send_endpoint_to_driver_service_E3__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

uint64_t __copy_helper_block_ea8_32c80_ZTSKZ67__Core_Audio_Driver_Service_Client_send_endpoint_to_driver_service_E3__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void sub_1B592D358(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _Unwind_Resume(a1);
}

void sub_1B592D3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c70_ZTSKZ57__Core_Audio_Driver_Service_Client_get_driver_name_list__E3__8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void AMCP::Portal::IPC::IO_Sender::~IO_Sender(AMCP::Portal::IPC::IO_Sender *this)
{
  AMCP::Portal::IPC::IO_Sender::~IO_Sender(this);
  JUMPOUT(0x1B5E50688);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6974C10;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    MEMORY[0x1B5E50688](v2, 0x1020C401EC519C5);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

BOOL caulk::ipc::synchronous_messenger::semaphore_sender::is_valid(caulk::ipc::synchronous_messenger::semaphore_sender *this)
{
  return *(_QWORD *)this
      && *((_QWORD *)this + 1)
      && *((_QWORD *)this + 3)
      && *((_QWORD *)this + 4)
      && *((_DWORD *)this + 12)
      && *((_DWORD *)this + 14) != 0;
}

void std::__shared_ptr_emplace<caulk::ipc::synchronous_messenger::semaphore_sender>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6974C90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<caulk::ipc::synchronous_messenger::semaphore_sender>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6974C90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<caulk::ipc::synchronous_messenger::semaphore_sender>::__on_zero_shared(uint64_t a1)
{
  caulk::ipc::mapped_memory *v2;

  v2 = (caulk::ipc::mapped_memory *)(a1 + 24);
  MEMORY[0x1B5E4FF2C](a1 + 80);
  MEMORY[0x1B5E4FF2C](a1 + 72);
  caulk::ipc::mapped_memory::reset((caulk::ipc::mapped_memory *)(a1 + 48));
  return caulk::ipc::mapped_memory::reset(v2);
}

void std::__shared_ptr_emplace<caulk::ipc::synchronous_messenger::eventlink_sender>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6974C40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<caulk::ipc::synchronous_messenger::eventlink_sender>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6974C40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<caulk::ipc::synchronous_messenger::eventlink_sender>::__on_zero_shared(caulk::mach::details **a1, void *a2)
{
  caulk::ipc::mapped_memory *v3;

  v3 = (caulk::ipc::mapped_memory *)(a1 + 3);
  caulk::mach::details::release_os_object(a1[9], a2);
  caulk::ipc::mapped_memory::reset((caulk::ipc::mapped_memory *)(a1 + 6));
  return caulk::ipc::mapped_memory::reset(v3);
}

uint64_t AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(uint64_t a1, const BOOL *a2, _OWORD *a3, double *a4)
{
  uint64_t v4;
  unsigned __int8 v5;
  AMCP::Log::Scope_Registry *v10;
  unint64_t v11;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *exception;
  uint64_t raw_ptr;
  const BOOL *v17;
  int v18;
  const BOOL *v19;
  uint64_t v20;
  int v21;
  double v22;
  AMCP::Log::Scope_Registry *v23;
  const BOOL *v24;
  AMCP::Log::Scope_Registry *v25;
  int v26;
  caulk::concurrent::messenger *v27;
  _opaque_pthread_t *v28;
  mach_port_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t is_valid;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned int v37;
  unsigned __int8 v38;
  uint64_t v39;
  _QWORD *v40;
  char v42;
  caulk::concurrent::messenger *v43;
  _opaque_pthread_t *v44;
  mach_port_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  caulk::concurrent::messenger *v50;
  _opaque_pthread_t *v51;
  mach_port_t v52;
  uint64_t v53;
  unint64_t *v54;
  __int128 v55;
  __int128 v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unint64_t *v61;
  unint64_t v62;
  double v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  NSObject *v68;
  _opaque_pthread_t *v69;
  mach_port_t v70;
  void *v71;
  NSObject *v72;
  _opaque_pthread_t *v73;
  mach_port_t v74;
  void *v75;
  __int128 v76;
  uint64_t v77;
  uint64_t (**v78)();
  __int128 v79;
  uint64_t v80;
  std::runtime_error v81;
  std::runtime_error v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  char v88;
  uint8_t buf[8];
  _BYTE v90[10];
  __int16 v91;
  int v92;
  __int16 v93;
  _BYTE v94[14];
  const char *v95;
  int v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v4 = 1768911973;
  v5 = atomic_load((unsigned __int8 *)(a1 + 65));
  if ((v5 & 1) != 0)
    return v4;
  if (AMCP::Feature_Flags::access_event_link_oop_io(0, a2))
  {
    v10 = *(AMCP::Log::Scope_Registry **)(a1 + 8);
    if (!*(_QWORD *)v10 || (v11 = *((_QWORD *)v10 + 1)) == 0)
    {
      AMCP::Log::Scope_Registry::get(v10);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v12 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v13 = pthread_self();
        v14 = pthread_mach_thread_np(v13);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v14;
        *(_WORD *)v90 = 2080;
        *(_QWORD *)&v90[2] = "IO_Sender.cpp";
        v91 = 1024;
        v92 = 157;
        v93 = 2080;
        *(_QWORD *)v94 = "payload_data.empty()";
        _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to get io sender payload", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v88);
      exception = __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v81, "Failed to get io sender payload");
      std::runtime_error::runtime_error(&v82, &v81);
      v84 = 0;
      v85 = 0;
      v86 = 0;
      v87 = -1;
      v82.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v83 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v82);
      *(_QWORD *)&v94[6] = "OSStatus AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(const sender_data_t &, rec"
                           "eiver_data_t &, const double &)";
      v95 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Server/IO_Sender.cpp";
      v96 = 157;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v76);
      v78 = off_1E69A20A0;
      v79 = v76;
      v80 = v77;
      v76 = 0uLL;
      v77 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v78);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
    }
  }
  else
  {
    v10 = *(AMCP::Log::Scope_Registry **)(a1 + 24);
    if (!*(_QWORD *)v10 || (v11 = *((_QWORD *)v10 + 1)) == 0)
    {
LABEL_70:
      AMCP::Log::Scope_Registry::get(v10);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v72 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
      {
        v73 = pthread_self();
        v74 = pthread_mach_thread_np(v73);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v74;
        *(_WORD *)v90 = 2080;
        *(_QWORD *)&v90[2] = "IO_Sender.cpp";
        v91 = 1024;
        v92 = 163;
        v93 = 2080;
        *(_QWORD *)v94 = "payload_data.empty()";
        _os_log_error_impl(&dword_1B57BA000, v72, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to get io sender payload", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v88);
      v75 = __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v81, "Failed to get io sender payload");
      std::runtime_error::runtime_error(&v82, &v81);
      v84 = 0;
      v85 = 0;
      v86 = 0;
      v87 = -1;
      v82.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v83 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v82);
      *(_QWORD *)&v94[6] = "OSStatus AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(const sender_data_t &, rec"
                           "eiver_data_t &, const double &)";
      v95 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Server/IO_Sender.cpp";
      v96 = 163;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v76);
      v78 = off_1E69A20A0;
      v79 = v76;
      v80 = v77;
      v76 = 0uLL;
      v77 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v78);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v75, (uint64_t)buf);
    }
  }
  if (v11 <= 0x13F)
  {
    _os_assert_log();
    v10 = (AMCP::Log::Scope_Registry *)_os_crash();
    __break(1u);
    goto LABEL_70;
  }
  raw_ptr = caulk::ipc::mapped_memory::get_raw_ptr(v10);
  memcpy((void *)raw_ptr, a2, 0x110uLL);
  if (*(_QWORD *)a2 == 6)
  {
    v18 = *((_DWORD *)a2 + 2);
    if (v18 == 1919513701 || v18 == 1919246692 || v18 == 1835628655)
      kdebug_trace();
  }
  v20 = 0;
  if (AMCP::Feature_Flags::access_collect_io_perfdata(0, v17))
    v20 = mach_absolute_time();
  v21 = AMCP::Feature_Flags::access_event_link_oop_io(0, v19);
  v22 = *a4;
  if (v21)
    v23 = (AMCP::Log::Scope_Registry *)caulk::ipc::synchronous_messenger::eventlink_sender::send(*(caulk::ipc::synchronous_messenger::eventlink_sender **)(a1 + 8), v22);
  else
    v23 = (AMCP::Log::Scope_Registry *)caulk::ipc::synchronous_messenger::semaphore_sender::send(*(caulk::ipc::synchronous_messenger::semaphore_sender **)(a1 + 24), v22);
  v25 = v23;
  if (*(_QWORD *)a2 == 6)
  {
    v26 = *((_DWORD *)a2 + 2);
    if (v26 == 1919513701 || v26 == 1919246692 || v26 == 1835628655)
      v23 = (AMCP::Log::Scope_Registry *)kdebug_trace();
  }
  if (((unint64_t)v25 & 0xFF00000000) == 0 || !(_BYTE)v25)
  {
    AMCP::Log::Scope_Registry::get(v23);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v27 = *(caulk::concurrent::messenger **)(*(_QWORD *)buf + 8);
    v28 = pthread_self();
    v29 = pthread_mach_thread_np(v28);
    v30 = *(_QWORD *)a2;
    v31 = (_QWORD *)MEMORY[0x1E0DDB688];
    v32 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
    *(_DWORD *)(v32 + 16) = 0;
    *(_BYTE *)(v32 + 20) = 16;
    *(_DWORD *)(v32 + 24) = v29;
    *(_QWORD *)(v32 + 32) = "IO_Sender.cpp";
    *(_DWORD *)(v32 + 40) = 188;
    *(_QWORD *)(v32 + 48) = v30;
    *(_QWORD *)v32 = &off_1E6974CE0;
    *(_QWORD *)(v32 + 8) = 0;
    is_valid = caulk::concurrent::messenger::enqueue(v27, (caulk::concurrent::message *)v32);
    v34 = *(std::__shared_weak_count **)v90;
    if (*(_QWORD *)v90)
    {
      v35 = (unint64_t *)(*(_QWORD *)v90 + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v37 = 0;
    while (1)
    {
      v38 = atomic_load((unsigned __int8 *)(a1 + 65));
      if ((v38 & 1) != 0)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_valid);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v43 = *(caulk::concurrent::messenger **)(*(_QWORD *)buf + 8);
        v44 = pthread_self();
        v45 = pthread_mach_thread_np(v44);
        v46 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v31 + 16))(*v31, 48, 8);
        *(_DWORD *)(v46 + 16) = 0;
        *(_BYTE *)(v46 + 20) = 2;
        *(_DWORD *)(v46 + 24) = v45;
        *(_QWORD *)(v46 + 32) = "IO_Sender.cpp";
        *(_DWORD *)(v46 + 40) = 200;
        *(_QWORD *)v46 = &off_1E6974D38;
        *(_QWORD *)(v46 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v43, (caulk::concurrent::message *)v46);
        v47 = *(std::__shared_weak_count **)v90;
        if (!*(_QWORD *)v90)
          goto LABEL_59;
        v48 = (unint64_t *)(*(_QWORD *)v90 + 8);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        goto LABEL_57;
      }
      if (AMCP::Feature_Flags::access_event_link_oop_io(0, v24))
      {
        v39 = caulk::ipc::synchronous_messenger::eventlink_sender::resynch(*(caulk::ipc::synchronous_messenger::eventlink_sender **)(a1 + 8), 1.0);
        v40 = *(_QWORD **)(a1 + 8);
        is_valid = *v40 && v40[1] && v40[3] && v40[4] && v40[6] != 0;
      }
      else
      {
        v39 = caulk::ipc::synchronous_messenger::semaphore_sender::resynch(*(caulk::ipc::synchronous_messenger::semaphore_sender **)(a1 + 24), 1.0);
        is_valid = caulk::ipc::synchronous_messenger::semaphore_sender::is_valid(*(caulk::ipc::synchronous_messenger::semaphore_sender **)(a1 + 24));
      }
      if ((v39 & 0xFF00000000) == 0)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_valid);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v68 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
        {
          v69 = pthread_self();
          v70 = pthread_mach_thread_np(v69);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v70;
          *(_WORD *)v90 = 2080;
          *(_QWORD *)&v90[2] = "IO_Sender.cpp";
          v91 = 1024;
          v92 = 215;
          v93 = 2080;
          *(_QWORD *)v94 = "resynch_result.has_value() != true";
          _os_log_error_impl(&dword_1B57BA000, v68, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to resynch io sender/receiver after message failed to send", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v88);
        v71 = __cxa_allocate_exception(0x40uLL);
        std::runtime_error::runtime_error(&v81, "Failed to resynch io sender/receiver after message failed to send");
        std::runtime_error::runtime_error(&v82, &v81);
        v84 = 0;
        v85 = 0;
        v86 = 0;
        v87 = -1;
        v82.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v83 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v82);
        *(_QWORD *)&v94[6] = "OSStatus AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(const sender_data_t &, r"
                             "eceiver_data_t &, const double &)";
        v95 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Server/IO_Sender.cpp";
        v96 = 215;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v76);
        v78 = off_1E69A20A0;
        v79 = v76;
        v80 = v77;
        v76 = 0uLL;
        v77 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v78);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v71, (uint64_t)buf);
      }
      if ((_BYTE)v39)
        break;
      if (v37++ >= 4)
        v42 = 0;
      else
        v42 = is_valid;
      if ((v42 & 1) == 0)
        goto LABEL_59;
    }
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_valid);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v50 = *(caulk::concurrent::messenger **)(*(_QWORD *)buf + 8);
    v51 = pthread_self();
    v52 = pthread_mach_thread_np(v51);
    v53 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v31 + 16))(*v31, 48, 8);
    *(_DWORD *)(v53 + 16) = 0;
    *(_BYTE *)(v53 + 20) = 16;
    *(_DWORD *)(v53 + 24) = v52;
    *(_QWORD *)(v53 + 32) = "IO_Sender.cpp";
    *(_DWORD *)(v53 + 40) = 218;
    *(_QWORD *)v53 = &off_1E6974D90;
    *(_QWORD *)(v53 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v50, (caulk::concurrent::message *)v53);
    v47 = *(std::__shared_weak_count **)v90;
    if (!*(_QWORD *)v90)
      goto LABEL_59;
    v54 = (unint64_t *)(*(_QWORD *)v90 + 8);
    do
      v49 = __ldaxr(v54);
    while (__stlxr(v49 - 1, v54));
LABEL_57:
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
LABEL_59:
  v55 = *(_OWORD *)(raw_ptr + 272);
  v56 = *(_OWORD *)(raw_ptr + 304);
  a3[1] = *(_OWORD *)(raw_ptr + 288);
  a3[2] = v56;
  *a3 = v55;
  v4 = *(unsigned int *)(raw_ptr + 272);
  if (AMCP::Feature_Flags::access_collect_io_perfdata(0, v24))
  {
    if (*(_QWORD *)a2 == 6)
    {
      v57 = *(_QWORD *)(raw_ptr + 312);
      v58 = v57 - v20;
      if (v57 > v20)
      {
        v59 = *(_QWORD *)(a1 + 40);
        v60 = *(_DWORD *)(raw_ptr + 240);
        v61 = (unint64_t *)(v59 + 16);
        v62 = atomic_load((unint64_t *)(v59 + 16));
        if (v62 <= 0xFFF)
        {
          v63 = (double)v58 * 0.0000000416666667;
          v64 = atomic_load(v61);
          *(double *)(v59 + 8 * v64 + 24) = v63;
          v65 = atomic_load(v61);
          *(_DWORD *)(v59 + 4 * v65 + 32792) = v60;
          do
            v66 = __ldaxr(v61);
          while (__stlxr(v66 + 1, v61));
        }
      }
    }
  }
  return v4;
}

void sub_1B592DFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,uint64_t a29,uint64_t a30)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B592DC5CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1B592E230()
{
  JUMPOUT(0x1B592E1ECLL);
}

void caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(AMCP::Portal::IPC::sender_data_t const&,AMCP::Portal::IPC::receiver_data_t &,double const&)::$_2,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(AMCP::Portal::IPC::sender_data_t const&,AMCP::Portal::IPC::receiver_data_t &,double const&)::$_2,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  caulk::concurrent::message *v11;
  uint8_t buf[8];
  _BYTE v13[10];
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v13;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Successfully resynched io sender/receiver", buf, 0x18u);
  }
  return caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(AMCP::Portal::IPC::sender_data_t const&,AMCP::Portal::IPC::receiver_data_t &,double const&)::$_2,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(&v11);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(AMCP::Portal::IPC::sender_data_t const&,AMCP::Portal::IPC::receiver_data_t &,double const&)::$_2,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(AMCP::Portal::IPC::sender_data_t const&,AMCP::Portal::IPC::receiver_data_t &,double const&)::$_1,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(AMCP::Portal::IPC::sender_data_t const&,AMCP::Portal::IPC::receiver_data_t &,double const&)::$_1,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  caulk::concurrent::message *v11;
  uint8_t buf[8];
  _BYTE v13[10];
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v13;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Connection was invalidated, cannot resynch!", buf, 0x18u);
  }
  return caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(AMCP::Portal::IPC::sender_data_t const&,AMCP::Portal::IPC::receiver_data_t &,double const&)::$_1,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(&v11);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(AMCP::Portal::IPC::sender_data_t const&,AMCP::Portal::IPC::receiver_data_t &,double const&)::$_1,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(AMCP::Portal::IPC::sender_data_t const&,AMCP::Portal::IPC::receiver_data_t &,double const&)::$_0,std::tuple<unsigned int,char const*,int,unsigned long long>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(AMCP::Portal::IPC::sender_data_t const&,AMCP::Portal::IPC::receiver_data_t &,double const&)::$_0,std::tuple<unsigned int,char const*,int,unsigned long long>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  caulk::concurrent::message *v12;
  uint8_t buf[8];
  _BYTE v14[10];
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v14;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v14)
  {
    v4 = (unint64_t *)(*(_QWORD *)v14 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v14 = 2080;
    *(_QWORD *)&v14[2] = v8;
    v15 = 1024;
    v16 = v9;
    v17 = 2048;
    v18 = v10;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Failed to send io sender message id %llu, need to resynch", buf, 0x22u);
  }
  return caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(AMCP::Portal::IPC::sender_data_t const&,AMCP::Portal::IPC::receiver_data_t &,double const&)::$_0,std::tuple<unsigned int,char const*,int,unsigned long long>>::rt_cleanup::~rt_cleanup(&v12);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(AMCP::Portal::IPC::sender_data_t const&,AMCP::Portal::IPC::receiver_data_t &,double const&)::$_0,std::tuple<unsigned int,char const*,int,unsigned long long>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

uint64_t caulk::ipc::mapped_memory::get_raw_ptr(caulk::ipc::mapped_memory *this)
{
  uint64_t result;

  if (*((_QWORD *)this + 1))
    return *(_QWORD *)this;
  _os_assert_log();
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t AMCP::Portal::IPC::IO_Sender::will_do_io_operation(AMCP::Portal::IPC::IO_Sender *this, AudioServerPlugInIOOperation a2, BOOL *a3, BOOL *a4)
{
  unsigned __int8 v4;
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  AudioServerPlugInIOOperation v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v4 = atomic_load((unsigned __int8 *)this + 65);
  if ((v4 & 1) != 0)
    return 1768911973;
  v14 = 0;
  v15 = 0;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v12 = 4;
  v13 = a2;
  *(_QWORD *)((char *)&v29 + 4) = *((_QWORD *)this + 6);
  *((_QWORD *)&v8 + 1) = 0;
  v9 = 0;
  v11 = 0;
  v10 = 0;
  result = AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message((uint64_t)this, (const BOOL *)&v12, &v8, &AMCP::Portal::IPC::k_default_timeout);
  *a3 = (_BYTE)v11 != 0;
  *a4 = HIBYTE(v11) != 0;
  return result;
}

void sub_1B592E830(void *a1)
{
  _BYTE *v1;
  _BYTE *v2;

  __cxa_begin_catch(a1);
  *v2 = 0;
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B592E81CLL);
}

uint64_t AMCP::Portal::IPC::IO_Sender::begin_io_operation(AMCP::Portal::IPC::IO_Sender *this, int a2, AMCP::Portal::IPC::IO_Sender *a3, const AudioServerPlugInIOCycleInfo *a4)
{
  unsigned __int8 v4;
  double v6;
  double v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  AudioServerPlugInIOCycleInfo v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v4 = atomic_load((unsigned __int8 *)this + 65);
  if ((v4 & 1) != 0)
    return 1768911973;
  v16 = 0;
  v17 = 0;
  v10 = 5;
  v11 = a2;
  AMCP::Portal::IPC::IO_Sender::translate_to_driver_IO_cycle_info(a3, &v12, (AudioServerPlugInIOCycleInfo *)a3);
  v6 = *((double *)this + 7);
  v14 = *((_QWORD *)this + 6);
  v15 = 0;
  v13 = 0;
  v8 = 0.0 / v6;
  return AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message((uint64_t)this, (const BOOL *)&v10, &v9, &v8);
}

void sub_1B592E8DC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B592E8CCLL);
}

Float64 AMCP::Portal::IPC::IO_Sender::translate_to_driver_IO_cycle_info(AMCP::Portal::IPC::IO_Sender *this, const AudioServerPlugInIOCycleInfo *a2, AudioServerPlugInIOCycleInfo *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  Float64 result;

  a2->mIOCycleCounter = *(_QWORD *)this;
  a2->mNominalIOBufferFrameSize = *((_DWORD *)this + 2);
  a2->mCurrentTime.mSampleTime = *((Float64 *)this + 2);
  a2->mCurrentTime.mHostTime = *((_QWORD *)this + 3);
  a2->mCurrentTime.mRateScalar = *((Float64 *)this + 4);
  a2->mCurrentTime.mWordClockTime = *((_QWORD *)this + 5);
  v3 = *((_OWORD *)this + 3);
  *(_QWORD *)&a2->mCurrentTime.mSMPTETime.mHours = *((_QWORD *)this + 8);
  *(_OWORD *)&a2->mCurrentTime.mSMPTETime.mSubframes = v3;
  a2->mCurrentTime.mFlags = *((_DWORD *)this + 18);
  a2->mInputTime.mSampleTime = *((Float64 *)this + 10);
  a2->mInputTime.mHostTime = *((_QWORD *)this + 11);
  a2->mInputTime.mRateScalar = *((Float64 *)this + 12);
  a2->mInputTime.mWordClockTime = *((_QWORD *)this + 13);
  v4 = *((_OWORD *)this + 7);
  *(_QWORD *)&a2->mInputTime.mSMPTETime.mHours = *((_QWORD *)this + 16);
  *(_OWORD *)&a2->mInputTime.mSMPTETime.mSubframes = v4;
  a2->mInputTime.mFlags = *((_DWORD *)this + 34);
  a2->mOutputTime.mSampleTime = *((Float64 *)this + 18);
  a2->mOutputTime.mHostTime = *((_QWORD *)this + 19);
  a2->mOutputTime.mRateScalar = *((Float64 *)this + 20);
  a2->mOutputTime.mWordClockTime = *((_QWORD *)this + 21);
  v5 = *((_OWORD *)this + 11);
  *(_QWORD *)&a2->mOutputTime.mSMPTETime.mHours = *((_QWORD *)this + 24);
  *(_OWORD *)&a2->mOutputTime.mSMPTETime.mSubframes = v5;
  a2->mOutputTime.mFlags = *((_DWORD *)this + 50);
  a2->mMainHostTicksPerFrame = *((double *)this + 26) * 24000000.0 / 24000000.0;
  result = *((double *)this + 27) * 24000000.0 / 24000000.0;
  a2->mDeviceHostTicksPerFrame = result;
  return result;
}

uint64_t AMCP::Portal::IPC::IO_Sender::do_io_operation(uint64_t a1, int a2, AudioServerPlugInIOCycleInfo *a3, AMCP::Portal::IPC::IO_Sender *this, unsigned int a5, int a6, int a7, int a8, int a9)
{
  unsigned __int8 v9;
  double v16;
  double v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  AudioServerPlugInIOCycleInfo v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;

  v9 = atomic_load((unsigned __int8 *)(a1 + 65));
  if ((v9 & 1) != 0)
    return 1768911973;
  v20 = 6;
  v21 = (int)a3;
  AMCP::Portal::IPC::IO_Sender::translate_to_driver_IO_cycle_info(this, &v22, a3);
  v16 = *(double *)(a1 + 56);
  v24 = *(_QWORD *)(a1 + 48);
  v23 = a5;
  v25 = a2;
  v26 = a6;
  v27 = a7;
  v28 = a8;
  v29 = a9;
  v18 = (double)a5 / v16;
  return AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(a1, (const BOOL *)&v20, &v19, &v18);
}

void sub_1B592EAA0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B592EA84);
}

uint64_t AMCP::Portal::IPC::IO_Sender::end_io_operation(AMCP::Portal::IPC::IO_Sender *this, int a2, AMCP::Portal::IPC::IO_Sender *a3, const AudioServerPlugInIOCycleInfo *a4)
{
  unsigned __int8 v4;
  double v6;
  double v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  AudioServerPlugInIOCycleInfo v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v4 = atomic_load((unsigned __int8 *)this + 65);
  if ((v4 & 1) != 0)
    return 1768911973;
  v16 = 0;
  v17 = 0;
  v10 = 7;
  v11 = a2;
  AMCP::Portal::IPC::IO_Sender::translate_to_driver_IO_cycle_info(a3, &v12, (AudioServerPlugInIOCycleInfo *)a3);
  v6 = *((double *)this + 7);
  v14 = *((_QWORD *)this + 6);
  v15 = 0;
  v13 = 0;
  v8 = 0.0 / v6;
  return AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message((uint64_t)this, (const BOOL *)&v10, &v9, &v8);
}

void sub_1B592EB44(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B592EB34);
}

uint64_t *std::unordered_map<unsigned int,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>::insert_or_assign[abi:ne180100]<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  _QWORD v42[2];
  char v43;

  v7 = a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    goto LABEL_18;
  v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v3 = a2;
    if (v8 <= a2)
      v3 = a2 % v8;
  }
  else
  {
    v3 = ((_DWORD)v8 - 1) & a2;
  }
  v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
  if (!v10 || (v11 = *v10) == 0)
  {
LABEL_18:
    v13 = (_QWORD *)(a1 + 16);
    v14 = operator new(0x60uLL);
    v42[0] = v14;
    v42[1] = a1 + 16;
    *v14 = 0;
    v14[1] = v7;
    *((_DWORD *)v14 + 4) = a2;
    *((_DWORD *)v14 + 6) = *(_DWORD *)a3;
    *((_OWORD *)v14 + 2) = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(a3 + 8) = 0u;
    v14[6] = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 24) = 0;
    *((_OWORD *)v14 + 4) = *(_OWORD *)(a3 + 40);
    *(_OWORD *)(a3 + 40) = 0u;
    v14[10] = *(_QWORD *)(a3 + 56);
    *(_QWORD *)(a3 + 56) = 0;
    v43 = 1;
    v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
    v16 = *(float *)(a1 + 32);
    if (v8 && (float)(v16 * (float)v8) >= v15)
    {
      v7 = v3;
      goto LABEL_64;
    }
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime <= v8)
    {
      if (*(_QWORD *)&prime >= v8)
        goto LABEL_60;
      v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *(_QWORD *)(a1 + 8);
        goto LABEL_60;
      }
      if (!*(_QWORD *)&prime)
      {
        v41 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v41)
          operator delete(v41);
        v8 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        goto LABEL_60;
      }
    }
    if (*(_QWORD *)&prime >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v21 = operator new(8 * *(_QWORD *)&prime);
    v22 = *(void **)a1;
    *(_QWORD *)a1 = v21;
    if (v22)
      operator delete(v22);
    v23 = 0;
    *(int8x8_t *)(a1 + 8) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
    while (*(_QWORD *)&prime != v23);
    v24 = (_QWORD *)*v13;
    if (*v13)
    {
      v25 = v24[1];
      v26 = (uint8x8_t)vcnt_s8(prime);
      v26.i16[0] = vaddlv_u8(v26);
      if (v26.u32[0] > 1uLL)
      {
        if (v25 >= *(_QWORD *)&prime)
          v25 %= *(_QWORD *)&prime;
      }
      else
      {
        v25 &= *(_QWORD *)&prime - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v13;
      v30 = (_QWORD *)*v24;
      if (*v24)
      {
        do
        {
          v31 = v30[1];
          if (v26.u32[0] > 1uLL)
          {
            if (v31 >= *(_QWORD *)&prime)
              v31 %= *(_QWORD *)&prime;
          }
          else
          {
            v31 &= *(_QWORD *)&prime - 1;
          }
          if (v31 != v25)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v24;
              goto LABEL_56;
            }
            *v24 = *v30;
            *v30 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v31);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v31) = v30;
            v30 = v24;
          }
          v31 = v25;
LABEL_56:
          v24 = v30;
          v30 = (_QWORD *)*v30;
          v25 = v31;
        }
        while (v30);
      }
    }
    v8 = (unint64_t)prime;
LABEL_60:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
LABEL_64:
    v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
    v11 = (uint64_t *)v42[0];
    if (v32)
    {
      *(_QWORD *)v42[0] = *v32;
    }
    else
    {
      *(_QWORD *)v42[0] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v11;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v7) = v13;
      if (!*v11)
      {
LABEL_73:
        v42[0] = 0;
        ++*(_QWORD *)(a1 + 24);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v42);
        return v11;
      }
      v33 = *(_QWORD *)(*v11 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v33 >= v8)
          v33 %= v8;
      }
      else
      {
        v33 &= v8 - 1;
      }
      v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    }
    *v32 = v11;
    goto LABEL_73;
  }
  while (1)
  {
    v12 = v11[1];
    if (v12 == a2)
      break;
    if (v9.u32[0] > 1uLL)
    {
      if (v12 >= v8)
        v12 %= v8;
    }
    else
    {
      v12 &= v8 - 1;
    }
    if (v12 != v3)
      goto LABEL_18;
LABEL_17:
    v11 = (uint64_t *)*v11;
    if (!v11)
      goto LABEL_18;
  }
  if (*((_DWORD *)v11 + 4) != a2)
    goto LABEL_17;
  *((_DWORD *)v11 + 6) = *(_DWORD *)a3;
  v35 = v11[4];
  v11[4] = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v35;
  v36 = v11[5];
  v11[5] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = v36;
  v37 = v11[6];
  v11[6] = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = v37;
  v38 = v11[8];
  v11[8] = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 40) = v38;
  v39 = v11[9];
  v11[9] = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 48) = v39;
  v40 = v11[10];
  v11[10] = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a3 + 56) = v40;
  return v11;
}

void sub_1B592F000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

std::__wrap_iter<unsigned int *>::iterator_type AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::insert_unique(std::vector<unsigned int> *a1, unsigned int *a2)
{
  unsigned int v4;
  std::__wrap_iter<unsigned int *>::iterator_type result;
  std::vector<unsigned int>::const_iterator v6;

  v4 = *a2;
  result = (std::__wrap_iter<unsigned int *>::iterator_type)AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::find(a1->__begin_, a1->__end_, *a2);
  if (!(_BYTE)result)
    return std::vector<unsigned int>::insert(a1, v6, a2).__i_;
  *v6.__i_ = v4;
  return result;
}

BOOL AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::find(_DWORD *a1, _DWORD *a2, unsigned int a3)
{
  _DWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  _DWORD *v7;
  unsigned int v8;

  if (a2 == a1)
  {
    v3 = a2;
  }
  else
  {
    v3 = a1;
    v4 = a2 - a1;
    do
    {
      v5 = v4 >> 1;
      v6 = &v3[v4 >> 1];
      v8 = *v6;
      v7 = v6 + 1;
      v4 += ~(v4 >> 1);
      if (v8 < a3)
        v3 = v7;
      else
        v4 = v5;
    }
    while (v4);
  }
  return v3 != a2 && *v3 == a3;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>,0>(v1 + 2);
    operator delete(v1);
  }
}

void *AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::erase(uint64_t a1, unsigned int a2)
{
  char *v4;
  void *result;
  _DWORD *v6;
  _BYTE *v7;
  char *v8;
  int v9;
  char *v10;
  int64_t v11;
  char *v12;
  size_t v13;

  v4 = *(char **)(a1 + 8);
  result = (void *)AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::find(*(_DWORD **)a1, v4, a2);
  if ((_BYTE)result)
  {
    v7 = v6;
    v8 = (char *)(v6 + 1);
    while (v8 != v4)
    {
      v9 = *(_DWORD *)v8;
      v8 += 4;
      if (v9 != a2)
      {
        v10 = v8 - 4;
        goto LABEL_7;
      }
    }
    v10 = v4;
LABEL_7:
    v11 = v10 - (char *)v6;
    if (v11)
    {
      v12 = (char *)v6 + v11;
      v13 = v4 - &v7[v11];
      if (v13)
        result = memmove(v7, v12, v13);
      *(_QWORD *)(a1 + 8) = &v7[v13];
    }
  }
  return result;
}

uint64_t AMCP::Core::Broker::gather_directly_owned_objects(std::vector<unsigned int> *a1, std::__shared_mutex_base *this, unsigned int **a3)
{
  unsigned int *v6;
  unsigned int *v7;
  char *opaque;
  uint64_t *v9;
  std::__shared_mutex_base *v11;
  char v12;

  v11 = this;
  v12 = 1;
  std::__shared_mutex_base::lock_shared(this);
  a1->__begin_ = 0;
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  std::vector<unsigned int>::reserve(a1, *(_QWORD *)&this[2].__gate1_.__cv_.__opaque[24]);
  v7 = *a3;
  v6 = a3[1];
  if (v7 != v6)
  {
    opaque = this[2].__gate1_.__cv_.__opaque;
    do
    {
      v9 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(opaque, *v7);
      if (v9)
        AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::insert_unique<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>((std::__wrap_iter<unsigned int *>::iterator_type)a1, (unsigned int *)v9[4], (unsigned int *)v9[5]);
      ++v7;
    }
    while (v7 != v6);
  }
  return std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v11);
}

std::__wrap_iter<unsigned int *>::iterator_type AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::insert_unique<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>(std::__wrap_iter<unsigned int *>::iterator_type result, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v4;
  std::vector<unsigned int> *v5;
  unsigned int v6;
  std::vector<unsigned int>::const_iterator v7;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (std::vector<unsigned int> *)result;
    do
    {
      v6 = *v4;
      result = (std::__wrap_iter<unsigned int *>::iterator_type)AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::find(v5->__begin_, v5->__end_, *v4);
      if ((_BYTE)result)
        *v7.__i_ = v6;
      else
        result = std::vector<unsigned int>::insert(v5, v7, v4).__i_;
      ++v4;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t AMCP::Core::Broker::fetch_core(AMCP::Core::Broker *this, std::__shared_mutex_base *a2, unsigned int a3)
{
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_mutex_base *v16;
  char v17;

  v16 = a2;
  v17 = 1;
  std::__shared_mutex_base::lock_shared(a2);
  v6 = *(_QWORD *)a2[1].__mut_.__m_.__opaque;
  if (!v6)
    goto LABEL_17;
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = a3;
    if (v6 <= a3)
      v8 = a3 % v6;
  }
  else
  {
    v8 = ((_DWORD)v6 - 1) & a3;
  }
  v9 = *(uint64_t ***)(a2[1].__mut_.__m_.__sig + 8 * v8);
  if (!v9 || (v10 = *v9) == 0)
  {
LABEL_17:
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    return std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v16);
  }
  while (1)
  {
    v11 = v10[1];
    if (v11 == a3)
      break;
    if (v7.u32[0] > 1uLL)
    {
      if (v11 >= v6)
        v11 %= v6;
    }
    else
    {
      v11 &= v6 - 1;
    }
    if (v11 != v8)
      goto LABEL_17;
LABEL_16:
    v10 = (uint64_t *)*v10;
    if (!v10)
      goto LABEL_17;
  }
  if (*((_DWORD *)v10 + 4) != a3)
    goto LABEL_16;
  v13 = v10[4];
  *(_QWORD *)this = v10[3];
  *((_QWORD *)this + 1) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  return std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v16);
}

uint64_t AMCP::Core::Broker::fetch_cores_if (uint64_t a1, std::__shared_mutex_base *this, uint64_t a3)
{
  uint64_t *i;
  uint64_t v7;
  std::__shared_mutex_base *v9;
  char v10;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v9 = this;
  v10 = 1;
  std::__shared_mutex_base::lock_shared(this);
  for (i = *(uint64_t **)&this[1].__mut_.__m_.__opaque[8]; i; i = (uint64_t *)*i)
  {
    v7 = *(_QWORD *)(a3 + 24);
    if (!v7)
      std::__throw_bad_function_call[abi:ne180100]();
    if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 48))(v7, i + 3))
      std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((char **)a1, (__int128 *)(i + 3));
  }
  return std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v9);
}

void AMCP::Core::Broker::fetch_object_ids_if (std::vector<unsigned int> *a1, std::__shared_mutex_base *a2, uint64_t a3)
{
  unsigned int **v4;
  unsigned int **v5;
  std::vector<unsigned int>::pointer end;
  unsigned int *value;
  unsigned int v8;
  unsigned int *v9;
  std::vector<unsigned int>::pointer begin;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int **v17;
  unsigned int **v18;
  unsigned int ***v19;

  AMCP::Core::Broker::fetch_cores_if ((uint64_t)&v17, a2, a3);
  a1->__begin_ = 0;
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  v5 = v17;
  v4 = v18;
  std::vector<unsigned int>::reserve(a1, ((char *)v18 - (char *)v17) >> 4);
  if (v5 != v4)
  {
    end = a1->__end_;
    value = a1->__end_cap_.__value_;
    do
    {
      v8 = **v5;
      if (end >= value)
      {
        begin = a1->__begin_;
        v11 = end - a1->__begin_;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        if (((char *)value - (char *)begin) >> 1 > v12)
          v12 = ((char *)value - (char *)begin) >> 1;
        if ((unint64_t)((char *)value - (char *)begin) >= 0x7FFFFFFFFFFFFFFCLL)
          v13 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v13);
        else
          v14 = 0;
        v15 = (unsigned int *)(v13 + 4 * v11);
        *v15 = v8;
        v9 = v15 + 1;
        while (end != begin)
        {
          v16 = *--end;
          *--v15 = v16;
        }
        value = (unsigned int *)(v13 + 4 * v14);
        a1->__begin_ = v15;
        a1->__end_cap_.__value_ = value;
        if (begin)
          operator delete(begin);
      }
      else
      {
        *end = v8;
        v9 = end + 1;
      }
      a1->__end_ = v9;
      v5 += 2;
      end = v9;
    }
    while (v5 != v4);
  }
  v19 = &v17;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
}

uint64_t AMCP::Core::Broker::fetch_first_core_if (_QWORD *a1, std::__shared_mutex_base *this, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_mutex_base *v12;
  char v13;

  v12 = this;
  v13 = 1;
  std::__shared_mutex_base::lock_shared(this);
  v6 = &this[1].__mut_.__m_.__opaque[8];
  do
  {
    v6 = *(char **)v6;
    if (!v6)
    {
      *a1 = 0;
      a1[1] = 0;
      return std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v12);
    }
    v7 = *(_QWORD *)(a3 + 24);
    if (!v7)
      std::__throw_bad_function_call[abi:ne180100]();
  }
  while (!(*(unsigned int (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 48))(v7, (_QWORD *)v6 + 3));
  v8 = *((_QWORD *)v6 + 4);
  *a1 = *((_QWORD *)v6 + 3);
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v12);
}

uint64_t AMCP::Core::Broker::fetch_first_object_id_if (std::__shared_mutex_base *this, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned int *v7;
  std::__shared_weak_count *v8;

  AMCP::Core::Broker::fetch_first_core_if (&v7, this, a2);
  if (v7)
    v2 = *v7;
  else
    v2 = 0;
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

void AMCP::Core::Broker::fetch_owned_object_ids_if (_QWORD *a1, std::__shared_mutex_base *a2, unsigned int a3, uint64_t a4)
{
  unsigned int *v8;
  unsigned int *begin;
  std::vector<unsigned int>::pointer end;
  uint64_t v11;
  int v12;
  unint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unsigned int *v27;
  std::__shared_weak_count *v28;
  unsigned int *v29;
  std::vector<unsigned int> v30;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v8 = (unsigned int *)operator new(4uLL);
  *v8 = a3;
  v28 = (std::__shared_weak_count *)(v8 + 1);
  v29 = v8 + 1;
  v27 = v8;
  AMCP::Core::Broker::gather_directly_owned_objects(&v30, a2, &v27);
  operator delete(v8);
  begin = v30.__begin_;
  end = v30.__end_;
  if (v30.__begin_ != v30.__end_)
  {
    do
    {
      AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v27, a2, *begin);
      if (v27)
      {
        v11 = *(_QWORD *)(a4 + 24);
        if (!v11)
          std::__throw_bad_function_call[abi:ne180100]();
        if ((*(unsigned int (**)(uint64_t, unsigned int **))(*(_QWORD *)v11 + 48))(v11, &v27))
        {
          v12 = *v27;
          v14 = (_DWORD *)a1[1];
          v13 = a1[2];
          if ((unint64_t)v14 >= v13)
          {
            v16 = (_DWORD *)*a1;
            v17 = ((uint64_t)v14 - *a1) >> 2;
            v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 62)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v19 = v13 - (_QWORD)v16;
            if (v19 >> 1 > v18)
              v18 = v19 >> 1;
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
              v20 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v20 = v18;
            if (v20)
              v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v20);
            else
              v21 = 0;
            v22 = (_DWORD *)(v20 + 4 * v17);
            *v22 = v12;
            v15 = v22 + 1;
            while (v14 != v16)
            {
              v23 = *--v14;
              *--v22 = v23;
            }
            *a1 = v22;
            a1[2] = v20 + 4 * v21;
            if (v16)
              operator delete(v16);
          }
          else
          {
            *v14 = v12;
            v15 = v14 + 1;
          }
          a1[1] = v15;
        }
      }
      v24 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      ++begin;
    }
    while (begin != end);
    begin = v30.__begin_;
  }
  if (begin)
  {
    v30.__end_ = begin;
    operator delete(begin);
  }
}

void AMCP::Core::Broker::make_snapshot(uint64_t a1, std::__shared_mutex_base *this, unsigned int **a3, char a4)
{
  unsigned int *v8;
  unsigned int *v9;
  uint64_t *v10;
  unsigned int *begin;
  unsigned int *value;
  std::vector<unsigned int>::pointer v13;
  std::vector<unsigned int>::pointer end;
  unsigned int v15;
  std::vector<unsigned int>::pointer v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t **i;
  uint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t Has_Property;
  uint64_t *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  void *v32[2];
  void *v33[2];
  int v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::vector<unsigned int> __p;
  std::vector<unsigned int> v38;
  void (*v39)(_QWORD, std::vector<unsigned int> *, _QWORD, _QWORD);
  uint64_t v40;
  char v41;

  memset(&__p, 0, sizeof(__p));
  if ((a4 & 1) != 0)
  {
    AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::insert_unique<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>((std::__wrap_iter<unsigned int *>::iterator_type)&__p, *a3, a3[1]);
  }
  else
  {
    v32[0] = this;
    LOBYTE(v32[1]) = 1;
    std::__shared_mutex_base::lock_shared(this);
    memset(&v38, 0, sizeof(v38));
    std::vector<unsigned int>::reserve(&v38, *(_QWORD *)&this[2].__gate1_.__cv_.__opaque[24]);
    AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::insert_unique<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>((std::__wrap_iter<unsigned int *>::iterator_type)&v38, *a3, a3[1]);
    v8 = *a3;
    v9 = a3[1];
    if (*a3 != v9)
    {
      do
      {
        v10 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(this[2].__gate1_.__cv_.__opaque, *v8);
        if (v10)
          AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::insert_unique<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>((std::__wrap_iter<unsigned int *>::iterator_type)&v38, (unsigned int *)v10[8], (unsigned int *)v10[9]);
        ++v8;
      }
      while (v8 != v9);
    }
    std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)v32);
    begin = __p.__begin_;
    value = __p.__end_cap_.__value_;
    __p = v38;
    v38.__begin_ = begin;
    v38.__end_cap_.__value_ = value;
    if (begin)
    {
      v38.__end_ = begin;
      operator delete(begin);
    }
  }
  if ((a4 & 2) != 0)
    AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::insert_unique(&__p, &AMCP::k_object_id_system);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, (unint64_t)(float)(unint64_t)(__p.__end_ - __p.__begin_));
  v13 = __p.__begin_;
  end = __p.__end_;
  if ((a4 & 4) != 0)
  {
    if (__p.__begin_ == __p.__end_)
      goto LABEL_42;
    do
    {
      v20 = *v13;
      AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v35, this, *v13);
      v21 = v35;
      if (v35)
      {
        v40 = v35 + 48;
        v41 = 1;
        caulk::concurrent::shared_spin_lock::lock_shared((unsigned int *)(v35 + 48));
        *(_OWORD *)v32 = 0u;
        *(_OWORD *)v33 = 0u;
        v34 = 1065353216;
        std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)v32, (unint64_t)(float)*(unint64_t *)(v21 + 32));
        for (i = *(uint64_t ***)(v21 + 24); i; i = (uint64_t **)*i)
        {
          v23 = i[4];
          v24 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
          if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v23, v24))
          {
            if ((AMCP::is_invariant_property_selector((AMCP *)*((unsigned int *)i + 4)) & 1) == 0)
            {
              v25 = i[4];
              Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
              if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v25, Has_Property)|| AMCP::Core::Operation::call_function<BOOL,AMCP::Core::Has_Property_Function>(i[4]))
              {
                v27 = i[4];
                AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)&v38, v27);
                std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v32, (unsigned int *)v27 + 10, (AMCP *)&v38);
                if (v39)
                  v39(0, &v38, 0, 0);
              }
            }
          }
        }
        std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v40);
        std::unordered_map<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>::insert_or_assign[abi:ne180100]<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>(a1, v20, (uint64_t *)v32);
        std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((_QWORD *)v33[0]);
        v28 = v32[0];
        v32[0] = 0;
        if (v28)
          operator delete(v28);
      }
      v29 = v36;
      if (v36)
      {
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      ++v13;
    }
    while (v13 != end);
  }
  else
  {
    if (__p.__begin_ == __p.__end_)
      goto LABEL_42;
    do
    {
      v15 = *v13;
      AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)v32, this, *v13);
      if (v32[0])
      {
        AMCP::Core::Core::make_snapshot((AMCP::Core::Core *)&v38, (uint64_t)v32[0]);
        std::unordered_map<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>::insert_or_assign[abi:ne180100]<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>(a1, v15, (uint64_t *)&v38);
        std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((_QWORD *)v38.__end_cap_.__value_);
        v16 = v38.__begin_;
        v38.__begin_ = 0;
        if (v16)
          operator delete(v16);
      }
      v17 = (std::__shared_weak_count *)v32[1];
      if (v32[1])
      {
        v18 = (unint64_t *)((char *)v32[1] + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      ++v13;
    }
    while (v13 != end);
  }
  v13 = __p.__begin_;
LABEL_42:
  if (v13)
  {
    __p.__end_ = v13;
    operator delete(v13);
  }
}

void std::unordered_map<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>::insert_or_assign[abi:ne180100]<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD v35[2];
  char v36;

  v7 = a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    goto LABEL_18;
  v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v3 = a2;
    if (v8 <= a2)
      v3 = a2 % v8;
  }
  else
  {
    v3 = ((_DWORD)v8 - 1) & a2;
  }
  v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
  if (!v10 || (v11 = *v10) == 0)
  {
LABEL_18:
    v13 = (_QWORD *)(a1 + 16);
    v14 = operator new(0x40uLL);
    v35[0] = v14;
    v35[1] = a1 + 16;
    *v14 = 0;
    v14[1] = v7;
    *((_DWORD *)v14 + 4) = a2;
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v14 + 3), a3);
    v36 = 1;
    v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
    v16 = *(float *)(a1 + 32);
    if (!v8 || (float)(v16 * (float)v8) < v15)
    {
      v17 = 1;
      if (v8 >= 3)
        v17 = (v8 & (v8 - 1)) != 0;
      v18 = v17 | (2 * v8);
      v19 = vcvtps_u32_f32(v15 / v16);
      if (v18 <= v19)
        v20 = v19;
      else
        v20 = v18;
      std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v20);
      v8 = *(_QWORD *)(a1 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v8 <= v7)
          v3 = v7 % v8;
        else
          v3 = v7;
      }
      else
      {
        v3 = ((_DWORD)v8 - 1) & v7;
      }
    }
    v21 = *(_QWORD *)a1;
    v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v22)
    {
      *v14 = *v22;
    }
    else
    {
      *v14 = *v13;
      *v13 = v14;
      *(_QWORD *)(v21 + 8 * v3) = v13;
      if (!*v14)
      {
LABEL_39:
        v35[0] = 0;
        ++*(_QWORD *)(a1 + 24);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
        return;
      }
      v23 = *(_QWORD *)(*v14 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8)
          v23 %= v8;
      }
      else
      {
        v23 &= v8 - 1;
      }
      v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    }
    *v22 = v14;
    goto LABEL_39;
  }
  while (1)
  {
    v12 = v11[1];
    if (v12 == a2)
      break;
    if (v9.u32[0] > 1uLL)
    {
      if (v12 >= v8)
        v12 %= v8;
    }
    else
    {
      v12 &= v8 - 1;
    }
    if (v12 != v3)
      goto LABEL_18;
LABEL_17:
    v11 = (uint64_t *)*v11;
    if (!v11)
      goto LABEL_18;
  }
  if (*((_DWORD *)v11 + 4) != a2)
    goto LABEL_17;
  if (v11[6])
  {
    std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((_QWORD *)v11[5]);
    v11[5] = 0;
    v24 = v11[4];
    if (v24)
    {
      for (i = 0; i != v24; ++i)
        *(_QWORD *)(v11[3] + 8 * i) = 0;
    }
    v11[6] = 0;
  }
  v26 = *a3;
  *a3 = 0;
  v27 = (void *)v11[3];
  v11[3] = v26;
  if (v27)
    operator delete(v27);
  v30 = a3[2];
  v29 = a3 + 2;
  v28 = v30;
  v31 = *(v29 - 1);
  v11[5] = v30;
  v11[4] = v31;
  *(v29 - 1) = 0;
  v32 = v29[1];
  v11[6] = v32;
  *((_DWORD *)v11 + 14) = *((_DWORD *)v29 + 4);
  if (v32)
  {
    v33 = *(_QWORD *)(v28 + 8);
    v34 = v11[4];
    if ((v34 & (v34 - 1)) != 0)
    {
      if (v33 >= v34)
        v33 %= v34;
    }
    else
    {
      v33 &= v34 - 1;
    }
    *(_QWORD *)(v11[3] + 8 * v33) = v11 + 5;
    *v29 = 0;
    v29[1] = 0;
  }
}

void sub_1B592FF4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Core::Core::make_snapshot(AMCP::Core::Core *this, uint64_t a2)
{
  _QWORD *i;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t Has_Property;
  uint64_t v9;
  _BYTE v11[32];
  void (*v12)(_QWORD, _BYTE *, _QWORD, _QWORD);
  uint64_t v13;
  char v14;

  v13 = a2 + 48;
  v14 = 1;
  caulk::concurrent::shared_spin_lock::lock_shared((unsigned int *)(a2 + 48));
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)this, (unint64_t)(float)*(unint64_t *)(a2 + 32));
  for (i = *(_QWORD **)(a2 + 24); i; i = (_QWORD *)*i)
  {
    v5 = (_QWORD *)i[4];
    v6 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v5, v6))
    {
      v7 = (_QWORD *)i[4];
      Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
      if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, Has_Property)|| AMCP::Core::Operation::call_function<BOOL,AMCP::Core::Has_Property_Function>((_QWORD *)i[4]))
      {
        v9 = i[4];
        AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v11, (_QWORD *)v9);
        std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)this, (unsigned int *)(v9 + 40), (AMCP *)v11);
        if (v12)
          v12(0, v11, 0, 0);
      }
    }
  }
  return std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v13);
}

void std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(uint64_t a1, unsigned int *a2, AMCP *this)
{
  uint64_t v3;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *i;
  unint64_t v15;
  _QWORD *v16;
  void (*v17)(uint64_t, AMCP *, _QWORD *, _QWORD);
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = v8 & 0xFF000000 | (unint64_t)(v7 << 32) | *(_QWORD *)&v9 & 0xFFFFFFLL;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v8 & 0xFF000000 | (unint64_t)(v7 << 32) | *(_QWORD *)&v9 & 0xFFFFFFLL;
      if (v10 >= v11)
        v3 = v10 % v11;
    }
    else
    {
      v3 = v10 & (v11 - 1);
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = (uint64_t *)*i)
      {
        v15 = i[1];
        if (v15 == v10)
        {
          if (i[2] == __PAIR64__(v8, v7) && *((_DWORD *)i + 6) == v9)
          {
            AMCP::swap(this, (AMCP::Thing *)(i + 4), this);
            return;
          }
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11)
              v15 %= v11;
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = operator new(0x48uLL);
  *v16 = 0;
  v16[1] = v10;
  v16[2] = *(_QWORD *)a2;
  *((_DWORD *)v16 + 6) = v9;
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  v16[8] = 0;
  v17 = (void (*)(uint64_t, AMCP *, _QWORD *, _QWORD))*((_QWORD *)this + 4);
  if (v17)
    v17(2, this, v16 + 4, 0);
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    v20 = 1;
    if (v11 >= 3)
      v20 = (v11 & (v11 - 1)) != 0;
    v21 = v20 | (2 * v11);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v23);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *v16 = *v25;
LABEL_41:
    *v25 = v16;
    goto LABEL_42;
  }
  *v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(v24 + 8 * v3) = a1 + 16;
  if (*v16)
  {
    v26 = *(_QWORD *)(*v16 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v26 >= v11)
        v26 %= v11;
    }
    else
    {
      v26 &= v11 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1B59302DC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Address,AMCP::Thing>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table((uint64_t)v1 + 24);
    operator delete(v1);
  }
}

uint64_t AMCP::Core::Broker::reserve_id(std::__shared_mutex_base *this)
{
  const unsigned int *v2;
  std::vector<unsigned int> *v3;
  const unsigned int *v4;
  std::vector<unsigned int>::value_type value;
  std::vector<unsigned int>::const_iterator v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  const unsigned int *v10;
  const unsigned int *v11;
  std::vector<unsigned int>::value_type v12;
  uint64_t v13;
  std::vector<unsigned int>::value_type __x;
  std::__shared_mutex_base *v16;
  char v17;

  v16 = this;
  v17 = 1;
  std::__shared_mutex_base::lock(this);
  v4 = *(const unsigned int **)&this[1].__mut_.__m_.__opaque[40];
  v3 = (std::vector<unsigned int> *)&this[1].__mut_.__m_.__opaque[40];
  v2 = v4;
  value = (std::vector<unsigned int>::value_type)v3[-1].__end_cap_.__value_;
  LODWORD(v3[-1].__end_cap_.__value_) = value + 1;
  __x = value;
  v6.__i_ = v3->__end_;
  v7 = (char *)v6.__i_ - (char *)v4;
  if (v6.__i_ != v4)
  {
    v8 = v7 >> 2;
    do
    {
      v9 = v8 >> 1;
      v10 = &v2[v8 >> 1];
      v12 = *v10;
      v11 = v10 + 1;
      v8 += ~(v8 >> 1);
      if (v12 < value)
        v2 = v11;
      else
        v8 = v9;
    }
    while (v8);
    v6.__i_ = v2;
  }
  std::vector<unsigned int>::insert(v3, v6, &__x);
  v13 = __x;
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v16);
  return v13;
}

uint64_t AMCP::Core::Broker::make_core(AMCP::Core::Core **a1, std::__shared_mutex_base *this, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t **v25;
  uint64_t *i;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  float v32;
  float v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint8x8_t v43;
  AMCP::Core::Core **v44;
  char *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  char *v50;
  unsigned int v51;
  uint64_t **v52;
  uint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  unint64_t v57;
  float v58;
  float v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  _BOOL8 v64;
  unint64_t v65;
  unint64_t v66;
  int8x8_t prime;
  void *v68;
  void *v69;
  uint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  uint8x8_t v73;
  unint64_t v74;
  uint8x8_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t result;
  _QWORD *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  unint64_t v85;
  unsigned int v86;
  unsigned int v87;
  char *opaque;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  void *sig;
  unsigned int v93;
  std::__shared_mutex_base *v94;
  AMCP::Core::Core **v95;
  AMCP::Core::Core *v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  void *__p;
  uint64_t v102;
  uint64_t v103;
  std::__shared_mutex_base *v104;
  char v105;
  unsigned int v106;

  v104 = this;
  v105 = 1;
  std::__shared_mutex_base::lock(this);
  if ((_DWORD)a4)
  {
    v8 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(&this[1].__mut_.__m_.__sig, a4);
    if (v8)
    {
      v9 = v8[4];
      *a1 = (AMCP::Core::Core *)v8[3];
      a1[1] = (AMCP::Core::Core *)v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v104);
    }
    v46 = *(char **)&this[1].__mut_.__m_.__opaque[40];
    v45 = *(char **)&this[1].__mut_.__m_.__opaque[48];
    if (v45 == v46)
    {
      v46 = *(char **)&this[1].__mut_.__m_.__opaque[48];
    }
    else
    {
      v47 = (v45 - v46) >> 2;
      do
      {
        v48 = v47 >> 1;
        v49 = (unsigned int *)&v46[4 * (v47 >> 1)];
        v51 = *v49;
        v50 = (char *)(v49 + 1);
        v47 += ~(v47 >> 1);
        if (v51 < a4)
          v46 = v50;
        else
          v47 = v48;
      }
      while (v47);
    }
    if (v45 == v46 && a4 >= 0x10)
    {
      *a1 = 0;
      a1[1] = 0;
      return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v104);
    }
    if (v45 != v46)
    {
      v78 = v45 - (v46 + 4);
      if (v45 != v46 + 4)
        memmove(v46, v46 + 4, v45 - (v46 + 4));
      *(_QWORD *)&this[1].__mut_.__m_.__opaque[48] = &v46[v78];
    }
  }
  else
  {
    a4 = *(unsigned int *)&this[1].__mut_.__m_.__opaque[32];
    *(_DWORD *)&this[1].__mut_.__m_.__opaque[32] = a4 + 1;
  }
  v12 = (char *)operator new(0x50uLL);
  v94 = this;
  v95 = a1;
  *((_QWORD *)v12 + 1) = 0;
  v13 = (unint64_t *)(v12 + 8);
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = &off_1E6974DE8;
  v93 = a4;
  *((_DWORD *)v12 + 6) = a4;
  v96 = (AMCP::Core::Core *)(v12 + 24);
  *(_OWORD *)(v12 + 28) = 0u;
  v14 = (uint64_t)(v12 + 28);
  v15 = (uint64_t *)(v12 + 32);
  *(_OWORD *)(v12 + 44) = 0u;
  v16 = *(_DWORD *)(a3 + 32);
  *((_DWORD *)v12 + 15) = 0;
  *((_DWORD *)v12 + 16) = v16;
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)(v12 + 32), *(_QWORD *)(a3 + 8));
  v17 = *(uint64_t **)(a3 + 16);
  if (v17)
  {
    v18 = v12 + 48;
    v14 = 1;
    do
    {
      v19 = *((unsigned int *)v17 + 4);
      v20 = *((_DWORD *)v17 + 5);
      v21 = *((_DWORD *)v17 + 6);
      v22 = v20 & 0xFF000000 | (unint64_t)(v19 << 32) | *(_QWORD *)&v21 & 0xFFFFFFLL;
      v23 = *((_QWORD *)v12 + 5);
      if (v23)
      {
        v24 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
        v24.i16[0] = vaddlv_u8(v24);
        if (v24.u32[0] > 1uLL)
        {
          a4 = v20 & 0xFF000000 | (unint64_t)(v19 << 32) | *(_QWORD *)&v21 & 0xFFFFFFLL;
          if (v22 >= v23)
            a4 = v22 % v23;
        }
        else
        {
          a4 = v22 & (v23 - 1);
        }
        v25 = *(uint64_t ***)(*v15 + 8 * a4);
        if (v25)
        {
          for (i = *v25; i; i = (uint64_t *)*i)
          {
            v27 = i[1];
            if (v27 == v22)
            {
              if (i[2] == __PAIR64__(v20, v19) && *((_DWORD *)i + 6) == v21)
                goto LABEL_52;
            }
            else
            {
              if (v24.u32[0] > 1uLL)
              {
                if (v27 >= v23)
                  v27 %= v23;
              }
              else
              {
                v27 &= v23 - 1;
              }
              if (v27 != a4)
                break;
            }
          }
        }
      }
      v28 = operator new(0x30uLL);
      v97 = (uint64_t)v28;
      v98 = v12 + 48;
      *v28 = 0;
      v28[1] = v22;
      v28[2] = v17[2];
      *((_DWORD *)v28 + 6) = *((_DWORD *)v17 + 6);
      v28[4] = v17[4];
      v29 = v17[5];
      v28[5] = v29;
      if (v29)
      {
        v30 = (unint64_t *)(v29 + 8);
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      LOBYTE(v99) = 1;
      v32 = (float)(unint64_t)(*((_QWORD *)v12 + 7) + 1);
      v33 = *((float *)v12 + 16);
      if (!v23 || (float)(v33 * (float)v23) < v32)
      {
        v34 = (v23 & (v23 - 1)) != 0;
        if (v23 < 3)
          v34 = 1;
        v35 = v34 | (2 * v23);
        v36 = vcvtps_u32_f32(v32 / v33);
        if (v35 <= v36)
          v37 = v36;
        else
          v37 = v35;
        std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)v15, v37);
        v23 = *((_QWORD *)v12 + 5);
        if ((v23 & (v23 - 1)) != 0)
        {
          if (v22 >= v23)
            a4 = v22 % v23;
          else
            a4 = v22;
        }
        else
        {
          a4 = (v23 - 1) & v22;
        }
      }
      v38 = *v15;
      v39 = *(_QWORD **)(*v15 + 8 * a4);
      if (v39)
      {
        *v28 = *v39;
      }
      else
      {
        *v28 = *v18;
        *v18 = v28;
        *(_QWORD *)(v38 + 8 * a4) = v18;
        if (!*v28)
          goto LABEL_51;
        v40 = *(_QWORD *)(*v28 + 8);
        if ((v23 & (v23 - 1)) != 0)
        {
          if (v40 >= v23)
            v40 %= v23;
        }
        else
        {
          v40 &= v23 - 1;
        }
        v39 = (_QWORD *)(*v15 + 8 * v40);
      }
      *v39 = v28;
LABEL_51:
      v97 = 0;
      ++*((_QWORD *)v12 + 7);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v97);
LABEL_52:
      v17 = (uint64_t *)*v17;
    }
    while (v17);
  }
  *((_DWORD *)v12 + 18) = 0;
  v97 = 0x676C6F626F776E72;
  LODWORD(v98) = 0;
  *((_DWORD *)v12 + 7) = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v96, (const AMCP::Address *)&v97, &AMCP::k_object_id_unknown);
  v41 = v93;
  v42 = *(_QWORD *)v94[1].__mut_.__m_.__opaque;
  if (!v42)
  {
    v44 = v95;
    goto LABEL_77;
  }
  v43 = (uint8x8_t)vcnt_s8((int8x8_t)v42);
  v43.i16[0] = vaddlv_u8(v43);
  v44 = v95;
  if (v43.u32[0] > 1uLL)
  {
    v14 = v93;
    if (v42 <= v93)
      v14 = v93 % v42;
  }
  else
  {
    v14 = ((_DWORD)v42 - 1) & v93;
  }
  v52 = *(uint64_t ***)(v94[1].__mut_.__m_.__sig + 8 * v14);
  if (!v52 || (v53 = *v52) == 0)
  {
LABEL_77:
    v55 = operator new(0x28uLL);
    v56 = &v94[1].__mut_.__m_.__opaque[8];
    v97 = (uint64_t)v55;
    v98 = &v94[1].__mut_.__m_.__opaque[8];
    *v55 = 0;
    v55[1] = v93;
    *((_DWORD *)v55 + 4) = v93;
    v55[3] = v96;
    v55[4] = v12;
    do
      v57 = __ldxr(v13);
    while (__stxr(v57 + 1, v13));
    LOBYTE(v99) = 1;
    v58 = (float)(unint64_t)(*(_QWORD *)&v94[1].__mut_.__m_.__opaque[16] + 1);
    v59 = *(float *)&v94[1].__mut_.__m_.__opaque[24];
    if (v42 && (float)(v59 * (float)v42) >= v58)
    {
      v41 = v14;
      goto LABEL_142;
    }
    v64 = 1;
    if (v42 >= 3)
      v64 = (v42 & (v42 - 1)) != 0;
    v65 = v64 | (2 * v42);
    v66 = vcvtps_u32_f32(v58 / v59);
    if (v65 <= v66)
      prime = (int8x8_t)v66;
    else
      prime = (int8x8_t)v65;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v42 = *(_QWORD *)v94[1].__mut_.__m_.__opaque;
    }
    if (*(_QWORD *)&prime <= v42)
    {
      if (*(_QWORD *)&prime >= v42)
        goto LABEL_138;
      v74 = vcvtps_u32_f32((float)*(unint64_t *)&v94[1].__mut_.__m_.__opaque[16] / *(float *)&v94[1].__mut_.__m_.__opaque[24]);
      if (v42 < 3 || (v75 = (uint8x8_t)vcnt_s8((int8x8_t)v42), v75.i16[0] = vaddlv_u8(v75), v75.u32[0] > 1uLL))
      {
        v74 = std::__next_prime(v74);
      }
      else
      {
        v76 = 1 << -(char)__clz(v74 - 1);
        if (v74 >= 2)
          v74 = v76;
      }
      if (*(_QWORD *)&prime <= v74)
        prime = (int8x8_t)v74;
      if (*(_QWORD *)&prime >= v42)
      {
        v42 = *(_QWORD *)v94[1].__mut_.__m_.__opaque;
        goto LABEL_138;
      }
      if (!*(_QWORD *)&prime)
      {
        sig = (void *)v94[1].__mut_.__m_.__sig;
        v94[1].__mut_.__m_.__sig = 0;
        if (sig)
          operator delete(sig);
        v42 = 0;
        *(_QWORD *)v94[1].__mut_.__m_.__opaque = 0;
        goto LABEL_138;
      }
    }
    if (*(_QWORD *)&prime >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v68 = operator new(8 * *(_QWORD *)&prime);
    v69 = (void *)v94[1].__mut_.__m_.__sig;
    v94[1].__mut_.__m_.__sig = (uint64_t)v68;
    if (v69)
      operator delete(v69);
    v70 = 0;
    *(int8x8_t *)v94[1].__mut_.__m_.__opaque = prime;
    do
      *(_QWORD *)(v94[1].__mut_.__m_.__sig + 8 * v70++) = 0;
    while (*(_QWORD *)&prime != v70);
    v71 = *(_QWORD **)v56;
    if (*(_QWORD *)v56)
    {
      v72 = v71[1];
      v73 = (uint8x8_t)vcnt_s8(prime);
      v73.i16[0] = vaddlv_u8(v73);
      if (v73.u32[0] > 1uLL)
      {
        if (v72 >= *(_QWORD *)&prime)
          v72 %= *(_QWORD *)&prime;
      }
      else
      {
        v72 &= *(_QWORD *)&prime - 1;
      }
      *(_QWORD *)(v94[1].__mut_.__m_.__sig + 8 * v72) = v56;
      v80 = (_QWORD *)*v71;
      if (*v71)
      {
        do
        {
          v81 = v80[1];
          if (v73.u32[0] > 1uLL)
          {
            if (v81 >= *(_QWORD *)&prime)
              v81 %= *(_QWORD *)&prime;
          }
          else
          {
            v81 &= *(_QWORD *)&prime - 1;
          }
          if (v81 != v72)
          {
            v82 = v94[1].__mut_.__m_.__sig;
            if (!*(_QWORD *)(v82 + 8 * v81))
            {
              *(_QWORD *)(v82 + 8 * v81) = v71;
              goto LABEL_134;
            }
            *v71 = *v80;
            *v80 = **(_QWORD **)(v94[1].__mut_.__m_.__sig + 8 * v81);
            **(_QWORD **)(v94[1].__mut_.__m_.__sig + 8 * v81) = v80;
            v80 = v71;
          }
          v81 = v72;
LABEL_134:
          v71 = v80;
          v80 = (_QWORD *)*v80;
          v72 = v81;
        }
        while (v80);
      }
    }
    v42 = (unint64_t)prime;
LABEL_138:
    if ((v42 & (v42 - 1)) != 0)
    {
      if (v42 <= v93)
        v41 = v93 % v42;
    }
    else
    {
      v41 = ((_DWORD)v42 - 1) & v93;
    }
LABEL_142:
    v83 = *(uint64_t **)(v94[1].__mut_.__m_.__sig + 8 * v41);
    v84 = v97;
    if (v83)
    {
      *(_QWORD *)v97 = *v83;
    }
    else
    {
      *(_QWORD *)v97 = *(_QWORD *)&v94[1].__mut_.__m_.__opaque[8];
      *(_QWORD *)&v94[1].__mut_.__m_.__opaque[8] = v84;
      *(_QWORD *)(v94[1].__mut_.__m_.__sig + 8 * v41) = v56;
      if (!*(_QWORD *)v84)
      {
LABEL_151:
        v97 = 0;
        ++*(_QWORD *)&v94[1].__mut_.__m_.__opaque[16];
        std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v97);
        goto LABEL_152;
      }
      v85 = *(_QWORD *)(*(_QWORD *)v84 + 8);
      if ((v42 & (v42 - 1)) != 0)
      {
        if (v85 >= v42)
          v85 %= v42;
      }
      else
      {
        v85 &= v42 - 1;
      }
      v83 = (uint64_t *)(v94[1].__mut_.__m_.__sig + 8 * v85);
    }
    *v83 = v84;
    goto LABEL_151;
  }
  while (1)
  {
    v54 = v53[1];
    if (v54 == v93)
      break;
    if (v43.u32[0] > 1uLL)
    {
      if (v54 >= v42)
        v54 %= v42;
    }
    else
    {
      v54 &= v42 - 1;
    }
    if (v54 != v14)
      goto LABEL_77;
LABEL_76:
    v53 = (uint64_t *)*v53;
    if (!v53)
      goto LABEL_77;
  }
  if (*((_DWORD *)v53 + 4) != v93)
    goto LABEL_76;
  do
    v60 = __ldxr(v13);
  while (__stxr(v60 + 1, v13));
  v61 = (std::__shared_weak_count *)v53[4];
  v53[3] = (uint64_t)v96;
  v53[4] = (uint64_t)v12;
  if (v61)
  {
    p_shared_owners = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(p_shared_owners);
    while (__stlxr(v63 - 1, p_shared_owners));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
LABEL_152:
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v104);
  v87 = *((_DWORD *)v12 + 7);
  v106 = *(_DWORD *)v96;
  v86 = v106;
  v104 = v94;
  v105 = 1;
  std::__shared_mutex_base::lock(v94);
  opaque = v94[2].__gate1_.__cv_.__opaque;
  v89 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v94[2].__gate1_.__cv_.__opaque, v86);
  if (!v89)
  {
    LODWORD(v97) = v87;
    v98 = 0;
    v99 = 0;
    v100 = 0;
    __p = 0;
    v102 = 0;
    v103 = 0;
    v89 = std::unordered_map<unsigned int,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>::insert_or_assign[abi:ne180100]<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>((uint64_t)opaque, v86, (uint64_t)&v97);
    if (__p)
      operator delete(__p);
    if (v98)
      operator delete(v98);
  }
  *((_DWORD *)v89 + 6) = v87;
  if (v87)
  {
    v90 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(opaque, v87);
    if (!v90)
    {
      LODWORD(v97) = 0;
      v98 = 0;
      v99 = 0;
      v100 = 0;
      __p = 0;
      v102 = 0;
      v103 = 0;
      v90 = std::unordered_map<unsigned int,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>::insert_or_assign[abi:ne180100]<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>((uint64_t)opaque, v87, (uint64_t)&v97);
      if (__p)
        operator delete(__p);
      if (v98)
        operator delete(v98);
    }
    AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::insert_unique((std::vector<unsigned int> *)(v90 + 4), &v106);
    do
    {
      v91 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(opaque, v87);
      if (!v91)
      {
        LODWORD(v97) = 0;
        v99 = 0;
        v100 = 0;
        v98 = 0;
        v102 = 0;
        v103 = 0;
        __p = 0;
        v91 = std::unordered_map<unsigned int,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>::insert_or_assign[abi:ne180100]<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>((uint64_t)opaque, v87, (uint64_t)&v97);
        if (__p)
          operator delete(__p);
        if (v98)
          operator delete(v98);
      }
      AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::insert_unique((std::vector<unsigned int> *)(v91 + 8), &v106);
      v87 = *((_DWORD *)v91 + 6);
    }
    while (v87);
  }
  result = std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v104);
  *v44 = v96;
  v44[1] = (AMCP::Core::Core *)v12;
  return result;
}

void sub_1B5930D7C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  __clang_call_terminate(a1);
}

void std::__shared_ptr_emplace<AMCP::Core::Core>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6974DE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Core::Core>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6974DE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::Core::Core>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  if (!atomic_load((unsigned int *)(a1 + 72)))
    return std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::~__hash_table(a1 + 32);
  _os_assert_log();
  result = _os_crash();
  __break(1u);
  return result;
}

std::__shared_mutex_base *AMCP::Core::Broker::destroy_core(std::__shared_mutex_base *this, unsigned int a2)
{
  std::__shared_mutex_base *v3;
  std::__shared_mutex_base *v4;
  uint64_t *v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *opaque;
  uint64_t *v16;
  uint64_t *v17;
  unsigned int i;
  uint64_t *v19;
  uint64_t *v20;
  int8x8_t v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  std::__shared_mutex_base *v30;
  char v31;
  uint64_t *v32;
  char *v33;
  char v34;

  if (a2)
  {
    v3 = this;
    v30 = this;
    v31 = 1;
    std::__shared_mutex_base::lock(this);
    v4 = v3 + 1;
    v5 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(&v3[1].__mut_.__m_.__sig, a2);
    if (v5)
    {
      v6 = *(int8x8_t *)v3[1].__mut_.__m_.__opaque;
      v7 = v5[1];
      v8 = (uint8x8_t)vcnt_s8(v6);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        if (v7 >= *(_QWORD *)&v6)
          v7 %= *(_QWORD *)&v6;
      }
      else
      {
        v7 &= *(_QWORD *)&v6 - 1;
      }
      v9 = *(uint64_t **)(v4->__mut_.__m_.__sig + 8 * v7);
      do
      {
        v10 = (char *)v9;
        v9 = (uint64_t *)*v9;
      }
      while (v9 != v5);
      if (v10 == &v3[1].__mut_.__m_.__opaque[8])
        goto LABEL_20;
      v11 = *((_QWORD *)v10 + 1);
      if (v8.u32[0] > 1uLL)
      {
        if (v11 >= *(_QWORD *)&v6)
          v11 %= *(_QWORD *)&v6;
      }
      else
      {
        v11 &= *(_QWORD *)&v6 - 1;
      }
      if (v11 != v7)
      {
LABEL_20:
        if (!*v5)
          goto LABEL_21;
        v12 = *(_QWORD *)(*v5 + 8);
        if (v8.u32[0] > 1uLL)
        {
          if (v12 >= *(_QWORD *)&v6)
            v12 %= *(_QWORD *)&v6;
        }
        else
        {
          v12 &= *(_QWORD *)&v6 - 1;
        }
        if (v12 != v7)
LABEL_21:
          *(_QWORD *)(v4->__mut_.__m_.__sig + 8 * v7) = 0;
      }
      v13 = *v5;
      if (*v5)
      {
        v14 = *(_QWORD *)(v13 + 8);
        if (v8.u32[0] > 1uLL)
        {
          if (v14 >= *(_QWORD *)&v6)
            v14 %= *(_QWORD *)&v6;
        }
        else
        {
          v14 &= *(_QWORD *)&v6 - 1;
        }
        if (v14 != v7)
        {
          *(_QWORD *)(v4->__mut_.__m_.__sig + 8 * v14) = v10;
          v13 = *v5;
        }
      }
      *(_QWORD *)v10 = v13;
      *v5 = 0;
      --*(_QWORD *)&v3[1].__mut_.__m_.__opaque[16];
      v32 = v5;
      v33 = &v3[1].__mut_.__m_.__opaque[8];
      v34 = 1;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v32);
    }
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v30);
    v30 = v3;
    v31 = 1;
    std::__shared_mutex_base::lock(v3);
    opaque = v3[2].__gate1_.__cv_.__opaque;
    v16 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v3[2].__gate1_.__cv_.__opaque, a2);
    if (v16)
    {
      v17 = v16;
      for (i = *((_DWORD *)v16 + 6); i; i = *((_DWORD *)v20 + 6))
      {
        v19 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v3[2].__gate1_.__cv_.__opaque, i);
        if (!v19)
          break;
        v20 = v19;
        AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::erase((uint64_t)(v19 + 4), a2);
        AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::erase((uint64_t)(v20 + 8), a2);
      }
      v21 = *(int8x8_t *)&v3[2].__gate1_.__cv_.__opaque[8];
      v22 = v17[1];
      v23 = (uint8x8_t)vcnt_s8(v21);
      v23.i16[0] = vaddlv_u8(v23);
      if (v23.u32[0] > 1uLL)
      {
        if (v22 >= *(_QWORD *)&v21)
          v22 %= *(_QWORD *)&v21;
      }
      else
      {
        v22 &= *(_QWORD *)&v21 - 1;
      }
      v24 = *(uint64_t **)(*(_QWORD *)opaque + 8 * v22);
      do
      {
        v25 = (char *)v24;
        v24 = (uint64_t *)*v24;
      }
      while (v24 != v17);
      if (v25 == &v3[2].__gate1_.__cv_.__opaque[16])
        goto LABEL_51;
      v26 = *((_QWORD *)v25 + 1);
      if (v23.u32[0] > 1uLL)
      {
        if (v26 >= *(_QWORD *)&v21)
          v26 %= *(_QWORD *)&v21;
      }
      else
      {
        v26 &= *(_QWORD *)&v21 - 1;
      }
      if (v26 != v22)
      {
LABEL_51:
        if (!*v17)
          goto LABEL_52;
        v27 = *(_QWORD *)(*v17 + 8);
        if (v23.u32[0] > 1uLL)
        {
          if (v27 >= *(_QWORD *)&v21)
            v27 %= *(_QWORD *)&v21;
        }
        else
        {
          v27 &= *(_QWORD *)&v21 - 1;
        }
        if (v27 != v22)
LABEL_52:
          *(_QWORD *)(*(_QWORD *)opaque + 8 * v22) = 0;
      }
      v28 = *v17;
      if (*v17)
      {
        v29 = *(_QWORD *)(v28 + 8);
        if (v23.u32[0] > 1uLL)
        {
          if (v29 >= *(_QWORD *)&v21)
            v29 %= *(_QWORD *)&v21;
        }
        else
        {
          v29 &= *(_QWORD *)&v21 - 1;
        }
        if (v29 != v22)
        {
          *(_QWORD *)(*(_QWORD *)opaque + 8 * v29) = v25;
          v28 = *v17;
        }
      }
      *(_QWORD *)v25 = v28;
      *v17 = 0;
      --*(_QWORD *)&v3[2].__gate1_.__cv_.__opaque[24];
      v32 = v17;
      v33 = &v3[2].__gate1_.__cv_.__opaque[16];
      v34 = 1;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v32);
    }
    return (std::__shared_mutex_base *)std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v30);
  }
  return this;
}

void std::__function::__func<AMCP::Core::Broker::destroy_all_cores(void)::$_1,std::allocator<AMCP::Core::Broker::destroy_all_cores(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Core::Broker::destroy_all_cores(void)::$_1,std::allocator<AMCP::Core::Broker::destroy_all_cores(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6974EB8;
  return result;
}

void std::__function::__func<AMCP::Core::Broker::destroy_all_cores(void)::$_1,std::allocator<AMCP::Core::Broker::destroy_all_cores(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6974EB8;
}

uint64_t std::__function::__func<AMCP::Core::Broker::destroy_all_cores(void)::$_1,std::allocator<AMCP::Core::Broker::destroy_all_cores(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()()
{
  return 1;
}

uint64_t std::__function::__func<AMCP::Core::Broker::destroy_all_cores(void)::$_1,std::allocator<AMCP::Core::Broker::destroy_all_cores(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core6Broker17destroy_all_coresEvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Core::Broker::destroy_all_cores(void)::$_1,std::allocator<AMCP::Core::Broker::destroy_all_cores(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

void std::__function::__func<AMCP::Core::Broker::destroy_all_cores(void)::$_0,std::allocator<AMCP::Core::Broker::destroy_all_cores(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Core::Broker::destroy_all_cores(void)::$_0,std::allocator<AMCP::Core::Broker::destroy_all_cores(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6974E38;
  return result;
}

void std::__function::__func<AMCP::Core::Broker::destroy_all_cores(void)::$_0,std::allocator<AMCP::Core::Broker::destroy_all_cores(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6974E38;
}

uint64_t std::__function::__func<AMCP::Core::Broker::destroy_all_cores(void)::$_0,std::allocator<AMCP::Core::Broker::destroy_all_cores(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()()
{
  return 1;
}

uint64_t std::__function::__func<AMCP::Core::Broker::destroy_all_cores(void)::$_0,std::allocator<AMCP::Core::Broker::destroy_all_cores(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core6Broker17destroy_all_coresEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Core::Broker::destroy_all_cores(void)::$_0,std::allocator<AMCP::Core::Broker::destroy_all_cores(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

void AMCP::IO_Core::Reflector::~Reflector(AMCP::IO_Core::Reflector *this)
{
  char *v2;

  *(_QWORD *)this = &off_1E6974F38;
  v2 = (char *)this + 48;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  AMCP::IO_Core::Node::~Node(this);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E6974F38;
  v2 = (char *)this + 48;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  AMCP::IO_Core::Node::~Node(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t AMCP::IO_Core::Reflector::get_class_id(AMCP::IO_Core::Reflector *this)
{
  return 1919247982;
}

_QWORD *std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B59314E4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B5931658(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6975060;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6975060;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6975060;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6975060;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

AMCP::Log::Scope_Registry *std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::operator()@<X0>(AMCP::Log::Scope_Registry *result@<X0>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  unint64_t *v8;
  unint64_t v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  std::logic_error *exception;
  uint64_t v13;
  int v14;
  uint64_t v15;
  std::logic_error v16;
  __int128 v17;
  uint64_t v18;
  uint64_t (**v19)();
  __int128 v20;
  uint64_t v21;
  std::string v22;
  std::logic_error v23;
  std::logic_error v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint8_t buf[8];
  _BYTE v32[10];
  __int16 v33;
  int v34;
  _BYTE v35[24];
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (*a2)
  {
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = *(std::__shared_weak_count **)v32;
    v7 = **(NSObject ***)buf;
    if (*(_QWORD *)v32)
    {
      v8 = (unint64_t *)(*(_QWORD *)v32 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v11;
      *(_WORD *)v32 = 2080;
      *(_QWORD *)&v32[2] = "Reflector.cpp";
      v33 = 1024;
      v34 = 91;
      *(_WORD *)v35 = 2080;
      *(_QWORD *)&v35[2] = "not (index == 0)";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Reflector nodes only support one terminal in and one terminal out", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Reflector nodes only support one terminal in and one terminal out", (uint64_t)&v22);
    std::logic_error::logic_error(&v23, &v22);
    v13 = MEMORY[0x1E0DE5018];
    v23.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v24, &v23);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = -1;
    v24.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v25 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    *(_QWORD *)&v35[8] = "auto AMCP::IO_Core::Reflector::install_node_procs(const CA::StreamDescription &)::(anonymous cl"
                         "ass)::operator()(Direction, size_t) const";
    *(_QWORD *)&v35[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Reflector.cpp";
    v36 = 91;
    std::vector<void *>::vector(&v17);
    v14 = backtrace((void **)v17, (*((_QWORD *)&v17 + 1) - (_QWORD)v17) >> 3);
    std::vector<void *>::resize((char **)&v17, v14);
    v20 = v17;
    v21 = v18;
    v17 = 0uLL;
    v18 = 0;
    v19 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v19);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(exception, (const std::logic_error *)buf);
    exception->__vftable = (std::logic_error_vtbl *)(v13 + 16);
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v15 = *(_QWORD *)v35;
    exception[1].__imp_.__imp_ = *(const char **)v35;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
    v16 = *(std::logic_error *)&v35[8];
    LODWORD(exception[3].__vftable) = v36;
    exception[2] = v16;
    exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
  }
  v3 = *((_QWORD *)result + 2);
  *a3 = *((_QWORD *)result + 1);
  a3[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core9Reflector18install_node_procsERKN2CA17StreamDescriptionEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6974FE0;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6974FE0;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6974FE0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6974FE0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::operator()@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core9Reflector18install_node_procsERKN2CA17StreamDescriptionEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::target_type()
{
}

void std::__shared_ptr_emplace<AMCP::DAL::Multi_Reader_Synchronized_Mixer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6974F90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::DAL::Multi_Reader_Synchronized_Mixer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6974F90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::DAL::Multi_Reader_Synchronized_Mixer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<AMCP::DAL::Synchronizer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6983F18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::DAL::Synchronizer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6983F18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::DAL::Synchronizer>::__on_zero_shared(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 168);
  std::vector<std::function<void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 152);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 112);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 72);
  return std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::~__hash_table(a1 + 32);
}

void std::__function::__func<int (*)(unsigned long long),std::allocator<int (*)(unsigned long long)>,void ()(unsigned long long)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<int (*)(unsigned long long),std::allocator<int (*)(unsigned long long)>,void ()(unsigned long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69750F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<int (*)(unsigned long long),std::allocator<int (*)(unsigned long long)>,void ()(unsigned long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69750F8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<int (*)(unsigned long long),std::allocator<int (*)(unsigned long long)>,void ()(unsigned long long)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<int (*)(unsigned long long),std::allocator<int (*)(unsigned long long)>,void ()(unsigned long long)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x80000001B5D24F90))
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<int (*)(unsigned long long),std::allocator<int (*)(unsigned long long)>,void ()(unsigned long long)>::target_type()
{
}

uint64_t AMCP::Graph::Manifest_Queue::flush(AMCP::Graph::Manifest_Queue *this)
{
  AMCP::Graph::Manifest_Queue *v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  std::condition_variable *v30;
  std::mutex *v31;
  uint64_t v32;
  AMCP::Graph::Manifest_Queue *v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  int v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  char v49;
  __int16 v50;
  char v51;
  AMCP::Graph::Manifest *v52[2];
  uint64_t v53;
  __int128 __p;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  _BYTE v65[25];
  char v66;
  __int16 v67;
  char v68;
  uint64_t v69;

  v1 = this;
  v69 = *MEMORY[0x1E0C80C00];
  v30 = (std::condition_variable *)((char *)this + 264);
  std::condition_variable::notify_all((std::condition_variable *)((char *)this + 264));
  v2 = (_QWORD *)*((_QWORD *)v1 + 70);
  if (v2)
  {
    AMCP::Graph::Manifest::end_processing(v2, *(_DWORD *)v1, (float *)v1 + 78);
    AMCP::Graph::Manifest::teardown_processing(*((AMCP::Graph::Manifest **)v1 + 70));
    v3 = (std::__shared_weak_count *)*((_QWORD *)v1 + 71);
    *((_OWORD *)v1 + 35) = 0u;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  v6 = (uint64_t)v1 + 16;
  std::mutex::lock((std::mutex *)((char *)v1 + 112));
  *((_BYTE *)v1 + 176) = 1;
  v31 = (std::mutex *)((char *)v1 + 112);
  std::mutex::unlock((std::mutex *)((char *)v1 + 112));
  AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::dequeue_with_lock((uint64_t)v52, (uint64_t)v1 + 16);
  if (v68)
  {
    v32 = MEMORY[0x1E0DDB768] + 16;
    v33 = v1;
    while (1)
    {
      if (v52[0])
      {
        AMCP::Graph::Manifest::end_processing((_QWORD *)v52[0], *(_DWORD *)v1, (float *)&v58);
        AMCP::Graph::Manifest::teardown_processing(v52[0]);
      }
      AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::dequeue_with_lock((uint64_t)&v34, v6);
      if (v68 != v51)
        break;
      if (v68)
      {
        v8 = v34;
        v34 = 0uLL;
        v9 = (std::__shared_weak_count *)v52[1];
        *(_OWORD *)v52 = v8;
        if (v9)
        {
          v10 = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v53 = v35;
        if ((_QWORD)__p)
        {
          *((_QWORD *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        __p = v36;
        v55 = v37;
        v37 = 0;
        v36 = 0uLL;
        v56 = v38;
        v57 = v39;
        v58 = v40;
        v59 = v41;
        v12 = v42;
        v42 = 0uLL;
        v13 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
        v60 = v12;
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v61 = v43;
        v16 = v63;
        v63 = v44;
        v44 = v16;
        caulk::mach::details::release_os_object(0, v7);
        v17 = *(_QWORD *)&v65[16];
        v19 = v64;
        v18 = *(_OWORD *)v65;
        v64 = v45;
        *(_OWORD *)v65 = v46;
        *(_QWORD *)&v65[16] = v47;
        v45 = v19;
        v46 = v18;
        v47 = v17;
        LOBYTE(v17) = v65[24];
        v65[24] = v48;
        v48 = v17;
        LOBYTE(v17) = v66;
        v66 = v49;
        v49 = v17;
        v67 = v50;
LABEL_40:
        v1 = v33;
      }
LABEL_42:
      std::__optional_destruct_base<AMCP::Graph::Manifest_Queue::Incoming_Payload,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v34);
      if (!v68)
        goto LABEL_43;
    }
    if (!v68)
    {
      *(_OWORD *)v52 = v34;
      v34 = 0uLL;
      __p = v36;
      v53 = v35;
      v55 = v37;
      v37 = 0;
      v36 = 0uLL;
      v56 = v38;
      v57 = v39;
      v59 = v41;
      v58 = v40;
      v60 = v42;
      v42 = 0uLL;
      v61 = v43;
      v64 = 0u;
      memset(v65, 0, sizeof(v65));
      v66 = 0;
      v62 = v32;
      v63 = v44;
      v44 = 0;
      caulk::mach::details::release_os_object(0, v7);
      v26 = *(_QWORD *)&v65[16];
      v28 = v64;
      v27 = *(_OWORD *)v65;
      v64 = v45;
      *(_OWORD *)v65 = v46;
      *(_QWORD *)&v65[16] = v47;
      v45 = v28;
      v46 = v27;
      v47 = v26;
      LOBYTE(v26) = v65[24];
      v65[24] = v48;
      v48 = v26;
      LOBYTE(v26) = v66;
      v66 = v49;
      v49 = v26;
      v67 = v50;
      v68 = 1;
      goto LABEL_42;
    }
    caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)&v62);
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
    if (*((_QWORD *)&v60 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    v23 = (std::__shared_weak_count *)v52[1];
    if (v52[1])
    {
      v24 = (unint64_t *)((char *)v52[1] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v68 = 0;
    goto LABEL_40;
  }
LABEL_43:
  std::mutex::lock(v31);
  *((_BYTE *)v1 + 176) = 0;
  std::mutex::unlock(v31);
  std::condition_variable::notify_all(v30);
  return std::__optional_destruct_base<AMCP::Graph::Manifest_Queue::Incoming_Payload,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v52);
}

void sub_1B5932364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  std::__optional_destruct_base<AMCP::Graph::Manifest_Queue::Incoming_Payload,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<AMCP::Graph::Manifest_Execution_Context,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 120))
  {
    caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)(a1 + 48));
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 24);
  }
  return a1;
}

uint64_t caulk::concurrent::stack<AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::Message,caulk::concurrent::intrusive_single_link_member<AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::Message,&AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::Message::m_next_free_message>>::pop(unsigned __int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int128 v3;
  unint64_t v4;
  unsigned __int128 v5;
  int v6;

  do
  {
    v3 = __ldaxp(a1);
    v2 = *((_QWORD *)&v3 + 1);
    v1 = v3;
  }
  while (__stlxp(v3, a1));
  if ((_QWORD)v3)
  {
    do
    {
      v4 = atomic_load((unint64_t *)(v1 + 200));
      do
      {
        while (1)
        {
          v5 = __ldaxp(a1);
          v6 = (_QWORD)v5 != v1;
          if (*((_QWORD *)&v5 + 1) != v2)
            ++v6;
          if (!v6)
            break;
          if (!__stlxp(v5, a1))
            goto LABEL_10;
        }
      }
      while (__stlxp(__PAIR128__(v2 + 1, v4), a1));
LABEL_10:
      if ((_QWORD)v5 == v1 && *((_QWORD *)&v5 + 1) == v2)
        break;
      v2 = v5 >> 64;
      v1 = v5;
    }
    while ((_QWORD)v5);
  }
  return v1;
}

uint64_t AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::Message::~Message(_QWORD *a1)
{
  void *v2;

  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)(a1 + 16));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 13));
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1);
}

void AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::dequeue_with_lock(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)(a2 + 96);
  std::mutex::lock((std::mutex *)(a2 + 96));
  AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::dequeue(a1, (unint64_t *)a2);
  std::mutex::unlock(v4);
}

void sub_1B59324AC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<AMCP::Graph::Manifest_Queue::Incoming_Payload,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 200))
  {
    caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)(a1 + 128));
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 104);
    v2 = *(void **)(a1 + 24);
    if (v2)
    {
      *(_QWORD *)(a1 + 32) = v2;
      operator delete(v2);
    }
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1);
  }
  return a1;
}

__n128 caulk::mach::os_workgroup_interval_managed::swap(__n128 *this, __n128 *a2)
{
  unint64_t v4;
  __n128 result;
  __n128 v6;
  unint64_t v7;
  unint64_t v8;
  __n128 v9;

  v4 = this->n128_u64[1];
  this->n128_u64[1] = 0;
  this->n128_u64[1] = a2->n128_u64[1];
  a2->n128_u64[1] = v4;
  caulk::mach::details::release_os_object(0, a2);
  result = this[1];
  v6 = this[2];
  v7 = this[3].n128_u64[0];
  v8 = a2[3].n128_u64[0];
  v9 = a2[2];
  this[1] = a2[1];
  this[2] = v9;
  this[3].n128_u64[0] = v8;
  a2[3].n128_u64[0] = v7;
  a2[1] = result;
  a2[2] = v6;
  LOBYTE(v7) = this[3].n128_u8[8];
  this[3].n128_u8[8] = a2[3].n128_u8[8];
  a2[3].n128_u8[8] = v7;
  LOBYTE(v7) = this[3].n128_u8[9];
  this[3].n128_u8[9] = a2[3].n128_u8[9];
  a2[3].n128_u8[9] = v7;
  return result;
}

void AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::dequeue(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  void *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unsigned __int128 *v39;
  unsigned __int128 v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int128 v43;
  int v44;
  unsigned __int128 v46;
  int v47;
  BOOL v48;
  __int128 v49[3];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _OWORD v55[4];
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v4 = a2[8];
  if (!v4)
  {
    do
      v5 = __ldaxr(a2);
    while (__stxr(0, a2));
    if (!v5)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 200) = 0;
      return;
    }
    v4 = 0;
    do
    {
      v6 = v4;
      v4 = v5;
      v7 = (unint64_t *)(v5 + 200);
      v5 = atomic_load((unint64_t *)(v5 + 200));
      atomic_store(v6, v7);
    }
    while (v5);
    a2[8] = v4;
  }
  v8 = atomic_load((unint64_t *)(v4 + 200));
  a2[8] = v8;
  *(_QWORD *)a1 = *(_QWORD *)v4;
  v9 = *(_QWORD *)(v4 + 8);
  *(_QWORD *)(a1 + 8) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request>::__init_with_size[abi:ne180100]<AMCP::IO_Core::Play_State_Manager::Play_Request*,AMCP::IO_Core::Play_State_Manager::Play_Request*>((_QWORD *)(a1 + 24), *(const void **)(v4 + 24), *(_QWORD *)(v4 + 32), (uint64_t)(*(_QWORD *)(v4 + 32) - *(_QWORD *)(v4 + 24)) >> 2);
  v14 = *(_OWORD *)(v4 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(v4 + 48);
  *(_OWORD *)(a1 + 64) = v14;
  v15 = *(_OWORD *)(v4 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(v4 + 96);
  *(_OWORD *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(v4 + 104);
  v16 = *(_QWORD *)(v4 + 112);
  *(_QWORD *)(a1 + 112) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(v4 + 120);
  *(_QWORD *)(a1 + 136) = caulk::mach::details::retain_os_object(*(caulk::mach::details **)(v4 + 136), v13);
  v19 = (__int128 *)(v4 + 144);
  v20 = *(_OWORD *)(v4 + 169);
  v21 = *(_OWORD *)(v4 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(v4 + 144);
  *(_OWORD *)(a1 + 160) = v21;
  *(_OWORD *)(a1 + 169) = v20;
  v22 = MEMORY[0x1E0DDB768] + 16;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DDB768] + 16;
  *(_BYTE *)(a1 + 185) = *(_BYTE *)(v4 + 185);
  *(_WORD *)(a1 + 192) = *(_WORD *)(v4 + 192);
  *(_BYTE *)(a1 + 200) = 1;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v50 = 0u;
  memset(v49, 0, sizeof(v49));
  DWORD2(v54) = 1065353216;
  v56 = 0;
  memset((char *)v55 + 8, 0, 56);
  *(_QWORD *)&v55[0] = v22;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v4, v49);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)&v49[1];
  v23 = *(void **)(v4 + 24);
  if (v23)
  {
    *(_QWORD *)(v4 + 32) = v23;
    operator delete(v23);
  }
  *(_OWORD *)(v4 + 24) = *(__int128 *)((char *)&v49[1] + 8);
  *(_QWORD *)(v4 + 40) = *((_QWORD *)&v49[2] + 1);
  memset((char *)&v49[1] + 8, 0, 24);
  v24 = v51;
  *(_OWORD *)(v4 + 48) = v50;
  *(_OWORD *)(v4 + 64) = v24;
  v25 = v53;
  *(_OWORD *)(v4 + 80) = v52;
  *(_QWORD *)(v4 + 96) = v25;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v4 + 104, (__int128 *)((char *)&v53 + 8));
  *(_DWORD *)(v4 + 120) = DWORD2(v54);
  v26 = *(_QWORD *)(v4 + 136);
  *(_QWORD *)(v4 + 136) = *((_QWORD *)&v55[0] + 1);
  *((_QWORD *)&v55[0] + 1) = v26;
  caulk::mach::details::release_os_object(0, v27);
  v28 = *v19;
  v29 = *(_OWORD *)(v4 + 160);
  v30 = *(_QWORD *)(v4 + 176);
  v31 = *(_QWORD *)&v55[3];
  v32 = v55[2];
  *v19 = v55[1];
  *(_OWORD *)(v4 + 160) = v32;
  *(_QWORD *)(v4 + 176) = v31;
  *(_QWORD *)&v55[3] = v30;
  v55[1] = v28;
  v55[2] = v29;
  LOBYTE(v30) = *(_BYTE *)(v4 + 184);
  *(_BYTE *)(v4 + 184) = BYTE8(v55[3]);
  BYTE8(v55[3]) = v30;
  LOBYTE(v30) = *(_BYTE *)(v4 + 185);
  *(_BYTE *)(v4 + 185) = BYTE9(v55[3]);
  BYTE9(v55[3]) = v30;
  *(_WORD *)(v4 + 192) = v56;
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v55);
  v33 = (std::__shared_weak_count *)v54;
  if ((_QWORD)v54)
  {
    v34 = (unint64_t *)(v54 + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (*((_QWORD *)&v49[1] + 1))
  {
    *(_QWORD *)&v49[2] = *((_QWORD *)&v49[1] + 1);
    operator delete(*((void **)&v49[1] + 1));
  }
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v49[0] + 1);
  if (*((_QWORD *)&v49[0] + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v49[0] + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = (unsigned __int128 *)(a2 + 10);
  do
    v40 = __ldaxp(v39);
  while (__stlxp(v40, v39));
  atomic_store(v40, (unint64_t *)(v4 + 200));
  do
  {
    while (1)
    {
      v43 = __ldaxp(v39);
      v42 = *((_QWORD *)&v43 + 1);
      v41 = v43;
      v44 = (_QWORD)v43 != (_QWORD)v40;
      if (*((_QWORD *)&v43 + 1) != *((_QWORD *)&v40 + 1))
        ++v44;
      if (!v44)
        break;
      if (!__stlxp(v43, v39))
        goto LABEL_36;
    }
  }
  while (__stlxp(__PAIR128__(*((_QWORD *)&v40 + 1) + 1, v4), v39));
LABEL_36:
  if ((_QWORD)v43 != (_QWORD)v40 || *((_QWORD *)&v43 + 1) != *((_QWORD *)&v40 + 1))
  {
    do
    {
      atomic_store(v41, (unint64_t *)(v4 + 200));
      do
      {
        while (1)
        {
          v46 = __ldaxp(v39);
          v47 = (_QWORD)v46 != v41;
          if (*((_QWORD *)&v46 + 1) != v42)
            ++v47;
          if (!v47)
            break;
          if (!__stlxp(v46, v39))
            goto LABEL_47;
        }
      }
      while (__stlxp(__PAIR128__(v42 + 1, v4), v39));
LABEL_47:
      v48 = (_QWORD)v46 == v41 && *((_QWORD *)&v46 + 1) == v42;
      v42 = v46 >> 64;
      v41 = v46;
    }
    while (!v48);
  }
}

void sub_1B59329AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *AMCP::Graph::Manifest_Queue::maybe_acquire_new_manifest(AMCP::Graph::Manifest_Queue *this)
{
  AMCP::Graph::Manifest_Queue *v1;
  std::string *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  caulk::mach::details *v9;
  unsigned __int8 *v10;
  __int128 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void (**v16)();
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t (**v20)();
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  _BOOL4 v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  double updated;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __n128 v54;
  unint64_t *v55;
  unint64_t v56;
  void *v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  const char *v74;
  AMCP::Log::Scope_Registry *v75;
  AMCP::Log::Scope_Registry *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  void (**v81)();
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  __int128 v85;
  __int128 v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  AMCP::Log::Scope_Registry *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  AMCP::Graph::Manifest_Inventory *v102;
  _QWORD **v103;
  _QWORD **v104;
  AMCP::Graph::Manifest_Queue *v105;
  _QWORD *v106;
  _QWORD **v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD **v110;
  _QWORD **v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD **v114;
  _QWORD **v115;
  _QWORD **v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t i;
  uint64_t j;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  caulk::concurrent::messenger *v148;
  int v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  caulk::mach::details *v153;
  void *v154;
  uint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  caulk::mach::details *v158;
  unint64_t *v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  void *v166;
  unint64_t *v167;
  unint64_t v168;
  __int128 v169;
  unint64_t *v170;
  unint64_t v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  NSObject *v196;
  _opaque_pthread_t *v197;
  mach_port_t v198;
  void *exception;
  NSObject *v200;
  _opaque_pthread_t *v201;
  mach_port_t v202;
  void *v203;
  char *v204;
  char *v205;
  _OWORD *v206;
  std::mutex *v207;
  uint64_t v208;
  uint64_t v209;
  __int128 *v210;
  std::condition_variable *v211;
  unint64_t *v212;
  AMCP::DAL::DAL_Time_Delta *v213;
  unsigned int v214;
  std::string __str;
  std::logic_error v216;
  char v217;
  __int128 v218;
  uint64_t v219;
  uint64_t (**v220)();
  __int128 v221;
  uint64_t v222;
  std::string v223;
  std::logic_error v224;
  uint64_t v225;
  __int128 v226;
  int v227;
  uint64_t v228;
  caulk::mach::details *v229;
  __int128 v230;
  _BYTE v231[25];
  char v232;
  __int16 v233;
  void (**v234)();
  std::logic_error v235;
  uint64_t v236;
  __int128 v237;
  int v238;
  uint64_t v239;
  caulk::mach::details *v240;
  __int128 v241;
  _BYTE v242[25];
  char v243;
  __int16 v244;
  __int128 v245;
  std::logic_error v246;
  uint64_t v247;
  __int128 v248;
  int v249;
  uint64_t v250;
  caulk::mach::details *v251;
  __int128 v252;
  _BYTE v253[25];
  char v254;
  __int16 v255;
  __int128 v256;
  _DWORD v257[8];
  int v258;
  unint64_t v259;
  uint64_t v260;
  __int128 v261;
  uint64_t v262;
  uint64_t (**v263)();
  std::__shared_weak_count *v264;
  float v265;
  caulk::mach::details *v266;
  __int128 v267;
  _BYTE v268[25];
  unsigned __int8 v269;
  __int16 v270;
  char v271;
  _BYTE v272[48];
  __int128 v273;
  _BYTE v274[50];
  __int16 v275;
  __int128 v276;
  uint64_t v277;

  v1 = this;
  v2 = 0;
  v212 = (unint64_t *)((char *)this + 16);
  v277 = *MEMORY[0x1E0C80C00];
  v213 = (AMCP::Graph::Manifest_Queue *)((char *)this + 312);
  v204 = (char *)this + 432;
  v3 = (_QWORD *)((char *)this + 560);
  v207 = (std::mutex *)((char *)this + 200);
  v210 = (__int128 *)((char *)this + 376);
  v211 = (std::condition_variable *)((char *)this + 264);
  v205 = (char *)this + 704;
  v206 = (_OWORD *)((char *)this + 640);
  v209 = MEMORY[0x1E0DDB760] + 16;
  v208 = MEMORY[0x1E0DDB768] + 16;
  while (1)
  {
    AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::dequeue((uint64_t)&v256, v212);
    if (!v271)
      break;
    v246 = *(std::logic_error *)v213;
    v6 = *((_QWORD *)v1 + 42);
    v5 = *((_QWORD *)v1 + 43);
    v247 = *((_QWORD *)v213 + 2);
    *(_QWORD *)&v248 = v6;
    *((_QWORD *)&v248 + 1) = v5;
    if (v5)
    {
      v7 = (unint64_t *)(v5 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v249 = *((_DWORD *)v1 + 88);
    v250 = v209;
    v9 = (caulk::mach::details *)caulk::mach::details::retain_os_object(*((caulk::mach::details **)v1 + 46), v4);
    v11 = v210[1];
    v252 = *v210;
    *(_OWORD *)v253 = v11;
    *(_OWORD *)&v253[9] = *(__int128 *)((char *)v210 + 25);
    v251 = v9;
    v250 = v208;
    v254 = *((_BYTE *)v1 + 417);
    v255 = *((_WORD *)v1 + 212);
    v12 = *((_QWORD *)v1 + 42);
    v13 = (std::__shared_weak_count *)*((_QWORD *)v1 + 43);
    *(_QWORD *)v272 = v12;
    *(_QWORD *)&v272[8] = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    if (!v12)
    {
      v30 = 1;
      if (!v13)
        goto LABEL_58;
      goto LABEL_55;
    }
    v16 = (void (**)())*((_QWORD *)v1 + 42);
    v17 = *((_QWORD *)v1 + 43);
    v234 = v16;
    v235.__vftable = (std::logic_error_vtbl *)v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v20 = v263;
    v21 = v264;
    v220 = v263;
    *(_QWORD *)&v221 = v264;
    if (v264)
    {
      v22 = (unint64_t *)&v264->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (v16 && v20)
    {
      v24 = (unsigned __int8 *)(*((uint64_t (**)(void (**)()))*v16 + 2))(v16);
      v25 = (*((uint64_t (**)(uint64_t (**)()))*v20 + 2))(v20);
      v26 = v24[23];
      if ((v26 & 0x80u) == 0)
        v27 = v24[23];
      else
        v27 = *((_QWORD *)v24 + 1);
      v28 = *(unsigned __int8 *)(v25 + 23);
      v29 = (char)v28;
      if ((v28 & 0x80u) != 0)
        v28 = *(_QWORD *)(v25 + 8);
      if (v27 == v28)
      {
        if (v29 >= 0)
          v10 = (unsigned __int8 *)v25;
        else
          v10 = *(unsigned __int8 **)v25;
        if ((v26 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v24, v10, *((_QWORD *)v24 + 1)))
          {
LABEL_35:
            v31 = *((float *)v1 + 88) == v265
               && *((caulk::mach::details **)v1 + 46) == v266
               && *((unsigned __int8 *)v1 + 416) == v268[24]
               && *((unsigned __int8 *)v1 + 417) == v269
               && AMCP::DAL::DAL_Time_Delta::operator==(v213, (uint64_t)&v261);
            v30 = !v31;
            if (!v21)
              goto LABEL_49;
            goto LABEL_45;
          }
        }
        else
        {
          if (!v24[23])
            goto LABEL_35;
          while (*v24 == *v10)
          {
            ++v24;
            ++v10;
            if (!--v26)
              goto LABEL_35;
          }
        }
      }
    }
    else if (!((unint64_t)v16 | (unint64_t)v20))
    {
      goto LABEL_35;
    }
    v30 = 1;
    if (!v21)
      goto LABEL_49;
LABEL_45:
    v32 = (unint64_t *)&v21->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
LABEL_49:
    v34 = (std::__shared_weak_count *)v235.__vftable;
    if (v235.__vftable)
    {
      v35 = (unint64_t *)&v235.~logic_error_0;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v13 = *(std::__shared_weak_count **)&v272[8];
    if (!*(_QWORD *)&v272[8])
    {
LABEL_58:
      if (!v30)
        goto LABEL_89;
      goto LABEL_59;
    }
LABEL_55:
    v37 = (unint64_t *)&v13->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (v38)
      goto LABEL_58;
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (!v30)
      goto LABEL_89;
LABEL_59:
    v39 = *((_QWORD *)v1 + 42);
    v40 = (std::__shared_weak_count *)*((_QWORD *)v1 + 43);
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
      if (v39)
      {
        v43 = v256;
        do
          v44 = __ldaxr(v41);
        while (__stlxr(v44 - 1, v41));
        if (v44)
        {
          if (!v43)
            goto LABEL_75;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
          if (!v43)
            goto LABEL_75;
        }
      }
      else
      {
        do
          v45 = __ldaxr(v41);
        while (__stlxr(v45 - 1, v41));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
    }
    else if (v39 && !(_QWORD)v256)
    {
LABEL_75:
      *(_OWORD *)v272 = v261;
      *(_QWORD *)&v272[16] = v262;
      *(_QWORD *)&v272[24] = v263;
      *(_QWORD *)&v272[32] = v264;
      if (v264)
      {
        v46 = (unint64_t *)&v264->__shared_owners_;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
      }
      *(float *)&v272[40] = v265;
      *(_QWORD *)&v273 = MEMORY[0x1E0DDB760] + 16;
      v48 = caulk::mach::details::retain_os_object(v266, v10);
      *(_OWORD *)v274 = v267;
      *(_OWORD *)&v274[16] = *(_OWORD *)v268;
      *(_OWORD *)&v274[25] = *(_OWORD *)&v268[9];
      *((_QWORD *)&v273 + 1) = v48;
      *(_QWORD *)&v273 = MEMORY[0x1E0DDB768] + 16;
      v274[41] = v269;
      *(_WORD *)&v274[48] = v270;
      LOBYTE(v275) = 1;
      std::__optional_storage_base<AMCP::Graph::Manifest_Execution_Context,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<AMCP::Graph::Manifest_Execution_Context,false>>((uint64_t)v204, (__int128 *)v272);
      std::__optional_destruct_base<AMCP::Graph::Manifest_Execution_Context,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v272);
      goto LABEL_89;
    }
    updated = AMCP::Graph::Manifest_Queue::update_execution_context((uint64_t)v1, (uint64_t)&v261);
    if (round(updated) != 0.0)
    {
      v50 = *(_QWORD *)(*v3 + 72);
      v51 = *(std::__shared_weak_count **)(*v3 + 80);
      *(_QWORD *)v272 = v50;
      *(_QWORD *)&v272[8] = v51;
      if (v51)
      {
        v52 = (unint64_t *)&v51->__shared_owners_;
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
      }
      v54.n128_f64[0] = AMCP::Graph::Manifest_Counter::adjust_cycle_anchor_for_buffer_size_change(*(double **)(v50 + 64), 0.0 - updated);
      if (v51)
      {
        v55 = (unint64_t *)&v51->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v51->__on_zero_shared)(v51, v54);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
    }
LABEL_89:
    v57 = (void *)v256;
    if (!(_QWORD)v256)
      goto LABEL_254;
    if (!*v3)
    {
      std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](v3, v256, *((uint64_t *)&v256 + 1));
      AMCP::Graph::Manifest::get_iocontext_uid((AMCP::Graph::Manifest *)&__str, (_QWORD *)*v3);
      std::string::basic_string((std::string *)v272, &__str, 0, 0x3FuLL, (std::allocator<char> *)&v234);
      if (v272[23] >= 0)
        v74 = v272;
      else
        v74 = *(const char **)v272;
      v75 = (AMCP::Log::Scope_Registry *)pthread_setname_np(v74);
      v76 = v75;
      if ((v272[23] & 0x80000000) != 0)
        operator delete(*(void **)v272);
      if ((_DWORD)v76)
      {
        AMCP::Log::Scope_Registry::get(v75);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v272, "com.apple.coreaudio", "AMCP");
        v196 = **(NSObject ***)v272;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v272);
        if (os_log_type_enabled(v196, OS_LOG_TYPE_ERROR))
        {
          v197 = pthread_self();
          v198 = pthread_mach_thread_np(v197);
          *(_DWORD *)v272 = 67110146;
          *(_DWORD *)&v272[4] = v198;
          *(_WORD *)&v272[8] = 2080;
          *(_QWORD *)&v272[10] = "Manifest_Queue.cpp";
          *(_WORD *)&v272[18] = 1024;
          *(_DWORD *)&v272[20] = 261;
          *(_WORD *)&v272[24] = 2080;
          *(_QWORD *)&v272[26] = "not (error == 0)";
          *(_WORD *)&v272[34] = 1024;
          *(_DWORD *)&v272[36] = (_DWORD)v76;
          _os_log_error_impl(&dword_1B57BA000, v196, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s pthread_setname_np failed: %d", v272, 0x28u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v217);
        exception = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"pthread_setname_np failed: %d", (uint64_t)&v223, v76);
        std::logic_error::logic_error(&v216, &v223);
        v216.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error((std::logic_error *)&v234, &v216);
        v237 = 0uLL;
        v236 = 0;
        v238 = -1;
        v234 = off_1E69A1208;
        v235.__imp_.__imp_ = (const char *)&unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v272, (uint64_t)&v234);
        *(_QWORD *)&v272[32] = "void AMCP::Graph::set_thread_name_from_manifest_name(const std::string &)";
        *(_QWORD *)&v272[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Queue.cpp";
        LODWORD(v273) = 261;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v218);
        v221 = v218;
        v222 = v219;
        v218 = 0uLL;
        v219 = 0;
        v220 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v272, (uint64_t)&v220);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)v272);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v2 = AMCP::Graph::Manifest::setup_processing((AMCP::Log::Scope_Registry *)*v3, v213, (uint64_t)v257, (uint64_t)v205);
      if (!(_DWORD)v2)
      {
LABEL_114:
        v77 = *(_QWORD *)(*v3 + 72);
        v78 = *(_QWORD *)(*v3 + 80);
        v220 = (uint64_t (**)())v77;
        *(_QWORD *)&v221 = v78;
        if (v78)
        {
          v79 = (unint64_t *)(v78 + 8);
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
        v81 = *(void (***)())(v77 + 96);
        v82 = *(std::__shared_weak_count **)(v77 + 104);
        v234 = v81;
        v235.__vftable = (std::logic_error_vtbl *)v82;
        if (v82)
        {
          v83 = (unint64_t *)&v82->__shared_owners_;
          do
            v84 = __ldxr(v83);
          while (__stxr(v84 + 1, v83));
        }
        (*((void (**)(_BYTE *__return_ptr))*v81 + 4))(v272);
        v85 = *(_OWORD *)&v272[16];
        *v206 = *(_OWORD *)v272;
        v206[1] = v85;
        v86 = v273;
        v206[2] = *(_OWORD *)&v272[32];
        v206[3] = v86;
        if (v82)
        {
          v87 = (unint64_t *)&v82->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        v89 = (std::__shared_weak_count *)v221;
        if ((_QWORD)v221)
        {
          v90 = (unint64_t *)(v221 + 8);
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        v92 = *((_QWORD *)v1 + 79);
        if (v92)
          (*(void (**)(uint64_t))(*(_QWORD *)v92 + 48))(v92);
        v93 = *((_QWORD *)v1 + 70);
        v214 = *(_DWORD *)v1;
        AMCP::Graph::Manifest::maybe_write_dot_file((AMCP::Log::Scope_Registry ***)v93);
        v95 = *(_QWORD *)(v93 + 96);
        if (v95)
        {
          AMCP::Graph::Manifest::get_iocontext_uid((AMCP::Graph::Manifest *)v272, (_QWORD *)v93);
          v101 = v272;
          if (v272[23] < 0)
            LOBYTE(v101) = v272[0];
          AMCP::Graph::Manifest_Log::add_message(v95, 0, "Manifest: %s Begin Processing  %p", v96, v97, v98, v99, v100, (char)v101);
          if ((v272[23] & 0x80000000) != 0)
            operator delete(*(void **)v272);
        }
        if (*(_DWORD *)v93 != 1)
        {
          AMCP::Log::Scope_Registry::get(v94);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v272, "com.apple.coreaudio", "AMCP");
          v200 = **(NSObject ***)v272;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v272);
          if (os_log_type_enabled(v200, OS_LOG_TYPE_ERROR))
          {
            v201 = pthread_self();
            v202 = pthread_mach_thread_np(v201);
            *(_DWORD *)v272 = 67109890;
            *(_DWORD *)&v272[4] = v202;
            *(_WORD *)&v272[8] = 2080;
            *(_QWORD *)&v272[10] = "Manifest.cpp";
            *(_WORD *)&v272[18] = 1024;
            *(_DWORD *)&v272[20] = 555;
            *(_WORD *)&v272[24] = 2080;
            *(_QWORD *)&v272[26] = "not (m_processing_state == Processing_State::Configured)";
            _os_log_error_impl(&dword_1B57BA000, v200, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", v272, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v216);
          v203 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v223);
          std::logic_error::logic_error((std::logic_error *)&__str, &v223);
          __str.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
          std::logic_error::logic_error((std::logic_error *)&v234, (const std::logic_error *)&__str);
          v237 = 0uLL;
          v236 = 0;
          v238 = -1;
          v234 = off_1E69A1208;
          v235.__imp_.__imp_ = (const char *)&unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v272, (uint64_t)&v234);
          *(_QWORD *)&v272[32] = "void AMCP::Graph::Manifest::begin_processing(Object_ID, const Manifest_Execution_Contex"
                                 "t &, const Manifest_Start_State &)";
          *(_QWORD *)&v272[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest.cpp";
          LODWORD(v273) = 555;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v218);
          v221 = v218;
          v222 = v219;
          v218 = 0uLL;
          v219 = 0;
          v220 = off_1E69A20A0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v272, (uint64_t)&v220);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v203, (uint64_t)v272);
        }
        v102 = *(AMCP::Graph::Manifest_Inventory **)(*(_QWORD *)(v93 + 72) + 24);
        if (v257[1] == 2)
        {
          AMCP::Graph::Manifest_Inventory::begin_processing(v102, v214);
          AMCP::Graph::Manifest::calculate_anchor_time((uint64_t)v272, v93, (float *)v213, v258, v259, v260);
          AMCP::Graph::Manifest_Inventory::anchor_time(*(AMCP::Log::Scope_Registry **)(v93 + 72), v214, (float *)v213, (AMCP::DAL::DAL_Time *)v272);
          AMCP::Graph::Manifest::calculate_all_required_input_samples(v93, (uint64_t)v213);
          v103 = *(_QWORD ***)(v93 + 8);
          v104 = *(_QWORD ***)(v93 + 16);
          while (v103 != v104)
          {
            v105 = v1;
            v106 = v3;
            v107 = (_QWORD **)*v103;
            v108 = (_QWORD *)**v103;
            v109 = (_QWORD *)(*v103)[1];
            while (v108 != v109)
            {
              v111 = (_QWORD **)*v108;
              v110 = (_QWORD **)v108[1];
              while (v111 != v110)
              {
                AMCP::Graph::Manifest_Inventory::cross_check_buffer(*(AMCP::Log::Scope_Registry **)(v93 + 72), *v111);
                v111 += 2;
              }
              v108 += 5;
            }
            v113 = v107[3];
            v112 = v107[4];
            while (v113 != v112)
            {
              v115 = (_QWORD **)*v113;
              v114 = (_QWORD **)v113[1];
              while (v115 != v114)
              {
                AMCP::Graph::Manifest_Inventory::cross_check_buffer(*(AMCP::Log::Scope_Registry **)(v93 + 72), *v115);
                v115 += 2;
              }
              v113 += 5;
            }
            v116 = (_QWORD **)*v103;
            *((_DWORD *)v116 + 22) = 3;
            v117 = v116[6][23];
            v3 = v106;
            v1 = v105;
            if (v117)
            {
              LODWORD(v234) = v214;
              (*(void (**)(uint64_t, void (***)()))(*(_QWORD *)v117 + 48))(v117, &v234);
            }
            v103 += 2;
          }
          *(_DWORD *)v93 = 3;
          v123 = *(std::__shared_weak_count **)&v272[32];
          if (*(_QWORD *)&v272[32])
          {
            v126 = (unint64_t *)(*(_QWORD *)&v272[32] + 8);
            do
              v125 = __ldaxr(v126);
            while (__stlxr(v125 - 1, v126));
LABEL_171:
            if (!v125)
            {
              ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
              std::__shared_weak_count::__release_weak(v123);
            }
          }
        }
        else
        {
          AMCP::Graph::Manifest_Inventory::begin_processing(v102, v214);
          AMCP::Graph::Manifest::calculate_anchor_time((uint64_t)v272, v93, (float *)v213, v258, v259, v260);
          v118 = *(_QWORD *)(v93 + 72);
          if (*(_QWORD *)(v118 + 32))
          {
            std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::__deallocate_node(*(_QWORD **)(v118 + 24));
            *(_QWORD *)(v118 + 24) = 0;
            v119 = *(_QWORD *)(v118 + 16);
            if (v119)
            {
              for (i = 0; i != v119; ++i)
                *(_QWORD *)(*(_QWORD *)(v118 + 8) + 8 * i) = 0;
            }
            *(_QWORD *)(v118 + 32) = 0;
          }
          v122 = *(_QWORD *)(v118 + 112);
          for (j = *(_QWORD *)(v118 + 120);
                j != v122;
          *(_QWORD *)(v118 + 120) = v122;
          AMCP::Graph::Manifest_Inventory::anchor_time(*(AMCP::Log::Scope_Registry **)(v93 + 72), v214, (float *)v213, (AMCP::DAL::DAL_Time *)v272);
          *(_DWORD *)v93 = 2;
          v123 = *(std::__shared_weak_count **)&v272[32];
          if (*(_QWORD *)&v272[32])
          {
            v124 = (unint64_t *)(*(_QWORD *)&v272[32] + 8);
            do
              v125 = __ldaxr(v124);
            while (__stlxr(v125 - 1, v124));
            goto LABEL_171;
          }
        }
        if ((_QWORD)v256 && *(_DWORD *)*v3 == 2 && *(_DWORD *)v256 == 3)
          AMCP::Graph::finish_manifest((AMCP::Graph::Manifest **)&v256, *(_DWORD *)v1, (float *)&v246);
        std::mutex::lock(v207);
        std::condition_variable::notify_all(v211);
        v127 = (std::__shared_weak_count *)*((_QWORD *)&v256 + 1);
        v256 = 0uLL;
        if (v127)
        {
          v128 = (unint64_t *)&v127->__shared_owners_;
          do
            v129 = __ldaxr(v128);
          while (__stlxr(v129 - 1, v128));
          if (!v129)
          {
            ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
            std::__shared_weak_count::__release_weak(v127);
          }
        }
        std::mutex::unlock(v207);
        v2 = 0;
        goto LABEL_254;
      }
      goto LABEL_253;
    }
    v59 = *(_QWORD *)(v256 + 96);
    v58 = *(std::__shared_weak_count **)(v256 + 104);
    if (!v58)
      goto LABEL_96;
    v60 = (unint64_t *)&v58->__shared_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
    do
      v62 = __ldaxr(v60);
    while (__stlxr(v62 - 1, v60));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
      if (!v59)
        goto LABEL_190;
    }
    else
    {
LABEL_96:
      if (!v59)
        goto LABEL_190;
    }
    v63 = (_QWORD *)v256;
    v65 = *(_QWORD *)(v256 + 96);
    v64 = *(std::__shared_weak_count **)(v256 + 104);
    v234 = (void (**)())v65;
    v235.__vftable = (std::logic_error_vtbl *)v64;
    if (v64)
    {
      v66 = (unint64_t *)&v64->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }
    AMCP::Graph::Manifest::get_iocontext_uid((AMCP::Graph::Manifest *)v272, v63);
    v73 = v272;
    if (v272[23] < 0)
      LOBYTE(v73) = v272[0];
    AMCP::Graph::Manifest_Log::add_message(v65, 5, "Manifest: %s from %p to %p", v68, v69, v70, v71, v72, (char)v73);
    if ((v272[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v272);
      if (!v64)
        goto LABEL_190;
    }
    else if (!v64)
    {
      goto LABEL_190;
    }
    v130 = (unint64_t *)&v64->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
LABEL_190:
    v132 = v256;
    v133 = *(_OWORD *)v3;
    *(_OWORD *)v3 = v256;
    v256 = v133;
    v134 = *(_QWORD *)(v132 + 72);
    v135 = *(std::__shared_weak_count **)(v132 + 80);
    if (v135)
    {
      v136 = (unint64_t *)&v135->__shared_owners_;
      do
        v137 = __ldxr(v136);
      while (__stxr(v137 + 1, v136));
    }
    v138 = *(_QWORD *)(v134 + 64);
    v139 = *(_QWORD *)(v133 + 72);
    v140 = *(std::__shared_weak_count **)(v133 + 80);
    if (v140)
    {
      v141 = (unint64_t *)&v140->__shared_owners_;
      do
        v142 = __ldxr(v141);
      while (__stxr(v142 + 1, v141));
    }
    v143 = *(_QWORD *)(v139 + 64);
    *(_QWORD *)(v138 + 8) = *(_QWORD *)(v143 + 8);
    *(_QWORD *)(v138 + 16) = *(_QWORD *)(v143 + 16);
    *(_DWORD *)(v138 + 40) = *(_DWORD *)(v143 + 40);
    *(_BYTE *)v138 = *(_BYTE *)v143;
    if (!v140)
      goto LABEL_200;
    v144 = (unint64_t *)&v140->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
      if (!v135)
        goto LABEL_206;
    }
    else
    {
LABEL_200:
      if (!v135)
        goto LABEL_206;
    }
    v146 = (unint64_t *)&v135->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
LABEL_206:
    v148 = (caulk::concurrent::messenger *)*((_QWORD *)v1 + 24);
    v149 = *(_DWORD *)v1;
    v224 = v246;
    v225 = v247;
    v226 = v248;
    if (*((_QWORD *)&v248 + 1))
    {
      v150 = (unint64_t *)(*((_QWORD *)&v248 + 1) + 8);
      do
        v151 = __ldxr(v150);
      while (__stxr(v151 + 1, v150));
    }
    v227 = v249;
    v152 = MEMORY[0x1E0DDB760] + 16;
    v228 = MEMORY[0x1E0DDB760] + 16;
    v153 = (caulk::mach::details *)caulk::mach::details::retain_os_object(v251, v57);
    v230 = v252;
    *(_OWORD *)v231 = *(_OWORD *)v253;
    *(_OWORD *)&v231[9] = *(_OWORD *)&v253[9];
    v155 = MEMORY[0x1E0DDB768] + 16;
    v228 = MEMORY[0x1E0DDB768] + 16;
    v229 = v153;
    v232 = v254;
    v233 = v255;
    LODWORD(v234) = v149;
    v235 = v224;
    v236 = v225;
    v237 = v226;
    if (*((_QWORD *)&v226 + 1))
    {
      v156 = (unint64_t *)(*((_QWORD *)&v226 + 1) + 8);
      do
        v157 = __ldxr(v156);
      while (__stxr(v157 + 1, v156));
      v153 = v229;
    }
    v238 = v227;
    v239 = v152;
    v158 = (caulk::mach::details *)caulk::mach::details::retain_os_object(v153, v154);
    v241 = v230;
    *(_OWORD *)v242 = *(_OWORD *)v231;
    *(_OWORD *)&v242[9] = *(_OWORD *)&v231[9];
    v240 = v158;
    v239 = v155;
    v243 = v232;
    v244 = v233;
    v245 = v256;
    if (*((_QWORD *)&v256 + 1))
    {
      v159 = (unint64_t *)(*((_QWORD *)&v256 + 1) + 8);
      do
        v160 = __ldxr(v159);
      while (__stxr(v160 + 1, v159));
    }
    v162 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 184, 8);
    *(_DWORD *)(v162 + 16) = 0;
    *(_QWORD *)v162 = &off_1E6975270;
    *(_QWORD *)(v162 + 8) = 0;
    *(_QWORD *)(v162 + 24) = v207;
    *(_QWORD *)(v162 + 32) = v211;
    *(_DWORD *)v272 = (_DWORD)v234;
    *(std::logic_error *)&v272[8] = v235;
    *(_QWORD *)&v272[24] = v236;
    *(_OWORD *)&v272[32] = v237;
    if (*((_QWORD *)&v237 + 1))
    {
      v163 = (unint64_t *)(*((_QWORD *)&v237 + 1) + 8);
      do
        v164 = __ldxr(v163);
      while (__stxr(v164 + 1, v163));
    }
    LODWORD(v273) = v238;
    *((_QWORD *)&v273 + 1) = MEMORY[0x1E0DDB760] + 16;
    v165 = caulk::mach::details::retain_os_object(v240, v161);
    *(_OWORD *)&v274[8] = v241;
    *(_OWORD *)&v274[24] = *(_OWORD *)v242;
    *(_OWORD *)&v274[33] = *(_OWORD *)&v242[9];
    *(_QWORD *)v274 = v165;
    *((_QWORD *)&v273 + 1) = MEMORY[0x1E0DDB768] + 16;
    v274[49] = v243;
    v275 = v244;
    v276 = v245;
    if (*((_QWORD *)&v245 + 1))
    {
      v167 = (unint64_t *)(*((_QWORD *)&v245 + 1) + 8);
      do
        v168 = __ldxr(v167);
      while (__stxr(v168 + 1, v167));
    }
    *(_DWORD *)(v162 + 40) = *(_DWORD *)v272;
    *(_OWORD *)(v162 + 48) = *(_OWORD *)&v272[8];
    v169 = *(_OWORD *)&v272[32];
    *(_QWORD *)(v162 + 64) = *(_QWORD *)&v272[24];
    *(_OWORD *)(v162 + 72) = v169;
    if (*((_QWORD *)&v169 + 1))
    {
      v170 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
      do
        v171 = __ldxr(v170);
      while (__stxr(v171 + 1, v170));
    }
    *(_DWORD *)(v162 + 88) = v273;
    *(_QWORD *)(v162 + 96) = MEMORY[0x1E0DDB760] + 16;
    *(_QWORD *)(v162 + 104) = caulk::mach::details::retain_os_object(*(caulk::mach::details **)v274, v166);
    v172 = *(_OWORD *)&v274[33];
    v173 = *(_OWORD *)&v274[24];
    *(_OWORD *)(v162 + 112) = *(_OWORD *)&v274[8];
    *(_OWORD *)(v162 + 128) = v173;
    *(_OWORD *)(v162 + 137) = v172;
    *(_QWORD *)(v162 + 96) = MEMORY[0x1E0DDB768] + 16;
    *(_BYTE *)(v162 + 153) = v274[49];
    *(_WORD *)(v162 + 160) = v275;
    v174 = *((_QWORD *)&v276 + 1);
    *(_QWORD *)(v162 + 168) = v276;
    *(_QWORD *)(v162 + 176) = v174;
    if (v174)
    {
      v175 = (unint64_t *)(v174 + 8);
      do
        v176 = __ldxr(v175);
      while (__stxr(v176 + 1, v175));
      v177 = (std::__shared_weak_count *)*((_QWORD *)&v276 + 1);
      if (*((_QWORD *)&v276 + 1))
      {
        v178 = (unint64_t *)(*((_QWORD *)&v276 + 1) + 8);
        do
          v179 = __ldaxr(v178);
        while (__stlxr(v179 - 1, v178));
        if (!v179)
        {
          ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
          std::__shared_weak_count::__release_weak(v177);
        }
      }
    }
    caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)((char *)&v273 + 8));
    v180 = *(std::__shared_weak_count **)&v272[40];
    if (*(_QWORD *)&v272[40])
    {
      v181 = (unint64_t *)(*(_QWORD *)&v272[40] + 8);
      do
        v182 = __ldaxr(v181);
      while (__stlxr(v182 - 1, v181));
      if (!v182)
      {
        ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
        std::__shared_weak_count::__release_weak(v180);
      }
    }
    *(_QWORD *)v162 = &off_1E6975218;
    caulk::concurrent::messenger::enqueue(v148, (caulk::concurrent::message *)v162);
    v183 = (std::__shared_weak_count *)*((_QWORD *)&v245 + 1);
    if (*((_QWORD *)&v245 + 1))
    {
      v184 = (unint64_t *)(*((_QWORD *)&v245 + 1) + 8);
      do
        v185 = __ldaxr(v184);
      while (__stlxr(v185 - 1, v184));
      if (!v185)
      {
        ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
        std::__shared_weak_count::__release_weak(v183);
      }
    }
    caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)&v239);
    v186 = (std::__shared_weak_count *)*((_QWORD *)&v237 + 1);
    if (*((_QWORD *)&v237 + 1))
    {
      v187 = (unint64_t *)(*((_QWORD *)&v237 + 1) + 8);
      do
        v188 = __ldaxr(v187);
      while (__stlxr(v188 - 1, v187));
      if (!v188)
      {
        ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
        std::__shared_weak_count::__release_weak(v186);
      }
    }
    caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)&v228);
    v189 = (std::__shared_weak_count *)*((_QWORD *)&v226 + 1);
    if (!*((_QWORD *)&v226 + 1))
      goto LABEL_252;
    v190 = (unint64_t *)(*((_QWORD *)&v226 + 1) + 8);
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
      if (!(_DWORD)v2)
        goto LABEL_114;
    }
    else
    {
LABEL_252:
      if (!(_DWORD)v2)
        goto LABEL_114;
    }
LABEL_253:
    std::condition_variable::notify_all(v211);
LABEL_254:
    caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)&v250);
    v192 = (std::__shared_weak_count *)*((_QWORD *)&v248 + 1);
    if (*((_QWORD *)&v248 + 1))
    {
      v193 = (unint64_t *)(*((_QWORD *)&v248 + 1) + 8);
      do
        v194 = __ldaxr(v193);
      while (__stlxr(v194 - 1, v193));
      if (!v194)
      {
        ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
        std::__shared_weak_count::__release_weak(v192);
      }
    }
    std::__optional_destruct_base<AMCP::Graph::Manifest_Queue::Incoming_Payload,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v256);
    if (*v3)
      return v2;
  }
  std::__optional_destruct_base<AMCP::Graph::Manifest_Queue::Incoming_Payload,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v256);
  return v2;
}

void sub_1B5933E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,caulk::mach::os_workgroup_interval_managed *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,caulk::mach::os_workgroup_interval_managed *a30)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3E8]);
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed(a30);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a13);
  std::__optional_destruct_base<AMCP::Graph::Manifest_Queue::Incoming_Payload,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x300]);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Manifest_Queue::get_wake_time_in_host_time(AMCP::Graph::Manifest_Queue *this)
{
  uint64_t v1;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t host_time;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  _QWORD v28[4];
  std::__shared_weak_count *v29;
  _BYTE v30[32];
  std::__shared_weak_count *v31;

  v1 = *((_QWORD *)this + 70);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 72);
  v4 = *(std::__shared_weak_count **)(v1 + 80);
  v28[0] = v3;
  v28[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  AMCP::Graph::Manifest_Counter::get_current_cycle_anchor_time((uint64_t)v30, *(_QWORD *)(v3 + 64));
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)&v23, *(_QWORD *)(*((_QWORD *)this + 70) + 72), *(std::__shared_weak_count **)(*((_QWORD *)this + 70) + 80));
  v24 = 2;
  v25 = 0x3FF0000000000000;
  v26 = 0;
  v27 = v23;
  v23 = 0uLL;
  boost::operators_impl::operator-((AMCP::DAL::DAL_Time *)v28, (uint64_t)v30, (AMCP::DAL::DAL_Time_Delta *)&v24);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  host_time = AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)v28);
  v16 = v29;
  if (v29)
  {
    v17 = (unint64_t *)&v29->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v31;
  if (v31)
  {
    v20 = (unint64_t *)&v31->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return host_time;
}

void sub_1B593436C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1 + 24);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2 - 32);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Manifest_Queue::wait_for_next_cycle(AMCP::Graph::Manifest_Queue *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = AMCP::Graph::Manifest_Queue::get_wake_time_in_host_time(this);
  if (result)
  {
    v4 = result;
    v3 = *((_QWORD *)this + 75);
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v4);
  }
  return result;
}

double AMCP::Graph::Manifest_Queue::update_execution_context(uint64_t a1, uint64_t a2)
{
  double v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  BOOL v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  double v20;
  double v21;
  _opaque_pthread_t *cycle_size_in_host_ticks;
  _opaque_pthread_t *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v29;
  std::__shared_weak_count *v30;
  _QWORD v31[4];
  std::__shared_weak_count *v32;

  if (*(_QWORD *)(a1 + 368))
  {
    caulk::mach::os_workgroup_interval_managed::finish((caulk::mach::os_workgroup_interval_managed *)(a1 + 360));
    if (*(_QWORD *)(a1 + 368))
      caulk::mach::os_workgroup_managed::leave((caulk::mach::os_workgroup_managed *)(a1 + 360));
  }
  v4 = 0.0;
  if (*(_QWORD *)(a1 + 560))
  {
    v5 = *(std::__shared_weak_count **)(a2 + 32);
    v29 = *(_QWORD *)(a2 + 24);
    v30 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    AMCP::DAL::DAL_Time_Delta::translate_time_delta((uint64_t)v31, (AMCP::DAL::DAL_Time_Delta *)(a1 + 312), &v29);
    v8 = AMCP::DAL::DAL_Time_Delta::operator==((AMCP::DAL::DAL_Time_Delta *)v31, a2);
    v9 = v32;
    if (v32)
    {
      v10 = (unint64_t *)&v32->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v30;
    if (!v30)
      goto LABEL_17;
    v13 = (unint64_t *)&v30->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (v8)
        goto LABEL_31;
    }
    else
    {
LABEL_17:
      if (v8)
        goto LABEL_31;
    }
    v15 = *(_QWORD *)(a1 + 560);
    v17 = *(_QWORD *)(v15 + 72);
    v16 = *(std::__shared_weak_count **)(v15 + 80);
    v31[0] = v17;
    v31[1] = v16;
    if (v16)
    {
      v18 = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    if ((*(_BYTE *)(a1 + 312) & 2) == 0)
      AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)(a1 + 312));
    v20 = *(double *)(a1 + 320);
    if ((*(_BYTE *)a2 & 2) == 0)
      AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)a2);
    v21 = *(double *)(a2 + 8);
    AMCP::Graph::Manifest_Inventory::set_nominal_buffer_size(*(_QWORD **)(v17 + 24), *(_DWORD *)a1, a2);
    cycle_size_in_host_ticks = (_opaque_pthread_t *)AMCP::Graph::Manifest_Queue::get_cycle_size_in_host_ticks((AMCP::Graph::Manifest_Queue *)a1);
    v23 = pthread_self();
    AMCP::Utility::configure_thread_for_realtime(v23, cycle_size_in_host_ticks, 0);
    if (v16)
    {
      v24 = (unint64_t *)&v16->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v4 = v20 - v21;
  }
LABEL_31:
  *(_DWORD *)(a1 + 312) = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 16);
  std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(a1 + 336), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32));
  *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 40);
  if (a1 + 312 != a2)
  {
    caulk::mach::details::holder::operator=((caulk::mach::details **)(a1 + 368), (caulk::mach::details **)(a2 + 56));
    v26 = *(_OWORD *)(a2 + 64);
    v27 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 401) = *(_OWORD *)(a2 + 89);
    *(_OWORD *)(a1 + 376) = v26;
    *(_OWORD *)(a1 + 392) = v27;
    *(_BYTE *)(a1 + 417) = *(_BYTE *)(a2 + 105);
  }
  *(_WORD *)(a1 + 424) = *(_WORD *)(a2 + 112);
  AMCP::Graph::Manifest_Queue::join_workgroup_interval((AMCP::Graph::Manifest_Queue *)a1);
  AMCP::Graph::Manifest_Queue::start_workgroup_interval((AMCP::Graph::Manifest_Queue *)a1);
  return v4;
}

void sub_1B5934660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__optional_storage_base<AMCP::Graph::Manifest_Execution_Context,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<AMCP::Graph::Manifest_Execution_Context,false>>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __n128 v5;
  uint64_t v6;

  if (*(unsigned __int8 *)(a1 + 120) == *((unsigned __int8 *)a2 + 120))
  {
    if (*(_BYTE *)(a1 + 120))
    {
      v4 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v4;
      std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](a1 + 24, (__int128 *)((char *)a2 + 24));
      *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
      caulk::mach::os_workgroup_interval_managed::swap((__n128 *)(a1 + 48), (__n128 *)a2 + 3);
      *(_WORD *)(a1 + 112) = *((_WORD *)a2 + 56);
    }
  }
  else if (*(_BYTE *)(a1 + 120))
  {
    caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)(a1 + 48));
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 24);
    *(_BYTE *)(a1 + 120) = 0;
  }
  else
  {
    v5 = (__n128)*a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(__n128 *)a1 = v5;
    *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)a2 + 3) = 0;
    *((_QWORD *)a2 + 4) = 0;
    v5.n128_u32[0] = *((_DWORD *)a2 + 10);
    *(_QWORD *)(a1 + 48) = MEMORY[0x1E0DDB768] + 16;
    v6 = a1 + 48;
    *(_DWORD *)(a1 + 40) = v5.n128_u32[0];
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_WORD *)(a1 + 104) = 0;
    caulk::mach::os_workgroup_interval_managed::swap((__n128 *)(a1 + 48), (__n128 *)a2 + 3);
    *(_WORD *)(v6 + 64) = *((_WORD *)a2 + 56);
    *(_BYTE *)(v6 + 72) = 1;
  }
}

void AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload::~Manifest_Disposal_Payload(AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload *this)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 128);
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload *)((char *)this + 56));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
}

void AMCP::Graph::finish_manifest(AMCP::Graph::Manifest **a1, int a2, float *a3)
{
  AMCP::Graph::Manifest *v4;

  v4 = *a1;
  if ((*(_DWORD *)v4 & 0xFFFFFFFE) == 2)
  {
    AMCP::Graph::Manifest::end_processing(v4, a2, a3);
    AMCP::Graph::Manifest::teardown_processing(*a1);
  }
}

void caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::maybe_acquire_new_manifest(void)::$_0,AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload>::~rt_message_call(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E6975270;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 168);
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)(a1 + 96));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 72);
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
}

{
  *(_QWORD *)a1 = &off_1E6975270;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 168);
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)(a1 + 96));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 72);
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t *caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::maybe_acquire_new_manifest(void)::$_0,AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload>::perform(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  caulk::concurrent::details::message_call<AMCP::Graph::Manifest_Queue::maybe_acquire_new_manifest(void)::$_0,AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload>::perform(a1);
  return caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::maybe_acquire_new_manifest(void)::$_0,AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_1B59348D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::maybe_acquire_new_manifest(void)::$_0,AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload>::rt_cleanup::~rt_cleanup((uint64_t *)va);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::message_call<AMCP::Graph::Manifest_Queue::maybe_acquire_new_manifest(void)::$_0,AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload>::perform(uint64_t a1)
{
  AMCP::Graph::Manifest *v2;
  AMCP::Graph::Manifest *v3;
  unint64_t *v4;
  unint64_t v5;
  std::unique_lock<std::mutex> v6;
  AMCP::Graph::Manifest *v7[2];

  v6.__m_ = *(std::unique_lock<std::mutex>::mutex_type **)(a1 + 24);
  v6.__owns_ = 1;
  std::mutex::lock(v6.__m_);
  std::condition_variable::wait(*(std::condition_variable **)(a1 + 32), &v6);
  v2 = *(AMCP::Graph::Manifest **)(a1 + 168);
  v3 = *(AMCP::Graph::Manifest **)(a1 + 176);
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  v7[0] = v2;
  v7[1] = v3;
  AMCP::Graph::finish_manifest(v7, *(_DWORD *)(a1 + 40), (float *)(a1 + 48));
  if (v3)
  {
    v4 = (unint64_t *)((char *)v3 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      (*(void (**)(AMCP::Graph::Manifest *))(*(_QWORD *)v3 + 16))(v3);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v3);
    }
  }
  if (v6.__owns_)
    std::mutex::unlock(v6.__m_);
}

void sub_1B5934988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(a1);
}

uint64_t *caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::maybe_acquire_new_manifest(void)::$_0,AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload>::rt_cleanup::~rt_cleanup(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *(_QWORD *)v2 = &off_1E6975270;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2 + 168);
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)(v2 + 96));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2 + 72);
  caulk::concurrent::message::~message((caulk::concurrent::message *)v2);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 184, 8);
  return a1;
}

void caulk::concurrent::details::message_call<AMCP::Graph::Manifest_Queue::maybe_acquire_new_manifest(void)::$_0,AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload>::~message_call(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E6975270;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 168);
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)(a1 + 96));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 72);
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
}

{
  *(_QWORD *)a1 = &off_1E6975270;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 168);
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)(a1 + 96));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 72);
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  JUMPOUT(0x1B5E50688);
}

unint64_t AMCP::Graph::Manifest_Queue::get_cycle_size_in_host_ticks(AMCP::Graph::Manifest_Queue *this)
{
  double sample_rate;
  uint64_t v3;
  double v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  double v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  sample_rate = AMCP::Graph::Manifest_Queue::get_sample_rate(*((AMCP::Graph::Manifest_Queue **)this + 70));
  v3 = *((_QWORD *)this + 70);
  if (v3)
  {
    AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)&v10, *(_QWORD *)(v3 + 72), *(std::__shared_weak_count **)(v3 + 80));
    v4 = (*(double (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10);
    v5 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if ((*((_BYTE *)this + 312) & 2) == 0)
      AMCP::DAL::DAL_Time_Delta::validate((AMCP::Graph::Manifest_Queue *)((char *)this + 312));
    v8 = (double)(uint64_t)floor(*((double *)this + 40));
  }
  else
  {
    v8 = 1024.0;
    v4 = 24000000.0 / sample_rate;
  }
  return (unint64_t)(v8 * v4);
}

void sub_1B5934B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Manifest_Queue::join_workgroup_interval(AMCP::Graph::Manifest_Queue *this)
{
  AMCP::Log::Scope_Registry *v1;
  int v2;
  caulk::concurrent::messenger *v3;
  _opaque_pthread_t *v4;
  mach_port_t v5;
  int *v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  if (*((_QWORD *)this + 46))
  {
    v1 = (AMCP::Log::Scope_Registry *)caulk::mach::os_workgroup_managed::join((AMCP::Graph::Manifest_Queue *)((char *)this + 360));
    if ((_DWORD)v1)
    {
      v2 = (int)v1;
      AMCP::Log::Scope_Registry::get(v1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
      v3 = *(caulk::concurrent::messenger **)(v12 + 8);
      v4 = pthread_self();
      v5 = pthread_mach_thread_np(v4);
      v6 = __error();
      v7 = strerror(*v6);
      v8 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
      *(_DWORD *)(v8 + 16) = 0;
      *(_BYTE *)(v8 + 20) = 16;
      *(_DWORD *)(v8 + 24) = v5;
      *(_QWORD *)(v8 + 32) = "Manifest_Queue.cpp";
      *(_DWORD *)(v8 + 40) = 643;
      *(_DWORD *)(v8 + 44) = v2;
      *(_QWORD *)(v8 + 48) = v7;
      *(_QWORD *)v8 = &off_1E6975348;
      *(_QWORD *)(v8 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v3, (caulk::concurrent::message *)v8);
      v9 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
  }
}

void sub_1B5934CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Manifest_Queue::start_workgroup_interval(AMCP::Graph::Manifest_Queue *this)
{
  caulk::mach::os_workgroup_interval_managed *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t wake_time_in_host_time;
  AMCP::Log::Scope_Registry *v6;
  int v7;
  caulk::concurrent::messenger *v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  AMCP::Log::Scope_Registry *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  caulk::concurrent::messenger *v18;
  _opaque_pthread_t *v19;
  mach_port_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  if (*((_QWORD *)this + 46))
  {
    v2 = (AMCP::Graph::Manifest_Queue *)((char *)this + 360);
    v3 = *((_QWORD *)this + 70);
    v4 = v3 ? AMCP::Graph::Manifest::get_overload_time_in_host_time(v3, (uint64_t)this + 312) : -1;
    wake_time_in_host_time = AMCP::Graph::Manifest_Queue::get_wake_time_in_host_time(this);
    v6 = (AMCP::Log::Scope_Registry *)caulk::mach::os_workgroup_interval_managed::start(v2);
    if ((_DWORD)v6)
    {
      v7 = (int)v6;
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v25, "com.apple.coreaudio", "AMCP");
      v8 = *(caulk::concurrent::messenger **)(v25 + 8);
      v9 = pthread_self();
      v10 = pthread_mach_thread_np(v9);
      v11 = strerror(v7);
      v12 = (_QWORD *)MEMORY[0x1E0DDB688];
      v13 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
      *(_DWORD *)(v13 + 16) = 0;
      *(_BYTE *)(v13 + 20) = 16;
      *(_DWORD *)(v13 + 24) = v10;
      *(_QWORD *)(v13 + 32) = "Manifest_Queue.cpp";
      *(_DWORD *)(v13 + 40) = 675;
      *(_DWORD *)(v13 + 44) = v7;
      *(_QWORD *)(v13 + 48) = v11;
      *(_QWORD *)v13 = &off_1E69753A0;
      *(_QWORD *)(v13 + 8) = 0;
      v14 = (AMCP::Log::Scope_Registry *)caulk::concurrent::messenger::enqueue(v8, (caulk::concurrent::message *)v13);
      v15 = v26;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      if (v7 == 22)
      {
        AMCP::Log::Scope_Registry::get(v14);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v25, "com.apple.coreaudio", "AMCP");
        v18 = *(caulk::concurrent::messenger **)(v25 + 8);
        v19 = pthread_self();
        v20 = pthread_mach_thread_np(v19);
        v21 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v12 + 16))(*v12, 64, 8);
        *(_DWORD *)(v21 + 16) = 0;
        *(_BYTE *)(v21 + 20) = 2;
        *(_DWORD *)(v21 + 24) = v20;
        *(_QWORD *)(v21 + 32) = "Manifest_Queue.cpp";
        *(_DWORD *)(v21 + 40) = 678;
        *(_QWORD *)(v21 + 48) = wake_time_in_host_time;
        *(_QWORD *)(v21 + 56) = v4;
        *(_QWORD *)v21 = &off_1E69753F8;
        *(_QWORD *)(v21 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v18, (caulk::concurrent::message *)v21);
        v22 = v26;
        if (v26)
        {
          v23 = (unint64_t *)&v26->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
      }
    }
  }
}

void sub_1B5934EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::start_workgroup_interval(void)::$_1,std::tuple<unsigned int,char const*,int,unsigned long long,unsigned long long>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::start_workgroup_interval(void)::$_1,std::tuple<unsigned int,char const*,int,unsigned long long,unsigned long long>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 2048;
    v19 = v10;
    v20 = 2048;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Args: Start - %llu, Deadline - %llu", buf, 0x2Cu);
  }
  return caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::start_workgroup_interval(void)::$_1,std::tuple<unsigned int,char const*,int,unsigned long long,unsigned long long>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::start_workgroup_interval(void)::$_1,std::tuple<unsigned int,char const*,int,unsigned long long,unsigned long long>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 64, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::start_workgroup_interval(void)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::start_workgroup_interval(void)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 2080;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Starting the workgroup interval in start_workgroup_interval resulted in error: %d (%s)", buf, 0x28u);
  }
  return caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::start_workgroup_interval(void)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::start_workgroup_interval(void)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::join_workgroup_interval(void)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::join_workgroup_interval(void)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 2080;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Failed to join the workgroup with code: %d - %s", buf, 0x28u);
  }
  return caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::join_workgroup_interval(void)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::join_workgroup_interval(void)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

double AMCP::Graph::Manifest_Queue::get_sample_rate(AMCP::Graph::Manifest_Queue *this)
{
  double v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  if (!this)
    return 44100.0;
  AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)&v6, *((_QWORD *)this + 9), *((std::__shared_weak_count **)this + 10));
  v1 = (*(double (**)(uint64_t))(*(_QWORD *)v6 + 152))(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1B59354CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Manifest_Queue::timebases_are_valid(AMCP::Graph::Manifest_Queue *this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v22;

  if (!this)
    return 1;
  v1 = *((_QWORD *)this + 9);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  v22 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = *(_QWORD *)(v1 + 80);
  v6 = *(std::__shared_weak_count **)(v1 + 88);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD **)(v5 + 16);
  if (v9)
  {
    do
    {
      v10 = v9[2];
      v11 = (std::__shared_weak_count *)v9[3];
      if (v11)
      {
        v12 = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 168))(v10);
      if (v11)
      {
        v15 = (unint64_t *)&v11->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if ((v14 & 1) == 0)
        break;
      v9 = (_QWORD *)*v9;
    }
    while (v9);
    if (!v6)
      goto LABEL_27;
    goto LABEL_23;
  }
  v14 = 1;
  if (v6)
  {
LABEL_23:
    v17 = (unint64_t *)&v6->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_27:
  if (v22)
  {
    v19 = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  return v14;
}

void sub_1B5935644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Manifest_Queue::enqueue_manifest(int *a1, _QWORD *a2, unsigned int a3, unsigned int a4, _QWORD *a5, __int128 *a6, int a7, uint64_t a8, __int128 a9)
{
  AMCP::Log::Scope_Registry *v15;
  std::__shared_weak_count *size;
  NSObject *v17;
  unint64_t *v18;
  unint64_t v19;
  _opaque_pthread_t *v20;
  mach_port_t v21;
  unsigned int v22;
  void **v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  std::string::size_type v27;
  std::string *p_p;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  std::string::size_type v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  caulk::mach::details *v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  caulk::mach::details *v79;
  __int128 v80;
  void *v81;
  void *v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  caulk::mach::details *v90;
  char *v91;
  void *v92;
  char *v93;
  __int128 v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  void **v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  _QWORD *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  const char *v147;
  mach_port_t v148;
  char v149;
  int v150;
  void *v151;
  _QWORD *v152;
  char v153;
  int v154;
  void *v156[2];
  uint64_t v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  std::string __p;
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  unsigned int v165;
  void *v166;
  char v167;
  void *v168[2];
  char v169;
  __int128 v170;
  int v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  int v176;
  uint64_t v177;
  caulk::mach::details *v178;
  __int128 v179;
  _BYTE v180[25];
  char v181;
  __int16 v182;
  std::string::size_type v183;
  __int128 v184;
  uint64_t v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  _QWORD v189[3];
  _QWORD *v190;
  __int128 v191;
  uint64_t v192;
  __int128 v193;
  int v194;
  _QWORD v195[2];
  __int128 v196;
  _BYTE v197[25];
  char v198;
  __int16 v199;
  __int128 v200;
  uint64_t v201;
  __int128 __src;
  uint64_t v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  __int128 v208;
  int v209;
  uint64_t v210;
  caulk::mach::details *v211;
  __int128 v212;
  _BYTE v213[25];
  char v214;
  __int16 v215;
  std::string buf;
  __int128 v217;
  _BYTE v218[30];
  __int16 v219;
  uint64_t v220;
  caulk::mach::details *v221;
  __int128 v222;
  _BYTE v223[25];
  char v224;
  __int16 v225;
  std::string::size_type v226;
  void *v227;
  _BYTE *v228;
  uint64_t v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  void *v233[2];
  char v234;
  void **v235;
  uint64_t v236;

  v236 = *MEMORY[0x1E0C80C00];
  AMCP::Logging_Settings::instance((AMCP::Logging_Settings *)a1);
  if (HIBYTE(AMCP::Logging_Settings::instance(void)::s_instance))
  {
    AMCP::Log::Scope_Registry::get(v15);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    v17 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v18 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      v20 = pthread_self();
      v21 = pthread_mach_thread_np(v20);
      v154 = a7;
      v152 = (_QWORD *)*a2;
      v150 = *a1;
      v148 = v21;
      if (*a2)
      {
        AMCP::Graph::Manifest::get_iocontext_uid((AMCP::Graph::Manifest *)v168, (_QWORD *)*a2);
        v22 = a4;
        if (v169 >= 0)
          v23 = v168;
        else
          v23 = (void **)v168[0];
        v147 = (const char *)v23;
        if (*a2)
          v24 = (uint64_t)(*(_QWORD *)(*a2 + 16) - *(_QWORD *)(*a2 + 8)) >> 4;
        else
          v24 = 0;
      }
      else
      {
        v22 = a4;
        v24 = 0;
        v147 = "";
      }
      v25 = a5;
      std::string::basic_string[abi:ne180100]<0>(&__p, off_1E699CFF0[a3]);
      v26 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      v27 = __p.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(v233, off_1E699CFF0[v22]);
      p_p = &__p;
      if (v26 < 0)
        p_p = (std::string *)v27;
      if (v234 >= 0)
        v29 = v233;
      else
        v29 = (void **)v233[0];
      a5 = v25;
      v30 = (uint64_t)(v25[1] - *v25) >> 2;
      LODWORD(buf.__r_.__value_.__l.__data_) = 67111170;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v148;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Queue.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 156;
      LOWORD(v217) = 1024;
      *(_DWORD *)((char *)&v217 + 2) = v150;
      WORD3(v217) = 2080;
      *((_QWORD *)&v217 + 1) = v147;
      *(_WORD *)v218 = 2048;
      *(_QWORD *)&v218[2] = v24;
      *(_WORD *)&v218[10] = 2080;
      *(_QWORD *)&v218[12] = p_p;
      *(_WORD *)&v218[20] = 2080;
      *(_QWORD *)&v218[22] = v29;
      v219 = 2048;
      v220 = v30;
      _os_log_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_INFO, "%6u %32s:%-5d Manifest_Queue(%d|\"%s\")::enqueue_manifest: size(%zu)  %s -> %s  (snapshot: %zu)", (uint8_t *)&buf, 0x50u);
      if (v234 < 0)
        operator delete(v233[0]);
      a7 = v154;
      a4 = v22;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v152 && v169 < 0)
        operator delete(v168[0]);
    }
  }
  v31 = *((_QWORD *)a1 + 70);
  if (v31)
  {
    v32 = *a2;
    if (!*a2)
      goto LABEL_66;
    v33 = *(_QWORD *)(v31 + 96);
    v34 = *(std::__shared_weak_count **)(v31 + 104);
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(p_shared_owners);
      while (__stxr(v36 + 1, p_shared_owners));
      std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(v32 + 96), v33, (uint64_t)v34);
      v37 = (unint64_t *)&v34->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    else
    {
      std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(v32 + 96), v33, 0);
    }
  }
  v39 = *a2;
  if (*a2)
  {
    v40 = *(_QWORD *)(v39 + 96);
    v41 = *(std::__shared_weak_count **)(v39 + 104);
    if (!v41)
      goto LABEL_44;
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
    do
      v44 = __ldaxr(v42);
    while (__stlxr(v44 - 1, v42));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
      if (v40)
      {
LABEL_45:
        v45 = (_QWORD *)*a2;
        v46 = *(std::__shared_weak_count **)(*a2 + 104);
        v233[0] = *(void **)(*a2 + 96);
        v233[1] = v46;
        v151 = v233[0];
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
          v45 = (_QWORD *)*a2;
          v49 = *a1;
          if (!*a2)
          {
            v149 = *a1;
            v153 = 1;
LABEL_54:
            std::string::basic_string[abi:ne180100]<0>(&buf, off_1E699CFF0[a3]);
            std::string::basic_string[abi:ne180100]<0>(&__p, off_1E699CFF0[a4]);
            AMCP::Graph::Manifest_Log::add_message((uint64_t)v151, 3, "Manifest_Queue(%d|\"%s\")::enqueue_manifest: size(%zu)  %s -> %s", v50, v51, v52, v53, v54, v149);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
            if ((v153 & 1) == 0 && v167 < 0)
              operator delete(v166);
            if (v46)
            {
              v55 = (unint64_t *)&v46->__shared_owners_;
              do
                v56 = __ldaxr(v55);
              while (__stlxr(v56 - 1, v55));
              if (!v56)
              {
                ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                std::__shared_weak_count::__release_weak(v46);
              }
            }
            goto LABEL_66;
          }
        }
        else
        {
          v49 = *a1;
        }
        AMCP::Graph::Manifest::get_iocontext_uid((AMCP::Graph::Manifest *)&v166, v45);
        v149 = v49;
        v153 = 0;
        goto LABEL_54;
      }
    }
    else
    {
LABEL_44:
      if (v40)
        goto LABEL_45;
    }
  }
LABEL_66:
  if (!*((_QWORD *)a1 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "manifest queue outbox");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      buf = __p;
    LOBYTE(v217) = 1;
    *((_QWORD *)&v217 + 1) = 0x100000037;
    *(_DWORD *)&v218[8] = 2;
    v218[12] = 1;
    v218[16] = 0;
    v218[20] = 0;
    v57 = operator new();
    MEMORY[0x1B5E4FD34](v57, 1, &buf);
    std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)a1 + 24, v57);
    if ((_BYTE)v217 && SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v165 = 0;
  __p.__r_.__value_.__r.__words[0] = __PAIR64__(a4, a3);
  v162 = 0;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request>::__init_with_size[abi:ne180100]<AMCP::IO_Core::Play_State_Manager::Play_Request*,AMCP::IO_Core::Play_State_Manager::Play_Request*>(&__p.__r_.__value_.__l.__size_, (const void *)*a5, a5[1], (uint64_t)(a5[1] - *a5) >> 2);
  LODWORD(v163) = a7;
  *((_QWORD *)&v163 + 1) = 0x40B0000000000000;
  v164 = a9;
  v59 = a2[1];
  buf.__r_.__value_.__r.__words[0] = *a2;
  buf.__r_.__value_.__l.__size_ = v59;
  if (v59)
  {
    v60 = (unint64_t *)(v59 + 8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
  }
  LODWORD(buf.__r_.__value_.__r.__words[2]) = *a1;
  v217 = *a6;
  v62 = *((_QWORD *)a6 + 3);
  *(_QWORD *)v218 = *((_QWORD *)a6 + 2);
  *(_QWORD *)&v218[8] = v62;
  v63 = *((_QWORD *)a6 + 4);
  *(_QWORD *)&v218[16] = v63;
  if (v63)
  {
    v64 = (unint64_t *)(v63 + 8);
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  *(_DWORD *)&v218[24] = *((_DWORD *)a6 + 10);
  v220 = MEMORY[0x1E0DDB760] + 16;
  v66 = (caulk::mach::details *)caulk::mach::details::retain_os_object(*((caulk::mach::details **)a6 + 7), v58);
  v67 = a6[5];
  v222 = a6[4];
  *(_OWORD *)v223 = v67;
  *(_OWORD *)&v223[9] = *(__int128 *)((char *)a6 + 89);
  v221 = v66;
  v220 = MEMORY[0x1E0DDB768] + 16;
  v224 = *((_BYTE *)a6 + 105);
  v225 = *((_WORD *)a6 + 56);
  v68 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  v226 = __p.__r_.__value_.__r.__words[0];
  v227 = 0;
  v69 = __p.__r_.__value_.__r.__words[2];
  v70 = (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__l.__size_) >> 2;
  v229 = 0;
  v228 = 0;
  std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request>::__init_with_size[abi:ne180100]<AMCP::IO_Core::Play_State_Manager::Play_Request*,AMCP::IO_Core::Play_State_Manager::Play_Request*>(&v227, (const void *)__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__r.__words[2], v70);
  v230 = v163;
  v231 = v164;
  *(_QWORD *)&v232 = a1 + 176;
  *((_QWORD *)&v232 + 1) = &v165;
  v71 = a2[1];
  *(_QWORD *)&v160 = *a2;
  *((_QWORD *)&v160 + 1) = v71;
  if (v71)
  {
    v72 = (unint64_t *)(v71 + 8);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  v156[0] = 0;
  v156[1] = 0;
  v157 = 0;
  std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request>::__init_with_size[abi:ne180100]<AMCP::IO_Core::Play_State_Manager::Play_Request*,AMCP::IO_Core::Play_State_Manager::Play_Request*>(v156, *((const void **)&v68 + 1), v69, v70);
  v158 = v163;
  v159 = v164;
  v191 = *a6;
  v75 = *((_QWORD *)a6 + 3);
  v192 = *((_QWORD *)a6 + 2);
  *(_QWORD *)&v193 = v75;
  v76 = *((_QWORD *)a6 + 4);
  *((_QWORD *)&v193 + 1) = v76;
  if (v76)
  {
    v77 = (unint64_t *)(v76 + 8);
    do
      v78 = __ldxr(v77);
    while (__stxr(v78 + 1, v77));
  }
  v194 = *((_DWORD *)a6 + 10);
  v195[0] = MEMORY[0x1E0DDB760] + 16;
  v79 = (caulk::mach::details *)caulk::mach::details::retain_os_object(*((caulk::mach::details **)a6 + 7), v74);
  v80 = a6[5];
  v196 = a6[4];
  *(_OWORD *)v197 = v80;
  *(_OWORD *)&v197[9] = *(__int128 *)((char *)a6 + 89);
  v198 = *((_BYTE *)a6 + 105);
  v199 = *((_WORD *)a6 + 56);
  v200 = v160;
  v160 = 0uLL;
  __src = *(_OWORD *)v156;
  v201 = v68;
  v203 = v157;
  v156[0] = 0;
  v156[1] = 0;
  v157 = 0;
  v204 = v163;
  v205 = v164;
  v206 = v191;
  v207 = v192;
  v208 = v193;
  v193 = 0uLL;
  v209 = v194;
  v212 = 0u;
  memset(v213, 0, sizeof(v213));
  v214 = 0;
  v210 = MEMORY[0x1E0DDB768] + 16;
  v211 = v79;
  v195[0] = MEMORY[0x1E0DDB768] + 16;
  v195[1] = 0;
  caulk::mach::details::release_os_object(0, v81);
  v84 = v212;
  v83 = *(_OWORD *)v213;
  v85 = *(_QWORD *)&v213[16];
  v212 = v196;
  *(_OWORD *)v213 = *(_OWORD *)v197;
  *(_QWORD *)&v213[16] = *(_QWORD *)&v197[16];
  *(_QWORD *)&v197[16] = v85;
  v196 = v84;
  *(_OWORD *)v197 = v83;
  LOBYTE(v85) = v213[24];
  v213[24] = v197[24];
  v197[24] = v85;
  LOBYTE(v85) = v214;
  v214 = v198;
  v198 = v85;
  v215 = v199;
  v170 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  if (buf.__r_.__value_.__l.__size_)
  {
    v86 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
    do
      v87 = __ldxr(v86);
    while (__stxr(v87 + 1, v86));
  }
  v171 = buf.__r_.__value_.__r.__words[2];
  v172 = v217;
  v173 = *(_QWORD *)v218;
  v174 = *(_QWORD *)&v218[8];
  v175 = *(std::__shared_weak_count **)&v218[16];
  if (*(_QWORD *)&v218[16])
  {
    v88 = (unint64_t *)(*(_QWORD *)&v218[16] + 8);
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
  }
  v176 = *(_DWORD *)&v218[24];
  v177 = MEMORY[0x1E0DDB760] + 16;
  v90 = (caulk::mach::details *)caulk::mach::details::retain_os_object(v221, v82);
  v179 = v222;
  *(_OWORD *)v180 = *(_OWORD *)v223;
  *(_OWORD *)&v180[9] = *(_OWORD *)&v223[9];
  v177 = MEMORY[0x1E0DDB768] + 16;
  v178 = v90;
  v181 = v224;
  v182 = v225;
  v183 = v226;
  v184 = 0uLL;
  v185 = 0;
  std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request>::__init_with_size[abi:ne180100]<AMCP::IO_Core::Play_State_Manager::Play_Request*,AMCP::IO_Core::Play_State_Manager::Play_Request*>(&v184, v227, (uint64_t)v228, (v228 - (_BYTE *)v227) >> 2);
  v186 = v230;
  v187 = v231;
  v188 = v232;
  v190 = 0;
  v91 = (char *)operator new(0xE8uLL);
  v93 = v91;
  v94 = v170;
  *(_QWORD *)v91 = &off_1E6975198;
  *(_OWORD *)(v91 + 8) = v94;
  if (*((_QWORD *)&v94 + 1))
  {
    v95 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
    do
      v96 = __ldxr(v95);
    while (__stxr(v96 + 1, v95));
  }
  *((_DWORD *)v91 + 6) = v171;
  *((_OWORD *)v91 + 2) = v172;
  v98 = v174;
  v97 = v175;
  *((_QWORD *)v91 + 6) = v173;
  *((_QWORD *)v91 + 7) = v98;
  *((_QWORD *)v91 + 8) = v97;
  if (v97)
  {
    v99 = (unint64_t *)&v97->__shared_owners_;
    do
      v100 = __ldxr(v99);
    while (__stxr(v100 + 1, v99));
  }
  v101 = (unint64_t *)(a1 + 4);
  *((_DWORD *)v91 + 18) = v176;
  v102 = caulk::mach::details::retain_os_object(v178, v92);
  v103 = *(_OWORD *)v180;
  *((_OWORD *)v93 + 6) = v179;
  *((_OWORD *)v93 + 7) = v103;
  *(_OWORD *)(v93 + 121) = *(_OWORD *)&v180[9];
  *((_OWORD *)v93 + 10) = v184;
  v104 = v187;
  *(_OWORD *)(v93 + 184) = v186;
  *((_QWORD *)v93 + 10) = MEMORY[0x1E0DDB768] + 16;
  *((_QWORD *)v93 + 11) = v102;
  v93[137] = v181;
  *((_WORD *)v93 + 72) = v182;
  v105 = v185;
  *((_QWORD *)v93 + 19) = v183;
  *((_QWORD *)v93 + 22) = v105;
  v185 = 0;
  v184 = 0uLL;
  *(_OWORD *)(v93 + 200) = v104;
  *(_OWORD *)(v93 + 216) = v188;
  v190 = v93;
  do
  {
    v106 = (uint64_t)v190;
    if (!v190)
      goto LABEL_103;
    if (v190 != v189)
    {
      v106 = (*(uint64_t (**)(void))(*v190 + 16))();
LABEL_103:
      v235 = (void **)v106;
      goto LABEL_105;
    }
    v235 = v233;
    (*(void (**)(_QWORD *, void **))(v189[0] + 24))(v189, v233);
LABEL_105:
    std::mutex::lock((std::mutex *)(a1 + 28));
    if (*((_BYTE *)a1 + 176))
      goto LABEL_106;
    v110 = caulk::concurrent::stack<AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::Message,caulk::concurrent::intrusive_single_link_member<AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::Message,&AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::Message::m_next_free_message>>::pop((unsigned __int128 *)a1 + 6);
    if (v110)
    {
      v111 = v110;
      if (v235)
        (*((void (**)(void **))*v235 + 6))(v235);
      std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)v111, v200, *((uint64_t *)&v200 + 1));
      *(_QWORD *)(v111 + 16) = v201;
      if ((__int128 *)v111 != &v200)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v111 + 24), (char *)__src, *((uint64_t *)&__src + 1), (uint64_t)(*((_QWORD *)&__src + 1) - __src) >> 2);
      v112 = v205;
      *(_OWORD *)(v111 + 48) = v204;
      *(_OWORD *)(v111 + 64) = v112;
      *(_DWORD *)(v111 + 80) = v206;
      *(_QWORD *)(v111 + 88) = *((_QWORD *)&v206 + 1);
      *(_QWORD *)(v111 + 96) = v207;
      std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(v111 + 104), v208, *((uint64_t *)&v208 + 1));
      *(_DWORD *)(v111 + 120) = v209;
      if ((__int128 *)v111 != &v200)
      {
        caulk::mach::details::holder::operator=((caulk::mach::details **)(v111 + 136), &v211);
        v113 = v212;
        v114 = *(_OWORD *)v213;
        *(_OWORD *)(v111 + 169) = *(_OWORD *)&v213[9];
        *(_OWORD *)(v111 + 144) = v113;
        *(_OWORD *)(v111 + 160) = v114;
        *(_BYTE *)(v111 + 185) = v214;
      }
      *(_WORD *)(v111 + 192) = v215;
      v115 = *v101;
      atomic_store(*v101, (unint64_t *)(v111 + 200));
      v116 = __ldaxr(v101);
      if (v116 == v115)
      {
        if (__stlxr(v111, v101))
          goto LABEL_126;
LABEL_106:
        v107 = 0;
        goto LABEL_107;
      }
      __clrex();
LABEL_126:
      while (2)
      {
        atomic_store(v116, (unint64_t *)(v111 + 200));
        v117 = __ldaxr(v101);
        if (v117 == v116)
        {
          if (!__stlxr(v111, v101))
          {
            v118 = 1;
            goto LABEL_131;
          }
        }
        else
        {
          __clrex();
        }
        v118 = 0;
LABEL_131:
        v116 = v117;
        if (v118)
          goto LABEL_106;
        continue;
      }
    }
    v107 = 1;
LABEL_107:
    std::mutex::unlock((std::mutex *)(a1 + 28));
    v108 = v235;
    if (v235 == v233)
    {
      v108 = v233;
      v109 = 4;
    }
    else
    {
      if (!v235)
        continue;
      v109 = 5;
    }
    (*((void (**)(void))*v108 + v109))();
  }
  while ((v107 & 1) != 0);
  v119 = v190;
  if (v190 == v189)
  {
    v120 = 4;
    v119 = v189;
  }
  else
  {
    if (!v190)
      goto LABEL_138;
    v120 = 5;
  }
  (*(void (**)(void))(*v119 + 8 * v120))();
LABEL_138:
  if ((_QWORD)v184)
  {
    *((_QWORD *)&v184 + 1) = v184;
    operator delete((void *)v184);
  }
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)&v177);
  v121 = v175;
  if (v175)
  {
    v122 = (unint64_t *)&v175->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
  if (*((_QWORD *)&v170 + 1))
  {
    v125 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)&v210);
  v127 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
  if (*((_QWORD *)&v208 + 1))
  {
    v128 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  if ((_QWORD)__src)
  {
    *((_QWORD *)&__src + 1) = __src;
    operator delete((void *)__src);
  }
  v130 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
  if (*((_QWORD *)&v200 + 1))
  {
    v131 = (unint64_t *)(*((_QWORD *)&v200 + 1) + 8);
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v195);
  v133 = (std::__shared_weak_count *)*((_QWORD *)&v193 + 1);
  if (*((_QWORD *)&v193 + 1))
  {
    v134 = (unint64_t *)(*((_QWORD *)&v193 + 1) + 8);
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  if (v156[0])
  {
    v156[1] = v156[0];
    operator delete(v156[0]);
  }
  v136 = (std::__shared_weak_count *)*((_QWORD *)&v160 + 1);
  if (*((_QWORD *)&v160 + 1))
  {
    v137 = (unint64_t *)(*((_QWORD *)&v160 + 1) + 8);
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = v165;
  if (v227)
  {
    v228 = v227;
    operator delete(v227);
  }
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)&v220);
  v140 = *(std::__shared_weak_count **)&v218[16];
  if (*(_QWORD *)&v218[16])
  {
    v141 = (unint64_t *)(*(_QWORD *)&v218[16] + 8);
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (buf.__r_.__value_.__l.__size_)
  {
    v144 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  if (__p.__r_.__value_.__l.__size_)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  return v139;
}

void sub_1B5936614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, caulk::mach::os_workgroup_interval_managed *a19, caulk::mach::os_workgroup_interval_managed *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0::~$_0(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[19];
  if (v2)
  {
    a1[20] = v2;
    operator delete(v2);
  }
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)(a1 + 9));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 6));
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1);
}

_QWORD *std::__function::__func<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0,std::allocator<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E6975198;
  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)(a1 + 10));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0,std::allocator<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E6975198;
  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)(a1 + 10));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0,std::allocator<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0xE8uLL);
  *v2 = &off_1E6975198;
  AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0::$_0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B593696C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0,std::allocator<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6975198;
  return AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0::$_0((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0,std::allocator<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  return AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0::~$_0((_QWORD *)(a1 + 8));
}

void std::__function::__func<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0,std::allocator<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0>,void ()(void)>::destroy_deallocate(_QWORD *a1)
{
  AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0::~$_0(a1 + 1);
  operator delete(a1);
}

void std::__function::__func<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0,std::allocator<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  AMCP::Log::Scope_Registry *v20;
  AMCP::Log::Scope_Registry **v21;
  AMCP::Log::Scope_Registry *v22;
  AMCP::Log::Scope_Registry *v23;
  AMCP::Log::Scope_Registry **v24;
  int v25;
  AMCP::Log::Scope_Registry *v26;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *size;
  unint64_t *v32;
  unint64_t v33;
  uint64_t host_time;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  NSObject *v42;
  _opaque_pthread_t *v43;
  mach_port_t v44;
  void *exception;
  uint64_t (**v46)();
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  std::string v51;
  std::logic_error v52;
  std::logic_error v53;
  void *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  int v58;
  char v59;
  uint64_t v60;
  AMCP::Log::Scope_Registry *v61[2];
  uint8_t buf[8];
  _BYTE v63[10];
  __int16 v64;
  int v65;
  __int16 v66;
  _BYTE v67[14];
  const char *v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v1 = a1 + 152;
  if (*(_DWORD *)(a1 + 152))
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 72);
      v5 = *(std::__shared_weak_count **)(v3 + 80);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      AMCP::Graph::Manifest_Inventory::set_nominal_buffer_size(*(_QWORD **)(v4 + 24), *(_DWORD *)(a1 + 24), a1 + 32);
      if (v5)
      {
        v8 = (unint64_t *)&v5->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      v10 = AMCP::Graph::Manifest::setup_processing(*(AMCP::Log::Scope_Registry **)(a1 + 8), (AMCP::DAL::DAL_Time_Delta *)(a1 + 32), v1, *(_QWORD *)(a1 + 216));
      **(_DWORD **)(a1 + 224) = v10;
      if (*(_DWORD *)(a1 + 156) == 2 && v10 == 0)
      {
        v12 = *(_DWORD *)(a1 + 184);
        v13 = *(_QWORD *)(a1 + 8);
        v14 = *(_QWORD *)(v13 + 72);
        v15 = *(std::__shared_weak_count **)(v13 + 80);
        *(_QWORD *)buf = v14;
        *(_QWORD *)v63 = v15;
        if (v15)
        {
          v16 = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
        }
        AMCP::Graph::Manifest_Inventory::get_buffer_alignments(&v60, *(_QWORD **)(v14 + 24));
        if (v15)
        {
          v18 = (unint64_t *)&v15->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v20 = v61[0];
        if (v61[0])
        {
          v21 = v61;
          v22 = v61[0];
          do
          {
            v23 = v22;
            v24 = v21;
            v25 = *((_DWORD *)v22 + 7);
            if (v25 >= 1)
              v21 = (AMCP::Log::Scope_Registry **)v22;
            else
              v22 = (AMCP::Log::Scope_Registry *)((char *)v22 + 8);
            v22 = *(AMCP::Log::Scope_Registry **)v22;
          }
          while (v22);
          if (v21 != v61)
          {
            v26 = v25 >= 1 ? v23 : (AMCP::Log::Scope_Registry *)v24;
            if (*((int *)v26 + 7) <= 1 && v12 != 0)
            {
              if (v12 != 2)
              {
                AMCP::Log::Scope_Registry::get(v61[0]);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
                v42 = **(NSObject ***)buf;
                std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
                if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
                {
                  v43 = pthread_self();
                  v44 = pthread_mach_thread_np(v43);
                  *(_DWORD *)buf = 67109890;
                  *(_DWORD *)&buf[4] = v44;
                  *(_WORD *)v63 = 2080;
                  *(_QWORD *)&v63[2] = "Manifest_Queue.cpp";
                  v64 = 1024;
                  v65 = 470;
                  v66 = 2080;
                  *(_QWORD *)v67 = "not (anchor_policy == Anchor_Policy::Anchor_At_Current_Time)";
                  _os_log_error_impl(&dword_1B57BA000, v42, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
                }
                AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v59);
                exception = __cxa_allocate_exception(0x40uLL);
                caulk::make_string((caulk *)"", (uint64_t)&v51);
                std::logic_error::logic_error(&v52, &v51);
                v52.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
                std::logic_error::logic_error(&v53, &v52);
                v55 = 0;
                v56 = 0;
                v57 = 0;
                v58 = -1;
                v53.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
                v54 = &unk_1E69A1230;
                boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v53);
                *(_QWORD *)&v67[6] = "static void AMCP::Graph::Manifest_Queue::wait_until_new_devices_have_input(const st"
                                     "d::shared_ptr<Manifest> &, const Manifest_Execution_Context &, Anchor_Policy)";
                v68 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Queue.cpp";
                v69 = 470;
                applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v49);
                v46 = off_1E69A20A0;
                v47 = v49;
                *(_QWORD *)&v48 = v50;
                v49 = 0uLL;
                v50 = 0;
                boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v46);
                boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
              }
              AMCP::Graph::Manifest::calculate_anchor_time((uint64_t)buf, *(_QWORD *)(a1 + 8), (float *)(a1 + 32), 2, 0, 0);
              AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)&v51, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72), *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 8) + 80));
              LODWORD(v46) = 2;
              v47 = 0x4000000000000000uLL;
              v48 = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
              *(_OWORD *)&v51.__r_.__value_.__l.__data_ = 0uLL;
              boost::operators_impl::operator-((AMCP::DAL::DAL_Time *)&v53, (uint64_t)buf, (AMCP::DAL::DAL_Time_Delta *)&v46);
              v28 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
              if (*((_QWORD *)&v48 + 1))
              {
                v29 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
                do
                  v30 = __ldaxr(v29);
                while (__stlxr(v30 - 1, v29));
                if (!v30)
                {
                  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                  std::__shared_weak_count::__release_weak(v28);
                }
              }
              size = (std::__shared_weak_count *)v51.__r_.__value_.__l.__size_;
              if (v51.__r_.__value_.__l.__size_)
              {
                v32 = (unint64_t *)(v51.__r_.__value_.__l.__size_ + 8);
                do
                  v33 = __ldaxr(v32);
                while (__stlxr(v33 - 1, v32));
                if (!v33)
                {
                  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                  std::__shared_weak_count::__release_weak(size);
                }
              }
              host_time = AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)&v53);
              if (host_time > mach_absolute_time())
              {
                v35 = AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)&v53);
                mach_wait_until(v35);
              }
              v36 = v56;
              if (v56)
              {
                v37 = (unint64_t *)&v56->__shared_owners_;
                do
                  v38 = __ldaxr(v37);
                while (__stlxr(v38 - 1, v37));
                if (!v38)
                {
                  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                  std::__shared_weak_count::__release_weak(v36);
                }
              }
              v39 = *(std::__shared_weak_count **)&v67[6];
              if (*(_QWORD *)&v67[6])
              {
                v40 = (unint64_t *)(*(_QWORD *)&v67[6] + 8);
                do
                  v41 = __ldaxr(v40);
                while (__stlxr(v41 - 1, v40));
                if (!v41)
                {
                  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                  std::__shared_weak_count::__release_weak(v39);
                }
              }
              v20 = v61[0];
            }
          }
        }
        std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v20);
      }
    }
  }
}

void sub_1B5936EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;

  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)(v30 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0,std::allocator<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP5Graph14Manifest_Queue16enqueue_manifestERKNSt3__110shared_ptrINS0_8ManifestEEENS_15Transport_StateES8_RKNS2_6vectorINS_7IO_Core18Play_State_Manager12Play_RequestENS2_9allocatorISC_EEEERKNS0_26Manifest_Execution_ContextE13Anchor_PolicyNS2_7variantIJNS_3DAL11Sample_TimeEyEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0,std::allocator<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0>,void ()(void)>::target_type()
{
}

uint64_t AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v7 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = MEMORY[0x1E0DDB760];
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v11 + 16;
  *(_QWORD *)(a1 + 80) = caulk::mach::details::retain_os_object(*(caulk::mach::details **)(a2 + 80), (void *)a2);
  v12 = *(_OWORD *)(a2 + 88);
  v13 = *(_OWORD *)(a2 + 113);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 113) = v13;
  v14 = MEMORY[0x1E0DDB768];
  *(_OWORD *)(a1 + 88) = v12;
  *(_QWORD *)(a1 + 72) = v14 + 16;
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  v15 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = v15;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request>::__init_with_size[abi:ne180100]<AMCP::IO_Core::Play_State_Manager::Play_Request*,AMCP::IO_Core::Play_State_Manager::Play_Request*>((_QWORD *)(a1 + 152), *(const void **)(a2 + 152), *(_QWORD *)(a2 + 160), (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2);
  v16 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v16;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  return a1;
}

void sub_1B59371A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  caulk::mach::os_workgroup_interval_managed *v3;

  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed(v3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Manifest_Queue::process_once(AMCP::Graph::Manifest_Queue *a1, int a2, unsigned int a3)
{
  AMCP::Graph::Manifest_Queue **v4;
  std::string *v5;
  AMCP::Graph::Manifest_Queue *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  AMCP::Log::Scope_Registry *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  AMCP::Log::Scope_Registry *v18;
  uint64_t v19;
  std::logic_error_vtbl *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::logic_error_vtbl *v24;
  unint64_t v25;
  AMCP::Log::Scope_Registry *v26;
  uint64_t v27;
  std::logic_error_vtbl *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::logic_error_vtbl *v32;
  unint64_t v33;
  std::__shared_weak_count *imp;
  unint64_t *v35;
  unint64_t v36;
  AMCP::Log::Scope_Registry *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  std::logic_error ***v44;
  const char *v45;
  std::logic_error **v46;
  std::logic_error **v47;
  std::logic_error *v48;
  const char *v49;
  std::logic_error_vtbl *v50;
  unint64_t *v51;
  unint64_t v52;
  double sample_time;
  std::logic_error *v54;
  const char *v55;
  std::logic_error_vtbl *v56;
  unint64_t *v57;
  unint64_t v58;
  AMCP::Log::Scope_Registry *v59;
  double v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::logic_error_vtbl *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  os_unfair_lock_s *v70;
  os_unfair_lock_s *v71;
  std::logic_error *v72;
  os_unfair_lock_s *v73;
  char v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  os_unfair_lock_s ***v82;
  os_unfair_lock_s ***i;
  uint64_t overload_time_in_host_time;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  __n128 v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  void (__cdecl *v105)(std::logic_error *__hidden);
  unint64_t *v106;
  unint64_t v107;
  _opaque_pthread_t *v108;
  mach_port_t v109;
  std::logic_error *v110;
  uint64_t v111;
  int v112;
  const char *v113;
  std::logic_error v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t *v133;
  std::__shared_weak_count *v134;
  void (__cdecl *v135)(std::logic_error *__hidden);
  unint64_t *v136;
  unint64_t v137;
  _opaque_pthread_t *v138;
  mach_port_t v139;
  std::logic_error *v140;
  uint64_t v141;
  int v142;
  const char *v143;
  std::logic_error v144;
  std::__shared_weak_count *v145;
  NSObject *v146;
  unint64_t *v147;
  unint64_t v148;
  _opaque_pthread_t *v149;
  mach_port_t v150;
  _QWORD *v151;
  std::logic_error *v152;
  _QWORD *v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  std::logic_error v157;
  void (__cdecl *v158)(std::logic_error *__hidden);
  _opaque_pthread_t *v159;
  mach_port_t v160;
  void *exception;
  void (__cdecl *v162)(std::logic_error *__hidden);
  _opaque_pthread_t *v163;
  mach_port_t v164;
  void *v165;
  void (__cdecl *v166)(std::logic_error *__hidden);
  _opaque_pthread_t *v167;
  mach_port_t v168;
  void *v169;
  void (__cdecl *v170)(std::logic_error *__hidden);
  _opaque_pthread_t *v171;
  mach_port_t v172;
  void *v173;
  void (__cdecl *v174)(std::logic_error *__hidden);
  _opaque_pthread_t *v175;
  mach_port_t v176;
  void *v177;
  void (__cdecl *v178)(std::logic_error *__hidden);
  _opaque_pthread_t *v179;
  mach_port_t v180;
  void *v181;
  uint64_t wake_time_in_host_time;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  AMCP::DAL::DAL_Time_Delta *v186;
  int v187;
  AMCP::Graph::Manifest_Queue **v188;
  uint64_t *v189;
  uint64_t *v190;
  std::logic_error ***v191;
  unsigned int v193;
  std::logic_error v194;
  void *v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  uint64_t v198;
  int v199;
  std::__shared_weak_count *v200;
  std::__shared_weak_count *v201;
  std::__shared_weak_count *v202;
  std::__shared_weak_count *v203;
  std::logic_error v204;
  uint64_t v205;
  std::string v206;
  uint64_t v207;
  _BYTE v208[32];
  uint64_t v209;
  uint64_t v210;
  int v211;
  double v212[2];
  std::logic_error v213;
  std::string v214;
  char v215;
  _BYTE v216[24];
  _BYTE v217[24];
  int v218;
  std::logic_error buf[3];
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;
  uint64_t v230;

  v4 = (AMCP::Graph::Manifest_Queue **)a1;
  v230 = *MEMORY[0x1E0C80C00];
  v5 = AMCP::Graph::Manifest_Queue::maybe_acquire_new_manifest(a1);
  if ((_DWORD)v5)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v158 = buf[0].~logic_error;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled((os_log_t)v158, OS_LOG_TYPE_ERROR))
    {
      v159 = pthread_self();
      v160 = pthread_mach_thread_np(v159);
      LODWORD(buf[0].__vftable) = 67109890;
      HIDWORD(buf[0].__vftable) = v160;
      LOWORD(buf[0].__imp_.__imp_) = 2080;
      *(const char **)((char *)&buf[0].__imp_.__imp_ + 2) = "Manifest_Queue.cpp";
      WORD1(buf[1].__vftable) = 1024;
      HIDWORD(buf[1].__vftable) = 385;
      LOWORD(buf[1].__imp_.__imp_) = 2080;
      *(const char **)((char *)&buf[1].__imp_.__imp_ + 2) = "not (success == Start_Stop_Result::success)";
      _os_log_error_impl(&dword_1B57BA000, (os_log_t)v158, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s maybe_acquire_new_manifest failed", (uint8_t *)buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v204);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"maybe_acquire_new_manifest failed", (uint64_t)v208);
    std::logic_error::logic_error((std::logic_error *)&v214, (const std::string *)v208);
    v214.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error(&v194, (const std::logic_error *)&v214);
    v196 = 0;
    v197 = 0;
    v198 = 0;
    v199 = -1;
    v194.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v195 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v194);
    buf[2].__vftable = (std::logic_error_vtbl *)"void AMCP::Graph::Manifest_Queue::process_once(Handle_Overloads, Process_Once_Option)";
    buf[2].__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Queue.cpp";
    LODWORD(v220) = 385;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v206.__r_.__value_.__l.__data_);
    *(_OWORD *)&v216[8] = *(_OWORD *)&v206.__r_.__value_.__l.__data_;
    *(_QWORD *)v216 = off_1E69A20A0;
    *(_QWORD *)v217 = *((_QWORD *)&v206.__r_.__value_.__l + 2);
    memset(&v206, 0, sizeof(v206));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v216);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v6 = v4[70];
  if (!v6)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v162 = buf[0].~logic_error;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled((os_log_t)v162, OS_LOG_TYPE_ERROR))
    {
      v163 = pthread_self();
      v164 = pthread_mach_thread_np(v163);
      LODWORD(buf[0].__vftable) = 67109890;
      HIDWORD(buf[0].__vftable) = v164;
      LOWORD(buf[0].__imp_.__imp_) = 2080;
      *(const char **)((char *)&buf[0].__imp_.__imp_ + 2) = "Manifest_Queue.cpp";
      WORD1(buf[1].__vftable) = 1024;
      HIDWORD(buf[1].__vftable) = 386;
      LOWORD(buf[1].__imp_.__imp_) = 2080;
      *(const char **)((char *)&buf[1].__imp_.__imp_ + 2) = "not (m_current_manifiest)";
      _os_log_error_impl(&dword_1B57BA000, (os_log_t)v162, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s no manifest", (uint8_t *)buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v204);
    v165 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"no manifest", (uint64_t)v208);
    std::logic_error::logic_error((std::logic_error *)&v214, (const std::string *)v208);
    v214.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error(&v194, (const std::logic_error *)&v214);
    v196 = 0;
    v197 = 0;
    v198 = 0;
    v199 = -1;
    v194.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v195 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v194);
    buf[2].__vftable = (std::logic_error_vtbl *)"void AMCP::Graph::Manifest_Queue::process_once(Handle_Overloads, Process_Once_Option)";
    buf[2].__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Queue.cpp";
    LODWORD(v220) = 386;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v206.__r_.__value_.__l.__data_);
    *(_OWORD *)&v216[8] = *(_OWORD *)&v206.__r_.__value_.__l.__data_;
    *(_QWORD *)v216 = off_1E69A20A0;
    *(_QWORD *)v217 = *((_QWORD *)&v206.__r_.__value_.__l + 2);
    memset(&v206, 0, sizeof(v206));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v216);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v165, (uint64_t)buf);
  }
  if ((*(_DWORD *)v6 & 0xFFFFFFFE) != 2)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v166 = buf[0].~logic_error;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled((os_log_t)v166, OS_LOG_TYPE_ERROR))
    {
      v167 = pthread_self();
      v168 = pthread_mach_thread_np(v167);
      LODWORD(buf[0].__vftable) = 67109890;
      HIDWORD(buf[0].__vftable) = v168;
      LOWORD(buf[0].__imp_.__imp_) = 2080;
      *(const char **)((char *)&buf[0].__imp_.__imp_ + 2) = "Manifest_Queue.cpp";
      WORD1(buf[1].__vftable) = 1024;
      HIDWORD(buf[1].__vftable) = 389;
      LOWORD(buf[1].__imp_.__imp_) = 2080;
      *(const char **)((char *)&buf[1].__imp_.__imp_ + 2) = "not (m_current_manifiest->is_processing() or m_current_manif"
                                                            "iest->is_prewarming())";
      _os_log_error_impl(&dword_1B57BA000, (os_log_t)v166, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v204);
    v169 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)v208);
    std::logic_error::logic_error((std::logic_error *)&v214, (const std::string *)v208);
    v214.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error(&v194, (const std::logic_error *)&v214);
    v196 = 0;
    v197 = 0;
    v198 = 0;
    v199 = -1;
    v194.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v195 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v194);
    buf[2].__vftable = (std::logic_error_vtbl *)"void AMCP::Graph::Manifest_Queue::process_once(Handle_Overloads, Process_Once_Option)";
    buf[2].__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Queue.cpp";
    LODWORD(v220) = 389;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v206.__r_.__value_.__l.__data_);
    *(_OWORD *)&v216[8] = *(_OWORD *)&v206.__r_.__value_.__l.__data_;
    *(_QWORD *)v216 = off_1E69A20A0;
    *(_QWORD *)v217 = *((_QWORD *)&v206.__r_.__value_.__l + 2);
    memset(&v206, 0, sizeof(v206));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v216);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v169, (uint64_t)buf);
  }
  v7 = *((_QWORD *)v6 + 9);
  v8 = (std::__shared_weak_count *)*((_QWORD *)v6 + 10);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = *(_QWORD *)(v7 + 64);
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    v11 = *(_QWORD *)(v7 + 64);
  }
  AMCP::Graph::Manifest_Counter::get_current_cycle_anchor_time((uint64_t)buf, v11);
  if (((_BYTE)v4[39] & 2) == 0)
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)(v4 + 39));
  AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)buf);
  AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)buf);
  v13 = (AMCP::Log::Scope_Registry *)kdebug_trace();
  v14 = (std::__shared_weak_count *)buf[2].__vftable;
  if (buf[2].__vftable)
  {
    v15 = (unint64_t *)&buf[2].~logic_error_0;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (uint64_t)v4[70];
  if (*(_DWORD *)v17 == 3)
  {
    v193 = *(_DWORD *)v4;
    AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)buf, *(_QWORD *)(v17 + 72), *(std::__shared_weak_count **)(v17 + 80));
    v19 = *(_QWORD *)(*(_QWORD *)(v17 + 72) + 64);
    v20 = *(std::logic_error_vtbl **)(v19 + 24);
    v21 = *(std::__shared_weak_count **)(v19 + 32);
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      v24 = buf[0].__vftable;
      do
        v25 = __ldaxr(v22);
      while (__stlxr(v25 - 1, v22));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    else
    {
      v24 = buf[0].__vftable;
    }
    imp = (std::__shared_weak_count *)buf[0].__imp_.__imp_;
    if (buf[0].__imp_.__imp_)
    {
      v35 = (unint64_t *)(buf[0].__imp_.__imp_ + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
        std::__shared_weak_count::__release_weak(imp);
      }
    }
    if (v24 != v20)
    {
      AMCP::Log::Scope_Registry::get(v18);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v174 = buf[0].~logic_error;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled((os_log_t)v174, OS_LOG_TYPE_ERROR))
      {
        v175 = pthread_self();
        v176 = pthread_mach_thread_np(v175);
        LODWORD(buf[0].__vftable) = 67109890;
        HIDWORD(buf[0].__vftable) = v176;
        LOWORD(buf[0].__imp_.__imp_) = 2080;
        *(const char **)((char *)&buf[0].__imp_.__imp_ + 2) = "Manifest.cpp";
        WORD1(buf[1].__vftable) = 1024;
        HIDWORD(buf[1].__vftable) = 686;
        LOWORD(buf[1].__imp_.__imp_) = 2080;
        *(const char **)((char *)&buf[1].__imp_.__imp_ + 2) = "not (get_master_timebase() == m_inventory->get_manifest_co"
                                                              "unter().get_master_timebase())";
        _os_log_error_impl(&dword_1B57BA000, (os_log_t)v174, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v204);
      v177 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)v208);
      std::logic_error::logic_error((std::logic_error *)&v214, (const std::string *)v208);
      v214.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
      std::logic_error::logic_error(&v194, (const std::logic_error *)&v214);
      v196 = 0;
      v197 = 0;
      v198 = 0;
      v199 = -1;
      v194.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v195 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v194);
      buf[2].__vftable = (std::logic_error_vtbl *)"void AMCP::Graph::Manifest::process_once(Object_ID, const Manifest_Exe"
                                                  "cution_Context &, Handle_Overloads, Process_Once_Option)";
      buf[2].__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest.cpp";
      LODWORD(v220) = 686;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v206.__r_.__value_.__l.__data_);
      *(_OWORD *)&v216[8] = *(_OWORD *)&v206.__r_.__value_.__l.__data_;
      *(_QWORD *)v216 = off_1E69A20A0;
      *(_QWORD *)v217 = *((_QWORD *)&v206.__r_.__value_.__l + 2);
      memset(&v206, 0, sizeof(v206));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v216);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v177, (uint64_t)buf);
    }
    AMCP::Graph::create_cycle_info((uint64_t)&v194, *(_QWORD *)(*(_QWORD *)(v17 + 72) + 64), (float *)v4 + 78);
    v187 = a2;
    AMCP::Graph::Manifest_Inventory::begin_cycle(*(_QWORD **)(v17 + 72), (uint64_t *)(v17 + 96), (float *)v4 + 78);
    v229 = 0;
    v227 = 0u;
    v228 = 0u;
    v225 = 0u;
    v226 = 0u;
    v223 = 0u;
    v224 = 0u;
    v221 = 0u;
    v222 = 0u;
    v220 = 0u;
    memset(buf, 0, sizeof(buf));
    v37 = (AMCP::Log::Scope_Registry *)AMCP::Graph::io_proc_cycle_info_to_audio_io_cycle_info((uint64_t)&v194, (uint64_t)buf);
    v38 = *(uint64_t **)(v17 + 8);
    v39 = *(uint64_t **)(v17 + 16);
    while (v38 != v39)
    {
      v40 = *v38;
      if (*(_DWORD *)(*v38 + 88) != 3)
      {
        AMCP::Log::Scope_Registry::get(v37);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v216, "com.apple.coreaudio", "AMCP");
        v145 = *(std::__shared_weak_count **)&v216[8];
        v146 = **(NSObject ***)v216;
        if (*(_QWORD *)&v216[8])
        {
          v147 = (unint64_t *)(*(_QWORD *)&v216[8] + 8);
          do
            v148 = __ldaxr(v147);
          while (__stlxr(v148 - 1, v147));
          if (!v148)
          {
            ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
            std::__shared_weak_count::__release_weak(v145);
          }
        }
        if (os_log_type_enabled(v146, OS_LOG_TYPE_ERROR))
        {
          v149 = pthread_self();
          v150 = pthread_mach_thread_np(v149);
          v151 = (_QWORD *)(v40 + 64);
          if (*(char *)(v40 + 87) < 0)
            v151 = (_QWORD *)*v151;
          *(_DWORD *)v216 = 67110146;
          *(_DWORD *)&v216[4] = v150;
          *(_WORD *)&v216[8] = 2080;
          *(_QWORD *)&v216[10] = "Manifest_Task.cpp";
          *(_WORD *)&v216[18] = 1024;
          *(_DWORD *)&v216[20] = 150;
          *(_WORD *)v217 = 2080;
          *(_QWORD *)&v217[2] = "not (m_processing_state == Processing_State::Processing)";
          *(_WORD *)&v217[10] = 2080;
          *(_QWORD *)&v217[12] = v151;
          _os_log_error_impl(&dword_1B57BA000, v146, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s begin_cycle call in wrong state in %s", v216, 0x2Cu);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)v212);
        v152 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
        v153 = (_QWORD *)(v40 + 64);
        if (*(char *)(v40 + 87) < 0)
          v153 = (_QWORD *)*v153;
        caulk::make_string((caulk *)"begin_cycle call in wrong state in %s", (uint64_t)&v214, v153);
        std::logic_error::logic_error(&v213, &v214);
        v154 = MEMORY[0x1E0DE5018];
        v213.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error((std::logic_error *)v208, &v213);
        *(_QWORD *)&v208[24] = 0;
        v209 = 0;
        v210 = 0;
        v211 = -1;
        *(_QWORD *)v208 = off_1E69A1208;
        *(_QWORD *)&v208[16] = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v216, (uint64_t)v208);
        *(_QWORD *)&v217[8] = "void AMCP::Graph::Manifest_Task::begin_cycle(Object_ID, const Proc_Cycle_Info &)";
        *(_QWORD *)&v217[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
        v218 = 150;
        std::vector<void *>::vector(&v204);
        v155 = backtrace((void **)&v204.~logic_error, (unint64_t)(v204.__imp_.__imp_ - (const char *)v204.__vftable) >> 3);
        std::vector<void *>::resize((char **)&v204, v155);
        *(std::logic_error *)&v206.__r_.__value_.__r.__words[1] = v204;
        v206.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
        v207 = v205;
        v204.__vftable = 0;
        v204.__imp_.__imp_ = 0;
        v205 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v216, (uint64_t)&v206);
        v152[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::logic_error::logic_error(v152, (const std::logic_error *)v216);
        v152->__vftable = (std::logic_error_vtbl *)(v154 + 16);
        v152[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
        v156 = *(_QWORD *)v217;
        v152[1].__imp_.__imp_ = *(const char **)v217;
        if (v156)
          (*(void (**)(uint64_t))(*(_QWORD *)v156 + 24))(v156);
        v157 = *(std::logic_error *)&v217[8];
        LODWORD(v152[3].__vftable) = v218;
        v152[2] = v157;
        v152->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
        v152[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
        v152[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
      }
      v37 = *(AMCP::Log::Scope_Registry **)(*(_QWORD *)(v40 + 48) + 216);
      if (v37)
      {
        LODWORD(v206.__r_.__value_.__l.__data_) = v193;
        v37 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(AMCP::Log::Scope_Registry *, std::string *, std::logic_error *))(*(_QWORD *)v37 + 48))(v37, &v206, buf);
      }
      v38 += 2;
    }
    AMCP::Graph::Manifest::calculate_all_required_input_samples(v17, (uint64_t)(v4 + 39));
    v186 = (AMCP::DAL::DAL_Time_Delta *)(v4 + 39);
    v41 = *(uint64_t **)(v17 + 8);
    v188 = v4;
    v189 = *(uint64_t **)(v17 + 16);
    if (v41 != v189)
    {
      do
      {
        v190 = v41;
        v42 = *v41;
        v43 = *(_QWORD *)(*(_QWORD *)(*v41 + 48) + 120);
        if (v43)
        {
          (*(void (**)(std::logic_error *__return_ptr))(*(_QWORD *)v43 + 48))(&v213);
          if (v213.__vftable)
          {
            v44 = *(std::logic_error ****)(v42 + 24);
            v191 = *(std::logic_error ****)(v42 + 32);
            if (v44 != v191)
            {
              v45 = 0;
              do
              {
                v46 = *v44;
                v47 = v44[1];
                while (v46 != v47)
                {
                  v48 = *v46;
                  buf[0] = (*v46)[13];
                  v49 = v48[14].__imp_.__imp_;
                  buf[1].__vftable = v48[14].__vftable;
                  buf[1].__imp_.__imp_ = v49;
                  v50 = v48[15].__vftable;
                  buf[2].__vftable = v50;
                  if (v50)
                  {
                    v51 = (unint64_t *)&v50->~logic_error_0;
                    do
                      v52 = __ldxr(v51);
                    while (__stxr(v52 + 1, v51));
                  }
                  sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)buf);
                  v54 = *v46;
                  *(std::logic_error *)v216 = (*v46)[13];
                  v55 = v54[14].__imp_.__imp_;
                  *(_QWORD *)&v216[16] = v54[14].__vftable;
                  *(_QWORD *)v217 = v55;
                  v56 = v54[15].__vftable;
                  *(_QWORD *)&v217[8] = v56;
                  if (v56)
                  {
                    v57 = (unint64_t *)&v56->~logic_error_0;
                    do
                      v58 = __ldxr(v57);
                    while (__stxr(v58 + 1, v57));
                  }
                  v60 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v216)
                      + *(double *)&(*v46)[10].__vftable;
                  v212[0] = sample_time;
                  v212[1] = v60;
                  v61 = *(std::__shared_weak_count **)&v217[8];
                  if (*(_QWORD *)&v217[8])
                  {
                    v62 = (unint64_t *)(*(_QWORD *)&v217[8] + 8);
                    do
                      v63 = __ldaxr(v62);
                    while (__stlxr(v63 - 1, v62));
                    if (!v63)
                    {
                      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                      std::__shared_weak_count::__release_weak(v61);
                    }
                  }
                  v64 = (std::__shared_weak_count *)buf[2].__vftable;
                  if (buf[2].__vftable)
                  {
                    v65 = (unint64_t *)&buf[2].~logic_error_0;
                    do
                      v66 = __ldaxr(v65);
                    while (__stlxr(v66 - 1, v65));
                    if (!v66)
                    {
                      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                      std::__shared_weak_count::__release_weak(v64);
                    }
                  }
                  if (round(v212[0]) < 0.0)
                  {
                    AMCP::Log::Scope_Registry::get(v59);
                    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
                    v134 = (std::__shared_weak_count *)buf[0].__imp_.__imp_;
                    v135 = buf[0].~logic_error;
                    if (buf[0].__imp_.__imp_)
                    {
                      v136 = (unint64_t *)(buf[0].__imp_.__imp_ + 8);
                      do
                        v137 = __ldaxr(v136);
                      while (__stlxr(v137 - 1, v136));
                      if (!v137)
                      {
                        ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                        std::__shared_weak_count::__release_weak(v134);
                      }
                    }
                    if (os_log_type_enabled((os_log_t)v135, OS_LOG_TYPE_ERROR))
                    {
                      v138 = pthread_self();
                      v139 = pthread_mach_thread_np(v138);
                      LODWORD(buf[0].__vftable) = 67109890;
                      HIDWORD(buf[0].__vftable) = v139;
                      LOWORD(buf[0].__imp_.__imp_) = 2080;
                      *(const char **)((char *)&buf[0].__imp_.__imp_ + 2) = "Device_Connection.cpp";
                      WORD1(buf[1].__vftable) = 1024;
                      HIDWORD(buf[1].__vftable) = 128;
                      LOWORD(buf[1].__imp_.__imp_) = 2080;
                      *(const char **)((char *)&buf[1].__imp_.__imp_ + 2) = "not (required_samples.start() >= 0_S)";
                      _os_log_error_impl(&dword_1B57BA000, (os_log_t)v135, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to read sample before 0", (uint8_t *)buf, 0x22u);
                    }
                    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v215);
                    v140 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
                    caulk::make_string((caulk *)"Attempt to read sample before 0", (uint64_t)&v206);
                    std::logic_error::logic_error(&v204, &v206);
                    v141 = MEMORY[0x1E0DE5018];
                    v204.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
                    std::logic_error::logic_error((std::logic_error *)v216, &v204);
                    memset(v217, 0, sizeof(v217));
                    v218 = -1;
                    *(_QWORD *)v216 = off_1E69A1208;
                    *(_QWORD *)&v216[16] = &unk_1E69A1230;
                    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v216);
                    buf[2].__vftable = (std::logic_error_vtbl *)"void AMCP::IO_Core::Device_Connection::set_required_samp"
                                                                "les_for_stream(Object_ID, size_t, const DAL::Sample_Time_Range &)";
                    buf[2].__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
                    LODWORD(v220) = 128;
                    std::vector<void *>::vector(&v214);
                    v142 = backtrace((void **)v214.__r_.__value_.__l.__data_, (v214.__r_.__value_.__l.__size_ - v214.__r_.__value_.__r.__words[0]) >> 3);
                    std::vector<void *>::resize(&v214.__r_.__value_.__l.__data_, v142);
                    *(std::string *)&v208[8] = v214;
                    *(_QWORD *)v208 = off_1E69A20A0;
                    memset(&v214, 0, sizeof(v214));
                    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v208);
                    v140[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
                    std::logic_error::logic_error(v140, buf);
                    v140->__vftable = (std::logic_error_vtbl *)(v141 + 16);
                    v140[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
                    v143 = buf[1].__imp_.__imp_;
                    v140[1].__imp_.__imp_ = buf[1].__imp_.__imp_;
                    if (v143)
                      (*(void (**)(const char *))(*(_QWORD *)v143 + 24))(v143);
                    v144 = buf[2];
                    LODWORD(v140[3].__vftable) = v220;
                    v140[2] = v144;
                    v140->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
                    v140[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
                    v140[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
                  }
                  v67 = v213.__vftable;
                  v68 = (std::__shared_weak_count *)v213.~logic_error_0;
                  if (!v68
                    || (v68 = std::__shared_weak_count::lock(v68), (v69 = v68) == 0)
                    || (v70 = (os_unfair_lock_s *)v67->~logic_error) == 0)
                  {
                    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v68);
                    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
                    v104 = (std::__shared_weak_count *)buf[0].__imp_.__imp_;
                    v105 = buf[0].~logic_error;
                    if (buf[0].__imp_.__imp_)
                    {
                      v106 = (unint64_t *)(buf[0].__imp_.__imp_ + 8);
                      do
                        v107 = __ldaxr(v106);
                      while (__stlxr(v107 - 1, v106));
                      if (!v107)
                      {
                        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                        std::__shared_weak_count::__release_weak(v104);
                      }
                    }
                    if (os_log_type_enabled((os_log_t)v105, OS_LOG_TYPE_ERROR))
                    {
                      v108 = pthread_self();
                      v109 = pthread_mach_thread_np(v108);
                      LODWORD(buf[0].__vftable) = 67109890;
                      HIDWORD(buf[0].__vftable) = v109;
                      LOWORD(buf[0].__imp_.__imp_) = 2080;
                      *(const char **)((char *)&buf[0].__imp_.__imp_ + 2) = "Device_Connection.cpp";
                      WORD1(buf[1].__vftable) = 1024;
                      HIDWORD(buf[1].__vftable) = 130;
                      LOWORD(buf[1].__imp_.__imp_) = 2080;
                      *(const char **)((char *)&buf[1].__imp_.__imp_ + 2) = "not (device_state.operator BOOL())";
                      _os_log_error_impl(&dword_1B57BA000, (os_log_t)v105, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)buf, 0x22u);
                    }
                    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v215);
                    v110 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
                    caulk::make_string((caulk *)"", (uint64_t)&v206);
                    std::logic_error::logic_error(&v204, &v206);
                    v111 = MEMORY[0x1E0DE5018];
                    v204.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
                    std::logic_error::logic_error((std::logic_error *)v216, &v204);
                    memset(v217, 0, sizeof(v217));
                    v218 = -1;
                    *(_QWORD *)v216 = off_1E69A1208;
                    *(_QWORD *)&v216[16] = &unk_1E69A1230;
                    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v216);
                    buf[2].__vftable = (std::logic_error_vtbl *)"void AMCP::IO_Core::Device_Connection::set_required_samp"
                                                                "les_for_stream(Object_ID, size_t, const DAL::Sample_Time_Range &)";
                    buf[2].__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
                    LODWORD(v220) = 130;
                    std::vector<void *>::vector(&v214);
                    v112 = backtrace((void **)v214.__r_.__value_.__l.__data_, (v214.__r_.__value_.__l.__size_ - v214.__r_.__value_.__r.__words[0]) >> 3);
                    std::vector<void *>::resize(&v214.__r_.__value_.__l.__data_, v112);
                    *(std::string *)&v208[8] = v214;
                    *(_QWORD *)v208 = off_1E69A20A0;
                    memset(&v214, 0, sizeof(v214));
                    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v208);
                    v110[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
                    std::logic_error::logic_error(v110, buf);
                    v110->__vftable = (std::logic_error_vtbl *)(v111 + 16);
                    v110[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
                    v113 = buf[1].__imp_.__imp_;
                    v110[1].__imp_.__imp_ = buf[1].__imp_.__imp_;
                    if (v113)
                      (*(void (**)(const char *))(*(_QWORD *)v113 + 24))(v113);
                    v114 = buf[2];
                    LODWORD(v110[3].__vftable) = v220;
                    v110[2] = v114;
                    v110->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
                    v110[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
                    v110[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
                  }
                  v71 = v70 + 1;
                  os_unfair_lock_lock(v70 + 1);
                  buf[0].__vftable = (std::logic_error_vtbl *)&off_1E69716C8;
                  buf[0].__imp_.__imp_ = v45;
                  v72 = buf;
                  buf[1].__vftable = (std::logic_error_vtbl *)v212;
                  buf[1].__imp_.__imp_ = (const char *)buf;
                  v73 = v70 + 16;
                  do
                  {
                    v73 = *(os_unfair_lock_s **)&v73->_os_unfair_lock_opaque;
                    if (!v73)
                      break;
                    if (!v72)
                      std::__throw_bad_function_call[abi:ne180100]();
                    v74 = ((uint64_t (*)(std::logic_error *, os_unfair_lock_s *))v72->__vftable[2].~logic_error)(v72, &v73[14]);
                    v72 = (std::logic_error *)buf[1].__imp_.__imp_;
                  }
                  while ((v74 & 1) != 0);
                  if (v72 == buf)
                  {
                    v72 = buf;
                    v75 = 4;
                    goto LABEL_83;
                  }
                  if (v72)
                  {
                    v75 = 5;
LABEL_83:
                    (*((void (**)(void))&v72->~logic_error + v75))();
                  }
                  os_unfair_lock_unlock(v71);
                  v76 = (unint64_t *)&v69->__shared_owners_;
                  do
                    v77 = __ldaxr(v76);
                  while (__stlxr(v77 - 1, v76));
                  if (!v77)
                  {
                    ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                    std::__shared_weak_count::__release_weak(v69);
                  }
                  v46 += 2;
                }
                ++v45;
                v44 += 5;
              }
              while (v44 != v191);
            }
          }
        }
        else
        {
          v213.__vftable = 0;
          v213.__imp_.__imp_ = 0;
        }
        v78 = (std::__shared_weak_count *)v213.__imp_.__imp_;
        if (v213.__imp_.__imp_)
        {
          v79 = (unint64_t *)(v213.__imp_.__imp_ + 8);
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        v41 = v190 + 2;
      }
      while (v190 + 2 != v189);
    }
    v81 = *(_QWORD *)(v17 + 72);
    v82 = *(os_unfair_lock_s ****)(v81 + 112);
    for (i = *(os_unfair_lock_s ****)(v81 + 120); v82 != i; v82 += 2)
      AMCP::IO_Core::Device_Connection::begin_cycle(*v82, (std::string::size_type)&v194, v186);
    v4 = v188;
    if (v187)
      overload_time_in_host_time = -1;
    else
      overload_time_in_host_time = AMCP::Graph::Manifest::get_overload_time_in_host_time(v17, (uint64_t)v186);
    v115 = *(uint64_t **)(v17 + 8);
    v116 = *(uint64_t **)(v17 + 16);
    while (v115 != v116)
    {
      v117 = *v115;
      AMCP::Graph::Manifest_Task::maybe_create_data_flow_calculator(*v115);
      (*(void (**)(_QWORD, _QWORD, std::logic_error *, AMCP::DAL::DAL_Time_Delta *, uint64_t, _QWORD))(**(_QWORD **)(v117 + 104) + 16))(*(_QWORD *)(v117 + 104), v193, &v194, v186, overload_time_in_host_time, a3);
      v115 += 2;
    }
    v229 = 0;
    v227 = 0u;
    v228 = 0u;
    v225 = 0u;
    v226 = 0u;
    v223 = 0u;
    v224 = 0u;
    v221 = 0u;
    v222 = 0u;
    v220 = 0u;
    memset(buf, 0, sizeof(buf));
    AMCP::Graph::io_proc_cycle_info_to_audio_io_cycle_info((uint64_t)&v194, (uint64_t)buf);
    v118 = *(_QWORD *)(v17 + 8);
    v119 = *(_QWORD *)(v17 + 16);
    while (v118 != v119)
    {
      v120 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v118 + 48) + 280);
      if (v120)
      {
        LODWORD(v206.__r_.__value_.__l.__data_) = v193;
        (*(void (**)(uint64_t, std::string *, std::logic_error *))(*(_QWORD *)v120 + 48))(v120, &v206, buf);
      }
      v118 += 16;
    }
    v88.n128_f64[0] = AMCP::Graph::Manifest_Inventory::end_cycle(*(AMCP::Log::Scope_Registry **)(v17 + 72), (uint64_t)&v194, (uint64_t)v186);
    v121 = v203;
    if (v203)
    {
      v122 = (unint64_t *)&v203->__shared_owners_;
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 - 1, v122));
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v121->__on_zero_shared)(v121, v88);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
    v124 = v202;
    if (v202)
    {
      v125 = (unint64_t *)&v202->__shared_owners_;
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 - 1, v125));
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v124->__on_zero_shared)(v124, v88);
        std::__shared_weak_count::__release_weak(v124);
      }
    }
    v127 = v201;
    if (v201)
    {
      v128 = (unint64_t *)&v201->__shared_owners_;
      do
        v129 = __ldaxr(v128);
      while (__stlxr(v129 - 1, v128));
      if (!v129)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v127->__on_zero_shared)(v127, v88);
        std::__shared_weak_count::__release_weak(v127);
      }
    }
    v130 = v200;
    if (v200)
    {
      v131 = (unint64_t *)&v200->__shared_owners_;
      do
        v132 = __ldaxr(v131);
      while (__stlxr(v132 - 1, v131));
      if (!v132)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v130->__on_zero_shared)(v130, v88);
        std::__shared_weak_count::__release_weak(v130);
      }
    }
    v101 = v197;
    if (v197)
    {
      v133 = (unint64_t *)&v197->__shared_owners_;
      do
        v103 = __ldaxr(v133);
      while (__stlxr(v103 - 1, v133));
      goto LABEL_175;
    }
  }
  else
  {
    if (*(_DWORD *)v17 != 2)
    {
      AMCP::Log::Scope_Registry::get(v13);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v170 = buf[0].~logic_error;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled((os_log_t)v170, OS_LOG_TYPE_ERROR))
      {
        v171 = pthread_self();
        v172 = pthread_mach_thread_np(v171);
        LODWORD(buf[0].__vftable) = 67109890;
        HIDWORD(buf[0].__vftable) = v172;
        LOWORD(buf[0].__imp_.__imp_) = 2080;
        *(const char **)((char *)&buf[0].__imp_.__imp_ + 2) = "Manifest.cpp";
        WORD1(buf[1].__vftable) = 1024;
        HIDWORD(buf[1].__vftable) = 671;
        LOWORD(buf[1].__imp_.__imp_) = 2080;
        *(const char **)((char *)&buf[1].__imp_.__imp_ + 2) = "not (is_prewarming())";
        _os_log_error_impl(&dword_1B57BA000, (os_log_t)v170, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s prewarm_once() called before begin_processing()", (uint8_t *)buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v204);
      v173 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"prewarm_once() called before begin_processing()", (uint64_t)v208);
      std::logic_error::logic_error((std::logic_error *)&v214, (const std::string *)v208);
      v214.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
      std::logic_error::logic_error(&v194, (const std::logic_error *)&v214);
      v196 = 0;
      v197 = 0;
      v198 = 0;
      v199 = -1;
      v194.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v195 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v194);
      buf[2].__vftable = (std::logic_error_vtbl *)"void AMCP::Graph::Manifest::prewarm_once(Object_ID, const Manifest_Exe"
                                                  "cution_Context &)";
      buf[2].__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest.cpp";
      LODWORD(v220) = 671;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v206.__r_.__value_.__l.__data_);
      *(_OWORD *)&v216[8] = *(_OWORD *)&v206.__r_.__value_.__l.__data_;
      *(_QWORD *)v216 = off_1E69A20A0;
      *(_QWORD *)v217 = *((_QWORD *)&v206.__r_.__value_.__l + 2);
      memset(&v206, 0, sizeof(v206));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v216);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v173, (uint64_t)buf);
    }
    AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)buf, *(_QWORD *)(v17 + 72), *(std::__shared_weak_count **)(v17 + 80));
    v27 = *(_QWORD *)(*(_QWORD *)(v17 + 72) + 64);
    v28 = *(std::logic_error_vtbl **)(v27 + 24);
    v29 = *(std::__shared_weak_count **)(v27 + 32);
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = buf[0].__vftable;
      do
        v33 = __ldaxr(v30);
      while (__stlxr(v33 - 1, v30));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    else
    {
      v32 = buf[0].__vftable;
    }
    v85 = (std::__shared_weak_count *)buf[0].__imp_.__imp_;
    if (buf[0].__imp_.__imp_)
    {
      v86 = (unint64_t *)(buf[0].__imp_.__imp_ + 8);
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    if (v32 != v28)
    {
      AMCP::Log::Scope_Registry::get(v26);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v178 = buf[0].~logic_error;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled((os_log_t)v178, OS_LOG_TYPE_ERROR))
      {
        v179 = pthread_self();
        v180 = pthread_mach_thread_np(v179);
        LODWORD(buf[0].__vftable) = 67109890;
        HIDWORD(buf[0].__vftable) = v180;
        LOWORD(buf[0].__imp_.__imp_) = 2080;
        *(const char **)((char *)&buf[0].__imp_.__imp_ + 2) = "Manifest.cpp";
        WORD1(buf[1].__vftable) = 1024;
        HIDWORD(buf[1].__vftable) = 672;
        LOWORD(buf[1].__imp_.__imp_) = 2080;
        *(const char **)((char *)&buf[1].__imp_.__imp_ + 2) = "not (get_master_timebase() == m_inventory->get_manifest_co"
                                                              "unter().get_master_timebase())";
        _os_log_error_impl(&dword_1B57BA000, (os_log_t)v178, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v204);
      v181 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)v208);
      std::logic_error::logic_error((std::logic_error *)&v214, (const std::string *)v208);
      v214.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
      std::logic_error::logic_error(&v194, (const std::logic_error *)&v214);
      v196 = 0;
      v197 = 0;
      v198 = 0;
      v199 = -1;
      v194.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v195 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v194);
      buf[2].__vftable = (std::logic_error_vtbl *)"void AMCP::Graph::Manifest::prewarm_once(Object_ID, const Manifest_Exe"
                                                  "cution_Context &)";
      buf[2].__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest.cpp";
      LODWORD(v220) = 672;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v206.__r_.__value_.__l.__data_);
      *(_OWORD *)&v216[8] = *(_OWORD *)&v206.__r_.__value_.__l.__data_;
      *(_QWORD *)v216 = off_1E69A20A0;
      *(_QWORD *)v217 = *((_QWORD *)&v206.__r_.__value_.__l + 2);
      memset(&v206, 0, sizeof(v206));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v216);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v181, (uint64_t)buf);
    }
    AMCP::Graph::create_cycle_info((uint64_t)buf, *(_QWORD *)(*(_QWORD *)(v17 + 72) + 64), (float *)v4 + 78);
    AMCP::Graph::Manifest_Inventory::begin_cycle(*(_QWORD **)(v17 + 72), (uint64_t *)(v17 + 96), (float *)v4 + 78);
    v88.n128_f64[0] = AMCP::Graph::Manifest_Inventory::end_cycle(*(AMCP::Log::Scope_Registry **)(v17 + 72), (uint64_t)buf, (uint64_t)(v4 + 39));
    v89 = (std::__shared_weak_count *)*((_QWORD *)&v227 + 1);
    if (*((_QWORD *)&v227 + 1))
    {
      v90 = (unint64_t *)(*((_QWORD *)&v227 + 1) + 8);
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v89->__on_zero_shared)(v89, v88);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    v92 = (std::__shared_weak_count *)*((_QWORD *)&v226 + 1);
    if (*((_QWORD *)&v226 + 1))
    {
      v93 = (unint64_t *)(*((_QWORD *)&v226 + 1) + 8);
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v92->__on_zero_shared)(v92, v88);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    v95 = (std::__shared_weak_count *)v224;
    if ((_QWORD)v224)
    {
      v96 = (unint64_t *)(v224 + 8);
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v95->__on_zero_shared)(v95, v88);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
    v98 = (std::__shared_weak_count *)*((_QWORD *)&v221 + 1);
    if (*((_QWORD *)&v221 + 1))
    {
      v99 = (unint64_t *)(*((_QWORD *)&v221 + 1) + 8);
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v98->__on_zero_shared)(v98, v88);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    v101 = (std::__shared_weak_count *)buf[2].__vftable;
    if (buf[2].__vftable)
    {
      v102 = (unint64_t *)&buf[2].~logic_error_0;
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
LABEL_175:
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v101->__on_zero_shared)(v101, v88);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
  }
  if (AMCP::Graph::Manifest_Queue::timebases_are_valid(v4[70]))
  {
    wake_time_in_host_time = AMCP::Graph::Manifest_Queue::get_wake_time_in_host_time((AMCP::Graph::Manifest_Queue *)v4);
    AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)v208, *((_QWORD *)v4[70] + 9), *((std::__shared_weak_count **)v4[70] + 10));
    *(_DWORD *)v216 = 1;
    *(_QWORD *)&v216[8] = 0;
    *(_QWORD *)&v216[16] = wake_time_in_host_time;
    *(_OWORD *)v217 = *(_OWORD *)v208;
    *(_OWORD *)v208 = 0uLL;
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v216);
    AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)v216);
    AMCP::Graph::Manifest_Queue::get_sample_rate(v4[70]);
    kdebug_trace();
    v183 = *(std::__shared_weak_count **)&v217[8];
    if (*(_QWORD *)&v217[8])
    {
      v184 = (unint64_t *)(*(_QWORD *)&v217[8] + 8);
      do
        v185 = __ldaxr(v184);
      while (__stlxr(v185 - 1, v184));
      if (!v185)
      {
        ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
        std::__shared_weak_count::__release_weak(v183);
      }
    }
  }
}

void sub_1B59398E0()
{
  __cxa_end_catch();
  JUMPOUT(0x1B5939574);
}

void sub_1B59398F4()
{
  JUMPOUT(0x1B59398FCLL);
}

void sub_1B5939904()
{
  JUMPOUT(0x1B5939574);
}

void AMCP::Graph::Manifest_Queue::reanchor_after_time_change(AMCP::Graph::Manifest_Queue *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  float *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  AMCP::Log::Scope_Registry *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  AMCP::Log::Scope_Registry *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  _QWORD *i;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  double sample_time;
  _BOOL8 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  NSObject *v41;
  _opaque_pthread_t *v42;
  mach_port_t v43;
  void *v44;
  NSObject *v45;
  _opaque_pthread_t *v46;
  mach_port_t v47;
  void *exception;
  NSObject *v49;
  _opaque_pthread_t *v50;
  mach_port_t v51;
  void *v52;
  NSObject *v53;
  _opaque_pthread_t *v54;
  mach_port_t v55;
  void *v56;
  std::string v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  std::logic_error v60;
  uint64_t v61;
  std::string v62;
  uint64_t v63;
  std::logic_error v64;
  char v65;
  uint64_t (**v66)();
  std::string v67;
  std::__shared_weak_count *v68;
  std::string v69;
  std::logic_error v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint8_t buf[8];
  __int16 v77;
  char *v78;
  __int16 v79;
  int v80;
  __int16 v81;
  _BYTE v82[14];
  const char *v83;
  int v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 70);
  v4 = *(_QWORD *)(v2 + 72);
  v3 = *(std::__shared_weak_count **)(v2 + 80);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v45 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      v46 = pthread_self();
      v47 = pthread_mach_thread_np(v46);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v47;
      v77 = 2080;
      v78 = "Manifest_Queue.cpp";
      v79 = 1024;
      v80 = 597;
      v81 = 2080;
      *(_QWORD *)v82 = "not (m_current_manifiest->get_inventory())";
      _os_log_error_impl(&dword_1B57BA000, v45, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s We need a valid inventory in order to reanchor_after_time_change", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v60);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"We need a valid inventory in order to reanchor_after_time_change", (uint64_t)&v57);
    std::logic_error::logic_error((std::logic_error *)&v69, &v57);
    v69.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error(&v70, (const std::logic_error *)&v69);
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v75 = -1;
    v70.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v71 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v70);
    *(_QWORD *)&v82[6] = "void AMCP::Graph::Manifest_Queue::reanchor_after_time_change()";
    v83 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Queue.cpp";
    v84 = 597;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v62.__r_.__value_.__l.__data_);
    v67 = v62;
    v66 = off_1E69A20A0;
    memset(&v62, 0, sizeof(v62));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v66);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v8 = (float *)((char *)this + 312);
  AMCP::Graph::Manifest::calculate_anchor_time((uint64_t)&v57, *((_QWORD *)this + 70), (float *)this + 78, 2, 0, 0);
  v9 = *(std::__shared_weak_count **)(*((_QWORD *)this + 70) + 80);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = (AMCP::Log::Scope_Registry *)kdebug_trace();
  if (v9)
  {
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v15 = *((_QWORD *)this + 70);
  v17 = *(AMCP::Log::Scope_Registry **)(v15 + 72);
  v16 = *(std::__shared_weak_count **)(v15 + 80);
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = *(_DWORD *)this;
  for (i = (_QWORD *)*((_QWORD *)v17 + 3); i; i = (_QWORD *)*i)
  {
    v22 = i[12];
    v23 = *(_QWORD *)(v22 + 296);
    if (v23)
      *(_QWORD *)(v22 + 296) = v23 - 1;
  }
  v24 = *((_QWORD *)v17 + 8);
  v26 = v58;
  v25 = v59;
  if (!v59)
  {
    if (v58 == *(_QWORD *)(v24 + 24))
      goto LABEL_31;
LABEL_50:
    AMCP::Log::Scope_Registry::get(v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v41 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      v42 = pthread_self();
      v43 = pthread_mach_thread_np(v42);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v43;
      v77 = 2080;
      v78 = "Manifest_Counter.cpp";
      v79 = 1024;
      v80 = 48;
      v81 = 2080;
      *(_QWORD *)v82 = "not (anchor_time.get_clock() == m_master_timebase)";
      _os_log_error_impl(&dword_1B57BA000, v41, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v64);
    v44 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v62);
    std::logic_error::logic_error(&v60, &v62);
    v60.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v70, &v60);
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v75 = -1;
    v70.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v71 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v70);
    *(_QWORD *)&v82[6] = "void AMCP::Graph::Manifest_Counter::reanchor(const DAL_Time &)";
    v83 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Counter.cpp";
    v84 = 48;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v69.__r_.__value_.__l.__data_);
    v67 = v69;
    v66 = off_1E69A20A0;
    memset(&v69, 0, sizeof(v69));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v66);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v44, (uint64_t)buf);
  }
  v27 = (unint64_t *)&v59->__shared_owners_;
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
  v29 = *(_QWORD *)(v24 + 24);
  do
    v30 = __ldaxr(v27);
  while (__stlxr(v30 - 1, v27));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  if (v26 != v29)
    goto LABEL_50;
LABEL_31:
  if (!*(_BYTE *)v24)
  {
    AMCP::Log::Scope_Registry::get(v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v49 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      v50 = pthread_self();
      v51 = pthread_mach_thread_np(v50);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v51;
      v77 = 2080;
      v78 = "Manifest_Counter.cpp";
      v79 = 1024;
      v80 = 49;
      v81 = 2080;
      *(_QWORD *)v82 = "not (is_running())";
      _os_log_error_impl(&dword_1B57BA000, v49, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v64);
    v52 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v62);
    std::logic_error::logic_error(&v60, &v62);
    v60.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v70, &v60);
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v75 = -1;
    v70.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v71 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v70);
    *(_QWORD *)&v82[6] = "void AMCP::Graph::Manifest_Counter::reanchor(const DAL_Time &)";
    v83 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Counter.cpp";
    v84 = 49;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v69.__r_.__value_.__l.__data_);
    v67 = v69;
    v66 = off_1E69A20A0;
    memset(&v69, 0, sizeof(v69));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v66);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v52, (uint64_t)buf);
  }
  sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v57);
  *(double *)(v24 + 8) = sample_time;
  *(double *)(v24 + 16) = sample_time;
  *(_DWORD *)(v24 + 40) = 0;
  AMCP::Graph::Manifest_Counter::get_current_cycle_anchor_time((uint64_t)&v66, *((_QWORD *)v17 + 8));
  v32 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v57, (AMCP::DAL::DAL_Time *)&v66);
  if (v32)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v32);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v53 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      v54 = pthread_self();
      v55 = pthread_mach_thread_np(v54);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v55;
      v77 = 2080;
      v78 = "Manifest_Inventory.cpp";
      v79 = 1024;
      v80 = 341;
      v81 = 2080;
      *(_QWORD *)v82 = "not (current_anchor <= time)";
      _os_log_error_impl(&dword_1B57BA000, v53, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to anchor_time is in the past", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v65);
    v56 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to anchor_time is in the past", (uint64_t)&v69);
    std::logic_error::logic_error(&v64, &v69);
    v64.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v70, &v64);
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v75 = -1;
    v70.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v71 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v70);
    *(_QWORD *)&v82[6] = "void AMCP::Graph::Manifest_Inventory::reanchor_time(Object_ID, const Manifest_Execution_Context"
                         " &, const DAL::DAL_Time &) const";
    v83 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Inventory.cpp";
    v84 = 341;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v60);
    v62.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    *(std::logic_error *)&v62.__r_.__value_.__r.__words[1] = v60;
    v63 = v61;
    v60.__vftable = 0;
    v60.__imp_.__imp_ = 0;
    v61 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v62);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v56, (uint64_t)buf);
  }
  AMCP::Graph::Manifest_Inventory::anchor_time(v17, v20, v8, (AMCP::DAL::DAL_Time *)&v57);
  v33 = v68;
  if (v68)
  {
    v34 = (unint64_t *)&v68->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v16)
  {
    v36 = (unint64_t *)&v16->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v38 = v59;
  if (v59)
  {
    v39 = (unint64_t *)&v59->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_1B593A2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *__p,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::report_and_handle_discontinuity(void)::$_0,std::tuple<unsigned int,char const*,int,char const*>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::report_and_handle_discontinuity(void)::$_0,std::tuple<unsigned int,char const*,int,char const*>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  caulk::concurrent::message *v12;
  uint8_t buf[8];
  _BYTE v14[10];
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v14;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v14)
  {
    v4 = (unint64_t *)(*(_QWORD *)v14 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v14 = 2080;
    *(_QWORD *)&v14[2] = v8;
    v15 = 1024;
    v16 = v9;
    v17 = 2080;
    v18 = v10;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d %s", buf, 0x22u);
  }
  return caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::report_and_handle_discontinuity(void)::$_0,std::tuple<unsigned int,char const*,int,char const*>>::rt_cleanup::~rt_cleanup(&v12);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::report_and_handle_discontinuity(void)::$_0,std::tuple<unsigned int,char const*,int,char const*>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

BOOL AMCP::Graph::Manifest_Queue::check_if_catchup_mode_is_still_active(AMCP::Graph::Manifest_Queue *this)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  _QWORD *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  double sample_time;
  double v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  double v35;
  double v36;
  double v37;
  _BOOL8 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  __int128 v55;
  _BYTE v56[32];
  std::__shared_weak_count *v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  int v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;

  v1 = *((_QWORD *)this + 70);
  if (!v1)
    return 0;
  v4 = *(_QWORD **)(v1 + 72);
  v3 = *(std::__shared_weak_count **)(v1 + 80);
  v63 = v4;
  v64 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (__int128 *)v4[8];
  v8 = *((_QWORD *)v7 + 2);
  v9 = *((_QWORD *)v7 + 3);
  v58 = *v7;
  v59 = v8;
  v60 = v9;
  v10 = (std::__shared_weak_count *)*((_QWORD *)v7 + 4);
  v61 = v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v62 = *((_DWORD *)v7 + 10);
  v13 = (char *)this + 312;
  if ((*((_BYTE *)this + 312) & 2) == 0)
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::Graph::Manifest_Queue *)((char *)this + 312));
  AMCP::Graph::Manifest_Counter::advance((uint64_t)&v58, *((double *)this + 40));
  v14 = v4[12];
  v15 = (std::__shared_weak_count *)v4[13];
  v52 = v14;
  v53 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  AMCP::Graph::Manifest_Counter::calculate_buffer_start((AMCP::DAL::DAL_Time *)v56, (uint64_t)&v58, &v52, 1, (AMCP::Graph::Manifest_Queue *)((char *)this + 312), *((float *)this + 88));
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v56);
  if ((*v13 & 2) == 0)
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::Graph::Manifest_Queue *)((char *)this + 312));
  v21 = *((double *)this + 40);
  v22 = mach_absolute_time();
  v23 = v63;
  v24 = *((_OWORD *)v63 + 6);
  v25 = v63[13];
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  LODWORD(v52) = 1;
  v53 = 0;
  v54 = v22;
  v55 = v24;
  v28 = v23[12];
  v29 = (std::__shared_weak_count *)v23[13];
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 144))(v28, 1);
  if (v29)
  {
    v33 = (unint64_t *)&v29->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v35 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v52);
  v36 = round(sample_time + v21);
  v37 = round(v35 - (double)v32);
  v38 = v36 < v37;
  if (v36 >= v37)
  {
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v56);
    AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)v56);
    kdebug_trace();
  }
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
  if (*((_QWORD *)&v55 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v57;
  if (v57)
  {
    v43 = (unint64_t *)&v57->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = v61;
  if (v61)
  {
    v46 = (unint64_t *)&v61->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = v64;
  if (v64)
  {
    v49 = (unint64_t *)&v64->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  return v38;
}

void sub_1B593AB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v11 - 64);
  _Unwind_Resume(a1);
}

void sub_1B593AB60()
{
  JUMPOUT(0x1B593AB40);
}

void sub_1B593AB6C()
{
  JUMPOUT(0x1B593AB44);
}

void caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::report_and_handle_overload(unsigned long long,unsigned long long)::$_0,std::tuple<unsigned int,char const*,int,char const*,unsigned int,double,double>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::report_and_handle_overload(unsigned long long,unsigned long long)::$_0,std::tuple<unsigned int,char const*,int,char const*,unsigned int,double,double>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  caulk::concurrent::message *v15;
  uint8_t buf[8];
  _BYTE v17[10];
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v15 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v17;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v17)
  {
    v4 = (unint64_t *)(*(_QWORD *)v17 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_DWORD *)(a1 + 56);
    v12 = *(_QWORD *)(a1 + 64);
    v13 = *(_QWORD *)(a1 + 72);
    *(_DWORD *)buf = 67110658;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v17 = 2080;
    *(_QWORD *)&v17[2] = v8;
    v18 = 1024;
    v19 = v9;
    v20 = 2080;
    v21 = v10;
    v22 = 1024;
    v23 = v11;
    v24 = 2048;
    v25 = v12;
    v26 = 2048;
    v27 = v13;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Overload %s(%u) - current time: %0.f  deadline time: %0.f", buf, 0x3Cu);
  }
  return caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::report_and_handle_overload(unsigned long long,unsigned long long)::$_0,std::tuple<unsigned int,char const*,int,char const*,unsigned int,double,double>>::rt_cleanup::~rt_cleanup(&v15);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::report_and_handle_overload(unsigned long long,unsigned long long)::$_0,std::tuple<unsigned int,char const*,int,char const*,unsigned int,double,double>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 80, 8);
  return a1;
}

void HALS_MetaManager::~HALS_MetaManager(HALS_MetaManager *this)
{
  HALS_MetaManager::~HALS_MetaManager(this);
  JUMPOUT(0x1B5E50688);
}

{
  void *v2;
  NSObject *v3;
  _opaque_pthread_t *v4;
  mach_port_t v5;
  NSObject **v6;
  __int16 v7;
  char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E6975450;
  if ((HALS_MetaManager *)HALS_MetaManager::sInstance != this)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v6, "com.apple.coreaudio", "AMCP");
    v3 = *v6;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v6);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = pthread_self();
      v5 = pthread_mach_thread_np(v4);
      LODWORD(v6) = 67109890;
      HIDWORD(v6) = v5;
      v7 = 2080;
      v8 = "HALS_MetaManager.cpp";
      v9 = 1024;
      v10 = 49;
      v11 = 2080;
      v12 = "sInstance == this";
      _os_log_error_impl(&dword_1B57BA000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s HALS_MetaManager::HALS_MetaManager: there can be only one", (uint8_t *)&v6, 0x22u);
    }
    abort();
  }
  HALS_MetaManager::sInstance = 0;
  v2 = (void *)*((_QWORD *)this + 93);
  if (v2)
  {
    *((_QWORD *)this + 94) = v2;
    operator delete(v2);
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_MetaManager *)((char *)this + 424));
  HALB_Mutex::~HALB_Mutex((HALS_MetaManager *)((char *)this + 328));
  *(_QWORD *)this = off_1E6985A90;
  CACFString::~CACFString((HALS_MetaManager *)((char *)this + 48));
  HALS_Object::~HALS_Object(this);
}

void HALS_MetaManager::_Deactivate(HALS_MetaManager *this)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t i;

  v2 = (_BYTE *)*((_QWORD *)this + 93);
  v3 = (_BYTE *)*((_QWORD *)this + 94);
  v4 = v3 - v2;
  if (v3 == v2)
  {
    *((_DWORD *)this + 2) = 0;
  }
  else
  {
    if (v4 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v5 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v4 >> 3);
    memmove(v5, v2, v4);
    v6 = 8 * (v4 >> 3);
    if (v6)
    {
      for (i = 0; i != v6; i += 8)
        HALS_MetaManager::_RemoveDevice(this, *(HALS_MetaDevice **)&v5[i]);
    }
    *((_DWORD *)this + 2) = 0;
    if (v5)
      operator delete(v5);
  }
}

void sub_1B593AE1C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t HALS_MetaManager::GetCommandGate(HALS_MetaManager *this)
{
  return (uint64_t)this + 328;
}

{
  return (uint64_t)this + 328;
}

uint64_t HALS_MetaManager::GetMIGDispatchQueue(HALS_MetaManager *this)
{
  return (uint64_t)this + 424;
}

{
  return (uint64_t)this + 424;
}

BOOL HALS_MetaManager::HasProperty(HALS_MetaManager *this, HALS_Client *a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  return a3->mSelector == 1667327847 || a3->mSelector == 1684105063 || HALS_DeviceManager::HasProperty(this, a2, a3, a4);
}

uint64_t HALS_MetaManager::IsPropertySettable(HALS_MetaManager *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  _DWORD *exception;

  if (((*(uint64_t (**)(HALS_MetaManager *))(*(_QWORD *)this + 88))(this) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  if (a3->mSelector == 1667327847 || a3->mSelector == 1684105063)
    return 0;
  else
    return HALS_DeviceManager::IsPropertySettable((uint64_t)this, a2, (int *)a3);
}

BOOL HALS_MetaManager::GetPropertyDataSize(HALS_MetaManager *this, HALS_Client *a2, AudioObjectPropertyAddress *a3, unsigned int a4, _DWORD *a5, HALS_Client *a6)
{
  _DWORD *exception;

  if (((*(uint64_t (**)(HALS_MetaManager *, HALS_Client *, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 88))(this, a2, a3, a6) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  return a3->mSelector == 1667327847
      || a3->mSelector == 1684105063
      || HALS_DeviceManager::GetPropertyDataSize(this, a2, a3, a4, a5, a6) != 0;
}

void HALS_MetaManager::GetPropertyData(HALS_System **this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, int *a6, unsigned int a7, const __CFDictionary **a8, HALS_Client *a9)
{
  _DWORD *exception;
  int v18;
  NSObject *v19;
  const char *v20;
  NSObject *v21;
  const char *v22;
  int v23;
  const char *v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (((*((uint64_t (**)(HALS_System **, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))*this + 11))(this, a2, a3, a9) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v18 = 2003332927;
    goto LABEL_28;
  }
  if (a3->mSelector == 1684105063)
  {
    if (a4 == 4)
    {
      if (a6)
      {
        HALS_MetaManager::DestroyDevice(this, *a6);
        goto LABEL_11;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_27;
      v23 = 136315394;
      v24 = "HALS_MetaManager.cpp";
      v25 = 1024;
      v26 = 177;
      v21 = MEMORY[0x1E0C81028];
      v22 = "%25s:%-5d  HALS_MetaManager::GetPropertyData: nowhere to put the output data for kAudioPlugInDestroyAggregateDevice";
      goto LABEL_26;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v23 = 136315394;
      v24 = "HALS_MetaManager.cpp";
      v25 = 1024;
      v26 = 176;
      v19 = MEMORY[0x1E0C81028];
      v20 = "%25s:%-5d  HALS_MetaManager::GetPropertyData: wrong data size for kAudioPlugInDestroyAggregateDevice";
      goto LABEL_20;
    }
    goto LABEL_21;
  }
  if (a3->mSelector == 1667327847)
  {
    if (a7 == 8)
    {
      if (a4 == 4)
      {
        if (a6)
        {
          *a6 = HALS_MetaManager::CreateDevice((os_unfair_lock_s ***)this, *a8, a9);
LABEL_11:
          *a5 = 4;
          return;
        }
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_27;
        v23 = 136315394;
        v24 = "HALS_MetaManager.cpp";
        v25 = 1024;
        v26 = 170;
        v21 = MEMORY[0x1E0C81028];
        v22 = "%25s:%-5d  HALS_MetaManager::GetPropertyData: nowhere to put the output data for kAudioPlugInCreateAggregateDevice";
LABEL_26:
        _os_log_impl(&dword_1B57BA000, v21, OS_LOG_TYPE_ERROR, v22, (uint8_t *)&v23, 0x12u);
LABEL_27:
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69A1B30;
        v18 = 1852797029;
LABEL_28:
        exception[2] = v18;
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v23 = 136315394;
        v24 = "HALS_MetaManager.cpp";
        v25 = 1024;
        v26 = 169;
        v19 = MEMORY[0x1E0C81028];
        v20 = "%25s:%-5d  HALS_MetaManager::GetPropertyData: wrong data size for kAudioPlugInCreateAggregateDevice";
        goto LABEL_20;
      }
    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v23 = 136315394;
      v24 = "HALS_MetaManager.cpp";
      v25 = 1024;
      v26 = 168;
      v19 = MEMORY[0x1E0C81028];
      v20 = "%25s:%-5d  HALS_MetaManager::GetPropertyData: wrong qualifier size for kAudioPlugInCreateAggregateDevice";
LABEL_20:
      _os_log_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_ERROR, v20, (uint8_t *)&v23, 0x12u);
    }
LABEL_21:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v18 = 561211770;
    goto LABEL_28;
  }
  HALS_DeviceManager::GetPropertyData((HALS_DeviceManager *)this, a2, a3, a4, a5, (uint64_t *)a6, a7, (const __CFString **)a8, a9);
}

HALS_ObjectMap *HALS_MetaManager::CopyMetaDeviceByIsolatedUseCaseID(HALS_DeviceManager *a1, int a2, HALS_Client *a3)
{
  HALS_Object *v4;
  HALS_ObjectMap **v5;
  HALS_ObjectMap *v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  HALS_Object *v10;
  HALS_ObjectMap **v12;
  HALS_ObjectMap **v13;
  uint64_t v14;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  HALS_DeviceManager::CopyDeviceList(a1, (HALS_DeviceManager::BasicDeviceList *)&v12, 1, a3);
  if (v12 == v13)
  {
    v6 = 0;
  }
  else
  {
    v5 = v12 + 1;
    do
    {
      v6 = *(v5 - 1);
      v7 = (*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)v6 + 464))(v6);
      if ((v7 & 0xFF00000000) != 0)
        v8 = v7;
      else
        v8 = 0;
      if (v8 != a2)
        v6 = 0;
      if (v6)
        v9 = 1;
      else
        v9 = v5 == v13;
      ++v5;
    }
    while (!v9);
  }
  HALS_ObjectMap::RetainObject(v6, v4);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v12, v10);
  return v6;
}

void sub_1B593B468(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)va, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_MetaManager::CopyNonMetaDeviceByIsolatedUseCaseID()
{
  return 0;
}

void HALS_MetaManager::_CopyDeviceList(uint64_t a1, void **a2)
{
  HALS_ObjectMap **v2;
  HALS_ObjectMap **v3;
  void **v4;
  HALS_ObjectMap *v5;
  unint64_t v6;
  HALS_ObjectMap **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  HALS_ObjectMap **v13;
  char *v14;
  char *v15;
  HALS_ObjectMap *v16;

  v2 = *(HALS_ObjectMap ***)(a1 + 744);
  v3 = *(HALS_ObjectMap ***)(a1 + 752);
  if (v2 != v3)
  {
    v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, (HALS_Object *)a2);
      v5 = *v2;
      v7 = (HALS_ObjectMap **)v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 >= v6)
      {
        v9 = ((char *)v7 - (_BYTE *)*v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v10 = v6 - (_QWORD)*v4;
        v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1))
          v11 = v9 + 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
          v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        else
          a2 = 0;
        v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        *v13 = v5;
        v8 = v13 + 1;
        v15 = (char *)*v4;
        v14 = (char *)v4[1];
        if (v14 != *v4)
        {
          do
          {
            v16 = (HALS_ObjectMap *)*((_QWORD *)v14 - 1);
            v14 -= 8;
            *--v13 = v16;
          }
          while (v14 != v15);
          v14 = (char *)*v4;
        }
        *v4 = v13;
        v4[1] = v8;
        v4[2] = (void *)(v12 + 8 * (_QWORD)a2);
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v7 = v5;
        v8 = v7 + 1;
      }
      v4[1] = v8;
      ++v2;
    }
    while (v2 != v3);
  }
}

uint64_t HALS_MetaManager::CreateDevice(os_unfair_lock_s ***this, const __CFDictionary *a2, HALS_Client *a3)
{
  uint64_t v6;
  HALS_Object *v7;
  const __CFString *v8;
  pid_t v9;
  _QWORD *v10;
  HALS_ObjectMap *v11;
  HALS_Object *v12;
  HALB_Mutex *v13;
  HALS_NotificationManager *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  _DWORD *exception;
  _DWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  CFTypeRef cf;
  char v29;
  const __CFDictionary *v30;
  __int16 v31;
  const __CFString *v32;
  char v33;
  _BYTE buf[24];
  void *v35;
  os_unfair_lock_s ***v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v30 = a2;
  v31 = 0;
  cf = 0;
  v29 = 1;
  CACFDictionary::GetCACFString(&v30, CFSTR("uid"), &cf);
  if (!cf)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_MetaManager.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 198;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaManager::CreateDevice: the description has no UID", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  if (HALS_DeviceManager::CopyDeviceByUID((HALS_DeviceManager *)this, (const __CFString *)cf, 0))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_MetaManager.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 202;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaManager::CreateDevice: there is already a device with this UID", buf, 0x12u);
    }
    v25 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v25 = &off_1E69A1B30;
    v25[2] = 1852797029;
  }
  v6 = operator new();
  v7 = (HALS_Object *)CFRetain(cf);
  HALS_Device::HALS_Device((HALS_Device *)v6, (HALB_Info *)0x61616767, (uint64_t)this, v7, v8);
  *(_QWORD *)v6 = off_1E6979900;
  *(_QWORD *)(v6 + 1304) = this;
  if (a3)
    v9 = *((_DWORD *)a3 + 58);
  else
    v9 = getpid();
  *(_DWORD *)(v6 + 1312) = v9;
  *(_QWORD *)(v6 + 1320) = v6;
  if (a2)
    CFRetain(a2);
  *(_QWORD *)(v6 + 1336) = a2;
  *(_QWORD *)(v6 + 1328) = &off_1E69A0DE0;
  *(_OWORD *)(v6 + 1344) = 0u;
  *(_OWORD *)(v6 + 1360) = 0u;
  *(_OWORD *)(v6 + 1376) = 0u;
  *(_OWORD *)(v6 + 1392) = 0u;
  *(_OWORD *)(v6 + 1408) = 0u;
  *(_QWORD *)(v6 + 1424) = 0;
  HALS_MetaDeviceDescription::UpdateRawDescription((CFDictionaryRef *)(v6 + 1320));
  HALS_MetaDeviceDescription::UpdateSubDeviceList((CFDictionaryRef *)(v6 + 1320), 0);
  HALS_MetaDeviceDescription::UpdateSubTapList((HALS_MetaDeviceDescription *)(v6 + 1320));
  *(_BYTE *)(v6 + 1432) = 0;
  *(_BYTE *)(v6 + 1492) = 0;
  *(_OWORD *)(v6 + 1440) = 0u;
  *(_OWORD *)(v6 + 1456) = 0u;
  *(_OWORD *)(v6 + 1472) = 0u;
  *(_BYTE *)(v6 + 1488) = 0;
  v10 = (_QWORD *)operator new();
  *v10 = v6;
  *(_QWORD *)(v6 + 1496) = v10;
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue(v6 + 1504, "HALS_MetaDevice Server Default Priority Queue");
  *(_QWORD *)(v6 + 1840) = 0;
  *(_OWORD *)(v6 + 1824) = 0u;
  if (((*(_QWORD *)(v6 + 1400) - *(_QWORD *)(v6 + 1392)) & 0x7FFFFFFF8) != 0)
    HALS_MetaDevice::RegisterTaps((HALS_MetaDevice *)v6);
  if (a3)
  {
    *(_DWORD *)(v6 + 1488) = *((_DWORD *)a3 + 4);
    *(_BYTE *)(v6 + 1492) = 1;
  }
  atomic_store(HALS_MetaDeviceDescription::IsPrivate((const __CFDictionary **)(v6 + 1320)), (unsigned __int8 *)(v6 + 1432));
  (**(void (***)(uint64_t))v6)(v6);
  v32 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 208))(v6);
  v33 = 1;
  v11 = HALS_DeviceManager::CopyDeviceByUID((HALS_DeviceManager *)this, v32, 0);
  if (v11)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_MetaManager.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 341;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_MetaManager::AddDevice: there is already a device with this UID", buf, 0x12u);
    }
    HALS_ObjectMap::ReleaseObject(v11, v12);
  }
  else
  {
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZN16HALS_MetaManager9AddDeviceEP15HALS_MetaDevice_block_invoke;
    v35 = &__block_descriptor_tmp_12_3006;
    v36 = this;
    v37 = v6;
    v13 = (HALB_Mutex *)((uint64_t (*)(os_unfair_lock_s ***))(*this)[7])(this);
    HALB_CommandGate::ExecuteCommand(v13, (uint64_t)buf);
  }
  CACFString::~CACFString((CACFString *)&v32);
  HALS_Device::UpdateInternalIOContext((HALS_Device *)v6);
  HALS_System::DeviceArrived(this[40], (HALS_Device *)v6);
  v14 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
  if (a3)
    v15 = *((unsigned int *)a3 + 4);
  else
    v15 = 0;
  strcpy(buf, "#vedbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  HALS_Object::PropertiesChanged((HALS_Object *)this, v14, v15, 1, (const AudioObjectPropertyAddress *)buf);
  v26 = 0;
  v27 = 0;
  HALS_System::GetInstance(buf, 0, &v26);
  HALS_System::CheckForDefaultDeviceChanges(*(HALS_System **)buf);
  v16 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v17 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *(unsigned int *)(v6 + 16);
  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  CACFString::~CACFString((CACFString *)&cf);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v30);
  return v22;
}

void sub_1B593BAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17)
{
  HALS_ObjectMap *v17;
  HALS_Device *v18;
  HALS_Object *v20;

  HALS_Device::~HALS_Device(v18);
  MEMORY[0x1B5E50688](v18, 0x10F3C405D91B39ALL);
  HALS_ObjectMap::ReleaseObject(v17, v20);
  CACFString::~CACFString((CACFString *)&a11);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a13);
  _Unwind_Resume(a1);
}

void HALS_MetaManager::DestroyDevice(HALS_System **this, int a2)
{
  unsigned __int8 *v3;
  HALS_Object *v4;
  HALS_ObjectMap *v5;
  HALS_Object *v6;
  HALB_Mutex *v7;
  HALS_NotificationManager *v8;
  HALS_Object *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _QWORD v20[5];
  HALS_ObjectMap *v21;

  v3 = (unsigned __int8 *)HALS_DeviceManager::CopyDeviceByObjectID((HALS_DeviceManager *)this, a2, 0);
  v5 = (HALS_ObjectMap *)v3;
  if (v3)
  {
    atomic_load(v3 + 1432);
    (*(void (**)(unsigned __int8 *))(*(_QWORD *)v3 + 456))(v3);
    (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v5 + 8))(v5);
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 1174405120;
    v20[2] = ___ZN16HALS_MetaManager13DestroyDeviceEj_block_invoke;
    v20[3] = &__block_descriptor_tmp_3001;
    v20[4] = this;
    v21 = v5;
    HALS_ObjectMap::RetainObject(v5, v6);
    v7 = (HALB_Mutex *)(*((uint64_t (**)(HALS_System **))*this + 7))(this);
    HALB_CommandGate::ExecuteCommand(v7, (uint64_t)v20);
    HALS_System::DeviceDied(this[40], v5);
    v8 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
    v18 = 0x676C6F6264657623;
    LODWORD(v19) = 0;
    HALS_Object::PropertiesChanged((HALS_Object *)this, v8, 0, 1, (const AudioObjectPropertyAddress *)&v18);
    v16 = 0;
    v17 = 0;
    HALS_System::GetInstance(&v18, 0, &v16);
    HALS_System::CheckForDefaultDeviceChanges((HALS_System *)v18);
    v10 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = v17;
    if (v17)
    {
      v14 = (unint64_t *)&v17->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    HALS_ObjectMap::ReleaseObject(v21, v9);
  }
  HALS_ObjectMap::ReleaseObject(v5, v4);
}

void sub_1B593BDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, HALS_ObjectMap *a18)
{
  HALS_ObjectMap *v18;
  HALS_Object *v20;
  HALS_Object *v21;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  HALS_ObjectMap::ReleaseObject(a18, v20);
  HALS_ObjectMap::ReleaseObject(v18, v21);
  _Unwind_Resume(a1);
}

void ___ZN16HALS_MetaManager13DestroyDeviceEj_block_invoke(uint64_t a1)
{
  HALS_MetaManager::_RemoveDevice(*(HALS_MetaManager **)(a1 + 32), *(HALS_MetaDevice **)(a1 + 40));
}

void __copy_helper_block_e8_40c38_ZTS13HALS_ReleaserI15HALS_MetaDeviceE(uint64_t a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  v2 = (HALS_ObjectMap *)*((_QWORD *)a2 + 5);
  *(_QWORD *)(a1 + 40) = v2;
  HALS_ObjectMap::RetainObject(v2, a2);
}

void __destroy_helper_block_e8_40c38_ZTS13HALS_ReleaserI15HALS_MetaDeviceE(uint64_t a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(a1 + 40), a2);
}

void HALS_MetaManager::_RemoveDevice(HALS_MetaManager *this, HALS_MetaDevice *a2)
{
  HALS_MetaDevice **v4;
  HALS_MetaDevice **v5;
  HALS_MetaDevice **v6;
  int64_t v7;
  HALS_MetaDevice **v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  HALS_MetaDevice **v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  HALS_Object *v18;

  v4 = (HALS_MetaDevice **)*((_QWORD *)this + 93);
  v5 = (HALS_MetaDevice **)*((_QWORD *)this + 94);
  v6 = v4;
  if (v4 != v5)
  {
    while (*v6 != a2)
    {
      if (++v6 == v5)
      {
        v6 = (HALS_MetaDevice **)*((_QWORD *)this + 94);
        break;
      }
    }
  }
  if (v6 != v5)
  {
    v7 = (char *)v5 - (char *)(v6 + 1);
    if (v5 != v6 + 1)
    {
      memmove(v6, v6 + 1, (char *)v5 - (char *)(v6 + 1));
      v4 = (HALS_MetaDevice **)*((_QWORD *)this + 93);
    }
    v8 = (HALS_MetaDevice **)((char *)v6 + v7);
    *((_QWORD *)this + 94) = (char *)v6 + v7;
    v9 = *((_QWORD *)this + 95);
    if ((((char *)v6 + v7 - (char *)v4) >> 3) + 20 >= (unint64_t)((v9 - (uint64_t)v4) >> 3))
      goto LABEL_20;
    v10 = v8 - v4;
    if (v10 >= (v9 - (uint64_t)v4) >> 3)
      goto LABEL_20;
    if (v8 == v4)
    {
      v15 = 0;
      v13 = 8 * v10;
    }
    else
    {
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v8 - v4);
      v4 = (HALS_MetaDevice **)*((_QWORD *)this + 94);
      v12 = (HALS_MetaDevice **)*((_QWORD *)this + 93);
      v13 = (uint64_t)&v11[8 * v10];
      v15 = &v11[8 * v14];
      if (v4 != v12)
      {
        v16 = v13;
        do
        {
          v17 = (uint64_t)*--v4;
          *(_QWORD *)(v16 - 8) = v17;
          v16 -= 8;
        }
        while (v4 != v12);
        v4 = (HALS_MetaDevice **)*((_QWORD *)this + 93);
        goto LABEL_18;
      }
    }
    v16 = v13;
LABEL_18:
    *((_QWORD *)this + 93) = v16;
    *((_QWORD *)this + 94) = v13;
    *((_QWORD *)this + 95) = v15;
    if (v4)
      operator delete(v4);
LABEL_20:
    (*(void (**)(HALS_MetaDevice *))(*(_QWORD *)a2 + 8))(a2);
    HALS_ObjectMap::ObjectIsDead(a2, v18);
  }
}

void sub_1B593BFA0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B593BF7CLL);
}

void ___ZN16HALS_MetaManager9AddDeviceEP15HALS_MetaDevice_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = (_QWORD *)v2[94];
  v4 = v2[95];
  if ((unint64_t)v3 >= v4)
  {
    v6 = v2[93];
    v7 = ((uint64_t)v3 - v6) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v8 = v4 - v6;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v10);
    else
      v11 = 0;
    v12 = (_QWORD *)(v10 + 8 * v7);
    v13 = v10 + 8 * v11;
    *v12 = *(_QWORD *)(a1 + 40);
    v5 = v12 + 1;
    v14 = (char *)v2[94];
    v15 = (char *)v2[93];
    if (v14 != v15)
    {
      do
      {
        v16 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *--v12 = v16;
      }
      while (v14 != v15);
      v14 = (char *)v2[93];
    }
    v2[93] = v12;
    v2[94] = v5;
    v2[95] = v13;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v3 = *(_QWORD *)(a1 + 40);
    v5 = v3 + 1;
  }
  v2[94] = v5;
}

void sub_1B593C1EC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMCP::Meta::Stream::~Stream(AMCP::Meta::Stream *this)
{
  char *v2;

  *(_QWORD *)this = &off_1E69755F8;
  v2 = (char *)this + 8;
  AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*((_QWORD *)this + 1) + 16), *((_DWORD *)this + 6));
  *(_QWORD *)this = &off_1E697FC58;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v2);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E69755F8;
  v2 = (char *)this + 8;
  AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*((_QWORD *)this + 1) + 16), *((_DWORD *)this + 6));
  *(_QWORD *)this = &off_1E697FC58;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  JUMPOUT(0x1B5E50688);
}

void AMCP::Meta::Stream::update_core_common(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  std::runtime_error *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::runtime_error *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  std::runtime_error *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  std::runtime_error *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __n128 v34;
  std::runtime_error *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  AMCP::Log::Scope_Registry *operation;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  __int128 v53;
  uint64_t (***v54)();
  uint64_t v55;
  std::__shared_weak_count *size;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  std::runtime_error *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  std::runtime_error *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  NSObject *v74;
  unint64_t *v75;
  unint64_t v76;
  _opaque_pthread_t *v77;
  mach_port_t v78;
  void *exception;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  AMCP::Address *v85;
  std::__shared_weak_count *v86;
  AMCP::Address *v87;
  std::__shared_weak_count *v88;
  __int128 v89;
  uint64_t *v90;
  std::string v91;
  std::runtime_error v92;
  char v93;
  _QWORD *v94;
  std::__shared_weak_count *v95;
  std::runtime_error v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint8_t buf[32];
  void (*v102)(int, uint64_t, AMCP::Thing *, uint64_t *);
  const char *v103;
  int v104;
  uint64_t (**v105)();
  __int128 v106;
  uint64_t *v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v80, 0, 1.58366012e190);
  v4 = v80;
  v5 = AMCP::Implementation::get_type_marker<std::function<AMCP::Direction ()(void)>>();
  v96.__vftable = (std::runtime_error_vtbl *)&off_1E6975630;
  v96.__imp_.__imp_ = (const char *)a1;
  *((_QWORD *)&v97 + 1) = &v96;
  memset(buf, 0, sizeof(buf));
  v102 = 0;
  std::__function::__value_func<AMCP::Direction ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v96);
  v102 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Direction ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v4, v5, (AMCP *)buf);
  if (v102)
    v102(0, (uint64_t)buf, 0, 0);
  v6 = (std::runtime_error *)*((_QWORD *)&v97 + 1);
  if (*((std::runtime_error **)&v97 + 1) == &v96)
  {
    v7 = 4;
    v6 = &v96;
    goto LABEL_7;
  }
  if (*((_QWORD *)&v97 + 1))
  {
    v7 = 5;
LABEL_7:
    (*((void (**)(void))&v6->~runtime_error + v7))();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(v80);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v80 + 40), &v80);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
  if (*((_QWORD *)&v80 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v80, 0, 1.58366012e190);
  v11 = v80;
  v12 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  v96.__vftable = (std::runtime_error_vtbl *)&off_1E69756B0;
  v96.__imp_.__imp_ = (const char *)a1;
  *((_QWORD *)&v97 + 1) = &v96;
  memset(buf, 0, sizeof(buf));
  v102 = 0;
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v96);
  v102 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v11, v12, (AMCP *)buf);
  if (v102)
    v102(0, (uint64_t)buf, 0, 0);
  v13 = (std::runtime_error *)*((_QWORD *)&v97 + 1);
  if (*((std::runtime_error **)&v97 + 1) == &v96)
  {
    v14 = 4;
    v13 = &v96;
    goto LABEL_19;
  }
  if (*((_QWORD *)&v97 + 1))
  {
    v14 = 5;
LABEL_19:
    (*((void (**)(void))&v13->~runtime_error + v14))();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v80);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v80 + 40), &v80);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
  if (*((_QWORD *)&v80 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v80, 0, 1.58366012e190);
  v18 = v80;
  v19 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  v96.__vftable = (std::runtime_error_vtbl *)&off_1E6975730;
  v96.__imp_.__imp_ = (const char *)a1;
  *((_QWORD *)&v97 + 1) = &v96;
  memset(buf, 0, sizeof(buf));
  v102 = 0;
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v96);
  v102 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v18, v19, (AMCP *)buf);
  if (v102)
    v102(0, (uint64_t)buf, 0, 0);
  v20 = (std::runtime_error *)*((_QWORD *)&v97 + 1);
  if (*((std::runtime_error **)&v97 + 1) == &v96)
  {
    v21 = 4;
    v20 = &v96;
    goto LABEL_31;
  }
  if (*((_QWORD *)&v97 + 1))
  {
    v21 = 5;
LABEL_31:
    (*((void (**)(void))&v20->~runtime_error + v21))();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v80);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v80 + 40), &v80);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
  if (*((_QWORD *)&v80 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v80, 0, 1.58366012e190);
  v25 = v80;
  v26 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  v96.__vftable = (std::runtime_error_vtbl *)&off_1E69757B0;
  v96.__imp_.__imp_ = (const char *)a1;
  *((_QWORD *)&v97 + 1) = &v96;
  memset(buf, 0, sizeof(buf));
  v102 = 0;
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v96);
  v102 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v25, v26, (AMCP *)buf);
  if (v102)
    v102(0, (uint64_t)buf, 0, 0);
  v27 = (std::runtime_error *)*((_QWORD *)&v97 + 1);
  if (*((std::runtime_error **)&v97 + 1) == &v96)
  {
    v28 = 4;
    v27 = &v96;
    goto LABEL_43;
  }
  if (*((_QWORD *)&v97 + 1))
  {
    v28 = 5;
LABEL_43:
    (*((void (**)(void))&v27->~runtime_error + v28))();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v80);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v80 + 40), &v80);
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
  if (*((_QWORD *)&v80 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v80, 0, 1.58366012e190);
  v32 = v80;
  v33 = AMCP::Implementation::get_type_marker<std::function<int ()(void)>>();
  v96.__vftable = (std::runtime_error_vtbl *)&off_1E6975830;
  v96.__imp_.__imp_ = (const char *)a1;
  *((_QWORD *)&v97 + 1) = &v96;
  memset(buf, 0, sizeof(buf));
  v102 = 0;
  std::__function::__value_func<int ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v96);
  v102 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v32, v33, (AMCP *)buf);
  if (v102)
    v34.n128_f64[0] = ((double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))v102)(0, (uint64_t)buf, 0, 0);
  v35 = (std::runtime_error *)*((_QWORD *)&v97 + 1);
  if (*((std::runtime_error **)&v97 + 1) == &v96)
  {
    v36 = 4;
    v35 = &v96;
    goto LABEL_55;
  }
  if (*((_QWORD *)&v97 + 1))
  {
    v36 = 5;
LABEL_55:
    (*((void (**)(__n128))&v35->~runtime_error + v36))(v34);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(v80);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v80 + 40), &v80);
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
  if (*((_QWORD *)&v80 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v87, *(std::__shared_mutex_base **)(*(_QWORD *)(a1 + 8) + 16), *(_DWORD *)(a1 + 32));
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v85, *(std::__shared_mutex_base **)(*(_QWORD *)(a1 + 8) + 16), *(_DWORD *)(a1 + 28));
  if (v87 && v85)
  {
    v83 = 0x676C6F62666D6174;
    v84 = 0;
    operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v94, (int8x8_t *)v87, (unsigned int *)&v83);
    if (!v94)
    {
      AMCP::Log::Scope_Registry::get(operation);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v73 = *(std::__shared_weak_count **)&buf[8];
      v74 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v75 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
      {
        v77 = pthread_self();
        v78 = pthread_mach_thread_np(v77);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v78;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "Core.h";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 202;
        _os_log_error_impl(&dword_1B57BA000, v74, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v93);
      exception = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v91);
      std::runtime_error::runtime_error(&v92, &v91);
      std::runtime_error::runtime_error(&v96, &v92);
      *((_QWORD *)&v97 + 1) = 0;
      v98 = 0;
      v99 = 0;
      v100 = -1;
      v96.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      *(_QWORD *)&v97 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v96);
      v102 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))"Return_Type AMCP::Core::Core::call_operation_f"
                                                                          "unction(const Address &, Argument_Types...) co"
                                                                          "nst [Return_Type = CA::StreamDescription, Argu"
                                                                          "ment_Types = <>]";
      v103 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
      v104 = 202;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v89);
      v106 = v89;
      v105 = off_1E69A20A0;
      v107 = v90;
      v89 = 0uLL;
      v90 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v105);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
    }
    AMCP::Core::Operation::call_function<CA::StreamDescription>((uint64_t)&v80, v94);
    v41 = v95;
    if (v95)
    {
      p_shared_owners = (unint64_t *)&v95->__shared_owners_;
      do
        v43 = __ldaxr(p_shared_owners);
      while (__stlxr(v43 - 1, p_shared_owners));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    strcpy((char *)buf, "trsnbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    *(_QWORD *)&v80 = AMCP::Core::Core::call_operation_function<double>(v85, (unsigned int *)buf);
  }
  else
  {
    v82 = 0;
    v80 = 0u;
    v81 = 0u;
  }
  v44 = v86;
  if (v86)
  {
    v45 = (unint64_t *)&v86->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = v88;
  if (v88)
  {
    v48 = (unint64_t *)&v88->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v96 = (std::runtime_error)v80;
  v97 = v81;
  v98 = v82;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v91, 0, 1.58366008e190);
  v50 = v91.__r_.__value_.__r.__words[0];
  v51 = AMCP::Implementation::get_type_marker<std::function<CA::StreamDescription ()(void)>>();
  v107 = 0;
  v52 = (char *)operator new(0x30uLL);
  *(_QWORD *)v52 = &off_1E69758B0;
  v53 = v97;
  *(std::runtime_error *)(v52 + 8) = v96;
  *(_OWORD *)(v52 + 24) = v53;
  *((_QWORD *)v52 + 5) = v98;
  v107 = (uint64_t *)v52;
  memset(buf, 0, sizeof(buf));
  v102 = 0;
  std::__function::__value_func<CA::StreamDescription ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v105);
  v102 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<CA::StreamDescription ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v50, v51, (AMCP *)buf);
  if (v102)
    v102(0, (uint64_t)buf, 0, 0);
  v54 = (uint64_t (***)())v107;
  if (v107 == (uint64_t *)&v105)
  {
    v55 = 4;
    v54 = &v105;
    goto LABEL_87;
  }
  if (v107)
  {
    v55 = 5;
LABEL_87:
    (*v54)[v55]();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>((uint64_t)v91.__r_.__value_.__l.__data_);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v91.__r_.__value_.__r.__words[0] + 40), &v91);
  size = (std::__shared_weak_count *)v91.__r_.__value_.__l.__size_;
  if (v91.__r_.__value_.__l.__size_)
  {
    v57 = (unint64_t *)(v91.__r_.__value_.__l.__size_ + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v105, 0, 1.58366008e190);
  v59 = (uint64_t)v105;
  v60 = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>();
  v96.__vftable = (std::runtime_error_vtbl *)&off_1E6975930;
  v96.__imp_.__imp_ = (const char *)a1;
  *((_QWORD *)&v97 + 1) = &v96;
  memset(buf, 0, sizeof(buf));
  v102 = 0;
  std::__function::__value_func<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v96);
  v102 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v59, v60, (AMCP *)buf);
  if (v102)
    v102(0, (uint64_t)buf, 0, 0);
  v61 = (std::runtime_error *)*((_QWORD *)&v97 + 1);
  if (*((std::runtime_error **)&v97 + 1) == &v96)
  {
    v62 = 4;
    v61 = &v96;
    goto LABEL_99;
  }
  if (*((_QWORD *)&v97 + 1))
  {
    v62 = 5;
LABEL_99:
    (*((void (**)(void))&v61->~runtime_error + v62))();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(v59);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)v105 + 10, &v105);
  v63 = (std::__shared_weak_count *)v106;
  if ((_QWORD)v106)
  {
    v64 = (unint64_t *)(v106 + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v105, 0, 1.58366012e190);
  v66 = (uint64_t)v105;
  v67 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  v96.__vftable = (std::runtime_error_vtbl *)&off_1E69759B0;
  v96.__imp_.__imp_ = (const char *)a1;
  *((_QWORD *)&v97 + 1) = &v96;
  memset(buf, 0, sizeof(buf));
  v102 = 0;
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v96);
  v102 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v66, v67, (AMCP *)buf);
  if (v102)
    v102(0, (uint64_t)buf, 0, 0);
  v68 = (std::runtime_error *)*((_QWORD *)&v97 + 1);
  if (*((std::runtime_error **)&v97 + 1) == &v96)
  {
    v69 = 4;
    v68 = &v96;
  }
  else
  {
    if (!*((_QWORD *)&v97 + 1))
      goto LABEL_112;
    v69 = 5;
  }
  (*((void (**)(void))&v68->~runtime_error + v69))();
LABEL_112:
  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v66);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)v105 + 10, &v105);
  v70 = (std::__shared_weak_count *)v106;
  if ((_QWORD)v106)
  {
    v71 = (unint64_t *)(v106 + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
}

void sub_1B593CE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,std::runtime_error a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,std::runtime_error a38,uint64_t a39,uint64_t a40)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<AMCP::Direction ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<AMCP::Direction ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Direction ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<AMCP::Direction ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Direction ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<AMCP::Direction ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<AMCP::Direction ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E699BD28;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B593D3E0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::__function::__value_func<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E698AA08;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B593D78C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_7>,unsigned int ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_7>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69759B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_7>,unsigned int ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69759B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_7>,unsigned int ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  int v7;
  AMCP::Address *v8;
  std::__shared_weak_count *v9;

  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v8, *(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 16), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 32));
  if (v8)
  {
    v6 = 0x676C6F626F776E72;
    v7 = 0;
    v1 = AMCP::Core::Core::call_operation_function<unsigned int>(v8, (unsigned int *)&v6);
  }
  else
  {
    v1 = 0;
  }
  v2 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1B593D8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_7>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Stream18update_core_commonERNS_4Core13Operation_SetEE3$_7"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_7>,unsigned int ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E698AA08;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E698AA08;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E698AA08;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B593DA00(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E698AA08;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void **v5;

  AMCP::Core::Operation::call_function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>((uint64_t)&v3, (_QWORD *)(a1 + 8));
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>(a2, v3, v4, (v4 - v3) >> 6);
  *(_QWORD *)(a2 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>::dispatch;
  v5 = (void **)&v3;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v5);
}

void sub_1B593DAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterINSt3__16vectorINS3_5tupleIJN2CA14ValueRangeListENS6_17StreamDescriptionEEEENS3_9allocatorIS9_EEEEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

void std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_6>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_6>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6975930;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_6>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6975930;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_6>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::operator()(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  AMCP::Log::Scope_Registry *operation;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  NSObject *v11;
  unint64_t *v12;
  unint64_t v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  void *exception;
  uint64_t v17;
  int v18;
  AMCP::Address *v19;
  std::__shared_weak_count *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t (**v23)();
  __int128 v24;
  uint64_t v25;
  std::string v26;
  std::runtime_error v27;
  std::runtime_error v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  uint8_t buf[8];
  _BYTE v38[10];
  __int16 v39;
  int v40;
  const char *v41;
  const char *v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v19, *(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 16), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 32));
  if (v19)
  {
    v17 = 0x676C6F62666D7423;
    v18 = 0;
    operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v35, (int8x8_t *)v19, (unsigned int *)&v17);
    if (!v35)
    {
      AMCP::Log::Scope_Registry::get(operation);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v10 = *(std::__shared_weak_count **)v38;
      v11 = **(NSObject ***)buf;
      if (*(_QWORD *)v38)
      {
        v12 = (unint64_t *)(*(_QWORD *)v38 + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v14 = pthread_self();
        v15 = pthread_mach_thread_np(v14);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v15;
        *(_WORD *)v38 = 2080;
        *(_QWORD *)&v38[2] = "Core.h";
        v39 = 1024;
        v40 = 202;
        _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v34);
      exception = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v26);
      std::runtime_error::runtime_error(&v27, &v26);
      std::runtime_error::runtime_error(&v28, &v27);
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = -1;
      v28.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v29 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v28);
      v41 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Type"
            " = std::vector<std::tuple<CA::ValueRangeList, CA::StreamDescription>>, Argument_Types = <>]";
      v42 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
      v43 = 202;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
      v24 = v21;
      v25 = v22;
      v21 = 0uLL;
      v22 = 0;
      v23 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v23);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
    }
    AMCP::Core::Operation::call_function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>((uint64_t)a2, v35);
    v4 = v36;
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  v7 = v20;
  if (v20)
  {
    v8 = (unint64_t *)&v20->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1B593DEB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,std::runtime_error a26,std::runtime_error a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;

  v31 = *(std::__shared_weak_count **)(v29 - 120);
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (a12)
  {
    v34 = (unint64_t *)&a12->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_6>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Stream18update_core_commonERNS_4Core13Operation_SetEE3$_6"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_6>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::target_type()
{
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E698AB18;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B593E220(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E698AB18;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E698AB18;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E698AB18;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B593E304(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E698AB18;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  AMCP::Core::Operation::call_function<CA::StreamDescription>((uint64_t)v6, (_QWORD *)(a1 + 8));
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 32) = AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch;
  v3 = operator new();
  result = *(double *)v6;
  v5 = v6[1];
  *(_OWORD *)v3 = v6[0];
  *(_OWORD *)(v3 + 16) = v5;
  *(_QWORD *)(v3 + 32) = v7;
  *(_QWORD *)a2 = v3;
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIN2CA17StreamDescriptionEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__value_func<CA::StreamDescription ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<CA::StreamDescription ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<CA::StreamDescription ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<CA::StreamDescription ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<CA::StreamDescription ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<CA::StreamDescription ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<CA::StreamDescription ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::StreamDescription>(AMCP::Address const&,CA::StreamDescription const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::StreamDescription>(AMCP::Address const&,CA::StreamDescription const&)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::StreamDescription>(AMCP::Address const&,CA::StreamDescription const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::StreamDescription>(AMCP::Address const&,CA::StreamDescription const&)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E69758B0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::StreamDescription>(AMCP::Address const&,CA::StreamDescription const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::StreamDescription>(AMCP::Address const&,CA::StreamDescription const&)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E69758B0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::StreamDescription>(AMCP::Address const&,CA::StreamDescription const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::StreamDescription>(AMCP::Address const&,CA::StreamDescription const&)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 40);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::StreamDescription>(AMCP::Address const&,CA::StreamDescription const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::StreamDescription>(AMCP::Address const&,CA::StreamDescription const&)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities22make_constant_propertyIN2CA17StreamDescriptionEEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::StreamDescription>(AMCP::Address const&,CA::StreamDescription const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::StreamDescription>(AMCP::Address const&,CA::StreamDescription const&)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::target_type()
{
}

void std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_4>,int ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_4>,int ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6975830;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_4>,int ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6975830;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_4>,int ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v9;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *exception;
  uint64_t v16;
  int v17;
  AMCP::Address *v18;
  std::__shared_weak_count *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t (**v22)();
  __int128 v23;
  uint64_t v24;
  std::string v25;
  std::runtime_error v26;
  std::runtime_error v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  uint8_t buf[8];
  _BYTE v37[10];
  __int16 v38;
  int v39;
  const char *v40;
  const char *v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v18, *(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 16), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 32));
  if (v18)
  {
    v16 = 0x676C6F62736C7463;
    v17 = 0;
    AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v34, (int8x8_t *)v18, (unsigned int *)&v16);
    if (!v34)
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v9 = *(std::__shared_weak_count **)v37;
      v10 = **(NSObject ***)buf;
      if (*(_QWORD *)v37)
      {
        v11 = (unint64_t *)(*(_QWORD *)v37 + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v13 = pthread_self();
        v14 = pthread_mach_thread_np(v13);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v14;
        *(_WORD *)v37 = 2080;
        *(_QWORD *)&v37[2] = "Core.h";
        v38 = 1024;
        v39 = 202;
        _os_log_error_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v33);
      exception = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v25);
      std::runtime_error::runtime_error(&v26, &v25);
      std::runtime_error::runtime_error(&v27, &v26);
      v29 = 0;
      v30 = 0;
      v31 = 0;
      v32 = -1;
      v27.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v28 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v27);
      v40 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Type"
            " = int, Argument_Types = <>]";
      v41 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
      v42 = 202;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v20);
      v23 = v20;
      v24 = v21;
      v20 = 0uLL;
      v21 = 0;
      v22 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v22);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
    }
    v1 = AMCP::Core::Operation::call_function<int>(v34);
    v2 = v35;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  else
  {
    v1 = 0;
  }
  v5 = v19;
  if (v19)
  {
    v6 = (unint64_t *)&v19->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v1;
}

void sub_1B593EA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,std::runtime_error a26,std::runtime_error a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;

  v31 = *(std::__shared_weak_count **)(v29 - 120);
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (a12)
  {
    v34 = (unint64_t *)&a12->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_4>,int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Stream18update_core_commonERNS_4Core13Operation_SetEE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_4>,int ()(void)>::target_type()
{
}

void std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_3>,unsigned int ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_3>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69757B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_3>,unsigned int ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69757B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_3>,unsigned int ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  int v7;
  AMCP::Address *v8;
  std::__shared_weak_count *v9;

  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v8, *(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 16), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 32));
  if (v8)
  {
    v6 = 0x676C6F627465726DLL;
    v7 = 0;
    v1 = AMCP::Core::Core::call_operation_function<unsigned int>(v8, (unsigned int *)&v6);
  }
  else
  {
    v1 = 0;
  }
  v2 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1B593ED08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_3>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Stream18update_core_commonERNS_4Core13Operation_SetEE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_3>,unsigned int ()(void)>::target_type()
{
}

void std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_2>,unsigned int ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_2>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6975730;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_2>,unsigned int ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6975730;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_2>,unsigned int ()(void)>::operator()(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 36);
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_2>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Stream18update_core_commonERNS_4Core13Operation_SetEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_2>,unsigned int ()(void)>::target_type()
{
}

void std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_1>,unsigned int ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_1>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69756B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_1>,unsigned int ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69756B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_1>,unsigned int ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  int v7;
  AMCP::Address *v8;
  std::__shared_weak_count *v9;

  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v8, *(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 16), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 32));
  if (v8)
  {
    v6 = 0x676C6F6274617073;
    v7 = 0;
    v1 = AMCP::Core::Core::call_operation_function<unsigned int>(v8, (unsigned int *)&v6);
  }
  else
  {
    v1 = 0;
  }
  v2 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1B593EF50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_1>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Stream18update_core_commonERNS_4Core13Operation_SetEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_1>,unsigned int ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E699BD28;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E699BD28;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E699BD28;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B593F0A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E699BD28;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  double result;

  v3 = AMCP::Core::Operation::call_function<AMCP::Direction>((_QWORD *)(a1 + 8));
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)a2 = v3;
  *(_QWORD *)(a2 + 32) = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterINS_9DirectionEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

void std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_0>,AMCP::Direction ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_0>,AMCP::Direction ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6975630;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_0>,AMCP::Direction ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6975630;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_0>,AMCP::Direction ()(void)>::operator()(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_0>,AMCP::Direction ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Stream18update_core_commonERNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_0>,AMCP::Direction ()(void)>::target_type()
{
}

uint64_t AMCP::Meta::Stream::Stream(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  unint64_t *v8;
  unint64_t v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  CFTypeRef cf;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p[2];
  __int128 v39;
  int v40;
  __int128 v41;

  if (a3)
  {
    v8 = (unint64_t *)(a3 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)a1 = &off_1E69755F8;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = a4;
  *(_DWORD *)(a1 + 32) = a5;
  *(_DWORD *)(a1 + 36) = a6;
  *(_DWORD *)(a1 + 40) = a7;
  v10 = AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(a2 + 16));
  *(_DWORD *)(a1 + 24) = v10;
  *(_OWORD *)__p = 0u;
  v39 = 0u;
  v40 = 1065353216;
  LODWORD(v36) = v10;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v41, 0, (int *)&v36, 1.58366009e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v41 + 40), &v41);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  LODWORD(v36) = 1836282994;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v41, 0, (int *)&v36, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v41 + 40), &v41);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  LODWORD(v36) = 1836282994;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v41, 0, (int *)&v36, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v41 + 40), &v41);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  LODWORD(v36) = *(_DWORD *)(a1 + 28);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v41, 0, (int *)&v36, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v41 + 40), &v41);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)&v41 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  DWORD2(v41) = v23;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>(&v36, 0, &v41, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v36 + 40), &v36);
  v24 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "com.apple.audio.Meta-Driver");
  v36 = 0x676C6F626F706C67;
  LODWORD(v37) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)&v41, (uint64_t)&v36, cf);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v41 + 40), &v41);
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (cf)
    CFRelease(cf);
  AMCP::Meta::Stream::update_core_common(a1, (uint64_t)__p);
  AMCP::Core::Broker::make_core((AMCP::Core::Core **)&v41, *(std::__shared_mutex_base **)(*(_QWORD *)(a1 + 8) + 16), (uint64_t)__p, *(unsigned int *)(a1 + 24));
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((_QWORD *)v39);
  v33 = __p[0];
  __p[0] = 0;
  if (v33)
    operator delete(v33);
  return a1;
}

void sub_1B593F614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, _QWORD *a15)
{
  _QWORD *v15;
  uint64_t v16;

  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(a15);
  if (__p)
    operator delete(__p);
  *v15 = &off_1E697FC58;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void AMCP::Meta::Stream::update_core(AMCP::Meta::Stream *this)
{
  unsigned int *v2;
  _QWORD *i;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p[2];
  __int128 v9;
  int v10;
  unsigned int *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  int v14;

  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v11, *(std::__shared_mutex_base **)(*((_QWORD *)this + 1) + 16), *((_DWORD *)this + 6));
  v2 = v11;
  if (v11)
  {
    *(_OWORD *)__p = 0u;
    v9 = 0u;
    v10 = 1065353216;
    AMCP::Meta::Stream::update_core_common((uint64_t)this, (uint64_t)__p);
    v13 = (uint64_t)(v2 + 12);
    LOBYTE(v14) = 1;
    caulk::concurrent::shared_spin_lock::lock(v2 + 12);
    for (i = (_QWORD *)v9; i; i = (_QWORD *)*i)
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)(v2 + 2), (unsigned int *)(i[4] + 40), i + 4);
    std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&v13);
    v13 = 0x676C6F626F776E72;
    v14 = 0;
    v2[1] = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>((AMCP::Core::Core *)v2, (const AMCP::Address *)&v13, &AMCP::k_object_id_unknown);
    std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((_QWORD *)v9);
    v4 = __p[0];
    __p[0] = 0;
    if (v4)
      operator delete(v4);
  }
  v5 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1B593F8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::~__hash_table((uint64_t)&a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void HALS_ClockDeviceState::InitializeStandardPropertiesToCapture(HALS_ClockDeviceState *this)
{
  CAPropertyAddressList *v1;
  const AudioObjectPropertyAddress *v2;
  const AudioObjectPropertyAddress *v3;
  const AudioObjectPropertyAddress *v4;
  const AudioObjectPropertyAddress *v5;
  const AudioObjectPropertyAddress *v6;
  const AudioObjectPropertyAddress *v7;
  const AudioObjectPropertyAddress *v8;
  const AudioObjectPropertyAddress *v9;
  const AudioObjectPropertyAddress *v10;
  const AudioObjectPropertyAddress *v11;
  const AudioObjectPropertyAddress *v12;
  AudioObjectPropertyAddress v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = (CAPropertyAddressList *)operator new();
  *(_OWORD *)v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  HALS_ClockDeviceState::sStandardDevicePropertiesToCapture = (uint64_t)v1;
  *(_QWORD *)&v13.mSelector = 0x676C6F626C6E616DLL;
  v13.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem(v1, &v13, v2);
  *(_QWORD *)&v13.mSelector = 0x676C6F626C6D6F64;
  v13.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_ClockDeviceState::sStandardDevicePropertiesToCapture, &v13, v3);
  *(_QWORD *)&v13.mSelector = 0x676C6F627472616ELL;
  v13.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_ClockDeviceState::sStandardDevicePropertiesToCapture, &v13, v4);
  *(_QWORD *)&v13.mSelector = 0x676C6F62636C6B64;
  v13.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_ClockDeviceState::sStandardDevicePropertiesToCapture, &v13, v5);
  *(_QWORD *)&v13.mSelector = 0x696E70746C746E63;
  v13.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_ClockDeviceState::sStandardDevicePropertiesToCapture, &v13, v6);
  *(_QWORD *)&v13.mSelector = 0x676C6F626E737274;
  v13.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_ClockDeviceState::sStandardDevicePropertiesToCapture, &v13, v7);
  *(_QWORD *)&v13.mSelector = 0x676C6F626E737223;
  v13.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_ClockDeviceState::sStandardDevicePropertiesToCapture, &v13, v8);
  *(_QWORD *)&v13.mSelector = 0x676C6F626869646ELL;
  v13.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_ClockDeviceState::sStandardDevicePropertiesToCapture, &v13, v9);
  *(_QWORD *)&v13.mSelector = 0x676C6F6272696E67;
  v13.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_ClockDeviceState::sStandardDevicePropertiesToCapture, &v13, v10);
  *(_QWORD *)&v13.mSelector = 0x676C6F62636C6F6BLL;
  v13.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_ClockDeviceState::sStandardDevicePropertiesToCapture, &v13, v11);
  *(_QWORD *)&v13.mSelector = 0x676C6F6263737462;
  v13.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_ClockDeviceState::sStandardDevicePropertiesToCapture, &v13, v12);
  if (!HALS_ClockDeviceState::sStandardDevicePropertiesToCapture
    && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v13.mSelector = 136315394;
    *(_QWORD *)&v13.mScope = "HALS_ClockDeviceState.cpp";
    v14 = 1024;
    v15 = 291;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALC_ProxyObjectMap::InitializePropertiesToCapture: there is no object list", (uint8_t *)&v13, 0x12u);
  }
}

void sub_1B593FAF0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    HALS_ClockDeviceState::sStandardDevicePropertiesToCapture = 0;
    __cxa_end_catch();
    JUMPOUT(0x1B593FA54);
  }
  _Unwind_Resume(a1);
}

void HALS_ClockDeviceState::HALS_ClockDeviceState(HALS_ClockDeviceState *this)
{
  *(_DWORD *)this = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = (char *)this + 16;
  pthread_once(&HALS_ClockDeviceState::sPropertiesToCaptureInitialized, (void (*)(void))HALS_ClockDeviceState::InitializeStandardPropertiesToCapture);
}

void sub_1B593FB54(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void HALS_ClockDeviceState::Capture(HALS_ClockDeviceState *this, HALS_ClockDevice *a2, const CAPropertyAddressList *a3)
{
  char **v6;
  BOOL *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL *v15;
  int PropertyDataType;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFTypeRef v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  CFTypeRef v27;
  char **v28;
  char *v29;
  char **v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  char *v38;
  int v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45[11];
  CFTypeRef cf;
  const char *v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  int v55;
  int v56;
  const void *v57;
  uint8_t buf[4];
  const char *v59;
  unint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  unint64_t v66;
  void (**v67)(OS::CF::UntypedObject *__hidden);
  CFTypeRef v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)this = *((_DWORD *)a2 + 4);
  v6 = (char **)((char *)this + 16);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*((_QWORD **)this + 2));
  *((_QWORD *)this + 1) = v6;
  *((_QWORD *)this + 3) = 0;
  *v6 = 0;
  v8 = *(_QWORD *)a3;
  v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a3 + 1) - *(_QWORD *)a3) >> 2);
  if ((_DWORD)v9)
  {
    v10 = 0;
    while (1)
    {
      v11 = 0;
      LODWORD(v12) = 0;
      v13 = 0;
      v48 = 0;
      v47 = 0;
      if (v9 > v10)
      {
        v14 = v8 + 12 * v10;
        v11 = *(_DWORD *)(v14 + 8);
        v13 = *(_QWORD *)v14;
        v47 = (const char *)v13;
        v48 = v11;
        v12 = HIDWORD(v13);
      }
      if (((_DWORD)v13 == 707406378 || (_DWORD)v12 == 707406378 || v11 == -1)
        && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v59 = "HALS_ClockDeviceState.cpp";
        LOWORD(v60) = 1024;
        *(_DWORD *)((char *)&v60 + 2) = 59;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_ClockDeviceState::Capture: properties with a wildcard are not supported", buf, 0x12u);
        v13 = v47;
      }
      if (HALB_Info::GetPropertyQualifierDataType((HALB_Info *)v13, 0, v7)
        && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v59 = "HALS_ClockDeviceState.cpp";
        LOWORD(v60) = 1024;
        *(_DWORD *)((char *)&v60 + 2) = 60;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_ClockDeviceState::Capture: properties with a qualifier are not supported", buf, 0x12u);
        v13 = v47;
      }
      if (HALB_Info::IsAVTProperty((HALB_Info *)v13)
        && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v59 = "HALS_ClockDeviceState.cpp";
        LOWORD(v60) = 1024;
        *(_DWORD *)((char *)&v60 + 2) = 61;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_ClockDeviceState::Capture: properties that use an AVT are not supported", buf, 0x12u);
        v13 = v47;
      }
      memset(v45, 0, 80);
      v45[10] = (unint64_t)&off_1E69A0E58;
      cf = 0;
      PropertyDataType = HALB_Info::GetPropertyDataType((HALB_Info *)v13, 0, v15);
      v44 = PropertyDataType;
      if (PropertyDataType <= 1718367025)
        break;
      if (PropertyDataType > 1886155635)
      {
        if (PropertyDataType == 1886155636)
          goto LABEL_30;
        if (PropertyDataType == 1969828658)
        {
          if (!(*(unsigned int (**)(HALS_ClockDevice *, _QWORD, const char **, _QWORD))(*(_QWORD *)a2 + 88))(a2, *((unsigned int *)a2 + 4), &v47, 0))goto LABEL_70;
          v18 = *((unsigned int *)a2 + 4);
          v49 = 0;
          v50 = 0;
          (*(void (**)(HALS_ClockDevice *, uint64_t, const char **, uint64_t, int *, int *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 112))(a2, v18, &v47, 4, &v49, &v50, 0, 0, 0);
          LODWORD(v45[3]) = v50;
          goto LABEL_46;
        }
LABEL_37:
        if (!(*(unsigned int (**)(HALS_ClockDevice *, _QWORD, const char **, _QWORD))(*(_QWORD *)a2 + 88))(a2, *((unsigned int *)a2 + 4), &v47, 0))goto LABEL_70;
        v44 = 1918990199;
        *(_DWORD *)buf = 0;
        v23 = (*(uint64_t (**)(HALS_ClockDevice *, _QWORD, const char **, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 104))(a2, *((unsigned int *)a2 + 4), &v47, 0, 0, 0);
        v24 = v23;
        *(_DWORD *)buf = v23;
        v25 = v45[0];
        if (v23 <= v45[1] - v45[0])
        {
          if (v23 < v45[1] - v45[0])
            v45[1] = v45[0] + v23;
        }
        else
        {
          std::vector<unsigned char>::__append(v45, v23 - (v45[1] - v45[0]));
          v24 = *(unsigned int *)buf;
          v25 = v45[0];
        }
        (*(void (**)(HALS_ClockDevice *, _QWORD, const char **, uint64_t, uint8_t *, unint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 112))(a2, *((unsigned int *)a2 + 4), &v47, v24, buf, v25, 0, 0, 0);
        if (*(unsigned int *)buf <= v45[1] - v45[0])
        {
          if (*(unsigned int *)buf < v45[1] - v45[0])
            v45[1] = v45[0] + *(unsigned int *)buf;
        }
        else
        {
          std::vector<unsigned char>::__append(v45, *(unsigned int *)buf - (v45[1] - v45[0]));
        }
        goto LABEL_46;
      }
      if (PropertyDataType == 1718367026)
      {
        if (!(*(unsigned int (**)(HALS_ClockDevice *, _QWORD, const char **, _QWORD))(*(_QWORD *)a2 + 88))(a2, *((unsigned int *)a2 + 4), &v47, 0))goto LABEL_70;
        v21 = *((unsigned int *)a2 + 4);
        v51 = 0;
        v52 = 0;
        (*(void (**)(HALS_ClockDevice *, uint64_t, const char **, uint64_t, int *, int *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 112))(a2, v21, &v47, 4, &v51, &v52, 0, 0, 0);
        HIDWORD(v45[3]) = v52;
        goto LABEL_46;
      }
      if (PropertyDataType != 1718367796)
        goto LABEL_37;
      if (!(*(unsigned int (**)(HALS_ClockDevice *, _QWORD, const char **, _QWORD))(*(_QWORD *)a2 + 88))(a2, *((unsigned int *)a2 + 4), &v47, 0))goto LABEL_70;
      v17 = *((unsigned int *)a2 + 4);
      v54 = 0;
      v53 = 0;
      (*(void (**)(HALS_ClockDevice *, uint64_t, const char **, uint64_t, int *, unint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 112))(a2, v17, &v47, 8, &v53, &v54, 0, 0, 0);
      v45[4] = v54;
LABEL_46:
      v26 = *((_DWORD *)a2 + 4);
      v59 = v47;
      v60 = __PAIR64__(v44, v48);
      *(_DWORD *)buf = v26;
      v62 = 0;
      v61 = 0uLL;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v61, (const void *)v45[0], v45[1], v45[1] - v45[0]);
      v63 = *(_OWORD *)&v45[3];
      v64 = *(_OWORD *)&v45[5];
      v65 = *(_OWORD *)&v45[7];
      v66 = v45[9];
      v67 = &off_1E69A0E58;
      v27 = cf;
      if (cf)
        CFRetain(cf);
      v68 = v27;
      v28 = v6;
      v29 = *v6;
      v30 = v6;
      if (*v6)
      {
        while (1)
        {
          while (1)
          {
            v30 = (char **)v29;
            v31 = *((_DWORD *)v29 + 8);
            if (*(_DWORD *)buf >= v31)
              break;
LABEL_50:
            v29 = *v30;
            v28 = v30;
            if (!*v30)
              goto LABEL_66;
          }
          if (*(_DWORD *)buf != v31)
            break;
          v32 = *((_DWORD *)v30 + 10);
          v33 = HIDWORD(v59) >= v32;
          if (HIDWORD(v59) == v32)
          {
            v34 = *((_DWORD *)v30 + 9);
            v33 = v59 >= v34;
            if ((_DWORD)v59 == v34)
              v33 = v60 >= *((_DWORD *)v30 + 11);
          }
          if (!v33)
            goto LABEL_50;
          if (v31 >= *(_DWORD *)buf)
          {
            if (*(_DWORD *)buf != v31)
              goto LABEL_69;
            v35 = *((_DWORD *)v30 + 10);
            v37 = v35 >= HIDWORD(v59);
            if (v35 == HIDWORD(v59))
            {
              v36 = *((_DWORD *)v30 + 9);
              v37 = v36 >= v59;
              if (v36 == (_DWORD)v59)
                v37 = *((_DWORD *)v30 + 11) >= v60;
            }
LABEL_64:
            if (v37)
              goto LABEL_69;
          }
          v28 = v30 + 1;
          v29 = v30[1];
          if (!v29)
            goto LABEL_66;
        }
        v37 = v31 >= *(_DWORD *)buf;
        goto LABEL_64;
      }
LABEL_66:
      v38 = (char *)operator new(0x98uLL);
      v39 = HIDWORD(v60);
      *((_DWORD *)v38 + 8) = *(_DWORD *)buf;
      *(_QWORD *)(v38 + 36) = v59;
      *((_DWORD *)v38 + 11) = v60;
      *((_DWORD *)v38 + 12) = v39;
      *(_OWORD *)(v38 + 56) = v61;
      *((_QWORD *)v38 + 9) = v62;
      v62 = 0;
      v61 = 0uLL;
      v40 = v63;
      v41 = v65;
      v42 = v66;
      *((_OWORD *)v38 + 6) = v64;
      *((_OWORD *)v38 + 7) = v41;
      *((_OWORD *)v38 + 5) = v40;
      *((_QWORD *)v38 + 16) = v42;
      *((_QWORD *)v38 + 17) = &off_1E69A0E58;
      *((_QWORD *)v38 + 18) = v27;
      v68 = 0;
      *(_QWORD *)v38 = 0;
      *((_QWORD *)v38 + 1) = 0;
      *((_QWORD *)v38 + 2) = v30;
      *v28 = v38;
      v43 = **((_QWORD **)this + 1);
      if (v43)
      {
        *((_QWORD *)this + 1) = v43;
        v38 = *v28;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 2), (uint64_t *)v38);
      ++*((_QWORD *)this + 3);
LABEL_69:
      HALS_DeviceState::Value::~Value((HALS_DeviceState::Value *)((char *)&v60 + 4));
LABEL_70:
      HALS_DeviceState::Value::~Value((HALS_DeviceState::Value *)&v44);
      ++v10;
      v8 = *(_QWORD *)a3;
      v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a3 + 1) - *(_QWORD *)a3) >> 2);
      if (v10 >= v9)
        return;
    }
    if (PropertyDataType == 1634951780)
    {
      if (!(*(unsigned int (**)(HALS_ClockDevice *, _QWORD, const char **, _QWORD))(*(_QWORD *)a2 + 88))(a2, *((unsigned int *)a2 + 4), &v47, 0))goto LABEL_70;
      v22 = *((unsigned int *)a2 + 4);
      v55 = 0;
      (*(void (**)(HALS_ClockDevice *, uint64_t, const char **, uint64_t, int *, unint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 112))(a2, v22, &v47, 40, &v55, &v45[5], 0, 0, 0);
      goto LABEL_46;
    }
    if (PropertyDataType == 1667658612 || PropertyDataType == 1668641388)
    {
LABEL_30:
      if (!(*(unsigned int (**)(HALS_ClockDevice *, _QWORD, const char **, _QWORD))(*(_QWORD *)a2 + 88))(a2, *((unsigned int *)a2 + 4), &v47, 0))goto LABEL_70;
      v19 = *((unsigned int *)a2 + 4);
      v57 = 0;
      v56 = 0;
      (*(void (**)(HALS_ClockDevice *, uint64_t, const char **, uint64_t, int *, const void **, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 112))(a2, v19, &v47, 8, &v56, &v57, 0, 0, 0);
      v20 = cf;
      cf = v57;
      if (v20)
        CFRelease(v20);
      goto LABEL_46;
    }
    goto LABEL_37;
  }
}

void sub_1B594040C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1B5940424(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, HALS_DeviceState::Value *a12)
{
  HALS_DeviceState::Value::~Value(a12);
  JUMPOUT(0x1B594043CLL);
}

void sub_1B5940434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  HALS_DeviceState::Value::~Value((HALS_DeviceState::Value *)va);
  JUMPOUT(0x1B5940444);
}

void HALS_ClockDeviceState::Compare(HALS_ClockDeviceState *this, const HALS_ClockDeviceState *a2, const AudioObjectPropertyAddress *a3, CAPropertyAddressList *a4)
{
  AudioObjectPropertyAddress *v4;
  AudioObjectPropertyAddress **v5;
  CAPropertyAddressList *v6;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _BOOL4 v11;
  uint64_t *v12;
  int mSelector;
  const void *v14;
  const void *v15;
  AudioObjectPropertyAddress *v16;
  AudioObjectPropertyAddress **v17;
  BOOL v18;

  v4 = (AudioObjectPropertyAddress *)*((_QWORD *)this + 1);
  v5 = (AudioObjectPropertyAddress **)((char *)this + 16);
  if (v4 != (AudioObjectPropertyAddress *)((char *)this + 16))
  {
    v6 = (CAPropertyAddressList *)a3;
    v8 = (_QWORD *)((char *)a2 + 16);
    while (1)
    {
      v9 = *v8;
      if (!*v8)
        goto LABEL_39;
      v10 = v8;
      do
      {
        v11 = operator<((_DWORD *)(v9 + 32), &v4[2].mElement);
        v12 = (uint64_t *)(v9 + 8);
        if (!v11)
        {
          v12 = (uint64_t *)v9;
          v10 = (_QWORD *)v9;
        }
        v9 = *v12;
      }
      while (*v12);
      if (v10 == v8
        || operator<(&v4[2].mElement, (_DWORD *)v10 + 8)
        || (mSelector = v4[4].mSelector, mSelector != *((_DWORD *)v10 + 12)))
      {
LABEL_39:
        if (v4[2].mElement == *(_DWORD *)this)
          CAPropertyAddressList::AppendUniqueItem(v6, v4 + 3, a3);
        goto LABEL_41;
      }
      if (mSelector > 1718367025)
        break;
      if (mSelector != 1634951780)
      {
        if (mSelector == 1667658612 || mSelector == 1668641388)
        {
LABEL_25:
          if (!CFEqual(*(CFTypeRef *)&v4[12].mSelector, (CFTypeRef)v10[18]))
            goto LABEL_39;
          goto LABEL_41;
        }
LABEL_37:
        v14 = *(const void **)&v4[4].mElement;
        a3 = (const AudioObjectPropertyAddress *)(*(_QWORD *)&v4[5].mScope - (_QWORD)v14);
        v15 = (const void *)v10[7];
        if (a3 != (const AudioObjectPropertyAddress *)(v10[8] - (_QWORD)v15) || memcmp(v14, v15, (size_t)a3))
          goto LABEL_39;
        goto LABEL_41;
      }
      if (*(double *)&v4[8].mSelector != *((double *)v10 + 12)
        || v4[8].mElement != *((_DWORD *)v10 + 26)
        || v4[9].mScope != *((_DWORD *)v10 + 28)
        || v4[9].mElement != *((_DWORD *)v10 + 29)
        || v4[10].mScope != *((_DWORD *)v10 + 31)
        || v4[10].mElement != *((_DWORD *)v10 + 32)
        || !CA::Implementation::EquivalentFormatFlags((CA::Implementation *)&v4[8], (const AudioStreamBasicDescription *)(v10 + 12), (const AudioStreamBasicDescription *)1, 0))
      {
        goto LABEL_39;
      }
LABEL_41:
      v16 = *(AudioObjectPropertyAddress **)&v4->mElement;
      if (v16)
      {
        do
        {
          v17 = (AudioObjectPropertyAddress **)v16;
          v16 = *(AudioObjectPropertyAddress **)&v16->mSelector;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = *(AudioObjectPropertyAddress ***)&v4[1].mScope;
          v18 = *v17 == v4;
          v4 = (AudioObjectPropertyAddress *)v17;
        }
        while (!v18);
      }
      v4 = (AudioObjectPropertyAddress *)v17;
      if (v17 == v5)
        return;
    }
    if (mSelector > 1886155635)
    {
      if (mSelector == 1886155636)
        goto LABEL_25;
      if (mSelector == 1969828658)
      {
        if (v4[6].mElement != *((_DWORD *)v10 + 20))
          goto LABEL_39;
        goto LABEL_41;
      }
    }
    else
    {
      if (mSelector == 1718367026)
      {
        if (*(float *)&v4[7].mSelector != *((float *)v10 + 21))
          goto LABEL_39;
        goto LABEL_41;
      }
      if (mSelector == 1718367796)
      {
        if (*(double *)&v4[7].mScope != *((double *)v10 + 11))
          goto LABEL_39;
        goto LABEL_41;
      }
    }
    goto LABEL_37;
  }
}

void HALS_Tap::Deactivate(HALS_Tap *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26[2];
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;

  v3 = *((_QWORD *)this + 31);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (*(_BYTE *)(v3 + 464))
  {
    v6 = *(_QWORD **)(v3 + 456);
    if (v6 == (_QWORD *)(v3 + 432))
    {
      v7 = 4;
      v6 = (_QWORD *)(v3 + 432);
    }
    else
    {
      if (!v6)
      {
LABEL_10:
        *(_BYTE *)(v3 + 464) = 0;
        goto LABEL_11;
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_10;
  }
LABEL_11:
  if (v2)
  {
    v8 = (unint64_t *)&v2->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v29 = 0;
  v30 = 0;
  v31 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v29, *((const void **)this + 26), *((_QWORD *)this + 27), (uint64_t)(*((_QWORD *)this + 27) - *((_QWORD *)this + 26)) >> 2);
  v10 = v29;
  v11 = (unsigned int *)v30;
  if (v29 != v30)
  {
    v12 = (unsigned int *)v29;
    do
      HALS_Tap::SetClientMuteState(this, (HALS_ObjectMap *)*v12++, 0);
    while (v12 != v11);
  }
  if (v10)
    operator delete(v10);
  v27 = 0;
  v28 = 0;
  HALS_System::GetInstance(&v29, 0, &v27);
  v13 = (uint64_t)v29;
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  v26[0] = *((_QWORD *)this + 31);
  v26[1] = (uint64_t)v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  HALS_System::RemoveTapFromAllContexts(v13, v26);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v19 = v30;
  if (v30)
  {
    v20 = (unint64_t *)&v30->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v28;
  if (v28)
  {
    v23 = (unint64_t *)&v28->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  HALS_Object::Deactivate(this);
  do
    v25 = __ldaxr(&HALS_Tap::gPendingTapDelete);
  while (__stlxr(v25 - 1, &HALS_Tap::gPendingTapDelete));
}

void sub_1B59408E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void HALS_Tap::~HALS_Tap(HALB_Mutex **this)
{
  HALS_Tap::~HALS_Tap(this);
  JUMPOUT(0x1B5E50688);
}

{
  HALB_Mutex **v2;
  HALB_Mutex *v3;
  HALB_Mutex *v4;
  HALB_Mutex *v5;
  HALB_Mutex *v6;

  *this = (HALB_Mutex *)off_1E6975A30;
  v2 = this + 9;
  std::unique_ptr<HALB_CommandGate>::reset[abi:ne180100](this + 9, 0);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(this + 31));
  v3 = this[29];
  this[29] = 0;
  if (v3)
    MEMORY[0x1B5E50688](v3, 0x1000C4000313F17);
  v4 = this[26];
  if (v4)
  {
    this[27] = v4;
    operator delete(v4);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 21));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 16));
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)(this + 11));
  std::unique_ptr<HALB_CommandGate>::reset[abi:ne180100](v2, 0);
  v5 = this[8];
  if (v5)
    CFRelease(v5);
  v6 = this[7];
  if (v6)
    CFRelease(v6);
  HALS_Object::~HALS_Object((HALS_Object *)this);
}

uint64_t HALS_Tap::GetCommandGate(HALS_Tap *this)
{
  return *((_QWORD *)this + 9);
}

{
  return *((_QWORD *)this + 9);
}

uint64_t HALS_Tap::HasProperty(uint64_t a1, uint64_t a2, int *a3)
{
  int v3;
  uint64_t result;
  BOOL v5;
  int v6;

  v3 = *a3;
  result = 1;
  if (*a3 <= 1870098019)
  {
    if (v3 > 1819173228)
    {
      v5 = v3 == 1819173229;
      v6 = 1869638759;
    }
    else
    {
      v5 = v3 == 1650682995;
      v6 = 1668047219;
    }
  }
  else if (v3 <= 1952740194)
  {
    v5 = v3 == 1870098020;
    v6 = 1937007734;
  }
  else
  {
    v5 = v3 == 1952740195 || v3 == 1952869748;
    v6 = 1953851748;
  }
  if (!v5 && v3 != v6)
    return 0;
  return result;
}

uint64_t HALS_Tap::IsPropertySettable(uint64_t a1, uint64_t a2, int *a3)
{
  int v3;

  v3 = *a3;
  if (*a3 > 1952869747)
  {
    if (v3 == 1952869748 || v3 == 1953851748)
      return 0;
  }
  else if (v3 == 1819173229 || v3 == 1952740195)
  {
    return 1;
  }
  return HALS_Object::IsPropertySettable(a1, a2, a3);
}

uint64_t HALS_Tap::GetPropertyDataSize(uint64_t a1, uint64_t a2, int *a3)
{
  int v3;
  uint64_t result;

  v3 = *a3;
  result = 8;
  if (*a3 > 1952869747)
  {
    if (v3 != 1953851748)
    {
      if (v3 == 1952869748)
        return 40;
      return HALS_Object::GetPropertyDataSize(8, a2, a3);
    }
  }
  else if (v3 != 1819173229 && v3 != 1952740195)
  {
    return HALS_Object::GetPropertyDataSize(8, a2, a3);
  }
  return result;
}

void HALS_Tap::GetPropertyData(HALS_Tap *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, _QWORD *a6, unsigned int a7, const void *a8, HALS_Client *a9)
{
  AudioObjectPropertySelector mSelector;
  HALB_Mutex *v12;
  unsigned int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *exception;
  _QWORD v21[6];
  _BYTE buf[12];
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1952869747)
  {
    if (mSelector == 1952869748)
    {
      if (a4 <= 0x27)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_Tap.cpp";
          v23 = 1024;
          v24 = 169;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Client::GetPropertyData: bad property data size for kAudioTapPropertyFormat", buf, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69A1B30;
        exception[2] = 561211770;
      }
      v14 = *((_QWORD *)this + 31);
      v15 = *(_OWORD *)(v14 + 24);
      v16 = *(_OWORD *)(v14 + 40);
      a6[4] = *(_QWORD *)(v14 + 56);
      *(_OWORD *)a6 = v15;
      *((_OWORD *)a6 + 1) = v16;
      v13 = 40;
      goto LABEL_17;
    }
    if (mSelector != 1953851748)
      goto LABEL_10;
    if (a4 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_Tap.cpp";
        v23 = 1024;
        v24 = 150;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Client::GetPropertyData: bad property data size for kAudioTapPropertyUID", buf, 0x12u);
      }
      v18 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v18 = &off_1E69A1B30;
      v18[2] = 561211770;
    }
    HALS_Tap::GetUID(buf, *((const void **)this + 8));
  }
  else
  {
    if (mSelector != 1819173229)
    {
      if (mSelector == 1952740195)
      {
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_Tap.cpp";
            v23 = 1024;
            v24 = 157;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioTapPropertyDescription", buf, 0x12u);
          }
          v17 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v17 = &off_1E69A1B30;
          v17[2] = 561211770;
        }
        v21[0] = MEMORY[0x1E0C809B0];
        v21[1] = 0x40000000;
        v21[2] = ___ZNK8HALS_Tap15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
        v21[3] = &__block_descriptor_tmp_3101;
        v21[4] = this;
        v21[5] = a6;
        v12 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Tap *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v12, (uint64_t)v21);
        goto LABEL_14;
      }
LABEL_10:
      HALS_Object::GetPropertyData((uint64_t)this, a2, (int *)a3, a4, (int *)a5, a6);
      return;
    }
    if (a4 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_Tap.cpp";
        v23 = 1024;
        v24 = 143;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Client::GetPropertyData: bad property data size for kAudioObjectPropertyName", buf, 0x12u);
      }
      v19 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v19 = &off_1E69A1B30;
      v19[2] = 561211770;
    }
    HALS_Tap::GetName(buf, *((const void **)this + 7));
  }
  *a6 = *(_QWORD *)buf;
LABEL_14:
  v13 = 8;
LABEL_17:
  *a5 = v13;
}

void HALS_Tap::SetPropertyData(HALS_Tap *this, uint64_t a2, const AudioObjectPropertyAddress *a3, unsigned int a4, const void **a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  HALB_Mutex *v18;
  HALS_NotificationManager *v19;
  uint64_t v20;
  _BYTE *v21;
  _DWORD *v22;
  HALS_NotificationManager *v23;
  uint64_t v24;
  __int128 v25;
  HALS_PlatformBehaviors *v26;
  uint64_t *platform_behaviors;
  uint64_t v28;
  const void *v29;
  int v30;
  HALB_Mutex *v31;
  HALS_NotificationManager *v32;
  HALS_NotificationManager *v33;
  HALS_NotificationManager *v34;
  HALS_NotificationManager *v35;
  HALS_NotificationManager *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::vector<unsigned int>::value_type *v46;
  const std::vector<unsigned int>::value_type *v47;
  const std::vector<unsigned int>::value_type *v48;
  const std::vector<unsigned int>::value_type *v49;
  void **v50;
  unsigned int *v51;
  HALS_Object *v52;
  HALS_Object *v53;
  HALS_ObjectMap *v54;
  unsigned int *v55;
  unsigned int *v56;
  uint64_t v57;
  HALS_Object *v58;
  HALS_ObjectMap *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::vector<unsigned int>::value_type *v66;
  std::vector<unsigned int>::value_type *v67;
  unsigned int *v68;
  unsigned int *v69;
  uint64_t v70;
  unsigned int *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _DWORD *exception;
  _DWORD *v84;
  _DWORD *v85;
  void *p_p;
  _DWORD *v87;
  CFTypeRef cf;
  _QWORD v89[6];
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  char v93;
  void *__p;
  void **v95;
  uint64_t v96;
  char v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  _BYTE *v102;
  uint64_t v103;
  void **v104;
  void **v105;
  uint64_t v106;
  void *v107;
  _BYTE *v108;
  uint64_t v109;
  const std::vector<unsigned int>::value_type *v110;
  const std::vector<unsigned int>::value_type *v111;
  uint64_t v112;
  const std::vector<unsigned int>::value_type *v113;
  const std::vector<unsigned int>::value_type *v114;
  uint64_t v115;
  const std::vector<unsigned int>::value_type *v116[2];
  const std::vector<unsigned int>::value_type *v117;
  const std::vector<unsigned int>::value_type *v118;
  const std::vector<unsigned int>::value_type *v119;
  const std::vector<unsigned int>::value_type *v120;
  uint64_t v121;
  unsigned int *v122;
  uint64_t v123;
  _BYTE buf[32];
  __int128 *v125;
  void **v126;
  uint64_t *v127;
  _BYTE *v128;
  HALS_Tap *v129;
  CFTypeRef *p_cf;
  _BYTE v131[28];
  __int128 v132;
  __int128 v133;
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_Tap *, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *, const void **, uint64_t, const void *))(*(_QWORD *)this + 96))(this, a2, a3, a8, a5, a6, a7) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  if (a3->mSelector != 1952740195)
  {
    if (a3->mSelector != 1819173229)
      HALS_Object::SetPropertyData((uint64_t)this, a2, (uint64_t)a3, v14, v15, v16, v17, (uint64_t)a8);
    if (a4 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_Tap.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 195;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Tap::SetPropertyData: bad property data size for kAudioObjectPropertyName", buf, 0x12u);
      }
      v84 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v84 = &off_1E69A1B30;
      v84[2] = 561211770;
    }
    v89[0] = MEMORY[0x1E0C809B0];
    v89[1] = 0x40000000;
    v89[2] = ___ZN8HALS_Tap15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
    v89[3] = &__block_descriptor_tmp_3_3063;
    v89[4] = this;
    v89[5] = a5;
    v18 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Tap *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v18, (uint64_t)v89);
    v19 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
    if (a8)
      v20 = *((unsigned int *)a8 + 4);
    else
      v20 = 0;
    strcpy(buf, "csdtbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    HALS_Object::PropertiesChanged(this, v19, v20, 1, (const AudioObjectPropertyAddress *)buf);
    v23 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
    if (a8)
      v24 = *((unsigned int *)a8 + 4);
    else
      v24 = 0;
    strcpy(buf, "manlbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    HALS_Object::PropertiesChanged(this, v23, v24, 1, (const AudioObjectPropertyAddress *)buf);
    return;
  }
  if (a8)
  {
    v21 = (char *)a8 + 263;
    if (*((_BYTE *)a8 + 264))
    {
      if (!*v21)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_Client.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 933;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Client is not granted access to the audio taps.", buf, 0x12u);
        }
        v22 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v22 = &off_1E69A1B30;
        v22[2] = 560492391;
      }
    }
    else
    {
      *(_WORD *)v21 = 256;
      v25 = *(_OWORD *)((char *)a8 + 216);
      v132 = *(_OWORD *)((char *)a8 + 200);
      v133 = v25;
      v26 = (HALS_PlatformBehaviors *)std::string::basic_string[abi:ne180100]<0>(&__p, "audio taps");
      platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(v26);
      v28 = (*(uint64_t (**)(uint64_t *))(*platform_behaviors + 64))(platform_behaviors);
      *(_OWORD *)buf = v132;
      *(_OWORD *)&buf[16] = v133;
      if (((*(uint64_t (**)(uint64_t, const __CFString *, _BYTE *))(*(_QWORD *)v28 + 32))(v28, CFSTR("kTCCServiceAudioCapture"), buf) & 1) == 0)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          p_p = &__p;
          if (v96 < 0)
            p_p = __p;
          *(_DWORD *)v131 = 136315650;
          *(_QWORD *)&v131[4] = "HALS_IOContext.cpp";
          *(_WORD *)&v131[12] = 1024;
          *(_DWORD *)&v131[14] = 1449;
          *(_WORD *)&v131[18] = 2080;
          *(_QWORD *)&v131[20] = p_p;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Client is not granted access to the %s.", v131, 0x1Cu);
        }
        v87 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v87 = &off_1E69A1B30;
        v87[2] = 560492391;
      }
      if (SHIBYTE(v96) < 0)
        operator delete(__p);
      *(_WORD *)v21 = 257;
    }
  }
  if (a4 <= 7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_Tap.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 217;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Tap::SetPropertyData: bad property data size for kAudioTapPropertyDescription", buf, 0x12u);
    }
    v85 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v85 = &off_1E69A1B30;
    v85[2] = 561211770;
  }
  v29 = *a5;
  if (v29)
  {
    CFRetain(v29);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, v29);
  }
  else
  {
    cf = 0;
  }
  v98 = 0;
  v99 = 0;
  v100 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v98, *((const void **)this + 26), *((_QWORD *)this + 27), (uint64_t)(*((_QWORD *)this + 27) - *((_QWORD *)this + 26)) >> 2);
  v30 = *((unsigned __int8 *)this + 240);
  *(_QWORD *)&v132 = 0;
  *((_QWORD *)&v132 + 1) = &v132;
  *(_QWORD *)&v133 = 0x2000000000;
  BYTE8(v133) = 0;
  *(_QWORD *)v131 = 0;
  *(_QWORD *)&v131[8] = v131;
  *(_QWORD *)&v131[16] = 0x2000000000;
  v131[24] = 0;
  __p = 0;
  v95 = &__p;
  v96 = 0x2000000000;
  v97 = 0;
  v90 = 0;
  v91 = &v90;
  v92 = 0x2000000000;
  v93 = 0;
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZN8HALS_Tap14SetDescriptionERKN10applesauce2CF13DictionaryRefE_block_invoke;
  *(_QWORD *)&buf[24] = &unk_1E6975B40;
  v129 = this;
  p_cf = &cf;
  v125 = &v132;
  v126 = &__p;
  v127 = &v90;
  v128 = v131;
  v31 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Tap *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v31, (uint64_t)buf);
  HALS_Tap::UpdateFilteredProcesses(this);
  if (!*(_BYTE *)(*((_QWORD *)&v132 + 1) + 24))
  {
    if (!v30 && *((_BYTE *)this + 240))
    {
      HALS_Tap::AddTapToAllContexts(this);
      goto LABEL_28;
    }
    v39 = *((_QWORD *)this + 31);
    v38 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v41 = __ldxr(p_shared_owners);
      while (__stxr(v41 + 1, p_shared_owners));
    }
    if (!*(_BYTE *)(v39 + 464))
    {
LABEL_55:
      if (v38)
      {
        v44 = (unint64_t *)&v38->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      if (*((_BYTE *)this + 240))
      {
        v113 = 0;
        v114 = 0;
        v115 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v113, v98, v99, (v99 - (uint64_t)v98) >> 2);
        v110 = 0;
        v111 = 0;
        v112 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v110, *((const void **)this + 26), *((_QWORD *)this + 27), (uint64_t)(*((_QWORD *)this + 27) - *((_QWORD *)this + 26)) >> 2);
        v46 = (std::vector<unsigned int>::value_type *)v113;
        v47 = v114;
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        v48 = v110;
        v49 = v111;
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        v107 = 0;
        v108 = 0;
        v109 = 0;
        v101 = v46;
        v116[0] = v47;
        v119 = v49;
        v120 = v48;
        v104 = &v107;
        v105 = 0;
        std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<unsigned int *> &,std::__wrap_iter<unsigned int *> &,std::__wrap_iter<unsigned int *> &,std::__wrap_iter<unsigned int *> &,std::insert_iterator<std::vector<unsigned int>> &>((std::__wrap_iter<unsigned int *>::iterator_type)&v121, (const std::vector<unsigned int>::value_type **)&v101, v116, &v120, &v119, (uint64_t)&v104);
        v105 = 0;
        v106 = 0;
        v104 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v104, v107, (uint64_t)v108, (v108 - (_BYTE *)v107) >> 2);
        v50 = v104;
        v51 = (unsigned int *)v105;
        if (v104 != v105)
        {
          do
          {
            v52 = (HALS_Object *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)v50);
            v54 = v52;
            if (v52)
            {
              HALS_Client::RemoveMuter(v52, *((_DWORD *)this + 4));
              (*(void (**)(uint64_t *__return_ptr, HALS_ObjectMap *))(*(_QWORD *)v54 + 200))(&v121, v54);
              v55 = (unsigned int *)v121;
              v56 = v122;
              if ((unsigned int *)v121 != v122)
              {
                do
                {
                  v57 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v55);
                  v59 = (HALS_ObjectMap *)v57;
                  if (v57)
                  {
                    v60 = (void *)*((_QWORD *)this + 31);
                    v61 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
                    v101 = v60;
                    v102 = v61;
                    if (v61)
                    {
                      v62 = (unint64_t *)&v61->__shared_owners_;
                      do
                        v63 = __ldxr(v62);
                      while (__stxr(v63 + 1, v62));
                    }
                    HALS_IOContext::RemoveTap(*(_QWORD *)(v57 + 96), (uint64_t)v60, v61);
                    if (v61)
                    {
                      v64 = (unint64_t *)&v61->__shared_owners_;
                      do
                        v65 = __ldaxr(v64);
                      while (__stlxr(v65 - 1, v64));
                      if (!v65)
                      {
                        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                        std::__shared_weak_count::__release_weak(v61);
                      }
                    }
                  }
                  HALS_ObjectMap::ReleaseObject(v59, v58);
                  ++v55;
                }
                while (v55 != v56);
                v55 = (unsigned int *)v121;
              }
              if (v55)
              {
                v122 = v55;
                operator delete(v55);
              }
            }
            HALS_ObjectMap::ReleaseObject(v54, v53);
            v50 = (void **)((char *)v50 + 4);
          }
          while (v50 != (void **)v51);
          v50 = v104;
        }
        if (v50)
        {
          v105 = v50;
          operator delete(v50);
        }
        v101 = 0;
        v102 = 0;
        v103 = 0;
        v66 = (std::vector<unsigned int>::value_type *)v110;
        v67 = (std::vector<unsigned int>::value_type *)v113;
        v119 = v111;
        v120 = v110;
        v117 = v114;
        v118 = v113;
        v116[0] = (const std::vector<unsigned int>::value_type *)&v101;
        v116[1] = 0;
        std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<unsigned int *> &,std::__wrap_iter<unsigned int *> &,std::__wrap_iter<unsigned int *> &,std::__wrap_iter<unsigned int *> &,std::insert_iterator<std::vector<unsigned int>> &>((std::__wrap_iter<unsigned int *>::iterator_type)&v121, &v120, &v119, &v118, &v117, (uint64_t)v116);
        v122 = 0;
        v123 = 0;
        v121 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v121, v101, (uint64_t)v102, (v102 - (_BYTE *)v101) >> 2);
        v68 = (unsigned int *)v121;
        HALS_Tap::AddTapToClients((uint64_t)this, (unsigned int *)v121, v122);
        if (v68)
        {
          v122 = v68;
          operator delete(v68);
        }
        if (v101)
        {
          v102 = v101;
          operator delete(v101);
        }
        if (v107)
        {
          v108 = v107;
          operator delete(v107);
        }
        if (v66)
          operator delete(v66);
        if (v67)
          operator delete(v67);
      }
      else
      {
        v69 = (unsigned int *)v98;
        v70 = v99;
        while (v69 != (unsigned int *)v70)
          HALS_Tap::SetClientMuteState(this, (HALS_ObjectMap *)*v69++, 0);
        v113 = 0;
        v114 = 0;
        HALS_System::GetInstance(&v121, 0, (uint64_t *)&v113);
        v71 = (unsigned int *)v121;
        v72 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
        v110 = (const std::vector<unsigned int>::value_type *)*((_QWORD *)this + 31);
        v111 = (const std::vector<unsigned int>::value_type *)v72;
        if (v72)
        {
          v73 = (unint64_t *)&v72->__shared_owners_;
          do
            v74 = __ldxr(v73);
          while (__stxr(v74 + 1, v73));
        }
        HALS_System::RemoveTapFromAllContexts((uint64_t)v71, (uint64_t *)&v110);
        if (v72)
        {
          v75 = (unint64_t *)&v72->__shared_owners_;
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        v77 = (std::__shared_weak_count *)v122;
        if (v122)
        {
          v78 = (unint64_t *)(v122 + 2);
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        v80 = (std::__shared_weak_count *)v114;
        if (v114)
        {
          v81 = (unint64_t *)(v114 + 2);
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
      }
      goto LABEL_28;
    }
    v42 = *(_QWORD **)(v39 + 456);
    if (v42 == (_QWORD *)(v39 + 432))
    {
      v43 = 4;
      v42 = (_QWORD *)(v39 + 432);
    }
    else
    {
      if (!v42)
      {
LABEL_54:
        *(_BYTE *)(v39 + 464) = 0;
        goto LABEL_55;
      }
      v43 = 5;
    }
    (*(void (**)(void))(*v42 + 8 * v43))();
    goto LABEL_54;
  }
  HALS_Tap::UpdateReadingContexts(this, (unsigned int **)&v98);
LABEL_28:
  v32 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
  v121 = 0x676C6F6274647363;
  LODWORD(v122) = 0;
  HALS_Object::PropertiesChanged(this, v32, 0, 1, (const AudioObjectPropertyAddress *)&v121);
  if (*((_BYTE *)v91 + 24))
  {
    v33 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
    v121 = 0x676C6F6274707323;
    LODWORD(v122) = 0;
    HALS_Object::PropertiesChanged(this, v33, 0, 1, (const AudioObjectPropertyAddress *)&v121);
  }
  if (*((_BYTE *)v95 + 24))
  {
    v34 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
    v121 = 0x676C6F6274666D74;
    LODWORD(v122) = 0;
    HALS_Object::PropertiesChanged(this, v34, 0, 1, (const AudioObjectPropertyAddress *)&v121);
  }
  if (*(_BYTE *)(*(_QWORD *)&v131[8] + 24))
  {
    v35 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
    v121 = 0x676C6F626C6E616DLL;
    LODWORD(v122) = 0;
    HALS_Object::PropertiesChanged(this, v35, 0, 1, (const AudioObjectPropertyAddress *)&v121);
  }
  _Block_object_dispose(&v90, 8);
  _Block_object_dispose(&__p, 8);
  _Block_object_dispose(v131, 8);
  _Block_object_dispose(&v132, 8);
  if (v98)
    operator delete(v98);
  v36 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
  if (a8)
    v37 = *((unsigned int *)a8 + 4);
  else
    v37 = 0;
  strcpy(buf, "csdtbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  HALS_Object::PropertiesChanged(this, v36, v37, 1, (const AudioObjectPropertyAddress *)buf);
  if (cf)
    CFRelease(cf);
}

void sub_1B5941A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52)
{
  uint64_t v52;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a51);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a42);
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose((const void *)(v52 - 176), 8);
  _Block_object_dispose((const void *)(v52 - 144), 8);
  if (__p)
    operator delete(__p);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&a9);
  _Unwind_Resume(a1);
}

void HALS_Tap::HandleGroupObjectPropertiesChanged(HALS_Object *a1)
{
  unsigned int *v1;
  HALS_ObjectMap *v3;
  HALS_Object *v4;
  HALS_ObjectMap *v5;
  HALB_Mutex *v6;
  HALS_Object *v7;
  HALS_NotificationManager *v8;
  _QWORD v9[6];
  HALS_ObjectMap *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  AudioObjectPropertyAddress v15;

  v1 = (unsigned int *)*((_QWORD *)a1 + 29);
  if (v1)
  {
    v3 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v1);
    v5 = v3;
    if (v3)
    {
      v11 = 0;
      v12 = &v11;
      v13 = 0x2000000000;
      v14 = 0;
      v9[0] = MEMORY[0x1E0C809B0];
      v9[1] = 1174405120;
      v9[2] = ___ZN8HALS_Tap34HandleGroupObjectPropertiesChangedEjjjPKjS1_jPK26AudioObjectPropertyAddressbRKNSt3__16vectorIjNS5_9allocatorIjEEEEN10applesauce8dispatch2v15groupE_block_invoke;
      v9[3] = &unk_1E6975BB8;
      v9[4] = &v11;
      v9[5] = a1;
      v10 = v3;
      HALS_ObjectMap::RetainObject(v3, v4);
      v6 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Object *))(*(_QWORD *)a1 + 56))(a1);
      HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v9);
      if (*((_BYTE *)v12 + 24))
      {
        v8 = (HALS_NotificationManager *)*((unsigned int *)a1 + 4);
        *(_QWORD *)&v15.mSelector = 0x676C6F6274666D74;
        v15.mElement = 0;
        HALS_Object::PropertiesChanged(a1, v8, 0, 1, &v15);
      }
      HALS_ObjectMap::ReleaseObject(v10, v7);
      _Block_object_dispose(&v11, 8);
    }
    HALS_ObjectMap::ReleaseObject(v5, v4);
  }
}

void sub_1B5941CA8(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, HALS_ObjectMap *a16, char a17)
{
  HALS_ObjectMap *v17;
  HALS_Object *v19;

  HALS_ObjectMap::ReleaseObject(a16, a2);
  _Block_object_dispose(&a17, 8);
  HALS_ObjectMap::ReleaseObject(v17, v19);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8HALS_Tap34HandleGroupObjectPropertiesChangedEjjjPKjS1_jPK26AudioObjectPropertyAddressbRKNSt3__16vectorIjNS5_9allocatorIjEEEEN10applesauce8dispatch2v15groupE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = HALS_Tap::UpdateTapFormatFromDeviceFormat(*(HALS_Tap **)(a1 + 40), *(HALS_Device **)(a1 + 48));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void __copy_helper_block_e8_48c34_ZTS13HALS_ReleaserI11HALS_DeviceE(uint64_t a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  v2 = (HALS_ObjectMap *)*((_QWORD *)a2 + 6);
  *(_QWORD *)(a1 + 48) = v2;
  HALS_ObjectMap::RetainObject(v2, a2);
}

void __destroy_helper_block_e8_48c34_ZTS13HALS_ReleaserI11HALS_DeviceE(uint64_t a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(a1 + 48), a2);
}

uint64_t HALS_Tap::UpdateTapFormatFromDeviceFormat(HALS_Tap *this, HALS_Device *a2)
{
  HALS_Object *v3;
  uint64_t v4;
  unint64_t v5;
  HALS_MultiTap *v6;
  uint64_t v7;
  AudioStreamBasicDescription v9;
  AudioStreamBasicDescription v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  HALS_Device::CopyStreamList((uint64_t)a2, 0, &v11);
  if (v12 == v11 || (v4 = *((_QWORD *)this + 29)) == 0 || (v5 = *(unsigned int *)(v4 + 4), (v12 - v11) >> 3 <= v5))
  {
    v7 = 0;
  }
  else
  {
    HALS_Stream::GetCurrentVirtualFormat(*(HALS_Stream **)&v11[8 * v5], &v10);
    v6 = (HALS_MultiTap *)*((_QWORD *)this + 31);
    v9 = v10;
    HALS_MultiTap::set_format(v6, (__int128 *)&v9, 0x100000002);
    v7 = 1;
  }
  HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)&v11, v3);
  return v7;
}

void sub_1B5941E04(_Unwind_Exception *a1, HALS_Object *a2)
{
  uint64_t v2;

  HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)(v2 - 40), a2);
  _Unwind_Resume(a1);
}

void ___ZN8HALS_Tap15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v1;
  CFDictionaryRef v2;
  const void *v3;
  const void *v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = PropertyListDeepImmutableCopy(**(const __CFString ***)(a1 + 40));
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v4, v2);
  v3 = *(const void **)(v1 + 56);
  *(_QWORD *)(v1 + 56) = v4;
  v4 = v3;
  if (v3)
    CFRelease(v3);
}

void sub_1B5941E70(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5941E5CLL);
}

void ___ZN8HALS_Tap14SetDescriptionERKN10applesauce2CF13DictionaryRefE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  CFTypeRef *v3;
  const __CFDictionary *v4;
  CFTypeRef v5;
  CFTypeRef cf;
  const __CFDictionary *v7;
  CFTypeRef v8;

  v2 = a1[8];
  *(_BYTE *)(v2 + 240) = 0;
  HALS_Tap::GetName(&v8, *(const void **)(v2 + 56));
  v3 = (CFTypeRef *)a1[9];
  v4 = (const __CFDictionary *)*v3;
  if (*v3)
    CFRetain(*v3);
  v7 = v4;
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = HALS_Tap::_UpdateFromDescription(v2, &v7, (BOOL *)(*(_QWORD *)(a1[5] + 8) + 24), (BOOL *)(*(_QWORD *)(a1[6] + 8) + 24));
  if (v4)
    CFRelease(v4);
  *(_BYTE *)(v2 + 240) = 1;
  HALS_Tap::GetName(&cf, *(const void **)(v2 + 56));
  v5 = v8;
  *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)v8, (const __CFString **)&cf) != kCFCompareEqualTo;
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
}

void sub_1B5941F70(void *a1, uint64_t a2, uint64_t a3, ...)
{
  const void *v4;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, const void *);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  applesauce::CF::StringRef::~StringRef((const void **)va1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5941F4CLL);
}

void HALS_Tap::UpdateFilteredProcesses(HALS_Tap *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;
  HALB_Mutex *v9;
  HALB_Mutex *v10;
  _QWORD v11[5];
  _QWORD v12[5];
  void *__p;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  void *v20;
  uint64_t v21;

  if (*((_BYTE *)this + 81))
  {
    v16 = 0;
    v17 = 0;
    HALS_System::GetInstance(&v18, 0, &v16);
    HALS_System::GetProcessObjectList((HALS_System *)&v20, v18);
    v2 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = v17;
    if (v17)
    {
      v6 = (unint64_t *)&v17->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 1174405120;
    v12[2] = ___ZN8HALS_Tap23UpdateFilteredProcessesEv_block_invoke;
    v12[3] = &__block_descriptor_tmp_26_3066;
    v12[4] = this;
    __p = 0;
    v14 = 0;
    v15 = 0;
    v8 = v20;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v20, v21, (v21 - (uint64_t)v20) >> 2);
    v9 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Tap *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v9, (uint64_t)v12);
    if (__p)
    {
      v14 = __p;
      operator delete(__p);
    }
    if (v8)
      operator delete(v8);
  }
  else
  {
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 0x40000000;
    v11[2] = ___ZN8HALS_Tap23UpdateFilteredProcessesEv_block_invoke_27;
    v11[3] = &__block_descriptor_tmp_28_3067;
    v11[4] = this;
    v10 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Tap *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v10, (uint64_t)v11);
  }
}

void sub_1B5942120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  void *v20;

  if (v20)
    operator delete(v20);
  _Unwind_Resume(exception_object);
}

void HALS_Tap::UpdateReadingContexts(HALS_Tap *this, unsigned int **a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  HALS_DeviceManager *v15;
  HALS_Object *v16;
  unsigned int **v17;
  const __CFString *v18;
  unsigned int *v19;
  const __CFString *v20;
  HALB_Mutex *v21;
  const __CFArray *v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  std::string::size_type size;
  unint64_t v27;
  int v28;
  void **v29;
  uint64_t v30;
  std::string *p_s1;
  int v32;
  int v33;
  int v34;
  int v35;
  BOOL v37;
  BOOL v38;
  int v39;
  HALB_Mutex *v40;
  uint64_t v41;
  std::runtime_error *exception;
  unsigned int **v43;
  CFTypeRef cf;
  const __CFString *v45;
  HALS_ObjectMap **v46;
  HALS_ObjectMap **v47;
  uint64_t v48;
  _QWORD v49[7];
  void *__p[2];
  unsigned __int8 v51;
  std::string __s1;
  _BYTE v53[16];
  _BYTE v54[8];
  CFDictionaryRef theDict;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t);
  void *v59;
  uint64_t *v60;
  unsigned int *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t);
  void (*v66)(uint64_t);
  _QWORD v67[3];

  v5 = *((_QWORD *)this + 31);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (*(_BYTE *)(v5 + 464))
  {
    v8 = *(_QWORD **)(v5 + 456);
    if (v8 == (_QWORD *)(v5 + 432))
    {
      v9 = 4;
      v8 = (_QWORD *)(v5 + 432);
    }
    else
    {
      if (!v8)
      {
LABEL_10:
        *(_BYTE *)(v5 + 464) = 0;
        goto LABEL_11;
      }
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
    goto LABEL_10;
  }
LABEL_11:
  if (v4)
  {
    v10 = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v13 = *a2;
  v12 = a2[1];
  while (v13 != v12)
  {
    v14 = *v13++;
    HALS_Tap::SetClientMuteState(this, (HALS_ObjectMap *)v14, 0);
  }
  v15 = (HALS_DeviceManager *)HALS_MetaManager::sInstance;
  HALS_Tap::GetUID(&cf, *((const void **)this + 8));
  v46 = 0;
  v47 = 0;
  v48 = 0;
  HALS_DeviceManager::CopyRawDeviceList(v15, (HALS_DeviceManager::BasicDeviceList *)&v46);
  v17 = (unsigned int **)v46;
  v18 = (const __CFString *)cf;
  v43 = (unsigned int **)v47;
  if (v46 != v47)
  {
    while (1)
    {
      v19 = *v17;
      if (v18)
      {
        CFRetain(v18);
        v45 = v18;
        CFRetain(v18);
        v20 = v18;
      }
      else
      {
        v20 = 0;
        v45 = 0;
      }
      v49[6] = v18;
      v62 = 0;
      v63 = &v62;
      v64 = 0x3802000000;
      v65 = __Block_byref_object_copy__117;
      v66 = __Block_byref_object_dispose__118;
      v67[0] = &off_1E69A0EA8;
      v67[1] = 0;
      v56 = MEMORY[0x1E0C809B0];
      v57 = 0x40000000;
      v58 = ___ZN15HALS_MetaDevice6HasTapEN10applesauce2CF9StringRefE_block_invoke;
      v59 = &unk_1E697A318;
      v60 = &v62;
      v61 = v19;
      v21 = (HALB_Mutex *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v19 + 56))(v19);
      HALB_CommandGate::ExecuteCommand(v21, (uint64_t)&v56);
      v22 = (const __CFArray *)v63[6];
      if (v22)
        break;
LABEL_56:
      v39 = 0;
LABEL_58:
      _Block_object_dispose(&v62, 8);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v67);
      if (v18)
        CFRelease(v18);
      if (v39)
      {
        v62 = 0;
        v63 = &v62;
        v64 = 0x2000000000;
        v65 = 0;
        v49[0] = MEMORY[0x1E0C809B0];
        v49[1] = 0x40000000;
        v49[2] = ___ZN15HALS_MetaDevice16UpdateTapReadersEN10applesauce2CF9StringRefE_block_invoke;
        v49[3] = &unk_1E697A368;
        v49[4] = &v62;
        v49[5] = v19;
        v40 = (HALB_Mutex *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v19 + 56))(v19);
        HALB_CommandGate::ExecuteCommand(v40, (uint64_t)v49);
        v41 = v19[4];
        v56 = 0x676C6F6261636F6DLL;
        LODWORD(v57) = 0;
        (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v19 + 120))(v19, v41, &v56, 8, v63 + 3, 0, 0, 0);
        _Block_object_dispose(&v62, 8);
      }
      if (v20)
        CFRelease(v20);
      if (++v17 == v43)
        goto LABEL_65;
    }
    v23 = 0;
    while (1)
    {
      if ((unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v22) <= v23)
        goto LABEL_56;
      v24 = v23;
      OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v54, (uint64_t)(v63 + 5), v23);
      if (theDict)
        break;
LABEL_52:
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v54);
      v23 = v24 + 1;
      v22 = (const __CFArray *)v63[6];
    }
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v53, theDict, CFSTR("uid"));
    OS::CF::String::AsStdString(&__s1, (uint64_t)v53);
    if (!v18)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v18);
    v25 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    else
      size = __s1.__r_.__value_.__l.__size_;
    v27 = v51;
    v28 = (char)v51;
    if ((v51 & 0x80u) != 0)
      v27 = (unint64_t)__p[1];
    if (size != v27)
    {
      v38 = 0;
      if (((char)v51 & 0x80000000) == 0)
        goto LABEL_50;
      goto LABEL_54;
    }
    if ((v51 & 0x80u) == 0)
      v29 = __p;
    else
      v29 = (void **)__p[0];
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    {
      v38 = memcmp(__s1.__r_.__value_.__l.__data_, v29, __s1.__r_.__value_.__l.__size_) == 0;
    }
    else
    {
      if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
      {
        v38 = 1;
        if (((char)v51 & 0x80000000) == 0)
        {
LABEL_50:
          if ((v25 & 0x80) == 0)
            goto LABEL_51;
LABEL_55:
          operator delete(__s1.__r_.__value_.__l.__data_);
LABEL_51:
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v53);
          if (v38)
          {
            OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v54);
            v39 = 1;
            goto LABEL_58;
          }
          goto LABEL_52;
        }
LABEL_54:
        operator delete(__p[0]);
        if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_51;
        goto LABEL_55;
      }
      v30 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
      p_s1 = &__s1;
      do
      {
        v33 = p_s1->__r_.__value_.__s.__data_[0];
        p_s1 = (std::string *)((char *)p_s1 + 1);
        v32 = v33;
        v35 = *(unsigned __int8 *)v29;
        v29 = (void **)((char *)v29 + 1);
        v34 = v35;
        v37 = v30-- != 0;
        v38 = v32 == v34;
      }
      while (v32 == v34 && v37);
    }
    if ((v28 & 0x80000000) == 0)
      goto LABEL_50;
    goto LABEL_54;
  }
LABEL_65:
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v46, v16);
  if (v18)
    CFRelease(v18);
}

void sub_1B59425F8(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, OS::CF::UntypedObject *a9, uint64_t a10, const void *a11, __int16 a12, char a13, char a14, int a15, HALS_ObjectMap **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,char a37)
{
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&a16, a2);
  applesauce::CF::StringRef::~StringRef(&a11);
  _Unwind_Resume(a1);
}

void HALS_Tap::AddTapToAllContexts(HALS_Tap *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;

  v3 = 0;
  v4 = 0;
  v5 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v3, *((const void **)this + 26), *((_QWORD *)this + 27), (uint64_t)(*((_QWORD *)this + 27) - *((_QWORD *)this + 26)) >> 2);
  v2 = v3;
  HALS_Tap::AddTapToClients((uint64_t)this, v3, v4);
  if (v2)
    operator delete(v2);
}

void sub_1B594270C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

std::__wrap_iter<unsigned int *>::iterator_type std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<unsigned int *> &,std::__wrap_iter<unsigned int *> &,std::__wrap_iter<unsigned int *> &,std::__wrap_iter<unsigned int *> &,std::insert_iterator<std::vector<unsigned int>> &>(std::__wrap_iter<unsigned int *>::iterator_type result, const std::vector<unsigned int>::value_type **a2, const std::vector<unsigned int>::value_type **a3, const std::vector<unsigned int>::value_type **a4, const std::vector<unsigned int>::value_type **a5, uint64_t a6)
{
  std::vector<unsigned int>::const_iterator *v7;
  const std::vector<unsigned int>::value_type *v8;
  const std::vector<unsigned int>::value_type *v9;
  const std::vector<unsigned int>::value_type *v12;
  std::vector<unsigned int>::const_iterator v15;
  const std::vector<unsigned int>::value_type **v16;
  const std::vector<unsigned int>::value_type **v17;
  std::vector<unsigned int>::const_iterator v18;
  std::vector<unsigned int> *v19;
  const std::vector<unsigned int>::value_type *v20;
  const std::vector<unsigned int>::value_type *v21;

  v7 = (std::vector<unsigned int>::const_iterator *)result;
  v8 = *a2;
  v9 = *a3;
  if (*a2 == *a3)
  {
LABEL_13:
    v19 = *(std::vector<unsigned int> **)a6;
    v18.__i_ = *(std::__wrap_iter<const unsigned int *>::iterator_type *)(a6 + 8);
    v9 = v8;
LABEL_14:
    v21 = v8;
    goto LABEL_15;
  }
  v12 = *a4;
  if (*a4 != *a5)
  {
    while (*v8 >= *v12)
    {
      v16 = a2;
      v17 = a4;
      if (*v12 >= *v8)
        goto LABEL_6;
LABEL_7:
      *v17 = v12 + 1;
      v8 = *a2;
      v9 = *a3;
      if (*a2 == *a3)
        goto LABEL_13;
      v12 = *a4;
      if (*a4 == *a5)
        goto LABEL_9;
    }
    v15.__i_ = *(std::__wrap_iter<const unsigned int *>::iterator_type *)(a6 + 8);
    result = std::vector<unsigned int>::insert(*(std::vector<unsigned int> **)a6, v15, v8).__i_;
    v8 = result;
    v16 = (const std::vector<unsigned int>::value_type **)(a6 + 8);
    v17 = a2;
LABEL_6:
    *v16 = v8 + 1;
    v12 = *v17;
    goto LABEL_7;
  }
LABEL_9:
  v19 = *(std::vector<unsigned int> **)a6;
  v18.__i_ = *(std::__wrap_iter<const unsigned int *>::iterator_type *)(a6 + 8);
  if (v8 == v9)
    goto LABEL_14;
  v20 = v8;
  do
  {
    result = std::vector<unsigned int>::insert(v19, v18, v20).__i_;
    v18.__i_ = result + 1;
    ++v20;
  }
  while (v20 != v9);
  v21 = v9;
  v9 = v8;
LABEL_15:
  v7->__i_ = (const std::vector<unsigned int>::value_type *)((char *)v9 + (char *)v21 - (char *)v8);
  v7[1].__i_ = (std::__wrap_iter<const unsigned int *>::iterator_type)v19;
  v7[2].__i_ = v18.__i_;
  return result;
}

void HALS_Tap::AddTapToClients(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v5;
  HALS_ObjectMap *v6;
  HALS_ObjectMap *v7;
  HALS_Object *v8;
  unsigned int *v9;
  unsigned int *v10;
  HALS_Object *v11;
  HALS_IOContext *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int v17;
  void **v18;
  void **v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (***v27)();
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t (**v31)();
  int v32;
  uint64_t (***v33)();
  void *__p;
  unsigned int *v35;
  void **p_p;
  _QWORD v37[4];

  v37[3] = *MEMORY[0x1E0C80C00];
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      v6 = (HALS_ObjectMap *)*v5;
      v7 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v6);
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v7 + 200))(&__p);
      v9 = (unsigned int *)__p;
      v10 = v35;
      while (v9 != v10)
      {
        v12 = (HALS_IOContext *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v9);
        if (v12)
          HALS_Tap::AddTapToContext((HALS_Tap *)a1, v12);
        HALS_ObjectMap::ReleaseObject(v12, v11);
        ++v9;
      }
      if (*(_DWORD *)(a1 + 84) == 1)
        HALS_Tap::SetClientMuteState((HALS_Tap *)a1, v6, 1);
      if (__p)
      {
        v35 = (unsigned int *)__p;
        operator delete(__p);
      }
      HALS_ObjectMap::ReleaseObject(v7, v8);
      ++v5;
    }
    while (v5 != a3);
  }
  if (*(_DWORD *)(a1 + 84) == 2)
  {
    v14 = *(_QWORD *)(a1 + 248);
    v13 = *(std::__shared_weak_count **)(a1 + 256);
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    v17 = *(_DWORD *)(a1 + 16);
    v31 = &off_1E6975C80;
    v32 = v17;
    v33 = &v31;
    v18 = (void **)(v14 + 432);
    if (!*(_BYTE *)(v14 + 464))
    {
      *(_QWORD *)(v14 + 456) = v18;
      std::__function::__func<HALS_Tap::SetMuteAction(void)::$_0,std::allocator<HALS_Tap::SetMuteAction(void)::$_0>,void ()(HALS_MultiTap::Reader_Action_State)>::__clone((uint64_t)&v31, v14 + 432);
      *(_BYTE *)(v14 + 464) = 1;
      goto LABEL_33;
    }
    p_p = &__p;
    std::__function::__func<HALS_Tap::SetMuteAction(void)::$_0,std::allocator<HALS_Tap::SetMuteAction(void)::$_0>,void ()(HALS_MultiTap::Reader_Action_State)>::__clone((uint64_t)&v31, (uint64_t)&__p);
    if (v18 != &__p)
    {
      v19 = p_p;
      v20 = *(void ***)(v14 + 456);
      if (p_p != &__p)
      {
        if (v20 == v18)
        {
          v20 = &__p;
          (*((void (**)(uint64_t, void **))*v18 + 3))(v14 + 432, &__p);
          (*(void (**)(_QWORD))(**(_QWORD **)(v14 + 456) + 32))(*(_QWORD *)(v14 + 456));
          *(_QWORD *)(v14 + 456) = p_p;
          p_p = &__p;
          v21 = 4;
          goto LABEL_32;
        }
        p_p = *(void ***)(v14 + 456);
        *(_QWORD *)(v14 + 456) = v19;
LABEL_28:
        if (v20 == &__p)
        {
          v21 = 4;
          v20 = &__p;
        }
        else
        {
          if (!v20)
            goto LABEL_33;
          v21 = 5;
        }
LABEL_32:
        (*((void (**)(void **))*v20 + v21))(v20);
LABEL_33:
        os_unfair_lock_lock((os_unfair_lock_t)(v14 + 360));
        v22 = *(_QWORD *)(v14 + 392);
        os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 360));
        if (v22)
        {
          LODWORD(__p) = 0;
          v26 = *(_QWORD *)(v14 + 456);
          if (!v26)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v26 + 48))(v26, &__p);
        }
        v27 = v33;
        if (v33 == &v31)
        {
          v28 = 4;
          v27 = &v31;
        }
        else
        {
          if (!v33)
          {
LABEL_41:
            if (v13)
            {
              v29 = (unint64_t *)&v13->__shared_owners_;
              do
                v30 = __ldaxr(v29);
              while (__stlxr(v30 - 1, v29));
              if (!v30)
              {
                ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
                std::__shared_weak_count::__release_weak(v13);
              }
            }
            return;
          }
          v28 = 5;
        }
        ((void (*)(uint64_t (***)(), uint64_t, uint64_t, uint64_t))(*v27)[v28])(v27, v23, v24, v25);
        goto LABEL_41;
      }
      if (v20 != v18)
      {
        (*((void (**)(void **, uint64_t))__p + 3))(&__p, v14 + 432);
        (*((void (**)(void **))*p_p + 4))(p_p);
        v20 = *(void ***)(v14 + 456);
        p_p = v20;
        *(_QWORD *)(v14 + 456) = v18;
        goto LABEL_28;
      }
      (*((void (**)(void **, _QWORD *))__p + 3))(&__p, v37);
      (*((void (**)(void **))*p_p + 4))(p_p);
      p_p = 0;
      (*(void (**)(_QWORD, void **))(**(_QWORD **)(v14 + 456) + 24))(*(_QWORD *)(v14 + 456), &__p);
      (*(void (**)(_QWORD))(**(_QWORD **)(v14 + 456) + 32))(*(_QWORD *)(v14 + 456));
      *(_QWORD *)(v14 + 456) = 0;
      p_p = &__p;
      (*(void (**)(_QWORD *, uint64_t))(v37[0] + 24))(v37, v14 + 432);
      (*(void (**)(_QWORD *))(v37[0] + 32))(v37);
      *(_QWORD *)(v14 + 456) = v18;
    }
    v20 = p_p;
    goto LABEL_28;
  }
}

void sub_1B5942BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void HALS_Tap::SetClientMuteState(HALS_Tap *this, HALS_ObjectMap *a2, int a3)
{
  HALS_Object *v5;
  HALS_Object *v6;
  HALS_Object *v7;
  unsigned int *v8;
  int v9;
  HALB_Mutex *v10;
  AudioObjectPropertyAddress v11;
  _QWORD v12[7];
  int v13;
  int v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;

  v5 = (HALS_Object *)HALS_ObjectMap::CopyObjectByObjectID(a2);
  v7 = v5;
  if (v5)
  {
    if (a3)
    {
      v8 = (unsigned int *)*((_QWORD *)this + 29);
      if (v8)
        v8 = (unsigned int *)(*v8 | 0x100000000);
      v9 = *((_DWORD *)this + 4);
      v20 = 0;
      v21 = &v20;
      v22 = 0x2000000000;
      v23 = 0;
      v16 = 0;
      v17 = &v16;
      v18 = 0x2000000000;
      v19 = 0;
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 0x40000000;
      v12[2] = ___ZN11HALS_Client8AddMuterEN4AMCP9DirectionEjNSt3__18optionalIjEE_block_invoke;
      v12[3] = &unk_1E69720C0;
      v12[5] = &v16;
      v12[6] = v5;
      v13 = 0;
      v14 = v9;
      v12[4] = &v20;
      v15 = v8;
      v10 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Object *))(*(_QWORD *)v5 + 56))(v5);
      HALB_CommandGate::ExecuteCommand(v10, (uint64_t)v12);
      if (*((_BYTE *)v21 + 24) || *((_BYTE *)v17 + 24))
      {
        HALS_Client::UpdateMuteStateOnContexts(v7);
        strcpy((char *)&v11, "tmopbolg");
        BYTE1(v11.mElement) = 0;
        HIWORD(v11.mElement) = 0;
        HALS_Object::PropertiesChanged(v7, (HALS_NotificationManager *)*((unsigned int *)v7 + 4), *((unsigned int *)v7 + 4), 1, &v11);
      }
      _Block_object_dispose(&v16, 8);
      _Block_object_dispose(&v20, 8);
    }
    else
    {
      HALS_Client::RemoveMuter(v5, *((_DWORD *)this + 4));
    }
  }
  HALS_ObjectMap::ReleaseObject(v7, v6);
}

void sub_1B5942DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  HALS_ObjectMap *v13;
  uint64_t v14;
  HALS_Object *v16;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 64), 8);
  HALS_ObjectMap::ReleaseObject(v13, v16);
  _Unwind_Resume(a1);
}

void HALS_Tap::AddTapToContext(HALS_Tap *this, HALS_IOContext *a2)
{
  int *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  if (a2)
  {
    v4 = (int *)*((_QWORD *)this + 29);
    if (!v4)
      goto LABEL_6;
    if (!HALS_IOContext::IncludesDevice(a2, *v4))
      return;
    v5 = (uint64_t *)*((_QWORD *)this + 29);
    if (v5)
    {
      v6 = *v5;
      v7 = 1;
    }
    else
    {
LABEL_6:
      v6 = 0;
      v7 = 0;
    }
    v8 = *((_QWORD *)this + 31);
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    v20 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      v12 = *((_QWORD *)a2 + 12);
      v13 = (unint64_t *)&v9->__shared_owners_;
      v21 = v8;
      v22 = v9;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    else
    {
      v12 = *((_QWORD *)a2 + 12);
      v21 = *((_QWORD *)this + 31);
      v22 = 0;
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v12 + 736))(v12, &v21, v6, v7);
    v15 = v22;
    if (v22)
    {
      v16 = (unint64_t *)&v22->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (v20)
    {
      v18 = (unint64_t *)&v20->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_1B5942F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<HALS_Tap::SetMuteAction(void)::$_0,std::allocator<HALS_Tap::SetMuteAction(void)::$_0>,void ()(HALS_MultiTap::Reader_Action_State)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_DWORD *std::__function::__func<HALS_Tap::SetMuteAction(void)::$_0,std::allocator<HALS_Tap::SetMuteAction(void)::$_0>,void ()(HALS_MultiTap::Reader_Action_State)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E6975C80;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<HALS_Tap::SetMuteAction(void)::$_0,std::allocator<HALS_Tap::SetMuteAction(void)::$_0>,void ()(HALS_MultiTap::Reader_Action_State)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E6975C80;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

void std::__function::__func<HALS_Tap::SetMuteAction(void)::$_0,std::allocator<HALS_Tap::SetMuteAction(void)::$_0>,void ()(HALS_MultiTap::Reader_Action_State)>::operator()(uint64_t a1, int *a2)
{
  int v2;
  uint64_t v3;
  HALS_Object *v4;
  HALS_Tap *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;

  v2 = *a2;
  v3 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 8));
  v5 = (HALS_Tap *)v3;
  if (v3)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v10, *(const void **)(v3 + 208), *(_QWORD *)(v3 + 216), (uint64_t)(*(_QWORD *)(v3 + 216) - *(_QWORD *)(v3 + 208)) >> 2);
    v6 = v10;
    v7 = v11;
    if (v2)
    {
      if (v10 != v11)
      {
        v8 = v10;
        do
          HALS_Tap::SetClientMuteState(v5, (HALS_ObjectMap *)*v8++, 0);
        while (v8 != v7);
      }
    }
    else if (v10 != v11)
    {
      v9 = v10;
      do
        HALS_Tap::SetClientMuteState(v5, (HALS_ObjectMap *)*v9++, 1);
      while (v9 != v7);
    }
    if (v6)
      operator delete(v6);
  }
  HALS_ObjectMap::ReleaseObject(v5, v4);
}

void sub_1B59430A4(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<HALS_Tap::SetMuteAction(void)::$_0,std::allocator<HALS_Tap::SetMuteAction(void)::$_0>,void ()(HALS_MultiTap::Reader_Action_State)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8HALS_Tap13SetMuteActionEvE3$_0"))
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<HALS_Tap::SetMuteAction(void)::$_0,std::allocator<HALS_Tap::SetMuteAction(void)::$_0>,void ()(HALS_MultiTap::Reader_Action_State)>::target_type()
{
}

void ___ZN8HALS_Tap23UpdateFilteredProcessesEv_block_invoke(_QWORD *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int *v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;

  v1 = a1[4];
  v2 = (unsigned int *)a1[5];
  v3 = (unsigned int *)a1[6];
  if (v2 != v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *v2;
      if (!std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((_QWORD *)(v1 + 88), *v2))
      {
        if ((unint64_t)v4 >= v5)
        {
          v9 = v4 - v6;
          v10 = v9 + 1;
          if ((unint64_t)(v9 + 1) >> 62)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v5 - (_QWORD)v6) >> 1 > v10)
            v10 = (uint64_t)(v5 - (_QWORD)v6) >> 1;
          if (v5 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL)
            v11 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v11 = v10;
          if (v11)
            v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v11);
          else
            v12 = 0;
          v13 = (unsigned int *)(v11 + 4 * v9);
          *v13 = v7;
          v8 = (uint64_t)(v13 + 1);
          while (v4 != v6)
          {
            v14 = *--v4;
            *--v13 = v14;
          }
          v5 = v11 + 4 * v12;
          if (v6)
            operator delete(v6);
          v6 = v13;
          goto LABEL_7;
        }
        *v4++ = v7;
      }
      v8 = (uint64_t)v4;
LABEL_7:
      ++v2;
      v4 = (unsigned int *)v8;
      if (v2 == v3)
        goto LABEL_25;
    }
  }
  v8 = 0;
  v6 = 0;
LABEL_25:
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v1 + 208), (char *)v6, v8, (v8 - (uint64_t)v6) >> 2);
  if (v6)
    operator delete(v6);
}

void sub_1B5943274(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void ___ZN8HALS_Tap23UpdateFilteredProcessesEv_block_invoke_27(uint64_t a1)
{
  uint64_t v1;
  void **v2;
  uint64_t *v3;
  char *v4;
  int v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (void **)(v1 + 208);
  *(_QWORD *)(v1 + 216) = *(_QWORD *)(v1 + 208);
  std::vector<unsigned int>::reserve((std::vector<unsigned int> *)(v1 + 208), *(_QWORD *)(v1 + 112));
  v3 = *(uint64_t **)(v1 + 104);
  if (v3)
  {
    v4 = *(char **)(v1 + 216);
    do
    {
      v5 = *((_DWORD *)v3 + 4);
      v6 = *(_QWORD *)(v1 + 224);
      if ((unint64_t)v4 >= v6)
      {
        v8 = (char *)*v2;
        v9 = (v4 - (_BYTE *)*v2) >> 2;
        v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 62)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v11 = v6 - (_QWORD)v8;
        if (v11 >> 1 > v10)
          v10 = v11 >> 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
          v12 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v12 = v10;
        if (v12)
        {
          v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v12);
          v8 = *(char **)(v1 + 208);
          v4 = *(char **)(v1 + 216);
        }
        else
        {
          v13 = 0;
        }
        v14 = (_DWORD *)(v12 + 4 * v9);
        *v14 = v5;
        v7 = (char *)(v14 + 1);
        while (v4 != v8)
        {
          v15 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *--v14 = v15;
        }
        *(_QWORD *)(v1 + 208) = v14;
        *(_QWORD *)(v1 + 216) = v7;
        *(_QWORD *)(v1 + 224) = v12 + 4 * v13;
        if (v8)
          operator delete(v8);
      }
      else
      {
        *(_DWORD *)v4 = v5;
        v7 = v4 + 4;
      }
      *(_QWORD *)(v1 + 216) = v7;
      v3 = (uint64_t *)*v3;
      v4 = v7;
    }
    while (v3);
  }
}

_QWORD *__copy_helper_block_e8_40c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = (_QWORD *)(a1 + 40);
  v2[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v2, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

BOOL HALS_Tap::_UpdateFromDescription(uint64_t a1, const __CFDictionary **a2, BOOL *a3, BOOL *a4)
{
  const __CFDictionary *v5;
  uint64_t v8;
  double v9;
  const void *v10;
  const __CFDictionary *v11;
  const __CFString *v12;
  const __CFString *v13;
  const __CFString *v14;
  CFTypeID v15;
  const __CFString *v16;
  const __CFDictionary *v17;
  const __CFString *v18;
  const __CFString *v19;
  CFTypeID v20;
  const __CFString *v21;
  const __CFDictionary *v22;
  const __CFString *v23;
  const __CFDictionary *v24;
  const __CFString *Value;
  CFNumberRef v26;
  const __CFDictionary *v27;
  CFTypeID v28;
  int v29;
  const __CFDictionary *v30;
  int v31;
  CFNumberRef v32;
  const __CFString *v33;
  const __CFString *v34;
  CFTypeID v35;
  CFNumberRef v36;
  int v37;
  const __CFString *v38;
  const __CFString *v39;
  CFTypeID v40;
  uint64_t v41;
  unsigned int v42;
  const AudioObjectPropertyAddress *v43;
  AMCP::Log::Scope_Registry *v44;
  uint64_t v45;
  unsigned int v46;
  const AudioObjectPropertyAddress *v47;
  AMCP::Log::Scope_Registry *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  unsigned int *v55;
  HALS_Object *v56;
  int v57;
  unsigned int *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _DWORD *v62;
  AMCP::Log::Scope_Registry *updated;
  unsigned int v64;
  int v65;
  CFArrayRef v66;
  CFArrayRef v67;
  const __CFArray *v68;
  const __CFArray *v69;
  const __CFArray *v70;
  CFIndex Count;
  CFIndex v72;
  CFIndex v73;
  unint64_t v74;
  CFTypeRef v75;
  CFTypeID v76;
  std::logic_error_vtbl *v77;
  HALB_Mutex *v78;
  unsigned int *v79;
  std::__shared_weak_count *imp;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  HALS_Object *v86;
  CFIndex v87;
  CFIndex v88;
  CFIndex v89;
  unint64_t i;
  const void *v91;
  CFTypeID v92;
  HALS_ObjectMap *v93;
  unsigned int v94;
  uint64_t v95;
  HALS_Object *v96;
  HALS_ObjectMap *v97;
  uint64_t v98;
  char v99;
  uint64_t **v100;
  uint64_t v101;
  uint64_t j;
  uint64_t *v103;
  unint64_t v104;
  uint64_t *v105;
  uint64_t *inserted;
  _DWORD *v107;
  unint64_t v108;
  uint64_t *v109;
  void *v110;
  void *v111;
  uint64_t v112;
  __int128 v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  uint64_t *v117;
  unsigned int v118;
  BOOL v119;
  int v120;
  _BOOL8 v121;
  NSObject *v123;
  _opaque_pthread_t *v124;
  mach_port_t v125;
  void *v126;
  NSObject *isa;
  _opaque_pthread_t *v128;
  mach_port_t v129;
  void *v130;
  NSObject *v131;
  _opaque_pthread_t *v132;
  mach_port_t v133;
  void *v134;
  NSObject *v135;
  _opaque_pthread_t *v136;
  mach_port_t v137;
  void *v138;
  std::runtime_error *v139;
  std::runtime_error *v140;
  std::runtime_error *v141;
  std::runtime_error *exception;
  std::runtime_error *v143;
  std::runtime_error *v144;
  std::runtime_error *v145;
  std::runtime_error *v146;
  std::runtime_error *v147;
  std::runtime_error *v148;
  std::runtime_error *v149;
  std::runtime_error *v150;
  std::runtime_error *v151;
  std::runtime_error *v152;
  std::runtime_error *v153;
  std::runtime_error *v154;
  std::runtime_error *v155;
  std::runtime_error *v156;
  std::runtime_error *v157;
  std::runtime_error *v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  BOOL *v164;
  int v165;
  int v166;
  int32x4_t v168;
  char v169;
  CFTypeRef v170;
  CFTypeRef v171;
  _BYTE cf[40];
  uint64_t v173;
  int v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  CFTypeRef v177;
  void *__p[2];
  uint64_t v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  std::logic_error v182;
  CFTypeRef v183;
  CFTypeRef v184;
  _BYTE v185[32];
  int v186;
  CFTypeRef v187[4];
  uint64_t v188;
  std::string v189;
  uint64_t v190;
  __CFString *valuePtr;
  __int128 v192;
  __int128 v193;
  const char *v194;
  void **v195;
  char v196;
  uint64_t v197;

  v197 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    goto LABEL_243;
  }
  v160 = *(unsigned __int8 *)(a1 + 82);
  v161 = *(unsigned __int8 *)(a1 + 80);
  v159 = *(_DWORD *)(a1 + 84);
  v8 = *(_QWORD *)(a1 + 248);
  v9 = *(double *)(v8 + 24);
  v168 = *(int32x4_t *)(v8 + 32);
  v165 = *(_DWORD *)(v8 + 48);
  v166 = *(unsigned __int8 *)(a1 + 83);
  v162 = *(_DWORD *)(v8 + 56);
  v163 = *(_DWORD *)(v8 + 52);
  *(_QWORD *)cf = 0;
  applesauce::CF::at_or<applesauce::CF::StringRef,char const(&)[8]>(&valuePtr, v5, "TapName", cf);
  v10 = *(const void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = valuePtr;
  if (v10)
    CFRelease(v10);
  if (*(_QWORD *)cf)
    CFRelease(*(CFTypeRef *)cf);
  v164 = a4;
  v11 = *a2;
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
LABEL_243:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v12 = (const __CFString *)*MEMORY[0x1E0C9AE48];
  v187[0] = *(CFTypeRef *)MEMORY[0x1E0C9AE48];
  v13 = (const __CFString *)applesauce::CF::details::at_key<char const(&)[7]>(v11, "IsMono");
  if (v13)
  {
    v14 = v13;
    CFRetain(v13);
    v15 = CFGetTypeID(v14);
    if (v15 == CFBooleanGetTypeID())
    {
      valuePtr = (__CFString *)v14;
      LOBYTE(v192) = 1;
      CFRetain(v14);
      *(_QWORD *)cf = v14;
      std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&valuePtr);
      v16 = v12;
      goto LABEL_12;
    }
    CFRelease(v14);
  }
  LOBYTE(valuePtr) = 0;
  LOBYTE(v192) = 0;
  *(_QWORD *)cf = v12;
  v187[0] = 0;
  std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&valuePtr);
  v16 = 0;
  v14 = v12;
  if (!v12)
  {
    v155 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v155, "Could not construct");
    __cxa_throw(v155, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
LABEL_12:
  *(_BYTE *)(a1 + 80) = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)v14);
  CFRelease(v14);
  if (v16)
    CFRelease(v16);
  v17 = *a2;
  if (!*a2)
  {
    v143 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v143);
    __cxa_throw(v143, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v187[0] = v12;
  v18 = (const __CFString *)applesauce::CF::details::at_key<char const(&)[12]>(v17, "IsExclusive");
  if (v18)
  {
    v19 = v18;
    CFRetain(v18);
    v20 = CFGetTypeID(v19);
    if (v20 == CFBooleanGetTypeID())
    {
      valuePtr = (__CFString *)v19;
      LOBYTE(v192) = 1;
      CFRetain(v19);
      *(_QWORD *)cf = v19;
      std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&valuePtr);
      v21 = v12;
      goto LABEL_20;
    }
    CFRelease(v19);
  }
  LOBYTE(valuePtr) = 0;
  LOBYTE(v192) = 0;
  *(_QWORD *)cf = v12;
  v187[0] = 0;
  std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&valuePtr);
  v21 = 0;
  v19 = v12;
  if (!v12)
  {
    v156 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v156, "Could not construct");
    __cxa_throw(v156, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
LABEL_20:
  *(_BYTE *)(a1 + 81) = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)v19);
  CFRelease(v19);
  if (v21)
    CFRelease(v21);
  v22 = *a2;
  if (!*a2)
  {
    v144 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v144);
    __cxa_throw(v144, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_QWORD *)cf = v12;
  applesauce::CF::at_or<applesauce::CF::BooleanRef,char const(&)[10]>(&valuePtr, v22, "IsMixdown", cf);
  v23 = valuePtr;
  if (!valuePtr)
  {
    v145 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v145, "Could not construct");
    __cxa_throw(v145, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_BYTE *)(a1 + 82) = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)valuePtr);
  CFRelease(v23);
  if (*(_QWORD *)cf)
    CFRelease(*(CFTypeRef *)cf);
  v24 = *a2;
  if (!*a2)
  {
    v146 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v146);
    __cxa_throw(v146, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_QWORD *)cf = v12;
  applesauce::CF::at_or<applesauce::CF::BooleanRef,char const(&)[10]>(&valuePtr, v24, "IsPrivate", cf);
  Value = valuePtr;
  if (!valuePtr)
  {
    v147 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v147, "Could not construct");
    __cxa_throw(v147, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_BYTE *)(a1 + 83) = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)valuePtr);
  CFRelease(Value);
  if (*(_QWORD *)cf)
    CFRelease(*(CFTypeRef *)cf);
  if (!*a2)
  {
    v148 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v148);
    __cxa_throw(v148, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  LODWORD(valuePtr) = 0;
  v26 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *(_QWORD *)v185 = v26;
  if (!v26)
  {
    v149 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v149, "Could not construct");
    __cxa_throw(v149, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v27 = *a2;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "MuteBehavior");
  if (v27)
    Value = (const __CFString *)CFDictionaryGetValue(v27, *(const void **)cf);
  if (*(_QWORD *)cf)
    CFRelease(*(CFTypeRef *)cf);
  if (v27 && Value)
  {
    CFRetain(Value);
    v28 = CFGetTypeID(Value);
    if (v28 == CFNumberGetTypeID())
    {
      valuePtr = (__CFString *)Value;
      LOBYTE(v192) = 1;
      CFRetain(Value);
      v187[0] = Value;
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&valuePtr);
      goto LABEL_42;
    }
    CFRelease(Value);
  }
  LOBYTE(valuePtr) = 0;
  LOBYTE(v192) = 0;
  v187[0] = v26;
  *(_QWORD *)v185 = 0;
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&valuePtr);
  Value = (const __CFString *)v26;
LABEL_42:
  v29 = applesauce::CF::convert_to<int,0>((const __CFNumber *)Value);
  if (v187[0])
    CFRelease(v187[0]);
  if (*(_QWORD *)v185)
    CFRelease(*(CFTypeRef *)v185);
  *(_DWORD *)(a1 + 84) = v29;
  v30 = *a2;
  if (!*a2)
  {
    v150 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v150);
    __cxa_throw(v150, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "Stream");
  v31 = CFDictionaryContainsKey(v30, valuePtr);
  if (valuePtr)
    CFRelease(valuePtr);
  if (!v31)
  {
    v37 = -1;
    goto LABEL_60;
  }
  if (!*a2)
  {
    v157 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v157);
    __cxa_throw(v157, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  LODWORD(valuePtr) = -1;
  v32 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  v187[0] = v32;
  if (!v32)
  {
    v158 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v158, "Could not construct");
    __cxa_throw(v158, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v33 = (const __CFString *)applesauce::CF::details::at_key<char const(&)[7]>(*a2, "Stream");
  if (v33)
  {
    v34 = v33;
    CFRetain(v33);
    v35 = CFGetTypeID(v34);
    if (v35 == CFNumberGetTypeID())
    {
      valuePtr = (__CFString *)v34;
      LOBYTE(v192) = 1;
      CFRetain(v34);
      *(_QWORD *)cf = v34;
      v36 = v32;
      v32 = (CFNumberRef)v34;
      goto LABEL_58;
    }
    CFRelease(v34);
  }
  v36 = 0;
  LOBYTE(valuePtr) = 0;
  LOBYTE(v192) = 0;
  *(_QWORD *)cf = v32;
  v187[0] = 0;
LABEL_58:
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&valuePtr);
  v37 = applesauce::CF::convert_to<int,0>(v32);
  CFRelease(v32);
  if (v36)
    CFRelease(v36);
LABEL_60:
  if (!*a2)
  {
    v151 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v151);
    __cxa_throw(v151, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v38 = (const __CFString *)applesauce::CF::details::at_key<char const(&)[10]>(*a2, "DeviceUID");
  if (v38)
  {
    v39 = v38;
    CFRetain(v38);
    v40 = CFGetTypeID(v39);
    if (v40 == CFStringGetTypeID())
    {
      valuePtr = (__CFString *)v39;
      LOBYTE(v192) = 1;
      CFRetain(v39);
      v177 = v39;
      std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&valuePtr);
      goto LABEL_66;
    }
    CFRelease(v39);
  }
  LOBYTE(valuePtr) = 0;
  LOBYTE(v192) = 0;
  v177 = 0;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&valuePtr);
  v39 = 0;
LABEL_66:
  valuePtr = 0;
  if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(v39, (const __CFString **)&valuePtr))
  {
    v175 = 0;
    v176 = 0;
    HALS_System::GetInstance(&valuePtr, 0, &v175);
    v44 = HALS_System::CopyDeviceByUID((HALS_System *)valuePtr, v39, 0);
    v48 = v44;
    v49 = (std::__shared_weak_count *)v192;
    if ((_QWORD)v192)
    {
      v50 = (unint64_t *)(v192 + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = v176;
    if (v176)
    {
      p_shared_owners = (unint64_t *)&v176->__shared_owners_;
      do
        v54 = __ldaxr(p_shared_owners);
      while (__stlxr(v54 - 1, p_shared_owners));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    if (!v48)
    {
      AMCP::Log::Scope_Registry::get(v44);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&valuePtr, "com.apple.coreaudio", "AMCP");
      isa = valuePtr->isa;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&valuePtr);
      if (os_log_type_enabled(isa, OS_LOG_TYPE_ERROR))
      {
        v128 = pthread_self();
        v129 = pthread_mach_thread_np(v128);
        LODWORD(valuePtr) = 67109890;
        HIDWORD(valuePtr) = v129;
        LOWORD(v192) = 2080;
        *(_QWORD *)((char *)&v192 + 2) = "HALS_Tap.cpp";
        WORD5(v192) = 1024;
        HIDWORD(v192) = 449;
        LOWORD(v193) = 2080;
        *(_QWORD *)((char *)&v193 + 2) = "(device.IsValid()) == false";
        _os_log_error_impl(&dword_1B57BA000, isa, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Tap device not found.", (uint8_t *)&valuePtr, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v182);
      v130 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Tap device not found.", (uint64_t)v185);
      std::runtime_error::runtime_error((std::runtime_error *)__p, (const std::string *)v185);
      std::runtime_error::runtime_error((std::runtime_error *)cf, (const std::runtime_error *)__p);
      *(_OWORD *)&cf[24] = 0uLL;
      v173 = 0;
      v174 = -1;
      *(_QWORD *)cf = &off_1E69A1FB8;
      *(_QWORD *)&cf[16] = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&valuePtr, (uint64_t)cf);
      *((_QWORD *)&v193 + 1) = "BOOL HALS_Tap::_UpdateFromDescription(AMCP::CF::Dictionary, BOOL &, BOOL &)";
      v194 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Tap.cpp";
      LODWORD(v195) = 449;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v189.__r_.__value_.__l.__data_);
      *(std::string *)&v187[1] = v189;
      v187[0] = off_1E69A20A0;
      memset(&v189, 0, sizeof(v189));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&valuePtr, (uint64_t)v187);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v130, (uint64_t)&valuePtr);
    }
    v55 = *(unsigned int **)(a1 + 232);
    if (v55)
    {
      v56 = (HALS_Object *)*v55;
      if ((_DWORD)v56 == *((_DWORD *)v48 + 4))
      {
        v57 = 0;
        v169 = 0;
        if (v55[1] == v37)
        {
LABEL_96:
          HALS_ObjectMap::ReleaseObject(v48, v56);
          goto LABEL_97;
        }
LABEL_90:
        v62 = *(_DWORD **)(a1 + 232);
        *v62 = *((_DWORD *)v48 + 4);
        v62[1] = v37;
        updated = (AMCP::Log::Scope_Registry *)HALS_Tap::UpdateTapFormatFromDeviceFormat((HALS_Tap *)a1, v48);
        if ((updated & 1) == 0)
        {
          AMCP::Log::Scope_Registry::get(updated);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&valuePtr, "com.apple.coreaudio", "AMCP");
          v131 = valuePtr->isa;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&valuePtr);
          if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
          {
            v132 = pthread_self();
            v133 = pthread_mach_thread_np(v132);
            LODWORD(valuePtr) = 67109890;
            HIDWORD(valuePtr) = v133;
            LOWORD(v192) = 2080;
            *(_QWORD *)((char *)&v192 + 2) = "HALS_Tap.cpp";
            WORD5(v192) = 1024;
            HIDWORD(v192) = 467;
            LOWORD(v193) = 2080;
            *(_QWORD *)((char *)&v193 + 2) = "(success) == false";
            _os_log_error_impl(&dword_1B57BA000, v131, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Stream out of range for tap.", (uint8_t *)&valuePtr, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v182);
          v134 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Stream out of range for tap.", (uint64_t)v185);
          std::runtime_error::runtime_error((std::runtime_error *)__p, (const std::string *)v185);
          std::runtime_error::runtime_error((std::runtime_error *)cf, (const std::runtime_error *)__p);
          *(_OWORD *)&cf[24] = 0uLL;
          v173 = 0;
          v174 = -1;
          *(_QWORD *)cf = &off_1E69A1FB8;
          *(_QWORD *)&cf[16] = &unk_1E69A1FE0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&valuePtr, (uint64_t)cf);
          *((_QWORD *)&v193 + 1) = "BOOL HALS_Tap::_UpdateFromDescription(AMCP::CF::Dictionary, BOOL &, BOOL &)";
          v194 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Tap.cpp";
          LODWORD(v195) = 467;
          applesauce::backtrace::snapshot_N<64>::snapshot_N(&v189.__r_.__value_.__l.__data_);
          *(std::string *)&v187[1] = v189;
          v187[0] = off_1E69A20A0;
          memset(&v189, 0, sizeof(v189));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&valuePtr, (uint64_t)v187);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v134, (uint64_t)&valuePtr);
        }
        if (v57)
        {
          v64 = **(_DWORD **)(a1 + 232);
          strcpy((char *)v187, "trsnbolg");
          BYTE1(v187[1]) = 0;
          WORD1(v187[1]) = 0;
          v65 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)cf = 0;
          *(_DWORD *)&cf[4] = v65;
          memset(&cf[8], 0, 32);
          LOBYTE(valuePtr) = 0;
          v196 = 0;
          HALS_NotificationManager::AddPropertyListener((uint64_t)cf, v64, (char *)v187, (uint64_t)&valuePtr);
          if (v196)
            AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&valuePtr);
          HALS_Listener::~HALS_Listener((HALS_Listener *)cf);
        }
        v169 = 1;
        goto LABEL_96;
      }
      HALS_Tap::RemoveDeviceSampleRateListener((HALS_Tap *)*(unsigned int *)(a1 + 16), v56, v45, v46, v47);
    }
    else
    {
      v60 = (_QWORD *)operator new();
      *v60 = 0;
      v61 = *(_QWORD *)(a1 + 232);
      *(_QWORD *)(a1 + 232) = v60;
      if (v61)
        MEMORY[0x1B5E50688](v61, 0x1000C4000313F17);
    }
    v57 = 1;
    goto LABEL_90;
  }
  v58 = *(unsigned int **)(a1 + 232);
  if (v58)
  {
    HALS_Tap::RemoveDeviceSampleRateListener((HALS_Tap *)*(unsigned int *)(a1 + 16), (const HALS_Listener *)*v58, v41, v42, v43);
    v59 = *(_QWORD *)(a1 + 232);
    *(_QWORD *)(a1 + 232) = 0;
    if (v59)
      MEMORY[0x1B5E50688](v59, 0x1000C4000313F17);
    v169 = 1;
  }
  else
  {
    v169 = 0;
  }
LABEL_97:
  if (!*a2)
  {
    v152 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v152, "Could not construct");
    __cxa_throw(v152, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v66 = CFArrayCreate(0, 0, 0, MEMORY[0x1E0C9B380]);
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&valuePtr, v66);
  applesauce::CF::at_or<applesauce::CF::ArrayRef,char const(&)[10]>(&v171, *a2, "BundleIDs", &valuePtr);
  if (valuePtr)
    CFRelease(valuePtr);
  if (!*a2)
  {
    v153 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v153, "Could not construct");
    __cxa_throw(v153, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v67 = CFArrayCreate(0, 0, 0, MEMORY[0x1E0C9B380]);
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&valuePtr, v67);
  applesauce::CF::at_or<applesauce::CF::ArrayRef,char const(&)[10]>(&v170, *a2, "Processes", &valuePtr);
  if (valuePtr)
    CFRelease(valuePtr);
  v68 = (const __CFArray *)v170;
  if (v170)
    CFRetain(v170);
  v69 = (const __CFArray *)v171;
  if (v171)
    CFRetain(v171);
  memset(cf, 0, 32);
  *(_DWORD *)&cf[32] = 1065353216;
  memset(v187, 0, sizeof(v187));
  LODWORD(v188) = 1065353216;
  memset(v185, 0, sizeof(v185));
  v70 = v68;
  v186 = 1065353216;
  if (v69)
  {
    Count = CFArrayGetCount(v69);
    v72 = CFArrayGetCount(v69);
    v70 = v68;
    if (Count)
    {
      v73 = v72;
      v74 = 0;
      while (1)
      {
        if (v74 == v73)
        {
LABEL_138:
          v70 = v68;
          goto LABEL_139;
        }
        applesauce::CF::details::at_to<applesauce::CF::TypeRef>(&v184, v69, v74);
        v75 = v184;
        if (v184)
          break;
LABEL_137:
        if (++v74 == Count)
          goto LABEL_138;
      }
      v76 = CFGetTypeID(v184);
      if (v76 != CFStringGetTypeID())
      {
LABEL_136:
        CFRelease(v75);
        goto LABEL_137;
      }
      CFRetain(v75);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v183, v75);
      v180 = 0;
      v181 = 0;
      HALS_System::GetInstance(&v182, 0, &v180);
      if (!v183)
      {
        v139 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v139, "Could not construct");
        __cxa_throw(v139, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v77 = v182.__vftable;
      applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)v183);
      v189.__r_.__value_.__r.__words[0] = 0;
      v189.__r_.__value_.__l.__size_ = (std::string::size_type)&v189;
      v189.__r_.__value_.__r.__words[2] = 0x2000000000;
      v190 = 0;
      valuePtr = (__CFString *)MEMORY[0x1E0C809B0];
      *(_QWORD *)&v192 = 0x40000000;
      *((_QWORD *)&v192 + 1) = ___ZNK11HALS_System20CopyClientByBundleIDERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
      *(_QWORD *)&v193 = &unk_1E697DE90;
      *((_QWORD *)&v193 + 1) = &v189;
      v194 = (const char *)v77;
      v195 = __p;
      v78 = (HALB_Mutex *)(*((uint64_t (**)(std::logic_error_vtbl *))v77->~logic_error + 7))(v77);
      HALB_CommandGate::ExecuteCommand(v78, (uint64_t)&valuePtr);
      v79 = *(unsigned int **)(v189.__r_.__value_.__l.__size_ + 24);
      _Block_object_dispose(&v189, 8);
      if (SHIBYTE(v179) < 0)
        operator delete(__p[0]);
      imp = (std::__shared_weak_count *)v182.__imp_.__imp_;
      if (v182.__imp_.__imp_)
      {
        v81 = (unint64_t *)(v182.__imp_.__imp_ + 8);
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
          std::__shared_weak_count::__release_weak(imp);
        }
      }
      v83 = v181;
      if (!v181)
        goto LABEL_125;
      v84 = (unint64_t *)&v181->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
        if (v79)
          goto LABEL_126;
      }
      else
      {
LABEL_125:
        if (v79)
        {
LABEL_126:
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)cf, v79[4], v79[4]);
          if (!v183)
          {
            v141 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v141, "Could not construct");
            __cxa_throw(v141, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          applesauce::CF::convert_to<std::string,0>((uint64_t)&valuePtr, (const __CFString *)v183);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)v187, (unsigned __int8 *)&valuePtr, (uint64_t)&valuePtr);
          goto LABEL_131;
        }
      }
      if (!v183)
      {
        v154 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v154, "Could not construct");
        __cxa_throw(v154, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::convert_to<std::string,0>((uint64_t)&valuePtr, (const __CFString *)v183);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)v185, (unsigned __int8 *)&valuePtr, (uint64_t)&valuePtr);
LABEL_131:
      if (SHIBYTE(v192) < 0)
        operator delete(valuePtr);
      HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v79, v86);
      if (v183)
        CFRelease(v183);
      v75 = v184;
      if (!v184)
        goto LABEL_137;
      goto LABEL_136;
    }
  }
LABEL_139:
  if (v70)
  {
    v87 = CFArrayGetCount(v70);
    v88 = CFArrayGetCount(v70);
    if (v87)
    {
      v89 = v88;
      for (i = 0; i != v87; ++i)
      {
        if (v89 == i)
          break;
        applesauce::CF::details::at_to<applesauce::CF::TypeRef>(&v189, v70, i);
        v91 = (const void *)v189.__r_.__value_.__r.__words[0];
        if (v189.__r_.__value_.__r.__words[0])
        {
          v92 = CFGetTypeID(v189.__r_.__value_.__l.__data_);
          if (v92 == CFNumberGetTypeID())
          {
            applesauce::CF::TypeRef::operator applesauce::CF::NumberRef((applesauce::CF::NumberRef *)__p, (CFTypeRef *)&v189.__r_.__value_.__l.__data_);
            if (!__p[0])
            {
              v140 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v140, "Could not construct");
              __cxa_throw(v140, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v93 = (HALS_ObjectMap *)applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)__p[0]);
            v94 = v93;
            v95 = HALS_ObjectMap::CopyObjectByObjectID(v93);
            v97 = (HALS_ObjectMap *)v95;
            if (v95
              && *(_DWORD *)(v95 + 20) == 1668050548
              && !std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(cf, v94))
            {
              HALS_Client::GetBundleIDString((HALS_Client *)&valuePtr, (uint64_t)v97);
              v98 = HIBYTE(v192);
              v99 = HIBYTE(v192);
              if (v192 < 0)
                v98 = v192;
              if (v98)
              {
                std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)cf, v94, v94);
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v187, (unsigned __int8 *)&valuePtr, (uint64_t)&valuePtr);
                v99 = HIBYTE(v192);
              }
              if (v99 < 0)
                operator delete(valuePtr);
            }
            HALS_ObjectMap::ReleaseObject(v97, v96);
            if (__p[0])
              CFRelease(__p[0]);
          }
          CFRelease(v91);
        }
      }
    }
  }
  if ((_BYTE *)(a1 + 88) != cf)
  {
    *(_DWORD *)(a1 + 120) = *(_DWORD *)&cf[32];
    v100 = *(uint64_t ***)&cf[16];
    v101 = *(_QWORD *)(a1 + 96);
    if (!v101)
      goto LABEL_168;
    for (j = 0; j != v101; *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * j++) = 0)
      ;
    v103 = *(uint64_t **)(a1 + 104);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    if (v103)
    {
      while (v100)
      {
        v104 = *((unsigned int *)v100 + 4);
        *((_DWORD *)v103 + 4) = v104;
        v105 = (uint64_t *)*v103;
        v103[1] = v104;
        inserted = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::__node_insert_multi_prepare(a1 + 88, v104, (_DWORD *)v103 + 4);
        std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::__node_insert_multi_perform((_QWORD *)(a1 + 88), v103, inserted);
        v100 = (uint64_t **)*v100;
        v103 = v105;
        if (!v105)
          goto LABEL_168;
      }
      do
      {
        v117 = (uint64_t *)*v103;
        operator delete(v103);
        v103 = v117;
      }
      while (v117);
    }
    else
    {
LABEL_168:
      while (v100)
      {
        v107 = operator new(0x18uLL);
        *(_QWORD *)v107 = 0;
        v108 = *((unsigned int *)v100 + 4);
        v107[4] = v108;
        *((_QWORD *)v107 + 1) = v108;
        v109 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::__node_insert_multi_prepare(a1 + 88, v108, v107 + 4);
        std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::__node_insert_multi_perform((_QWORD *)(a1 + 88), v107, v109);
        v100 = (uint64_t **)*v100;
      }
    }
  }
  if ((CFTypeRef *)(a1 + 128) != v187)
  {
    *(_DWORD *)(a1 + 160) = v188;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((_QWORD *)(a1 + 128), (uint64_t *)v187[2]);
  }
  if ((_BYTE *)(a1 + 168) != v185)
  {
    *(_DWORD *)(a1 + 200) = v186;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((_QWORD *)(a1 + 168), *(uint64_t **)&v185[16]);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)&v185[16]);
  v110 = *(void **)v185;
  *(_QWORD *)v185 = 0;
  if (v110)
    operator delete(v110);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v187[2]);
  v111 = (void *)v187[0];
  v187[0] = 0;
  if (v111)
    operator delete(v111);
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)cf);
  if (v69)
    CFRelease(v69);
  if (v68)
    CFRelease(v68);
  v112 = *(_QWORD *)(a1 + 248);
  v113 = *(_OWORD *)(v112 + 40);
  *(_OWORD *)v187 = *(_OWORD *)(v112 + 24);
  *(_OWORD *)&v187[2] = v113;
  v188 = *(_QWORD *)(v112 + 56);
  v114 = HIDWORD(v113);
  if ((BYTE4(v187[1]) & 0x20) != 0)
    v115 = 1;
  else
    v115 = HIDWORD(v113);
  if (LODWORD(v187[1]) != 1819304813 || (BYTE4(v187[1]) & 0x40) != 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v112);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&valuePtr, "com.apple.coreaudio", "AMCP");
    v123 = valuePtr->isa;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&valuePtr);
    if (os_log_type_enabled(v123, OS_LOG_TYPE_ERROR))
    {
      v124 = pthread_self();
      v125 = pthread_mach_thread_np(v124);
      LODWORD(valuePtr) = 67109890;
      HIDWORD(valuePtr) = v125;
      LOWORD(v192) = 2080;
      *(_QWORD *)((char *)&v192 + 2) = "HALS_Tap.cpp";
      WORD5(v192) = 1024;
      HIDWORD(v192) = 488;
      LOWORD(v193) = 2080;
      *(_QWORD *)((char *)&v193 + 2) = "not (format.IsMixable())";
      _os_log_error_impl(&dword_1B57BA000, v123, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&valuePtr, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v180);
    v126 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v189);
    std::logic_error::logic_error(&v182, &v189);
    v182.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)cf, &v182);
    *(_OWORD *)&cf[24] = 0uLL;
    v173 = 0;
    v174 = -1;
    *(_QWORD *)cf = off_1E69A1208;
    *(_QWORD *)&cf[16] = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&valuePtr, (uint64_t)cf);
    *((_QWORD *)&v193 + 1) = "BOOL HALS_Tap::_UpdateFromDescription(AMCP::CF::Dictionary, BOOL &, BOOL &)";
    v194 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Tap.cpp";
    LODWORD(v195) = 488;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)__p);
    *(_OWORD *)&v185[8] = *(_OWORD *)__p;
    *(_QWORD *)v185 = off_1E69A20A0;
    *(_QWORD *)&v185[24] = v179;
    __p[0] = 0;
    __p[1] = 0;
    v179 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&valuePtr, (uint64_t)v185);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v126, (uint64_t)&valuePtr);
  }
  if (*(_BYTE *)(a1 + 80))
  {
    v116 = 0;
    v115 = 1;
  }
  else if (*(_BYTE *)(a1 + 82))
  {
    v115 = 2;
    v116 = 1;
  }
  else
  {
    if (!*(_QWORD *)(a1 + 232))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v112);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&valuePtr, "com.apple.coreaudio", "AMCP");
      v135 = valuePtr->isa;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&valuePtr);
      if (os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
      {
        v136 = pthread_self();
        v137 = pthread_mach_thread_np(v136);
        LODWORD(valuePtr) = 67109890;
        HIDWORD(valuePtr) = v137;
        LOWORD(v192) = 2080;
        *(_QWORD *)((char *)&v192 + 2) = "HALS_Tap.cpp";
        WORD5(v192) = 1024;
        HIDWORD(v192) = 502;
        LOWORD(v193) = 2080;
        *(_QWORD *)((char *)&v193 + 2) = "(mDevice.get()) == nullptr";
        _os_log_error_impl(&dword_1B57BA000, v135, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Missing device for tap.", (uint8_t *)&valuePtr, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v180);
      v138 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Missing device for tap.", (uint64_t)&v189);
      std::runtime_error::runtime_error((std::runtime_error *)&v182, &v189);
      std::runtime_error::runtime_error((std::runtime_error *)cf, (const std::runtime_error *)&v182);
      *(_OWORD *)&cf[24] = 0uLL;
      v173 = 0;
      v174 = -1;
      *(_QWORD *)cf = &off_1E69A1FB8;
      *(_QWORD *)&cf[16] = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&valuePtr, (uint64_t)cf);
      *((_QWORD *)&v193 + 1) = "BOOL HALS_Tap::_UpdateFromDescription(AMCP::CF::Dictionary, BOOL &, BOOL &)";
      v194 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Tap.cpp";
      LODWORD(v195) = 502;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)__p);
      *(_OWORD *)&v185[8] = *(_OWORD *)__p;
      *(_QWORD *)v185 = off_1E69A20A0;
      *(_QWORD *)&v185[24] = v179;
      __p[0] = 0;
      __p[1] = 0;
      v179 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&valuePtr, (uint64_t)v185);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v138, (uint64_t)&valuePtr);
    }
    v116 = 2;
  }
  if (v116 != *(_DWORD *)(v112 + 64))
  {
    if ((BYTE4(v187[1]) & 0x20) != 0)
    {
      v114 = 1;
    }
    else if (!HIDWORD(v113))
    {
      v118 = (v188 + 7) >> 3;
LABEL_201:
      HIDWORD(v187[3]) = v115;
      HIDWORD(v187[2]) = 1;
      LODWORD(v187[3]) = v118 * v115;
      LODWORD(v187[2]) = v118 * v115;
      HIDWORD(v187[1]) &= ~0x20u;
      HALS_MultiTap::set_format((HALS_MultiTap *)v112, (__int128 *)v187, v116 | 0x100000000);
      v112 = *(_QWORD *)(a1 + 248);
      goto LABEL_202;
    }
    v118 = LODWORD(v187[3]) / v114;
    goto LABEL_201;
  }
LABEL_202:
  v119 = 1;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(v168, *(int32x4_t *)(v112 + 32))), 0xFuLL))) & 1) != 0
    && v165 == *(_DWORD *)(v112 + 48))
  {
    v120 = v166;
    if (v9 == *(double *)(v112 + 24) && v163 == *(_DWORD *)(v112 + 52))
      v119 = v162 != *(_DWORD *)(v112 + 56);
  }
  else
  {
    v120 = v166;
  }
  *a3 = v119;
  if ((v169 & 1) == 0
    && v161 == *(unsigned __int8 *)(a1 + 80)
    && v160 == *(unsigned __int8 *)(a1 + 82)
    && v120 == *(unsigned __int8 *)(a1 + 83)
    && v159 == *(_DWORD *)(a1 + 84))
  {
    v121 = 1;
    if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(v168, *(int32x4_t *)(v112 + 32))), 0xFuLL))) & 1) != 0
      && v165 == *(_DWORD *)(v112 + 48)
      && v9 == *(double *)(v112 + 24)
      && v163 == *(_DWORD *)(v112 + 52))
    {
      v121 = v162 != *(_DWORD *)(v112 + 56);
    }
  }
  else
  {
    v121 = 1;
  }
  *v164 = v120 != *(unsigned __int8 *)(a1 + 83);
  if (v170)
    CFRelease(v170);
  if (v171)
    CFRelease(v171);
  if (v177)
    CFRelease(v177);
  return v121;
}

void sub_1B5944E28(uint64_t a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, const void *a19, const void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,const void *a55)
{
  HALS_ObjectMap *v55;

  HALS_ObjectMap::ReleaseObject(v55, a2);
  applesauce::CF::NumberRef::~NumberRef((const void **)&a33);
  applesauce::CF::TypeRef::~TypeRef(&a55);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a43);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a49);
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)&a23);
  applesauce::CF::ArrayRef::~ArrayRef(&a19);
  applesauce::CF::ArrayRef::~ArrayRef(&a20);
  JUMPOUT(0x1B5945598);
}

void sub_1B5945208(void *a1, int a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    __cxa_begin_catch(a1);
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
    __cxa_rethrow();
  }
  JUMPOUT(0x1B59455BCLL);
}

void sub_1B5945234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, const void *a19, const void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  __cxa_end_catch();
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a43);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a49);
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)&a23);
  applesauce::CF::ArrayRef::~ArrayRef(&a19);
  applesauce::CF::ArrayRef::~ArrayRef(&a20);
  JUMPOUT(0x1B5945598);
}

void sub_1B5945250()
{
  JUMPOUT(0x1B59455BCLL);
}

void sub_1B5945258(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::runtime_error a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,std::runtime_error a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,std::runtime_error a60,void *a61,uint64_t a62)
{
  void *v62;
  int v63;

  if (__p)
    operator delete(__p);
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  a61 = &unk_1E69A2000;
  if (a62 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a62 + 32))(a62))
    a62 = 0;
  std::runtime_error::~runtime_error(&a60);
  a24 = &unk_1E69A2000;
  if (a25 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a25 + 32))(a25))
    a25 = 0;
  std::runtime_error::~runtime_error(&a23);
  std::runtime_error::~runtime_error(&a38);
  if (a58 < 0)
    operator delete(a53);
  if (v63)
    __cxa_free_exception(v62);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a36);
  JUMPOUT(0x1B5945598);
}

void sub_1B59452FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(&a43);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(&a49);
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(&a23);
  applesauce::CF::ArrayRef::~ArrayRef((applesauce::CF::ArrayRef *)&a19);
  applesauce::CF::ArrayRef::~ArrayRef((applesauce::CF::ArrayRef *)&a20);
  JUMPOUT(0x1B5945598);
}

void sub_1B5945304()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x1B5945310);
}

void sub_1B594533C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::runtime_error a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::runtime_error a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,void *a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,std::runtime_error a60,uint64_t a61,uint64_t a62)
{
  void *v62;

  if (SHIBYTE(a58) < 0)
    operator delete(a56);
  __cxa_free_exception(v62);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a35);
  JUMPOUT(0x1B5945598);
}

void sub_1B5945584(uint64_t a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  JUMPOUT(0x1B59455A8);
}

void sub_1B5945594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,const void *a21,const void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,const void *a32)
{
  applesauce::CF::ArrayRef::~ArrayRef(&a21);
  applesauce::CF::ArrayRef::~ArrayRef(&a22);
  applesauce::CF::StringRef::~StringRef(&a32);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::at_or<applesauce::CF::StringRef,char const(&)[8]>(_QWORD *a1, const __CFDictionary *a2, char *a3, _QWORD *a4)
{
  void *Value;
  CFTypeID v8;
  void *key;
  char v11;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, a3);
  Value = (void *)CFDictionaryGetValue(a2, key);
  if (key)
    CFRelease(key);
  if (!Value)
    goto LABEL_7;
  CFRetain(Value);
  v8 = CFGetTypeID(Value);
  if (v8 != CFStringGetTypeID())
  {
    CFRelease(Value);
LABEL_7:
    LOBYTE(key) = 0;
    v11 = 0;
    *a1 = *a4;
    *a4 = 0;
    return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&key);
  }
  key = Value;
  v11 = 1;
  CFRetain(Value);
  *a1 = Value;
  return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&key);
}

void sub_1B59456A4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  applesauce::CF::StringRef::~StringRef(&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B594565CLL);
}

uint64_t applesauce::CF::at_or<applesauce::CF::BooleanRef,char const(&)[10]>(_QWORD *a1, const __CFDictionary *a2, char *a3, _QWORD *a4)
{
  const void *v6;
  const void *v7;
  CFTypeID v8;
  const void *v10;
  char v11;

  v6 = applesauce::CF::details::at_key<char const(&)[10]>(a2, a3);
  if (!v6)
    goto LABEL_5;
  v7 = v6;
  CFRetain(v6);
  v8 = CFGetTypeID(v7);
  if (v8 != CFBooleanGetTypeID())
  {
    CFRelease(v7);
LABEL_5:
    LOBYTE(v10) = 0;
    v11 = 0;
    *a1 = *a4;
    *a4 = 0;
    return std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v10);
  }
  v10 = v7;
  v11 = 1;
  CFRetain(v7);
  *a1 = v7;
  return std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v10);
}

void HALS_Tap::RemoveDeviceSampleRateListener(HALS_Tap *this, const HALS_Listener *a2, uint64_t a3, unsigned int a4, const AudioObjectPropertyAddress *a5)
{
  _DWORD v5[2];
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  int v9;

  v8 = 0x676C6F626E737274;
  v9 = 0;
  v5[0] = 0;
  v5[1] = (_DWORD)this;
  v6 = 0u;
  v7 = 0u;
  HALS_NotificationManager::RemovePropertyListener((HALS_NotificationManager *)v5, a2, &v8, a4, a5);
  HALS_Listener::~HALS_Listener((HALS_Listener *)v5);
}

void sub_1B59457D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HALS_Listener::~HALS_Listener((HALS_Listener *)va);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::at_or<applesauce::CF::ArrayRef,char const(&)[10]>(_QWORD *a1, const __CFDictionary *a2, char *a3, _QWORD *a4)
{
  const void *v6;
  const void *v7;
  CFTypeID v8;
  const void *v10;
  char v11;

  v6 = applesauce::CF::details::at_key<char const(&)[10]>(a2, a3);
  if (!v6)
    goto LABEL_5;
  v7 = v6;
  CFRetain(v6);
  v8 = CFGetTypeID(v7);
  if (v8 != CFArrayGetTypeID())
  {
    CFRelease(v7);
LABEL_5:
    LOBYTE(v10) = 0;
    v11 = 0;
    *a1 = *a4;
    *a4 = 0;
    return std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v10);
  }
  v10 = v7;
  v11 = 1;
  CFRetain(v7);
  *a1 = v7;
  return std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v10);
}

void std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v12 = *v20;
LABEL_38:
    *v20 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v21 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1B5945A8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(i + 16, a2))
            return;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = operator new(0x28uLL);
  *v15 = 0;
  v15[1] = v8;
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  v15[4] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *v15 = *v23;
LABEL_38:
    *v23 = v15;
    goto LABEL_39;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    v24 = *(_QWORD *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9)
        v24 %= v9;
    }
    else
    {
      v24 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1B5945CC4(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

applesauce::CF::NumberRef *applesauce::CF::TypeRef::operator applesauce::CF::NumberRef(applesauce::CF::NumberRef *a1, CFTypeRef *a2)
{
  CFTypeID v4;
  CFTypeRef v5;
  std::runtime_error *exception;

  if (*a2)
  {
    v4 = CFGetTypeID(*a2);
    if (v4 != CFNumberGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::construct_error(exception);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v5 = *a2;
    if (v5)
      CFRetain(v5);
  }
  else
  {
    v5 = 0;
  }
  return applesauce::CF::NumberRef::NumberRef(a1, v5);
}

void sub_1B5945D68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v12 = *v20;
LABEL_38:
    *v20 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v21 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1B5945F78(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  std::string *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(i + 16, a2))
            return;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = operator new(0x28uLL);
  *v15 = 0;
  v15[1] = v8;
  v16 = (std::string *)(v15 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v15[4] = *(_QWORD *)(a3 + 16);
  }
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *v15 = *v24;
LABEL_41:
    *v24 = v15;
    goto LABEL_42;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    v25 = *(_QWORD *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9)
        v25 %= v9;
    }
    else
    {
      v25 &= v9 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1B59461BC(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  BOOL v7;
  void **v8;
  BOOL v9;
  char *v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;

  v2 = a2;
  v4 = a1[1];
  if (v4)
  {
    for (i = 0; i != v4; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v6 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v6)
      v7 = a2 == 0;
    else
      v7 = 1;
    if (v7)
    {
      v8 = (void **)v6;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v6 + 16), (const std::string *)(v2 + 2));
        v8 = *(void ***)v6;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi((uint64_t)a1, v6);
        v2 = (uint64_t *)*v2;
        if (v8)
          v9 = v2 == 0;
        else
          v9 = 1;
        v6 = (uint64_t)v8;
      }
      while (!v9);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v8);
  }
  for (; v2; v2 = (uint64_t *)*v2)
  {
    v10 = (char *)operator new(0x28uLL);
    v11 = (uint64_t)v10;
    v12 = v10 + 16;
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
    if (*((char *)v2 + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v10 + 16), (const std::string::value_type *)v2[2], v2[3]);
    }
    else
    {
      v13 = *((_OWORD *)v2 + 1);
      *((_QWORD *)v10 + 4) = v2[4];
      *v12 = v13;
    }
    *(_QWORD *)(v11 + 8) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v12);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi((uint64_t)a1, v11);
  }
}

void sub_1B59462E0(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(void **__p)
{
  void **v1;
  void **v2;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (void **)*v1;
      if (*((char *)v1 + 39) < 0)
        operator delete(v1[2]);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unsigned __int8 *v4;
  unint64_t v5;
  float v6;
  float v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  int8x8_t prime;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint8x8_t v17;
  unint64_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  uint8x8_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  int v33;
  unsigned __int8 *v34;
  unint64_t v35;
  unint64_t v36;
  _BOOL4 v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  unint64_t v42;
  unint64_t v43;

  v2 = (_QWORD *)a2;
  v4 = (unsigned __int8 *)(a2 + 16);
  v43 = std::__string_hash<char>::operator()[abi:ne180100](a2 + 16);
  v2[1] = v43;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v7 = *(float *)(a1 + 32);
  if (!v5 || (float)(v7 * (float)v5) < v6)
  {
    v8 = 1;
    if (v5 >= 3)
      v8 = (v5 & (v5 - 1)) != 0;
    v9 = v8 | (2 * v5);
    v10 = vcvtps_u32_f32(v6 / v7);
    if (v9 <= v10)
      prime = (int8x8_t)v10;
    else
      prime = (int8x8_t)v9;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v5 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v5)
      goto LABEL_99;
    if (*(_QWORD *)&prime >= v5)
      goto LABEL_60;
    v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      v19 = std::__next_prime(v19);
    }
    else
    {
      v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2)
        v19 = v21;
    }
    if (*(_QWORD *)&prime <= v19)
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime >= v5)
    {
      v5 = *(_QWORD *)(a1 + 8);
      goto LABEL_60;
    }
    if (prime)
    {
LABEL_99:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = operator new(8 * *(_QWORD *)&prime);
      v13 = *(void **)a1;
      *(_QWORD *)a1 = v12;
      if (v13)
        operator delete(v13);
      v41 = v4;
      v14 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v14++) = 0;
      while (*(_QWORD *)&prime != v14);
      v15 = *(uint64_t **)(a1 + 16);
      if (v15)
      {
        v16 = v15[1];
        v17 = (uint8x8_t)vcnt_s8(prime);
        v17.i16[0] = vaddlv_u8(v17);
        v18 = v17.u32[0];
        v40 = v2;
        if (v17.u32[0] > 1uLL)
        {
          if (v16 >= *(_QWORD *)&prime)
            v16 %= *(_QWORD *)&prime;
        }
        else
        {
          v16 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v16) = a1 + 16;
        v22 = *v15;
        if (*v15)
        {
          v42 = v17.u32[0];
          do
          {
            v23 = *(_QWORD *)(v22 + 8);
            if (v18 > 1)
            {
              if (v23 >= *(_QWORD *)&prime)
                v23 %= *(_QWORD *)&prime;
            }
            else
            {
              v23 &= *(_QWORD *)&prime - 1;
            }
            if (v23 == v16)
            {
              v15 = (uint64_t *)v22;
            }
            else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v23))
            {
              v24 = *(_QWORD **)v22;
              if (*(_QWORD *)v22)
              {
                v25 = (_QWORD *)v22;
                while (1)
                {
                  v26 = v24;
                  if (!std::__equal_to::operator()[abi:ne180100]<std::string,std::string>((unsigned __int8 *)(v22 + 16), (unsigned __int8 *)v24 + 16))break;
                  v24 = (_QWORD *)*v26;
                  v25 = v26;
                  if (!*v26)
                    goto LABEL_47;
                }
                v24 = v26;
                v26 = v25;
LABEL_47:
                v18 = v42;
              }
              else
              {
                v26 = (_QWORD *)v22;
              }
              *v15 = (uint64_t)v24;
              *v26 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v23);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v23) = v22;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v15;
              v15 = (uint64_t *)v22;
              v16 = v23;
            }
            v22 = *v15;
          }
          while (*v15);
        }
        v5 = (unint64_t)prime;
        v2 = v40;
        v4 = v41;
      }
      else
      {
        v5 = (unint64_t)prime;
        v4 = v41;
      }
    }
    else
    {
      v27 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v27)
        operator delete(v27);
      v5 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_60:
  v28 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v28.i16[0] = vaddlv_u8(v28);
  v29 = v28.u32[0];
  if (v28.u32[0] > 1uLL)
  {
    v30 = v43;
    if (v5 <= v43)
      v30 = v43 % v5;
  }
  else
  {
    v30 = (v5 - 1) & v43;
  }
  v31 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8 * v30);
  if (v31)
  {
    v32 = *(unsigned __int8 **)v31;
    if (*(_QWORD *)v31)
    {
      v33 = 0;
      do
      {
        v34 = v32;
        v35 = *((_QWORD *)v32 + 1);
        if (v29 > 1)
        {
          v36 = v35;
          if (v35 >= v5)
            v36 = v35 % v5;
        }
        else
        {
          v36 = v35 & (v5 - 1);
        }
        if (v36 != v30)
          break;
        v37 = v35 == v43 && std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v34 + 16, v4);
        if ((v33 & !v37 & 1) != 0)
          break;
        v33 |= v37;
        v32 = *(unsigned __int8 **)v34;
        v31 = v34;
      }
      while (*(_QWORD *)v34);
    }
  }
  v38 = v2[1];
  if (v29 > 1)
  {
    if (v38 >= v5)
      v38 %= v5;
  }
  else
  {
    v38 &= v5 - 1;
  }
  if (!v31)
  {
    *v2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = a1 + 16;
    if (!*v2)
      goto LABEL_95;
    v39 = *(_QWORD *)(*v2 + 8);
    if (v29 > 1)
    {
      if (v39 >= v5)
        v39 %= v5;
    }
    else
    {
      v39 &= v5 - 1;
    }
LABEL_94:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v2;
    goto LABEL_95;
  }
  *v2 = *(_QWORD *)v31;
  *(_QWORD *)v31 = v2;
  if (*v2)
  {
    v39 = *(_QWORD *)(*v2 + 8);
    if (v29 > 1)
    {
      if (v39 >= v5)
        v39 %= v5;
    }
    else
    {
      v39 &= v5 - 1;
    }
    if (v39 != v38)
      goto LABEL_94;
  }
LABEL_95:
  ++*(_QWORD *)(a1 + 24);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

const void *applesauce::CF::details::at_key<char const(&)[10]>(const __CFDictionary *a1, char *a2)
{
  const void *Value;
  void *key;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, a2);
  if (a1)
    Value = CFDictionaryGetValue(a1, key);
  if (key)
    CFRelease(key);
  if (!a1)
    return 0;
  return Value;
}

void sub_1B59468E8(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B59468CCLL);
}

const void *applesauce::CF::details::at_key<char const(&)[7]>(const __CFDictionary *a1, char *a2)
{
  const void *Value;
  void *key;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, a2);
  if (a1)
    Value = CFDictionaryGetValue(a1, key);
  if (key)
    CFRelease(key);
  if (!a1)
    return 0;
  return Value;
}

void sub_1B5946970(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5946954);
}

void ___ZNK8HALS_Tap15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __CFDictionary *Mutable;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  CFNumberRef v10;
  HALS_Object *v11;
  HALS_ObjectMap *v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  CFNumberRef v19;
  __CFDictionary *v20;
  const void *v21;
  CFMutableArrayRef v22;
  uint64_t *i;
  std::string *p_cf;
  CFIndex v25;
  CFStringRef v26;
  uint64_t *j;
  std::string *v28;
  CFIndex v29;
  CFStringRef v30;
  __CFDictionary *v31;
  __CFArray *v32;
  uint64_t *v33;
  unsigned int v34;
  HALS_Object *v35;
  HALS_ObjectMap *v36;
  CFNumberRef v37;
  std::runtime_error *v38;
  std::runtime_error *v39;
  std::runtime_error *v40;
  std::runtime_error *exception;
  std::runtime_error *v42;
  CFTypeRef v43;
  CFTypeRef v44;
  CFTypeRef v45;
  std::string cf;
  CFTypeRef v47;
  uint64_t valuePtr;
  std::__shared_weak_count *v49;
  __CFDictionary *v50;

  v2 = *(_QWORD *)(a1 + 32);
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  v50 = Mutable;
  if (*(_QWORD *)(v2 + 56))
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "TapName");
    mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(Mutable, cf.__r_.__value_.__l.__data_, *(const void **)(v2 + 56));
    if (cf.__r_.__value_.__r.__words[0])
      CFRelease(cf.__r_.__value_.__l.__data_);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "TapUUID");
  mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(Mutable, cf.__r_.__value_.__l.__data_, *(const void **)(v2 + 64));
  if (cf.__r_.__value_.__r.__words[0])
    CFRelease(cf.__r_.__value_.__l.__data_);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "IsMono");
  v4 = (const void *)*MEMORY[0x1E0C9AE58];
  v5 = (const void *)*MEMORY[0x1E0C9AE48];
  if (*(_BYTE *)(v2 + 80))
    v6 = (const void *)*MEMORY[0x1E0C9AE58];
  else
    v6 = (const void *)*MEMORY[0x1E0C9AE48];
  mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::BooleanRef>(Mutable, cf.__r_.__value_.__l.__data_, v6);
  if (v6)
    CFRelease(v6);
  if (cf.__r_.__value_.__r.__words[0])
    CFRelease(cf.__r_.__value_.__l.__data_);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "IsExclusive");
  if (*(_BYTE *)(v2 + 81))
    v7 = v4;
  else
    v7 = v5;
  mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::BooleanRef>(Mutable, cf.__r_.__value_.__l.__data_, v7);
  if (v7)
    CFRelease(v7);
  if (cf.__r_.__value_.__r.__words[0])
    CFRelease(cf.__r_.__value_.__l.__data_);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "IsMixdown");
  if (*(_BYTE *)(v2 + 82))
    v8 = v4;
  else
    v8 = v5;
  mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::BooleanRef>(Mutable, cf.__r_.__value_.__l.__data_, v8);
  if (v8)
    CFRelease(v8);
  if (cf.__r_.__value_.__r.__words[0])
    CFRelease(cf.__r_.__value_.__l.__data_);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "IsPrivate");
  if (*(_BYTE *)(v2 + 83))
    v9 = v4;
  else
    v9 = v5;
  mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::BooleanRef>(Mutable, cf.__r_.__value_.__l.__data_, v9);
  if (v9)
    CFRelease(v9);
  if (cf.__r_.__value_.__r.__words[0])
    CFRelease(cf.__r_.__value_.__l.__data_);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "MuteBehavior");
  LODWORD(valuePtr) = *(_DWORD *)(v2 + 84);
  v10 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v10)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, cf.__r_.__value_.__l.__data_, v10);
  CFRelease(v10);
  if (cf.__r_.__value_.__r.__words[0])
    CFRelease(cf.__r_.__value_.__l.__data_);
  if (*(_QWORD *)(v2 + 232))
  {
    valuePtr = 0;
    v49 = 0;
    HALS_System::GetInstance(&cf, 0, &valuePtr);
    v12 = HALS_System::CopyDeviceByObjectID((HALS_System *)cf.__r_.__value_.__l.__data_, **(_DWORD **)(v2 + 232), 0);
    size = (std::__shared_weak_count *)cf.__r_.__value_.__l.__size_;
    if (cf.__r_.__value_.__l.__size_)
    {
      v14 = (unint64_t *)(cf.__r_.__value_.__l.__size_ + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v16 = v49;
    if (!v49)
      goto LABEL_47;
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      if (v12)
        goto LABEL_48;
    }
    else
    {
LABEL_47:
      if (v12)
      {
LABEL_48:
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "Stream");
        LODWORD(v47) = *(_DWORD *)(*(_QWORD *)(v2 + 232) + 4);
        v19 = CFNumberCreate(0, kCFNumberIntType, &v47);
        if (!v19)
        {
          v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v42, "Could not construct");
          __cxa_throw(v42, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v20 = v50;
        mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v50, cf.__r_.__value_.__l.__data_, v19);
        CFRelease(v19);
        if (cf.__r_.__value_.__r.__words[0])
          CFRelease(cf.__r_.__value_.__l.__data_);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "DeviceUID");
        v21 = (const void *)(*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)v12 + 208))(v12);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v47, v21);
        mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(v20, cf.__r_.__value_.__l.__data_, v47);
        if (v47)
          CFRelease(v47);
        if (cf.__r_.__value_.__r.__words[0])
          CFRelease(cf.__r_.__value_.__l.__data_);
      }
    }
    HALS_ObjectMap::ReleaseObject(v12, v11);
  }
  v22 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  v47 = v22;
  for (i = *(uint64_t **)(v2 + 144); i; i = (uint64_t *)*i)
  {
    if (*((char *)i + 39) < 0)
      std::string::__init_copy_ctor_external(&cf, (const std::string::value_type *)i[2], i[3]);
    else
      cf = *(std::string *)(i + 2);
    if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_cf = &cf;
    else
      p_cf = (std::string *)cf.__r_.__value_.__r.__words[0];
    if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = HIBYTE(cf.__r_.__value_.__r.__words[2]);
    else
      v25 = cf.__r_.__value_.__l.__size_;
    v26 = CFStringCreateWithBytes(0, (const UInt8 *)p_cf, v25, 0x8000100u, 0);
    if (!v26)
    {
      v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v38, "Could not construct");
      __cxa_throw(v38, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::StringRef>(v22, v26);
    CFRelease(v26);
    if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cf.__r_.__value_.__l.__data_);
  }
  for (j = *(uint64_t **)(v2 + 184); j; j = (uint64_t *)*j)
  {
    if (*((char *)j + 39) < 0)
      std::string::__init_copy_ctor_external(&cf, (const std::string::value_type *)j[2], j[3]);
    else
      cf = *(std::string *)(j + 2);
    if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &cf;
    else
      v28 = (std::string *)cf.__r_.__value_.__r.__words[0];
    if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = HIBYTE(cf.__r_.__value_.__r.__words[2]);
    else
      v29 = cf.__r_.__value_.__l.__size_;
    v30 = CFStringCreateWithBytes(0, (const UInt8 *)v28, v29, 0x8000100u, 0);
    if (!v30)
    {
      v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v39, "Could not construct");
      __cxa_throw(v39, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::StringRef>(v22, v30);
    CFRelease(v30);
    if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cf.__r_.__value_.__l.__data_);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "BundleIDs");
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&v45, v22);
  v31 = v50;
  mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(v50, cf.__r_.__value_.__l.__data_, v45);
  if (v45)
    CFRelease(v45);
  if (cf.__r_.__value_.__r.__words[0])
    CFRelease(cf.__r_.__value_.__l.__data_);
  v32 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
  v33 = (uint64_t *)(v2 + 104);
  while (1)
  {
    v33 = (uint64_t *)*v33;
    if (!v33)
      break;
    v34 = *((_DWORD *)v33 + 4);
    v36 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)v34);
    if (v36)
    {
      LODWORD(v45) = v34;
      v37 = CFNumberCreate(0, kCFNumberIntType, &v45);
      if (!v37)
      {
        v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v40, "Could not construct");
        __cxa_throw(v40, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(v32, v37);
      CFRelease(v37);
    }
    HALS_ObjectMap::ReleaseObject(v36, v35);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v45, "Processes");
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&v44, v32);
  mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(v31, v45, v44);
  if (v44)
    CFRelease(v44);
  if (v45)
    CFRelease(v45);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v43, v31);
  if (v32)
    CFRelease(v32);
  if (v22)
    CFRelease(v22);
  if (v31)
    CFRelease(v31);
  **(_QWORD **)(a1 + 40) = CFRetain(v43);
  if (v43)
    CFRelease(v43);
}

void sub_1B59470D8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  HALS_ObjectMap *v24;
  uint64_t v25;
  HALS_Object *v27;

  applesauce::CF::StringRef::~StringRef((const void **)&__p);
  HALS_ObjectMap::ReleaseObject(v24, v27);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)(v25 - 72));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5946F98);
}

void mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::BooleanRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1)
    CFDictionaryAddValue(a1, a2, a3);
}

void mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1)
    CFDictionaryAddValue(a1, a2, a3);
}

void mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1)
    CFDictionaryAddValue(a1, a2, a3);
}

void std::__shared_ptr_emplace<HALS_MultiTap>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6975C30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HALS_MultiTap>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6975C30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<HALS_MultiTap>::__on_zero_shared(uint64_t a1)
{
  HALS_ObjectMap *v2;
  uint64_t v3;
  HALS_ObjectMap *v4;
  HALS_Object *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;

  v2 = (HALS_ObjectMap *)*(unsigned int *)(a1 + 40);
  if ((_DWORD)v2)
  {
    v3 = HALS_ObjectMap::CopyObjectByObjectID(v2);
    v4 = (HALS_ObjectMap *)v3;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    HALS_ObjectMap::ObjectIsDead((HALS_ObjectMap *)*(unsigned int *)(a1 + 40));
    *(_DWORD *)(a1 + 40) = 0;
    HALS_ObjectMap::ReleaseObject(v4, v5);
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 560);
  std::unique_ptr<AMCP::DAL::Container>::reset[abi:ne180100]((uint64_t *)(a1 + 552), 0);
  v6 = *(_QWORD *)(a1 + 544);
  *(_QWORD *)(a1 + 544) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(a1 + 496);
  if (*(_BYTE *)(a1 + 488))
  {
    v7 = *(_QWORD **)(a1 + 480);
    if (v7 == (_QWORD *)(a1 + 456))
    {
      v8 = 4;
      v7 = (_QWORD *)(a1 + 456);
    }
    else
    {
      if (!v7)
        goto LABEL_13;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
LABEL_13:
  v9 = *(_QWORD **)(a1 + 408);
  if (v9)
  {
    do
    {
      v10 = (_QWORD *)*v9;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(v9 + 3));
      operator delete(v9);
      v9 = v10;
    }
    while (v10);
  }
  v11 = *(void **)(a1 + 392);
  *(_QWORD *)(a1 + 392) = 0;
  if (v11)
    operator delete(v11);
  v12 = *(_QWORD *)(a1 + 352);
  if (v12)
  {
    v13 = *(_QWORD *)(a1 + 360);
    v14 = *(void **)(a1 + 352);
    if (v13 != v12)
    {
      do
        v13 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v13 - 16);
      while (v13 != v12);
      v14 = *(void **)(a1 + 352);
    }
    *(_QWORD *)(a1 + 360) = v12;
    operator delete(v14);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 288));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 240));
  std::mutex::~mutex((std::mutex *)(a1 + 176));
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(a1 + 104);
  v15 = *(std::__shared_weak_count **)(a1 + 32);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
}

void sub_1B5947570(void *a1)
{
  __clang_call_terminate(a1);
}

_QWORD *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::erase(_QWORD *a1, void **a2)
{
  int8x8_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint8x8_t v5;
  void **v6;
  void **v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;

  v2 = (int8x8_t)a1[1];
  v4 = *a2;
  v3 = (unint64_t)a2[1];
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v3 >= *(_QWORD *)&v2)
      v3 %= *(_QWORD *)&v2;
  }
  else
  {
    v3 &= *(_QWORD *)&v2 - 1;
  }
  v6 = *(void ***)(*a1 + 8 * v3);
  do
  {
    v7 = v6;
    v6 = (void **)*v6;
  }
  while (v6 != a2);
  if (v7 != a1 + 2)
  {
    v8 = (unint64_t)v7[1];
    if (v5.u32[0] > 1uLL)
    {
      if (v8 >= *(_QWORD *)&v2)
        v8 %= *(_QWORD *)&v2;
    }
    else
    {
      v8 &= *(_QWORD *)&v2 - 1;
    }
    v9 = *a2;
    if (v8 == v3)
    {
LABEL_20:
      if (!v9)
        goto LABEL_27;
      goto LABEL_21;
    }
  }
  if (!v4)
    goto LABEL_19;
  v10 = v4[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v10 >= *(_QWORD *)&v2)
      v10 %= *(_QWORD *)&v2;
  }
  else
  {
    v10 &= *(_QWORD *)&v2 - 1;
  }
  v9 = *a2;
  if (v10 != v3)
  {
LABEL_19:
    *(_QWORD *)(*a1 + 8 * v3) = 0;
    v9 = *a2;
    goto LABEL_20;
  }
LABEL_21:
  v11 = v9[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v11 >= *(_QWORD *)&v2)
      v11 %= *(_QWORD *)&v2;
  }
  else
  {
    v11 &= *(_QWORD *)&v2 - 1;
  }
  if (v11 != v3)
  {
    *(_QWORD *)(*a1 + 8 * v11) = v7;
    v9 = *a2;
  }
LABEL_27:
  *v7 = v9;
  *a2 = 0;
  --a1[3];
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](1, a2);
  return v4;
}

void sub_1B59478BC(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  HALS_ObjectMap *v16;

  if (a15 < 0)
    operator delete(__p);
  HALS_ObjectMap::ReleaseObject(v16, a2);
  _Unwind_Resume(a1);
}

void std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__erase_unique<unsigned int>(_QWORD *a1, unsigned int a2)
{
  uint64_t *v3;

  v3 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(a1, a2);
  if (v3)
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(a1, v3);
}

void std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(_QWORD *a1, _QWORD *__p)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  v3 = __p[1];
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(_QWORD *)&v2)
      v3 %= *(_QWORD *)&v2;
  }
  else
  {
    v3 &= *(_QWORD *)&v2 - 1;
  }
  v5 = *(_QWORD **)(*a1 + 8 * v3);
  do
  {
    v6 = v5;
    v5 = (_QWORD *)*v5;
  }
  while (v5 != __p);
  if (v6 == a1 + 2)
    goto LABEL_18;
  v7 = v6[1];
  if (v4.u32[0] > 1uLL)
  {
    if (v7 >= *(_QWORD *)&v2)
      v7 %= *(_QWORD *)&v2;
  }
  else
  {
    v7 &= *(_QWORD *)&v2 - 1;
  }
  if (v7 != v3)
  {
LABEL_18:
    if (!*__p)
      goto LABEL_19;
    v8 = *(_QWORD *)(*__p + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v8 >= *(_QWORD *)&v2)
        v8 %= *(_QWORD *)&v2;
    }
    else
    {
      v8 &= *(_QWORD *)&v2 - 1;
    }
    if (v8 != v3)
LABEL_19:
      *(_QWORD *)(*a1 + 8 * v3) = 0;
  }
  v9 = *__p;
  if (*__p)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v2)
        v10 %= *(_QWORD *)&v2;
    }
    else
    {
      v10 &= *(_QWORD *)&v2 - 1;
    }
    if (v10 != v3)
    {
      *(_QWORD *)(*a1 + 8 * v10) = v6;
      v9 = *__p;
    }
  }
  *v6 = v9;
  *__p = 0;
  --a1[3];
  operator delete(__p);
}

unint64_t AMCP::Core::Core::get_simple_required_property<1935894638u>(AMCP::Core::Core *a1)
{
  unint64_t result;
  NSObject *v2;
  _opaque_pthread_t *v3;
  mach_port_t v4;
  void *__p[2];
  char v6;
  _BYTE buf[10];
  char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  void **v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  strcpy(buf, "nhcsbolg");
  buf[9] = 0;
  LOWORD(v8) = 0;
  result = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!HIDWORD(result))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v2 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3 = pthread_self();
      v4 = pthread_mach_thread_np(v3);
      v6 = 4;
      strcpy((char *)__p, "schn");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v4;
      *(_WORD *)&buf[8] = 2080;
      v8 = "Core.h";
      v9 = 1024;
      v10 = 391;
      v11 = 2080;
      v12 = "optional_value.operator BOOL() == true";
      v13 = 2080;
      v14 = __p;
      v15 = 1024;
      v16 = 1735159650;
      v17 = 1024;
      v18 = 0;
      _os_log_error_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v6 < 0)
        operator delete(__p[0]);
    }
    abort();
  }
  return result;
}

void sub_1B5947BE0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

unint64_t AMCP::Core::Core::get_simple_required_property<1935960434u>(AMCP::Core::Core *a1)
{
  unint64_t result;
  NSObject *v2;
  _opaque_pthread_t *v3;
  mach_port_t v4;
  void *__p[2];
  char v6;
  _BYTE buf[10];
  char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  void **v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  strcpy(buf, "ridsbolg");
  buf[9] = 0;
  LOWORD(v8) = 0;
  result = AMCP::Core::Core::get_typed_property_value<AMCP::Direction,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!HIDWORD(result))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v2 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3 = pthread_self();
      v4 = pthread_mach_thread_np(v3);
      v6 = 4;
      strcpy((char *)__p, "sdir");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v4;
      *(_WORD *)&buf[8] = 2080;
      v8 = "Core.h";
      v9 = 1024;
      v10 = 391;
      v11 = 2080;
      v12 = "optional_value.operator BOOL() == true";
      v13 = 2080;
      v14 = __p;
      v15 = 1024;
      v16 = 1735159650;
      v17 = 1024;
      v18 = 0;
      _os_log_error_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v6 < 0)
        operator delete(__p[0]);
    }
    abort();
  }
  return result;
}

void sub_1B5947D58(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMCP::IO_Core::Device_Node_Factory::clock_uid_and_node_description_from_device_and_direction(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  std::__shared_mutex_base *v7;
  AMCP::Log::Scope_Registry *core;
  const void *v9;
  uint64_t i;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *v14;
  _opaque_pthread_t *v15;
  mach_port_t v16;
  void *exception;
  std::runtime_error *v18;
  std::string v19;
  __int128 v20;
  void *v21;
  void *__p[4];
  std::string v23;
  std::logic_error v24;
  std::logic_error v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  AMCP::Core::Core *v32;
  std::__shared_weak_count *v33;
  uint8_t buf[8];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v7 = (std::__shared_mutex_base *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  core = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v32, v7, a3);
  if (!v32)
  {
    AMCP::Log::Scope_Registry::get(core);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v14 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = pthread_self();
      v16 = pthread_mach_thread_np(v15);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v16;
      LOWORD(v35) = 2080;
      *(_QWORD *)((char *)&v35 + 2) = "Device_Node_Factory.cpp";
      WORD5(v35) = 1024;
      HIDWORD(v35) = 68;
      LOWORD(v36) = 2080;
      *(_QWORD *)((char *)&v36 + 2) = "not (device_core != nullptr)";
      _os_log_error_impl(&dword_1B57BA000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v31);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v23);
    std::logic_error::logic_error(&v24, &v23);
    v24.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v25, &v24);
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = -1;
    v25.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v26 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v25);
    *((_QWORD *)&v36 + 1) = "std::pair<std::string, Node_Description> AMCP::IO_Core::Device_Node_Factory::clock_uid_and_n"
                            "ode_description_from_device_and_direction(AMCP::Object_ID, AMCP::Direction)";
    *(_QWORD *)&v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Node_Factory.cpp";
    DWORD2(v37) = 68;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v20);
    *(_OWORD *)&__p[1] = v20;
    __p[3] = v21;
    v20 = 0uLL;
    v21 = 0;
    __p[0] = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)__p);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  AMCP::Core::Core::get_simple_required_property<1969841184u>(&v23, v32);
  AMCP::create_device_node_uid_from_device_uid_and_direction((const __CFString **)&v23, a4, (void **)&v25.__vftable);
  if (SHIBYTE(v26) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, (const std::string::value_type *)v25.__vftable, (std::string::size_type)v25.__imp_.__imp_);
  }
  else
  {
    *(std::logic_error *)&v19.__r_.__value_.__l.__data_ = v25;
    v19.__r_.__value_.__r.__words[2] = (std::string::size_type)v26;
  }
  *(_DWORD *)buf = 3;
  v35 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
  *(_QWORD *)&v36 = *((_QWORD *)&v19.__r_.__value_.__l + 2);
  memset(&v19, 0, sizeof(v19));
  v38 = 0u;
  v37 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v9 = (const void *)v23.__r_.__value_.__r.__words[0];
  *((_QWORD *)&v36 + 1) = 0x100000001;
  DWORD2(v38) = 2;
  if (!v23.__r_.__value_.__r.__words[0])
  {
    v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v18, "Could not construct");
    __cxa_throw(v18, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)v23.__r_.__value_.__l.__data_);
  *(_OWORD *)a1 = *(_OWORD *)__p;
  *(void **)(a1 + 16) = __p[2];
  memset(__p, 0, 24);
  AMCP::Node_Description::Node_Description((AMCP::Node_Description *)(a1 + 24), (const AMCP::Node_Description *)buf);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  for (i = 96; i != 48; i -= 24)
  {
    __p[0] = &buf[i];
    std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  if (SBYTE7(v38) < 0)
    operator delete((void *)v37);
  if (SBYTE7(v36) < 0)
    operator delete((void *)v35);
  if (SHIBYTE(v26) < 0)
    operator delete(v25.__vftable);
  CFRelease(v9);
  v11 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1B5948138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__value_func<std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B5948410(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2::~$_2(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = off_1E6975E80;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = off_1E6975E80;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = off_1E6975E80;
  std::__compressed_pair_elem<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_1B5948538(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E6975E80;
  return std::__compressed_pair_elem<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2 const&,0ul>(a2 + 1, a1 + 8);
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::operator()(uint64_t a1@<X0>, int *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v6;
  int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::string::size_type v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  NSObject *v19;
  unint64_t *v20;
  unint64_t v21;
  _opaque_pthread_t *v22;
  mach_port_t v23;
  std::logic_error *exception;
  uint64_t v25;
  int v26;
  uint64_t v27;
  std::logic_error v28;
  __int128 v29;
  uint64_t v30;
  uint64_t (**v31)();
  __int128 v32;
  uint64_t v33;
  std::string v34;
  std::logic_error v35;
  std::string v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  _BYTE buf[24];
  _BYTE v43[24];
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6
    || (v7 = *a2, v8 = *a3, v6 = std::__shared_weak_count::lock(v6), (v9 = v6) == 0)
    || (v10 = *(_QWORD *)(a1 + 8)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v18 = *(std::__shared_weak_count **)&buf[8];
    v19 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v20 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v22 = pthread_self();
      v23 = pthread_mach_thread_np(v22);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v23;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Device_Node_Factory.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 109;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "not (device_state.operator BOOL())";
      _os_log_error_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v34);
    std::logic_error::logic_error(&v35, &v34);
    v25 = MEMORY[0x1E0DE5018];
    v35.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v36, &v35);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
    v36.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
    *(_QWORD *)&v43[8] = "auto AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(const std::shared_ptr<"
                         "Device_Node_State> &, const Timebase_Ref &, const std::string &)::(anonymous class)::operator()"
                         "(Direction, size_t) const";
    *(_QWORD *)&v43[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Node_Factory.cpp";
    v44 = 109;
    std::vector<void *>::vector(&v29);
    v26 = backtrace((void **)v29, (*((_QWORD *)&v29 + 1) - (_QWORD)v29) >> 3);
    std::vector<void *>::resize((char **)&v29, v26);
    v32 = v29;
    v33 = v30;
    v29 = 0uLL;
    v30 = 0;
    v31 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v31);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(exception, (const std::logic_error *)buf);
    exception->__vftable = (std::logic_error_vtbl *)(v25 + 16);
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v27 = *(_QWORD *)v43;
    exception[1].__imp_.__imp_ = *(const char **)v43;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
    v28 = *(std::logic_error *)&v43[8];
    LODWORD(exception[3].__vftable) = v44;
    exception[2] = v28;
    exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
  }
  if (*(char *)(a1 + 47) < 0)
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
  else
    v36 = *(std::string *)(a1 + 24);
  *(_OWORD *)buf = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
  v11 = v36.__r_.__value_.__r.__words[2];
  memset(&v36, 0, sizeof(v36));
  *(_QWORD *)&buf[16] = v11;
  *(_QWORD *)v43 = v8;
  *(_DWORD *)&v43[8] = v7;
  v12 = std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::find<AMCP::Terminal_Identifier>((_QWORD *)(v10 + 48), (unsigned __int8 **)buf);
  if (v12)
  {
    v13 = v12[32];
    *a4 = v12[31];
    a4[1] = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
  }
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_1B594894C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v30;

  p_shared_owners = (unint64_t *)&v27->__shared_owners_;
  do
    v30 = __ldaxr(p_shared_owners);
  while (__stlxr(v30 - 1, p_shared_owners));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core19Device_Node_Factory31add_input_device_node_functionsERKNSt3__110shared_ptrINS0_17Device_Node_StateEEERKNS3_INS_5Graph8TimebaseEEERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::target_type()
{
}

void std::__function::__alloc_func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::destroy[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

_QWORD *std::__compressed_pair_elem<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2 const&,0ul>(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::string *v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::string *)(a1 + 2);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 16);
    a1[4] = *(_QWORD *)(a2 + 32);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return a1;
}

void sub_1B5948B8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6975DF0;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6975DF0;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6975DF0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6975DF0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::operator()@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core19Device_Node_Factory31add_input_device_node_functionsERKNSt3__110shared_ptrINS0_17Device_Node_StateEEERKNS3_INS_5Graph8TimebaseEEERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::target_type()
{
}

void std::__shared_ptr_emplace<AMCP::IO_Core::Device_Connection>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6975DA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::IO_Core::Device_Connection>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6975DA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<AMCP::IO_Core::Device_Connection>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6975D10;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6975D10;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6975D10;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6975D10;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::operator()@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core19Device_Node_Factory31add_input_device_node_functionsERKNSt3__110shared_ptrINS0_17Device_Node_StateEEERKNS3_INS_5Graph8TimebaseEEERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = off_1E6976090;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = off_1E6976090;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = off_1E6976090;
  std::__compressed_pair_elem<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_1B5948FE8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E6976090;
  return std::__compressed_pair_elem<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3 const&,0ul>(a2 + 1, a1 + 8);
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::operator()(uint64_t a1@<X0>, int *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v6;
  int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::string::size_type v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  NSObject *v19;
  unint64_t *v20;
  unint64_t v21;
  _opaque_pthread_t *v22;
  mach_port_t v23;
  std::logic_error *exception;
  uint64_t v25;
  int v26;
  uint64_t v27;
  std::logic_error v28;
  __int128 v29;
  uint64_t v30;
  uint64_t (**v31)();
  __int128 v32;
  uint64_t v33;
  std::string v34;
  std::logic_error v35;
  std::string v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  _BYTE buf[24];
  _BYTE v43[24];
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6
    || (v7 = *a2, v8 = *a3, v6 = std::__shared_weak_count::lock(v6), (v9 = v6) == 0)
    || (v10 = *(_QWORD *)(a1 + 8)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v18 = *(std::__shared_weak_count **)&buf[8];
    v19 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v20 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v22 = pthread_self();
      v23 = pthread_mach_thread_np(v22);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v23;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Device_Node_Factory.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 158;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "not (device_state.operator BOOL())";
      _os_log_error_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v34);
    std::logic_error::logic_error(&v35, &v34);
    v25 = MEMORY[0x1E0DE5018];
    v35.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v36, &v35);
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
    v36.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
    *(_QWORD *)&v43[8] = "auto AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(const std::shared_ptr"
                         "<Device_Node_State> &, const Timebase_Ref &, const std::string &)::(anonymous class)::operator("
                         ")(Direction, size_t) const";
    *(_QWORD *)&v43[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Node_Factory.cpp";
    v44 = 158;
    std::vector<void *>::vector(&v29);
    v26 = backtrace((void **)v29, (*((_QWORD *)&v29 + 1) - (_QWORD)v29) >> 3);
    std::vector<void *>::resize((char **)&v29, v26);
    v32 = v29;
    v33 = v30;
    v29 = 0uLL;
    v30 = 0;
    v31 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v31);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(exception, (const std::logic_error *)buf);
    exception->__vftable = (std::logic_error_vtbl *)(v25 + 16);
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v27 = *(_QWORD *)v43;
    exception[1].__imp_.__imp_ = *(const char **)v43;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
    v28 = *(std::logic_error *)&v43[8];
    LODWORD(exception[3].__vftable) = v44;
    exception[2] = v28;
    exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
  }
  if (*(char *)(a1 + 47) < 0)
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
  else
    v36 = *(std::string *)(a1 + 24);
  *(_OWORD *)buf = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
  v11 = v36.__r_.__value_.__r.__words[2];
  memset(&v36, 0, sizeof(v36));
  *(_QWORD *)&buf[16] = v11;
  *(_QWORD *)v43 = v8;
  *(_DWORD *)&v43[8] = v7;
  v12 = std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::find<AMCP::Terminal_Identifier>((_QWORD *)(v10 + 8), (unsigned __int8 **)buf);
  if (v12)
  {
    v13 = v12[32];
    *a4 = v12[31];
    a4[1] = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
  }
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_1B59493FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v30;

  p_shared_owners = (unint64_t *)&v27->__shared_owners_;
  do
    v30 = __ldaxr(p_shared_owners);
  while (__stlxr(v30 - 1, p_shared_owners));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core19Device_Node_Factory32add_output_device_node_functionsERKNSt3__110shared_ptrINS0_17Device_Node_StateEEERKNS3_INS_5Graph8TimebaseEEERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::target_type()
{
}

_QWORD *std::__compressed_pair_elem<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3 const&,0ul>(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::string *v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::string *)(a1 + 2);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 16);
    a1[4] = *(_QWORD *)(a2 + 32);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return a1;
}

void sub_1B59495FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6976010;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6976010;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6976010;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6976010;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::operator()@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core19Device_Node_Factory32add_output_device_node_functionsERKNSt3__110shared_ptrINS0_17Device_Node_StateEEERKNS3_INS_5Graph8TimebaseEEERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6975F90;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6975F90;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6975F90;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6975F90;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::operator()@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core19Device_Node_Factory32add_output_device_node_functionsERKNSt3__110shared_ptrINS0_17Device_Node_StateEEERKNS3_INS_5Graph8TimebaseEEERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6975F10;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6975F10;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E6975F10;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

_QWORD *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = result[1];
  *a2 = &off_1E6975F10;
  a2[1] = v2;
  v3 = result[3];
  a2[2] = result[2];
  a2[3] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 16);
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
  operator delete(a1);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::operator()(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a3, (AMCP::DAL::DAL_Time *)(a3 + 5)))
    AMCP::IO_Core::Stream_Connection::maybe_capture_audio(*(_QWORD *)(a1 + 8), (uint64_t)a3);
  v5 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v5 + 72) = *(_DWORD *)a3;
  *(_QWORD *)(v5 + 80) = a3[1];
  v6 = a3[3];
  *(_QWORD *)(v5 + 88) = a3[2];
  std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(v5 + 96), v6, a3[4]);
  *(_DWORD *)(v5 + 112) = *((_DWORD *)a3 + 10);
  *(_QWORD *)(v5 + 120) = a3[6];
  v7 = a3[8];
  *(_QWORD *)(v5 + 128) = a3[7];
  return std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(v5 + 136), v7, a3[9]);
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core19Device_Node_Factory32add_output_device_node_functionsERKNSt3__110shared_ptrINS0_17Device_Node_StateEEERKNS3_INS_5Graph8TimebaseEEERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::target_type()
{
}

void AMCP::IO_Core::Device_Node_Factory::create_node_descriptions_from_device(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int a4, uint64_t *a5)
{
  std::__shared_mutex_base *v8;
  AMCP::Log::Scope_Registry *core;
  AMCP::Log::Scope_Registry *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  std::__shared_mutex_base *v14;
  AMCP::Log::Scope_Registry *v15;
  AMCP::Core::Core *v16;
  unint64_t simple_required;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __n128 v23;
  int v24;
  std::string::size_type v25;
  int v26;
  int v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *imp;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  unsigned int *v34;
  unsigned int **v35;
  unint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t i;
  char v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  char v64;
  unsigned int v65;
  __int128 **v66;
  __int128 *v67;
  __int128 *v68;
  __int128 **v69;
  uint64_t v70;
  const char *v71;
  AMCP::Log::Scope_Registry *v72;
  const char *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  std::string::size_type v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  std::string::size_type size;
  uint64_t v87;
  uint64_t v88;
  int64x2_t v89;
  std::logic_error_vtbl *v90;
  const char *v91;
  std::logic_error_vtbl *v92;
  std::logic_error v93;
  std::string::size_type v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  __int128 *v100;
  __int128 *v101;
  std::string::size_type v102;
  std::string::size_type v103;
  char *v104;
  std::logic_error v105;
  __int128 v106;
  uint64_t v107;
  _QWORD *v108;
  __n128 v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  __n128 v123;
  uint64_t v124;
  std::__shared_mutex_base *v125;
  unint64_t v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  double *v132;
  double *v133;
  std::logic_error_vtbl *v134;
  int v135;
  int imp_high;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  std::logic_error_vtbl *v142;
  int v143;
  _BOOL8 v144;
  __n128 v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  char *v155;
  std::logic_error_vtbl *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  std::string *v165;
  uint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t v169;
  std::string::size_type v170;
  std::__shared_weak_count *v171;
  unint64_t *p_shared_weak_owners;
  unint64_t v173;
  std::__shared_weak_count *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  uint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  std::string *v181;
  uint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  std::string::size_type v185;
  uint64_t v186;
  char *v187;
  _QWORD *v188;
  uint64_t v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  std::string::size_type v198;
  unint64_t *v199;
  unint64_t v200;
  _QWORD *v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  uint64_t j;
  std::logic_error *v209;
  std::string::size_type v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  uint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  std::string::size_type v219;
  unint64_t *v220;
  unint64_t v221;
  _QWORD *v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  _QWORD *v229;
  std::string::size_type v230;
  uint64_t *v231;
  std::string::size_type v232;
  std::string::size_type v233;
  uint64_t v234;
  std::string::size_type v235;
  const std::string::value_type **v236;
  std::string *v237;
  unsigned __int8 *v238;
  uint64_t v239;
  uint64_t v240;
  __int128 v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  char *v248;
  std::string *v249;
  __int128 v250;
  char *v251;
  char *v252;
  uint64_t v253;
  std::string::size_type v254;
  __int128 v255;
  std::string::size_type v256;
  int64x2_t v257;
  std::string::size_type v258;
  unsigned __int8 **k;
  _QWORD *v260;
  int8x8_t v261;
  unint64_t v262;
  uint8x8_t v263;
  _QWORD *v264;
  _QWORD *v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  _QWORD *v270;
  unsigned __int8 *v271;
  int8x8_t v272;
  unint64_t v273;
  uint8x8_t v274;
  unsigned __int8 *v275;
  unsigned __int8 *v276;
  unint64_t v277;
  unint64_t v278;
  uint64_t v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  uint64_t v282;
  unint64_t *v283;
  unint64_t v284;
  unint64_t v285;
  uint64_t v286;
  std::string::size_type v287;
  __int128 *v288;
  std::string::size_type v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  __int128 v293;
  __int128 v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  uint64_t v303;
  std::__shared_mutex_base *v304;
  unint64_t v305;
  uint64_t v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t *v311;
  unint64_t v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  uint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  std::string::size_type v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  _QWORD *v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t *v333;
  unint64_t v334;
  _QWORD *m;
  uint64_t v336;
  uint64_t v337;
  unint64_t *v338;
  unint64_t v339;
  std::__shared_weak_count *v340;
  uint64_t v341;
  unint64_t *v342;
  unint64_t v343;
  _QWORD *v344;
  unint64_t *v345;
  unint64_t v346;
  std::string *v347;
  uint64_t v348;
  unint64_t *v349;
  unint64_t v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  uint64_t v354;
  int64x2_t v355;
  unint64_t *v356;
  unint64_t v357;
  std::string::size_type v358;
  unint64_t v359;
  unint64_t v360;
  std::string *v361;
  uint64_t v362;
  unint64_t *v363;
  unint64_t v364;
  unint64_t v365;
  std::string::size_type v366;
  std::string::size_type v367;
  unint64_t *v368;
  unint64_t v369;
  std::string *v370;
  uint64_t v371;
  unint64_t *v372;
  unint64_t v373;
  std::string::size_type v374;
  std::string::size_type v375;
  char *v376;
  _QWORD *v377;
  uint64_t v378;
  std::__shared_weak_count *v379;
  unint64_t *v380;
  unint64_t v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  unint64_t *v385;
  unint64_t v386;
  uint64_t n;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t ii;
  std::__shared_weak_count *v396;
  unint64_t *v397;
  unint64_t v398;
  uint64_t jj;
  void *v400;
  uint64_t kk;
  std::__shared_weak_count *v402;
  NSObject *v403;
  unint64_t *v404;
  unint64_t v405;
  _opaque_pthread_t *v406;
  mach_port_t v407;
  void *v408;
  std::__shared_weak_count *v409;
  NSObject *v410;
  unint64_t *v411;
  unint64_t v412;
  _opaque_pthread_t *v413;
  mach_port_t v414;
  void *v415;
  std::__shared_weak_count *v416;
  NSObject *v417;
  unint64_t *v418;
  unint64_t v419;
  _opaque_pthread_t *v420;
  mach_port_t v421;
  void *v422;
  NSObject *v423;
  _opaque_pthread_t *v424;
  mach_port_t v425;
  void *v426;
  NSObject *v427;
  _opaque_pthread_t *v428;
  mach_port_t v429;
  void *v430;
  NSObject *v431;
  _opaque_pthread_t *v432;
  mach_port_t v433;
  void *v434;
  NSObject *v435;
  _opaque_pthread_t *v436;
  mach_port_t v437;
  void *v438;
  NSObject *v439;
  _opaque_pthread_t *v440;
  mach_port_t v441;
  void *exception;
  unsigned int v445;
  char v446;
  int v447;
  int v448;
  int v449;
  int v450;
  int v451;
  int v452;
  _QWORD *v453;
  uint64_t *v454;
  uint64_t *v455;
  uint64_t *v456;
  __int128 **v457;
  __int128 **v458;
  _QWORD *v459;
  __n128 v460;
  std::logic_error v461;
  const char *v462;
  std::logic_error v463;
  void *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  void *v468;
  unsigned int *v469;
  AMCP::Core::Core *v470;
  std::__shared_weak_count *v471;
  _OWORD v472[3];
  __int128 v473;
  __int128 v474;
  __int128 v475;
  AMCP::Log::Scope_Registry *v476;
  std::__shared_weak_count *v477;
  int64x2_t v478;
  std::string::pointer data;
  std::logic_error v480;
  char v481;
  AMCP::Log::Scope_Registry *v482;
  std::__shared_weak_count *v483;
  __int128 v484;
  std::logic_error v485;
  __int128 v486;
  uint64_t v487;
  AMCP::Log::Scope_Registry *v488;
  std::__shared_weak_count *v489;
  std::logic_error v490;
  __int128 v491;
  uint64_t v492;
  std::string v493;
  _BYTE v494[32];
  uint64_t v495;
  uint64_t v496;
  std::__shared_weak_count *v497;
  void (**v498)();
  std::logic_error v499;
  uint64_t v500;
  std::string __s;
  void *__p;
  char v503;
  uint64_t v504[3];
  uint64_t v505[3];
  _BYTE v506[32];
  uint64_t v507;
  std::string v508;
  uint64_t v509;
  std::string v510[2];
  __int128 v511;
  __int128 v512;
  uint64_t v513;
  uint64_t v514;
  char v515;
  _BYTE v516[32];
  uint64_t v517;
  _BYTE v518[40];
  const char *v519;
  int v520;
  uint64_t v521;

  v521 = *MEMORY[0x1E0C80C00];
  v474 = 0u;
  v475 = 0u;
  v473 = 0u;
  memset(v472, 0, sizeof(v472));
  v8 = (std::__shared_mutex_base *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2);
  v445 = a4;
  core = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v470, v8, a4);
  if (!v470)
  {
    AMCP::Log::Scope_Registry::get(core);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v510, "com.apple.coreaudio", "AMCP");
    v439 = *(NSObject **)v510[0].__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v510);
    if (os_log_type_enabled(v439, OS_LOG_TYPE_ERROR))
    {
      v440 = pthread_self();
      v441 = pthread_mach_thread_np(v440);
      LODWORD(v510[0].__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v510[0].__r_.__value_.__r.__words[0]) = v441;
      LOWORD(v510[0].__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v510[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Device_Node_Factory.cpp";
      WORD1(v510[0].__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v510[0].__r_.__value_.__r.__words[2]) = 184;
      LOWORD(v510[1].__r_.__value_.__l.__data_) = 2080;
      *(std::string::size_type *)((char *)v510[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)"not (device_core != nullptr)";
      _os_log_error_impl(&dword_1B57BA000, v439, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)v510, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v490);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)v516);
    std::logic_error::logic_error((std::logic_error *)v494, (const std::string *)v516);
    *(_QWORD *)v494 = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error((std::logic_error *)v518, (const std::logic_error *)v494);
    *(_QWORD *)&v518[32] = 0;
    *(_QWORD *)&v518[24] = 0;
    v519 = 0;
    v520 = -1;
    *(_QWORD *)v518 = off_1E69A1208;
    *(_QWORD *)&v518[16] = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v510, (uint64_t)v518);
    v510[1].__r_.__value_.__l.__size_ = (std::string::size_type)"std::pair<std::vector<Node_Description>, std::shared_ptr"
                                                                "<Device_Node_State>> AMCP::IO_Core::Device_Node_Factory:"
                                                                ":create_node_descriptions_from_device(const std::shared_"
                                                                "ptr<Device_Timebase_Factory> &, AMCP::Object_ID, const s"
                                                                "td::shared_ptr<Device_Node_State> &)";
    v510[1].__r_.__value_.__r.__words[2] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source"
                                                                   "/AMCP/IO/IO_Core/Device_Node_Factory.cpp";
    LODWORD(v511) = 184;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v506);
    v499 = *(std::logic_error *)v506;
    v498 = (void (**)())off_1E69A20A0;
    v500 = *(_QWORD *)&v506[16];
    memset(v506, 0, 24);
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v510, (uint64_t)&v498);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)v510);
  }
  v455 = a5;
  v456 = a2;
  AMCP::Core::Core::get_simple_required_property<1937009955u>(&v468, v470, 1735159650);
  v11 = (unsigned int *)v468;
  v12 = v469;
  if (v468 != v469)
  {
    do
    {
      v13 = *v11;
      v513 = 0;
      v512 = 0u;
      v511 = 0u;
      memset(v510, 0, sizeof(v510));
      v514 = 1;
      v515 = 0;
      v14 = (std::__shared_mutex_base *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*v456 + 16))(*v456);
      v15 = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v490, v14, v13);
      v16 = (AMCP::Core::Core *)v490.__vftable;
      if (!v490.__vftable)
      {
        AMCP::Log::Scope_Registry::get(v15);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v518, "com.apple.coreaudio", "AMCP");
        v423 = **(NSObject ***)v518;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v518);
        if (os_log_type_enabled(v423, OS_LOG_TYPE_ERROR))
        {
          v424 = pthread_self();
          v425 = pthread_mach_thread_np(v424);
          *(_DWORD *)v518 = 67109890;
          *(_DWORD *)&v518[4] = v425;
          *(_WORD *)&v518[8] = 2080;
          *(_QWORD *)&v518[10] = "Device_Node_Factory.cpp";
          *(_WORD *)&v518[18] = 1024;
          *(_DWORD *)&v518[20] = 51;
          *(_WORD *)&v518[24] = 2080;
          *(_QWORD *)&v518[26] = "not (stream_core != nullptr)";
          _os_log_error_impl(&dword_1B57BA000, v423, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", v518, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v508);
        v426 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)v506);
        std::logic_error::logic_error(&v485, (const std::string *)v506);
        v485.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error((std::logic_error *)&v498, &v485);
        *(_OWORD *)&__s.__r_.__value_.__l.__data_ = 0uLL;
        v500 = 0;
        LODWORD(__s.__r_.__value_.__r.__words[2]) = -1;
        v498 = off_1E69A1208;
        v499.__imp_.__imp_ = (const char *)&unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v518, (uint64_t)&v498);
        *(_QWORD *)&v518[32] = "Terminal_Description AMCP::IO_Core::Device_Node_Factory::terminal_description_from_stream"
                               "(AMCP::Object_ID, const std::shared_ptr<Device_Node_State> &, AMCP::Direction &)";
        v519 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Node_Factory.cpp";
        v520 = 51;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v494);
        *(_OWORD *)&v516[8] = *(_OWORD *)v494;
        *(_QWORD *)v516 = off_1E69A20A0;
        *(_QWORD *)&v516[24] = *(_QWORD *)&v494[16];
        memset(v494, 0, 24);
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v518, (uint64_t)v516);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v426, (uint64_t)v518);
      }
      simple_required = AMCP::Core::Core::get_simple_required_property<1935894638u>((AMCP::Core::Core *)v490.__vftable);
      v18 = AMCP::Core::Core::get_simple_required_property<1935960434u>(v16);
      v19 = *(_QWORD *)(*v455 + 96);
      v20 = *(std::__shared_weak_count **)(*v455 + 104);
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
      }
      (*(void (**)(_BYTE *__return_ptr, uint64_t, unint64_t, unint64_t))(*(_QWORD *)v19 + 128))(v518, v19, v18, simple_required);
      v23.n128_u64[0] = *(_QWORD *)v518;
      v24 = *(_DWORD *)&v518[12];
      v25 = *(_QWORD *)&v518[16];
      v26 = *(_DWORD *)&v518[24];
      v27 = *(_DWORD *)&v518[32];
      if (*(_DWORD *)&v518[8] == 1819304813 && (v518[12] & 0x40) == 0)
      {
        v26 = 4 * *(_DWORD *)&v518[28];
        HIDWORD(v25) = 1;
        LODWORD(v25) = 4 * *(_DWORD *)&v518[28];
        v27 = 32;
        v24 = 9;
      }
      v510[0].__r_.__value_.__r.__words[0] = *(_QWORD *)v518;
      v510[0].__r_.__value_.__l.__size_ = __PAIR64__(v24, *(unsigned int *)&v518[8]);
      v510[0].__r_.__value_.__r.__words[2] = v25;
      v510[1].__r_.__value_.__r.__words[0] = __PAIR64__(*(unsigned int *)&v518[28], v26);
      v510[1].__r_.__value_.__l.__size_ = __PAIR64__(*(unsigned int *)&v518[36], v27);
      if (v20)
      {
        v28 = (unint64_t *)&v20->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v20->__on_zero_shared)(v20, v23);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      LODWORD(v514) = 1;
      imp = (std::__shared_weak_count *)v490.__imp_.__imp_;
      if (v490.__imp_.__imp_)
      {
        v31 = (unint64_t *)(v490.__imp_.__imp_ + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *, __n128))imp->__on_zero_shared)(imp, v23);
          std::__shared_weak_count::__release_weak(imp);
        }
      }
      v33 = (char *)v472 + 24 * v18;
      v35 = (unsigned int **)(v33 + 8);
      v34 = (unsigned int *)*((_QWORD *)v33 + 1);
      v36 = *((_QWORD *)v33 + 2);
      if ((unint64_t)v34 >= v36)
      {
        v38 = *(unsigned int **)v33;
        v39 = ((uint64_t)v34 - *(_QWORD *)v33) >> 2;
        v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 62)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v41 = v36 - (_QWORD)v38;
        if (v41 >> 1 > v40)
          v40 = v41 >> 1;
        v42 = (unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL;
        v43 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v42)
          v43 = v40;
        if (v43)
        {
          v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v43);
          v34 = *v35;
          v38 = *(unsigned int **)v33;
        }
        else
        {
          v44 = 0;
        }
        v45 = (unsigned int *)(v43 + 4 * v39);
        *v45 = v13;
        v37 = v45 + 1;
        while (v34 != v38)
        {
          v46 = *--v34;
          *--v45 = v46;
        }
        *(_QWORD *)v33 = v45;
        *v35 = v37;
        *((_QWORD *)v33 + 2) = v43 + 4 * v44;
        if (v38)
          operator delete(v38);
      }
      else
      {
        *v34 = v13;
        v37 = v34 + 1;
      }
      *v35 = v37;
      v47 = (char *)&v473 + 24 * ((_DWORD)v18 == 0);
      v50 = *((_QWORD *)v47 + 1);
      v49 = (uint64_t *)(v47 + 8);
      v48 = v50;
      v51 = v49[1];
      if (v50 >= v51)
      {
        v53 = (uint64_t *)&v473 + 3 * ((_DWORD)v18 == 0);
        v54 = 0x4EC4EC4EC4EC4EC5 * ((v48 - *v53) >> 3);
        v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) > 0x276276276276276)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v56 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v51 - *v53) >> 3);
        if (2 * v56 > v55)
          v55 = 2 * v56;
        if (v56 >= 0x13B13B13B13B13BLL)
          v57 = 0x276276276276276;
        else
          v57 = v55;
        *(_QWORD *)&v518[32] = v49 + 1;
        if (v57)
          v57 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Terminal_Description>>(v57);
        else
          v58 = 0;
        *(_QWORD *)v518 = v57;
        *(_QWORD *)&v518[8] = v57 + 104 * v54;
        *(_QWORD *)&v518[16] = *(_QWORD *)&v518[8];
        *(_QWORD *)&v518[24] = v57 + 104 * v58;
        std::construct_at[abi:ne180100]<AMCP::Terminal_Description,AMCP::Terminal_Description const&,AMCP::Terminal_Description*>(*(uint64_t *)&v518[8], (__int128 *)v510);
        *(_QWORD *)&v518[16] += 104;
        std::vector<AMCP::Terminal_Description>::__swap_out_circular_buffer(v53, v518);
        v52 = *v49;
        std::__split_buffer<AMCP::Terminal_Description>::~__split_buffer((uint64_t)v518);
      }
      else
      {
        std::construct_at[abi:ne180100]<AMCP::Terminal_Description,AMCP::Terminal_Description const&,AMCP::Terminal_Description*>(v48, (__int128 *)v510);
        v52 = v48 + 104;
      }
      *v49 = v52;
      for (i = 64; i != 16; i -= 24)
      {
        *(_QWORD *)v518 = (char *)v510 + i;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v518);
      }
      ++v11;
    }
    while (v11 != v12);
  }
  v60 = 0;
  v61 = 0;
  v465 = 0;
  v466 = 0;
  v467 = 0;
  v509 = 1;
  v63 = v455;
  v62 = v456;
  do
  {
    v64 = v60;
    v65 = *((_DWORD *)&v509 + v61);
    v66 = (__int128 **)&v473 + 3 * v65;
    v67 = *v66;
    v458 = v66;
    v69 = v66 + 1;
    v68 = v66[1];
    v457 = v69;
    if (v67 == v68)
      goto LABEL_555;
    v463 = (std::logic_error)0;
    v464 = 0;
    v446 = v64;
    if (v65 != 1)
    {
      v74 = (uint64_t *)v472 + 3 * (v65 == 0);
      v453 = v74 + 1;
      v454 = v74;
      if (0x4EC4EC4EC4EC4EC5 * (((char *)v68 - (char *)v67) >> 3) != (v74[1] - *v74) >> 2)
      {
        AMCP::Log::Scope_Registry::get(v10);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v510, "com.apple.coreaudio", "AMCP");
        v431 = *(NSObject **)v510[0].__r_.__value_.__l.__data_;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v510);
        if (os_log_type_enabled(v431, OS_LOG_TYPE_ERROR))
        {
          v432 = pthread_self();
          v433 = pthread_mach_thread_np(v432);
          LODWORD(v510[0].__r_.__value_.__l.__data_) = 67109890;
          HIDWORD(v510[0].__r_.__value_.__r.__words[0]) = v433;
          LOWORD(v510[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v510[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Device_Node_Factory.cpp";
          WORD1(v510[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v510[0].__r_.__value_.__r.__words[2]) = 275;
          LOWORD(v510[1].__r_.__value_.__l.__data_) = 2080;
          *(std::string::size_type *)((char *)v510[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)"not (input_terminals.size() == input_stream_ids.size())";
          _os_log_error_impl(&dword_1B57BA000, v431, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s number of terminals does not match number of stream ids", (uint8_t *)v510, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v490);
        v434 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"number of terminals does not match number of stream ids", (uint64_t)v516, &v506[8]);
        std::logic_error::logic_error((std::logic_error *)v494, (const std::string *)v516);
        *(_QWORD *)v494 = MEMORY[0x1E0DE5018] + 16;
        std::logic_error::logic_error((std::logic_error *)v518, (const std::logic_error *)v494);
        *(_QWORD *)&v518[32] = 0;
        *(_QWORD *)&v518[24] = 0;
        v519 = 0;
        v520 = -1;
        *(_QWORD *)v518 = off_1E69A1208;
        *(_QWORD *)&v518[16] = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v510, (uint64_t)v518);
        v510[1].__r_.__value_.__l.__size_ = (std::string::size_type)"std::vector<Node_Description> AMCP::IO_Core::Device_"
                                                                    "Node_Factory::create_input_nodes_for_streams(const s"
                                                                    "td::vector<Terminal_Description> &, const std::vecto"
                                                                    "r<AMCP::Object_ID> &, const std::shared_ptr<Device_N"
                                                                    "ode_State> &, AMCP::Object_ID, const std::shared_ptr"
                                                                    "<Device_Timebase_Factory> &)";
        v510[1].__r_.__value_.__r.__words[2] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/So"
                                                                       "urce/AMCP/IO/IO_Core/Device_Node_Factory.cpp";
        LODWORD(v511) = 275;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v506);
        v499 = *(std::logic_error *)v506;
        v498 = (void (**)())off_1E69A20A0;
        v500 = *(_QWORD *)&v506[16];
        memset(v506, 0, 24);
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v510, (uint64_t)&v498);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v434, (uint64_t)v510);
      }
      v478 = 0uLL;
      data = 0;
      AMCP::IO_Core::Device_Node_Factory::clock_uid_and_node_description_from_device_and_direction((uint64_t)&v498, *v62, v445, 1);
      v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v62 + 24))(*v62);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v75 + 24))(v75, &__s);
      if (v504 != (uint64_t *)v458)
        std::vector<AMCP::Terminal_Description>::__assign_with_size[abi:ne180100]<AMCP::Terminal_Description*,AMCP::Terminal_Description*>(v504, *v458, *v457, 0x4EC4EC4EC4EC4EC5 * (((char *)*v457 - (char *)*v458) >> 3));
      v76 = v478.i64[1];
      if (v478.i64[1] >= (unint64_t)data)
      {
        v78 = 0xEEEEEEEEEEEEEEEFLL * ((v478.i64[1] - v478.i64[0]) >> 3);
        v79 = v78 + 1;
        if (v78 + 1 > 0x222222222222222)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        if (0xDDDDDDDDDDDDDDDELL * ((uint64_t)&data[-v478.i64[0]] >> 3) > v79)
          v79 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)&data[-v478.i64[0]] >> 3);
        if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&data[-v478.i64[0]] >> 3) >= 0x111111111111111)
          v80 = 0x222222222222222;
        else
          v80 = v79;
        v510[1].__r_.__value_.__l.__size_ = (std::string::size_type)&data;
        if (v80)
          v80 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Node_Description>>(v80);
        else
          v81 = 0;
        v510[0].__r_.__value_.__r.__words[0] = v80;
        v510[0].__r_.__value_.__l.__size_ = v80 + 120 * v78;
        v510[0].__r_.__value_.__r.__words[2] = v510[0].__r_.__value_.__l.__size_;
        v510[1].__r_.__value_.__r.__words[0] = v80 + 120 * v81;
        AMCP::Node_Description::Node_Description((AMCP::Node_Description *)v510[0].__r_.__value_.__l.__size_, (const AMCP::Node_Description *)&v500);
        size = v510[0].__r_.__value_.__l.__size_;
        v77 = v510[0].__r_.__value_.__r.__words[2] + 120;
        v510[0].__r_.__value_.__r.__words[2] += 120;
        v87 = v478.i64[1];
        v88 = v478.i64[0];
        if (v478.i64[1] == v478.i64[0])
        {
          v89 = vdupq_n_s64(v478.u64[1]);
        }
        else
        {
          do
          {
            v87 -= 120;
            std::construct_at[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description,AMCP::Node_Description*>(size - 120, v87);
          }
          while (v87 != v88);
          v89 = v478;
          v77 = v510[0].__r_.__value_.__r.__words[2];
        }
        v478.i64[0] = size;
        v478.i64[1] = v77;
        *(int64x2_t *)&v510[0].__r_.__value_.__r.__words[1] = v89;
        v94 = (std::string::size_type)data;
        data = v510[1].__r_.__value_.__l.__data_;
        v510[1].__r_.__value_.__r.__words[0] = v94;
        v510[0].__r_.__value_.__r.__words[0] = v89.i64[0];
        std::__split_buffer<AMCP::Node_Description>::~__split_buffer((uint64_t)v510);
      }
      else
      {
        AMCP::Node_Description::Node_Description((AMCP::Node_Description *)v478.i64[1], (const AMCP::Node_Description *)&v500);
        v77 = v76 + 120;
      }
      v478.i64[1] = v77;
      v96 = *(_QWORD *)(*v63 + 112);
      v95 = *(std::__shared_weak_count **)(*v63 + 120);
      if (!v95)
        goto LABEL_92;
      v97 = (unint64_t *)&v95->__shared_owners_;
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
      do
        v99 = __ldaxr(v97);
      while (__stlxr(v99 - 1, v97));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
        if (v96)
          goto LABEL_93;
      }
      else
      {
LABEL_92:
        if (v96)
          goto LABEL_93;
      }
      v196 = *v63;
      v197 = *a3;
      v198 = *(_QWORD *)(*v63 + 104);
      v510[0].__r_.__value_.__r.__words[0] = *(_QWORD *)(*v63 + 96);
      v510[0].__r_.__value_.__l.__size_ = v198;
      if (v198)
      {
        v199 = (unint64_t *)(v198 + 8);
        do
          v200 = __ldxr(v199);
        while (__stxr(v200 + 1, v199));
      }
      AMCP::IO_Core::Device_Timebase_Factory::demand_timebase_for_device(&v496, v197, v510, (uint64_t)&v498);
      v201 = (_QWORD *)(v196 + 112);
      v202 = v497;
      std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](v201, v496, (uint64_t)v497);
      if (v202)
      {
        v203 = (unint64_t *)&v202->__shared_owners_;
        do
          v204 = __ldaxr(v203);
        while (__stlxr(v204 - 1, v203));
        if (!v204)
        {
          ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
          std::__shared_weak_count::__release_weak(v202);
        }
      }
      v205 = (std::__shared_weak_count *)v510[0].__r_.__value_.__l.__size_;
      if (v510[0].__r_.__value_.__l.__size_)
      {
        v206 = (unint64_t *)(v510[0].__r_.__value_.__l.__size_ + 8);
        do
          v207 = __ldaxr(v206);
        while (__stlxr(v207 - 1, v206));
        if (!v207)
        {
          ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
          std::__shared_weak_count::__release_weak(v205);
        }
      }
LABEL_93:
      v100 = *v457;
      v101 = *v458;
      if (*v457 != *v458)
      {
        v102 = 0;
        do
        {
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(&v493, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            v101 = *v458;
            v100 = *v457;
          }
          else
          {
            v493 = __s;
          }
          *(_OWORD *)v494 = *(_OWORD *)&v493.__r_.__value_.__l.__data_;
          v103 = v493.__r_.__value_.__r.__words[2];
          memset(&v493, 0, sizeof(v493));
          *(_QWORD *)&v494[16] = v103;
          *(_QWORD *)&v494[24] = v102;
          LODWORD(v495) = 0;
          if (0x4EC4EC4EC4EC4EC5 * (((char *)v100 - (char *)v101) >> 3) <= v102)
            std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
          v104 = (char *)v101 + 104 * v102;
          v105 = *(std::logic_error *)v104;
          v106 = *((_OWORD *)v104 + 1);
          v492 = *((_QWORD *)v104 + 4);
          v490 = v105;
          v491 = v106;
          v107 = *v63;
          v108 = std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::find<AMCP::Terminal_Identifier>((_QWORD *)(*v63 + 48), (unsigned __int8 **)v494);
          if (v108)
          {
            v109 = *(__n128 *)(v108 + 31);
            v460 = v109;
            if (v109.n128_u64[1])
            {
              v110 = (unint64_t *)(v109.n128_u64[1] + 8);
              do
                v111 = __ldxr(v110);
              while (__stxr(v111 + 1, v110));
            }
          }
          else
          {
            v112 = *(_QWORD *)(v107 + 120);
            *(_QWORD *)v518 = *(_QWORD *)(v107 + 112);
            *(_QWORD *)&v518[8] = v112;
            if (v112)
            {
              v113 = (unint64_t *)(v112 + 8);
              do
                v114 = __ldxr(v113);
              while (__stxr(v114 + 1, v113));
            }
            LODWORD(v510[0].__r_.__value_.__l.__data_) = 2;
            *(_OWORD *)&v510[0].__r_.__value_.__r.__words[1] = 0x40C0000000000000uLL;
            *(_OWORD *)&v510[1].__r_.__value_.__l.__data_ = *(_OWORD *)v518;
            *(_QWORD *)v518 = 0;
            *(_QWORD *)&v518[8] = 0;
            v115 = operator new();
            AMCP::DAL::Ring_Buffer_Base::Ring_Buffer_Base((AMCP::DAL::Ring_Buffer_Base *)v115, (const CA::StreamDescription *)&v490, (const AMCP::DAL::DAL_Time_Delta *)v510);
            *(_QWORD *)v115 = &off_1E69984C8;
            *(_QWORD *)(v115 + 104) = 0;
            *(_DWORD *)(v115 + 112) = 0;
            *(_BYTE *)(v115 + 116) = 1;
            v116 = (_QWORD *)operator new();
            *v116 = &off_1E69985A8;
            v116[1] = 0;
            v116[2] = 0;
            v116[3] = v115;
            v117 = (std::__shared_weak_count *)v510[1].__r_.__value_.__l.__size_;
            if (v510[1].__r_.__value_.__l.__size_)
            {
              v118 = (unint64_t *)(v510[1].__r_.__value_.__l.__size_ + 8);
              do
                v119 = __ldaxr(v118);
              while (__stlxr(v119 - 1, v118));
              if (!v119)
              {
                ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                std::__shared_weak_count::__release_weak(v117);
              }
            }
            v120 = *(std::__shared_weak_count **)&v518[8];
            if (*(_QWORD *)&v518[8])
            {
              v121 = (unint64_t *)(*(_QWORD *)&v518[8] + 8);
              do
                v122 = __ldaxr(v121);
              while (__stlxr(v122 - 1, v121));
              if (!v122)
              {
                ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                std::__shared_weak_count::__release_weak(v120);
              }
            }
            v123.n128_u64[0] = v115;
            v123.n128_u64[1] = (unint64_t)v116;
            v460 = v123;
          }
          v124 = *v454;
          if (v102 >= (*v453 - *v454) >> 2)
            std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
          v125 = (std::__shared_mutex_base *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*v62 + 16))(*v62);
          AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v488, v125, *(_DWORD *)(v124 + 4 * v102));
          if (!v488)
          {
            AMCP::Log::Scope_Registry::get(0);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v510, "com.apple.coreaudio", "AMCP");
            v402 = (std::__shared_weak_count *)v510[0].__r_.__value_.__l.__size_;
            v403 = *(NSObject **)v510[0].__r_.__value_.__l.__data_;
            if (v510[0].__r_.__value_.__l.__size_)
            {
              v404 = (unint64_t *)(v510[0].__r_.__value_.__l.__size_ + 8);
              do
                v405 = __ldaxr(v404);
              while (__stlxr(v405 - 1, v404));
              if (!v405)
              {
                ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
                std::__shared_weak_count::__release_weak(v402);
              }
            }
            if (os_log_type_enabled(v403, OS_LOG_TYPE_ERROR))
            {
              v406 = pthread_self();
              v407 = pthread_mach_thread_np(v406);
              LODWORD(v510[0].__r_.__value_.__l.__data_) = 67109890;
              HIDWORD(v510[0].__r_.__value_.__r.__words[0]) = v407;
              LOWORD(v510[0].__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&v510[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Device_Node_Factory.cpp";
              WORD1(v510[0].__r_.__value_.__r.__words[2]) = 1024;
              HIDWORD(v510[0].__r_.__value_.__r.__words[2]) = 302;
              LOWORD(v510[1].__r_.__value_.__l.__data_) = 2080;
              *(std::string::size_type *)((char *)v510[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)"not (stream_core != nullptr)";
              _os_log_error_impl(&dword_1B57BA000, v403, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)v510, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v461);
            v408 = __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"", (uint64_t)v506, &v506[8]);
            std::logic_error::logic_error((std::logic_error *)&v508, (const std::string *)v506);
            v508.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
            std::logic_error::logic_error((std::logic_error *)v518, (const std::logic_error *)&v508);
            *(_QWORD *)&v518[32] = 0;
            *(_QWORD *)&v518[24] = 0;
            v519 = 0;
            v520 = -1;
            *(_QWORD *)v518 = off_1E69A1208;
            *(_QWORD *)&v518[16] = &unk_1E69A1230;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v510, (uint64_t)v518);
            v510[1].__r_.__value_.__l.__size_ = (std::string::size_type)"std::vector<Node_Description> AMCP::IO_Core::Dev"
                                                                        "ice_Node_Factory::create_input_nodes_for_streams"
                                                                        "(const std::vector<Terminal_Description> &, cons"
                                                                        "t std::vector<AMCP::Object_ID> &, const std::sha"
                                                                        "red_ptr<Device_Node_State> &, AMCP::Object_ID, c"
                                                                        "onst std::shared_ptr<Device_Timebase_Factory> &)";
            v510[1].__r_.__value_.__r.__words[2] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/AudioHA"
                                                                           "L/Source/AMCP/IO/IO_Core/Device_Node_Factory.cpp";
            LODWORD(v511) = 302;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v485);
            *(std::logic_error *)&v516[8] = v485;
            *(_QWORD *)v516 = off_1E69A20A0;
            *(_QWORD *)&v516[24] = v486;
            v485.__vftable = 0;
            v485.__imp_.__imp_ = 0;
            *(_QWORD *)&v486 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v510, (uint64_t)v516);
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v408, (uint64_t)v510);
          }
          v126 = AMCP::Core::Core::get_simple_required_property<1935894638u>(v488);
          v127 = *(_QWORD *)(*v63 + 96);
          v128 = *(std::__shared_weak_count **)(*v63 + 104);
          if (v128)
          {
            v129 = (unint64_t *)&v128->__shared_owners_;
            do
              v130 = __ldxr(v129);
            while (__stxr(v130 + 1, v129));
            (*(void (**)(std::logic_error *__return_ptr, uint64_t, uint64_t, unint64_t))(*(_QWORD *)v127 + 128))(&v485, v127, 1, v126);
            do
              v131 = __ldaxr(v129);
            while (__stlxr(v131 - 1, v129));
            if (!v131)
            {
              ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
              std::__shared_weak_count::__release_weak(v128);
            }
          }
          else
          {
            (*(void (**)(std::logic_error *__return_ptr, uint64_t, uint64_t, unint64_t))(*(_QWORD *)v127 + 128))(&v485, v127, 1, v126);
          }
          v459 = (_QWORD *)(*v63 + 48);
          v132 = (double *)std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::find<AMCP::Terminal_Identifier>(v459, (unsigned __int8 **)v494);
          if (!v132)
            goto LABEL_148;
          v133 = v132;
          v134 = v490.__vftable;
          v135 = (int)v490.__imp_.__imp_;
          imp_high = HIDWORD(v490.__imp_.__imp_);
          v137 = v491;
          v138 = DWORD1(v491);
          v139 = DWORD2(v491);
          v140 = HIDWORD(v491);
          v141 = v492;
          v142 = v485.__vftable;
          v143 = (int)v485.__imp_.__imp_;
          v451 = v486;
          v452 = HIDWORD(v485.__imp_.__imp_);
          v449 = DWORD2(v486);
          v450 = DWORD1(v486);
          v447 = v487;
          v448 = HIDWORD(v486);
          v510[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v494;
          v510[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v494[24];
          v510[0].__r_.__value_.__r.__words[2] = (std::string::size_type)&v495;
          *(_QWORD *)v518 = v132 + 7;
          *(_QWORD *)&v518[8] = v132 + 10;
          *(_QWORD *)&v518[16] = v132 + 11;
          v144 = std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)v510, (unsigned __int8 ***)v518);
          if (!v144)
          {
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v144);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v510, "com.apple.coreaudio", "AMCP");
            v416 = (std::__shared_weak_count *)v510[0].__r_.__value_.__l.__size_;
            v417 = *(NSObject **)v510[0].__r_.__value_.__l.__data_;
            if (v510[0].__r_.__value_.__l.__size_)
            {
              v418 = (unint64_t *)(v510[0].__r_.__value_.__l.__size_ + 8);
              do
                v419 = __ldaxr(v418);
              while (__stlxr(v419 - 1, v418));
              if (!v419)
              {
                ((void (*)(std::__shared_weak_count *))v416->__on_zero_shared)(v416);
                std::__shared_weak_count::__release_weak(v416);
              }
            }
            if (os_log_type_enabled(v417, OS_LOG_TYPE_ERROR))
            {
              v420 = pthread_self();
              v421 = pthread_mach_thread_np(v420);
              LODWORD(v510[0].__r_.__value_.__l.__data_) = 67109890;
              HIDWORD(v510[0].__r_.__value_.__r.__words[0]) = v421;
              LOWORD(v510[0].__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&v510[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Stream_Connection.cpp";
              WORD1(v510[0].__r_.__value_.__r.__words[2]) = 1024;
              HIDWORD(v510[0].__r_.__value_.__r.__words[2]) = 276;
              LOWORD(v510[1].__r_.__value_.__l.__data_) = 2080;
              *(std::string::size_type *)((char *)v510[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)"not (terminal == m_terminal)";
              _os_log_error_impl(&dword_1B57BA000, v417, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)v510, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v484);
            v422 = __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"", (uint64_t)v506, &v506[8]);
            std::logic_error::logic_error(&v461, (const std::string *)v506);
            v461.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
            std::logic_error::logic_error((std::logic_error *)v518, &v461);
            *(_QWORD *)&v518[32] = 0;
            *(_QWORD *)&v518[24] = 0;
            v519 = 0;
            v520 = -1;
            *(_QWORD *)v518 = off_1E69A1208;
            *(_QWORD *)&v518[16] = &unk_1E69A1230;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v510, (uint64_t)v518);
            v510[1].__r_.__value_.__l.__size_ = (std::string::size_type)"BOOL AMCP::IO_Core::Stream_Connection::has_setti"
                                                                        "ngs(const Terminal_Identifier &, size_t, CA::Str"
                                                                        "eamDescription, CA::StreamDescription) const";
            v510[1].__r_.__value_.__r.__words[2] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/AudioHA"
                                                                           "L/Source/AMCP/IO/IO_Core/Stream_Connection.cpp";
            LODWORD(v511) = 276;
            applesauce::backtrace::snapshot_N<64>::snapshot_N(&v508.__r_.__value_.__l.__data_);
            *(std::string *)&v516[8] = v508;
            *(_QWORD *)v516 = off_1E69A20A0;
            memset(&v508, 0, sizeof(v508));
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v510, (uint64_t)v516);
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v422, (uint64_t)v510);
          }
          if (*((_QWORD *)v133 + 12) == v102
            && *(double *)&v134 == v133[26]
            && v135 == *((_DWORD *)v133 + 54)
            && imp_high == *((_DWORD *)v133 + 55)
            && v137 == *((_DWORD *)v133 + 56)
            && v138 == *((_DWORD *)v133 + 57)
            && v139 == *((_DWORD *)v133 + 58)
            && v140 == *((_DWORD *)v133 + 59)
            && v141 == *((_DWORD *)v133 + 60)
            && *(double *)&v142 == v133[43]
            && v143 == *((_DWORD *)v133 + 88)
            && v452 == *((_DWORD *)v133 + 89)
            && v451 == *((_DWORD *)v133 + 90)
            && v450 == *((_DWORD *)v133 + 91)
            && v449 == *((_DWORD *)v133 + 92)
            && v448 == *((_DWORD *)v133 + 93)
            && v447 == *((_DWORD *)v133 + 94))
          {
            v145 = v460;
          }
          else
          {
LABEL_148:
            *(std::logic_error *)v516 = v490;
            *(_OWORD *)&v516[16] = v491;
            v517 = v492;
            *(std::logic_error *)v506 = v485;
            *(_OWORD *)&v506[16] = v486;
            v507 = v487;
            *(__n128 *)&v508.__r_.__value_.__l.__data_ = v460;
            AMCP::IO_Core::Stream_Connection::Stream_Connection((std::string *)v518, (__int128 *)v494, v102, 1, (__int128 *)v516, (uint64_t)v506, (uint64_t)&v508);
            v146 = (std::__shared_weak_count *)v508.__r_.__value_.__l.__size_;
            if (v508.__r_.__value_.__l.__size_)
            {
              v147 = (unint64_t *)(v508.__r_.__value_.__l.__size_ + 8);
              do
                v148 = __ldaxr(v147);
              while (__stlxr(v148 - 1, v147));
              if (!v148)
              {
                ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                std::__shared_weak_count::__release_weak(v146);
              }
            }
            if ((v494[23] & 0x80000000) != 0)
              std::string::__init_copy_ctor_external(v510, *(const std::string::value_type **)v494, *(std::string::size_type *)&v494[8]);
            else
              v510[0] = *(std::string *)v494;
            v510[1].__r_.__value_.__r.__words[0] = *(_QWORD *)&v494[24];
            LODWORD(v510[1].__r_.__value_.__r.__words[1]) = v495;
            AMCP::IO_Core::Stream_Connection::Stream_Connection((uint64_t)&v510[1].__r_.__value_.__r.__words[2], (__int128 *)v518);
            std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>>>::__emplace_unique_key_args<AMCP::Terminal_Identifier,std::pair<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>>((uint64_t)v459, (unsigned __int8 **)v510, (uint64_t)v510);
            AMCP::IO_Core::Stream_Connection::~Stream_Connection((OpaqueAudioConverter **)&v510[1].__r_.__value_.__r.__words[2]);
            if (SHIBYTE(v510[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v510[0].__r_.__value_.__l.__data_);
            AMCP::IO_Core::Stream_Connection::~Stream_Connection((OpaqueAudioConverter **)v518);
            v145 = 0uLL;
          }
          v149 = (std::__shared_weak_count *)v145.n128_u64[1];
          v62 = v456;
          if (v145.n128_u64[1])
          {
            v150 = (unint64_t *)(v145.n128_u64[1] + 8);
            do
              v151 = __ldaxr(v150);
            while (__stlxr(v151 - 1, v150));
            if (!v151)
            {
              (*(void (**)(unint64_t, __n128))(*(_QWORD *)v145.n128_u64[1] + 16))(v145.n128_u64[1], v145);
              std::__shared_weak_count::__release_weak(v149);
            }
          }
          v152 = v489;
          v63 = v455;
          if (v489)
          {
            v153 = (unint64_t *)&v489->__shared_owners_;
            do
              v154 = __ldaxr(v153);
            while (__stlxr(v154 - 1, v153));
            if (!v154)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v152->__on_zero_shared)(v152, v145);
              std::__shared_weak_count::__release_weak(v152);
            }
          }
          if ((v494[23] & 0x80000000) != 0)
            operator delete(*(void **)v494);
          ++v102;
          v100 = *v457;
          v101 = *v458;
        }
        while (v102 < 0x4EC4EC4EC4EC4EC5 * (((char *)*v457 - (char *)*v458) >> 3));
      }
      v156 = *(std::logic_error_vtbl **)(*v63 + 112);
      v155 = *(char **)(*v63 + 120);
      v490.__vftable = v156;
      v490.__imp_.__imp_ = v155;
      if (v155)
      {
        v157 = (unint64_t *)(v155 + 8);
        do
          v158 = __ldxr(v157);
        while (__stxr(v158 + 1, v157));
      }
      v159 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v62 + 24))(*v62);
      (*(void (**)(_BYTE *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v159 + 16))(v506, v159, &__s);
      if (v155)
      {
        v160 = (unint64_t *)(v155 + 8);
        do
          v161 = __ldxr(v160);
        while (__stxr(v161 + 1, v160));
        v162 = *(_QWORD *)v506;
        do
          v163 = __ldxr(v160);
        while (__stxr(v163 + 1, v160));
        v510[0].__r_.__value_.__l.__size_ = (std::string::size_type)v156;
        v510[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v155;
        do
          v164 = __ldxr(v160);
        while (__stxr(v164 + 1, v160));
      }
      else
      {
        v162 = *(_QWORD *)v506;
        *(_OWORD *)&v510[0].__r_.__value_.__r.__words[1] = (unint64_t)v156;
      }
      v510[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E6975D10;
      v510[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v510;
      std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::swap[abi:ne180100](v510, (_QWORD *)(v162 + 64));
      v165 = (std::string *)v510[1].__r_.__value_.__l.__data_;
      if ((std::string *)v510[1].__r_.__value_.__l.__data_ == v510)
      {
        v165 = v510;
        v166 = 4;
      }
      else
      {
        if (!v510[1].__r_.__value_.__r.__words[0])
          goto LABEL_189;
        v166 = 5;
      }
      (*(void (**)(std::string *))(v165->__r_.__value_.__r.__words[0] + 8 * v166))(v165);
LABEL_189:
      if (v155)
      {
        v167 = (unint64_t *)(v155 + 8);
        do
          v168 = __ldaxr(v167);
        while (__stlxr(v168 - 1, v167));
        if (!v168)
        {
          (*(void (**)(char *))(*(_QWORD *)v155 + 16))(v155);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v155);
        }
        do
          v169 = __ldaxr(v167);
        while (__stlxr(v169 - 1, v167));
        if (!v169)
        {
          (*(void (**)(char *))(*(_QWORD *)v155 + 16))(v155);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v155);
        }
      }
      v170 = *v63;
      v171 = (std::__shared_weak_count *)v63[1];
      if (v171)
      {
        p_shared_weak_owners = (unint64_t *)&v171->__shared_weak_owners_;
        do
          v173 = __ldxr(p_shared_weak_owners);
        while (__stxr(v173 + 1, p_shared_weak_owners));
      }
      v174 = (std::__shared_weak_count *)operator new(0x28uLL);
      v175 = v174;
      v174->__shared_owners_ = 0;
      v176 = (unint64_t *)&v174->__shared_owners_;
      v174->__shared_weak_owners_ = 0;
      v174->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6975DA0;
      v177 = v63[1];
      v174[1].__vftable = (std::__shared_weak_count_vtbl *)*v63;
      v174[1].__shared_owners_ = v177;
      if (v177)
      {
        v178 = (unint64_t *)(v177 + 16);
        do
          v179 = __ldxr(v178);
        while (__stxr(v179 + 1, v178));
      }
      *(_QWORD *)v494 = v174 + 1;
      *(_QWORD *)&v494[8] = v174;
      do
        v180 = __ldxr(v176);
      while (__stxr(v180 + 1, v176));
      v510[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E6975DF0;
      v510[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v174[1];
      v510[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v174;
      v510[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v510;
      std::__function::__value_func<std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::swap[abi:ne180100](v510, (_QWORD *)(*(_QWORD *)v506 + 96));
      v181 = (std::string *)v510[1].__r_.__value_.__l.__data_;
      if ((std::string *)v510[1].__r_.__value_.__l.__data_ == v510)
      {
        v181 = v510;
        v182 = 4;
      }
      else
      {
        if (!v510[1].__r_.__value_.__r.__words[0])
          goto LABEL_210;
        v182 = 5;
      }
      (*(void (**)(std::string *))(v181->__r_.__value_.__r.__words[0] + 8 * v182))(v181);
LABEL_210:
      *(_QWORD *)v518 = v170;
      *(_QWORD *)&v518[8] = v171;
      if (v171)
      {
        v183 = (unint64_t *)&v171->__shared_weak_owners_;
        do
          v184 = __ldxr(v183);
        while (__stxr(v184 + 1, v183));
      }
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v518[16], __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        v170 = *(_QWORD *)v518;
        v185 = *(_QWORD *)&v518[8];
      }
      else
      {
        *(std::string *)&v518[16] = __s;
        v185 = (std::string::size_type)v171;
      }
      v186 = *(_QWORD *)v506;
      v510[0].__r_.__value_.__r.__words[0] = v170;
      v510[0].__r_.__value_.__l.__size_ = v185;
      memset(v518, 0, sizeof(v518));
      *(_OWORD *)&v510[0].__r_.__value_.__r.__words[2] = *(_OWORD *)&v518[16];
      v510[1].__r_.__value_.__l.__size_ = *(_QWORD *)&v518[32];
      v187 = (char *)operator new(0x30uLL);
      *(_QWORD *)v187 = off_1E6975E80;
      *((_QWORD *)v187 + 1) = v170;
      *((_QWORD *)v187 + 2) = v185;
      *(_OWORD *)(v187 + 24) = *(_OWORD *)&v510[0].__r_.__value_.__r.__words[2];
      *((_QWORD *)v187 + 5) = v510[1].__r_.__value_.__l.__size_;
      *(_QWORD *)&v516[24] = v187;
      std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::swap[abi:ne180100](v516, (_QWORD *)(v186 + 32));
      v188 = *(_QWORD **)&v516[24];
      if (*(_BYTE **)&v516[24] == v516)
      {
        v188 = v516;
        v189 = 4;
      }
      else
      {
        if (!*(_QWORD *)&v516[24])
          goto LABEL_221;
        v189 = 5;
      }
      (*(void (**)(_QWORD *))(*v188 + 8 * v189))(v188);
      do
LABEL_221:
        v190 = __ldaxr(v176);
      while (__stlxr(v190 - 1, v176));
      if (!v190)
      {
        ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
        std::__shared_weak_count::__release_weak(v175);
      }
      if (v171)
        std::__shared_weak_count::__release_weak(v171);
      v191 = *(std::__shared_weak_count **)&v506[8];
      if (!*(_QWORD *)&v506[8])
        goto LABEL_230;
      v192 = (unint64_t *)(*(_QWORD *)&v506[8] + 8);
      do
        v193 = __ldaxr(v192);
      while (__stlxr(v193 - 1, v192));
      if (!v193)
      {
        ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
        std::__shared_weak_count::__release_weak(v191);
        if (v155)
          goto LABEL_231;
      }
      else
      {
LABEL_230:
        if (v155)
        {
LABEL_231:
          v194 = (unint64_t *)(v155 + 8);
          do
            v195 = __ldaxr(v194);
          while (__stlxr(v195 - 1, v194));
          if (!v195)
          {
            (*(void (**)(char *))(*(_QWORD *)v155 + 16))(v155);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v155);
          }
        }
      }
      for (j = 15; j != 9; j -= 3)
      {
        v510[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&(&v498)[j];
        std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)v510);
      }
      if (v503 < 0)
        operator delete(__p);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      if (SHIBYTE(v499.__imp_.__imp_) < 0)
        operator delete(v498);
      std::vector<AMCP::Node_Description>::__vdeallocate((void **)&v463.__vftable);
      v463 = (std::logic_error)v478;
      v464 = data;
      data = 0;
      v478 = 0uLL;
      v209 = (std::logic_error *)&v478;
      goto LABEL_554;
    }
    if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v475 - *((_QWORD *)&v474 + 1)) >> 3) != (uint64_t)(*((_QWORD *)&v472[0] + 1)
                                                                                           - *(_QWORD *)&v472[0]) >> 2)
    {
      AMCP::Log::Scope_Registry::get(v10);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v510, "com.apple.coreaudio", "AMCP");
      v427 = *(NSObject **)v510[0].__r_.__value_.__l.__data_;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v510);
      if (os_log_type_enabled(v427, OS_LOG_TYPE_ERROR))
      {
        v428 = pthread_self();
        v429 = pthread_mach_thread_np(v428);
        LODWORD(v510[0].__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(v510[0].__r_.__value_.__r.__words[0]) = v429;
        LOWORD(v510[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v510[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Device_Node_Factory.cpp";
        WORD1(v510[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v510[0].__r_.__value_.__r.__words[2]) = 225;
        LOWORD(v510[1].__r_.__value_.__l.__data_) = 2080;
        *(std::string::size_type *)((char *)v510[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)"not (output_terminals.size() == output_stream_ids.size())";
        _os_log_error_impl(&dword_1B57BA000, v427, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s number of terminals does not match number of stream ids", (uint8_t *)v510, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v490);
      v430 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"number of terminals does not match number of stream ids", (uint64_t)v516, &v506[8]);
      std::logic_error::logic_error((std::logic_error *)v494, (const std::string *)v516);
      *(_QWORD *)v494 = MEMORY[0x1E0DE5018] + 16;
      std::logic_error::logic_error((std::logic_error *)v518, (const std::logic_error *)v494);
      *(_QWORD *)&v518[32] = 0;
      *(_QWORD *)&v518[24] = 0;
      v519 = 0;
      v520 = -1;
      *(_QWORD *)v518 = off_1E69A1208;
      *(_QWORD *)&v518[16] = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v510, (uint64_t)v518);
      v510[1].__r_.__value_.__l.__size_ = (std::string::size_type)"std::vector<Node_Description> AMCP::IO_Core::Device_No"
                                                                  "de_Factory::create_output_nodes_for_streams(const std:"
                                                                  ":vector<Terminal_Description> &, const std::vector<AMC"
                                                                  "P::Object_ID> &, const std::shared_ptr<Device_Node_Sta"
                                                                  "te> &, AMCP::Object_ID, const std::shared_ptr<Device_T"
                                                                  "imebase_Factory> &)";
      v510[1].__r_.__value_.__r.__words[2] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/Sour"
                                                                     "ce/AMCP/IO/IO_Core/Device_Node_Factory.cpp";
      LODWORD(v511) = 225;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v506);
      v499 = *(std::logic_error *)v506;
      v498 = (void (**)())off_1E69A20A0;
      v500 = *(_QWORD *)&v506[16];
      memset(v506, 0, 24);
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v510, (uint64_t)&v498);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v430, (uint64_t)v510);
    }
    v461.__vftable = 0;
    v461.__imp_.__imp_ = 0;
    v462 = 0;
    AMCP::IO_Core::Device_Node_Factory::clock_uid_and_node_description_from_device_and_direction((uint64_t)&v498, *v62, v445, 0);
    v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v62 + 24))(*v62);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v70 + 24))(v70, &__s);
    std::vector<AMCP::Terminal_Description>::__assign_with_size[abi:ne180100]<AMCP::Terminal_Description*,AMCP::Terminal_Description*>(v505, *((__int128 **)&v474 + 1), (__int128 *)v475, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v475 - *((_QWORD *)&v474 + 1)) >> 3));
    v71 = v461.__imp_.__imp_;
    if (v461.__imp_.__imp_ >= v462)
    {
      v82 = 0xEEEEEEEEEEEEEEEFLL * ((v461.__imp_.__imp_ - (const char *)v461.__vftable) >> 3);
      v83 = v82 + 1;
      if (v82 + 1 > 0x222222222222222)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      if (0xDDDDDDDDDDDDDDDELL * ((v462 - (const char *)v461.__vftable) >> 3) > v83)
        v83 = 0xDDDDDDDDDDDDDDDELL * ((v462 - (const char *)v461.__vftable) >> 3);
      if (0xEEEEEEEEEEEEEEEFLL * ((v462 - (const char *)v461.__vftable) >> 3) >= 0x111111111111111)
        v84 = 0x222222222222222;
      else
        v84 = v83;
      v510[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v462;
      if (v84)
        v84 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Node_Description>>(v84);
      else
        v85 = 0;
      v510[0].__r_.__value_.__r.__words[0] = v84;
      v510[0].__r_.__value_.__l.__size_ = v84 + 120 * v82;
      v510[0].__r_.__value_.__r.__words[2] = v510[0].__r_.__value_.__l.__size_;
      v510[1].__r_.__value_.__r.__words[0] = v84 + 120 * v85;
      AMCP::Node_Description::Node_Description((AMCP::Node_Description *)v510[0].__r_.__value_.__l.__size_, (const AMCP::Node_Description *)&v500);
      v90 = (std::logic_error_vtbl *)v510[0].__r_.__value_.__l.__size_;
      v73 = (const char *)(v510[0].__r_.__value_.__r.__words[2] + 120);
      v510[0].__r_.__value_.__r.__words[2] += 120;
      v92 = v461.__vftable;
      v91 = v461.__imp_.__imp_;
      if (v461.__imp_.__imp_ == (const char *)v461.__vftable)
      {
        v93 = (std::logic_error)vdupq_n_s64((unint64_t)v461.__imp_.__imp_);
      }
      else
      {
        do
        {
          v91 -= 120;
          std::construct_at[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description,AMCP::Node_Description*>((uint64_t)&v90[-5], (uint64_t)v91);
        }
        while (v91 != (const char *)v92);
        v93 = v461;
        v73 = (const char *)v510[0].__r_.__value_.__r.__words[2];
      }
      v461.__vftable = v90;
      v461.__imp_.__imp_ = v73;
      *(std::logic_error *)&v510[0].__r_.__value_.__r.__words[1] = v93;
      v210 = (std::string::size_type)v462;
      v462 = v510[1].__r_.__value_.__l.__data_;
      v510[1].__r_.__value_.__r.__words[0] = v210;
      v510[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v93.__vftable;
      v72 = (AMCP::Log::Scope_Registry *)std::__split_buffer<AMCP::Node_Description>::~__split_buffer((uint64_t)v510);
    }
    else
    {
      v72 = AMCP::Node_Description::Node_Description((AMCP::Node_Description *)v461.__imp_.__imp_, (const AMCP::Node_Description *)&v500);
      v73 = v71 + 120;
    }
    v461.__imp_.__imp_ = v73;
    v211 = *v63;
    if (!*v63)
    {
      AMCP::Log::Scope_Registry::get(v72);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v510, "com.apple.coreaudio", "AMCP");
      v435 = *(NSObject **)v510[0].__r_.__value_.__l.__data_;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v510);
      if (os_log_type_enabled(v435, OS_LOG_TYPE_ERROR))
      {
        v436 = pthread_self();
        v437 = pthread_mach_thread_np(v436);
        LODWORD(v510[0].__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(v510[0].__r_.__value_.__r.__words[0]) = v437;
        LOWORD(v510[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v510[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Device_Node_Factory.cpp";
        WORD1(v510[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v510[0].__r_.__value_.__r.__words[2]) = 235;
        LOWORD(v510[1].__r_.__value_.__l.__data_) = 2080;
        *(std::string::size_type *)((char *)v510[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)"not (device_state.operator BOOL())";
        _os_log_error_impl(&dword_1B57BA000, v435, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)v510, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v485);
      v438 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)v506, &v506[8]);
      std::logic_error::logic_error(&v490, (const std::string *)v506);
      v490.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error((std::logic_error *)v518, &v490);
      *(_QWORD *)&v518[32] = 0;
      *(_QWORD *)&v518[24] = 0;
      v519 = 0;
      v520 = -1;
      *(_QWORD *)v518 = off_1E69A1208;
      *(_QWORD *)&v518[16] = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v510, (uint64_t)v518);
      v510[1].__r_.__value_.__l.__size_ = (std::string::size_type)"std::vector<Node_Description> AMCP::IO_Core::Device_No"
                                                                  "de_Factory::create_output_nodes_for_streams(const std:"
                                                                  ":vector<Terminal_Description> &, const std::vector<AMC"
                                                                  "P::Object_ID> &, const std::shared_ptr<Device_Node_Sta"
                                                                  "te> &, AMCP::Object_ID, const std::shared_ptr<Device_T"
                                                                  "imebase_Factory> &)";
      v510[1].__r_.__value_.__r.__words[2] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/Sour"
                                                                     "ce/AMCP/IO/IO_Core/Device_Node_Factory.cpp";
      LODWORD(v511) = 235;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v494);
      *(_OWORD *)&v516[8] = *(_OWORD *)v494;
      *(_QWORD *)v516 = off_1E69A20A0;
      *(_QWORD *)&v516[24] = *(_QWORD *)&v494[16];
      memset(v494, 0, 24);
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v510, (uint64_t)v516);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v438, (uint64_t)v510);
    }
    v213 = *(_QWORD *)(v211 + 112);
    v212 = *(std::__shared_weak_count **)(v211 + 120);
    if (!v212)
      goto LABEL_267;
    v214 = (unint64_t *)&v212->__shared_owners_;
    do
      v215 = __ldxr(v214);
    while (__stxr(v215 + 1, v214));
    do
      v216 = __ldaxr(v214);
    while (__stlxr(v216 - 1, v214));
    if (!v216)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
      if (v213)
        goto LABEL_389;
    }
    else
    {
LABEL_267:
      if (v213)
        goto LABEL_389;
    }
    v217 = *v63;
    v218 = *a3;
    v219 = *(_QWORD *)(*v63 + 104);
    v510[0].__r_.__value_.__r.__words[0] = *(_QWORD *)(*v63 + 96);
    v510[0].__r_.__value_.__l.__size_ = v219;
    if (v219)
    {
      v220 = (unint64_t *)(v219 + 8);
      do
        v221 = __ldxr(v220);
      while (__stxr(v221 + 1, v220));
    }
    AMCP::IO_Core::Device_Timebase_Factory::demand_timebase_for_device(&v496, v218, v510, (uint64_t)&v498);
    v222 = (_QWORD *)(v217 + 112);
    v223 = v497;
    std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](v222, v496, (uint64_t)v497);
    if (v223)
    {
      v224 = (unint64_t *)&v223->__shared_owners_;
      do
        v225 = __ldaxr(v224);
      while (__stlxr(v225 - 1, v224));
      if (!v225)
      {
        ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
        std::__shared_weak_count::__release_weak(v223);
      }
    }
    v226 = (std::__shared_weak_count *)v510[0].__r_.__value_.__l.__size_;
    if (v510[0].__r_.__value_.__l.__size_)
    {
      v227 = (unint64_t *)(v510[0].__r_.__value_.__l.__size_ + 8);
      do
        v228 = __ldaxr(v227);
      while (__stlxr(v228 - 1, v227));
      if (!v228)
      {
        ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
        std::__shared_weak_count::__release_weak(v226);
      }
    }
    v229 = (_QWORD *)v62[2];
    memset(v518, 0, 24);
    v230 = (std::string::size_type)(v229 + 2);
    v231 = (uint64_t *)v229[2];
    if (v231)
    {
      v232 = 0;
      while (1)
      {
        v233 = v231[3];
        if (*((char *)v231 + 39) >= 0)
          v234 = *((unsigned __int8 *)v231 + 39);
        else
          v234 = v231[3];
        v235 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v235 = __s.__r_.__value_.__l.__size_;
        if (v234 != v235)
          goto LABEL_326;
        v236 = (const std::string::value_type **)(v231 + 2);
        v237 = (__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
             ? &__s
             : (std::string *)__s.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)v231 + 39) & 0x80) == 0)
          break;
        if (!memcmp(*v236, v237, v231[3]))
        {
          v240 = *(_QWORD *)&v518[16];
          if (v232 < *(_QWORD *)&v518[16])
          {
LABEL_302:
            std::string::__init_copy_ctor_external((std::string *)v232, *v236, v233);
            goto LABEL_305;
          }
LABEL_306:
          v243 = *(_QWORD *)v518;
          v244 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v232 - *(_QWORD *)v518) >> 3);
          v245 = v244 + 1;
          if (v244 + 1 > 0x666666666666666)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v246 = 0xCCCCCCCCCCCCCCCDLL * ((v240 - *(_QWORD *)v518) >> 3);
          if (2 * v246 > v245)
            v245 = 2 * v246;
          if (v246 >= 0x333333333333333)
            v247 = 0x666666666666666;
          else
            v247 = v245;
          v510[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v518[16];
          if (v247)
          {
            if (v247 > 0x666666666666666)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v248 = (char *)operator new(40 * v247);
          }
          else
          {
            v248 = 0;
          }
          v249 = (std::string *)&v248[40 * v244];
          v510[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v248;
          v510[0].__r_.__value_.__l.__size_ = (std::string::size_type)v249;
          v510[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v249;
          v510[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v248[40 * v247];
          if (*((char *)v231 + 39) < 0)
          {
            std::string::__init_copy_ctor_external(v249, (const std::string::value_type *)v231[2], v231[3]);
            v232 = *(_QWORD *)&v518[8];
            v243 = *(_QWORD *)v518;
            v251 = (char *)v510[0].__r_.__value_.__r.__words[2];
            v249 = (std::string *)v510[0].__r_.__value_.__l.__size_;
          }
          else
          {
            v250 = *(_OWORD *)v236;
            v249->__r_.__value_.__r.__words[2] = v231[4];
            *(_OWORD *)&v249->__r_.__value_.__l.__data_ = v250;
            v251 = &v248[40 * v244];
          }
          v252 = &v248[40 * v244];
          v253 = v231[5];
          *((_DWORD *)v252 + 8) = *((_DWORD *)v231 + 12);
          *((_QWORD *)v252 + 3) = v253;
          v254 = (std::string::size_type)(v251 + 40);
          v510[0].__r_.__value_.__r.__words[2] = v254;
          if (v232 == v243)
          {
            v257 = vdupq_n_s64(v243);
            v232 = v254;
            v62 = v456;
            v230 = (std::string::size_type)(v229 + 2);
          }
          else
          {
            v62 = v456;
            v230 = (std::string::size_type)(v229 + 2);
            do
            {
              v255 = *(_OWORD *)(v232 - 40);
              v249[-1].__r_.__value_.__r.__words[0] = *(_QWORD *)(v232 - 24);
              *(_OWORD *)&v249[-2].__r_.__value_.__r.__words[1] = v255;
              *(_QWORD *)(v232 - 32) = 0;
              *(_QWORD *)(v232 - 24) = 0;
              *(_QWORD *)(v232 - 40) = 0;
              v256 = *(_QWORD *)(v232 - 16);
              LODWORD(v249[-1].__r_.__value_.__r.__words[2]) = *(_DWORD *)(v232 - 8);
              v249[-1].__r_.__value_.__l.__size_ = v256;
              v249 = (std::string *)((char *)v249 - 40);
              v232 -= 40;
            }
            while (v232 != v243);
            v257 = *(int64x2_t *)v518;
            v232 = v510[0].__r_.__value_.__r.__words[2];
          }
          *(_QWORD *)v518 = v249;
          *(_QWORD *)&v518[8] = v232;
          *(int64x2_t *)&v510[0].__r_.__value_.__r.__words[1] = v257;
          v258 = *(_QWORD *)&v518[16];
          *(_QWORD *)&v518[16] = v510[1].__r_.__value_.__l.__data_;
          v510[1].__r_.__value_.__r.__words[0] = v258;
          v510[0].__r_.__value_.__r.__words[0] = v257.i64[0];
          std::__split_buffer<AMCP::Terminal_Identifier>::~__split_buffer((uint64_t)v510);
LABEL_325:
          *(_QWORD *)&v518[8] = v232;
        }
LABEL_326:
        v231 = (uint64_t *)*v231;
        if (!v231)
        {
          for (k = *(unsigned __int8 ***)v518; k != (unsigned __int8 **)v232; k += 5)
          {
            v260 = std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::find<AMCP::Terminal_Identifier>(v229, k);
            if (v260)
            {
              v261 = (int8x8_t)v229[1];
              v262 = v260[1];
              v263 = (uint8x8_t)vcnt_s8(v261);
              v263.i16[0] = vaddlv_u8(v263);
              if (v263.u32[0] > 1uLL)
              {
                if (v262 >= *(_QWORD *)&v261)
                  v262 %= *(_QWORD *)&v261;
              }
              else
              {
                v262 &= *(_QWORD *)&v261 - 1;
              }
              v264 = *(_QWORD **)(*v229 + 8 * v262);
              do
              {
                v265 = v264;
                v264 = (_QWORD *)*v264;
              }
              while (v264 != v260);
              if (v265 == (_QWORD *)v230)
                goto LABEL_347;
              v266 = v265[1];
              if (v263.u32[0] > 1uLL)
              {
                if (v266 >= *(_QWORD *)&v261)
                  v266 %= *(_QWORD *)&v261;
              }
              else
              {
                v266 &= *(_QWORD *)&v261 - 1;
              }
              if (v266 != v262)
              {
LABEL_347:
                if (!*v260)
                  goto LABEL_348;
                v267 = *(_QWORD *)(*v260 + 8);
                if (v263.u32[0] > 1uLL)
                {
                  if (v267 >= *(_QWORD *)&v261)
                    v267 %= *(_QWORD *)&v261;
                }
                else
                {
                  v267 &= *(_QWORD *)&v261 - 1;
                }
                if (v267 != v262)
LABEL_348:
                  *(_QWORD *)(*v229 + 8 * v262) = 0;
              }
              v268 = *v260;
              if (*v260)
              {
                v269 = *(_QWORD *)(v268 + 8);
                if (v263.u32[0] > 1uLL)
                {
                  if (v269 >= *(_QWORD *)&v261)
                    v269 %= *(_QWORD *)&v261;
                }
                else
                {
                  v269 &= *(_QWORD *)&v261 - 1;
                }
                if (v269 != v262)
                {
                  *(_QWORD *)(*v229 + 8 * v269) = v265;
                  v268 = *v260;
                }
              }
              *v265 = v268;
              *v260 = 0;
              --v229[3];
              v510[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v260;
              v510[0].__r_.__value_.__l.__size_ = v230;
              v510[0].__r_.__value_.__s.__data_[16] = 1;
              std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::shared_ptr<AMCP::DAL::Synchronized_Mixer>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::shared_ptr<AMCP::DAL::Synchronized_Mixer>>,void *>>>>::reset[abi:ne180100]((uint64_t)v510);
            }
          }
          goto LABEL_358;
        }
      }
      if (*((_BYTE *)v231 + 39))
      {
        v238 = (unsigned __int8 *)(v231 + 2);
        v239 = *((unsigned __int8 *)v231 + 39);
        while (*v238 == v237->__r_.__value_.__s.__data_[0])
        {
          ++v238;
          v237 = (std::string *)((char *)v237 + 1);
          if (!--v239)
          {
            v240 = *(_QWORD *)&v518[16];
            if (v232 >= *(_QWORD *)&v518[16])
              goto LABEL_306;
            if ((*((_BYTE *)v231 + 39) & 0x80) == 0)
              goto LABEL_304;
            goto LABEL_302;
          }
        }
        goto LABEL_326;
      }
      v240 = *(_QWORD *)&v518[16];
      if (v232 >= *(_QWORD *)&v518[16])
        goto LABEL_306;
LABEL_304:
      v241 = *(_OWORD *)v236;
      *(_QWORD *)(v232 + 16) = v231[4];
      *(_OWORD *)v232 = v241;
LABEL_305:
      v242 = v231[5];
      *(_DWORD *)(v232 + 32) = *((_DWORD *)v231 + 12);
      *(_QWORD *)(v232 + 24) = v242;
      v232 += 40;
      goto LABEL_325;
    }
LABEL_358:
    v270 = v229 + 5;
    v271 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(v229 + 5, (unsigned __int8 *)&__s);
    if (v271)
    {
      v272 = (int8x8_t)v229[6];
      v273 = *((_QWORD *)v271 + 1);
      v274 = (uint8x8_t)vcnt_s8(v272);
      v274.i16[0] = vaddlv_u8(v274);
      if (v274.u32[0] > 1uLL)
      {
        if (v273 >= *(_QWORD *)&v272)
          v273 %= *(_QWORD *)&v272;
      }
      else
      {
        v273 &= *(_QWORD *)&v272 - 1;
      }
      v275 = *(unsigned __int8 **)(*v270 + 8 * v273);
      do
      {
        v276 = v275;
        v275 = *(unsigned __int8 **)v275;
      }
      while (v275 != v271);
      if (v276 == (unsigned __int8 *)(v229 + 7))
        goto LABEL_378;
      v277 = *((_QWORD *)v276 + 1);
      if (v274.u32[0] > 1uLL)
      {
        if (v277 >= *(_QWORD *)&v272)
          v277 %= *(_QWORD *)&v272;
      }
      else
      {
        v277 &= *(_QWORD *)&v272 - 1;
      }
      if (v277 != v273)
      {
LABEL_378:
        if (!*(_QWORD *)v271)
          goto LABEL_379;
        v278 = *(_QWORD *)(*(_QWORD *)v271 + 8);
        if (v274.u32[0] > 1uLL)
        {
          if (v278 >= *(_QWORD *)&v272)
            v278 %= *(_QWORD *)&v272;
        }
        else
        {
          v278 &= *(_QWORD *)&v272 - 1;
        }
        if (v278 != v273)
LABEL_379:
          *(_QWORD *)(*v270 + 8 * v273) = 0;
      }
      v279 = *(_QWORD *)v271;
      if (*(_QWORD *)v271)
      {
        v280 = *(_QWORD *)(v279 + 8);
        if (v274.u32[0] > 1uLL)
        {
          if (v280 >= *(_QWORD *)&v272)
            v280 %= *(_QWORD *)&v272;
        }
        else
        {
          v280 &= *(_QWORD *)&v272 - 1;
        }
        if (v280 != v273)
        {
          *(_QWORD *)(*v270 + 8 * v280) = v276;
          v279 = *(_QWORD *)v271;
        }
      }
      *(_QWORD *)v276 = v279;
      *(_QWORD *)v271 = 0;
      --v229[8];
      v510[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v271;
      v510[0].__r_.__value_.__l.__size_ = (std::string::size_type)(v229 + 7);
      v510[0].__r_.__value_.__s.__data_[16] = 1;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)v510);
    }
    v510[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v518;
    std::vector<IOContextInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v510);
LABEL_389:
    v282 = *(_QWORD *)(*v63 + 112);
    v281 = *(std::__shared_weak_count **)(*v63 + 120);
    if (v281)
    {
      v283 = (unint64_t *)&v281->__shared_owners_;
      do
        v284 = __ldxr(v283);
      while (__stxr(v284 + 1, v283));
      do
        v285 = __ldaxr(v283);
      while (__stlxr(v285 - 1, v283));
      if (!v285)
      {
        ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
        std::__shared_weak_count::__release_weak(v281);
        if (!v282)
          goto LABEL_545;
LABEL_395:
        v286 = *((_QWORD *)&v474 + 1);
        if ((_QWORD)v475 != *((_QWORD *)&v474 + 1))
        {
          v287 = 0;
          do
          {
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v508, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            else
              v508 = __s;
            v288 = (__int128 *)(v286 + 104 * v287);
            *(_OWORD *)v516 = *(_OWORD *)&v508.__r_.__value_.__l.__data_;
            v289 = v508.__r_.__value_.__r.__words[2];
            memset(&v508, 0, sizeof(v508));
            *(_QWORD *)&v516[16] = v289;
            *(_QWORD *)&v516[24] = v287;
            LODWORD(v517) = 1;
            v290 = v62[2];
            v292 = *(_QWORD *)(*v63 + 112);
            v291 = *(_QWORD *)(*v63 + 120);
            v293 = *v288;
            v294 = v288[1];
            v507 = *((_QWORD *)v288 + 4);
            *(_OWORD *)v506 = v293;
            *(_OWORD *)&v506[16] = v294;
            *(_QWORD *)&v484 = v292;
            *((_QWORD *)&v484 + 1) = v291;
            if (v291)
            {
              v295 = (unint64_t *)(v291 + 8);
              do
                v296 = __ldxr(v295);
              while (__stxr(v296 + 1, v295));
            }
            LODWORD(v510[0].__r_.__value_.__l.__data_) = 2;
            *(_OWORD *)&v510[0].__r_.__value_.__r.__words[1] = 0x40C0000000000000uLL;
            *(_OWORD *)&v510[1].__r_.__value_.__l.__data_ = v484;
            v484 = 0uLL;
            AMCP::Graph::Synchronized_Mixer_Manager::get_mixer(&v488, v290, (uint64_t)v516, (uint64_t)v506, (const AMCP::DAL::DAL_Time_Delta *)v510);
            v297 = (std::__shared_weak_count *)v510[1].__r_.__value_.__l.__size_;
            if (v510[1].__r_.__value_.__l.__size_)
            {
              v298 = (unint64_t *)(v510[1].__r_.__value_.__l.__size_ + 8);
              do
                v299 = __ldaxr(v298);
              while (__stlxr(v299 - 1, v298));
              if (!v299)
              {
                ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
                std::__shared_weak_count::__release_weak(v297);
              }
            }
            v300 = (std::__shared_weak_count *)*((_QWORD *)&v484 + 1);
            if (*((_QWORD *)&v484 + 1))
            {
              v301 = (unint64_t *)(*((_QWORD *)&v484 + 1) + 8);
              do
                v302 = __ldaxr(v301);
              while (__stlxr(v302 - 1, v301));
              if (!v302)
              {
                ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
                std::__shared_weak_count::__release_weak(v300);
              }
            }
            v303 = *(_QWORD *)&v472[0];
            if (v287 >= (uint64_t)(*((_QWORD *)&v472[0] + 1) - *(_QWORD *)&v472[0]) >> 2)
              std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
            v304 = (std::__shared_mutex_base *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*v62 + 16))(*v62);
            AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v482, v304, *(_DWORD *)(v303 + 4 * v287));
            if (!v482)
            {
              AMCP::Log::Scope_Registry::get(0);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v510, "com.apple.coreaudio", "AMCP");
              v409 = (std::__shared_weak_count *)v510[0].__r_.__value_.__l.__size_;
              v410 = *(NSObject **)v510[0].__r_.__value_.__l.__data_;
              if (v510[0].__r_.__value_.__l.__size_)
              {
                v411 = (unint64_t *)(v510[0].__r_.__value_.__l.__size_ + 8);
                do
                  v412 = __ldaxr(v411);
                while (__stlxr(v412 - 1, v411));
                if (!v412)
                {
                  ((void (*)(std::__shared_weak_count *))v409->__on_zero_shared)(v409);
                  std::__shared_weak_count::__release_weak(v409);
                }
              }
              if (os_log_type_enabled(v410, OS_LOG_TYPE_ERROR))
              {
                v413 = pthread_self();
                v414 = pthread_mach_thread_np(v413);
                LODWORD(v510[0].__r_.__value_.__l.__data_) = 67109890;
                HIDWORD(v510[0].__r_.__value_.__r.__words[0]) = v414;
                LOWORD(v510[0].__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&v510[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Device_Node_Factory.cpp";
                WORD1(v510[0].__r_.__value_.__r.__words[2]) = 1024;
                HIDWORD(v510[0].__r_.__value_.__r.__words[2]) = 256;
                LOWORD(v510[1].__r_.__value_.__l.__data_) = 2080;
                *(std::string::size_type *)((char *)v510[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)"not (stream_core != nullptr)";
                _os_log_error_impl(&dword_1B57BA000, v410, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)v510, 0x22u);
              }
              AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v481);
              v415 = __cxa_allocate_exception(0x40uLL);
              caulk::make_string((caulk *)"", (uint64_t)&v493, &v506[8]);
              std::logic_error::logic_error(&v480, &v493);
              v480.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
              std::logic_error::logic_error((std::logic_error *)v518, &v480);
              *(_QWORD *)&v518[32] = 0;
              *(_QWORD *)&v518[24] = 0;
              v519 = 0;
              v520 = -1;
              *(_QWORD *)v518 = off_1E69A1208;
              *(_QWORD *)&v518[16] = &unk_1E69A1230;
              boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v510, (uint64_t)v518);
              v510[1].__r_.__value_.__l.__size_ = (std::string::size_type)"std::vector<Node_Description> AMCP::IO_Core::D"
                                                                          "evice_Node_Factory::create_output_nodes_for_st"
                                                                          "reams(const std::vector<Terminal_Description> "
                                                                          "&, const std::vector<AMCP::Object_ID> &, const"
                                                                          " std::shared_ptr<Device_Node_State> &, AMCP::O"
                                                                          "bject_ID, const std::shared_ptr<Device_Timebase_Factory> &)";
              v510[1].__r_.__value_.__r.__words[2] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/Audio"
                                                                             "HAL/Source/AMCP/IO/IO_Core/Device_Node_Factory.cpp";
              LODWORD(v511) = 256;
              applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v478);
              *(int64x2_t *)&v494[8] = v478;
              *(_QWORD *)v494 = off_1E69A20A0;
              *(_QWORD *)&v494[24] = data;
              v478 = 0uLL;
              data = 0;
              boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v510, (uint64_t)v494);
              boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v415, (uint64_t)v510);
            }
            v305 = AMCP::Core::Core::get_simple_required_property<1935894638u>(v482);
            v306 = *(_QWORD *)(*v63 + 96);
            v307 = *(std::__shared_weak_count **)(*v63 + 104);
            if (v307)
            {
              v308 = (unint64_t *)&v307->__shared_owners_;
              do
                v309 = __ldxr(v308);
              while (__stxr(v309 + 1, v308));
              (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD, unint64_t))(*(_QWORD *)v306 + 128))(v494, v306, 0, v305);
              do
                v310 = __ldaxr(v308);
              while (__stlxr(v310 - 1, v308));
              if (!v310)
              {
                ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
                std::__shared_weak_count::__release_weak(v307);
              }
            }
            else
            {
              (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD, unint64_t))(*(_QWORD *)v306 + 128))(v494, v306, 0, v305);
            }
            v490 = *(std::logic_error *)v506;
            v491 = *(_OWORD *)&v506[16];
            v492 = v507;
            v485 = *(std::logic_error *)v494;
            v486 = *(_OWORD *)&v494[16];
            v487 = v495;
            v476 = v488;
            v477 = v489;
            if (v489)
            {
              v311 = (unint64_t *)&v489->__shared_owners_;
              do
                v312 = __ldxr(v311);
              while (__stxr(v312 + 1, v311));
            }
            AMCP::IO_Core::Stream_Connection::Stream_Connection((std::string *)v518, (__int128 *)v516, v287, 0, (__int128 *)&v490, (uint64_t)&v485, (uint64_t)&v476);
            v313 = v477;
            if (v477)
            {
              v314 = (unint64_t *)&v477->__shared_owners_;
              do
                v315 = __ldaxr(v314);
              while (__stlxr(v315 - 1, v314));
              if (!v315)
              {
                ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
                std::__shared_weak_count::__release_weak(v313);
              }
            }
            v316 = *v63;
            if ((v516[23] & 0x80000000) != 0)
              std::string::__init_copy_ctor_external(v510, *(const std::string::value_type **)v516, *(std::string::size_type *)&v516[8]);
            else
              v510[0] = *(std::string *)v516;
            v510[1].__r_.__value_.__r.__words[0] = *(_QWORD *)&v516[24];
            LODWORD(v510[1].__r_.__value_.__r.__words[1]) = v517;
            AMCP::IO_Core::Stream_Connection::Stream_Connection((uint64_t)&v510[1].__r_.__value_.__r.__words[2], (__int128 *)v518);
            std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>>>::__emplace_unique_key_args<AMCP::Terminal_Identifier,std::pair<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>>(v316 + 8, (unsigned __int8 **)v510, (uint64_t)v510);
            AMCP::IO_Core::Stream_Connection::~Stream_Connection((OpaqueAudioConverter **)&v510[1].__r_.__value_.__r.__words[2]);
            if (SHIBYTE(v510[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v510[0].__r_.__value_.__l.__data_);
            AMCP::IO_Core::Stream_Connection::~Stream_Connection((OpaqueAudioConverter **)v518);
            v317 = v483;
            if (v483)
            {
              v318 = (unint64_t *)&v483->__shared_owners_;
              do
                v319 = __ldaxr(v318);
              while (__stlxr(v319 - 1, v318));
              if (!v319)
              {
                ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
                std::__shared_weak_count::__release_weak(v317);
              }
            }
            v320 = v489;
            if (v489)
            {
              v321 = (unint64_t *)&v489->__shared_owners_;
              do
                v322 = __ldaxr(v321);
              while (__stlxr(v322 - 1, v321));
              if (!v322)
              {
                ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
                std::__shared_weak_count::__release_weak(v320);
              }
            }
            if ((v516[23] & 0x80000000) != 0)
              operator delete(*(void **)v516);
            ++v287;
            v286 = *((_QWORD *)&v474 + 1);
          }
          while (v287 < 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v475 - *((_QWORD *)&v474 + 1)) >> 3));
        }
        v323 = *v63;
        v324 = *(std::__shared_weak_count **)(*v63 + 120);
        v478.i64[0] = *(_QWORD *)(*v63 + 112);
        v478.i64[1] = (uint64_t)v324;
        if (v324)
        {
          v325 = (unint64_t *)&v324->__shared_owners_;
          do
            v326 = __ldxr(v325);
          while (__stxr(v326 + 1, v325));
          v323 = *v63;
        }
        v327 = (std::__shared_weak_count *)v63[1];
        if (v327)
        {
          v328 = (unint64_t *)&v327->__shared_weak_owners_;
          do
            v329 = __ldxr(v328);
          while (__stxr(v329 + 1, v328));
        }
        v330 = operator new(0x28uLL);
        v330[1] = 0;
        v330[2] = 0;
        *v330 = &off_1E6975DA0;
        v331 = *v63;
        v332 = v63[1];
        v330[3] = *v63;
        v330[4] = v332;
        if (v332)
        {
          v333 = (unint64_t *)(v332 + 16);
          do
            v334 = __ldxr(v333);
          while (__stxr(v334 + 1, v333));
          v331 = *v63;
        }
        *(_QWORD *)v494 = v330 + 3;
        *(_QWORD *)&v494[8] = v330;
        for (m = *(_QWORD **)(v331 + 24); m; m = (_QWORD *)*m)
        {
          v337 = m[31];
          v336 = m[32];
          *(_QWORD *)v518 = v337;
          *(_QWORD *)&v518[8] = v336;
          if (v336)
          {
            v338 = (unint64_t *)(v336 + 8);
            do
              v339 = __ldxr(v338);
            while (__stxr(v339 + 1, v338));
          }
          v341 = *v63;
          v340 = (std::__shared_weak_count *)v63[1];
          *(_QWORD *)v506 = m + 7;
          *(_QWORD *)&v506[8] = v341;
          *(_QWORD *)&v506[16] = v340;
          if (v340)
          {
            v342 = (unint64_t *)&v340->__shared_owners_;
            do
              v343 = __ldxr(v342);
            while (__stxr(v343 + 1, v342));
          }
          v510[1].__r_.__value_.__r.__words[0] = 0;
          v344 = operator new(0x20uLL);
          *v344 = &off_1E6975F10;
          v344[1] = m + 7;
          v344[2] = v341;
          v344[3] = v340;
          if (v340)
          {
            v345 = (unint64_t *)&v340->__shared_owners_;
            do
              v346 = __ldxr(v345);
            while (__stxr(v346 + 1, v345));
          }
          v510[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v344;
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v337 + 200))(v337, v510);
          v347 = (std::string *)v510[1].__r_.__value_.__l.__data_;
          if ((std::string *)v510[1].__r_.__value_.__l.__data_ == v510)
          {
            v347 = v510;
            v348 = 4;
          }
          else
          {
            if (!v510[1].__r_.__value_.__r.__words[0])
              goto LABEL_475;
            v348 = 5;
          }
          (*(void (**)(std::string *))(v347->__r_.__value_.__r.__words[0] + 8 * v348))(v347);
LABEL_475:
          if (v340)
          {
            v349 = (unint64_t *)&v340->__shared_owners_;
            do
              v350 = __ldaxr(v349);
            while (__stlxr(v350 - 1, v349));
            if (!v350)
            {
              ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
              std::__shared_weak_count::__release_weak(v340);
            }
          }
          v351 = *(std::__shared_weak_count **)&v518[8];
          if (*(_QWORD *)&v518[8])
          {
            v352 = (unint64_t *)(*(_QWORD *)&v518[8] + 8);
            do
              v353 = __ldaxr(v352);
            while (__stlxr(v353 - 1, v352));
            if (!v353)
            {
              ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
              std::__shared_weak_count::__release_weak(v351);
            }
          }
        }
        v354 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v62 + 24))(*v62);
        (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v354 + 16))(&v493, v354, &__s);
        v355 = v478;
        if (v478.i64[1])
        {
          v356 = (unint64_t *)(v478.i64[1] + 8);
          do
            v357 = __ldxr(v356);
          while (__stxr(v357 + 1, v356));
          v358 = v493.__r_.__value_.__r.__words[0];
          do
            v359 = __ldxr(v356);
          while (__stxr(v359 + 1, v356));
          *(int64x2_t *)&v510[0].__r_.__value_.__r.__words[1] = v355;
          do
            v360 = __ldxr(v356);
          while (__stxr(v360 + 1, v356));
        }
        else
        {
          v358 = v493.__r_.__value_.__r.__words[0];
          *(_OWORD *)&v510[0].__r_.__value_.__r.__words[1] = v478.u64[0];
        }
        v510[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E6975F90;
        v510[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v510;
        std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::swap[abi:ne180100](v510, (_QWORD *)(v358 + 64));
        v361 = (std::string *)v510[1].__r_.__value_.__l.__data_;
        if ((std::string *)v510[1].__r_.__value_.__l.__data_ == v510)
        {
          v361 = v510;
          v362 = 4;
        }
        else
        {
          if (!v510[1].__r_.__value_.__r.__words[0])
            goto LABEL_502;
          v362 = 5;
        }
        (*(void (**)(std::string *))(v361->__r_.__value_.__r.__words[0] + 8 * v362))(v361);
LABEL_502:
        if (v355.i64[1])
        {
          v363 = (unint64_t *)(v355.i64[1] + 8);
          do
            v364 = __ldaxr(v363);
          while (__stlxr(v364 - 1, v363));
          if (!v364)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v355.i64[1] + 16))(v355.i64[1]);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v355.i64[1]);
          }
          do
            v365 = __ldaxr(v363);
          while (__stlxr(v365 - 1, v363));
          if (!v365)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v355.i64[1] + 16))(v355.i64[1]);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v355.i64[1]);
          }
        }
        v366 = *(_QWORD *)v494;
        v367 = *(_QWORD *)&v494[8];
        if (*(_QWORD *)&v494[8])
        {
          v368 = (unint64_t *)(*(_QWORD *)&v494[8] + 8);
          do
            v369 = __ldxr(v368);
          while (__stxr(v369 + 1, v368));
        }
        v510[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E6976010;
        v510[0].__r_.__value_.__l.__size_ = v366;
        v510[0].__r_.__value_.__r.__words[2] = v367;
        v510[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v510;
        std::__function::__value_func<std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::swap[abi:ne180100](v510, (_QWORD *)(v493.__r_.__value_.__r.__words[0] + 96));
        v370 = (std::string *)v510[1].__r_.__value_.__l.__data_;
        if ((std::string *)v510[1].__r_.__value_.__l.__data_ == v510)
        {
          v370 = v510;
          v371 = 4;
        }
        else
        {
          if (!v510[1].__r_.__value_.__r.__words[0])
            goto LABEL_518;
          v371 = 5;
        }
        (*(void (**)(std::string *))(v370->__r_.__value_.__r.__words[0] + 8 * v371))(v370);
LABEL_518:
        *(_QWORD *)v518 = v323;
        *(_QWORD *)&v518[8] = v327;
        if (v327)
        {
          v372 = (unint64_t *)&v327->__shared_weak_owners_;
          do
            v373 = __ldxr(v372);
          while (__stxr(v373 + 1, v372));
        }
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v518[16], __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          v323 = *(_QWORD *)v518;
          v374 = *(_QWORD *)&v518[8];
        }
        else
        {
          *(std::string *)&v518[16] = __s;
          v374 = (std::string::size_type)v327;
        }
        v375 = v493.__r_.__value_.__r.__words[0];
        v510[0].__r_.__value_.__r.__words[0] = v323;
        v510[0].__r_.__value_.__l.__size_ = v374;
        memset(v518, 0, sizeof(v518));
        *(_OWORD *)&v510[0].__r_.__value_.__r.__words[2] = *(_OWORD *)&v518[16];
        v510[1].__r_.__value_.__l.__size_ = *(_QWORD *)&v518[32];
        v376 = (char *)operator new(0x30uLL);
        *(_QWORD *)v376 = off_1E6976090;
        *((_QWORD *)v376 + 1) = v323;
        *((_QWORD *)v376 + 2) = v374;
        *(_OWORD *)(v376 + 24) = *(_OWORD *)&v510[0].__r_.__value_.__r.__words[2];
        *((_QWORD *)v376 + 5) = v510[1].__r_.__value_.__l.__size_;
        *(_QWORD *)&v516[24] = v376;
        std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::swap[abi:ne180100](v516, (_QWORD *)(v375 + 32));
        v377 = *(_QWORD **)&v516[24];
        if (*(_BYTE **)&v516[24] == v516)
        {
          v377 = v516;
          v378 = 4;
        }
        else
        {
          if (!*(_QWORD *)&v516[24])
          {
LABEL_529:
            v379 = (std::__shared_weak_count *)v493.__r_.__value_.__l.__size_;
            if (v493.__r_.__value_.__l.__size_)
            {
              v380 = (unint64_t *)(v493.__r_.__value_.__l.__size_ + 8);
              do
                v381 = __ldaxr(v380);
              while (__stlxr(v381 - 1, v380));
              if (!v381)
              {
                ((void (*)(std::__shared_weak_count *))v379->__on_zero_shared)(v379);
                std::__shared_weak_count::__release_weak(v379);
              }
            }
            v382 = *(std::__shared_weak_count **)&v494[8];
            if (!*(_QWORD *)&v494[8])
              goto LABEL_538;
            v383 = (unint64_t *)(*(_QWORD *)&v494[8] + 8);
            do
              v384 = __ldaxr(v383);
            while (__stlxr(v384 - 1, v383));
            if (!v384)
            {
              ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
              std::__shared_weak_count::__release_weak(v382);
              if (!v327)
                goto LABEL_540;
            }
            else
            {
LABEL_538:
              if (!v327)
              {
LABEL_540:
                if (v324)
                {
                  v385 = (unint64_t *)&v324->__shared_owners_;
                  do
                    v386 = __ldaxr(v385);
                  while (__stlxr(v386 - 1, v385));
                  if (!v386)
                  {
                    ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
                    std::__shared_weak_count::__release_weak(v324);
                  }
                }
                goto LABEL_545;
              }
            }
            std::__shared_weak_count::__release_weak(v327);
            goto LABEL_540;
          }
          v378 = 5;
        }
        (*(void (**)(_QWORD *))(*v377 + 8 * v378))(v377);
        goto LABEL_529;
      }
    }
    if (v282)
      goto LABEL_395;
LABEL_545:
    for (n = 15; n != 9; n -= 3)
    {
      v510[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&(&v498)[n];
      std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)v510);
    }
    if (v503 < 0)
      operator delete(__p);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (SHIBYTE(v499.__imp_.__imp_) < 0)
      operator delete(v498);
    std::vector<AMCP::Node_Description>::__vdeallocate((void **)&v463.__vftable);
    v463 = v461;
    v464 = (void *)v462;
    v461.__imp_.__imp_ = 0;
    v462 = 0;
    v461.__vftable = 0;
    v209 = &v461;
LABEL_554:
    v510[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v209;
    std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)v510);
    std::vector<AMCP::Node_Description>::__insert_with_size[abi:ne180100]<std::__wrap_iter<AMCP::Node_Description*>,std::__wrap_iter<AMCP::Node_Description*>>(&v465, v466, (const AMCP::Node_Description *)v463.__vftable, (uint64_t)v463.__imp_.__imp_, 0xEEEEEEEEEEEEEEEFLL * ((v463.__imp_.__imp_ - (const char *)v463.__vftable) >> 3));
    v510[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v463;
    std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)v510);
    v64 = v446;
LABEL_555:
    v60 = 1;
    v61 = 1;
  }
  while ((v64 & 1) == 0);
  v388 = a1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (&v465 != (uint64_t *)a1)
  {
    v389 = v465;
    v390 = v466;
    if (v466 == v465)
    {
      v394 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AMCP::Node_Description *,AMCP::Node_Description *,AMCP::Node_Description *>(v465, v466, 0);
      for (ii = *(_QWORD *)(a1 + 8); ii != v394; std::__destroy_at[abi:ne180100]<AMCP::Node_Description,0>(ii))
        ii -= 120;
      v388 = a1;
      *(_QWORD *)(a1 + 8) = v394;
    }
    else
    {
      v391 = 0xEEEEEEEEEEEEEEEFLL * ((v466 - v465) >> 3);
      v388 = a1;
      std::vector<AMCP::Node_Description>::__vdeallocate((void **)a1);
      if (v391 > 0x222222222222222)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v392 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
      if (v392 <= v391)
        v392 = v391;
      if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x111111111111111)
        v393 = 0x222222222222222;
      else
        v393 = v392;
      std::vector<AMCP::Node_Description>::__vallocate[abi:ne180100]((_QWORD *)a1, v393);
      *(_QWORD *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Node_Description>,AMCP::Node_Description*,AMCP::Node_Description*,AMCP::Node_Description*>(v389, v390, *(_QWORD *)(a1 + 8));
    }
  }
  std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(v388 + 24), *v63, v63[1]);
  v510[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v465;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)v510);
  if (v468)
    operator delete(v468);
  v396 = v471;
  if (v471)
  {
    v397 = (unint64_t *)&v471->__shared_owners_;
    do
      v398 = __ldaxr(v397);
    while (__stlxr(v398 - 1, v397));
    if (!v398)
    {
      ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
      std::__shared_weak_count::__release_weak(v396);
    }
  }
  for (jj = 0; jj != -48; jj -= 24)
  {
    v400 = *(void **)((char *)&v472[1] + jj + 8);
    if (v400)
    {
      *(_QWORD *)((char *)&v472[2] + jj) = v400;
      operator delete(v400);
    }
  }
  for (kk = 24; kk != -24; kk -= 24)
  {
    v510[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v473 + kk;
    std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)v510);
  }
}

void sub_1B594D124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v62;
  void *v63;
  uint64_t i;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
  v62 = 0;
  while (1)
  {
    v63 = *(void **)(&a55 + v62 + 24);
    if (v63)
    {
      *(_QWORD *)(&a55 + v62 + 32) = v63;
      operator delete(v63);
    }
    v62 -= 24;
    if (v62 == -48)
    {
      for (i = 24; i != -24; i -= 24)
      {
        STACK[0x300] = (unint64_t)(&a61 + i);
        std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::construct_at[abi:ne180100]<AMCP::Terminal_Description,AMCP::Terminal_Description const&,AMCP::Terminal_Description*>(uint64_t a1, __int128 *a2)
{
  char v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  std::string *v11;
  uint64_t v12;

  v4 = 0;
  v5 = 0;
  v6 = *a2;
  v7 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v6;
  *(_OWORD *)(a1 + 16) = v7;
  v8 = a1 + 40;
  v9 = (uint64_t)a2 + 40;
  do
  {
    v10 = v4;
    v11 = (std::string *)(v8 + 24 * v5);
    v11->__r_.__value_.__r.__words[0] = 0;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v11, *(__int128 **)(v9 + 24 * v5), *(__int128 **)(v9 + 24 * v5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v9 + 24 * v5 + 8) - *(_QWORD *)(v9 + 24 * v5)) >> 3));
    v4 = 1;
    v5 = 1;
  }
  while ((v10 & 1) == 0);
  v12 = *((_QWORD *)a2 + 11);
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_QWORD *)(a1 + 88) = v12;
  return a1;
}

void sub_1B594DE8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  uint64_t v15;

  if ((v12 & 1) == 0)
  {
    v14 = 24 * v11;
    v15 = v10 + 16;
    do
    {
      a10 = v15 + v14;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
      v14 -= 24;
    }
    while (v14);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<AMCP::Node_Description>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 120;
        std::__destroy_at[abi:ne180100]<AMCP::Node_Description,0>(v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::vector<AMCP::Node_Description>::__insert_with_size[abi:ne180100]<std::__wrap_iter<AMCP::Node_Description*>,std::__wrap_iter<AMCP::Node_Description*>>(uint64_t *result, uint64_t a2, const AMCP::Node_Description *a3, uint64_t a4, uint64_t a5)
{
  const AMCP::Node_Description *v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  int v29;
  void **v30;
  __int128 v31;
  void **v32;
  uint64_t v33;
  __int128 v34;
  uint64_t *v35;
  unint64_t v36;
  AMCP::Node_Description *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  AMCP::Node_Description *v44;
  unint64_t v45;
  unint64_t v46;
  AMCP::Node_Description *v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;

  if (a5 >= 1)
  {
    v6 = a3;
    v7 = a2;
    v8 = result;
    v9 = result + 2;
    v10 = result[2];
    v11 = result[1];
    if ((uint64_t)(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v10 - v11) >> 3)) >= a5)
    {
      v19 = v11 - a2;
      if ((uint64_t)(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v11 - a2) >> 3)) >= a5)
      {
        v20 = (uint64_t)a3 + 120 * a5;
        v21 = (uint64_t *)result[1];
      }
      else
      {
        v20 = (uint64_t)a3 + 8 * ((uint64_t)(v11 - a2) >> 3);
        result = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Node_Description>,AMCP::Node_Description*,AMCP::Node_Description*,AMCP::Node_Description*>(v20, a4, v11);
        v21 = result;
        v8[1] = (uint64_t)result;
        if (v19 < 1)
          return result;
      }
      v22 = v7 + 120 * a5;
      v23 = (unint64_t)&v21[-15 * a5];
      v24 = (uint64_t)v21;
      if (v23 < v11)
      {
        v25 = (unint64_t)&v21[-15 * a5];
        v24 = (uint64_t)v21;
        do
        {
          std::construct_at[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description,AMCP::Node_Description*>(v24, v25);
          v25 += 120;
          v24 = v26 + 120;
        }
        while (v25 < v11);
      }
      v8[1] = v24;
      if (v21 != (uint64_t *)v22)
      {
        v27 = v23;
        v28 = v21;
        do
        {
          v29 = *(_DWORD *)(v27 - 120);
          v27 -= 120;
          *((_DWORD *)v28 - 30) = v29;
          v28 -= 15;
          v30 = (void **)(v28 + 1);
          if (*((char *)v28 + 31) < 0)
            operator delete(*v30);
          v31 = *(_OWORD *)(v27 + 8);
          v28[3] = *(_QWORD *)(v27 + 24);
          *(_OWORD *)v30 = v31;
          *(_BYTE *)(v23 - 89) = 0;
          *(_BYTE *)(v23 - 112) = 0;
          *(v21 - 11) = *(_QWORD *)(v23 - 88);
          v32 = (void **)(v21 - 10);
          if (*((char *)v21 - 57) < 0)
            operator delete(*v32);
          v33 = 0;
          v34 = *(_OWORD *)(v23 - 80);
          *(v21 - 8) = *(_QWORD *)(v23 - 64);
          *(_OWORD *)v32 = v34;
          *(_BYTE *)(v23 - 57) = 0;
          *(_BYTE *)(v23 - 80) = 0;
          *(v21 - 7) = *(_QWORD *)(v23 - 56);
          do
          {
            v35 = &v21[v33];
            v36 = v23 + v33 * 8;
            std::vector<AMCP::Terminal_Description>::__vdeallocate(&v21[v33 - 6]);
            *((_OWORD *)v35 - 3) = *(_OWORD *)(v23 + v33 * 8 - 48);
            *(v35 - 4) = *(_QWORD *)(v23 + v33 * 8 - 32);
            *(_QWORD *)(v36 - 48) = 0;
            *(_QWORD *)(v36 - 40) = 0;
            *(_QWORD *)(v36 - 32) = 0;
            v33 += 3;
          }
          while (v33 != 6);
          v21 = v28;
          v23 = v27;
        }
        while (v27 != v7);
      }
      return (uint64_t *)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AMCP::Node_Description *,AMCP::Node_Description *,AMCP::Node_Description *>((uint64_t)v6, v20, v7);
    }
    else
    {
      v12 = *result;
      v13 = a5 - 0x1111111111111111 * ((uint64_t)(v11 - *result) >> 3);
      if (v13 > 0x222222222222222)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v14 = 0xEEEEEEEEEEEEEEEFLL * ((a2 - v12) >> 3);
      v15 = 0xEEEEEEEEEEEEEEEFLL * ((v10 - v12) >> 3);
      v16 = 2 * v15;
      if (2 * v15 <= v13)
        v16 = a5 - 0x1111111111111111 * ((uint64_t)(v11 - *result) >> 3);
      if (v15 >= 0x111111111111111)
        v17 = 0x222222222222222;
      else
        v17 = v16;
      v50 = v9;
      if (v17)
        v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Node_Description>>(v17);
      else
        v18 = 0;
      v37 = (AMCP::Node_Description *)(v17 + 120 * v14);
      v46 = v17;
      v47 = v37;
      v48 = (uint64_t)v37;
      v49 = v17 + 120 * v18;
      v38 = 120 * a5;
      v39 = (uint64_t)v37 + v38;
      do
      {
        AMCP::Node_Description::Node_Description(v37, v6);
        v37 = (AMCP::Node_Description *)((char *)v37 + 120);
        v6 = (const AMCP::Node_Description *)((char *)v6 + 120);
        v38 -= 120;
      }
      while (v38);
      v40 = (uint64_t)v47;
      v41 = *v8;
      if (*v8 != v7)
      {
        v42 = v7;
        do
        {
          v40 -= 120;
          v42 -= 120;
          std::construct_at[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description,AMCP::Node_Description*>(v40, v42);
        }
        while (v42 != v41);
      }
      v43 = v8[1];
      if (v43 != v7)
      {
        do
        {
          std::construct_at[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description,AMCP::Node_Description*>(v39, v7);
          v7 += 120;
          v39 += 120;
        }
        while (v7 != v43);
        v7 = v8[1];
      }
      v44 = (AMCP::Node_Description *)*v8;
      *v8 = v40;
      v8[1] = v39;
      v45 = v8[2];
      v8[2] = v49;
      v48 = v7;
      v49 = v45;
      v46 = (unint64_t)v44;
      v47 = v44;
      return (uint64_t *)std::__split_buffer<AMCP::Node_Description>::~__split_buffer((uint64_t)&v46);
    }
  }
  return result;
}

void sub_1B594E264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

void **std::pair<std::vector<AMCP::Node_Description>,std::shared_ptr<AMCP::IO_Core::Device_Node_State>>::~pair(void **a1)
{
  void **v3;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v3 = a1;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Node_Description>,AMCP::Node_Description*,AMCP::Node_Description*,AMCP::Node_Description*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      AMCP::Node_Description::Node_Description((AMCP::Node_Description *)(a3 + v6), (const AMCP::Node_Description *)(a1 + v6));
      v6 += 120;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AMCP::Node_Description *,AMCP::Node_Description *,AMCP::Node_Description *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      *(_DWORD *)a3 = *(_DWORD *)v5;
      std::string::operator=((std::string *)(a3 + 8), (const std::string *)(v5 + 8));
      *(_QWORD *)(a3 + 32) = *(_QWORD *)(v5 + 32);
      std::string::operator=((std::string *)(a3 + 40), (const std::string *)(v5 + 40));
      v6 = 0;
      v7 = 0;
      *(_QWORD *)(a3 + 64) = *(_QWORD *)(v5 + 64);
      do
      {
        v8 = v6;
        if (a3 != v5)
        {
          v9 = 3 * v7;
          std::vector<AMCP::Terminal_Description>::__assign_with_size[abi:ne180100]<AMCP::Terminal_Description*,AMCP::Terminal_Description*>((uint64_t *)(a3 + 72 + 8 * v9), *(__int128 **)(v5 + 72 + 8 * v9), *(__int128 **)(v5 + 72 + 8 * v9 + 8), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v5 + 72 + 8 * v9 + 8) - *(_QWORD *)(v5 + 72 + 8 * v9)) >> 3));
        }
        v6 = 1;
        v7 = 1;
      }
      while ((v8 & 1) == 0);
      v5 += 120;
      a3 += 120;
    }
    while (v5 != a2);
  }
  return a3;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Node_Description>>(unint64_t a1)
{
  if (a1 >= 0x222222222222223)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(120 * a1);
}

uint64_t std::__split_buffer<AMCP::Node_Description>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 120;
    std::__destroy_at[abi:ne180100]<AMCP::Node_Description,0>(i - 120);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 std::construct_at[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description,AMCP::Node_Description*>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _QWORD *v5;
  _QWORD *v6;
  __n128 result;

  v2 = 0;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  do
  {
    v5 = (_QWORD *)(a1 + v2);
    v6 = (_QWORD *)(a2 + v2);
    v5[9] = 0;
    v5[10] = 0;
    v5[11] = 0;
    result = *(__n128 *)(a2 + v2 + 72);
    *(__n128 *)(v5 + 9) = result;
    v5[11] = *(_QWORD *)(a2 + v2 + 88);
    v6[9] = 0;
    v6[10] = 0;
    v6[11] = 0;
    v2 += 24;
  }
  while (v2 != 48);
  return result;
}

void std::vector<AMCP::Terminal_Description>::__assign_with_size[abi:ne180100]<AMCP::Terminal_Description*,AMCP::Terminal_Description*>(uint64_t *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t i;
  uint64_t j;
  void **v17;

  v8 = (uint64_t)(a1 + 2);
  v9 = *a1;
  if (0x4EC4EC4EC4EC4EC5 * ((a1[2] - *a1) >> 3) < a4)
  {
    std::vector<AMCP::Terminal_Description>::__vdeallocate(a1);
    if (a4 > 0x276276276276276)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v10 = 0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[2] - *a1) >> 3)) >= 0x13B13B13B13B13BLL)
      v11 = 0x276276276276276;
    else
      v11 = v10;
    std::vector<AMCP::Terminal_Description>::__vallocate[abi:ne180100](a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Terminal_Description>,AMCP::Terminal_Description*,AMCP::Terminal_Description*,AMCP::Terminal_Description*>(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0x4EC4EC4EC4EC4EC5 * ((a1[1] - v9) >> 3) < a4)
  {
    v13 = (__int128 *)((char *)a2 + 8 * ((a1[1] - v9) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AMCP::Terminal_Description *,AMCP::Terminal_Description *,AMCP::Terminal_Description *>(a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Terminal_Description>,AMCP::Terminal_Description*,AMCP::Terminal_Description*,AMCP::Terminal_Description*>(v8, v13, a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  v14 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AMCP::Terminal_Description *,AMCP::Terminal_Description *,AMCP::Terminal_Description *>(a2, a3, v9);
  for (i = a1[1]; i != v14; i -= 104)
  {
    for (j = -40; j != -88; j -= 24)
    {
      v17 = (void **)(i + j);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v17);
    }
  }
  a1[1] = v14;
}

void sub_1B594E6E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B594E6E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AMCP::Terminal_Description *,AMCP::Terminal_Description *,AMCP::Terminal_Description *>(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = 0;
      v7 = 0;
      v8 = *v5;
      v9 = v5[1];
      *(_QWORD *)(a3 + 32) = *((_QWORD *)v5 + 4);
      *(_OWORD *)a3 = v8;
      *(_OWORD *)(a3 + 16) = v9;
      do
      {
        v10 = v6;
        if ((__int128 *)a3 != v5)
        {
          v11 = 3 * v7;
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a3 + 40 + 8 * v11), *((std::string **)v5 + v11 + 5), *((__int128 **)v5 + v11 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v5 + v11 + 6) - *((_QWORD *)v5 + v11 + 5)) >> 3));
        }
        v6 = 1;
        v7 = 1;
      }
      while ((v10 & 1) == 0);
      v12 = *((_QWORD *)v5 + 11);
      *(_BYTE *)(a3 + 96) = *((_BYTE *)v5 + 96);
      *(_QWORD *)(a3 + 88) = v12;
      v5 = (__int128 *)((char *)v5 + 104);
      a3 += 104;
    }
    while (v5 != a2);
  }
  return a3;
}

void std::vector<AMCP::Terminal_Description>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<AMCP::Terminal_Description>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *end;
  __int128 *v14;
  uint64_t v15;

  v6 = (__int128 *)__str;
  p_end_cap = (uint64_t)&a1->__end_cap_;
  begin = a1->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100](a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(p_end_cap, v6, a3, a1->__end_);
LABEL_15:
    a1->__end_ = v12;
    return;
  }
  end = a1->__end_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3) < a4)
  {
    v14 = (__int128 *)(&__str->__r_.__value_.__l.__data_ + (((char *)end - (char *)begin) >> 3));
    if (end != begin)
    {
      v15 = 8 * (((char *)end - (char *)begin) >> 3);
      do
      {
        std::string::operator=(begin, (const std::string *)v6);
        v6 = (__int128 *)((char *)v6 + 24);
        ++begin;
        v15 -= 24;
      }
      while (v15);
      begin = a1->__end_;
    }
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(p_end_cap, v14, a3, begin);
    goto LABEL_15;
  }
  if (__str != (std::string *)a3)
  {
    do
    {
      std::string::operator=(begin, (const std::string *)v6);
      v6 = (__int128 *)((char *)v6 + 24);
      ++begin;
    }
    while (v6 != a3);
    end = a1->__end_;
  }
  while (end != begin)
  {
    if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(end[-1].__r_.__value_.__l.__data_);
    --end;
  }
  a1->__end_ = begin;
}

void sub_1B594E988(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

void std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>>>::__emplace_unique_key_args<AMCP::Terminal_Identifier,std::pair<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>>(uint64_t a1, unsigned __int8 **a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  int8x8_t prime;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  void *v38;
  unsigned __int8 **v39[3];
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;

  v7 = std::hash<AMCP::Terminal_Identifier>::operator()((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v8)
          {
            v40 = v13 + 2;
            v41 = v13 + 5;
            v42 = v13 + 6;
            v39[0] = a2;
            v39[1] = a2 + 3;
            v39[2] = a2 + 4;
            if (std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)&v40, v39))
            {
              return;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v16 = operator new(0x198uLL);
  v40 = v16;
  v41 = (_QWORD *)(a1 + 16);
  *v16 = 0;
  v16[1] = v8;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v17 = *(_QWORD *)(a3 + 24);
  v16[4] = *(_QWORD *)(a3 + 16);
  v16[5] = v17;
  *((_DWORD *)v16 + 12) = *(_DWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 16) = 0;
  AMCP::IO_Core::Stream_Connection::Stream_Connection((uint64_t)(v16 + 7), (__int128 *)(a3 + 40));
  LOBYTE(v42) = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = (int8x8_t)v22;
    else
      prime = (int8x8_t)v21;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (*(_QWORD *)&prime <= v30)
        prime = (int8x8_t)v30;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v24 = operator new(8 * *(_QWORD *)&prime);
          v25 = *(void **)a1;
          *(_QWORD *)a1 = v24;
          if (v25)
            operator delete(v25);
          v26 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v26++) = 0;
          while (*(_QWORD *)&prime != v26);
          v27 = (_QWORD *)*v15;
          if (*v15)
          {
            v28 = v27[1];
            v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(_QWORD *)&prime)
                v28 %= *(_QWORD *)&prime;
            }
            else
            {
              v28 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v15;
            v33 = (_QWORD *)*v27;
            if (*v27)
            {
              do
              {
                v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(_QWORD *)&prime)
                    v34 %= *(_QWORD *)&prime;
                }
                else
                {
                  v34 &= *(_QWORD *)&prime - 1;
                }
                if (v34 != v28)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v34))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v27;
                    goto LABEL_55;
                  }
                  *v27 = *v33;
                  *v33 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v34);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v34) = v33;
                  v33 = v27;
                }
                v34 = v28;
LABEL_55:
                v27 = v33;
                v33 = (_QWORD *)*v33;
                v28 = v34;
              }
              while (v33);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v38 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v38)
          operator delete(v38);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v35 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v36 = v40;
  if (v35)
  {
    *v40 = *v35;
LABEL_72:
    *v35 = v36;
    goto LABEL_73;
  }
  *v40 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v36;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v15;
  if (*v36)
  {
    v37 = *(_QWORD *)(*v36 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v37 >= v9)
        v37 %= v9;
    }
    else
    {
      v37 &= v9 - 1;
    }
    v35 = (_QWORD *)(*(_QWORD *)a1 + 8 * v37);
    goto LABEL_72;
  }
LABEL_73:
  v40 = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,void *>>>>::reset[abi:ne180100]((uint64_t)&v40);
}

void sub_1B594EE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AMCP::IO_Core::Stream_Connection::~Stream_Connection(OpaqueAudioConverter **this)
{
  std::unique_ptr<OpaqueAudioConverter,AMCP::IO_Core::Stream_Connection::AudioConverter_Deleter>::reset[abi:ne180100](this + 43, 0);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(this + 41));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(this + 34));
  if (*((_BYTE *)this + 264))
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(this + 31));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(this + 26));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(this + 24));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(this + 17));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(this + 12));
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t std::pair<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>::~pair(uint64_t a1)
{
  AMCP::IO_Core::Stream_Connection::~Stream_Connection((OpaqueAudioConverter **)(a1 + 40));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

OpaqueAudioConverter *std::unique_ptr<OpaqueAudioConverter,AMCP::IO_Core::Stream_Connection::AudioConverter_Deleter>::reset[abi:ne180100](OpaqueAudioConverter **a1, OpaqueAudioConverter *a2)
{
  OpaqueAudioConverter *result;

  result = *a1;
  *a1 = a2;
  if (result)
    return (OpaqueAudioConverter *)AudioConverterDispose(result);
  return result;
}

__n128 AMCP::IO_Core::Stream_Connection::Stream_Connection(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v3 = *((_QWORD *)a2 + 3);
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(__int128 *)((char *)a2 + 40);
  *(_OWORD *)(a1 + 56) = *(__int128 *)((char *)a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  v5 = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_OWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 96) = a2[6];
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 13) = 0;
  v6 = a2[7];
  *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
  *(_OWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 136) = *(__int128 *)((char *)a2 + 136);
  *((_QWORD *)a2 + 17) = 0;
  *((_QWORD *)a2 + 18) = 0;
  v7 = *(__int128 *)((char *)a2 + 152);
  v8 = *(__int128 *)((char *)a2 + 168);
  *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
  *(_OWORD *)(a1 + 168) = v8;
  *(_OWORD *)(a1 + 152) = v7;
  *(_OWORD *)(a1 + 192) = a2[12];
  *((_QWORD *)a2 + 24) = 0;
  *((_QWORD *)a2 + 25) = 0;
  *(_OWORD *)(a1 + 208) = a2[13];
  *((_QWORD *)a2 + 26) = 0;
  *((_QWORD *)a2 + 27) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  if (*((_BYTE *)a2 + 264))
  {
    v9 = a2[14];
    *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
    *(_OWORD *)(a1 + 224) = v9;
    *(_OWORD *)(a1 + 248) = *(__int128 *)((char *)a2 + 248);
    *((_QWORD *)a2 + 31) = 0;
    *((_QWORD *)a2 + 32) = 0;
    *(_BYTE *)(a1 + 264) = 1;
  }
  *(_OWORD *)(a1 + 272) = a2[17];
  *((_QWORD *)a2 + 34) = 0;
  *((_QWORD *)a2 + 35) = 0;
  result = (__n128)a2[18];
  v11 = a2[19];
  *(_QWORD *)(a1 + 320) = *((_QWORD *)a2 + 40);
  *(__n128 *)(a1 + 288) = result;
  *(_OWORD *)(a1 + 304) = v11;
  v12 = *((_QWORD *)a2 + 42);
  *(_QWORD *)(a1 + 328) = *((_QWORD *)a2 + 41);
  *(_QWORD *)(a1 + 336) = v12;
  *((_QWORD *)a2 + 41) = 0;
  *((_QWORD *)a2 + 42) = 0;
  v13 = *((_QWORD *)a2 + 43);
  *((_QWORD *)a2 + 43) = 0;
  *(_QWORD *)(a1 + 344) = v13;
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<AMCP::Terminal_Identifier const,AMCP::IO_Core::Stream_Connection>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<AMCP::Terminal_Identifier const,AMCP::IO_Core::Stream_Connection>,0>(uint64_t a1)
{
  AMCP::IO_Core::Stream_Connection::~Stream_Connection((OpaqueAudioConverter **)(a1 + 40));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

char *std::vector<AMCP::Node_Description>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x222222222222223)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Node_Description>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[120 * v4];
  return result;
}

uint64_t *std::vector<AMCP::Terminal_Description>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v6 = a2[1];
  }
  else
  {
    do
    {
      v5 = 0;
      v6 = v4 - 104;
      v7 = v3 - 104;
      v8 = *(_OWORD *)(v3 - 104);
      v9 = *(_OWORD *)(v3 - 88);
      *(_QWORD *)(v4 - 72) = *(_QWORD *)(v3 - 72);
      *(_OWORD *)(v4 - 88) = v9;
      *(_OWORD *)(v4 - 104) = v8;
      do
      {
        v10 = v4 + v5;
        v11 = v3 + v5;
        *(_QWORD *)(v10 - 64) = 0;
        *(_QWORD *)(v10 - 56) = 0;
        *(_QWORD *)(v10 - 48) = 0;
        *(_OWORD *)(v10 - 64) = *(_OWORD *)(v3 + v5 - 64);
        *(_QWORD *)(v10 - 48) = *(_QWORD *)(v3 + v5 - 48);
        *(_QWORD *)(v11 - 64) = 0;
        *(_QWORD *)(v11 - 56) = 0;
        *(_QWORD *)(v11 - 48) = 0;
        v5 += 24;
      }
      while (v5 != 48);
      v12 = *(_QWORD *)(v3 - 16);
      *(_BYTE *)(v4 - 8) = *(_BYTE *)(v3 - 8);
      *(_QWORD *)(v4 - 16) = v12;
      v4 -= 104;
      v3 -= 104;
    }
    while (v7 != v2);
  }
  a2[1] = v6;
  v13 = *result;
  *result = v6;
  a2[1] = v13;
  v14 = result[1];
  result[1] = a2[2];
  a2[2] = v14;
  v15 = result[2];
  result[2] = a2[3];
  a2[3] = v15;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<AMCP::Terminal_Description>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v7;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = 0;
    *(_QWORD *)(a1 + 16) = i - 104;
    v5 = i - 40;
    do
    {
      v7 = (void **)(v5 + v4);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
      v4 -= 24;
    }
    while (v4 != -48);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void HALS_IOUARegistrar::~HALS_IOUARegistrar(HALS_IOUARegistrar *this)
{
  HALS_IOUARegistrar::~HALS_IOUARegistrar(this);
  JUMPOUT(0x1B5E50688);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E6976110;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)this + 44));
  v2 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v2)
    std::default_delete<applesauce::iokit::io_service_factory>::operator()[abi:ne180100](v2);
  v3 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v3)
    std::default_delete<applesauce::iokit::io_service_factory>::operator()[abi:ne180100](v3);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_IOUARegistrar *)((char *)this + 8));
}

void std::__function::__func<HALS_IOUARegistrar::Initialize(void)::$_1,std::allocator<HALS_IOUARegistrar::Initialize(void)::$_1>,void ()(applesauce::iokit::io_object_holder)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOUARegistrar::Initialize(void)::$_1,std::allocator<HALS_IOUARegistrar::Initialize(void)::$_1>,void ()(applesauce::iokit::io_object_holder)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69761C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HALS_IOUARegistrar::Initialize(void)::$_1,std::allocator<HALS_IOUARegistrar::Initialize(void)::$_1>,void ()(applesauce::iokit::io_object_holder)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69761C0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<HALS_IOUARegistrar::Initialize(void)::$_1,std::allocator<HALS_IOUARegistrar::Initialize(void)::$_1>,void ()(applesauce::iokit::io_object_holder)>::operator()(AMCP::Log::Scope_Registry *a1, io_object_t *a2)
{
  io_object_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  AMCP::Log::Scope_Registry *v6;
  uint64_t **v7;
  io_object_t v8;
  uint64_t *v9;
  uint64_t v10;
  io_object_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  io_object_t v15;
  unint64_t *v16;
  unint64_t v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t *v20;
  BOOL v21;
  HALS_DeviceManager *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  HALS_Object *v31;
  std::__shared_weak_count *v32;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  _opaque_pthread_t *v36;
  mach_port_t v37;
  AMCP::Log::Scope_Registry *v38;
  void *v39;
  const std::error_category *v40;
  void *exception;
  const std::error_category *v42;
  void *v43;
  const std::error_category *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  io_object_t anObject;
  NSObject **block;
  __int128 v49;
  void *v50;
  HALS_DeviceManager *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  *a2 = 0;
  v3 = *((_QWORD *)a1 + 1);
  if (v2)
  {
    v4 = IOObjectRetain(v2);
    if ((_DWORD)v4)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v42 = std::system_category();
      MEMORY[0x1B5E5022C](exception, v4, v42, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
    v5 = *(uint64_t **)(v3 + 344);
    anObject = v2;
    a1 = (AMCP::Log::Scope_Registry *)IOObjectRetain(v2);
    v6 = a1;
    if ((_DWORD)a1)
    {
      v43 = __cxa_allocate_exception(0x20uLL);
      v44 = std::system_category();
      MEMORY[0x1B5E5022C](v43, v6, v44, "Error on Retain");
      __cxa_throw(v43, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
    v7 = (uint64_t **)(v3 + 344);
    v8 = v2;
  }
  else
  {
    v8 = 0;
    v7 = (uint64_t **)(v3 + 344);
    v5 = *(uint64_t **)(v3 + 344);
    anObject = 0;
  }
  v9 = (uint64_t *)(v3 + 352);
  if (v5 != (uint64_t *)(v3 + 352))
  {
    while (1)
    {
      v10 = v5[4];
      if (v10)
        break;
LABEL_24:
      v19 = (uint64_t *)v5[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (uint64_t *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (uint64_t *)v5[2];
          v21 = *v20 == (_QWORD)v5;
          v5 = v20;
        }
        while (!v21);
      }
      v5 = v20;
      if (v20 == v9)
        goto LABEL_30;
    }
    v11 = *(io_object_t **)(v10 + 792);
    v12 = *(std::__shared_weak_count **)(v10 + 800);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *v11;
    if (*v11)
    {
      a1 = (AMCP::Log::Scope_Registry *)IOObjectRetain(*v11);
      if ((_DWORD)a1)
      {
        v38 = a1;
        v39 = __cxa_allocate_exception(0x20uLL);
        v40 = std::system_category();
        MEMORY[0x1B5E5022C](v39, v38, v40, "Error on Retain");
        __cxa_throw(v39, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
      }
    }
    if (v12)
    {
      v16 = (unint64_t *)&v12->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v8 = anObject;
    v18 = (v15 | anObject) == 0;
    if (v15 && anObject)
    {
      v18 = IOObjectIsEqualTo(v15, anObject) != 0;
    }
    else if (!v15)
    {
      goto LABEL_23;
    }
    a1 = (AMCP::Log::Scope_Registry *)IOObjectRelease(v15);
LABEL_23:
    if (v18)
      goto LABEL_31;
    goto LABEL_24;
  }
LABEL_30:
  v5 = v9;
LABEL_31:
  if (v8)
    a1 = (AMCP::Log::Scope_Registry *)IOObjectRelease(v8);
  if (v5 == v9)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&block, "com.apple.coreaudio", "AMCP");
    v32 = (std::__shared_weak_count *)v49;
    v33 = *block;
    if ((_QWORD)v49)
    {
      v34 = (unint64_t *)(v49 + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      v36 = pthread_self();
      v37 = pthread_mach_thread_np(v36);
      LODWORD(block) = 67109634;
      HIDWORD(block) = v37;
      LOWORD(v49) = 2080;
      *(_QWORD *)((char *)&v49 + 2) = "HALS_IOUARegistrar.cpp";
      WORD5(v49) = 1024;
      HIDWORD(v49) = 128;
      _os_log_debug_impl(&dword_1B57BA000, v33, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Unknown io service termination", (uint8_t *)&block, 0x18u);
      if (!v2)
        return;
    }
    else if (!v2)
    {
      return;
    }
LABEL_55:
    IOObjectRelease(v2);
    IOObjectRelease(v2);
    return;
  }
  v22 = (HALS_DeviceManager *)v5[4];
  v45 = 0;
  v46 = 0;
  HALS_System::GetInstance(&block, 0, &v45);
  HALS_System::DeviceManagerDestroyed((HALS_System *)block, v22);
  v23 = (std::__shared_weak_count *)v49;
  if ((_QWORD)v49)
  {
    v24 = (unint64_t *)(v49 + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v46;
  if (v46)
  {
    v27 = (unint64_t *)&v46->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (*(uint64_t (**)(HALS_DeviceManager *))(*(_QWORD *)v22 + 64))(v22);
  block = (NSObject **)MEMORY[0x1E0C809B0];
  *(_QWORD *)&v49 = 0x40000000;
  *((_QWORD *)&v49 + 1) = ___ZN15HALS_IOUADriver25RemoveAllDevicesAndNotifyEv_block_invoke;
  v50 = &__block_descriptor_tmp_2550;
  v51 = v22;
  v30 = atomic_load((unsigned __int8 *)(v29 + 32));
  if ((v30 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(v29 + 33));
  dispatch_sync(*(dispatch_queue_t *)v29, &block);
  HALS_ObjectMap::ReleaseObject(v22, v31);
  std::__tree<HALS_IOUADriver *>::__remove_node_pointer(v7, v5);
  operator delete(v5);
  if (v2)
    goto LABEL_55;
}

void sub_1B594F7C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, char a13, __int16 a14, char a15, char a16)
{
  io_object_t v16;
  void *v17;

  if (a2)
  {
    __cxa_free_exception(v17);
    IOObjectRelease(v16);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    if (!v16)
      JUMPOUT(0x1B594F650);
    JUMPOUT(0x1B594F648);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<HALS_IOUARegistrar::Initialize(void)::$_1,std::allocator<HALS_IOUARegistrar::Initialize(void)::$_1>,void ()(applesauce::iokit::io_object_holder)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN18HALS_IOUARegistrar10InitializeEvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOUARegistrar::Initialize(void)::$_1,std::allocator<HALS_IOUARegistrar::Initialize(void)::$_1>,void ()(applesauce::iokit::io_object_holder)>::target_type()
{
}

uint64_t *std::__tree<HALS_IOUADriver *>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  return std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
}

io_object_t *HALS_IOUARegistrar::_HandleServiceTerminated(applesauce::iokit::io_object_holder)::$_0::~$_0(io_object_t *a1)
{
  io_object_t v2;

  v2 = *a1;
  if (v2)
    IOObjectRelease(v2);
  return a1;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 != v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v18 = v7[1];
      *(_QWORD *)v12 = v18;
      if (v18)
        *(_QWORD *)(v18 + 16) = v12;
      v7[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(_QWORD *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12)
        result = v7;
      v7 = *(uint64_t **)v12;
    }
    v19 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v19 + 24))
      goto LABEL_68;
    v20 = (uint64_t *)v7[1];
    if (v20 && !*((_BYTE *)v20 + 24))
    {
      if (v19 && !*((_BYTE *)v19 + 24))
      {
LABEL_68:
        v20 = v7;
      }
      else
      {
        *((_BYTE *)v20 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v26 = *v20;
        v7[1] = *v20;
        if (v26)
          *(_QWORD *)(v26 + 16) = v7;
        v20[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
        *v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        v19 = v7;
      }
      v23 = v20[2];
      *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v24 = *(uint64_t **)v23;
      v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
      *(_QWORD *)v23 = v27;
      if (v27)
        *(_QWORD *)(v27 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v13 = *(uint64_t **)(v12 + 8);
    v14 = *v13;
    *(_QWORD *)(v12 + 8) = *v13;
    if (v14)
      *(_QWORD *)(v14 + 16) = v12;
    v13[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
    *v13 = v12;
    *(_QWORD *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
  }
  v15 = (_QWORD *)*v7;
  if (!*v7 || *((_BYTE *)v15 + 24))
  {
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_59;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
    goto LABEL_49;
  }
  v16 = (uint64_t *)v7[1];
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_59:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = v15[1];
    *v7 = v22;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v16 = v7;
  }
  v23 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v24 = *(uint64_t **)(v23 + 8);
  v25 = *v24;
  *(_QWORD *)(v23 + 8) = *v24;
  if (v25)
    *(_QWORD *)(v25 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  *v24 = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

void std::__function::__func<HALS_IOUARegistrar::Initialize(void)::$_0,std::allocator<HALS_IOUARegistrar::Initialize(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOUARegistrar::Initialize(void)::$_0,std::allocator<HALS_IOUARegistrar::Initialize(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6976140;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HALS_IOUARegistrar::Initialize(void)::$_0,std::allocator<HALS_IOUARegistrar::Initialize(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6976140;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<HALS_IOUARegistrar::Initialize(void)::$_0,std::allocator<HALS_IOUARegistrar::Initialize(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::operator()(uint64_t a1, io_object_t *a2)
{
  io_object_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  HALS_Object *v7;
  HALS_System *v8;
  uint64_t v9;
  char *v10;
  io_object_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const std::error_category *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  HALS_System **v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  io_object_t v27;
  uint64_t (***v28)();
  uint64_t v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t **v38;
  unint64_t v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t result;
  void *exception;
  const std::error_category *v51;
  void *v52;
  const std::error_category *v53;
  void *v54;
  const std::error_category *v55;
  io_object_t object;
  io_object_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  HALS_System *v60;
  std::__shared_weak_count *v61;
  HALS_DeviceManager *v62;
  uint64_t (**v63)();
  std::__shared_weak_count *v64;
  uint64_t *v65;
  HALS_System *v66;
  std::__shared_weak_count *v67;
  HALS_System **v68;
  _QWORD v69[3];
  _QWORD *v70;
  _QWORD v71[5];

  v71[3] = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  *a2 = 0;
  v3 = *(_QWORD *)(a1 + 8);
  object = v2;
  if (v2)
  {
    v4 = IOObjectRetain(v2);
    if ((_DWORD)v4)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v51 = std::system_category();
      MEMORY[0x1B5E5022C](exception, v4, v51, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
  }
  v62 = 0;
  v5 = operator new();
  v58 = 0;
  v59 = 0;
  HALS_System::GetInstance(&v60, 0, &v58);
  v8 = v60;
  v57 = v2;
  if (v2)
  {
    v9 = IOObjectRetain(v2);
    if ((_DWORD)v9)
    {
      v52 = __cxa_allocate_exception(0x20uLL);
      v53 = std::system_category();
      MEMORY[0x1B5E5022C](v52, v9, v53, "Error on Retain");
      __cxa_throw(v52, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
  }
  HALS_DeviceManager::HALS_DeviceManager((HALS_DeviceManager *)v5, v8, CFSTR("com.apple.audio.IOUserAudio"), v6, v7);
  *(_DWORD *)(v5 + 344) = 1;
  *(_QWORD *)(v5 + 360) = 0;
  *(_QWORD *)(v5 + 368) = 0;
  *(_QWORD *)(v5 + 352) = 0;
  *(_QWORD *)v5 = off_1E6973FD0;
  *(_QWORD *)(v5 + 328) = &unk_1E6974110;
  *(_QWORD *)(v5 + 336) = v5;
  HALB_Mutex::HALB_Mutex((HALB_Mutex *)(v5 + 376));
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue(v5 + 472, "com.apple.audio.manager.IOUA.event");
  v10 = (char *)operator new(0x2F0uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1E69742F8;
  v11 = (io_object_t *)(v10 + 24);
  if (v2)
  {
    v12 = IOObjectRetain(v2);
    if ((_DWORD)v12)
    {
      v54 = __cxa_allocate_exception(0x20uLL);
      v55 = std::system_category();
      MEMORY[0x1B5E5022C](v54, v12, v55, "Error on Retain");
      __cxa_throw(v54, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
    *v11 = v2;
    v13 = IOObjectRetain(v2);
    if ((_DWORD)v13)
    {
      v14 = __cxa_allocate_exception(0x20uLL);
      v15 = std::system_category();
      MEMORY[0x1B5E5022C](v14, v13, v15, "Error on Retain");
      __cxa_throw(v14, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
  }
  else
  {
    *v11 = 0;
  }
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((uint64_t)(v10 + 32), "notification queue");
  applesauce::iokit::details::io_notificationport_holder::io_notificationport_holder((applesauce::iokit::details::io_notificationport_holder *)(v10 + 352));
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((uint64_t)(v10 + 360), "config change queue");
  applesauce::iokit::details::io_notificationport_holder::io_notificationport_holder((applesauce::iokit::details::io_notificationport_holder *)(v10 + 680));
  v16 = v10 + 688;
  *((_QWORD *)v10 + 89) = 0;
  *((_QWORD *)v10 + 93) = 0;
  IONotificationPortSetDispatchQueue(*((IONotificationPortRef *)v10 + 44), *((dispatch_queue_t *)v10 + 4));
  IONotificationPortSetDispatchQueue(*((IONotificationPortRef *)v10 + 85), *((dispatch_queue_t *)v10 + 45));
  if (object)
    IOObjectRelease(object);
  *(_QWORD *)(v5 + 792) = v11;
  *(_QWORD *)(v5 + 800) = v10;
  *(_QWORD *)(v5 + 872) = 0;
  *(_OWORD *)(v5 + 808) = 0u;
  *(_OWORD *)(v5 + 824) = 0u;
  *(_OWORD *)(v5 + 840) = 0u;
  *(_OWORD *)(v5 + 856) = 0u;
  v66 = (HALS_System *)&off_1E6974348;
  v67 = (std::__shared_weak_count *)v5;
  v68 = &v66;
  v70 = v69;
  std::__function::__func<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_0,std::allocator<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_0>,void ()(unsigned int,std::vector<AudioObjectPropertyAddress> const&)>::__clone((uint64_t)&v66, v69);
  v17 = v70;
  v18 = (_QWORD *)*((_QWORD *)v10 + 89);
  if (v70 == v69)
  {
    if (v18 == v16)
    {
      (*(void (**)(_QWORD *, uint64_t (***)()))(v69[0] + 24))(v69, &v63);
      (*(void (**)(_QWORD *))(*v70 + 32))(v70);
      v70 = 0;
      (*(void (**)(_QWORD, _QWORD *))(**((_QWORD **)v10 + 89) + 24))(*((_QWORD *)v10 + 89), v69);
      (*(void (**)(_QWORD))(**((_QWORD **)v10 + 89) + 32))(*((_QWORD *)v10 + 89));
      *((_QWORD *)v10 + 89) = 0;
      v70 = v69;
      ((void (*)(uint64_t (***)(), char *))v63[3])(&v63, v10 + 688);
      ((void (*)(uint64_t (***)()))v63[4])(&v63);
      *((_QWORD *)v10 + 89) = v16;
      v18 = v70;
    }
    else
    {
      (*(void (**)(_QWORD *, char *))(v69[0] + 24))(v69, v10 + 688);
      (*(void (**)(_QWORD *))(*v70 + 32))(v70);
      v18 = (_QWORD *)*((_QWORD *)v10 + 89);
      v70 = v18;
      *((_QWORD *)v10 + 89) = v16;
    }
  }
  else
  {
    if (v18 == v16)
    {
      v18 = v69;
      (*(void (**)(char *, _QWORD *))(*v16 + 24))(v10 + 688, v69);
      (*(void (**)(_QWORD))(**((_QWORD **)v10 + 89) + 32))(*((_QWORD *)v10 + 89));
      *((_QWORD *)v10 + 89) = v70;
      v70 = v69;
      v19 = 4;
      goto LABEL_23;
    }
    v70 = (_QWORD *)*((_QWORD *)v10 + 89);
    *((_QWORD *)v10 + 89) = v17;
  }
  if (v18 == v69)
  {
    v19 = 4;
    v18 = v69;
  }
  else
  {
    if (!v18)
      goto LABEL_24;
    v19 = 5;
  }
LABEL_23:
  (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
LABEL_24:
  v20 = v68;
  if (v68 == &v66)
  {
    v21 = 4;
    v20 = &v66;
  }
  else
  {
    if (!v68)
      goto LABEL_29;
    v21 = 5;
  }
  (*((void (**)(void))*v20 + v21))();
LABEL_29:
  v22 = *(_QWORD *)(v5 + 792);
  v63 = &off_1E69743D8;
  v64 = (std::__shared_weak_count *)v5;
  v65 = (uint64_t *)&v63;
  v23 = (_QWORD *)(v22 + 696);
  v70 = v69;
  std::__function::__func<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_1,std::allocator<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_1>,void ()(unsigned int,unsigned long long,unsigned long long)>::__clone((uint64_t)&v63, v69);
  v24 = v70;
  if ((_QWORD *)(v22 + 696) != v69)
  {
    v25 = *(_QWORD **)(v22 + 720);
    if (v70 == v69)
    {
      if (v25 == v23)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v69[0] + 24))(v69, v71);
        (*(void (**)(_QWORD *))(*v70 + 32))(v70);
        v70 = 0;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v22 + 720) + 24))(*(_QWORD *)(v22 + 720), v69);
        (*(void (**)(_QWORD))(**(_QWORD **)(v22 + 720) + 32))(*(_QWORD *)(v22 + 720));
        *(_QWORD *)(v22 + 720) = 0;
        v70 = v69;
        (*(void (**)(_QWORD *, uint64_t))(v71[0] + 24))(v71, v22 + 696);
        (*(void (**)(_QWORD *))(v71[0] + 32))(v71);
        *(_QWORD *)(v22 + 720) = v23;
        v24 = v70;
      }
      else
      {
        (*(void (**)(_QWORD *, uint64_t))(v69[0] + 24))(v69, v22 + 696);
        (*(void (**)(_QWORD *))(*v70 + 32))(v70);
        v24 = *(_QWORD **)(v22 + 720);
        v70 = v24;
        *(_QWORD *)(v22 + 720) = v23;
      }
    }
    else
    {
      if (v25 == v23)
      {
        v24 = v69;
        (*(void (**)(uint64_t, _QWORD *))(*v23 + 24))(v22 + 696, v69);
        (*(void (**)(_QWORD))(**(_QWORD **)(v22 + 720) + 32))(*(_QWORD *)(v22 + 720));
        *(_QWORD *)(v22 + 720) = v70;
        v70 = v69;
        v26 = 4;
LABEL_41:
        v27 = object;
        goto LABEL_42;
      }
      v70 = *(_QWORD **)(v22 + 720);
      *(_QWORD *)(v22 + 720) = v24;
      v24 = v25;
    }
  }
  if (v24 == v69)
  {
    v26 = 4;
    v24 = v69;
    goto LABEL_41;
  }
  v27 = object;
  if (!v24)
    goto LABEL_43;
  v26 = 5;
LABEL_42:
  (*(void (**)(_QWORD *))(*v24 + 8 * v26))(v24);
LABEL_43:
  v28 = (uint64_t (***)())v65;
  if (v65 == (uint64_t *)&v63)
  {
    v29 = 4;
    v28 = &v63;
  }
  else
  {
    if (!v65)
      goto LABEL_48;
    v29 = 5;
  }
  (*v28)[v29]();
LABEL_48:
  v30 = (uint64_t *)v57;
  if (v57)
    v30 = (uint64_t *)IOObjectRelease(v57);
  v31 = v61;
  if (v61)
  {
    p_shared_owners = (unint64_t *)&v61->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v59;
  if (v59)
  {
    v35 = (unint64_t *)&v59->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v62 = (HALS_DeviceManager *)v5;
  v37 = *(uint64_t **)(v3 + 352);
  if (v37)
  {
    while (1)
    {
      while (1)
      {
        v38 = (uint64_t **)v37;
        v39 = v37[4];
        if (v5 >= v39)
          break;
        v37 = *v38;
        v40 = v38;
        if (!*v38)
          goto LABEL_68;
      }
      if (v39 >= v5)
        break;
      v37 = v38[1];
      if (!v37)
      {
        v40 = v38 + 1;
        goto LABEL_68;
      }
    }
  }
  else
  {
    v40 = (uint64_t **)(v3 + 352);
    v38 = (uint64_t **)(v3 + 352);
LABEL_68:
    v41 = (uint64_t *)operator new(0x28uLL);
    v41[4] = v5;
    *v41 = 0;
    v41[1] = 0;
    v41[2] = (uint64_t)v38;
    *v40 = v41;
    v42 = **(_QWORD **)(v3 + 344);
    if (v42)
    {
      *(_QWORD *)(v3 + 344) = v42;
      v41 = *v40;
    }
    v30 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 352), v41);
    ++*(_QWORD *)(v3 + 360);
  }
  LODWORD(v69[0]) = MEMORY[0x1B5E5064C](v30);
  v69[1] = &v62;
  v69[2] = v3;
  v63 = 0;
  v64 = 0;
  HALS_System::GetInstance(&v66, 0, (uint64_t *)&v63);
  HALS_System::DeviceManagerCreated(v66, v62);
  v43 = v67;
  if (v67)
  {
    v44 = (unint64_t *)&v67->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v64;
  if (v64)
  {
    v47 = (unint64_t *)&v64->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  result = applesauce::raii::v1::detail::ScopeGuard<HALS_IOUARegistrar::_HandleServiceMatch(applesauce::iokit::io_object_holder)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)v69);
  if (v27)
  {
    IOObjectRelease(v27);
    return IOObjectRelease(v27);
  }
  return result;
}

void sub_1B5950600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, AMCP::Utility::Dispatch_Queue *a10, HALB_Mutex *a11, io_object_t object, io_object_t a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  void *v29;
  std::__shared_weak_count *v30;
  void *v32;
  HALS_Object *v33;

  if (a2)
  {
    __cxa_free_exception(v29);
    IOObjectRelease(object);
    std::__shared_weak_count::~__shared_weak_count(v30);
    operator delete(v32);
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(a10);
    HALB_Mutex::~HALB_Mutex(a11);
    HALS_IOUAObject::~HALS_IOUAObject((HALS_IOUAObject *)(v28 + 328), v33);
    *(_QWORD *)v28 = off_1E6985A90;
    CACFString::~CACFString((CACFString *)(v28 + 48));
    HALS_Object::~HALS_Object((HALS_Object *)v28);
    applesauce::iokit::io_object_holder::~io_object_holder(&a13);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
    MEMORY[0x1B5E50688](v28, 0x10E1C40C78D85C1);
    if (object)
      IOObjectRelease(object);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    if (!object)
      JUMPOUT(0x1B59504F8);
    JUMPOUT(0x1B59504F0);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B5950880(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, io_object_t object)
{
  if (object)
    IOObjectRelease(object);
  JUMPOUT(0x1B595066CLL);
}

uint64_t std::__function::__func<HALS_IOUARegistrar::Initialize(void)::$_0,std::allocator<HALS_IOUARegistrar::Initialize(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN18HALS_IOUARegistrar10InitializeEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOUARegistrar::Initialize(void)::$_0,std::allocator<HALS_IOUARegistrar::Initialize(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::target_type()
{
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<HALS_IOUARegistrar::_HandleServiceMatch(applesauce::iokit::io_object_holder)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t **v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;

  if ((int)MEMORY[0x1B5E5064C]() > *(_DWORD *)a1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    (*(void (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 8))(**(_QWORD **)(a1 + 8));
    v3 = *(_QWORD **)(v2 + 352);
    if (v3)
    {
      v4 = (uint64_t **)(v2 + 344);
      v5 = (uint64_t *)(v2 + 352);
      v6 = **(_QWORD **)(a1 + 8);
      v7 = (uint64_t *)(v2 + 352);
      do
      {
        v8 = v3[4];
        v9 = v8 >= v6;
        if (v8 >= v6)
          v10 = v3;
        else
          v10 = v3 + 1;
        if (v9)
          v7 = v3;
        v3 = (_QWORD *)*v10;
      }
      while (*v10);
      if (v7 != v5 && v6 >= v7[4])
      {
        std::__tree<HALS_IOUADriver *>::__remove_node_pointer(v4, v7);
        operator delete(v7);
      }
    }
  }
  return a1;
}

void ADS::BooleanControl::~BooleanControl(ADS::BooleanControl *this)
{
  *(_QWORD *)this = off_1E69937F0;
  *((_QWORD *)this + 7) = &off_1E69985F8;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 80));
  ADS::BaseObject::~BaseObject(this);
}

{
  *(_QWORD *)this = off_1E69937F0;
  *((_QWORD *)this + 7) = &off_1E69985F8;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 80));
  ADS::BaseObject::~BaseObject(this);
  JUMPOUT(0x1B5E50688);
}

BOOL ADS::BooleanControl::HasProperty(ADS::BooleanControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  AudioObjectPropertySelector mSelector;

  mSelector = a4->mSelector;
  return a4->mSelector == 1650685548
      || mSelector == 1667591277
      || mSelector == 1668506480
      || ADS::BaseObject::HasProperty(this, a2, a3, a4);
}

uint64_t ADS::BooleanControl::IsPropertySettable(ADS::BooleanControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  AudioObjectPropertySelector mSelector;

  mSelector = a4->mSelector;
  if (a4->mSelector == 1650685548)
    return 1;
  if (mSelector == 1667591277 || mSelector == 1668506480)
    return 0;
  else
    return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
}

uint64_t ADS::BooleanControl::GetPropertyDataSize(ADS::BooleanControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6)
{
  AudioObjectPropertySelector mSelector;

  mSelector = a4->mSelector;
  if (a4->mSelector == 1650685548 || mSelector == 1667591277 || mSelector == 1668506480)
    return 4;
  else
    return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
}

void ADS::BooleanControl::GetPropertyData(ADS::BooleanControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6, unsigned int a7, unsigned int *a8, char *a9)
{
  _DWORD *v10;
  int v11;
  _DWORD *exception;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a4->mSelector == 1650685548)
  {
    if (a7 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v13 = 136315394;
        v14 = "ADS_BooleanControl.cpp";
        v15 = 1024;
        v16 = 111;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::BooleanControl::GetPropertyData: not enough space for the return value of kAudioBooleanControlPropertyValue", (uint8_t *)&v13, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 561211770;
    }
    v10 = (_DWORD *)((char *)this + 56);
    v11 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 7) + 16))((char *)this + 56);
    *(_DWORD *)a9 = v10[22];
    *a8 = 4;
    if (v11)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 24))(v10);
  }
  else
  {
    ADS::Control::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, a9);
  }
}

void sub_1B5950C58(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ADS::BooleanControl::SetPropertyData(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int *a8, _DWORD *a9, unint64_t *a10, unsigned __int8 a11)
{
  unsigned int v12;
  uint64_t v15;
  int v16;
  uint64_t v17;
  ADS::ObjectManager *v18;
  ADS::ObjectManager *v19;
  ADS::BaseObject *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  _BYTE *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void (*v31)(uint64_t, ADS::ObjectManager *, _QWORD, uint64_t);
  _QWORD *v32;
  uint64_t v33;
  _DWORD *exception;
  _DWORD *v35;
  _QWORD v36[3];
  _QWORD *v37;
  _QWORD v38[3];
  _QWORD *v39;
  _BYTE buf[12];
  __int16 v41;
  int v42;
  _BYTE *v43;
  uint64_t v44;

  v12 = a7;
  v44 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a4 != 1650685548)
  {
    ADS::BaseObject::SetPropertyData(a1, a2, a3, (uint64_t *)a4, a5, a6, a7, (uint64_t)a8, a9, a10, a11);
    return;
  }
  v15 = a1 + 56;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 16))(a1 + 56);
  if (v12 <= 3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "ADS_BooleanControl.cpp";
      v41 = 1024;
      v42 = 133;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::BooleanControl::SetPropertyData: not enough space in given data to set kAudioBooleanControlPropertyValue", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 561211770;
  }
  v17 = *a8;
  if (*(_DWORD *)(a1 + 12) != 1702259059)
  {
    *(_DWORD *)(a1 + 144) = v17;
    goto LABEL_39;
  }
  v18 = (ADS::ObjectManager *)*(unsigned int *)(a1 + 20);
  v19 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID(v18);
  if (!v19)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "ADS_BooleanControl.cpp";
      v41 = 1024;
      v42 = 141;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::BooleanControl::SetPropertyData: unknown device", buf, 0x12u);
    }
    v35 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v35 = &off_1E69A1B30;
    v35[2] = 560947818;
  }
  v38[0] = &off_1E69762C0;
  v38[1] = a1;
  v38[2] = v17 | ((_QWORD)v18 << 32);
  v39 = v38;
  v21 = operator new();
  v22 = *(_DWORD *)(a1 + 8);
  v23 = *(_QWORD *)a4;
  v24 = *(_DWORD *)(a4 + 8);
  v25 = v39;
  if (!v39)
  {
LABEL_8:
    v37 = v25;
    if (v25)
      goto LABEL_9;
LABEL_14:
    v43 = 0;
    *(_QWORD *)v21 = &off_1E6977D78;
    *(_DWORD *)(v21 + 8) = v22;
    *(_QWORD *)(v21 + 12) = v23;
    *(_DWORD *)(v21 + 20) = v24;
LABEL_19:
    *(_QWORD *)(v21 + 48) = 0;
    goto LABEL_26;
  }
  if (v39 != v38)
  {
    v25 = (_QWORD *)(*(uint64_t (**)(void))(*v39 + 16))();
    goto LABEL_8;
  }
  v37 = v36;
  (*(void (**)(_QWORD *, _QWORD *))(v38[0] + 24))(v38, v36);
  v25 = v37;
  if (!v37)
    goto LABEL_14;
LABEL_9:
  if (v25 == v36)
  {
    v43 = buf;
    (*(void (**)(_QWORD *, _BYTE *))(v36[0] + 24))(v36, buf);
    v26 = v43;
  }
  else
  {
    v26 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v25 + 16))(v25);
    v43 = v26;
  }
  *(_QWORD *)v21 = &off_1E6977D78;
  *(_DWORD *)(v21 + 8) = v22;
  *(_QWORD *)(v21 + 12) = v23;
  *(_DWORD *)(v21 + 20) = v24;
  if (!v26)
    goto LABEL_19;
  if (v26 == buf)
  {
    *(_QWORD *)(v21 + 48) = v21 + 24;
    (*(void (**)(_BYTE *))(*(_QWORD *)buf + 24))(buf);
  }
  else
  {
    *(_QWORD *)(v21 + 48) = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v26 + 16))(v26);
  }
  v27 = v43;
  if (v43 == buf)
  {
    v28 = 4;
    v27 = buf;
  }
  else
  {
    if (!v43)
      goto LABEL_26;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_26:
  *(_QWORD *)v21 = &off_1E6977380;
  *(_DWORD *)(v21 + 56) = v17;
  v29 = v37;
  if (v37 == v36)
  {
    v30 = 4;
    v29 = v36;
  }
  else
  {
    if (!v37)
      goto LABEL_31;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_31:
  if (ADS::Simulator::sHost)
  {
    v31 = *(void (**)(uint64_t, ADS::ObjectManager *, _QWORD, uint64_t))(ADS::Simulator::sHost + 32);
    pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
    v31(ADS::Simulator::sHost, v18, 0, v21);
  }
  v32 = v39;
  if (v39 == v38)
  {
    v33 = 4;
    v32 = v38;
    goto LABEL_37;
  }
  if (v39)
  {
    v33 = 5;
LABEL_37:
    (*(void (**)(void))(*v32 + 8 * v33))();
  }
  ADS::ObjectManager::ReleaseObject(v19, v20);
LABEL_39:
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
}

void sub_1B5951114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  uint64_t v20;
  int v21;
  ADS::ObjectManager *v22;
  uint64_t v23;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  ADS::BaseObject *v29;
  char *v30;
  uint64_t v31;

  v25 = a20;
  if (a20 == &a17)
  {
    v26 = 4;
    v25 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  v27 = a12;
  if (a12 == &a9)
  {
    v28 = 4;
    v27 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_11;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_11:
  MEMORY[0x1B5E50688](v23, 0x10A1C401BAC4818);
  v30 = a16;
  if (a16 == &a13)
  {
    v31 = 4;
    v30 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_16;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_16:
  ADS::ObjectManager::ReleaseObject(v22, v29);
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
  _Unwind_Resume(a1);
}

void ADS::BooleanControl::PerformConfigChange(ADS::BooleanControl *this, unint64_t a2, char *a3)
{
  char *v4;
  int v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)a3 + 3) != 1650685548)
  {
    ADS::BaseObject::PerformConfigChange(this, a2, a3);
    return;
  }
  v4 = (char *)this + 56;
  v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 7) + 16))((char *)this + 56);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)(a3 + 24));
  if (v16)
  {
    v6 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v16 + 48))(v16);
    if (v6)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v9 = 136315650;
        v10 = "ADS_BooleanControl.cpp";
        v11 = 1024;
        v12 = 193;
        v13 = 1024;
        v14 = v6;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::BooleanControl::PerformConfigChange: Error %d in 'bcvl' config change", (uint8_t *)&v9, 0x18u);
      }
    }
  }
  (*(void (**)(char *))(*(_QWORD *)a3 + 8))(a3);
  v7 = v16;
  if (v16 == v15)
  {
    v8 = 4;
    v7 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_12;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_12:
  if (v5)
    (*(void (**)(char *))(*(_QWORD *)v4 + 24))(v4);
}

void sub_1B59513E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ADS::BooleanControl::AbortConfigChange(ADS::BooleanControl *this, unint64_t a2, ADS::BaseObject *a3)
{
  if (*(_DWORD *)a3 == 1650685548)
    (*(void (**)(ADS::BaseObject *))(*(_QWORD *)a3 + 8))(a3);
  else
    ADS::BaseObject::AbortConfigChange(this, a2, (char *)a3);
}

_QWORD *ADS::ChangeInfoData<unsigned int>::~ChangeInfoData(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6977D78;
  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void ADS::ChangeInfoData<unsigned int>::~ChangeInfoData(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6977D78;
  v1 = a1 + 3;
  v2 = (_QWORD *)a1[6];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1B5E50688);
}

void ADS::ChangeInfo::~ChangeInfo(ADS::ChangeInfo *this)
{
  char *v1;
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E6977D78;
  v1 = (char *)this + 24;
  v2 = (_QWORD *)*((_QWORD *)this + 6);
  if (v2 == (_QWORD *)v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      return;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
}

{
  char *v1;
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E6977D78;
  v1 = (char *)this + 24;
  v2 = (_QWORD *)*((_QWORD *)this + 6);
  if (v2 == (_QWORD *)v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1B5E50688);
}

void std::__function::__func<ADS::BooleanControl::SetPropertyData(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,unsigned int &,std::vector<AudioObjectPropertyAddress> &,ADS::SettabilityPolicy)::$_0,std::allocator<ADS::BooleanControl::SetPropertyData(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,unsigned int &,std::vector<AudioObjectPropertyAddress> &,ADS::SettabilityPolicy)::$_0>,int ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<ADS::BooleanControl::SetPropertyData(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,unsigned int &,std::vector<AudioObjectPropertyAddress> &,ADS::SettabilityPolicy)::$_0,std::allocator<ADS::BooleanControl::SetPropertyData(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,unsigned int &,std::vector<AudioObjectPropertyAddress> &,ADS::SettabilityPolicy)::$_0>,int ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E69762C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ADS::BooleanControl::SetPropertyData(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,unsigned int &,std::vector<AudioObjectPropertyAddress> &,ADS::SettabilityPolicy)::$_0,std::allocator<ADS::BooleanControl::SetPropertyData(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,unsigned int &,std::vector<AudioObjectPropertyAddress> &,ADS::SettabilityPolicy)::$_0>,int ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E69762C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ADS::BooleanControl::SetPropertyData(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,unsigned int &,std::vector<AudioObjectPropertyAddress> &,ADS::SettabilityPolicy)::$_0,std::allocator<ADS::BooleanControl::SetPropertyData(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,unsigned int &,std::vector<AudioObjectPropertyAddress> &,ADS::SettabilityPolicy)::$_0>,int ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  ADS::BaseObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  ADS::ObjectManager *NextObjectID;
  const AudioStreamRangedDescription *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const AudioStreamRangedDescription *v14;
  const AudioStreamRangedDescription *v15;
  unsigned int *v16;
  int v17;
  int v18;
  ADS::BaseObject *v19;
  unsigned int v20;
  unint64_t v21;
  char *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  int v26;
  ADS::ObjectManager *v27;
  ADS::ObjectManager *v28;
  ADS::BaseObject *v29;
  int v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  uint64_t v37;
  _DWORD *i;
  ADS::ObjectManager *v39;
  ADS::ObjectManager *v40;
  ADS::BaseObject *v41;
  int v42;
  NSObject *v43;
  const char *v44;
  _DWORD *v45;
  unint64_t v46;
  int v47;
  ADS::BaseObject *v48;
  _DWORD *exception;
  _QWORD v51[3];
  _QWORD v52[3];
  _BYTE buf[28];
  int v54;
  uint64_t v55;
  _BYTE v56[28];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*(unsigned int *)(a1 + 20));
  v5 = v3;
  v6 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v2 + 144) = v6;
  if (!v3 || v6 == *(unsigned __int8 *)(v3 + 816))
    goto LABEL_45;
  *(_BYTE *)(v3 + 816) = v6 != 0;
  if (v6)
  {
    v7 = *(_QWORD *)(v3 + 392);
    if (*(_QWORD *)(v3 + 384) != v7)
    {
      v8 = ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*(unsigned int *)(v7 - 4));
      NextObjectID = (ADS::ObjectManager *)ADS::ObjectManager::GetNextObjectID((ADS::ObjectManager *)v8);
      std::set<CAStreamRangedDescription,CAStreamRangedDescription_ReverseSort,std::allocator<CAStreamRangedDescription>>::set[abi:ne180100]((uint64_t)v52, (_QWORD *)(v8 + 104), v10);
      *(_OWORD *)v56 = *(_OWORD *)(v8 + 56);
      *(_OWORD *)&v56[12] = *(_OWORD *)(v8 + 68);
      v11 = *(_DWORD *)(v8 + 84);
      v12 = *(_QWORD *)(v8 + 88);
      v13 = operator new();
      v14 = (const AudioStreamRangedDescription *)*(unsigned int *)(v5 + 8);
      std::set<CAStreamRangedDescription,CAStreamRangedDescription_ReverseSort,std::allocator<CAStreamRangedDescription>>::set[abi:ne180100]((uint64_t)v51, v52, v15);
      v16 = (unsigned int *)(v5 + 492);
      *(_OWORD *)buf = *(_OWORD *)v56;
      *(_OWORD *)&buf[12] = *(_OWORD *)&v56[12];
      v54 = v11;
      v55 = v12;
      v17 = *(_DWORD *)(v8 + 52);
      v18 = atomic_load((unsigned int *)(v5 + 492));
      ADS::Stream::Stream(v13, (int)NextObjectID, v14, v51, (__int128 *)buf, 1, v17, v18, 1);
      std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)v51[1]);
      do
        v20 = __ldaxr(v16);
      while (__stlxr(v20 + v11, v16));
      ADS::ObjectManager::MapObject(NextObjectID, v13, v19);
      v22 = *(char **)(v5 + 368);
      v21 = *(_QWORD *)(v5 + 376);
      if ((unint64_t)v22 >= v21)
      {
        v31 = *(char **)(v5 + 360);
        v32 = (v22 - v31) >> 2;
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 62)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v34 = v21 - (_QWORD)v31;
        if (v34 >> 1 > v33)
          v33 = v34 >> 1;
        v35 = (unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL;
        v36 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v35)
          v36 = v33;
        if (v36)
        {
          v36 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v36);
          v31 = *(char **)(v5 + 360);
          v22 = *(char **)(v5 + 368);
        }
        else
        {
          v37 = 0;
        }
        v45 = (_DWORD *)(v36 + 4 * v32);
        v46 = v36 + 4 * v37;
        *v45 = (_DWORD)NextObjectID;
        v23 = v45 + 1;
        while (v22 != v31)
        {
          v47 = *((_DWORD *)v22 - 1);
          v22 -= 4;
          *--v45 = v47;
        }
        *(_QWORD *)(v5 + 360) = v45;
        *(_QWORD *)(v5 + 368) = v23;
        *(_QWORD *)(v5 + 376) = v46;
        if (v31)
          operator delete(v31);
      }
      else
      {
        *(_DWORD *)v22 = (_DWORD)NextObjectID;
        v23 = v22 + 4;
      }
      *(_QWORD *)(v5 + 368) = v23;
      std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)v52[1]);
      ADS::ObjectManager::ReleaseObject((ADS::ObjectManager *)v8, v48);
      goto LABEL_45;
    }
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
LABEL_49:
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 561211770;
    }
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "ADS_Device.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3351;
    v43 = MEMORY[0x1E0C81028];
    v44 = "%25s:%-5d  ADS::Device::EnableReferenceStream: no output stream to reference";
LABEL_48:
    _os_log_impl(&dword_1B57BA000, v43, OS_LOG_TYPE_ERROR, v44, buf, 0x12u);
    goto LABEL_49;
  }
  v24 = *(_DWORD **)(v3 + 360);
  v25 = *(_DWORD **)(v3 + 368);
  if (v24 == v25)
  {
    v26 = 0;
  }
  else
  {
    v26 = 0;
    while (1)
    {
      v27 = (ADS::ObjectManager *)*v24;
      v28 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID(v27);
      *(_DWORD *)v56 = 0;
      LODWORD(v52[0]) = 0;
      strcpy(buf, "spatbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      (*(void (**)(ADS::ObjectManager *, ADS::ObjectManager *, _QWORD, _BYTE *, _QWORD, _QWORD, uint64_t, _QWORD *, _BYTE *))(*(_QWORD *)v28 + 56))(v28, v27, 0, buf, 0, 0, 4, v52, v56);
      v30 = *(_DWORD *)v56;
      if (*(_DWORD *)v56)
      {
        (*(void (**)(ADS::ObjectManager *))(*(_QWORD *)v28 + 8))(v28);
        v26 = 1;
      }
      ADS::ObjectManager::ReleaseObject(v28, v29);
      if (v30)
        break;
      if (++v24 == v25)
        goto LABEL_32;
    }
    if (v24 == v25)
    {
LABEL_32:
      v24 = v25;
      goto LABEL_33;
    }
    for (i = v24 + 1; i != v25; ++i)
    {
      v39 = (ADS::ObjectManager *)*i;
      v40 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID(v39);
      *(_DWORD *)v56 = 0;
      LODWORD(v52[0]) = 0;
      strcpy(buf, "spatbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      (*(void (**)(ADS::ObjectManager *, ADS::ObjectManager *, _QWORD, _BYTE *, _QWORD, _QWORD, uint64_t, _QWORD *, _BYTE *))(*(_QWORD *)v40 + 56))(v40, v39, 0, buf, 0, 0, 4, v52, v56);
      v42 = *(_DWORD *)v56;
      if (*(_DWORD *)v56)
      {
        (*(void (**)(ADS::ObjectManager *))(*(_QWORD *)v40 + 8))(v40);
        v26 = 1;
      }
      ADS::ObjectManager::ReleaseObject(v40, v41);
      if (!v42)
        *v24++ = *i;
    }
  }
LABEL_33:
  if (v24 != *(_DWORD **)(v5 + 368))
  {
    v4 = *(ADS::BaseObject **)(v5 + 368);
    *(_QWORD *)(v5 + 368) = v24;
  }
  if (!v26)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_49;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "ADS_Device.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3371;
    v43 = MEMORY[0x1E0C81028];
    v44 = "%25s:%-5d  ADS::Device::EnableReferenceStream: reference stream is missing";
    goto LABEL_48;
  }
LABEL_45:
  ADS::ObjectManager::ReleaseObject((ADS::ObjectManager *)v5, v4);
  return 0;
}

void sub_1B5951B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t std::__function::__func<ADS::BooleanControl::SetPropertyData(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,unsigned int &,std::vector<AudioObjectPropertyAddress> &,ADS::SettabilityPolicy)::$_0,std::allocator<ADS::BooleanControl::SetPropertyData(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,unsigned int &,std::vector<AudioObjectPropertyAddress> &,ADS::SettabilityPolicy)::$_0>,int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN3ADS14BooleanControl15SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ADS::BooleanControl::SetPropertyData(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,unsigned int &,std::vector<AudioObjectPropertyAddress> &,ADS::SettabilityPolicy)::$_0,std::allocator<ADS::BooleanControl::SetPropertyData(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,unsigned int &,std::vector<AudioObjectPropertyAddress> &,ADS::SettabilityPolicy)::$_0>,int ()(void)>::target_type()
{
}

void HALS_PDPDevice::Activate(const __CFString **this)
{
  uint64_t v2;
  unsigned int *v3;
  const __CFString *v4;
  int Length;
  HALS_IOEngine2 *v6;
  const __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  HALS_Object *v10;
  HALS_Object *v11;
  BOOL has_engine_for_device;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _DWORD *exception;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  char v32[4];
  uint64_t v33;
  char v34;
  uint64_t v35;
  int v36;
  _BYTE buf[12];
  __int16 v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v35 = *(_QWORD *)" diubolg";
  v36 = 0;
  v2 = *((unsigned int *)this + 4);
  *(_QWORD *)buf = 0;
  LODWORD(v30) = 0;
  ((void (*)(const __CFString **, uint64_t, uint64_t *, uint64_t, uint64_t *, _BYTE *, _QWORD, _QWORD, _QWORD))(*this)[3].data)(this, v2, &v35, 8, &v30, buf, 0, 0, 0);
  v33 = *(_QWORD *)buf;
  v34 = 1;
  if (!*(_QWORD *)buf)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_PDPDevice.cpp";
      v38 = 1024;
      v39 = 63;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPDevice::Activate: no UID", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  CACFString::operator=((uint64_t)(this + 12), (uint64_t)&v33);
  *(_QWORD *)buf = CFStringCreateWithFormat(0, 0, CFSTR("device.%@"), v33);
  buf[8] = 1;
  CACFString::operator=((uint64_t)(this + 14), (uint64_t)buf);
  v4 = this[12];
  if (v4)
  {
    Length = CFStringGetLength(v4);
    v4 = this[12];
  }
  else
  {
    Length = 0;
  }
  *(_DWORD *)v32 = Length + 1;
  CACFString::GetCString(v4, (__CFString *)((char *)this + 156), v32, v3);
  v6 = (HALS_IOEngine2 *)operator new();
  v7 = this[167];
  HALS_IOEngine2::HALS_IOEngine2(v6, (HALS_IODevice *)this, v8, v9, v10);
  *(_QWORD *)v6 = off_1E699A7C8;
  *((_QWORD *)v6 + 139) = this;
  *((_QWORD *)v6 + 140) = v7;
  this[166] = (const __CFString *)v6;
  HALS_IOEngine2::Activate(v6, v11);
  HALS_Device::Activate(this);
  v28 = 0;
  v29 = 0;
  HALS_System::GetInstance(&v30, 0, &v28);
  has_engine_for_device = HALS_IOContext_Manager::has_engine_for_device(*(HALS_IOContext_Manager **)(v30 + 1392), (const HALS_IODevice *)this);
  v13 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v29;
  if (!v29)
    goto LABEL_14;
  v17 = (unint64_t *)&v29->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (has_engine_for_device)
      goto LABEL_26;
  }
  else
  {
LABEL_14:
    if (has_engine_for_device)
      goto LABEL_26;
  }
  v26 = 0;
  v27 = 0;
  HALS_System::GetInstance(&v30, 0, &v26);
  HALS_IOContext_Manager::create_engine_for_device(*(os_unfair_lock_s **)(v30 + 1392), (const HALS_IODevice *)this);
  v19 = v31;
  if (v31)
  {
    v20 = (unint64_t *)&v31->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v27;
  if (v27)
  {
    v23 = (unint64_t *)&v27->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_26:
  CACFString::~CACFString((CACFString *)buf);
  CACFString::~CACFString((CACFString *)&v33);
}

void sub_1B595202C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  CACFString::~CACFString((CACFString *)(v2 - 64));
  CACFString::~CACFString((CACFString *)va2);
  _Unwind_Resume(a1);
}

void HALS_PDPDevice::~HALS_PDPDevice(HALS_PDPDevice *this)
{
  HALS_PDPDevice::~HALS_PDPDevice(this);
  JUMPOUT(0x1B5E50688);
}

{
  uint64_t v2;
  HALS_Object *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  *(_QWORD *)this = off_1E6976340;
  v2 = *((_QWORD *)this + 166);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    HALS_ObjectMap::ObjectIsDead(*((HALS_ObjectMap **)this + 166), v3);
    *((_QWORD *)this + 166) = 0;
  }
  v10 = 0;
  v11 = 0;
  HALS_System::GetInstance(&v12, 0, &v10);
  HALS_IOContext_Manager::destroy_engine_for_device(*(os_unfair_lock_s **)(v12 + 1392), this);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_PDPDevice *)((char *)this + 1344));
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)this + 164));
  HALS_Device::~HALS_Device(this);
}

uint64_t HALS_PDPDevice::HasProperty(HALS_PDPDevice *this, uint64_t a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4)
{
  uint64_t result;
  const BOOL *v9;
  signed int mSelector;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  AudioObjectPropertyScope mScope;
  uint64_t v17;
  int v18;

  result = (*(uint64_t (**)(HALS_PDPDevice *, AudioObjectPropertyAddress *, AudioObjectPropertyAddress *))(*(_QWORD *)this + 176))(this, a3, a4);
  if ((_DWORD)result)
  {
    mSelector = a3->mSelector;
    if ((int)a3->mSelector <= 1869638758)
    {
      if (mSelector > 1768907635)
      {
        if (mSelector != 1768907636)
        {
          if (mSelector == 1851878764)
          {
            v11 = *((_QWORD *)this + 167);
            v12 = 0x676C6F626C6E616DLL;
            goto LABEL_20;
          }
          if (mSelector == 1869180523)
          {
            v11 = *((_QWORD *)this + 167);
            v12 = 0x676C6F626F696E6BLL;
LABEL_20:
            v17 = v12;
            v18 = 0;
            v14 = (*(uint64_t (**)(uint64_t, uint64_t *))(v11 + 48))(a2, &v17);
            return v14 != 0;
          }
LABEL_29:
          v14 = (*(uint64_t (**)(uint64_t, AudioObjectPropertyAddress *))(*((_QWORD *)this + 167) + 48))(a2, a3);
          return v14 != 0;
        }
        return HALS_Device::HasProperty((HALS_Device ***)this, v9, a3, a4);
      }
      if (mSelector == 1650682995)
        return HALS_Device::HasProperty((HALS_Device ***)this, v9, a3, a4);
      v13 = 1668047219;
LABEL_16:
      if (mSelector != v13)
        goto LABEL_29;
      return HALS_Device::HasProperty((HALS_Device ***)this, v9, a3, a4);
    }
    if (mSelector <= 1919512166)
    {
      if (mSelector == 1869638759)
        return HALS_Device::HasProperty((HALS_Device ***)this, v9, a3, a4);
      v13 = 1870098020;
      goto LABEL_16;
    }
    if (mSelector == 1919512167)
    {
      v11 = *((_QWORD *)this + 167);
      v12 = 0x676C6F626673697ALL;
      goto LABEL_20;
    }
    if (mSelector != 1936482681)
    {
      v13 = 1937007734;
      goto LABEL_16;
    }
    mScope = a3->mScope;
    return mScope == 1768845428 || mScope == 1869968496;
  }
  return result;
}

uint64_t HALS_PDPDevice::IsPropertySettable(HALS_PDPDevice *this, uint64_t a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4)
{
  const BOOL *v8;
  uint64_t result;
  signed int mSelector;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _DWORD *exception;
  AudioObjectPropertyAddress v15;

  if (((*(uint64_t (**)(HALS_PDPDevice *))(*(_QWORD *)this + 88))(this) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  result = 0;
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    if (mSelector <= 1919512166)
    {
      if (mSelector == 1869638759)
        return HALS_Device::IsPropertySettable(this, v8, a3, a4);
      v13 = 1870098020;
    }
    else
    {
      if (mSelector == 1919512167)
      {
        v11 = *((_QWORD *)this + 167);
        v12 = 0x676C6F626673697ALL;
        goto LABEL_19;
      }
      if (mSelector == 1936482681)
        return result;
      v13 = 1937007734;
    }
LABEL_16:
    if (mSelector != v13)
      return HALS_PDPUCPlugIn::ObjectIsPropertySettable(*(HALS_PDPUCPlugIn **)(*((_QWORD *)this + 167) + 56), a2, a3);
    return HALS_Device::IsPropertySettable(this, v8, a3, a4);
  }
  if (mSelector <= 1768907635)
  {
    if (mSelector == 1650682995)
      return HALS_Device::IsPropertySettable(this, v8, a3, a4);
    v13 = 1668047219;
    goto LABEL_16;
  }
  if (mSelector == 1768907636)
    return HALS_Device::IsPropertySettable(this, v8, a3, a4);
  if (mSelector == 1851878764)
    return result;
  if (mSelector != 1869180523)
    return HALS_PDPUCPlugIn::ObjectIsPropertySettable(*(HALS_PDPUCPlugIn **)(*((_QWORD *)this + 167) + 56), a2, a3);
  v11 = *((_QWORD *)this + 167);
  v12 = 0x676C6F626F696E6BLL;
LABEL_19:
  *(_QWORD *)&v15.mSelector = v12;
  v15.mElement = 0;
  return HALS_PDPUCPlugIn::ObjectIsPropertySettable(*(HALS_PDPUCPlugIn **)(v11 + 56), a2, &v15);
}

uint64_t HALS_PDPDevice::GetPropertyDataSize(HALS_PDPDevice *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, void *a5, AudioObjectPropertyAddress *a6)
{
  const BOOL *v12;
  signed int mSelector;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  HALS_PDPUCPlugIn *v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  _DWORD *exception;
  AudioObjectPropertyAddress v24;

  if (((*(uint64_t (**)(HALS_PDPDevice *, uint64_t, AudioObjectPropertyAddress *, AudioObjectPropertyAddress *))(*(_QWORD *)this + 88))(this, a2, a3, a6) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1869638758)
  {
    if (mSelector > 1768907635)
    {
      if (mSelector != 1768907636)
      {
        if (mSelector == 1851878764)
        {
          v18 = *((_QWORD *)this + 167);
          *(_QWORD *)&v24.mSelector = 0x676C6F626C6E616DLL;
          v24.mElement = 0;
          v19 = *(HALS_PDPUCPlugIn **)(v18 + 64);
          v20 = a2;
          v21 = a4;
          v22 = a5;
          return HALS_PDPUCPlugIn::ObjectGetPropertyDataSize(v19, v20, &v24, v21, v22);
        }
        if (mSelector == 1869180523)
        {
          v14 = *((_QWORD *)this + 167);
          v15 = 0x676C6F626F696E6BLL;
LABEL_20:
          *(_QWORD *)&v24.mSelector = v15;
          v24.mElement = 0;
          v19 = *(HALS_PDPUCPlugIn **)(v14 + 64);
          v20 = a2;
          v21 = 0;
          v22 = 0;
          return HALS_PDPUCPlugIn::ObjectGetPropertyDataSize(v19, v20, &v24, v21, v22);
        }
        return HALS_PDPUCPlugIn::ObjectGetPropertyDataSize(*(HALS_PDPUCPlugIn **)(*((_QWORD *)this + 167) + 64), a2, a3, a4, a5);
      }
      return HALS_Device::GetPropertyDataSize((HALS_Device ***)this, v12, a3, a4, (int *)a5, a6);
    }
    if (mSelector == 1650682995)
      return HALS_Device::GetPropertyDataSize((HALS_Device ***)this, v12, a3, a4, (int *)a5, a6);
    v16 = 1668047219;
LABEL_16:
    if (mSelector != v16)
      return HALS_PDPUCPlugIn::ObjectGetPropertyDataSize(*(HALS_PDPUCPlugIn **)(*((_QWORD *)this + 167) + 64), a2, a3, a4, a5);
    return HALS_Device::GetPropertyDataSize((HALS_Device ***)this, v12, a3, a4, (int *)a5, a6);
  }
  if (mSelector <= 1919512166)
  {
    if (mSelector == 1869638759)
      return HALS_Device::GetPropertyDataSize((HALS_Device ***)this, v12, a3, a4, (int *)a5, a6);
    v16 = 1870098020;
    goto LABEL_16;
  }
  if (mSelector == 1919512167)
  {
    v14 = *((_QWORD *)this + 167);
    v15 = 0x676C6F626673697ALL;
    goto LABEL_20;
  }
  if (mSelector != 1936482681)
  {
    v16 = 1937007734;
    goto LABEL_16;
  }
  return (16 * HALS_IODevice::GetNumberStreams(this, a3->mScope == 1768845428)) | 8;
}

void HALS_PDPDevice::GetPropertyData(HALS_PDPDevice *this, const BOOL *a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4, unsigned int *a5, void *a6, void *a7, void *a8, HALS_Client *a9)
{
  signed int mSelector;
  uint64_t v19;
  uint64_t v20;
  int v21;
  HALS_PDPUCPlugIn *v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  AudioObjectPropertyScope mScope;
  int v28;
  int NumberStreams;
  unsigned int v30;
  HALB_Mutex *v31;
  _DWORD *exception;
  int v33;
  _QWORD v34[6];
  int v35;
  int v36;
  AudioObjectPropertyAddress buf;
  __int16 v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_PDPDevice *, const BOOL *, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 88))(this, a2, a3, a9) & 1) == 0&& (a3->mSelector == 1751737454 || a3->mSelector == 1751412337))
  {
    *a5 = a4;
    return;
  }
  if (((*(uint64_t (**)(HALS_PDPDevice *, const BOOL *, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 88))(this, a2, a3, a9) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v33 = 2003332927;
    goto LABEL_37;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1869638758)
  {
    if (mSelector > 1768907635)
    {
      if (mSelector != 1768907636)
      {
        if (mSelector == 1851878764)
        {
          *a5 = a4;
          v26 = *((_QWORD *)this + 167);
          strcpy((char *)&buf, "manlbolg");
          BYTE1(buf.mElement) = 0;
          HIWORD(buf.mElement) = 0;
          v22 = *(HALS_PDPUCPlugIn **)(v26 + 72);
          v23 = (uint64_t)a2;
          v24 = (uint64_t)a7;
          v25 = a8;
          goto LABEL_28;
        }
        if (mSelector == 1869180523)
        {
          *a5 = a4;
          v19 = *((_QWORD *)this + 167);
          v20 = 0x676C6F626F696E6BLL;
LABEL_26:
          *(_QWORD *)&buf.mSelector = v20;
          buf.mElement = 0;
          v22 = *(HALS_PDPUCPlugIn **)(v19 + 72);
          v23 = (uint64_t)a2;
          v24 = 0;
          v25 = 0;
LABEL_28:
          HALS_PDPUCPlugIn::ObjectGetPropertyData(v22, v23, &buf, v24, v25, a5, a6);
          return;
        }
        goto LABEL_35;
      }
      goto LABEL_24;
    }
    if (mSelector == 1650682995)
      goto LABEL_24;
    v21 = 1668047219;
LABEL_23:
    if (mSelector != v21)
    {
LABEL_35:
      *a5 = a4;
      HALS_PDPUCPlugIn::ObjectGetPropertyData(*(HALS_PDPUCPlugIn **)(*((_QWORD *)this + 167) + 72), (uint64_t)a2, a3, (uint64_t)a7, a8, a5, a6);
      return;
    }
LABEL_24:
    HALS_Device::GetPropertyData(this, a2, a3, a4, a5, (unsigned int *)a6, a7, (int *)a8, a9);
    return;
  }
  if (mSelector <= 1919512166)
  {
    if (mSelector == 1869638759)
      goto LABEL_24;
    v21 = 1870098020;
    goto LABEL_23;
  }
  if (mSelector == 1919512167)
  {
    *a5 = a4;
    v19 = *((_QWORD *)this + 167);
    v20 = 0x676C6F626673697ALL;
    goto LABEL_26;
  }
  if (mSelector != 1936482681)
  {
    v21 = 1937007734;
    goto LABEL_23;
  }
  mScope = a3->mScope;
  if (mScope == 1768845428)
    v28 = 1;
  else
    v28 = 2 * (mScope != 1869968496);
  NumberStreams = HALS_IODevice::GetNumberStreams(this, v28 != 0);
  v30 = (16 * NumberStreams) | 8;
  if (v30 > a4)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      buf.mSelector = 136315394;
      *(_QWORD *)&buf.mScope = "HALS_PDPDevice.cpp";
      v38 = 1024;
      v39 = 403;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPDevice::_GetPropertyData: bad property data size for kAudioDevicePropertyStreamConfiguration", (uint8_t *)&buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v33 = 561211770;
LABEL_37:
    exception[2] = v33;
  }
  *a5 = v30;
  v34[0] = MEMORY[0x1E0C809B0];
  v34[1] = 0x40000000;
  v34[2] = ___ZNK14HALS_PDPDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
  v34[3] = &__block_descriptor_tmp_3161;
  v34[4] = this;
  v34[5] = a6;
  v35 = NumberStreams;
  v36 = v28;
  v31 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPDevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v31, (uint64_t)v34);
}

uint64_t HALS_PDPDevice::SetPropertyData(HALS_PDPDevice *this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  const AudioObjectPropertyAddress *v16;
  AudioObjectPropertySelector mSelector;
  uint64_t v18;
  uint64_t v19;
  _DWORD *exception;
  int v22;
  AudioObjectPropertyAddress v23;

  if (((*(uint64_t (**)(HALS_PDPDevice *, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 96))(this, a2, a3, a8) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v22 = 2003332927;
    goto LABEL_13;
  }
  mSelector = a3->mSelector;
  if (!HALB_Info::PropertyRequiresHogMode((HALB_Info *)a3->mSelector, v16))
    goto LABEL_5;
  if (!HALS_Device::IsHogModeOwnerOrFree(this, a8))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v22 = 560492391;
LABEL_13:
    exception[2] = v22;
  }
  mSelector = a3->mSelector;
LABEL_5:
  if (mSelector == 1869180523)
  {
    v18 = *((_QWORD *)this + 167);
    v19 = 0x676C6F626F696E6BLL;
    goto LABEL_9;
  }
  if (mSelector == 1919512167)
  {
    v18 = *((_QWORD *)this + 167);
    v19 = 0x676C6F626673697ALL;
LABEL_9:
    *(_QWORD *)&v23.mSelector = v19;
    v23.mElement = 0;
    return HALS_PDPUCPlugIn::ObjectSetPropertyData(*(HALS_PDPUCPlugIn **)(v18 + 80), a2, &v23, 0, 0, a4, a5);
  }
  return HALS_PDPUCPlugIn::ObjectSetPropertyData(*(HALS_PDPUCPlugIn **)(*((_QWORD *)this + 167) + 80), a2, a3, a6, a7, a4, a5);
}

void HALS_PDPDevice::OwnedObjectsPublishedAndDied(HALS_PDPDevice *this, unsigned int a2, const unsigned int *a3, unsigned int a4, const unsigned int *a5)
{
  uint64_t i;
  uint64_t v10;
  HALS_Object *v11;
  uint64_t v12;
  unsigned int v13;
  _BOOL4 IsSubClass;
  HALB_Info *v15;
  uint64_t v16;
  uint64_t v17;
  HALS_Object *v18;
  uint64_t v19;
  unsigned int v20;
  _BOOL4 v21;
  HALB_Info *v22;
  BOOL v23;
  HALB_Mutex *v24;
  _QWORD v25[5];
  _QWORD *v26[3];
  _QWORD *v27[3];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;

  v32 = 0;
  v33 = 0;
  v31 = (uint64_t *)&v32;
  if (a2)
  {
    for (i = a2; i; --i)
    {
      v10 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*a3);
      v12 = v10;
      if (v10)
      {
        v13 = *(_DWORD *)(v10 + 20);
        IsSubClass = HALB_Info::IsSubClass((HALB_Info *)v13, 1633907820);
        v15 = (HALB_Info *)*(unsigned int *)(v12 + 24);
        if (v13 == (_DWORD)v15 || IsSubClass)
        {
          if (v13 != (_DWORD)v15)
            IsSubClass = 1;
          if (!IsSubClass)
            goto LABEL_12;
        }
        else if (!HALB_Info::IsSubClass(v15, 1633907820))
        {
          goto LABEL_12;
        }
        LODWORD(v29) = v13;
        *(_QWORD *)((char *)&v29 + 4) = *(_QWORD *)(v12 + 48);
        HIDWORD(v29) = *a3;
        std::__tree<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::tuple<unsigned int,unsigned int,unsigned int>,std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::less<std::tuple<unsigned int,unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>>>::__emplace_unique_key_args<std::tuple<unsigned int,unsigned int,unsigned int>,std::pair<std::tuple<unsigned int,unsigned int,unsigned int> const,unsigned int>>(&v31, (int *)&v29, &v29);
      }
LABEL_12:
      HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v12, v11);
      ++a3;
    }
  }
  *((_QWORD *)&v29 + 1) = 0;
  v30 = 0;
  *(_QWORD *)&v29 = (char *)&v29 + 8;
  if (!a4)
  {
    v23 = 1;
    goto LABEL_27;
  }
  v16 = a4;
  do
  {
    v17 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*a5);
    v19 = v17;
    if (!v17)
      goto LABEL_24;
    v20 = *(_DWORD *)(v17 + 20);
    v21 = HALB_Info::IsSubClass((HALB_Info *)v20, 1633907820);
    v22 = (HALB_Info *)*(unsigned int *)(v19 + 24);
    if (v20 == (_DWORD)v22 || v21)
    {
      if (v20 != (_DWORD)v22)
        v21 = 1;
      if (v21)
      {
LABEL_23:
        LODWORD(v28) = v20;
        *(_QWORD *)((char *)&v28 + 4) = *(_QWORD *)(v19 + 48);
        HIDWORD(v28) = *a5;
        std::__tree<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::tuple<unsigned int,unsigned int,unsigned int>,std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::less<std::tuple<unsigned int,unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>>>::__emplace_unique_key_args<std::tuple<unsigned int,unsigned int,unsigned int>,std::pair<std::tuple<unsigned int,unsigned int,unsigned int> const,unsigned int>>((uint64_t **)&v29, (int *)&v28, &v28);
      }
    }
    else if (HALB_Info::IsSubClass(v22, 1633907820))
    {
      goto LABEL_23;
    }
LABEL_24:
    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v19, v18);
    ++a5;
    --v16;
  }
  while (v16);
  v23 = v30 == 0;
LABEL_27:
  if (v33 || !v23)
  {
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 1174405120;
    v25[2] = ___ZN14HALS_PDPDevice28OwnedObjectsPublishedAndDiedEjPKjjS1__block_invoke;
    v25[3] = &__block_descriptor_tmp_8_3157;
    v25[4] = this;
    std::map<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>::map[abi:ne180100]((uint64_t)v26, &v29);
    std::map<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>::map[abi:ne180100]((uint64_t)v27, &v31);
    v24 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPDevice *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v24, (uint64_t)v25);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v27[1]);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v26[1]);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)&v29 + 1));
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v32);
}

void sub_1B5952EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_QWORD *a24)
{
  uint64_t v24;

  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a16);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a24);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)(v24 - 80));
  _Unwind_Resume(a1);
}

void HALS_PDPDevice::create_mcp_engine(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t HALS_PDPDevice::_GetClockAlgorithm(HALS_PDPDevice *this)
{
  return 1835103847;
}

unint64_t HALS_PDPDevice::_GetNumberStreams(HALS_PDPDevice *this, uint64_t a2)
{
  HALS_Object *v2;
  HALS_ObjectMap **v3;
  _BYTE *v4;
  HALS_ObjectMap **v5;
  HALS_ObjectMap **v6;
  void *__p;
  HALS_ObjectMap **v9;
  uint64_t v10;

  __p = 0;
  v9 = 0;
  v10 = 0;
  (*(void (**)(HALS_PDPDevice *, uint64_t, void **))(*(_QWORD *)this + 560))(this, a2, &__p);
  v4 = __p;
  v3 = v9;
  if (__p == v9)
  {
    v6 = v9;
    if (!v9)
      return (unint64_t)((char *)v3 - v4) >> 3;
    goto LABEL_5;
  }
  v5 = (HALS_ObjectMap **)__p;
  do
    HALS_ObjectMap::ReleaseObject(*v5++, v2);
  while (v5 != v3);
  v6 = (HALS_ObjectMap **)__p;
  if (__p)
  {
LABEL_5:
    v9 = v6;
    operator delete(v6);
  }
  return (unint64_t)((char *)v3 - v4) >> 3;
}

void sub_1B5952FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

HALS_ObjectMap *HALS_PDPDevice::_CopyStreamByIndex(HALS_PDPDevice *this, uint64_t a2, unsigned int a3)
{
  HALS_Object *v4;
  uint64_t v5;
  HALS_ObjectMap **v6;
  HALS_ObjectMap **v7;
  HALS_ObjectMap *v8;
  HALS_ObjectMap **v10;
  HALS_ObjectMap **v11;
  uint64_t v12;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  (*(void (**)(HALS_PDPDevice *, uint64_t, HALS_ObjectMap ***))(*(_QWORD *)this + 560))(this, a2, &v10);
  v5 = a3;
  v7 = v10;
  v6 = v11;
  if (a3 >= (unint64_t)(v11 - v10))
  {
    v8 = 0;
  }
  else
  {
    v8 = v10[a3];
    HALS_ObjectMap::RetainObject(v10[v5], v4);
    v7 = v10;
    v6 = v11;
  }
  if (v7 != v6)
  {
    do
      HALS_ObjectMap::ReleaseObject(*v7++, v4);
    while (v7 != v6);
    v6 = v10;
  }
  if (v6)
  {
    v11 = v6;
    operator delete(v6);
  }
  return v8;
}

void sub_1B5953090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

HALS_ObjectMap *HALS_PDPDevice::_CopyIOEngine(HALS_ObjectMap **this, HALS_Object *a2)
{
  HALS_ObjectMap::RetainObject(this[166], a2);
  return this[166];
}

uint64_t HALS_PDPDevice::_GetTotalNumberChannels(HALS_PDPDevice *this, uint64_t a2)
{
  HALS_ObjectMap **v2;
  HALS_ObjectMap **v3;
  uint64_t v4;
  HALS_ObjectMap *v5;
  uint64_t v6;
  int v7;
  HALS_Object *v8;
  void *__p;
  HALS_ObjectMap **v11;
  uint64_t v12;
  _BYTE v13[28];
  int v14;
  uint64_t v15;
  uint64_t v16;

  __p = 0;
  v11 = 0;
  v12 = 0;
  (*(void (**)(HALS_PDPDevice *, uint64_t, void **))(*(_QWORD *)this + 560))(this, a2, &__p);
  v2 = (HALS_ObjectMap **)__p;
  v3 = v11;
  if (__p == v11)
  {
    v4 = 0;
    if (!__p)
      return v4;
    goto LABEL_5;
  }
  LODWORD(v4) = 0;
  do
  {
    v5 = *v2;
    v6 = *((unsigned int *)*v2 + 4);
    v15 = 0x676C6F6270667420;
    v16 = 0;
    (*(void (**)(HALS_ObjectMap *, uint64_t, uint64_t *, uint64_t, char *, _BYTE *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v5 + 112))(v5, v6, &v15, 40, (char *)&v16 + 4, v13, 0, 0, 0);
    v7 = v14;
    HALS_ObjectMap::ReleaseObject(*v2, v8);
    v4 = (v7 + v4);
    ++v2;
  }
  while (v2 != v3);
  v2 = (HALS_ObjectMap **)__p;
  if (__p)
  {
LABEL_5:
    v11 = v2;
    operator delete(v2);
  }
  return v4;
}

void sub_1B59531B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void HALS_PDPDevice::_CopyStreamList(uint64_t a1, int a2, char **a3)
{
  unsigned int PropertyDataSize;
  unsigned int *begin;
  std::vector<unsigned int>::pointer end;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  std::vector<unsigned int>::value_type __x;
  std::vector<unsigned int> v23;
  unsigned int v24;
  AudioObjectPropertyAddress v25;

  a3[1] = *a3;
  *(_QWORD *)&v25.mSelector = 0x6F75747073746D23;
  v25.mElement = 0;
  if (a2)
    v25.mScope = 1768845428;
  PropertyDataSize = HALS_PDPUCPlugIn::ObjectGetPropertyDataSize(*(HALS_PDPUCPlugIn **)(*(_QWORD *)(a1 + 1336) + 64), *(unsigned int *)(a1 + 16), &v25, 0, 0);
  v24 = PropertyDataSize;
  if (PropertyDataSize >= 4)
  {
    __x = 0;
    std::vector<unsigned int>::vector(&v23, PropertyDataSize >> 2, &__x);
    HALS_PDPUCPlugIn::ObjectGetPropertyData(*(HALS_PDPUCPlugIn **)(*(_QWORD *)(a1 + 1336) + 72), *(unsigned int *)(a1 + 16), &v25, 0, 0, &v24, v23.__begin_);
    begin = v23.__begin_;
    end = v23.__end_;
    if (v23.__begin_ != v23.__end_)
    {
      do
      {
        v8 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*begin);
        v9 = v8;
        if (v8)
        {
          v11 = (uint64_t *)a3[1];
          v10 = (unint64_t)a3[2];
          if ((unint64_t)v11 >= v10)
          {
            v13 = ((char *)v11 - *a3) >> 3;
            if ((unint64_t)(v13 + 1) >> 61)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v14 = v10 - (_QWORD)*a3;
            v15 = v14 >> 2;
            if (v14 >> 2 <= (unint64_t)(v13 + 1))
              v15 = v13 + 1;
            if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
              v16 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v16 = v15;
            if (v16)
              v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v16);
            else
              v17 = 0;
            v18 = (uint64_t *)(v16 + 8 * v13);
            *v18 = v9;
            v12 = (char *)(v18 + 1);
            v20 = *a3;
            v19 = a3[1];
            if (v19 != *a3)
            {
              do
              {
                v21 = *((_QWORD *)v19 - 1);
                v19 -= 8;
                *--v18 = v21;
              }
              while (v19 != v20);
              v19 = *a3;
            }
            *a3 = (char *)v18;
            a3[1] = v12;
            a3[2] = (char *)(v16 + 8 * v17);
            if (v19)
              operator delete(v19);
          }
          else
          {
            *v11 = v8;
            v12 = (char *)(v11 + 1);
          }
          a3[1] = v12;
        }
        ++begin;
      }
      while (begin != end);
      begin = v23.__begin_;
    }
    if (begin)
    {
      v23.__end_ = begin;
      operator delete(begin);
    }
  }
}

void sub_1B5953380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void HALS_PDPDevice::_CopyControls(HALS_PDPDevice *this, HALS_Device::BasicControlList *a2)
{
  char *v2;
  char *v3;
  HALS_ObjectMap *v5;
  HALS_Object *v6;
  HALS_ObjectMap *v7;
  unint64_t v8;
  HALS_ObjectMap **v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  HALS_ObjectMap **v15;
  char *v16;
  char *v17;
  HALS_ObjectMap *v18;
  char *v19;
  char *v20;
  BOOL v21;

  v2 = (char *)*((_QWORD *)this + 163);
  v3 = (char *)this + 1312;
  if (v2 != (char *)this + 1312)
  {
    do
    {
      v5 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)v2 + 10));
      v7 = v5;
      if (v5)
      {
        HALS_ObjectMap::RetainObject(v5, v6);
        v9 = (HALS_ObjectMap **)*((_QWORD *)a2 + 1);
        v8 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v9 >= v8)
        {
          v11 = ((uint64_t)v9 - *(_QWORD *)a2) >> 3;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v12 = v8 - *(_QWORD *)a2;
          v13 = v12 >> 2;
          if (v12 >> 2 <= (unint64_t)(v11 + 1))
            v13 = v11 + 1;
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v13;
          if (v14)
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v14);
          else
            v6 = 0;
          v15 = (HALS_ObjectMap **)(v14 + 8 * v11);
          *v15 = v7;
          v10 = v15 + 1;
          v17 = *(char **)a2;
          v16 = (char *)*((_QWORD *)a2 + 1);
          if (v16 != *(char **)a2)
          {
            do
            {
              v18 = (HALS_ObjectMap *)*((_QWORD *)v16 - 1);
              v16 -= 8;
              *--v15 = v18;
            }
            while (v16 != v17);
            v16 = *(char **)a2;
          }
          *(_QWORD *)a2 = v15;
          *((_QWORD *)a2 + 1) = v10;
          *((_QWORD *)a2 + 2) = v14 + 8 * (_QWORD)v6;
          if (v16)
            operator delete(v16);
        }
        else
        {
          *v9 = v7;
          v10 = v9 + 1;
        }
        *((_QWORD *)a2 + 1) = v10;
      }
      HALS_ObjectMap::ReleaseObject(v7, v6);
      v19 = (char *)*((_QWORD *)v2 + 1);
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = *(char **)v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (char *)*((_QWORD *)v2 + 2);
          v21 = *(_QWORD *)v20 == (_QWORD)v2;
          v2 = v20;
        }
        while (!v21);
      }
      v2 = v20;
    }
    while (v20 != v3);
  }
}

void sub_1B59534F0(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

unint64_t HALS_PDPDevice::_GetNumberControls(HALS_PDPDevice *this)
{
  HALS_Object *v1;
  HALS_ObjectMap **v2;
  HALS_ObjectMap **v3;
  HALS_ObjectMap **v4;
  HALS_ObjectMap **v5;
  HALS_ObjectMap **v7;
  HALS_ObjectMap **v8;
  uint64_t v9;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  HALS_PDPDevice::_CopyControlList((uint64_t)this, &v7);
  v2 = v7;
  v3 = v8;
  if (v7 == v8)
  {
    v5 = v8;
    if (!v8)
      return (unint64_t)((char *)v3 - (char *)v2) >> 3;
    goto LABEL_5;
  }
  v4 = v7;
  do
    HALS_ObjectMap::ReleaseObject(*v4++, v1);
  while (v4 != v3);
  v5 = v2;
  if (v2)
LABEL_5:
    operator delete(v5);
  return (unint64_t)((char *)v3 - (char *)v2) >> 3;
}

void sub_1B5953590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

HALS_ObjectMap *HALS_PDPDevice::_CopyControlByIndex(HALS_PDPDevice *this, unsigned int a2)
{
  HALS_Object *v3;
  unint64_t v4;
  HALS_ObjectMap **v5;
  HALS_ObjectMap **v6;
  HALS_ObjectMap *v7;
  HALS_ObjectMap **v8;
  HALS_ObjectMap **v10;
  HALS_ObjectMap **v11;
  uint64_t v12;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  HALS_PDPDevice::_CopyControlList((uint64_t)this, &v10);
  v4 = a2;
  v5 = v10;
  v6 = v11;
  if (v4 >= v11 - v10)
  {
    v7 = 0;
  }
  else
  {
    v7 = v10[v4];
    HALS_ObjectMap::RetainObject(v7, v3);
  }
  if (v5 == v6)
  {
    v5 = v6;
    if (!v6)
      return v7;
    goto LABEL_8;
  }
  v8 = v5;
  do
    HALS_ObjectMap::ReleaseObject(*v8++, v3);
  while (v8 != v6);
  if (v5)
LABEL_8:
    operator delete(v5);
  return v7;
}

void sub_1B5953654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PDPDevice::_CopyControlByDescription(HALS_PDPDevice *this, int a2, int a3, int a4)
{
  unsigned int *v5;
  int v7[3];

  v7[0] = a2;
  v7[1] = a3;
  v7[2] = a4;
  v5 = (unsigned int *)std::__tree<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::tuple<unsigned int,unsigned int,unsigned int>,std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::less<std::tuple<unsigned int,unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>>>::find<std::tuple<unsigned int,unsigned int,unsigned int>>((uint64_t)this + 1304, v7);
  if ((unsigned int *)((char *)this + 1312) == v5)
    return HALS_ObjectMap::CopyObjectByObjectID(0);
  else
    return HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)v5[10]);
}

uint64_t std::__tree<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::tuple<unsigned int,unsigned int,unsigned int>,std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::less<std::tuple<unsigned int,unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>>>::find<std::tuple<unsigned int,unsigned int,unsigned int>>(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,0ul,1ul,2ul>((int *)(v3 + 28), a2);
    if (v6 >= 0)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (v6 >= 0)
      v5 = v3;
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,0ul,1ul,2ul>(a2, (_DWORD *)(v5 + 28)) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

uint64_t std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,0ul,1ul,2ul>(int *a1, _DWORD *a2)
{
  int v3;
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;

  v3 = *a1;
  if (*a1 < *a2)
    result = 0xFFFFFFFFLL;
  else
    result = 1;
  if (v3 == *a2)
  {
    v5 = a1[1];
    v6 = a2[1];
    result = v5 < v6 ? 0xFFFFFFFFLL : 1;
    if (v5 == v6)
    {
      v7 = a1[2];
      v8 = a2[2];
      v9 = v7 == v8;
      if (v7 < v8)
        v10 = -1;
      else
        v10 = 1;
      if (v9)
        return 0;
      else
        return v10;
    }
  }
  return result;
}

void HALS_PDPDevice::_CopyControlList(uint64_t a1, HALS_ObjectMap ***a2)
{
  _QWORD *v2;
  _QWORD *v3;
  HALS_ObjectMap *v5;
  HALS_Object *v6;
  HALS_ObjectMap *v7;
  unint64_t v8;
  HALS_ObjectMap **v9;
  HALS_ObjectMap **v10;
  HALS_ObjectMap **v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  HALS_ObjectMap **v17;
  HALS_ObjectMap *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;

  a2[1] = *a2;
  v2 = *(_QWORD **)(a1 + 1304);
  v3 = (_QWORD *)(a1 + 1312);
  if (v2 != (_QWORD *)(a1 + 1312))
  {
    do
    {
      v5 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)v2 + 10));
      v7 = v5;
      if (v5)
      {
        HALS_ObjectMap::RetainObject(v5, v6);
        v9 = a2[1];
        v8 = (unint64_t)a2[2];
        if ((unint64_t)v9 >= v8)
        {
          v11 = *a2;
          v12 = v9 - *a2;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 61)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v14 = v8 - (_QWORD)v11;
          if (v14 >> 2 > v13)
            v13 = v14 >> 2;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          if (v15)
          {
            if (v15 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v16 = (char *)operator new(8 * v15);
          }
          else
          {
            v16 = 0;
          }
          v17 = (HALS_ObjectMap **)&v16[8 * v12];
          *v17 = v7;
          v10 = v17 + 1;
          if (v9 != v11)
          {
            do
            {
              v18 = *--v9;
              *--v17 = v18;
            }
            while (v9 != v11);
            v9 = *a2;
          }
          *a2 = v17;
          a2[1] = v10;
          a2[2] = (HALS_ObjectMap **)&v16[8 * v15];
          if (v9)
            operator delete(v9);
        }
        else
        {
          *v9 = v7;
          v10 = v9 + 1;
        }
        a2[1] = v10;
      }
      HALS_ObjectMap::ReleaseObject(v7, v6);
      v19 = (_QWORD *)v2[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v2[2];
          v21 = *v20 == (_QWORD)v2;
          v2 = v20;
        }
        while (!v21);
      }
      v2 = v20;
    }
    while (v20 != v3);
  }
}

void sub_1B5953900(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::tuple<unsigned int,unsigned int,unsigned int>,std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::less<std::tuple<unsigned int,unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>>>::__emplace_unique_key_args<std::tuple<unsigned int,unsigned int,unsigned int>,std::pair<std::tuple<unsigned int,unsigned int,unsigned int> const,unsigned int>>(uint64_t **a1, int *a2, _OWORD *a3)
{
  uint64_t *result;
  uint64_t **v6;
  char *v7;
  uint64_t v8;

  result = std::__tree<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::tuple<unsigned int,unsigned int,unsigned int>,std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::less<std::tuple<unsigned int,unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>>>::__find_equal<std::tuple<unsigned int,unsigned int,unsigned int>>((uint64_t)a1, &v8, a2);
  if (!*result)
  {
    v6 = (uint64_t **)result;
    v7 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v7 + 28) = *a3;
    return std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(a1, v8, v6, (uint64_t *)v7);
  }
  return result;
}

void ___ZN14HALS_PDPDevice28OwnedObjectsPublishedAndDiedEjPKjjS1__block_invoke(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  char v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  _QWORD *v15;
  _QWORD *v16;
  int *v17;
  uint64_t **v18;
  uint64_t **v19;
  char *v20;
  int *v21;
  int *v22;
  uint64_t v23;

  v2 = a1[4];
  v3 = (_QWORD *)a1[5];
  v4 = a1 + 6;
  if (v3 != a1 + 6)
  {
    v5 = (uint64_t **)(v2 + 1312);
    do
    {
      v6 = *v5;
      if (*v5)
      {
        v7 = (uint64_t *)(v2 + 1312);
        v8 = *v5;
        do
        {
          v9 = std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,0ul,1ul,2ul>((int *)v8 + 7, (_DWORD *)v3 + 7);
          if (v9 >= 0)
            v10 = (uint64_t **)v8;
          else
            v10 = (uint64_t **)(v8 + 1);
          if (v9 >= 0)
            v7 = v8;
          v8 = *v10;
        }
        while (*v10);
        if (v7 != (uint64_t *)v5
          && (std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,0ul,1ul,2ul>((int *)v3 + 7, (_DWORD *)v7 + 7) & 0x80) == 0)
        {
          v11 = (uint64_t *)v7[1];
          v12 = v7;
          if (v11)
          {
            do
            {
              v13 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              v13 = (uint64_t *)v12[2];
              v14 = *v13 == (_QWORD)v12;
              v12 = v13;
            }
            while (!v14);
          }
          if (*(uint64_t **)(v2 + 1304) == v7)
            *(_QWORD *)(v2 + 1304) = v13;
          --*(_QWORD *)(v2 + 1320);
          std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, v7);
          operator delete(v7);
        }
      }
      v15 = (_QWORD *)v3[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v3[2];
          v14 = *v16 == (_QWORD)v3;
          v3 = v16;
        }
        while (!v14);
      }
      v3 = v16;
    }
    while (v16 != v4);
  }
  v17 = (int *)a1[8];
  if (v17 != (int *)(a1 + 9))
  {
    do
    {
      v18 = (uint64_t **)std::__tree<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::tuple<unsigned int,unsigned int,unsigned int>,std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::less<std::tuple<unsigned int,unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>>>::__find_equal<std::tuple<unsigned int,unsigned int,unsigned int>>(v2 + 1304, &v23, v17 + 7);
      if (!*v18)
      {
        v19 = v18;
        v20 = (char *)operator new(0x30uLL);
        *(_OWORD *)(v20 + 28) = *(_OWORD *)(v17 + 7);
        std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at((uint64_t **)(v2 + 1304), v23, v19, (uint64_t *)v20);
      }
      v21 = (int *)*((_QWORD *)v17 + 1);
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = *(int **)v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (int *)*((_QWORD *)v17 + 2);
          v14 = *(_QWORD *)v22 == (_QWORD)v17;
          v17 = v22;
        }
        while (!v14);
      }
      v17 = v22;
    }
    while (v22 != (int *)(a1 + 9));
  }
}

uint64_t std::map<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>::map[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  int *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t **v11;
  char *v12;
  int *v13;
  int *v14;
  uint64_t v16;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = (int *)(a2 + 1);
  v5 = (int *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v6 = *(_QWORD *)(a1 + 8);
      v7 = v3;
      if (*(_QWORD *)a1 == v3)
        goto LABEL_9;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v3;
      if (v6)
      {
        do
        {
          v7 = v8;
          v8 = *(_QWORD *)(v8 + 8);
        }
        while (v8);
      }
      else
      {
        do
        {
          v7 = *(_QWORD *)(v9 + 16);
          v10 = *(_QWORD *)v7 == v9;
          v9 = v7;
        }
        while (v10);
      }
      if ((std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,0ul,1ul,2ul>((int *)(v7 + 28), v5 + 7) & 0x80) != 0)
      {
LABEL_9:
        if (!v6)
        {
          v16 = v3;
          v11 = (uint64_t **)v3;
LABEL_14:
          v12 = (char *)operator new(0x30uLL);
          *(_OWORD *)(v12 + 28) = *(_OWORD *)(v5 + 7);
          std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at((uint64_t **)a1, v16, v11, (uint64_t *)v12);
          goto LABEL_15;
        }
        v16 = v7;
        v11 = (uint64_t **)(v7 + 8);
      }
      else
      {
        v11 = (uint64_t **)std::__tree<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::tuple<unsigned int,unsigned int,unsigned int>,std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::less<std::tuple<unsigned int,unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>>>::__find_equal<std::tuple<unsigned int,unsigned int,unsigned int>>(a1, &v16, v5 + 7);
      }
      if (!*v11)
        goto LABEL_14;
LABEL_15:
      v13 = (int *)*((_QWORD *)v5 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(int **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (int *)*((_QWORD *)v5 + 2);
          v10 = *(_QWORD *)v14 == (_QWORD)v5;
          v5 = v14;
        }
        while (!v10);
      }
      v5 = v14;
    }
    while (v14 != v4);
  }
  return a1;
}

void sub_1B5953CC0(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::tuple<unsigned int,unsigned int,unsigned int>,std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::less<std::tuple<unsigned int,unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>>>::__find_equal<std::tuple<unsigned int,unsigned int,unsigned int>>(uint64_t a1, _QWORD *a2, int *a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  int *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = (_QWORD *)v4;
        v8 = (int *)(v4 + 28);
        if ((std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,0ul,1ul,2ul>(a3, (_DWORD *)(v4 + 28)) & 0x80) == 0)break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,0ul,1ul,2ul>(v8, a3) & 0x80) == 0)break;
      v5 = v7 + 1;
      v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t __copy_helper_block_e8_40c82_ZTSNSt3__13mapINS_5tupleIJjjjEEEjNS_4lessIS2_EENS_9allocatorINS_4pairIKS2_jEEEEEE64c82_ZTSNSt3__13mapINS_5tupleIJjjjEEEjNS_4lessIS2_EENS_9allocatorINS_4pairIKS2_jEEEEEE(uint64_t a1, uint64_t a2)
{
  std::map<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>::map[abi:ne180100](a1 + 40, (_QWORD *)(a2 + 40));
  return std::map<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>::map[abi:ne180100](a1 + 64, (_QWORD *)(a2 + 64));
}

void sub_1B5953D9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)(v1 + 48));
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c82_ZTSNSt3__13mapINS_5tupleIJjjjEEEjNS_4lessIS2_EENS_9allocatorINS_4pairIKS2_jEEEEEE64c82_ZTSNSt3__13mapINS_5tupleIJjjjEEEjNS_4lessIS2_EENS_9allocatorINS_4pairIKS2_jEEEEEE(uint64_t a1)
{
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)(a1 + 72));
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)(a1 + 48));
}

void ___ZNK14HALS_PDPDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  HALS_Stream *v5;
  HALS_Object *v6;
  HALS_ObjectMap *v7;
  uint64_t v8;
  uint64_t v9;
  AudioStreamBasicDescription v10;

  v1 = *(_QWORD *)(a1 + 32);
  **(_DWORD **)(a1 + 40) = *(_DWORD *)(a1 + 48);
  if (*(_DWORD *)(a1 + 48))
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = (HALS_Stream *)(*(uint64_t (**)(uint64_t, BOOL, unint64_t))(*(_QWORD *)v1 + 392))(v1, *(_DWORD *)(a1 + 52) != 0, v4);
      v7 = v5;
      if (v5)
      {
        HALS_Stream::GetCurrentVirtualFormat(v5, &v10);
        v8 = *(_QWORD *)(a1 + 40) + v3;
        *(_QWORD *)(v8 + 8) = v10.mChannelsPerFrame;
        *(_QWORD *)(v8 + 16) = 0;
      }
      else
      {
        v9 = *(_QWORD *)(a1 + 40) + v3;
        *(_QWORD *)(v9 + 8) = 0;
        *(_QWORD *)(v9 + 16) = 0;
      }
      HALS_ObjectMap::ReleaseObject(v7, v6);
      ++v4;
      v3 += 16;
    }
    while (v4 < *(unsigned int *)(a1 + 48));
  }
}

void sub_1B5953E9C(void *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5953E84);
}

uint64_t CACFString::operator=(uint64_t a1, uint64_t a2)
{
  const void *v3;
  BOOL v5;
  int v6;
  BOOL v7;

  v3 = *(const void **)a2;
  if (*(_QWORD *)a2 != *(_QWORD *)a1)
  {
    if (*(_QWORD *)a1)
      v5 = *(_BYTE *)(a1 + 8) == 0;
    else
      v5 = 1;
    if (!v5)
    {
      CFRelease(*(CFTypeRef *)a1);
      v3 = *(const void **)a2;
    }
    *(_QWORD *)a1 = v3;
    v6 = *(unsigned __int8 *)(a2 + 8);
    *(_BYTE *)(a1 + 8) = v6;
    if (v6)
      v7 = v3 == 0;
    else
      v7 = 1;
    if (!v7)
      CFRetain(v3);
  }
  return a1;
}

void ___ZN14HALS_PDPDevice32HandlePlugIn_RequestConfigChangeEPv_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  int v11;
  HALB_Mutex *v12;
  HALS_DeviceState *v13;
  CAPropertyAddressListVector *v14;
  const AudioObjectPropertyAddress *v15;
  CAPropertyAddressList *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  CAPropertyAddressList *v26;
  CAPropertyAddressList *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  HALS_ObjectMap *v32;
  HALS_Object *v33;
  HALS_ObjectMap *v34;
  uint64_t v35;
  os_unfair_lock_s *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  AudioObjectPropertyAddress v63;
  _QWORD v64[5];
  HALS_System *v65;
  std::__shared_weak_count *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  void *__p;
  void *v72;
  uint64_t v73;
  CAPropertyAddressList *v74;
  CAPropertyAddressList *v75;
  uint64_t v76;
  _OWORD v77[2];
  _BYTE buf[12];
  __int16 v79;
  _BYTE v80[10];
  __int16 v81;
  _WORD v82[19];

  *(_QWORD *)&v82[15] = *MEMORY[0x1E0C80C00];
  v2 = a1[5];
  memset(v77, 0, sizeof(v77));
  v74 = 0;
  v75 = 0;
  v76 = 0;
  __p = 0;
  v72 = 0;
  v73 = 0;
  v3 = *(_QWORD *)(v2 + 1328);
  if (v3)
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 216))(v3, &__p);
  v69 = 0;
  v70 = 0;
  HALS_System::GetInstance(&v65, 0, &v69);
  HALS_IOContext_Manager::pause_contexts_for_device(*((os_unfair_lock_s **)v65 + 174), (HALS_IODevice *)v2);
  v4 = v66;
  if (v66)
  {
    p_shared_owners = (unint64_t *)&v66->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v70;
  if (v70)
  {
    v8 = (unint64_t *)&v70->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)&v65);
  HALS_DeviceState::Capture((HALS_DeviceState *)&v65, (HALS_Device *)v2, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
  kdebug_trace();
  v10 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 + 1336) + 40))(*(unsigned int *)(v2 + 16), a1[6]);
  v11 = v10;
  if (v10)
  {
    LOBYTE(v63.mSelector) = HIBYTE(v10);
    BYTE1(v63.mSelector) = BYTE2(v10);
    BYTE2(v63.mSelector) = BYTE1(v10);
    HIBYTE(v63.mSelector) = v10;
    LOBYTE(v63.mScope) = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "HALS_PDPUCPlugIn.cpp";
      v79 = 1024;
      *(_DWORD *)v80 = 123;
      *(_WORD *)&v80[4] = 1024;
      *(_DWORD *)&v80[6] = v11;
      v81 = 2080;
      *(_QWORD *)v82 = &v63;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPUCPlugIn::PerformDeviceConfigChange: got an error from the plug-in, Error: %d (%s)", buf, 0x22u);
    }
  }
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v11;
  kdebug_trace();
  v64[0] = MEMORY[0x1E0C809B0];
  v64[1] = 0x40000000;
  v64[2] = ___ZN14HALS_PDPDevice32HandlePlugIn_RequestConfigChangeEPv_block_invoke_2;
  v64[3] = &__block_descriptor_tmp_6_3169;
  v64[4] = v2;
  v12 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  HALB_CommandGate::ExecuteCommand(v12, (uint64_t)v64);
  HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)buf);
  HALS_DeviceState::Capture(v13, (HALS_Device *)v2, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
  HALS_DeviceState::Compare((HALS_DeviceState *)&v65, (const HALS_DeviceState *)buf, (const AudioObjectPropertyAddress *)v77, &v74, v14);
  if (*(_QWORD *)&v77[0] == *((_QWORD *)&v77[0] + 1))
  {
    v16 = v74;
    while (v16 != v75)
    {
      v17 = *(_QWORD *)v16;
      v18 = *((_QWORD *)v16 + 1);
      v16 = (CAPropertyAddressList *)((char *)v16 + 32);
      if (v17 != v18)
        goto LABEL_20;
    }
  }
  else
  {
LABEL_20:
    *(_QWORD *)&v63.mSelector = 0x676C6F6264696666;
    v63.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v77, &v63, v15);
  }
  *(_QWORD *)&v63.mSelector = &v82[3];
  std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*(_QWORD **)&v80[2]);
  *(_QWORD *)buf = &v68;
  std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(v67);
  v19 = *(_QWORD *)(v2 + 1328);
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 928))(v19);
  v61 = 0;
  v62 = 0;
  HALS_System::GetInstance(&v65, 0, &v61);
  HALS_IOContext_Manager::rebuild_engine_for_device(*((HALS_IOContext_Manager **)v65 + 174), (const HALS_IODevice *)v2);
  v20 = v66;
  if (v66)
  {
    v21 = (unint64_t *)&v66->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v62;
  if (v62)
  {
    v24 = (unint64_t *)&v62->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  kdebug_trace();
  if (*(_QWORD *)&v77[0] != *((_QWORD *)&v77[0] + 1))
    HALS_Object::PropertiesChanged_Sync((HALS_Object *)v2, (HALS_NotificationManager *)*(unsigned int *)(v2 + 16), 0, -1431655765 * ((*((_QWORD *)&v77[0] + 1) - *(_QWORD *)&v77[0]) >> 2), *(const AudioObjectPropertyAddress **)&v77[0]);
  v27 = v74;
  v26 = v75;
  v28 = v75 - v74;
  if (((v75 - v74) & 0x1FFFFFFFE0) != 0)
  {
    v29 = 0;
    v30 = 0;
    do
    {
      if (v30 >= v28 >> 5)
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      v31 = (char *)v27 + v29;
      if (*(_QWORD *)((char *)v27 + v29) != *(_QWORD *)((char *)v27 + v29 + 8))
      {
        v32 = (HALS_ObjectMap *)*((unsigned int *)v31 + 6);
        v34 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v32);
        if (v34)
          HALS_Object::PropertiesChanged_Sync((HALS_Object *)v2, v32, 0, -1431655765 * ((*((_QWORD *)v31 + 1) - *(_QWORD *)v31) >> 2), *(const AudioObjectPropertyAddress **)v31);
        HALS_ObjectMap::ReleaseObject(v34, v33);
        v27 = v74;
        v26 = v75;
      }
      ++v30;
      v28 = v26 - v27;
      v29 += 32;
    }
    while (v30 < ((unint64_t)(v26 - v27) >> 5));
  }
  kdebug_trace();
  v35 = *(_QWORD *)(v2 + 1328);
  if (v35)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 232))(v35);
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v2 + 1328) + 224))(*(_QWORD *)(v2 + 1328), &__p);
  }
  v59 = 0;
  v60 = 0;
  HALS_System::GetInstance(&v65, 0, &v59);
  v36 = (os_unfair_lock_s *)(*((_QWORD *)v65 + 174) + 16);
  os_unfair_lock_lock(v36);
  os_unfair_lock_unlock(v36);
  v37 = v66;
  if (v66)
  {
    v38 = (unint64_t *)&v66->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v60;
  if (v60)
  {
    v41 = (unint64_t *)&v60->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v57 = 0;
  v58 = 0;
  HALS_System::GetInstance(&v65, 0, &v57);
  HALS_IOContext_Manager::resume_contexts_for_device(*((os_unfair_lock_s **)v65 + 174), (HALS_IODevice *)v2);
  v43 = v66;
  if (v66)
  {
    v44 = (unint64_t *)&v66->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v58;
  if (v58)
  {
    v47 = (unint64_t *)&v58->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v55 = 0;
  v56 = 0;
  HALS_System::GetInstance(&v65, 0, &v55);
  HALS_System::CheckForDefaultDeviceChanges(v65);
  v49 = v66;
  if (v66)
  {
    v50 = (unint64_t *)&v66->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = v56;
  if (v56)
  {
    v53 = (unint64_t *)&v56->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (__p)
  {
    v72 = __p;
    operator delete(__p);
  }
  v65 = (HALS_System *)&v74;
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  if (*(_QWORD *)&v77[0])
    operator delete(*(void **)&v77[0]);
}

void sub_1B595472C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,void *__p,uint64_t a34)
{
  uint64_t v34;

  if (a2)
  {
    HALS_DeviceState::~HALS_DeviceState((HALS_DeviceState *)(v34 - 128));
    HALS_DeviceState::~HALS_DeviceState((HALS_DeviceState *)&a24);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B5954338);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B595484C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *a34)
{
  uint64_t v34;
  void *v36;

  if (a2)
  {
    if (a33)
    {
      a34 = a33;
      operator delete(a33);
    }
    a24 = v34 - 184;
    std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100](&a24);
    v36 = *(void **)(v34 - 160);
    if (v36)
      operator delete(v36);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B59546ECLL);
  }
  JUMPOUT(0x1B595483CLL);
}

void sub_1B5954894()
{
  JUMPOUT(0x1B595483CLL);
}

uint64_t ___ZN14HALS_PDPDevice32HandlePlugIn_RequestConfigChangeEPv_block_invoke_2(uint64_t a1)
{
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  HALS_Object *v8;
  HALS_ObjectMap *v9;
  HALS_PDPStream *v10;
  HALS_Object *v11;
  HALS_ObjectMap *v12;

  v1 = 0;
  v2 = *(_QWORD *)(a1 + 32);
  v3 = 1;
  do
  {
    v4 = v3;
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 384))(v2, v1 & 1);
    if ((_DWORD)result)
    {
      v6 = 0;
      do
      {
        v7 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v2 + 392))(v2, v1 & 1, v6);
        v9 = (HALS_ObjectMap *)v7;
        if (v7)
        {
          v10 = (HALS_PDPStream *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v7 + 16));
          v12 = v10;
          if (v10)
            HALS_PDPStream::BuildFormatList(v10);
          HALS_ObjectMap::ReleaseObject(v12, v11);
        }
        HALS_ObjectMap::ReleaseObject(v9, v8);
        v6 = (v6 + 1);
        result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 384))(v2, v1 & 1);
      }
      while (v6 < result);
    }
    v3 = 0;
    v1 = 1;
  }
  while ((v4 & 1) != 0);
  return result;
}

void sub_1B5954964(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;
  HALS_ObjectMap *v3;
  HALS_Object *v5;

  HALS_ObjectMap::ReleaseObject(v3, a2);
  HALS_ObjectMap::ReleaseObject(v2, v5);
  _Unwind_Resume(a1);
}

void HALS_PlugInBox::Activate(HALS_PlugInBox *this, HALS_Object *a2)
{
  HALS_Object::Activate(this, a2);
  (*(void (**)(char *))(*((_QWORD *)this + 42) + 32))((char *)this + 336);
  HALS_PlugInBox::CreateControls(this);
}

void HALS_PlugInBox::~HALS_PlugInBox(HALS_PlugInBox *this)
{
  HALS_PlugInBox::~HALS_PlugInBox(this);
  JUMPOUT(0x1B5E50688);
}

{
  HALS_PlugInObject *v2;
  void *v3;

  *(_QWORD *)this = off_1E69767B8;
  v2 = (HALS_PlugInBox *)((char *)this + 336);
  *((_QWORD *)this + 42) = &unk_1E69768B8;
  v3 = (void *)*((_QWORD *)this + 47);
  if (v3)
  {
    *((_QWORD *)this + 48) = v3;
    operator delete(v3);
  }
  HALS_PlugInObject::~HALS_PlugInObject(v2);
  HALS_Box::~HALS_Box(this);
}

uint64_t HALS_PlugInBox::HasProperty(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t *v56;
  unint64_t *v57;
  unint64_t *v58;
  unint64_t *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  std::__shared_weak_count *v66;

  v7 = *a3;
  if ((int)v7 > 1819111267)
  {
    if ((int)v7 > 1920168546)
    {
      if ((_DWORD)v7 == 1920168547)
        return HALS_PlugInObject::HasResourceBundle(a1 + 336, a4);
      if ((_DWORD)v7 == 1936618861)
      {
        v27 = *(_QWORD *)(a1 + 344);
        v28 = *(_QWORD *)(v27 + 400);
        v10 = *(std::__shared_weak_count **)(v27 + 408);
        v65 = v28;
        v66 = v10;
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v30 = __ldxr(p_shared_owners);
          while (__stxr(v30 + 1, p_shared_owners));
        }
        v31 = *(unsigned int *)(a1 + 356);
        if (a4)
          v32 = *(unsigned int *)(a4 + 232);
        else
          v32 = 0;
        v63 = 0x676C6F62736E756DLL;
        v64 = 0;
        v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v28 + 544))(v28, v31, v32, &v63);
        if (!v10)
          return v33;
        v57 = (unint64_t *)&v10->__shared_owners_;
        do
          v54 = __ldaxr(v57);
        while (__stlxr(v54 - 1, v57));
        goto LABEL_81;
      }
    }
    else
    {
      if ((_DWORD)v7 == 1819111268)
      {
        v34 = *(_QWORD *)(a1 + 344);
        v35 = *(_QWORD *)(v34 + 400);
        v10 = *(std::__shared_weak_count **)(v34 + 408);
        v65 = v35;
        v66 = v10;
        if (v10)
        {
          v36 = (unint64_t *)&v10->__shared_owners_;
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        v38 = *(unsigned int *)(a1 + 356);
        if (a4)
          v39 = *(unsigned int *)(a4 + 232);
        else
          v39 = 0;
        v63 = 0x676C6F626C6D6F64;
        v64 = 0;
        v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v35 + 544))(v35, v38, v39, &v63);
        if (!v10)
          return v33;
        v58 = (unint64_t *)&v10->__shared_owners_;
        do
          v54 = __ldaxr(v58);
        while (__stlxr(v54 - 1, v58));
        goto LABEL_81;
      }
      if ((_DWORD)v7 == 1819173229)
      {
        v15 = *(_QWORD *)(a1 + 344);
        v16 = *(_QWORD *)(v15 + 400);
        v10 = *(std::__shared_weak_count **)(v15 + 408);
        v65 = v16;
        v66 = v10;
        if (v10)
        {
          v17 = (unint64_t *)&v10->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        v19 = *(unsigned int *)(a1 + 356);
        if (a4)
          v20 = *(unsigned int *)(a4 + 232);
        else
          v20 = 0;
        v63 = 0x676C6F626C6E616DLL;
        v64 = 0;
        v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v16 + 544))(v16, v19, v20, &v63);
        if (!v10)
          return v33;
        v55 = (unint64_t *)&v10->__shared_owners_;
        do
          v54 = __ldaxr(v55);
        while (__stlxr(v54 - 1, v55));
        goto LABEL_81;
      }
    }
  }
  else if ((int)v7 > 1768187245)
  {
    if ((_DWORD)v7 == 1768187246)
    {
      v40 = *(_QWORD *)(a1 + 344);
      v41 = *(_QWORD *)(v40 + 400);
      v10 = *(std::__shared_weak_count **)(v40 + 408);
      v65 = v41;
      v66 = v10;
      if (v10)
      {
        v42 = (unint64_t *)&v10->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v44 = *(unsigned int *)(a1 + 356);
      if (a4)
        v45 = *(unsigned int *)(a4 + 232);
      else
        v45 = 0;
      v63 = 0x676C6F626964656ELL;
      v64 = 0;
      v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v41 + 544))(v41, v44, v45, &v63);
      if (!v10)
        return v33;
      v59 = (unint64_t *)&v10->__shared_owners_;
      do
        v54 = __ldaxr(v59);
      while (__stlxr(v54 - 1, v59));
      goto LABEL_81;
    }
    if ((_DWORD)v7 == 1819107691)
    {
      v21 = *(_QWORD *)(a1 + 344);
      v22 = *(_QWORD *)(v21 + 400);
      v10 = *(std::__shared_weak_count **)(v21 + 408);
      v65 = v22;
      v66 = v10;
      if (v10)
      {
        v23 = (unint64_t *)&v10->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v25 = *(unsigned int *)(a1 + 356);
      if (a4)
        v26 = *(unsigned int *)(a4 + 232);
      else
        v26 = 0;
      v63 = 0x676C6F626C6D616BLL;
      v64 = 0;
      v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v22 + 544))(v22, v25, v26, &v63);
      if (!v10)
        return v33;
      v56 = (unint64_t *)&v10->__shared_owners_;
      do
        v54 = __ldaxr(v56);
      while (__stlxr(v54 - 1, v56));
      goto LABEL_81;
    }
  }
  else
  {
    if ((_DWORD)v7 == 1668641652)
      return *(_DWORD *)(a1 + 368) != 0;
    if ((_DWORD)v7 == 1719105134)
    {
      v8 = *(_QWORD *)(a1 + 344);
      v9 = *(_QWORD *)(v8 + 400);
      v10 = *(std::__shared_weak_count **)(v8 + 408);
      v65 = v9;
      v66 = v10;
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v13 = *(unsigned int *)(a1 + 356);
      if (a4)
        v14 = *(unsigned int *)(a4 + 232);
      else
        v14 = 0;
      v63 = 0x676C6F626677766ELL;
      v64 = 0;
      v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v9 + 544))(v9, v13, v14, &v63);
      if (!v10)
        return v33;
      v53 = (unint64_t *)&v10->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
LABEL_81:
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        v60 = v10;
LABEL_83:
        std::__shared_weak_count::__release_weak(v60);
        return v33;
      }
      return v33;
    }
  }
  if ((HALS_Box::HasProperty(a1, a2, a3) & 1) == 0)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 336) + 24))(a1 + 336, v7))
      return 0;
    v47 = *(_QWORD *)(a1 + 344);
    v48 = *(_QWORD *)(v47 + 400);
    v49 = *(std::__shared_weak_count **)(v47 + 408);
    v65 = v48;
    v66 = v49;
    if (v49)
    {
      v50 = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    if (a4)
      v52 = *(unsigned int *)(a4 + 232);
    else
      v52 = 0;
    v33 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(*(_QWORD *)v48 + 544))(v48, *(unsigned int *)(a1 + 356), v52, a3);
    if (!v49)
      return v33;
    v61 = (unint64_t *)&v49->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (v62)
      return v33;
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    v60 = v49;
    goto LABEL_83;
  }
  return 1;
}

void sub_1B5954EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugInBox::IsPropertySettable(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  std::__shared_weak_count *v46;

  v8 = 0;
  v9 = *a3;
  if ((int)v9 <= 1768187245)
  {
    if ((_DWORD)v9 == 1652060014)
    {
      v24 = *(_QWORD *)(a1 + 344);
      v25 = *(_QWORD *)(v24 + 400);
      v12 = *(std::__shared_weak_count **)(v24 + 408);
      v45 = v25;
      v46 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v27 = __ldxr(p_shared_owners);
        while (__stxr(v27 + 1, p_shared_owners));
      }
      v28 = *(unsigned int *)(a1 + 356);
      if (a4)
        v29 = *(unsigned int *)(a4 + 232);
      else
        v29 = 0;
      v43 = 0x676C6F6262786F6ELL;
      v44 = 0;
      v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v25 + 552))(v25, v28, v29, &v43);
      if (!v12)
        return v8;
      v39 = (unint64_t *)&v12->__shared_owners_;
      do
        v37 = __ldaxr(v39);
      while (__stlxr(v37 - 1, v39));
      goto LABEL_44;
    }
    if ((_DWORD)v9 == 1668641652)
      return v8;
    goto LABEL_12;
  }
  if ((_DWORD)v9 == 1768187246)
  {
    v18 = *(_QWORD *)(a1 + 344);
    v19 = *(_QWORD *)(v18 + 400);
    v12 = *(std::__shared_weak_count **)(v18 + 408);
    v45 = v19;
    v46 = v12;
    if (v12)
    {
      v20 = (unint64_t *)&v12->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = *(unsigned int *)(a1 + 356);
    if (a4)
      v23 = *(unsigned int *)(a4 + 232);
    else
      v23 = 0;
    v43 = 0x676C6F626964656ELL;
    v44 = 0;
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v19 + 552))(v19, v22, v23, &v43);
    if (!v12)
      return v8;
    v38 = (unint64_t *)&v12->__shared_owners_;
    do
      v37 = __ldaxr(v38);
    while (__stlxr(v37 - 1, v38));
    goto LABEL_44;
  }
  if ((_DWORD)v9 == 1920168547)
    return v8;
  if ((_DWORD)v9 != 1819173229)
  {
LABEL_12:
    if (HALS_Box::HasProperty(a1, a2, a3))
      return HALS_Box::IsPropertySettable(a1, a2, a3);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 336) + 24))(a1 + 336, v9))
      return 0;
    v30 = *(_QWORD *)(a1 + 344);
    v31 = *(_QWORD *)(v30 + 400);
    v32 = *(std::__shared_weak_count **)(v30 + 408);
    v45 = v31;
    v46 = v32;
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    if (a4)
      v35 = *(unsigned int *)(a4 + 232);
    else
      v35 = 0;
    v8 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(*(_QWORD *)v31 + 552))(v31, *(unsigned int *)(a1 + 356), v35, a3);
    if (!v32)
      return v8;
    v41 = (unint64_t *)&v32->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (v42)
      return v8;
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    v40 = v32;
    goto LABEL_46;
  }
  v10 = *(_QWORD *)(a1 + 344);
  v11 = *(_QWORD *)(v10 + 400);
  v12 = *(std::__shared_weak_count **)(v10 + 408);
  v45 = v11;
  v46 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(unsigned int *)(a1 + 356);
  if (a4)
    v16 = *(unsigned int *)(a4 + 232);
  else
    v16 = 0;
  v43 = 0x676C6F626C6E616DLL;
  v44 = 0;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v11 + 552))(v11, v15, v16, &v43);
  if (!v12)
    return v8;
  v36 = (unint64_t *)&v12->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
LABEL_44:
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    v40 = v12;
LABEL_46:
    std::__shared_weak_count::__release_weak(v40);
  }
  return v8;
}

void sub_1B59551EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugInBox::GetPropertyDataSize(HALS_PlugInBox *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, HALS_Client *a6)
{
  uint64_t mSelector;
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  std::__shared_weak_count *v45;

  mSelector = a3->mSelector;
  if ((int)mSelector > 1819173228)
  {
    if ((_DWORD)mSelector == 1819173229 || (_DWORD)mSelector == 1851878764 || (_DWORD)mSelector == 1920168547)
      return 8;
    goto LABEL_25;
  }
  if ((_DWORD)mSelector == 1650682915)
  {
    v16 = *((_QWORD *)this + 43);
    v17 = *(_QWORD *)(v16 + 400);
    v18 = *(std::__shared_weak_count **)(v16 + 408);
    v44 = v17;
    v45 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    v21 = *((unsigned int *)this + 89);
    if (a6)
      v22 = *((unsigned int *)a6 + 58);
    else
      v22 = 0;
    v42 = 0x676C6F6262636C23;
    v43 = 0;
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)v17 + 560))(v17, v21, v22, &v42, 0, 0);
    if (!v18)
      return v13;
    v36 = (unint64_t *)&v18->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
LABEL_42:
    if (v37)
      return v13;
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    v39 = v18;
LABEL_44:
    std::__shared_weak_count::__release_weak(v39);
    return v13;
  }
  if ((_DWORD)mSelector == 1650751011)
  {
    v23 = *((_QWORD *)this + 43);
    v24 = *(_QWORD *)(v23 + 400);
    v18 = *(std::__shared_weak_count **)(v23 + 408);
    v44 = v24;
    v45 = v18;
    if (v18)
    {
      v25 = (unint64_t *)&v18->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v27 = *((unsigned int *)this + 89);
    if (a6)
      v28 = *((unsigned int *)a6 + 58);
    else
      v28 = 0;
    v42 = 0x676C6F6262647623;
    v43 = 0;
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)v24 + 560))(v24, v27, v28, &v42, 0, 0);
    if (!v18)
      return v13;
    v38 = (unint64_t *)&v18->__shared_owners_;
    do
      v37 = __ldaxr(v38);
    while (__stlxr(v37 - 1, v38));
    goto LABEL_42;
  }
  if ((_DWORD)mSelector != 1668641652)
  {
LABEL_25:
    if (HALS_Box::HasProperty((uint64_t)this, a2, (int *)a3))
      return HALS_Box::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
    if (!(*(unsigned int (**)(char *, uint64_t))(*((_QWORD *)this + 42) + 24))((char *)this + 336, mSelector))return 0;
    v30 = *((_QWORD *)this + 43);
    v31 = *(_QWORD *)(v30 + 400);
    v32 = *(std::__shared_weak_count **)(v30 + 408);
    v44 = v31;
    v45 = v32;
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    if (a6)
      v35 = *((unsigned int *)a6 + 58);
    else
      v35 = 0;
    v13 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, const void *))(*(_QWORD *)v31 + 560))(v31, *((unsigned int *)this + 89), v35, a3, a4, a5);
    if (!v32)
      return v13;
    v40 = (unint64_t *)&v32->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (v41)
      return v13;
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    v39 = v32;
    goto LABEL_44;
  }
  return (12 * *((_DWORD *)this + 92));
}

void sub_1B59554F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void HALS_PlugInBox::GetPropertyData(HALS_PlugInBox *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, unsigned int *a5, char *a6, uint64_t a7, uint64_t *a8, HALS_Client *a9)
{
  uint64_t *v11;
  uint64_t mSelector;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t *p_shared_owners;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  HALS_ObjectMap *v129;
  HALS_Object *v130;
  int v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  HALS_ObjectMap *v136;
  HALS_Object *v137;
  int v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t *v144;
  unint64_t *v145;
  unint64_t *v146;
  unint64_t *v147;
  unint64_t *v148;
  unint64_t *v149;
  unint64_t *v150;
  unint64_t *v151;
  unint64_t *v152;
  unint64_t *v153;
  _DWORD *exception;
  _DWORD *v155;
  _DWORD *v156;
  _DWORD *v157;
  _DWORD *v158;
  _DWORD *v159;
  _DWORD *v160;
  _DWORD *v161;
  _DWORD *v162;
  _DWORD *v163;
  _DWORD *v164;
  _DWORD *v165;
  _DWORD *v166;
  _DWORD *v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  int v171;
  _BYTE buf[18];
  uint64_t v173;

  v11 = (uint64_t *)a6;
  v173 = *MEMORY[0x1E0C80C00];
  mSelector = a3->mSelector;
  if ((int)mSelector > 1668641651)
  {
    if ((int)mSelector <= 1819111267)
    {
      if ((int)mSelector > 1768187245)
      {
        if ((_DWORD)mSelector == 1768187246)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_PlugInBox.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 265;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInBox::GetPropertyData: bad property data size for kAudioObjectPropertyIdentify", buf, 0x12u);
            }
            exception = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)exception = &off_1E69A1B30;
            exception[2] = 561211770;
          }
          v76 = *((_QWORD *)this + 43);
          v77 = *(_QWORD *)(v76 + 400);
          v20 = *(std::__shared_weak_count **)(v76 + 408);
          *(_QWORD *)buf = v77;
          *(_QWORD *)&buf[8] = v20;
          if (v20)
          {
            p_shared_owners = (unint64_t *)&v20->__shared_owners_;
            do
              v79 = __ldxr(p_shared_owners);
            while (__stxr(v79 + 1, p_shared_owners));
          }
          v80 = *((unsigned int *)this + 89);
          if (a9)
            v81 = *((unsigned int *)a9 + 58);
          else
            v81 = 0;
          v168 = 0x676C6F626964656ELL;
          v169 = 0;
          LODWORD(v170) = 0;
          v171 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, int *, uint64_t *))(*(_QWORD *)v77 + 568))(v77, v80, v81, &v168, 0, 0, 4, &v171, &v170);
          *(_DWORD *)v11 = v170;
          if (!v20)
            goto LABEL_218;
          v139 = (unint64_t *)&v20->__shared_owners_;
          do
            v140 = __ldaxr(v139);
          while (__stlxr(v140 - 1, v139));
          goto LABEL_216;
        }
        if ((_DWORD)mSelector == 1819107691)
        {
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_PlugInBox.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 257;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInBox::GetPropertyData: bad property data size for kAudioObjectPropertyManufacturer", buf, 0x12u);
            }
            v156 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v156 = &off_1E69A1B30;
            v156[2] = 561211770;
          }
          v45 = *((_QWORD *)this + 43);
          v46 = *(_QWORD *)(v45 + 400);
          v34 = *(std::__shared_weak_count **)(v45 + 408);
          *(_QWORD *)buf = v46;
          *(_QWORD *)&buf[8] = v34;
          if (v34)
          {
            v47 = (unint64_t *)&v34->__shared_owners_;
            do
              v48 = __ldxr(v47);
            while (__stxr(v48 + 1, v47));
          }
          v49 = *((unsigned int *)this + 89);
          if (a9)
            v50 = *((unsigned int *)a9 + 58);
          else
            v50 = 0;
          v168 = 0x676C6F626C6D616BLL;
          v169 = 0;
          v170 = 0;
          v171 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, int *, uint64_t *))(*(_QWORD *)v46 + 568))(v46, v49, v50, &v168, 0, 0, 8, &v171, &v170);
          *v11 = v170;
          if (!v34)
            goto LABEL_225;
          v143 = (unint64_t *)&v34->__shared_owners_;
          do
            v142 = __ldaxr(v143);
          while (__stlxr(v142 - 1, v143));
          goto LABEL_223;
        }
      }
      else
      {
        if ((_DWORD)mSelector == 1668641652)
        {
          v69 = a4 / 0xC;
          if (*((_DWORD *)this + 92) < a4 / 0xC)
            v69 = *((_DWORD *)this + 92);
          if (v69)
          {
            v70 = 0;
            v71 = 0;
            do
            {
              if (v71 < *((unsigned int *)this + 92))
              {
                v72 = &a6[v70];
                v73 = (uint64_t *)(*((_QWORD *)this + 45) + v70);
                v74 = *v73;
                *((_DWORD *)v72 + 2) = *((_DWORD *)v73 + 2);
                *(_QWORD *)v72 = v74;
              }
              ++v71;
              v70 += 12;
            }
            while (12 * v69 != v70);
          }
          v75 = 12 * v69;
          goto LABEL_226;
        }
        if ((_DWORD)mSelector == 1719105134)
        {
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_PlugInBox.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 281;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInBox::GetPropertyData: bad property data size for kAudioObjectPropertyFirmwareVersion", buf, 0x12u);
            }
            v155 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v155 = &off_1E69A1B30;
            v155[2] = 561211770;
          }
          v32 = *((_QWORD *)this + 43);
          v33 = *(_QWORD *)(v32 + 400);
          v34 = *(std::__shared_weak_count **)(v32 + 408);
          *(_QWORD *)buf = v33;
          *(_QWORD *)&buf[8] = v34;
          if (v34)
          {
            v35 = (unint64_t *)&v34->__shared_owners_;
            do
              v36 = __ldxr(v35);
            while (__stxr(v36 + 1, v35));
          }
          v37 = *((unsigned int *)this + 89);
          if (a9)
            v38 = *((unsigned int *)a9 + 58);
          else
            v38 = 0;
          v168 = 0x676C6F626677766ELL;
          v169 = 0;
          v170 = 0;
          v171 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, int *, uint64_t *))(*(_QWORD *)v33 + 568))(v33, v37, v38, &v168, 0, 0, 8, &v171, &v170);
          *v11 = v170;
          if (!v34)
            goto LABEL_225;
          v141 = (unint64_t *)&v34->__shared_owners_;
          do
            v142 = __ldaxr(v141);
          while (__stlxr(v142 - 1, v141));
          goto LABEL_223;
        }
      }
    }
    else
    {
      if ((int)mSelector > 1920168546)
      {
        if ((_DWORD)mSelector == 1920168547)
        {
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_PlugInBox.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 391;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInBox::GetPropertyData: bad property data size for kAudioObjectPropertyResourceBundle", buf, 0x12u);
            }
            v161 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v161 = &off_1E69A1B30;
            v161[2] = 561211770;
          }
          *(_QWORD *)a6 = HALS_PlugInObject::CopyResourceBundlePath((uint64_t)this + 336, (uint64_t)a9);
          goto LABEL_225;
        }
        if ((_DWORD)mSelector != 1936618861)
        {
          if ((_DWORD)mSelector == 1953653102)
          {
            if (a4 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_PlugInBox.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 289;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInBox::GetPropertyData: bad property data size for kAudioBoxPropertyTransportType", buf, 0x12u);
              }
              v162 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v162 = &off_1E69A1B30;
              v162[2] = 561211770;
            }
            v18 = *((_QWORD *)this + 43);
            v19 = *(_QWORD *)(v18 + 400);
            v20 = *(std::__shared_weak_count **)(v18 + 408);
            *(_QWORD *)buf = v19;
            *(_QWORD *)&buf[8] = v20;
            if (v20)
            {
              v21 = (unint64_t *)&v20->__shared_owners_;
              do
                v22 = __ldxr(v21);
              while (__stxr(v22 + 1, v21));
            }
            v23 = *((unsigned int *)this + 89);
            if (a9)
              v24 = *((unsigned int *)a9 + 58);
            else
              v24 = 0;
            v168 = 0x676C6F627472616ELL;
            v169 = 0;
            LODWORD(v170) = 0;
            v171 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, int *, uint64_t *))(*(_QWORD *)v19 + 568))(v19, v23, v24, &v168, 0, 0, 4, &v171, &v170);
            *(_DWORD *)v11 = v170;
            if (!v20)
              goto LABEL_218;
            v149 = (unint64_t *)&v20->__shared_owners_;
            do
              v140 = __ldaxr(v149);
            while (__stlxr(v140 - 1, v149));
LABEL_216:
            if (!v140)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
LABEL_218:
            v75 = 4;
LABEL_226:
            *a5 = v75;
            return;
          }
          goto LABEL_123;
        }
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_PlugInBox.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 273;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInBox::GetPropertyData: bad property data size for kAudioObjectPropertySerialNumber", buf, 0x12u);
          }
          v157 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v157 = &off_1E69A1B30;
          v157[2] = 561211770;
        }
        v82 = *((_QWORD *)this + 43);
        v83 = *(_QWORD *)(v82 + 400);
        v34 = *(std::__shared_weak_count **)(v82 + 408);
        *(_QWORD *)buf = v83;
        *(_QWORD *)&buf[8] = v34;
        if (v34)
        {
          v84 = (unint64_t *)&v34->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
        v86 = *((unsigned int *)this + 89);
        if (a9)
          v87 = *((unsigned int *)a9 + 58);
        else
          v87 = 0;
        v168 = 0x676C6F62736E756DLL;
        v169 = 0;
        v170 = 0;
        v171 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, int *, uint64_t *))(*(_QWORD *)v83 + 568))(v83, v86, v87, &v168, 0, 0, 8, &v171, &v170);
        *v11 = v170;
        if (!v34)
        {
LABEL_225:
          v75 = 8;
          goto LABEL_226;
        }
        v144 = (unint64_t *)&v34->__shared_owners_;
        do
          v142 = __ldaxr(v144);
        while (__stlxr(v142 - 1, v144));
LABEL_223:
        if (!v142)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
        goto LABEL_225;
      }
      if ((_DWORD)mSelector == 1819111268)
      {
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_PlugInBox.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 249;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInBox::GetPropertyData: bad property data size for kAudioObjectPropertyModelName", buf, 0x12u);
          }
          v166 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v166 = &off_1E69A1B30;
          v166[2] = 561211770;
        }
        v113 = *((_QWORD *)this + 43);
        v114 = *(_QWORD *)(v113 + 400);
        v34 = *(std::__shared_weak_count **)(v113 + 408);
        *(_QWORD *)buf = v114;
        *(_QWORD *)&buf[8] = v34;
        if (v34)
        {
          v115 = (unint64_t *)&v34->__shared_owners_;
          do
            v116 = __ldxr(v115);
          while (__stxr(v116 + 1, v115));
        }
        v117 = *((unsigned int *)this + 89);
        if (a9)
          v118 = *((unsigned int *)a9 + 58);
        else
          v118 = 0;
        v168 = 0x676C6F626C6D6F64;
        v169 = 0;
        v170 = 0;
        v171 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, int *, uint64_t *))(*(_QWORD *)v114 + 568))(v114, v117, v118, &v168, 0, 0, 8, &v171, &v170);
        *v11 = v170;
        if (!v34)
          goto LABEL_225;
        v148 = (unint64_t *)&v34->__shared_owners_;
        do
          v142 = __ldaxr(v148);
        while (__stlxr(v142 - 1, v148));
        goto LABEL_223;
      }
      if ((_DWORD)mSelector == 1819173229)
      {
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_PlugInBox.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 241;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInBox::GetPropertyData: bad property data size for kAudioObjectPropertyName", buf, 0x12u);
          }
          v167 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v167 = &off_1E69A1B30;
          v167[2] = 561211770;
        }
        v63 = *((_QWORD *)this + 43);
        v64 = *(_QWORD *)(v63 + 400);
        v34 = *(std::__shared_weak_count **)(v63 + 408);
        *(_QWORD *)buf = v64;
        *(_QWORD *)&buf[8] = v34;
        if (v34)
        {
          v65 = (unint64_t *)&v34->__shared_owners_;
          do
            v66 = __ldxr(v65);
          while (__stxr(v66 + 1, v65));
        }
        v67 = *((unsigned int *)this + 89);
        if (a9)
          v68 = *((unsigned int *)a9 + 58);
        else
          v68 = 0;
        v168 = 0x676C6F626C6E616DLL;
        v169 = 0;
        v170 = 0;
        v171 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, int *, uint64_t *))(*(_QWORD *)v64 + 568))(v64, v67, v68, &v168, 0, 0, 8, &v171, &v170);
        *v11 = v170;
        if (!v34)
          goto LABEL_225;
        v153 = (unint64_t *)&v34->__shared_owners_;
        do
          v142 = __ldaxr(v153);
        while (__stlxr(v142 - 1, v153));
        goto LABEL_223;
      }
    }
LABEL_123:
    if (HALS_Box::HasProperty((uint64_t)this, a2, (int *)a3))
    {
      HALS_Box::GetPropertyData(this, a2, a3, a4, a5, v11, a7, a8, a9);
    }
    else if ((*(unsigned int (**)(char *, uint64_t))(*((_QWORD *)this + 42) + 24))((char *)this + 336, mSelector))
    {
      v119 = *((_QWORD *)this + 43);
      v120 = *(_QWORD *)(v119 + 400);
      v121 = *(_QWORD *)(v119 + 408);
      *(_QWORD *)buf = v120;
      *(_QWORD *)&buf[8] = v121;
      if (v121)
      {
        v122 = (unint64_t *)(v121 + 8);
        do
          v123 = __ldxr(v122);
        while (__stxr(v123 + 1, v122));
      }
      if (a9)
        v124 = *((unsigned int *)a9 + 58);
      else
        v124 = 0;
      (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, uint64_t *, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)v120 + 568))(v120, *((unsigned int *)this + 89), v124, a3, a7, a8, a4, a5, v11);
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    }
    return;
  }
  if ((int)mSelector > 1651013224)
  {
    if ((int)mSelector > 1652060005)
    {
      if ((_DWORD)mSelector == 1652060006)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_PlugInBox.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 337;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInBox::GetPropertyData: bad property data size for kAudioBoxPropertyAcquisitionFailed", buf, 0x12u);
          }
          v160 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v160 = &off_1E69A1B30;
          v160[2] = 561211770;
        }
        v107 = *((_QWORD *)this + 43);
        v108 = *(_QWORD *)(v107 + 400);
        v20 = *(std::__shared_weak_count **)(v107 + 408);
        *(_QWORD *)buf = v108;
        *(_QWORD *)&buf[8] = v20;
        if (v20)
        {
          v109 = (unint64_t *)&v20->__shared_owners_;
          do
            v110 = __ldxr(v109);
          while (__stxr(v110 + 1, v109));
        }
        v111 = *((unsigned int *)this + 89);
        if (a9)
          v112 = *((unsigned int *)a9 + 58);
        else
          v112 = 0;
        v168 = 0x676C6F6262786F66;
        v169 = 0;
        LODWORD(v170) = 0;
        v171 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, int *, uint64_t *))(*(_QWORD *)v108 + 568))(v108, v111, v112, &v168, 0, 0, 4, &v171, &v170);
        *(_DWORD *)v11 = v170;
        if (!v20)
          goto LABEL_218;
        v147 = (unint64_t *)&v20->__shared_owners_;
        do
          v140 = __ldaxr(v147);
        while (__stlxr(v140 - 1, v147));
        goto LABEL_216;
      }
      if ((_DWORD)mSelector == 1652060014)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_PlugInBox.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 329;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInBox::GetPropertyData: bad property data size for kAudioBoxPropertyAcquired", buf, 0x12u);
          }
          v165 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v165 = &off_1E69A1B30;
          v165[2] = 561211770;
        }
        v57 = *((_QWORD *)this + 43);
        v58 = *(_QWORD *)(v57 + 400);
        v20 = *(std::__shared_weak_count **)(v57 + 408);
        *(_QWORD *)buf = v58;
        *(_QWORD *)&buf[8] = v20;
        if (v20)
        {
          v59 = (unint64_t *)&v20->__shared_owners_;
          do
            v60 = __ldxr(v59);
          while (__stxr(v60 + 1, v59));
        }
        v61 = *((unsigned int *)this + 89);
        if (a9)
          v62 = *((unsigned int *)a9 + 58);
        else
          v62 = 0;
        v168 = 0x676C6F6262786F6ELL;
        v169 = 0;
        LODWORD(v170) = 0;
        v171 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, int *, uint64_t *))(*(_QWORD *)v58 + 568))(v58, v61, v62, &v168, 0, 0, 4, &v171, &v170);
        *(_DWORD *)v11 = v170;
        if (!v20)
          goto LABEL_218;
        v152 = (unint64_t *)&v20->__shared_owners_;
        do
          v140 = __ldaxr(v152);
        while (__stlxr(v140 - 1, v152));
        goto LABEL_216;
      }
    }
    else
    {
      if ((_DWORD)mSelector == 1651013225)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_PlugInBox.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 305;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInBox::GetPropertyData: bad property data size for kAudioBoxPropertyHasVideo", buf, 0x12u);
          }
          v158 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v158 = &off_1E69A1B30;
          v158[2] = 561211770;
        }
        v95 = *((_QWORD *)this + 43);
        v96 = *(_QWORD *)(v95 + 400);
        v20 = *(std::__shared_weak_count **)(v95 + 408);
        *(_QWORD *)buf = v96;
        *(_QWORD *)&buf[8] = v20;
        if (v20)
        {
          v97 = (unint64_t *)&v20->__shared_owners_;
          do
            v98 = __ldxr(v97);
          while (__stxr(v98 + 1, v97));
        }
        v99 = *((unsigned int *)this + 89);
        if (a9)
          v100 = *((unsigned int *)a9 + 58);
        else
          v100 = 0;
        v168 = 0x676C6F6262687669;
        v169 = 0;
        LODWORD(v170) = 0;
        v171 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, int *, uint64_t *))(*(_QWORD *)v96 + 568))(v96, v99, v100, &v168, 0, 0, 4, &v171, &v170);
        *(_DWORD *)v11 = v170;
        if (!v20)
          goto LABEL_218;
        v145 = (unint64_t *)&v20->__shared_owners_;
        do
          v140 = __ldaxr(v145);
        while (__stlxr(v140 - 1, v145));
        goto LABEL_216;
      }
      if ((_DWORD)mSelector == 1651536495)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_PlugInBox.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 321;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInBox::GetPropertyData: bad property data size for kAudioBoxPropertyIsProtected", buf, 0x12u);
          }
          v163 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v163 = &off_1E69A1B30;
          v163[2] = 561211770;
        }
        v39 = *((_QWORD *)this + 43);
        v40 = *(_QWORD *)(v39 + 400);
        v20 = *(std::__shared_weak_count **)(v39 + 408);
        *(_QWORD *)buf = v40;
        *(_QWORD *)&buf[8] = v20;
        if (v20)
        {
          v41 = (unint64_t *)&v20->__shared_owners_;
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        v43 = *((unsigned int *)this + 89);
        if (a9)
          v44 = *((unsigned int *)a9 + 58);
        else
          v44 = 0;
        v168 = 0x676C6F626270726FLL;
        v169 = 0;
        LODWORD(v170) = 0;
        v171 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, int *, uint64_t *))(*(_QWORD *)v40 + 568))(v40, v43, v44, &v168, 0, 0, 4, &v171, &v170);
        *(_DWORD *)v11 = v170;
        if (!v20)
          goto LABEL_218;
        v150 = (unint64_t *)&v20->__shared_owners_;
        do
          v140 = __ldaxr(v150);
        while (__stlxr(v140 - 1, v150));
        goto LABEL_216;
      }
    }
    goto LABEL_123;
  }
  if ((int)mSelector > 1651007860)
  {
    if ((_DWORD)mSelector == 1651007861)
    {
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_PlugInBox.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 297;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInBox::GetPropertyData: bad property data size for kAudioBoxPropertyHasAudio", buf, 0x12u);
        }
        v159 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v159 = &off_1E69A1B30;
        v159[2] = 561211770;
      }
      v101 = *((_QWORD *)this + 43);
      v102 = *(_QWORD *)(v101 + 400);
      v20 = *(std::__shared_weak_count **)(v101 + 408);
      *(_QWORD *)buf = v102;
      *(_QWORD *)&buf[8] = v20;
      if (v20)
      {
        v103 = (unint64_t *)&v20->__shared_owners_;
        do
          v104 = __ldxr(v103);
        while (__stxr(v104 + 1, v103));
      }
      v105 = *((unsigned int *)this + 89);
      if (a9)
        v106 = *((unsigned int *)a9 + 58);
      else
        v106 = 0;
      v168 = 0x676C6F6262686175;
      v169 = 0;
      LODWORD(v170) = 0;
      v171 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, int *, uint64_t *))(*(_QWORD *)v102 + 568))(v102, v105, v106, &v168, 0, 0, 4, &v171, &v170);
      *(_DWORD *)v11 = v170;
      if (!v20)
        goto LABEL_218;
      v146 = (unint64_t *)&v20->__shared_owners_;
      do
        v140 = __ldaxr(v146);
      while (__stlxr(v140 - 1, v146));
      goto LABEL_216;
    }
    if ((_DWORD)mSelector == 1651010921)
    {
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_PlugInBox.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 313;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInBox::GetPropertyData: bad property data size for kAudioBoxPropertyHasMIDI", buf, 0x12u);
        }
        v164 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v164 = &off_1E69A1B30;
        v164[2] = 561211770;
      }
      v51 = *((_QWORD *)this + 43);
      v52 = *(_QWORD *)(v51 + 400);
      v20 = *(std::__shared_weak_count **)(v51 + 408);
      *(_QWORD *)buf = v52;
      *(_QWORD *)&buf[8] = v20;
      if (v20)
      {
        v53 = (unint64_t *)&v20->__shared_owners_;
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      v55 = *((unsigned int *)this + 89);
      if (a9)
        v56 = *((unsigned int *)a9 + 58);
      else
        v56 = 0;
      v168 = 0x676C6F6262686D69;
      v169 = 0;
      LODWORD(v170) = 0;
      v171 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, int *, uint64_t *))(*(_QWORD *)v52 + 568))(v52, v55, v56, &v168, 0, 0, 4, &v171, &v170);
      *(_DWORD *)v11 = v170;
      if (!v20)
        goto LABEL_218;
      v151 = (unint64_t *)&v20->__shared_owners_;
      do
        v140 = __ldaxr(v151);
      while (__stlxr(v140 - 1, v151));
      goto LABEL_216;
    }
    goto LABEL_123;
  }
  if ((_DWORD)mSelector == 1650682915)
  {
    v88 = *((_QWORD *)this + 43);
    v89 = *(_QWORD *)(v88 + 400);
    v90 = *(std::__shared_weak_count **)(v88 + 408);
    *(_QWORD *)buf = v89;
    *(_QWORD *)&buf[8] = v90;
    if (v90)
    {
      v91 = (unint64_t *)&v90->__shared_owners_;
      do
        v92 = __ldxr(v91);
      while (__stxr(v92 + 1, v91));
    }
    v93 = *((unsigned int *)this + 89);
    if (a9)
      v94 = *((unsigned int *)a9 + 58);
    else
      v94 = 0;
    v168 = 0x676C6F6262636C23;
    v169 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, unsigned int *, char *))(*(_QWORD *)v89 + 568))(v89, v93, v94, &v168, 0, 0, a4, a5, a6);
    if (v90)
    {
      v125 = (unint64_t *)&v90->__shared_owners_;
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 - 1, v125));
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }
    v127 = *a5;
    if (v127 >= 4)
    {
      v128 = v127 >> 2;
      do
      {
        v129 = (HALS_ObjectMap *)HALS_PlugIn::CopyClockDeviceByUCID(*((HALS_PlugIn **)this + 43), *(_DWORD *)v11);
        if (v129)
          v131 = *((_DWORD *)v129 + 4);
        else
          v131 = 0;
        *(_DWORD *)v11 = v131;
        HALS_ObjectMap::ReleaseObject(v129, v130);
        v11 = (uint64_t *)((char *)v11 + 4);
        --v128;
      }
      while (v128);
    }
  }
  else
  {
    if ((_DWORD)mSelector != 1650751011)
      goto LABEL_123;
    v25 = *((_QWORD *)this + 43);
    v26 = *(_QWORD *)(v25 + 400);
    v27 = *(std::__shared_weak_count **)(v25 + 408);
    *(_QWORD *)buf = v26;
    *(_QWORD *)&buf[8] = v27;
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v30 = *((unsigned int *)this + 89);
    if (a9)
      v31 = *((unsigned int *)a9 + 58);
    else
      v31 = 0;
    v168 = 0x676C6F6262647623;
    v169 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, unsigned int *, char *))(*(_QWORD *)v26 + 568))(v26, v30, v31, &v168, 0, 0, a4, a5, a6);
    if (v27)
    {
      v132 = (unint64_t *)&v27->__shared_owners_;
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v134 = *a5;
    if (v134 >= 4)
    {
      v135 = v134 >> 2;
      do
      {
        v136 = (HALS_ObjectMap *)HALS_PlugIn::CopyDeviceByUCID(*((HALS_PlugIn **)this + 43), *(_DWORD *)v11);
        if (v136)
          v138 = *((_DWORD *)v136 + 4);
        else
          v138 = 0;
        *(_DWORD *)v11 = v138;
        HALS_ObjectMap::ReleaseObject(v136, v137);
        v11 = (uint64_t *)((char *)v11 + 4);
        --v135;
      }
      while (v135);
    }
  }
}

void sub_1B5956B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void HALS_PlugInBox::SetPropertyData(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  std::__shared_weak_count *v56;

  v12 = *a3;
  switch((_DWORD)v12)
  {
    case 0x62786F6E:
      v20 = *(_QWORD *)(a1 + 344);
      v21 = *(_QWORD *)(v20 + 400);
      v15 = *(std::__shared_weak_count **)(v20 + 408);
      v55 = v21;
      v56 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v23 = __ldxr(p_shared_owners);
        while (__stxr(v23 + 1, p_shared_owners));
      }
      v24 = *(unsigned int *)(a1 + 356);
      if (a8)
        v25 = *(unsigned int *)(a8 + 232);
      else
        v25 = 0;
      v53 = 0x676C6F6262786F6ELL;
      v54 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v21 + 576))(v21, v24, v25, &v53, 0, 0, a4, a5);
      if (v15)
      {
        v46 = (unint64_t *)&v15->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        goto LABEL_42;
      }
      break;
    case 0x6964656E:
      v26 = *(_QWORD *)(a1 + 344);
      v27 = *(_QWORD *)(v26 + 400);
      v15 = *(std::__shared_weak_count **)(v26 + 408);
      v55 = v27;
      v56 = v15;
      if (v15)
      {
        v28 = (unint64_t *)&v15->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = *(unsigned int *)(a1 + 356);
      if (a8)
        v31 = *(unsigned int *)(a8 + 232);
      else
        v31 = 0;
      v53 = 0x676C6F626964656ELL;
      v54 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v27 + 576))(v27, v30, v31, &v53, 0, 0, a4, a5);
      if (v15)
      {
        v48 = (unint64_t *)&v15->__shared_owners_;
        do
          v47 = __ldaxr(v48);
        while (__stlxr(v47 - 1, v48));
        goto LABEL_42;
      }
      break;
    case 0x6C6E616D:
      v13 = *(_QWORD *)(a1 + 344);
      v14 = *(_QWORD *)(v13 + 400);
      v15 = *(std::__shared_weak_count **)(v13 + 408);
      v55 = v14;
      v56 = v15;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v18 = *(unsigned int *)(a1 + 356);
      if (a8)
        v19 = *(unsigned int *)(a8 + 232);
      else
        v19 = 0;
      v53 = 0x676C6F626C6E616DLL;
      v54 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v14 + 576))(v14, v18, v19, &v53, 0, 0, a4, a5);
      if (v15)
      {
        v49 = (unint64_t *)&v15->__shared_owners_;
        do
          v47 = __ldaxr(v49);
        while (__stlxr(v47 - 1, v49));
LABEL_42:
        if (v47)
          return;
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        v50 = v15;
        goto LABEL_44;
      }
      break;
    default:
      if (HALS_Box::HasProperty(a1, a2, a3))
      {
        if ((HALS_Box::IsPropertySettable(a1, a2, a3) & 1) != 0)
          HALS_Object::SetPropertyData(a1, a2, (uint64_t)a3, v36, v37, v38, v39, a8);
        v12 = *a3;
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 336) + 24))(a1 + 336, v12))
      {
        v40 = *(_QWORD *)(a1 + 344);
        v41 = *(_QWORD *)(v40 + 400);
        v42 = *(std::__shared_weak_count **)(v40 + 408);
        v55 = v41;
        v56 = v42;
        if (v42)
        {
          v43 = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
        }
        v45 = a8 ? *(unsigned int *)(a8 + 232) : 0;
        (*(void (**)(uint64_t, _QWORD, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v41 + 576))(v41, *(unsigned int *)(a1 + 356), v45, a3, a6, a7, a4, a5);
        if (v42)
        {
          v51 = (unint64_t *)&v42->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            v50 = v42;
LABEL_44:
            std::__shared_weak_count::__release_weak(v50);
          }
        }
      }
      break;
  }
}

void sub_1B5956F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void HALS_PlugInBox::_CopyControls(uint64_t a1, void **a2)
{
  HALS_ObjectMap **v2;
  HALS_ObjectMap **v3;
  void **v4;
  HALS_ObjectMap *v5;
  unint64_t v6;
  HALS_ObjectMap **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  HALS_ObjectMap **v13;
  char *v14;
  char *v15;
  HALS_ObjectMap *v16;

  v2 = *(HALS_ObjectMap ***)(a1 + 376);
  v3 = *(HALS_ObjectMap ***)(a1 + 384);
  if (v2 != v3)
  {
    v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, (HALS_Object *)a2);
      v5 = *v2;
      v7 = (HALS_ObjectMap **)v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 >= v6)
      {
        v9 = ((char *)v7 - (_BYTE *)*v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v10 = v6 - (_QWORD)*v4;
        v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1))
          v11 = v9 + 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
          v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        else
          a2 = 0;
        v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        *v13 = v5;
        v8 = v13 + 1;
        v15 = (char *)*v4;
        v14 = (char *)v4[1];
        if (v14 != *v4)
        {
          do
          {
            v16 = (HALS_ObjectMap *)*((_QWORD *)v14 - 1);
            v14 -= 8;
            *--v13 = v16;
          }
          while (v14 != v15);
          v14 = (char *)*v4;
        }
        *v4 = v13;
        v4[1] = v8;
        v4[2] = (void *)(v12 + 8 * (_QWORD)a2);
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v7 = v5;
        v8 = v7 + 1;
      }
      v4[1] = v8;
      ++v2;
    }
    while (v2 != v3);
  }
}

uint64_t HALS_PlugInBox::_GetNumberControls(HALS_PlugInBox *this)
{
  return (*((_QWORD *)this + 48) - *((_QWORD *)this + 47)) >> 3;
}

HALS_ObjectMap *HALS_PlugInBox::_CopyControlByIndex(HALS_PlugInBox *this, HALS_Object *a2)
{
  uint64_t v2;
  HALS_ObjectMap *v3;

  v2 = *((_QWORD *)this + 47);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 48) - v2) >> 3))
    v3 = 0;
  else
    v3 = *(HALS_ObjectMap **)(v2 + 8 * a2);
  HALS_ObjectMap::RetainObject(v3, a2);
  return v3;
}

HALS_ObjectMap *HALS_PlugInBox::_CopyControlByDescription(HALS_PlugInBox *this, HALS_Object *a2, int a3, int a4)
{
  HALS_ObjectMap **i;
  HALS_ObjectMap *v5;

  for (i = (HALS_ObjectMap **)*((_QWORD *)this + 47); i != *((HALS_ObjectMap ***)this + 48); ++i)
  {
    v5 = *i;
    if (*((_DWORD *)*i + 5) == (_DWORD)a2 && *((_DWORD *)v5 + 12) == a3 && *((_DWORD *)v5 + 13) == a4)
      goto LABEL_8;
  }
  v5 = 0;
LABEL_8:
  HALS_ObjectMap::RetainObject(v5, a2);
  return v5;
}

void HALS_PlugInBox::HandlePlugIn_PropertiesChanged(HALS_PlugInBox *this, uint64_t a2, const AudioObjectPropertyAddress *a3)
{
  char v6;
  const AudioObjectPropertyAddress *v7;
  uint64_t v8;
  AudioObjectPropertySelector mSelector;

  if ((_DWORD)a2)
  {
    v6 = 0;
    v7 = a3;
    v8 = a2;
    do
    {
      mSelector = v7->mSelector;
      ++v7;
      v6 |= mSelector == 1668575852;
      --v8;
    }
    while (v8);
    if ((v6 & 1) != 0)
      HALS_PlugInBox::CreateControls(this);
  }
  HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*((unsigned int *)this + 4), 0, a2, a3);
}

void `non-virtual thunk to'HALS_PlugInBox::~HALS_PlugInBox(HALS_PlugInBox *this)
{
  HALS_PlugInBox::~HALS_PlugInBox((HALS_PlugInBox *)((char *)this - 336));
}

{
  HALS_PlugInBox::~HALS_PlugInBox((HALS_PlugInBox *)((char *)this - 336));
  JUMPOUT(0x1B5E50688);
}

void `non-virtual thunk to'HALS_PlugInBox::HandlePlugIn_PropertiesChanged(HALS_PlugInBox *this, uint64_t a2, const AudioObjectPropertyAddress *a3)
{
  HALS_PlugInBox::HandlePlugIn_PropertiesChanged((HALS_PlugInBox *)((char *)this - 336), a2, a3);
}

void HALS_PlugInBox::CreateControls(HALS_PlugInBox *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  int v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::vector<unsigned int>::pointer begin;
  HALB_Mutex *v28;
  HALS_Object *v29;
  _QWORD *v30;
  _QWORD *v31;
  HALS_ObjectMap **v32;
  HALS_ObjectMap **v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD v37[7];
  void *__p;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  __n128 (*v44)(_QWORD *, uint64_t);
  void (*v45)(uint64_t);
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  __n128 (*v52)(_QWORD *, uint64_t);
  void (*v53)(uint64_t);
  void *v54;
  void *v55;
  uint64_t v56;
  std::vector<unsigned int> v57;
  unsigned int v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  int v62;

  LODWORD(v42) = 0;
  v41 = *(_QWORD *)"lrtcbolg";
  v2 = *((_QWORD *)this + 43);
  v3 = *(_QWORD *)(v2 + 400);
  v4 = *(std::__shared_weak_count **)(v2 + 408);
  v49 = v3;
  v50 = (uint64_t *)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)v3 + 544))(v3, *((unsigned int *)this + 89), 0, &v41);
  v8 = v7;
  if (!v4)
    goto LABEL_8;
  v9 = (unint64_t *)&v4->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v8)
      return;
  }
  else
  {
LABEL_8:
    if (!v7)
      return;
  }
  v11 = *((_QWORD *)this + 43);
  v12 = *(_QWORD *)(v11 + 400);
  v13 = *(std::__shared_weak_count **)(v11 + 408);
  v59 = v12;
  v60 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v58 = 0;
  v16 = *((unsigned int *)this + 89);
  v49 = 0x676C6F626374726CLL;
  LODWORD(v50) = 0;
  v58 = (*(unsigned int (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)v12 + 560))(v12, v16, 0, &v49, 0, 0) >> 2;
  memset(&v57, 0, sizeof(v57));
  std::vector<unsigned int>::resize(&v57, v58);
  v17 = v58;
  if (v58)
  {
    v18 = *((_QWORD *)this + 43);
    v19 = *(_QWORD *)(v18 + 400);
    v20 = *(_QWORD *)(v18 + 408);
    v49 = v19;
    v50 = (uint64_t *)v20;
    if (v20)
    {
      v21 = (unint64_t *)(v20 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v23 = *((unsigned int *)this + 89);
    v61 = 0x676C6F626374726CLL;
    v62 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD, _QWORD, unsigned int *, std::vector<unsigned int>::pointer))(*(_QWORD *)v19 + 568))(v19, v23, 0, &v61, 0, 0, 4 * v17, &v58, v57.__begin_);
    v58 >>= 2;
    v24 = (std::__shared_weak_count *)v50;
    if (v50)
    {
      v25 = (unint64_t *)(v50 + 1);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    std::vector<unsigned int>::resize(&v57, v58);
  }
  v49 = 0;
  v50 = &v49;
  v51 = 0x4002000000;
  v52 = __Block_byref_object_copy__3170;
  v53 = __Block_byref_object_dispose__3171;
  v55 = 0;
  v56 = 0;
  v54 = 0;
  v41 = 0;
  v42 = &v41;
  v43 = 0x4002000000;
  v44 = __Block_byref_object_copy__3170;
  v45 = __Block_byref_object_dispose__3171;
  v47 = 0;
  v48 = 0;
  v46 = 0;
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 1174405120;
  v37[2] = ___ZN14HALS_PlugInBox14CreateControlsEv_block_invoke;
  v37[3] = &unk_1E69768E8;
  v37[6] = this;
  __p = 0;
  begin = v57.__begin_;
  v39 = 0;
  v40 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v57.__begin_, (uint64_t)v57.__end_, v57.__end_ - v57.__begin_);
  v37[4] = &v49;
  v37[5] = &v41;
  v28 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInBox *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v28, (uint64_t)v37);
  v30 = (_QWORD *)v50[5];
  v31 = (_QWORD *)v50[6];
  while (v30 != v31)
  {
    (**(void (***)(_QWORD))*v30)(*v30);
    ++v30;
  }
  v32 = (HALS_ObjectMap **)v42[5];
  v33 = (HALS_ObjectMap **)v42[6];
  while (v32 != v33)
    HALS_ObjectMap::ReleaseObject(*v32++, v29);
  if (__p)
  {
    v39 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v41, 8);
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
  _Block_object_dispose(&v49, 8);
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
  if (begin)
    operator delete(begin);
  v34 = v60;
  if (v60)
  {
    v35 = (unint64_t *)&v60->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_1B595756C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B595739CLL);
}

void sub_1B5957588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  void *v35;
  uint64_t v36;

  _Block_object_dispose(&a21, 8);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a29, 8);
  if (a34)
  {
    a35 = (uint64_t)a34;
    operator delete(a34);
  }
  if (v35)
    operator delete(v35);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v36 - 96);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__3170(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__3171(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN14HALS_PlugInBox14CreateControlsEv_block_invoke(_QWORD *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  HALB_Info *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char **v46;
  uint64_t v47;
  unsigned int v48;
  HALS_ObjectMap *v49;
  HALS_Object *v50;
  char *v51;
  char *v52;
  int64_t v53;
  uint64_t *i;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  HALS_ObjectMap **v67;
  HALS_ObjectMap **v68;
  HALS_ObjectMap *v69;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;

  v2 = a1;
  v3 = a1[6];
  v4 = *(_QWORD **)(a1[4] + 8);
  v5 = *(char **)(v3 + 376);
  v6 = *(char **)(v3 + 384);
  if (v5 != v6)
  {
    v7 = *(char **)(v3 + 376);
    do
    {
      v8 = *(_QWORD *)v7;
      v7 += 8;
      *(_BYTE *)(v8 + 13) = 0;
    }
    while (v7 != v6);
  }
  v9 = (unsigned int *)a1[7];
  v10 = (unsigned int *)a1[8];
  if (v9 != v10)
  {
    do
    {
      v11 = *v9;
      v12 = *(uint64_t **)(v3 + 376);
      v13 = (uint64_t)(*(_QWORD *)(v3 + 384) - (_QWORD)v12) >> 3;
      while (v13)
      {
        v15 = *v12++;
        v14 = v15;
        --v13;
        if (*(_DWORD *)(v15 + 92) == (_DWORD)v11 && v14 != 0)
        {
          *(_BYTE *)(v14 + 13) = 1;
          goto LABEL_45;
        }
      }
      v17 = *(_QWORD *)(v3 + 344);
      v18 = *(_QWORD *)(v17 + 400);
      v19 = *(std::__shared_weak_count **)(v17 + 408);
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
      }
      v71 = 0x676C6F62636C6173;
      v72 = 0;
      v73 = 0;
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD, uint64_t, uint64_t *, char *))(*(_QWORD *)v18 + 568))(v18, v11, 0, &v71, 0, 0, 4, &v73, (char *)&v73 + 4);
      v22 = (HALB_Info *)HIDWORD(v73);
      if (v19)
      {
        v23 = (unint64_t *)&v19->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v25 = *(_QWORD *)(v3 + 344);
      v26 = *(_QWORD *)(v25 + 400);
      v27 = *(std::__shared_weak_count **)(v25 + 408);
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v74 = 0x676C6F6262636C73;
      v75 = 0;
      v76 = 0;
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD, uint64_t, uint64_t *, char *))(*(_QWORD *)v26 + 568))(v26, v11, 0, &v74, 0, 0, 4, &v76, (char *)&v76 + 4);
      v30 = HIDWORD(v76);
      if (v27)
      {
        v31 = (unint64_t *)&v27->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v33 = operator new();
      HALS_PlugInControl::HALS_PlugInControl(v33, *(HALS_ObjectMap **)(v3 + 344), v3, v11, v22, v30, 0);
      v35 = (uint64_t *)v4[6];
      v34 = v4[7];
      if ((unint64_t)v35 >= v34)
      {
        v37 = v4[5];
        v38 = ((uint64_t)v35 - v37) >> 3;
        if ((unint64_t)(v38 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v39 = v34 - v37;
        v40 = v39 >> 2;
        if (v39 >> 2 <= (unint64_t)(v38 + 1))
          v40 = v38 + 1;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
          v41 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v41 = v40;
        if (v41)
          v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v41);
        else
          a2 = 0;
        v42 = (uint64_t *)(v41 + 8 * v38);
        *v42 = v33;
        v36 = v42 + 1;
        v44 = (char *)v4[5];
        v43 = (char *)v4[6];
        if (v43 != v44)
        {
          do
          {
            v45 = *((_QWORD *)v43 - 1);
            v43 -= 8;
            *--v42 = v45;
          }
          while (v43 != v44);
          v43 = (char *)v4[5];
        }
        v4[5] = v42;
        v4[6] = v36;
        v4[7] = v41 + 8 * (_QWORD)a2;
        if (v43)
          operator delete(v43);
      }
      else
      {
        *v35 = v33;
        v36 = v35 + 1;
      }
      v4[6] = v36;
LABEL_45:
      ++v9;
    }
    while (v9 != v10);
    v5 = *(char **)(v3 + 376);
    v6 = *(char **)(v3 + 384);
    v2 = a1;
  }
  v46 = (char **)(v3 + 376);
  if (v6 == v5)
  {
    v6 = v5;
  }
  else
  {
    v47 = 0;
    v48 = 0;
    do
    {
      v49 = *(HALS_ObjectMap **)&v5[8 * v47];
      if (*((_BYTE *)v49 + 13))
      {
        ++v48;
      }
      else
      {
        (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v49 + 8))(v49);
        HALS_ObjectMap::ObjectIsDead(v49, v50);
        v5 = *(char **)(v3 + 376);
        v51 = *(char **)(v3 + 384);
        v52 = &v5[8 * v47];
        a2 = v52 + 8;
        v53 = v51 - (v52 + 8);
        if (v51 != v52 + 8)
        {
          memmove(&v5[8 * v47], a2, v51 - (v52 + 8));
          v5 = *v46;
        }
        v6 = &v52[v53];
        *(_QWORD *)(v3 + 384) = v6;
      }
      v47 = v48;
    }
    while (v48 < (unint64_t)((v6 - v5) >> 3));
  }
  v55 = (uint64_t *)v4[5];
  for (i = (uint64_t *)v4[6]; v55 != i; ++v55)
  {
    v56 = *v55;
    v57 = *(_QWORD *)(v3 + 392);
    if ((unint64_t)v6 >= v57)
    {
      v58 = (v6 - *v46) >> 3;
      if ((unint64_t)(v58 + 1) >> 61)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v59 = v57 - (_QWORD)*v46;
      v60 = v59 >> 2;
      if (v59 >> 2 <= (unint64_t)(v58 + 1))
        v60 = v58 + 1;
      if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
        v61 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v61 = v60;
      if (v61)
        v61 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v61);
      else
        a2 = 0;
      v62 = (_QWORD *)(v61 + 8 * v58);
      *v62 = v56;
      v6 = (char *)(v62 + 1);
      v64 = *(char **)(v3 + 376);
      v63 = *(char **)(v3 + 384);
      if (v63 != v64)
      {
        do
        {
          v65 = *((_QWORD *)v63 - 1);
          v63 -= 8;
          *--v62 = v65;
        }
        while (v63 != v64);
        v63 = *v46;
      }
      *(_QWORD *)(v3 + 376) = v62;
      *(_QWORD *)(v3 + 384) = v6;
      *(_QWORD *)(v3 + 392) = v61 + 8 * (_QWORD)a2;
      if (v63)
        operator delete(v63);
    }
    else
    {
      *(_QWORD *)v6 = v56;
      v6 += 8;
    }
    *(_QWORD *)(v3 + 384) = v6;
  }
  v66 = *(_QWORD *)(v2[5] + 8);
  if (v46 != (char **)(v66 + 40))
    std::vector<HALS_IOUAControl *>::__assign_with_size[abi:ne180100]<HALS_IOUAControl **,HALS_IOUAControl **>((_QWORD *)(v66 + 40), *v46, v6, (v6 - *v46) >> 3);
  v67 = *(HALS_ObjectMap ***)(v66 + 40);
  v68 = *(HALS_ObjectMap ***)(v66 + 48);
  while (v67 != v68)
  {
    v69 = *v67++;
    HALS_ObjectMap::RetainObject(v69, (HALS_Object *)a2);
  }
}

_QWORD *__copy_helper_block_e8_56c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v2 = (_QWORD *)(a1 + 56);
  v2[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v2, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
}

void __destroy_helper_block_e8_56c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

_QWORD *mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::PlugInRef_Traits>::BasicRef(_QWORD *a1, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *a1 = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFBundleGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return a1;
}

void sub_1B5957C1C(_Unwind_Exception *a1)
{
  const void **v1;
  void *v2;

  __cxa_free_exception(v2);
  applesauce::CF::ObjectRef<__CFBundle *>::~ObjectRef(v1);
  _Unwind_Resume(a1);
}

applesauce::CF::ArrayRef *mcp_applesauce::CF::PlugInRef_proxy::find_factories_for_type(applesauce::CF::ArrayRef *this, const __CFUUID *a2, const __CFUUID *a3)
{
  applesauce::CF::ArrayRef *v3;
  CFArrayRef FactoriesForPlugInTypeInPlugIn;

  v3 = this;
  if (a2)
  {
    FactoriesForPlugInTypeInPlugIn = CFPlugInFindFactoriesForPlugInTypeInPlugIn(a3, a2);
    return applesauce::CF::ArrayRef::ArrayRef(v3, FactoriesForPlugInTypeInPlugIn);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

const void **mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::PlugInRef_Traits>::~BasicRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void Sandbox_Extensions::cache_iokit_registry_token(Sandbox_Extensions *this, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  char *v17;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  NSObject **v30;
  _BYTE v31[10];
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = sandbox_extension_issue_iokit_registry_entry_class();
  if (v3)
  {
    v4 = v3;
    v6 = (uint64_t *)*((_QWORD *)this + 1);
    v5 = *((_QWORD *)this + 2);
    if ((unint64_t)v6 >= v5)
    {
      v20 = ((uint64_t)v6 - *(_QWORD *)this) >> 3;
      if ((unint64_t)(v20 + 1) >> 61)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v21 = v5 - *(_QWORD *)this;
      v22 = v21 >> 2;
      if (v21 >> 2 <= (unint64_t)(v20 + 1))
        v22 = v20 + 1;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v22;
      if (v23)
        v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v23);
      else
        v24 = 0;
      v25 = (uint64_t *)(v23 + 8 * v20);
      v26 = v23 + 8 * v24;
      *v25 = v4;
      v7 = v25 + 1;
      v28 = *(char **)this;
      v27 = (char *)*((_QWORD *)this + 1);
      if (v27 != *(char **)this)
      {
        do
        {
          v29 = *((_QWORD *)v27 - 1);
          v27 -= 8;
          *--v25 = v29;
        }
        while (v27 != v28);
        v27 = *(char **)this;
      }
      *(_QWORD *)this = v25;
      *((_QWORD *)this + 1) = v7;
      *((_QWORD *)this + 2) = v26;
      if (v27)
        operator delete(v27);
    }
    else
    {
      *v6 = v3;
      v7 = v6 + 1;
    }
    *((_QWORD *)this + 1) = v7;
  }
  else
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v30, "com.apple.coreaudio", "AMCP");
    v8 = *(std::__shared_weak_count **)v31;
    v9 = *v30;
    if (*(_QWORD *)v31)
    {
      v10 = (unint64_t *)(*(_QWORD *)v31 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      v14 = 0;
      v15 = 0;
      v16 = 47;
      do
      {
        v17 = &aLibraryCachesC_54[v14];
        if (v16 == 47)
          v15 = &aLibraryCachesC_54[v14];
        v16 = v17[1];
        if (!v17[1])
          break;
      }
      while (v14++ < 0xFFF);
      if (v15)
        v19 = v15 + 1;
      else
        v19 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
      LODWORD(v30) = 67109634;
      HIDWORD(v30) = v13;
      *(_WORD *)v31 = 2080;
      *(_QWORD *)&v31[2] = v19;
      v32 = 1024;
      v33 = 100;
      _os_log_debug_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d sandbox_extension_issue_iokit_registry_entry_class not granted.", (uint8_t *)&v30, 0x18u);
    }
  }
}

applesauce::CF::StringRef *applesauce::CF::details::at_to<applesauce::CF::StringRef>(applesauce::CF::StringRef *a1, CFArrayRef theArray, unint64_t a3)
{
  const void *ValueAtIndex;
  const void *v7;
  std::runtime_error *exception;

  if (CFArrayGetCount(theArray) <= a3
    || (ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3), (v7 = ValueAtIndex) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CFRetain(ValueAtIndex);
  return applesauce::CF::StringRef::StringRef(a1, v7);
}

void sub_1B5957F58(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AMCP::Core::Core::call_operation_function<void,AMCP::Pause_Behavior>(AMCP::Address *a1, unsigned int *a2, int a3)
{
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v7;
  unint64_t v8;
  AMCP::Log::Scope_Registry *v9;
  AMCP::Log::Scope_Registry *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  void *v18;
  std::__shared_weak_count *v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  void *exception;
  NSObject *v26;
  _opaque_pthread_t *v27;
  mach_port_t v28;
  void *v29;
  NSObject *v30;
  _opaque_pthread_t *v31;
  mach_port_t v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t (**v37)();
  __int128 v38;
  uint64_t v39;
  std::string v40;
  std::runtime_error v41;
  std::runtime_error v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char v48;
  uint8_t buf[8];
  _BYTE v50[10];
  __int16 v51;
  int v52;
  __int16 v53;
  _BYTE v54[14];
  const char *v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (*a2 == 707406378 || a2[1] == 707406378 || a2[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v30 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v31 = pthread_self();
      v32 = pthread_mach_thread_np(v31);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v32;
      *(_WORD *)v50 = 2080;
      *(_QWORD *)&v50[2] = "Core.h";
      v51 = 1024;
      v52 = 198;
      v53 = 2080;
      *(_QWORD *)v54 = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1B57BA000, v30, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v33, (int8x8_t *)a1, a2);
  v7 = v33;
  if (!v33)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v19 = *(std::__shared_weak_count **)v50;
    v20 = **(NSObject ***)buf;
    if (*(_QWORD *)v50)
    {
      v21 = (unint64_t *)(*(_QWORD *)v50 + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v23 = pthread_self();
      v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v24;
      *(_WORD *)v50 = 2080;
      *(_QWORD *)&v50[2] = "Core.h";
      v51 = 1024;
      v52 = 202;
      _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v48);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v40);
    std::runtime_error::runtime_error(&v41, &v40);
    std::runtime_error::runtime_error(&v42, &v41);
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = -1;
    v42.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v43 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v42);
    *(_QWORD *)&v54[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = void, Argument_Types = <AMCP::Pause_Behavior>]";
    v55 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    v56 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v35);
    v38 = v35;
    v39 = v36;
    v35 = 0uLL;
    v36 = 0;
    v37 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v37);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v8 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Pause_Behavior)>>();
  v9 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, v8);
  if (!v9)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v26 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      v27 = pthread_self();
      v28 = pthread_mach_thread_np(v27);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v28;
      *(_WORD *)v50 = 2080;
      *(_QWORD *)&v50[2] = "Operation.h";
      v51 = 1024;
      v52 = 154;
      _os_log_error_impl(&dword_1B57BA000, v26, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v48);
    v29 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v40);
    std::runtime_error::runtime_error(&v41, &v40);
    std::runtime_error::runtime_error(&v42, &v41);
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = -1;
    v42.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v43 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v42);
    *(_QWORD *)&v54[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, "
                         "Argument_Types = <AMCP::Pause_Behavior>]";
    v55 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v56 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v35);
    v38 = v35;
    v39 = v36;
    v35 = 0uLL;
    v36 = 0;
    v37 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v37);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v29, (uint64_t)buf);
  }
  v10 = v9;
  if (!*((_QWORD *)v9 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Pause_Behavior)>>(),
        (v9 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v10 + 7))(4, (uint64_t)v10 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v15 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v17;
      *(_WORD *)v50 = 2080;
      *(_QWORD *)&v50[2] = "Operation.h";
      v51 = 1024;
      v52 = 161;
      _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v48);
    v18 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v40);
    std::runtime_error::runtime_error(&v41, &v40);
    std::runtime_error::runtime_error(&v42, &v41);
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = -1;
    v42.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v43 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v42);
    *(_QWORD *)&v54[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, "
                         "Argument_Types = <AMCP::Pause_Behavior>]";
    v55 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v56 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v35);
    v38 = v35;
    v39 = v36;
    v35 = 0uLL;
    v36 = 0;
    v37 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v37);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v18, (uint64_t)buf);
  }
  *(_DWORD *)buf = a3;
  v11 = *((_QWORD *)v9 + 3);
  if (!v11)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v11 + 48))(v11, buf);
  v12 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1B5958638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,std::runtime_error a25,uint64_t a26,uint64_t a27)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AMCP::IO_Core::Graph_Manager::create_manifest(uint64_t *a1, _QWORD *a2, unsigned __int8 *a3, _QWORD *a4)
{
  void **v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  __int128 v29;
  int64x2_t v30;
  char *v31;
  void **v32;
  std::logic_error_vtbl *v33;
  std::string **i;
  std::string **v35;
  std::string *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  std::string *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  std::string **v42;
  AMCP::Log::Scope_Registry *v43;
  uint64_t v44;
  uint64_t v45;
  std::string::size_type v46;
  std::string::size_type v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  __int128 v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  __int128 v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  unsigned __int8 *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  _QWORD *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  void *v102;
  std::__shared_weak_count *size;
  NSObject *v104;
  unint64_t *v105;
  unint64_t v106;
  _opaque_pthread_t *v107;
  mach_port_t v108;
  std::logic_error *exception;
  uint64_t v110;
  int v111;
  uint64_t v112;
  std::logic_error v113;
  std::__shared_weak_count *v114;
  NSObject *v115;
  unint64_t *v116;
  unint64_t v117;
  _opaque_pthread_t *v118;
  mach_port_t v119;
  std::logic_error *v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  std::logic_error v124;
  std::__shared_weak_count *v125;
  NSObject *v126;
  unint64_t *v127;
  unint64_t v128;
  _opaque_pthread_t *v129;
  mach_port_t v130;
  std::logic_error *v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  std::logic_error v135;
  uint64_t *v136;
  _QWORD *v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t v140;
  void *v141[2];
  __int128 v142;
  int v143;
  int64x2_t v144;
  char *v145;
  std::logic_error v146;
  std::string::size_type v147;
  std::logic_error v148;
  std::string v149;
  uint64_t (**v150)();
  std::string v151;
  std::string v152;
  std::logic_error __p;
  void **v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  _QWORD v159[4];
  int v160;
  std::string v161;
  _BYTE v162[24];
  int v163;
  uint64_t v164;

  v164 = *MEMORY[0x1E0C80C00];
  AMCP::Graph::Graph::find_nodes_connected_to_context((uint64_t)&__p, (uint64_t)(a2 + 1), a3);
  v136 = a1;
  v137 = a4;
  v144 = 0uLL;
  v145 = 0;
  std::vector<std::shared_ptr<AMCP::Graph::Node>>::reserve(&v144, a2[26]);
  v8 = v154;
  if (v154)
  {
    do
    {
      v9 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2 + 23, (unsigned __int8 *)v8 + 16);
      if (!v9)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v10 = v9;
      v11 = v144.i64[1];
      if (v144.i64[1] >= (unint64_t)v145)
      {
        v16 = (v144.i64[1] - v144.i64[0]) >> 4;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 60)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v18 = (uint64_t)&v145[-v144.i64[0]];
        if ((uint64_t)&v145[-v144.i64[0]] >> 3 > v17)
          v17 = v18 >> 3;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
          v19 = 0xFFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        *(_QWORD *)&v162[8] = &v145;
        v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v19);
        v22 = &v20[16 * v16];
        v23 = *(_OWORD *)(v10 + 40);
        *(_OWORD *)v22 = v23;
        if (*((_QWORD *)&v23 + 1))
        {
          v24 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = (_QWORD *)v144.i64[1];
        v27 = (_QWORD *)v144.i64[0];
        if (v144.i64[1] == v144.i64[0])
        {
          v30 = vdupq_n_s64(v144.u64[1]);
          v28 = &v20[16 * v16];
        }
        else
        {
          v28 = &v20[16 * v16];
          do
          {
            v29 = *((_OWORD *)v26 - 1);
            v26 -= 2;
            *((_OWORD *)v28 - 1) = v29;
            v28 -= 16;
            *v26 = 0;
            v26[1] = 0;
          }
          while (v26 != v27);
          v30 = v144;
        }
        v15 = v22 + 16;
        v144.i64[0] = (uint64_t)v28;
        v144.i64[1] = (uint64_t)(v22 + 16);
        *(int64x2_t *)&v161.__r_.__value_.__r.__words[1] = v30;
        v31 = v145;
        v145 = &v20[16 * v21];
        *(_QWORD *)v162 = v31;
        v161.__r_.__value_.__r.__words[0] = v30.i64[0];
        std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v161);
      }
      else
      {
        *(_QWORD *)v144.i64[1] = *((_QWORD *)v9 + 5);
        v12 = *((_QWORD *)v9 + 6);
        *(_QWORD *)(v11 + 8) = v12;
        if (v12)
        {
          v13 = (unint64_t *)(v12 + 8);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        v15 = (_OWORD *)(v11 + 16);
      }
      v144.i64[1] = (uint64_t)v15;
      v8 = (void **)*v8;
    }
    while (v8);
    v32 = v154;
  }
  else
  {
    v32 = 0;
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v32);
  v33 = __p.__vftable;
  __p.__vftable = 0;
  if (v33)
    operator delete(v33);
  *(_OWORD *)v141 = 0u;
  v142 = 0u;
  v143 = 1065353216;
  v35 = (std::string **)v144.i64[1];
  for (i = (std::string **)v144.i64[0]; i != v35; i += 2)
  {
    v36 = *i;
    if (SHIBYTE((*i)[1].__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v161, v36[1].__r_.__value_.__l.__data_, v36[1].__r_.__value_.__l.__size_);
    else
      v161 = v36[1];
    v37 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2 + 23, (unsigned __int8 *)&v161);
    v38 = v37;
    if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v161.__r_.__value_.__l.__data_);
      if (!v38)
        continue;
    }
    else if (!v37)
    {
      continue;
    }
    v39 = *i;
    if (SHIBYTE((*i)[1].__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v161, v39[1].__r_.__value_.__l.__data_, v39[1].__r_.__value_.__l.__size_);
    else
      v161 = v39[1];
    std::unordered_map<std::string,std::shared_ptr<AMCP::Graph::Node>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Graph::Node> const&>((uint64_t)v141, (uint64_t)&v161, (uint64_t *)v38 + 5);
    if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v161.__r_.__value_.__l.__data_);
  }
  memset(v159, 0, sizeof(v159));
  v160 = 1065353216;
  v40 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v141, a3);
  if (!v40)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v41 = v40;
  v138 = 0;
  v139 = 0;
  v140 = 0;
  std::vector<std::shared_ptr<AMCP::Graph::Node>>::reserve(&v138, *((unint64_t *)&v142 + 1));
  v42 = (std::string **)(v41 + 40);
  AMCP::Graph::topological_sort(v42, 1, v141, a2 + 8, (char **)&v138, v159);
  if (v138 == v139)
  {
    AMCP::Log::Scope_Registry::get(v43);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v161, "com.apple.coreaudio", "AMCP");
    size = (std::__shared_weak_count *)v161.__r_.__value_.__l.__size_;
    v104 = *(NSObject **)v161.__r_.__value_.__l.__data_;
    if (v161.__r_.__value_.__l.__size_)
    {
      v105 = (unint64_t *)(v161.__r_.__value_.__l.__size_ + 8);
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
    {
      v107 = pthread_self();
      v108 = pthread_mach_thread_np(v107);
      LODWORD(v161.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v161.__r_.__value_.__r.__words[0]) = v108;
      LOWORD(v161.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v161.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
      WORD1(v161.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v161.__r_.__value_.__r.__words[2]) = 1152;
      *(_WORD *)v162 = 2080;
      *(_QWORD *)&v162[2] = "not (not results.empty())";
      _os_log_error_impl(&dword_1B57BA000, v104, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v161, 0x22u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v152);
    std::logic_error::logic_error(&v146, &v152);
    v110 = MEMORY[0x1E0DE5018];
    v146.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&__p, &v146);
    v155 = 0;
    v156 = 0;
    v157 = 0;
    v158 = -1;
    __p.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v154 = (void **)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v161, (uint64_t)&__p);
    *(_QWORD *)&v162[8] = "std::vector<std::shared_ptr<Node>> AMCP::Graph::topological_sort(const Graph_Node_UID &, const"
                          " Node_Map &, const Wire_Index &)";
    *(_QWORD *)&v162[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
    v163 = 1152;
    std::vector<void *>::vector(&v149);
    v111 = backtrace((void **)v149.__r_.__value_.__l.__data_, (v149.__r_.__value_.__l.__size_ - v149.__r_.__value_.__r.__words[0]) >> 3);
    std::vector<void *>::resize(&v149.__r_.__value_.__l.__data_, v111);
    v151 = v149;
    v150 = off_1E69A20A0;
    memset(&v149, 0, sizeof(v149));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v161, (uint64_t)&v150);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(exception, (const std::logic_error *)&v161);
    exception->__vftable = (std::logic_error_vtbl *)(v110 + 16);
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v112 = *(_QWORD *)v162;
    exception[1].__imp_.__imp_ = *(const char **)v162;
    if (v112)
      (*(void (**)(uint64_t))(*(_QWORD *)v112 + 24))(v112);
    v113 = *(std::logic_error *)&v162[8];
    LODWORD(exception[3].__vftable) = v163;
    exception[2] = v113;
    exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
  }
  if (v159[3])
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v159[2]);
    v159[2] = 0;
    v44 = v159[1];
    if (v159[1])
    {
      v45 = 0;
      do
        *(_QWORD *)(v159[0] + 8 * v45++) = 0;
      while (v44 != v45);
    }
    v159[3] = 0;
  }
  memset(&v152, 0, sizeof(v152));
  std::vector<std::shared_ptr<AMCP::Graph::Node>>::reserve(&v152, *((unint64_t *)&v142 + 1));
  AMCP::Graph::topological_sort(v42, 0, v141, a2 + 8, &v152.__r_.__value_.__l.__data_, v159);
  v46 = v152.__r_.__value_.__l.__size_;
  if (v152.__r_.__value_.__r.__words[0] == v152.__r_.__value_.__l.__size_)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v152.__r_.__value_.__l.__size_);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v161, "com.apple.coreaudio", "AMCP");
    v114 = (std::__shared_weak_count *)v161.__r_.__value_.__l.__size_;
    v115 = *(NSObject **)v161.__r_.__value_.__l.__data_;
    if (v161.__r_.__value_.__l.__size_)
    {
      v116 = (unint64_t *)(v161.__r_.__value_.__l.__size_ + 8);
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
    }
    if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
    {
      v118 = pthread_self();
      v119 = pthread_mach_thread_np(v118);
      LODWORD(v161.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v161.__r_.__value_.__r.__words[0]) = v119;
      LOWORD(v161.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v161.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
      WORD1(v161.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v161.__r_.__value_.__r.__words[2]) = 1160;
      *(_WORD *)v162 = 2080;
      *(_QWORD *)&v162[2] = "not (not output_results.empty())";
      _os_log_error_impl(&dword_1B57BA000, v115, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v161, 0x22u);
    }
    v120 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v149);
    std::logic_error::logic_error(&v148, &v149);
    v121 = MEMORY[0x1E0DE5018];
    v148.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&__p, &v148);
    v155 = 0;
    v156 = 0;
    v157 = 0;
    v158 = -1;
    __p.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v154 = (void **)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v161, (uint64_t)&__p);
    *(_QWORD *)&v162[8] = "std::vector<std::shared_ptr<Node>> AMCP::Graph::topological_sort(const Graph_Node_UID &, const"
                          " Node_Map &, const Wire_Index &)";
    *(_QWORD *)&v162[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
    v163 = 1160;
    std::vector<void *>::vector(&v146);
    v122 = backtrace((void **)&v146.~logic_error, (unint64_t)(v146.__imp_.__imp_ - (const char *)v146.__vftable) >> 3);
    std::vector<void *>::resize((char **)&v146, v122);
    *(std::logic_error *)&v151.__r_.__value_.__l.__data_ = v146;
    v150 = off_1E69A20A0;
    v151.__r_.__value_.__r.__words[2] = v147;
    v146.__vftable = 0;
    v146.__imp_.__imp_ = 0;
    v147 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v161, (uint64_t)&v150);
    v120[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(v120, (const std::logic_error *)&v161);
    v120->__vftable = (std::logic_error_vtbl *)(v121 + 16);
    v120[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v123 = *(_QWORD *)v162;
    v120[1].__imp_.__imp_ = *(const char **)v162;
    if (v123)
      (*(void (**)(uint64_t))(*(_QWORD *)v123 + 24))(v123);
    v124 = *(std::logic_error *)&v162[8];
    LODWORD(v120[3].__vftable) = v163;
    v120[2] = v124;
    v120->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
    v120[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
    v120[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
  }
  v47 = v152.__r_.__value_.__l.__size_ - 16;
  while (v46 != v47)
    v46 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v46 - 16);
  v152.__r_.__value_.__l.__size_ = v47;
  v48 = (uint64_t *)v152.__r_.__value_.__r.__words[0];
  v49 = (uint64_t *)(v47 - 16);
  if (v152.__r_.__value_.__r.__words[0] != v47 && (unint64_t)v49 > v152.__r_.__value_.__r.__words[0])
  {
    do
    {
      v51 = *v48;
      *v48 = *v49;
      *v49 = v51;
      v52 = v48[1];
      v48[1] = v49[1];
      v49[1] = v52;
      v48 += 2;
      v49 -= 2;
    }
    while (v48 < v49);
    v47 = v152.__r_.__value_.__l.__size_;
    v48 = (uint64_t *)v152.__r_.__value_.__r.__words[0];
  }
  if ((uint64_t)(v47 - (_QWORD)v48) >= 1)
  {
    v53 = (uint64_t)(v47 - (_QWORD)v48) >> 4;
    v54 = v139;
    if (v53 <= (v140 - (uint64_t)v139) >> 4)
    {
      if (v53 <= 0)
      {
        v64 = &v48[2 * v53];
        v65 = v139;
        v78 = &v139[2 * v53];
        v79 = &v139[-2 * v53];
        v80 = v139;
        if (v79 < v139)
        {
          v81 = &v139[-2 * v53];
          v80 = v139;
          do
          {
            *(_OWORD *)v80 = *(_OWORD *)v81;
            v80 += 2;
            *v81 = 0;
            v81[1] = 0;
            v81 += 2;
          }
          while (v81 < v54);
        }
        v139 = v80;
        if (v65 != v78)
        {
          do
          {
            v82 = *((_OWORD *)v79 - 1);
            v79 -= 2;
            *v79 = 0;
            v79[1] = 0;
            v83 = (std::__shared_weak_count *)*(v65 - 1);
            *((_OWORD *)v65 - 1) = v82;
            v65 -= 2;
            if (v83)
            {
              p_shared_owners = (unint64_t *)&v83->__shared_owners_;
              do
                v85 = __ldaxr(p_shared_owners);
              while (__stlxr(v85 - 1, p_shared_owners));
              if (!v85)
              {
                ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                std::__shared_weak_count::__release_weak(v83);
              }
            }
          }
          while (v79 != v54);
        }
        for (; v48 != v64; v54 += 2)
        {
          v86 = *v48;
          v87 = v48[1];
          v48 += 2;
          std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](v54, v86, v87);
        }
      }
      else
      {
        if (v48 == (uint64_t *)v47)
        {
          v60 = v139;
        }
        else
        {
          v59 = v48;
          v60 = v139;
          do
          {
            *v60 = *v59;
            v61 = v59[1];
            v60[1] = v61;
            if (v61)
            {
              v62 = (unint64_t *)(v61 + 8);
              do
                v63 = __ldxr(v62);
              while (__stxr(v63 + 1, v62));
            }
            v59 += 2;
            v60 += 2;
          }
          while (v59 != (uint64_t *)v47);
        }
        v139 = v60;
      }
    }
    else
    {
      v55 = ((char *)v139 - (char *)v138) >> 4;
      if ((unint64_t)(v55 + v53) >> 60)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v56 = (v140 - (uint64_t)v138) >> 3;
      if (v56 <= v55 + v53)
        v56 = v55 + v53;
      if ((unint64_t)(v140 - (_QWORD)v138) >= 0x7FFFFFFFFFFFFFF0)
        v57 = 0xFFFFFFFFFFFFFFFLL;
      else
        v57 = v56;
      *(_QWORD *)&v162[8] = &v140;
      if (v57)
        v57 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v57);
      else
        v58 = 0;
      v66 = (uint64_t *)(v57 + 16 * v55);
      v161.__r_.__value_.__r.__words[0] = v57;
      v161.__r_.__value_.__l.__size_ = (std::string::size_type)v66;
      *(_QWORD *)v162 = v57 + 16 * v58;
      v67 = &v66[2 * v53];
      do
      {
        *v66 = *v48;
        v68 = v48[1];
        v66[1] = v68;
        if (v68)
        {
          v69 = (unint64_t *)(v68 + 8);
          do
            v70 = __ldxr(v69);
          while (__stxr(v70 + 1, v69));
        }
        v66 += 2;
        v48 += 2;
      }
      while (v66 != v67);
      v161.__r_.__value_.__r.__words[2] = (std::string::size_type)v67;
      v71 = (uint64_t *)v161.__r_.__value_.__l.__size_;
      v72 = v138;
      if (v138 != v54)
      {
        v73 = v54;
        do
        {
          v74 = *((_OWORD *)v73 - 1);
          v73 -= 2;
          *((_OWORD *)v71 - 1) = v74;
          v71 -= 2;
          *v73 = 0;
          v73[1] = 0;
        }
        while (v73 != v72);
        v67 = (uint64_t *)v161.__r_.__value_.__r.__words[2];
      }
      v161.__r_.__value_.__l.__size_ = (std::string::size_type)v71;
      v75 = v139;
      if (v139 != v54)
      {
        do
        {
          *(_OWORD *)v67 = *(_OWORD *)v54;
          v67 += 2;
          *v54 = 0;
          v54[1] = 0;
          v54 += 2;
        }
        while (v54 != v75);
        v71 = (uint64_t *)v161.__r_.__value_.__l.__size_;
        v54 = v139;
      }
      v76 = v138;
      v77 = v140;
      v138 = v71;
      v139 = v67;
      v140 = *(_QWORD *)v162;
      v161.__r_.__value_.__r.__words[2] = (std::string::size_type)v54;
      *(_QWORD *)v162 = v77;
      v161.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
      v161.__r_.__value_.__l.__size_ = (std::string::size_type)v76;
      std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v161);
    }
  }
  v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v152;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v159[2]);
  v88 = (void *)v159[0];
  v159[0] = 0;
  if (v88)
    operator delete(v88);
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(v141, a3);
  if (!v89)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v90 = *((_QWORD *)v89 + 5);
  v91 = (std::__shared_weak_count *)*((_QWORD *)v89 + 6);
  if (v91)
  {
    v92 = (unint64_t *)&v91->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  if (!v90)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v89);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v161, "com.apple.coreaudio", "AMCP");
    v125 = (std::__shared_weak_count *)v161.__r_.__value_.__l.__size_;
    v126 = *(NSObject **)v161.__r_.__value_.__l.__data_;
    if (v161.__r_.__value_.__l.__size_)
    {
      v127 = (unint64_t *)(v161.__r_.__value_.__l.__size_ + 8);
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }
    }
    if (os_log_type_enabled(v126, OS_LOG_TYPE_ERROR))
    {
      v129 = pthread_self();
      v130 = pthread_mach_thread_np(v129);
      LODWORD(v161.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v161.__r_.__value_.__r.__words[0]) = v130;
      LOWORD(v161.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v161.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
      WORD1(v161.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v161.__r_.__value_.__r.__words[2]) = 1197;
      *(_WORD *)v162 = 2080;
      *(_QWORD *)&v162[2] = "not (io_context_node.operator BOOL())";
      _os_log_error_impl(&dword_1B57BA000, v126, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Error creating manifest", (uint8_t *)&v161, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v146);
    v131 = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Error creating manifest", (uint64_t)&v150);
    std::logic_error::logic_error((std::logic_error *)&v149, (const std::string *)&v150);
    v132 = MEMORY[0x1E0DE5018];
    v149.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error(&__p, (const std::logic_error *)&v149);
    v155 = 0;
    v156 = 0;
    v157 = 0;
    v158 = -1;
    __p.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v154 = (void **)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v161, (uint64_t)&__p);
    *(_QWORD *)&v162[8] = "std::shared_ptr<Manifest> AMCP::Graph::Graph::create_manifest(const Graph_Node_UID &, const st"
                          "d::shared_ptr<Manifest_Inventory> &) const";
    *(_QWORD *)&v162[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
    v163 = 1197;
    std::vector<void *>::vector(&v152);
    v133 = backtrace((void **)v152.__r_.__value_.__l.__data_, (v152.__r_.__value_.__l.__size_ - v152.__r_.__value_.__r.__words[0]) >> 3);
    std::vector<void *>::resize(&v152.__r_.__value_.__l.__data_, v133);
    *(std::string *)&v159[1] = v152;
    v159[0] = off_1E69A20A0;
    memset(&v152, 0, sizeof(v152));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v161, (uint64_t)v159);
    v131[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(v131, (const std::logic_error *)&v161);
    v131->__vftable = (std::logic_error_vtbl *)(v132 + 16);
    v131[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v134 = *(_QWORD *)v162;
    v131[1].__imp_.__imp_ = *(const char **)v162;
    if (v134)
      (*(void (**)(uint64_t))(*(_QWORD *)v134 + 24))(v134);
    v135 = *(std::logic_error *)&v162[8];
    LODWORD(v131[3].__vftable) = v163;
    v131[2] = v135;
    v131->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
    v131[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
    v131[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
  }
  v94 = *(std::__shared_weak_count **)(v90 + 152);
  v161.__r_.__value_.__r.__words[0] = *(_QWORD *)(v90 + 144);
  v161.__r_.__value_.__l.__size_ = (std::string::size_type)v94;
  if (v94)
  {
    v95 = (unint64_t *)&v94->__shared_owners_;
    do
      v96 = __ldxr(v95);
    while (__stxr(v96 + 1, v95));
  }
  v97 = operator new(0x88uLL);
  v97[1] = 0;
  v97[2] = 0;
  *v97 = &off_1E6985960;
  *v136 = AMCP::Graph::Manifest::Manifest((unint64_t)(v97 + 3), &v138, a2 + 8, (uint64_t *)&v161, v137, a2 + 38);
  v136[1] = (uint64_t)v97;
  if (v94)
  {
    v98 = (unint64_t *)&v94->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  if (v91)
  {
    v100 = (unint64_t *)&v91->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__deallocate_node((_QWORD *)v142);
  v102 = v141[0];
  v141[0] = 0;
  if (v102)
    operator delete(v102);
  v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v144;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
}

void sub_1B5959798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, _QWORD *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,void *a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char *a51,uint64_t a52,void *a53,uint64_t a54)
{
  std::__shared_weak_count *v54;
  uint64_t v55;
  unint64_t *p_shared_owners;
  unint64_t v58;
  void *v59;

  if (v54)
  {
    p_shared_owners = (unint64_t *)&v54->__shared_owners_;
    do
      v58 = __ldaxr(p_shared_owners);
    while (__stlxr(v58 - 1, p_shared_owners));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  *(_QWORD *)(v55 - 176) = &a12;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v55 - 176));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__deallocate_node(a17);
  v59 = __p;
  __p = 0;
  if (v59)
    operator delete(v59);
  a51 = &a21;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a51);
  _Unwind_Resume(a1);
}

uint64_t AMCP::IO_Core::Graph_Manager::modify_graph(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  char *v9;
  __int128 v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14[4];
  __int128 v15;
  __int128 v16;
  uint64_t v17[2];
  int v18;
  int v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[24] = 0;
  v8 = operator new(0x20uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E69A0170;
  v17[1] = (uint64_t)v8;
  *((_BYTE *)v8 + 24) = 0;
  v17[0] = (uint64_t)(v8 + 3);
  v18 = 0;
  v19 = 0;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)v14, v17);
  *(_QWORD *)&v15 = a1;
  *((_QWORD *)&v15 + 1) = a2;
  *(_QWORD *)&v16 = a3;
  *((_QWORD *)&v16 + 1) = a4;
  v21 = 0;
  v9 = (char *)operator new(0x48uLL);
  *(_QWORD *)v9 = &off_1E69769D0;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v9 + 8), v14);
  v10 = v16;
  *(_OWORD *)(v9 + 40) = v15;
  *(_OWORD *)(v9 + 56) = v10;
  v21 = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a2 + 24))(a2, 1, 1, 22, v20);
  v11 = v21;
  if (v21 == v20)
  {
    v12 = 4;
    v11 = v20;
    goto LABEL_5;
  }
  if (v21)
  {
    v12 = 5;
LABEL_5:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v14);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v17);
}

void sub_1B5959D48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v6 = *(_QWORD **)(v4 - 64);
  if (v6 == v3)
  {
    v7 = 4;
    v6 = (_QWORD *)(v4 - 88);
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va1);
  if (*(_BYTE *)(v2 + 24))
  {
    v8 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v8;
      operator delete(v8);
    }
  }
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69769D0;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69769D0;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t *v2;
  char *v3;

  v2 = (uint64_t *)(a1 + 8);
  v3 = (char *)operator new(0x48uLL);
  *(_QWORD *)v3 = &off_1E69769D0;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v3 + 8), v2);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a1 + 56);
  return v3;
}

void sub_1B5959E94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E69769D0;
  AMCP::Utility::Expiration_Check::Expiration_Check(a2 + 8, (uint64_t *)(a1 + 8));
  result = *(__n128 *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 8);
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  const AMCP::Graph_Description *v2;
  _BOOL8 is_valid;
  std::__shared_weak_count *v4;
  NSObject *v5;
  unint64_t *v6;
  unint64_t v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  void *__p;
  _BYTE v11[10];
  __int16 v12;
  int v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *(const AMCP::Graph_Description **)(a1 + 48);
  is_valid = AMCP::Utility::Expiration_Check::is_valid((AMCP::Utility::Expiration_Check *)(a1 + 8));
  if (!is_valid)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_valid);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    v4 = *(std::__shared_weak_count **)v11;
    v5 = *(NSObject **)__p;
    if (*(_QWORD *)v11)
    {
      v6 = (unint64_t *)(*(_QWORD *)v11 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      LODWORD(__p) = 67109890;
      HIDWORD(__p) = v9;
      *(_WORD *)v11 = 2080;
      *(_QWORD *)&v11[2] = "Graph_Manager.cpp";
      v12 = 1024;
      v13 = 73;
      v14 = 2080;
      v15 = "expiration_check.is_valid()";
      _os_log_error_impl(&dword_1B57BA000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s caller has gone out of scope", (uint8_t *)&__p, 0x22u);
    }
    abort();
  }
  AMCP::IO_Core::Graph_Manager::modify_graph_internal((AMCP::IO_Core::Graph_Manager *)&__p, v2, *(const AMCP::Modify_Graph_Destroy_List **)(a1 + 56), *(unsigned __int8 ***)(a1 + 64));
  std::__optional_storage_base<std::vector<unsigned int>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned int>,false>>(*(_QWORD *)(a1 + 40), (__n128 *)&__p);
  if ((_BYTE)v14)
  {
    if (__p)
      operator delete(__p);
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core13Graph_Manager12modify_graphERKNS_17Graph_DescriptionERKNS_25Modify_Graph_Destroy_ListEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0>,void ()(void)>::target_type()
{
}

uint64_t AMCP::IO_Core::Graph_Manager::modify_graph_internal(AMCP::IO_Core::Graph_Manager *this, const AMCP::Graph_Description *a2, const AMCP::Modify_Graph_Destroy_List *a3, unsigned __int8 **a4)
{
  uint64_t v6;
  _DWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const AMCP::Graph_Description *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  _QWORD *v16;
  char *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  char *v22;
  int8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int8x8_t v33;
  unint64_t v34;
  uint8x8_t v35;
  unint64_t v36;
  unint64_t v37;
  const AMCP::Graph_Description *v38;
  uint64_t v39;
  _QWORD **v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  os_log_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  AMCP::Log::Scope_Registry *v51;
  uint64_t *v52;
  const AMCP::Modify_Graph_Destroy_List *j;
  _QWORD *v54;
  unint64_t *v55;
  uint64_t v56;
  std::string::size_type size;
  std::string *i;
  std::string::size_type *p_size;
  std::string::size_type *v60;
  std::string::size_type *v61;
  BOOL v62;
  unint64_t v63;
  std::string::size_type *v64;
  std::string::size_type *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  char v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  std::string *v77;
  void *v78;
  std::string::size_type v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 *v83;
  NSObject *v84;
  uint64_t v85;
  Class isa;
  std::string::size_type v87;
  std::string *v88;
  std::string *v89;
  std::string *v90;
  unint64_t v91;
  std::string::size_type *v92;
  char *v93;
  char v94;
  uint64_t v95;
  char v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  std::string::size_type v100;
  std::string *v101;
  __int128 *v102;
  NSObject *v103;
  uint64_t v104;
  std::string::size_type v105;
  std::string::size_type *v106;
  std::string::size_type *v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  AMCP::Log::Scope_Registry *nth_terminal;
  uint64_t v116;
  std::__shared_weak_count *v117;
  NSObject *v118;
  unint64_t *v119;
  unint64_t v120;
  _opaque_pthread_t *v121;
  mach_port_t v122;
  std::logic_error *exception;
  uint64_t v124;
  int v125;
  uint64_t v126;
  std::logic_error v127;
  NSObject *v128;
  AMCP::Graph::File_Capture_Settings *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  AMCP::Log::Scope_Registry *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint8x8_t v138;
  unint64_t v139;
  uint64_t **v140;
  uint64_t *m;
  unint64_t v142;
  _QWORD *v143;
  std::string *v144;
  float v145;
  _BOOL8 v146;
  unint64_t v147;
  unint64_t v148;
  int8x8_t prime;
  void *v150;
  void *v151;
  uint64_t v152;
  _QWORD **v153;
  unint64_t v154;
  uint8x8_t v155;
  unint64_t v156;
  uint8x8_t v157;
  uint64_t v158;
  _QWORD *n;
  unint64_t v160;
  uint64_t **v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  __int128 v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  std::string::size_type v177;
  __int128 v178;
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  void *v182;
  void *v183;
  unsigned __int8 *v184;
  uint64_t v185;
  void *v186;
  std::string::size_type k;
  std::string::size_type v188;
  __int128 v189;
  uint64_t v190;
  __int128 v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  BOOL (*v195)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  char v196;
  std::string *v197;
  uint64_t v198;
  int data;
  uint64_t v200;
  float v201;
  void *v202;
  _QWORD *ii;
  AMCP::Graph::File_Capture_Settings *v204;
  std::string *v205;
  BOOL (*v206)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  std::string::size_type v207;
  char v208;
  CFTypeRef v209;
  _QWORD *v210;
  std::string::size_type v211;
  uint64_t v212;
  __int128 v213;
  __int128 v214;
  unint64_t v215;
  unint64_t v216;
  __int128 v217;
  _OWORD *v218;
  std::__shared_weak_count *v219;
  unint64_t *p_shared_owners;
  unint64_t v221;
  uint64_t v222;
  void **v223;
  void (*v224)(_QWORD, void **, _QWORD, _QWORD);
  const std::string::value_type *v225;
  std::string::size_type v226;
  std::string *v227;
  std::string *v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  unsigned __int8 *v233;
  std::string::size_type v234;
  std::string::size_type v235;
  unint64_t *v236;
  unint64_t v237;
  _BOOL8 updated;
  std::__shared_weak_count *v239;
  uint64_t v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  int v245;
  char *v246;
  _DWORD *v247;
  char *v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  _DWORD *v254;
  int v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  NSObject *v259;
  _opaque_pthread_t *v260;
  mach_port_t v261;
  _QWORD *v262;
  void *v263;
  NSObject *v264;
  _opaque_pthread_t *v265;
  mach_port_t v266;
  _QWORD *v267;
  void *v268;
  NSObject *v269;
  _opaque_pthread_t *v270;
  mach_port_t v271;
  std::string *v272;
  void *v273;
  _opaque_pthread_t *v274;
  mach_port_t v275;
  std::string *v276;
  NSObject *v277;
  _opaque_pthread_t *v278;
  mach_port_t v279;
  void *v280;
  uint64_t result;
  uint64_t v283;
  _QWORD *v285;
  _QWORD *v286;
  uint64_t v287;
  char v288;
  _QWORD *v289;
  std::string *v290;
  uint64_t v291;
  const AMCP::Graph_Description *v292;
  std::string *v293;
  uint64_t v294;
  unint64_t v295;
  char v296;
  uint64_t v297;
  unsigned int v298;
  std::string::size_type v299;
  uint64_t *v300;
  char *v301;
  NSObject *v302;
  os_log_t oslog;
  os_log_t osloga;
  os_log_t oslogb;
  unsigned __int8 *v306;
  _BOOL4 v307;
  __int128 v308;
  __int128 v309;
  int64x2_t v310;
  uint64_t v311;
  uint64_t v312;
  std::string v313;
  uint64_t v314;
  int v315;
  std::string v316;
  uint64_t v317;
  int v318;
  CFTypeRef cf[2];
  uint64_t v320;
  std::string v321;
  uint64_t v322;
  int v323;
  std::string v324;
  uint64_t v325;
  int v326;
  _BYTE v327[32];
  unsigned int v328;
  void *v329[4];
  float v330;
  uint64_t v331;
  std::string v332;
  std::string v333;
  _BYTE v334[8];
  _BYTE __p[64];
  uint64_t v336;
  int v337;
  __int128 v338;
  __int128 v339;
  BOOL (*v340)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  uint64_t v341[3];
  __int128 v342;
  __int128 v343;
  BOOL (*v344)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  uint64_t v345[3];
  __int128 v346;
  uint64_t v347;
  uint64_t v348;
  BOOL (*v349)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  _QWORD v350[4];
  _BYTE v351[15];
  char v352;
  uint64_t v353;
  BOOL (*v354)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  uint64_t v355[8];
  _QWORD v356[8];
  std::string v357;
  __int128 v358;
  uint64_t v359;
  int v360;
  uint64_t v361;

  v361 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  v7 = (_DWORD *)v6;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  v8 = (_QWORD *)(v6 + 80);
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  v9 = (_QWORD *)(v6 + 160);
  *(_QWORD *)(v6 + 208) = 0;
  *(_QWORD *)(v6 + 192) = 0;
  *(_QWORD *)(v6 + 200) = v6 + 208;
  *(_OWORD *)(v6 + 40) = 0u;
  v10 = (_QWORD *)(v6 + 40);
  *(_DWORD *)(v6 + 32) = 1065353216;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_DWORD *)(v6 + 72) = 1065353216;
  *(_OWORD *)(v6 + 120) = 0u;
  v11 = (_QWORD *)(v6 + 120);
  *(_DWORD *)(v6 + 112) = 1065353216;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_DWORD *)(v6 + 152) = 1065353216;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_DWORD *)(v6 + 192) = 1065353216;
  *(_QWORD *)(v6 + 216) = 0;
  *(_QWORD *)(v6 + 240) = 0;
  *(_QWORD *)(v6 + 232) = 0;
  *(_QWORD *)(v6 + 224) = v6 + 232;
  v12 = (const AMCP::Graph_Description *)(v6 + 224);
  v312 = v6;
  v286 = (_QWORD *)((char *)a2 + 64);
  if ((const AMCP::Graph_Description *)v6 != (const AMCP::Graph_Description *)((char *)a2 + 64))
  {
    *(_DWORD *)(v6 + 32) = *((_DWORD *)a2 + 24);
    std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,void *> *>>((_QWORD *)v6, *((uint64_t **)a2 + 10));
    v7[18] = *((_DWORD *)a2 + 34);
    std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,void *> *>>(v10, *((uint64_t **)a2 + 15));
    v7[28] = *((_DWORD *)a2 + 44);
    std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *> *>>(v8, *((uint64_t **)a2 + 20));
  }
  v289 = (_QWORD *)((char *)a2 + 184);
  if (v11 != (_QWORD *)((char *)a2 + 184))
  {
    v7[38] = *((_DWORD *)a2 + 54);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,void *> *>>(v11, *((uint64_t **)a2 + 25));
  }
  if (v9 != (_QWORD *)((char *)a2 + 224))
  {
    v7[48] = *((_DWORD *)a2 + 64);
    std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned int,std::string>,void *> *>>(v9, *((uint64_t **)a2 + 30));
  }
  if (v12 != (const AMCP::Graph_Description *)((char *)a2 + 264))
    std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,void *> *,long>>((uint64_t)v12, *((__int128 **)a2 + 33), (__int128 *)a2 + 17);
  if (*(_QWORD *)a3 == *((_QWORD *)a3 + 1))
  {
    v13 = *a4;
    if (*((_QWORD *)a3 + 3) == *((_QWORD *)a3 + 4) && v13 == a4[1] && a4[3] == a4[4])
    {
      *(_BYTE *)this = 0;
      *((_BYTE *)this + 24) = 0;
      goto LABEL_550;
    }
  }
  else
  {
    v13 = *a4;
  }
  v285 = (_QWORD *)((char *)a2 + 8);
  v14 = a4[1];
  while (v13 != v14)
  {
    AMCP::Graph::Graph::delete_node(v285, v13);
    v13 += 24;
  }
  v15 = a4[3];
  v306 = a4[4];
  v292 = a2;
  if (v15 != v306)
  {
    v16 = (_QWORD *)((char *)a2 + 104);
    v17 = (char *)a2 + 120;
    oslog = (os_log_t)((char *)a2 + 160);
    do
    {
      v18 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(v289, v15 + 40);
      if (v18)
      {
        v19 = *((_QWORD *)v18 + 5);
        if (*(_DWORD *)(v19 + 48) != 1 && *(_DWORD *)(v19 + 16) == 1)
          AMCP::Graph::Graph::disconnect_any_wires_connected_to_node(v285, v18 + 16);
      }
      v20 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(v289, v15);
      if (v20)
      {
        v21 = *((_QWORD *)v20 + 5);
        if (*(_DWORD *)(v21 + 48) != 1 && *(_DWORD *)(v21 + 16) == 1)
          AMCP::Graph::Graph::disconnect_any_wires_connected_to_node(v285, v20 + 16);
      }
      AMCP::Graph::Wire_Index::remove_from_index(v286, (unsigned __int8 **)v15, (unsigned __int8 **)v15);
      AMCP::Graph::Wire_Index::remove_from_index(v286, (unsigned __int8 **)v15 + 5, (unsigned __int8 **)v15);
      v22 = (char *)std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>>>::find<AMCP::Wire_Identifier>(v16, (unsigned __int8 **)v15);
      if (v22)
      {
        v23 = *(int8x8_t *)((char *)a2 + 112);
        v24 = *((_QWORD *)v22 + 1);
        v25 = (uint8x8_t)vcnt_s8(v23);
        v25.i16[0] = vaddlv_u8(v25);
        if (v25.u32[0] > 1uLL)
        {
          if (v24 >= *(_QWORD *)&v23)
            v24 %= *(_QWORD *)&v23;
        }
        else
        {
          v24 &= *(_QWORD *)&v23 - 1;
        }
        v26 = *(char **)(*v16 + 8 * v24);
        do
        {
          v27 = v26;
          v26 = *(char **)v26;
        }
        while (v26 != v22);
        if (v27 == v17)
          goto LABEL_42;
        v28 = *((_QWORD *)v27 + 1);
        if (v25.u32[0] > 1uLL)
        {
          if (v28 >= *(_QWORD *)&v23)
            v28 %= *(_QWORD *)&v23;
        }
        else
        {
          v28 &= *(_QWORD *)&v23 - 1;
        }
        if (v28 != v24)
        {
LABEL_42:
          if (!*(_QWORD *)v22)
            goto LABEL_43;
          v29 = *(_QWORD *)(*(_QWORD *)v22 + 8);
          if (v25.u32[0] > 1uLL)
          {
            if (v29 >= *(_QWORD *)&v23)
              v29 %= *(_QWORD *)&v23;
          }
          else
          {
            v29 &= *(_QWORD *)&v23 - 1;
          }
          if (v29 != v24)
LABEL_43:
            *(_QWORD *)(*v16 + 8 * v24) = 0;
        }
        v30 = *(_QWORD *)v22;
        if (*(_QWORD *)v22)
        {
          v31 = *(_QWORD *)(v30 + 8);
          if (v25.u32[0] > 1uLL)
          {
            if (v31 >= *(_QWORD *)&v23)
              v31 %= *(_QWORD *)&v23;
          }
          else
          {
            v31 &= *(_QWORD *)&v23 - 1;
          }
          if (v31 != v24)
          {
            *(_QWORD *)(*v16 + 8 * v31) = v27;
            v30 = *(_QWORD *)v22;
          }
        }
        *(_QWORD *)v27 = v30;
        *(_QWORD *)v22 = 0;
        --*((_QWORD *)a2 + 16);
        *(_QWORD *)__p = v22;
        *(_QWORD *)&__p[8] = v17;
        __p[16] = 1;
        std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,void *>>>>::reset[abi:ne180100]((uint64_t)__p);
      }
      v32 = std::hash<AMCP::Wire_Identifier>::operator()((uint64_t)v15);
      v33 = *(int8x8_t *)((char *)a2 + 152);
      if (v33)
      {
        v34 = v32;
        v35 = (uint8x8_t)vcnt_s8(v33);
        v35.i16[0] = vaddlv_u8(v35);
        v36 = v35.u32[0];
        if (v35.u32[0] > 1uLL)
        {
          v37 = v32;
          v38 = v292;
          if (v32 >= *(_QWORD *)&v33)
            v37 = v32 % *(_QWORD *)&v33;
        }
        else
        {
          v37 = (*(_QWORD *)&v33 - 1) & v32;
          v38 = v292;
        }
        v39 = *((_QWORD *)v38 + 18);
        v40 = *(_QWORD ***)(v39 + 8 * v37);
        if (v40)
        {
          v41 = *v40;
          if (*v40)
          {
            v42 = *(_QWORD *)&v33 - 1;
            do
            {
              v43 = v41[1];
              if (v43 == v34)
              {
                if (std::equal_to<AMCP::Wire_Identifier>::operator()[abi:ne180100]((uint64_t)(v41 + 2), (unsigned __int8 **)v15))
                {
                  if (v36 > 1)
                  {
                    v44 = oslog;
                    if (v34 >= *(_QWORD *)&v33)
                      v34 %= *(_QWORD *)&v33;
                  }
                  else
                  {
                    v34 &= v42;
                    v44 = oslog;
                  }
                  v45 = *(_QWORD **)(v39 + 8 * v34);
                  do
                  {
                    v46 = v45;
                    v45 = (_QWORD *)*v45;
                  }
                  while (v45 != v41);
                  if (v46 == (_QWORD *)v44)
                    goto LABEL_87;
                  v47 = v46[1];
                  if (v36 > 1)
                  {
                    if (v47 >= *(_QWORD *)&v33)
                      v47 %= *(_QWORD *)&v33;
                  }
                  else
                  {
                    v47 &= v42;
                  }
                  if (v47 != v34)
                  {
LABEL_87:
                    if (!*v41)
                      goto LABEL_88;
                    v48 = *(_QWORD *)(*v41 + 8);
                    if (v36 > 1)
                    {
                      if (v48 >= *(_QWORD *)&v33)
                        v48 %= *(_QWORD *)&v33;
                    }
                    else
                    {
                      v48 &= v42;
                    }
                    if (v48 != v34)
LABEL_88:
                      *(_QWORD *)(v39 + 8 * v34) = 0;
                  }
                  v49 = *v41;
                  if (*v41)
                  {
                    v50 = *(_QWORD *)(v49 + 8);
                    if (v36 > 1)
                    {
                      if (v50 >= *(_QWORD *)&v33)
                        v50 %= *(_QWORD *)&v33;
                    }
                    else
                    {
                      v50 &= v42;
                    }
                    if (v50 != v34)
                    {
                      *(_QWORD *)(*((_QWORD *)v292 + 18) + 8 * v50) = v46;
                      v49 = *v41;
                    }
                  }
                  *v46 = v49;
                  *v41 = 0;
                  --*((_QWORD *)v292 + 21);
                  *(_QWORD *)__p = v41;
                  *(_QWORD *)&__p[8] = v44;
                  __p[16] = 1;
                  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *>>>>::reset[abi:ne180100]((uint64_t)__p);
                  break;
                }
              }
              else
              {
                if (v36 > 1)
                {
                  if (v43 >= *(_QWORD *)&v33)
                    v43 %= *(_QWORD *)&v33;
                }
                else
                {
                  v43 &= v42;
                }
                if (v43 != v37)
                  break;
              }
              v41 = (_QWORD *)*v41;
            }
            while (v41);
          }
        }
      }
      v15 += 80;
      a2 = v292;
    }
    while (v15 != v306);
  }
  AMCP::IO_Core::Graph_Manager::insert_graph_components((std::string *)a2, a3);
  v309 = 0u;
  v310 = 0u;
  v308 = 0u;
  v52 = (uint64_t *)*((_QWORD *)a2 + 25);
  j = a3;
  if (v52)
  {
    do
    {
      if (*(_DWORD *)(v52[5] + 16) != 1)
        std::deque<std::shared_ptr<AMCP::Graph::Node>>::push_back(&v308, (__int128 *)(v52 + 5));
      v52 = (uint64_t *)*v52;
    }
    while (v52);
    if (v310.i64[1])
    {
      if ((_QWORD)v309 == *((_QWORD *)&v308 + 1))
      {
        *(_OWORD *)&v316.__r_.__value_.__r.__words[1] = 0uLL;
        v316.__r_.__value_.__r.__words[0] = (std::string::size_type)&v316.__r_.__value_.__l.__size_;
        goto LABEL_142;
      }
      v54 = (_QWORD *)(*((_QWORD *)&v308 + 1) + 8 * ((unint64_t)v310.i64[0] >> 8));
      v55 = (unint64_t *)(*v54 + 16 * v310.u8[0]);
      v56 = *(_QWORD *)(*((_QWORD *)&v308 + 1)
                      + (((unint64_t)(v310.i64[0] + v310.i64[1]) >> 5) & 0x7FFFFFFFFFFFFF8))
          + 16 * (v310.i8[0] + v310.i8[8]);
      *(_OWORD *)&v316.__r_.__value_.__r.__words[1] = 0uLL;
      v316.__r_.__value_.__r.__words[0] = (std::string::size_type)&v316.__r_.__value_.__l.__size_;
      if (v55 == (unint64_t *)v56)
        goto LABEL_142;
      size = 0;
      for (i = (std::string *)&v316.__r_.__value_.__r.__words[1]; ; i = (std::string *)v316.__r_.__value_.__r.__words[0])
      {
        p_size = &v316.__r_.__value_.__l.__size_;
        if (i == (std::string *)&v316.__r_.__value_.__r.__words[1])
          goto LABEL_112;
        v60 = (std::string::size_type *)size;
        v61 = &v316.__r_.__value_.__l.__size_;
        if (size)
        {
          do
          {
            p_size = v60;
            v60 = (std::string::size_type *)v60[1];
          }
          while (v60);
        }
        else
        {
          do
          {
            p_size = (std::string::size_type *)v61[2];
            v62 = *p_size == (_QWORD)v61;
            v61 = p_size;
          }
          while (v62);
        }
        v63 = *v55;
        if (p_size[4] < *v55)
        {
LABEL_112:
          v64 = size ? p_size : &v316.__r_.__value_.__r.__words[1];
          v65 = size ? p_size + 1 : &v316.__r_.__value_.__r.__words[1];
        }
        else
        {
          v64 = &v316.__r_.__value_.__l.__size_;
          v65 = &v316.__r_.__value_.__l.__size_;
          if (size)
          {
            v65 = &v316.__r_.__value_.__l.__size_;
            while (1)
            {
              while (1)
              {
                v64 = (std::string::size_type *)size;
                v72 = *(_QWORD *)(size + 32);
                if (v63 >= v72)
                  break;
                size = *v64;
                v65 = v64;
                if (!*v64)
                  goto LABEL_119;
              }
              if (v72 >= v63)
                break;
              v65 = v64 + 1;
              size = v64[1];
              if (!size)
                goto LABEL_119;
            }
          }
        }
        if (!*v65)
        {
LABEL_119:
          v66 = (uint64_t *)operator new(0x30uLL);
          v67 = v66;
          *(_QWORD *)&__p[8] = &v316.__r_.__value_.__l.__size_;
          v66[4] = *v55;
          v68 = v55[1];
          v66[5] = v68;
          if (v68)
          {
            v69 = (unint64_t *)(v68 + 8);
            do
              v70 = __ldxr(v69);
            while (__stxr(v70 + 1, v69));
          }
          __p[16] = 1;
          *v66 = 0;
          v66[1] = 0;
          v66[2] = (uint64_t)v64;
          *v65 = (std::string::size_type)v66;
          if (*(_QWORD *)v316.__r_.__value_.__l.__data_)
          {
            v316.__r_.__value_.__r.__words[0] = *(_QWORD *)v316.__r_.__value_.__l.__data_;
            v67 = (uint64_t *)*v65;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v316.__r_.__value_.__l.__size_, v67);
          ++v316.__r_.__value_.__r.__words[2];
          *(_QWORD *)__p = 0;
          std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,void *>>>>::reset[abi:ne180100]((uint64_t)__p);
        }
        v55 += 2;
        if ((unint64_t *)((char *)v55 - *v54) == (unint64_t *)4096)
        {
          v71 = (unint64_t *)v54[1];
          ++v54;
          v55 = v71;
        }
        if (v55 == (unint64_t *)v56)
          break;
        size = v316.__r_.__value_.__l.__size_;
      }
LABEL_142:
      if (v310.i64[1])
      {
        v73 = 0;
        v74 = 0;
        v300 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)&v308 + 1)
                                     + (((unint64_t)v310.i64[0] >> 5) & 0x7FFFFFFFFFFFFF8))
                         + 16 * v310.u8[0]);
        v331 = 1;
        while (1)
        {
          v75 = *((unsigned int *)&v331 + v74);
          v296 = v73;
          v76 = *(_QWORD *)(*v300 + 24 * v75 + 64) - *(_QWORD *)(*v300 + 24 * v75 + 56);
          if (v76)
            break;
LABEL_218:
          v73 = 1;
          v74 = 1;
          if ((v296 & 1) != 0)
          {
            v51 = (AMCP::Log::Scope_Registry *)std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](*(_QWORD *)(*((_QWORD *)&v308 + 1)+ (((unint64_t)v310.i64[0] >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * v310.u8[0]);
            v310 = vaddq_s64(v310, (int64x2_t)xmmword_1B5D68C50);
            if (v310.i64[0] >= 0x200uLL)
            {
              operator delete(**((void ***)&v308 + 1));
              *((_QWORD *)&v308 + 1) += 8;
              v310.i64[0] -= 256;
            }
            goto LABEL_142;
          }
        }
        v301 = 0;
        v297 = 0x6DB6DB6DB6DB6DB7 * (v76 >> 4);
        v298 = *((_DWORD *)&v331 + v74);
        while (1)
        {
          v77 = (std::string *)*v300;
          if (*(char *)(*v300 + 47) < 0)
            std::string::__init_copy_ctor_external(&v313, v77[1].__r_.__value_.__l.__data_, v77[1].__r_.__value_.__l.__size_);
          else
            v313 = v77[1];
          *(_OWORD *)v329 = *(_OWORD *)&v313.__r_.__value_.__l.__data_;
          v78 = (void *)v313.__r_.__value_.__r.__words[2];
          memset(&v313, 0, sizeof(v313));
          v329[2] = v78;
          v329[3] = v301;
          v330 = *(float *)&v75;
          AMCP::Graph::Wire_Index::get_wires_for_terminal(&v333.__r_.__value_.__l.__data_, v286, (unsigned __int8 **)v329);
          v79 = v333.__r_.__value_.__l.__size_;
          v299 = v333.__r_.__value_.__l.__size_;
          v80 = (uint64_t *)v333.__r_.__value_.__r.__words[0];
          if (v333.__r_.__value_.__r.__words[0] != v333.__r_.__value_.__l.__size_)
            break;
LABEL_213:
          if (v80)
            operator delete(v80);
          if (SHIBYTE(v329[2]) < 0)
            operator delete(v329[0]);
          if (++v301 == (char *)v297)
            goto LABEL_218;
        }
        while (1)
        {
          v81 = *v80;
          if (v75 == 1)
          {
            if (*(char *)(v81 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v327, *(const std::string::value_type **)v81, *(_QWORD *)(v81 + 8));
            }
            else
            {
              *(_OWORD *)v327 = *(_OWORD *)v81;
              *(_QWORD *)&v327[16] = *(_QWORD *)(v81 + 16);
            }
            v82 = v81 + 24;
          }
          else
          {
            if (*(char *)(v81 + 63) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v327, *(const std::string::value_type **)(v81 + 40), *(_QWORD *)(v81 + 48));
            }
            else
            {
              *(_OWORD *)v327 = *(_OWORD *)(v81 + 40);
              *(_QWORD *)&v327[16] = *(_QWORD *)(v81 + 56);
            }
            v82 = v81 + 64;
          }
          *(_QWORD *)&v327[24] = *(_QWORD *)v82;
          v328 = *(_DWORD *)(v82 + 8);
          v83 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(v289, v327);
          if (v83)
          {
            v84 = v83;
            v85 = *(_QWORD *)(AMCP::Graph::Node::get_nth_terminal(*v300, (unint64_t)v301, v75) + 104);
            if ((v85 & 0xFF00000000) == 0)
              std::__throw_bad_optional_access[abi:ne180100]();
            isa = v84[5].isa;
            v87 = v316.__r_.__value_.__l.__size_;
            if (!v316.__r_.__value_.__l.__size_)
              goto LABEL_170;
            v88 = (std::string *)&v316.__r_.__value_.__r.__words[1];
            do
            {
              v89 = (std::string *)v87;
              v90 = v88;
              v91 = *(_QWORD *)(v87 + 32);
              v92 = (std::string::size_type *)(v87 + 8);
              if (v91 >= (unint64_t)isa)
              {
                v92 = (std::string::size_type *)v89;
                v88 = v89;
              }
              v87 = *v92;
            }
            while (v87);
            if (v88 == (std::string *)&v316.__r_.__value_.__r.__words[1])
              goto LABEL_170;
            if (v91 < (unint64_t)isa)
              v89 = v90;
            if ((unint64_t)isa < v89[1].__r_.__value_.__l.__size_)
            {
LABEL_170:
              if ((_DWORD)v85 == 1)
                v93 = "input";
              else
                v93 = "output";
              std::string::basic_string[abi:ne180100]<0>(&v321, v93);
              v302 = v84;
              osloga = v84 + 5;
              v94 = 0;
              v95 = 0;
              v357.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E6982AF8;
              LODWORD(v357.__r_.__value_.__r.__words[1]) = v85;
              *(_QWORD *)&v358 = &v357;
              do
              {
                v96 = v94;
                v97 = (_QWORD *)((char *)isa + 24 * v95 + 56);
                if (v97[1] != *v97)
                {
                  v98 = 0;
                  v99 = 0;
                  do
                  {
                    if (*((char *)isa + 47) < 0)
                      std::string::__init_copy_ctor_external(&v324, *((const std::string::value_type **)isa + 3), *((_QWORD *)isa + 4));
                    else
                      v324 = *(std::string *)((_BYTE *)isa + 1);
                    *(_OWORD *)__p = *(_OWORD *)&v324.__r_.__value_.__l.__data_;
                    v100 = v324.__r_.__value_.__r.__words[2];
                    memset(&v324, 0, sizeof(v324));
                    *(_QWORD *)&__p[16] = v100;
                    *(_QWORD *)&__p[24] = v99;
                    *(_DWORD *)&__p[32] = v95;
                    if (!(_QWORD)v358)
                      std::__throw_bad_function_call[abi:ne180100]();
                    (*(void (**)(_QWORD, _BYTE *, uint64_t))(*(_QWORD *)v358 + 48))(v358, __p, *v97 + v98);
                    if ((__p[23] & 0x80000000) != 0)
                      operator delete(*(void **)__p);
                    ++v99;
                    v98 += 112;
                  }
                  while (v99 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v97[1] - *v97) >> 4));
                }
                v94 = 1;
                v95 = 1;
              }
              while ((v96 & 1) == 0);
              v101 = (std::string *)v358;
              if ((std::string *)v358 == &v357)
              {
                v101 = &v357;
                v104 = 4;
                v75 = v298;
                v102 = (__int128 *)osloga;
                v79 = v299;
                v103 = v302;
LABEL_188:
                (*(void (**)(void))(v101->__r_.__value_.__r.__words[0] + 8 * v104))();
              }
              else
              {
                v75 = v298;
                v102 = (__int128 *)osloga;
                v79 = v299;
                v103 = v302;
                if ((_QWORD)v358)
                {
                  v104 = 5;
                  goto LABEL_188;
                }
              }
              if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v321.__r_.__value_.__l.__data_);
              v105 = v316.__r_.__value_.__l.__size_;
              v106 = &v316.__r_.__value_.__l.__size_;
              v107 = &v316.__r_.__value_.__l.__size_;
              if (v316.__r_.__value_.__l.__size_)
              {
                v108 = *(_QWORD *)v102;
                while (1)
                {
                  while (1)
                  {
                    v107 = (std::string::size_type *)v105;
                    v109 = *(_QWORD *)(v105 + 32);
                    if (v108 >= v109)
                      break;
                    v105 = *v107;
                    v106 = v107;
                    if (!*v107)
                      goto LABEL_199;
                  }
                  if (v109 >= v108)
                    break;
                  v105 = v107[1];
                  if (!v105)
                  {
                    v106 = v107 + 1;
                    goto LABEL_199;
                  }
                }
              }
              else
              {
LABEL_199:
                v110 = (uint64_t *)operator new(0x30uLL);
                v111 = v110;
                *(_QWORD *)&__p[8] = &v316.__r_.__value_.__l.__size_;
                v110[4] = (uint64_t)v103[5].isa;
                v112 = (uint64_t)v103[6].isa;
                v110[5] = v112;
                if (v112)
                {
                  v113 = (unint64_t *)(v112 + 8);
                  do
                    v114 = __ldxr(v113);
                  while (__stxr(v114 + 1, v113));
                }
                __p[16] = 1;
                *v110 = 0;
                v110[1] = 0;
                v110[2] = (uint64_t)v107;
                *v106 = (std::string::size_type)v110;
                if (*(_QWORD *)v316.__r_.__value_.__l.__data_)
                {
                  v316.__r_.__value_.__r.__words[0] = *(_QWORD *)v316.__r_.__value_.__l.__data_;
                  v111 = (uint64_t *)*v106;
                }
                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v316.__r_.__value_.__l.__size_, v111);
                ++v316.__r_.__value_.__r.__words[2];
                *(_QWORD *)__p = 0;
                std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,void *>>>>::reset[abi:ne180100]((uint64_t)__p);
              }
              std::deque<std::shared_ptr<AMCP::Graph::Node>>::push_back(&v308, v102);
              goto LABEL_206;
            }
            nth_terminal = (AMCP::Log::Scope_Registry *)AMCP::Graph::Node::get_nth_terminal((uint64_t)v84[5].isa, *(unint64_t *)&v327[24], v328);
            v116 = *((_QWORD *)nth_terminal + 13);
            if ((v116 & 0xFF00000000) == 0)
              std::__throw_bad_optional_access[abi:ne180100]();
            if ((_DWORD)v85 != (_DWORD)v116)
            {
              AMCP::Log::Scope_Registry::get(nth_terminal);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
              v117 = *(std::__shared_weak_count **)&__p[8];
              v118 = **(NSObject ***)__p;
              if (*(_QWORD *)&__p[8])
              {
                v119 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
                do
                  v120 = __ldaxr(v119);
                while (__stlxr(v120 - 1, v119));
                if (!v120)
                {
                  ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                  std::__shared_weak_count::__release_weak(v117);
                }
              }
              if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
              {
                v121 = pthread_self();
                v122 = pthread_mach_thread_np(v121);
                *(_DWORD *)__p = 67109890;
                *(_DWORD *)&__p[4] = v122;
                *(_WORD *)&__p[8] = 2080;
                *(_QWORD *)&__p[10] = "Graph.cpp";
                *(_WORD *)&__p[18] = 1024;
                *(_DWORD *)&__p[20] = 848;
                *(_WORD *)&__p[24] = 2080;
                *(_QWORD *)&__p[26] = "not (alignment == connected_alignment)";
                _os_log_error_impl(&dword_1B57BA000, v118, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Wire between terminals with two different buffer alignments.", __p, 0x22u);
              }
              exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
              caulk::make_string((caulk *)"Wire between terminals with two different buffer alignments.", (uint64_t)&v321);
              std::logic_error::logic_error((std::logic_error *)&v332, &v321);
              v124 = MEMORY[0x1E0DE5018];
              v332.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
              std::logic_error::logic_error((std::logic_error *)&v357, (const std::logic_error *)&v332);
              v358 = 0uLL;
              v359 = 0;
              v360 = -1;
              v357.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
              v357.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
              boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v357);
              *(_QWORD *)&__p[32] = "void AMCP::Graph::Graph::calculate_data_directions()";
              *(_QWORD *)&__p[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
              *(_DWORD *)&__p[48] = 848;
              std::vector<void *>::vector(cf);
              v125 = backtrace((void **)cf[0], (unint64_t)((char *)cf[1] - (char *)cf[0]) >> 3);
              std::vector<void *>::resize((char **)cf, v125);
              *(_OWORD *)&v324.__r_.__value_.__r.__words[1] = *(_OWORD *)cf;
              v324.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
              v325 = v320;
              cf[0] = 0;
              cf[1] = 0;
              v320 = 0;
              boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)&v324);
              exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
              std::logic_error::logic_error(exception, (const std::logic_error *)__p);
              exception->__vftable = (std::logic_error_vtbl *)(v124 + 16);
              exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
              v126 = *(_QWORD *)&__p[24];
              exception[1].__imp_.__imp_ = *(const char **)&__p[24];
              if (v126)
                (*(void (**)(uint64_t))(*(_QWORD *)v126 + 24))(v126);
              v127 = *(std::logic_error *)&__p[32];
              LODWORD(exception[3].__vftable) = *(_DWORD *)&__p[48];
              exception[2] = v127;
              exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
              exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
              exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
            }
          }
LABEL_206:
          if ((v327[23] & 0x80000000) != 0)
            operator delete(*(void **)v327);
          if (++v80 == (uint64_t *)v79)
          {
            v80 = (uint64_t *)v333.__r_.__value_.__r.__words[0];
            goto LABEL_213;
          }
        }
      }
      j = a3;
      if (v316.__r_.__value_.__r.__words[2] != *((_QWORD *)v292 + 26))
      {
        AMCP::Log::Scope_Registry::get(v51);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
        v128 = **(NSObject ***)__p;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        if (os_log_type_enabled(v128, OS_LOG_TYPE_DEBUG))
        {
          v274 = pthread_self();
          v275 = pthread_mach_thread_np(v274);
          *(_DWORD *)__p = 67109634;
          *(_DWORD *)&__p[4] = v275;
          *(_WORD *)&__p[8] = 2080;
          *(_QWORD *)&__p[10] = "Graph.cpp";
          *(_WORD *)&__p[18] = 1024;
          *(_DWORD *)&__p[20] = 859;
          _os_log_debug_impl(&dword_1B57BA000, v128, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d The buffer alignments for one or more nodes could not be calculated.", __p, 0x18u);
        }
      }
      std::__tree<std::shared_ptr<AMCP::Graph::Node>>::destroy((_QWORD *)v316.__r_.__value_.__l.__size_);
    }
  }
  v129 = (AMCP::Graph::File_Capture_Settings *)std::deque<std::shared_ptr<AMCP::Graph::Node>>::~deque[abi:ne180100]((uint64_t)&v308);
  v311 = 0;
  v309 = 0u;
  v310 = 0u;
  v308 = 0u;
  v130 = *((_QWORD *)j + 3);
  v131 = *((_QWORD *)j + 4);
  if (v130 != v131)
  {
    cf[1] = 0;
    v320 = 0;
    cf[0] = &cf[1];
    do
    {
      if (*(char *)(v130 + 23) < 0)
        std::string::__init_copy_ctor_external(&v316, *(const std::string::value_type **)v130, *(_QWORD *)(v130 + 8));
      else
        v316 = *(std::string *)v130;
      v317 = *(_QWORD *)(v130 + 24);
      v318 = *(_DWORD *)(v130 + 32);
      if (*(char *)(v130 + 63) < 0)
        std::string::__init_copy_ctor_external(&v313, *(const std::string::value_type **)(v130 + 40), *(_QWORD *)(v130 + 48));
      else
        v313 = *(std::string *)(v130 + 40);
      v314 = *(_QWORD *)(v130 + 64);
      v315 = *(_DWORD *)(v130 + 72);
      *(std::string *)__p = v316;
      memset(&v316, 0, sizeof(v316));
      *(_QWORD *)&__p[24] = v317;
      *(_DWORD *)&__p[32] = v318;
      *(std::string *)&__p[40] = v313;
      memset(&v313, 0, sizeof(v313));
      v132 = *(_QWORD *)(v130 + 64);
      v337 = *(_DWORD *)(v130 + 72);
      v336 = v132;
      std::__tree<AMCP::Wire_Identifier>::__emplace_unique_key_args<AMCP::Wire_Identifier,AMCP::Wire_Identifier>((uint64_t)cf, (uint64_t)__p, (uint64_t)__p);
      if ((__p[63] & 0x80000000) != 0)
        operator delete(*(void **)&__p[40]);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v130 += 192;
    }
    while (v130 != v131);
    v134 = *((_QWORD *)j + 3);
    oslogb = (os_log_t)*((_QWORD *)j + 4);
    if ((os_log_t)v134 == oslogb)
    {
      AMCP::Log::Scope_Registry::get(v133);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
      v277 = **(NSObject ***)__p;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      if (os_log_type_enabled(v277, OS_LOG_TYPE_ERROR))
      {
        v278 = pthread_self();
        v279 = pthread_mach_thread_np(v278);
        *(_DWORD *)__p = 67109890;
        *(_DWORD *)&__p[4] = v279;
        *(_WORD *)&__p[8] = 2080;
        *(_QWORD *)&__p[10] = "Graph.cpp";
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&__p[20] = 374;
        *(_WORD *)&__p[24] = 2080;
        *(_QWORD *)&__p[26] = "not (not wires.empty())";
        _os_log_error_impl(&dword_1B57BA000, v277, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No path origins in a set with no wires.", __p, 0x22u);
      }
      v280 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"No path origins in a set with no wires.", (uint64_t)v327);
      std::logic_error::logic_error((std::logic_error *)&v321, (const std::string *)v327);
      v321.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
      std::logic_error::logic_error((std::logic_error *)&v357, (const std::logic_error *)&v321);
      v358 = 0uLL;
      v359 = 0;
      v360 = -1;
      v357.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
      v357.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v357);
      *(_QWORD *)&__p[32] = "std::vector<Wire_Identifier> AMCP::Graph::Graph::find_thread_group_origins(const std::vector"
                            "<Wire_Description> &) const";
      *(_QWORD *)&__p[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
      *(_DWORD *)&__p[48] = 374;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v324.__r_.__value_.__l.__data_);
      *(std::string *)&v329[1] = v324;
      v329[0] = off_1E69A20A0;
      memset(&v324, 0, sizeof(v324));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)v329);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v280, (uint64_t)__p);
    }
    memset(v329, 0, sizeof(v329));
    v330 = 1.0;
    memset(v327, 0, sizeof(v327));
    v328 = 1065353216;
    while (1)
    {
      if (*(char *)(v134 + 23) < 0)
        std::string::__init_copy_ctor_external(&v333, *(const std::string::value_type **)v134, *(_QWORD *)(v134 + 8));
      else
        v333 = *(std::string *)v134;
      if (std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v289, (unsigned __int8 *)&v333))
      {
        break;
      }
LABEL_357:
      if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v333.__r_.__value_.__l.__data_);
      v134 += 192;
      if ((os_log_t)v134 == oslogb)
      {
        memset(&v332, 0, sizeof(v332));
        v183 = v329[2];
        for (j = a3; v183; v183 = *(void **)v183)
        {
          v184 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v289, (unsigned __int8 *)v183 + 16);
          if (std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(v327, (unsigned __int8 *)v183 + 16))
          {
            if (v184)
            {
              v185 = *((_QWORD *)v184 + 5);
              if (*(_DWORD *)(v185 + 48) != 1 && *(_DWORD *)(v185 + 16) == 1)
                continue;
            }
          }
          std::vector<AMCP::Wire_Identifier>::__insert_with_size[abi:ne180100]<std::__wrap_iter<AMCP::Wire_Identifier*>,std::__wrap_iter<AMCP::Wire_Identifier*>>(&v332, v332.__r_.__value_.__l.__size_, *((std::string **)v183 + 5), *((_QWORD *)v183 + 6), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)v183 + 6) - *((_QWORD *)v183 + 5)) >> 4));
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)&v327[16]);
        v186 = *(void **)v327;
        *(_QWORD *)v327 = 0;
        if (v186)
          operator delete(v186);
        std::__hash_table<std::__hash_value_type<std::string,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<AMCP::Wire_Identifier>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<AMCP::Wire_Identifier>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<AMCP::Wire_Identifier>>>>::~__hash_table((uint64_t)v329);
        v188 = v332.__r_.__value_.__l.__size_;
        for (k = v332.__r_.__value_.__r.__words[0]; k != v188; k += 80)
        {
          if (*(char *)(k + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)k, *(_QWORD *)(k + 8));
          }
          else
          {
            v189 = *(_OWORD *)k;
            *(_QWORD *)&__p[16] = *(_QWORD *)(k + 16);
            *(_OWORD *)__p = v189;
          }
          v190 = *(_QWORD *)(k + 24);
          *(_DWORD *)&__p[32] = *(_DWORD *)(k + 32);
          *(_QWORD *)&__p[24] = v190;
          if (*(char *)(k + 63) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__p[40], *(const std::string::value_type **)(k + 40), *(_QWORD *)(k + 48));
          }
          else
          {
            v191 = *(_OWORD *)(k + 40);
            *(_QWORD *)&__p[56] = *(_QWORD *)(k + 56);
            *(_OWORD *)&__p[40] = v191;
          }
          v192 = *(_QWORD *)(k + 64);
          v337 = *(_DWORD *)(k + 72);
          v336 = v192;
          AMCP::Graph::Graph::calculate_tgid_and_connect((uint64_t)v285, (uint64_t)__p, (uint64_t)cf, &v308);
          if ((__p[63] & 0x80000000) != 0)
            operator delete(*(void **)&__p[40]);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        v357.__r_.__value_.__r.__words[0] = (std::string::size_type)&v332;
        std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)&v357);
        std::__tree<AMCP::Wire_Identifier>::destroy((_QWORD *)cf[1]);
        goto LABEL_392;
      }
    }
    v135 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v333);
    v136 = v135;
    v137 = (unint64_t)v329[1];
    if (v329[1])
    {
      v138 = (uint8x8_t)vcnt_s8((int8x8_t)v329[1]);
      v138.i16[0] = vaddlv_u8(v138);
      v139 = v138.u32[0];
      if (v138.u32[0] > 1uLL)
      {
        v130 = v135;
        if ((void *)v135 >= v329[1])
          v130 = v135 % (unint64_t)v329[1];
      }
      else
      {
        v130 = ((unint64_t)v329[1] - 1) & v135;
      }
      v140 = (uint64_t **)*((_QWORD *)v329[0] + v130);
      if (v140)
      {
        for (m = *v140; m; m = (uint64_t *)*m)
        {
          v142 = m[1];
          if (v142 == v136)
          {
            if (std::__equal_to::operator()[abi:ne180100]<std::string,std::string>((unsigned __int8 *)m + 16, (unsigned __int8 *)&v333))
            {
              goto LABEL_330;
            }
          }
          else
          {
            if (v139 > 1)
            {
              if (v142 >= v137)
                v142 %= v137;
            }
            else
            {
              v142 &= v137 - 1;
            }
            if (v142 != v130)
              break;
          }
        }
      }
    }
    v143 = operator new(0x40uLL);
    *(_QWORD *)__p = v143;
    *(_QWORD *)&__p[8] = &v329[2];
    __p[16] = 0;
    *v143 = 0;
    v143[1] = v136;
    v144 = (std::string *)(v143 + 2);
    if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v144, v333.__r_.__value_.__l.__data_, v333.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v144->__r_.__value_.__l.__data_ = *(_OWORD *)&v333.__r_.__value_.__l.__data_;
      v143[4] = *((_QWORD *)&v333.__r_.__value_.__l + 2);
    }
    v143[5] = 0;
    v143[6] = 0;
    v143[7] = 0;
    __p[16] = 1;
    v145 = (float)((unint64_t)v329[3] + 1);
    if (v137 && (float)(v330 * (float)v137) >= v145)
    {
LABEL_320:
      v161 = (uint64_t **)*((_QWORD *)v329[0] + v130);
      m = *(uint64_t **)__p;
      if (v161)
      {
        **(_QWORD **)__p = *v161;
      }
      else
      {
        **(_QWORD **)__p = v329[2];
        v329[2] = m;
        *((_QWORD *)v329[0] + v130) = &v329[2];
        if (!*m)
          goto LABEL_329;
        v162 = *(_QWORD *)(*m + 8);
        if ((v137 & (v137 - 1)) != 0)
        {
          if (v162 >= v137)
            v162 %= v137;
        }
        else
        {
          v162 &= v137 - 1;
        }
        v161 = (uint64_t **)((char *)v329[0] + 8 * v162);
      }
      *v161 = m;
LABEL_329:
      *(_QWORD *)__p = 0;
      ++v329[3];
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<AMCP::Wire_Identifier>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<AMCP::Wire_Identifier>>,void *>>>>::reset[abi:ne180100]((uint64_t)__p);
LABEL_330:
      if (*(char *)(v134 + 23) < 0)
        std::string::__init_copy_ctor_external(&v324, *(const std::string::value_type **)v134, *(_QWORD *)(v134 + 8));
      else
        v324 = *(std::string *)v134;
      v325 = *(_QWORD *)(v134 + 24);
      v326 = *(_DWORD *)(v134 + 32);
      v130 = v134 + 40;
      if (*(char *)(v134 + 63) < 0)
      {
        std::string::__init_copy_ctor_external(&v321, *(const std::string::value_type **)(v134 + 40), *(_QWORD *)(v134 + 48));
      }
      else
      {
        *(_OWORD *)&v321.__r_.__value_.__l.__data_ = *(_OWORD *)v130;
        v321.__r_.__value_.__r.__words[2] = *(_QWORD *)(v134 + 56);
      }
      v322 = *(_QWORD *)(v134 + 64);
      v323 = *(_DWORD *)(v134 + 72);
      *(std::string *)__p = v324;
      memset(&v324, 0, sizeof(v324));
      *(_QWORD *)&__p[24] = v325;
      *(_DWORD *)&__p[32] = v326;
      *(std::string *)&__p[40] = v321;
      memset(&v321, 0, sizeof(v321));
      v163 = *(_QWORD *)(v134 + 64);
      v337 = *(_DWORD *)(v134 + 72);
      v336 = v163;
      v164 = m[7];
      v165 = m[6];
      if (v165 >= v164)
      {
        v171 = m[5];
        v172 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v165 - v171) >> 4);
        v173 = v172 + 1;
        if (v172 + 1 > 0x333333333333333)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v174 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v164 - v171) >> 4);
        if (2 * v174 > v173)
          v173 = 2 * v174;
        if (v174 >= 0x199999999999999)
          v175 = 0x333333333333333;
        else
          v175 = v173;
        *((_QWORD *)&v358 + 1) = m + 7;
        if (v175)
          v175 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Identifier>>(v175);
        else
          v176 = 0;
        v177 = v175 + 80 * v172;
        v357.__r_.__value_.__r.__words[0] = v175;
        v357.__r_.__value_.__l.__size_ = v177;
        *(_QWORD *)&v358 = v175 + 80 * v176;
        v178 = *(_OWORD *)__p;
        *(_QWORD *)(v177 + 16) = *(_QWORD *)&__p[16];
        *(_OWORD *)v177 = v178;
        memset(__p, 0, 24);
        v179 = *(_QWORD *)&__p[24];
        *(_DWORD *)(v177 + 32) = *(_DWORD *)&__p[32];
        *(_QWORD *)(v177 + 24) = v179;
        v180 = *(_OWORD *)&__p[40];
        *(_QWORD *)(v177 + 56) = *(_QWORD *)&__p[56];
        *(_OWORD *)(v177 + 40) = v180;
        memset(&__p[40], 0, 24);
        v181 = v336;
        *(_DWORD *)(v177 + 72) = v337;
        *(_QWORD *)(v177 + 64) = v181;
        v357.__r_.__value_.__r.__words[2] = v177 + 80;
        std::vector<AMCP::Wire_Identifier>::__swap_out_circular_buffer(m + 5, &v357);
        v170 = m[6];
        std::__split_buffer<AMCP::Wire_Identifier>::~__split_buffer((uint64_t)&v357);
      }
      else
      {
        v166 = *(_OWORD *)__p;
        *(_QWORD *)(v165 + 16) = *(_QWORD *)&__p[16];
        *(_OWORD *)v165 = v166;
        memset(__p, 0, 24);
        v167 = *(_DWORD *)&__p[32];
        *(_QWORD *)(v165 + 24) = *(_QWORD *)&__p[24];
        *(_DWORD *)(v165 + 32) = v167;
        v168 = *(_QWORD *)&__p[56];
        *(_OWORD *)(v165 + 40) = *(_OWORD *)&__p[40];
        *(_QWORD *)(v165 + 56) = v168;
        memset(&__p[40], 0, 24);
        v169 = v336;
        *(_DWORD *)(v165 + 72) = v337;
        *(_QWORD *)(v165 + 64) = v169;
        v170 = v165 + 80;
        m[6] = v165 + 80;
      }
      m[6] = v170;
      if ((__p[63] & 0x80000000) != 0)
        operator delete(*(void **)&__p[40]);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v321.__r_.__value_.__l.__data_);
      if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v324.__r_.__value_.__l.__data_);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v327, (unsigned __int8 *)(v134 + 40), v134 + 40);
      goto LABEL_357;
    }
    v146 = (v137 & (v137 - 1)) != 0;
    if (v137 < 3)
      v146 = 1;
    v147 = v146 | (2 * v137);
    v148 = vcvtps_u32_f32(v145 / v330);
    if (v147 <= v148)
      prime = (int8x8_t)v148;
    else
      prime = (int8x8_t)v147;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v137 = (unint64_t)v329[1];
    if ((void *)*(_QWORD *)&prime > v329[1])
      goto LABEL_286;
    if ((void *)*(_QWORD *)&prime < v329[1])
    {
      v156 = vcvtps_u32_f32((float)(unint64_t)v329[3] / v330);
      if (v329[1] < (void *)3
        || (v157 = (uint8x8_t)vcnt_s8((int8x8_t)v329[1]), v157.i16[0] = vaddlv_u8(v157), v157.u32[0] > 1uLL))
      {
        v156 = std::__next_prime(v156);
      }
      else
      {
        v158 = 1 << -(char)__clz(v156 - 1);
        if (v156 >= 2)
          v156 = v158;
      }
      if (*(_QWORD *)&prime <= v156)
        prime = (int8x8_t)v156;
      if (*(_QWORD *)&prime >= v137)
      {
        v137 = (unint64_t)v329[1];
      }
      else
      {
        if (prime)
        {
LABEL_286:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v150 = operator new(8 * *(_QWORD *)&prime);
          v151 = v329[0];
          v329[0] = v150;
          if (v151)
            operator delete(v151);
          v152 = 0;
          v329[1] = (void *)prime;
          do
            *((_QWORD *)v329[0] + v152++) = 0;
          while (*(_QWORD *)&prime != v152);
          v153 = (_QWORD **)v329[2];
          if (v329[2])
          {
            v154 = *((_QWORD *)v329[2] + 1);
            v155 = (uint8x8_t)vcnt_s8(prime);
            v155.i16[0] = vaddlv_u8(v155);
            if (v155.u32[0] > 1uLL)
            {
              if (v154 >= *(_QWORD *)&prime)
                v154 %= *(_QWORD *)&prime;
            }
            else
            {
              v154 &= *(_QWORD *)&prime - 1;
            }
            *((_QWORD *)v329[0] + v154) = &v329[2];
            for (n = *v153; n; v154 = v160)
            {
              v160 = n[1];
              if (v155.u32[0] > 1uLL)
              {
                if (v160 >= *(_QWORD *)&prime)
                  v160 %= *(_QWORD *)&prime;
              }
              else
              {
                v160 &= *(_QWORD *)&prime - 1;
              }
              if (v160 != v154)
              {
                if (!*((_QWORD *)v329[0] + v160))
                {
                  *((_QWORD *)v329[0] + v160) = v153;
                  goto LABEL_311;
                }
                *v153 = (_QWORD *)*n;
                *n = **((_QWORD **)v329[0] + v160);
                **((_QWORD **)v329[0] + v160) = n;
                n = v153;
              }
              v160 = v154;
LABEL_311:
              v153 = (_QWORD **)n;
              n = (_QWORD *)*n;
            }
          }
          v137 = (unint64_t)prime;
          goto LABEL_315;
        }
        v182 = v329[0];
        v329[0] = 0;
        if (v182)
          operator delete(v182);
        v137 = 0;
        v329[1] = 0;
      }
    }
LABEL_315:
    if ((v137 & (v137 - 1)) != 0)
    {
      if (v136 >= v137)
        v130 = v136 % v137;
      else
        v130 = v136;
    }
    else
    {
      v130 = (v137 - 1) & v136;
    }
    goto LABEL_320;
  }
LABEL_392:
  v194 = *(_QWORD *)j;
  v193 = *((_QWORD *)j + 1);
  if (*(_QWORD *)j == v193)
    goto LABEL_441;
  v195 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
  v283 = *((_QWORD *)j + 1);
  do
  {
    if (*(_DWORD *)v194 != 3)
      goto LABEL_440;
    v196 = 0;
    v332.__r_.__value_.__r.__words[0] = 1;
    v294 = v194 + 72;
    v290 = (std::string *)(v194 + 8);
    v291 = v194;
    v197 = &v332;
    v198 = 1;
    do
    {
      v287 = v198;
      v288 = v196;
      data = (int)v197->__r_.__value_.__l.__data_;
      v200 = *(_QWORD *)(v294 + 24 * LODWORD(v197->__r_.__value_.__l.__data_));
      if (*(_QWORD *)(v294 + 24 * LODWORD(v197->__r_.__value_.__l.__data_) + 8) != v200)
      {
        v295 = 0;
        v307 = data != 1;
        v293 = v197;
        do
        {
          if (data == 1)
          {
            if (*(_BYTE *)(v200 + 104 * v295 + 96)
              || (AMCP::Graph::File_Capture_Settings::instance(v129),
                  (_BYTE)AMCP::Graph::File_Capture_Settings::instance(void)::s_instance))
            {
LABEL_403:
              if (*(char *)(v194 + 31) < 0)
                std::string::__init_copy_ctor_external(&v321, *(const std::string::value_type **)(v194 + 8), *(_QWORD *)(v194 + 16));
              else
                v321 = *v290;
              v201 = *(float *)&v197->__r_.__value_.__l.__data_;
              *(_OWORD *)v329 = *(_OWORD *)&v321.__r_.__value_.__l.__data_;
              v202 = (void *)v321.__r_.__value_.__r.__words[2];
              memset(&v321, 0, sizeof(v321));
              v329[2] = v202;
              v329[3] = (void *)v295;
              v330 = v201;
              for (ii = (_QWORD *)*((_QWORD *)v292 + 42); ii; ii = (_QWORD *)*ii)
              {
                v129 = (AMCP::Graph::File_Capture_Settings *)std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::find<AMCP::Terminal_Identifier>((_QWORD *)(ii[3] + 40 * v307 + 8), (unsigned __int8 **)v329);
                if (v129)
                {
                  v204 = v129;
                  AMCP::Terminal_Identifier_to_string(&v316, (const void **)v329);
                  std::string::basic_string[abi:ne180100]<0>(__p, "write");
                  memset(&__p[24], 0, 32);
                  __p[24] = 1;
                  *(_QWORD *)&__p[56] = v195;
                  std::string::basic_string[abi:ne180100]<0>(&v336, "create unique name");
                  v338 = 0u;
                  v339 = 0u;
                  LOBYTE(v338) = 1;
                  v340 = v195;
                  std::string::basic_string[abi:ne180100]<0>(v341, "write time stamps");
                  v342 = 0u;
                  v343 = 0u;
                  LOBYTE(v342) = 1;
                  v344 = v195;
                  get_audio_capture_folder(v327);
                  std::string::basic_string[abi:ne180100]<0>(v345, "file location");
                  v346 = *(_OWORD *)v327;
                  v347 = *(_QWORD *)&v327[16];
                  memset(v327, 0, 24);
                  v348 = 0;
                  v349 = AMCP::Implementation::In_Place_Storage<std::string>::dispatch;
                  AMCP::DAL::generate_time_stamp((AMCP::DAL *)&v324);
                  v205 = std::string::append(&v324, "_post_mix_", 0xAuLL);
                  v206 = v195;
                  v207 = v205->__r_.__value_.__r.__words[0];
                  v333.__r_.__value_.__r.__words[0] = v205->__r_.__value_.__l.__size_;
                  *(std::string::size_type *)((char *)v333.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v205->__r_.__value_.__r.__words[1] + 7);
                  v208 = HIBYTE(v205->__r_.__value_.__r.__words[2]);
                  v205->__r_.__value_.__l.__size_ = 0;
                  v205->__r_.__value_.__r.__words[2] = 0;
                  v205->__r_.__value_.__r.__words[0] = 0;
                  std::string::basic_string[abi:ne180100]<0>(v350, "name");
                  v350[3] = v207;
                  *(_QWORD *)v351 = v333.__r_.__value_.__r.__words[0];
                  *(_QWORD *)&v351[7] = *(std::string::size_type *)((char *)v333.__r_.__value_.__r.__words + 7);
                  v352 = v208;
                  v333.__r_.__value_.__r.__words[0] = 0;
                  *(std::string::size_type *)((char *)v333.__r_.__value_.__r.__words + 7) = 0;
                  v353 = 0;
                  v354 = AMCP::Implementation::In_Place_Storage<std::string>::dispatch;
                  std::pair<std::string,AMCP::Thing>::pair[abi:ne180100]<char const* const&,std::string const&,0>(v355, "wire id", (__int128 *)&v316);
                  asbd_to_dictionary((const CA::StreamDescription *)cf, (uint64_t *)v204 + 26);
                  std::string::basic_string[abi:ne180100]<0>(v356, "asbd");
                  memset(&v356[4], 0, 24);
                  v209 = cf[0];
                  cf[0] = 0;
                  v356[3] = v209;
                  v356[7] = AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
                  v313.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                  v313.__r_.__value_.__l.__size_ = 7;
                  AMCP::DAL::DAL_Settings::DAL_Settings((unint64_t)&v357, (uint64_t *)&v313);
                  v210 = operator new(0x50uLL);
                  v210[1] = 0;
                  v210[2] = 0;
                  *v210 = &off_1E6995EC8;
                  v211 = v357.__r_.__value_.__r.__words[0];
                  v212 = v359;
                  v210[3] = v357.__r_.__value_.__r.__words[0];
                  v213 = *(_OWORD *)&v357.__r_.__value_.__r.__words[1];
                  *(_OWORD *)&v357.__r_.__value_.__l.__data_ = 0uLL;
                  v214 = v358;
                  *((_OWORD *)v210 + 2) = v213;
                  *((_OWORD *)v210 + 3) = v214;
                  v210[8] = v212;
                  *((_DWORD *)v210 + 18) = v360;
                  if (v212)
                  {
                    v215 = *(_QWORD *)(v210[6] + 8);
                    v216 = v210[4];
                    if ((v216 & (v216 - 1)) != 0)
                    {
                      if (v215 >= v216)
                        v215 %= v216;
                    }
                    else
                    {
                      v215 &= v216 - 1;
                    }
                    *(_QWORD *)(v211 + 8 * v215) = v210 + 6;
                    *(_QWORD *)&v358 = 0;
                    v359 = 0;
                  }
                  *(_QWORD *)&v217 = v210 + 3;
                  *((_QWORD *)&v217 + 1) = v210;
                  v218 = (_OWORD *)((char *)v204 + 264);
                  v219 = (std::__shared_weak_count *)*((_QWORD *)v204 + 34);
                  *v218 = v217;
                  if (v219)
                  {
                    p_shared_owners = (unint64_t *)&v219->__shared_owners_;
                    do
                      v221 = __ldaxr(p_shared_owners);
                    while (__stlxr(v221 - 1, p_shared_owners));
                    if (!v221)
                    {
                      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
                      std::__shared_weak_count::__release_weak(v219);
                    }
                  }
                  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table((uint64_t)&v357);
                  v222 = 448;
                  do
                  {
                    v223 = (void **)&__p[v222];
                    v224 = *(void (**)(_QWORD, void **, _QWORD, _QWORD))&v334[v222];
                    if (v224)
                      v224(0, v223 - 5, 0, 0);
                    if (*((char *)v223 - 41) < 0)
                      operator delete(*(v223 - 8));
                    v222 -= 64;
                  }
                  while (v222);
                  v129 = (AMCP::Graph::File_Capture_Settings *)cf[0];
                  if (cf[0])
                    CFRelease(cf[0]);
                  if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v324.__r_.__value_.__l.__data_);
                  v195 = v206;
                  if ((v327[23] & 0x80000000) != 0)
                    operator delete(*(void **)v327);
                  if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v316.__r_.__value_.__l.__data_);
                }
              }
              if (SHIBYTE(v329[2]) < 0)
                operator delete(v329[0]);
              v194 = v291;
              v197 = v293;
            }
          }
          else
          {
            AMCP::Graph::File_Capture_Settings::instance(v129);
            if (BYTE2(AMCP::Graph::File_Capture_Settings::instance(void)::s_instance))
              goto LABEL_403;
          }
          data = (int)v197->__r_.__value_.__l.__data_;
          v200 = *(_QWORD *)(v294 + 24 * LODWORD(v197->__r_.__value_.__l.__data_));
          ++v295;
        }
        while (v295 < 0x4EC4EC4EC4EC4EC5
                     * ((*(_QWORD *)(v294 + 24 * LODWORD(v197->__r_.__value_.__l.__data_) + 8) - v200) >> 3));
      }
      v197 = (std::string *)((char *)&v332 + 4 * v287);
      v196 = 1;
      v198 = 2;
    }
    while ((v288 & 1) == 0);
    v193 = v283;
LABEL_440:
    v194 += 120;
  }
  while (v194 != v193);
LABEL_441:
  AMCP::Graph::Wire_Index::get_wires((AMCP::Graph::Wire_Index *)v329, (uint64_t)v286);
  *(_OWORD *)&v321.__r_.__value_.__r.__words[1] = 0uLL;
  v321.__r_.__value_.__r.__words[0] = (std::string::size_type)&v321.__r_.__value_.__l.__size_;
  v225 = (const std::string::value_type *)v329[2];
  if (v329[2])
  {
    do
    {
      if (v225[39] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v327, *((const std::string::value_type **)v225 + 2), *((_QWORD *)v225 + 3));
      }
      else
      {
        *(_OWORD *)v327 = *((_OWORD *)v225 + 1);
        *(_QWORD *)&v327[16] = *((_QWORD *)v225 + 4);
      }
      *(_QWORD *)&v327[24] = *((_QWORD *)v225 + 5);
      v328 = *((_DWORD *)v225 + 12);
      if (v225[79] < 0)
        std::string::__init_copy_ctor_external(&v324, *((const std::string::value_type **)v225 + 7), *((_QWORD *)v225 + 8));
      else
        v324 = *(std::string *)(v225 + 56);
      v325 = *((_QWORD *)v225 + 10);
      v326 = *((_DWORD *)v225 + 22);
      *(std::string *)__p = *(std::string *)v327;
      memset(v327, 0, 24);
      *(_QWORD *)&__p[24] = *(_QWORD *)&v327[24];
      *(_DWORD *)&__p[32] = v328;
      *(std::string *)&__p[40] = v324;
      memset(&v324, 0, sizeof(v324));
      v337 = *((_DWORD *)v225 + 22);
      v336 = *((_QWORD *)v225 + 10);
      std::__tree<AMCP::Wire_Identifier>::__emplace_unique_key_args<AMCP::Wire_Identifier,AMCP::Wire_Identifier>((uint64_t)&v321, (uint64_t)__p, (uint64_t)__p);
      if ((__p[63] & 0x80000000) != 0)
        operator delete(*(void **)&__p[40]);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v225 = *(const std::string::value_type **)v225;
    }
    while (v225);
    v226 = v321.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v321.__r_.__value_.__l.__data_ != &v321.__r_.__value_.__r.__words[1])
    {
      do
      {
        if (*(char *)(v226 + 55) < 0)
          std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v226 + 32), *(_QWORD *)(v226 + 40));
        else
          *(std::string *)__p = *(std::string *)(v226 + 32);
        *(_QWORD *)&__p[24] = *(_QWORD *)(v226 + 56);
        *(_DWORD *)&__p[32] = *(_DWORD *)(v226 + 64);
        if (*(char *)(v226 + 95) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[40], *(const std::string::value_type **)(v226 + 72), *(_QWORD *)(v226 + 80));
        }
        else
        {
          *(_OWORD *)&__p[40] = *(_OWORD *)(v226 + 72);
          *(_QWORD *)&__p[56] = *(_QWORD *)(v226 + 88);
        }
        v336 = *(_QWORD *)(v226 + 96);
        v337 = *(_DWORD *)(v226 + 104);
        AMCP::Graph::Graph::calculate_tgid_and_connect((uint64_t)v285, (uint64_t)__p, (uint64_t)&v321, &v308);
        if ((__p[63] & 0x80000000) != 0)
          operator delete(*(void **)&__p[40]);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        v227 = *(std::string **)(v226 + 8);
        if (v227)
        {
          do
          {
            v228 = v227;
            v227 = (std::string *)v227->__r_.__value_.__r.__words[0];
          }
          while (v227);
        }
        else
        {
          do
          {
            v228 = *(std::string **)(v226 + 16);
            v62 = v228->__r_.__value_.__r.__words[0] == v226;
            v226 = (std::string::size_type)v228;
          }
          while (!v62);
        }
        v226 = (std::string::size_type)v228;
      }
      while (v228 != (std::string *)&v321.__r_.__value_.__r.__words[1]);
    }
  }
  std::__tree<AMCP::Wire_Identifier>::destroy((_QWORD *)v321.__r_.__value_.__l.__size_);
  std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__deallocate_node((_QWORD *)v329[2]);
  v229 = v329[0];
  v329[0] = 0;
  if (v229)
    operator delete(v229);
  memset(v327, 0, 24);
  std::vector<unsigned int>::reserve((std::vector<unsigned int> *)v327, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((_QWORD *)a3 + 1) - *(_QWORD *)a3) >> 3));
  v231 = *(_QWORD *)a3;
  v230 = *((_QWORD *)a3 + 1);
  if (*(_QWORD *)a3 != v230)
  {
    while (1)
    {
      v232 = (_QWORD *)(v231 + 8);
      v233 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v289, (unsigned __int8 *)(v231 + 8));
      if (!v233)
        break;
      v234 = *((_QWORD *)v233 + 5);
      v235 = *((_QWORD *)v233 + 6);
      v313.__r_.__value_.__r.__words[0] = v234;
      v313.__r_.__value_.__l.__size_ = v235;
      if (v235)
      {
        v236 = (unint64_t *)(v235 + 8);
        do
          v237 = __ldxr(v236);
        while (__stxr(v237 + 1, v236));
      }
      if (!v234)
        goto LABEL_514;
      if (!*(_DWORD *)(v234 + 16))
      {
        updated = AMCP::IO_Core::Graph_Manager::update_iocontext((uint64_t)v292, (unsigned __int8 *)(v231 + 8), (uint64_t)&v308);
        if (!updated)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)updated);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
          v264 = **(NSObject ***)__p;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
          if (os_log_type_enabled(v264, OS_LOG_TYPE_ERROR))
          {
            v265 = pthread_self();
            v266 = pthread_mach_thread_np(v265);
            v267 = (_QWORD *)(v231 + 8);
            if (*(char *)(v231 + 31) < 0)
              v267 = (_QWORD *)*v232;
            *(_DWORD *)__p = 67110146;
            *(_DWORD *)&__p[4] = v266;
            *(_WORD *)&__p[8] = 2080;
            *(_QWORD *)&__p[10] = "Graph_Manager.cpp";
            *(_WORD *)&__p[18] = 1024;
            *(_DWORD *)&__p[20] = 172;
            *(_WORD *)&__p[24] = 2080;
            *(_QWORD *)&__p[26] = "not (success)";
            *(_WORD *)&__p[34] = 2080;
            *(_QWORD *)&__p[36] = v267;
            _os_log_error_impl(&dword_1B57BA000, v264, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to update IOC: %s", __p, 0x2Cu);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v333);
          v268 = __cxa_allocate_exception(0x40uLL);
          if (*(char *)(v231 + 31) < 0)
            v232 = (_QWORD *)*v232;
          caulk::make_string((caulk *)"Failed to update IOC: %s", (uint64_t)&v324, v232);
          std::logic_error::logic_error((std::logic_error *)&v316, &v324);
          v316.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
          std::logic_error::logic_error((std::logic_error *)&v357, (const std::logic_error *)&v316);
          v358 = 0uLL;
          v359 = 0;
          v360 = -1;
          v357.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
          v357.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v357);
          *(_QWORD *)&__p[32] = "Modify_Graph_Result AMCP::IO_Core::Graph_Manager::modify_graph_internal(const Graph_Desc"
                                "ription &, const Modify_Graph_Destroy_List &)";
          *(_QWORD *)&__p[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Graph_Manager.cpp";
          *(_DWORD *)&__p[48] = 172;
          applesauce::backtrace::snapshot_N<64>::snapshot_N(&v321.__r_.__value_.__l.__data_);
          *(std::string *)&v329[1] = v321;
          v329[0] = off_1E69A20A0;
          memset(&v321, 0, sizeof(v321));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)v329);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v268, (uint64_t)__p);
        }
        v240 = *(_QWORD *)(v313.__r_.__value_.__r.__words[0] + 144);
        v239 = *(std::__shared_weak_count **)(v313.__r_.__value_.__r.__words[0] + 152);
        if (v239)
        {
          v241 = (unint64_t *)&v239->__shared_owners_;
          do
            v242 = __ldxr(v241);
          while (__stxr(v242 + 1, v241));
          do
            v243 = __ldaxr(v241);
          while (__stlxr(v243 - 1, v241));
          if (!v243)
          {
            ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
            std::__shared_weak_count::__release_weak(v239);
          }
        }
        if (!v240)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)updated);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
          v269 = **(NSObject ***)__p;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
          if (os_log_type_enabled(v269, OS_LOG_TYPE_ERROR))
          {
            v270 = pthread_self();
            v271 = pthread_mach_thread_np(v270);
            if (*(char *)(v313.__r_.__value_.__r.__words[0] + 47) < 0)
              std::string::__init_copy_ctor_external(&v357, *(const std::string::value_type **)(v313.__r_.__value_.__r.__words[0] + 24), *(_QWORD *)(v313.__r_.__value_.__r.__words[0] + 32));
            else
              v357 = *(std::string *)(v313.__r_.__value_.__r.__words[0] + 24);
            v272 = &v357;
            if ((v357.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v272 = (std::string *)v357.__r_.__value_.__r.__words[0];
            *(_DWORD *)__p = 67110146;
            *(_DWORD *)&__p[4] = v271;
            *(_WORD *)&__p[8] = 2080;
            *(_QWORD *)&__p[10] = "Graph_Manager.cpp";
            *(_WORD *)&__p[18] = 1024;
            *(_DWORD *)&__p[20] = 173;
            *(_WORD *)&__p[24] = 2080;
            *(_QWORD *)&__p[26] = "not (node->get_clock() != Timebase_Ref{})";
            *(_WORD *)&__p[34] = 2080;
            *(_QWORD *)&__p[36] = v272;
            _os_log_error_impl(&dword_1B57BA000, v269, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Unable to calculate clock for IO Context: %s", __p, 0x2Cu);
            if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v357.__r_.__value_.__l.__data_);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)cf);
          v273 = __cxa_allocate_exception(0x40uLL);
          if (*(char *)(v313.__r_.__value_.__r.__words[0] + 47) < 0)
            std::string::__init_copy_ctor_external(&v321, *(const std::string::value_type **)(v313.__r_.__value_.__r.__words[0] + 24), *(_QWORD *)(v313.__r_.__value_.__r.__words[0] + 32));
          else
            v321 = *(std::string *)(v313.__r_.__value_.__r.__words[0] + 24);
          v276 = &v321;
          if ((v321.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v276 = (std::string *)v321.__r_.__value_.__r.__words[0];
          caulk::make_string((caulk *)"Unable to calculate clock for IO Context: %s", (uint64_t)&v324, v276);
          std::logic_error::logic_error((std::logic_error *)&v333, &v324);
          v333.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
          std::logic_error::logic_error((std::logic_error *)&v357, (const std::logic_error *)&v333);
          v358 = 0uLL;
          v359 = 0;
          v360 = -1;
          v357.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
          v357.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v357);
          *(_QWORD *)&__p[32] = "Modify_Graph_Result AMCP::IO_Core::Graph_Manager::modify_graph_internal(const Graph_Desc"
                                "ription &, const Modify_Graph_Destroy_List &)";
          *(_QWORD *)&__p[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Graph_Manager.cpp";
          *(_DWORD *)&__p[48] = 173;
          applesauce::backtrace::snapshot_N<64>::snapshot_N(&v316.__r_.__value_.__l.__data_);
          *(std::string *)&v329[1] = v316;
          v329[0] = off_1E69A20A0;
          memset(&v316, 0, sizeof(v316));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)v329);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v273, (uint64_t)__p);
        }
      }
      v244 = *(_QWORD *)(v313.__r_.__value_.__r.__words[0] + 176);
      if (v244)
        v245 = *(_DWORD *)(v244 + 8);
      else
        v245 = 0;
      v246 = *(char **)&v327[8];
      if (*(_QWORD *)&v327[8] >= *(_QWORD *)&v327[16])
      {
        v248 = *(char **)v327;
        v249 = (uint64_t)(*(_QWORD *)&v327[8] - *(_QWORD *)v327) >> 2;
        v250 = v249 + 1;
        if ((unint64_t)(v249 + 1) >> 62)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v251 = *(_QWORD *)&v327[16] - *(_QWORD *)v327;
        if ((uint64_t)(*(_QWORD *)&v327[16] - *(_QWORD *)v327) >> 1 > v250)
          v250 = v251 >> 1;
        if ((unint64_t)v251 >= 0x7FFFFFFFFFFFFFFCLL)
          v252 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v252 = v250;
        if (v252)
          v252 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v252);
        else
          v253 = 0;
        v254 = (_DWORD *)(v252 + 4 * v249);
        *v254 = v245;
        v247 = v254 + 1;
        while (v246 != v248)
        {
          v255 = *((_DWORD *)v246 - 1);
          v246 -= 4;
          *--v254 = v255;
        }
        *(_QWORD *)v327 = v254;
        *(_QWORD *)&v327[16] = v252 + 4 * v253;
        if (v248)
          operator delete(v248);
      }
      else
      {
        **(_DWORD **)&v327[8] = v245;
        v247 = v246 + 4;
      }
      *(_QWORD *)&v327[8] = v247;
      v256 = (std::__shared_weak_count *)v313.__r_.__value_.__l.__size_;
      if (v313.__r_.__value_.__l.__size_)
      {
        v257 = (unint64_t *)(v313.__r_.__value_.__l.__size_ + 8);
        do
          v258 = __ldaxr(v257);
        while (__stlxr(v258 - 1, v257));
        if (!v258)
        {
          ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
          std::__shared_weak_count::__release_weak(v256);
        }
      }
      v231 += 120;
      if (v231 == v230)
        goto LABEL_512;
    }
    *(_OWORD *)&v313.__r_.__value_.__l.__data_ = 0uLL;
LABEL_514:
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v233);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    v259 = **(NSObject ***)__p;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (os_log_type_enabled(v259, OS_LOG_TYPE_ERROR))
    {
      v260 = pthread_self();
      v261 = pthread_mach_thread_np(v260);
      v262 = (_QWORD *)(v231 + 8);
      if (*(char *)(v231 + 31) < 0)
        v262 = (_QWORD *)*v232;
      *(_DWORD *)__p = 67110146;
      *(_DWORD *)&__p[4] = v261;
      *(_WORD *)&__p[8] = 2080;
      *(_QWORD *)&__p[10] = "Graph_Manager.cpp";
      *(_WORD *)&__p[18] = 1024;
      *(_DWORD *)&__p[20] = 166;
      *(_WORD *)&__p[24] = 2080;
      *(_QWORD *)&__p[26] = "not (node)";
      *(_WORD *)&__p[34] = 2080;
      *(_QWORD *)&__p[36] = v262;
      _os_log_error_impl(&dword_1B57BA000, v259, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Unable to find node that was just added: %s", __p, 0x2Cu);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v333);
    v263 = __cxa_allocate_exception(0x40uLL);
    if (*(char *)(v231 + 31) < 0)
      v232 = (_QWORD *)*v232;
    caulk::make_string((caulk *)"Unable to find node that was just added: %s", (uint64_t)&v324, v232);
    std::logic_error::logic_error((std::logic_error *)&v316, &v324);
    v316.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error((std::logic_error *)&v357, (const std::logic_error *)&v316);
    v358 = 0uLL;
    v359 = 0;
    v360 = -1;
    v357.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
    v357.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v357);
    *(_QWORD *)&__p[32] = "Modify_Graph_Result AMCP::IO_Core::Graph_Manager::modify_graph_internal(const Graph_Descriptio"
                          "n &, const Modify_Graph_Destroy_List &)";
    *(_QWORD *)&__p[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Graph_Manager.cpp";
    *(_DWORD *)&__p[48] = 166;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v321.__r_.__value_.__l.__data_);
    *(std::string *)&v329[1] = v321;
    v329[0] = off_1E69A20A0;
    memset(&v321, 0, sizeof(v321));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)v329);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v263, (uint64_t)__p);
  }
LABEL_512:
  *(_OWORD *)this = *(_OWORD *)v327;
  *((_QWORD *)this + 2) = *(_QWORD *)&v327[16];
  *((_BYTE *)this + 24) = 1;
LABEL_550:
  result = v312;
  if (v312)
    return std::default_delete<AMCP::Graph::Graph_State_Data>::operator()[abi:ne180100](v312);
  return result;
}

void sub_1B595D8A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (!a46)
    JUMPOUT(0x1B595D8D4);
  JUMPOUT(0x1B595D19CLL);
}

__n128 std::__optional_storage_base<std::vector<unsigned int>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned int>,false>>(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;
  void *v6;

  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v4 = *(void **)a1;
      if (*(_QWORD *)a1)
      {
        *(_QWORD *)(a1 + 8) = v4;
        operator delete(v4);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
      }
      result = *a2;
      *(__n128 *)a1 = *a2;
      *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v6 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v6;
      operator delete(v6);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    result = *a2;
    *(__n128 *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

void AMCP::IO_Core::Graph_Manager::insert_graph_components(std::string *this, const AMCP::Graph_Description *a2)
{
  uint64_t v2;
  AMCP::Log::Scope_Registry *v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  uint64_t v20;
  NSObject *v21;
  const char *v22;
  std::__shared_weak_count *v23;
  NSObject *v24;
  unint64_t *v25;
  unint64_t v26;
  _opaque_pthread_t *v27;
  mach_port_t v28;
  uint64_t v29;
  char v30;
  std::__shared_weak_count *v31;
  NSObject *v32;
  unint64_t *v33;
  unint64_t v34;
  _opaque_pthread_t *v35;
  mach_port_t v36;
  uint64_t v37;
  std::string *v38;
  std::string *v39;
  unint64_t *v40;
  std::string *v41;
  __int128 v42;
  int v43;
  std::string *v44;
  __int128 v45;
  char v46;
  uint64_t v47;
  int v48;
  int v49;
  std::logic_error *v50;
  int shared_weak_owners;
  _BOOL4 v52;
  char v53;
  unsigned int v54;
  BOOL v55;
  uint64_t v56;
  char v57;
  __int128 **v58;
  __int128 *v59;
  __int128 *v60;
  uint64_t v61;
  std::string::__raw *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  std::string::size_type v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  int64x2_t v81;
  char *v82;
  std::__shared_weak_count *imp;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *shared_owners;
  unint64_t v88;
  unint64_t *p_shared_weak_owners;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unsigned __int8 *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *p_shared_owners;
  unint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  std::__shared_mutex_base *v114;
  uint64_t v115;
  std::logic_error_vtbl *v116;
  unint64_t v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  _QWORD *v120;
  void *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::logic_error_vtbl *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint8x8_t v134;
  unint64_t v135;
  unsigned __int8 **v136;
  unsigned __int8 *v137;
  unint64_t v138;
  _QWORD *v139;
  std::string *v140;
  __int128 v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  float v145;
  float v146;
  _BOOL8 v147;
  unint64_t v148;
  unint64_t v149;
  size_t v150;
  std::string::size_type v151;
  _QWORD *v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint8x8_t v157;
  std::string **v158;
  std::string *i;
  unint64_t size;
  std::string *v161;
  __int128 v162;
  float v163;
  float v164;
  _BOOL8 v165;
  unint64_t v166;
  unint64_t v167;
  size_t v168;
  std::string::size_type v169;
  std::string **v170;
  unint64_t v171;
  std::logic_error_vtbl *v172;
  _QWORD *v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  const char *(__cdecl *v182)(const std::logic_error *__hidden);
  const char *(__cdecl *p_what)(const std::logic_error *__hidden);
  const char *(__cdecl *what)(const std::logic_error *__hidden);
  uint64_t v185;
  void (__cdecl *v186)(std::logic_error *__hidden);
  uint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  NSObject *v204;
  _opaque_pthread_t *v205;
  mach_port_t v206;
  std::string *v207;
  void *exception;
  uint64_t v209;
  std::string::size_type *v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  std::string::size_type v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  unsigned __int8 *v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  std::__shared_weak_count *v222;
  uint64_t v223;
  unint64_t *v224;
  unint64_t v225;
  unint64_t v226;
  char *v227;
  uint64_t v228;
  char *v229;
  char *v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  uint8x8_t v234;
  unint64_t v235;
  _QWORD *v236;
  _QWORD *v237;
  unint64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  float v246;
  float v247;
  _BOOL8 v248;
  unint64_t v249;
  unint64_t v250;
  int8x8_t v251;
  void *v252;
  void *v253;
  uint64_t v254;
  _QWORD *v255;
  unint64_t v256;
  uint8x8_t v257;
  unint64_t v258;
  uint8x8_t v259;
  uint64_t v260;
  _QWORD *v261;
  unint64_t v262;
  std::string::size_type *v263;
  std::string::size_type v264;
  unint64_t v265;
  void *v266;
  unint64_t v267;
  unint64_t v268;
  uint8x8_t v269;
  unint64_t v270;
  _QWORD *v271;
  _QWORD *v272;
  std::__shared_weak_count *v273;
  unint64_t v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  float v280;
  float v281;
  _BOOL8 v282;
  unint64_t v283;
  unint64_t v284;
  int8x8_t prime;
  void *v286;
  void *v287;
  uint64_t v288;
  _QWORD *v289;
  unint64_t v290;
  uint8x8_t v291;
  unint64_t v292;
  uint8x8_t v293;
  uint64_t v294;
  _QWORD *v295;
  unint64_t v296;
  std::string::size_type *v297;
  std::string::size_type v298;
  unint64_t v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  void *v305;
  std::__shared_weak_count *v306;
  NSObject *v307;
  unint64_t *v308;
  unint64_t v309;
  _opaque_pthread_t *v310;
  mach_port_t v311;
  const void *v312;
  void *v313;
  const void *v314;
  int v315;
  NSObject *v316;
  _opaque_pthread_t *v317;
  mach_port_t v318;
  _QWORD *v319;
  void *v320;
  _QWORD *v321;
  NSObject *v322;
  _opaque_pthread_t *v323;
  mach_port_t v324;
  void *v325;
  NSObject *v326;
  _opaque_pthread_t *v327;
  mach_port_t v328;
  void *v329;
  std::logic_error_vtbl *v330;
  std::string::__raw *v332;
  std::string::size_type *v333;
  std::logic_error v334;
  std::string::__raw *v335;
  uint64_t v336;
  std::string::size_type *v337;
  std::string *v338;
  unint64_t *v339;
  std::string *v340;
  uint64_t v341;
  uint64_t v342;
  std::string *v343;
  std::string::size_type *p_size;
  std::string::__raw *v345;
  std::string::size_type *v346;
  uint64_t v347;
  std::string *v348;
  std::string *v349;
  std::__shared_weak_count *v350;
  uint64_t v351;
  uint64_t v352;
  std::__shared_weak_count *v353;
  char v354;
  std::logic_error v355;
  char *v356;
  int64x2_t v357;
  char *v358;
  std::string::size_type *v359;
  uint64_t v360;
  std::__shared_weak_count *v361;
  uint64_t v362;
  char v363;
  _QWORD v364[2];
  char v365;
  std::string v366;
  uint64_t v367;
  int v368;
  _BYTE v369[32];
  int v370;
  unsigned __int128 __p;
  __int128 v372;
  uint64_t v373;
  std::string __s;
  uint64_t v375;
  int v376;
  std::logic_error v377;
  __int128 v378;
  uint64_t v379;
  _QWORD v380[3];
  _QWORD *v381;
  _QWORD v382[3];
  _QWORD *v383;
  _QWORD v384[3];
  _QWORD *v385;
  _QWORD v386[3];
  _QWORD *v387;
  _QWORD v388[3];
  const char *(__cdecl *v389)(const std::logic_error *__hidden);
  _BYTE buf[64];
  uint64_t v391;
  int v392;
  std::string v393;
  uint64_t v394;
  int v395;
  __int128 v396;
  uint64_t v397;
  uint64_t v398;
  int v399;
  void *v400;
  _BYTE *v401;
  void *v402;
  _BYTE *v403;
  int v404;
  __int128 v405;
  uint64_t v406;
  char v407;
  _QWORD v408[7];

  v348 = this;
  v408[4] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)a2;
  v342 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 == v342)
    goto LABEL_342;
  p_size = &this->__r_.__value_.__l.__size_;
  v346 = &this[7].__r_.__value_.__r.__words[2];
  v337 = &this[8].__r_.__value_.__l.__size_;
  v343 = (std::string *)((char *)this + 224);
  v332 = (std::string::__raw *)&this[10];
  v330 = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
  do
  {
    v3 = (AMCP::Log::Scope_Registry *)(*(_QWORD *(**)(uint64_t *__return_ptr))(v348->__r_.__value_.__r.__words[0]
                                                                                       + 16))(&v352);
    v347 = v2;
    if (*(_DWORD *)v2 == 2)
    {
      v5 = *(_QWORD *)(v2 + 96);
      if (*(_QWORD *)(v2 + 104) - v5 != 104 || (v6 = *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80) - v6 != 104))
      {
        AMCP::Log::Scope_Registry::get(v3);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v14 = *(std::__shared_weak_count **)&buf[8];
        v15 = **(NSObject ***)buf;
        if (*(_QWORD *)&buf[8])
        {
          v16 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        this = (std::string *)os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
        if (!(_DWORD)this)
          goto LABEL_50;
        v18 = pthread_self();
        v19 = pthread_mach_thread_np(v18);
        v20 = v2 + 8;
        if (*(char *)(v2 + 31) < 0)
          v20 = *(_QWORD *)(v2 + 8);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v19;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "Graph.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 66;
        *(_WORD *)&buf[24] = 2080;
        *(_QWORD *)&buf[26] = v20;
        v21 = v15;
        v22 = "%6u %32s:%-5d Bad format for Reflector description %s: Reflector nodes must have one terminal for input an"
              "d one for output";
        goto LABEL_49;
      }
      v4.n128_u64[0] = *(_QWORD *)v5;
      if (*(double *)v5 != *(double *)v6
        || *(_DWORD *)(v5 + 8) != *(_DWORD *)(v6 + 8)
        || *(_DWORD *)(v5 + 12) != *(_DWORD *)(v6 + 12)
        || *(_DWORD *)(v5 + 16) != *(_DWORD *)(v6 + 16)
        || *(_DWORD *)(v5 + 20) != *(_DWORD *)(v6 + 20)
        || *(_DWORD *)(v5 + 24) != *(_DWORD *)(v6 + 24)
        || *(_DWORD *)(v5 + 28) != *(_DWORD *)(v6 + 28)
        || *(_DWORD *)(v5 + 32) != *(_DWORD *)(v6 + 32))
      {
        AMCP::Log::Scope_Registry::get(v3);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v23 = *(std::__shared_weak_count **)&buf[8];
        v24 = **(NSObject ***)buf;
        if (*(_QWORD *)&buf[8])
        {
          v25 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        this = (std::string *)os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG);
        if (!(_DWORD)this)
          goto LABEL_50;
        v27 = pthread_self();
        v28 = pthread_mach_thread_np(v27);
        v29 = v2 + 8;
        if (*(char *)(v2 + 31) < 0)
          v29 = *(_QWORD *)(v2 + 8);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v28;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "Graph.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 72;
        *(_WORD *)&buf[24] = 2080;
        *(_QWORD *)&buf[26] = v29;
        v21 = v24;
        v22 = "%6u %32s:%-5d Bad format for Reflector description %s: terminal stream formats do not match";
        goto LABEL_49;
      }
      v7 = *(_DWORD *)(v2 + 64);
      if (v7 != 2)
      {
        if (v7 != 1)
          goto LABEL_52;
        v8 = *(unsigned __int8 *)(v2 + 63);
        if ((v8 & 0x80u) == 0)
          v9 = *(unsigned __int8 *)(v2 + 63);
        else
          v9 = *(_QWORD *)(v2 + 48);
        v10 = *(unsigned __int8 *)(v2 + 31);
        v11 = (char)v10;
        if ((v10 & 0x80u) != 0)
          v10 = *(_QWORD *)(v2 + 16);
        if (v9 != v10)
          goto LABEL_52;
        if (v11 >= 0)
          v12 = (unsigned __int8 *)(v2 + 8);
        else
          v12 = *(unsigned __int8 **)(v2 + 8);
        if ((v8 & 0x80) != 0)
        {
          v3 = (AMCP::Log::Scope_Registry *)memcmp(*(const void **)(v2 + 40), v12, *(_QWORD *)(v2 + 48));
          if ((_DWORD)v3)
            goto LABEL_52;
        }
        else if (*(_BYTE *)(v2 + 63))
        {
          v13 = 0;
          while (*(unsigned __int8 *)(v2 + v13 + 40) == v12[v13])
          {
            if (v8 == ++v13)
              goto LABEL_61;
          }
LABEL_52:
          AMCP::Log::Scope_Registry::get(v3);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v31 = *(std::__shared_weak_count **)&buf[8];
          v32 = **(NSObject ***)buf;
          if (*(_QWORD *)&buf[8])
          {
            v33 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          this = (std::string *)os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG);
          if (!(_DWORD)this)
          {
LABEL_50:
            v30 = 0;
            goto LABEL_326;
          }
          v35 = pthread_self();
          v36 = pthread_mach_thread_np(v35);
          v37 = v2 + 8;
          if (*(char *)(v2 + 31) < 0)
            v37 = *(_QWORD *)(v2 + 8);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v36;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "Graph.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 81;
          *(_WORD *)&buf[24] = 2080;
          *(_QWORD *)&buf[26] = v37;
          v21 = v32;
          v22 = "%6u %32s:%-5d Bad format for Reflector description %s: Reflector must be its own clock source";
LABEL_49:
          _os_log_debug_impl(&dword_1B57BA000, v21, OS_LOG_TYPE_DEBUG, v22, buf, 0x22u);
          goto LABEL_50;
        }
      }
    }
LABEL_61:
    (*(void (**)(_BYTE *__return_ptr, std::string::size_type *, uint64_t, __n128))(*p_size + 16))(buf, p_size, v2 + 8, v4);
    v38 = (std::string *)operator new(0xE8uLL);
    v39 = v38;
    *(_OWORD *)&v38->__r_.__value_.__r.__words[1] = 0u;
    v40 = &v38->__r_.__value_.__l.__size_;
    v38->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E6985880;
    *(_OWORD *)&v38[1].__r_.__value_.__l.__data_ = 0u;
    v41 = v38 + 1;
    v355 = *(std::logic_error *)buf;
    *(_OWORD *)buf = 0u;
    LODWORD(v38[1].__r_.__value_.__r.__words[2]) = *(_DWORD *)v2;
    if (*(char *)(v2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(v38 + 2, *(const std::string::value_type **)(v2 + 8), *(_QWORD *)(v2 + 16));
    }
    else
    {
      v42 = *(_OWORD *)(v2 + 8);
      v38[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 24);
      *(_OWORD *)&v38[2].__r_.__value_.__l.__data_ = v42;
    }
    v43 = *(_DWORD *)(v2 + 32);
    *(_OWORD *)&v39[3].__r_.__value_.__r.__words[1] = 0u;
    LODWORD(v39[3].__r_.__value_.__l.__data_) = v43;
    v39[3].__r_.__value_.__s.__data_[4] = 1;
    v44 = (std::string *)((char *)v39 + 136);
    *(_OWORD *)&v39[4].__r_.__value_.__l.__data_ = 0u;
    *(_OWORD *)&v39[4].__r_.__value_.__r.__words[2] = 0u;
    v349 = (std::string *)((char *)v39 + 80);
    v39[5].__r_.__value_.__l.__size_ = 0;
    v340 = (std::string *)(v2 + 8);
    if (*(char *)(v2 + 63) < 0)
    {
      std::string::__init_copy_ctor_external(v44, *(const std::string::value_type **)(v2 + 40), *(_QWORD *)(v2 + 48));
    }
    else
    {
      v45 = *(_OWORD *)(v2 + 40);
      v39[6].__r_.__value_.__l.__size_ = *(_QWORD *)(v2 + 56);
      *(_OWORD *)&v44->__r_.__value_.__l.__data_ = v45;
    }
    v338 = v41;
    v339 = v40;
    v46 = 0;
    v47 = 0;
    v48 = *(_DWORD *)(v2 + 64);
    v39[7].__r_.__value_.__l.__size_ = 0;
    v39[7].__r_.__value_.__r.__words[0] = 0;
    v49 = *(_DWORD *)(v2 + 68);
    v350 = (std::__shared_weak_count *)v39;
    v39[8].__r_.__value_.__l.__size_ = 0;
    v50 = (std::logic_error *)&v39[8].__r_.__value_.__r.__words[1];
    LODWORD(v50[-3].__imp_.__imp_) = v48;
    LODWORD(v50[-1].__vftable) = v49;
    *(std::logic_error_vtbl **)((char *)&v50[-1].__vftable + 4) = 0;
    v50->__imp_.__imp_ = 0;
    v50[1] = v355;
    v355.__vftable = 0;
    v355.__imp_.__imp_ = 0;
    shared_weak_owners = (int)v50[-10].__vftable;
    v52 = (shared_weak_owners & 0xFFFFFFFE) != 2;
    v351 = v2 + 72;
    v53 = 1;
    while (1)
    {
      v54 = shared_weak_owners - 2;
      v55 = shared_weak_owners == 0;
      if (shared_weak_owners)
        v56 = 0;
      else
        v56 = 0x100000000;
      if (v55)
        v57 = v46;
      else
        v57 = 0;
      if (v54 >= 2)
        v53 = v57;
      else
        v56 = 0x100000000;
      v58 = (__int128 **)(v351 + 24 * v47);
      v59 = *v58;
      v60 = v58[1];
      if (*v58 != v60)
      {
        v61 = v56 | v53 & 1;
        v62 = (std::string::__raw *)&v349[v47];
        v63 = &v62->__words[1];
        v64 = v62->__words[1];
        v65 = &v62->__words[2];
        do
        {
          if (v64 >= *v65)
          {
            v66 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v64 - v62->__words[0]) >> 4);
            v67 = v66 + 1;
            if ((unint64_t)(v66 + 1) > 0x249249249249249)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v65 - v62->__words[0]) >> 4) > v67)
              v67 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v65 - v62->__words[0]) >> 4);
            if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v65 - v62->__words[0]) >> 4)) >= 0x124924924924924)
              v68 = 0x249249249249249;
            else
              v68 = v67;
            v359 = &v62->__words[2];
            if (v68)
            {
              if (v68 > 0x249249249249249)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v69 = (char *)operator new(112 * v68);
            }
            else
            {
              v69 = 0;
            }
            v356 = v69;
            v357.i64[0] = (uint64_t)&v69[112 * v66];
            v357.i64[1] = v357.i64[0];
            v358 = &v69[112 * v68];
            AMCP::Graph::Terminal::Terminal(v357.i64[0], v59, v61, v52);
            v70 = v357.i64[0];
            v64 = v357.i64[1] + 112;
            v357.i64[1] += 112;
            v71 = *v63;
            v72 = v62->__words[0];
            if (*v63 == v62->__words[0])
            {
              v81 = vdupq_n_s64(v71);
            }
            else
            {
              do
              {
                v73 = 0;
                v74 = v70 - 112;
                v75 = v71 - 112;
                v76 = *(_OWORD *)(v71 - 112);
                v77 = *(_OWORD *)(v71 - 96);
                *(_QWORD *)(v70 - 80) = *(_QWORD *)(v71 - 80);
                *(_OWORD *)(v70 - 112) = v76;
                *(_OWORD *)(v70 - 96) = v77;
                do
                {
                  v78 = v70 + v73;
                  v79 = v71 + v73;
                  *(_QWORD *)(v78 - 72) = 0;
                  *(_QWORD *)(v78 - 64) = 0;
                  *(_QWORD *)(v78 - 56) = 0;
                  *(_OWORD *)(v78 - 72) = *(_OWORD *)(v71 + v73 - 72);
                  *(_QWORD *)(v78 - 56) = *(_QWORD *)(v71 + v73 - 56);
                  *(_QWORD *)(v79 - 72) = 0;
                  *(_QWORD *)(v79 - 64) = 0;
                  *(_QWORD *)(v79 - 56) = 0;
                  v73 += 24;
                }
                while (v73 != 48);
                v80 = *(_OWORD *)(v71 - 24);
                *(_QWORD *)(v70 - 11) = *(_QWORD *)(v71 - 11);
                *(_OWORD *)(v70 - 24) = v80;
                v70 -= 112;
                v71 -= 112;
              }
              while (v75 != v72);
              v81 = *(int64x2_t *)v62->__words;
              v64 = v357.u64[1];
              v70 = v74;
            }
            v62->__words[0] = v70;
            *v63 = v64;
            v357 = v81;
            v82 = (char *)*v65;
            *v65 = (unint64_t)v358;
            v358 = v82;
            v356 = (char *)v81.i64[0];
            std::__split_buffer<AMCP::Graph::Terminal>::~__split_buffer((uint64_t)&v356);
          }
          else
          {
            AMCP::Graph::Terminal::Terminal(v64, v59, v61, v52);
            v64 += 112;
            *v63 = v64;
          }
          *v63 = v64;
          v59 = (__int128 *)((char *)v59 + 104);
        }
        while (v59 != v60);
      }
      if ((v46 & 1) != 0)
        break;
      v53 = 0;
      shared_weak_owners = v350[1].__shared_weak_owners_;
      v46 = 1;
      v47 = 1;
    }
    imp = (std::__shared_weak_count *)v355.__imp_.__imp_;
    v84 = (unint64_t)v338;
    if (v355.__imp_.__imp_)
    {
      v85 = (unint64_t *)(v355.__imp_.__imp_ + 8);
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
        std::__shared_weak_count::__release_weak(imp);
      }
    }
    *(_QWORD *)&v378 = v338;
    *((_QWORD *)&v378 + 1) = v350;
    shared_owners = (std::__shared_weak_count *)v350[1].__shared_owners_;
    if (shared_owners)
    {
      if (shared_owners->__shared_owners_ != -1)
        goto LABEL_119;
      do
        v88 = __ldxr(v339);
      while (__stxr(v88 + 1, v339));
      p_shared_weak_owners = (unint64_t *)&v350->__shared_weak_owners_;
      do
        v90 = __ldxr(p_shared_weak_owners);
      while (__stxr(v90 + 1, p_shared_weak_owners));
      v350[1].__vftable = (std::__shared_weak_count_vtbl *)&v350[1];
      v350[1].__shared_owners_ = (uint64_t)v350;
      std::__shared_weak_count::__release_weak(shared_owners);
    }
    else
    {
      do
        v91 = __ldxr(v339);
      while (__stxr(v91 + 1, v339));
      v92 = (unint64_t *)&v350->__shared_weak_owners_;
      do
        v93 = __ldxr(v92);
      while (__stxr(v93 + 1, v92));
      v350[1].__vftable = (std::__shared_weak_count_vtbl *)&v350[1];
      v350[1].__shared_owners_ = (uint64_t)v350;
    }
    do
      v94 = __ldaxr(v339);
    while (__stlxr(v94 - 1, v339));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
      std::__shared_weak_count::__release_weak(v350);
    }
LABEL_119:
    v95 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v96 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
    v98 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(v346, (unsigned __int8 *)v340);
    v377.__imp_.__imp_ = 0;
    v377.__vftable = 0;
    if (v98)
    {
      v99 = *((_QWORD *)v98 + 5);
      if (*(_DWORD *)(v99 + 16) != *(_DWORD *)v347)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v98);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v204 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v204, OS_LOG_TYPE_ERROR))
        {
          v205 = pthread_self();
          v206 = pthread_mach_thread_np(v205);
          if (*(char *)(v347 + 31) >= 0)
            v207 = v340;
          else
            v207 = *(std::string **)(v347 + 8);
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v206;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "Graph.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 109;
          *(_WORD *)&buf[24] = 2080;
          *(_QWORD *)&buf[26] = "found->second->get_node_type() != d.mNodeType";
          *(_WORD *)&buf[34] = 2080;
          *(_QWORD *)&buf[36] = v207;
          _os_log_error_impl(&dword_1B57BA000, v204, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Existing node with UID %s has a different type.", buf, 0x2Cu);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v354);
        exception = __cxa_allocate_exception(0x40uLL);
        std::logic_error::logic_error(&v355, "Existing node with this UID has a different type.");
        v355.__vftable = v330;
        std::logic_error::logic_error((std::logic_error *)&__p, &v355);
        *((_QWORD *)&v372 + 1) = 0;
        v373 = 0;
        __s.__r_.__value_.__r.__words[0] = 0;
        LODWORD(__s.__r_.__value_.__r.__words[1]) = -1;
        *(_QWORD *)&__p = off_1E69A1208;
        *(_QWORD *)&v372 = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
        *(_QWORD *)&buf[32] = "BOOL AMCP::Graph::Graph::add_node(const Node_Description &, const Graph_Host_Ptr &)";
        *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
        *(_DWORD *)&buf[48] = 109;
        applesauce::backtrace::snapshot_N<64>::snapshot_N(&v366.__r_.__value_.__l.__data_);
        *(std::string *)&v369[8] = v366;
        *(_QWORD *)v369 = off_1E69A20A0;
        memset(&v366, 0, sizeof(v366));
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v369);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
      }
      v100 = v378;
      v102 = *(_QWORD *)(v99 + 176);
      v101 = *(_QWORD *)(v99 + 184);
      if (v101)
      {
        v103 = (unint64_t *)(v101 + 8);
        do
          v104 = __ldxr(v103);
        while (__stxr(v104 + 1, v103));
      }
      v105 = *(std::__shared_weak_count **)(v100 + 184);
      *(_QWORD *)(v100 + 176) = v102;
      *(_QWORD *)(v100 + 184) = v101;
      if (v105)
      {
        p_shared_owners = (unint64_t *)&v105->__shared_owners_;
        do
          v107 = __ldaxr(p_shared_owners);
        while (__stlxr(v107 - 1, p_shared_owners));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
        }
      }
      v108 = *(_QWORD *)(v100 + 176);
      std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v360, *(_QWORD *)v100, *(std::__shared_weak_count **)(v100 + 8));
      v110 = v360;
      v109 = v361;
      if (v361)
      {
        v111 = (unint64_t *)&v361->__shared_weak_owners_;
        do
          v112 = __ldxr(v111);
        while (__stxr(v112 + 1, v111));
      }
      v113 = *(std::__shared_weak_count **)(v108 + 24);
      *(_QWORD *)(v108 + 16) = v110;
      *(_QWORD *)(v108 + 24) = v109;
      if (v113)
        std::__shared_weak_count::__release_weak(v113);
      __p = 0u;
      v372 = 0u;
      LODWORD(v373) = 1065353216;
      (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)v108 + 32))(v108, &__p);
      v114 = (std::__shared_mutex_base *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v108 + 32) + 16))(*(_QWORD *)(v108 + 32));
      AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)v369, v114, *(_DWORD *)(v108 + 8));
      v115 = *(_QWORD *)v369;
      v362 = *(_QWORD *)v369 + 48;
      v363 = 1;
      caulk::concurrent::shared_spin_lock::lock((unsigned int *)(*(_QWORD *)v369 + 48));
      v116 = (std::logic_error_vtbl *)__p;
      v117 = *((_QWORD *)&__p + 1);
      *(_QWORD *)&__p = 0;
      *((_QWORD *)&__p + 1) = 0;
      *(_QWORD *)buf = v116;
      *(_QWORD *)&buf[8] = v117;
      *(_OWORD *)&buf[16] = v372;
      *(_DWORD *)&buf[32] = v373;
      if (*((_QWORD *)&v372 + 1))
      {
        v118 = *(_QWORD *)(v372 + 8);
        if ((v117 & (v117 - 1)) != 0)
        {
          if (v118 >= v117)
            v118 %= v117;
        }
        else
        {
          v118 &= v117 - 1;
        }
        *((_QWORD *)&v116->~logic_error + v118) = &buf[16];
        v372 = 0uLL;
      }
      std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__move_assign((uint64_t)&__p, (uint64_t *)(v115 + 8));
      std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__move_assign(v115 + 8, (uint64_t *)buf);
      std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(*(_QWORD **)&buf[16]);
      v121 = *(void **)buf;
      *(_QWORD *)buf = 0;
      if (v121)
        operator delete(v121);
      std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&v362);
      strcpy(buf, "rnwobolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      *(_DWORD *)(v115 + 4) = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>((AMCP::Core::Core *)v115, (const AMCP::Address *)buf, &AMCP::k_object_id_unknown);
      v122 = *(std::__shared_weak_count **)&v369[8];
      if (*(_QWORD *)&v369[8])
      {
        v123 = (unint64_t *)(*(_QWORD *)&v369[8] + 8);
        do
          v124 = __ldaxr(v123);
        while (__stlxr(v124 - 1, v123));
        if (!v124)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
      }
      std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((_QWORD *)v372);
      v125 = (std::logic_error_vtbl *)__p;
      *(_QWORD *)&__p = 0;
      if (v125)
        operator delete(v125);
      v126 = v361;
      if (v361)
      {
        v127 = (unint64_t *)&v361->__shared_owners_;
        do
          v128 = __ldaxr(v127);
        while (__stlxr(v128 - 1, v127));
        if (!v128)
        {
          ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
          std::__shared_weak_count::__release_weak(v126);
        }
      }
      (*(void (**)(_BYTE *__return_ptr, std::string::size_type *, std::string *))(*p_size + 16))(buf, p_size, v340);
      v119 = *(std::__shared_weak_count **)&buf[8];
      v120 = *(_QWORD **)buf;
      v377 = *(std::logic_error *)buf;
      if (*(_DWORD *)(v378 + 16) > 1u || !*(_QWORD *)(*(_QWORD *)buf + 248))
        goto LABEL_167;
      v129 = *(_QWORD **)(*(_QWORD *)buf + 24);
      *(_QWORD *)(*(_QWORD *)buf + 24) = 0;
      if (v129 == v120)
      {
        v129 = v120;
        v130 = 4;
      }
      else
      {
        if (!v129)
        {
LABEL_167:
          AMCP::Graph::Graph::disconnect_any_wires_connected_to_node(p_size, (unsigned __int8 *)v340);
          goto LABEL_168;
        }
        v130 = 5;
      }
      (*(void (**)(void))(*v129 + 8 * v130))();
      goto LABEL_167;
    }
    AMCP::Graph::Node::create_core_object(v378, &v352);
    v119 = 0;
    v120 = 0;
LABEL_168:
    v131 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v340);
    v132 = v131;
    v133 = v348[8].__r_.__value_.__r.__words[0];
    if (!v133)
      goto LABEL_184;
    v134 = (uint8x8_t)vcnt_s8((int8x8_t)v133);
    v134.i16[0] = vaddlv_u8(v134);
    v135 = v134.u32[0];
    if (v134.u32[0] > 1uLL)
    {
      v84 = v131;
      if (v131 >= v133)
        v84 = v131 % v133;
    }
    else
    {
      v84 = (v133 - 1) & v131;
    }
    v136 = *(unsigned __int8 ***)(*v346 + 8 * v84);
    if (!v136 || (v137 = *v136) == 0)
    {
LABEL_184:
      v139 = operator new(0x38uLL);
      v364[0] = v139;
      v364[1] = v337;
      v365 = 0;
      *v139 = 0;
      v139[1] = v132;
      v140 = (std::string *)(v139 + 2);
      if (*(char *)(v347 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v140, *(const std::string::value_type **)(v347 + 8), *(_QWORD *)(v347 + 16));
      }
      else
      {
        v141 = *(_OWORD *)&v340->__r_.__value_.__l.__data_;
        v139[4] = *((_QWORD *)&v340->__r_.__value_.__l + 2);
        *(_OWORD *)&v140->__r_.__value_.__l.__data_ = v141;
      }
      v142 = *((_QWORD *)&v378 + 1);
      v139[5] = v378;
      v139[6] = v142;
      if (v142)
      {
        v143 = (unint64_t *)(v142 + 8);
        do
          v144 = __ldxr(v143);
        while (__stxr(v144 + 1, v143));
      }
      v365 = 1;
      v145 = (float)(v348[8].__r_.__value_.__r.__words[2] + 1);
      v146 = *(float *)&v348[9].__r_.__value_.__l.__data_;
      if (!v133 || (float)(v146 * (float)v133) < v145)
      {
        v147 = (v133 & (v133 - 1)) != 0;
        if (v133 < 3)
          v147 = 1;
        v148 = v147 | (2 * v133);
        v149 = vcvtps_u32_f32(v145 / v146);
        if (v148 <= v149)
          v150 = v149;
        else
          v150 = v148;
        std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)v346, v150);
        v133 = v348[8].__r_.__value_.__r.__words[0];
        if ((v133 & (v133 - 1)) != 0)
        {
          if (v132 >= v133)
            v84 = v132 % v133;
          else
            v84 = v132;
        }
        else
        {
          v84 = (v133 - 1) & v132;
        }
      }
      v151 = *v346;
      v152 = *(_QWORD **)(*v346 + 8 * v84);
      if (v152)
      {
        *v139 = *v152;
      }
      else
      {
        *v139 = *v337;
        *v337 = (std::string::size_type)v139;
        *(_QWORD *)(v151 + 8 * v84) = v337;
        if (!*v139)
        {
LABEL_211:
          v364[0] = 0;
          ++v348[8].__r_.__value_.__r.__words[2];
          std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)v364);
          goto LABEL_212;
        }
        v153 = *(_QWORD *)(*v139 + 8);
        if ((v133 & (v133 - 1)) != 0)
        {
          if (v153 >= v133)
            v153 %= v133;
        }
        else
        {
          v153 &= v133 - 1;
        }
        v152 = (_QWORD *)(*v346 + 8 * v153);
      }
      *v152 = v139;
      goto LABEL_211;
    }
    while (1)
    {
      v138 = *((_QWORD *)v137 + 1);
      if (v138 == v132)
        break;
      if (v135 > 1)
      {
        if (v138 >= v133)
          v138 %= v133;
      }
      else
      {
        v138 &= v133 - 1;
      }
      if (v138 != v84)
        goto LABEL_184;
LABEL_183:
      v137 = *(unsigned __int8 **)v137;
      if (!v137)
        goto LABEL_184;
    }
    if (!std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v137 + 16, (unsigned __int8 *)v340))
      goto LABEL_183;
    std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)v137 + 5, v378, *((uint64_t *)&v378 + 1));
LABEL_212:
    v154 = *(_QWORD *)(v378 + 176);
    if (v154)
      v155 = *(unsigned int *)(v154 + 8);
    else
      v155 = 0;
    v156 = v348[9].__r_.__value_.__r.__words[2];
    if (v156)
    {
      v157 = (uint8x8_t)vcnt_s8((int8x8_t)v156);
      v157.i16[0] = vaddlv_u8(v157);
      if (v157.u32[0] > 1uLL)
      {
        v84 = v155;
        if (v156 <= v155)
          v84 = v155 % v156;
      }
      else
      {
        v84 = ((_DWORD)v156 - 1) & v155;
      }
      v158 = *(std::string ***)(v343->__r_.__value_.__r.__words[0] + 8 * v84);
      if (v158)
      {
        for (i = *v158; i; i = (std::string *)i->__r_.__value_.__r.__words[0])
        {
          size = i->__r_.__value_.__l.__size_;
          if (size == v155)
          {
            if (LODWORD(i->__r_.__value_.__r.__words[2]) == v155)
            {
              this = std::string::operator=(i + 1, v340);
              goto LABEL_256;
            }
          }
          else
          {
            if (v157.u32[0] > 1uLL)
            {
              if (size >= v156)
                size %= v156;
            }
            else
            {
              size &= v156 - 1;
            }
            if (size != v84)
              break;
          }
        }
      }
    }
    v161 = (std::string *)operator new(0x30uLL);
    v161->__r_.__value_.__r.__words[0] = 0;
    v161->__r_.__value_.__l.__size_ = v155;
    LODWORD(v161->__r_.__value_.__r.__words[2]) = v155;
    this = v161 + 1;
    if (*(char *)(v347 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)(v347 + 8), *(_QWORD *)(v347 + 16));
    }
    else
    {
      v162 = *(_OWORD *)&v340->__r_.__value_.__l.__data_;
      v161[1].__r_.__value_.__r.__words[2] = v340->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v162;
    }
    v163 = (float)(v348[10].__r_.__value_.__l.__size_ + 1);
    v164 = *(float *)&v348[10].__r_.__value_.__r.__words[2];
    if (!v156 || (float)(v164 * (float)v156) < v163)
    {
      v165 = (v156 & (v156 - 1)) != 0;
      if (v156 < 3)
        v165 = 1;
      v166 = v165 | (2 * v156);
      v167 = vcvtps_u32_f32(v163 / v164);
      if (v166 <= v167)
        v168 = v167;
      else
        v168 = v166;
      std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)v343, v168);
      v156 = v348[9].__r_.__value_.__r.__words[2];
      if ((v156 & (v156 - 1)) != 0)
      {
        if (v156 <= v155)
          v84 = v155 % v156;
        else
          v84 = v155;
      }
      else
      {
        v84 = ((_DWORD)v156 - 1) & v155;
      }
    }
    v169 = v343->__r_.__value_.__r.__words[0];
    v170 = *(std::string ***)(v343->__r_.__value_.__r.__words[0] + 8 * v84);
    if (v170)
    {
      v161->__r_.__value_.__r.__words[0] = (std::string::size_type)*v170;
      goto LABEL_254;
    }
    v161->__r_.__value_.__r.__words[0] = v332->__words[0];
    v332->__words[0] = (std::string::size_type)v161;
    *(_QWORD *)(v169 + 8 * v84) = v332;
    if (v161->__r_.__value_.__r.__words[0])
    {
      v171 = *(_QWORD *)(v161->__r_.__value_.__r.__words[0] + 8);
      if ((v156 & (v156 - 1)) != 0)
      {
        if (v171 >= v156)
          v171 %= v156;
      }
      else
      {
        v171 &= v156 - 1;
      }
      v170 = (std::string **)(v343->__r_.__value_.__r.__words[0] + 8 * v171);
LABEL_254:
      *v170 = v161;
    }
    ++v348[10].__r_.__value_.__l.__size_;
LABEL_256:
    if (v120)
    {
      (*(void (**)(unsigned __int128 *__return_ptr, std::string::size_type *, std::string *))(*p_size + 16))(&__p, p_size, v340);
      v172 = (std::logic_error_vtbl *)__p;
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v380, (uint64_t)v120);
      std::__function::__value_func<void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::swap[abi:ne180100](v380, v172);
      v173 = v381;
      if (v381 == v380)
      {
        v173 = v380;
        v174 = 4;
LABEL_261:
        (*(void (**)(void))(*v173 + 8 * v174))();
      }
      else if (v381)
      {
        v174 = 5;
        goto LABEL_261;
      }
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v382, (uint64_t)(v120 + 4));
      std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::swap[abi:ne180100](v382, &v172[1].~logic_error_0);
      v175 = v383;
      if (v383 == v382)
      {
        v175 = v382;
        v176 = 4;
LABEL_266:
        (*(void (**)(void))(*v175 + 8 * v176))();
      }
      else if (v383)
      {
        v176 = 5;
        goto LABEL_266;
      }
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v384, (uint64_t)(v120 + 8));
      std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::swap[abi:ne180100](v384, &v172[2].what);
      v177 = v385;
      if (v385 == v384)
      {
        v177 = v384;
        v178 = 4;
LABEL_271:
        (*(void (**)(void))(*v177 + 8 * v178))();
      }
      else if (v385)
      {
        v178 = 5;
        goto LABEL_271;
      }
      v179 = v120[15];
      if (v179)
      {
        if ((_QWORD *)v179 != v120 + 12)
        {
          v179 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v179 + 16))(v179);
          goto LABEL_275;
        }
        v387 = v386;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v179 + 24))(v179, v386);
      }
      else
      {
LABEL_275:
        v387 = (_QWORD *)v179;
      }
      std::__function::__value_func<std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::swap[abi:ne180100](v386, &v172[4].~logic_error);
      v180 = v387;
      if (v387 == v386)
      {
        v180 = v386;
        v181 = 4;
LABEL_281:
        (*(void (**)(void))(*v180 + 8 * v181))();
      }
      else if (v387)
      {
        v181 = 5;
        goto LABEL_281;
      }
      std::function<void ()>::operator=(&v172[5].~logic_error_0, (uint64_t)(v120 + 16));
      std::function<void ()>::operator=(&v172[6].what, (uint64_t)(v120 + 20));
      std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::operator=(&v172[8].~logic_error, (uint64_t)(v120 + 24));
      std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator=(&v172[9].~logic_error_0, (uint64_t)(v120 + 28));
      std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::operator=(&v172[10].what, (uint64_t)(v120 + 32));
      std::function<void ()>::operator=(&v172[12].~logic_error, (uint64_t)(v120 + 36));
      std::function<void ()>::operator=(&v172[13].~logic_error_0, (uint64_t)(v120 + 40));
      v182 = (const char *(__cdecl *)(const std::logic_error *__hidden))v120[47];
      if (v182)
      {
        if ((char *)v182 == (char *)(v120 + 44))
        {
          v389 = (const char *(__cdecl *)(const std::logic_error *__hidden))v388;
          (*(void (**)(const char *(__cdecl *)(const std::logic_error *__hidden), _QWORD *))(*(_QWORD *)v182 + 24))(v182, v388);
          v182 = v389;
        }
        else
        {
          v182 = (const char *(__cdecl *)(const std::logic_error *__hidden))(*(uint64_t (**)(const char *(__cdecl *)(const std::logic_error *__hidden)))(*(_QWORD *)v182 + 16))(v182);
          v389 = v182;
        }
      }
      else
      {
        v389 = 0;
      }
      p_what = (const char *(__cdecl *)(const std::logic_error *__hidden))&v172[14].what;
      if (&v172[14].what != v388)
      {
        what = v172[15].what;
        if ((char *)v182 != (char *)v388)
        {
          if (what != p_what)
          {
            v389 = v172[15].what;
            v172[15].what = v182;
            v182 = what;
            goto LABEL_295;
          }
          (*(void (**)(const char *(__cdecl **)(const std::logic_error *__hidden), _QWORD *))(*(_QWORD *)p_what + 24))(&v172[14].what, v388);
          (*(void (**)(const char *(__cdecl *)(const std::logic_error *__hidden)))(*(_QWORD *)v172[15].what
                                                                                            + 32))(v172[15].what);
          v172[15].what = v389;
          v182 = (const char *(__cdecl *)(const std::logic_error *__hidden))v388;
          v389 = (const char *(__cdecl *)(const std::logic_error *__hidden))v388;
LABEL_299:
          v185 = 4;
LABEL_300:
          (*(void (**)(void))(*(_QWORD *)v182 + 8 * v185))();
          goto LABEL_301;
        }
        if (what == p_what)
        {
          (*(void (**)(_QWORD *, _BYTE *))(v388[0] + 24))(v388, buf);
          (*(void (**)(const char *(__cdecl *)(const std::logic_error *__hidden)))(*(_QWORD *)v389 + 32))(v389);
          v389 = 0;
          (*(void (**)(const char *(__cdecl *)(const std::logic_error *__hidden), _QWORD *))(*(_QWORD *)v172[15].what + 24))(v172[15].what, v388);
          (*(void (**)(const char *(__cdecl *)(const std::logic_error *__hidden)))(*(_QWORD *)v172[15].what
                                                                                            + 32))(v172[15].what);
          v172[15].what = 0;
          v389 = (const char *(__cdecl *)(const std::logic_error *__hidden))v388;
          (*(void (**)(_BYTE *, const char *(__cdecl **)(const std::logic_error *__hidden)))(*(_QWORD *)buf + 24))(buf, &v172[14].what);
          (*(void (**)(_BYTE *))(*(_QWORD *)buf + 32))(buf);
          v172[15].what = p_what;
          v182 = v389;
        }
        else
        {
          (*(void (**)(_QWORD *, const char *(__cdecl **)(const std::logic_error *__hidden)))(v388[0] + 24))(v388, &v172[14].what);
          (*(void (**)(const char *(__cdecl *)(const std::logic_error *__hidden)))(*(_QWORD *)v389 + 32))(v389);
          v182 = v172[15].what;
          v389 = v182;
          v172[15].what = p_what;
        }
      }
LABEL_295:
      if ((char *)v182 == (char *)v388)
      {
        v182 = (const char *(__cdecl *)(const std::logic_error *__hidden))v388;
        goto LABEL_299;
      }
      if (v182)
      {
        v185 = 5;
        goto LABEL_300;
      }
LABEL_301:
      std::function<long long ()(void)>::operator=(&v172[16].~logic_error, (uint64_t)(v120 + 48));
      std::function<long long ()(void)>::operator=(&v172[17].~logic_error_0, (uint64_t)(v120 + 52));
      std::function<unsigned long long ()(unsigned long long)>::operator=(&v172[18].what, (uint64_t)(v120 + 56));
      std::function<unsigned long long ()(unsigned long long,unsigned long long &)>::operator=(&v172[20].~logic_error, (uint64_t)(v120 + 60));
      std::function<void ()>::operator=(&v172[21].~logic_error_0, (uint64_t)(v120 + 64));
      this = (std::string *)std::function<void ()(void)>::operator=(&v172[22].what, (uint64_t)(v120 + 68));
      v186 = (void (__cdecl *)(std::logic_error *__hidden))v120[72];
      v187 = v120[73];
      if (v187)
      {
        v188 = (unint64_t *)(v187 + 8);
        do
          v189 = __ldxr(v188);
        while (__stxr(v189 + 1, v188));
      }
      v172[24].~logic_error = v186;
      v190 = (std::__shared_weak_count *)v172[24].~logic_error_0;
      v172[24].~logic_error_0 = (void (__cdecl *)(std::logic_error *__hidden))v187;
      if (v190)
      {
        v191 = (unint64_t *)&v190->__shared_owners_;
        do
          v192 = __ldaxr(v191);
        while (__stlxr(v192 - 1, v191));
        if (!v192)
        {
          ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
          std::__shared_weak_count::__release_weak(v190);
        }
      }
      v193 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1))
      {
        v194 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
        do
          v195 = __ldaxr(v194);
        while (__stlxr(v195 - 1, v194));
        if (!v195)
        {
          ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
          std::__shared_weak_count::__release_weak(v193);
        }
      }
      v119 = (std::__shared_weak_count *)v377.__imp_.__imp_;
    }
    if (v119)
    {
      v196 = (unint64_t *)&v119->__shared_owners_;
      do
        v197 = __ldaxr(v196);
      while (__stlxr(v197 - 1, v196));
      if (!v197)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }
    v198 = (std::__shared_weak_count *)*((_QWORD *)&v378 + 1);
    v2 = v347;
    if (*((_QWORD *)&v378 + 1))
    {
      v199 = (unint64_t *)(*((_QWORD *)&v378 + 1) + 8);
      do
        v200 = __ldaxr(v199);
      while (__stlxr(v200 - 1, v199));
      if (!v200)
      {
        ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
        std::__shared_weak_count::__release_weak(v198);
      }
    }
    v30 = 1;
LABEL_326:
    v201 = v353;
    if (v353)
    {
      v202 = (unint64_t *)&v353->__shared_owners_;
      do
        v203 = __ldaxr(v202);
      while (__stlxr(v203 - 1, v202));
      if (!v203)
      {
        ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
        std::__shared_weak_count::__release_weak(v201);
      }
    }
    if ((v30 & 1) == 0)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v316 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v316, OS_LOG_TYPE_ERROR))
      {
        v317 = pthread_self();
        v318 = pthread_mach_thread_np(v317);
        v319 = (_QWORD *)(v2 + 8);
        if (*(char *)(v2 + 31) < 0)
          v319 = (_QWORD *)*v319;
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v318;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "Graph_Manager.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 216;
        *(_WORD *)&buf[24] = 2080;
        *(_QWORD *)&buf[26] = "not (added)";
        *(_WORD *)&buf[34] = 2080;
        *(_QWORD *)&buf[36] = v319;
        _os_log_error_impl(&dword_1B57BA000, v316, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Error adding node %s to graph", buf, 0x2Cu);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v352);
      v320 = __cxa_allocate_exception(0x40uLL);
      v321 = (_QWORD *)(v2 + 8);
      if (*(char *)(v2 + 31) < 0)
        v321 = (_QWORD *)*v321;
      caulk::make_string((caulk *)"Error adding node %s to graph", (uint64_t)&v366, v321);
      std::logic_error::logic_error(&v377, &v366);
      v377.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error((std::logic_error *)&__p, &v377);
      v373 = 0;
      *((_QWORD *)&v372 + 1) = 0;
      __s.__r_.__value_.__r.__words[0] = 0;
      LODWORD(__s.__r_.__value_.__r.__words[1]) = -1;
      *(_QWORD *)&__p = off_1E69A1208;
      *(_QWORD *)&v372 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
      *(_QWORD *)&buf[32] = "void AMCP::IO_Core::Graph_Manager::insert_graph_components(const Graph_Description &)";
      *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Graph_Manager.cpp";
      *(_DWORD *)&buf[48] = 216;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v378);
      *(_OWORD *)&v369[8] = v378;
      *(_QWORD *)v369 = off_1E69A20A0;
      *(_QWORD *)&v369[24] = v379;
      v378 = 0uLL;
      v379 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v369);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v320, (uint64_t)buf);
    }
    v2 += 120;
  }
  while (v2 != v342);
LABEL_342:
  v209 = *((_QWORD *)a2 + 3);
  v341 = *((_QWORD *)a2 + 4);
  if (v209 != v341)
  {
    v336 = (uint64_t)&v348[2].__r_.__value_.__r.__words[2];
    v210 = &v348[4].__r_.__value_.__l.__size_;
    v335 = (std::string::__raw *)&v348[6];
    v333 = &v348[6].__r_.__value_.__r.__words[2];
    v345 = (std::string::__raw *)&v348[5];
    v211 = 1065353216;
    v212 = 1;
    do
    {
      if (*(_DWORD *)(v209 + 32))
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v322 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v322, OS_LOG_TYPE_ERROR))
        {
          v323 = pthread_self();
          v324 = pthread_mach_thread_np(v323);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v324;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "Graph.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 310;
          *(_WORD *)&buf[24] = 2080;
          *(_QWORD *)&buf[26] = "not (wire.mSource.m_wire_direction == Direction::output)";
          _os_log_error_impl(&dword_1B57BA000, v322, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Graph:: Wire source is not an OutWire", buf, 0x22u);
        }
        v325 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Graph:: Wire source is not an OutWire", (uint64_t)&v366);
        std::logic_error::logic_error(&v377, &v366);
        v377.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error((std::logic_error *)&__p, &v377);
        v373 = 0;
        *((_QWORD *)&v372 + 1) = 0;
        __s.__r_.__value_.__r.__words[0] = 0;
        LODWORD(__s.__r_.__value_.__r.__words[1]) = -1;
        *(_QWORD *)&__p = off_1E69A1208;
        *(_QWORD *)&v372 = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
        *(_QWORD *)&buf[32] = "void AMCP::Graph::Graph::add_wire(const Wire_Description &)";
        *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
        *(_DWORD *)&buf[48] = 310;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v378);
        *(_OWORD *)&v369[8] = v378;
        *(_QWORD *)v369 = off_1E69A20A0;
        *(_QWORD *)&v369[24] = v379;
        v378 = 0uLL;
        v379 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v369);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v325, (uint64_t)buf);
      }
      if (*(_DWORD *)(v209 + 72) != 1)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v326 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v326, OS_LOG_TYPE_ERROR))
        {
          v327 = pthread_self();
          v328 = pthread_mach_thread_np(v327);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v328;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "Graph.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 311;
          *(_WORD *)&buf[24] = 2080;
          *(_QWORD *)&buf[26] = "not (wire.mDestination.m_wire_direction == Direction::input)";
          _os_log_error_impl(&dword_1B57BA000, v326, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Graph:: Wire destination is not an InWire", buf, 0x22u);
        }
        v329 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Graph:: Wire destination is not an InWire", (uint64_t)&v366);
        std::logic_error::logic_error(&v377, &v366);
        v377.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error((std::logic_error *)&__p, &v377);
        v373 = 0;
        *((_QWORD *)&v372 + 1) = 0;
        __s.__r_.__value_.__r.__words[0] = 0;
        LODWORD(__s.__r_.__value_.__r.__words[1]) = -1;
        *(_QWORD *)&__p = off_1E69A1208;
        *(_QWORD *)&v372 = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
        *(_QWORD *)&buf[32] = "void AMCP::Graph::Graph::add_wire(const Wire_Description &)";
        *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
        *(_DWORD *)&buf[48] = 311;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v378);
        *(_OWORD *)&v369[8] = v378;
        *(_QWORD *)v369 = off_1E69A20A0;
        *(_QWORD *)&v369[24] = v379;
        v378 = 0uLL;
        v379 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v369);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v329, (uint64_t)buf);
      }
      v213 = *(unsigned __int8 *)(v209 + 23);
      v214 = *(_QWORD *)(v209 + 8);
      if ((v213 & 0x80u) == 0)
        v215 = *(unsigned __int8 *)(v209 + 23);
      else
        v215 = *(_QWORD *)(v209 + 8);
      v216 = *(unsigned __int8 *)(v209 + 63);
      v217 = (char)v216;
      if ((v216 & 0x80u) != 0)
        v216 = *(_QWORD *)(v209 + 48);
      if (v215 == v216)
      {
        if (v217 >= 0)
          v218 = (unsigned __int8 *)(v209 + 40);
        else
          v218 = *(unsigned __int8 **)(v209 + 40);
        if ((v213 & 0x80) != 0)
        {
          this = (std::string *)memcmp(*(const void **)v209, v218, *(_QWORD *)(v209 + 8));
          if (!(_DWORD)this)
          {
LABEL_598:
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            v306 = *(std::__shared_weak_count **)&buf[8];
            v307 = **(NSObject ***)buf;
            if (*(_QWORD *)&buf[8])
            {
              v308 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
              do
                v309 = __ldaxr(v308);
              while (__stlxr(v309 - 1, v308));
              if (!v309)
              {
                ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
                std::__shared_weak_count::__release_weak(v306);
              }
            }
            if (os_log_type_enabled(v307, OS_LOG_TYPE_ERROR))
            {
              v310 = pthread_self();
              v311 = pthread_mach_thread_np(v310);
              if (*(char *)(v209 + 23) >= 0)
                v312 = (const void *)v209;
              else
                v312 = *(const void **)v209;
              *(_DWORD *)buf = 67110146;
              *(_DWORD *)&buf[4] = v311;
              *(_WORD *)&buf[8] = 2080;
              *(_QWORD *)&buf[10] = "Graph.cpp";
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 312;
              *(_WORD *)&buf[24] = 2080;
              *(_QWORD *)&buf[26] = "not (wire.mSource.m_node != wire.mDestination.m_node)";
              *(_WORD *)&buf[34] = 2080;
              *(_QWORD *)&buf[36] = v312;
              _os_log_error_impl(&dword_1B57BA000, v307, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Node %s: nodes cannot connect to themselves", buf, 0x2Cu);
            }
            v313 = __cxa_allocate_exception(0x40uLL);
            if (*(char *)(v209 + 23) >= 0)
              v314 = (const void *)v209;
            else
              v314 = *(const void **)v209;
            caulk::make_string((caulk *)"Node %s: nodes cannot connect to themselves", (uint64_t)&v366, v314);
            std::logic_error::logic_error(&v377, &v366);
            v377.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
            std::logic_error::logic_error((std::logic_error *)&__p, &v377);
            v373 = 0;
            *((_QWORD *)&v372 + 1) = 0;
            __s.__r_.__value_.__r.__words[0] = 0;
            LODWORD(__s.__r_.__value_.__r.__words[1]) = -1;
            *(_QWORD *)&__p = off_1E69A1208;
            *(_QWORD *)&v372 = &unk_1E69A1230;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
            *(_QWORD *)&buf[32] = "void AMCP::Graph::Graph::add_wire(const Wire_Description &)";
            *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
            *(_DWORD *)&buf[48] = 312;
            std::vector<void *>::vector(&v378);
            v315 = backtrace((void **)v378, (*((_QWORD *)&v378 + 1) - (_QWORD)v378) >> 3);
            std::vector<void *>::resize((char **)&v378, v315);
            *(_OWORD *)&v369[8] = v378;
            *(_QWORD *)v369 = off_1E69A20A0;
            *(_QWORD *)&v369[24] = v379;
            v378 = 0uLL;
            v379 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v369);
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v313, (uint64_t)buf);
          }
          goto LABEL_364;
        }
        if (!*(_BYTE *)(v209 + 23))
          goto LABEL_598;
        v219 = 0;
        while (*(unsigned __int8 *)(v209 + v219) == v218[v219])
        {
          if (v213 == ++v219)
            goto LABEL_598;
        }
      }
      if ((v213 & 0x80) == 0)
      {
        *(_OWORD *)v369 = *(_OWORD *)v209;
        *(_QWORD *)&v369[16] = *(_QWORD *)(v209 + 16);
        goto LABEL_365;
      }
LABEL_364:
      std::string::__init_copy_ctor_external((std::string *)v369, *(const std::string::value_type **)v209, v214);
      LOBYTE(v217) = *(_BYTE *)(v209 + 63);
LABEL_365:
      *(_QWORD *)&v369[24] = *(_QWORD *)(v209 + 24);
      v370 = *(_DWORD *)(v209 + 32);
      if ((v217 & 0x80) != 0)
        std::string::__init_copy_ctor_external(&v366, *(const std::string::value_type **)(v209 + 40), *(_QWORD *)(v209 + 48));
      else
        v366 = *(std::string *)(v209 + 40);
      v367 = *(_QWORD *)(v209 + 64);
      v368 = *(_DWORD *)(v209 + 72);
      __p = *(_OWORD *)v369;
      v372 = *(_OWORD *)&v369[16];
      memset(v369, 0, 24);
      LODWORD(v373) = v370;
      __s = v366;
      memset(&v366, 0, sizeof(v366));
      v220 = *(_QWORD *)(v209 + 64);
      v376 = *(_DWORD *)(v209 + 72);
      v375 = v220;
      if (std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>>>::find<AMCP::Wire_Identifier>(v210, (unsigned __int8 **)&__p))
      {
        goto LABEL_369;
      }
      AMCP::Graph::Wire_Index::add_to_index(v336, v209, (__int128 *)&__p);
      AMCP::Graph::Wire_Index::add_to_index(v336, v209 + 40, (__int128 *)&__p);
      if (!*(_BYTE *)(v209 + 160))
        goto LABEL_369;
      v221 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>(v335, (unsigned __int8 **)&__p);
      if (v221)
      {
        v223 = v221[12];
        v222 = (std::__shared_weak_count *)v221[13];
        if (!v222)
          goto LABEL_378;
        v224 = (unint64_t *)&v222->__shared_owners_;
        do
          v225 = __ldxr(v224);
        while (__stxr(v225 + 1, v224));
        do
          v226 = __ldaxr(v224);
        while (__stlxr(v226 - 1, v224));
        if (!v226)
        {
          ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
          std::__shared_weak_count::__release_weak(v222);
          if (v223)
            goto LABEL_369;
        }
        else
        {
LABEL_378:
          if (v223)
            goto LABEL_369;
        }
      }
      v227 = (char *)operator new(0x200uLL, (std::align_val_t)0x40uLL);
      v228 = 0;
      *((_QWORD *)v227 + 1) = 0;
      *((_QWORD *)v227 + 2) = 0;
      *(_QWORD *)v227 = &off_1E69749A0;
      *((_OWORD *)v227 + 4) = 0u;
      *((_OWORD *)v227 + 5) = 0u;
      *((_OWORD *)v227 + 6) = 0u;
      *((_OWORD *)v227 + 7) = 0u;
      *((_OWORD *)v227 + 8) = 0u;
      *((_OWORD *)v227 + 9) = 0u;
      *((_OWORD *)v227 + 10) = 0u;
      *((_OWORD *)v227 + 11) = 0u;
      *((_OWORD *)v227 + 12) = 0u;
      *((_OWORD *)v227 + 13) = 0u;
      *((_OWORD *)v227 + 14) = 0u;
      *((_OWORD *)v227 + 15) = 0u;
      *((_OWORD *)v227 + 16) = 0u;
      *((_OWORD *)v227 + 17) = 0u;
      *((_OWORD *)v227 + 18) = 0u;
      *((_OWORD *)v227 + 19) = 0u;
      *((_OWORD *)v227 + 20) = 0u;
      *((_OWORD *)v227 + 21) = 0u;
      *((_OWORD *)v227 + 22) = 0u;
      *((_OWORD *)v227 + 23) = 0u;
      *((_OWORD *)v227 + 24) = 0u;
      *((_OWORD *)v227 + 25) = 0u;
      *((_OWORD *)v227 + 26) = 0u;
      *((_OWORD *)v227 + 27) = 0u;
      *((_OWORD *)v227 + 28) = 0u;
      *((_OWORD *)v227 + 29) = 0u;
      *((_OWORD *)v227 + 30) = 0u;
      *((_OWORD *)v227 + 31) = 0u;
      do
      {
        v229 = &v227[v228];
        *((_DWORD *)v229 + 32) = 0;
        *((_DWORD *)v229 + 34) = 1065353216;
        *((_OWORD *)v229 + 9) = 0uLL;
        *((_OWORD *)v229 + 10) = 0uLL;
        *((_OWORD *)v229 + 11) = 0uLL;
        *((_QWORD *)v229 + 24) = 0;
        *((_DWORD *)v229 + 50) = 1;
        *(_OWORD *)(v229 + 204) = 0uLL;
        *(_OWORD *)(v229 + 220) = 0uLL;
        *(_OWORD *)(v229 + 236) = 0uLL;
        *(_OWORD *)(v229 + 248) = 0uLL;
        *((_DWORD *)v229 + 66) = 1;
        v230 = &v227[v228 + 268];
        *(_QWORD *)&v227[v228 + 276] = 0;
        *(_QWORD *)v230 = 0;
        v228 += 192;
        *(_QWORD *)(v230 + 13) = 0;
      }
      while (v228 != 384);
      v377.__vftable = (std::logic_error_vtbl *)(v227 + 64);
      v377.__imp_.__imp_ = v227;
      if (SBYTE7(v372) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        *(_OWORD *)buf = __p;
        *(_QWORD *)&buf[16] = v372;
      }
      *(_QWORD *)&buf[24] = *((_QWORD *)&v372 + 1);
      *(_DWORD *)&buf[32] = v373;
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external((std::string *)&buf[40], __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      else
        *(std::string *)&buf[40] = __s;
      v391 = v375;
      v392 = v376;
      v334 = v377;
      *(std::logic_error *)&v393.__r_.__value_.__l.__data_ = v377;
      v377.__vftable = 0;
      v377.__imp_.__imp_ = 0;
      v267 = std::hash<AMCP::Wire_Identifier>::operator()((uint64_t)buf);
      v212 = v267;
      v268 = v348[6].__r_.__value_.__l.__size_;
      if (v268)
      {
        v269 = (uint8x8_t)vcnt_s8((int8x8_t)v268);
        v269.i16[0] = vaddlv_u8(v269);
        v270 = v269.u32[0];
        if (v269.u32[0] > 1uLL)
        {
          v211 = v267;
          if (v267 >= v268)
            v211 = v267 % v268;
        }
        else
        {
          v211 = (v268 - 1) & v267;
        }
        v271 = *(_QWORD **)(v335->__words[0] + 8 * v211);
        if (v271)
        {
          v272 = (_QWORD *)*v271;
          if (*v271)
          {
            v273 = (std::__shared_weak_count *)v334.__imp_.__imp_;
            do
            {
              v274 = v272[1];
              if (v274 == v212)
              {
                if (std::equal_to<AMCP::Wire_Identifier>::operator()[abi:ne180100]((uint64_t)(v272 + 2), (unsigned __int8 **)buf))
                {
                  if (!v334.__imp_.__imp_)
                    goto LABEL_577;
                  goto LABEL_573;
                }
              }
              else
              {
                if (v270 > 1)
                {
                  if (v274 >= v268)
                    v274 %= v268;
                }
                else
                {
                  v274 &= v268 - 1;
                }
                if (v274 != v211)
                  break;
              }
              v272 = (_QWORD *)*v272;
            }
            while (v272);
          }
        }
      }
      v275 = (char *)operator new(0x70uLL);
      *(_QWORD *)&v378 = v275;
      *((_QWORD *)&v378 + 1) = (char *)v348 + 160;
      *(_QWORD *)v275 = 0;
      *((_QWORD *)v275 + 1) = v212;
      *((_OWORD *)v275 + 1) = *(_OWORD *)buf;
      v276 = *(_QWORD *)&buf[16];
      memset(buf, 0, 24);
      v277 = *(_QWORD *)&buf[24];
      *((_QWORD *)v275 + 4) = v276;
      *((_QWORD *)v275 + 5) = v277;
      *((_DWORD *)v275 + 12) = *(_DWORD *)&buf[32];
      *(_OWORD *)(v275 + 56) = *(_OWORD *)&buf[40];
      v278 = *(_QWORD *)&buf[56];
      memset(&buf[40], 0, 24);
      v279 = v375;
      *((_QWORD *)v275 + 9) = v278;
      *((_QWORD *)v275 + 10) = v279;
      *((_DWORD *)v275 + 22) = v376;
      *((std::logic_error *)v275 + 6) = v334;
      *(_OWORD *)&v393.__r_.__value_.__l.__data_ = 0uLL;
      LOBYTE(v379) = 1;
      v280 = (float)(v348[7].__r_.__value_.__r.__words[0] + 1);
      v281 = *(float *)&v348[7].__r_.__value_.__r.__words[1];
      if (!v268 || (float)(v281 * (float)v268) < v280)
      {
        v282 = v268 < 3 || (v268 & (v268 - 1)) != 0;
        v283 = v282 | (2 * v268);
        v284 = vcvtps_u32_f32(v280 / v281);
        if (v283 <= v284)
          prime = (int8x8_t)v284;
        else
          prime = (int8x8_t)v283;
        if (*(_QWORD *)&prime == 1)
        {
          prime = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
        {
          prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
          v268 = v348[6].__r_.__value_.__l.__size_;
        }
        if (*(_QWORD *)&prime <= v268)
        {
          if (*(_QWORD *)&prime < v268)
          {
            v292 = vcvtps_u32_f32((float)v348[7].__r_.__value_.__r.__words[0] / *(float *)&v348[7].__r_.__value_.__r.__words[1]);
            if (v268 < 3
              || (v293 = (uint8x8_t)vcnt_s8((int8x8_t)v268), v293.i16[0] = vaddlv_u8(v293), v293.u32[0] > 1uLL))
            {
              v292 = std::__next_prime(v292);
            }
            else
            {
              v294 = 1 << -(char)__clz(v292 - 1);
              if (v292 >= 2)
                v292 = v294;
            }
            if (*(_QWORD *)&prime <= v292)
              prime = (int8x8_t)v292;
            if (*(_QWORD *)&prime >= v268)
            {
              v268 = v348[6].__r_.__value_.__l.__size_;
            }
            else
            {
              if (prime)
                goto LABEL_529;
              v305 = (void *)v335->__words[0];
              v335->__words[0] = 0;
              if (v305)
                operator delete(v305);
              v268 = 0;
              v348[6].__r_.__value_.__l.__size_ = 0;
            }
          }
        }
        else
        {
LABEL_529:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v286 = operator new(8 * *(_QWORD *)&prime);
          v287 = (void *)v335->__words[0];
          v335->__words[0] = (std::string::size_type)v286;
          if (v287)
            operator delete(v287);
          v288 = 0;
          v348[6].__r_.__value_.__r.__words[1] = (std::string::size_type)prime;
          do
            *(_QWORD *)(v335->__words[0] + 8 * v288++) = 0;
          while (*(_QWORD *)&prime != v288);
          v289 = (_QWORD *)*v333;
          if (*v333)
          {
            v290 = v289[1];
            v291 = (uint8x8_t)vcnt_s8(prime);
            v291.i16[0] = vaddlv_u8(v291);
            if (v291.u32[0] > 1uLL)
            {
              if (v290 >= *(_QWORD *)&prime)
                v290 %= *(_QWORD *)&prime;
            }
            else
            {
              v290 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(v335->__words[0] + 8 * v290) = v333;
            v295 = (_QWORD *)*v289;
            if (*v289)
            {
              do
              {
                v296 = v295[1];
                if (v291.u32[0] > 1uLL)
                {
                  if (v296 >= *(_QWORD *)&prime)
                    v296 %= *(_QWORD *)&prime;
                }
                else
                {
                  v296 &= *(_QWORD *)&prime - 1;
                }
                if (v296 != v290)
                {
                  if (!*(_QWORD *)(v335->__words[0] + 8 * v296))
                  {
                    *(_QWORD *)(v335->__words[0] + 8 * v296) = v289;
                    goto LABEL_554;
                  }
                  *v289 = *v295;
                  *v295 = **(_QWORD **)(v335->__words[0] + 8 * v296);
                  **(_QWORD **)(v335->__words[0] + 8 * v296) = v295;
                  v295 = v289;
                }
                v296 = v290;
LABEL_554:
                v289 = v295;
                v295 = (_QWORD *)*v295;
                v290 = v296;
              }
              while (v295);
            }
          }
          v268 = (unint64_t)prime;
        }
        if ((v268 & (v268 - 1)) != 0)
        {
          if (v212 >= v268)
            v211 = v212 % v268;
          else
            v211 = v212;
        }
        else
        {
          v211 = (v268 - 1) & v212;
        }
      }
      v297 = *(std::string::size_type **)(v335->__words[0] + 8 * v211);
      v298 = v378;
      if (v297)
      {
        *(_QWORD *)v378 = *v297;
LABEL_571:
        *v297 = v298;
        goto LABEL_572;
      }
      *(_QWORD *)v378 = *v333;
      *v333 = v298;
      *(_QWORD *)(v335->__words[0] + 8 * v211) = v333;
      if (*(_QWORD *)v298)
      {
        v299 = *(_QWORD *)(*(_QWORD *)v298 + 8);
        if ((v268 & (v268 - 1)) != 0)
        {
          if (v299 >= v268)
            v299 %= v268;
        }
        else
        {
          v299 &= v268 - 1;
        }
        v297 = (std::string::size_type *)(v335->__words[0] + 8 * v299);
        goto LABEL_571;
      }
LABEL_572:
      *(_QWORD *)&v378 = 0;
      ++v348[7].__r_.__value_.__r.__words[0];
      std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v378);
      v273 = (std::__shared_weak_count *)v393.__r_.__value_.__l.__size_;
      if (!v393.__r_.__value_.__l.__size_)
        goto LABEL_577;
LABEL_573:
      v300 = (unint64_t *)&v273->__shared_owners_;
      do
        v301 = __ldaxr(v300);
      while (__stlxr(v301 - 1, v300));
      if (!v301)
      {
        ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
        std::__shared_weak_count::__release_weak(v273);
      }
LABEL_577:
      if ((buf[63] & 0x80000000) != 0)
        operator delete(*(void **)&buf[40]);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v302 = (std::__shared_weak_count *)v377.__imp_.__imp_;
      if (v377.__imp_.__imp_)
      {
        v303 = (unint64_t *)(v377.__imp_.__imp_ + 8);
        do
          v304 = __ldaxr(v303);
        while (__stlxr(v304 - 1, v303));
        if (!v304)
        {
          ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
          std::__shared_weak_count::__release_weak(v302);
        }
      }
LABEL_369:
      if (SBYTE7(v372) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        *(_OWORD *)buf = __p;
        *(_QWORD *)&buf[16] = v372;
      }
      *(_QWORD *)&buf[24] = *((_QWORD *)&v372 + 1);
      *(_DWORD *)&buf[32] = v373;
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external((std::string *)&buf[40], __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      else
        *(std::string *)&buf[40] = __s;
      v391 = v375;
      v392 = v376;
      AMCP::Wire_Description::Wire_Description(&v393, (const AMCP::Wire_Description *)v209);
      v231 = std::hash<AMCP::Wire_Identifier>::operator()((uint64_t)buf);
      v232 = v231;
      v233 = v348[4].__r_.__value_.__r.__words[2];
      if (v233)
      {
        v234 = (uint8x8_t)vcnt_s8((int8x8_t)v233);
        v234.i16[0] = vaddlv_u8(v234);
        v235 = v234.u32[0];
        if (v234.u32[0] > 1uLL)
        {
          v212 = v231;
          if (v231 >= v233)
            v212 = v231 % v233;
        }
        else
        {
          v212 = (v233 - 1) & v231;
        }
        v236 = *(_QWORD **)(*v210 + 8 * v212);
        if (v236)
        {
          v237 = (_QWORD *)*v236;
          if (*v236)
          {
            do
            {
              v238 = v237[1];
              if (v238 == v232)
              {
                if (std::equal_to<AMCP::Wire_Identifier>::operator()[abi:ne180100]((uint64_t)(v237 + 2), (unsigned __int8 **)buf))
                {
                  goto LABEL_466;
                }
              }
              else
              {
                if (v235 > 1)
                {
                  if (v238 >= v233)
                    v238 %= v233;
                }
                else
                {
                  v238 &= v233 - 1;
                }
                if (v238 != v212)
                  break;
              }
              v237 = (_QWORD *)*v237;
            }
            while (v237);
          }
        }
      }
      v239 = (char *)operator new(0x220uLL);
      v240 = v239;
      *(_QWORD *)&v378 = v239;
      *((_QWORD *)&v378 + 1) = v348 + 5;
      LOBYTE(v379) = 0;
      *(_QWORD *)v239 = 0;
      *((_QWORD *)v239 + 1) = v232;
      *((_OWORD *)v239 + 1) = *(_OWORD *)buf;
      v241 = *(_QWORD *)&buf[16];
      memset(buf, 0, 24);
      v242 = *(_QWORD *)&buf[24];
      *((_QWORD *)v239 + 4) = v241;
      *((_QWORD *)v239 + 5) = v242;
      *((_DWORD *)v239 + 12) = *(_DWORD *)&buf[32];
      v243 = *(_QWORD *)&buf[56];
      *(_OWORD *)(v239 + 56) = *(_OWORD *)&buf[40];
      memset(&buf[40], 0, 24);
      *((_DWORD *)v239 + 22) = v392;
      v244 = v391;
      *((_QWORD *)v239 + 9) = v243;
      *((_QWORD *)v239 + 10) = v244;
      if (SHIBYTE(v393.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external((std::string *)v239 + 4, v393.__r_.__value_.__l.__data_, v393.__r_.__value_.__l.__size_);
      else
        *((std::string *)v239 + 4) = v393;
      *((_QWORD *)v240 + 15) = v394;
      *((_DWORD *)v240 + 32) = v395;
      if (SHIBYTE(v397) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v240 + 136), (const std::string::value_type *)v396, *((std::string::size_type *)&v396 + 1));
      }
      else
      {
        *(_OWORD *)(v240 + 136) = v396;
        *((_QWORD *)v240 + 19) = v397;
      }
      v245 = v398;
      *((_QWORD *)v240 + 22) = 0;
      *((_QWORD *)v240 + 20) = v245;
      *((_DWORD *)v240 + 42) = v399;
      *((_QWORD *)v240 + 23) = 0;
      *((_QWORD *)v240 + 24) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v240 + 22, v400, (uint64_t)v401, (v401 - (_BYTE *)v400) >> 2);
      *((_QWORD *)v240 + 25) = 0;
      *((_QWORD *)v240 + 26) = 0;
      *((_QWORD *)v240 + 27) = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)v240 + 25, v402, (uint64_t)v403, (v403 - (_BYTE *)v402) >> 2);
      *((_OWORD *)v240 + 14) = v405;
      *((_DWORD *)v240 + 60) = 0;
      *(_QWORD *)(v240 + 244) = v406;
      *((_DWORD *)v240 + 63) = v404;
      v240[256] = v407;
      v240[504] = 0;
      *((_QWORD *)v240 + 34) = 0;
      *((_QWORD *)v240 + 35) = 0;
      *((_QWORD *)v240 + 33) = 0;
      v240[288] = 0;
      *((_OWORD *)v240 + 32) = 0u;
      *((_OWORD *)v240 + 33) = 0u;
      LOBYTE(v379) = 1;
      v246 = (float)(v348[5].__r_.__value_.__l.__size_ + 1);
      v247 = *(float *)&v348[5].__r_.__value_.__r.__words[2];
      if (!v233 || (float)(v247 * (float)v233) < v246)
      {
        v248 = v233 < 3 || (v233 & (v233 - 1)) != 0;
        v249 = v248 | (2 * v233);
        v250 = vcvtps_u32_f32(v246 / v247);
        if (v249 <= v250)
          v251 = (int8x8_t)v250;
        else
          v251 = (int8x8_t)v249;
        if (*(_QWORD *)&v251 == 1)
        {
          v251 = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&v251 & (*(_QWORD *)&v251 - 1)) != 0)
        {
          v251 = (int8x8_t)std::__next_prime(*(_QWORD *)&v251);
        }
        v233 = v348[4].__r_.__value_.__r.__words[2];
        if (*(_QWORD *)&v251 <= v233)
        {
          if (*(_QWORD *)&v251 < v233)
          {
            v258 = vcvtps_u32_f32((float)v348[5].__r_.__value_.__l.__size_ / *(float *)&v348[5].__r_.__value_.__r.__words[2]);
            if (v233 < 3
              || (v259 = (uint8x8_t)vcnt_s8((int8x8_t)v233), v259.i16[0] = vaddlv_u8(v259), v259.u32[0] > 1uLL))
            {
              v258 = std::__next_prime(v258);
            }
            else
            {
              v260 = 1 << -(char)__clz(v258 - 1);
              if (v258 >= 2)
                v258 = v260;
            }
            if (*(_QWORD *)&v251 <= v258)
              v251 = (int8x8_t)v258;
            if (*(_QWORD *)&v251 >= v233)
            {
              v233 = v348[4].__r_.__value_.__r.__words[2];
            }
            else
            {
              if (v251)
                goto LABEL_422;
              v266 = (void *)*v210;
              *v210 = 0;
              if (v266)
                operator delete(v266);
              v233 = 0;
              v348[4].__r_.__value_.__r.__words[2] = 0;
            }
          }
        }
        else
        {
LABEL_422:
          if (*(_QWORD *)&v251 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v252 = operator new(8 * *(_QWORD *)&v251);
          v253 = (void *)*v210;
          *v210 = (std::string::size_type)v252;
          if (v253)
            operator delete(v253);
          v254 = 0;
          v348[4].__r_.__value_.__r.__words[2] = (std::string::size_type)v251;
          do
            *(_QWORD *)(*v210 + 8 * v254++) = 0;
          while (*(_QWORD *)&v251 != v254);
          v255 = (_QWORD *)v345->__words[0];
          if (v345->__words[0])
          {
            v256 = v255[1];
            v257 = (uint8x8_t)vcnt_s8(v251);
            v257.i16[0] = vaddlv_u8(v257);
            if (v257.u32[0] > 1uLL)
            {
              if (v256 >= *(_QWORD *)&v251)
                v256 %= *(_QWORD *)&v251;
            }
            else
            {
              v256 &= *(_QWORD *)&v251 - 1;
            }
            *(_QWORD *)(*v210 + 8 * v256) = v345;
            v261 = (_QWORD *)*v255;
            if (*v255)
            {
              do
              {
                v262 = v261[1];
                if (v257.u32[0] > 1uLL)
                {
                  if (v262 >= *(_QWORD *)&v251)
                    v262 %= *(_QWORD *)&v251;
                }
                else
                {
                  v262 &= *(_QWORD *)&v251 - 1;
                }
                if (v262 != v256)
                {
                  if (!*(_QWORD *)(*v210 + 8 * v262))
                  {
                    *(_QWORD *)(*v210 + 8 * v262) = v255;
                    goto LABEL_447;
                  }
                  *v255 = *v261;
                  *v261 = **(_QWORD **)(*v210 + 8 * v262);
                  **(_QWORD **)(*v210 + 8 * v262) = v261;
                  v261 = v255;
                }
                v262 = v256;
LABEL_447:
                v255 = v261;
                v261 = (_QWORD *)*v261;
                v256 = v262;
              }
              while (v261);
            }
          }
          v233 = (unint64_t)v251;
        }
        if ((v233 & (v233 - 1)) != 0)
        {
          if (v232 >= v233)
            v212 = v232 % v233;
          else
            v212 = v232;
        }
        else
        {
          v212 = (v233 - 1) & v232;
        }
      }
      v263 = *(std::string::size_type **)(*v210 + 8 * v212);
      v264 = v378;
      if (v263)
      {
        *(_QWORD *)v378 = *v263;
      }
      else
      {
        *(_QWORD *)v378 = v345->__words[0];
        v345->__words[0] = v264;
        *(_QWORD *)(*v210 + 8 * v212) = v345;
        if (!*(_QWORD *)v264)
          goto LABEL_465;
        v265 = *(_QWORD *)(*(_QWORD *)v264 + 8);
        if ((v233 & (v233 - 1)) != 0)
        {
          if (v265 >= v233)
            v265 %= v233;
        }
        else
        {
          v265 &= v233 - 1;
        }
        v263 = (std::string::size_type *)(*v210 + 8 * v265);
      }
      *v263 = v264;
LABEL_465:
      *(_QWORD *)&v378 = 0;
      ++v348[5].__r_.__value_.__l.__size_;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,void *>>>>::reset[abi:ne180100]((uint64_t)&v378);
LABEL_466:
      *(_QWORD *)&v378 = v408;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v378);
      if (v402)
      {
        v403 = v402;
        operator delete(v402);
      }
      this = (std::string *)v400;
      v211 = 1065353216;
      v212 = 1;
      if (v400)
      {
        v401 = v400;
        operator delete(v400);
      }
      if (SHIBYTE(v397) < 0)
        operator delete((void *)v396);
      if (SHIBYTE(v393.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v393.__r_.__value_.__l.__data_);
      if ((buf[63] & 0x80000000) != 0)
        operator delete(*(void **)&buf[40]);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      if (SBYTE7(v372) < 0)
        operator delete((void *)__p);
      v209 += 192;
    }
    while (v209 != v341);
  }
}

void sub_1B5960BC8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

BOOL AMCP::IO_Core::Graph_Manager::update_iocontext(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unsigned __int8 *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unsigned __int8 *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  AMCP::Log::Scope_Registry *v16;
  unsigned __int8 *v17;
  _BYTE *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  uint8x8_t v25;
  unint64_t v26;
  unsigned __int8 **v27;
  unsigned __int8 *i;
  unint64_t v29;
  _QWORD *v30;
  std::string *v31;
  __int128 v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  float v36;
  _BOOL8 v37;
  unint64_t v38;
  unint64_t v39;
  size_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unsigned __int8 *v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  char v58;
  char v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  AMCP::Log::Scope_Registry *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  std::string::size_type v78;
  _QWORD *v79;
  std::logic_error *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  void *v93;
  unint64_t *v94;
  unint64_t v95;
  std::logic_error *v96;
  uint64_t v97;
  unsigned __int8 *v98;
  std::string::size_type v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  std::__shared_weak_count *v106;
  NSObject *v107;
  unint64_t *v108;
  unint64_t v109;
  _opaque_pthread_t *v110;
  mach_port_t v111;
  void *v112;
  NSObject *v113;
  _opaque_pthread_t *v114;
  mach_port_t v115;
  uint64_t *v116;
  void *exception;
  uint64_t *v118;
  NSObject *v119;
  _opaque_pthread_t *v120;
  mach_port_t v121;
  uint64_t *v122;
  void *v123;
  uint64_t *v124;
  NSObject *v125;
  _opaque_pthread_t *v126;
  mach_port_t v127;
  uint64_t *v128;
  void *v129;
  uint64_t *v130;
  NSObject *v131;
  _opaque_pthread_t *v132;
  mach_port_t v133;
  uint64_t *v134;
  void *v135;
  uint64_t *v136;
  NSObject *v137;
  _opaque_pthread_t *v138;
  mach_port_t v139;
  uint64_t *v140;
  void *v141;
  uint64_t *v142;
  NSObject *v143;
  _opaque_pthread_t *v144;
  mach_port_t v145;
  void *v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v150;
  uint64_t *v151;
  std::__shared_weak_count *v152;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  _QWORD v158[3];
  void *__p[2];
  void *v160[2];
  int v161;
  _BYTE v162[32];
  float v163;
  void *v164;
  __int128 __n;
  void *v166;
  int v167;
  __int128 v168;
  uint64_t v169;
  std::string v170;
  uint64_t v171;
  std::string v172;
  std::logic_error v173;
  std::logic_error v174;
  std::logic_error *v175;
  std::logic_error v176;
  _BYTE *v177;
  std::logic_error *v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  _BYTE buf[24];
  _BYTE v183[24];
  uint64_t v184;
  std::__shared_weak_count *v185;
  uint64_t v186;

  v186 = *MEMORY[0x1E0C80C00];
  v4 = a2[23];
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (!v4)
    return 0;
  v6 = a2;
  memset(v158, 0, sizeof(v158));
  v7 = (_QWORD *)(a1 + 184);
  v8 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>((_QWORD *)(a1 + 184), a2);
  if (v8)
  {
    v9 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
    v156 = *((_QWORD *)v8 + 5);
    v157 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
  }
  else
  {
    v156 = 0;
    v157 = 0;
  }
  v174.__vftable = (std::logic_error_vtbl *)&off_1E6976A50;
  v174.__imp_.__imp_ = (const char *)a1;
  v175 = &v174;
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(v7, v6);
  if (!v12)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v113 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
    {
      v114 = pthread_self();
      v115 = pthread_mach_thread_np(v114);
      if ((v6[23] & 0x80u) == 0)
        v116 = (uint64_t *)v6;
      else
        v116 = *(uint64_t **)v6;
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v115;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Graph.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 1011;
      *(_WORD *)v183 = 2080;
      *(_QWORD *)&v183[2] = "not (m_nodes_by_uid.find(root_node) != m_nodes_by_uid.end())";
      *(_WORD *)&v183[10] = 2080;
      *(_QWORD *)&v183[12] = v116;
      _os_log_error_impl(&dword_1B57BA000, v113, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Root node not found in graph: %s", buf, 0x2Cu);
    }
    exception = __cxa_allocate_exception(0x40uLL);
    if ((v6[23] & 0x80u) == 0)
      v118 = (uint64_t *)v6;
    else
      v118 = *(uint64_t **)v6;
    caulk::make_string((caulk *)"Root node not found in graph: %s", (uint64_t)v162, v118);
    std::logic_error::logic_error((std::logic_error *)&v170, (const std::string *)v162);
    v170.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error(&v176, (const std::logic_error *)&v170);
    v178 = 0;
    v179 = 0;
    v180 = 0;
    v181 = -1;
    v176.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v177 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v176);
    *(_QWORD *)&v183[8] = "void AMCP::Graph::Graph::update_context(const Graph_Node_UID &, const std::function<Timebase_R"
                          "ef (const Graph_Node_UID &)> &, std::vector<std::string> &, Resource_Counts &)";
    *(_QWORD *)&v183[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
    LODWORD(v184) = 1011;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)__p);
    __n = *(_OWORD *)__p;
    v164 = off_1E69A20A0;
    v166 = v160[0];
    __p[0] = 0;
    __p[1] = 0;
    v160[0] = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v164);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)v12 + 6);
  v155 = *((_QWORD *)v12 + 5);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v152 = v13;
  if (*(_DWORD *)(v155 + 16))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v119 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
    {
      v120 = pthread_self();
      v121 = pthread_mach_thread_np(v120);
      if ((v6[23] & 0x80u) == 0)
        v122 = (uint64_t *)v6;
      else
        v122 = *(uint64_t **)v6;
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v121;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Graph.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 1013;
      *(_WORD *)v183 = 2080;
      *(_QWORD *)&v183[2] = "not (root->get_node_type() == AMCP::Node_Type::IOContext)";
      *(_WORD *)&v183[10] = 2080;
      *(_QWORD *)&v183[12] = v122;
      _os_log_error_impl(&dword_1B57BA000, v119, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Root node must be an IOContextNode: %s", buf, 0x2Cu);
    }
    v123 = __cxa_allocate_exception(0x40uLL);
    if ((v6[23] & 0x80u) == 0)
      v124 = (uint64_t *)v6;
    else
      v124 = *(uint64_t **)v6;
    caulk::make_string((caulk *)"Root node must be an IOContextNode: %s", (uint64_t)v162, v124);
    std::logic_error::logic_error((std::logic_error *)&v170, (const std::string *)v162);
    v170.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error(&v176, (const std::logic_error *)&v170);
    v178 = 0;
    v179 = 0;
    v180 = 0;
    v181 = -1;
    v176.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v177 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v176);
    *(_QWORD *)&v183[8] = "void AMCP::Graph::Graph::update_context(const Graph_Node_UID &, const std::function<Timebase_R"
                          "ef (const Graph_Node_UID &)> &, std::vector<std::string> &, Resource_Counts &)";
    *(_QWORD *)&v183[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
    LODWORD(v184) = 1013;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)__p);
    __n = *(_OWORD *)__p;
    v164 = off_1E69A20A0;
    v166 = v160[0];
    __p[0] = 0;
    __p[1] = 0;
    v160[0] = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v164);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v123, (uint64_t)buf);
  }
  AMCP::Graph::Graph::find_nodes_connected_to_context((uint64_t)&v164, a1 + 8, v6);
  if (*(_QWORD *)(v155 + 104))
  {
    v150 = a3;
    v151 = (uint64_t *)v6;
    memset(v162, 0, sizeof(v162));
    v163 = 1.0;
    v17 = (unsigned __int8 *)*((_QWORD *)&__n + 1);
    v154 = v7;
    if (*((_QWORD *)&__n + 1))
    {
      v18 = &v162[16];
      do
      {
        v19 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v7, v17 + 16);
        if (!v19)
          goto LABEL_64;
        v20 = v19;
        v21 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v17 + 16));
        v22 = v21;
        v23 = *(_QWORD *)&v162[8];
        if (*(_QWORD *)&v162[8])
        {
          v24 = v18;
          v25 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v162[8]);
          v25.i16[0] = vaddlv_u8(v25);
          v26 = v25.u32[0];
          if (v25.u32[0] > 1uLL)
          {
            v3 = v21;
            if (v21 >= *(_QWORD *)&v162[8])
              v3 = v21 % *(_QWORD *)&v162[8];
          }
          else
          {
            v3 = (*(_QWORD *)&v162[8] - 1) & v21;
          }
          v27 = *(unsigned __int8 ***)(*(_QWORD *)v162 + 8 * v3);
          if (v27)
          {
            for (i = *v27; i; i = *(unsigned __int8 **)i)
            {
              v29 = *((_QWORD *)i + 1);
              if (v29 == v22)
              {
                if (std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(i + 16, v17 + 16))
                {
                  std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)i + 5, *((_QWORD *)v20 + 5), *((_QWORD *)v20 + 6));
                  v7 = v154;
                  v18 = v24;
                  goto LABEL_64;
                }
              }
              else
              {
                if (v26 > 1)
                {
                  if (v29 >= v23)
                    v29 %= v23;
                }
                else
                {
                  v29 &= v23 - 1;
                }
                if (v29 != v3)
                  break;
              }
            }
          }
          v7 = v154;
          v18 = v24;
        }
        v30 = operator new(0x38uLL);
        *(_QWORD *)buf = v30;
        *(_QWORD *)&buf[8] = v18;
        buf[16] = 0;
        *v30 = 0;
        v30[1] = v22;
        v31 = (std::string *)(v30 + 2);
        if ((char)v17[39] < 0)
        {
          std::string::__init_copy_ctor_external(v31, *((const std::string::value_type **)v17 + 2), *((_QWORD *)v17 + 3));
        }
        else
        {
          v32 = *((_OWORD *)v17 + 1);
          v30[4] = *((_QWORD *)v17 + 4);
          *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v32;
        }
        v30[5] = *((_QWORD *)v20 + 5);
        v33 = *((_QWORD *)v20 + 6);
        v30[6] = v33;
        if (v33)
        {
          v34 = (unint64_t *)(v33 + 8);
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        buf[16] = 1;
        v36 = (float)(unint64_t)(*(_QWORD *)&v162[24] + 1);
        if (!v23 || (float)(v163 * (float)v23) < v36)
        {
          v37 = (v23 & (v23 - 1)) != 0;
          if (v23 < 3)
            v37 = 1;
          v38 = v37 | (2 * v23);
          v39 = vcvtps_u32_f32(v36 / v163);
          if (v38 <= v39)
            v40 = v39;
          else
            v40 = v38;
          std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)v162, v40);
          v23 = *(_QWORD *)&v162[8];
          if ((*(_QWORD *)&v162[8] & (*(_QWORD *)&v162[8] - 1)) != 0)
          {
            if (v22 >= *(_QWORD *)&v162[8])
              v3 = v22 % *(_QWORD *)&v162[8];
            else
              v3 = v22;
          }
          else
          {
            v3 = (*(_QWORD *)&v162[8] - 1) & v22;
          }
        }
        v41 = *(_QWORD *)v162;
        v42 = *(_QWORD **)(*(_QWORD *)v162 + 8 * v3);
        if (v42)
        {
          *v30 = *v42;
        }
        else
        {
          *v30 = *(_QWORD *)&v162[16];
          *(_QWORD *)&v162[16] = v30;
          *(_QWORD *)(v41 + 8 * v3) = v18;
          if (!*v30)
            goto LABEL_63;
          v43 = *(_QWORD *)(*v30 + 8);
          if ((v23 & (v23 - 1)) != 0)
          {
            if (v43 >= v23)
              v43 %= v23;
          }
          else
          {
            v43 &= v23 - 1;
          }
          v42 = (_QWORD *)(*(_QWORD *)v162 + 8 * v43);
        }
        *v42 = v30;
LABEL_63:
        *(_QWORD *)buf = 0;
        ++*(_QWORD *)&v162[24];
        std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
LABEL_64:
        v17 = *(unsigned __int8 **)v17;
      }
      while (v17);
    }
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v160 = 0u;
    v161 = v167;
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)__p, __n);
    v44 = (unsigned __int8 *)*((_QWORD *)&__n + 1);
    if (*((_QWORD *)&__n + 1))
    {
      do
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, v44 + 16, (uint64_t)(v44 + 16));
        v44 = *(unsigned __int8 **)v44;
      }
      while (v44);
    }
    v45 = (_QWORD *)(a1 + 64);
    v46 = (int)v160[1];
    if (v160[1])
    {
      while (1)
      {
        *(_QWORD *)buf = v162;
        *(_QWORD *)&buf[8] = a1 + 64;
        v47 = (uint64_t)v175;
        if (!v175)
          goto LABEL_71;
        if (v175 != &v174)
          break;
        *(_QWORD *)&v183[16] = &buf[16];
        ((void (*)(std::logic_error *, _BYTE *))v174.__vftable[1].~logic_error)(&v174, &buf[16]);
LABEL_73:
        v48 = *(std::__shared_weak_count **)(a1 + 296);
        v184 = *(_QWORD *)(a1 + 288);
        v185 = v48;
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
        }
        v51 = (unsigned __int8 *)v160[0];
        if (v160[0])
        {
          do
          {
            while (1)
            {
              v52 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v162, v51 + 16);
              if (v52)
                break;
LABEL_86:
              v51 = (unsigned __int8 *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::erase(__p, (void **)v51);
              if (!v51)
                goto LABEL_90;
            }
            v53 = v52;
            v54 = *((_QWORD *)v52 + 5);
            v55 = (std::__shared_weak_count *)*((_QWORD *)v53 + 6);
            v170.__r_.__value_.__r.__words[0] = v54;
            v170.__r_.__value_.__l.__size_ = (std::string::size_type)v55;
            if (v55)
            {
              v56 = (unint64_t *)&v55->__shared_owners_;
              do
                v57 = __ldxr(v56);
              while (__stxr(v57 + 1, v56));
            }
            v58 = AMCP::Graph::Node::calculate_clocks_from_wires(v54, *(_QWORD **)buf, *(_QWORD **)&buf[8], *(uint64_t *)&v183[16], &v184);
            v59 = v58;
            if (!v55)
              goto LABEL_85;
            v60 = (unint64_t *)&v55->__shared_owners_;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
              if ((v59 & 1) != 0)
                goto LABEL_86;
            }
            else
            {
LABEL_85:
              if ((v58 & 1) != 0)
                goto LABEL_86;
            }
            v51 = *(unsigned __int8 **)v51;
          }
          while (v51);
        }
LABEL_90:
        v62 = v185;
        if (v185)
        {
          v63 = (unint64_t *)&v185->__shared_owners_;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        v65 = *(AMCP::Log::Scope_Registry **)&v183[16];
        if (*(_BYTE **)&v183[16] == &buf[16])
        {
          v65 = (AMCP::Log::Scope_Registry *)&buf[16];
          v66 = 4;
          goto LABEL_99;
        }
        if (*(_QWORD *)&v183[16])
        {
          v66 = 5;
LABEL_99:
          v65 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(void))(*(_QWORD *)v65 + 8 * v66))();
        }
        if (!v46)
        {
          AMCP::Log::Scope_Registry::get(v65);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v106 = *(std::__shared_weak_count **)&buf[8];
          v107 = **(NSObject ***)buf;
          if (*(_QWORD *)&buf[8])
          {
            v108 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v109 = __ldaxr(v108);
            while (__stlxr(v109 - 1, v108));
            if (!v109)
            {
              ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
              std::__shared_weak_count::__release_weak(v106);
            }
          }
          if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
          {
            v110 = pthread_self();
            v111 = pthread_mach_thread_np(v110);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v111;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "Graph.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 991;
            *(_WORD *)v183 = 2080;
            *(_QWORD *)&v183[2] = "not (failsafe > 0)";
            _os_log_error_impl(&dword_1B57BA000, v107, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Error calculating clocks for graph", buf, 0x22u);
          }
          v112 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Error calculating clocks for graph", (uint64_t)&v172);
          std::logic_error::logic_error(&v173, &v172);
          v173.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error(&v176, &v173);
          v178 = 0;
          v179 = 0;
          v180 = 0;
          v181 = -1;
          v176.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
          v177 = &unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v176);
          *(_QWORD *)&v183[8] = "void AMCP::Graph::calculate_clocks(const std::shared_ptr<Meta_Timebase_Factory> &, const"
                                " std::function<Timebase_Ref (const Graph_Node_UID &)> &, std::unordered_set<Graph_Node_U"
                                "ID>, const Node_Map &, Wire_Index &)";
          *(_QWORD *)&v183[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
          LODWORD(v184) = 991;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v168);
          *(_OWORD *)&v170.__r_.__value_.__r.__words[1] = v168;
          v170.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
          v171 = v169;
          v168 = 0uLL;
          v169 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v170);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v112, (uint64_t)buf);
        }
        --v46;
        if (!v160[1])
          goto LABEL_102;
      }
      v47 = ((uint64_t (*)(void))v175->what)();
LABEL_71:
      *(_QWORD *)&v183[16] = v47;
      goto LABEL_73;
    }
LABEL_102:
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v160[0]);
    v67 = __p[0];
    __p[0] = 0;
    if (v67)
      operator delete(v67);
    v68 = *(_QWORD *)(v155 + 144);
    v69 = *(std::__shared_weak_count **)(v155 + 152);
    if (v69)
    {
      v70 = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
      do
        v72 = __ldaxr(v70);
      while (__stlxr(v72 - 1, v70));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    if (!v68)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v67);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v137 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v137, OS_LOG_TYPE_ERROR))
      {
        v138 = pthread_self();
        v139 = pthread_mach_thread_np(v138);
        if (*((char *)v151 + 23) >= 0)
          v140 = v151;
        else
          v140 = (uint64_t *)*v151;
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v139;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "Graph.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 1038;
        *(_WORD *)v183 = 2080;
        *(_QWORD *)&v183[2] = "not (root->get_clock() != nullptr)";
        *(_WORD *)&v183[10] = 2080;
        *(_QWORD *)&v183[12] = v140;
        _os_log_error_impl(&dword_1B57BA000, v137, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Node %s: clock is missing", buf, 0x2Cu);
      }
      v141 = __cxa_allocate_exception(0x40uLL);
      if (*((char *)v151 + 23) >= 0)
        v142 = v151;
      else
        v142 = (uint64_t *)*v151;
      caulk::make_string((caulk *)"Node %s: clock is missing", (uint64_t)&v172, v142);
      std::logic_error::logic_error(&v173, &v172);
      v173.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v176, &v173);
      v178 = 0;
      v179 = 0;
      v180 = 0;
      v181 = -1;
      v176.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v177 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v176);
      *(_QWORD *)&v183[8] = "void AMCP::Graph::Graph::update_context(const Graph_Node_UID &, const std::function<Timebase"
                            "_Ref (const Graph_Node_UID &)> &, std::vector<std::string> &, Resource_Counts &)";
      *(_QWORD *)&v183[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
      LODWORD(v184) = 1038;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v168);
      *(_OWORD *)&v170.__r_.__value_.__r.__words[1] = v168;
      v170.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
      v171 = v169;
      v168 = 0uLL;
      v169 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v170);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v141, (uint64_t)buf);
    }
    if (v166)
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*((void ***)&__n + 1));
      *((_QWORD *)&__n + 1) = 0;
      v73 = __n;
      if ((_QWORD)__n)
      {
        v74 = 0;
        do
          *((_QWORD *)v164 + v74++) = 0;
        while (v73 != v74);
      }
      v166 = 0;
    }
    AMCP::Graph::Node::calculate_latency(v155, (uint64_t)v162, v45, &v164);
    v75 = *(_QWORD **)&v162[16];
    if (*(_QWORD *)&v162[16])
    {
      while (1)
      {
        v76 = v75[5];
        LODWORD(v172.__r_.__value_.__l.__data_) = *(_DWORD *)(v155 + 164);
        if (*(_QWORD *)(v76 + 64) != *(_QWORD *)(v76 + 56))
          break;
LABEL_132:
        v75 = (_QWORD *)*v75;
        if (!v75)
          goto LABEL_133;
      }
      v77 = 0;
      while (1)
      {
        if (*(char *)(v76 + 47) < 0)
          std::string::__init_copy_ctor_external(&v170, *(const std::string::value_type **)(v76 + 24), *(_QWORD *)(v76 + 32));
        else
          v170 = *(std::string *)(v76 + 24);
        *(_OWORD *)buf = *(_OWORD *)&v170.__r_.__value_.__l.__data_;
        v78 = v170.__r_.__value_.__r.__words[2];
        memset(&v170, 0, sizeof(v170));
        *(_QWORD *)&buf[16] = v78;
        *(_QWORD *)v183 = v77;
        *(_DWORD *)&v183[8] = 0;
        v79 = std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::find<AMCP::Terminal_Identifier>(v45, (unsigned __int8 **)buf);
        if (!v79 || 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v79[8] - v79[7]) >> 4) < 2)
          goto LABEL_129;
        v176.__vftable = (std::logic_error_vtbl *)&off_1E6982E18;
        v176.__imp_.__imp_ = (const char *)&v172;
        v177 = v162;
        v178 = &v176;
        AMCP::Graph::Node::edit_each_wire(v76, v45, (uint64_t)&v176);
        v80 = v178;
        if (v178 == &v176)
          break;
        if (v178)
        {
          v81 = 5;
LABEL_128:
          (*((void (**)(void))&v80->~logic_error + v81))();
        }
LABEL_129:
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        if (++v77 >= (unint64_t)(0x6DB6DB6DB6DB6DB7
                                       * ((uint64_t)(*(_QWORD *)(v76 + 64) - *(_QWORD *)(v76 + 56)) >> 4)))
          goto LABEL_132;
      }
      v80 = &v176;
      v81 = 4;
      goto LABEL_128;
    }
LABEL_133:
    v6 = (unsigned __int8 *)v151;
    v82 = v152;
    v7 = v154;
    if (v166)
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*((void ***)&__n + 1));
      *((_QWORD *)&__n + 1) = 0;
      v83 = __n;
      if ((_QWORD)__n)
      {
        v84 = 0;
        do
          *((_QWORD *)v164 + v84++) = 0;
        while (v83 != v84);
      }
      v166 = 0;
    }
    AMCP::Graph::Node::calculate_all_drift_correction(v155, (uint64_t)v162, v45, (uint64_t)&v164, v150 + 8);
    if (v166)
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*((void ***)&__n + 1));
      *((_QWORD *)&__n + 1) = 0;
      v85 = __n;
      if ((_QWORD)__n)
      {
        v86 = 0;
        do
          *((_QWORD *)v164 + v86++) = 0;
        while (v85 != v86);
      }
      v166 = 0;
    }
    AMCP::Graph::Node::set_all_wire_source_clocks(v155, (uint64_t)v162, v45, (uint64_t)&v164);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__deallocate_node(*(_QWORD **)&v162[16]);
    v87 = *(void **)v162;
    *(_QWORD *)v162 = 0;
    if (v87)
      operator delete(v87);
  }
  else
  {
    v88 = *(_QWORD *)(v155 + 144);
    v89 = *(std::__shared_weak_count **)(v155 + 152);
    if (v89)
    {
      v90 = (unint64_t *)&v89->__shared_owners_;
      do
        v91 = __ldxr(v90);
      while (__stxr(v91 + 1, v90));
      do
        v92 = __ldaxr(v90);
      while (__stlxr(v92 - 1, v90));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    v82 = v152;
    if (v88)
    {
      AMCP::Log::Scope_Registry::get(v16);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v143 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v143, OS_LOG_TYPE_ERROR))
      {
        v144 = pthread_self();
        v145 = pthread_mach_thread_np(v144);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v145;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "Graph.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 1057;
        *(_WORD *)v183 = 2080;
        *(_QWORD *)&v183[2] = "not (root->get_clock() == nullptr)";
        _os_log_error_impl(&dword_1B57BA000, v143, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Unsafe: we have an old clock because a new one was not calculated.", buf, 0x22u);
      }
      v146 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Unsafe: we have an old clock because a new one was not calculated.", (uint64_t)__p);
      std::logic_error::logic_error((std::logic_error *)&v172, (const std::string *)__p);
      v172.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
      std::logic_error::logic_error(&v176, (const std::logic_error *)&v172);
      v178 = 0;
      v179 = 0;
      v180 = 0;
      v181 = -1;
      v176.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v177 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v176);
      *(_QWORD *)&v183[8] = "void AMCP::Graph::Graph::update_context(const Graph_Node_UID &, const std::function<Timebase"
                            "_Ref (const Graph_Node_UID &)> &, std::vector<std::string> &, Resource_Counts &)";
      *(_QWORD *)&v183[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
      LODWORD(v184) = 1057;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v170.__r_.__value_.__l.__data_);
      *(_QWORD *)v162 = off_1E69A20A0;
      *(std::string *)&v162[8] = v170;
      memset(&v170, 0, sizeof(v170));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v162);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v146, (uint64_t)buf);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*((void ***)&__n + 1));
  v93 = v164;
  v164 = 0;
  if (v93)
    operator delete(v93);
  if (v82)
  {
    v94 = (unint64_t *)&v82->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v96 = v175;
  if (v175 == &v174)
  {
    v97 = 4;
    v96 = &v174;
  }
  else
  {
    if (!v175)
      goto LABEL_164;
    v97 = 5;
  }
  (*((void (**)(void))&v96->~logic_error + v97))();
LABEL_164:
  if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(v7, v6))
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v125 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
    {
      v126 = pthread_self();
      v127 = pthread_mach_thread_np(v126);
      if ((v6[23] & 0x80u) == 0)
        v128 = (uint64_t *)v6;
      else
        v128 = *(uint64_t **)v6;
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v127;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Graph.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 1000;
      *(_WORD *)v183 = 2080;
      *(_QWORD *)&v183[2] = "not (m_nodes_by_uid.find(iocontext_node) != m_nodes_by_uid.end())";
      *(_WORD *)&v183[10] = 2080;
      *(_QWORD *)&v183[12] = v128;
      _os_log_error_impl(&dword_1B57BA000, v125, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Root node not found in graph: %s", buf, 0x2Cu);
    }
    v129 = __cxa_allocate_exception(0x40uLL);
    if ((v6[23] & 0x80u) == 0)
      v130 = (uint64_t *)v6;
    else
      v130 = *(uint64_t **)v6;
    caulk::make_string((caulk *)"Root node not found in graph: %s", (uint64_t)v162, v130);
    std::logic_error::logic_error((std::logic_error *)&v170, (const std::string *)v162);
    v170.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error(&v176, (const std::logic_error *)&v170);
    v178 = 0;
    v179 = 0;
    v180 = 0;
    v181 = -1;
    v176.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v177 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v176);
    *(_QWORD *)&v183[8] = "size_t AMCP::Graph::Graph::get_num_connections_within_subgraph(const Graph_Node_UID &)";
    *(_QWORD *)&v183[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
    LODWORD(v184) = 1000;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)__p);
    __n = *(_OWORD *)__p;
    v164 = off_1E69A20A0;
    v166 = v160[0];
    __p[0] = 0;
    __p[1] = 0;
    v160[0] = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v164);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v129, (uint64_t)buf);
  }
  v98 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(v7, v6);
  if (!v98)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v99 = *((_QWORD *)v98 + 5);
  v100 = (std::__shared_weak_count *)*((_QWORD *)v98 + 6);
  v170.__r_.__value_.__r.__words[0] = v99;
  v170.__r_.__value_.__l.__size_ = (std::string::size_type)v100;
  if (v100)
  {
    v101 = (unint64_t *)&v100->__shared_owners_;
    do
      v102 = __ldxr(v101);
    while (__stxr(v102 + 1, v101));
    if (!*(_DWORD *)(v99 + 16))
    {
      v103 = *(_QWORD *)(v99 + 104);
      do
        v104 = __ldaxr(v101);
      while (__stlxr(v104 - 1, v101));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
      if (!v103)
        goto LABEL_236;
LABEL_178:
      (*(void (**)(_QWORD))(**(_QWORD **)(v156 + 176) + 16))(*(_QWORD *)(v156 + 176));
      v105 = 0;
      goto LABEL_237;
    }
LABEL_214:
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v98);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v131 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
    {
      v132 = pthread_self();
      v133 = pthread_mach_thread_np(v132);
      if ((v6[23] & 0x80u) == 0)
        v134 = (uint64_t *)v6;
      else
        v134 = *(uint64_t **)v6;
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v133;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Graph.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 1002;
      *(_WORD *)v183 = 2080;
      *(_QWORD *)&v183[2] = "not (root->get_node_type() == AMCP::Node_Type::IOContext)";
      *(_WORD *)&v183[10] = 2080;
      *(_QWORD *)&v183[12] = v134;
      _os_log_error_impl(&dword_1B57BA000, v131, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Root node must be an IOContextNode: %s", buf, 0x2Cu);
    }
    v135 = __cxa_allocate_exception(0x40uLL);
    if ((v6[23] & 0x80u) == 0)
      v136 = (uint64_t *)v6;
    else
      v136 = *(uint64_t **)v6;
    caulk::make_string((caulk *)"Root node must be an IOContextNode: %s", (uint64_t)v162, v136);
    std::logic_error::logic_error(&v174, (const std::string *)v162);
    v174.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v176, &v174);
    v178 = 0;
    v179 = 0;
    v180 = 0;
    v181 = -1;
    v176.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v177 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v176);
    *(_QWORD *)&v183[8] = "size_t AMCP::Graph::Graph::get_num_connections_within_subgraph(const Graph_Node_UID &)";
    *(_QWORD *)&v183[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
    LODWORD(v184) = 1002;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)__p);
    __n = *(_OWORD *)__p;
    v164 = off_1E69A20A0;
    v166 = v160[0];
    __p[0] = 0;
    __p[1] = 0;
    v160[0] = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v164);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v135, (uint64_t)buf);
  }
  if (*(_DWORD *)(v99 + 16))
    goto LABEL_214;
  if (*(_QWORD *)(v99 + 104))
    goto LABEL_178;
LABEL_236:
  v105 = 1;
LABEL_237:
  if (v157)
  {
    v147 = (unint64_t *)&v157->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v176.__vftable = (std::logic_error_vtbl *)v158;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v176);
  return (v105 & 1) == 0;
}

void sub_1B5962FF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](&v3);
  *(_QWORD *)(v1 - 240) = &v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v1 - 240);
  _Unwind_Resume(a1);
}

void sub_1B5962FF8()
{
  __cxa_end_catch();
  JUMPOUT(0x1B5963004);
}

uint64_t std::default_delete<AMCP::Graph::Graph_State_Data>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::destroy(*(_QWORD **)(result + 232));
    std::__tree<std::__value_type<unsigned int,std::vector<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned int>>>>::destroy(*(_QWORD **)(v1 + 208));
    std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table(v1 + 160);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::~__hash_table(v1 + 120);
    std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::~__hash_table(v1 + 80);
    std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>>>::~__hash_table(v1 + 40);
    std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::~__hash_table(v1);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<AMCP::Graph::Node>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<unsigned int,std::vector<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned int>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::vector<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned int>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,std::vector<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned int>>>>::destroy(a1[1]);
    v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::__deallocate_node(*(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<AMCP::Graph::Node>>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<AMCP::Graph::Node>>,0>(uint64_t a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::__deallocate_node(void **__p)
{
  void **v1;
  void **v2;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (void **)*v1;
      if (*((char *)v1 + 47) < 0)
        operator delete(v1[3]);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::update_iocontext(std::string const&,AMCP::Graph::Graph::Resource_Counts &)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_iocontext(std::string const&,AMCP::Graph::Graph::Resource_Counts &)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Graph_Manager::update_iocontext(std::string const&,AMCP::Graph::Graph::Resource_Counts &)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_iocontext(std::string const&,AMCP::Graph::Graph::Resource_Counts &)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6976A50;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Graph_Manager::update_iocontext(std::string const&,AMCP::Graph::Graph::Resource_Counts &)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_iocontext(std::string const&,AMCP::Graph::Graph::Resource_Counts &)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6976A50;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::update_iocontext(std::string const&,AMCP::Graph::Graph::Resource_Counts &)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_iocontext(std::string const&,AMCP::Graph::Graph::Resource_Counts &)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _QWORD v5[2];

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 400);
  v5[0] = 0;
  v5[1] = 0;
  AMCP::IO_Core::Device_Timebase_Factory::demand_timebase_for_device(a3, v4, v5, a2);
}

uint64_t std::__function::__func<AMCP::IO_Core::Graph_Manager::update_iocontext(std::string const&,AMCP::Graph::Graph::Resource_Counts &)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_iocontext(std::string const&,AMCP::Graph::Graph::Resource_Counts &)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core13Graph_Manager16update_iocontextERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERNS_5Graph5Graph15Resource_CountsEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Graph_Manager::update_iocontext(std::string const&,AMCP::Graph::Graph::Resource_Counts &)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_iocontext(std::string const&,AMCP::Graph::Graph::Resource_Counts &)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)>::target_type()
{
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *result;
  uint64_t **v6;
  uint64_t *v7;
  std::string *v8;
  uint64_t v9;

  result = std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  if (!*result)
  {
    v6 = (uint64_t **)result;
    v7 = (uint64_t *)operator new(0x38uLL);
    v8 = (std::string *)(v7 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v7[6] = *(_QWORD *)(a3 + 16);
    }
    return std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(a1, v9, v6, v7);
  }
  return result;
}

void sub_1B5963480(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::string>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::string>::destroy(*(_QWORD *)a1);
    std::__tree<std::string>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

_QWORD *std::__tree<std::string>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, v4 + 4) & 0x80) == 0)
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0)
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void AMCP::IO_Core::Graph_Manager::prepare_graph_for_config_change(std::string *a1, _QWORD *a2, char a3, unsigned int a4, uint64_t a5, uint64_t **a6)
{
  std::__shared_mutex_base *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  AMCP::Core::Core *v16;
  int simple_required;
  void *v18;
  uint64_t *v19;
  unsigned int *v20;
  std::vector<std::string>::pointer begin;
  std::vector<std::string> *size;
  std::vector<std::string> *v23;
  BOOL v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  std::vector<std::string>::pointer v29;
  __int128 *v30;
  __int128 v31;
  void *__p;
  std::__shared_weak_count *v33;
  AMCP::Core::Core *v34;
  std::__shared_weak_count *v35;
  std::vector<std::string> v36;
  void **p_p;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear(a2[50] + 40);
  if ((a3 & 1) != 0)
  {
    v36.__end_ = 0;
    v36.__end_cap_.__value_ = 0;
    v36.__begin_ = (std::vector<std::string>::pointer)&v36.__end_;
    (*(void (**)(void **__return_ptr, _QWORD *))(*a2 + 16))(&__p, a2);
    v12 = (std::__shared_mutex_base *)(*(uint64_t (**)(void *))(*(_QWORD *)__p + 16))(__p);
    AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v34, v12, a4);
    v13 = v33;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v34;
    if (v34)
    {
      simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(v34);
      if (simple_required == 1634757735)
      {
        AMCP::Core::Core::get_simple_required_property<1684370979u>(&__p, v16);
        v18 = __p;
        v19 = (uint64_t *)v33;
        if (__p != v33)
        {
          v20 = (unsigned int *)__p;
          do
          {
            std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v36, (uint64_t *)&v36.__end_, *v20, *v20);
            ++v20;
          }
          while (v20 != (unsigned int *)v19);
        }
        if (v18)
          operator delete(v18);
      }
      else if (simple_required == 1633969526)
      {
        std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v36, a4, a4);
      }
    }
    begin = v36.__begin_;
    if ((std::vector<std::string>::pointer *)v36.__begin_ != &v36.__end_)
    {
      do
      {
        AMCP::IO_Core::Graph_Manager::find_timebases_from_object_id((AMCP::IO_Core::Graph_Manager *)&__p, a2, HIDWORD(begin[1].__r_.__value_.__r.__words[0]));
        AMCP::IO_Core::Graph_Manager::pause_iocontexts_for_timebases((_QWORD **)a2, (uint64_t)&__p, a6);
        std::vector<std::shared_ptr<AMCP::Graph::Timebase>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<AMCP::Graph::Timebase>*>,std::__wrap_iter<std::shared_ptr<AMCP::Graph::Timebase>*>>((char *)a5, *(_QWORD *)(a5 + 8), (uint64_t *)__p, (uint64_t *)v33, ((char *)v33 - (_BYTE *)__p) >> 4);
        p_p = &__p;
        std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&p_p);
        size = (std::vector<std::string> *)begin->__r_.__value_.__l.__size_;
        if (size)
        {
          do
          {
            v23 = size;
            size = (std::vector<std::string> *)size->__begin_;
          }
          while (size);
        }
        else
        {
          do
          {
            v23 = (std::vector<std::string> *)begin->__r_.__value_.__r.__words[2];
            v24 = v23->__begin_ == begin;
            begin = (std::vector<std::string>::pointer)v23;
          }
          while (!v24);
        }
        begin = (std::vector<std::string>::pointer)v23;
      }
      while (v23 != (std::vector<std::string> *)&v36.__end_);
    }
    v25 = v35;
    if (v35)
    {
      v26 = (unint64_t *)&v35->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v36.__end_->__r_.__value_.__r.__words);
  }
  memset(&v36, 0, sizeof(v36));
  v28 = (uint64_t *)a2[25];
  if (v28)
  {
    v29 = 0;
    do
    {
      if (*(_DWORD *)(v28[5] + 16) == 3)
      {
        v30 = (__int128 *)(v28 + 2);
        if (v29 >= v36.__end_cap_.__value_)
        {
          v29 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v36, v30);
        }
        else
        {
          if (*((char *)v28 + 39) < 0)
          {
            std::string::__init_copy_ctor_external(v29, (const std::string::value_type *)v28[2], v28[3]);
          }
          else
          {
            v31 = *v30;
            v29->__r_.__value_.__r.__words[2] = v28[4];
            *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v31;
          }
          ++v29;
        }
        v36.__end_ = v29;
      }
      v28 = (uint64_t *)*v28;
    }
    while (v28);
  }
  (*(void (**)(void **__return_ptr, _QWORD *))(*a2 + 48))(&__p, a2);
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1, __p, (uint64_t)v33, ((char *)v33 - (_BYTE *)__p) >> 2);
  a1[1].__r_.__value_.__r.__words[0] = 0;
  a1[1].__r_.__value_.__l.__size_ = 0;
  a1[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 1, (__int128 *)v36.__begin_, (__int128 *)v36.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v36.__end_ - (char *)v36.__begin_) >> 3));
  if (__p)
  {
    v33 = (std::__shared_weak_count *)__p;
    operator delete(__p);
  }
  __p = &v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1B5963894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, _QWORD *a16, uint64_t a17, uint64_t a18)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a16);
  _Unwind_Resume(a1);
}

void AMCP::Core::Core::get_simple_required_property<1684370979u>(_QWORD *a1, AMCP::Core::Core *a2)
{
  AMCP::Log::Scope_Registry *v3;
  void *v4;
  NSObject *v5;
  _opaque_pthread_t *v6;
  mach_port_t v7;
  void *__p[2];
  char v9;
  void *v10;
  uint64_t v11;
  char v12;
  _BYTE buf[10];
  char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  void **v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  strcpy(buf, "#vedbolg");
  buf[9] = 0;
  LOWORD(v14) = 0;
  AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>((uint64_t)&v10, a2, (AMCP::Address *)buf);
  if (!v12)
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v5 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = pthread_self();
      v7 = pthread_mach_thread_np(v6);
      v9 = 4;
      strcpy((char *)__p, "dev#");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v7;
      *(_WORD *)&buf[8] = 2080;
      v14 = "Core.h";
      v15 = 1024;
      v16 = 391;
      v17 = 2080;
      v18 = "optional_value.operator BOOL() == true";
      v19 = 2080;
      v20 = __p;
      v21 = 1024;
      v22 = 1735159650;
      v23 = 1024;
      v24 = 0;
      _os_log_error_impl(&dword_1B57BA000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v9 < 0)
        operator delete(__p[0]);
    }
    abort();
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = v10;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1, v10, v11, (v11 - (uint64_t)v10) >> 2);
  if (v4)
    operator delete(v4);
}

void sub_1B5963AFC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t *std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(uint64_t *result, uint64_t *a2, unsigned int a3, int a4)
{
  uint64_t **v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t *v22;

  v5 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  if (result + 1 == a2 || (v7 = *((_DWORD *)a2 + 7), v7 > a3))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*result == a2)
    {
      v10 = a2;
LABEL_16:
      if (v8)
        v13 = (uint64_t **)v10;
      else
        v13 = (uint64_t **)a2;
      if (v8)
        v11 = (uint64_t **)(v10 + 1);
      else
        v11 = (uint64_t **)a2;
      goto LABEL_22;
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v15 = a2;
      do
      {
        v10 = (uint64_t *)v15[2];
        v16 = *v10 == (_QWORD)v15;
        v15 = v10;
      }
      while (v16);
    }
    if (*((_DWORD *)v10 + 7) < a3)
      goto LABEL_16;
    v17 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          v13 = (uint64_t **)v17;
          v18 = *((_DWORD *)v17 + 7);
          if (v18 <= a3)
            break;
          v17 = *v13;
          v6 = v13;
          if (!*v13)
            goto LABEL_44;
        }
        if (v18 >= a3)
          break;
        v6 = v13 + 1;
        v17 = v13[1];
        if (!v17)
          goto LABEL_44;
      }
LABEL_45:
      v11 = v6;
      goto LABEL_22;
    }
    goto LABEL_43;
  }
  if (v7 >= a3)
    return result;
  v11 = (uint64_t **)(a2 + 1);
  v12 = (uint64_t *)a2[1];
  if (v12)
  {
    do
    {
      v11 = (uint64_t **)v12;
      v12 = (uint64_t *)*v12;
      v13 = v11;
      v14 = v11;
    }
    while (v12);
  }
  else
  {
    v14 = (uint64_t **)a2;
    do
    {
      v19 = (uint64_t *)v14;
      v14 = (uint64_t **)v14[2];
    }
    while (*v14 != v19);
    v13 = (uint64_t **)a2;
  }
  if (v14 != v6 && *((_DWORD *)v14 + 7) <= a3)
  {
    v20 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          v13 = (uint64_t **)v20;
          v21 = *((_DWORD *)v20 + 7);
          if (v21 <= a3)
            break;
          v20 = *v13;
          v6 = v13;
          if (!*v13)
            goto LABEL_44;
        }
        if (v21 >= a3)
          goto LABEL_45;
        v6 = v13 + 1;
        v20 = v13[1];
        if (!v20)
          goto LABEL_44;
      }
    }
LABEL_43:
    v13 = (uint64_t **)(result + 1);
    goto LABEL_44;
  }
LABEL_22:
  v6 = v11;
  if (!*v11)
  {
LABEL_44:
    v22 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v22 + 7) = a4;
    return std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(v5, (uint64_t)v13, v6, v22);
  }
  return result;
}

void AMCP::IO_Core::Graph_Manager::find_timebases_from_object_id(AMCP::IO_Core::Graph_Manager *this, _QWORD *a2, unsigned int a3)
{
  std::__shared_mutex_base *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  int8x8_t *v10;
  AMCP::Log::Scope_Registry *operation;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  std::__shared_mutex_base *v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *imp;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *i;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *p_p;
  uint64_t v35;
  int v36;
  int v37;
  BOOL v38;
  void *v39;
  int v40;
  const char *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  const char *v45;
  int64_t v46;
  unint64_t v47;
  int64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  __int128 v53;
  unint64_t *v54;
  unint64_t v55;
  const char *v56;
  std::runtime_error_vtbl *v57;
  std::runtime_error_vtbl *v58;
  __int128 v59;
  std::runtime_error v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD **v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  NSObject *v68;
  unint64_t *v69;
  unint64_t v70;
  _opaque_pthread_t *v71;
  mach_port_t v72;
  void *exception;
  std::runtime_error *v74;
  AMCP::IO_Core::Graph_Manager *v75;
  uint64_t v76;
  int v77;
  unsigned int *v78;
  unsigned int *v79;
  __int128 v80;
  _QWORD **v81;
  _QWORD *v82[2];
  __int128 v83;
  uint64_t v84;
  void *__p;
  __int128 v86;
  uint64_t v87;
  std::string v88;
  std::runtime_error v89;
  std::runtime_error v90;
  _QWORD v91[4];
  int v92;
  char v93;
  _QWORD *v94;
  std::__shared_weak_count *v95;
  uint8_t buf[24];
  uint64_t v97;
  const char *v98;
  const char *v99;
  int v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v82[0] = 0;
  v82[1] = 0;
  v81 = v82;
  std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v81, (uint64_t *)v82, a3, a3);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  (*(void (**)(uint8_t *__return_ptr, _QWORD *))(*a2 + 16))(buf, a2);
  v6 = (std::__shared_mutex_base *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)buf + 16))(*(_QWORD *)buf);
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v80, v6, a3);
  v7 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v8 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v75 = this;
  v10 = (int8x8_t *)v80;
  if ((_QWORD)v80)
  {
    if (AMCP::Core::Core::get_simple_required_property<1650682995u>((AMCP::Core::Core *)v80) == 1633773415)
    {
      v76 = 0x676C6F6261677270;
      v77 = 0;
      operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v94, v10, (unsigned int *)&v76);
      if (!v94)
      {
        AMCP::Log::Scope_Registry::get(operation);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v67 = *(std::__shared_weak_count **)&buf[8];
        v68 = **(NSObject ***)buf;
        if (*(_QWORD *)&buf[8])
        {
          v69 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
        {
          v71 = pthread_self();
          v72 = pthread_mach_thread_np(v71);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v72;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "Core.h";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 202;
          _os_log_error_impl(&dword_1B57BA000, v68, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v93);
        exception = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v88);
        std::runtime_error::runtime_error(&v89, &v88);
        std::runtime_error::runtime_error(&v90, &v89);
        memset(&v91[1], 0, 24);
        v92 = -1;
        v90.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v91[0] = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v90);
        v98 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Ty"
              "pe = std::vector<unsigned int>, Argument_Types = <>]";
        v99 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
        v100 = 202;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v83);
        v86 = v83;
        v87 = v84;
        v83 = 0uLL;
        v84 = 0;
        __p = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&__p);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
      }
      AMCP::Core::Operation::call_function<std::vector<unsigned int>>((uint64_t)&v78, v94);
      v12 = v95;
      if (v95)
      {
        p_shared_owners = (unint64_t *)&v95->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v16 = v78;
      v15 = v79;
      if (v78 != v79)
      {
        do
        {
          std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v81, (uint64_t *)v82, *v16, *v16);
          ++v16;
        }
        while (v16 != v15);
        v16 = v78;
      }
      if (v16)
      {
        v79 = v16;
        operator delete(v16);
      }
    }
    v17 = (uint64_t)v81;
    if (v81 != v82)
    {
      do
      {
        v18 = *(_DWORD *)(v17 + 28);
        (*(void (**)(std::runtime_error *__return_ptr, _QWORD *))(*a2 + 16))(&v90, a2);
        v19 = (std::__shared_mutex_base *)(*((uint64_t (**)(std::runtime_error_vtbl *))v90.~runtime_error + 2))(v90.__vftable);
        AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)buf, v19, v18);
        v20 = *(_OWORD *)buf;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
        v80 = v20;
        if (v21)
        {
          v22 = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        v24 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v25 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        imp = (std::__shared_weak_count *)v90.__imp_.__imp_;
        if (v90.__imp_.__imp_)
        {
          v28 = (unint64_t *)(v90.__imp_.__imp_ + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
            std::__shared_weak_count::__release_weak(imp);
          }
        }
        if ((_QWORD)v80)
        {
          strcpy((char *)buf, " diubolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(&v88, (AMCP::Core::Core *)v80, (const AMCP::Address *)buf);
          if (v88.__r_.__value_.__s.__data_[8])
          {
            if (!v88.__r_.__value_.__r.__words[0])
            {
              v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v74, "Could not construct");
              __cxa_throw(v74, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v30 = a2[50];
            applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, (const __CFString *)v88.__r_.__value_.__l.__data_);
            v90.__vftable = 0;
            v90.__imp_.__imp_ = 0;
            v91[0] = 0;
            for (i = *(uint64_t **)(v30 + 16); i; i = (uint64_t *)*i)
            {
              (*(void (**)(uint8_t *__return_ptr))(*(_QWORD *)i[5] + 24))(buf);
              if ((buf[23] & 0x80u) == 0)
                v32 = buf[23];
              else
                v32 = *(_QWORD *)&buf[8];
              v33 = HIBYTE(v86);
              if (v86 < 0)
                v33 = v86;
              if (v32 != v33)
              {
                if ((buf[23] & 0x80) != 0)
                  operator delete(*(void **)buf);
                continue;
              }
              if (v86 >= 0)
                p_p = (unsigned __int8 *)&__p;
              else
                p_p = (unsigned __int8 *)__p;
              if ((buf[23] & 0x80) != 0)
              {
                v39 = *(void **)buf;
                v40 = memcmp(*(const void **)buf, p_p, *(size_t *)&buf[8]);
                operator delete(v39);
                if (!v40)
                  goto LABEL_61;
              }
              else
              {
                if (!buf[23])
                  goto LABEL_61;
                v35 = 0;
                do
                {
                  v36 = buf[v35];
                  v37 = p_p[v35];
                  v38 = v36 != v37 || buf[23] - 1 == v35++;
                }
                while (!v38);
                if (v36 == v37)
                {
LABEL_61:
                  v41 = v90.__imp_.__imp_;
                  if (v90.__imp_.__imp_ >= (const char *)v91[0])
                  {
                    v46 = (v90.__imp_.__imp_ - (const char *)v90.__vftable) >> 4;
                    v47 = v46 + 1;
                    if ((unint64_t)(v46 + 1) >> 60)
                      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                    v48 = v91[0] - (unint64_t)v90.__vftable;
                    if ((uint64_t)(v91[0] - (unint64_t)v90.__vftable) >> 3 > v47)
                      v47 = v48 >> 3;
                    if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF0)
                      v49 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v49 = v47;
                    v98 = (const char *)v91;
                    v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v49);
                    v52 = &v50[16 * v46];
                    v53 = *(_OWORD *)(i + 5);
                    *(_OWORD *)v52 = v53;
                    if (*((_QWORD *)&v53 + 1))
                    {
                      v54 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
                      do
                        v55 = __ldxr(v54);
                      while (__stxr(v55 + 1, v54));
                    }
                    v57 = v90.__vftable;
                    v56 = v90.__imp_.__imp_;
                    if (v90.__imp_.__imp_ == (const char *)v90.__vftable)
                    {
                      v60 = (std::runtime_error)vdupq_n_s64((unint64_t)v90.__imp_.__imp_);
                      v58 = (std::runtime_error_vtbl *)&v50[16 * v46];
                    }
                    else
                    {
                      v58 = (std::runtime_error_vtbl *)&v50[16 * v46];
                      do
                      {
                        v59 = *((_OWORD *)v56 - 1);
                        v56 -= 16;
                        *(_OWORD *)&v58[-1].~runtime_error_0 = v59;
                        v58 = (std::runtime_error_vtbl *)((char *)v58 - 16);
                        *(_QWORD *)v56 = 0;
                        *((_QWORD *)v56 + 1) = 0;
                      }
                      while (v56 != (const char *)v57);
                      v60 = v90;
                    }
                    v45 = v52 + 16;
                    v90.__vftable = v58;
                    v90.__imp_.__imp_ = v52 + 16;
                    *(std::runtime_error *)&buf[8] = v60;
                    v61 = v91[0];
                    v91[0] = &v50[16 * v51];
                    v97 = v61;
                    *(_QWORD *)buf = v60.__vftable;
                    std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)buf);
                  }
                  else
                  {
                    *(_QWORD *)v90.__imp_.__imp_ = i[5];
                    v42 = i[6];
                    *((_QWORD *)v41 + 1) = v42;
                    if (v42)
                    {
                      v43 = (unint64_t *)(v42 + 8);
                      do
                        v44 = __ldxr(v43);
                      while (__stxr(v44 + 1, v43));
                    }
                    v45 = v41 + 16;
                  }
                  v90.__imp_.__imp_ = v45;
                }
              }
            }
            if (SHIBYTE(v86) < 0)
              operator delete(__p);
            std::vector<std::shared_ptr<AMCP::Graph::Timebase>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<AMCP::Graph::Timebase>*>,std::__wrap_iter<std::shared_ptr<AMCP::Graph::Timebase>*>>((char *)v75, *((_QWORD *)v75 + 1), (uint64_t *)v90.__vftable, (uint64_t *)v90.__imp_.__imp_, (v90.__imp_.__imp_ - (const char *)v90.__vftable) >> 4);
            *(_QWORD *)buf = &v90;
            std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          }
          std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v88);
        }
        v62 = *(_QWORD **)(v17 + 8);
        if (v62)
        {
          do
          {
            v63 = (_QWORD **)v62;
            v62 = (_QWORD *)*v62;
          }
          while (v62);
        }
        else
        {
          do
          {
            v63 = *(_QWORD ***)(v17 + 16);
            v38 = *v63 == (_QWORD *)v17;
            v17 = (uint64_t)v63;
          }
          while (!v38);
        }
        v17 = (uint64_t)v63;
      }
      while (v63 != v82);
    }
  }
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
  if (*((_QWORD *)&v80 + 1))
  {
    v65 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v82[0]);
}

void sub_1B5964464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error_vtbl *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,void *a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,std::runtime_error a37,std::runtime_error a38,uint64_t a39,uint64_t a40)
{
  uint64_t v40;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;

  v42 = *(std::__shared_weak_count **)(v40 - 200);
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  a38.__vftable = a9;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a19);
  _Unwind_Resume(a1);
}

void AMCP::IO_Core::Graph_Manager::pause_iocontexts_for_timebases(_QWORD **a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  std::__shared_mutex_base *v9;
  uint64_t v10;
  unsigned int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  AMCP::Address *v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t **v21;
  unsigned int v22;
  uint64_t *v23;
  AMCP::Log::Scope_Registry *v24;
  AMCP::Log::Scope_Registry *v25;
  int v26;
  std::__shared_weak_count *v27;
  NSObject *v28;
  unint64_t *v29;
  unint64_t v30;
  _opaque_pthread_t *v31;
  mach_port_t v32;
  mach_port_t v33;
  void **v34;
  NSObject *v35;
  os_log_type_t v36;
  std::__shared_weak_count *v37;
  NSObject *v38;
  unint64_t *v39;
  unint64_t v40;
  _opaque_pthread_t *v41;
  mach_port_t v42;
  mach_port_t v43;
  void **v44;
  std::__shared_weak_count *v45;
  NSObject *v46;
  unint64_t *v47;
  unint64_t v48;
  _opaque_pthread_t *v49;
  mach_port_t v50;
  mach_port_t v51;
  void **v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::runtime_error *v59;
  std::runtime_error *v60;
  std::runtime_error *exception;
  void *__p[2];
  char v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  CFTypeRef cf;
  AMCP::Address *v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE buf[18];
  __int16 v72;
  int v73;
  __int16 v74;
  void **v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  AMCP::Graph::Graph::get_nodes(&v69, a1[25]);
  v7 = v69;
  v6 = v70;
  if (v69 != v70)
  {
    v8 = a3 + 1;
    do
    {
      ((void (*)(_BYTE *__return_ptr, _QWORD **))(*a1)[2])(buf, a1);
      v9 = (std::__shared_mutex_base *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)buf + 16))(*(_QWORD *)buf);
      v10 = *(_QWORD *)(*(_QWORD *)v7 + 176);
      if (v10)
        v11 = *(_DWORD *)(v10 + 8);
      else
        v11 = 0;
      AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v67, v9, v11);
      v12 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = v67;
      if (!v67)
        goto LABEL_66;
      strcpy(buf, "btuibolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      if (!AMCP::Core::Core::call_operation_function<BOOL,std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&>(v67, (unsigned int *)buf, a2))goto LABEL_66;
      strcpy(buf, "diunbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      AMCP::Core::Core::call_operation_function<applesauce::CF::StringRef>((AMCP::Log::Scope_Registry *)&cf, (int8x8_t *)v15, (unsigned int *)buf);
      strcpy(buf, "rsoibolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      v16 = AMCP::Core::Core::call_operation_function<BOOL>(v15, (unsigned int *)buf);
      v17 = *(_QWORD *)(*(_QWORD *)v7 + 176);
      if (v17)
        v18 = *(_DWORD *)(v17 + 8);
      else
        v18 = 0;
      v19 = *v8;
      v20 = a3 + 1;
      v21 = a3 + 1;
      if (*v8)
      {
        while (1)
        {
          while (1)
          {
            v21 = (uint64_t **)v19;
            v22 = *((_DWORD *)v19 + 7);
            if (v18 >= v22)
              break;
            v19 = *v21;
            v20 = v21;
            if (!*v21)
              goto LABEL_23;
          }
          if (v22 >= v18)
            goto LABEL_64;
          v19 = v21[1];
          if (!v19)
          {
            v20 = v21 + 1;
            break;
          }
        }
      }
LABEL_23:
      v23 = (uint64_t *)operator new(0x20uLL);
      *((_DWORD *)v23 + 7) = v18;
      std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(a3, (uint64_t)v21, v20, v23);
      strcpy(buf, "suapbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      AMCP::Core::Core::call_operation_function<void,AMCP::Pause_Behavior>(v67, (unsigned int *)buf, v16 ^ 1);
      AMCP::Log::Scope_Registry::get(v24);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v64, "com.apple.coreaudio", "AMCP");
      v26 = *(_DWORD *)(v64 + 16);
      switch(v26)
      {
        case 1:
          AMCP::Log::Scope_Registry::get(v25);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v45 = *(std::__shared_weak_count **)&buf[8];
          v46 = **(NSObject ***)buf;
          if (*(_QWORD *)&buf[8])
          {
            v47 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          if (!os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
            goto LABEL_59;
          v49 = pthread_self();
          v50 = pthread_mach_thread_np(v49);
          if (!cf)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v51 = v50;
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)cf);
          v52 = __p;
          if (v63 < 0)
            v52 = (void **)__p[0];
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v51;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "Graph_Manager.cpp";
          v72 = 1024;
          v73 = 689;
          v74 = 2080;
          v75 = v52;
          v35 = v46;
          v36 = OS_LOG_TYPE_DEFAULT;
          break;
        case 2:
          AMCP::Log::Scope_Registry::get(v25);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v37 = *(std::__shared_weak_count **)&buf[8];
          v38 = **(NSObject ***)buf;
          if (*(_QWORD *)&buf[8])
          {
            v39 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
            goto LABEL_59;
          v41 = pthread_self();
          v42 = pthread_mach_thread_np(v41);
          if (!cf)
          {
            v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v59, "Could not construct");
            __cxa_throw(v59, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v43 = v42;
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)cf);
          v44 = __p;
          if (v63 < 0)
            v44 = (void **)__p[0];
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v43;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "Graph_Manager.cpp";
          v72 = 1024;
          v73 = 689;
          v74 = 2080;
          v75 = v44;
          _os_log_debug_impl(&dword_1B57BA000, v38, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Paused IOContext %s", buf, 0x22u);
          goto LABEL_57;
        case 3:
          AMCP::Log::Scope_Registry::get(v25);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v27 = *(std::__shared_weak_count **)&buf[8];
          v28 = **(NSObject ***)buf;
          if (*(_QWORD *)&buf[8])
          {
            v29 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          if (!os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
            goto LABEL_59;
          v31 = pthread_self();
          v32 = pthread_mach_thread_np(v31);
          if (!cf)
          {
            v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v60, "Could not construct");
            __cxa_throw(v60, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v33 = v32;
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)cf);
          v34 = __p;
          if (v63 < 0)
            v34 = (void **)__p[0];
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v33;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "Graph_Manager.cpp";
          v72 = 1024;
          v73 = 689;
          v74 = 2080;
          v75 = v34;
          v35 = v28;
          v36 = OS_LOG_TYPE_INFO;
          break;
        default:
          goto LABEL_59;
      }
      _os_log_impl(&dword_1B57BA000, v35, v36, "%6u %32s:%-5d Paused IOContext %s", buf, 0x22u);
LABEL_57:
      if (v63 < 0)
        operator delete(__p[0]);
LABEL_59:
      v53 = v65;
      if (v65)
      {
        p_shared_owners = (unint64_t *)&v65->__shared_owners_;
        do
          v55 = __ldaxr(p_shared_owners);
        while (__stlxr(v55 - 1, p_shared_owners));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
LABEL_64:
      if (cf)
        CFRelease(cf);
LABEL_66:
      v56 = v68;
      if (v68)
      {
        v57 = (unint64_t *)&v68->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      v7 += 16;
    }
    while (v7 != v6);
  }
  *(_QWORD *)buf = &v69;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1B5964CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, const void *a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void **a23)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  applesauce::CF::StringRef::~StringRef(&a17);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  a23 = (void **)&a20;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<AMCP::Graph::Timebase>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<AMCP::Graph::Timebase>*>,std::__wrap_iter<std::shared_ptr<AMCP::Graph::Timebase>*>>(char *result, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  __int128 v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t *v47;
  unint64_t v48;
  _QWORD *v49;

  if (a5 < 1)
    return result;
  v6 = a3;
  v7 = result;
  v8 = *(_QWORD *)result;
  v9 = a2 - *(_QWORD *)result;
  v10 = v9 >> 4;
  v11 = (_QWORD *)(*(_QWORD *)result + (v9 & 0xFFFFFFFFFFFFFFF0));
  v12 = result + 16;
  v13 = *((_QWORD *)result + 2);
  v14 = *((_QWORD *)result + 1);
  if (a5 > (uint64_t)(v13 - v14) >> 4)
  {
    v15 = a5 + ((uint64_t)(v14 - v8) >> 4);
    if (v15 >> 60)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v16 = v13 - v8;
    if (v16 >> 3 > v15)
      v15 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    v49 = v12;
    if (v17)
      v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v17);
    else
      v18 = 0;
    v26 = (_QWORD *)(v17 + 16 * v10);
    v45 = v17;
    v46 = v26;
    v48 = v17 + 16 * v18;
    v27 = &v26[2 * a5];
    v28 = v26;
    do
    {
      *v28 = *v6;
      v29 = v6[1];
      v28[1] = v29;
      if (v29)
      {
        v30 = (unint64_t *)(v29 + 8);
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      v28 += 2;
      v6 += 2;
    }
    while (v28 != v27);
    v47 = &v26[2 * a5];
    v32 = *(_QWORD **)v7;
    if (*(_QWORD **)v7 != v11)
    {
      v33 = v11;
      do
      {
        v34 = *((_OWORD *)v33 - 1);
        v33 -= 2;
        *((_OWORD *)v26 - 1) = v34;
        v26 -= 2;
        *v33 = 0;
        v33[1] = 0;
      }
      while (v33 != v32);
      v27 = v47;
    }
    v35 = (_QWORD *)*((_QWORD *)v7 + 1);
    if (v35 != v11)
    {
      do
      {
        *(_OWORD *)v27 = *(_OWORD *)v11;
        v27 += 2;
        *v11 = 0;
        v11[1] = 0;
        v11 += 2;
      }
      while (v11 != v35);
      v11 = (_QWORD *)*((_QWORD *)v7 + 1);
    }
    v36 = *(_QWORD **)v7;
    *(_QWORD *)v7 = v26;
    *((_QWORD *)v7 + 1) = v27;
    v37 = *((_QWORD *)v7 + 2);
    *((_QWORD *)v7 + 2) = v48;
    v47 = v11;
    v48 = v37;
    v45 = (unint64_t)v36;
    v46 = v36;
    return (char *)std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v45);
  }
  v19 = (uint64_t)(v14 - (_QWORD)v11) >> 4;
  if (v19 >= a5)
  {
    v20 = &a3[2 * a5];
    v22 = (char *)*((_QWORD *)result + 1);
LABEL_36:
    v38 = (char *)&v11[2 * a5];
    v39 = &v22[-16 * a5];
    v40 = v22;
    if ((unint64_t)v39 < v14)
    {
      v40 = v22;
      do
      {
        *(_OWORD *)v40 = *(_OWORD *)v39;
        v40 += 16;
        *(_QWORD *)v39 = 0;
        *((_QWORD *)v39 + 1) = 0;
        v39 += 16;
      }
      while ((unint64_t)v39 < v14);
    }
    *((_QWORD *)result + 1) = v40;
    if (v22 != v38)
    {
      result = v22 - 16;
      v41 = 16 * ((v22 - v38) >> 4);
      v42 = v8 + 16 * v10 - 16;
      do
      {
        result = (char *)(std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)result, (__int128 *)(v42 + v41))- 16);
        v41 -= 16;
      }
      while (v41);
    }
    for (; v6 != v20; v11 += 2)
    {
      v43 = *v6;
      v44 = v6[1];
      v6 += 2;
      result = (char *)std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](v11, v43, v44);
    }
    return result;
  }
  v20 = &a3[2 * v19];
  if (v20 == a4)
  {
    v22 = (char *)*((_QWORD *)result + 1);
  }
  else
  {
    v21 = &a3[2 * v19];
    v22 = (char *)*((_QWORD *)result + 1);
    do
    {
      *(_QWORD *)v22 = *v21;
      v23 = v21[1];
      *((_QWORD *)v22 + 1) = v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v21 += 2;
      v22 += 16;
    }
    while (v21 != a4);
  }
  *((_QWORD *)result + 1) = v22;
  if ((uint64_t)(v14 - (_QWORD)v11) >= 1)
    goto LABEL_36;
  return result;
}

uint64_t AMCP::Core::Core::call_operation_function<BOOL,std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&>(AMCP::Address *a1, unsigned int *a2, uint64_t a3)
{
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v7;
  unint64_t v8;
  AMCP::Log::Scope_Registry *v9;
  AMCP::Log::Scope_Registry *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  NSObject *v17;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _opaque_pthread_t *v25;
  mach_port_t v26;
  void *exception;
  NSObject *v28;
  _opaque_pthread_t *v29;
  mach_port_t v30;
  void *v31;
  NSObject *v32;
  _opaque_pthread_t *v33;
  mach_port_t v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t v41;
  std::string v42;
  std::runtime_error v43;
  std::runtime_error v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char v50;
  uint8_t buf[8];
  _BYTE v52[10];
  __int16 v53;
  int v54;
  __int16 v55;
  _BYTE v56[14];
  const char *v57;
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (*a2 == 707406378 || a2[1] == 707406378 || a2[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v32 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      v33 = pthread_self();
      v34 = pthread_mach_thread_np(v33);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v34;
      *(_WORD *)v52 = 2080;
      *(_QWORD *)&v52[2] = "Core.h";
      v53 = 1024;
      v54 = 198;
      v55 = 2080;
      *(_QWORD *)v56 = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1B57BA000, v32, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v35, (int8x8_t *)a1, a2);
  v7 = v35;
  if (!v35)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v21 = *(std::__shared_weak_count **)v52;
    v22 = **(NSObject ***)buf;
    if (*(_QWORD *)v52)
    {
      v23 = (unint64_t *)(*(_QWORD *)v52 + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v25 = pthread_self();
      v26 = pthread_mach_thread_np(v25);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v26;
      *(_WORD *)v52 = 2080;
      *(_QWORD *)&v52[2] = "Core.h";
      v53 = 1024;
      v54 = 202;
      _os_log_error_impl(&dword_1B57BA000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v50);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v42);
    std::runtime_error::runtime_error(&v43, &v42);
    std::runtime_error::runtime_error(&v44, &v43);
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = -1;
    v44.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v45 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v44);
    *(_QWORD *)&v56[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = BOOL, Argument_Types = <const std::vector<std::shared_ptr<AMCP::Graph::Timebase>> &>]";
    v57 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    v58 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v37);
    v40 = v37;
    v41 = v38;
    v37 = 0uLL;
    v38 = 0;
    v39 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v39);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v8 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>>();
  v9 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, v8);
  if (!v9)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v28 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v29 = pthread_self();
      v30 = pthread_mach_thread_np(v29);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v30;
      *(_WORD *)v52 = 2080;
      *(_QWORD *)&v52[2] = "Operation.h";
      v53 = 1024;
      v54 = 154;
      _os_log_error_impl(&dword_1B57BA000, v28, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v50);
    v31 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v42);
    std::runtime_error::runtime_error(&v43, &v42);
    std::runtime_error::runtime_error(&v44, &v43);
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = -1;
    v44.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v45 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v44);
    *(_QWORD *)&v56[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = BOOL, "
                         "Argument_Types = <const std::vector<std::shared_ptr<AMCP::Graph::Timebase>> &>]";
    v57 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v58 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v37);
    v40 = v37;
    v41 = v38;
    v37 = 0uLL;
    v38 = 0;
    v39 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v39);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v31, (uint64_t)buf);
  }
  v10 = v9;
  if (!*((_QWORD *)v9 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>>(),
        (v9 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v10 + 7))(4, (uint64_t)v10 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v17 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = pthread_self();
      v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v19;
      *(_WORD *)v52 = 2080;
      *(_QWORD *)&v52[2] = "Operation.h";
      v53 = 1024;
      v54 = 161;
      _os_log_error_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v50);
    v20 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v42);
    std::runtime_error::runtime_error(&v43, &v42);
    std::runtime_error::runtime_error(&v44, &v43);
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = -1;
    v44.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v45 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v44);
    *(_QWORD *)&v56[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = BOOL, "
                         "Argument_Types = <const std::vector<std::shared_ptr<AMCP::Graph::Timebase>> &>]";
    v57 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v58 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v37);
    v40 = v37;
    v41 = v38;
    v37 = 0uLL;
    v38 = 0;
    v39 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v39);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v20, (uint64_t)buf);
  }
  v11 = *((_QWORD *)v9 + 3);
  if (!v11)
    std::__throw_bad_function_call[abi:ne180100]();
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 48))(v11, a3);
  v13 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v12;
}

void sub_1B59656C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,std::runtime_error a25,uint64_t a26,uint64_t a27)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<AMCP::IO_Core::Device_Node_State>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E699CFB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::IO_Core::Device_Node_State>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E699CFB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<AMCP::IO_Core::Device_Node_State>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;

  v2 = 0;
  v3 = a1 + 184;
  do
  {
    v4 = *(void **)(v3 + v2);
    if (v4)
      operator delete(v4);
    v2 -= 24;
  }
  while (v2 != -48);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 136);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 120);
  v5 = (_QWORD *)(a1 + 32);
  v6 = (_QWORD *)(a1 + 112);
  do
  {
    v7 = (_QWORD *)*(v6 - 3);
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        std::__destroy_at[abi:ne180100]<std::pair<AMCP::Terminal_Identifier const,AMCP::IO_Core::Stream_Connection>,0>((uint64_t)(v7 + 2));
        operator delete(v7);
        v7 = v8;
      }
      while (v8);
    }
    v10 = (void *)*(v6 - 5);
    v6 -= 5;
    v9 = v10;
    *v6 = 0;
    if (v10)
      operator delete(v9);
  }
  while (v6 != v5);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<AMCP::Core::Engine>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<AMCP::Core::Engine>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<AMCP::Core::Engine>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<AMCP::Core::Engine>>>>::remove(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)a2[1];
  v4 = a3[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*a2 + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a3);
  if (v7 == a2 + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a3)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a3 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*a2 + 8 * v4) = 0;
  }
  v10 = *a3;
  if (*a3)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*a2 + 8 * v11) = v7;
      v10 = *a3;
    }
  }
  *v7 = v10;
  *a3 = 0;
  --a2[3];
  *(_QWORD *)result = a3;
  *(_QWORD *)(result + 8) = a2 + 2;
  *(_BYTE *)(result + 16) = 1;
  return result;
}

void AMCP::IO_Core::Graph_Manager::update_graph_after_config_change(_QWORD *a1, unsigned int a2, _QWORD *a3, char a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *imp;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  __int32 *v22;
  __int32 *v23;
  _BOOL4 v24;
  __int32 *v25;
  __int32 *v26;
  __int32 *v27;
  std::__shared_mutex_base *v28;
  AMCP::Log::Scope_Registry *core;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  AMCP::Core::Core *v33;
  int simple_required;
  std::runtime_error_vtbl *v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  int8x8_t *v42;
  unint64_t *v43;
  unint64_t v44;
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v46;
  unint64_t v47;
  AMCP::Log::Scope_Registry *v48;
  AMCP::Log::Scope_Registry *v49;
  uint64_t v50;
  std::__shared_weak_count *size;
  unint64_t *v52;
  unint64_t v53;
  uint8x8_t v54;
  void **v55;
  std::runtime_error_vtbl *v56;
  unint64_t v57;
  float v58;
  float v59;
  _BOOL8 v60;
  unint64_t v61;
  unint64_t v62;
  size_t v63;
  uint64_t v64;
  void (__cdecl **v65)(std::runtime_error *__hidden);
  unint64_t v66;
  std::logic_error v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  std::logic_error_vtbl *v84;
  unint64_t *v85;
  unint64_t v86;
  int8x8_t v87;
  uint8x8_t v88;
  unint64_t v89;
  uint64_t **v90;
  uint64_t *v91;
  unint64_t v92;
  char *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  void *v98;
  void *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint8x8_t v106;
  std::runtime_error_vtbl **v107;
  std::runtime_error_vtbl *i;
  unint64_t v109;
  std::runtime_error_vtbl *v110;
  float v111;
  float v112;
  _BOOL8 v113;
  unint64_t v114;
  unint64_t v115;
  int8x8_t prime;
  void *v117;
  void *v118;
  uint64_t v119;
  _QWORD *v120;
  unint64_t v121;
  uint8x8_t v122;
  unint64_t v123;
  uint8x8_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  _QWORD *v129;
  unint64_t v130;
  uint64_t v131;
  void (__cdecl **v132)(std::runtime_error *__hidden);
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  char v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  void *v150;
  _QWORD *v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  std::vector<std::string>::pointer v155;
  __int128 v156;
  __int32 *v157;
  __int32 *v158;
  __int32 *v159;
  __int32 *v160;
  __int32 *v161;
  uint64_t *v162;
  uint64_t v163;
  unsigned __int8 *v164;
  unsigned __int8 *v165;
  unsigned __int8 *v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint8x8_t v170;
  unint64_t v171;
  void **v172;
  char *v173;
  unint64_t v174;
  std::string *v175;
  __int128 v176;
  float v177;
  _BOOL8 v178;
  unint64_t v179;
  unint64_t v180;
  size_t v181;
  uint64_t v182;
  _QWORD *v183;
  unint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t j;
  uint64_t v188;
  BOOL v189;
  _QWORD *v190;
  char *v191;
  _QWORD *v192;
  _OWORD *v193;
  __int128 v194;
  uint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  void *v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  void (__cdecl *v206)(std::runtime_error *__hidden);
  unint64_t *v207;
  unint64_t v208;
  _opaque_pthread_t *v209;
  mach_port_t v210;
  std::runtime_error *v211;
  int v212;
  const char *v213;
  std::runtime_error v214;
  std::__shared_weak_count *v215;
  void (__cdecl *v216)(std::runtime_error *__hidden);
  unint64_t *v217;
  unint64_t v218;
  _opaque_pthread_t *v219;
  mach_port_t v220;
  std::runtime_error *v221;
  int v222;
  const char *v223;
  std::runtime_error v224;
  std::__shared_weak_count *v225;
  void (__cdecl *v226)(std::runtime_error *__hidden);
  unint64_t *v227;
  unint64_t v228;
  _opaque_pthread_t *v229;
  mach_port_t v230;
  std::runtime_error *v231;
  int v232;
  const char *v233;
  std::runtime_error v234;
  std::__shared_weak_count *v235;
  void (__cdecl *v236)(std::runtime_error *__hidden);
  unint64_t *v237;
  unint64_t v238;
  _opaque_pthread_t *v239;
  mach_port_t v240;
  void *exception;
  void (__cdecl *v242)(std::runtime_error *__hidden);
  _opaque_pthread_t *v243;
  mach_port_t v244;
  void *v245;
  std::runtime_error *v246;
  _QWORD *v249;
  _QWORD *v250;
  void (__cdecl **v251)(std::runtime_error *__hidden);
  uint64_t *v253;
  __int32 *v254;
  uint64_t v255;
  _BYTE v256[32];
  __int128 v257;
  std::runtime_error v258;
  char v259;
  std::logic_error v260;
  uint64_t v261;
  std::__shared_weak_count *v262;
  __int128 v263;
  __int128 v264;
  CFTypeRef cf;
  char **v266;
  char *v267[2];
  void *v268;
  __int32 *v269;
  std::runtime_error v270;
  uint64_t v271;
  std::__shared_weak_count *v272;
  _OWORD v273[3];
  uint64_t v274;
  int v275;
  char v276;
  __int128 v277;
  uint64_t v278;
  _BYTE v279[24];
  uint64_t v280;
  std::string v281;
  std::logic_error v282;
  std::runtime_error __p;
  void *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  _BYTE v289[32];
  float v290;
  std::runtime_error buf[3];
  int v292;
  uint64_t v293;

  v293 = *MEMORY[0x1E0C80C00];
  memset(v273, 0, sizeof(v273));
  (*(void (**)(std::runtime_error *__return_ptr))(*a1 + 16))(buf);
  v8 = a1[38];
  v9 = (std::__shared_weak_count *)a1[39];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v270 = buf[0];
  if (buf[0].__imp_.__imp_)
  {
    v12 = (unint64_t *)(buf[0].__imp_.__imp_ + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v271 = v8;
  v272 = v9;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  imp = (std::__shared_weak_count *)buf[0].__imp_.__imp_;
  if (buf[0].__imp_.__imp_)
  {
    v18 = (unint64_t *)(buf[0].__imp_.__imp_ + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
      std::__shared_weak_count::__release_weak(imp);
    }
  }
  (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 56))(&v268, a1);
  v267[0] = 0;
  v267[1] = 0;
  v266 = v267;
  v20 = (_QWORD *)*a3;
  v249 = a3 + 1;
  if ((_QWORD *)*a3 != a3 + 1)
  {
    v21 = a1 + 50;
    v253 = a1 + 45;
    v250 = a1 + 42;
    v251 = (void (__cdecl **)(std::runtime_error *__hidden))(a1 + 47);
    do
    {
      v23 = (__int32 *)v268;
      v22 = v269;
      v254 = v269;
      while (v23 != v22)
      {
        if (*v23 == *((_DWORD *)v20 + 7))
        {
          v24 = 1;
        }
        else
        {
          v25 = *(__int32 **)(a5 + 8);
          v26 = wmemchr(*(__int32 **)a5, *v23, ((uint64_t)v25 - *(_QWORD *)a5) >> 2);
          if (v26)
            v27 = v26;
          else
            v27 = v25;
          v24 = v27 == *(__int32 **)(a5 + 8);
        }
        (*(void (**)(std::runtime_error *__return_ptr, _QWORD *))(*a1 + 16))(buf, a1);
        v28 = (std::__shared_mutex_base *)(*((uint64_t (**)(std::runtime_error_vtbl *))buf[0].~runtime_error
                                           + 2))(buf[0].__vftable);
        core = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v277, v28, *v23);
        v30 = (std::__shared_weak_count *)buf[0].__imp_.__imp_;
        if (buf[0].__imp_.__imp_)
        {
          v31 = (unint64_t *)(buf[0].__imp_.__imp_ + 8);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v33 = (AMCP::Core::Core *)v277;
        if (!(_QWORD)v277)
        {
          AMCP::Log::Scope_Registry::get(core);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v235 = (std::__shared_weak_count *)buf[0].__imp_.__imp_;
          v236 = buf[0].~runtime_error;
          if (buf[0].__imp_.__imp_)
          {
            v237 = (unint64_t *)(buf[0].__imp_.__imp_ + 8);
            do
              v238 = __ldaxr(v237);
            while (__stlxr(v238 - 1, v237));
            if (!v238)
            {
              ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
              std::__shared_weak_count::__release_weak(v235);
            }
          }
          if (os_log_type_enabled((os_log_t)v236, OS_LOG_TYPE_ERROR))
          {
            v239 = pthread_self();
            v240 = pthread_mach_thread_np(v239);
            LODWORD(buf[0].__vftable) = 67109890;
            HIDWORD(buf[0].__vftable) = v240;
            LOWORD(buf[0].__imp_.__imp_) = 2080;
            *(const char **)((char *)&buf[0].__imp_.__imp_ + 2) = "Graph_Manager.cpp";
            WORD1(buf[1].__vftable) = 1024;
            HIDWORD(buf[1].__vftable) = 447;
            LOWORD(buf[1].__imp_.__imp_) = 2080;
            *(const char **)((char *)&buf[1].__imp_.__imp_ + 2) = "not (clock_core != nullptr)";
            _os_log_error_impl(&dword_1B57BA000, (os_log_t)v236, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v281);
          exception = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)v289);
          std::logic_error::logic_error((std::logic_error *)&v258, (const std::string *)v289);
          v258.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)&__p, (const std::logic_error *)&v258);
          v286 = 0;
          v287 = 0;
          v288 = -1;
          __p.__vftable = (std::runtime_error_vtbl *)off_1E69A1208;
          v284 = &unk_1E69A1230;
          v285 = 0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
          buf[2].__vftable = (std::runtime_error_vtbl *)"void AMCP::IO_Core::Graph_Manager::update_graph_after_config_cha"
                                                        "nge(Object_ID, std::set<Object_ID>, Config_Change_Flag, const Pr"
                                                        "evious_Devices &)";
          buf[2].__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Graph_Manager.cpp";
          v292 = 447;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v279);
          *(_QWORD *)v256 = off_1E69A20A0;
          *(_OWORD *)&v256[8] = *(_OWORD *)v279;
          *(_QWORD *)&v256[24] = *(_QWORD *)&v279[16];
          memset(v279, 0, sizeof(v279));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v256);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
        }
        AMCP::Core::Core::get_simple_required_property<1969841184u>(&cf, (AMCP::Core::Core *)v277);
        simple_required = AMCP::Core::Core::get_simple_required_property<1668047219u>(v33);
        v282.__vftable = 0;
        v282.__imp_.__imp_ = 0;
        if (v24)
        {
          __p.__vftable = (std::runtime_error_vtbl *)0x676C6F62656E676ELL;
          LODWORD(__p.__imp_.__imp_) = 0;
          AMCP::Core::Core::find_operation((AMCP::Core::Core *)buf, (int8x8_t *)v33, (unsigned int *)&__p);
          v35 = buf[0].__vftable;
          if (buf[0].__vftable)
          {
            v36 = AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>();
            v37 = std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v35, v36) != 0;
          }
          else
          {
            v37 = 0;
          }
          v38 = (std::__shared_weak_count *)buf[0].__imp_.__imp_;
          if (!buf[0].__imp_.__imp_)
            goto LABEL_42;
          v39 = (unint64_t *)(buf[0].__imp_.__imp_ + 8);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
            if ((_DWORD)v37)
            {
LABEL_43:
              v41 = *v23;
              v42 = (int8x8_t *)v277;
              v263 = v277;
              if (*((_QWORD *)&v277 + 1))
              {
                v43 = (unint64_t *)(*((_QWORD *)&v277 + 1) + 8);
                do
                  v44 = __ldxr(v43);
                while (__stxr(v44 + 1, v43));
              }
              v274 = 0x676C6F62656E676ELL;
              v275 = 0;
              operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v281, v42, (unsigned int *)&v274);
              v46 = (_QWORD *)v281.__r_.__value_.__r.__words[0];
              if (!v281.__r_.__value_.__r.__words[0])
              {
                AMCP::Log::Scope_Registry::get(operation);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
                v215 = (std::__shared_weak_count *)buf[0].__imp_.__imp_;
                v216 = buf[0].~runtime_error;
                if (buf[0].__imp_.__imp_)
                {
                  v217 = (unint64_t *)(buf[0].__imp_.__imp_ + 8);
                  do
                    v218 = __ldaxr(v217);
                  while (__stlxr(v218 - 1, v217));
                  if (!v218)
                  {
                    ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                    std::__shared_weak_count::__release_weak(v215);
                  }
                }
                if (os_log_type_enabled((os_log_t)v216, OS_LOG_TYPE_ERROR))
                {
                  v219 = pthread_self();
                  v220 = pthread_mach_thread_np(v219);
                  LODWORD(buf[0].__vftable) = 67109634;
                  HIDWORD(buf[0].__vftable) = v220;
                  LOWORD(buf[0].__imp_.__imp_) = 2080;
                  *(const char **)((char *)&buf[0].__imp_.__imp_ + 2) = "Core.h";
                  WORD1(buf[1].__vftable) = 1024;
                  HIDWORD(buf[1].__vftable) = 202;
                  _os_log_error_impl(&dword_1B57BA000, (os_log_t)v216, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", (uint8_t *)buf, 0x18u);
                }
                AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v276);
                v221 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
                caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)v289);
                std::runtime_error::runtime_error(&v258, (const std::string *)v289);
                std::runtime_error::runtime_error(&__p, &v258);
                v286 = 0;
                v287 = 0;
                v288 = -1;
                __p.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
                v284 = &unk_1E69A1FE0;
                v285 = 0;
                boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
                buf[2].__vftable = (std::runtime_error_vtbl *)"Return_Type AMCP::Core::Core::call_operation_function(cons"
                                                              "t Address &, Argument_Types...) const [Return_Type = std::"
                                                              "shared_ptr<AMCP::Core::Engine>, Argument_Types = <>]";
                buf[2].__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
                v292 = 202;
                std::vector<void *>::vector(v279);
                v222 = backtrace(*(void ***)v279, (*(_QWORD *)&v279[8] - *(_QWORD *)v279) >> 3);
                std::vector<void *>::resize((char **)v279, v222);
                *(_QWORD *)v256 = off_1E69A20A0;
                *(_OWORD *)&v256[8] = *(_OWORD *)v279;
                *(_QWORD *)&v256[24] = *(_QWORD *)&v279[16];
                memset(v279, 0, sizeof(v279));
                boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)v256);
                v221[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
                std::runtime_error::runtime_error(v221, buf);
                v221[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
                v223 = buf[1].__imp_.__imp_;
                v221[1].__imp_.__imp_ = buf[1].__imp_.__imp_;
                if (v223)
                  (*(void (**)(const char *))(*(_QWORD *)v223 + 24))(v223);
                v224 = buf[2];
                LODWORD(v221[3].__vftable) = v292;
                v221[2] = v224;
                v221->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
                v221[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
                v221[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
              }
              v47 = AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>();
              v48 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v46, v47);
              if (!v48)
              {
                AMCP::Log::Scope_Registry::get(0);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
                v225 = (std::__shared_weak_count *)buf[0].__imp_.__imp_;
                v226 = buf[0].~runtime_error;
                if (buf[0].__imp_.__imp_)
                {
                  v227 = (unint64_t *)(buf[0].__imp_.__imp_ + 8);
                  do
                    v228 = __ldaxr(v227);
                  while (__stlxr(v228 - 1, v227));
                  if (!v228)
                  {
                    ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
                    std::__shared_weak_count::__release_weak(v225);
                  }
                }
                if (os_log_type_enabled((os_log_t)v226, OS_LOG_TYPE_ERROR))
                {
                  v229 = pthread_self();
                  v230 = pthread_mach_thread_np(v229);
                  LODWORD(buf[0].__vftable) = 67109634;
                  HIDWORD(buf[0].__vftable) = v230;
                  LOWORD(buf[0].__imp_.__imp_) = 2080;
                  *(const char **)((char *)&buf[0].__imp_.__imp_ + 2) = "Operation.h";
                  WORD1(buf[1].__vftable) = 1024;
                  HIDWORD(buf[1].__vftable) = 154;
                  _os_log_error_impl(&dword_1B57BA000, (os_log_t)v226, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", (uint8_t *)buf, 0x18u);
                }
                AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v276);
                v231 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
                caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)v289);
                std::runtime_error::runtime_error(&v258, (const std::string *)v289);
                std::runtime_error::runtime_error(&__p, &v258);
                v286 = 0;
                v287 = 0;
                v288 = -1;
                __p.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
                v284 = &unk_1E69A1FE0;
                v285 = 0;
                boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
                buf[2].__vftable = (std::runtime_error_vtbl *)"Return_Type AMCP::Core::Operation::call_function(Argument_"
                                                              "Types...) const [Return_Type = std::shared_ptr<AMCP::Core:"
                                                              ":Engine>, Argument_Types = <>]";
                buf[2].__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
                v292 = 154;
                std::vector<void *>::vector(v279);
                v232 = backtrace(*(void ***)v279, (*(_QWORD *)&v279[8] - *(_QWORD *)v279) >> 3);
                std::vector<void *>::resize((char **)v279, v232);
                *(_QWORD *)v256 = off_1E69A20A0;
                *(_OWORD *)&v256[8] = *(_OWORD *)v279;
                *(_QWORD *)&v256[24] = *(_QWORD *)&v279[16];
                memset(v279, 0, sizeof(v279));
                boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)v256);
                v231[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
                std::runtime_error::runtime_error(v231, buf);
                v231[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
                v233 = buf[1].__imp_.__imp_;
                v231[1].__imp_.__imp_ = buf[1].__imp_.__imp_;
                if (v233)
                  (*(void (**)(const char *))(*(_QWORD *)v233 + 24))(v233);
                v234 = buf[2];
                LODWORD(v231[3].__vftable) = v292;
                v231[2] = v234;
                v231->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
                v231[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
                v231[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
              }
              v49 = v48;
              if (!*((_QWORD *)v48 + 7)
                || (buf[0].__vftable = (std::runtime_error_vtbl *)AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>(),
                    (v48 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, std::runtime_error *))v49
                                                         + 7))(4, (uint64_t)v49 + 24, 0, buf)) == 0))
              {
                AMCP::Log::Scope_Registry::get(v48);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
                v205 = (std::__shared_weak_count *)buf[0].__imp_.__imp_;
                v206 = buf[0].~runtime_error;
                if (buf[0].__imp_.__imp_)
                {
                  v207 = (unint64_t *)(buf[0].__imp_.__imp_ + 8);
                  do
                    v208 = __ldaxr(v207);
                  while (__stlxr(v208 - 1, v207));
                  if (!v208)
                  {
                    ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                    std::__shared_weak_count::__release_weak(v205);
                  }
                }
                if (os_log_type_enabled((os_log_t)v206, OS_LOG_TYPE_ERROR))
                {
                  v209 = pthread_self();
                  v210 = pthread_mach_thread_np(v209);
                  LODWORD(buf[0].__vftable) = 67109634;
                  HIDWORD(buf[0].__vftable) = v210;
                  LOWORD(buf[0].__imp_.__imp_) = 2080;
                  *(const char **)((char *)&buf[0].__imp_.__imp_ + 2) = "Operation.h";
                  WORD1(buf[1].__vftable) = 1024;
                  HIDWORD(buf[1].__vftable) = 161;
                  _os_log_error_impl(&dword_1B57BA000, (os_log_t)v206, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", (uint8_t *)buf, 0x18u);
                }
                AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v276);
                v211 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
                caulk::make_string((caulk *)"Invalid cast", (uint64_t)v289);
                std::runtime_error::runtime_error(&v258, (const std::string *)v289);
                std::runtime_error::runtime_error(&__p, &v258);
                v286 = 0;
                v287 = 0;
                v288 = -1;
                __p.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
                v284 = &unk_1E69A1FE0;
                v285 = 0;
                boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
                buf[2].__vftable = (std::runtime_error_vtbl *)"Return_Type AMCP::Core::Operation::call_function(Argument_"
                                                              "Types...) const [Return_Type = std::shared_ptr<AMCP::Core:"
                                                              ":Engine>, Argument_Types = <>]";
                buf[2].__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
                v292 = 161;
                std::vector<void *>::vector(v279);
                v212 = backtrace(*(void ***)v279, (*(_QWORD *)&v279[8] - *(_QWORD *)v279) >> 3);
                std::vector<void *>::resize((char **)v279, v212);
                *(_QWORD *)v256 = off_1E69A20A0;
                *(_OWORD *)&v256[8] = *(_OWORD *)v279;
                *(_QWORD *)&v256[24] = *(_QWORD *)&v279[16];
                memset(v279, 0, sizeof(v279));
                boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)v256);
                v211[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
                std::runtime_error::runtime_error(v211, buf);
                v211[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
                v213 = buf[1].__imp_.__imp_;
                v211[1].__imp_.__imp_ = buf[1].__imp_.__imp_;
                if (v213)
                  (*(void (**)(const char *))(*(_QWORD *)v213 + 24))(v213);
                v214 = buf[2];
                LODWORD(v211[3].__vftable) = v292;
                v211[2] = v214;
                v211->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
                v211[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
                v211[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
              }
              v50 = *((_QWORD *)v48 + 3);
              if (!v50)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v50 + 48))(&v264);
              size = (std::__shared_weak_count *)v281.__r_.__value_.__l.__size_;
              if (v281.__r_.__value_.__l.__size_)
              {
                v52 = (unint64_t *)(v281.__r_.__value_.__l.__size_ + 8);
                do
                  v53 = __ldaxr(v52);
                while (__stlxr(v53 - 1, v52));
                if (!v53)
                {
                  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                  std::__shared_weak_count::__release_weak(size);
                }
              }
              v5 = a1[46];
              if (v5)
              {
                v54 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
                v54.i16[0] = vaddlv_u8(v54);
                if (v54.u32[0] > 1uLL)
                {
                  v37 = v41;
                  if (v5 <= v41)
                    v37 = v41 % v5;
                }
                else
                {
                  v37 = ((_DWORD)v5 - 1) & v41;
                }
                v55 = *(void ***)(*v253 + 8 * v37);
                if (v55)
                {
                  v56 = (std::runtime_error_vtbl *)*v55;
                  if (*v55)
                  {
                    do
                    {
                      v57 = (unint64_t)v56->~runtime_error_0;
                      if (v57 == v41)
                      {
                        if (LODWORD(v56->what) == (_DWORD)v41)
                          goto LABEL_96;
                      }
                      else
                      {
                        if (v54.u32[0] > 1uLL)
                        {
                          if (v57 >= v5)
                            v57 %= v5;
                        }
                        else
                        {
                          v57 &= v5 - 1;
                        }
                        if (v57 != v37)
                          break;
                      }
                      v56 = (std::runtime_error_vtbl *)v56->~runtime_error;
                    }
                    while (v56);
                  }
                }
              }
              v56 = (std::runtime_error_vtbl *)operator new(0x28uLL);
              buf[0].__vftable = v56;
              buf[0].__imp_.__imp_ = (const char *)(a1 + 47);
              v56->~runtime_error = 0;
              v56->~runtime_error_0 = (void (__cdecl *)(std::runtime_error *__hidden))v41;
              LODWORD(v56->what) = v41;
              v56[1].~runtime_error = 0;
              v56[1].~runtime_error_0 = 0;
              LOBYTE(buf[1].__vftable) = 1;
              v58 = (float)(unint64_t)(a1[48] + 1);
              v59 = *((float *)a1 + 98);
              if (!v5 || (float)(v59 * (float)v5) < v58)
              {
                v60 = (v5 & (v5 - 1)) != 0;
                if (v5 < 3)
                  v60 = 1;
                v61 = v60 | (2 * v5);
                v62 = vcvtps_u32_f32(v58 / v59);
                if (v61 <= v62)
                  v63 = v62;
                else
                  v63 = v61;
                std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)v253, v63);
                v5 = a1[46];
                if ((v5 & (v5 - 1)) != 0)
                {
                  if (v5 <= v41)
                    v37 = v41 % v5;
                  else
                    v37 = v41;
                }
                else
                {
                  v37 = ((_DWORD)v5 - 1) & v41;
                }
              }
              v64 = *v253;
              v65 = *(void (__cdecl ***)(std::runtime_error *__hidden))(*v253 + 8 * v37);
              if (v65)
              {
                v56->~runtime_error = *v65;
                goto LABEL_94;
              }
              v56->~runtime_error = *v251;
              *v251 = (void (__cdecl *)(std::runtime_error *__hidden))v56;
              *(_QWORD *)(v64 + 8 * v37) = v251;
              if (v56->~runtime_error)
              {
                v66 = *((_QWORD *)v56->~runtime_error + 1);
                if ((v5 & (v5 - 1)) != 0)
                {
                  if (v66 >= v5)
                    v66 %= v5;
                }
                else
                {
                  v66 &= v5 - 1;
                }
                v65 = (void (__cdecl **)(std::runtime_error *__hidden))(*v253 + 8 * v66);
LABEL_94:
                *v65 = (void (__cdecl *)(std::runtime_error *__hidden))v56;
              }
              buf[0].__vftable = 0;
              ++a1[48];
              std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
LABEL_96:
              std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](&v56[1].~runtime_error, v264, *((uint64_t *)&v264 + 1));
              v67 = (std::logic_error)v264;
              v264 = 0uLL;
              v68 = (std::__shared_weak_count *)v282.__imp_.__imp_;
              v282 = v67;
              if (v68)
              {
                v69 = (unint64_t *)&v68->__shared_owners_;
                do
                  v70 = __ldaxr(v69);
                while (__stlxr(v70 - 1, v69));
                if (!v70)
                {
                  ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                  std::__shared_weak_count::__release_weak(v68);
                }
              }
              v71 = (std::__shared_weak_count *)*((_QWORD *)&v264 + 1);
              if (*((_QWORD *)&v264 + 1))
              {
                v72 = (unint64_t *)(*((_QWORD *)&v264 + 1) + 8);
                do
                  v73 = __ldaxr(v72);
                while (__stlxr(v73 - 1, v72));
                if (!v73)
                {
                  ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                  std::__shared_weak_count::__release_weak(v71);
                }
              }
              v74 = (std::__shared_weak_count *)*((_QWORD *)&v263 + 1);
              if (*((_QWORD *)&v263 + 1))
              {
                v75 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
                do
                  v76 = __ldaxr(v75);
                while (__stlxr(v76 - 1, v75));
                if (!v76)
                {
                  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                  std::__shared_weak_count::__release_weak(v74);
                }
              }
            }
          }
          else
          {
LABEL_42:
            if ((_DWORD)v37)
              goto LABEL_43;
          }
        }
        if (!cf)
        {
          v246 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v246, "Could not construct");
          __cxa_throw(v246, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v77 = *v21;
        applesauce::CF::convert_to<std::string,0>((uint64_t)buf, (const __CFString *)cf);
        AMCP::IO_Core::Device_Timebase_Factory::demand_timebase_for_device(&v261, v77, &v282, (uint64_t)buf);
        v79 = v262;
        if (v262)
        {
          v80 = (unint64_t *)&v262->__shared_owners_;
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        if (SHIBYTE(buf[1].__vftable) < 0)
          operator delete(buf[0].__vftable);
        if (simple_required != 1633969526)
          goto LABEL_261;
        if (!v24)
          goto LABEL_252;
        v82 = *v23;
        v84 = v282.__vftable;
        v83 = (std::__shared_weak_count *)v282.__imp_.__imp_;
        v260 = v282;
        if (v282.__imp_.__imp_)
        {
          v85 = (unint64_t *)(v282.__imp_.__imp_ + 8);
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
        v87 = (int8x8_t)a1[41];
        if (!*(_QWORD *)&v87)
          goto LABEL_140;
        v88 = (uint8x8_t)vcnt_s8(v87);
        v88.i16[0] = vaddlv_u8(v88);
        if (v88.u32[0] > 1uLL)
        {
          v89 = v82;
          if (*(_QWORD *)&v87 <= v82)
            v89 = v82 % *(_QWORD *)&v87;
        }
        else
        {
          v89 = (v87.i32[0] - 1) & v82;
        }
        v90 = *(uint64_t ***)(a1[40] + 8 * v89);
        if (!v90)
          goto LABEL_140;
        v91 = *v90;
        if (!v91)
          goto LABEL_140;
        while (1)
        {
          v92 = v91[1];
          if (v92 == v82)
            break;
          if (v88.u32[0] > 1uLL)
          {
            if (v92 >= *(_QWORD *)&v87)
              v92 %= *(_QWORD *)&v87;
          }
          else
          {
            v92 &= *(_QWORD *)&v87 - 1;
          }
          if (v92 != v89)
            goto LABEL_140;
LABEL_139:
          v91 = (uint64_t *)*v91;
          if (!v91)
            goto LABEL_140;
        }
        if (*((_DWORD *)v91 + 4) != (_DWORD)v82)
          goto LABEL_139;
        if ((a4 & 1) == 0)
        {
          v126 = v91[4];
          *(_QWORD *)v256 = v91[3];
          *(_QWORD *)&v256[8] = v126;
          if (v126)
          {
            v127 = (unint64_t *)(v126 + 8);
            do
              v128 = __ldxr(v127);
            while (__stxr(v128 + 1, v127));
          }
          goto LABEL_158;
        }
LABEL_140:
        v93 = (char *)operator new(0xD0uLL);
        v5 = (unint64_t)v93;
        *((_QWORD *)v93 + 1) = 0;
        *((_QWORD *)v93 + 2) = 0;
        *(_QWORD *)v93 = &off_1E699CFB0;
        if (v83)
        {
          v94 = (unint64_t *)&v83->__shared_owners_;
          do
            v95 = __ldxr(v94);
          while (__stxr(v95 + 1, v94));
        }
        *((_QWORD *)v93 + 7) = 0;
        *(_OWORD *)(v93 + 24) = 0u;
        *(_OWORD *)(v93 + 40) = 0u;
        *((_DWORD *)v93 + 16) = 1065353216;
        *(_OWORD *)(v93 + 72) = 0u;
        *(_OWORD *)(v93 + 88) = 0u;
        *((_DWORD *)v93 + 26) = 1065353216;
        *((_DWORD *)v93 + 28) = v82;
        *((_QWORD *)v93 + 15) = v84;
        *((_QWORD *)v93 + 16) = v83;
        if (v83)
        {
          v96 = (unint64_t *)&v83->__shared_owners_;
          do
            v97 = __ldxr(v96);
          while (__stxr(v97 + 1, v96));
        }
        *((_OWORD *)v93 + 11) = 0u;
        *((_OWORD *)v93 + 12) = 0u;
        *((_OWORD *)v93 + 10) = 0u;
        *((_QWORD *)v93 + 17) = 0;
        *((_QWORD *)v93 + 18) = 0;
        *((_DWORD *)v93 + 38) = 0;
        if (v84)
        {
          (*((void (**)(std::runtime_error *__return_ptr, std::logic_error_vtbl *))v84->~logic_error + 19))(buf, v84);
          v98 = *(void **)(v5 + 184);
          if (v98)
            operator delete(v98);
          *(_QWORD *)(v5 + 184) = buf[0].__vftable;
          *(std::runtime_error *)(v5 + 192) = *(std::runtime_error *)&buf[0].__imp_.__imp_;
          (*((void (**)(std::runtime_error *__return_ptr, std::logic_error_vtbl *))v84->~logic_error + 21))(buf, v84);
          v99 = *(void **)(v5 + 160);
          if (v99)
            operator delete(v99);
          *(_QWORD *)(v5 + 160) = buf[0].__vftable;
          *(std::runtime_error *)(v5 + 168) = *(std::runtime_error *)&buf[0].__imp_.__imp_;
        }
        if (v83)
        {
          v100 = (unint64_t *)&v83->__shared_owners_;
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        *(_QWORD *)v256 = v5 + 24;
        *(_QWORD *)&v256[8] = v5;
        v83 = (std::__shared_weak_count *)v260.__imp_.__imp_;
LABEL_158:
        if (v83)
        {
          v102 = (unint64_t *)&v83->__shared_owners_;
          do
            v103 = __ldaxr(v102);
          while (__stlxr(v103 - 1, v102));
          if (!v103)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        if (v282.__vftable)
        {
          AMCP::IO_Core::Device_Node_Factory::create_node_descriptions_from_device((uint64_t)buf, (uint64_t *)&v270, a1 + 50, *v23, (uint64_t *)v256);
          v104 = *v23;
          v105 = a1[41];
          if (v105)
          {
            v106 = (uint8x8_t)vcnt_s8((int8x8_t)v105);
            v106.i16[0] = vaddlv_u8(v106);
            if (v106.u32[0] > 1uLL)
            {
              v82 = *v23;
              if (v105 <= v104)
                v82 = v104 % v105;
            }
            else
            {
              v82 = ((_DWORD)v105 - 1) & v104;
            }
            v107 = *(std::runtime_error_vtbl ***)(a1[40] + 8 * v82);
            if (v107)
            {
              for (i = *v107; i; i = (std::runtime_error_vtbl *)i->~runtime_error)
              {
                v109 = (unint64_t)i->~runtime_error_0;
                if (v109 == v104)
                {
                  if (LODWORD(i->what) == (_DWORD)v104)
                    goto LABEL_241;
                }
                else
                {
                  if (v106.u32[0] > 1uLL)
                  {
                    if (v109 >= v105)
                      v109 %= v105;
                  }
                  else
                  {
                    v109 &= v105 - 1;
                  }
                  if (v109 != v82)
                    break;
                }
              }
            }
          }
          v110 = (std::runtime_error_vtbl *)operator new(0x28uLL);
          __p.__vftable = v110;
          __p.__imp_.__imp_ = (const char *)(a1 + 42);
          v110->~runtime_error = 0;
          v110->~runtime_error_0 = (void (__cdecl *)(std::runtime_error *__hidden))v104;
          LODWORD(v110->what) = *v23;
          v110[1].~runtime_error = 0;
          v110[1].~runtime_error_0 = 0;
          LOBYTE(v284) = 1;
          v111 = (float)(unint64_t)(a1[43] + 1);
          v112 = *((float *)a1 + 88);
          if (v105 && (float)(v112 * (float)v105) >= v111)
          {
            v104 = v82;
            goto LABEL_231;
          }
          v113 = (v105 & (v105 - 1)) != 0;
          if (v105 < 3)
            v113 = 1;
          v114 = v113 | (2 * v105);
          v115 = vcvtps_u32_f32(v111 / v112);
          if (v114 <= v115)
            prime = (int8x8_t)v115;
          else
            prime = (int8x8_t)v114;
          if (*(_QWORD *)&prime == 1)
          {
            prime = (int8x8_t)2;
          }
          else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
          {
            prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
            v105 = a1[41];
          }
          if (*(_QWORD *)&prime <= v105)
          {
            if (*(_QWORD *)&prime < v105)
            {
              v123 = vcvtps_u32_f32((float)(unint64_t)a1[43] / *((float *)a1 + 88));
              if (v105 < 3
                || (v124 = (uint8x8_t)vcnt_s8((int8x8_t)v105), v124.i16[0] = vaddlv_u8(v124), v124.u32[0] > 1uLL))
              {
                v123 = std::__next_prime(v123);
              }
              else
              {
                v125 = 1 << -(char)__clz(v123 - 1);
                if (v123 >= 2)
                  v123 = v125;
              }
              if (*(_QWORD *)&prime <= v123)
                prime = (int8x8_t)v123;
              if (*(_QWORD *)&prime >= v105)
              {
                v105 = a1[41];
              }
              else
              {
                if (prime)
                  goto LABEL_193;
                v150 = (void *)a1[40];
                a1[40] = 0;
                if (v150)
                  operator delete(v150);
                v105 = 0;
                a1[41] = 0;
              }
            }
          }
          else
          {
LABEL_193:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v117 = operator new(8 * *(_QWORD *)&prime);
            v118 = (void *)a1[40];
            a1[40] = v117;
            if (v118)
              operator delete(v118);
            v119 = 0;
            a1[41] = prime;
            do
              *(_QWORD *)(a1[40] + 8 * v119++) = 0;
            while (*(_QWORD *)&prime != v119);
            v120 = (_QWORD *)*v250;
            if (*v250)
            {
              v121 = v120[1];
              v122 = (uint8x8_t)vcnt_s8(prime);
              v122.i16[0] = vaddlv_u8(v122);
              if (v122.u32[0] > 1uLL)
              {
                if (v121 >= *(_QWORD *)&prime)
                  v121 %= *(_QWORD *)&prime;
              }
              else
              {
                v121 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(a1[40] + 8 * v121) = v250;
              v129 = (_QWORD *)*v120;
              if (*v120)
              {
                do
                {
                  v130 = v129[1];
                  if (v122.u32[0] > 1uLL)
                  {
                    if (v130 >= *(_QWORD *)&prime)
                      v130 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v130 &= *(_QWORD *)&prime - 1;
                  }
                  if (v130 != v121)
                  {
                    v131 = a1[40];
                    if (!*(_QWORD *)(v131 + 8 * v130))
                    {
                      *(_QWORD *)(v131 + 8 * v130) = v120;
                      goto LABEL_223;
                    }
                    *v120 = *v129;
                    *v129 = **(_QWORD **)(a1[40] + 8 * v130);
                    **(_QWORD **)(a1[40] + 8 * v130) = v129;
                    v129 = v120;
                  }
                  v130 = v121;
LABEL_223:
                  v120 = v129;
                  v129 = (_QWORD *)*v129;
                  v121 = v130;
                }
                while (v129);
              }
            }
            v105 = (unint64_t)prime;
          }
          if ((v105 & (v105 - 1)) != 0)
          {
            if (v105 <= v104)
              v104 %= v105;
          }
          else
          {
            v104 = ((_DWORD)v105 - 1) & v104;
          }
LABEL_231:
          v132 = *(void (__cdecl ***)(std::runtime_error *__hidden))(a1[40] + 8 * v104);
          i = __p.__vftable;
          if (v132)
          {
            __p.~runtime_error = *v132;
            goto LABEL_239;
          }
          __p.~runtime_error = (void (__cdecl *)(std::runtime_error *__hidden))a1[42];
          a1[42] = i;
          *(_QWORD *)(a1[40] + 8 * v104) = v250;
          if (i->~runtime_error)
          {
            v133 = *((_QWORD *)i->~runtime_error + 1);
            if ((v105 & (v105 - 1)) != 0)
            {
              if (v133 >= v105)
                v133 %= v105;
            }
            else
            {
              v133 &= v105 - 1;
            }
            v132 = (void (__cdecl **)(std::runtime_error *__hidden))(a1[40] + 8 * v133);
LABEL_239:
            *v132 = (void (__cdecl *)(std::runtime_error *__hidden))i;
          }
          __p.__vftable = 0;
          ++a1[43];
          std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
LABEL_241:
          std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](&i[1].~runtime_error, (uint64_t)buf[1].__imp_.__imp_, (uint64_t)buf[2].__vftable);
          __p.__vftable = 0;
          __p.__imp_.__imp_ = 0;
          v284 = 0;
          std::vector<AMCP::Node_Description>::__init_with_size[abi:ne180100]<AMCP::Node_Description*,AMCP::Node_Description*>(&__p, (uint64_t)buf[0].__vftable, (uint64_t)buf[0].__imp_.__imp_, 0xEEEEEEEEEEEEEEEFLL * ((buf[0].__imp_.__imp_ - (const char *)buf[0].__vftable) >> 3));
          std::vector<AMCP::Node_Description>::__insert_with_size[abi:ne180100]<std::__wrap_iter<AMCP::Node_Description*>,std::__wrap_iter<AMCP::Node_Description*>>((uint64_t *)v273, *(uint64_t *)&v273[0], (const AMCP::Node_Description *)__p.__vftable, (uint64_t)__p.__imp_.__imp_, 0xEEEEEEEEEEEEEEEFLL * ((__p.__imp_.__imp_ - (const char *)__p.__vftable) >> 3));
          *(_QWORD *)v289 = &__p;
          std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)v289);
          v134 = (std::__shared_weak_count *)buf[2].__vftable;
          if (buf[2].__vftable)
          {
            v135 = (unint64_t *)&buf[2].~runtime_error_0;
            do
              v136 = __ldaxr(v135);
            while (__stlxr(v136 - 1, v135));
            if (!v136)
            {
              ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
              std::__shared_weak_count::__release_weak(v134);
            }
          }
          __p.__vftable = (std::runtime_error_vtbl *)buf;
          std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        }
        v137 = *(std::__shared_weak_count **)&v256[8];
        if (*(_QWORD *)&v256[8])
        {
          v138 = (unint64_t *)(*(_QWORD *)&v256[8] + 8);
          do
            v139 = __ldaxr(v138);
          while (__stlxr(v139 - 1, v138));
          if (!v139)
          {
            ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
            std::__shared_weak_count::__release_weak(v137);
          }
        }
LABEL_252:
        LODWORD(v78) = 0;
        do
        {
          v140 = v78;
          AMCP::create_device_node_uid_from_device_uid_and_direction((const __CFString **)&cf, v78, (void **)&buf[0].__vftable);
          AMCP::IO_Core::Device_Timebase_Factory::demand_timebase_for_device(&__p, *v21, &v282, (uint64_t)buf);
          v141 = (std::__shared_weak_count *)__p.__imp_.__imp_;
          if (__p.__imp_.__imp_)
          {
            v142 = (unint64_t *)(__p.__imp_.__imp_ + 8);
            do
              v143 = __ldaxr(v142);
            while (__stlxr(v143 - 1, v142));
            if (!v143)
            {
              ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
              std::__shared_weak_count::__release_weak(v141);
            }
          }
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v266, buf, (uint64_t)buf);
          if (SHIBYTE(buf[1].__vftable) < 0)
            operator delete(buf[0].__vftable);
          v78 = 1;
        }
        while ((v140 & 1) == 0);
LABEL_261:
        v144 = (std::__shared_weak_count *)v282.__imp_.__imp_;
        if (v282.__imp_.__imp_)
        {
          v145 = (unint64_t *)(v282.__imp_.__imp_ + 8);
          do
            v146 = __ldaxr(v145);
          while (__stlxr(v146 - 1, v145));
          if (!v146)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v144->__on_zero_shared)(v144, v78);
            std::__shared_weak_count::__release_weak(v144);
          }
        }
        if (cf)
          CFRelease(cf);
        v147 = (std::__shared_weak_count *)*((_QWORD *)&v277 + 1);
        if (*((_QWORD *)&v277 + 1))
        {
          v148 = (unint64_t *)(*((_QWORD *)&v277 + 1) + 8);
          do
            v149 = __ldaxr(v148);
          while (__stlxr(v149 - 1, v148));
          if (!v149)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v147->__on_zero_shared)(v147, v78);
            std::__shared_weak_count::__release_weak(v147);
          }
        }
        ++v23;
        v22 = v254;
      }
      v151 = (_QWORD *)v20[1];
      if (v151)
      {
        do
        {
          v152 = v151;
          v151 = (_QWORD *)*v151;
        }
        while (v151);
      }
      else
      {
        do
        {
          v152 = (_QWORD *)v20[2];
          v189 = *v152 == (_QWORD)v20;
          v20 = v152;
        }
        while (!v189);
      }
      v20 = v152;
    }
    while (v152 != v249);
  }
  memset(buf, 0, sizeof(buf));
  AMCP::IO_Core::Graph_Manager::modify_graph_internal((AMCP::IO_Core::Graph_Manager *)&v258, (const AMCP::Graph_Description *)a1, (const AMCP::Modify_Graph_Destroy_List *)v273, (unsigned __int8 **)buf);
  __p.__vftable = (std::runtime_error_vtbl *)&buf[1].__imp_;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__vftable = (std::runtime_error_vtbl *)buf;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  (*(void (**)(_QWORD *, _QWORD))(*a1 + 32))(a1, a2);
  v257 = 0u;
  memset(v256, 0, sizeof(v256));
  v154 = *(_QWORD *)(a5 + 24);
  v153 = *(_QWORD *)(a5 + 32);
  if (v154 != v153)
  {
    v155 = 0;
    do
    {
      if (v267 == std::__tree<std::string>::find<std::string>((uint64_t)&v266, (_QWORD *)v154))
      {
        if ((unint64_t)v155 >= *(_QWORD *)&v256[16])
        {
          v155 = std::vector<std::string>::__push_back_slow_path<std::string const&>((std::vector<std::string> *)v256, (__int128 *)v154);
        }
        else
        {
          if (*(char *)(v154 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v155, *(const std::string::value_type **)v154, *(_QWORD *)(v154 + 8));
          }
          else
          {
            v156 = *(_OWORD *)v154;
            v155->__r_.__value_.__r.__words[2] = *(_QWORD *)(v154 + 16);
            *(_OWORD *)&v155->__r_.__value_.__l.__data_ = v156;
          }
          ++v155;
        }
        *(_QWORD *)&v256[8] = v155;
      }
      v154 += 24;
    }
    while (v154 != v153);
  }
  memset(buf, 0, sizeof(buf));
  AMCP::IO_Core::Graph_Manager::modify_graph_internal((AMCP::IO_Core::Graph_Manager *)&__p, (const AMCP::Graph_Description *)a1, (const AMCP::Modify_Graph_Destroy_List *)buf, (unsigned __int8 **)v256);
  std::__optional_storage_base<std::vector<unsigned int>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned int>,false>>((uint64_t)&v258, (__n128 *)&__p);
  if ((_BYTE)v285 && __p.__vftable)
    operator delete(__p.__vftable);
  *(_QWORD *)v289 = &buf[1].__imp_;
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)v289);
  *(_QWORD *)v289 = buf;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)v289);
  v157 = *(__int32 **)a5;
  v158 = *(__int32 **)(a5 + 8);
  if (*(__int32 **)a5 != v158)
  {
    do
    {
      v159 = v269;
      v160 = wmemchr((__int32 *)v268, *v157, ((char *)v269 - (_BYTE *)v268) >> 2);
      if (v160)
        v161 = v160;
      else
        v161 = v159;
      if (v161 == v269)
      {
        v162 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(a1 + 45, *v157);
        if (v162)
        {
          std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<AMCP::Core::Engine>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<AMCP::Core::Engine>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<AMCP::Core::Engine>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<AMCP::Core::Engine>>>>::remove((uint64_t)buf, a1 + 45, v162);
          std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
        }
      }
      ++v157;
    }
    while (v157 != v158);
  }
  v163 = a1[50];
  memset(v289, 0, sizeof(v289));
  v290 = 1.0;
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)v289, (unint64_t)(float)*(unint64_t *)(v163 + 64));
  v164 = *(unsigned __int8 **)(v163 + 56);
  if (v164)
  {
    v255 = v163;
    do
    {
      v165 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>((_QWORD *)v163, v164 + 16);
      if (!v165)
      {
        AMCP::Log::Scope_Registry::get(0);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v242 = buf[0].~runtime_error;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled((os_log_t)v242, OS_LOG_TYPE_ERROR))
        {
          v243 = pthread_self();
          v244 = pthread_mach_thread_np(v243);
          LODWORD(buf[0].__vftable) = 67109890;
          HIDWORD(buf[0].__vftable) = v244;
          LOWORD(buf[0].__imp_.__imp_) = 2080;
          *(const char **)((char *)&buf[0].__imp_.__imp_ + 2) = "Device_Timebase_Factory.cpp";
          WORD1(buf[1].__vftable) = 1024;
          HIDWORD(buf[1].__vftable) = 58;
          LOWORD(buf[1].__imp_.__imp_) = 2080;
          *(const char **)((char *)&buf[1].__imp_.__imp_ + 2) = "not (found != m_timebases_by_uid.end())";
          _os_log_error_impl(&dword_1B57BA000, (os_log_t)v242, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v264);
        v245 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v281);
        std::logic_error::logic_error(&v282, &v281);
        v282.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error((std::logic_error *)&__p, &v282);
        v286 = 0;
        v287 = 0;
        v288 = -1;
        __p.__vftable = (std::runtime_error_vtbl *)off_1E69A1208;
        v284 = &unk_1E69A1230;
        v285 = 0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
        buf[2].__vftable = (std::runtime_error_vtbl *)"void AMCP::IO_Core::Device_Timebase_Factory::update_after_config_change()";
        buf[2].__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase_Factory.cpp";
        v292 = 58;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v277);
        *(_OWORD *)&v279[8] = v277;
        *(_QWORD *)v279 = off_1E69A20A0;
        v280 = v278;
        v277 = 0uLL;
        v278 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v279);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v245, (uint64_t)buf);
      }
      v166 = v165;
      v167 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v164 + 16));
      v168 = v167;
      v169 = *(_QWORD *)&v289[8];
      if (*(_QWORD *)&v289[8])
      {
        v170 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v289[8]);
        v170.i16[0] = vaddlv_u8(v170);
        v171 = v170.u32[0];
        if (v170.u32[0] > 1uLL)
        {
          v5 = v167;
          if (v167 >= *(_QWORD *)&v289[8])
            v5 = v167 % *(_QWORD *)&v289[8];
        }
        else
        {
          v5 = (*(_QWORD *)&v289[8] - 1) & v167;
        }
        v172 = *(void ***)(*(_QWORD *)v289 + 8 * v5);
        if (v172)
        {
          v173 = (char *)*v172;
          if (*v172)
          {
            while (1)
            {
              v174 = *((_QWORD *)v173 + 1);
              if (v174 == v168)
              {
                if (std::__equal_to::operator()[abi:ne180100]<std::string,std::string>((unsigned __int8 *)v173 + 16, v164 + 16))
                {
                  v163 = v255;
                  goto LABEL_356;
                }
              }
              else
              {
                if (v171 > 1)
                {
                  if (v174 >= v169)
                    v174 %= v169;
                }
                else
                {
                  v174 &= v169 - 1;
                }
                if (v174 != v5)
                {
LABEL_330:
                  v163 = v255;
                  break;
                }
              }
              v173 = *(char **)v173;
              if (!v173)
                goto LABEL_330;
            }
          }
        }
      }
      v173 = (char *)operator new(0x38uLL);
      buf[0].__vftable = (std::runtime_error_vtbl *)v173;
      buf[0].__imp_.__imp_ = &v289[16];
      LOBYTE(buf[1].__vftable) = 0;
      *(_QWORD *)v173 = 0;
      *((_QWORD *)v173 + 1) = v168;
      v175 = (std::string *)(v173 + 16);
      if ((char)v164[39] < 0)
      {
        std::string::__init_copy_ctor_external(v175, *((const std::string::value_type **)v164 + 2), *((_QWORD *)v164 + 3));
      }
      else
      {
        v176 = *((_OWORD *)v164 + 1);
        *((_QWORD *)v173 + 4) = *((_QWORD *)v164 + 4);
        *(_OWORD *)&v175->__r_.__value_.__l.__data_ = v176;
      }
      *((_QWORD *)v173 + 5) = 0;
      *((_QWORD *)v173 + 6) = 0;
      LOBYTE(buf[1].__vftable) = 1;
      v177 = (float)(unint64_t)(*(_QWORD *)&v289[24] + 1);
      if (!v169 || (float)(v290 * (float)v169) < v177)
      {
        v178 = (v169 & (v169 - 1)) != 0;
        if (v169 < 3)
          v178 = 1;
        v179 = v178 | (2 * v169);
        v180 = vcvtps_u32_f32(v177 / v290);
        if (v179 <= v180)
          v181 = v180;
        else
          v181 = v179;
        std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)v289, v181);
        v169 = *(_QWORD *)&v289[8];
        if ((v169 & (v169 - 1)) != 0)
        {
          if (v168 >= *(_QWORD *)&v289[8])
            v5 = v168 % *(_QWORD *)&v289[8];
          else
            v5 = v168;
        }
        else
        {
          v5 = (*(_QWORD *)&v289[8] - 1) & v168;
        }
      }
      v182 = *(_QWORD *)v289;
      v183 = *(_QWORD **)(*(_QWORD *)v289 + 8 * v5);
      if (v183)
      {
        *(_QWORD *)v173 = *v183;
      }
      else
      {
        *(_QWORD *)v173 = *(_QWORD *)&v289[16];
        *(_QWORD *)&v289[16] = v173;
        *(_QWORD *)(v182 + 8 * v5) = &v289[16];
        if (!*(_QWORD *)v173)
          goto LABEL_355;
        v184 = *(_QWORD *)(*(_QWORD *)v173 + 8);
        if ((v169 & (v169 - 1)) != 0)
        {
          if (v184 >= v169)
            v184 %= v169;
        }
        else
        {
          v184 &= v169 - 1;
        }
        v183 = (_QWORD *)(*(_QWORD *)v289 + 8 * v184);
      }
      *v183 = v173;
LABEL_355:
      buf[0].__vftable = 0;
      ++*(_QWORD *)&v289[24];
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
LABEL_356:
      std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)v173 + 5, *((_QWORD *)v166 + 5), *((_QWORD *)v166 + 6));
      v164 = *(unsigned __int8 **)v164;
    }
    while (v164);
  }
  if (v289 != (_BYTE *)v163)
  {
    *(float *)(v163 + 32) = v290;
    v185 = *(uint64_t **)&v289[16];
    v186 = *(_QWORD *)(v163 + 8);
    if (v186)
    {
      for (j = 0; j != v186; ++j)
        *(_QWORD *)(*(_QWORD *)v163 + 8 * j) = 0;
      v188 = *(_QWORD *)(v163 + 16);
      *(_QWORD *)(v163 + 16) = 0;
      *(_QWORD *)(v163 + 24) = 0;
      if (v188)
        v189 = v185 == 0;
      else
        v189 = 1;
      if (v189)
      {
        v190 = (_QWORD *)v188;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v188 + 16), (const std::string *)(v185 + 2));
          std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(v188 + 40), v185[5], v185[6]);
          v190 = *(_QWORD **)v188;
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(v163, v188);
          v185 = (uint64_t *)*v185;
          if (!v190)
            break;
          v188 = (uint64_t)v190;
        }
        while (v185);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__deallocate_node(v190);
    }
    for (; v185; v185 = (uint64_t *)*v185)
    {
      v191 = (char *)operator new(0x38uLL);
      v192 = v191;
      buf[0].__vftable = (std::runtime_error_vtbl *)v191;
      buf[0].__imp_.__imp_ = (const char *)(v163 + 16);
      LOBYTE(buf[1].__vftable) = 0;
      v193 = v191 + 16;
      *(_QWORD *)v191 = 0;
      *((_QWORD *)v191 + 1) = 0;
      if (*((char *)v185 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v191 + 16), (const std::string::value_type *)v185[2], v185[3]);
      }
      else
      {
        v194 = *((_OWORD *)v185 + 1);
        *((_QWORD *)v191 + 4) = v185[4];
        *v193 = v194;
      }
      v192[5] = v185[5];
      v195 = v185[6];
      v192[6] = v195;
      if (v195)
      {
        v196 = (unint64_t *)(v195 + 8);
        do
          v197 = __ldxr(v196);
        while (__stxr(v197 + 1, v196));
      }
      LOBYTE(buf[1].__vftable) = 1;
      v192[1] = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v193);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(v163, (uint64_t)v192);
      buf[0].__vftable = 0;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__deallocate_node(*(_QWORD **)&v289[16]);
  v198 = *(void **)v289;
  *(_QWORD *)v289 = 0;
  if (v198)
    operator delete(v198);
  buf[0].__vftable = (std::runtime_error_vtbl *)&v256[24];
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  buf[0].__vftable = (std::runtime_error_vtbl *)v256;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v259 && v258.__vftable)
    operator delete(v258.__vftable);
  std::__tree<std::string>::destroy(v267[0]);
  if (v268)
  {
    v269 = (__int32 *)v268;
    operator delete(v268);
  }
  v199 = v272;
  if (v272)
  {
    v200 = (unint64_t *)&v272->__shared_owners_;
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
  v202 = (std::__shared_weak_count *)v270.__imp_.__imp_;
  if (v270.__imp_.__imp_)
  {
    v203 = (unint64_t *)(v270.__imp_.__imp_ + 8);
    do
      v204 = __ldaxr(v203);
    while (__stlxr(v204 - 1, v203));
    if (!v204)
    {
      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
      std::__shared_weak_count::__release_weak(v202);
    }
  }
  buf[0].__vftable = (std::runtime_error_vtbl *)((char *)&v273[1] + 8);
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  buf[0].__vftable = (std::runtime_error_vtbl *)v273;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1B5967BD8()
{
  uint64_t v0;

  AMCP::Graph_Description::~Graph_Description((void **)(v0 - 192));
  JUMPOUT(0x1B5967F5CLL);
}

void sub_1B5967BE8()
{
  uint64_t v0;

  AMCP::Modify_Graph_Destroy_List::~Modify_Graph_Destroy_List((void **)(v0 - 192));
  JUMPOUT(0x1B59681FCLL);
}

void sub_1B5967BF8()
{
  JUMPOUT(0x1B5967F5CLL);
}

void sub_1B5967C04()
{
  JUMPOUT(0x1B5967F5CLL);
}

void sub_1B5967C18(void *a1, int a2)
{
  _QWORD *v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__deallocate_node(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1B59682A4);
}

void sub_1B5967C3C()
{
  __cxa_end_catch();
  JUMPOUT(0x1B5967F54);
}

void sub_1B5967C5C()
{
  uint64_t v0;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100](v0 - 192);
  JUMPOUT(0x1B5967F54);
}

void sub_1B5967C6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a70;
  uint64_t v70;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a70);
  std::pair<std::vector<AMCP::Node_Description>,std::shared_ptr<AMCP::IO_Core::Device_Node_State>>::~pair((void **)(v70 - 192));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  JUMPOUT(0x1B59681B4);
}

void sub_1B5967CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  JUMPOUT(0x1B59681B4);
}

void sub_1B5967CF4()
{
  JUMPOUT(0x1B59681ACLL);
}

void sub_1B5967CFC()
{
  JUMPOUT(0x1B59681B4);
}

void sub_1B5967F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t v50;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::~__hash_table(v50 - 240);
  AMCP::Modify_Graph_Destroy_List::~Modify_Graph_Destroy_List((void **)&a17);
  if (a26 && __p)
    operator delete(__p);
  std::__tree<std::string>::destroy((char *)a38);
  if (a40)
  {
    a41 = (uint64_t)a40;
    operator delete(a40);
  }
  v52 = (std::__shared_weak_count *)a46;
  if (a46)
  {
    v53 = (unint64_t *)(a46 + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)a44;
  if (a44)
  {
    v56 = (unint64_t *)(a44 + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  a17 = (uint64_t)&a50;
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = (uint64_t)&a47;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<AMCP::Node_Description>::__init_with_size[abi:ne180100]<AMCP::Node_Description*,AMCP::Node_Description*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<AMCP::Node_Description>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Node_Description>,AMCP::Node_Description*,AMCP::Node_Description*,AMCP::Node_Description*>(a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B596830C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void AMCP::Modify_Graph_Destroy_List::~Modify_Graph_Destroy_List(void **this)
{
  void **v2;

  v2 = this + 3;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void AMCP::Graph_Description::~Graph_Description(void **this)
{
  void **v2;

  v2 = this + 3;
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void AMCP::IO_Core::Graph_Manager::find_contexts_using_timebase(unsigned int **a1, _QWORD **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  unsigned int v9;
  std::__shared_mutex_base *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  AMCP::Address *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  uint64_t v33;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  AMCP::Graph::Graph::get_nodes(&v32, a2[25]);
  v6 = v32;
  for (i = v33; v6 != i; v6 += 16)
  {
    v8 = *(_QWORD *)(*(_QWORD *)v6 + 176);
    if (v8)
      v9 = *(_DWORD *)(v8 + 8);
    else
      v9 = 0;
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a2)[2])(&v28, a2);
    v10 = (std::__shared_mutex_base *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
    AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v30, v10, v9);
    v11 = v29;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v30)
    {
      v28 = 0x676C6F6269757462;
      LODWORD(v29) = 0;
      if (AMCP::Core::Core::call_operation_function<BOOL,std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&>(v30, (unsigned int *)&v28, a3))
      {
        v15 = a1[1];
        v14 = (unint64_t)a1[2];
        if ((unint64_t)v15 >= v14)
        {
          v17 = *a1;
          v18 = v15 - *a1;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v20 = v14 - (_QWORD)v17;
          if (v20 >> 1 > v19)
            v19 = v20 >> 1;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
            v21 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
            v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v21);
          else
            v22 = 0;
          v23 = (unsigned int *)(v21 + 4 * v18);
          *v23 = v9;
          v16 = v23 + 1;
          while (v15 != v17)
          {
            v24 = *--v15;
            *--v23 = v24;
          }
          *a1 = v23;
          a1[1] = v16;
          a1[2] = (unsigned int *)(v21 + 4 * v22);
          if (v17)
            operator delete(v17);
        }
        else
        {
          *v15 = v9;
          v16 = v15 + 1;
        }
        a1[1] = v16;
      }
    }
    v25 = v31;
    if (v31)
    {
      v26 = (unint64_t *)&v31->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  v30 = (AMCP::Address *)&v32;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
}

void sub_1B59685CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v14;
  void *v16;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  a12 = (void **)&a14;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a12);
  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E6976B50;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  return a1;
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func(_QWORD *a1)
{
  const void *v1;

  *a1 = &off_1E6976B50;
  v1 = (const void *)a1[1];
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1)
{
  CFTypeRef *v1;
  _QWORD *v2;

  v1 = (CFTypeRef *)(a1 + 8);
  v2 = operator new(0x10uLL);
  *v2 = &off_1E6976B50;
  std::__compressed_pair_elem<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

_QWORD *std::__function::__func<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6976B50;
  return std::__compressed_pair_elem<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0 const&,0ul>(a2 + 1, (CFTypeRef *)(a1 + 8));
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::destroy[abi:ne180100](*(const void **)(a1 + 8));
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::destroy_deallocate(const void **a1)
{
  std::__function::__alloc_func<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::destroy[abi:ne180100](a1[1]);
  operator delete(a1);
}

BOOL std::__function::__func<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  unsigned int simple_required;
  _BOOL8 v5;
  CFTypeRef cf;

  simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
  if (!AMCP::is_base_of((AMCP *)0x61646576, simple_required))
    return 0;
  AMCP::Core::Core::get_simple_required_property<1969841184u>(&cf, *a2);
  v5 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)(a1 + 8), (const __CFString **)&cf) == kCFCompareEqualTo;
  if (cf)
    CFRelease(cf);
  return v5;
}

uint64_t std::__function::__func<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core13Graph_Manager40find_meta_devices_that_contain_subdeviceENSt3__110shared_ptrINS_5Graph10Graph_HostEEERKNS2_6vectorIjNS2_9allocatorIjEEEERKjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

void std::__function::__alloc_func<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::destroy[abi:ne180100](const void *a1)
{
  if (a1)
    CFRelease(a1);
}

_QWORD *std::__compressed_pair_elem<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0 const&,0ul>(_QWORD *a1, CFTypeRef *a2)
{
  CFTypeRef v3;

  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *a1 = v3;
  return a1;
}

uint64_t *std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    do
    {
      result = std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(v5, v6, *((_DWORD *)v4 + 7), *((_DWORD *)v4 + 7));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void AMCP::IO_Core::Graph_Manager::resume_iocontexts_for_timebases(_QWORD **a1, _QWORD *a2, uint64_t a3)
{
  std::string **v5;
  std::string **v6;
  _QWORD *v7;
  _QWORD *v8;
  std::string *v9;
  _QWORD *v10;
  std::string::size_type size;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  std::__shared_mutex_base *v16;
  std::string::size_type v17;
  unsigned int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  AMCP::Log::Scope_Registry *v22;
  AMCP::Log::Scope_Registry *v23;
  int v24;
  std::__shared_weak_count *v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  _opaque_pthread_t *v29;
  mach_port_t v30;
  mach_port_t v31;
  std::runtime_error_vtbl *v32;
  const char *v33;
  NSObject *v34;
  os_log_type_t v35;
  std::__shared_weak_count *v36;
  NSObject *v37;
  unint64_t *v38;
  unint64_t v39;
  _opaque_pthread_t *v40;
  mach_port_t v41;
  mach_port_t v42;
  std::runtime_error_vtbl *v43;
  const char *v44;
  std::__shared_weak_count *v45;
  NSObject *v46;
  unint64_t *v47;
  unint64_t v48;
  _opaque_pthread_t *v49;
  mach_port_t v50;
  mach_port_t v51;
  std::runtime_error_vtbl *p_p;
  const char *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v58;
  unint64_t v59;
  AMCP::Log::Scope_Registry *v60;
  AMCP::Log::Scope_Registry *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  NSObject *v70;
  unint64_t *v71;
  unint64_t v72;
  _opaque_pthread_t *v73;
  mach_port_t v74;
  std::runtime_error *v75;
  int v76;
  uint64_t v77;
  std::runtime_error v78;
  std::__shared_weak_count *v79;
  NSObject *v80;
  unint64_t *v81;
  unint64_t v82;
  _opaque_pthread_t *v83;
  mach_port_t v84;
  void *v85;
  int v86;
  std::__shared_weak_count *v87;
  NSObject *v88;
  unint64_t *v89;
  unint64_t v90;
  _opaque_pthread_t *v91;
  mach_port_t v92;
  void *v93;
  int v94;
  std::runtime_error *v95;
  std::runtime_error *exception;
  std::runtime_error *v97;
  uint64_t v99;
  int v100;
  CFTypeRef cf;
  AMCP::Address *v102;
  std::__shared_weak_count *v103;
  std::string **v104;
  std::string **v105;
  _QWORD *v106;
  std::__shared_weak_count *v107;
  __int128 v108;
  uint64_t v109;
  uint64_t (**v110)();
  __int128 v111;
  uint64_t v112;
  std::string v113;
  std::runtime_error v114;
  std::runtime_error __p;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  char v121;
  std::string v122;
  _BYTE v123[24];
  int v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  AMCP::Graph::Graph::get_nodes(&v104, a1[25]);
  v5 = v104;
  v6 = v105;
  if (v104 != v105)
  {
    v7 = (_QWORD *)(a3 + 8);
    v8 = a2 + 1;
    do
    {
      v9 = *v5;
      if (SHIBYTE((*v5)[1].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v122, v9[1].__r_.__value_.__l.__data_, v9[1].__r_.__value_.__l.__size_);
      else
        v122 = v9[1];
      v10 = std::__tree<std::string>::find<std::string>(a3, &v122);
      if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v122.__r_.__value_.__l.__data_);
      size = (*v5)[7].__r_.__value_.__l.__size_;
      if (size)
        LODWORD(size) = *(_DWORD *)(size + 8);
      v12 = (_QWORD *)*a2;
      if ((_QWORD *)*a2 == v8)
        goto LABEL_92;
      while (*((_DWORD *)v12 + 7) != (_DWORD)size)
      {
        v13 = (_QWORD *)v12[1];
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (_QWORD *)v12[2];
            v15 = *v14 == (_QWORD)v12;
            v12 = v14;
          }
          while (!v15);
        }
        v12 = v14;
        if (v14 == v8)
          goto LABEL_92;
      }
      if (v12 == v8)
        goto LABEL_92;
      ((void (*)(std::string *__return_ptr))(*a1)[2])(&v122);
      v16 = (std::__shared_mutex_base *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v122.__r_.__value_.__l.__data_
                                                                                          + 16))(v122.__r_.__value_.__r.__words[0]);
      v17 = (*v5)[7].__r_.__value_.__l.__size_;
      if (v17)
        v18 = *(_DWORD *)(v17 + 8);
      else
        v18 = 0;
      AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v102, v16, v18);
      v19 = (std::__shared_weak_count *)v122.__r_.__value_.__l.__size_;
      if (v122.__r_.__value_.__l.__size_)
      {
        v20 = (unint64_t *)(v122.__r_.__value_.__l.__size_ + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v122.__r_.__value_.__r.__words[0] = 0x676C6F626E756964;
      LODWORD(v122.__r_.__value_.__r.__words[1]) = 0;
      AMCP::Core::Core::call_operation_function<applesauce::CF::StringRef>((AMCP::Log::Scope_Registry *)&cf, (int8x8_t *)v102, (unsigned int *)&v122);
      AMCP::Log::Scope_Registry::get(v22);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v110, "com.apple.coreaudio", "AMCP");
      v24 = *((_DWORD *)v110 + 4);
      switch(v24)
      {
        case 1:
          AMCP::Log::Scope_Registry::get(v23);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v122, "com.apple.coreaudio", "AMCP");
          v45 = (std::__shared_weak_count *)v122.__r_.__value_.__l.__size_;
          v46 = *(NSObject **)v122.__r_.__value_.__l.__data_;
          if (v122.__r_.__value_.__l.__size_)
          {
            v47 = (unint64_t *)(v122.__r_.__value_.__l.__size_ + 8);
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          if (!os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
            goto LABEL_70;
          v49 = pthread_self();
          v50 = pthread_mach_thread_np(v49);
          if (!cf)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v51 = v50;
          applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, (const __CFString *)cf);
          p_p = (std::runtime_error_vtbl *)&__p;
          if (SHIBYTE(v116) < 0)
            p_p = __p.__vftable;
          v53 = "active";
          if (v7 == v10)
            v53 = "inactive";
          LODWORD(v122.__r_.__value_.__l.__data_) = 67110146;
          HIDWORD(v122.__r_.__value_.__r.__words[0]) = v51;
          LOWORD(v122.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v122.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Manager.cpp";
          WORD1(v122.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v122.__r_.__value_.__r.__words[2]) = 711;
          *(_WORD *)v123 = 2080;
          *(_QWORD *)&v123[2] = p_p;
          *(_WORD *)&v123[10] = 2080;
          *(_QWORD *)&v123[12] = v53;
          v34 = v46;
          v35 = OS_LOG_TYPE_DEFAULT;
          break;
        case 2:
          AMCP::Log::Scope_Registry::get(v23);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v122, "com.apple.coreaudio", "AMCP");
          v36 = (std::__shared_weak_count *)v122.__r_.__value_.__l.__size_;
          v37 = *(NSObject **)v122.__r_.__value_.__l.__data_;
          if (v122.__r_.__value_.__l.__size_)
          {
            v38 = (unint64_t *)(v122.__r_.__value_.__l.__size_ + 8);
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 - 1, v38));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
          if (!os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
            goto LABEL_70;
          v40 = pthread_self();
          v41 = pthread_mach_thread_np(v40);
          if (!cf)
          {
            v95 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v95, "Could not construct");
            __cxa_throw(v95, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v42 = v41;
          applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, (const __CFString *)cf);
          v43 = (std::runtime_error_vtbl *)&__p;
          if (SHIBYTE(v116) < 0)
            v43 = __p.__vftable;
          v44 = "active";
          if (v7 == v10)
            v44 = "inactive";
          LODWORD(v122.__r_.__value_.__l.__data_) = 67110146;
          HIDWORD(v122.__r_.__value_.__r.__words[0]) = v42;
          LOWORD(v122.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v122.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Manager.cpp";
          WORD1(v122.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v122.__r_.__value_.__r.__words[2]) = 711;
          *(_WORD *)v123 = 2080;
          *(_QWORD *)&v123[2] = v43;
          *(_WORD *)&v123[10] = 2080;
          *(_QWORD *)&v123[12] = v44;
          _os_log_debug_impl(&dword_1B57BA000, v37, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Resuming IOContext %s (%s)", (uint8_t *)&v122, 0x2Cu);
          goto LABEL_68;
        case 3:
          AMCP::Log::Scope_Registry::get(v23);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v122, "com.apple.coreaudio", "AMCP");
          v25 = (std::__shared_weak_count *)v122.__r_.__value_.__l.__size_;
          v26 = *(NSObject **)v122.__r_.__value_.__l.__data_;
          if (v122.__r_.__value_.__l.__size_)
          {
            v27 = (unint64_t *)(v122.__r_.__value_.__l.__size_ + 8);
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
            goto LABEL_70;
          v29 = pthread_self();
          v30 = pthread_mach_thread_np(v29);
          if (!cf)
          {
            v97 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v97, "Could not construct");
            __cxa_throw(v97, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v31 = v30;
          applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, (const __CFString *)cf);
          v32 = (std::runtime_error_vtbl *)&__p;
          if (SHIBYTE(v116) < 0)
            v32 = __p.__vftable;
          v33 = "active";
          if (v7 == v10)
            v33 = "inactive";
          LODWORD(v122.__r_.__value_.__l.__data_) = 67110146;
          HIDWORD(v122.__r_.__value_.__r.__words[0]) = v31;
          LOWORD(v122.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v122.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Manager.cpp";
          WORD1(v122.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v122.__r_.__value_.__r.__words[2]) = 711;
          *(_WORD *)v123 = 2080;
          *(_QWORD *)&v123[2] = v32;
          *(_WORD *)&v123[10] = 2080;
          *(_QWORD *)&v123[12] = v33;
          v34 = v26;
          v35 = OS_LOG_TYPE_INFO;
          break;
        default:
          goto LABEL_70;
      }
      _os_log_impl(&dword_1B57BA000, v34, v35, "%6u %32s:%-5d Resuming IOContext %s (%s)", (uint8_t *)&v122, 0x2Cu);
LABEL_68:
      if (SHIBYTE(v116) < 0)
        operator delete(__p.__vftable);
LABEL_70:
      v54 = (std::__shared_weak_count *)v111;
      if ((_QWORD)v111)
      {
        v55 = (unint64_t *)(v111 + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v99 = 0x676C6F627265736DLL;
      v100 = 0;
      operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v106, (int8x8_t *)v102, (unsigned int *)&v99);
      v58 = v106;
      if (!v106)
      {
        AMCP::Log::Scope_Registry::get(operation);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v122, "com.apple.coreaudio", "AMCP");
        v79 = (std::__shared_weak_count *)v122.__r_.__value_.__l.__size_;
        v80 = *(NSObject **)v122.__r_.__value_.__l.__data_;
        if (v122.__r_.__value_.__l.__size_)
        {
          v81 = (unint64_t *)(v122.__r_.__value_.__l.__size_ + 8);
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
        {
          v83 = pthread_self();
          v84 = pthread_mach_thread_np(v83);
          LODWORD(v122.__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(v122.__r_.__value_.__r.__words[0]) = v84;
          LOWORD(v122.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v122.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Core.h";
          WORD1(v122.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v122.__r_.__value_.__r.__words[2]) = 202;
          _os_log_error_impl(&dword_1B57BA000, v80, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", (uint8_t *)&v122, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v121);
        v85 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v113);
        std::runtime_error::runtime_error(&v114, &v113);
        std::runtime_error::runtime_error(&__p, &v114);
        v117 = 0;
        v118 = 0;
        v119 = 0;
        v120 = -1;
        __p.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v116 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v122, (uint64_t)&__p);
        *(_QWORD *)&v123[8] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) "
                              "const [Return_Type = void, Argument_Types = <AMCP::Resume_Behavior>]";
        *(_QWORD *)&v123[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
        v124 = 202;
        std::vector<void *>::vector(&v108);
        v86 = backtrace((void **)v108, (*((_QWORD *)&v108 + 1) - (_QWORD)v108) >> 3);
        std::vector<void *>::resize((char **)&v108, v86);
        v111 = v108;
        v112 = v109;
        v108 = 0uLL;
        v109 = 0;
        v110 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&v122, (uint64_t)&v110);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v85, (uint64_t)&v122);
      }
      v59 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Resume_Behavior)>>();
      v60 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v58, v59);
      if (!v60)
      {
        AMCP::Log::Scope_Registry::get(0);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v122, "com.apple.coreaudio", "AMCP");
        v87 = (std::__shared_weak_count *)v122.__r_.__value_.__l.__size_;
        v88 = *(NSObject **)v122.__r_.__value_.__l.__data_;
        if (v122.__r_.__value_.__l.__size_)
        {
          v89 = (unint64_t *)(v122.__r_.__value_.__l.__size_ + 8);
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
          }
        }
        if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
        {
          v91 = pthread_self();
          v92 = pthread_mach_thread_np(v91);
          LODWORD(v122.__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(v122.__r_.__value_.__r.__words[0]) = v92;
          LOWORD(v122.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v122.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Operation.h";
          WORD1(v122.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v122.__r_.__value_.__r.__words[2]) = 154;
          _os_log_error_impl(&dword_1B57BA000, v88, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", (uint8_t *)&v122, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v121);
        v93 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v113);
        std::runtime_error::runtime_error(&v114, &v113);
        std::runtime_error::runtime_error(&__p, &v114);
        v117 = 0;
        v118 = 0;
        v119 = 0;
        v120 = -1;
        __p.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v116 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v122, (uint64_t)&__p);
        *(_QWORD *)&v123[8] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = v"
                              "oid, Argument_Types = <AMCP::Resume_Behavior>]";
        *(_QWORD *)&v123[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        v124 = 154;
        std::vector<void *>::vector(&v108);
        v94 = backtrace((void **)v108, (*((_QWORD *)&v108 + 1) - (_QWORD)v108) >> 3);
        std::vector<void *>::resize((char **)&v108, v94);
        v111 = v108;
        v112 = v109;
        v108 = 0uLL;
        v109 = 0;
        v110 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&v122, (uint64_t)&v110);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v93, (uint64_t)&v122);
      }
      v61 = v60;
      if (!*((_QWORD *)v60 + 7)
        || (v122.__r_.__value_.__r.__words[0] = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Resume_Behavior)>>(),
            (v60 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, std::string *))v61
                                                 + 7))(4, (uint64_t)v61 + 24, 0, &v122)) == 0))
      {
        AMCP::Log::Scope_Registry::get(v60);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v122, "com.apple.coreaudio", "AMCP");
        v69 = (std::__shared_weak_count *)v122.__r_.__value_.__l.__size_;
        v70 = *(NSObject **)v122.__r_.__value_.__l.__data_;
        if (v122.__r_.__value_.__l.__size_)
        {
          v71 = (unint64_t *)(v122.__r_.__value_.__l.__size_ + 8);
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
        {
          v73 = pthread_self();
          v74 = pthread_mach_thread_np(v73);
          LODWORD(v122.__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(v122.__r_.__value_.__r.__words[0]) = v74;
          LOWORD(v122.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v122.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Operation.h";
          WORD1(v122.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v122.__r_.__value_.__r.__words[2]) = 161;
          _os_log_error_impl(&dword_1B57BA000, v70, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", (uint8_t *)&v122, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v121);
        v75 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v113);
        std::runtime_error::runtime_error(&v114, &v113);
        std::runtime_error::runtime_error(&__p, &v114);
        v117 = 0;
        v118 = 0;
        v119 = 0;
        v120 = -1;
        __p.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v116 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v122, (uint64_t)&__p);
        *(_QWORD *)&v123[8] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = v"
                              "oid, Argument_Types = <AMCP::Resume_Behavior>]";
        *(_QWORD *)&v123[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        v124 = 161;
        std::vector<void *>::vector(&v108);
        v76 = backtrace((void **)v108, (*((_QWORD *)&v108 + 1) - (_QWORD)v108) >> 3);
        std::vector<void *>::resize((char **)&v108, v76);
        v111 = v108;
        v112 = v109;
        v108 = 0uLL;
        v109 = 0;
        v110 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&v122, (uint64_t)&v110);
        v75[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::runtime_error::runtime_error(v75, (const std::runtime_error *)&v122);
        v75[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
        v77 = *(_QWORD *)v123;
        v75[1].__imp_.__imp_ = *(const char **)v123;
        if (v77)
          (*(void (**)(uint64_t))(*(_QWORD *)v77 + 24))(v77);
        v78 = *(std::runtime_error *)&v123[8];
        LODWORD(v75[3].__vftable) = v124;
        v75[2] = v78;
        v75->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
        v75[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
        v75[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
      }
      LODWORD(__p.__vftable) = v7 == v10;
      v62 = *((_QWORD *)v60 + 3);
      if (!v62)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, std::runtime_error *))(*(_QWORD *)v62 + 48))(v62, &__p);
      v63 = v107;
      if (v107)
      {
        p_shared_owners = (unint64_t *)&v107->__shared_owners_;
        do
          v65 = __ldaxr(p_shared_owners);
        while (__stlxr(v65 - 1, p_shared_owners));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      if (cf)
        CFRelease(cf);
      v66 = v103;
      if (v103)
      {
        v67 = (unint64_t *)&v103->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
LABEL_92:
      v5 += 2;
    }
    while (v5 != v6);
  }
  v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v122);
}

void sub_1B5969638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, const void *a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,std::runtime_error a38,std::runtime_error a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  applesauce::CF::StringRef::~StringRef(&a15);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  *(_QWORD *)(v41 - 192) = &a20;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 192));
  _Unwind_Resume(a1);
}

void AMCP::IO_Core::exception_safe_dispatch(NSObject *a1, uint64_t a2)
{
  _QWORD *exception;
  _QWORD v3[2];
  char v4;
  char v5;
  _QWORD block[5];

  v4 = 0;
  v5 = 0;
  v3[0] = &v4;
  v3[1] = a2;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN10applesauce8dispatch2v19sync_implIZN4AMCP7IO_CoreL23exception_safe_dispatchERKNS3_7Utility14Dispatch_QueueENSt3__18functionIFvvEEEE3__0EEvP16dispatch_queue_sOT_NS9_17integral_constantIbLb1EEE_block_invoke;
  block[3] = &__block_descriptor_tmp_3289;
  block[4] = v3;
  dispatch_sync(a1, block);
  if (v5)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = MEMORY[0x1E0DE5060] + 16;
    __cxa_throw(exception, MEMORY[0x1E0DE4EB0], (void (*)(void *))MEMORY[0x1E0DE4DD0]);
  }
}

void sub_1B59699DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12, char a13)
{
  if (a13)
    std::exception::~exception(&a12);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN10applesauce8dispatch2v19sync_implIZN4AMCP7IO_CoreL23exception_safe_dispatchERKNS3_7Utility14Dispatch_QueueENSt3__18functionIFvvEEEE3__0EEvP16dispatch_queue_sOT_NS9_17integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

void sub_1B5969A34(void *a1)
{
  uint64_t *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  if (!*(_BYTE *)(*v1 + 8))
  {
    *(_QWORD *)v2 = MEMORY[0x1E0DE5060] + 16;
    *(_BYTE *)(v2 + 8) = 1;
  }
  __cxa_end_catch();
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::node_uid_is_unique(applesauce::CF::StringRef const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::node_uid_is_unique(applesauce::CF::StringRef const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::IO_Core::Graph_Manager::node_uid_is_unique(applesauce::CF::StringRef const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::node_uid_is_unique(applesauce::CF::StringRef const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E6976C40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AMCP::IO_Core::Graph_Manager::node_uid_is_unique(applesauce::CF::StringRef const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::node_uid_is_unique(applesauce::CF::StringRef const&)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6976C40;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::node_uid_is_unique(applesauce::CF::StringRef const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::node_uid_is_unique(applesauce::CF::StringRef const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  const __CFString *v1;
  uint64_t v3;
  unsigned __int8 *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::runtime_error *exception;
  void *__p[2];
  char v13;

  v1 = **(const __CFString ***)(a1 + 16);
  if (!v1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v1);
  v4 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>((_QWORD *)(v3 + 176), (unsigned __int8 *)__p);
  if (v4)
  {
    v6 = *((_QWORD *)v4 + 5);
    v5 = (std::__shared_weak_count *)*((_QWORD *)v4 + 6);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  if (v13 < 0)
    operator delete(__p[0]);
  **(_BYTE **)(a1 + 24) = v6 == 0;
  if (v5)
  {
    v9 = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1B5969BE0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::Graph_Manager::node_uid_is_unique(applesauce::CF::StringRef const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::node_uid_is_unique(applesauce::CF::StringRef const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core13Graph_Manager18node_uid_is_uniqueERKN10applesauce2CF9StringRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Graph_Manager::node_uid_is_unique(applesauce::CF::StringRef const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::node_uid_is_unique(applesauce::CF::StringRef const&)::$_0>,void ()(void)>::target_type()
{
}

uint64_t AMCP::IO_Core::Graph_Manager::get_node_id(AMCP::IO_Core::Graph_Manager *this, const applesauce::CF::StringRef *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  _BYTE v9[24];
  _BYTE *v10;
  NSObject *v11[41];

  v11[40] = *(NSObject **)MEMORY[0x1E0C80C00];
  LOBYTE(v8) = 0;
  BYTE4(v8) = 0;
  (*(void (**)(NSObject **__return_ptr))(*(_QWORD *)this + 40))(v11);
  v4 = operator new(0x20uLL);
  *v4 = &off_1E6976CC0;
  v4[1] = (char *)this + 8;
  v4[2] = a2;
  v4[3] = &v8;
  v10 = v4;
  AMCP::IO_Core::exception_safe_dispatch(v11[0], (uint64_t)v9);
  v5 = v10;
  if (v10 == v9)
  {
    v6 = 4;
    v5 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v11);
  return v8;
}

void sub_1B5969D1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list v2;
  va_list v4;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, va_list);
  v4 = v10;
  if (v10 == v2)
  {
    v5 = 4;
    va_copy(v4, va);
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)va1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::get_node_id(applesauce::CF::StringRef const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_node_id(applesauce::CF::StringRef const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::IO_Core::Graph_Manager::get_node_id(applesauce::CF::StringRef const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_node_id(applesauce::CF::StringRef const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E6976CC0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AMCP::IO_Core::Graph_Manager::get_node_id(applesauce::CF::StringRef const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_node_id(applesauce::CF::StringRef const&)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6976CC0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::get_node_id(applesauce::CF::StringRef const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_node_id(applesauce::CF::StringRef const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  const __CFString *v1;
  uint64_t v3;
  unsigned __int8 *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::runtime_error *exception;
  void *__p[2];
  char v15;

  v1 = **(const __CFString ***)(a1 + 16);
  if (!v1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v1);
  v4 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>((_QWORD *)(v3 + 176), (unsigned __int8 *)__p);
  if (v4)
  {
    v6 = *((_QWORD *)v4 + 5);
    v5 = (std::__shared_weak_count *)*((_QWORD *)v4 + 6);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  if (v15 < 0)
    operator delete(__p[0]);
  if (v6)
  {
    v9 = *(_QWORD *)(v6 + 176);
    if (v9)
      LODWORD(v9) = *(_DWORD *)(v9 + 8);
    v10 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)v10 = v9;
    *(_BYTE *)(v10 + 4) = 1;
  }
  if (v5)
  {
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1B5969EEC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::Graph_Manager::get_node_id(applesauce::CF::StringRef const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_node_id(applesauce::CF::StringRef const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core13Graph_Manager11get_node_idERKN10applesauce2CF9StringRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Graph_Manager::get_node_id(applesauce::CF::StringRef const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_node_id(applesauce::CF::StringRef const&)::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::get_wires(void)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_wires(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::IO_Core::Graph_Manager::get_wires(void)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_wires(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6976D40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::IO_Core::Graph_Manager::get_wires(void)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_wires(void)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6976D40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::get_wires(void)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_wires(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  void *v2;
  void *__p[5];

  AMCP::Graph::Wire_Index::get_wires((AMCP::Graph::Wire_Index *)__p, *(_QWORD *)(a1 + 8) + 56);
  std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__move_assign(*(_QWORD *)(a1 + 16), (uint64_t *)__p);
  std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__deallocate_node((_QWORD *)__p[2]);
  v2 = __p[0];
  __p[0] = 0;
  if (v2)
    operator delete(v2);
}

uint64_t std::__function::__func<AMCP::IO_Core::Graph_Manager::get_wires(void)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_wires(void)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core13Graph_Manager9get_wiresEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Graph_Manager::get_wires(void)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_wires(void)::$_0>,void ()(void)>::target_type()
{
}

void std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__deallocate_node(*(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v6 = *a2;
  *a2 = 0;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = v6;
  if (v7)
    operator delete(v7);
  v10 = a2[2];
  v9 = a2 + 2;
  v8 = v10;
  v11 = *(v9 - 1);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 8) = v11;
  *(v9 - 1) = 0;
  v12 = v9[1];
  *(_QWORD *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    v13 = *(_QWORD *)(v8 + 8);
    v14 = *(_QWORD *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v13 %= v14;
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = a1 + 16;
    *v9 = 0;
    v9[1] = 0;
  }
}

void AMCP::IO_Core::Graph_Manager::get_wires_for_node(AMCP::IO_Core::Graph_Manager *this, uint64_t a2, int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE v9[24];
  _BYTE *v10;
  NSObject *v11[41];

  v11[40] = *(NSObject **)MEMORY[0x1E0C80C00];
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  (*(void (**)(NSObject **__return_ptr, uint64_t))(*(_QWORD *)a2 + 40))(v11, a2);
  v6 = operator new(0x20uLL);
  *v6 = &off_1E6976DC0;
  v6[1] = a2 + 8;
  *((_DWORD *)v6 + 4) = a3;
  v6[3] = this;
  v10 = v6;
  AMCP::IO_Core::exception_safe_dispatch(v11[0], (uint64_t)v9);
  v7 = v10;
  if (v10 == v9)
  {
    v8 = 4;
    v7 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v11);
}

void sub_1B596A214(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list v3;
  va_list v5;
  uint64_t v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list v11;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, va_list);
  v5 = v11;
  if (v11 == v3)
  {
    v6 = 4;
    va_copy(v5, va);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_6:
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)va1);
  std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::get_wires_for_node(unsigned int)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_wires_for_node(unsigned int)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::IO_Core::Graph_Manager::get_wires_for_node(unsigned int)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_wires_for_node(unsigned int)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E6976DC0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AMCP::IO_Core::Graph_Manager::get_wires_for_node(unsigned int)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_wires_for_node(unsigned int)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6976DC0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::get_wires_for_node(unsigned int)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_wires_for_node(unsigned int)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v3;
  _OWORD *v4;
  unsigned __int8 *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  std::logic_error *exception;
  uint64_t v21;
  int v22;
  uint64_t v23;
  std::logic_error v24;
  __int128 v25;
  uint64_t v26;
  uint64_t (**v27)();
  __int128 v28;
  uint64_t v29;
  std::string v30;
  std::logic_error v31;
  std::logic_error v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char v38;
  std::string v39;
  _BYTE buf[48];
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 8);
  v3 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v2 + 27, *(_DWORD *)(a1 + 16));
  if (v3)
  {
    v4 = v3 + 3;
    if (*((char *)v3 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v39, (const std::string::value_type *)v3[3], v3[4]);
    }
    else
    {
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *v4;
      v39.__r_.__value_.__r.__words[2] = v3[5];
    }
    v5 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v2 + 22, (unsigned __int8 *)&v39);
    if (!v5)
    {
LABEL_23:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v14 = *(std::__shared_weak_count **)&buf[8];
      v15 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v16 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v18 = pthread_self();
        v19 = pthread_mach_thread_np(v18);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v19;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "Graph.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 739;
        *(_WORD *)&buf[24] = 2080;
        *(_QWORD *)&buf[26] = "not (node.operator BOOL())";
        _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Missing for node in get_wires_for_node", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v38);
      exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Missing for node in get_wires_for_node", (uint64_t)&v30);
      std::logic_error::logic_error(&v31, &v30);
      v21 = MEMORY[0x1E0DE5018];
      v31.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v32, &v31);
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = -1;
      v32.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v33 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v32);
      *(_QWORD *)&buf[32] = "Wire_Set AMCP::Graph::Graph::get_wires_for_node(Object_ID) const";
      *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
      v41 = 739;
      std::vector<void *>::vector(&v25);
      v22 = backtrace((void **)v25, (*((_QWORD *)&v25 + 1) - (_QWORD)v25) >> 3);
      std::vector<void *>::resize((char **)&v25, v22);
      v28 = v25;
      v29 = v26;
      v25 = 0uLL;
      v26 = 0;
      v27 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v27);
      exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::logic_error::logic_error(exception, (const std::logic_error *)buf);
      exception->__vftable = (std::logic_error_vtbl *)(v21 + 16);
      exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
      v23 = *(_QWORD *)&buf[24];
      exception[1].__imp_.__imp_ = *(const char **)&buf[24];
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
      v24 = *(std::logic_error *)&buf[32];
      LODWORD(exception[3].__vftable) = v41;
      exception[2] = v24;
      exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
      exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
      exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
    }
    v6 = (_QWORD *)*((_QWORD *)v5 + 5);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v10 = v7;
      if (!v6)
        goto LABEL_23;
    }
    else
    {
      v10 = 0;
      if (!v6)
        goto LABEL_23;
    }
    AMCP::Graph::Wire_Index::get_wires_for_node((uint64_t)buf, v2 + 7, (uint64_t)v4, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6[11] - v6[10]) >> 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6[8] - v6[7]) >> 4));
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
  }
  else
  {
    memset(buf, 0, 32);
    *(_DWORD *)&buf[32] = 1065353216;
  }
  std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__move_assign(*(_QWORD *)(a1 + 24), (uint64_t *)buf);
  std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__deallocate_node(*(_QWORD **)&buf[16]);
  v13 = *(void **)buf;
  *(_QWORD *)buf = 0;
  if (v13)
    operator delete(v13);
}

void sub_1B596A6E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::IO_Core::Graph_Manager::get_wires_for_node(unsigned int)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_wires_for_node(unsigned int)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core13Graph_Manager18get_wires_for_nodeEjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Graph_Manager::get_wires_for_node(unsigned int)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_wires_for_node(unsigned int)::$_0>,void ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6976E40;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  return a1;
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6976E40;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E6976E40;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)v2 + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 32);
  *((__n128 *)v2 + 2) = result;
  return result;
}

__n128 std::__function::__func<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  __n128 result;

  *(_QWORD *)a2 = &off_1E6976E40;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 16);
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
  operator delete(a1);
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_mutex_base *v4;
  uint64_t v5;
  unsigned int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  int v11;
  AMCP::Address *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  uint64_t v15;

  **(_DWORD **)(a1 + 40) = *(_DWORD *)(a1 + 32);
  AMCP::Graph::Graph::get_nodes(&v14, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 192));
  v2 = v14;
  for (i = v15; v2 != i; v2 += 16)
  {
    v4 = (std::__shared_mutex_base *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
    v5 = *(_QWORD *)(*(_QWORD *)v2 + 176);
    if (v5)
      v6 = *(_DWORD *)(v5 + 8);
    else
      v6 = 0;
    AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v12, v4, v6);
    v10 = 0x676C6F6269707073;
    v11 = 0;
    AMCP::Core::Core::call_operation_function<void,AMCP::Power_State>(v12, (unsigned int *)&v10, *(_DWORD *)(a1 + 32));
    v7 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  v12 = (AMCP::Address *)&v14;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
}

void sub_1B596AAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, std::__shared_weak_count *a13, char a14)
{
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  v15 = a13;
  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  a12 = (void **)&a14;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core13Graph_Manager18update_power_stateENS_11Power_StateEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0>,void ()(void)>::target_type()
{
}

void AMCP::IO_Core::Graph_Manager::update_and_resume_io_contexts(_QWORD **a1, _QWORD *a2)
{
  std::string **v4;
  std::string **i;
  std::string *v6;
  _BOOL8 updated;
  std::__shared_weak_count *size;
  std::string::pointer data;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  std::string *v16;
  std::string *v17;
  void *exception;
  std::string *v19;
  std::string *v20;
  char **v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t (**v30)();
  __int128 v31;
  uint64_t v32;
  std::string v33;
  std::string v34;
  std::logic_error v35;
  std::string v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  std::string v42;
  std::string **v43;
  std::string **v44;
  uint8_t buf[8];
  __int16 v46;
  char *v47;
  __int16 v48;
  int v49;
  __int16 v50;
  _BYTE v51[22];
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v27 = 0;
  v25 = 0u;
  v26 = 0u;
  v24 = 0u;
  AMCP::Graph::Graph::get_nodes(&v43, a1[25]);
  v22 = 0;
  v23 = 0;
  v21 = &v22;
  v4 = v43;
  for (i = v44; v4 != i; v4 += 2)
  {
    v6 = *v4;
    if (SHIBYTE((*v4)[1].__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v42, v6[1].__r_.__value_.__l.__data_, v6[1].__r_.__value_.__l.__size_);
    else
      v42 = v6[1];
    updated = AMCP::IO_Core::Graph_Manager::update_iocontext((uint64_t)a1, (unsigned __int8 *)&v42, (uint64_t)&v24);
    if (updated)
    {
      data = (*v4)[6].__r_.__value_.__l.__data_;
      size = (std::__shared_weak_count *)(*v4)[6].__r_.__value_.__l.__size_;
      if (size)
      {
        p_shared_owners = (unint64_t *)&size->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (!data)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)updated);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v13 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          v14 = pthread_self();
          v15 = pthread_mach_thread_np(v14);
          v16 = *v4;
          if (SHIBYTE((*v4)[1].__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v36, v16[1].__r_.__value_.__l.__data_, v16[1].__r_.__value_.__l.__size_);
          else
            v36 = v16[1];
          v17 = &v36;
          if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v17 = (std::string *)v36.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v15;
          v46 = 2080;
          v47 = "Graph_Manager.cpp";
          v48 = 1024;
          v49 = 236;
          v50 = 2080;
          *(_QWORD *)v51 = "not (context->get_clock() != Timebase_Ref{})";
          *(_WORD *)&v51[8] = 2080;
          *(_QWORD *)&v51[10] = v17;
          _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Unable to calculate clock for IO Context: %s", buf, 0x2Cu);
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v36.__r_.__value_.__l.__data_);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
        exception = __cxa_allocate_exception(0x40uLL);
        v19 = *v4;
        if (SHIBYTE((*v4)[1].__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v33, v19[1].__r_.__value_.__l.__data_, v19[1].__r_.__value_.__l.__size_);
        else
          v33 = v19[1];
        v20 = &v33;
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v20 = (std::string *)v33.__r_.__value_.__r.__words[0];
        caulk::make_string((caulk *)"Unable to calculate clock for IO Context: %s", (uint64_t)&v34, v20, v21, v22, v23, v24, v25, v26, v27);
        std::logic_error::logic_error(&v35, &v34);
        v35.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error((std::logic_error *)&v36, &v35);
        v37 = 0;
        v38 = 0;
        v39 = 0;
        v40 = -1;
        v36.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
        v36.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
        *(_QWORD *)&v51[6] = "std::set<Graph_Node_UID> AMCP::IO_Core::Graph_Manager::update_all_iocontexts(Graph::Graph::"
                             "Resource_Counts &)";
        *(_QWORD *)&v51[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Graph_Manager.cpp";
        v52 = 236;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v28);
        v31 = v28;
        v30 = off_1E69A20A0;
        v32 = v29;
        v28 = 0uLL;
        v29 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v30);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
      }
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v21, &v42, (uint64_t)&v42);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)buf = &v43;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  AMCP::IO_Core::Graph_Manager::resume_iocontexts_for_timebases(a1, a2, (uint64_t)&v21);
  std::__tree<std::string>::destroy(v22);
}

void sub_1B596AF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  uint64_t v46;

  if (*(char *)(v46 - 169) < 0)
    operator delete(*(void **)(v46 - 192));
  std::__tree<std::string>::destroy(a11);
  *(_QWORD *)(v46 - 144) = v46 - 168;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 144));
  _Unwind_Resume(a1);
}

AMCP::IO_Core::Graph_Manager *AMCP::IO_Core::Graph_Manager::Graph_Manager(AMCP::IO_Core::Graph_Manager *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  *(_QWORD *)this = off_1E6976960;
  *((_QWORD *)this + 1) = &off_1E69857E8;
  *((_DWORD *)this + 4) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 1065353216;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 1065353216;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 34) = 1065353216;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 44) = 1065353216;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_DWORD *)this + 54) = 1065353216;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_DWORD *)this + 64) = 1065353216;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 33) = (char *)this + 272;
  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E6985830;
  *((_QWORD *)v2 + 7) = 0;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_QWORD *)this + 36) = v2 + 24;
  *((_QWORD *)this + 37) = v2;
  v3 = (char *)operator new(0x68uLL);
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 2) = 0;
  *(_QWORD *)v3 = &off_1E699CF08;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *((_DWORD *)v3 + 14) = 1065353216;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_DWORD *)v3 + 24) = 1065353216;
  *((_QWORD *)this + 38) = v3 + 24;
  *((_QWORD *)this + 39) = v3;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_DWORD *)this + 88) = 1065353216;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *((_DWORD *)this + 98) = 1065353216;
  v4 = operator new();
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_DWORD *)(v4 + 32) = 1065353216;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_DWORD *)(v4 + 72) = 1065353216;
  *((_QWORD *)this + 50) = v4;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E6976EC0;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = v4;
  *((_QWORD *)this + 51) = v5;
  v7 = 0;
  std::unique_ptr<AMCP::IO_Core::Device_Timebase_Factory>::reset[abi:ne180100](&v7);
  *((_DWORD *)this + 104) = 4;
  return this;
}

void sub_1B596B298(_Unwind_Exception *a1, AMCP::Graph::Graph *a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  std::unique_ptr<AMCP::IO_Core::Device_Timebase_Factory>::reset[abi:ne180100]((uint64_t *)va);
  std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::~__hash_table(v2 + 320);
  AMCP::Graph::Graph::~Graph(a2);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<AMCP::IO_Core::Device_Timebase_Factory>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 40);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::~__hash_table(v1);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

void std::__shared_ptr_pointer<AMCP::IO_Core::Device_Timebase_Factory  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_pointer<AMCP::IO_Core::Device_Timebase_Factory  *>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 40);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::~__hash_table(v1);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<AMCP::IO_Core::Device_Timebase_Factory  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIN4AMCP7IO_Core23Device_Timebase_FactoryEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void AMCP::IO_Core::Graph_Manager::~Graph_Manager(AMCP::IO_Core::Graph_Manager *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = off_1E6976960;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 51);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::~__hash_table((uint64_t)this + 360);
  std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::~__hash_table((uint64_t)this + 320);
  AMCP::Graph::Graph::~Graph((AMCP::IO_Core::Graph_Manager *)((char *)this + 8));
}

uint64_t std::unordered_map<unsigned int,std::chrono::duration<long long,std::ratio<1l,1000000l>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(a1 + 8);
    do
    {
      v8 = *((unsigned int *)v5 + 4);
      if (v7)
      {
        v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          v2 = *((unsigned int *)v5 + 4);
          if (v7 <= v8)
            v2 = v8 % v7;
        }
        else
        {
          v2 = ((_DWORD)v7 - 1) & v8;
        }
        v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v2);
        if (v10)
        {
          for (i = *v10; i; i = (uint64_t *)*i)
          {
            v12 = i[1];
            if (v12 == v8)
            {
              if (*((_DWORD *)i + 4) == (_DWORD)v8)
                goto LABEL_41;
            }
            else
            {
              if (v9.u32[0] > 1uLL)
              {
                if (v12 >= v7)
                  v12 %= v7;
              }
              else
              {
                v12 &= v7 - 1;
              }
              if (v12 != v2)
                break;
            }
          }
        }
      }
      v13 = operator new(0x20uLL);
      *v13 = 0;
      v13[1] = v8;
      *((_OWORD *)v13 + 1) = *((_OWORD *)v5 + 1);
      v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v15 = *(float *)(a1 + 32);
      if (!v7 || (float)(v15 * (float)v7) < v14)
      {
        v16 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3)
          v16 = 1;
        v17 = v16 | (2 * v7);
        v18 = vcvtps_u32_f32(v14 / v15);
        if (v17 <= v18)
          v19 = v18;
        else
          v19 = v17;
        std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v19);
        v7 = *(_QWORD *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v8)
            v2 = v8 % v7;
          else
            v2 = v8;
        }
        else
        {
          v2 = ((_DWORD)v7 - 1) & v8;
        }
      }
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v21)
      {
        *v13 = *v21;
      }
      else
      {
        *v13 = *v6;
        *v6 = v13;
        *(_QWORD *)(v20 + 8 * v2) = v6;
        if (!*v13)
          goto LABEL_40;
        v22 = *(_QWORD *)(*v13 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v22 >= v7)
            v22 %= v7;
        }
        else
        {
          v22 &= v7 - 1;
        }
        v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
      }
      *v21 = v13;
LABEL_40:
      ++*(_QWORD *)(a1 + 24);
LABEL_41:
      v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1B596B6D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *applesauce::dispatch::v1::async<HALS_IOContextReporter::ReportStartHardware(HALS_IOContextReporter::StartHardwareData)::$_0 &>(dispatch_queue_s *,HALS_IOContextReporter::ReportStartHardware(HALS_IOContextReporter::StartHardwareData)::$_0 &)::{lambda(void *)#1}::__invoke(unsigned int *a1)
{
  uint64_t *v2;
  uint64_t **v3;
  std::string::size_type v4;
  char *v5;
  uint64_t *v6;
  uint64_t **v7;
  std::string::size_type v8;
  HALS_ObjectMap *v9;
  HALS_ObjectMap *v10;
  HALS_ObjectMap *v11;
  unsigned int *v12;
  HALS_Object *v13;
  HALS_ObjectMap *v14;
  unsigned int v15;
  uint64_t v16;
  HALS_Object *v17;
  char *v18;
  HALS_ObjectMap *v19;
  HALS_Object *v20;
  void *v21;
  uint64_t *v22;
  std::string::size_type v23;
  uint64_t *v24;
  uint64_t v25;
  _DWORD *exception;
  unsigned int *v28;
  std::string v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t buf[23];
  char v35;
  std::string __p;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v28 = a1;
  v31 = 0;
  v32 = 0;
  v30 = &v31;
  v2 = (uint64_t *)operator new(0x50uLL);
  *(_QWORD *)buf = v2;
  *(_QWORD *)&buf[8] = &v31;
  buf[16] = 0;
  std::string::basic_string[abi:ne180100]<0>(v2 + 4, "message");
  std::string::basic_string[abi:ne180100]<0>(v2 + 7, "StartHardware");
  buf[16] = 1;
  v3 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)&v30, &v29, v2 + 4);
  if (!*v3)
  {
    v4 = v29.__r_.__value_.__r.__words[0];
    *v2 = 0;
    v2[1] = 0;
    v2[2] = v4;
    *v3 = v2;
    if (*v30)
    {
      v30 = (uint64_t **)*v30;
      v2 = *v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v31, v2);
    ++v32;
    *(_QWORD *)buf = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
  if (*((_BYTE *)a1 + 32))
    v5 = "YES";
  else
    v5 = "NO";
  v6 = (uint64_t *)operator new(0x50uLL);
  *(_QWORD *)buf = v6;
  *(_QWORD *)&buf[8] = &v31;
  buf[16] = 0;
  std::string::basic_string[abi:ne180100]<0>(v6 + 4, "success");
  std::string::basic_string[abi:ne180100]<0>(v6 + 7, v5);
  buf[16] = 1;
  v7 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)&v30, &v29, v6 + 4);
  if (!*v7)
  {
    v8 = v29.__r_.__value_.__r.__words[0];
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v7 = v6;
    if (*v30)
    {
      v30 = (uint64_t **)*v30;
      v6 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v31, v6);
    ++v32;
    *(_QWORD *)buf = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
  std::to_string(&v29, a1[3]);
  std::string::basic_string[abi:ne180100]<0>(buf, "io_buffer_size");
  __p = v29;
  memset(&v29, 0, sizeof(v29));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t **)&v30, buf, (uint64_t)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v35 < 0)
    operator delete(*(void **)buf);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  std::to_string(&v29, *((double *)a1 + 2));
  std::string::basic_string[abi:ne180100]<0>(buf, "sample_rate");
  __p = v29;
  memset(&v29, 0, sizeof(v29));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t **)&v30, buf, (uint64_t)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v35 < 0)
    operator delete(*(void **)buf);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  std::to_string(&v29, *((float *)a1 + 6));
  std::string::basic_string[abi:ne180100]<0>(buf, "input_scalar_volume");
  __p = v29;
  memset(&v29, 0, sizeof(v29));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t **)&v30, buf, (uint64_t)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v35 < 0)
    operator delete(*(void **)buf);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  std::to_string(&v29, *((float *)a1 + 7));
  std::string::basic_string[abi:ne180100]<0>(buf, "output_scalar_volume");
  __p = v29;
  memset(&v29, 0, sizeof(v29));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t **)&v30, buf, (uint64_t)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v35 < 0)
    operator delete(*(void **)buf);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  v9 = (HALS_ObjectMap *)a1[2];
  v10 = (HALS_ObjectMap *)*a1;
  strcpy((char *)buf, "tsivtpni");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  v11 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v10);
  v12 = (unsigned int *)HALS_ObjectMap::CopyObjectByObjectID(v9);
  v14 = (HALS_ObjectMap *)v12;
  v15 = 0;
  if (v12 && v11)
  {
    v16 = v12[4];
    v33 = 0;
    (*(void (**)(unsigned int *, uint64_t, uint8_t *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, HALS_ObjectMap *))(*(_QWORD *)v12 + 112))(v12, v16, buf, 4, &v33, (char *)&v33 + 4, 0, 0, v11);
    v15 = HIDWORD(v33);
  }
  HALS_ObjectMap::ReleaseObject(v14, v13);
  HALS_ObjectMap::ReleaseObject(v11, v17);
  if (v15 > 2)
    v18 = "unknown chat flavor";
  else
    v18 = off_1E6976F40[v15];
  std::string::basic_string[abi:ne180100]<0>(&v29, v18);
  std::string::basic_string[abi:ne180100]<0>(buf, "hal_chat_flavor");
  __p = v29;
  memset(&v29, 0, sizeof(v29));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t **)&v30, buf, (uint64_t)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v35 < 0)
    operator delete(*(void **)buf);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  std::to_string(&v29, (*((_QWORD *)a1 + 6) - *((_QWORD *)a1 + 5)) / 1000);
  std::string::basic_string[abi:ne180100]<0>(buf, "duration_us");
  __p = v29;
  memset(&v29, 0, sizeof(v29));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t **)&v30, buf, (uint64_t)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v35 < 0)
    operator delete(*(void **)buf);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  applesauce::CF::make_DictionaryRef<std::string,std::string>((CFDictionaryRef *)&v29, (const UInt8 **)&v30);
  v19 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)a1[1]);
  if (!v19)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_IOContextReporter.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 98;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Report StartHardware metrics: no HALS_IOContext object", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  HALS_IOContext::GetIssueReporters((HALS_IOContext *)buf, (uint64_t)v19);
  v21 = *(void **)buf;
  v22 = *(uint64_t **)&buf[8];
  if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
  {
    v23 = v29.__r_.__value_.__r.__words[0];
    v24 = *(uint64_t **)buf;
    do
    {
      v25 = *v24;
      if (AudioStatisticsLibraryLoader(void)::once != -1)
        dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_3321);
      if (AudioStatisticsLibraryLoader(void)::libSym)
        AudioStatisticsLibraryLoader(void)::libSym(v25, v23, 536870919, 1);
      ++v24;
    }
    while (v24 != v22);
  }
  if (v21)
    operator delete(v21);
  HALS_ObjectMap::ReleaseObject(v19, v20);
  if (v29.__r_.__value_.__r.__words[0])
    CFRelease(v29.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v31);
  return std::unique_ptr<HALS_IOContextReporter::ReportStartHardware(HALS_IOContextReporter::StartHardwareData)::$_0,std::default_delete<HALS_IOContextReporter::ReportStartHardware(HALS_IOContextReporter::StartHardwareData)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v28);
}

void sub_1B596BDE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B596BAE0);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B596BF14(void *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16)
{
  HALS_ObjectMap *v16;
  void *v17;

  if ((_DWORD)a2)
  {
    if (v17)
      operator delete(v17);
    HALS_ObjectMap::ReleaseObject(v16, a2);
    if (a12)
      CFRelease(a12);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a16);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B596BD00);
  }
  JUMPOUT(0x1B596BF04);
}

void sub_1B596BF5C(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<HALS_IOContextReporter::ReportStartHardware(HALS_IOContextReporter::StartHardwareData)::$_0,std::default_delete<HALS_IOContextReporter::ReportStartHardware(HALS_IOContextReporter::StartHardwareData)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  JUMPOUT(0x1B596BF04);
}

uint64_t *std::unique_ptr<HALS_IOContextReporter::ReportStartHardware(HALS_IOContextReporter::StartHardwareData)::$_0,std::default_delete<HALS_IOContextReporter::ReportStartHardware(HALS_IOContextReporter::StartHardwareData)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(v2 + 56);
    MEMORY[0x1B5E50688](v2, 0x10A0C401E8F5A3ELL);
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t **v6;
  char *v7;
  std::string *v8;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  if (!*v5)
  {
    v6 = v5;
    v7 = (char *)operator new(0x50uLL);
    v9[0] = v7;
    v9[1] = a1 + 1;
    v10 = 0;
    v8 = (std::string *)(v7 + 32);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      *((_QWORD *)v7 + 6) = *(_QWORD *)(a3 + 16);
    }
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(a3 + 24);
    *((_QWORD *)v7 + 9) = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    v10 = 1;
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(a1, v11, v6, (uint64_t *)v7);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9);
  }
}

void sub_1B596C088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void HALS_IOContextReporter::`anonymous namespace'::ReportDeviceMetrics(uint64_t **a1, HALS_ObjectMap *this, HALS_ObjectMap *a3, _QWORD *a4)
{
  HALS_IODevice *v6;
  HALS_Device *v7;
  int NumberStreams;
  int NumberStreamsExcludingReferenceStreams;
  _OWORD *v10;
  void **v11;
  int v12;
  int v13;
  _OWORD *v14;
  void **v15;
  _OWORD *v16;
  void **v17;
  uint64_t v18;
  const __CFArray *v19;
  CFIndex v20;
  CFIndex v21;
  const __CFArray *v22;
  CFIndex v23;
  _OWORD *v24;
  void **v25;
  HALS_Object *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  int64x2_t v39;
  std::string::size_type v40;
  const __CFString **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  CFTypeRef *v45;
  char v46;
  uint64_t v47;
  const __CFDictionary *v48;
  HALS_Object *v49;
  uint64_t v50;
  std::__shared_weak_count *size;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  int v57;
  int *v58;
  int *v59;
  char v60;
  const std::string::value_type *v61;
  std::string::size_type v62;
  HALS_Object *v63;
  CFTypeRef *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  CFTypeRef v71;
  CFTypeRef v72;
  std::string *v73;
  std::string::size_type v74;
  std::string *v75;
  const std::string::value_type *v76;
  std::string::size_type v77;
  std::string *v78;
  const std::string::value_type *v79;
  std::string::size_type v80;
  std::string *v81;
  const std::string::value_type *v82;
  std::string::size_type v83;
  std::string *v84;
  const std::string::value_type *v85;
  std::string::size_type v86;
  std::string *v87;
  const std::string::value_type *v88;
  std::string::size_type v89;
  _OWORD *v90;
  const __CFString *v91;
  CFTypeID TypeID;
  std::string *p_cf;
  std::string::size_type v94;
  _OWORD *v95;
  std::string *v96;
  std::string::size_type v97;
  _OWORD *v98;
  std::string *v99;
  std::string::size_type v100;
  _OWORD *v101;
  std::string *v102;
  std::string::size_type v103;
  std::string *v104;
  std::string *v105;
  std::string::size_type v106;
  const __CFArray *v107;
  unint64_t v108;
  const __CFArray *v109;
  const __CFArray *v110;
  CFIndex v111;
  CFIndex v112;
  CFArrayRef v113;
  CFIndex v114;
  unint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  char *v122;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  int64x2_t v127;
  std::string::size_type v128;
  int64x2_t v129;
  const __CFString **v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  const __CFArray *v134;
  CFIndex v135;
  CFIndex v136;
  uint64_t v137;
  CFIndex v138;
  unint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  std::string::size_type v146;
  _QWORD *v147;
  _QWORD *v148;
  std::string::size_type v149;
  uint64_t v150;
  int64x2_t v151;
  std::string::size_type v152;
  __int128 v153;
  unint64_t v154;
  const __CFString **v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  char v159;
  uint64_t v160;
  int v161;
  char v162;
  std::string *v163;
  std::string::size_type v164;
  uint64_t v165;
  unsigned int v166;
  const __CFString *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  HALS_ObjectMap *v174;
  char v175;
  HALS_Object *v176;
  HALS_Object *v177;
  _DWORD *v178;
  std::runtime_error *v179;
  std::runtime_error *v180;
  std::runtime_error *v181;
  std::runtime_error *v182;
  _DWORD *exception;
  _DWORD *v184;
  std::runtime_error *v185;
  CFIndex v186;
  std::string::size_type v187;
  CFIndex Count;
  HALS_ObjectMap *v189;
  const __CFArray *theArray;
  CFIndex v191;
  unint64_t v192;
  uint64_t v193;
  CFTypeRef *v194;
  CFIndex v195;
  int __val;
  uint64_t v198;
  std::__shared_weak_count *v199;
  int64x2_t v200;
  char *v201;
  CFTypeRef v202;
  HALS_IODevice *v203;
  std::string __p;
  std::string cf;
  std::string v206;
  CFArrayRef v207;
  std::__shared_weak_count *v208;
  std::string v209;
  const __CFDictionary *v210;
  std::__shared_weak_count *v211;
  int64x2_t v212;
  char *v213;
  std::string *v214;
  const __CFDictionary *v215;
  uint64_t v216;
  int *v217;
  uint64_t v218;
  std::string v219;
  std::string::size_type v220;
  std::string::size_type *v221;
  uint64_t v222;

  v222 = *MEMORY[0x1E0C80C00];
  v189 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(this);
  if (!v189)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(v219.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v219.__r_.__value_.__r.__words + 4) = (std::string::size_type)"HALS_IOContextReporter.cpp";
      WORD2(v219.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v219.__r_.__value_.__r.__words[1] + 6) = 141;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReportTransportType: no HALS_IOContext object", (uint8_t *)&v219, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  v6 = (HALS_IODevice *)HALS_ObjectMap::CopyObjectByObjectID(a3);
  v7 = v6;
  v203 = v6;
  if (!v6)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(v219.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v219.__r_.__value_.__r.__words + 4) = (std::string::size_type)"HALS_IOContextReporter.cpp";
      WORD2(v219.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v219.__r_.__value_.__r.__words[1] + 6) = 144;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReportTransportType: no HALS_Device object", (uint8_t *)&v219, 0x12u);
    }
    v184 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v184 = &off_1E69A1B30;
    v184[2] = 560947818;
  }
  NumberStreams = HALS_IODevice::GetNumberStreams(v6, 0);
  NumberStreamsExcludingReferenceStreams = HALS_Device::GetNumberStreamsExcludingReferenceStreams(v7, 0);
  std::to_string(&v219, NumberStreams - NumberStreamsExcludingReferenceStreams);
  std::string::basic_string[abi:ne180100]<0>(&v212, "input_num_reference_streams");
  v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v212;
  v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v212, &v209);
  v11 = (void **)v10 + 7;
  if (*((char *)v10 + 79) < 0)
    operator delete(*v11);
  *(std::string *)v11 = v219;
  *((_BYTE *)&v219.__r_.__value_.__s + 23) = 0;
  v219.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v213) < 0)
  {
    operator delete((void *)v212.i64[0]);
    if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v219.__r_.__value_.__l.__data_);
  }
  v12 = HALS_IODevice::GetNumberStreams(v7, 1);
  v13 = HALS_Device::GetNumberStreamsExcludingReferenceStreams(v7, 1);
  std::to_string(&v219, v12 - v13);
  std::string::basic_string[abi:ne180100]<0>(&v212, "output_num_reference_streams");
  v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v212;
  v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v212, &v209);
  v15 = (void **)v14 + 7;
  if (*((char *)v14 + 79) < 0)
    operator delete(*v15);
  *(std::string *)v15 = v219;
  *((_BYTE *)&v219.__r_.__value_.__s + 23) = 0;
  v219.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v213) < 0)
  {
    operator delete((void *)v212.i64[0]);
    if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v219.__r_.__value_.__l.__data_);
  }
  if (HALS_IODevice::GetTransportType(v7) == 1735554416)
  {
    std::to_string(&v219, 1);
    std::string::basic_string[abi:ne180100]<0>(&v212, "device_is_aggregate");
    v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v212;
    v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v212, &v209);
    v17 = (void **)v16 + 7;
    if (*((char *)v16 + 79) < 0)
      operator delete(*v17);
    *(std::string *)v17 = v219;
    *((_BYTE *)&v219.__r_.__value_.__s + 23) = 0;
    v219.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v213) < 0)
    {
      operator delete((void *)v212.i64[0]);
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v219.__r_.__value_.__l.__data_);
    }
    v18 = *((unsigned int *)v189 + 4);
    v219.__r_.__value_.__r.__words[0] = 0x676C6F6261636F6DLL;
    LODWORD(v219.__r_.__value_.__r.__words[1]) = 0;
    v212.i64[0] = 0;
    LODWORD(v209.__r_.__value_.__l.__data_) = 0;
    (*(void (**)(HALS_ObjectMap *, uint64_t, std::string *, uint64_t, std::string *, int64x2_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v189 + 112))(v189, v18, &v219, 8, &v209, &v212, 0, 0, 0);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v202, (CFTypeRef)v212.i64[0]);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v216, "uid");
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v206, "taps");
    v200 = 0uLL;
    v201 = 0;
    if (v202)
    {
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef const&>(&v212, (const __CFDictionary *)v202, v206.__r_.__value_.__l.__data_);
      if (!v212.i8[8] || (v19 = (const __CFArray *)v212.i64[0]) == 0)
      {
LABEL_60:
        std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v212);
        if (v206.__r_.__value_.__r.__words[0])
          CFRelease(v206.__r_.__value_.__l.__data_);
        if (v216)
          CFRelease((CFTypeRef)v216);
        if (v200.i64[1] - v200.i64[0] < 1)
        {
          v41 = 0;
          v43 = 0;
        }
        else
        {
          v41 = (const __CFString **)std::get_temporary_buffer[abi:ne180100]<applesauce::CF::StringRef>((v200.i64[1] - v200.i64[0]) >> 3);
          v43 = v42;
        }
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>((const __CFString **)v200.i64[0], (const __CFString **)v200.i64[1], (uint64_t)&v212, (v200.i64[1] - v200.i64[0]) >> 3, v41, v43);
        if (v41)
          operator delete(v41);
        v44 = (uint64_t *)std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<applesauce::CF::StringRef *>,std::__wrap_iter<applesauce::CF::StringRef *>,std::__equal_to &>((const __CFString **)v200.i64[0], (const __CFString **)v200.i64[1]);
        std::vector<applesauce::CF::StringRef>::erase((uint64_t)&v200, v44, (uint64_t *)v200.i64[1]);
        std::string::basic_string[abi:ne180100]<0>(&v212, ", ");
        v194 = (CFTypeRef *)v200.i64[1];
        v45 = (CFTypeRef *)v200.i64[0];
        if (v200.i64[0] != v200.i64[1])
        {
          v46 = 1;
          do
          {
            v210 = 0;
            v211 = 0;
            HALS_System::GetInstance(&v219, 0, (uint64_t *)&v210);
            v47 = v219.__r_.__value_.__r.__words[0];
            v48 = (const __CFDictionary *)*v45;
            if (*v45)
              CFRetain(*v45);
            v215 = v48;
            v50 = HALS_System::CopyTapByUID(v47, v48, 0);
            if (v215)
              CFRelease(v215);
            size = (std::__shared_weak_count *)v219.__r_.__value_.__l.__size_;
            if (v219.__r_.__value_.__l.__size_)
            {
              v52 = (unint64_t *)(v219.__r_.__value_.__l.__size_ + 8);
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
            v54 = v211;
            if (!v211)
              goto LABEL_84;
            p_shared_owners = (unint64_t *)&v211->__shared_owners_;
            do
              v56 = __ldaxr(p_shared_owners);
            while (__stlxr(v56 - 1, p_shared_owners));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
              if (!v50)
                goto LABEL_232;
            }
            else
            {
LABEL_84:
              if (!v50)
                goto LABEL_232;
            }
            v57 = *(unsigned __int8 *)(v50 + 81);
            std::string::basic_string[abi:ne180100]<0>(&v209, "{ ");
            __val = v57;
            v216 = 0;
            v217 = 0;
            v218 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v216, *(const void **)(v50 + 208), *(_QWORD *)(v50 + 216), (uint64_t)(*(_QWORD *)(v50 + 216) - *(_QWORD *)(v50 + 208)) >> 2);
            v59 = (int *)v216;
            v58 = v217;
            if ((int *)v216 != v217)
            {
              v60 = 1;
              do
              {
                if ((v60 & 1) == 0)
                {
                  if (SHIBYTE(v213) >= 0)
                    v61 = (const std::string::value_type *)&v212;
                  else
                    v61 = (const std::string::value_type *)v212.i64[0];
                  if (SHIBYTE(v213) >= 0)
                    v62 = HIBYTE(v213);
                  else
                    v62 = v212.u64[1];
                  std::string::append(&v209, v61, v62);
                }
                v207 = 0;
                v208 = 0;
                HALS_System::GetInstance(&v219, 0, (uint64_t *)&v207);
                v64 = (CFTypeRef *)HALS_System::CopyClientByObjectID((HALS_System *)v219.__r_.__value_.__l.__data_, *v59);
                v65 = (std::__shared_weak_count *)v219.__r_.__value_.__l.__size_;
                if (v219.__r_.__value_.__l.__size_)
                {
                  v66 = (unint64_t *)(v219.__r_.__value_.__l.__size_ + 8);
                  do
                    v67 = __ldaxr(v66);
                  while (__stlxr(v67 - 1, v66));
                  if (!v67)
                  {
                    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                    std::__shared_weak_count::__release_weak(v65);
                  }
                }
                v68 = v208;
                if (!v208)
                  goto LABEL_104;
                v69 = (unint64_t *)&v208->__shared_owners_;
                do
                  v70 = __ldaxr(v69);
                while (__stlxr(v70 - 1, v69));
                if (!v70)
                {
                  ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                  std::__shared_weak_count::__release_weak(v68);
                  if (v64)
                  {
LABEL_105:
                    v71 = v64[30];
                    if (v71)
                    {
                      CFRetain(v71);
                      v72 = v64[30];
                      if (v72)
                        CFRetain(v64[30]);
                    }
                    else
                    {
                      v72 = 0;
                    }
                    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v206, v72);
                    if (!v206.__r_.__value_.__r.__words[0])
                    {
                      v179 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v179, "Could not construct");
                      __cxa_throw(v179, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                    }
                    applesauce::CF::convert_to<std::string,0>((uint64_t)&v219, (const __CFString *)v206.__r_.__value_.__l.__data_);
                    if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v73 = &v219;
                    else
                      v73 = (std::string *)v219.__r_.__value_.__r.__words[0];
                    if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v74 = HIBYTE(v219.__r_.__value_.__r.__words[2]);
                    else
                      v74 = v219.__r_.__value_.__l.__size_;
                    std::string::append(&v209, (const std::string::value_type *)v73, v74);
                    if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v219.__r_.__value_.__l.__data_);
                    if (v206.__r_.__value_.__r.__words[0])
                      CFRelease(v206.__r_.__value_.__l.__data_);
                  }
                }
                else
                {
LABEL_104:
                  if (v64)
                    goto LABEL_105;
                }
                HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v64, v63);
                v60 = 0;
                ++v59;
              }
              while (v59 != v58);
            }
            std::string::append(&v209, " }", 2uLL);
            if ((v46 & 1) == 0)
            {
              std::string::basic_string[abi:ne180100]<0>(&v219, "tap_name_list");
              v214 = &v219;
              v75 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v219, (_OWORD **)&v214)+ 56);
              if (SHIBYTE(v213) >= 0)
                v76 = (const std::string::value_type *)&v212;
              else
                v76 = (const std::string::value_type *)v212.i64[0];
              if (SHIBYTE(v213) >= 0)
                v77 = HIBYTE(v213);
              else
                v77 = v212.u64[1];
              std::string::append(v75, v76, v77);
              if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v219.__r_.__value_.__l.__data_);
              std::string::basic_string[abi:ne180100]<0>(&v219, "tap_is_mono_list");
              v214 = &v219;
              v78 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v219, (_OWORD **)&v214)+ 56);
              if (SHIBYTE(v213) >= 0)
                v79 = (const std::string::value_type *)&v212;
              else
                v79 = (const std::string::value_type *)v212.i64[0];
              if (SHIBYTE(v213) >= 0)
                v80 = HIBYTE(v213);
              else
                v80 = v212.u64[1];
              std::string::append(v78, v79, v80);
              if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v219.__r_.__value_.__l.__data_);
              std::string::basic_string[abi:ne180100]<0>(&v219, "tap_mute_behavior_list");
              v214 = &v219;
              v81 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v219, (_OWORD **)&v214)+ 56);
              if (SHIBYTE(v213) >= 0)
                v82 = (const std::string::value_type *)&v212;
              else
                v82 = (const std::string::value_type *)v212.i64[0];
              if (SHIBYTE(v213) >= 0)
                v83 = HIBYTE(v213);
              else
                v83 = v212.u64[1];
              std::string::append(v81, v82, v83);
              if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v219.__r_.__value_.__l.__data_);
              std::string::basic_string[abi:ne180100]<0>(&v219, "tap_is_exclusive_list");
              v214 = &v219;
              v84 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v219, (_OWORD **)&v214)+ 56);
              if (SHIBYTE(v213) >= 0)
                v85 = (const std::string::value_type *)&v212;
              else
                v85 = (const std::string::value_type *)v212.i64[0];
              if (SHIBYTE(v213) >= 0)
                v86 = HIBYTE(v213);
              else
                v86 = v212.u64[1];
              std::string::append(v84, v85, v86);
              if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v219.__r_.__value_.__l.__data_);
              std::string::basic_string[abi:ne180100]<0>(&v219, "tap_process_list_list");
              v214 = &v219;
              v87 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v219, (_OWORD **)&v214)+ 56);
              if (SHIBYTE(v213) >= 0)
                v88 = (const std::string::value_type *)&v212;
              else
                v88 = (const std::string::value_type *)v212.i64[0];
              if (SHIBYTE(v213) >= 0)
                v89 = HIBYTE(v213);
              else
                v89 = v212.u64[1];
              std::string::append(v87, v88, v89);
              if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v219.__r_.__value_.__l.__data_);
            }
            std::string::basic_string[abi:ne180100]<0>(&v206, "tap_name_list");
            v214 = &v206;
            v90 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v206, (_OWORD **)&v214);
            HALS_Tap::GetName(&v214, *(const void **)(v50 + 56));
            if (!v214)
            {
              v181 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v181, "Could not construct");
              __cxa_throw(v181, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, "Unknown");
            v91 = (const __CFString *)v214;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v219, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            else
              v219 = __p;
            if (v91 && (TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(v91)))
            {
              applesauce::CF::details::CFString_get_value<false>((uint64_t)&cf, v91);
              if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v219.__r_.__value_.__l.__data_);
            }
            else
            {
              cf = v219;
            }
            if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_cf = &cf;
            else
              p_cf = (std::string *)cf.__r_.__value_.__r.__words[0];
            if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v94 = HIBYTE(cf.__r_.__value_.__r.__words[2]);
            else
              v94 = cf.__r_.__value_.__l.__size_;
            std::string::append((std::string *)((char *)v90 + 56), (const std::string::value_type *)p_cf, v94);
            if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(cf.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (v214)
              CFRelease(v214);
            if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v206.__r_.__value_.__l.__data_);
            std::string::basic_string[abi:ne180100]<0>(&v219, "tap_is_mono_list");
            v214 = &v219;
            v95 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v219, (_OWORD **)&v214);
            std::to_string(&v206, *(unsigned __int8 *)(v50 + 80));
            if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v96 = &v206;
            else
              v96 = (std::string *)v206.__r_.__value_.__r.__words[0];
            if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v97 = HIBYTE(v206.__r_.__value_.__r.__words[2]);
            else
              v97 = v206.__r_.__value_.__l.__size_;
            std::string::append((std::string *)((char *)v95 + 56), (const std::string::value_type *)v96, v97);
            if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v206.__r_.__value_.__l.__data_);
            if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v219.__r_.__value_.__l.__data_);
            std::string::basic_string[abi:ne180100]<0>(&v219, "tap_mute_behavior_list");
            v214 = &v219;
            v98 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v219, (_OWORD **)&v214);
            std::string::basic_string[abi:ne180100]<0>(&v206, off_1E6976F58[*(int *)(v50 + 84)]);
            if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v99 = &v206;
            else
              v99 = (std::string *)v206.__r_.__value_.__r.__words[0];
            if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v100 = HIBYTE(v206.__r_.__value_.__r.__words[2]);
            else
              v100 = v206.__r_.__value_.__l.__size_;
            std::string::append((std::string *)((char *)v98 + 56), (const std::string::value_type *)v99, v100);
            if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v206.__r_.__value_.__l.__data_);
            if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v219.__r_.__value_.__l.__data_);
            std::string::basic_string[abi:ne180100]<0>(&v219, "tap_is_exclusive_list");
            v214 = &v219;
            v101 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v219, (_OWORD **)&v214);
            std::to_string(&v206, __val);
            if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v102 = &v206;
            else
              v102 = (std::string *)v206.__r_.__value_.__r.__words[0];
            if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v103 = HIBYTE(v206.__r_.__value_.__r.__words[2]);
            else
              v103 = v206.__r_.__value_.__l.__size_;
            std::string::append((std::string *)((char *)v101 + 56), (const std::string::value_type *)v102, v103);
            if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v206.__r_.__value_.__l.__data_);
            if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v219.__r_.__value_.__l.__data_);
            std::string::basic_string[abi:ne180100]<0>(&v219, "tap_process_list_list");
            v214 = &v219;
            v104 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v219, (_OWORD **)&v214)+ 56);
            if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v105 = &v209;
            else
              v105 = (std::string *)v209.__r_.__value_.__r.__words[0];
            if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v106 = HIBYTE(v209.__r_.__value_.__r.__words[2]);
            else
              v106 = v209.__r_.__value_.__l.__size_;
            std::string::append(v104, (const std::string::value_type *)v105, v106);
            if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v219.__r_.__value_.__l.__data_);
            if (v216)
              operator delete((void *)v216);
            if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v209.__r_.__value_.__l.__data_);
            v46 = 0;
LABEL_232:
            HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v50, v49);
            ++v45;
          }
          while (v45 != v194);
        }
        if (SHIBYTE(v213) < 0)
          operator delete((void *)v212.i64[0]);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "uid");
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&__p, "stream groups");
        v212 = 0uLL;
        v213 = 0;
        if (!v202)
        {
LABEL_368:
          v180 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v180, "Could not construct");
          __cxa_throw(v180, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(&v209, (CFDictionaryRef)v202, CFSTR("grid-out"));
        if (v209.__r_.__value_.__s.__data_[8])
        {
          theArray = (const __CFArray *)v209.__r_.__value_.__r.__words[0];
          if (v209.__r_.__value_.__r.__words[0])
          {
            Count = CFArrayGetCount((CFArrayRef)v209.__r_.__value_.__l.__data_);
            v187 = v209.__r_.__value_.__r.__words[0];
            v186 = v209.__r_.__value_.__r.__words[0] ? CFArrayGetCount((CFArrayRef)v209.__r_.__value_.__l.__data_) : 0;
            if (Count)
            {
              v192 = 0;
              while (1)
              {
                if (theArray == (const __CFArray *)v187 && v192 == v186)
                  goto LABEL_291;
                applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v210, theArray, v192);
                if (!v210)
                  goto LABEL_368;
                applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef const&>(&v216, v210, __p.__r_.__value_.__l.__data_);
                if ((_BYTE)v217)
                {
                  v107 = (const __CFArray *)v216;
                  if (v216)
                  {
                    v195 = CFArrayGetCount((CFArrayRef)v216);
                    v193 = v216;
                    v191 = v216 ? CFArrayGetCount((CFArrayRef)v216) : 0;
                    if (v195)
                      break;
                  }
                }
LABEL_288:
                std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v216);
                if (v210)
                  CFRelease(v210);
                if (++v192 == Count)
                  goto LABEL_291;
              }
              v108 = 0;
              while (1)
              {
                if (v107 == (const __CFArray *)v193 && v108 == v191)
                  goto LABEL_288;
                v109 = v107;
                applesauce::CF::details::at_to<applesauce::CF::ArrayRef>((applesauce::CF::ArrayRef *)&v207, v107, v108);
                v110 = v207;
                if (v207)
                  break;
LABEL_287:
                ++v108;
                v107 = v109;
                if (v108 == v195)
                  goto LABEL_288;
              }
              v111 = CFArrayGetCount(v207);
              v112 = v111;
              v113 = v207;
              if (v207)
              {
                v114 = CFArrayGetCount(v207);
                if (!v112)
                {
LABEL_285:
                  if (v207)
                    CFRelease(v207);
                  goto LABEL_287;
                }
              }
              else
              {
                v114 = 0;
                if (!v111)
                  goto LABEL_285;
              }
              v115 = 0;
              do
              {
                if (v110 == v113 && v115 == v114)
                  break;
                applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v215, v110, v115);
                if (!v215)
                  goto LABEL_368;
                applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,applesauce::CF::StringRef const&>(&v206, v215, cf.__r_.__value_.__l.__data_);
                if (v206.__r_.__value_.__s.__data_[8])
                {
                  if (v212.i64[1] >= (unint64_t)v213)
                  {
                    v117 = (v212.i64[1] - v212.i64[0]) >> 3;
                    if ((unint64_t)(v117 + 1) >> 61)
                      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                    v118 = (uint64_t)&v213[-v212.i64[0]] >> 2;
                    if (v118 <= v117 + 1)
                      v118 = v117 + 1;
                    if ((unint64_t)&v213[-v212.i64[0]] >= 0x7FFFFFFFFFFFFFF8)
                      v119 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v119 = v118;
                    v221 = (std::string::size_type *)&v213;
                    if (v119)
                    {
                      v121 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v119);
                    }
                    else
                    {
                      v121 = 0;
                      v120 = 0;
                    }
                    v122 = (char *)&v121[v120];
                    v220 = (std::string::size_type)v122;
                    v123 = std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(&v121[v117], v206.__r_.__value_.__l.__data_);
                    v116 = v123 + 1;
                    v219.__r_.__value_.__r.__words[2] = (std::string::size_type)(v123 + 1);
                    v124 = (_QWORD *)v212.i64[1];
                    v125 = (_QWORD *)v212.i64[0];
                    if (v212.i64[1] == v212.i64[0])
                    {
                      v127 = vdupq_n_s64(v212.u64[1]);
                    }
                    else
                    {
                      do
                      {
                        v126 = *--v124;
                        *--v123 = v126;
                        *v124 = 0;
                      }
                      while (v124 != v125);
                      v127 = v212;
                      v116 = (_QWORD *)v219.__r_.__value_.__r.__words[2];
                      v122 = (char *)v220;
                    }
                    v212.i64[0] = (uint64_t)v123;
                    v212.i64[1] = (uint64_t)v116;
                    *(int64x2_t *)&v219.__r_.__value_.__r.__words[1] = v127;
                    v128 = (std::string::size_type)v213;
                    v213 = v122;
                    v220 = v128;
                    v219.__r_.__value_.__r.__words[0] = v127.i64[0];
                    std::__split_buffer<applesauce::CF::StringRef>::~__split_buffer((uint64_t)&v219);
                  }
                  else
                  {
                    v116 = std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>((_QWORD *)v212.i64[1], v206.__r_.__value_.__l.__data_)+ 1;
                  }
                  v212.i64[1] = (uint64_t)v116;
                }
                std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v206);
                if (v215)
                  CFRelease(v215);
                ++v115;
              }
              while (v115 != v112);
              goto LABEL_285;
            }
          }
        }
LABEL_291:
        std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v209);
        if (__p.__r_.__value_.__r.__words[0])
          CFRelease(__p.__r_.__value_.__l.__data_);
        if (cf.__r_.__value_.__r.__words[0])
          CFRelease(cf.__r_.__value_.__l.__data_);
        v129 = v212;
        if (v212.i64[1] - v212.i64[0] < 1)
        {
          v130 = 0;
          v132 = 0;
        }
        else
        {
          v130 = (const __CFString **)std::get_temporary_buffer[abi:ne180100]<applesauce::CF::StringRef>((v212.i64[1] - v212.i64[0]) >> 3);
          v132 = v131;
        }
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>((const __CFString **)v129.i64[0], (const __CFString **)v129.i64[1], (uint64_t)&v209, (v129.i64[1] - v129.i64[0]) >> 3, v130, v132);
        if (v130)
          operator delete(v130);
        v133 = (uint64_t *)std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<applesauce::CF::StringRef *>,std::__wrap_iter<applesauce::CF::StringRef *>,std::__equal_to &>((const __CFString **)v212.i64[0], (const __CFString **)v212.i64[1]);
        std::vector<applesauce::CF::StringRef>::erase((uint64_t)&v212, v133, (uint64_t *)v212.i64[1]);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "uid");
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&__p, "stream groups");
        memset(&v209, 0, sizeof(v209));
        if (!v202)
        {
LABEL_385:
          v185 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v185, "Could not construct");
          __cxa_throw(v185, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(&v216, (CFDictionaryRef)v202, CFSTR("grid-in"));
        if (!(_BYTE)v217)
          goto LABEL_332;
        v134 = (const __CFArray *)v216;
        if (!v216)
          goto LABEL_332;
        v135 = CFArrayGetCount((CFArrayRef)v216);
        v136 = v135;
        v137 = v216;
        if (v216)
        {
          v138 = CFArrayGetCount((CFArrayRef)v216);
          if (!v136)
            goto LABEL_332;
        }
        else
        {
          v138 = 0;
          if (!v135)
          {
LABEL_332:
            std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v216);
            if (__p.__r_.__value_.__r.__words[0])
              CFRelease(__p.__r_.__value_.__l.__data_);
            if (cf.__r_.__value_.__r.__words[0])
              CFRelease(cf.__r_.__value_.__l.__data_);
            v153 = *(_OWORD *)&v209.__r_.__value_.__l.__data_;
            v154 = (uint64_t)(v209.__r_.__value_.__l.__size_ - v209.__r_.__value_.__r.__words[0]) >> 3;
            if ((uint64_t)(v209.__r_.__value_.__l.__size_ - v209.__r_.__value_.__r.__words[0]) < 1)
            {
              v155 = 0;
              v157 = 0;
            }
            else
            {
              v155 = (const __CFString **)std::get_temporary_buffer[abi:ne180100]<applesauce::CF::StringRef>((uint64_t)(v209.__r_.__value_.__l.__size_ - v209.__r_.__value_.__r.__words[0]) >> 3);
              v157 = v156;
            }
            std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>((const __CFString **)v153, *((const __CFString ***)&v153 + 1), (uint64_t)&v216, v154, v155, v157);
            if (v155)
              operator delete(v155);
            v158 = (uint64_t *)std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<applesauce::CF::StringRef *>,std::__wrap_iter<applesauce::CF::StringRef *>,std::__equal_to &>((const __CFString **)v209.__r_.__value_.__l.__data_, (const __CFString **)v209.__r_.__value_.__l.__size_);
            std::vector<applesauce::CF::StringRef>::erase((uint64_t)&v209, v158, (uint64_t *)v209.__r_.__value_.__l.__size_);
            v159 = 0;
            v160 = 0;
            v216 = 1;
            do
            {
              v161 = *((_DWORD *)&v216 + v160);
              v162 = v159;
              if (v161 == 1)
                v163 = &v209;
              else
                v163 = (std::string *)&v212;
              v164 = v163->__r_.__value_.__r.__words[0];
              if (v163->__r_.__value_.__l.__size_ != v163->__r_.__value_.__r.__words[0])
              {
                v165 = 0;
                v166 = 0;
                do
                {
                  v167 = *(const __CFString **)(v164 + 8 * v165);
                  v198 = 0;
                  v199 = 0;
                  HALS_System::GetInstance(&v219, 0, &v198);
                  v206.__r_.__value_.__r.__words[0] = (std::string::size_type)HALS_System::CopyDeviceByUID((HALS_System *)v219.__r_.__value_.__l.__data_, v167, 0);
                  v168 = (std::__shared_weak_count *)v219.__r_.__value_.__l.__size_;
                  if (v219.__r_.__value_.__l.__size_)
                  {
                    v169 = (unint64_t *)(v219.__r_.__value_.__l.__size_ + 8);
                    do
                      v170 = __ldaxr(v169);
                    while (__stlxr(v170 - 1, v169));
                    if (!v170)
                    {
                      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                      std::__shared_weak_count::__release_weak(v168);
                    }
                  }
                  v171 = v199;
                  if (v199)
                  {
                    v172 = (unint64_t *)&v199->__shared_owners_;
                    do
                      v173 = __ldaxr(v172);
                    while (__stlxr(v173 - 1, v172));
                    if (!v173)
                    {
                      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                      std::__shared_weak_count::__release_weak(v171);
                    }
                  }
                  v174 = (HALS_ObjectMap *)v206.__r_.__value_.__r.__words[0];
                  if (!v206.__r_.__value_.__r.__words[0])
                  {
                    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    {
                      LODWORD(v219.__r_.__value_.__l.__data_) = 136315394;
                      *(std::string::size_type *)((char *)v219.__r_.__value_.__r.__words + 4) = (std::string::size_type)"HALS_IOContextReporter.cpp";
                      WORD2(v219.__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&v219.__r_.__value_.__r.__words[1] + 6) = 205;
                      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReportDeviceMetrics: no HALS_Device object", (uint8_t *)&v219, 0x12u);
                    }
                    v178 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v178 = &off_1E69A1B30;
                    v178[2] = 560947818;
                  }
                  v175 = ((uint64_t)(v163->__r_.__value_.__l.__size_ - v163->__r_.__value_.__r.__words[0]) >> 3) - 1 == v165;
                  HALS_ObjectMap::ReleaseObject(v174, v176);
                  v164 = v163->__r_.__value_.__r.__words[0];
                  v165 = ++v166;
                }
                while (v166 < (unint64_t)((uint64_t)(v163->__r_.__value_.__l.__size_
                                                          - v163->__r_.__value_.__r.__words[0]) >> 3));
              }
              v159 = 1;
              v160 = 1;
            }
            while ((v162 & 1) == 0);
            v219.__r_.__value_.__r.__words[0] = (std::string::size_type)&v209;
            std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v219);
            v219.__r_.__value_.__r.__words[0] = (std::string::size_type)&v212;
            std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v219);
            v219.__r_.__value_.__r.__words[0] = (std::string::size_type)&v200;
            std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v219);
            if (v202)
              CFRelease(v202);
            v7 = v203;
            goto LABEL_363;
          }
        }
        v139 = 0;
        do
        {
          if (v134 == (const __CFArray *)v137 && v139 == v138)
            break;
          applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v210, v134, v139);
          if (!v210)
            goto LABEL_385;
          applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,applesauce::CF::StringRef const&>(&v206, v210, cf.__r_.__value_.__l.__data_);
          if (v206.__r_.__value_.__s.__data_[8])
          {
            if (v209.__r_.__value_.__l.__size_ >= v209.__r_.__value_.__r.__words[2])
            {
              v141 = (uint64_t)(v209.__r_.__value_.__l.__size_ - v209.__r_.__value_.__r.__words[0]) >> 3;
              if ((unint64_t)(v141 + 1) >> 61)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v142 = (uint64_t)(v209.__r_.__value_.__r.__words[2] - v209.__r_.__value_.__r.__words[0]) >> 2;
              if (v142 <= v141 + 1)
                v142 = v141 + 1;
              if (v209.__r_.__value_.__r.__words[2] - v209.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
                v143 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v143 = v142;
              v221 = &v209.__r_.__value_.__r.__words[2];
              if (v143)
              {
                v145 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v143);
              }
              else
              {
                v145 = 0;
                v144 = 0;
              }
              v146 = (std::string::size_type)&v145[v144];
              v220 = v146;
              v147 = std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(&v145[v141], v206.__r_.__value_.__l.__data_);
              v140 = v147 + 1;
              v219.__r_.__value_.__r.__words[2] = (std::string::size_type)(v147 + 1);
              v148 = (_QWORD *)v209.__r_.__value_.__l.__size_;
              v149 = v209.__r_.__value_.__r.__words[0];
              if (v209.__r_.__value_.__l.__size_ == v209.__r_.__value_.__r.__words[0])
              {
                v151 = vdupq_n_s64(v209.__r_.__value_.__l.__size_);
              }
              else
              {
                do
                {
                  v150 = *--v148;
                  *--v147 = v150;
                  *v148 = 0;
                }
                while (v148 != (_QWORD *)v149);
                v151 = *(int64x2_t *)&v209.__r_.__value_.__l.__data_;
                v140 = (_QWORD *)v219.__r_.__value_.__r.__words[2];
                v146 = v220;
              }
              v209.__r_.__value_.__r.__words[0] = (std::string::size_type)v147;
              v209.__r_.__value_.__l.__size_ = (std::string::size_type)v140;
              *(int64x2_t *)&v219.__r_.__value_.__r.__words[1] = v151;
              v152 = v209.__r_.__value_.__r.__words[2];
              v209.__r_.__value_.__r.__words[2] = v146;
              v220 = v152;
              v219.__r_.__value_.__r.__words[0] = v151.i64[0];
              std::__split_buffer<applesauce::CF::StringRef>::~__split_buffer((uint64_t)&v219);
            }
            else
            {
              v140 = std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>((_QWORD *)v209.__r_.__value_.__l.__size_, v206.__r_.__value_.__l.__data_)+ 1;
            }
            v209.__r_.__value_.__l.__size_ = (std::string::size_type)v140;
          }
          std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v206);
          if (v210)
            CFRelease(v210);
          ++v139;
        }
        while (v139 != v136);
        goto LABEL_332;
      }
      v20 = CFArrayGetCount((CFArrayRef)v212.i64[0]);
      v21 = v20;
      v22 = (const __CFArray *)v212.i64[0];
      if (v212.i64[0])
      {
        v23 = CFArrayGetCount((CFArrayRef)v212.i64[0]);
        if (!v21)
          goto LABEL_60;
      }
      else
      {
        v23 = 0;
        if (!v20)
          goto LABEL_60;
      }
      v27 = 0;
      while (1)
      {
        if (v19 == v22 && v27 == v23)
          goto LABEL_60;
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&cf, v19, v27);
        if (!cf.__r_.__value_.__r.__words[0])
          break;
        applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,applesauce::CF::StringRef const&>(&v209, (const __CFDictionary *)cf.__r_.__value_.__l.__data_, (const void *)v216);
        if (v209.__r_.__value_.__s.__data_[8])
        {
          if (v200.i64[1] >= (unint64_t)v201)
          {
            v29 = (v200.i64[1] - v200.i64[0]) >> 3;
            if ((unint64_t)(v29 + 1) >> 61)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v30 = (uint64_t)&v201[-v200.i64[0]] >> 2;
            if (v30 <= v29 + 1)
              v30 = v29 + 1;
            if ((unint64_t)&v201[-v200.i64[0]] >= 0x7FFFFFFFFFFFFFF8)
              v31 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v31 = v30;
            v221 = (std::string::size_type *)&v201;
            if (v31)
            {
              v33 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v31);
            }
            else
            {
              v33 = 0;
              v32 = 0;
            }
            v34 = (char *)&v33[v32];
            v220 = (std::string::size_type)v34;
            v35 = std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(&v33[v29], v209.__r_.__value_.__l.__data_);
            v28 = v35 + 1;
            v219.__r_.__value_.__r.__words[2] = (std::string::size_type)(v35 + 1);
            v36 = (_QWORD *)v200.i64[1];
            v37 = (_QWORD *)v200.i64[0];
            if (v200.i64[1] == v200.i64[0])
            {
              v39 = vdupq_n_s64(v200.u64[1]);
            }
            else
            {
              do
              {
                v38 = *--v36;
                *--v35 = v38;
                *v36 = 0;
              }
              while (v36 != v37);
              v39 = v200;
              v28 = (_QWORD *)v219.__r_.__value_.__r.__words[2];
              v34 = (char *)v220;
            }
            v200.i64[0] = (uint64_t)v35;
            v200.i64[1] = (uint64_t)v28;
            *(int64x2_t *)&v219.__r_.__value_.__r.__words[1] = v39;
            v40 = (std::string::size_type)v201;
            v201 = v34;
            v220 = v40;
            v219.__r_.__value_.__r.__words[0] = v39.i64[0];
            std::__split_buffer<applesauce::CF::StringRef>::~__split_buffer((uint64_t)&v219);
          }
          else
          {
            v28 = std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>((_QWORD *)v200.i64[1], v209.__r_.__value_.__l.__data_)+ 1;
          }
          v200.i64[1] = (uint64_t)v28;
        }
        std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v209);
        if (cf.__r_.__value_.__r.__words[0])
          CFRelease(cf.__r_.__value_.__l.__data_);
        if (++v27 == v21)
          goto LABEL_60;
      }
      v182 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v182, "Could not construct");
    }
    else
    {
      v182 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v182, "Could not construct");
    }
    __cxa_throw(v182, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  std::to_string(&v219, 0);
  std::string::basic_string[abi:ne180100]<0>(&v212, "device_is_aggregate");
  v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v212;
  v24 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v212, &v209);
  v25 = (void **)v24 + 7;
  if (*((char *)v24 + 79) < 0)
    operator delete(*v25);
  *(std::string *)v25 = v219;
  *((_BYTE *)&v219.__r_.__value_.__s + 23) = 0;
  v219.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v213) < 0)
  {
    operator delete((void *)v212.i64[0]);
    if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v219.__r_.__value_.__l.__data_);
  }
  if (HALS_Device::GetNumberStreamsExcludingReferenceStreams(v7, 1))
  {
  }
  if (HALS_Device::GetNumberStreamsExcludingReferenceStreams(v7, 0))
  {
  }
LABEL_363:
  HALS_ObjectMap::ReleaseObject(v7, v26);
  HALS_ObjectMap::ReleaseObject(v189, v177);
}

void sub_1B596D954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, HALS_ObjectMap *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B596DD5C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, HALS_ObjectMap *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,const void *a26,HALS_ObjectMap *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;
  HALS_ObjectMap *v41;
  HALS_Object *v42;
  HALS_Object *v43;

  if (a2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
    *(_QWORD *)(v39 - 144) = &a39;
    std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 144));
    *(_QWORD *)(v39 - 144) = v39 - 208;
    std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 144));
    v41 = a27;
    *(_QWORD *)(v39 - 144) = &a23;
    std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 144));
    applesauce::CF::DictionaryRef::~DictionaryRef(&a26);
    HALS_ObjectMap::ReleaseObject(v41, v42);
    HALS_ObjectMap::ReleaseObject(a13, v43);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B596D5ACLL);
  }
  JUMPOUT(0x1B596DD4CLL);
}

void sub_1B596DD84(uint64_t a1, int a2)
{
  if (a2)
  {
    pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
    JUMPOUT(0x1B596DDA0);
  }
  JUMPOUT(0x1B596DD4CLL);
}

void HALS_IOContextReporter::`anonymous namespace'::ReportCurrentStreamInfo(uint64_t **a1, HALS_ObjectMap *a2)
{
  int v4;
  uint64_t v5;
  std::string::size_type v6;
  int v7;
  HALB_Mutex *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  HALB_Mutex *v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  char *v17;
  int v18;
  char *v19;
  char *v20;
  int v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unsigned int *v25;
  unint64_t v26;
  unsigned int *v27;
  BOOL v28;
  HALS_Object *v29;
  int16x8_t v30;
  unsigned int *v31;
  unint64_t j;
  unsigned int v33;
  int32x4_t v34;
  uint32x4_t v35;
  std::string *v36;
  std::string *v37;
  std::string::size_type size;
  std::string *v39;
  const std::string::value_type *v40;
  void *v41;
  uint64_t k;
  _DWORD *exception;
  _QWORD v44[2];
  int v45;
  HALS_ObjectMap *v46;
  uint64_t v47;
  char *v48;
  void *v49[2];
  char v50;
  _QWORD v51[3];
  uint64_t v52[3];
  uint64_t v53[3];
  uint64_t v54[3];
  uint64_t v55[3];
  _QWORD v56[3];
  void *v57[2];
  unsigned __int8 v58;
  void **v59;
  std::string v60;
  void *v61;
  HALS_ObjectMap *v62;
  _BYTE *v63;
  int v64;
  BOOL v65;
  _BYTE buf[24];
  void *v67;
  std::string *v68;
  HALS_ObjectMap *v69;
  int v70;
  _QWORD v71[4];

  v71[1] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v57, ", ");
  std::string::basic_string[abi:ne180100]<0>(v51, "format_id");
  std::string::basic_string[abi:ne180100]<0>(v52, "bytes_per_packet");
  std::string::basic_string[abi:ne180100]<0>(v53, "frames_per_packet");
  std::string::basic_string[abi:ne180100]<0>(v54, "bytes_per_frame");
  std::string::basic_string[abi:ne180100]<0>(v55, "channels_per_frame");
  std::string::basic_string[abi:ne180100]<0>(v56, "bits_per_channel");
  v46 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(a2);
  if (!v46)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_IOContextReporter.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 389;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReportTransportType: no HALS_IOContext object", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  v4 = 0;
  v5 = 0;
  v71[0] = 1;
  v6 = MEMORY[0x1E0C809B0];
  do
  {
    v45 = v4;
    v7 = *((_DWORD *)v71 + v5);
    v60.__r_.__value_.__r.__words[0] = 0;
    v60.__r_.__value_.__l.__size_ = (std::string::size_type)&v60;
    v60.__r_.__value_.__r.__words[2] = 0x2000000000;
    LODWORD(v61) = 0;
    *(_QWORD *)buf = v6;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = ___ZNK14HALS_IOContext16GetNumberStreamsEb_block_invoke;
    v67 = &unk_1E698B018;
    v68 = &v60;
    v69 = v46;
    LOBYTE(v70) = v7 == 1;
    v8 = (HALB_Mutex *)(*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)v46 + 56))(v46);
    HALB_CommandGate::ExecuteCommand(v8, (uint64_t)buf);
    v9 = *(unsigned int *)(v60.__r_.__value_.__l.__size_ + 24);
    _Block_object_dispose(&v60, 8);
    v44[1] = v44;
    MEMORY[0x1E0C80A78]();
    v48 = (char *)v44 - ((v10 + 15) & 0x3FFFFFFFF0);
    v47 = 4 * v9;
    if ((_DWORD)v9)
    {
      for (i = 0; i != v9; ++i)
      {
        v60.__r_.__value_.__r.__words[0] = v6;
        v60.__r_.__value_.__l.__size_ = 0x40000000;
        v60.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK14HALS_IOContext20GetStreamInfoAtIndexEbjR25AudioIOContext_StreamInfo_block_invoke;
        v61 = &__block_descriptor_tmp_7_8599;
        v65 = v7 == 1;
        v64 = i;
        v62 = v46;
        v63 = buf;
        v12 = (HALB_Mutex *)(*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)v46 + 56))(v46);
        HALB_CommandGate::ExecuteCommand(v12, (uint64_t)&v60);
        v13 = v47;
        v14 = &v48[4 * i];
        v15 = (int)v68;
        *(_DWORD *)v14 = (_DWORD)v67;
        v16 = &v14[4 * v9];
        *(_DWORD *)v16 = v15;
        v17 = &v16[v13];
        v18 = (int)v69;
        *(_DWORD *)v17 = HIDWORD(v68);
        v19 = &v17[v13];
        *(_DWORD *)v19 = v18;
        v20 = &v19[v13];
        v21 = v70;
        *(_DWORD *)v20 = HIDWORD(v69);
        *(_DWORD *)&v20[v13] = v21;
      }
    }
    if (v7 == 1)
      v22 = "input_";
    else
      v22 = "output_";
    std::string::basic_string[abi:ne180100]<0>(buf, v22);
    v23 = 0;
    v24 = v48;
    do
    {
      v25 = (unsigned int *)&v48[4 * v23 * v9];
      if (v9 < 0x81)
      {
LABEL_14:
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,unsigned int *>(v25, &v25[v9], v9, 0, 0);
      }
      else
      {
        v26 = v9;
        while (1)
        {
          v27 = (unsigned int *)operator new(4 * v26, MEMORY[0x1E0DE4E10]);
          if (v27)
            break;
          v28 = v26 > 1;
          v26 >>= 1;
          if (!v28)
            goto LABEL_14;
        }
        v31 = v27;
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,unsigned int *>(v25, &v25[v9], v9, v27, v26);
        operator delete(v31);
      }
      if ((_DWORD)v9)
      {
        for (j = 0; j != v9; ++j)
        {
          v33 = *(_DWORD *)&v24[4 * j];
          if (v23)
          {
            std::to_string(&v60, v33);
          }
          else
          {
            v30.i32[0] = bswap32(v33);
            *(int8x8_t *)v30.i8 = vzip1_s8(*(int8x8_t *)v30.i8, *(int8x8_t *)v30.i8);
            v34.i64[0] = 0x1F0000001FLL;
            v34.i64[1] = 0x1F0000001FLL;
            v35.i64[0] = 0x5F0000005FLL;
            v35.i64[1] = 0x5F0000005FLL;
            *(int8x8_t *)v30.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v35, (uint32x4_t)vsraq_n_s32(v34, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v30.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v30.i8, (int8x8_t)0x2E002E002E002ELL);
            *((_BYTE *)&v60.__r_.__value_.__s + 23) = 4;
            LODWORD(v60.__r_.__value_.__l.__data_) = vmovn_s16(v30).u32[0];
            v60.__r_.__value_.__s.__data_[4] = 0;
          }
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)v49, (const void **)buf, (const void **)&v51[3 * v23]);
          v59 = v49;
          v36 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, v49, (_OWORD **)&v59)+ 56);
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v37 = &v60;
          else
            v37 = (std::string *)v60.__r_.__value_.__r.__words[0];
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
          else
            size = v60.__r_.__value_.__l.__size_;
          std::string::append(v36, (const std::string::value_type *)v37, size);
          if (v50 < 0)
            operator delete(v49[0]);
          if (j < (v9 - 1))
          {
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)v49, (const void **)buf, (const void **)&v51[3 * v23]);
            v59 = v49;
            v39 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, v49, (_OWORD **)&v59)+ 56);
            v40 = (v58 & 0x80u) == 0 ? (const std::string::value_type *)v57 : (const std::string::value_type *)v57[0];
            v41 = (v58 & 0x80u) == 0 ? (void *)v58 : v57[1];
            std::string::append(v39, v40, (std::string::size_type)v41);
            if (v50 < 0)
              operator delete(v49[0]);
          }
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v60.__r_.__value_.__l.__data_);
        }
      }
      ++v23;
      v24 += v47;
    }
    while (v23 != 6);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v4 = 1;
    v5 = 1;
    v6 = MEMORY[0x1E0C809B0];
  }
  while ((v45 & 1) == 0);
  HALS_ObjectMap::ReleaseObject(v46, v29);
  for (k = 0; k != -18; k -= 3)
  {
    if (SHIBYTE(v56[k + 2]) < 0)
      operator delete((void *)v56[k]);
  }
  if ((char)v58 < 0)
    operator delete(v57[0]);
}

void applesauce::CF::make_DictionaryRef<std::string,std::string>(CFDictionaryRef *a1, const UInt8 **a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  int64x2_t v12;
  unint64_t v13;
  const UInt8 **v14;
  const UInt8 *v15;
  const UInt8 *v16;
  CFStringRef *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  int64x2_t v26;
  unint64_t v27;
  UInt8 *v28;
  const UInt8 **v29;
  BOOL v30;
  uint64_t v31;
  void **i;
  void **v33;
  void *v34;
  void **v35;
  void **v36;
  void **v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void **v43;
  void *v44;
  void *v45;
  void **v46;
  void **v47;
  void **v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void **v54;
  void *v55;
  void **v56;
  void **v57;
  CFDictionaryRef v58;
  std::runtime_error *exception;
  std::runtime_error *v60;
  int64x2_t v61;
  _QWORD v62[2];
  void **values;
  void **v64;
  unint64_t v65;
  void **keys;
  int64x2_t v67;
  unint64_t v68;
  _QWORD *v69;

  v61 = 0uLL;
  v62[0] = 0;
  v4 = (unint64_t)a2[2];
  if (v4)
  {
    if (v4 >> 60)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v69 = v62;
    v5 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v4);
    v7 = &v5[16 * v6];
    v67.i64[1] = (uint64_t)v5;
    v68 = (unint64_t)v7;
    v8 = (_QWORD *)v61.i64[1];
    v9 = (_QWORD *)v61.i64[0];
    if (v61.i64[1] == v61.i64[0])
    {
      v12 = vdupq_n_s64(v61.u64[1]);
      v10 = v5;
    }
    else
    {
      v10 = v5;
      do
      {
        v11 = *(v8 - 2);
        v8 -= 2;
        *((_QWORD *)v10 - 2) = v11;
        v10 -= 16;
        *v8 = 0;
        *((_QWORD *)v10 + 1) = v8[1];
        v8[1] = 0;
      }
      while (v8 != v9);
      v12 = v61;
      v5 = (char *)v67.i64[1];
      v7 = (char *)v68;
    }
    v61.i64[0] = (uint64_t)v10;
    v61.i64[1] = (uint64_t)v5;
    v67 = v12;
    v13 = v62[0];
    v62[0] = v7;
    v68 = v13;
    keys = (void **)v12.i64[0];
    std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&keys);
  }
  v16 = *a2;
  v14 = a2 + 1;
  v15 = v16;
  if (v16 == (const UInt8 *)v14)
  {
    v17 = (CFStringRef *)v61.i64[1];
  }
  else
  {
    v17 = (CFStringRef *)v61.i64[1];
    do
    {
      if ((unint64_t)v17 >= v62[0])
      {
        v18 = ((uint64_t)v17 - v61.i64[0]) >> 4;
        if ((unint64_t)(v18 + 1) >> 60)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v19 = (v62[0] - v61.i64[0]) >> 3;
        if (v19 <= v18 + 1)
          v19 = v18 + 1;
        if (v62[0] - v61.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
          v20 = 0xFFFFFFFFFFFFFFFLL;
        else
          v20 = v19;
        v69 = v62;
        if (v20)
          v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v20);
        else
          v21 = 0;
        keys = (void **)v20;
        v67.i64[0] = v20 + 16 * v18;
        v67.i64[1] = v67.i64[0];
        v68 = v20 + 16 * v21;
        applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,std::string const&>((CFStringRef *)v67.i64[0], v15 + 32, (uint64_t)(v15 + 56));
        v22 = v67.i64[0];
        v17 = (CFStringRef *)(v67.i64[1] + 16);
        v67.i64[1] += 16;
        v23 = (_QWORD *)v61.i64[1];
        v24 = (_QWORD *)v61.i64[0];
        if (v61.i64[1] == v61.i64[0])
        {
          v26 = vdupq_n_s64(v61.u64[1]);
        }
        else
        {
          do
          {
            v25 = *(v23 - 2);
            v23 -= 2;
            *(_QWORD *)(v22 - 16) = v25;
            v22 -= 16;
            *v23 = 0;
            *(_QWORD *)(v22 + 8) = v23[1];
            v23[1] = 0;
          }
          while (v23 != v24);
          v26 = v61;
          v17 = (CFStringRef *)v67.i64[1];
        }
        v61.i64[0] = v22;
        v61.i64[1] = (uint64_t)v17;
        v67 = v26;
        v27 = v62[0];
        v62[0] = v68;
        v68 = v27;
        keys = (void **)v26.i64[0];
        std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&keys);
      }
      else
      {
        applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,std::string const&>(v17, v15 + 32, (uint64_t)(v15 + 56));
        v17 += 2;
      }
      v61.i64[1] = (uint64_t)v17;
      v28 = (UInt8 *)*((_QWORD *)v15 + 1);
      if (v28)
      {
        do
        {
          v29 = (const UInt8 **)v28;
          v28 = *(UInt8 **)v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (const UInt8 **)*((_QWORD *)v15 + 2);
          v30 = *v29 == v15;
          v15 = (const UInt8 *)v29;
        }
        while (!v30);
      }
      v15 = (const UInt8 *)v29;
    }
    while (v29 != v14);
  }
  v31 = ((uint64_t)v17 - v61.i64[0]) >> 4;
  keys = 0;
  v67 = 0uLL;
  std::vector<void const*>::reserve((void **)&keys, v31);
  values = 0;
  v64 = 0;
  v65 = 0;
  std::vector<void const*>::reserve((void **)&values, v31);
  v33 = (void **)v61.i64[1];
  for (i = (void **)v61.i64[0]; i != v33; i += 2)
  {
    v34 = *i;
    if (!*i || !i[1])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v35 = (void **)v67.i64[0];
    if (v67.i64[0] >= (unint64_t)v67.i64[1])
    {
      v37 = keys;
      v38 = (v67.i64[0] - (uint64_t)keys) >> 3;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 61)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v40 = v67.i64[1] - (_QWORD)keys;
      if ((v67.i64[1] - (uint64_t)keys) >> 2 > v39)
        v39 = v40 >> 2;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
        v41 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v41 = v39;
      if (v41)
        v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v41);
      else
        v42 = 0;
      v43 = (void **)(v41 + 8 * v38);
      *v43 = v34;
      v36 = v43 + 1;
      if (v35 != v37)
      {
        do
        {
          v44 = *--v35;
          *--v43 = v44;
        }
        while (v35 != v37);
        v35 = keys;
      }
      keys = v43;
      v67.i64[1] = v41 + 8 * v42;
      if (v35)
        operator delete(v35);
    }
    else
    {
      *(_QWORD *)v67.i64[0] = v34;
      v36 = v35 + 1;
    }
    v67.i64[0] = (uint64_t)v36;
    v45 = i[1];
    v46 = v64;
    if ((unint64_t)v64 >= v65)
    {
      v48 = values;
      v49 = v64 - values;
      v50 = v49 + 1;
      if ((unint64_t)(v49 + 1) >> 61)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v51 = v65 - (_QWORD)values;
      if ((uint64_t)(v65 - (_QWORD)values) >> 2 > v50)
        v50 = v51 >> 2;
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
        v52 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v52 = v50;
      if (v52)
        v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v52);
      else
        v53 = 0;
      v54 = (void **)(v52 + 8 * v49);
      *v54 = v45;
      v47 = v54 + 1;
      if (v46 != v48)
      {
        do
        {
          v55 = *--v46;
          *--v54 = v55;
        }
        while (v46 != v48);
        v46 = values;
      }
      values = v54;
      v65 = v52 + 8 * v53;
      if (v46)
        operator delete(v46);
    }
    else
    {
      *v64 = v45;
      v47 = v46 + 1;
    }
    v64 = v47;
  }
  v56 = keys;
  v57 = values;
  v58 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v31, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  if (!v58)
  {
    v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v60, "Could not construct");
    __cxa_throw(v60, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v57)
    operator delete(v57);
  if (v56)
    operator delete(v56);
  keys = (void **)&v61;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&keys);
  *a1 = v58;
}

void sub_1B596E9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *__p, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;

  __cxa_free_exception(v16);
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  __p = &a9;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRefPair,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRefPair,0>(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
}

CFStringRef *applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,std::string const&>(CFStringRef *a1, const UInt8 *a2, uint64_t a3)
{
  CFIndex v5;
  CFIndex v6;
  CFStringRef v7;
  int v8;
  const UInt8 *v9;
  CFIndex v10;
  CFStringRef v11;
  std::runtime_error *exception;
  std::runtime_error *v14;

  v5 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v6 = v5;
  }
  v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v8 = *(char *)(a3 + 23);
  if (v8 >= 0)
    v9 = (const UInt8 *)a3;
  else
    v9 = *(const UInt8 **)a3;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a3 + 23);
  else
    v10 = *(_QWORD *)(a3 + 8);
  v11 = CFStringCreateWithBytes(0, v9, v10, 0x8000100u, 0);
  a1[1] = v11;
  if (!v11)
  {
    v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Could not construct");
    __cxa_throw(v14, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return a1;
}

void sub_1B596EDC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRefPair,0>(i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

unsigned int *std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,unsigned int *>(unsigned int *result, unsigned int *a2, unint64_t a3, unsigned int *a4, uint64_t a5)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  char *v19;
  unint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  unsigned int *v23;
  char *v24;
  unsigned int *v25;
  unsigned int v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;

  if (a3 >= 2)
  {
    v6 = result;
    if (a3 == 2)
    {
      v7 = *(a2 - 1);
      v8 = *result;
      if (v7 < *result)
      {
        *result = v7;
        *(a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v19 = (char *)a4;
      v20 = a3 >> 1;
      v21 = &result[a3 >> 1];
      v22 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,unsigned int *>(result, v21, v22, a4);
        v23 = (unsigned int *)&v19[4 * v20];
        result = std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,unsigned int *>(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v23);
        v24 = &v19[4 * a3];
        v25 = v23;
        while (v25 != (unsigned int *)v24)
        {
          v26 = *v25;
          v27 = *v25 < *(_DWORD *)v19;
          if (*v25 >= *(_DWORD *)v19)
            v26 = *(_DWORD *)v19;
          v19 += 4 * (*v25 >= *(_DWORD *)v19);
          v25 += v27;
          *v6++ = v26;
          if (v19 == (char *)v23)
          {
            if (v25 != (unsigned int *)v24)
            {
              v28 = 0;
              do
              {
                v6[v28] = v25[v28];
                ++v28;
              }
              while (&v25[v28] != (unsigned int *)v24);
            }
            return result;
          }
        }
        if (v19 != (char *)v23)
        {
          v29 = 0;
          do
          {
            v6[v29] = *(_DWORD *)&v19[v29 * 4];
            ++v29;
          }
          while (&v19[v29 * 4] != (char *)v23);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,unsigned int *>(result, v21, v22, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,unsigned int *>(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v19, a5);
        return std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,unsigned int *>(v6, &v6[a3 >> 1], a2, a3 >> 1, a3 - (a3 >> 1), v19, a5);
      }
    }
    else if (result != a2)
    {
      v10 = result + 1;
      if (result + 1 != a2)
      {
        v11 = 4;
        v12 = result;
        do
        {
          v14 = *v12;
          v13 = v12[1];
          v12 = v10;
          if (v13 < v14)
          {
            v15 = v11;
            while (1)
            {
              *(unsigned int *)((char *)result + v15) = v14;
              v16 = v15 - 4;
              if (v15 == 4)
                break;
              v14 = *(unsigned int *)((char *)result + v15 - 8);
              v15 -= 4;
              if (v13 >= v14)
              {
                v17 = (unsigned int *)((char *)result + v16);
                goto LABEL_15;
              }
            }
            v17 = result;
LABEL_15:
            *v17 = v13;
          }
          v10 = v12 + 1;
          v11 += 4;
        }
        while (v12 + 1 != a2);
      }
    }
  }
  return result;
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t a1, const void **a2, const void **a3)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a2 + 23) >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (*((char *)a3 + 23) >= 0)
    v6 = *((unsigned __int8 *)a3 + 23);
  else
    v6 = (size_t)a3[1];
  result = std::string::basic_string[abi:ne180100](a1, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a3 + 23) >= 0)
      v11 = a3;
    else
      v11 = *a3;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

_OWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x50uLL);
    v11[1] = a1 + 1;
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((_QWORD *)v6 + 8) = 0;
    *((_QWORD *)v6 + 9) = 0;
    *((_QWORD *)v6 + 7) = 0;
    v12 = 1;
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

unsigned int *std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,unsigned int *>(unsigned int *result, unsigned int *a2, unint64_t a3, unsigned int *a4)
{
  unsigned int *v4;
  unsigned int *v6;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int *v20;
  int *v21;
  unsigned int v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;

  if (a3)
  {
    v4 = a4;
    v6 = result;
    if (a3 == 1)
    {
LABEL_9:
      *v4 = *v6;
      return result;
    }
    if (a3 == 2)
    {
      v9 = *(a2 - 1);
      v8 = v9;
      v10 = v9 >= *result;
      if (v9 >= *result)
        v8 = *result;
      *a4 = v8;
      v4 = a4 + 1;
      if (v10)
        v6 = a2 - 1;
      goto LABEL_9;
    }
    if ((uint64_t)a3 > 8)
    {
      v20 = &result[a3 >> 1];
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,unsigned int *>(result, v20, a3 >> 1, a4, a3 >> 1);
      result = (unsigned int *)std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,unsigned int *>(&v6[a3 >> 1], a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v21 = (int *)&v6[a3 >> 1];
      while (v21 != (int *)a2)
      {
        v22 = *v21;
        v23 = *v21 >= *v6;
        if (*v21 >= *v6)
          v22 = *v6;
        v21 += *v21 < *v6;
        v6 += v23;
        *v4++ = v22;
        if (v6 == v20)
        {
          if (v21 != (int *)a2)
          {
            v24 = 0;
            do
            {
              v4[v24] = v21[v24];
              ++v24;
            }
            while (&v21[v24] != (int *)a2);
          }
          return result;
        }
      }
      if (v6 != v20)
      {
        v25 = 0;
        do
        {
          v4[v25] = v6[v25];
          ++v25;
        }
        while (&v6[v25] != v20);
      }
    }
    else if (result != a2)
    {
      v11 = result + 1;
      *a4 = *result;
      if (result + 1 != a2)
      {
        v12 = 0;
        v13 = a4;
        v14 = a4;
        do
        {
          v16 = *v14++;
          v15 = v16;
          if (*v11 >= v16)
          {
            *v14 = *v11;
          }
          else
          {
            v13[1] = v15;
            v17 = a4;
            if (v13 != a4)
            {
              v18 = v12;
              while (1)
              {
                v17 = (unsigned int *)((char *)a4 + v18);
                v19 = *(unsigned int *)((char *)a4 + v18 - 4);
                if (*v11 >= v19)
                  break;
                *v17 = v19;
                v18 -= 4;
                if (!v18)
                {
                  v17 = a4;
                  break;
                }
              }
            }
            *v17 = *v11;
          }
          ++v11;
          v12 += 4;
          v13 = v14;
        }
        while (v11 != a2);
      }
    }
  }
  return result;
}

unsigned int *std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,unsigned int *>(unsigned int *result, unsigned int *a2, unsigned int *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v8;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v37;
  unsigned int *v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int *v51;
  BOOL v52;
  char v53;
  uint64_t v54;
  unsigned int *v55;
  char *v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  BOOL v65;
  uint64_t v66;
  char *v67;
  unsigned int v68;
  _BOOL4 v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;

  if (a5)
  {
    v8 = a5;
    v11 = result;
    while (v8 > a7 && a4 > a7)
    {
      if (!a4)
        return result;
      v12 = *a2;
      while (1)
      {
        v13 = *v11;
        if (v12 < *v11)
          break;
        ++v11;
        if (!--a4)
          return result;
      }
      if (a4 >= v8)
      {
        if (a4 == 1)
        {
          *v11 = v12;
          *a2 = v13;
          return result;
        }
        if (a4 >= 0)
          v24 = a4;
        else
          v24 = a4 + 1;
        v23 = v24 >> 1;
        v17 = &v11[v24 >> 1];
        v16 = a3;
        if (a3 != a2)
        {
          v25 = a3 - a2;
          v16 = a2;
          do
          {
            v26 = v25 >> 1;
            v27 = &v16[v25 >> 1];
            v29 = *v27;
            v28 = v27 + 1;
            v25 += ~(v25 >> 1);
            if (v29 < *v17)
              v16 = v28;
            else
              v25 = v26;
          }
          while (v25);
        }
        v15 = v16 - a2;
      }
      else
      {
        if (v8 >= 0)
          v14 = v8;
        else
          v14 = v8 + 1;
        v15 = v14 >> 1;
        v16 = &a2[v14 >> 1];
        v17 = a2;
        if (a2 != v11)
        {
          v18 = a2 - v11;
          v17 = v11;
          do
          {
            v19 = v18 >> 1;
            v20 = &v17[v18 >> 1];
            v22 = *v20;
            v21 = v20 + 1;
            v18 += ~(v18 >> 1);
            if (*v16 < v22)
              v18 = v19;
            else
              v17 = v21;
          }
          while (v18);
        }
        v23 = v17 - v11;
      }
      v30 = v16;
      if (v17 != a2)
      {
        v30 = v17;
        if (a2 != v16)
        {
          if (v17 + 1 == a2)
          {
            v71 = *v17;
            v37 = (char *)v16 - (char *)a2;
            v73 = v23;
            v75 = a6;
            v38 = a3;
            v39 = v15;
            memmove(v17, a2, (char *)v16 - (char *)a2);
            v15 = v39;
            v23 = v73;
            a6 = v75;
            a3 = v38;
            v30 = (unsigned int *)((char *)v17 + v37);
            *v30 = v71;
          }
          else if (a2 + 1 == v16)
          {
            v40 = *(v16 - 1);
            v30 = v17 + 1;
            if (v16 - 1 != v17)
            {
              v74 = v23;
              v76 = a6;
              v41 = a3;
              v42 = v15;
              v72 = *(v16 - 1);
              memmove(v17 + 1, v17, (char *)(v16 - 1) - (char *)v17);
              v40 = v72;
              v15 = v42;
              v23 = v74;
              a6 = v76;
              a3 = v41;
            }
            *v17 = v40;
          }
          else
          {
            v31 = a2 - v17;
            if (v31 == v16 - a2)
            {
              v32 = 0;
              do
              {
                v33 = v17[v32];
                v17[v32] = a2[v32];
                v34 = (uint64_t)&v17[v32 + 1];
                a2[v32] = v33;
                v35 = (uint64_t)&a2[++v32];
              }
              while ((unsigned int *)v34 != a2 && v35 != (_QWORD)v16);
              v30 = a2;
            }
            else
            {
              v43 = v16 - a2;
              v44 = a2 - v17;
              do
              {
                v45 = v44;
                v44 = v43;
                v43 = v45 % v43;
              }
              while (v43);
              if (v44)
              {
                v46 = &v17[v44];
                do
                {
                  v48 = *--v46;
                  v47 = v48;
                  v49 = &v46[v31];
                  v50 = v46;
                  do
                  {
                    v51 = v50;
                    v50 = v49;
                    *v51 = *v49;
                    v52 = __OFSUB__(v31, v16 - v49);
                    v54 = v31 - (v16 - v49);
                    v53 = (v54 < 0) ^ v52;
                    v49 = &v17[v54];
                    if (v53)
                      v49 = &v50[v31];
                  }
                  while (v49 != v46);
                  *v50 = v47;
                }
                while (v46 != v17);
              }
              v30 = &v17[v16 - a2];
            }
          }
        }
      }
      a4 -= v23;
      v8 -= v15;
      if (v23 + v15 >= a4 + v8)
      {
        v58 = a4;
        v59 = v15;
        v56 = a6;
        result = (unsigned int *)std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,unsigned int *>(v30, v16, a3, v58, v8, a6, a7);
        v16 = v17;
        v8 = v59;
        a4 = v23;
        a3 = v30;
      }
      else
      {
        v55 = v11;
        v56 = a6;
        v57 = a3;
        result = (unsigned int *)std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,unsigned int *>(v55, v17, v30, v23, v15, a6, a7);
        a3 = v57;
        v11 = v30;
      }
      a2 = v16;
      a6 = v56;
      if (!v8)
        return result;
    }
    if (a4 <= v8)
    {
      if (v11 != a2)
      {
        v66 = 0;
        do
        {
          *(_DWORD *)&a6[v66 * 4] = v11[v66];
          ++v66;
        }
        while (&v11[v66] != a2);
        v67 = &a6[v66 * 4];
        if (v67 != a6)
        {
          while (a2 != a3)
          {
            v68 = *a2;
            v69 = *a2 < *(_DWORD *)a6;
            if (*a2 >= *(_DWORD *)a6)
              v68 = *(_DWORD *)a6;
            a6 += 4 * (*a2 >= *(_DWORD *)a6);
            a2 += v69;
            *v11++ = v68;
            if (a6 == v67)
              return result;
          }
          return (unsigned int *)memmove(v11, a6, v67 - a6);
        }
      }
    }
    else if (a2 != a3)
    {
      v60 = 0;
      do
      {
        *(_DWORD *)&a6[v60 * 4] = a2[v60];
        ++v60;
      }
      while (&a2[v60] != a3);
      v61 = &a6[v60 * 4];
      if (v61 != a6)
      {
        v62 = a3 - 1;
        while (a2 != v11)
        {
          v63 = *((_DWORD *)v61 - 1);
          v64 = *(a2 - 1);
          v65 = v63 >= v64;
          if (v63 <= v64)
            v63 = *(a2 - 1);
          if (v65)
            v61 -= 4;
          else
            --a2;
          *v62-- = v63;
          if (v61 == a6)
            return result;
        }
        v70 = 0;
        do
        {
          v62[v70] = *(_DWORD *)&v61[v70 * 4 - 4];
          --v70;
        }
        while (&v61[v70 * 4] != a6);
      }
    }
  }
  return result;
}

void HALS_IOContextReporter::`anonymous namespace'::PopulateDevice(uint64_t **a1, HALS_IODevice **a2, int a3, char a4, _QWORD *a5)
{
  uint64_t v9;
  int TransportType;
  char *v11;
  std::string *v12;
  std::string *v13;
  std::string::size_type size;
  const std::ctype<char> *ct;
  uint64_t *v16;
  HALS_Object *v17;
  uint64_t *v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t *v23;
  std::string *v24;
  std::string *v25;
  std::string::size_type v26;
  const std::ctype<char> *v27;
  uint64_t *v28;
  HALS_Object *v29;
  uint64_t *v30;
  _BOOL4 v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  std::string *v35;
  std::string *v36;
  std::string::size_type v37;
  const void *v38;
  const void *v39;
  std::string::size_type v40;
  std::string *v41;
  std::__shared_weak_count *cntrl;
  uint64_t *p_shared_owners;
  unint64_t v44;
  std::string *v45;
  std::string *v46;
  std::string::size_type v47;
  unsigned int *v48;
  HALS_ObjectMap *v49;
  uint64_t v50;
  char *v51;
  HALS_Object *v52;
  std::runtime_error *exception;
  std::string *v54;
  std::string *v55;
  std::string::size_type v56;
  HALS_IODevice *v57;
  uint64_t v58;
  unsigned int v59;
  std::string *v60;
  std::string *v61;
  std::string::size_type v62;
  int8x8_t v63;
  unint64_t v64;
  uint8x8_t v65;
  unint64_t v66;
  uint64_t **v67;
  uint64_t *i;
  unint64_t v69;
  std::string *v70;
  std::string *v71;
  std::string::size_type v72;
  std::string v73;
  void *v74;
  char v75;
  std::string v76;
  std::string v77;
  void *v78;
  char v79;
  std::string v80;
  void *v81;
  char v82;
  std::string v83;
  std::string v84;
  void *v85;
  char v86;
  std::string v87;
  std::string v88;
  std::string v89;
  std::string v90;
  void *v91;
  char v92;
  std::string v93;
  void *v94;
  char v95;
  std::string v96;
  void *__p;
  char v98;
  std::string v99;
  uint64_t v100;
  uint64_t v101;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *v107;

  if (a3)
    v9 = 1768845428;
  else
    v9 = 1869968496;
  TransportType = HALS_IODevice::GetTransportType(*a2);
  if (TransportType > 1685090931)
  {
    if (TransportType > 1885563167)
    {
      if (TransportType > 1970496031)
      {
        if (TransportType == 1970496032)
        {
          v11 = "USB";
          goto LABEL_41;
        }
        if (TransportType == 1986622068)
        {
          v11 = "Virtual";
          goto LABEL_41;
        }
      }
      else
      {
        if (TransportType == 1885563168)
        {
          v11 = "PCI";
          goto LABEL_41;
        }
        if (TransportType == 1953002862)
        {
          v11 = "Thunderbolt";
          goto LABEL_41;
        }
      }
    }
    else if (TransportType > 1735554415)
    {
      if (TransportType == 1735554416)
      {
        v11 = "Aggregate";
        goto LABEL_41;
      }
      if (TransportType == 1751412073)
      {
        v11 = "HDMI";
        goto LABEL_41;
      }
    }
    else
    {
      if (TransportType == 1685090932)
      {
        v11 = "DisplayPort";
        goto LABEL_41;
      }
      if (TransportType == 1700886114)
      {
        v11 = "AVB";
        goto LABEL_41;
      }
    }
    goto LABEL_39;
  }
  if (TransportType > 1651274861)
  {
    if (TransportType > 1667463011)
    {
      if (TransportType == 1667463012)
      {
        v11 = "ContinuityCaptureWired";
        goto LABEL_41;
      }
      if (TransportType == 1667463020)
      {
        v11 = "ContinuityCaptureWireless";
        goto LABEL_41;
      }
    }
    else
    {
      if (TransportType == 1651274862)
      {
        v11 = "BuiltIn";
        goto LABEL_41;
      }
      if (TransportType == 1651275109)
      {
        v11 = "Bluetooth";
        goto LABEL_41;
      }
    }
LABEL_39:
    v11 = "Unknown";
    goto LABEL_41;
  }
  if (TransportType != 825440564)
  {
    if (TransportType == 1634300528)
    {
      v11 = "AirPlay";
      goto LABEL_41;
    }
    if (TransportType == 1651271009)
    {
      v11 = "BluetoothLE";
      goto LABEL_41;
    }
    goto LABEL_39;
  }
  v11 = "FireWire";
LABEL_41:
  std::string::basic_string[abi:ne180100]<0>(&v99, v11);
  std::string::basic_string[abi:ne180100]<0>(&__p, "device_transport_list");
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v96, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
  else
    v96 = v99;
  std::operator+<char>();
  v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
  v12 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v102, &v89)+ 56);
  if (SHIBYTE(v102.__traits_.__col_) < 0)
    operator delete(v102.__traits_.__loc_.__locale_);
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v96;
  else
    v13 = (std::string *)v96.__r_.__value_.__r.__words[0];
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  else
    size = v96.__r_.__value_.__l.__size_;
  std::string::append(v12, (const std::string::value_type *)v13, size);
  if ((a4 & 1) == 0)
    std::string::append(v12, ", ", 2uLL);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
  if (v98 < 0)
    operator delete(__p);
  LODWORD(v89.__r_.__value_.__l.__data_) = 1818456950;
  *(std::string::size_type *)((char *)v89.__r_.__value_.__r.__words + 4) = v9;
  memset(&v102, 0, 24);
  (*(void (**)(HALS_IODevice *, std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *))(*(_QWORD *)*a2 + 616))(*a2, &v102);
  ct = v102.__traits_.__ct_;
  if (ct == (const std::ctype<char> *)v16)
  {
    v19 = 1.0;
  }
  else
  {
    v18 = v16;
    v19 = 0.0;
    do
    {
      v20 = *v18;
      v21 = *(unsigned int *)(*v18 + 16);
      v100 = 0;
      (*(void (**)(uint64_t, uint64_t, std::string *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v20 + 112))(v20, v21, &v89, 4, &v100, (char *)&v100 + 4, 0, 0, 0);
      v22 = *((float *)&v100 + 1);
      v18 = v23;
      if (v19 < v22)
        v19 = v22;
    }
    while (ct != (const std::ctype<char> *)v23);
  }
  HALS_Device::BasicControlList::~BasicControlList((HALS_ObjectMap ***)&v102, v17);
  std::string::basic_string[abi:ne180100]<0>(&v94, "device_volume_list");
  std::to_string(&v93, v19);
  std::operator+<char>();
  v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
  v24 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v102, &v89)+ 56);
  if (SHIBYTE(v102.__traits_.__col_) < 0)
    operator delete(v102.__traits_.__loc_.__locale_);
  if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = &v93;
  else
    v25 = (std::string *)v93.__r_.__value_.__r.__words[0];
  if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
  else
    v26 = v93.__r_.__value_.__l.__size_;
  std::string::append(v24, (const std::string::value_type *)v25, v26);
  if ((a4 & 1) == 0)
    std::string::append(v24, ", ", 2uLL);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  if (v95 < 0)
    operator delete(v94);
  LODWORD(v89.__r_.__value_.__l.__data_) = 1650685548;
  *(std::string::size_type *)((char *)v89.__r_.__value_.__r.__words + 4) = v9;
  memset(&v102, 0, 24);
  (*(void (**)(HALS_IODevice *, std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *))(*(_QWORD *)*a2 + 616))(*a2, &v102);
  v27 = v102.__traits_.__ct_;
  if (v27 == (const std::ctype<char> *)v28)
  {
    v31 = 0;
  }
  else
  {
    v30 = v28;
    LOBYTE(v31) = 1;
    v32 = (uint64_t *)v27;
    do
    {
      if (v31)
      {
        v33 = *v30;
        v34 = *(unsigned int *)(*v30 + 16);
        v101 = 0;
        (*(void (**)(uint64_t, uint64_t, std::string *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v33 + 112))(v33, v34, &v89, 4, &v101, (char *)&v101 + 4, 0, 0, 0);
        v31 = HIDWORD(v101) != 0;
        v32 = (uint64_t *)v102.__traits_.__ct_;
      }
      else
      {
        v31 = 0;
      }
    }
    while (v27 != (const std::ctype<char> *)v30);
  }
  HALS_Device::BasicControlList::~BasicControlList((HALS_ObjectMap ***)&v102, v29);
  std::string::basic_string[abi:ne180100]<0>(&v91, "device_is_muted_list");
  std::to_string(&v90, v31);
  std::operator+<char>();
  v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
  v35 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v102, &v89)+ 56);
  if (SHIBYTE(v102.__traits_.__col_) < 0)
    operator delete(v102.__traits_.__loc_.__locale_);
  if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = &v90;
  else
    v36 = (std::string *)v90.__r_.__value_.__r.__words[0];
  if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
  else
    v37 = v90.__r_.__value_.__l.__size_;
  std::string::append(v35, (const std::string::value_type *)v36, v37);
  if ((a4 & 1) == 0)
    std::string::append(v35, ", ", 2uLL);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  if (v92 < 0)
    operator delete(v91);
  v38 = (const void *)(*(uint64_t (**)(HALS_IODevice *))(*(_QWORD *)*a2 + 200))(*a2);
  v39 = v38;
  if (v38)
    CFRetain(v38);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v102, v39);
  if (!v102.__traits_.__loc_.__locale_)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::convert_to<std::string,0>((uint64_t)&v89, (const __CFString *)v102.__traits_.__loc_.__locale_);
  if (v102.__traits_.__loc_.__locale_)
    CFRelease(v102.__traits_.__loc_.__locale_);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v87, v89.__r_.__value_.__l.__data_, v89.__r_.__value_.__l.__size_);
  else
    v87 = v89;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v102.__traits_, "[a-fA-F0-9:]{17}|[a-fA-F0-9]{12}|[a-fA-F0-9.]{5}|[a-fA-F0-9-]{4}");
  memset(&v88, 0, sizeof(v88));
  v40 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
  if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = &v87;
  else
    v41 = (std::string *)v87.__r_.__value_.__r.__words[0];
  if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v40 = v87.__r_.__value_.__l.__size_;
  std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&v88, (char *)v41, (char *)v41 + v40, &v102, "");
  cntrl = v102.__start_.__cntrl_;
  if (v102.__start_.__cntrl_)
  {
    p_shared_owners = &v102.__start_.__cntrl_->__shared_owners_;
    do
      v44 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v44 - 1, (unint64_t *)p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  std::locale::~locale(&v102.__traits_.__loc_);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v85, "device_uid_list");
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v84, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
  else
    v84 = v88;
  std::operator+<char>();
  v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
  v45 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v102, &v83)+ 56);
  if (SHIBYTE(v102.__traits_.__col_) < 0)
    operator delete(v102.__traits_.__loc_.__locale_);
  if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v46 = &v84;
  else
    v46 = (std::string *)v84.__r_.__value_.__r.__words[0];
  if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v47 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
  else
    v47 = v84.__r_.__value_.__l.__size_;
  std::string::append(v45, (const std::string::value_type *)v46, v47);
  if ((a4 & 1) == 0)
    std::string::append(v45, ", ", 2uLL);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if (v86 < 0)
    operator delete(v85);
  v48 = (unsigned int *)(*(uint64_t (**)(HALS_IODevice *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)*a2 + 640))(*a2, 1685287523, v9, 0);
  v49 = (HALS_ObjectMap *)v48;
  if (v48)
  {
    v50 = v48[4];
    v104 = 0x676C6F6273636369;
    v105 = 0;
    v106 = 0;
    (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v48 + 112))(v48, v50, &v104, 4, &v106, (char *)&v106 + 4, 0, 0, 0);
    if (SHIDWORD(v106) > 1768778082)
    {
      if (SHIDWORD(v106) > 1818848868)
      {
        if (HIDWORD(v106) == 1818848869)
        {
          v51 = "Line";
          goto LABEL_158;
        }
        if (HIDWORD(v106) == 1936745574)
        {
          v51 = "SPDIF";
          goto LABEL_158;
        }
      }
      else
      {
        if (HIDWORD(v106) == 1768778083)
        {
          v51 = "Internal Microphone";
          goto LABEL_158;
        }
        if (HIDWORD(v106) == 1769173099)
        {
          v51 = "Internal Speaker";
          goto LABEL_158;
        }
      }
    }
    else if (SHIDWORD(v106) > 1702064234)
    {
      if (HIDWORD(v106) == 1702064235)
      {
        v51 = "External Speaker";
        goto LABEL_158;
      }
      if (HIDWORD(v106) == 1751412846)
      {
        v51 = "Headphones";
        goto LABEL_158;
      }
    }
    else
    {
      if (HIDWORD(v106) == 1667506208)
      {
        v51 = "CD";
        goto LABEL_158;
      }
      if (HIDWORD(v106) == 1701669219)
      {
        v51 = "External Microphone";
LABEL_158:
        std::string::basic_string[abi:ne180100]<0>(&v83, v51);
        goto LABEL_161;
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v83, "Unknown");
LABEL_161:
  HALS_ObjectMap::ReleaseObject(v49, v52);
  std::string::basic_string[abi:ne180100]<0>(&v81, "device_source_list");
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v80, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
  else
    v80 = v83;
  std::operator+<char>();
  v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
  v54 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v102, &v76)+ 56);
  if (SHIBYTE(v102.__traits_.__col_) < 0)
    operator delete(v102.__traits_.__loc_.__locale_);
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v55 = &v80;
  else
    v55 = (std::string *)v80.__r_.__value_.__r.__words[0];
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v56 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
  else
    v56 = v80.__r_.__value_.__l.__size_;
  std::string::append(v54, (const std::string::value_type *)v55, v56);
  if ((a4 & 1) == 0)
    std::string::append(v54, ", ", 2uLL);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  if (v82 < 0)
    operator delete(v81);
  LODWORD(v102.__traits_.__loc_.__locale_) = 1819569763;
  HIDWORD(v102.__traits_.__loc_.__locale_) = v9;
  LODWORD(v102.__traits_.__ct_) = 0;
  v57 = *a2;
  v58 = *((unsigned int *)*a2 + 4);
  v103 = 0;
  (*(void (**)(HALS_IODevice *, uint64_t, std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v57 + 112))(v57, v58, &v102, 4, &v103, (char *)&v103 + 4, 0, 0, 0);
  v59 = HIDWORD(v103);
  std::string::basic_string[abi:ne180100]<0>(&v78, "device_latency_list");
  std::to_string(&v77, v59);
  std::operator+<char>();
  v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
  v60 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v102, &v76)+ 56);
  if (SHIBYTE(v102.__traits_.__col_) < 0)
    operator delete(v102.__traits_.__loc_.__locale_);
  if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v61 = &v77;
  else
    v61 = (std::string *)v77.__r_.__value_.__r.__words[0];
  if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v62 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
  else
    v62 = v77.__r_.__value_.__l.__size_;
  std::string::append(v60, (const std::string::value_type *)v61, v62);
  if ((a4 & 1) == 0)
    std::string::append(v60, ", ", 2uLL);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  if (v79 < 0)
    operator delete(v78);
  v63 = (int8x8_t)a5[1];
  if (v63)
  {
    v64 = *((unsigned int *)*a2 + 4);
    v65 = (uint8x8_t)vcnt_s8(v63);
    v65.i16[0] = vaddlv_u8(v65);
    if (v65.u32[0] > 1uLL)
    {
      v66 = *((unsigned int *)*a2 + 4);
      if (*(_QWORD *)&v63 <= v64)
        v66 = v64 % *(_QWORD *)&v63;
    }
    else
    {
      v66 = (v63.i32[0] - 1) & v64;
    }
    v67 = *(uint64_t ***)(*a5 + 8 * v66);
    if (v67)
    {
      for (i = *v67; i; i = (uint64_t *)*i)
      {
        v69 = i[1];
        if (v69 == v64)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v64)
          {
            std::to_string(&v76, i[3]);
            std::string::basic_string[abi:ne180100]<0>(&v74, "device_start_duration_us_list");
            if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v73, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
            else
              v73 = v76;
            std::operator+<char>();
            v107 = &v102;
            v70 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v102, (_OWORD **)&v107)+ 56);
            if (SHIBYTE(v102.__traits_.__col_) < 0)
              operator delete(v102.__traits_.__loc_.__locale_);
            if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v71 = &v73;
            else
              v71 = (std::string *)v73.__r_.__value_.__r.__words[0];
            if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v72 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
            else
              v72 = v73.__r_.__value_.__l.__size_;
            std::string::append(v70, (const std::string::value_type *)v71, v72);
            if ((a4 & 1) == 0)
              std::string::append(v70, ", ", 2uLL);
            if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v73.__r_.__value_.__l.__data_);
            if (v75 < 0)
              operator delete(v74);
            if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v76.__r_.__value_.__l.__data_);
            break;
          }
        }
        else
        {
          if (v65.u32[0] > 1uLL)
          {
            if (v69 >= *(_QWORD *)&v63)
              v69 %= *(_QWORD *)&v63;
          }
          else
          {
            v69 &= *(_QWORD *)&v63 - 1;
          }
          if (v69 != v66)
            break;
        }
      }
    }
  }
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v83.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
}

void sub_1B5970730(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (a48 < 0)
    JUMPOUT(0x1B5970888);
  JUMPOUT(0x1B597088CLL);
}

void sub_1B5970790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
    JUMPOUT(0x1B5970854);
  JUMPOUT(0x1B5970858);
}

void sub_1B5970798(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (*(char *)(v45 - 193) < 0)
    operator delete(*(void **)(v45 - 216));
  if (a26 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  if (a45 < 0)
    JUMPOUT(0x1B5970888);
  JUMPOUT(0x1B597088CLL);
}

void sub_1B59707B0()
{
  JUMPOUT(0x1B5970824);
}

void sub_1B59707BC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B597047CLL);
}

void sub_1B59707D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (*(char *)(v39 - 193) < 0)
    operator delete(*(void **)(v39 - 216));
  if (a32 < 0)
    operator delete(__p);
  if (a39 < 0)
    JUMPOUT(0x1B5970854);
  JUMPOUT(0x1B5970858);
}

void sub_1B59707E8()
{
  JUMPOUT(0x1B5970858);
}

HALS_ObjectMap ***HALS_IOContextReporter::`anonymous namespace'::PopulateAvailableStreamFormats(uint64_t **a1, uint64_t a2, int a3, char a4)
{
  HALS_Object *v7;
  HALS_Stream **v8;
  HALS_Stream **v9;
  HALS_Stream *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  HALS_Stream *v14;
  uint64_t v15;
  HALS_Stream *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  HALS_Stream *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  HALS_Stream **v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v25 = 0;
  v26 = 0;
  v27 = 0;
  HALS_Device::CopyStreamList(a2, a3, (char **)&v25);
  v8 = v25;
  v9 = (HALS_Stream **)v26;
  if (v25 != (HALS_Stream **)v26)
  {
    do
    {
      if (!HALS_Stream::IsReferenceStream(*v8))
      {
        v10 = *v8;
        v11 = *((unsigned int *)*v8 + 4);
        v28 = 0x676C6F6270667461;
        LODWORD(v29) = 0;
        v12 = (*(unsigned int (**)(HALS_Stream *, uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v10 + 104))(v10, v11, &v28, 0, 0, 0)/ 0x38;
        v13 = operator new[]();
        v24 = v13;
        v14 = *v8;
        v15 = *((unsigned int *)*v8 + 4);
        v28 = 0x676C6F6270667461;
        LODWORD(v29) = 0;
        LODWORD(v23) = 0;
        (*(void (**)(HALS_Stream *, uint64_t, uint64_t *, _QWORD, uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v14 + 112))(v14, v15, &v28, 56 * v12, &v23, v13, 0, 0, 0);
        v16 = *v8;
        v17 = *((unsigned int *)*v8 + 4);
        v28 = 0x676C6F6273666D61;
        LODWORD(v29) = 0;
        v18 = (*(unsigned int (**)(HALS_Stream *, uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v16 + 104))(v16, v17, &v28, 0, 0, 0)/ 0x38;
        v19 = operator new[]();
        v23 = v19;
        v20 = *v8;
        v21 = *((unsigned int *)*v8 + 4);
        v28 = 0x676C6F6273666D61;
        v29 = 0;
        (*(void (**)(HALS_Stream *, uint64_t, uint64_t *, _QWORD, char *, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v20 + 112))(v20, v21, &v28, 56 * v18, (char *)&v29 + 4, v19, 0, 0, 0, v19);
        MEMORY[0x1B5E50664](v19, 0x1000C8021716A34);
        MEMORY[0x1B5E50664](v13, 0x1000C8021716A34);
      }
      ++v8;
    }
    while (v8 != v9);
  }
  return HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser(&v25, v7);
}

void sub_1B5970BE8(void *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)va, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5970BC4);
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef const&>(_BYTE *a1, const __CFDictionary *a2, const void *a3)
{
  const void *v4;
  const void *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<applesauce::CF::StringRef const&>(a2, a3);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFArrayGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = v5;
  v7 = 1;
LABEL_6:
  a1[8] = v7;
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,applesauce::CF::StringRef const&>(_BYTE *a1, const __CFDictionary *a2, const void *a3)
{
  const void *v4;
  const void *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<applesauce::CF::StringRef const&>(a2, a3);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFStringGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = v5;
  v7 = 1;
LABEL_6:
  a1[8] = v7;
}

void *std::get_temporary_buffer[abi:ne180100]<applesauce::CF::StringRef>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0xFFFFFFFFFFFFFFFLL)
    v1 = 0xFFFFFFFFFFFFFFFLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(8 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>(const __CFString **a1, const __CFString **a2, uint64_t a3, unint64_t a4, const __CFString **a5, uint64_t a6)
{
  const __CFString **v7;
  const __CFString *v8;
  uint64_t v13;
  const __CFString **v14;
  uint64_t v15;
  const __CFString **v16;
  uint64_t v17;
  const __CFString **v18;
  const __CFString **v19;
  const __CFString *v20;
  uint64_t v21;
  _QWORD *v22;
  const void *v23;
  uint64_t v24;
  char *v25;
  const __CFString **v26;
  const __CFString **v27;
  const __CFString **v28;
  const __CFString **v29;
  const __CFString **v30;
  CFComparisonResult v31;
  const __CFString *v32;
  uint64_t v33;
  const __CFString *v34;
  uint64_t v35;
  const __CFString *v36;
  unint64_t v37;

  if (a4 >= 2)
  {
    v7 = a1;
    if (a4 == 2)
    {
      if ((unint64_t)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(a2 - 1), a1) >= 2)
      {
        v8 = *v7;
        *v7 = 0;
        *v7 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      if (a1 != a2)
      {
        v16 = a1 + 1;
        if (a1 + 1 != a2)
        {
          v17 = 0;
          v18 = a1;
          do
          {
            v19 = v18;
            v18 = v16;
            if ((unint64_t)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v16, v19) >= 2)
            {
              v20 = *v18;
              *v18 = 0;
              v21 = v17;
              while (1)
              {
                v22 = (const __CFString **)((char *)v7 + v21);
                v24 = *(uint64_t *)((char *)v7 + v21);
                v23 = *(const __CFString **)((char *)v7 + v21 + 8);
                *v22 = v23;
                v22[1] = v24;
                if (!v21)
                  break;
                v21 -= 8;
                v25 = (char *)v7 + v21;
                if ((unint64_t)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(v20, (const __CFString **)((char *)v7 + v21)) <= kCFCompareGreaterThan)
                {
                  v26 = (const __CFString **)(v25 + 8);
                  v23 = (const void *)*((_QWORD *)v25 + 1);
                  goto LABEL_17;
                }
              }
              v26 = v7;
LABEL_17:
              *v26 = v20;
              if (v23)
                CFRelease(v23);
            }
            v16 = v18 + 1;
            v17 += 8;
          }
          while (v18 + 1 != a2);
        }
      }
    }
    else
    {
      v13 = a4 >> 1;
      v14 = &a1[a4 >> 1];
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>(a1, &a1[a4 >> 1], a3, a4 >> 1, a5);
        v27 = &a5[v13];
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>(&v7[a4 >> 1], a2, a3, a4 - v13, v27);
        v37 = a4;
        v28 = &a5[a4];
        v29 = v27;
        v30 = a5;
        while (v29 != v28)
        {
          v31 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v29, v30);
          v32 = *v7;
          if ((unint64_t)v31 < 2)
          {
            *v7 = *v30;
            *v30++ = v32;
          }
          else
          {
            *v7 = *v29;
            *v29++ = v32;
          }
          ++v7;
          if (v30 == v27)
          {
            if (v29 != v28)
            {
              v33 = 0;
              do
              {
                v34 = v7[v33];
                v7[v33] = v29[v33];
                v29[v33++] = v34;
              }
              while (&v29[v33] != v28);
            }
            goto LABEL_34;
          }
        }
        if (v30 != v27)
        {
          v35 = 0;
          do
          {
            v36 = v7[v35];
            v7[v35] = v30[v35];
            v30[v35++] = v36;
          }
          while (&v30[v35] != v27);
        }
LABEL_34:
        if (a5)
          std::__destruct_n::__process[abi:ne180100]<applesauce::CF::StringRef>(&v37, (uint64_t)a5);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>(a1, &a1[a4 >> 1], a3, a4 >> 1, a5, a6);
        v15 = a4 - v13;
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>(v14, a2, a3, v15, a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>(v7, v14, a2, a3, v13, v15, (uint64_t)a5, a6);
      }
    }
  }
}

void sub_1B5971074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t a10)
{
  uint64_t v10;

  if (v10)
    std::__destruct_n::__process[abi:ne180100]<applesauce::CF::StringRef>(&a10, v10);
  _Unwind_Resume(exception_object);
}

const __CFString **std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<applesauce::CF::StringRef *>,std::__wrap_iter<applesauce::CF::StringRef *>,std::__equal_to &>(const __CFString **a1, const __CFString **a2)
{
  const __CFString **v2;
  const __CFString **i;
  const __CFString **v4;
  const __CFString **j;
  const __CFString *v7;

  v2 = a2;
  if (a1 != a2)
  {
    for (i = a1 + 1; i != v2; ++i)
    {
      v4 = i - 1;
      if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(i - 1), i) == kCFCompareEqualTo)
      {
        for (j = v4 + 2; j != v2; ++j)
        {
          if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v4, j))
          {
            v7 = v4[1];
            *++v4 = *j;
            *j = v7;
          }
        }
        return v4 + 1;
      }
    }
  }
  return v2;
}

void std::vector<applesauce::CF::StringRef>::erase(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;

  if (a2 != a3)
  {
    v3 = a2;
    v5 = a3;
    v6 = *(uint64_t **)(a1 + 8);
    if (a3 != v6)
    {
      v7 = a3 - a2;
      do
      {
        v8 = *v3;
        *v3 = v3[v7];
        v3[v7] = v8;
        ++v3;
      }
      while (&v3[v7] != v6);
      v5 = *(uint64_t **)(a1 + 8);
    }
    while (v5 != v3)
    {
      v9 = (const void *)*--v5;
      std::__destroy_at[abi:ne180100]<applesauce::CF::StringRef,0>(v9);
    }
    *(_QWORD *)(a1 + 8) = v3;
  }
}

_QWORD *applesauce::CF::details::CFString_get_value<false>(uint64_t a1, CFStringRef theString)
{
  char *CStringPtr;
  CFIndex Length;
  UInt8 *v7;
  CFIndex maxBufLen;
  CFRange v9;
  CFRange v10;

  CStringPtr = (char *)CFStringGetCStringPtr(theString, 0x8000100u);
  if (CStringPtr)
    return std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, CStringPtr);
  Length = CFStringGetLength(theString);
  maxBufLen = 0;
  v9.location = 0;
  v9.length = Length;
  CFStringGetBytes(theString, v9, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  std::string::basic_string[abi:ne180100]((_QWORD *)a1, maxBufLen, 0);
  if (*(char *)(a1 + 23) >= 0)
    v7 = (UInt8 *)a1;
  else
    v7 = *(UInt8 **)a1;
  v10.location = 0;
  v10.length = Length;
  return (_QWORD *)CFStringGetBytes(theString, v10, 0x8000100u, 0, 0, v7, maxBufLen, &maxBufLen);
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(_BYTE *a1, CFDictionaryRef theDict, void *key)
{
  const void *Value;
  const void *v5;
  CFTypeID v6;
  char v7;

  if (!key)
    goto LABEL_6;
  Value = CFDictionaryGetValue(theDict, key);
  v5 = Value;
  if (!Value)
    goto LABEL_6;
  CFRetain(Value);
  v6 = CFGetTypeID(v5);
  if (v6 != CFArrayGetTypeID())
  {
    CFRelease(v5);
LABEL_6:
    v7 = 0;
    *a1 = 0;
    goto LABEL_7;
  }
  *(_QWORD *)a1 = v5;
  v7 = 1;
LABEL_7:
  a1[8] = v7;
}

applesauce::CF::ArrayRef *applesauce::CF::details::at_to<applesauce::CF::ArrayRef>(applesauce::CF::ArrayRef *a1, CFArrayRef theArray, unint64_t a3)
{
  const void *ValueAtIndex;
  const void *v7;
  std::runtime_error *exception;

  if (CFArrayGetCount(theArray) <= a3
    || (ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3), (v7 = ValueAtIndex) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CFRetain(ValueAtIndex);
  return applesauce::CF::ArrayRef::ArrayRef(a1, v7);
}

void sub_1B59713A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const __CFString **std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>(const __CFString **result, const __CFString **a2, uint64_t a3, unint64_t a4, const __CFString **a5)
{
  const __CFString **v5;
  const __CFString **v7;
  const __CFString **v9;
  const __CFString **v10;
  const __CFString **v11;
  uint64_t v12;
  const __CFString **v13;
  const __CFString *v14;
  const __CFString **v15;
  uint64_t v16;
  const __CFString *v17;
  const __CFString **v19;
  const __CFString **v20;
  uint64_t v21;
  uint64_t v22;

  if (a4)
  {
    v5 = a5;
    v7 = result;
    if (a4 == 1)
    {
LABEL_10:
      *v5 = *v7;
      *v7 = 0;
      return result;
    }
    if (a4 == 2)
    {
      v9 = a2 - 1;
      result = (const __CFString **)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(a2 - 1), result);
      if ((unint64_t)result <= 1)
        v10 = v7;
      else
        v10 = v9;
      *v5++ = *v10;
      if ((unint64_t)result <= 1)
        v7 = v9;
      *v10 = 0;
      goto LABEL_10;
    }
    if ((uint64_t)a4 > 8)
    {
      v19 = &result[a4 >> 1];
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>(result, v19, a3, a4 >> 1, a5, a4 >> 1);
      result = (const __CFString **)std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      v20 = &v7[a4 >> 1];
      while (v20 != a2)
      {
        result = (const __CFString **)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v20, v7);
        if ((unint64_t)result < 2)
        {
          *v5 = *v7;
          *v7++ = 0;
        }
        else
        {
          *v5 = *v20;
          *v20++ = 0;
        }
        ++v5;
        if (v7 == v19)
        {
          if (v20 != a2)
          {
            v21 = 0;
            do
            {
              v5[v21] = v20[v21];
              v20[v21++] = 0;
            }
            while (&v20[v21] != a2);
          }
          return result;
        }
      }
      if (v7 != v19)
      {
        v22 = 0;
        do
        {
          v5[v22] = v7[v22];
          v7[v22++] = 0;
        }
        while (&v7[v22] != v19);
      }
    }
    else if (result != a2)
    {
      *a5 = *result;
      *result = 0;
      v11 = result + 1;
      if (result + 1 != a2)
      {
        v12 = 0;
        v13 = a5;
        do
        {
          result = (const __CFString **)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v11, v13);
          if ((unint64_t)result < 2)
          {
            v17 = 0;
            v15 = v13 + 1;
          }
          else
          {
            v14 = *v13;
            *v13 = 0;
            v13[1] = v14;
            v15 = v5;
            if (v13 != v5)
            {
              v16 = v12;
              while (1)
              {
                v15 = (const __CFString **)((char *)v5 + v16);
                result = (const __CFString **)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v11, (const __CFString **)((char *)v5 + v16 - 8));
                if ((unint64_t)result < 2)
                  break;
                *(int8x16_t *)((char *)v5 + v16 - 8) = vextq_s8(*(int8x16_t *)((char *)v5 + v16 - 8), *(int8x16_t *)((char *)v5 + v16 - 8), 8uLL);
                v16 -= 8;
                if (!v16)
                {
                  v15 = v5;
                  break;
                }
              }
            }
            v17 = *v15;
          }
          *v15 = *v11;
          *v11++ = v17;
          v12 += 8;
          ++v13;
        }
        while (v11 != a2);
      }
    }
  }
  return result;
}

void std::__destruct_n::__process[abi:ne180100]<applesauce::CF::StringRef>(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v5;
  const void *v6;

  v2 = *a1;
  if (*a1)
  {
    v5 = 0;
    do
    {
      v6 = *(const void **)(a2 + 8 * v5);
      if (v6)
      {
        CFRelease(v6);
        v2 = *a1;
      }
      ++v5;
    }
    while (v5 < v2);
  }
}

void std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>(const __CFString **a1, const __CFString **a2, const __CFString **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  const __CFString **v17;
  const __CFString **v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  const __CFString **v23;
  const __CFString **v24;
  const __CFString *v25;
  CFComparisonResult v26;
  const __CFString *v27;
  const __CFString **v28;
  const __CFString **i;
  const __CFString **v30;
  const __CFString **v31;
  const __CFString *v32;
  const __CFString **v33;
  const __CFString **v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  const __CFString **v41;
  CFComparisonResult v42;
  const __CFString *v43;
  const __CFString **v44;
  const __CFString **v45;
  uint64_t v46;
  unint64_t v47;
  const __CFString **v48;
  const __CFString **v49;
  CFComparisonResult v50;
  const __CFString *v51;
  const __CFString *v52;
  uint64_t v53;
  const __CFString *v54;
  uint64_t v55;
  const __CFString *v56;
  uint64_t v57;
  uint64_t v58;
  const __CFString **v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v63;

  if (!a6)
    return;
  v10 = a6;
  while (v10 > a8 && a5 > a8)
  {
    if (!a5)
      return;
    while ((unint64_t)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*a2, a1) <= kCFCompareGreaterThan)
    {
      ++a1;
      if (!--a5)
        return;
    }
    v61 = a8;
    if (a5 >= v10)
    {
      if (a5 == 1)
      {
        v52 = *a1;
        *a1 = 0;
        *a1 = *a2;
        *a2 = v52;
        return;
      }
      if (a5 >= 0)
        v21 = a5;
      else
        v21 = a5 + 1;
      v20 = v21 >> 1;
      v18 = &a1[v21 >> 1];
      v17 = a2;
      if (a2 != a3)
      {
        v58 = v21 >> 1;
        v59 = a3;
        v60 = a7;
        v22 = a3 - a2;
        v17 = a2;
        do
        {
          v23 = &v17[v22 >> 1];
          v25 = *v23;
          v24 = v23 + 1;
          v26 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(v25, v18);
          if ((unint64_t)v26 <= kCFCompareGreaterThan)
            v22 >>= 1;
          else
            v22 += ~(v22 >> 1);
          if ((unint64_t)v26 > kCFCompareGreaterThan)
            v17 = v24;
        }
        while (v22);
        a3 = v59;
        a7 = v60;
        v20 = v58;
      }
      v16 = v17 - a2;
    }
    else
    {
      if (v10 >= 0)
        v15 = v10;
      else
        v15 = v10 + 1;
      v16 = v15 >> 1;
      v17 = &a2[v15 >> 1];
      v18 = a2;
      if (a2 != a1)
      {
        v57 = v15 >> 1;
        v19 = a2 - a1;
        v18 = a1;
        do
        {
          if ((unint64_t)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v17, &v18[v19 >> 1]) > kCFCompareGreaterThan)
          {
            v19 >>= 1;
          }
          else
          {
            v18 += (v19 >> 1) + 1;
            v19 += ~(v19 >> 1);
          }
        }
        while (v19);
        v16 = v57;
      }
      v20 = v18 - a1;
    }
    if (v18 == a2)
    {
      v28 = v17;
    }
    else if (v17 == a2)
    {
      v28 = v18;
    }
    else
    {
      v27 = *v18;
      *v18 = 0;
      *v18 = *a2;
      v28 = v18 + 1;
      for (i = a2; ; *v28++ = *i)
      {
        *i++ = v27;
        if (i == v17)
          break;
        if (v28 == a2)
          a2 = i;
        v27 = *v28;
        *v28 = 0;
      }
      if (v28 != a2)
      {
        v30 = v28;
        v31 = a2;
        do
        {
          while (1)
          {
            v32 = *v30;
            *v30 = 0;
            *v30++ = *v31;
            *v31++ = v32;
            if (v31 == v17)
              break;
            if (v30 == a2)
              a2 = v31;
          }
          v31 = a2;
        }
        while (v30 != a2);
      }
    }
    a5 -= v20;
    v10 -= v16;
    if (v20 + v16 >= a5 + v10)
    {
      v34 = v17;
      v35 = v20;
      v36 = a5;
      v37 = v16;
      std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>(v28, v34, a3, a4, v36, v10, a7, v61);
      a2 = v18;
      a8 = v61;
      v10 = v37;
      a5 = v35;
      a3 = v28;
      if (!v10)
        return;
    }
    else
    {
      v33 = v18;
      a8 = v61;
      std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>(a1, v33, v28, a4, v20, v16, a7, v61);
      a1 = v28;
      a2 = v17;
      if (!v10)
        return;
    }
  }
  if (a5 <= v10)
  {
    if (a1 != a2)
    {
      v45 = a3;
      v46 = 0;
      v47 = 0;
      do
      {
        *(_QWORD *)(a7 + v46 * 8) = a1[v46];
        a1[v46] = 0;
        ++v47;
        ++v46;
      }
      while (&a1[v46] != a2);
      v48 = (const __CFString **)(a7 + v46 * 8);
      v63 = v47;
      if (a7 + v46 * 8 != a7)
      {
        v49 = (const __CFString **)a7;
        while (a2 != v45)
        {
          v50 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*a2, v49);
          v51 = *a1;
          if ((unint64_t)v50 < 2)
          {
            *a1 = *v49;
            *v49++ = v51;
          }
          else
          {
            *a1 = *a2;
            *a2++ = v51;
          }
          ++a1;
          if (v49 == v48)
            goto LABEL_90;
        }
        v55 = 0;
        do
        {
          v56 = a1[v55];
          a1[v55] = v49[v55];
          v49[v55++] = v56;
        }
        while (&v49[v55 - 1] != v48 - 1);
      }
      goto LABEL_90;
    }
  }
  else if (a3 != a2)
  {
    v38 = 0;
    v39 = 0;
    do
    {
      *(_QWORD *)(a7 + v38 * 8) = a2[v38];
      a2[v38] = 0;
      ++v39;
      ++v38;
    }
    while (&a2[v38] != a3);
    v40 = a7 + v38 * 8;
    v63 = v39;
    if (a7 + v38 * 8 != a7)
    {
      v41 = a3 - 1;
      while (a2 != a1)
      {
        v42 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)(v40 - 8), a2 - 1);
        v43 = *v41;
        if ((unint64_t)v42 <= kCFCompareGreaterThan)
          v44 = (const __CFString **)v40;
        else
          v44 = a2;
        if ((unint64_t)v42 <= kCFCompareGreaterThan)
          v40 -= 8;
        else
          --a2;
        *v41-- = *(v44 - 1);
        *(v44 - 1) = v43;
        if (v40 == a7)
          goto LABEL_90;
      }
      v53 = 0;
      do
      {
        v54 = v41[v53];
        v41[v53] = *(const __CFString **)(v40 + v53 * 8 - 8);
        *(_QWORD *)(v40 + v53 * 8 - 8) = v54;
        --v53;
      }
      while (v40 + v53 * 8 != a7);
    }
    goto LABEL_90;
  }
  v63 = 0;
LABEL_90:
  if (a7)
    std::__destruct_n::__process[abi:ne180100]<applesauce::CF::StringRef>(&v63, a7);
}

void HALS_IOContextReporter::`anonymous namespace'::PopulateAvailableStreamInfo(uint64_t **a1, _QWORD *a2, int a3, int a4, int a5, char a6)
{
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  double v16;
  unsigned int v17;
  unsigned int v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type size;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  int16x8_t v34;
  int32x4_t v35;
  uint32x4_t v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  size_t v45;
  std::string *v46;
  void **v47;
  const std::string::value_type *v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  std::string *v55;
  std::string::size_type v56;
  size_t v57;
  std::string *v58;
  void **v59;
  const std::string::value_type *v60;
  std::string::size_type v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  const std::string::value_type *v67;
  std::string::size_type v68;
  std::string::value_type __s[8];
  char v71;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81;
  __int128 v82;
  int64_t v83;
  std::string v84;
  std::string::value_type *v85;
  std::string::size_type v86;
  unsigned __int8 v87;
  void **v88;
  size_t v89;
  unsigned __int8 v90;
  std::string::value_type *v91;
  std::string::size_type v92;
  unsigned __int8 v93;

  std::string::basic_string[abi:ne180100]<0>(&v91, ", ");
  if (a4)
    v11 = "input_";
  else
    v11 = "output_";
  std::string::basic_string[abi:ne180100]<0>(&v88, v11);
  if (a5)
    v12 = "phys";
  else
    v12 = "virt";
  std::string::basic_string[abi:ne180100]<0>(&v85, v12);
  std::string::basic_string[abi:ne180100]<0>(&v84, "{ ");
  if (a3)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = *a2 + v13;
      v16 = *(double *)v15;
      v17 = *(_DWORD *)(v15 + 8);
      v18 = *(_DWORD *)(v15 + 28);
      std::to_string(&v74, *(_DWORD *)(v15 + 32));
      v19 = std::string::insert(&v74, 0, "[", 1uLL);
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v75.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = std::string::append(&v75, "/", 1uLL);
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v76.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v73, (int)v16);
      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = &v73;
      else
        v23 = (std::string *)v73.__r_.__value_.__r.__words[0];
      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v73.__r_.__value_.__r.__words[2]);
      else
        size = v73.__r_.__value_.__l.__size_;
      v25 = std::string::append(&v76, (const std::string::value_type *)v23, size);
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      v27 = std::string::append(&v77, "/", 1uLL);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v72, v18);
      if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v72;
      else
        v29 = (std::string *)v72.__r_.__value_.__r.__words[0];
      if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
      else
        v30 = v72.__r_.__value_.__l.__size_;
      v31 = std::string::append(&v78, (const std::string::value_type *)v29, v30);
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v79.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      v33 = std::string::append(&v79, " ", 1uLL);
      v34 = *(int16x8_t *)&v33->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(int16x8_t *)&v80.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      v34.i32[0] = bswap32(v17);
      *(int8x8_t *)v34.i8 = vzip1_s8(*(int8x8_t *)v34.i8, *(int8x8_t *)v34.i8);
      v35.i64[0] = 0x1F0000001FLL;
      v35.i64[1] = 0x1F0000001FLL;
      v36.i64[0] = 0x5F0000005FLL;
      v36.i64[1] = 0x5F0000005FLL;
      *(int8x8_t *)v34.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v36, (uint32x4_t)vsraq_n_s32(v35, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v34.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v34.i8, (int8x8_t)0x2E002E002E002ELL);
      v71 = 4;
      *(_DWORD *)__s = vmovn_s16(v34).u32[0];
      __s[4] = 0;
      v37 = std::string::append(&v80, __s, 4uLL);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v81.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      v39 = std::string::append(&v81, "]", 1uLL);
      v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v83 = v39->__r_.__value_.__r.__words[2];
      v82 = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v81.__r_.__value_.__l.__data_);
      if (v71 < 0)
        operator delete(*(void **)__s);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v80.__r_.__value_.__l.__data_);
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v72.__r_.__value_.__l.__data_);
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v73.__r_.__value_.__l.__data_);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75.__r_.__value_.__l.__data_);
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v74.__r_.__value_.__l.__data_);
      if (v83 >= 0)
        v41 = (const std::string::value_type *)&v82;
      else
        v41 = (const std::string::value_type *)v82;
      if (v83 >= 0)
        v42 = HIBYTE(v83);
      else
        v42 = *((_QWORD *)&v82 + 1);
      std::string::append(&v84, v41, v42);
      if (v14 < (a3 - 1))
      {
        if ((v93 & 0x80u) == 0)
          v43 = (const std::string::value_type *)&v91;
        else
          v43 = v91;
        if ((v93 & 0x80u) == 0)
          v44 = v93;
        else
          v44 = v92;
        std::string::append(&v84, v43, v44);
      }
      if (SHIBYTE(v83) < 0)
        operator delete((void *)v82);
      ++v14;
      v13 += 56;
    }
    while (a3 != v14);
  }
  std::string::append(&v84, " }", 2uLL);
  if ((v90 & 0x80u) == 0)
    v45 = v90;
  else
    v45 = v89;
  std::string::basic_string[abi:ne180100]((uint64_t)&v80, v45 + 6);
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v46 = &v80;
  else
    v46 = (std::string *)v80.__r_.__value_.__r.__words[0];
  if (v45)
  {
    if ((v90 & 0x80u) == 0)
      v47 = (void **)&v88;
    else
      v47 = v88;
    memmove(v46, v47, v45);
  }
  strcpy((char *)v46 + v45, "avail_");
  if ((v87 & 0x80u) == 0)
    v48 = (const std::string::value_type *)&v85;
  else
    v48 = v85;
  if ((v87 & 0x80u) == 0)
    v49 = v87;
  else
    v49 = v86;
  v50 = std::string::append(&v80, v48, v49);
  v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v81.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  v52 = std::string::append(&v81, "_formats", 8uLL);
  v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v83 = v52->__r_.__value_.__r.__words[2];
  v82 = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v82;
  v54 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v82, &v79)+ 56);
  if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v55 = &v84;
  else
    v55 = (std::string *)v84.__r_.__value_.__r.__words[0];
  if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v56 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
  else
    v56 = v84.__r_.__value_.__l.__size_;
  std::string::append(v54, (const std::string::value_type *)v55, v56);
  if (SHIBYTE(v83) < 0)
    operator delete((void *)v82);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  if ((a6 & 1) == 0)
  {
    if ((v90 & 0x80u) == 0)
      v57 = v90;
    else
      v57 = v89;
    std::string::basic_string[abi:ne180100]((uint64_t)&v80, v57 + 6);
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v58 = &v80;
    else
      v58 = (std::string *)v80.__r_.__value_.__r.__words[0];
    if (v57)
    {
      if ((v90 & 0x80u) == 0)
        v59 = (void **)&v88;
      else
        v59 = v88;
      memmove(v58, v59, v57);
    }
    strcpy((char *)v58 + v57, "avail_");
    if ((v87 & 0x80u) == 0)
      v60 = (const std::string::value_type *)&v85;
    else
      v60 = v85;
    if ((v87 & 0x80u) == 0)
      v61 = v87;
    else
      v61 = v86;
    v62 = std::string::append(&v80, v60, v61);
    v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    v64 = std::string::append(&v81, "_formats", 8uLL);
    v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v83 = v64->__r_.__value_.__r.__words[2];
    v82 = v65;
    v64->__r_.__value_.__l.__size_ = 0;
    v64->__r_.__value_.__r.__words[2] = 0;
    v64->__r_.__value_.__r.__words[0] = 0;
    v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v82;
    v66 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v82, &v79)+ 56);
    if ((v93 & 0x80u) == 0)
      v67 = (const std::string::value_type *)&v91;
    else
      v67 = v91;
    if ((v93 & 0x80u) == 0)
      v68 = v93;
    else
      v68 = v92;
    std::string::append(v66, v67, v68);
    if (SHIBYTE(v83) < 0)
      operator delete((void *)v82);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__r_.__value_.__l.__data_);
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v80.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if ((char)v87 < 0)
    operator delete(v85);
  if ((char)v90 < 0)
    operator delete(v88);
  if ((char)v93 < 0)
    operator delete(v91);
}

uint64_t *std::ranges::__find_if_impl[abi:ne180100]<std::__wrap_iter<HALS_Control **>,std::__wrap_iter<HALS_Control **>,std::reference_wrapper<HALS_IOContextReporter::`anonymous namespace'::GetVolume(HALS_Releaser<HALS_Device> const&,unsigned int)::$_0>,std::identity>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  int v4;

  if (result != a2)
  {
    do
    {
      v2 = *result;
      if (*result)
      {
        v4 = *(_DWORD *)(v2 + 20);
        v3 = *(_DWORD *)(v2 + 24);
        if (v4 == v3 || v4 == 1986817381)
        {
          if (v4 == 1986817381 || v4 != v3)
            return result;
        }
        else if (v3 == 1986817381)
        {
          return result;
        }
      }
      ++result;
    }
    while (result != a2);
    return a2;
  }
  return result;
}

uint64_t *std::ranges::__find_if_impl[abi:ne180100]<std::__wrap_iter<HALS_Control **>,std::__wrap_iter<HALS_Control **>,std::reference_wrapper<HALS_IOContextReporter::`anonymous namespace'::IsMuted(HALS_Releaser<HALS_Device> const&,unsigned int)::$_0>,std::identity>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  int v4;

  if (result != a2)
  {
    do
    {
      v2 = *result;
      if (*result)
      {
        v4 = *(_DWORD *)(v2 + 20);
        v3 = *(_DWORD *)(v2 + 24);
        if (v4 == v3 || v4 == 1836414053)
        {
          if (v4 == 1836414053 || v4 != v3)
            return result;
        }
        else if (v3 == 1836414053)
        {
          return result;
        }
      }
      ++result;
    }
    while (result != a2);
    return a2;
  }
  return result;
}

void std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(std::string *a1, char *a2, char *a3, const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *a4, const char *a5)
{
  std::string::value_type *v6;
  size_t v8;
  std::__wrap_iter<const char *>::iterator_type v9;
  std::string::value_type *v10;
  unsigned __int8 *v11;
  std::__wrap_iter<const char *>::iterator_type i;
  std::__wrap_iter<const char *>::iterator_type v13;
  std::string::value_type *v14;
  std::vector<std::ssub_match>::pointer begin;
  const char *v16;
  int v17;
  unsigned __int8 *v18;
  int v19;
  std::string::value_type *v20;
  std::string::value_type *v21;
  std::string::value_type *v22;
  std::string::value_type *v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  std::sub_match<std::__wrap_iter<const char *>> *v28;
  BOOL v29;
  std::match_results<std::__wrap_iter<const char *>>::value_type *p_unmatched;
  std::string::value_type *v31;
  std::__wrap_iter<const char *> *p_second;
  std::string::value_type *v33;
  std::vector<std::ssub_match>::pointer v34;
  std::regex_constants::match_flag_type flags;
  unsigned __int32 v36;
  BOOL v37;
  std::match_results<std::__wrap_iter<const char *>>::value_type *v38;
  std::__wrap_iter<const char *> *v39;
  std::sub_match<const char *> *v40;
  std::sub_match<const char *> *v41;
  char v42;
  char v43;
  size_t v45;
  std::vector<std::ssub_match>::pointer end;
  unint64_t v47;
  std::regex_iterator<std::__wrap_iter<const char *>, char> __p;
  std::regex_iterator<std::__wrap_iter<const char *>, char> v49;
  std::vector<std::csub_match> v50[2];
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;

  v6 = a2;
  v49.__begin_.__i_ = a2;
  v49.__end_.__i_ = a3;
  v49.__pregex_ = a4;
  v49.__flags_ = match_default;
  memset(&v49.__match_.__prefix_, 0, 17);
  memset(&v49.__match_.__suffix_, 0, 17);
  v49.__match_.__ready_ = 0;
  v49.__match_.__position_start_.__i_ = 0;
  memset(&v49.__match_, 0, 41);
  memset(&__p.__match_.__matches_.__end_cap_, 0, 17);
  memset(&__p.__match_.__unmatched_.matched, 0, 17);
  __p.__match_.__prefix_.matched = 0;
  __p.__match_.__suffix_.first.__i_ = 0;
  memset(&__p, 0, 41);
  std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)a4, (std::sub_match<const char *> *)a2, (std::sub_match<const char *> *)a3, (std::vector<std::csub_match> *)&__p, 0);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)&v49.__match_, (uint64_t)v6, (uint64_t)a3, (uint64_t *)&__p, 0);
  if (__p.__begin_.__i_)
    operator delete((void *)__p.__begin_.__i_);
  memset(&__p.__match_.__prefix_, 0, 17);
  memset(&__p.__match_.__suffix_, 0, 17);
  __p.__match_.__ready_ = 0;
  __p.__match_.__position_start_.__i_ = 0;
  memset(&__p.__match_, 0, 41);
  memset(&__p, 0, 28);
  if (!std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v49, &__p))
  {
    v8 = strlen(a5);
    v9 = 0;
    v10 = 0;
    v11 = (unsigned __int8 *)&a5[v8];
    v45 = v8;
    while (1)
    {
      if (std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v49, &__p))
      {
        while (v10 != v9)
          std::string::push_back(a1, *v10++);
        goto LABEL_68;
      }
      i = v49.__match_.__prefix_.first.__i_;
      v13 = v49.__match_.__prefix_.second.__i_;
      if (v49.__match_.__prefix_.first.__i_ != v49.__match_.__prefix_.second.__i_)
      {
        v14 = (std::string::value_type *)v49.__match_.__prefix_.first.__i_;
        do
          std::string::push_back(a1, *v14++);
        while (v14 != v13);
      }
      begin = v49.__match_.__matches_.__begin_;
      if (v45)
      {
        v10 = (std::string::value_type *)v49.__match_.__suffix_.first.__i_;
        v9 = v49.__match_.__suffix_.second.__i_;
        end = v49.__match_.__matches_.__end_;
        v47 = 0xAAAAAAAAAAAAAAABLL
            * (((char *)v49.__match_.__matches_.__end_ - (char *)v49.__match_.__matches_.__begin_) >> 3);
        v16 = a5;
        while (1)
        {
          v17 = *(unsigned __int8 *)v16;
          if (v17 == 36)
          {
            v18 = (unsigned __int8 *)(v16 + 1);
            if (v16 + 1 == (const char *)v11)
              goto LABEL_44;
            v19 = (char)*v18;
            v17 = *v18;
            if (v19 > 38)
            {
              if (v19 == 39)
              {
                if (v10 != v9)
                {
                  v23 = v10;
                  do
                    std::string::push_back(a1, *v23++);
                  while (v23 != v9);
                }
                goto LABEL_46;
              }
              if (v19 == 96)
              {
                if (i != v13)
                {
                  v22 = (std::string::value_type *)i;
                  do
                    std::string::push_back(a1, *v22++);
                  while (v22 != v13);
                }
                goto LABEL_46;
              }
LABEL_32:
              if ((v17 - 48) <= 9)
              {
                v24 = *v18 - 48;
                if (v16 + 2 != (const char *)v11)
                {
                  v25 = *((unsigned __int8 *)v16 + 2);
                  v26 = v25 - 48;
                  v27 = v25 + 10 * (int)v24 - 48;
                  if (v26 > 9)
                  {
                    v18 = (unsigned __int8 *)(v16 + 1);
                  }
                  else
                  {
                    v24 = v27;
                    v18 = (unsigned __int8 *)(v16 + 2);
                  }
                }
                v28 = &begin[(int)v24];
                v29 = v47 > v24;
                p_unmatched = &v49.__match_.__unmatched_;
                if (v29)
                  p_unmatched = v28;
                v31 = (std::string::value_type *)p_unmatched->first.__i_;
                p_second = &v28->second;
                if (!v29)
                  p_second = &v49.__match_.__unmatched_.second;
                v33 = (std::string::value_type *)p_second->__i_;
                while (v31 != v33)
                  std::string::push_back(a1, *v31++);
                goto LABEL_46;
              }
LABEL_44:
              LOBYTE(v17) = 36;
              goto LABEL_45;
            }
            if (v19 != 36)
            {
              if (v19 == 38)
              {
                v21 = (std::string::value_type *)begin->first.__i_;
                v20 = (std::string::value_type *)begin->second.__i_;
                while (v21 != v20)
                  std::string::push_back(a1, *v21++);
                goto LABEL_46;
              }
              goto LABEL_32;
            }
            ++v16;
          }
LABEL_45:
          std::string::push_back(a1, v17);
          v18 = (unsigned __int8 *)v16;
LABEL_46:
          v16 = (const char *)(v18 + 1);
          if (v18 + 1 == v11)
          {
            v34 = end;
            goto LABEL_49;
          }
        }
      }
      v10 = (std::string::value_type *)v49.__match_.__suffix_.first.__i_;
      v9 = v49.__match_.__suffix_.second.__i_;
      v34 = v49.__match_.__matches_.__end_;
LABEL_49:
      flags = v49.__flags_;
      v36 = v49.__flags_ | 0x800;
      v49.__flags_ |= 0x800u;
      v37 = v34 == begin;
      v38 = &v49.__match_.__unmatched_;
      if (!v37)
        v38 = begin;
      v39 = &begin->second;
      if (v37)
        v39 = &v49.__match_.__unmatched_.second;
      v40 = (std::sub_match<const char *> *)v39->__i_;
      v41 = (std::sub_match<const char *> *)v49.__end_.__i_;
      if (v38->first.__i_ != v39->__i_)
        goto LABEL_54;
      if ((std::sub_match<const char *> *)v49.__end_.__i_ == v40)
      {
LABEL_63:
        if (begin)
          operator delete(begin);
        v49.__match_.__ready_ = 0;
        memset(&v49.__match_, 0, 41);
        memset(&v49.__match_.__prefix_, 0, 17);
        memset(&v49.__match_.__suffix_, 0, 17);
        v49.__match_.__position_start_.__i_ = 0;
      }
      else
      {
        v51 = 0;
        v52 = 0;
        v53 = 0;
        v54 = 0;
        v55 = 0;
        v56 = 0;
        v57 = 0;
        v58 = 0;
        memset(v50, 0, 41);
        v43 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v49.__pregex_, v40, (std::sub_match<const char *> *)v49.__end_.__i_, v50, flags | 0x860);
        std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)&v49.__match_, (uint64_t)v40, (uint64_t)v41, (uint64_t *)v50, 1);
        if (v50[0].__begin_)
          operator delete(v50[0].__begin_);
        if ((v43 & 1) == 0)
        {
          v40 = (std::sub_match<const char *> *)((char *)v40 + 1);
          v36 = v49.__flags_;
          v41 = (std::sub_match<const char *> *)v49.__end_.__i_;
LABEL_54:
          v49.__flags_ = v36 | 0x80;
          v51 = 0;
          v52 = 0;
          v53 = 0;
          v54 = 0;
          v55 = 0;
          v56 = 0;
          v57 = 0;
          v58 = 0;
          memset(v50, 0, 41);
          v42 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v49.__pregex_, v40, v41, v50, v36 | 0x80);
          std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)&v49.__match_, (uint64_t)v40, (uint64_t)v41, (uint64_t *)v50, (v36 & 0x800) != 0);
          if (v50[0].__begin_)
            operator delete(v50[0].__begin_);
          if ((v42 & 1) == 0)
          {
            begin = v49.__match_.__matches_.__begin_;
            goto LABEL_63;
          }
        }
      }
    }
  }
  while (v6 != a3)
    std::string::push_back(a1, *v6++);
LABEL_68:
  if (v49.__match_.__matches_.__begin_)
    operator delete(v49.__match_.__matches_.__begin_);
}

void sub_1B5972770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(const std::regex_iterator<std::__wrap_iter<const char *>, char> *this, const std::regex_iterator<std::__wrap_iter<const char *>, char> *__x)
{
  std::vector<std::ssub_match>::pointer begin;
  std::sub_match<std::__wrap_iter<const char *>> *end;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *p_match;
  std::vector<std::ssub_match>::pointer v7;
  std::sub_match<std::__wrap_iter<const char *>> *v8;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *v9;
  BOOL v10;

  p_match = &this->__match_;
  begin = this->__match_.__matches_.__begin_;
  end = p_match->__matches_.__end_;
  v9 = &__x->__match_;
  v7 = __x->__match_.__matches_.__begin_;
  v8 = v9->__matches_.__end_;
  v10 = v8 == v7 && end == begin;
  if (end != begin && v8 != v7)
    return this->__begin_.__i_ == __x->__begin_.__i_
        && this->__end_.__i_ == __x->__end_.__i_
        && this->__pregex_ == __x->__pregex_
        && this->__flags_ == __x->__flags_
        && std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100]((uint64_t)begin, (uint64_t)v7) == 0;
  return v10;
}

uint64_t std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  size_t v4;
  void **v5;
  int v6;
  void *v7;
  size_t v8;
  void **v9;
  size_t v10;
  void **v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  void **v16;
  size_t v17;
  uint64_t v18;
  void *v19;
  size_t v20;
  uint64_t v21;

  if (*(_BYTE *)(a1 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&v19, *(char **)a1, *(char **)(a1 + 8), *(_QWORD *)(a1 + 8) - *(_QWORD *)a1);
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&v16, *(char **)a2, *(char **)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
    v3 = HIBYTE(v18);
    v5 = v16;
    v4 = v17;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v3 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
  }
  v6 = SHIBYTE(v21);
  v7 = v19;
  if (v21 >= 0)
    v8 = HIBYTE(v21);
  else
    v8 = v20;
  if (v21 >= 0)
    v9 = &v19;
  else
    v9 = (void **)v19;
  if ((v3 & 0x80u) == 0)
    v10 = v3;
  else
    v10 = v4;
  if ((v3 & 0x80u) == 0)
    v11 = (void **)&v16;
  else
    v11 = v5;
  if (v10 >= v8)
    v12 = v8;
  else
    v12 = v10;
  v13 = memcmp(v9, v11, v12);
  if ((v3 & 0x80) != 0)
  {
    operator delete(v5);
    if ((v6 & 0x80000000) == 0)
      goto LABEL_24;
  }
  else if ((v6 & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(v7);
LABEL_24:
  v14 = v10 < v8;
  if (v8 < v10)
    v14 = -1;
  if (v13)
    return v13;
  else
    return v14;
}

void sub_1B597297C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ADS::Device::Activate(ADS::Device *this)
{
  uint64_t i;
  void *v3;
  unsigned int *v4;
  unsigned int *j;
  ADS::ObjectManager *v6;
  ADS::BaseObject *v7;
  uint64_t k;
  void *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD v14[3];
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  memset(v13, 0, sizeof(v13));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v13, *((const void **)this + 45), *((_QWORD *)this + 46), (uint64_t)(*((_QWORD *)this + 46) - *((_QWORD *)this + 45)) >> 2);
  memset(v14, 0, sizeof(v14));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v14, *((const void **)this + 48), *((_QWORD *)this + 49), (uint64_t)(*((_QWORD *)this + 49) - *((_QWORD *)this + 48)) >> 2);
  v15 = 0;
  v16[0] = 0;
  v16[1] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v15, *((const void **)this + 51), *((_QWORD *)this + 52), (uint64_t)(*((_QWORD *)this + 52) - *((_QWORD *)this + 51)) >> 2);
  for (i = 0; i != 3; ++i)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v10, (const void *)v13[3 * i], v13[3 * i + 1], (uint64_t)(v13[3 * i + 1] - v13[3 * i]) >> 2);
    v3 = v10;
    v4 = v11;
    for (j = v10; j != v4; ++j)
    {
      v6 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*j);
      (**(void (***)(ADS::ObjectManager *))v6)(v6);
      ADS::ObjectManager::ReleaseObject(v6, v7);
    }
    if (v3)
      operator delete(v3);
  }
  for (k = 0; k != -9; k -= 3)
  {
    v9 = (void *)v16[k - 1];
    if (v9)
    {
      v16[k] = v9;
      operator delete(v9);
    }
  }
  *((_BYTE *)this + 48) = 1;
}

void sub_1B5972B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

void ADS::Device::Deactivate(ADS::Device *this)
{
  char *v2;
  uint64_t i;
  unsigned int *v4;
  void *v5;
  unsigned int *j;
  uint64_t v7;
  ADS::BaseObject *v8;
  ADS::ObjectManager *v9;
  ADS::BaseObject *v10;
  uint64_t k;
  void *v12;
  int v13;
  int v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  _QWORD v18[3];
  _QWORD v19[3];
  uint64_t v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 120;
  v13 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 15) + 16))((char *)this + 120);
  v14 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 26) + 16))((char *)this + 208);
  *((_BYTE *)this + 48) = 0;
  memset(v18, 0, sizeof(v18));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v18, *((const void **)this + 45), *((_QWORD *)this + 46), (uint64_t)(*((_QWORD *)this + 46) - *((_QWORD *)this + 45)) >> 2);
  memset(v19, 0, sizeof(v19));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v19, *((const void **)this + 48), *((_QWORD *)this + 49), (uint64_t)(*((_QWORD *)this + 49) - *((_QWORD *)this + 48)) >> 2);
  v20 = 0;
  v21[0] = 0;
  v21[1] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v20, *((const void **)this + 51), *((_QWORD *)this + 52), (uint64_t)(*((_QWORD *)this + 52) - *((_QWORD *)this + 51)) >> 2);
  for (i = 0; i != 3; ++i)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v15, (const void *)v18[3 * i], v18[3 * i + 1], (uint64_t)(v18[3 * i + 1] - v18[3 * i]) >> 2);
    v5 = v15;
    v4 = v16;
    for (j = v15; j != v4; ++j)
    {
      v7 = ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*j);
      v9 = (ADS::ObjectManager *)v7;
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        ADS::ObjectManager::ReleaseObject(v9, v10);
      }
      ADS::ObjectManager::ReleaseObject(v9, v8);
    }
    if (v5)
      operator delete(v5);
  }
  for (k = 0; k != -9; k -= 3)
  {
    v12 = (void *)v21[k - 1];
    if (v12)
    {
      v21[k] = v12;
      operator delete(v12);
    }
  }
  *((_QWORD *)this + 46) = *((_QWORD *)this + 45);
  *((_QWORD *)this + 49) = *((_QWORD *)this + 48);
  *((_QWORD *)this + 52) = *((_QWORD *)this + 51);
  if (v14)
    (*(void (**)(char *))(*((_QWORD *)this + 26) + 24))((char *)this + 208);
  if (v13)
    (*(void (**)(char *))(*(_QWORD *)v2 + 24))(v2);
}

void sub_1B5972DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ADS::Device::~Device(ADS::Device *this)
{
  ADS::Device::~Device(this);
  JUMPOUT(0x1B5E50688);
}

{
  const void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = off_1E6976F80;
  OS::CF::UntypedObject::~UntypedObject((ADS::Device *)((char *)this + 728));
  OS::CF::UntypedObject::~UntypedObject((ADS::Device *)((char *)this + 712));
  OS::CF::UntypedObject::~UntypedObject((ADS::Device *)((char *)this + 696));
  *((_QWORD *)this + 75) = &off_1E6977140;
  CAExtAudioFile::Close((ADS::Device *)((char *)this + 600));
  v2 = (const void *)*((_QWORD *)this + 74);
  if (v2)
    CFRelease(v2);
  OS::CF::UntypedObject::~UntypedObject((ADS::Device *)((char *)this + 528));
  v3 = (void *)*((_QWORD *)this + 63);
  if (v3)
  {
    *((_QWORD *)this + 64) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 51);
  if (v4)
  {
    *((_QWORD *)this + 52) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 48);
  if (v5)
  {
    *((_QWORD *)this + 49) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 45);
  if (v6)
  {
    *((_QWORD *)this + 46) = v6;
    operator delete(v6);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)this + 43));
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)this + 296);
  *((_QWORD *)this + 26) = &off_1E69985F8;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 232));
  *((_QWORD *)this + 15) = &off_1E69985F8;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 144));
  OS::CF::UntypedObject::~UntypedObject((ADS::Device *)((char *)this + 104));
  OS::CF::UntypedObject::~UntypedObject((ADS::Device *)((char *)this + 88));
  OS::CF::UntypedObject::~UntypedObject((ADS::Device *)((char *)this + 72));
  OS::CF::UntypedObject::~UntypedObject((ADS::Device *)((char *)this + 56));
  ADS::BaseObject::~BaseObject(this);
}

BOOL ADS::Device::HasProperty(ADS::Device *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  signed int mSelector;
  uint64_t v5;
  int v6;
  int v7;
  int v9;
  __int16 v10;
  AudioObjectPropertyScope v11;
  AudioObjectPropertyScope mScope;
  unsigned int v14;
  _DWORD *exception;

  if (*((_DWORD *)this + 2) != a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  mSelector = a4->mSelector;
  v5 = 1;
  if ((int)a4->mSelector > 1752197474)
  {
    if (mSelector > 1853059699)
    {
      if (mSelector <= 1936618860)
      {
        if (mSelector <= 1935763059)
        {
          if (mSelector == 1853059700)
            return v5;
          v6 = 1919512167;
        }
        else
        {
          if (mSelector == 1935763060)
            goto LABEL_57;
          if (mSelector == 1935892848)
            return *((_DWORD *)this + 3) != 1633905771;
          v6 = 1936092276;
        }
        goto LABEL_72;
      }
      if (mSelector <= 1953653101)
      {
        if (mSelector == 1936618861)
          return v5;
        if (mSelector == 1936879204)
          goto LABEL_57;
        v7 = 1937009955;
        goto LABEL_64;
      }
      if (mSelector == 1953653102 || mSelector == 1969841184)
        return v5;
      v9 = 1986294896;
    }
    else
    {
      if (mSelector > 1818850925)
      {
        if (mSelector > 1819569762)
        {
          if (mSelector == 1819569763)
          {
            mScope = a4->mScope;
            return mScope == 1768845428 || mScope == 1869968496;
          }
          if (mSelector == 1836411236)
            return v5;
          v6 = 1853059619;
        }
        else
        {
          if (mSelector == 1818850926 || mSelector == 1819107691)
            return v5;
          v6 = 1819173229;
        }
        goto LABEL_72;
      }
      if (mSelector <= 1768515183)
      {
        if (mSelector == 1752197475)
          return v5;
        v6 = 1752525155;
        goto LABEL_72;
      }
      if (mSelector == 1768515184 || mSelector == 1768777573)
        return v5;
      v9 = 1769302372;
    }
    if (mSelector != v9)
      return ADS::BaseObject::HasProperty(this, a2, a3, a4);
    v10 = atomic_load((unsigned int *)this + 186);
    if ((v10 & 0x100) == 0)
      return ADS::BaseObject::HasProperty(this, a2, a3, a4);
    return a4->mScope == 1735159650 && a4->mElement == 0;
  }
  if (mSelector > 1685278577)
  {
    if (mSelector > 1719301234)
    {
      if (mSelector <= 1751737453)
      {
        if (mSelector == 1719301235)
          return v5;
        v6 = 1735354734;
      }
      else
      {
        if (mSelector == 1751737454 || mSelector == 1751738723)
          return v5;
        v6 = 1751740259;
      }
    }
    else
    {
      if (mSelector <= 1685484384)
      {
        if (mSelector == 1685278578)
        {
          v14 = atomic_load((unsigned int *)this + 186);
          return (a4->mScope == 1768845428) & (v14 >> 10);
        }
        v7 = 1685287012;
        goto LABEL_64;
      }
      if ((mSelector - 1685484385) < 2 || mSelector == 1718841206)
        return v5;
      v6 = 1719105134;
    }
LABEL_72:
    if (mSelector == v6)
      return v5;
    return ADS::BaseObject::HasProperty(this, a2, a3, a4);
  }
  if (mSelector <= 1668641651)
  {
    if (mSelector > 1668049763)
    {
      if (mSelector == 1668049764 || mSelector == 1668575852)
        return v5;
      if (mSelector != 1668639076)
        return ADS::BaseObject::HasProperty(this, a2, a3, a4);
      return *((_DWORD *)this + 3) == 1633905771;
    }
    if (mSelector == 1634429294)
      return v5;
    v7 = 1634690672;
LABEL_64:
    if (mSelector == v7)
      return *((_DWORD *)this + 3) != 1633905771;
    return ADS::BaseObject::HasProperty(this, a2, a3, a4);
  }
  if (mSelector > 1684434035)
  {
    if (mSelector == 1684434036)
      return v5;
    if (mSelector == 1684893796)
      return *((_DWORD *)this + 3) != 1633905771;
    v7 = 1685087596;
    goto LABEL_64;
  }
  if (mSelector != 1668641652)
  {
    if (mSelector == 1684107364)
      return *((_DWORD *)this + 3) != 1633905771;
    if (mSelector != 1684236338)
      return ADS::BaseObject::HasProperty(this, a2, a3, a4);
LABEL_57:
    v11 = a4->mScope;
    if (v11 != 1869968496 && v11 != 1768845428)
      return 0;
    return *((_DWORD *)this + 3) != 1633905771;
  }
  return v5;
}

uint64_t ADS::Device::IsPropertySettable(ADS::Device *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  uint64_t result;
  signed int mSelector;
  int v7;
  int v8;
  int v9;
  _DWORD *exception;

  if (*((_DWORD *)this + 2) != a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  result = 0;
  mSelector = a4->mSelector;
  if ((int)a4->mSelector > 1752197474)
  {
    if (mSelector > 1853059699)
    {
      if (mSelector <= 1936618860)
      {
        if (mSelector <= 1935763059)
        {
          if (mSelector != 1853059700)
          {
            v7 = 1919512167;
            goto LABEL_64;
          }
          return 1;
        }
        if (mSelector == 1935763060)
          return result;
        if (mSelector != 1935892848)
        {
          v7 = 1936092276;
          goto LABEL_64;
        }
        return *((_DWORD *)this + 3) != 1633905771;
      }
      if (mSelector > 1953653101)
      {
        if (mSelector != 1953653102 && mSelector != 1969841184)
        {
          v7 = 1986294896;
          goto LABEL_64;
        }
      }
      else if (mSelector != 1936618861 && mSelector != 1936879204)
      {
        v7 = 1937009955;
        goto LABEL_64;
      }
      return result;
    }
    if (mSelector <= 1818850925)
    {
      if (mSelector <= 1768515183)
      {
        if (mSelector == 1752197475)
          return 1;
        v8 = 1752525155;
      }
      else
      {
        if (mSelector == 1768515184)
          return 1;
        if (mSelector == 1768777573)
          return result;
        v8 = 1769302372;
      }
    }
    else
    {
      if (mSelector > 1819569762)
      {
        if (mSelector != 1819569763 && mSelector != 1836411236)
        {
          v7 = 1853059619;
          goto LABEL_64;
        }
        return result;
      }
      if (mSelector == 1818850926 || mSelector == 1819107691)
        return result;
      v8 = 1819173229;
    }
    goto LABEL_58;
  }
  if (mSelector > 1685278577)
  {
    if (mSelector <= 1719301234)
    {
      if (mSelector <= 1685484384)
      {
        if (mSelector == 1685278578)
          return result;
        v7 = 1685287012;
      }
      else
      {
        if ((mSelector - 1685484385) < 2)
          return 1;
        if (mSelector == 1718841206)
          return result;
        v7 = 1719105134;
      }
LABEL_64:
      if (mSelector == v7)
        return result;
      return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
    }
    if (mSelector <= 1751737453)
    {
      if (mSelector == 1719301235)
        return result;
      v7 = 1735354734;
      goto LABEL_64;
    }
    if (mSelector == 1751737454)
      return result;
    if (mSelector == 1751738723)
      return 1;
    v8 = 1751740259;
LABEL_58:
    if (mSelector != v8)
      return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
    return 1;
  }
  if (mSelector <= 1668641651)
  {
    if (mSelector <= 1668049763)
    {
      if (mSelector == 1634429294)
        return result;
      v9 = 1634690672;
LABEL_54:
      if (mSelector != v9)
        return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
      return *((_DWORD *)this + 3) != 1633905771;
    }
    if (mSelector != 1668049764 && mSelector != 1668575852)
    {
      v7 = 1668639076;
      goto LABEL_64;
    }
  }
  else
  {
    if (mSelector <= 1684434035)
    {
      if (mSelector != 1668641652)
      {
        if (mSelector == 1684107364)
          return result;
        v7 = 1684236338;
        goto LABEL_64;
      }
      return 1;
    }
    if (mSelector != 1684434036 && mSelector != 1684893796)
    {
      v9 = 1685087596;
      goto LABEL_54;
    }
  }
  return result;
}

uint64_t ADS::Device::GetPropertyDataSize(ADS::Device *this, ADS::ObjectManager *a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6)
{
  signed int mSelector;
  uint64_t v9;
  int v10;
  uint64_t v15;
  ADS::ObjectManager *v16;
  ADS::BaseObject *v17;
  int v18;
  AudioObjectPropertyScope v19;
  unsigned int v20;
  AudioObjectPropertyScope v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  AudioObjectPropertyScope mScope;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  _DWORD *exception;
  int v34;
  const char *v35;
  __int16 v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 2) != (_DWORD)a2)
  {
    v15 = ADS::ObjectManager::CopyObjectByObjectID(a2);
    v16 = (ADS::ObjectManager *)v15;
    if (!v15)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v34 = 136315394;
        v35 = "ADS_Device.cpp";
        v36 = 1024;
        v37 = 1963;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::GetPropertyData: unknown device", (uint8_t *)&v34, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 560947818;
    }
    v9 = (*(uint64_t (**)(uint64_t, ADS::ObjectManager *, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(_QWORD *)v15 + 48))(v15, a2, a3, a4, a5, a6);
    ADS::ObjectManager::ReleaseObject(v16, v17);
    return v9;
  }
  mSelector = a4->mSelector;
  v9 = 8;
  if ((int)a4->mSelector <= 1752197474)
  {
    if (mSelector > 1685278577)
    {
      if (mSelector <= 1719105133)
      {
        if (mSelector <= 1685484384)
        {
          if (mSelector == 1685278578)
            return v9;
          v10 = 1685287012;
        }
        else
        {
          if (mSelector == 1685484385)
            return 64;
          if (mSelector == 1685484386)
            return 4;
          v10 = 1718841206;
        }
        goto LABEL_71;
      }
      if (mSelector <= 1751737453)
      {
        if (mSelector == 1719105134 || mSelector == 1719301235)
          return v9;
        v10 = 1735354734;
        goto LABEL_71;
      }
      if (mSelector == 1751737454)
        return 4;
      if (mSelector == 1751738723)
        return v9;
      v18 = 1751740259;
    }
    else if (mSelector <= 1668641651)
    {
      if (mSelector <= 1668049763)
      {
        if (mSelector == 1634429294)
        {
          v20 = *((_DWORD *)this + 80);
          return 4 * v20;
        }
        v18 = 1634690672;
      }
      else
      {
        if (mSelector == 1668049764)
          return 4;
        if (mSelector == 1668575852)
        {
          mScope = a4->mScope;
          switch(mScope)
          {
            case 0x6F757470u:
              v32 = std::count_if[abi:ne180100]<std::__wrap_iter<unsigned int const*>,ADS::Device::Device_GetPropertyDataSize(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*)::$_3>(*((unsigned int **)this + 51), *((unsigned int **)this + 52));
              break;
            case 0x696E7074u:
              v32 = std::count_if[abi:ne180100]<std::__wrap_iter<unsigned int const*>,ADS::Device::Device_GetPropertyDataSize(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*)::$_2>(*((unsigned int **)this + 51), *((unsigned int **)this + 52));
              break;
            case 0x676C6F62u:
              v27 = *((_DWORD *)this + 104);
              v28 = *((_DWORD *)this + 102);
              return (v27 - v28) & 0xFFFFFFFC;
            default:
              return 0;
          }
          return (4 * v32);
        }
        v18 = 1668639076;
      }
    }
    else
    {
      if (mSelector > 1684434035)
      {
        if (mSelector == 1684434036 || mSelector == 1684893796)
          return 4;
        v10 = 1685087596;
        goto LABEL_71;
      }
      if (mSelector == 1668641652)
        return 12 * ((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 4) + 156;
      if (mSelector == 1684107364)
        return 4;
      v18 = 1684236338;
    }
    goto LABEL_67;
  }
  if (mSelector <= 1853059699)
  {
    if (mSelector <= 1818850925)
    {
      if (mSelector > 1768515183)
      {
        if (mSelector == 1768515184 || mSelector == 1768777573)
          return v9;
        v10 = 1769302372;
        goto LABEL_71;
      }
      if (mSelector == 1752197475)
        return v9;
      v18 = 1752525155;
    }
    else
    {
      if (mSelector > 1819569762)
      {
        if (mSelector != 1819569763)
        {
          if (mSelector == 1836411236)
            return v9;
          if (mSelector == 1853059619)
            return (16 * *((_DWORD *)this + 88));
          return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
        }
        return 4;
      }
      if (mSelector == 1818850926)
        return 4;
      if (mSelector == 1819107691)
        return v9;
      v18 = 1819173229;
    }
LABEL_67:
    if (mSelector == v18)
      return v9;
    return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
  }
  if (mSelector <= 1936618860)
  {
    if (mSelector <= 1935763059)
    {
      if (mSelector != 1853059700)
      {
        if (mSelector != 1870098020)
        {
          v10 = 1919512167;
          goto LABEL_71;
        }
        v22 = a4->mScope;
        switch(v22)
        {
          case 0x6F757470u:
            v29 = std::count_if[abi:ne180100]<std::__wrap_iter<unsigned int const*>,ADS::Device::Device_GetPropertyDataSize(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*)::$_1>(*((unsigned int **)this + 51), *((unsigned int **)this + 52));
            v30 = *((_DWORD *)this + 98);
            v31 = *((_DWORD *)this + 96);
            break;
          case 0x696E7074u:
            v29 = std::count_if[abi:ne180100]<std::__wrap_iter<unsigned int const*>,ADS::Device::Device_GetPropertyDataSize(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*)::$_0>(*((unsigned int **)this + 51), *((unsigned int **)this + 52));
            v30 = *((_DWORD *)this + 92);
            v31 = *((_DWORD *)this + 90);
            break;
          case 0x676C6F62u:
            v20 = ((*((_DWORD *)this + 98) - *((_DWORD *)this + 96)) >> 2)
                + ((*((_DWORD *)this + 92) - *((_DWORD *)this + 90)) >> 2)
                + ((*((_DWORD *)this + 104) - *((_DWORD *)this + 102)) >> 2);
            return 4 * v20;
          default:
            return 0;
        }
        v20 = v29 + ((v30 - v31) >> 2);
        return 4 * v20;
      }
      return v9;
    }
    if (mSelector == 1935763060 || mSelector == 1935892848)
      return 4;
    v10 = 1936092276;
LABEL_71:
    if (mSelector == v10)
      return 4;
    return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
  }
  if (mSelector > 1953653101)
  {
    if (mSelector != 1953653102)
    {
      if (mSelector == 1969841184)
        return v9;
      v10 = 1986294896;
      goto LABEL_71;
    }
    return 4;
  }
  if (mSelector == 1936618861)
    return v9;
  if (mSelector != 1936879204)
  {
    if (mSelector == 1937009955)
    {
      v19 = a4->mScope;
      switch(v19)
      {
        case 0x6F757470u:
          v27 = *((_DWORD *)this + 98);
          v28 = *((_DWORD *)this + 96);
          break;
        case 0x696E7074u:
          v27 = *((_DWORD *)this + 92);
          v28 = *((_DWORD *)this + 90);
          break;
        case 0x676C6F62u:
          v20 = ((*((_DWORD *)this + 98) - *((_DWORD *)this + 96)) >> 2)
              + ((*((_DWORD *)this + 92) - *((_DWORD *)this + 90)) >> 2);
          return 4 * v20;
        default:
          return 0;
      }
      return (v27 - v28) & 0xFFFFFFFC;
    }
    return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
  }
  v23 = 496;
  if (a4->mScope == 1768845428)
    v23 = 492;
  v24 = atomic_load((unsigned int *)((char *)this + v23));
  v25 = caulk::numeric::exceptional_mul<unsigned int>(v24 - 1);
  return caulk::numeric::exceptional_add<unsigned int>(v25);
}

void sub_1B5973EA8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ADS::Device::GetPropertyData(ADS::Device *this, ADS::ObjectManager *a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6, const void *a7, unsigned int *a8, unsigned int *a9)
{
  uint64_t v16;
  ADS::ObjectManager *v17;
  ADS::BaseObject *v18;
  _DWORD *exception;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 2) == (_DWORD)a2)
  {
    ADS::Device::Device_GetPropertyData(this, a2, a3, a4, a5, a7, a8, a9, a9);
  }
  else
  {
    v16 = ADS::ObjectManager::CopyObjectByObjectID(a2);
    v17 = (ADS::ObjectManager *)v16;
    if (!v16)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v21 = "ADS_Device.cpp";
        v22 = 1024;
        v23 = 1979;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::GetPropertyData: unknown device", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 560947818;
    }
    (*(void (**)(uint64_t, ADS::ObjectManager *, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, const void *, unsigned int *, unsigned int *))(*(_QWORD *)v16 + 56))(v16, a2, a3, a4, a5, a6, a7, a8, a9);
    ADS::ObjectManager::ReleaseObject(v17, v18);
  }
}

void sub_1B59740A4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ADS::Device::SetPropertyData(uint64_t a1, ADS::ObjectManager *this, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, unint64_t *a10, char a11)
{
  int v16;
  _DWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v23;
  ADS::ObjectManager *v24;
  ADS::BaseObject *v25;
  double v26;
  uint64_t v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  CFTypeRef v37;
  double v38;
  uint64_t (*v39)(uint64_t);
  void *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  int v47;
  double v48;
  int v49;
  CFTypeRef v50;
  const char *v51;
  int v52;
  int v53;
  CFTypeRef v54;
  dispatch_queue_t *v55;
  unsigned __int8 v56;
  unint64_t v57;
  dispatch_queue_t *v58;
  unsigned __int8 v59;
  unint64_t v60;
  _DWORD *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _DWORD *v74;
  unint64_t v75;
  unint64_t v76;
  const void *v77;
  size_t v78;
  void *v79;
  const void *v80;
  size_t v81;
  CFTypeRef *v82;
  BOOL v84;
  _DWORD *v85;
  BOOL v86;
  char v87;
  void (*v88)(uint64_t, ADS::ObjectManager *, _QWORD, uint64_t);
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  int v133;
  unint64_t v134;
  _DWORD *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  const void *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  int v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  int v168;
  _DWORD *exception;
  _DWORD *v170;
  _DWORD *v171;
  _DWORD *v172;
  _DWORD *v173;
  _DWORD *v174;
  _DWORD *v175;
  _DWORD *v176;
  _DWORD *v177;
  _DWORD *v178;
  _DWORD *v179;
  _DWORD *v180;
  _DWORD *v181;
  _DWORD *v182;
  _DWORD *v183;
  _DWORD *v184;
  _DWORD *v185;
  uint64_t v186;
  CFTypeRef cf;
  _BYTE __p[32];
  __int128 v189;
  __int128 v190;
  uint64_t v191;

  v191 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != (_DWORD)this)
  {
    v23 = ADS::ObjectManager::CopyObjectByObjectID(this);
    v24 = (ADS::ObjectManager *)v23;
    if (!v23)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "ADS_Device.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 1995;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::GetPropertyData: unknown device", __p, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 560947818;
    }
    (*(void (**)(uint64_t, ADS::ObjectManager *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *, unint64_t *, char))(*(_QWORD *)v23 + 64))(v23, this, a3, a4, a5, a6, a7, a8, a9, a10, a11);
    ADS::ObjectManager::ReleaseObject(v24, v25);
    return;
  }
  v16 = *(_DWORD *)a4;
  if (*(int *)a4 > 1752197474)
  {
    if (v16 > 1769302371)
    {
      if (v16 > 1853059699)
      {
        if (v16 != 1853059700)
        {
          if (v16 != 1935892848)
            goto LABEL_93;
          if (*(_DWORD *)(a1 + 12) == 1633905771)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__p = 136315394;
              *(_QWORD *)&__p[4] = "ADS_Device.cpp";
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = 3028;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: clock devices do not have streams (kAudioFakeDevicePropertyStreamCaptureEnabled)", __p, 0x12u);
            }
            v177 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v177 = &off_1E69A1B30;
            v177[2] = 1970171760;
          }
          if ((_DWORD)a7 != 4)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__p = 136315394;
              *(_QWORD *)&__p[4] = "ADS_Device.cpp";
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = 3029;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: wrong size for the data for kAudioFakeDevicePropertyStreamCaptureEnabled", __p, 0x12u);
            }
            v183 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v183 = &off_1E69A1B30;
            v183[2] = 561211770;
          }
          v41 = *(_DWORD *)a8;
          if (!*(_QWORD *)(a1 + 440))
          {
            *(_BYTE *)(a1 + 544) = v41 != 0;
            *a9 = 1;
            v17 = (_DWORD *)a10[1];
            v73 = a10[2];
            if ((unint64_t)v17 < v73)
            {
              v19 = 0x676C6F6273636170;
              goto LABEL_216;
            }
            v124 = 0x1555555555555555;
            v61 = (_DWORD *)*a10;
            v125 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v17 - *a10) >> 2);
            v126 = v125 + 1;
            if (v125 + 1 > 0x1555555555555555)
              goto LABEL_276;
            v127 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - (_QWORD)v61) >> 2);
            if (2 * v127 > v126)
              v126 = 2 * v127;
            if (v127 < 0xAAAAAAAAAAAAAAALL)
              v124 = v126;
            if (v124)
            {
              v124 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v124);
              v61 = (_DWORD *)*a10;
              v17 = (_DWORD *)a10[1];
            }
            else
            {
              v128 = 0;
            }
            v129 = v124 + 12 * v125;
            v130 = v124 + 12 * v128;
            *(_QWORD *)v129 = 0x676C6F6273636170;
            *(_DWORD *)(v129 + 8) = 0;
            v131 = v129 + 12;
            if (v17 == v61)
              goto LABEL_269;
            do
            {
              v161 = *(_QWORD *)(v17 - 3);
              v17 -= 3;
              v162 = v17[2];
              *(_QWORD *)(v129 - 12) = v161;
              v129 -= 12;
              *(_DWORD *)(v129 + 8) = v162;
            }
            while (v17 != v61);
            goto LABEL_268;
          }
          pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
          *(_QWORD *)__p = MEMORY[0x1E0C809B0];
          *(_QWORD *)&__p[8] = 0x40000000;
          *(_QWORD *)&__p[16] = ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_170;
          *(_QWORD *)&__p[24] = &__block_descriptor_tmp_171;
          *(_QWORD *)&v189 = __PAIR64__(v41, this);
          goto LABEL_89;
        }
        if ((_DWORD)a7 != 8)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__p = 136315394;
            *(_QWORD *)&__p[4] = "ADS_Device.cpp";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 3059;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: wrong size for the data for kAudioDevicePropertyNominalSampleRate", __p, 0x12u);
          }
          v172 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v172 = &off_1E69A1B30;
          v172[2] = 561211770;
        }
        v45 = *(double *)a8;
        v46 = a1 + 120;
        v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 120) + 16))(a1 + 120);
        if (!ADS::Device::isSupportedSampleRate((ADS::Device *)a1, v45))
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__p = 136315394;
            *(_QWORD *)&__p[4] = "ADS_Device.cpp";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 3067;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::setSampleRate: unsupported value for kAudioDevicePropertyNominalSampleRate", __p, 0x12u);
          }
          v182 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v182 = &off_1E69A1B30;
          v182[2] = 560226676;
        }
        v48 = *(double *)(a1 + 632);
        if (v47)
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 24))(a1 + 120);
        if (v45 != v48)
        {
          v49 = *(_DWORD *)(a1 + 8);
          pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
          *(_QWORD *)__p = MEMORY[0x1E0C809B0];
          *(_QWORD *)&__p[8] = 0x40000000;
          *(_QWORD *)&__p[16] = ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_172;
          *(_QWORD *)&__p[24] = &__block_descriptor_tmp_173;
          DWORD2(v189) = v49;
          *(double *)&v189 = v45;
          goto LABEL_89;
        }
        return;
      }
      if (v16 == 1769302372)
      {
        *(_DWORD *)(a1 + 820) = *(_DWORD *)a8;
        return;
      }
      if (v16 != 1819173229)
        goto LABEL_93;
      if ((_DWORD)a7 != 8)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = "ADS_Device.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 2990;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: wrong size for the data for kAudioObjectPropertyName", __p, 0x12u);
        }
        v173 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v173 = &off_1E69A1B30;
        v173[2] = 561211770;
      }
      v26 = *(double *)a8;
      if (*(_QWORD *)a8)
        CFRetain(*(CFTypeRef *)a8);
      v27 = *(_QWORD *)(a1 + 64);
      *(double *)(a1 + 64) = v26;
      *(_QWORD *)__p = &off_1E69A0F60;
      *(_QWORD *)&__p[8] = v27;
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)__p);
      *a9 = 1;
      v17 = (_DWORD *)a10[1];
      v28 = a10[2];
      if ((unint64_t)v17 < v28)
      {
        v19 = 0x676C6F626C6E616DLL;
        goto LABEL_216;
      }
      v60 = 0x1555555555555555;
      v61 = (_DWORD *)*a10;
      v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v17 - *a10) >> 2);
      v63 = v62 + 1;
      if (v62 + 1 > 0x1555555555555555)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (_QWORD)v61) >> 2);
      if (2 * v64 > v63)
        v63 = 2 * v64;
      if (v64 < 0xAAAAAAAAAAAAAAALL)
        v60 = v63;
      if (v60)
      {
        v60 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v60);
        v61 = (_DWORD *)*a10;
        v17 = (_DWORD *)a10[1];
      }
      else
      {
        v65 = 0;
      }
      v129 = v60 + 12 * v62;
      v130 = v60 + 12 * v65;
      *(_QWORD *)v129 = 0x676C6F626C6E616DLL;
      *(_DWORD *)(v129 + 8) = 0;
      v131 = v129 + 12;
      if (v17 != v61)
      {
        do
        {
          v132 = *(_QWORD *)(v17 - 3);
          v17 -= 3;
          v133 = v17[2];
          *(_QWORD *)(v129 - 12) = v132;
          v129 -= 12;
          *(_DWORD *)(v129 + 8) = v133;
        }
        while (v17 != v61);
        goto LABEL_268;
      }
LABEL_269:
      *a10 = v129;
      a10[1] = v131;
      a10[2] = v130;
      if (v61)
        operator delete(v61);
      goto LABEL_271;
    }
    switch(v16)
    {
      case 1752197475:
        if ((_DWORD)a7 != 8)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__p = 136315394;
            *(_QWORD *)&__p[4] = "ADS_Device.cpp";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 3192;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: wrong size for the data for AudioFakeDeviceSetupForIsolatedIOCallback", __p, 0x12u);
          }
          v179 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v179 = &off_1E69A1B30;
          v179[2] = 561211770;
        }
        v38 = *(double *)a8;
        if (!*(_QWORD *)(a1 + 440))
        {
          *(double *)(a1 + 576) = v38;
          *a9 = 1;
          v17 = (_DWORD *)a10[1];
          v69 = a10[2];
          if ((unint64_t)v17 < v69)
          {
            v19 = 0x676C6F6268706963;
            goto LABEL_216;
          }
          v109 = 0x1555555555555555;
          v61 = (_DWORD *)*a10;
          v110 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v17 - *a10) >> 2);
          v111 = v110 + 1;
          if (v110 + 1 > 0x1555555555555555)
            goto LABEL_276;
          v112 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - (_QWORD)v61) >> 2);
          if (2 * v112 > v111)
            v111 = 2 * v112;
          if (v112 < 0xAAAAAAAAAAAAAAALL)
            v109 = v111;
          if (v109)
          {
            v109 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v109);
            v61 = (_DWORD *)*a10;
            v17 = (_DWORD *)a10[1];
          }
          else
          {
            v113 = 0;
          }
          v129 = v109 + 12 * v110;
          v130 = v109 + 12 * v113;
          *(_QWORD *)v129 = 0x676C6F6268706963;
          *(_DWORD *)(v129 + 8) = 0;
          v131 = v129 + 12;
          if (v17 == v61)
            goto LABEL_269;
          do
          {
            v155 = *(_QWORD *)(v17 - 3);
            v17 -= 3;
            v156 = v17[2];
            *(_QWORD *)(v129 - 12) = v155;
            v129 -= 12;
            *(_DWORD *)(v129 + 8) = v156;
          }
          while (v17 != v61);
          goto LABEL_268;
        }
        pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
        *(_QWORD *)__p = MEMORY[0x1E0C809B0];
        *(_QWORD *)&__p[8] = 0x40000000;
        v39 = ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_176;
        v40 = &__block_descriptor_tmp_177;
        break;
      case 1752525155:
        if ((_DWORD)a7 != 8)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__p = 136315394;
            *(_QWORD *)&__p[4] = "ADS_Device.cpp";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 3219;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: wrong size for the data for AudioFakeDeviceTeardownForIsolatedIOCallback", __p, 0x12u);
          }
          v181 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v181 = &off_1E69A1B30;
          v181[2] = 561211770;
        }
        v38 = *(double *)a8;
        if (!*(_QWORD *)(a1 + 440))
        {
          *(double *)(a1 + 584) = v38;
          *a9 = 1;
          v17 = (_DWORD *)a10[1];
          v71 = a10[2];
          if ((unint64_t)v17 < v71)
          {
            v19 = 0x676C6F6268756963;
            goto LABEL_216;
          }
          v119 = 0x1555555555555555;
          v61 = (_DWORD *)*a10;
          v120 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v17 - *a10) >> 2);
          v121 = v120 + 1;
          if (v120 + 1 > 0x1555555555555555)
            goto LABEL_276;
          v122 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - (_QWORD)v61) >> 2);
          if (2 * v122 > v121)
            v121 = 2 * v122;
          if (v122 < 0xAAAAAAAAAAAAAAALL)
            v119 = v121;
          if (v119)
          {
            v119 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v119);
            v61 = (_DWORD *)*a10;
            v17 = (_DWORD *)a10[1];
          }
          else
          {
            v123 = 0;
          }
          v129 = v119 + 12 * v120;
          v130 = v119 + 12 * v123;
          *(_QWORD *)v129 = 0x676C6F6268756963;
          *(_DWORD *)(v129 + 8) = 0;
          v131 = v129 + 12;
          if (v17 == v61)
            goto LABEL_269;
          do
          {
            v159 = *(_QWORD *)(v17 - 3);
            v17 -= 3;
            v160 = v17[2];
            *(_QWORD *)(v129 - 12) = v159;
            v129 -= 12;
            *(_DWORD *)(v129 + 8) = v160;
          }
          while (v17 != v61);
          goto LABEL_268;
        }
        pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
        *(_QWORD *)__p = MEMORY[0x1E0C809B0];
        *(_QWORD *)&__p[8] = 0x40000000;
        v39 = ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_178;
        v40 = &__block_descriptor_tmp_179;
        break;
      case 1768515184:
        if ((_DWORD)a7 != 8)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__p = 136315394;
            *(_QWORD *)&__p[4] = "ADS_Device.cpp";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 3279;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: wrong size for the data for kAudioFakeDevicePropertyInputInjectionFilePath", __p, 0x12u);
          }
          v175 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v175 = &off_1E69A1B30;
          v175[2] = 561211770;
        }
        v37 = *(CFTypeRef *)a8;
        if (*(_QWORD *)(a1 + 440))
        {
          pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
          *(_QWORD *)__p = MEMORY[0x1E0C809B0];
          *(_QWORD *)&__p[8] = 0x40000000;
          *(_QWORD *)&__p[16] = ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_182;
          *(_QWORD *)&__p[24] = &__block_descriptor_tmp_183;
          DWORD2(v189) = (_DWORD)this;
          *(_QWORD *)&v189 = v37;
          goto LABEL_89;
        }
        if (v37)
        {
          CFRetain(*(CFTypeRef *)a8);
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)__p, v37);
          v72 = *(_QWORD *)__p;
        }
        else
        {
          v72 = 0;
        }
        v140 = *(const void **)(a1 + 592);
        *(_QWORD *)(a1 + 592) = v72;
        *(_QWORD *)__p = v140;
        if (v140)
          CFRelease(v140);
        CAExtAudioFile::Close((CAExtAudioFile *)(a1 + 600));
        *a9 = 1;
        v17 = (_DWORD *)a10[1];
        v141 = a10[2];
        if ((unint64_t)v17 < v141)
        {
          v19 = 0x676C6F6269696670;
          goto LABEL_216;
        }
        v142 = 0x1555555555555555;
        v61 = (_DWORD *)*a10;
        v143 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v17 - *a10) >> 2);
        v144 = v143 + 1;
        if (v143 + 1 > 0x1555555555555555)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v145 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v141 - (_QWORD)v61) >> 2);
        if (2 * v145 > v144)
          v144 = 2 * v145;
        if (v145 < 0xAAAAAAAAAAAAAAALL)
          v142 = v144;
        if (v142)
        {
          v142 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v142);
          v61 = (_DWORD *)*a10;
          v17 = (_DWORD *)a10[1];
        }
        else
        {
          v146 = 0;
        }
        v129 = v142 + 12 * v143;
        v130 = v142 + 12 * v146;
        *(_QWORD *)v129 = 0x676C6F6269696670;
        *(_DWORD *)(v129 + 8) = 0;
        v131 = v129 + 12;
        if (v17 != v61)
        {
          do
          {
            v167 = *(_QWORD *)(v17 - 3);
            v17 -= 3;
            v168 = v17[2];
            *(_QWORD *)(v129 - 12) = v167;
            v129 -= 12;
            *(_DWORD *)(v129 + 8) = v168;
          }
          while (v17 != v61);
          goto LABEL_268;
        }
        goto LABEL_269;
      default:
        goto LABEL_93;
    }
LABEL_88:
    *(_QWORD *)&__p[16] = v39;
    *(_QWORD *)&__p[24] = v40;
    DWORD2(v189) = (_DWORD)this;
    *(double *)&v189 = v38;
LABEL_89:
    v58 = (dispatch_queue_t *)ADS::Simulator::sServerDefaultPriorityQueue;
    if (ADS::Simulator::sServerDefaultPriorityQueue)
    {
      v59 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 32));
      if ((v59 & 1) != 0)
        atomic_store(1u, (unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 33));
      dispatch_async(*v58, __p);
    }
    return;
  }
  if (v16 > 1685484385)
  {
    if (v16 <= 1751738722)
    {
      if (v16 != 1685484386)
      {
        if (v16 == 1751737454)
        {
          if (!a11)
            return;
          *(_BYTE *)(a1 + 482) = *(_DWORD *)a8 != 0;
          *a9 = 1;
          v17 = (_DWORD *)a10[1];
          v18 = a10[2];
          if ((unint64_t)v17 < v18)
          {
            v19 = 0x676C6F626869646ELL;
LABEL_216:
            *(_QWORD *)v17 = v19;
            v17[2] = 0;
            v131 = (unint64_t)(v17 + 3);
LABEL_271:
            a10[1] = v131;
            return;
          }
          v89 = 0x1555555555555555;
          v61 = (_DWORD *)*a10;
          v90 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v17 - *a10) >> 2);
          v91 = v90 + 1;
          if (v90 + 1 <= 0x1555555555555555)
          {
            v92 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (_QWORD)v61) >> 2);
            if (2 * v92 > v91)
              v91 = 2 * v92;
            if (v92 < 0xAAAAAAAAAAAAAAALL)
              v89 = v91;
            if (v89)
            {
              v89 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v89);
              v61 = (_DWORD *)*a10;
              v17 = (_DWORD *)a10[1];
            }
            else
            {
              v93 = 0;
            }
            v129 = v89 + 12 * v90;
            v130 = v89 + 12 * v93;
            *(_QWORD *)v129 = 0x676C6F626869646ELL;
            *(_DWORD *)(v129 + 8) = 0;
            v131 = v129 + 12;
            if (v17 == v61)
              goto LABEL_269;
            do
            {
              v147 = *(_QWORD *)(v17 - 3);
              v17 -= 3;
              v148 = v17[2];
              *(_QWORD *)(v129 - 12) = v147;
              v129 -= 12;
              *(_DWORD *)(v129 + 8) = v148;
            }
            while (v17 != v61);
            goto LABEL_268;
          }
LABEL_276:
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
LABEL_93:
        ADS::BaseObject::SetPropertyData(a1, (int)this, a3, a4, a5, a6, a7, a8, a9, a10, a11);
        return;
      }
      if ((_DWORD)a7 != 4)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = "ADS_Device.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 3116;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: wrong size for the data for kAudioFakeDevicePropertySelectBehavior", __p, 0x12u);
        }
        v170 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v170 = &off_1E69A1B30;
        v170[2] = 561211770;
      }
      v42 = *(_DWORD *)a8;
      if (*(_QWORD *)(a1 + 440))
      {
        v43 = operator new();
        *(_DWORD *)(v43 + 8) = (_DWORD)this;
        *(_QWORD *)(v43 + 12) = 0x676C6F6264767362;
        *(_DWORD *)(v43 + 20) = 0;
        *(_QWORD *)(v43 + 48) = 0;
        *(_QWORD *)v43 = &off_1E6977738;
        *(_DWORD *)(v43 + 56) = v42;
        v44 = ADS::Simulator::sHost;
        if (!ADS::Simulator::sHost)
          return;
        v31 = v43;
        goto LABEL_143;
      }
      atomic_store(v42, (unsigned int *)(a1 + 744));
      v66 = atomic_load((unsigned int *)(a1 + 744));
      *(_BYTE *)(a1 + 545) = (v66 & 0x40) != 0;
      *a9 = 1;
      v17 = (_DWORD *)a10[1];
      v67 = a10[2];
      if ((unint64_t)v17 < v67)
      {
        v19 = 0x676C6F6264767362;
        goto LABEL_216;
      }
      v99 = 0x1555555555555555;
      v61 = (_DWORD *)*a10;
      v100 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v17 - *a10) >> 2);
      v101 = v100 + 1;
      if (v100 + 1 > 0x1555555555555555)
        goto LABEL_276;
      v102 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67 - (_QWORD)v61) >> 2);
      if (2 * v102 > v101)
        v101 = 2 * v102;
      if (v102 < 0xAAAAAAAAAAAAAAALL)
        v99 = v101;
      if (v99)
      {
        v99 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v99);
        v61 = (_DWORD *)*a10;
        v17 = (_DWORD *)a10[1];
      }
      else
      {
        v103 = 0;
      }
      v129 = v99 + 12 * v100;
      v130 = v99 + 12 * v103;
      *(_QWORD *)v129 = 0x676C6F6264767362;
      *(_DWORD *)(v129 + 8) = 0;
      v131 = v129 + 12;
      if (v17 == v61)
        goto LABEL_269;
      do
      {
        v151 = *(_QWORD *)(v17 - 3);
        v17 -= 3;
        v152 = v17[2];
        *(_QWORD *)(v129 - 12) = v151;
        v129 -= 12;
        *(_DWORD *)(v129 + 8) = v152;
      }
      while (v17 != v61);
LABEL_268:
      v61 = (_DWORD *)*a10;
      goto LABEL_269;
    }
    if (v16 == 1751738723)
    {
      if ((_DWORD)a7 != 8)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = "ADS_Device.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 3165;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: wrong size for the data for kAudioFakeDevicePropertyHardwareIsolatedIOCallback", __p, 0x12u);
        }
        v171 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v171 = &off_1E69A1B30;
        v171[2] = 561211770;
      }
      v38 = *(double *)a8;
      if (!*(_QWORD *)(a1 + 440))
      {
        *(double *)(a1 + 568) = v38;
        *a9 = 1;
        v17 = (_DWORD *)a10[1];
        v68 = a10[2];
        if ((unint64_t)v17 < v68)
        {
          v19 = 0x676C6F6268696963;
          goto LABEL_216;
        }
        v104 = 0x1555555555555555;
        v61 = (_DWORD *)*a10;
        v105 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v17 - *a10) >> 2);
        v106 = v105 + 1;
        if (v105 + 1 > 0x1555555555555555)
          goto LABEL_276;
        v107 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - (_QWORD)v61) >> 2);
        if (2 * v107 > v106)
          v106 = 2 * v107;
        if (v107 < 0xAAAAAAAAAAAAAAALL)
          v104 = v106;
        if (v104)
        {
          v104 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v104);
          v61 = (_DWORD *)*a10;
          v17 = (_DWORD *)a10[1];
        }
        else
        {
          v108 = 0;
        }
        v129 = v104 + 12 * v105;
        v130 = v104 + 12 * v108;
        *(_QWORD *)v129 = 0x676C6F6268696963;
        *(_DWORD *)(v129 + 8) = 0;
        v131 = v129 + 12;
        if (v17 == v61)
          goto LABEL_269;
        do
        {
          v153 = *(_QWORD *)(v17 - 3);
          v17 -= 3;
          v154 = v17[2];
          *(_QWORD *)(v129 - 12) = v153;
          v129 -= 12;
          *(_DWORD *)(v129 + 8) = v154;
        }
        while (v17 != v61);
        goto LABEL_268;
      }
      pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
      *(_QWORD *)__p = MEMORY[0x1E0C809B0];
      *(_QWORD *)&__p[8] = 0x40000000;
      v39 = ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_174;
      v40 = &__block_descriptor_tmp_175;
    }
    else
    {
      if (v16 != 1751740259)
        goto LABEL_93;
      if ((_DWORD)a7 != 8)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = "ADS_Device.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 3246;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: wrong size for the data for kAudioFakeDevicePropertyHardwareIOCallback", __p, 0x12u);
        }
        v176 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v176 = &off_1E69A1B30;
        v176[2] = 561211770;
      }
      v38 = *(double *)a8;
      if (!*(_QWORD *)(a1 + 440))
      {
        *(double *)(a1 + 560) = v38;
        *a9 = 1;
        v17 = (_DWORD *)a10[1];
        v70 = a10[2];
        if ((unint64_t)v17 < v70)
        {
          v19 = 0x676C6F6268696F63;
          goto LABEL_216;
        }
        v114 = 0x1555555555555555;
        v61 = (_DWORD *)*a10;
        v115 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v17 - *a10) >> 2);
        v116 = v115 + 1;
        if (v115 + 1 > 0x1555555555555555)
          goto LABEL_276;
        v117 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70 - (_QWORD)v61) >> 2);
        if (2 * v117 > v116)
          v116 = 2 * v117;
        if (v117 < 0xAAAAAAAAAAAAAAALL)
          v114 = v116;
        if (v114)
        {
          v114 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v114);
          v61 = (_DWORD *)*a10;
          v17 = (_DWORD *)a10[1];
        }
        else
        {
          v118 = 0;
        }
        v129 = v114 + 12 * v115;
        v130 = v114 + 12 * v118;
        *(_QWORD *)v129 = 0x676C6F6268696F63;
        *(_DWORD *)(v129 + 8) = 0;
        v131 = v129 + 12;
        if (v17 == v61)
          goto LABEL_269;
        do
        {
          v157 = *(_QWORD *)(v17 - 3);
          v17 -= 3;
          v158 = v17[2];
          *(_QWORD *)(v129 - 12) = v157;
          v129 -= 12;
          *(_DWORD *)(v129 + 8) = v158;
        }
        while (v17 != v61);
        goto LABEL_268;
      }
      pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
      *(_QWORD *)__p = MEMORY[0x1E0C809B0];
      *(_QWORD *)&__p[8] = 0x40000000;
      v39 = ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_180;
      v40 = &__block_descriptor_tmp_181;
    }
    goto LABEL_88;
  }
  switch(v16)
  {
    case 1634690672:
      if (*(_DWORD *)(a1 + 12) == 1633905771)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = "ADS_Device.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 3000;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: clock devices do not have streams (kAudioFakeDevicePropertyAudioOutFilePath)", __p, 0x12u);
        }
        v178 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v178 = &off_1E69A1B30;
        v178[2] = 1970171760;
      }
      if ((_DWORD)a7 != 8)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = "ADS_Device.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 3001;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: wrong size for the data for kAudioFakeDevicePropertyAudioOutFilePath", __p, 0x12u);
        }
        v184 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v184 = &off_1E69A1B30;
        v184[2] = 561211770;
      }
      v50 = *(CFTypeRef *)a8;
      if (*(_QWORD *)a8)
        CFRetain(*(CFTypeRef *)a8);
      v186 = (uint64_t)&off_1E69A0F60;
      cf = v50;
      OS::CF::String::AsStdString((std::string *)__p, (uint64_t)&v186);
      if (__p[23] >= 0)
        v51 = __p;
      else
        v51 = *(const char **)__p;
      v52 = access(v51, 2);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (v52)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = "ADS_Device.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 3004;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: cannot write to the requested path.", __p, 0x12u);
        }
        v185 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v185 = &off_1E69A1B30;
        v185[2] = 560492391;
      }
      if (*(_QWORD *)(a1 + 440))
      {
        v53 = *(_DWORD *)(a1 + 8);
        pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
        *(_QWORD *)__p = MEMORY[0x1E0C809B0];
        *(_QWORD *)&__p[8] = 1174405120;
        *(_QWORD *)&__p[16] = ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke;
        *(_QWORD *)&__p[24] = &__block_descriptor_tmp_3429;
        LODWORD(v190) = v53;
        *(_QWORD *)&v189 = &off_1E69A0E58;
        v54 = cf;
        if (cf)
          CFRetain(cf);
        *(_QWORD *)&v189 = &off_1E69A0F60;
        *((_QWORD *)&v189 + 1) = v54;
        v55 = (dispatch_queue_t *)ADS::Simulator::sServerDefaultPriorityQueue;
        if (ADS::Simulator::sServerDefaultPriorityQueue)
        {
          v56 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 32));
          if ((v56 & 1) != 0)
            atomic_store(1u, (unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 33));
          dispatch_async(*v55, __p);
        }
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v189);
      }
      else
      {
        OS::CF::UntypedObject::operator=(a1 + 528, cf);
        *a9 = 1;
        v74 = (_DWORD *)a10[1];
        v75 = a10[2];
        if ((unint64_t)v74 >= v75)
        {
          v134 = 0x1555555555555555;
          v135 = (_DWORD *)*a10;
          v136 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v74 - *a10) >> 2);
          v137 = v136 + 1;
          if (v136 + 1 > 0x1555555555555555)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v138 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v75 - (_QWORD)v135) >> 2);
          if (2 * v138 > v137)
            v137 = 2 * v138;
          if (v138 < 0xAAAAAAAAAAAAAAALL)
            v134 = v137;
          if (v134)
          {
            v134 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v134);
            v135 = (_DWORD *)*a10;
            v74 = (_DWORD *)a10[1];
          }
          else
          {
            v139 = 0;
          }
          v163 = v134 + 12 * v136;
          v164 = v134 + 12 * v139;
          *(_QWORD *)v163 = 0x676C6F62616F6670;
          *(_DWORD *)(v163 + 8) = 0;
          v76 = v163 + 12;
          if (v74 != v135)
          {
            do
            {
              v165 = *(_QWORD *)(v74 - 3);
              v74 -= 3;
              v166 = v74[2];
              *(_QWORD *)(v163 - 12) = v165;
              v163 -= 12;
              *(_DWORD *)(v163 + 8) = v166;
            }
            while (v74 != v135);
            v135 = (_DWORD *)*a10;
          }
          *a10 = v163;
          a10[1] = v76;
          a10[2] = v164;
          if (v135)
            operator delete(v135);
        }
        else
        {
          *(_QWORD *)v74 = 0x676C6F62616F6670;
          v74[2] = 0;
          v76 = (unint64_t)(v74 + 3);
        }
        a10[1] = v76;
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v186);
      break;
    case 1685087596:
      if ((_DWORD)a7 != 4)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = "ADS_Device.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 3101;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: wrong size for the data for kAudioDevicePropertyEnableListening", __p, 0x12u);
        }
        v180 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v180 = &off_1E69A1B30;
        v180[2] = 561211770;
      }
      if (*(_DWORD *)(a1 + 624) != *(_DWORD *)a8)
      {
        *(_DWORD *)(a1 + 624) = *(_DWORD *)a8;
        *a9 = 1;
        v17 = (_DWORD *)a10[1];
        v57 = a10[2];
        if ((unint64_t)v17 < v57)
        {
          v19 = 0x676C6F626470656CLL;
          goto LABEL_216;
        }
        v94 = 0x1555555555555555;
        v61 = (_DWORD *)*a10;
        v95 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v17 - *a10) >> 2);
        v96 = v95 + 1;
        if (v95 + 1 > 0x1555555555555555)
          goto LABEL_276;
        v97 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - (_QWORD)v61) >> 2);
        if (2 * v97 > v96)
          v96 = 2 * v97;
        if (v97 < 0xAAAAAAAAAAAAAAALL)
          v94 = v96;
        if (v94)
        {
          v94 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v94);
          v61 = (_DWORD *)*a10;
          v17 = (_DWORD *)a10[1];
        }
        else
        {
          v98 = 0;
        }
        v129 = v94 + 12 * v95;
        v130 = v94 + 12 * v98;
        *(_QWORD *)v129 = 0x676C6F626470656CLL;
        *(_DWORD *)(v129 + 8) = 0;
        v131 = v129 + 12;
        if (v17 == v61)
          goto LABEL_269;
        do
        {
          v149 = *(_QWORD *)(v17 - 3);
          v17 -= 3;
          v150 = v17[2];
          *(_QWORD *)(v129 - 12) = v149;
          v129 -= 12;
          *(_DWORD *)(v129 + 8) = v150;
        }
        while (v17 != v61);
        goto LABEL_268;
      }
      break;
    case 1685484385:
      if ((_DWORD)a7 != 64)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = "ADS_Device.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 3144;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: wrong size for the data for kAudioFakeDevicePropertyTriggerAction", __p, 0x12u);
        }
        v174 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v174 = &off_1E69A1B30;
        v174[2] = 561211770;
      }
      v29 = *(_OWORD *)(a8 + 16);
      *(_OWORD *)__p = *(_OWORD *)a8;
      *(_OWORD *)&__p[16] = v29;
      v30 = *(_OWORD *)(a8 + 48);
      v189 = *(_OWORD *)(a8 + 32);
      v190 = v30;
      if (!*(_QWORD *)(a1 + 440) && (*(_DWORD *)__p | 2) != 3)
      {
        ADS::Device::performDeviceAction(a1, (uint64_t)__p);
        *a9 = 1;
        v186 = 0x676C6F6264767361;
        LODWORD(cf) = 0;
        std::vector<AudioObjectPropertyAddress>::push_back[abi:ne180100](a10, &v186);
        return;
      }
      v31 = operator new();
      v32 = *(_OWORD *)__p;
      *(_OWORD *)(v31 + 72) = *(_OWORD *)&__p[16];
      *(_OWORD *)(v31 + 56) = v32;
      v33 = v190;
      *(_OWORD *)(v31 + 88) = v189;
      *(_OWORD *)(v31 + 104) = v33;
      *(_DWORD *)(v31 + 8) = (_DWORD)this;
      *(_QWORD *)(v31 + 12) = 0x676C6F6264767361;
      *(_DWORD *)(v31 + 20) = 0;
      *(_QWORD *)(v31 + 48) = 0;
      *(_QWORD *)v31 = &off_1E6977220;
      v34 = *(uint64_t **)(v31 + 72);
      if (v34)
      {
        v35 = operator new[]();
        v36 = *v34;
        *(_DWORD *)(v35 + 8) = *((_DWORD *)v34 + 2);
        *(_QWORD *)v35 = v36;
      }
      else
      {
        v35 = 0;
      }
      *(_QWORD *)(v31 + 72) = v35;
      v77 = *(const void **)(v31 + 88);
      if (v77)
      {
        v78 = *(unsigned int *)(v31 + 80);
        v79 = (void *)operator new[]();
        memcpy(v79, v77, v78);
      }
      else
      {
        v79 = 0;
      }
      *(_QWORD *)(v31 + 88) = v79;
      v80 = *(const void **)(v31 + 104);
      if (v80)
      {
        v81 = *(unsigned int *)(v31 + 96);
        v82 = (CFTypeRef *)operator new[]();
        memcpy(v82, v80, v81);
      }
      else
      {
        v82 = 0;
      }
      *(_QWORD *)(v31 + 104) = v82;
      v84 = *(_DWORD *)(v31 + 96) == 8 && *(_BYTE *)(v31 + 112) != 0;
      v85 = *(_DWORD **)(v31 + 72);
      if (v85)
        v86 = v82 == 0;
      else
        v86 = 1;
      v87 = v86;
      if (v86 || v84)
      {
        if ((v87 & 1) != 0)
          goto LABEL_142;
      }
      else if (*v85 != 1768515184)
      {
LABEL_142:
        v44 = ADS::Simulator::sHost;
        if (!ADS::Simulator::sHost)
          return;
LABEL_143:
        v88 = *(void (**)(uint64_t, ADS::ObjectManager *, _QWORD, uint64_t))(v44 + 32);
        pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
        v88(ADS::Simulator::sHost, this, 0, v31);
        return;
      }
      CFRetain(*v82);
      goto LABEL_142;
    default:
      goto LABEL_93;
  }
}

void sub_1B5975ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ADS::Device::PerformConfigChange(ADS::Device *this, unint64_t a2, char *a3)
{
  ADS::Device *v5;
  int v6;
  int v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  int v11;
  const void *v12;
  const void *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  char v18;
  uint64_t v19;
  char v20;
  void *v21;
  unsigned int *v22;
  unsigned int *i;
  ADS::ObjectManager *v24;
  ADS::ObjectManager *v25;
  ADS::BaseObject *v26;
  uint64_t v27;
  void *v28;
  double v29;
  char v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  ADS::BaseObject *v38;
  int v39;
  _QWORD *v40;
  _QWORD *v41;
  AudioStreamBasicDescription *v42;
  AudioStreamBasicDescription *v43;
  unint64_t v44;
  _OWORD *v45;
  __int128 *v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  unint64_t v56;
  AudioStreamBasicDescription *v57;
  __int128 v58;
  __int128 v59;
  _QWORD *v60;
  _QWORD *v61;
  BOOL v62;
  uint32_t v63;
  const AudioStreamBasicDescription *v64;
  AudioStreamBasicDescription *v66;
  __int128 v67;
  __int128 v68;
  dispatch_queue_t *v69;
  unsigned __int8 v70;
  uint64_t j;
  void *v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  int v76;
  int v77;
  int v78;
  mach_timebase_info v79;
  int v80;
  char v81;
  uint64_t v82;
  ADS::BaseObject *v83;
  ADS::ObjectManager *v84;
  int v85;
  _DWORD *v86;
  _DWORD *v87;
  _DWORD *exception;
  _DWORD *v89;
  char *v90;
  int v91;
  char v92;
  unsigned int *v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  unsigned int *v99;
  unsigned int *v100;
  uint64_t v101;
  mach_timebase_info info[6];
  __int128 v103;
  unsigned int *v104;
  unsigned int *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD v108[2];
  _BYTE block[24];
  void *v110;
  uint64_t v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 55))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      info[0].numer = 136315394;
      *(_QWORD *)&info[0].denom = "ADS_Device.cpp";
      LOWORD(info[1].denom) = 1024;
      *(uint32_t *)((char *)&info[1].denom + 2) = 1751;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::PerformConfigChange:: Config change is being called while IO is still running!", (uint8_t *)info, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852990585;
  }
  v5 = this;
  atomic_store(1u, (unsigned __int8 *)this + 436);
  v6 = *((_DWORD *)a3 + 3);
  if (v6 <= 1752197474)
  {
    if (v6 > 1685484385)
    {
      switch(v6)
      {
        case 1685484386:
          v14 = (char *)this + 120;
          v80 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 15) + 16))((char *)this + 120);
          atomic_store(*((_DWORD *)a3 + 14), (unsigned int *)v5 + 186);
          v81 = atomic_load((unsigned int *)v5 + 186);
          *((_BYTE *)v5 + 545) = (v81 & 0x40) != 0;
          (*(void (**)(char *))(*(_QWORD *)a3 + 8))(a3);
          if (!v80)
            goto LABEL_130;
          break;
        case 1751738723:
          v14 = (char *)this + 120;
          v85 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 15) + 16))((char *)this + 120);
          *((_QWORD *)v5 + 71) = *((_QWORD *)a3 + 7);
          (*(void (**)(char *))(*(_QWORD *)a3 + 8))(a3);
          if (!v85)
            goto LABEL_130;
          break;
        case 1751740259:
          v14 = (char *)this + 120;
          v15 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 15) + 16))((char *)this + 120);
          *((_QWORD *)v5 + 70) = *((_QWORD *)a3 + 7);
          (*(void (**)(char *))(*(_QWORD *)a3 + 8))(a3);
          if (!v15)
            goto LABEL_130;
          break;
        default:
          goto LABEL_129;
      }
      goto LABEL_128;
    }
    if (v6 != 1634690672)
    {
      if (v6 != 1650685548)
      {
        if (v6 == 1685484385)
        {
          v8 = *(_OWORD *)(a3 + 72);
          *(_OWORD *)&info[0].numer = *(_OWORD *)(a3 + 56);
          *(_OWORD *)&info[2].numer = v8;
          v9 = *(_OWORD *)(a3 + 104);
          *(_OWORD *)&info[4].numer = *(_OWORD *)(a3 + 88);
          v103 = v9;
          ADS::Device::performDeviceAction((uint64_t)this, (uint64_t)info);
          (*(void (**)(char *))(*(_QWORD *)a3 + 8))(a3);
          goto LABEL_130;
        }
        goto LABEL_129;
      }
      v82 = ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*((unsigned int *)a3 + 2));
      v84 = (ADS::ObjectManager *)v82;
      if (v82)
        (*(void (**)(uint64_t, unint64_t, char *))(*(_QWORD *)v82 + 72))(v82, a2, a3);
      ADS::ObjectManager::ReleaseObject(v84, v83);
      goto LABEL_130;
    }
    v10 = (char *)this + 120;
    v78 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 15) + 16))((char *)this + 120);
    OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)info, *((CFTypeRef *)a3 + 8));
    v79 = (mach_timebase_info)*((_QWORD *)v5 + 67);
    *((mach_timebase_info *)v5 + 67) = info[1];
    info[0] = (mach_timebase_info)&off_1E69A0F60;
    info[1] = v79;
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)info);
    (*(void (**)(char *))(*(_QWORD *)a3 + 8))(a3);
    if (!v78)
      goto LABEL_130;
LABEL_20:
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))((uint64_t)v5 + 120);
    goto LABEL_130;
  }
  if (v6 <= 1853059699)
  {
    if (v6 == 1752197475)
    {
      v14 = (char *)this + 120;
      v76 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 15) + 16))((char *)this + 120);
      *((_QWORD *)v5 + 72) = *((_QWORD *)a3 + 7);
      (*(void (**)(char *))(*(_QWORD *)a3 + 8))(a3);
      if (!v76)
        goto LABEL_130;
      goto LABEL_128;
    }
    if (v6 == 1752525155)
    {
      v14 = (char *)this + 120;
      v77 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 15) + 16))((char *)this + 120);
      *((_QWORD *)v5 + 73) = *((_QWORD *)a3 + 7);
      (*(void (**)(char *))(*(_QWORD *)a3 + 8))(a3);
      if (!v77)
        goto LABEL_130;
      goto LABEL_128;
    }
    if (v6 != 1768515184)
      goto LABEL_129;
    v10 = (char *)this + 120;
    v11 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 15) + 16))((char *)this + 120);
    v12 = (const void *)*((_QWORD *)a3 + 7);
    if (v12)
      CFRetain(*((CFTypeRef *)a3 + 7));
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)info, v12);
    v13 = (const void *)*((_QWORD *)v5 + 74);
    *((mach_timebase_info *)v5 + 74) = info[0];
    info[0] = (mach_timebase_info)v13;
    if (v13)
      CFRelease(v13);
    CAExtAudioFile::Close((ADS::Device *)((char *)v5 + 600));
    (*(void (**)(char *))(*(_QWORD *)a3 + 8))(a3);
    if (!v11)
      goto LABEL_130;
    goto LABEL_20;
  }
  if (v6 > 1935892847)
  {
    if (v6 != 1935892848)
    {
      v7 = 1936092532;
LABEL_28:
      if (v6 == v7)
      {
        v16 = (char *)this + 120;
        v17 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 15) + 16))((char *)this + 120);
        memset(info, 0, 24);
        v96 = v17;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(info, *((const void **)v5 + 45), *((_QWORD *)v5 + 46), (uint64_t)(*((_QWORD *)v5 + 46) - *((_QWORD *)v5 + 45)) >> 2);
        memset(&info[3], 0, 24);
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&info[3], *((const void **)v5 + 48), *((_QWORD *)v5 + 49), (uint64_t)(*((_QWORD *)v5 + 49) - *((_QWORD *)v5 + 48)) >> 2);
        v18 = 0;
        v19 = 0;
        do
        {
          v20 = v18;
          v104 = 0;
          v105 = 0;
          v106 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v104, *(const void **)&info[3 * v19], *(_QWORD *)&info[3 * v19 + 1], (uint64_t)(*(_QWORD *)&info[3 * v19 + 1] - *(_QWORD *)&info[3 * v19]) >> 2);
          v21 = v104;
          v22 = v105;
          for (i = v104; i != v22; ++i)
          {
            v24 = (ADS::ObjectManager *)*i;
            if ((_DWORD)v24 == *((_DWORD *)a3 + 2))
            {
              v25 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID(v24);
              (*(void (**)(ADS::ObjectManager *, unint64_t, char *))(*(_QWORD *)v25 + 72))(v25, a2, a3);
              *((_QWORD *)this + 79) = *((_QWORD *)v25 + 7);
              ADS::ObjectManager::ReleaseObject(v25, v26);
            }
          }
          if (v21)
            operator delete(v21);
          v18 = 1;
          v19 = 1;
        }
        while ((v20 & 1) == 0);
        v27 = 0;
        v5 = this;
        do
        {
          v28 = (void *)info[v27 + 3];
          if (v28)
          {
            info[v27 + 4] = (mach_timebase_info)v28;
            operator delete(v28);
          }
          v27 -= 3;
        }
        while (v27 != -6);
        if (v96)
          (*(void (**)(char *))(*(_QWORD *)v16 + 24))(v16);
        goto LABEL_130;
      }
LABEL_129:
      ADS::BaseObject::PerformConfigChange(this, a2, a3);
      goto LABEL_130;
    }
    v14 = (char *)this + 120;
    v75 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 15) + 16))((char *)this + 120);
    *((_BYTE *)v5 + 544) = *((double *)a3 + 7) != 0.0;
    (*(void (**)(char *))(*(_QWORD *)a3 + 8))(a3);
    if (!v75)
      goto LABEL_130;
LABEL_128:
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))((uint64_t)v5 + 120);
    goto LABEL_130;
  }
  if (v6 != 1853059700)
  {
    v7 = 1885762592;
    goto LABEL_28;
  }
  v29 = *((double *)a3 + 7);
  (*(void (**)(char *))(*(_QWORD *)a3 + 8))(a3);
  if (!ADS::Device::isSupportedSampleRate(v5, v29))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      info[0].numer = 136315394;
      *(_QWORD *)&info[0].denom = "ADS_Device.cpp";
      LOWORD(info[1].denom) = 1024;
      *(uint32_t *)((char *)&info[1].denom + 2) = 1770;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::PerformConfigChange: unsupported sample rate", (uint8_t *)info, 0x12u);
    }
    v89 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v89 = &off_1E69A1B30;
    v89[2] = 560226676;
  }
  v90 = (char *)v5 + 120;
  v91 = (*(uint64_t (**)(void))(*((_QWORD *)v5 + 15) + 16))();
  *((double *)v5 + 79) = v29;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v104, *((const void **)v5 + 45), *((_QWORD *)v5 + 46), (uint64_t)(*((_QWORD *)v5 + 46) - *((_QWORD *)v5 + 45)) >> 2);
  v107 = 0;
  v108[0] = 0;
  v108[1] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v107, *((const void **)v5 + 48), *((_QWORD *)v5 + 49), (uint64_t)(*((_QWORD *)v5 + 49) - *((_QWORD *)v5 + 48)) >> 2);
  v30 = 0;
  v31 = 0;
  do
  {
    v92 = v30;
    v99 = 0;
    v100 = 0;
    v101 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v99, (&v104)[3 * v31], (uint64_t)*(&v104 + 3 * v31 + 1), *(&v104 + 3 * v31 + 1) - (&v104)[3 * v31]);
    v33 = v99;
    v32 = v100;
    v93 = v100;
    if (v99 != v100)
    {
      do
      {
        v34 = ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*v33);
        v35 = v34;
        if (*(_DWORD *)(v34 + 20) != *((_DWORD *)v5 + 2))
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)block = 136315394;
            *(_QWORD *)&block[4] = "ADS_Stream.cpp";
            *(_WORD *)&block[12] = 1024;
            *(_DWORD *)&block[14] = 360;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Stream::UpdateSampleRate: This function is only to be called by a stream's owning device.", block, 0x12u);
          }
          v86 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v86 = &off_1E69A1B30;
          v86[2] = 1970171760;
        }
        v36 = v34 + 136;
        v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v34 + 136) + 16))(v34 + 136);
        v39 = v37;
        if (*(double *)(v35 + 56) != v29)
        {
          v94 = v35 + 56;
          v95 = v37;
          v40 = *(_QWORD **)(v35 + 104);
          v97 = v35;
          v41 = (_QWORD *)(v35 + 112);
          if (v40 == (_QWORD *)(v35 + 112))
            goto LABEL_146;
          v42 = 0;
          v43 = 0;
          v44 = 0;
          do
          {
            v45 = v40 + 9;
            if (*((double *)v40 + 9) <= v29 && *((double *)v40 + 10) >= v29)
            {
              v47 = (__int128 *)(v40 + 4);
              if ((unint64_t)v43 >= v44)
              {
                v50 = 0x6DB6DB6DB6DB6DB7 * (((char *)v43 - (char *)v42) >> 3) + 1;
                if (v50 > 0x492492492492492)
                  std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v44 - (_QWORD)v42) >> 3) > v50)
                  v50 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v44 - (_QWORD)v42) >> 3);
                if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v44 - (_QWORD)v42) >> 3)) >= 0x249249249249249)
                  v51 = 0x492492492492492;
                else
                  v51 = v50;
                if (v51)
                  v51 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v51);
                else
                  v52 = 0;
                v53 = v51 + 8 * (((char *)v43 - (char *)v42) >> 3);
                v54 = *v47;
                v55 = *((_OWORD *)v40 + 3);
                *(_QWORD *)(v53 + 32) = v40[8];
                *(_OWORD *)v53 = v54;
                *(_OWORD *)(v53 + 16) = v55;
                *(_OWORD *)(v53 + 40) = *v45;
                if (v43 == v42)
                {
                  v57 = (AudioStreamBasicDescription *)(v51 + 8 * (((char *)v43 - (char *)v42) >> 3));
                }
                else
                {
                  v56 = v51 + 8 * (((char *)v43 - (char *)v42) >> 3);
                  do
                  {
                    v57 = (AudioStreamBasicDescription *)(v56 - 56);
                    v58 = *(_OWORD *)&v43[-2].mBytesPerFrame;
                    v59 = *(_OWORD *)&v43[-1].mSampleRate;
                    *(_QWORD *)(v56 - 24) = *(_QWORD *)&v43[-1].mBytesPerPacket;
                    *(_OWORD *)(v56 - 40) = v59;
                    *(_OWORD *)(v56 - 56) = v58;
                    *(_OWORD *)(v56 - 16) = *(_OWORD *)&v43[-1].mBytesPerFrame;
                    v43 = (AudioStreamBasicDescription *)((char *)v43 - 56);
                    v56 -= 56;
                  }
                  while (v43 != v42);
                }
                v44 = v51 + 56 * v52;
                v43 = (AudioStreamBasicDescription *)(v53 + 56);
                if (v42)
                  operator delete(v42);
                v42 = v57;
              }
              else
              {
                v48 = *v47;
                v49 = *((_OWORD *)v40 + 3);
                *(_QWORD *)&v43->mBitsPerChannel = v40[8];
                *(_OWORD *)&v43->mSampleRate = v48;
                *(_OWORD *)&v43->mBytesPerPacket = v49;
                *(_OWORD *)&v43[1].mSampleRate = *v45;
                v43 = (AudioStreamBasicDescription *)((char *)v43 + 56);
              }
            }
            v60 = (_QWORD *)v40[1];
            if (v60)
            {
              do
              {
                v61 = v60;
                v60 = (_QWORD *)*v60;
              }
              while (v60);
            }
            else
            {
              do
              {
                v61 = (_QWORD *)v40[2];
                v62 = *v61 == (_QWORD)v40;
                v40 = v61;
              }
              while (!v62);
            }
            v40 = v61;
          }
          while (v61 != v41);
          if (v42 == v43)
          {
LABEL_146:
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)block = 136315394;
              *(_QWORD *)&block[4] = "ADS_Stream.cpp";
              *(_WORD *)&block[12] = 1024;
              *(_DWORD *)&block[14] = 380;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Stream::UpdateSampleRate: Sample rate not supported by this stream", block, 0x12u);
            }
            v87 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v87 = &off_1E69A1B30;
            v87[2] = 560226676;
          }
          v63 = *(_DWORD *)(v97 + 64);
          info[0] = *(mach_timebase_info *)&v29;
          *(_OWORD *)&info[1].denom = *(_OWORD *)(v97 + 68);
          *(_OWORD *)&info[3].numer = *(_OWORD *)(v97 + 80);
          info[1].numer = v63;
          info[5].numer = 2;
          v64 = v42;
          while (!CA::StreamDescription::IsEquivalent((CA::Implementation *)info, v64, 2u)
               || v64[1].mSampleRate > v29
               || *(double *)&v64[1].mFormatID < v29)
          {
            v64 = (const AudioStreamBasicDescription *)((char *)v64 + 56);
            if (v64 == v43)
            {
              v66 = v42;
              v5 = this;
              goto LABEL_89;
            }
          }
          v66 = v42;
          v5 = this;
          if (v64 == v43)
          {
LABEL_89:
            while (v66->mFormatID != v63)
            {
              v66 = (AudioStreamBasicDescription *)((char *)v66 + 56);
              if (v66 == v43)
                goto LABEL_93;
            }
            v64 = v66;
            if (v66 != v43)
              goto LABEL_95;
LABEL_93:
            v64 = v42;
          }
LABEL_95:
          v68 = *(_OWORD *)&v64->mSampleRate;
          v67 = *(_OWORD *)&v64->mBytesPerPacket;
          *(_QWORD *)(v94 + 32) = *(_QWORD *)&v64->mBitsPerChannel;
          *(_OWORD *)v94 = v68;
          *(_OWORD *)(v94 + 16) = v67;
          *(double *)v94 = v29;
          pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
          *(_QWORD *)block = MEMORY[0x1E0C809B0];
          *(_QWORD *)&block[8] = 0x40000000;
          *(_QWORD *)&block[16] = ___ZN3ADS6Stream16UpdateSampleRateEjd_block_invoke;
          v110 = &__block_descriptor_tmp_3_3771;
          v35 = v97;
          v111 = v97;
          v69 = (dispatch_queue_t *)ADS::Simulator::sServerDefaultPriorityQueue;
          v39 = v95;
          v32 = v93;
          if (ADS::Simulator::sServerDefaultPriorityQueue)
          {
            v70 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 32));
            if ((v70 & 1) != 0)
              atomic_store(1u, (unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 33));
            dispatch_async(*v69, block);
          }
          if (v42)
            operator delete(v42);
        }
        if (v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
        ADS::ObjectManager::ReleaseObject((ADS::ObjectManager *)v35, v38);
        ++v33;
      }
      while (v33 != v32);
      v33 = v99;
    }
    if (v33)
      operator delete(v33);
    v30 = 1;
    v31 = 1;
  }
  while ((v92 & 1) == 0);
  for (j = 0; j != -6; j -= 3)
  {
    v72 = (void *)v108[j - 1];
    if (v72)
    {
      v108[j] = v72;
      operator delete(v72);
    }
  }
  mach_timebase_info(info);
  LODWORD(v74) = info[0].numer;
  LODWORD(v73) = info[0].denom;
  *((double *)v5 + 59) = (double)v73 / (double)v74 * 1000000000.0 / *((double *)v5 + 79);
  if (v91)
    (*(void (**)(char *))(*(_QWORD *)v90 + 24))(v90);
LABEL_130:
  atomic_store(0, (unsigned __int8 *)v5 + 436);
}

void sub_1B5976D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t ADS::Device::AbortConfigChange(ADS::Device *this, unint64_t a2, void *a3)
{
  uint64_t result;

  if (a3)
    return (*(uint64_t (**)(void *))(*(_QWORD *)a3 + 8))(a3);
  return result;
}

BOOL ADS::Device::isSupportedSampleRate(ADS::Device *this, double a2)
{
  char *v2;
  char *v3;
  char *v5;
  char *v6;
  BOOL v7;

  v2 = (char *)*((_QWORD *)this + 42);
  v3 = (char *)this + 344;
  if (v2 != (char *)this + 344)
  {
    while (*((double *)v2 + 4) > a2 || *((double *)v2 + 5) < a2)
    {
      v5 = (char *)*((_QWORD *)v2 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (char *)*((_QWORD *)v2 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
      if (v6 == v3)
      {
        v2 = (char *)this + 344;
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

void ADS::Device::performDeviceAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  double v10;
  uint64_t v11;
  dispatch_queue_t *v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint8_t *);
  int v19;
  _DWORD *exception;
  std::string *v21;
  _DWORD *v22;
  _QWORD block[5];
  void *__p;
  void *v25;
  uint64_t v26;
  int data;
  std::string v28;
  uint8_t buf[40];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 120;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 120) + 16))(a1 + 120);
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 632) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 680) = v7;
  *(_OWORD *)(v4 + 664) = v6;
  *(_OWORD *)(v4 + 648) = v8;
  v9 = *(_DWORD *)(v4 + 632);
  if (v9 != 3)
  {
    if (v9 != 2)
    {
      if (v9 == 1)
      {
        v10 = *(double *)(a2 + 8);
        if (!ADS::Device::isSupportedSampleRate((ADS::Device *)a1, v10))
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ADS_Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3457;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::PerformConfigChange via DeviceAction: unsupported sample rate", buf, 0x12u);
          }
          exception = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)exception = &off_1E69A1B30;
          exception[2] = 560226676;
        }
        v11 = operator new();
        *(_DWORD *)(v11 + 8) = *(_DWORD *)(a1 + 8);
        *(_QWORD *)(v11 + 12) = 0x676C6F626E737274;
        *(_DWORD *)(v11 + 20) = 0;
        *(_QWORD *)(v11 + 48) = 0;
        *(_QWORD *)v11 = &off_1E6977258;
        *(double *)(v11 + 56) = v10;
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 72))(a1, 0, v11);
      }
      goto LABEL_21;
    }
    if (*(_QWORD *)(a2 + 16))
    {
      if (((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, *(unsigned int *)(a1 + 8), 0) & 1) != 0)
      {
        LODWORD(v28.__r_.__value_.__l.__data_) = 0;
        memset(buf, 0, 24);
        (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, std::string *, uint8_t *, char))(*(_QWORD *)a1 + 64))(a1, *(unsigned int *)(a1 + 8), 0, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24), *(_QWORD *)(a2 + 32), *(unsigned int *)(a2 + 40), *(_QWORD *)(a2 + 48), &v28, buf, 1);
        if (LODWORD(v28.__r_.__value_.__l.__data_))
        {
          pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 1174405120;
          block[2] = ___ZN3ADS6Device19performDeviceActionERK20FakeDeviceActionData_block_invoke;
          block[3] = &__block_descriptor_tmp_184;
          data = (int)v28.__r_.__value_.__l.__data_;
          block[4] = a1;
          __p = 0;
          v25 = 0;
          v26 = 0;
          std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(&__p, *(const void **)buf, *(uint64_t *)&buf[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 2));
          v12 = (dispatch_queue_t *)ADS::Simulator::sServerHighPriorityQueue;
          if (ADS::Simulator::sServerHighPriorityQueue)
          {
            v13 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerHighPriorityQueue + 32));
            if ((v13 & 1) != 0)
              atomic_store(1u, (unsigned __int8 *)(ADS::Simulator::sServerHighPriorityQueue + 33));
            dispatch_async(*v12, block);
          }
          if (__p)
          {
            v25 = __p;
            operator delete(__p);
          }
        }
        if (*(_QWORD *)buf)
        {
          *(_QWORD *)&buf[8] = *(_QWORD *)buf;
          operator delete(*(void **)buf);
        }
        goto LABEL_21;
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        caulk::string_from_4cc(&v28, **(_DWORD **)(a2 + 16));
        v21 = (v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v28
            : (std::string *)v28.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "ADS_Device.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3467;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v21;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::SetPropertyData via privileged DeviceAction: device does not have property %s", buf, 0x1Cu);
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v28.__r_.__value_.__l.__data_);
      }
      v19 = 2003332927;
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "ADS_Device.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3466;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::SetPropertyData via privileged DeviceAction: device action property address was NULL", buf, 0x12u);
      }
      v19 = 1852797029;
    }
    v22 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v22 = &off_1E69A1B30;
    v22[2] = v19;
  }
  pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
  v14 = ADS::Simulator::sInstance;
  v15 = ADS::Simulator::sInstance + 56;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(ADS::Simulator::sInstance + 56) + 16))(ADS::Simulator::sInstance + 56);
  *(_BYTE *)(v14 + 216) = 1;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  strcpy((char *)buf, "#vedbolg");
  if (ADS::Simulator::sHost)
  {
    v17 = *(unsigned int *)(a1 + 20);
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint8_t *))ADS::Simulator::sHost;
    pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
    v18(ADS::Simulator::sHost, v17, 1, buf);
  }
LABEL_21:
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_1B5977528(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

OpaqueExtAudioFile *CAExtAudioFile::Close(CAExtAudioFile *this)
{
  OpaqueExtAudioFile *result;
  uint64_t v3;

  result = (OpaqueExtAudioFile *)*((_QWORD *)this + 1);
  if (result)
  {
    *((_QWORD *)this + 1) = 0;
    v3 = ExtAudioFileDispose(result);
    return (OpaqueExtAudioFile *)(*(uint64_t (**)(CAExtAudioFile *, uint64_t, const char *))(*(_QWORD *)this + 16))(this, v3, "ExtAudioFileClose");
  }
  return result;
}

std::string *caulk::string_from_4cc(std::string *retstr, unsigned int __val)
{
  int v2;
  char v4;
  int v5;
  __int16 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = bswap32(__val);
  v5 = v2;
  if (((char)v2 - 32) > 0x5E
    || (((__int16)v2 >> 8) - 32) > 0x5E
    || ((v2 << 8 >> 24) - 32) > 0x5E
    || ((v2 >> 24) - 32) > 0x5E)
  {
    return std::to_string(retstr, __val);
  }
  v6 = 39;
  v4 = 39;
  return (std::string *)std::string::basic_string[abi:ne180100]<0>(retstr, &v4);
}

void sub_1B5977688(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t ___ZN3ADS6Device19performDeviceActionERK20FakeDeviceActionData_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);

  if (ADS::Simulator::sHost)
  {
    v1 = *(_QWORD *)(result + 40);
    v2 = *(unsigned int *)(*(_QWORD *)(result + 32) + 8);
    v3 = *(unsigned int *)(result + 64);
    v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))ADS::Simulator::sHost;
    pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
    return v4(ADS::Simulator::sHost, v2, v3, v1);
  }
  return result;
}

void sub_1B5977700(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

_QWORD *__copy_helper_block_e8_40c68_ZTSNSt3__16vectorI26AudioObjectPropertyAddressNS_9allocatorIS1_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = (_QWORD *)(a1 + 40);
  v2[2] = 0;
  return std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(v2, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2));
}

void __destroy_helper_block_e8_40c68_ZTSNSt3__16vectorI26AudioObjectPropertyAddressNS_9allocatorIS1_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

_QWORD *ADS::ChangeInfoData<double>::~ChangeInfoData(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6977D78;
  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void ADS::ChangeInfoData<double>::~ChangeInfoData(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6977D78;
  v1 = a1 + 3;
  v2 = (_QWORD *)a1[6];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1B5E50688);
}

void ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, uint64_t);
  _QWORD v6[2];

  v2 = operator new();
  v3 = *(_DWORD *)(a1 + 48);
  OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v6, *(CFTypeRef *)(a1 + 40));
  v6[0] = &off_1E69A0F60;
  *(_DWORD *)(v2 + 8) = v3;
  *(_QWORD *)(v2 + 12) = 0x676C6F62616F6670;
  *(_DWORD *)(v2 + 20) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)v2 = &off_1E6977700;
  OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)(v2 + 56), (CFTypeRef)v6[1]);
  *(_QWORD *)(v2 + 56) = &off_1E69A0F60;
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v6);
  if (ADS::Simulator::sHost)
  {
    v4 = *(unsigned int *)(a1 + 48);
    v5 = *(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(ADS::Simulator::sHost + 32);
    pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
    v5(ADS::Simulator::sHost, v4, 0, v2);
  }
}

void sub_1B5977904(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B59778F0);
}

uint64_t ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_170(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD, uint64_t);
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v7 = 136315394;
    v8 = "ADS_Device.cpp";
    v9 = 1024;
    v10 = 3045;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::Device_SetPropertyData: sending the request to the host to enable stream capture.", (uint8_t *)&v7, 0x12u);
  }
  result = operator new();
  v3 = result;
  v4 = *(unsigned int *)(a1 + 32);
  LODWORD(v5) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(result + 8) = v4;
  *(_QWORD *)(result + 12) = 0x676C6F6273636170;
  *(_DWORD *)(result + 20) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)result = &off_1E6977258;
  *(double *)(result + 56) = (double)v5;
  if (ADS::Simulator::sHost)
  {
    v6 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(ADS::Simulator::sHost + 32);
    pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
    return v6(ADS::Simulator::sHost, v4, 0, v3);
  }
  return result;
}

void sub_1B5977A5C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B5977A2CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_172(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD, uint64_t);

  result = operator new();
  v3 = result;
  v4 = *(unsigned int *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(result + 8) = v4;
  *(_QWORD *)(result + 12) = 0x676C6F626E737274;
  *(_DWORD *)(result + 20) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)result = &off_1E6977258;
  *(_QWORD *)(result + 56) = v5;
  if (ADS::Simulator::sHost)
  {
    v6 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(ADS::Simulator::sHost + 32);
    pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
    return v6(ADS::Simulator::sHost, v4, 0, v3);
  }
  return result;
}

void sub_1B5977B20(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void std::vector<AudioObjectPropertyAddress>::push_back[abi:ne180100](unint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;

  v5 = a1[1];
  v4 = a1[2];
  if (v5 >= v4)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 2);
    v9 = v8 + 1;
    if (v8 + 1 > 0x1555555555555555)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a1) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xAAAAAAAAAAAAAAALL)
      v11 = 0x1555555555555555;
    else
      v11 = v9;
    if (v11)
      v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v11);
    else
      v12 = 0;
    v13 = v11 + 12 * v8;
    v14 = v11 + 12 * v12;
    v15 = *a2;
    *(_DWORD *)(v13 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v13 = v15;
    v7 = v13 + 12;
    v17 = (_DWORD *)*a1;
    v16 = (_DWORD *)a1[1];
    if (v16 != (_DWORD *)*a1)
    {
      do
      {
        v18 = *(_QWORD *)(v16 - 3);
        v16 -= 3;
        v19 = v16[2];
        *(_QWORD *)(v13 - 12) = v18;
        v13 -= 12;
        *(_DWORD *)(v13 + 8) = v19;
      }
      while (v16 != v17);
      v16 = (_DWORD *)*a1;
    }
    *a1 = v13;
    a1[1] = v7;
    a1[2] = v14;
    if (v16)
      operator delete(v16);
  }
  else
  {
    v6 = *a2;
    *(_DWORD *)(v5 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v5 = v6;
    v7 = v5 + 12;
  }
  a1[1] = v7;
}

uint64_t ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_174(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD, uint64_t);
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v7 = 136315394;
    v8 = "ADS_Device.cpp";
    v9 = 1024;
    v10 = 3181;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::Device_SetPropertyData: sending the request to the host to enable stream capture.", (uint8_t *)&v7, 0x12u);
  }
  result = operator new();
  v3 = result;
  v4 = *(unsigned int *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(result + 8) = v4;
  *(_QWORD *)(result + 12) = 0x676C6F6268696963;
  *(_DWORD *)(result + 20) = 0;
  *(_QWORD *)result = &off_1E6977770;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = v5;
  if (ADS::Simulator::sHost)
  {
    v6 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(ADS::Simulator::sHost + 32);
    pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
    return v6(ADS::Simulator::sHost, v4, 0, v3);
  }
  return result;
}

void sub_1B5977D88(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B5977D58);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_176(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD, uint64_t);
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v7 = 136315394;
    v8 = "ADS_Device.cpp";
    v9 = 1024;
    v10 = 3208;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::Device_SetPropertyData: sending the request to the host to enable stream capture.", (uint8_t *)&v7, 0x12u);
  }
  result = operator new();
  v3 = result;
  v4 = *(unsigned int *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(result + 8) = v4;
  *(_QWORD *)(result + 12) = 0x676C6F6268706963;
  *(_DWORD *)(result + 20) = 0;
  *(_QWORD *)result = &off_1E69777A8;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = v5;
  if (ADS::Simulator::sHost)
  {
    v6 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(ADS::Simulator::sHost + 32);
    pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
    return v6(ADS::Simulator::sHost, v4, 0, v3);
  }
  return result;
}

void sub_1B5977EE0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B5977EB0);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_178(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD, uint64_t);
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v7 = 136315394;
    v8 = "ADS_Device.cpp";
    v9 = 1024;
    v10 = 3235;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::Device_SetPropertyData: sending the request to the host to enable stream capture.", (uint8_t *)&v7, 0x12u);
  }
  result = operator new();
  v3 = result;
  v4 = *(unsigned int *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(result + 8) = v4;
  *(_QWORD *)(result + 12) = 0x676C6F6268756963;
  *(_DWORD *)(result + 20) = 0;
  *(_QWORD *)result = &off_1E69777E0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = v5;
  if (ADS::Simulator::sHost)
  {
    v6 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(ADS::Simulator::sHost + 32);
    pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
    return v6(ADS::Simulator::sHost, v4, 0, v3);
  }
  return result;
}

void sub_1B5978038(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B5978008);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_180(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD, uint64_t);
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v7 = 136315394;
    v8 = "ADS_Device.cpp";
    v9 = 1024;
    v10 = 3262;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::Device_SetPropertyData: sending the request to the host to enable stream capture.", (uint8_t *)&v7, 0x12u);
  }
  result = operator new();
  v3 = result;
  v4 = *(unsigned int *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(result + 8) = v4;
  *(_QWORD *)(result + 12) = 0x676C6F6268696F63;
  *(_DWORD *)(result + 20) = 0;
  *(_QWORD *)result = &off_1E6977818;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = v5;
  if (ADS::Simulator::sHost)
  {
    v6 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(ADS::Simulator::sHost + 32);
    pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
    return v6(ADS::Simulator::sHost, v4, 0, v3);
  }
  return result;
}

void sub_1B5978190(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B5978160);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_182(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD, uint64_t);
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v7 = 136315394;
    v8 = "ADS_Device.cpp";
    v9 = 1024;
    v10 = 3296;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::Device_SetPropertyData: sending the request to the host to set the input file path.", (uint8_t *)&v7, 0x12u);
  }
  result = operator new();
  v3 = result;
  v4 = *(unsigned int *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(result + 8) = v4;
  *(_QWORD *)(result + 12) = 0x676C6F6269696670;
  *(_DWORD *)(result + 20) = 0;
  *(_QWORD *)result = &off_1E6977850;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = v5;
  if (ADS::Simulator::sHost)
  {
    v6 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(ADS::Simulator::sHost + 32);
    pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
    return v6(ADS::Simulator::sHost, v4, 0, v3);
  }
  return result;
}

void sub_1B59782E8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B59782B8);
  }
  _Unwind_Resume(a1);
}

_QWORD *ADS::ChangeInfoData<__CFString const*>::~ChangeInfoData(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6977D78;
  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void ADS::ChangeInfoData<__CFString const*>::~ChangeInfoData(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6977D78;
  v1 = a1 + 3;
  v2 = (_QWORD *)a1[6];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1B5E50688);
}

_QWORD *ADS::ChangeInfoData<void (*)(unsigned int,unsigned int,unsigned int,AudioServerPlugInIOCycleInfo const*,void *,void *)>::~ChangeInfoData(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6977D78;
  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void ADS::ChangeInfoData<void (*)(unsigned int,unsigned int,unsigned int,AudioServerPlugInIOCycleInfo const*,void *,void *)>::~ChangeInfoData(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6977D78;
  v1 = a1 + 3;
  v2 = (_QWORD *)a1[6];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1B5E50688);
}

_QWORD *ADS::ChangeInfoData<int (*)(unsigned int,IsolatedAudioUseCaseID)>::~ChangeInfoData(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6977D78;
  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void ADS::ChangeInfoData<int (*)(unsigned int,IsolatedAudioUseCaseID)>::~ChangeInfoData(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6977D78;
  v1 = a1 + 3;
  v2 = (_QWORD *)a1[6];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1B5E50688);
}

_QWORD *ADS::ChangeInfoData<int (*)(unsigned int,unsigned int,IsolatedAudioUseCaseID)>::~ChangeInfoData(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6977D78;
  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void ADS::ChangeInfoData<int (*)(unsigned int,unsigned int,IsolatedAudioUseCaseID)>::~ChangeInfoData(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6977D78;
  v1 = a1 + 3;
  v2 = (_QWORD *)a1[6];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1B5E50688);
}

_QWORD *ADS::ChangeInfoData<int (*)(unsigned int,IsolatedAudioUseCaseID,unsigned int,unsigned int,AudioServerPlugInIOCycleInfo const*)>::~ChangeInfoData(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6977D78;
  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void ADS::ChangeInfoData<int (*)(unsigned int,IsolatedAudioUseCaseID,unsigned int,unsigned int,AudioServerPlugInIOCycleInfo const*)>::~ChangeInfoData(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6977D78;
  v1 = a1 + 3;
  v2 = (_QWORD *)a1[6];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1B5E50688);
}

void ADS::ChangeInfoData<FakeDeviceActionData>::~ChangeInfoData(uint64_t a1)
{
  ADS::ChangeInfoData<FakeDeviceActionData>::~ChangeInfoData(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t ADS::ChangeInfoData<FakeDeviceActionData>::~ChangeInfoData(uint64_t a1)
{
  BOOL v3;
  _DWORD *v4;
  CFTypeRef *v5;
  BOOL v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)a1 = &off_1E6977220;
  v3 = *(_DWORD *)(a1 + 96) == 8 && *(_BYTE *)(a1 + 112) != 0;
  v4 = *(_DWORD **)(a1 + 72);
  v5 = *(CFTypeRef **)(a1 + 104);
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  v7 = v6;
  if (v6 || v3)
  {
    if ((v7 & 1) != 0)
      goto LABEL_19;
    goto LABEL_18;
  }
  if (*v4 == 1768515184)
  {
LABEL_18:
    CFRelease(*v5);
    v4 = *(_DWORD **)(a1 + 72);
LABEL_19:
    if (!v4)
      goto LABEL_21;
  }
  MEMORY[0x1B5E50688]();
LABEL_21:
  v8 = *(_QWORD *)(a1 + 88);
  if (v8)
    MEMORY[0x1B5E50664](v8, 0x1000C8077774924);
  v9 = *(_QWORD *)(a1 + 104);
  if (v9)
    MEMORY[0x1B5E50664](v9, 0x1000C8077774924);
  *(_QWORD *)a1 = &off_1E6977D78;
  v10 = *(_QWORD **)(a1 + 48);
  if (v10 == (_QWORD *)(a1 + 24))
  {
    v11 = 4;
    v10 = (_QWORD *)(a1 + 24);
    goto LABEL_29;
  }
  if (v10)
  {
    v11 = 5;
LABEL_29:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return a1;
}

_QWORD *ADS::ChangeInfoData<FakeDeviceBehavior>::~ChangeInfoData(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6977D78;
  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void ADS::ChangeInfoData<FakeDeviceBehavior>::~ChangeInfoData(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6977D78;
  v1 = a1 + 3;
  v2 = (_QWORD *)a1[6];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1B5E50688);
}

OS::CF::UntypedObject *__copy_helper_block_e8_32c19_ZTSN2OS2CF6StringE(uint64_t a1, uint64_t a2)
{
  OS::CF::UntypedObject *result;

  result = OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)(a1 + 32), *(CFTypeRef *)(a2 + 40));
  *(_QWORD *)(a1 + 32) = &off_1E69A0F60;
  return result;
}

void __destroy_helper_block_e8_32c19_ZTSN2OS2CF6StringE(uint64_t a1)
{
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 32));
}

void ADS::ChangeInfoData<OS::CF::String>::~ChangeInfoData(_QWORD *a1)
{
  ADS::ChangeInfoData<OS::CF::String>::~ChangeInfoData(a1);
  JUMPOUT(0x1B5E50688);
}

_QWORD *ADS::ChangeInfoData<OS::CF::String>::~ChangeInfoData(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6977700;
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 7));
  *a1 = &off_1E6977D78;
  v2 = (_QWORD *)a1[6];
  if (v2 == a1 + 3)
  {
    v3 = 4;
    v2 = a1 + 3;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void ADS::Device::Device_GetPropertyData(ADS::Device *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6, unsigned int *a7, unsigned int *a8, void *a9)
{
  unsigned int *v9;
  unsigned int v11;
  signed int mSelector;
  _DWORD *v14;
  const __CFAllocator *v15;
  const __CFString *v16;
  _QWORD *v17;
  int v18;
  unsigned int v19;
  AudioObjectPropertyScope v20;
  uint64_t i;
  void *v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  _QWORD *v26;
  int v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  BOOL v32;
  void *Copy;
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unsigned int v38;
  AudioObjectPropertyScope v39;
  uint64_t m;
  void *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  unint64_t v50;
  BOOL v51;
  const CFDictionaryKeyCallBacks *v52;
  const CFDictionaryValueCallBacks *v53;
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v55;
  unsigned int v56;
  AudioObjectPropertyScope mScope;
  uint64_t *v58;
  double v59;
  uint64_t k;
  void *v61;
  uint64_t j;
  void *v63;
  _DWORD *v64;
  _DWORD *v65;
  _DWORD *v66;
  _DWORD *v67;
  _DWORD *v68;
  _DWORD *v69;
  _DWORD *v70;
  _DWORD *v71;
  _DWORD *v72;
  _DWORD *v73;
  _DWORD *v74;
  _DWORD *v75;
  _DWORD *v76;
  _DWORD *v77;
  _DWORD *v78;
  _DWORD *v79;
  _DWORD *v80;
  _DWORD *v81;
  _DWORD *exception;
  _DWORD *v83;
  _DWORD *v84;
  _DWORD *v85;
  _DWORD *v86;
  _DWORD *v87;
  _DWORD *v88;
  _DWORD *v89;
  _DWORD *v90;
  _DWORD *v91;
  _DWORD *v92;
  _DWORD *v93;
  _DWORD *v94;
  _DWORD *v95;
  _DWORD *v96;
  _DWORD *v97;
  _DWORD *v98;
  _DWORD *v99;
  _DWORD *v100;
  _DWORD *v101;
  _DWORD *v102;
  _DWORD *v103;
  _DWORD *v104;
  _DWORD *v105;
  uint64_t v106[3];
  uint64_t v107[3];
  uint64_t v108[3];
  uint64_t v109[3];
  uint64_t v110[3];
  uint64_t v111[3];
  uint64_t v112[3];
  uint64_t v113[3];
  uint64_t v114[3];
  void **v115;
  uint8_t buf[24];
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD v121[3];

  v9 = a8;
  v11 = a6;
  v121[2] = *MEMORY[0x1E0C80C00];
  mSelector = a4->mSelector;
  if ((int)a4->mSelector <= 1752197474)
  {
    if (mSelector > 1685278577)
    {
      if (mSelector <= 1719105133)
      {
        if (mSelector > 1685484384)
        {
          switch(mSelector)
          {
            case 1685484385:
              if (a6 <= 3)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = "ADS_Device.cpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 2898;
                  _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioFakeDevicePropertyTriggerAction for the device", buf, 0x12u);
                }
                exception = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)exception = &off_1E69A1B30;
                exception[2] = 561211770;
              }
              v35 = *((_OWORD *)this + 47);
              v36 = *((_OWORD *)this + 48);
              v37 = *((_OWORD *)this + 50);
              *((_OWORD *)a8 + 2) = *((_OWORD *)this + 49);
              *((_OWORD *)a8 + 3) = v37;
              *(_OWORD *)a8 = v35;
              *((_OWORD *)a8 + 1) = v36;
              v30 = 64;
              goto LABEL_209;
            case 1685484386:
              if (a6 <= 3)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = "ADS_Device.cpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 2891;
                  _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioFakeDevicePropertySelectBehavior for the device", buf, 0x12u);
                }
                v94 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v94 = &off_1E69A1B30;
                v94[2] = 561211770;
              }
              v24 = atomic_load((unsigned int *)this + 186);
              goto LABEL_204;
            case 1718841206:
              if (a6 <= 3)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = "ADS_Device.cpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 2941;
                  _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioFakeDevicePropertySafetyOffsetViolationCheckFailed for the device", buf, 0x12u);
                }
                v69 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v69 = &off_1E69A1B30;
                v69[2] = 561211770;
              }
              v23 = 688;
              if (a4->mScope == 1768845428)
                v23 = 692;
              v24 = *(_DWORD *)((char *)this + v23);
              goto LABEL_204;
          }
          goto LABEL_211;
        }
        if (mSelector != 1685278578)
        {
          if (mSelector == 1685287012)
          {
            if (a6 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "ADS_Device.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2793;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertySupportsPastData", buf, 0x12u);
              }
              v75 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v75 = &off_1E69A1B30;
              v75[2] = 561211770;
            }
            v24 = *((_DWORD *)this + 154);
            goto LABEL_204;
          }
          goto LABEL_211;
        }
        if (a6 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ADS_Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2970;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyDSPOffloadRequested", buf, 0x12u);
          }
          v93 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v93 = &off_1E69A1B30;
          v93[2] = 561211770;
        }
        v52 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B398];
        v53 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A8];
        Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
        *(_QWORD *)buf = Mutable;
        v55 = CFDictionaryCreateMutable(0, 0, v52, v53);
        mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v115, v55);
        mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::DictionaryRef>(Mutable, CFSTR("all available"), v115);
        if (v115)
          CFRelease(v115);
        if (v55)
          CFRelease(v55);
        mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v115, Mutable);
        *(_QWORD *)v9 = v115;
        *a7 = 8;
        if (Mutable)
          CFRelease(Mutable);
        return;
      }
      if (mSelector > 1751737453)
      {
        switch(mSelector)
        {
          case 1751737454:
            if (a6 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "ADS_Device.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2730;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyIsHidden for the device", buf, 0x12u);
              }
              v90 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v90 = &off_1E69A1B30;
              v90[2] = 561211770;
            }
            v24 = *((unsigned __int8 *)this + 482);
            goto LABEL_204;
          case 1751738723:
            if (a6 <= 7)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "ADS_Device.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2911;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of AudioFakeDeviceIsolatedIOOperationCallback for the device", buf, 0x12u);
              }
              v100 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v100 = &off_1E69A1B30;
              v100[2] = 561211770;
            }
            v31 = *((_QWORD *)this + 71);
            break;
          case 1751740259:
            if (a6 <= 7)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "ADS_Device.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2904;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioFakeDevicePropertyHardwareIOCallback for the device", buf, 0x12u);
              }
              v72 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v72 = &off_1E69A1B30;
              v72[2] = 561211770;
            }
            v31 = *((_QWORD *)this + 70);
            break;
          default:
            goto LABEL_211;
        }
        goto LABEL_207;
      }
      if (mSelector != 1719105134)
      {
        if (mSelector != 1719301235)
        {
          if (mSelector != 1735354734)
            goto LABEL_211;
          if (a6 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "ADS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2591;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyDeviceIsRunning for the device", buf, 0x12u);
            }
            v67 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v67 = &off_1E69A1B30;
            v67[2] = 561211770;
          }
          v17 = (_QWORD *)((char *)this + 120);
          v18 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 15) + 16))((char *)this + 120);
          *v9 = v17[40] != 0;
          *a7 = 4;
          if (!v18)
            return;
LABEL_35:
          (*(void (**)(_QWORD *))(*v17 + 24))(v17);
          return;
        }
        if (a6 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ADS_Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2932;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioFakeDevicePropertyFirstZTSSampleTime for the device", buf, 0x12u);
          }
          v98 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v98 = &off_1E69A1B30;
          v98[2] = 561211770;
        }
        if (*((_BYTE *)this + 545))
          v59 = (double)(*((_QWORD *)this + 69) * (unint64_t)*((unsigned int *)this + 163));
        else
          v59 = 0.0;
        *(double *)a8 = v59;
        goto LABEL_208;
      }
      if (a6 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "ADS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2466;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioObjectPropertyFirmwareVersion for the device", buf, 0x12u);
        }
        v88 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v88 = &off_1E69A1B30;
        v88[2] = 561211770;
      }
      v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE08];
      v16 = (const __CFString *)*((_QWORD *)this + 88);
    }
    else
    {
      if (mSelector > 1668641651)
      {
        if (mSelector > 1684434035)
        {
          if (mSelector != 1684434036)
          {
            if (mSelector == 1684893796)
            {
              if (a6 <= 3)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = "ADS_Device.cpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 2807;
                  _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyMaximumPastData", buf, 0x12u);
                }
                v99 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v99 = &off_1E69A1B30;
                v99[2] = 561211770;
              }
              goto LABEL_203;
            }
            if (mSelector == 1685087596)
            {
              if (a6 <= 3)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = "ADS_Device.cpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 2814;
                  _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyEnableListening", buf, 0x12u);
                }
                v71 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v71 = &off_1E69A1B30;
                v71[2] = 561211770;
              }
              v24 = *((_DWORD *)this + 156);
              goto LABEL_204;
            }
LABEL_211:
            ADS::BaseObject::GetPropertyData(this, a2, a3, a4, a5, a6, a6, a7, (char *)a8);
            return;
          }
          if (a6 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "ADS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2604;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyDeviceCanBeDefaultDevice for the device", buf, 0x12u);
            }
            v89 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v89 = &off_1E69A1B30;
            v89[2] = 561211770;
          }
          if (*((_DWORD *)this + 3) != 1633905771)
          {
            v24 = *((unsigned __int8 *)this + 480);
            goto LABEL_204;
          }
          goto LABEL_162;
        }
        if (mSelector == 1668641652)
        {
          if (a6 <= 0x9B)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "ADS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2821;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioObjectPropertyCustomPropertyInfoList", buf, 0x12u);
            }
            v87 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v87 = &off_1E69A1B30;
            v87[2] = 561211770;
          }
          *(_OWORD *)a8 = xmmword_1B5D68C60;
          *((_OWORD *)a8 + 1) = xmmword_1B5D68C70;
          *((_OWORD *)a8 + 2) = xmmword_1B5D68C80;
          *((_OWORD *)a8 + 3) = xmmword_1B5D68C90;
          *((_OWORD *)a8 + 4) = xmmword_1B5D68CA0;
          *((_OWORD *)a8 + 5) = xmmword_1B5D68CB0;
          *((_OWORD *)a8 + 6) = xmmword_1B5D68CC0;
          *((_OWORD *)a8 + 7) = xmmword_1B5D68CD0;
          *((_OWORD *)a8 + 8) = xmmword_1B5D68CE0;
          *((_QWORD *)a8 + 18) = 0x7261777776647470;
          a8[38] = 0;
          *(_DWORD *)buf = (_DWORD)a6 - 156;
          ADS::BaseObject::GetPropertyData(this, a2, a3, a4, a5, a6, a6, (unsigned int *)buf, (char *)a8 + 156);
          v30 = *(_DWORD *)buf + 156;
          goto LABEL_209;
        }
        if (mSelector == 1684107364)
        {
          if (a6 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "ADS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2800;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyAvailablePastData", buf, 0x12u);
            }
            v97 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v97 = &off_1E69A1B30;
            v97[2] = 561211770;
          }
          v24 = *((_DWORD *)this + 155);
          goto LABEL_204;
        }
        if (mSelector != 1684236338)
          goto LABEL_211;
        if (*((_DWORD *)this + 3) == 1633905771)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ADS_Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2736;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: clock devices do not have streams (kAudioDevicePropertyPreferredChannelsForStereo)", buf, 0x12u);
          }
          v65 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v65 = &off_1E69A1B30;
          v65[2] = 1970171760;
        }
        if (a6 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ADS_Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2739;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyPreferredChannelsForStereo for the device", buf, 0x12u);
          }
          v102 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v102 = &off_1E69A1B30;
          v102[2] = 561211770;
        }
        *a8 = *((_DWORD *)this + 121);
        a8[1] = *((_DWORD *)this + 122);
LABEL_208:
        v30 = 8;
        goto LABEL_209;
      }
      if (mSelector > 1668049763)
      {
        if (mSelector == 1668049764)
        {
          if (a6 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "ADS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2575;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyClockDomain for the device", buf, 0x12u);
            }
            v81 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v81 = &off_1E69A1B30;
            v81[2] = 561211770;
          }
          v24 = *((_DWORD *)this + 108);
          goto LABEL_204;
        }
        if (mSelector == 1668575852)
        {
          v56 = a6 >> 2;
          mScope = a4->mScope;
          switch(mScope)
          {
            case 0x6F757470u:
              ADS::Device::getControlsWithScope((ADS::Device *)buf, *((_DWORD **)this + 51), *((_DWORD **)this + 52), 1869968496);
              std::vector<std::vector<unsigned int>>::vector[abi:ne180100](v106, (uint64_t)buf, 1uLL);
              *a7 = 4 * ADS::Device::getRequestedSubObjects(v106[0], v106[1], v56, (uint64_t)v9);
              v58 = v106;
              break;
            case 0x696E7074u:
              ADS::Device::getControlsWithScope((ADS::Device *)buf, *((_DWORD **)this + 51), *((_DWORD **)this + 52), 1768845428);
              std::vector<std::vector<unsigned int>>::vector[abi:ne180100](v107, (uint64_t)buf, 1uLL);
              *a7 = 4 * ADS::Device::getRequestedSubObjects(v107[0], v107[1], v56, (uint64_t)v9);
              v58 = v107;
              break;
            case 0x676C6F62u:
              memset(buf, 0, sizeof(buf));
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(buf, *((const void **)this + 51), *((_QWORD *)this + 52), (uint64_t)(*((_QWORD *)this + 52) - *((_QWORD *)this + 51)) >> 2);
              std::vector<std::vector<unsigned int>>::vector[abi:ne180100](v108, (uint64_t)buf, 1uLL);
              *a7 = 4 * ADS::Device::getRequestedSubObjects(v108[0], v108[1], v56, (uint64_t)v9);
              v58 = v108;
              break;
            default:
              return;
          }
          goto LABEL_230;
        }
        if (mSelector != 1668639076)
          goto LABEL_211;
        goto LABEL_114;
      }
      if (mSelector == 1634429294)
      {
        if (a6 >= 4)
        {
          v49 = (uint64_t *)*((_QWORD *)this + 39);
          if (v49)
          {
            v50 = 0;
            do
            {
              a8[v50++] = *((_DWORD *)v49 + 4);
              v49 = (uint64_t *)*v49;
              v51 = v50 >= a6 >> 2 || v49 == 0;
            }
            while (!v51);
          }
        }
        return;
      }
      if (mSelector != 1634690672)
        goto LABEL_211;
      if (*((_DWORD *)this + 3) == 1633905771)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "ADS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2778;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: clock devices do not have streams (kAudioFakeDevicePropertyAudioOutFilePath)", buf, 0x12u);
        }
        v74 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v74 = &off_1E69A1B30;
        v74[2] = 1970171760;
      }
      if (a6 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "ADS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2779;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioFakeDevicePropertyAudioOutFilePath for the device", buf, 0x12u);
        }
        v103 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v103 = &off_1E69A1B30;
        v103[2] = 561211770;
      }
      v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE08];
      v16 = (const __CFString *)*((_QWORD *)this + 67);
    }
LABEL_195:
    Copy = (void *)CFStringCreateCopy(v15, v16);
LABEL_196:
    *(_QWORD *)v9 = Copy;
    goto LABEL_208;
  }
  if (mSelector <= 1853059699)
  {
    if (mSelector > 1818850925)
    {
      if (mSelector > 1819569762)
      {
        if (mSelector == 1819569763)
        {
          if (a6 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "ADS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2622;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyLatency for the device", buf, 0x12u);
            }
            v84 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v84 = &off_1E69A1B30;
            v84[2] = 561211770;
          }
          v24 = *((_DWORD *)this + 161);
          goto LABEL_204;
        }
        if (mSelector != 1836411236)
        {
          if (mSelector == 1853059619)
          {
            v25 = *((_QWORD *)this + 44);
            if (v25 >= a6 >> 4)
              LODWORD(v25) = a6 >> 4;
            if ((_DWORD)v25)
            {
              v26 = (_QWORD *)*((_QWORD *)this + 42);
              *(_OWORD *)a8 = *((_OWORD *)v26 + 2);
              v27 = v25 - 1;
              if ((_DWORD)v25 != 1)
              {
                do
                {
                  v28 = (_QWORD *)v26[1];
                  if (v28)
                  {
                    do
                    {
                      v29 = v28;
                      v28 = (_QWORD *)*v28;
                    }
                    while (v28);
                  }
                  else
                  {
                    do
                    {
                      v29 = (_QWORD *)v26[2];
                      v51 = *v29 == (_QWORD)v26;
                      v26 = v29;
                    }
                    while (!v51);
                  }
                  *((_OWORD *)v9 + 1) = *((_OWORD *)v29 + 2);
                  v9 += 4;
                  v26 = v29;
                  --v27;
                }
                while (v27);
              }
            }
            v30 = 16 * v25;
            goto LABEL_209;
          }
          goto LABEL_211;
        }
        if (a6 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ADS_Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2530;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyModelUID for the device", buf, 0x12u);
          }
          v96 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v96 = &off_1E69A1B30;
          v96[2] = 561211770;
        }
        v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE08];
        v16 = (const __CFString *)*((_QWORD *)this + 14);
      }
      else
      {
        switch(mSelector)
        {
          case 1818850926:
            if (a6 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "ADS_Device.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2583;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyDeviceIsAlive for the device", buf, 0x12u);
              }
              v83 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v83 = &off_1E69A1B30;
              v83[2] = 561211770;
            }
            v24 = 1;
            goto LABEL_204;
          case 1819107691:
            if (a6 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "ADS_Device.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2452;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioObjectPropertyManufacturer for the device", buf, 0x12u);
              }
              v95 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v95 = &off_1E69A1B30;
              v95[2] = 561211770;
            }
            v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE08];
            v16 = (const __CFString *)*((_QWORD *)this + 10);
            break;
          case 1819173229:
            if (a6 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "ADS_Device.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2444;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioObjectPropertyName for the device", buf, 0x12u);
              }
              v66 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v66 = &off_1E69A1B30;
              v66[2] = 561211770;
            }
            v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE08];
            v16 = (const __CFString *)*((_QWORD *)this + 8);
            break;
          default:
            goto LABEL_211;
        }
      }
      goto LABEL_195;
    }
    if (mSelector > 1768515183)
    {
      switch(mSelector)
      {
        case 1768515184:
          if (a6 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "ADS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2949;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioFakeDevicePropertyInputInjectionFilePath for the device", buf, 0x12u);
            }
            v80 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v80 = &off_1E69A1B30;
            v80[2] = 561211770;
          }
          Copy = PropertyListDeepImmutableCopy(*((const __CFString **)this + 74));
          break;
        case 1768777573:
          if (a6 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "ADS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2885;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyRawImageData for the device", buf, 0x12u);
            }
            v92 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v92 = &off_1E69A1B30;
            v92[2] = 561211770;
          }
          Copy = CFDataCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE08], *((CFDataRef *)this + 92));
          break;
        case 1769302372:
          *a7 = 4;
          *a8 = *((_DWORD *)this + 205);
          return;
        default:
          goto LABEL_211;
      }
      goto LABEL_196;
    }
    if (mSelector == 1752197475)
    {
      if (a6 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "ADS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2918;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioFakeDevicePropertyHardwareSetupForIsolatedIOCallback for the device", buf, 0x12u);
        }
        v91 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v91 = &off_1E69A1B30;
        v91[2] = 561211770;
      }
      v31 = *((_QWORD *)this + 72);
    }
    else
    {
      if (mSelector != 1752525155)
        goto LABEL_211;
      if (a6 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "ADS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2925;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioFakeDevicePropertyHardwareTeardownForIsolatedIOCallback for the device", buf, 0x12u);
        }
        v73 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v73 = &off_1E69A1B30;
        v73[2] = 561211770;
      }
      v31 = *((_QWORD *)this + 73);
    }
LABEL_207:
    *(_QWORD *)a8 = v31;
    goto LABEL_208;
  }
  if (mSelector > 1936618860)
  {
    if (mSelector <= 1953653101)
    {
      if (mSelector != 1936618861)
      {
        if (mSelector == 1936879204)
        {
          if (*((_DWORD *)this + 3) == 1633905771)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "ADS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2746;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: clock devices do not have streams (kAudioDevicePropertyPreferredChannelLayout)", buf, 0x12u);
            }
            v85 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v85 = &off_1E69A1B30;
            v85[2] = 1970171760;
          }
          v42 = 496;
          if (a4->mScope == 1768845428)
            v42 = 492;
          v43 = atomic_load((unsigned int *)((char *)this + v42));
          v44 = v43 - 1;
          v45 = caulk::numeric::exceptional_mul<unsigned int>(v43 - 1);
          v46 = caulk::numeric::exceptional_add<unsigned int>(v45);
          if (v46 > v11)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "ADS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2753;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyPreferredChannelLayout for the device", buf, 0x12u);
            }
            v104 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v104 = &off_1E69A1B30;
            v104[2] = 561211770;
          }
          *(_QWORD *)v9 = 0;
          v9[2] = v44;
          if ((_DWORD)v44)
          {
            v47 = 0;
            v48 = v9 + 4;
            do
            {
              *((_DWORD *)v48 - 1) = ++v47;
              *v48 = 0;
              v48[1] = 0;
              v48 = (_QWORD *)((char *)v48 + 20);
            }
            while (v44 != v47);
          }
          *a7 = v46;
          return;
        }
        if (mSelector != 1937009955)
          goto LABEL_211;
        if (*((_DWORD *)this + 3) == 1633905771)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ADS_Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2628;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: clock devices do not have streams (kAudioDevicePropertyStreams)", buf, 0x12u);
          }
          v68 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v68 = &off_1E69A1B30;
          v68[2] = 1970171760;
        }
        v19 = a6 >> 2;
        v20 = a4->mScope;
        if (v20 == 1869968496)
        {
          memset(buf, 0, sizeof(buf));
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(buf, *((const void **)this + 48), *((_QWORD *)this + 49), (uint64_t)(*((_QWORD *)this + 49) - *((_QWORD *)this + 48)) >> 2);
          std::vector<std::vector<unsigned int>>::vector[abi:ne180100](v109, (uint64_t)buf, 1uLL);
          *a7 = 4 * ADS::Device::getRequestedSubObjects(v109[0], v109[1], v19, (uint64_t)v9);
          v58 = v109;
        }
        else
        {
          if (v20 != 1768845428)
          {
            if (v20 == 1735159650)
            {
              memset(buf, 0, sizeof(buf));
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(buf, *((const void **)this + 45), *((_QWORD *)this + 46), (uint64_t)(*((_QWORD *)this + 46) - *((_QWORD *)this + 45)) >> 2);
              v117 = 0;
              v118 = 0;
              v119 = 0;
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v117, *((const void **)this + 48), *((_QWORD *)this + 49), (uint64_t)(*((_QWORD *)this + 49) - *((_QWORD *)this + 48)) >> 2);
              std::vector<std::vector<unsigned int>>::vector[abi:ne180100](v111, (uint64_t)buf, 2uLL);
              *a7 = 4 * ADS::Device::getRequestedSubObjects(v111[0], v111[1], v19, (uint64_t)v9);
              v115 = (void **)v111;
              std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v115);
              for (i = 0; i != -48; i -= 24)
              {
                v22 = *(void **)&buf[i + 24];
                if (v22)
                {
                  *(uint64_t *)((char *)&v118 + i) = (uint64_t)v22;
                  operator delete(v22);
                }
              }
            }
            return;
          }
          memset(buf, 0, sizeof(buf));
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(buf, *((const void **)this + 45), *((_QWORD *)this + 46), (uint64_t)(*((_QWORD *)this + 46) - *((_QWORD *)this + 45)) >> 2);
          std::vector<std::vector<unsigned int>>::vector[abi:ne180100](v110, (uint64_t)buf, 1uLL);
          *a7 = 4 * ADS::Device::getRequestedSubObjects(v110[0], v110[1], v19, (uint64_t)v9);
          v58 = v110;
        }
LABEL_230:
        v115 = (void **)v58;
        std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v115);
        if (*(_QWORD *)buf)
        {
          *(_QWORD *)&buf[8] = *(_QWORD *)buf;
          operator delete(*(void **)buf);
        }
        return;
      }
      if (a6 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "ADS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2459;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioObjectPropertySerialNumber for the device", buf, 0x12u);
        }
        v77 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v77 = &off_1E69A1B30;
        v77[2] = 561211770;
      }
      v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE08];
      v16 = (const __CFString *)*((_QWORD *)this + 90);
      goto LABEL_195;
    }
    if (mSelector == 1953653102)
    {
      if (a6 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "ADS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2539;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyTransportType for the device", buf, 0x12u);
        }
        v79 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v79 = &off_1E69A1B30;
        v79[2] = 561211770;
      }
      v24 = *((_DWORD *)this + 162);
      goto LABEL_204;
    }
    if (mSelector != 1969841184)
    {
      if (mSelector == 1986294896)
      {
        *a7 = 4;
        *a8 = 0;
        return;
      }
      goto LABEL_211;
    }
LABEL_114:
    if (a6 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "ADS_Device.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2512;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyDeviceUID for the device", buf, 0x12u);
      }
      v64 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v64 = &off_1E69A1B30;
      v64[2] = 561211770;
    }
    *(_QWORD *)buf = &off_1E69A0F60;
    *(_QWORD *)&buf[8] = CFSTR("deleteme");
    v32 = OS::CF::operator==(*((CFStringRef *)this + 12), CFSTR("deleteme"));
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
    if (v32)
      Copy = 0;
    else
      Copy = (void *)CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE08], *((CFStringRef *)this + 12));
    goto LABEL_196;
  }
  if (mSelector > 1935763059)
  {
    if (mSelector == 1935763060)
    {
      if (*((_DWORD *)this + 3) == 1633905771)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "ADS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2690;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: clock devices do not have streams (kAudioDevicePropertySafetyOffset)", buf, 0x12u);
        }
        v78 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v78 = &off_1E69A1B30;
        v78[2] = 1970171760;
      }
      if (a6 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "ADS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2691;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  SA_ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertySafetyOffset for the device", buf, 0x12u);
        }
        v101 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v101 = &off_1E69A1B30;
        v101[2] = 561211770;
      }
      v24 = *((_DWORD *)this + 164);
      goto LABEL_204;
    }
    if (mSelector == 1935892848)
    {
      if (*((_DWORD *)this + 3) == 1633905771)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "ADS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2785;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: clock devices do not have streams (kAudioFakeDevicePropertyStreamCaptureEnabled)", buf, 0x12u);
        }
        v86 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v86 = &off_1E69A1B30;
        v86[2] = 1970171760;
      }
      if (a6 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "ADS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2786;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioFakeDevicePropertyStreamCaptureEnabled for the device", buf, 0x12u);
        }
        v105 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v105 = &off_1E69A1B30;
        v105[2] = 561211770;
      }
      v24 = *((unsigned __int8 *)this + 544);
      goto LABEL_204;
    }
    if (mSelector != 1936092276)
      goto LABEL_211;
    if (a6 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "ADS_Device.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2614;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyDeviceCanBeDefaultSystemDevice for the device", buf, 0x12u);
      }
      v70 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v70 = &off_1E69A1B30;
      v70[2] = 561211770;
    }
    if (*((_DWORD *)this + 3) != 1633905771)
    {
      v24 = *((unsigned __int8 *)this + 481);
LABEL_204:
      *a8 = v24;
      v30 = 4;
LABEL_209:
      *a7 = v30;
      return;
    }
LABEL_162:
    v24 = 0;
    goto LABEL_204;
  }
  if (mSelector == 1853059700)
  {
    if (a6 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "ADS_Device.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2700;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  SA_ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyNominalSampleRate for the device", buf, 0x12u);
      }
      v76 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v76 = &off_1E69A1B30;
      v76[2] = 561211770;
    }
    v17 = (_QWORD *)((char *)this + 120);
    v34 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 15) + 16))((char *)this + 120);
    *(_QWORD *)v9 = v17[64];
    *a7 = 8;
    if (!v34)
      return;
    goto LABEL_35;
  }
  if (mSelector != 1870098020)
  {
    if (mSelector == 1919512167)
    {
      if (a6 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "ADS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2772;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyZeroTimeStampPeriod for the device", buf, 0x12u);
        }
        v14 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v14 = &off_1E69A1B30;
        v14[2] = 561211770;
      }
LABEL_203:
      v24 = *((_DWORD *)this + 163);
      goto LABEL_204;
    }
    goto LABEL_211;
  }
  v38 = a6 >> 2;
  v39 = a4->mScope;
  switch(v39)
  {
    case 0x6F757470u:
      memset(buf, 0, sizeof(buf));
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(buf, *((const void **)this + 48), *((_QWORD *)this + 49), (uint64_t)(*((_QWORD *)this + 49) - *((_QWORD *)this + 48)) >> 2);
      ADS::Device::getControlsWithScope((ADS::Device *)&v117, *((_DWORD **)this + 51), *((_DWORD **)this + 52), 1869968496);
      std::vector<std::vector<unsigned int>>::vector[abi:ne180100](v112, (uint64_t)buf, 2uLL);
      *a7 = ADS::Device::getRequestedSubObjects(v112[0], v112[1], v38, (uint64_t)v9);
      v115 = (void **)v112;
      std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v115);
      for (j = 0; j != -48; j -= 24)
      {
        v63 = *(void **)&buf[j + 24];
        if (v63)
        {
          *(uint64_t *)((char *)&v118 + j) = (uint64_t)v63;
          operator delete(v63);
        }
      }
      break;
    case 0x696E7074u:
      memset(buf, 0, sizeof(buf));
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(buf, *((const void **)this + 45), *((_QWORD *)this + 46), (uint64_t)(*((_QWORD *)this + 46) - *((_QWORD *)this + 45)) >> 2);
      ADS::Device::getControlsWithScope((ADS::Device *)&v117, *((_DWORD **)this + 51), *((_DWORD **)this + 52), 1768845428);
      std::vector<std::vector<unsigned int>>::vector[abi:ne180100](v113, (uint64_t)buf, 2uLL);
      *a7 = ADS::Device::getRequestedSubObjects(v113[0], v113[1], v38, (uint64_t)v9);
      v115 = (void **)v113;
      std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v115);
      for (k = 0; k != -48; k -= 24)
      {
        v61 = *(void **)&buf[k + 24];
        if (v61)
        {
          *(uint64_t *)((char *)&v118 + k) = (uint64_t)v61;
          operator delete(v61);
        }
      }
      break;
    case 0x676C6F62u:
      memset(buf, 0, sizeof(buf));
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(buf, *((const void **)this + 45), *((_QWORD *)this + 46), (uint64_t)(*((_QWORD *)this + 46) - *((_QWORD *)this + 45)) >> 2);
      v117 = 0;
      v118 = 0;
      v119 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v117, *((const void **)this + 48), *((_QWORD *)this + 49), (uint64_t)(*((_QWORD *)this + 49) - *((_QWORD *)this + 48)) >> 2);
      v120 = 0;
      v121[0] = 0;
      v121[1] = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v120, *((const void **)this + 51), *((_QWORD *)this + 52), (uint64_t)(*((_QWORD *)this + 52) - *((_QWORD *)this + 51)) >> 2);
      std::vector<std::vector<unsigned int>>::vector[abi:ne180100](v114, (uint64_t)buf, 3uLL);
      *a7 = ADS::Device::getRequestedSubObjects(v114[0], v114[1], v38, (uint64_t)v9);
      v115 = (void **)v114;
      std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v115);
      for (m = 0; m != -9; m -= 3)
      {
        v41 = (void *)v121[m - 1];
        if (v41)
        {
          v121[m] = v41;
          operator delete(v41);
        }
      }
      break;
  }
}

void sub_1B597B3B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)(v1 - 136) = v1 - 160;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 136));
  v3 = 0;
  v4 = v1 - 128;
  while (1)
  {
    v5 = *(void **)(v4 + v3 + 48);
    if (v5)
    {
      *(_QWORD *)(v4 + v3 + 56) = v5;
      operator delete(v5);
    }
    v3 -= 24;
    if (v3 == -72)
      _Unwind_Resume(a1);
  }
}

_QWORD *std::vector<std::vector<unsigned int>>::vector[abi:ne180100](_QWORD *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v11[3];
  char v12;
  _QWORD *v13;
  _QWORD *v14;

  a1[2] = 0;
  v4 = a1 + 2;
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = 3 * a3;
    v7 = operator new(24 * a3);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[v6];
    v13 = v7;
    v14 = v7;
    v8 = a2 + 8 * v6;
    v11[0] = v4;
    v11[1] = &v13;
    v11[2] = &v14;
    v9 = v7;
    v12 = 0;
    do
    {
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v9, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
      v9 = v14 + 3;
      v14 += 3;
      a2 += 24;
    }
    while (a2 != v8);
    v12 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
    a1[1] = v9;
  }
  return a1;
}

void sub_1B597B6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

unint64_t ADS::Device::getRequestedSubObjects(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  unint64_t v11;
  void *__p;
  uint64_t v14;
  uint64_t v15;

  if (a1 == a2)
    return 0;
  v6 = a1;
  v7 = 0;
  v8 = a3;
  do
  {
    __p = 0;
    v14 = 0;
    v15 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
    v9 = __p;
    if (v7 < v8)
    {
      v10 = 0;
      v11 = (v14 - (uint64_t)__p) >> 2;
      while (v11 > v10)
      {
        *(_DWORD *)(a4 + 4 * v7) = v9[v10++];
        if (v8 == ++v7)
        {
          v7 = v8;
          goto LABEL_10;
        }
      }
      v7 = v7;
    }
    if (v9)
LABEL_10:
      operator delete(v9);
    v6 += 24;
  }
  while (v6 != a2);
  return v7;
}

void std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ADS::Device::getControlsWithScope(ADS::Device *this, _DWORD *a2, _DWORD *a3, int a4)
{
  _DWORD *v6;
  ADS::ObjectManager *v7;
  int v8;
  ADS::BaseObject *v9;
  ADS::Device *v10;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v10 = this;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*v6);
      v8 = *((_DWORD *)v7 + 13);
      ADS::ObjectManager::ReleaseObject(v7, v9);
      if (v8 == a4)
        std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:ne180100]((uint64_t *)&v10, v6);
      ++v6;
    }
    while (v6 != a3);
  }
}

void sub_1B597B8DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL OS::CF::operator==(CFStringRef theString1, const __CFString *a2)
{
  _BOOL8 result;

  result = 0;
  if (theString1)
  {
    if (a2)
      return CFStringCompare(theString1, a2, 0) == kCFCompareEqualTo;
  }
  return result;
}

void mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::DictionaryRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1)
    CFDictionaryAddValue(a1, a2, a3);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 16);
    v3 = **(_QWORD **)(a1 + 8);
    if (v2 != v3)
    {
      v4 = **(_QWORD **)(a1 + 16);
      do
      {
        v6 = *(void **)(v4 - 24);
        v4 -= 24;
        v5 = v6;
        if (v6)
        {
          *(_QWORD *)(v2 - 16) = v5;
          operator delete(v5);
        }
        v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

uint64_t std::count_if[abi:ne180100]<std::__wrap_iter<unsigned int const*>,ADS::Device::Device_GetPropertyDataSize(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*)::$_0>(unsigned int *a1, unsigned int *a2)
{
  unsigned int *v3;
  uint64_t v4;
  ADS::ObjectManager *v5;
  int v6;
  ADS::BaseObject *v7;

  if (a1 == a2)
    return 0;
  v3 = a1;
  v4 = 0;
  do
  {
    v5 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*v3);
    v6 = *((_DWORD *)v5 + 13);
    ADS::ObjectManager::ReleaseObject(v5, v7);
    if (v6 == 1768845428)
      ++v4;
    ++v3;
  }
  while (v3 != a2);
  return v4;
}

uint64_t std::count_if[abi:ne180100]<std::__wrap_iter<unsigned int const*>,ADS::Device::Device_GetPropertyDataSize(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*)::$_1>(unsigned int *a1, unsigned int *a2)
{
  unsigned int *v3;
  uint64_t v4;
  ADS::ObjectManager *v5;
  int v6;
  ADS::BaseObject *v7;

  if (a1 == a2)
    return 0;
  v3 = a1;
  v4 = 0;
  do
  {
    v5 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*v3);
    v6 = *((_DWORD *)v5 + 13);
    ADS::ObjectManager::ReleaseObject(v5, v7);
    if (v6 == 1869968496)
      ++v4;
    ++v3;
  }
  while (v3 != a2);
  return v4;
}

uint64_t std::count_if[abi:ne180100]<std::__wrap_iter<unsigned int const*>,ADS::Device::Device_GetPropertyDataSize(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*)::$_2>(unsigned int *a1, unsigned int *a2)
{
  unsigned int *v3;
  uint64_t v4;
  ADS::ObjectManager *v5;
  int v6;
  ADS::BaseObject *v7;

  if (a1 == a2)
    return 0;
  v3 = a1;
  v4 = 0;
  do
  {
    v5 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*v3);
    v6 = *((_DWORD *)v5 + 13);
    ADS::ObjectManager::ReleaseObject(v5, v7);
    if (v6 == 1768845428)
      ++v4;
    ++v3;
  }
  while (v3 != a2);
  return v4;
}

uint64_t std::count_if[abi:ne180100]<std::__wrap_iter<unsigned int const*>,ADS::Device::Device_GetPropertyDataSize(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*)::$_3>(unsigned int *a1, unsigned int *a2)
{
  unsigned int *v3;
  uint64_t v4;
  ADS::ObjectManager *v5;
  int v6;
  ADS::BaseObject *v7;

  if (a1 == a2)
    return 0;
  v3 = a1;
  v4 = 0;
  do
  {
    v5 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*v3);
    v6 = *((_DWORD *)v5 + 13);
    ADS::ObjectManager::ReleaseObject(v5, v7);
    if (v6 == 1869968496)
      ++v4;
    ++v3;
  }
  while (v3 != a2);
  return v4;
}

void CAExtAudioFile::~CAExtAudioFile(CAExtAudioFile *this)
{
  *(_QWORD *)this = &off_1E6977140;
  CAExtAudioFile::Close(this);
}

{
  *(_QWORD *)this = &off_1E6977140;
  CAExtAudioFile::Close(this);
  JUMPOUT(0x1B5E50688);
}

void CAExtAudioFile::Check(CAExtAudioFile *this, int a2, const char *a3)
{
  CAXException *exception;
  char __str[128];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    snprintf(__str, 0x80uLL, "%s failed", a3);
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, __str, a2);
  }
}

void sub_1B597BDB4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void CAExtAudioFile::CheckProperty(CAExtAudioFile *this, int a2, const char *a3, int a4)
{
  CAXException *exception;
  char v6[5];
  char __str[128];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v6[0] = HIBYTE(a4);
    v6[1] = BYTE2(a4);
    v6[2] = BYTE1(a4);
    v6[3] = a4;
    v6[4] = 0;
    snprintf(__str, 0x80uLL, "%s ('%s') failed", a3, v6);
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, __str, a2);
  }
}

void sub_1B597BE94(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void CAXException::CAXException(CAXException *this, const char *__s, int a3)
{
  size_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  *(_QWORD *)this = &off_1E697CAA8;
  *((_DWORD *)this + 66) = a3;
  if (__s)
  {
    v5 = strlen(__s);
    v6 = (char *)this + 8;
    if (v5 < 0x100)
    {
      strlcpy(v6, __s, 0x100uLL);
    }
    else
    {
      v7 = *(_OWORD *)__s;
      v8 = *((_OWORD *)__s + 1);
      v9 = *((_OWORD *)__s + 3);
      *(_OWORD *)((char *)this + 40) = *((_OWORD *)__s + 2);
      *(_OWORD *)((char *)this + 56) = v9;
      *(_OWORD *)v6 = v7;
      *(_OWORD *)((char *)this + 24) = v8;
      v10 = *((_OWORD *)__s + 4);
      v11 = *((_OWORD *)__s + 5);
      v12 = *((_OWORD *)__s + 7);
      *(_OWORD *)((char *)this + 104) = *((_OWORD *)__s + 6);
      *(_OWORD *)((char *)this + 120) = v12;
      *(_OWORD *)((char *)this + 72) = v10;
      *(_OWORD *)((char *)this + 88) = v11;
      v13 = *((_OWORD *)__s + 8);
      v14 = *((_OWORD *)__s + 9);
      v15 = *((_OWORD *)__s + 11);
      *(_OWORD *)((char *)this + 168) = *((_OWORD *)__s + 10);
      *(_OWORD *)((char *)this + 184) = v15;
      *(_OWORD *)((char *)this + 136) = v13;
      *(_OWORD *)((char *)this + 152) = v14;
      v16 = *((_OWORD *)__s + 12);
      v17 = *((_OWORD *)__s + 13);
      v18 = *((_OWORD *)__s + 14);
      *(_OWORD *)((char *)this + 247) = *(_OWORD *)(__s + 239);
      *(_OWORD *)((char *)this + 216) = v17;
      *(_OWORD *)((char *)this + 232) = v18;
      *(_OWORD *)((char *)this + 200) = v16;
      *((_BYTE *)this + 263) = 0;
    }
  }
  else
  {
    *((_BYTE *)this + 8) = 0;
  }
}

void sub_1B597BF64(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ADS::Device::Device(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6;
  const __CFAllocator *v7;
  CFStringRef v8;
  _BYTE *v9;
  CFStringRef v10;
  int v11;
  const __CFArray *v12;
  unint64_t i;
  unsigned int v14;
  const __CFArray *v15;
  unint64_t j;
  const __CFDictionary *v17;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  const __CFDictionary *v20;
  const __CFDictionary *v21;
  CFTypeRef v22;
  unsigned int v23;
  unint64_t v24;
  int v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  uint64_t v28;
  unsigned __int16 *v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  _QWORD *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  CFTypeRef v47;
  _QWORD *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  _BYTE *v57;
  int v59;
  int v60;
  CFTypeRef v62;
  _QWORD *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  _BYTE *v70;
  uint64_t v71;
  int v72;
  CFTypeRef v74;
  _QWORD *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  _BYTE *v82;
  int v83;
  int v84;
  _BYTE *v86;
  int v87;
  int v88;
  CFTypeRef v90;
  _QWORD *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  float v98;
  _QWORD *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  CFTypeRef v106;
  _QWORD *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  NSObject *v114;
  const char *v115;
  uint64_t v116;
  _BYTE *v117;
  int v118;
  int v119;
  _BOOL4 v121;
  const __CFArray *v122;
  unint64_t n;
  double v124;
  float v125;
  const __CFArray *v126;
  unint64_t v127;
  NSObject *v128;
  const __CFDictionary *v129;
  const __CFNumber *v130;
  AudioStreamBasicDescription *v131;
  const __CFArray *v132;
  unint64_t v133;
  CFTypeRef v134;
  AudioStreamBasicDescription *v135;
  _QWORD *v136;
  _QWORD *v137;
  _OWORD *v138;
  __int128 v139;
  void *v140;
  double v141;
  int16x8_t v142;
  void **v143;
  NSObject *v144;
  const char *v145;
  int v146;
  ADS::ObjectManager *v147;
  char v148;
  uint64_t v149;
  unsigned int *v150;
  uint64_t v151;
  const AudioStreamRangedDescription *v152;
  const AudioStreamRangedDescription *v153;
  int v154;
  ADS::BaseObject *v155;
  int v156;
  unsigned int v157;
  unint64_t v158;
  unsigned int *v159;
  _DWORD *v160;
  unint64_t v161;
  unsigned int *v162;
  _DWORD *v163;
  unsigned int *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  BOOL v168;
  unint64_t v169;
  uint64_t v170;
  unsigned int *v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unsigned int *v177;
  unsigned int v178;
  unsigned int *v179;
  unsigned int v180;
  uint64_t v181;
  char v182;
  uint64_t v183;
  char v184;
  int16x8_t v185;
  unsigned int *k;
  ADS::ObjectManager *v187;
  _QWORD *v188;
  _QWORD *v189;
  _QWORD *v190;
  int16x8_t *v191;
  int16x8_t *v192;
  int16x8_t *v193;
  ADS::BaseObject *v194;
  uint64_t v195;
  void *v196;
  _BYTE *v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t *v200;
  _BYTE *v201;
  uint64_t *v202;
  uint64_t **leaf_high;
  _QWORD *v204;
  uint64_t *v205;
  uint64_t *m;
  void *v207;
  uint64_t **v208;
  _QWORD *v209;
  _BYTE *v210;
  unsigned int v211;
  const char *v212;
  int v213;
  int v214;
  double v215;
  uint64_t v216;
  unint64_t v217;
  NSObject *v218;
  CFTypeRef v219;
  CFTypeRef v220;
  unint64_t v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  ADS::ObjectManager *v225;
  int16x8_t *v226;
  __int32 v227;
  int v228;
  int16x8_t *v230;
  __int32 v231;
  int v232;
  OS::CF::UntypedObject *v234;
  int16x8_t *v235;
  __int32 v236;
  int v237;
  int v239;
  int16x8_t *v240;
  __int32 v241;
  int v242;
  unsigned int v244;
  int16x8_t *v245;
  uint64_t jj;
  unsigned __int8 *v247;
  int v248;
  int16x8_t *v249;
  uint64_t v250;
  int v251;
  NSObject *v253;
  const char *v254;
  const void *v255;
  double v256;
  float v257;
  float v258;
  _BOOL4 v259;
  uint64_t v260;
  unsigned __int8 *v261;
  int v262;
  int v263;
  int v264;
  uint64_t v265;
  double v266;
  int v267;
  unsigned int v268;
  NSObject *v269;
  int v270;
  int v271;
  int v272;
  NSObject *v273;
  uint64_t ii;
  unsigned __int8 *v275;
  int v276;
  int v277;
  int v278;
  uint64_t v279;
  unsigned int v280;
  uint64_t v281;
  int v282;
  unsigned int *v283;
  unsigned int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  OS::CF::UntypedObject *v291;
  OS::CF::UntypedObject *v292;
  ADS::BaseObject *v293;
  unint64_t v294;
  char *v295;
  _DWORD *v296;
  char *v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  _DWORD *v303;
  int v304;
  int v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  int v309;
  unsigned int *v310;
  unsigned int v311;
  uint64_t v312;
  int v313;
  unsigned int *v314;
  unsigned int v315;
  uint64_t v316;
  int v317;
  unsigned int *v318;
  unsigned int v319;
  uint64_t v320;
  int v321;
  unsigned int *v322;
  unsigned int v323;
  unint64_t v324;
  unint64_t v325;
  _DWORD *v327;
  std::runtime_error *v328;
  std::runtime_error *exception;
  _DWORD *v330;
  _DWORD *v331;
  _DWORD *v332;
  _DWORD *v333;
  _DWORD *v334;
  _DWORD *v335;
  uint64_t v336;
  uint64_t *v337;
  int v338[2];
  unsigned int *v339;
  unsigned int v340;
  int v341;
  void **v342;
  uint64_t v343;
  _DWORD *v344;
  uint64_t v345;
  unint64_t v346;
  int v347[2];
  unsigned int NextObjectID;
  char **v349;
  unsigned int v350;
  uint64_t **v351;
  uint64_t v352;
  void (**v353)(OS::CF::UntypedObject *__hidden);
  CFTypeRef v354;
  void *v355;
  char v356;
  void *v357;
  char v358;
  void *v359;
  char v360;
  void *v361;
  char v362;
  void *v363;
  char v364;
  void *v365;
  char v366;
  void *v367;
  char v368;
  void *v369;
  char v370;
  void *v371;
  char v372;
  void *v373;
  char v374;
  void *v375;
  char v376;
  void *v377;
  char v378;
  void *v379;
  char v380;
  void *v381;
  char v382;
  void *v383;
  char v384;
  void *v385;
  char v386;
  void *v387;
  char v388;
  void *v389;
  char v390;
  void *v391;
  char v392;
  void *v393;
  char v394;
  void *v395;
  char v396;
  void *v397;
  char v398;
  void (**v399)(OS::CF::UntypedObject *__hidden);
  CFDictionaryRef v400;
  const __CFDictionary *v401;
  CFTypeRef v402;
  CFTypeRef v403;
  const __CFArray *v404;
  _QWORD v405[2];
  void (**v406)(OS::CF::UntypedObject *__hidden);
  CFDictionaryRef theDict;
  char v408[8];
  const __CFArray *v409;
  void *v410;
  char v411;
  void *v412;
  char v413;
  char v414[8];
  const __CFArray *v415;
  void *v416;
  char v417;
  void *v418;
  char v419;
  char v420[8];
  const __CFNumber *v421;
  void *v422;
  char v423;
  void *v424;
  char v425;
  char v426[8];
  const __CFNumber *v427;
  void *v428;
  char v429;
  void *v430;
  char v431;
  char v432[8];
  const __CFNumber *v433;
  void *v434;
  char v435;
  void *v436;
  char v437;
  uint64_t v438;
  OS::CF::Boolean *v439;
  void *v440;
  char v441;
  void *v442;
  char v443;
  char v444[8];
  const __CFNumber *v445;
  void *v446;
  char v447;
  void *v448;
  char v449;
  char v450[8];
  const __CFNumber *v451;
  void *v452;
  char v453;
  void *v454;
  char v455;
  char v456[8];
  CFTypeRef v457;
  char v458[8];
  CFTypeRef v459;
  void *v460;
  char v461;
  void *v462;
  char v463;
  char v464[8];
  CFTypeRef v465;
  void *v466;
  char v467;
  void *v468;
  char v469;
  char v470[8];
  CFTypeRef v471;
  char v472[8];
  CFTypeRef v473;
  char v474;
  CFTypeRef v475;
  void *v476[2];
  char v477;
  int16x8_t v478;
  __int128 v479;
  uint64_t v480;
  CFTypeRef v481[2];
  const __CFDictionary *v482;
  CFTypeRef v483;
  CFTypeRef *v484;
  CFTypeRef v485;
  uint64_t v486;
  CFTypeRef v487;
  const __CFArray *v488;
  int16x8_t v489;
  __int128 v490;
  uint64_t v491;
  CFTypeRef v492;
  const __CFNumber *v493;
  void (**v494)(OS::CF::UntypedObject *__hidden);
  CFTypeRef cf;
  __int128 v496;
  __int128 v497;
  int16x8_t v498;
  __int128 v499;
  uint64_t v500;
  _BYTE buf[32];
  _BYTE v502[24];
  _BYTE __p[32];
  _BYTE v504[24];
  int v505;
  _QWORD v506[3];
  int v507;
  _QWORD v508[3];
  int v509;
  _QWORD v510[3];
  int v511;
  uint64_t v512[3];
  int v513;
  uint64_t v514[3];
  int v515;
  uint64_t v516[3];
  int v517;
  uint64_t v518[3];
  int v519;
  uint64_t v520;

  v6 = a1;
  v520 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 12) = 0x616F626A61646576;
  *(_DWORD *)(a1 + 20) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  v349 = (char **)(a1 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_1E6976F80;
  v343 = a1 + 56;
  OS::CF::String::String((OS::CF::String *)(a1 + 56), "Unnamed Device");
  OS::CF::String::String((OS::CF::String *)(v6 + 72), "Apple Inc.");
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE08];
  v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE08], 0, CFSTR("TestDevice_%d"), a2);
  v345 = v6 + 88;
  *(_QWORD *)(v6 + 104) = &off_1E69A0F60;
  *(_QWORD *)(v6 + 88) = &off_1E69A0F60;
  *(_QWORD *)(v6 + 96) = v8;
  *(_QWORD *)(v6 + 112) = CFSTR("SimulatorDeviceModelUID");
  CADeprecated::CAMutex::CAMutex((CADeprecated::CAMutex *)(v6 + 120), "Device State");
  CADeprecated::CAMutex::CAMutex((CADeprecated::CAMutex *)(v6 + 208), "IO Mutex");
  *(_OWORD *)(v6 + 296) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_DWORD *)(v6 + 328) = 1065353216;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(v6 + 296, a2, a2);
  *(_QWORD *)(v6 + 344) = 0;
  *(_QWORD *)(v6 + 352) = 0;
  v337 = (uint64_t *)(v6 + 344);
  *(_QWORD *)(v6 + 336) = v6 + 344;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  *(_OWORD *)(v6 + 408) = 0u;
  v342 = (void **)(v6 + 360);
  *(_OWORD *)(v6 + 421) = 0u;
  *(_QWORD *)(v6 + 472) = 0;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_WORD *)(v6 + 480) = 257;
  *(_BYTE *)(v6 + 482) = 0;
  v344 = (_DWORD *)(v6 + 484);
  *(_OWORD *)(v6 + 484) = xmmword_1B5D68CF0;
  *(_QWORD *)(v6 + 504) = 0;
  *(_QWORD *)(v6 + 512) = 0;
  *(_QWORD *)(v6 + 520) = 0;
  v336 = v6 + 528;
  OS::CF::String::String((OS::CF::String *)(v6 + 528), "/tmp");
  *(_WORD *)(v6 + 544) = 0;
  *(_QWORD *)(v6 + 552) = 10;
  *(_OWORD *)(v6 + 560) = 0u;
  *(_OWORD *)(v6 + 576) = 0u;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)(v6 + 592), "");
  *(_QWORD *)(v6 + 600) = &off_1E6977140;
  *(_QWORD *)(v6 + 608) = 0;
  *(_QWORD *)(v6 + 616) = 0xF424000000000;
  *(_DWORD *)(v6 + 624) = 0;
  *(_OWORD *)(v6 + 632) = 0u;
  *(_QWORD *)(v6 + 648) = 1986622068;
  *(_DWORD *)(v6 + 656) = 0;
  *(_QWORD *)(v6 + 704) = 0;
  *(_OWORD *)(v6 + 664) = 0u;
  *(_OWORD *)(v6 + 680) = 0u;
  *(_QWORD *)(v6 + 696) = &off_1E69A0F60;
  *(_QWORD *)(v6 + 720) = 0;
  *(_QWORD *)(v6 + 712) = &off_1E69A0F60;
  *(_QWORD *)(v6 + 736) = CFDataCreate(0, DUMMY_IMAGE, 4);
  *(_QWORD *)(v6 + 728) = &off_1E6977180;
  *(_DWORD *)(v6 + 744) = 0;
  *(_DWORD *)(v6 + 752) = 0;
  *(_QWORD *)(v6 + 784) = 0;
  *(_DWORD *)(v6 + 792) = 0;
  *(_QWORD *)(v6 + 800) = 0;
  *(_BYTE *)(v6 + 808) = 0;
  *(_BYTE *)(v6 + 816) = 0;
  *(_DWORD *)(v6 + 820) = 0;
  *(_QWORD *)(v6 + 768) = 0;
  *(_QWORD *)(v6 + 760) = 0;
  *(_DWORD *)(v6 + 776) = 0;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)&v474, *(CFDictionaryRef *)(a4 + 8), CFSTR("uuid"));
  v352 = v6;
  if (v475)
  {
    OS::CF::UntypedObject::operator=(v345, v475);
  }
  else
  {
    *(_QWORD *)&buf[8] = CFUUIDCreate(v7);
    *(_QWORD *)buf = &off_1E69771D0;
    v498.i64[1] = (uint64_t)CFUUIDCreateString(0, *(CFUUIDRef *)&buf[8]);
    v498.i64[0] = (uint64_t)&off_1E69A0F60;
    OS::CF::String::AsStdString((std::string *)__p, (uint64_t)&v498);
    if (__p[23] >= 0)
      v9 = __p;
    else
      v9 = *(_BYTE **)__p;
    v10 = CFStringCreateWithFormat(v7, 0, CFSTR("TestDevice_%s"), v9);
    OS::CF::UntypedObject::operator=(v345, (uint64_t)v10);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v498);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v472, *(CFDictionaryRef *)(a4 + 8), CFSTR("model"));
  if (v473)
    OS::CF::UntypedObject::operator=(v6 + 104, v473);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v470, *(CFDictionaryRef *)(a4 + 8), CFSTR("name"));
  if (v471)
  {
    OS::CF::UntypedObject::operator=(v343, v471);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v468, "ADS::Device::Device");
    std::string::basic_string[abi:ne180100]<0>(&v466, "name");
    if (v467 < 0)
      operator delete(v466);
    if (v469 < 0)
      operator delete(v468);
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v464, *(CFDictionaryRef *)(a4 + 8), CFSTR("serial number"));
  if (v465)
  {
    OS::CF::UntypedObject::operator=(v6 + 712, v465);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v462, "ADS::Device::Device");
    std::string::basic_string[abi:ne180100]<0>(&v460, "serial number");
    if (v461 < 0)
      operator delete(v460);
    if (v463 < 0)
      operator delete(v462);
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v458, *(CFDictionaryRef *)(a4 + 8), CFSTR("manufacturer"));
  if (v459)
    OS::CF::UntypedObject::operator=(v6 + 72, v459);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v456, *(CFDictionaryRef *)(a4 + 8), CFSTR("firmware version"));
  if (v457)
  {
    OS::CF::UntypedObject::operator=(v6 + 696, v457);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v454, "ADS::Device::Device");
    std::string::basic_string[abi:ne180100]<0>(&v452, "firmware version");
    if (v453 < 0)
      operator delete(v452);
    if (v455 < 0)
      operator delete(v454);
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v450, *(CFDictionaryRef *)(a4 + 8), CFSTR("clock latency"));
  if (v451)
  {
    *(_DWORD *)(v6 + 640) = OS::CF::Number::GetValue<unsigned int>(v451, 0);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v448, "ADS::Device::Device");
    std::string::basic_string[abi:ne180100]<0>(&v446, "clock latency");
    if (v447 < 0)
      operator delete(v446);
    if (v449 < 0)
      operator delete(v448);
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v444, *(CFDictionaryRef *)(a4 + 8), CFSTR("latency"));
  if (v445)
  {
    *(_DWORD *)(v6 + 644) = OS::CF::Number::GetValue<unsigned int>(v445, 0);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v442, "ADS::Device::Device");
    std::string::basic_string[abi:ne180100]<0>(&v440, "latency");
    if (v441 < 0)
      operator delete(v440);
    if (v443 < 0)
      operator delete(v442);
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(&v438, *(CFDictionaryRef *)(a4 + 8), CFSTR("hidden"));
  if (v439)
  {
    *(_BYTE *)(v6 + 482) = OS::CF::Boolean::AsBool(v439);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v436, "ADS::Device::Device");
    std::string::basic_string[abi:ne180100]<0>(&v434, "hidden");
    if (v435 < 0)
      operator delete(v434);
    if (v437 < 0)
      operator delete(v436);
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v432, *(CFDictionaryRef *)(a4 + 8), CFSTR("ring buffer frame size"));
  if (v433)
  {
    v11 = OS::CF::Number::GetValue<unsigned int>(v433, 0);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v430, "ADS::Device::Device");
    std::string::basic_string[abi:ne180100]<0>(&v428, "ring buffer frame size");
    if (v429 < 0)
      operator delete(v428);
    if (v431 < 0)
      operator delete(v430);
    v11 = 0x4000;
  }
  *(_DWORD *)(v6 + 652) = v11;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v426, *(CFDictionaryRef *)(a4 + 8), CFSTR("transport type"));
  if (v427)
  {
    *(_DWORD *)(v6 + 648) = OS::CF::Number::GetValue<unsigned int>(v427, 0);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v424, "ADS::Device::Device");
    std::string::basic_string[abi:ne180100]<0>(&v422, "transport type");
    if (v423 < 0)
      operator delete(v422);
    if (v425 < 0)
      operator delete(v424);
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v420, *(CFDictionaryRef *)(a4 + 8), CFSTR("clock domain"));
  if (v421)
  {
    *(_DWORD *)(v6 + 432) = OS::CF::Number::GetValue<unsigned int>(v421, 0);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v418, "ADS::Device::Device");
    std::string::basic_string[abi:ne180100]<0>(&v416, "clock domain");
    if (v417 < 0)
      operator delete(v416);
    if (v419 < 0)
      operator delete(v418);
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v414, *(CFDictionaryRef *)(a4 + 8), CFSTR("related devices"));
  v12 = v415;
  if (v415)
  {
    for (i = 0; i < (unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v12); ++i)
    {
      OS::CF::ArrayBase<__CFArray const*>::operator[]((const __CFArray *)buf, (uint64_t)v414, i);
      OS::CF::UntypedObject::As<OS::CF::Number>(__p, (uint64_t)buf);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
      if (*(_QWORD *)&__p[8])
      {
        v14 = OS::CF::Number::GetValue<unsigned int>(*(const __CFNumber **)&__p[8], 0);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>(v6 + 296, v14, v14);
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)__p);
      v12 = v415;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v412, "ADS::Device::Device");
    std::string::basic_string[abi:ne180100]<0>(&v410, "related devices");
    if (v411 < 0)
      operator delete(v410);
    if (v413 < 0)
      operator delete(v412);
  }
  *(_QWORD *)v347 = a4;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v408, *(CFDictionaryRef *)(a4 + 8), CFSTR("custom"));
  v15 = v409;
  if (v409)
  {
    for (j = 0; ; ++j)
    {
      if (j >= (unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v15))
        goto LABEL_284;
      OS::CF::ArrayBase<__CFArray const*>::operator[]((const __CFArray *)__p, (uint64_t)v408, j);
      OS::CF::UntypedObject::As<OS::CF::Dictionary>(&v494, (uint64_t)__p);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)__p);
      v17 = (const __CFDictionary *)cf;
      if (cf)
        break;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "ADS_Device.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 224;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::Device: Invalid custom property. Skipping and continuing.", __p, 0x12u);
      }
LABEL_283:
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v494);
      v15 = v409;
    }
    v406 = &off_1E69A0E58;
    CFRetain(cf);
    theDict = v17;
    v406 = &off_1E69A0DE0;
    CFRetain(v17);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v492, v17);
    v18 = (const __CFDictionary *)v492;
    if (v492)
    {
      CFRetain(v492);
      v19 = v18;
    }
    else
    {
      v19 = 0;
    }
    v482 = v19;
    GetFourCharacterCodeFromKey((applesauce::CF::NumberRef *)&v487, v19, "selector");
    if (v18)
      CFRelease(v19);
    v20 = (const __CFDictionary *)v492;
    if (v492)
      CFRetain(v492);
    v405[0] = v20;
    GetFourCharacterCodeFromKey((applesauce::CF::NumberRef *)v481, v20, "scope");
    if (v20)
      CFRelease(v20);
    v21 = (const __CFDictionary *)v492;
    if (v492)
      CFRetain(v492);
    v401 = v21;
    GetFourCharacterCodeFromKey((applesauce::CF::NumberRef *)&v403, v21, "element");
    if (v21)
      CFRelease(v21);
    v22 = v403;
    if (v487 && v481[0] && v403)
    {
      v23 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v487);
      if (!v481[0])
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v24 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v481[0]);
      if (!v403)
      {
        v328 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v328, "Could not construct");
        __cxa_throw(v328, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v25 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v403);
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)&v498, theDict, CFSTR("type"));
      if (v498.i64[1])
      {
        OS::CF::String::AsStdString((std::string *)__p, (uint64_t)&v498);
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(&v489, theDict, CFSTR("settable"));
        if (v489.i64[1])
        {
          v26 = OS::CF::Boolean::AsBool((const __CFBoolean *)v489.i64[1]);
        }
        else
        {
          v26 = 0;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ADS_Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 528;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::addCustomProperty: Missing value for 'settable.' Using default.", buf, 0x12u);
            v26 = 0;
          }
        }
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(&v478, theDict, CFSTR("requires set request"));
        if (v478.i64[1])
        {
          v27 = OS::CF::Boolean::AsBool((const __CFBoolean *)v478.i64[1]);
        }
        else
        {
          v27 = 0;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "ADS_Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 540;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::addCustomProperty: Missing value for 'requires set request.' Using default.", buf, 0x12u);
            v27 = 0;
          }
        }
        v28 = __p[23];
        if (__p[23] < 0)
          v28 = *(_QWORD *)&__p[8];
        switch(v28)
        {
          case 3:
            v29 = (unsigned __int16 *)__p;
            if (__p[23] < 0)
              v29 = *(unsigned __int16 **)__p;
            v30 = *v29;
            v31 = *((unsigned __int8 *)v29 + 2);
            v32 = v30 == 28265 && v31 == 116;
            if (!v32)
              goto LABEL_213;
            OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v484, theDict, CFSTR("data"));
            if (!v485)
            {
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
                break;
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "ADS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 554;
              v114 = MEMORY[0x1E0C81028];
              v115 = "%25s:%-5d  ADS::Device::addCustomProperty: 'data' for int type must be a number. Skipping this property.";
              goto LABEL_268;
            }
            OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)buf, theDict, CFSTR("supported values"));
            v33 = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v485, 0);
            v34 = operator new(0x58uLL);
            v34[1] = 0;
            v35 = v34 + 1;
            v34[2] = 0;
            *v34 = &off_1E6977290;
            *((_BYTE *)v34 + 32) = v26;
            *((_BYTE *)v34 + 33) = v27;
            v34[3] = off_1E69772E0;
            *(_QWORD *)((char *)v34 + 36) = v23 | (v24 << 32);
            *((_DWORD *)v34 + 15) = v33;
            v34[9] = 0;
            v34[10] = 0;
            v34[8] = 0;
            *((_DWORD *)v34 + 11) = v25;
            *((_DWORD *)v34 + 12) = v23;
            *(_QWORD *)((char *)v34 + 52) = 1918990199;
            v476[0] = v34 + 3;
            v476[1] = v34;
            *(_QWORD *)&v497 = v34 + 3;
            *((_QWORD *)&v497 + 1) = v34;
            do
              v36 = __ldxr(v35);
            while (__stxr(v36 + 1, v35));
            ADS::PropertyManager::AddProperty(v349, &v497);
            v37 = (std::__shared_weak_count *)*((_QWORD *)&v497 + 1);
            if (*((_QWORD *)&v497 + 1))
            {
              v38 = (unint64_t *)(*((_QWORD *)&v497 + 1) + 8);
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 - 1, v38));
              if (!v39)
              {
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
              }
            }
            v40 = (std::__shared_weak_count *)v476[1];
            if (v476[1])
            {
              v41 = (unint64_t *)((char *)v476[1] + 8);
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              goto LABEL_238;
            }
            goto LABEL_240;
          case 4:
          case 7:
          case 8:
          case 9:
            goto LABEL_213;
          case 5:
            v82 = *(_BYTE **)__p;
            if (__p[23] >= 0)
              v82 = __p;
            v83 = *(_DWORD *)v82;
            v84 = v82[4];
            if (v83 == 1634692198 && v84 == 116)
            {
              OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v484, theDict, CFSTR("data"));
              if (v485)
              {
                OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)buf, theDict, CFSTR("supported values"));
                v98 = OS::CF::Number::GetValue<float>((const __CFNumber *)v485);
                v99 = operator new(0x58uLL);
                v99[1] = 0;
                v100 = v99 + 1;
                v99[2] = 0;
                *v99 = &off_1E69773B8;
                *((_BYTE *)v99 + 32) = v26;
                *((_BYTE *)v99 + 33) = v27;
                v99[3] = off_1E6977408;
                *(_QWORD *)((char *)v99 + 36) = v23 | (v24 << 32);
                *((float *)v99 + 15) = v98;
                v99[9] = 0;
                v99[10] = 0;
                v99[8] = 0;
                *((_DWORD *)v99 + 11) = v25;
                *((_DWORD *)v99 + 12) = v23;
                *(_QWORD *)((char *)v99 + 52) = 1918990199;
                v476[0] = v99 + 3;
                v476[1] = v99;
                *(_QWORD *)&v497 = v99 + 3;
                *((_QWORD *)&v497 + 1) = v99;
                do
                  v101 = __ldxr(v100);
                while (__stxr(v101 + 1, v100));
                ADS::PropertyManager::AddProperty(v349, &v497);
                v102 = (std::__shared_weak_count *)*((_QWORD *)&v497 + 1);
                if (*((_QWORD *)&v497 + 1))
                {
                  v103 = (unint64_t *)(*((_QWORD *)&v497 + 1) + 8);
                  do
                    v104 = __ldaxr(v103);
                  while (__stlxr(v104 - 1, v103));
                  if (!v104)
                  {
                    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                    std::__shared_weak_count::__release_weak(v102);
                  }
                }
                v40 = (std::__shared_weak_count *)v476[1];
                if (v476[1])
                {
                  v105 = (unint64_t *)((char *)v476[1] + 8);
                  do
                    v42 = __ldaxr(v105);
                  while (__stlxr(v42 - 1, v105));
LABEL_238:
                  if (!v42)
                  {
                    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                    std::__shared_weak_count::__release_weak(v40);
                  }
                }
LABEL_240:
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
                break;
              }
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
                break;
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "ADS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 568;
              v114 = MEMORY[0x1E0C81028];
              v115 = "%25s:%-5d  ADS::Device::addCustomProperty: 'data' for float type must be a number. Skipping this property.";
              goto LABEL_268;
            }
            if (__p[23] >= 0)
              v86 = __p;
            else
              v86 = *(_BYTE **)__p;
            v87 = *(_DWORD *)v86;
            v88 = v86[4];
            if (v87 != 1634890337 || v88 != 121)
              goto LABEL_213;
            OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)&v484, theDict, CFSTR("data"));
            v106 = v485;
            if (!v485)
            {
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
                break;
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "ADS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 620;
              v114 = MEMORY[0x1E0C81028];
              v115 = "%25s:%-5d  ADS::Device::addCustomProperty: 'data' for array type must be an array. Skipping this property.";
              goto LABEL_268;
            }
            v107 = operator new(0x60uLL);
            v107[1] = 0;
            v108 = v107 + 1;
            v107[2] = 0;
            *v107 = &off_1E69774D0;
            v107[3] = &off_1E6977520;
            *((_BYTE *)v107 + 32) = v26;
            *((_BYTE *)v107 + 33) = v27;
            *(_QWORD *)((char *)v107 + 36) = v23 | (v24 << 32);
            *((_DWORD *)v107 + 11) = v25;
            v107[8] = CFRetain(v106);
            v107[9] = 0;
            v107[10] = 0;
            v107[11] = 0;
            *((_DWORD *)v107 + 12) = v23;
            *(_QWORD *)((char *)v107 + 52) = 1886155636;
            *(_QWORD *)buf = v107 + 3;
            *(_QWORD *)&buf[8] = v107;
            v476[0] = v107 + 3;
            v476[1] = v107;
            do
              v109 = __ldxr(v108);
            while (__stxr(v109 + 1, v108));
            v6 = v352;
            ADS::PropertyManager::AddProperty(v349, (__int128 *)v476);
            v110 = (std::__shared_weak_count *)v476[1];
            if (v476[1])
            {
              v111 = (unint64_t *)((char *)v476[1] + 8);
              do
                v112 = __ldaxr(v111);
              while (__stlxr(v112 - 1, v111));
              if (!v112)
              {
                ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                std::__shared_weak_count::__release_weak(v110);
              }
            }
            v54 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
            {
              v113 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
              do
                v56 = __ldaxr(v113);
              while (__stlxr(v56 - 1, v113));
              goto LABEL_252;
            }
            break;
          case 6:
            v57 = __p;
            if (__p[23] < 0)
              v57 = *(_BYTE **)__p;
            if (*(_DWORD *)v57 == 1769108595 && *((_WORD *)v57 + 2) == 26478)
            {
              OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)&v484, theDict, CFSTR("data"));
              v90 = v485;
              if (!v485)
              {
                if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
                  break;
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "ADS_Device.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 581;
                v114 = MEMORY[0x1E0C81028];
                v115 = "%25s:%-5d  ADS::Device::addCustomProperty: 'data' for string type must be a string. Skipping this property.";
                goto LABEL_268;
              }
              v91 = operator new(0x60uLL);
              v91[1] = 0;
              v92 = v91 + 1;
              v91[2] = 0;
              *v91 = &off_1E69774D0;
              v91[3] = &off_1E6977520;
              *((_BYTE *)v91 + 32) = v26;
              *((_BYTE *)v91 + 33) = v27;
              *(_QWORD *)((char *)v91 + 36) = v23 | (v24 << 32);
              *((_DWORD *)v91 + 11) = v25;
              v91[8] = CFRetain(v90);
              v91[9] = 0;
              v91[10] = 0;
              v91[11] = 0;
              *((_DWORD *)v91 + 12) = v23;
              *(_QWORD *)((char *)v91 + 52) = 1886155636;
              *(_QWORD *)buf = v91 + 3;
              *(_QWORD *)&buf[8] = v91;
              v476[0] = v91 + 3;
              v476[1] = v91;
              do
                v93 = __ldxr(v92);
              while (__stxr(v93 + 1, v92));
              v6 = v352;
              ADS::PropertyManager::AddProperty(v349, (__int128 *)v476);
              v94 = (std::__shared_weak_count *)v476[1];
              if (v476[1])
              {
                v95 = (unint64_t *)((char *)v476[1] + 8);
                do
                  v96 = __ldaxr(v95);
                while (__stlxr(v96 - 1, v95));
                if (!v96)
                {
                  ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                  std::__shared_weak_count::__release_weak(v94);
                }
              }
              v54 = *(std::__shared_weak_count **)&buf[8];
              if (*(_QWORD *)&buf[8])
              {
                v97 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                do
                  v56 = __ldaxr(v97);
                while (__stlxr(v56 - 1, v97));
                goto LABEL_252;
              }
            }
            else
            {
              v59 = *(_DWORD *)v57;
              v60 = *((unsigned __int16 *)v57 + 2);
              if (v59 != 1651340654 || v60 != 29285)
              {
LABEL_213:
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = "ADS_Device.cpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 645;
                  _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Unsupported custom property type. Skipping this property.", buf, 0x12u);
                }
                goto LABEL_270;
              }
              OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v484, theDict, CFSTR("data"));
              v62 = v485;
              if (!v485)
              {
                if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
                  break;
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "ADS_Device.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 594;
                v114 = MEMORY[0x1E0C81028];
                v115 = "%25s:%-5d  ADS::Device::addCustomProperty: 'data' for number type must be a number. Skipping this property.";
                goto LABEL_268;
              }
              v63 = operator new(0x60uLL);
              v63[1] = 0;
              v64 = v63 + 1;
              v63[2] = 0;
              *v63 = &off_1E69774D0;
              v63[3] = &off_1E6977520;
              *((_BYTE *)v63 + 32) = v26;
              *((_BYTE *)v63 + 33) = v27;
              *(_QWORD *)((char *)v63 + 36) = v23 | (v24 << 32);
              *((_DWORD *)v63 + 11) = v25;
              v63[8] = CFRetain(v62);
              v63[9] = 0;
              v63[10] = 0;
              v63[11] = 0;
              *((_DWORD *)v63 + 12) = v23;
              *(_QWORD *)((char *)v63 + 52) = 1886155636;
              *(_QWORD *)buf = v63 + 3;
              *(_QWORD *)&buf[8] = v63;
              v476[0] = v63 + 3;
              v476[1] = v63;
              do
                v65 = __ldxr(v64);
              while (__stxr(v65 + 1, v64));
              v6 = v352;
              ADS::PropertyManager::AddProperty(v349, (__int128 *)v476);
              v66 = (std::__shared_weak_count *)v476[1];
              if (v476[1])
              {
                v67 = (unint64_t *)((char *)v476[1] + 8);
                do
                  v68 = __ldaxr(v67);
                while (__stlxr(v68 - 1, v67));
                if (!v68)
                {
                  ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                  std::__shared_weak_count::__release_weak(v66);
                }
              }
              v54 = *(std::__shared_weak_count **)&buf[8];
              if (*(_QWORD *)&buf[8])
              {
                v69 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                do
                  v56 = __ldaxr(v69);
                while (__stlxr(v56 - 1, v69));
                goto LABEL_252;
              }
            }
            break;
          case 10:
            v70 = __p;
            if (__p[23] < 0)
              v70 = *(_BYTE **)__p;
            v71 = *(_QWORD *)v70;
            v72 = *((unsigned __int16 *)v70 + 4);
            if (v71 != 0x616E6F6974636964 || v72 != 31090)
              goto LABEL_213;
            OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Dictionary>((uint64_t)&v484, theDict, CFSTR("data"));
            v74 = v485;
            if (!v485)
            {
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
                break;
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "ADS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 606;
              v114 = MEMORY[0x1E0C81028];
              v115 = "%25s:%-5d  ADS::Device::addCustomProperty: 'data' for dictionary type must be a dictionary. Skippin"
                     "g this property.";
              goto LABEL_268;
            }
            v75 = operator new(0x60uLL);
            v75[1] = 0;
            v76 = v75 + 1;
            v75[2] = 0;
            *v75 = &off_1E69774D0;
            v75[3] = &off_1E6977520;
            *((_BYTE *)v75 + 32) = v26;
            *((_BYTE *)v75 + 33) = v27;
            *(_QWORD *)((char *)v75 + 36) = v23 | (v24 << 32);
            *((_DWORD *)v75 + 11) = v25;
            v75[8] = CFRetain(v74);
            v75[9] = 0;
            v75[10] = 0;
            v75[11] = 0;
            *((_DWORD *)v75 + 12) = v23;
            *(_QWORD *)((char *)v75 + 52) = 1886155636;
            *(_QWORD *)buf = v75 + 3;
            *(_QWORD *)&buf[8] = v75;
            v476[0] = v75 + 3;
            v476[1] = v75;
            do
              v77 = __ldxr(v76);
            while (__stxr(v77 + 1, v76));
            v6 = v352;
            ADS::PropertyManager::AddProperty(v349, (__int128 *)v476);
            v78 = (std::__shared_weak_count *)v476[1];
            if (v476[1])
            {
              v79 = (unint64_t *)((char *)v476[1] + 8);
              do
                v80 = __ldaxr(v79);
              while (__stlxr(v80 - 1, v79));
              if (!v80)
              {
                ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                std::__shared_weak_count::__release_weak(v78);
              }
            }
            v54 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
            {
              v81 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
              do
                v56 = __ldaxr(v81);
              while (__stlxr(v56 - 1, v81));
              goto LABEL_252;
            }
            break;
          default:
            if (v28 != 15)
              goto LABEL_213;
            v43 = (uint64_t *)__p;
            if (__p[23] < 0)
              v43 = *(uint64_t **)__p;
            v44 = *v43;
            v45 = *(uint64_t *)((char *)v43 + 7);
            if (v44 != 0x6C61766F69647561 || v45 != 0x65676E617265756CLL)
              goto LABEL_213;
            OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)&v484, theDict, CFSTR("data"));
            v47 = v485;
            if (v485)
            {
              v476[0] = &off_1E69A0E58;
              CFRetain(v485);
              v476[1] = (void *)v47;
              v476[0] = &off_1E69A0EA8;
              ADS::Device::getRangeOptFromArray((uint64_t)buf, (uint64_t)v476);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v476);
              if (buf[16])
              {
                v48 = operator new(0x68uLL);
                v48[1] = 0;
                v49 = v48 + 1;
                v48[2] = 0;
                *v48 = &off_1E69775E8;
                *((_BYTE *)v48 + 32) = v26;
                *((_BYTE *)v48 + 33) = v27;
                *(_QWORD *)((char *)v48 + 36) = v23 | (v24 << 32);
                v48[3] = off_1E6977638;
                *((_OWORD *)v48 + 4) = *(_OWORD *)buf;
                v48[11] = 0;
                v48[12] = 0;
                v48[10] = 0;
                *((_DWORD *)v48 + 11) = v25;
                *((_DWORD *)v48 + 12) = v23;
                *(_QWORD *)((char *)v48 + 52) = 1918990199;
                *(_QWORD *)&v497 = v48 + 3;
                *((_QWORD *)&v497 + 1) = v48;
                *(_QWORD *)&v496 = v48 + 3;
                *((_QWORD *)&v496 + 1) = v48;
                do
                  v50 = __ldxr(v49);
                while (__stxr(v50 + 1, v49));
                ADS::PropertyManager::AddProperty(v349, &v496);
                v51 = (std::__shared_weak_count *)*((_QWORD *)&v496 + 1);
                if (*((_QWORD *)&v496 + 1))
                {
                  v52 = (unint64_t *)(*((_QWORD *)&v496 + 1) + 8);
                  do
                    v53 = __ldaxr(v52);
                  while (__stlxr(v53 - 1, v52));
                  if (!v53)
                  {
                    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                    std::__shared_weak_count::__release_weak(v51);
                  }
                }
                v54 = (std::__shared_weak_count *)*((_QWORD *)&v497 + 1);
                if (*((_QWORD *)&v497 + 1))
                {
                  v55 = (unint64_t *)(*((_QWORD *)&v497 + 1) + 8);
                  do
                    v56 = __ldaxr(v55);
                  while (__stlxr(v56 - 1, v55));
LABEL_252:
                  if (!v56)
                  {
                    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                    std::__shared_weak_count::__release_weak(v54);
                  }
                }
              }
            }
            else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "ADS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 632;
              v114 = MEMORY[0x1E0C81028];
              v115 = "%25s:%-5d  ADS::Device::addCustomProperty: 'data' for array type must be an array. Skipping this property.";
LABEL_268:
              _os_log_impl(&dword_1B57BA000, v114, OS_LOG_TYPE_DEFAULT, v115, buf, 0x12u);
            }
            break;
        }
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v484);
LABEL_270:
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v478);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v489);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "ADS_Device.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 519;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::addCustomProperty: Cannot create custom property of unknown type. Skipping this property.", __p, 0x12u);
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v498);
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
LABEL_274:
        if (v22)
          CFRelease(v22);
        if (v481[0])
          CFRelease(v481[0]);
        if (v487)
          CFRelease(v487);
        if (v492)
          CFRelease(v492);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v406);
        goto LABEL_283;
      }
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = "ADS_Device.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 511;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::addCustomProperty: Invalid address for custom property. Skipping this property.", __p, 0x12u);
    }
    v22 = v403;
    goto LABEL_274;
  }
LABEL_284:
  v351 = (uint64_t **)(v6 + 336);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v405, *(CFDictionaryRef *)(*(_QWORD *)v347 + 8), CFSTR("type"));
  if (!v405[1])
    goto LABEL_301;
  OS::CF::String::AsStdString((std::string *)__p, (uint64_t)v405);
  v116 = __p[23];
  if (__p[23] < 0)
    v116 = *(_QWORD *)&__p[8];
  if (v116 != 5)
  {
    v121 = 0;
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_297;
    goto LABEL_300;
  }
  v117 = *(_BYTE **)__p;
  if (__p[23] >= 0)
    v117 = __p;
  v118 = *(_DWORD *)v117;
  v119 = v117[4];
  v121 = v118 == 1668246627 && v119 == 107;
  if ((__p[23] & 0x80000000) != 0)
  {
LABEL_300:
    operator delete(*(void **)__p);
    if (v121)
      goto LABEL_298;
LABEL_301:
    if (*(_DWORD *)(v6 + 12) == 1633905771)
      goto LABEL_302;
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)&v403, *(CFDictionaryRef *)(*(_QWORD *)v347 + 8), CFSTR("streams"));
    v126 = v404;
    if (v404)
    {
      v127 = 0;
      v339 = (unsigned int *)(v6 + 492);
      *(_QWORD *)v338 = v6 + 496;
      v128 = MEMORY[0x1E0C81028];
      while (1)
      {
        if (v127 >= (unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v126))
          goto LABEL_420;
        OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)&v401, (uint64_t)&v403, v127);
        v399 = &off_1E69A0E58;
        v129 = (const __CFDictionary *)v402;
        if (v402)
          CFRetain(v402);
        v400 = v129;
        v399 = &off_1E69A0DE0;
        if (*(_DWORD *)(v6 + 12) == 1633905771)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__p = 136315394;
            *(_QWORD *)&__p[4] = "ADS_Device.cpp";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 786;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::createAndAddStream: Clock devices cannot have streams.", __p, 0x12u);
          }
          v327 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v327 = &off_1E69A1B30;
          v327[2] = 1970171760;
        }
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(&v496, v129, CFSTR("is input"));
        if (*((_QWORD *)&v496 + 1))
          break;
        if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = "ADS_Device.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 792;
          _os_log_impl(&dword_1B57BA000, v128, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddStream: Stream could not be created - 'is input' missing or invalid.", __p, 0x12u);
        }
LABEL_412:
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v496);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v399);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v401);
        ++v127;
        v126 = v404;
      }
      v350 = OS::CF::Boolean::AsBool(*((const __CFBoolean **)&v496 + 1));
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Dictionary>((uint64_t)&v494, v400, CFSTR("basic description"));
      v130 = (const __CFNumber *)cf;
      if (cf)
      {
        v492 = &off_1E69A0E58;
        CFRetain(cf);
        v493 = v130;
        v492 = &off_1E69A0DE0;
        ADS::Device::ASBDfromDictionary((uint64_t)&v498, (uint64_t)&v492);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v492);
        v489 = v498;
        v490 = v499;
        v491 = v500;
        if (ADS::Device::isASBDValid(&v489, v131))
        {
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)&v487, v400, CFSTR("supported formats"));
          v132 = v488;
          if (v488)
          {
            v133 = 0;
            v485 = 0;
            v486 = 0;
            v484 = &v485;
            while (v133 < (unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v132))
            {
              memset(v504, 0, sizeof(v504));
              memset(__p, 0, sizeof(__p));
              OS::CF::ArrayBase<__CFArray const*>::operator[]((const __CFArray *)v481, (uint64_t)&v487, v133);
              OS::CF::UntypedObject::As<OS::CF::Dictionary>(&v482, (uint64_t)v481);
              *(_QWORD *)buf = &off_1E69A0E58;
              v134 = v483;
              if (v483)
                CFRetain(v483);
              *(_QWORD *)&buf[8] = v134;
              *(_QWORD *)buf = &off_1E69A0DE0;
              ADS::Device::ASBDfromDictionary((uint64_t)__p, (uint64_t)buf);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
              OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v476, (CFDictionaryRef)v483, CFSTR("min sample rate"));
              OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v497, (CFDictionaryRef)v483, CFSTR("max sample rate"));
              if (v476[1]
                && OS::CF::Number::GetValue<float>((const __CFNumber *)v476[1]) > 0.0
                && *((_QWORD *)&v497 + 1)
                && OS::CF::Number::GetValue<float>(*((const __CFNumber **)&v497 + 1)) > 0.0)
              {
                *(double *)&v504[8] = OS::CF::Number::GetValue<float>((const __CFNumber *)v476[1]);
                *(double *)&v504[16] = OS::CF::Number::GetValue<float>(*((const __CFNumber **)&v497 + 1));
              }
              else
              {
                *(_QWORD *)&v504[16] = *(_QWORD *)__p;
                *(_QWORD *)&v504[8] = *(_QWORD *)__p;
              }
              *(_QWORD *)__p = 0;
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v497);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v476);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v482);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v481);
              v478 = *(int16x8_t *)__p;
              v479 = *(_OWORD *)&__p[16];
              v480 = *(_QWORD *)v504;
              if (ADS::Device::isASBDValid(&v478, v135))
              {
                *(_OWORD *)buf = *(_OWORD *)__p;
                *(_OWORD *)&buf[16] = *(_OWORD *)&__p[16];
                *(_QWORD *)v502 = *(_QWORD *)v504;
                *(_OWORD *)&v502[8] = *(_OWORD *)&v504[8];
                v136 = std::__tree<CAStreamRangedDescription,CAStreamRangedDescription_ReverseSort,std::allocator<CAStreamRangedDescription>>::__find_equal<CAStreamRangedDescription>((uint64_t)&v484, v476, (CAStreamRangedDescription *)buf);
                if (!*v136)
                {
                  v137 = v136;
                  v138 = operator new(0x58uLL);
                  v139 = *(_OWORD *)&__p[16];
                  v138[2] = *(_OWORD *)__p;
                  v138[3] = v139;
                  *((_QWORD *)v138 + 8) = *(_QWORD *)v504;
                  *(_OWORD *)((char *)v138 + 72) = *(_OWORD *)&v504[8];
                  v140 = v476[0];
                  *(_QWORD *)v138 = 0;
                  *((_QWORD *)v138 + 1) = 0;
                  *((_QWORD *)v138 + 2) = v140;
                  *v137 = v138;
                  if (*v484)
                  {
                    v484 = (CFTypeRef *)*v484;
                    v138 = (_OWORD *)*v137;
                  }
                  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v485, (uint64_t *)v138);
                  ++v486;
                }
              }
              else if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
              {
                CA::StreamDescription::AsString((CA::StreamDescription *)v476, &v498, v141, v142);
                v143 = v476;
                if (v477 < 0)
                  v143 = (void **)v476[0];
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "ADS_Device.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 831;
                *(_WORD *)&buf[18] = 2080;
                *(_QWORD *)&buf[20] = v143;
                _os_log_impl(&dword_1B57BA000, v128, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddStream: Skipping supported format %s for this stream", buf, 0x1Cu);
                if (v477 < 0)
                  operator delete(v476[0]);
              }
              ++v133;
              v132 = v488;
            }
            v346 = v127;
            OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v476, v400, CFSTR("terminal type"));
            if (v476[1])
            {
              v146 = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v476[1], 0);
            }
            else
            {
              v146 = 0;
              if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__p = 136315394;
                *(_QWORD *)&__p[4] = "ADS_Device.cpp";
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = 841;
                _os_log_impl(&dword_1B57BA000, v128, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddStream: 'terminal type' missing or invalid. Using default value.", __p, 0x12u);
                v146 = 0;
              }
            }
            OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(&v497, v400, CFSTR("is reference"));
            v147 = (ADS::ObjectManager *)*((_QWORD *)&v497 + 1);
            if (*((_QWORD *)&v497 + 1))
            {
              v147 = OS::CF::Boolean::AsBool(*((const __CFBoolean **)&v497 + 1));
              v148 = (char)v147;
              *(_BYTE *)(v6 + 816) = (_BYTE)v147;
            }
            else
            {
              v148 = 0;
            }
            NextObjectID = ADS::ObjectManager::GetNextObjectID(v147);
            if (v350)
              v149 = 492;
            else
              v149 = 496;
            if (v350)
              v150 = v339;
            else
              v150 = *(unsigned int **)v338;
            v151 = operator new();
            v152 = (const AudioStreamRangedDescription *)*(unsigned int *)(v352 + 8);
            std::set<CAStreamRangedDescription,CAStreamRangedDescription_ReverseSort,std::allocator<CAStreamRangedDescription>>::set[abi:ne180100]((uint64_t)buf, &v484, v153);
            *(int16x8_t *)__p = v498;
            *(_OWORD *)&__p[16] = v499;
            *(_QWORD *)v504 = v500;
            v154 = atomic_load((unsigned int *)(v352 + v149));
            ADS::Stream::Stream(v151, NextObjectID, v152, buf, (__int128 *)__p, v350, v146, v154, v148);
            std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)&buf[8]);
            v156 = HIDWORD(v499);
            do
              v157 = __ldaxr(v150);
            while (__stlxr(v157 + v156, v150));
            ADS::ObjectManager::MapObject((ADS::ObjectManager *)NextObjectID, v151, v155);
            if (v350)
            {
              v6 = v352;
              v159 = *(unsigned int **)(v352 + 368);
              v158 = *(_QWORD *)(v352 + 376);
              v128 = MEMORY[0x1E0C81028];
              v127 = v346;
              if ((unint64_t)v159 >= v158)
              {
                v164 = (unsigned int *)*v342;
                v165 = ((char *)v159 - (_BYTE *)*v342) >> 2;
                v166 = v165 + 1;
                if ((unint64_t)(v165 + 1) >> 62)
                  goto LABEL_818;
                v167 = v158 - (_QWORD)v164;
                if (v167 >> 1 > v166)
                  v166 = v167 >> 1;
                v168 = (unint64_t)v167 >= 0x7FFFFFFFFFFFFFFCLL;
                v169 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v168)
                  v169 = v166;
                if (v169)
                {
                  v169 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v169);
                  v6 = v352;
                  v164 = *(unsigned int **)(v352 + 360);
                  v159 = *(unsigned int **)(v352 + 368);
                  v127 = v346;
                }
                else
                {
                  v170 = 0;
                }
                v177 = (unsigned int *)(v169 + 4 * v165);
                *v177 = NextObjectID;
                v160 = v177 + 1;
                while (v159 != v164)
                {
                  v178 = *--v159;
                  *--v177 = v178;
                }
                *(_QWORD *)(v6 + 360) = v177;
                *(_QWORD *)(v6 + 368) = v160;
                *(_QWORD *)(v6 + 376) = v169 + 4 * v170;
                if (v164)
                  operator delete(v164);
              }
              else
              {
                *v159 = NextObjectID;
                v160 = v159 + 1;
              }
              *(_QWORD *)(v6 + 368) = v160;
            }
            else
            {
              v6 = v352;
              v162 = *(unsigned int **)(v352 + 392);
              v161 = *(_QWORD *)(v352 + 400);
              v128 = MEMORY[0x1E0C81028];
              v127 = v346;
              if ((unint64_t)v162 >= v161)
              {
                v171 = *(unsigned int **)(v352 + 384);
                v172 = v162 - v171;
                v173 = v172 + 1;
                if ((unint64_t)(v172 + 1) >> 62)
LABEL_818:
                  std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                v174 = v161 - (_QWORD)v171;
                if (v174 >> 1 > v173)
                  v173 = v174 >> 1;
                v168 = (unint64_t)v174 >= 0x7FFFFFFFFFFFFFFCLL;
                v175 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v168)
                  v175 = v173;
                if (v175)
                {
                  v175 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v175);
                  v6 = v352;
                  v171 = *(unsigned int **)(v352 + 384);
                  v162 = *(unsigned int **)(v352 + 392);
                  v127 = v346;
                }
                else
                {
                  v176 = 0;
                }
                v179 = (unsigned int *)(v175 + 4 * v172);
                *v179 = NextObjectID;
                v163 = v179 + 1;
                while (v162 != v171)
                {
                  v180 = *--v162;
                  *--v179 = v180;
                }
                *(_QWORD *)(v6 + 384) = v179;
                *(_QWORD *)(v6 + 392) = v163;
                *(_QWORD *)(v6 + 400) = v175 + 4 * v176;
                if (v171)
                  operator delete(v171);
              }
              else
              {
                *v162 = NextObjectID;
                v163 = v162 + 1;
              }
              *(_QWORD *)(v6 + 392) = v163;
            }
            OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v497);
            OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v476);
            std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v485);
          }
          else if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__p = 136315394;
            *(_QWORD *)&__p[4] = "ADS_Device.cpp";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 816;
            _os_log_impl(&dword_1B57BA000, v128, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddStream: Stream could not be created - 'supported formats' missing or invalid.", __p, 0x12u);
          }
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v487);
          goto LABEL_411;
        }
        if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = "ADS_Device.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 808;
          v144 = v128;
          v145 = "%25s:%-5d  ADS::Device::createAndAddStream: Stream could not be created - bad ASBD.";
          goto LABEL_360;
        }
      }
      else if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "ADS_Device.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 801;
        v144 = v128;
        v145 = "%25s:%-5d  ADS::Device::createAndAddStream: Stream could not be created - 'basic description' missing or invalid.";
LABEL_360:
        _os_log_impl(&dword_1B57BA000, v144, OS_LOG_TYPE_DEFAULT, v145, __p, 0x12u);
      }
LABEL_411:
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v494);
      goto LABEL_412;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = "ADS_Device.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 249;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::Device: No streams to instantiate", __p, 0x12u);
    }
LABEL_420:
    if (*(_DWORD *)(v6 + 12) == 1633905771)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "ADS_Device.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 1192;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::updateSupportedSampleRates: clock devices do not have streams to populate the list of supported sample rates.", __p, 0x12u);
      }
      v330 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v330 = &off_1E69A1B30;
      v330[2] = 1970171760;
    }
    *(_QWORD *)&buf[16] = 0;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)buf = &buf[8];
    memset(__p, 0, 24);
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, *(const void **)(v6 + 360), *(_QWORD *)(v6 + 368), (uint64_t)(*(_QWORD *)(v6 + 368) - *(_QWORD *)(v6 + 360)) >> 2);
    *(_QWORD *)v504 = 0;
    *(_QWORD *)&__p[24] = 0;
    *(_QWORD *)&v504[8] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p[24], *(const void **)(v6 + 384), *(_QWORD *)(v6 + 392), (uint64_t)(*(_QWORD *)(v6 + 392) - *(_QWORD *)(v6 + 384)) >> 2);
    v182 = 0;
    v183 = 0;
    do
    {
      v184 = v182;
      v498 = 0uLL;
      *(_QWORD *)&v499 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v498, *(const void **)&__p[24 * v183], *(_QWORD *)&__p[24 * v183 + 8], (uint64_t)(*(_QWORD *)&__p[24 * v183 + 8] - *(_QWORD *)&__p[24 * v183]) >> 2);
      v185 = v498;
      for (k = (unsigned int *)v498.i64[0]; k != (unsigned int *)v185.i64[1]; ++k)
      {
        v187 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*k);
        v489.i64[1] = 0;
        *(_QWORD *)&v490 = 0;
        v489.i64[0] = (uint64_t)&v489.i64[1];
        v188 = (_QWORD *)*((_QWORD *)v187 + 13);
        if (v188 != (_QWORD *)((char *)v187 + 112))
        {
          do
          {
            v478 = *(int16x8_t *)(v188 + 9);
            std::__tree<ADS::AudioValueRangeWrapper>::__emplace_unique_key_args<ADS::AudioValueRangeWrapper,ADS::AudioValueRangeWrapper>(v489.i64, &v478, *(double *)v478.i64, *(double *)&v478.i64[1]);
            v189 = (_QWORD *)v188[1];
            if (v189)
            {
              do
              {
                v190 = v189;
                v189 = (_QWORD *)*v189;
              }
              while (v189);
            }
            else
            {
              do
              {
                v190 = (_QWORD *)v188[2];
                v32 = *v190 == (_QWORD)v188;
                v188 = v190;
              }
              while (!v32);
            }
            v188 = v190;
          }
          while (v190 != (_QWORD *)((char *)v187 + 112));
          v191 = (int16x8_t *)v489.i64[0];
          if ((unint64_t *)v489.i64[0] != &v489.u64[1])
          {
            do
            {
              v478 = v191[2];
              std::__tree<ADS::AudioValueRangeWrapper>::__emplace_unique_key_args<ADS::AudioValueRangeWrapper,ADS::AudioValueRangeWrapper>((uint64_t *)buf, &v478, *(double *)v478.i64, *(double *)&v478.i64[1]);
              v192 = (int16x8_t *)v191->i64[1];
              if (v192)
              {
                do
                {
                  v193 = v192;
                  v192 = (int16x8_t *)v192->i64[0];
                }
                while (v192);
              }
              else
              {
                do
                {
                  v193 = (int16x8_t *)v191[1].i64[0];
                  v32 = v193->i64[0] == (_QWORD)v191;
                  v191 = v193;
                }
                while (!v32);
              }
              v191 = v193;
            }
            while (v193 != (int16x8_t *)&v489.u64[1]);
          }
        }
        std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)v489.i64[1]);
        ADS::ObjectManager::ReleaseObject(v187, v194);
        v6 = v352;
      }
      if (v185.i64[0])
        operator delete((void *)v185.i64[0]);
      v182 = 1;
      v183 = 1;
    }
    while ((v184 & 1) == 0);
    v195 = 0;
    v181 = *(_QWORD *)v347;
    do
    {
      v196 = *(void **)&__p[v195 + 24];
      if (v196)
      {
        *(_QWORD *)&__p[v195 + 32] = v196;
        operator delete(v196);
      }
      v195 -= 24;
    }
    while (v195 != -48);
    if (v351 == (uint64_t **)buf)
    {
LABEL_477:
      std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)&buf[8]);
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)buf, *(CFDictionaryRef *)(*(_QWORD *)v347 + 8), CFSTR("preferred channel stereo L"));
      if (*(_QWORD *)&buf[8])
      {
        *v344 = OS::CF::Number::GetValue<unsigned int>(*(const __CFNumber **)&buf[8], 0);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v397, "ADS::Device::Device");
        std::string::basic_string[abi:ne180100]<0>(&v395, "preferred channel stereo L");
        if (v396 < 0)
          operator delete(v395);
        if (v398 < 0)
          operator delete(v397);
      }
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v498, *(CFDictionaryRef *)(*(_QWORD *)v347 + 8), CFSTR("preferred channel stereo R"));
      if (v498.i64[1])
      {
        *(_DWORD *)(v6 + 488) = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v498.i64[1], 0);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v393, "ADS::Device::Device");
        std::string::basic_string[abi:ne180100]<0>(&v391, "preferred channel stereo R");
        if (v392 < 0)
          operator delete(v391);
        if (v394 < 0)
          operator delete(v393);
      }
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v489, *(CFDictionaryRef *)(*(_QWORD *)v347 + 8), CFSTR("safety offset"));
      if (v489.i64[1])
      {
        *(_DWORD *)(v6 + 656) = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v489.i64[1], 0);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v389, "ADS::Device::Device");
        std::string::basic_string[abi:ne180100]<0>(&v387, "safety offset");
        if (v388 < 0)
          operator delete(v387);
        if (v390 < 0)
          operator delete(v389);
      }
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(&v478, *(CFDictionaryRef *)(*(_QWORD *)v347 + 8), CFSTR("can be content default"));
      if (v478.i64[1])
      {
        *(_BYTE *)(v6 + 480) = OS::CF::Boolean::AsBool((const __CFBoolean *)v478.i64[1]);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v385, "ADS::Device::Device");
        std::string::basic_string[abi:ne180100]<0>(&v383, "can be content default");
        if (v384 < 0)
          operator delete(v383);
        if (v386 < 0)
          operator delete(v385);
      }
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(&v484, *(CFDictionaryRef *)(*(_QWORD *)v347 + 8), CFSTR("can be system default"));
      if (v485)
      {
        *(_BYTE *)(v6 + 481) = OS::CF::Boolean::AsBool((const __CFBoolean *)v485);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v381, "ADS::Device::Device");
        std::string::basic_string[abi:ne180100]<0>(&v379, "can be system default");
        if (v380 < 0)
          operator delete(v379);
        if (v382 < 0)
          operator delete(v381);
      }
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(v476, *(CFDictionaryRef *)(*(_QWORD *)v347 + 8), CFSTR("supports catchup mode"));
      if (v476[1])
      {
        v211 = OS::CF::Boolean::AsBool((const __CFBoolean *)v476[1]);
        *(_DWORD *)(v6 + 616) = v211;
        if (!v211)
          goto LABEL_522;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v377, "ADS::Device::Device");
        std::string::basic_string[abi:ne180100]<0>(&v375, "supports catchup mode");
        if (v376 < 0)
          operator delete(v375);
        if (v378 < 0)
          operator delete(v377);
        if (!*(_DWORD *)(v6 + 616))
        {
LABEL_522:
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)&v497, *(CFDictionaryRef *)(*(_QWORD *)v347 + 8), CFSTR("audio out directory"));
          if (!*((_QWORD *)&v497 + 1))
          {
            std::string::basic_string[abi:ne180100]<0>(&v369, "ADS::Device::Device");
            std::string::basic_string[abi:ne180100]<0>(&v367, "audio out directory");
            if (v368 < 0)
              operator delete(v367);
            if (v370 < 0)
              operator delete(v369);
            goto LABEL_536;
          }
          OS::CF::String::AsStdString((std::string *)__p, (uint64_t)&v497);
          if (__p[23] >= 0)
            v212 = __p;
          else
            v212 = *(const char **)__p;
          v213 = access(v212, 2);
          v214 = v213;
          if ((__p[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)__p);
            if (v214)
            {
LABEL_528:
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__p = 136315394;
                *(_QWORD *)&__p[4] = "ADS_Device.cpp";
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = 339;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Provided filepath for audio out is not writeable. Reverting to default.", __p, 0x12u);
              }
              goto LABEL_536;
            }
          }
          else if (v213)
          {
            goto LABEL_528;
          }
          OS::CF::UntypedObject::operator=(v336, *((CFTypeRef *)&v497 + 1));
LABEL_536:
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v497);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v476);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v484);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v478);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v489);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v498);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v403);
          goto LABEL_537;
        }
      }
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)__p, *(CFDictionaryRef *)(*(_QWORD *)v347 + 8), CFSTR("frames to save"));
      if (*(_QWORD *)&__p[8])
      {
        *(_DWORD *)(v6 + 620) = OS::CF::Number::GetValue<unsigned int>(*(const __CFNumber **)&__p[8], 0);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v373, "ADS::Device::Device");
        std::string::basic_string[abi:ne180100]<0>(&v371, "frames to save");
        if (v372 < 0)
          operator delete(v371);
        if (v374 < 0)
          operator delete(v373);
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)__p);
      goto LABEL_522;
    }
    v197 = *(_BYTE **)buf;
    if (*(_QWORD *)(v6 + 352))
    {
      v198 = *v351;
      *v351 = v337;
      *(_QWORD *)(*v337 + 16) = 0;
      *v337 = 0;
      v337[1] = 0;
      if (v198[1])
        v199 = (uint64_t *)v198[1];
      else
        v199 = v198;
      if (v199)
      {
        v200 = std::__tree<DSP_Host_Types::AudioProcessingType>::_DetachedTreeCache::__detach_next((uint64_t)v199);
        if (v197 == &buf[8])
        {
          v197 = &buf[8];
        }
        else
        {
          v201 = v197;
          do
          {
            v202 = v199;
            v199 = v200;
            *((_OWORD *)v202 + 2) = *((_OWORD *)v201 + 2);
            leaf_high = (uint64_t **)std::__tree<ADS::AudioValueRangeWrapper>::__find_leaf_high((uint64_t)v351, __p, *((double *)v202 + 4), *((double *)v202 + 5));
            std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(v351, *(uint64_t *)__p, leaf_high, v202);
            if (v200)
              v200 = std::__tree<DSP_Host_Types::AudioProcessingType>::_DetachedTreeCache::__detach_next((uint64_t)v200);
            v204 = (_QWORD *)*((_QWORD *)v201 + 1);
            if (v204)
            {
              do
              {
                v197 = v204;
                v204 = (_QWORD *)*v204;
              }
              while (v204);
            }
            else
            {
              do
              {
                v197 = (_BYTE *)*((_QWORD *)v201 + 2);
                v32 = *(_QWORD *)v197 == (_QWORD)v201;
                v201 = v197;
              }
              while (!v32);
            }
            if (!v199)
              break;
            v201 = v197;
          }
          while (v197 != &buf[8]);
        }
        std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v199);
        if (!v200)
          goto LABEL_470;
        for (m = (uint64_t *)v200[2]; m; m = (uint64_t *)m[2])
          v200 = m;
        v205 = v200;
      }
      else
      {
        v205 = 0;
      }
      std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v205);
    }
LABEL_470:
    if (v197 != &buf[8])
    {
      do
      {
        v207 = operator new(0x30uLL);
        *((_OWORD *)v207 + 2) = *((_OWORD *)v197 + 2);
        v208 = (uint64_t **)std::__tree<ADS::AudioValueRangeWrapper>::__find_leaf_high((uint64_t)v351, __p, *((double *)v207 + 4), *((double *)v207 + 5));
        std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(v351, *(uint64_t *)__p, v208, (uint64_t *)v207);
        v209 = (_QWORD *)*((_QWORD *)v197 + 1);
        if (v209)
        {
          do
          {
            v210 = v209;
            v209 = (_QWORD *)*v209;
          }
          while (v209);
        }
        else
        {
          do
          {
            v210 = (_BYTE *)*((_QWORD *)v197 + 2);
            v32 = *(_QWORD *)v210 == (_QWORD)v197;
            v197 = v210;
          }
          while (!v32);
        }
        v197 = v210;
      }
      while (v210 != &buf[8]);
    }
    goto LABEL_477;
  }
LABEL_297:
  if (!v121)
    goto LABEL_301;
LABEL_298:
  *(_DWORD *)(v6 + 12) = 1633905771;
LABEL_302:
  *(_WORD *)(v6 + 480) = 0;
  *(_QWORD *)v344 = 0;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)__p, *(CFDictionaryRef *)(*(_QWORD *)v347 + 8), CFSTR("supported sample rates"));
  v122 = *(const __CFArray **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    for (n = 0; n < (unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v122); ++n)
    {
      OS::CF::ArrayBase<__CFArray const*>::operator[]((const __CFArray *)&v498, (uint64_t)__p, n);
      OS::CF::UntypedObject::As<OS::CF::Dictionary>(buf, (uint64_t)&v498);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v498);
      if (*(_QWORD *)&buf[8])
      {
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v498, *(CFDictionaryRef *)&buf[8], CFSTR("min sample rate"));
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v489, *(CFDictionaryRef *)&buf[8], CFSTR("max sample rate"));
        if (v498.i64[1] && v489.i64[1])
        {
          v124 = OS::CF::Number::GetValue<float>((const __CFNumber *)v498.i64[1]);
          v125 = OS::CF::Number::GetValue<float>((const __CFNumber *)v489.i64[1]);
          *(double *)v478.i64 = v124;
          *(double *)&v478.i64[1] = v125;
          std::__tree<ADS::AudioValueRangeWrapper>::__emplace_unique_key_args<ADS::AudioValueRangeWrapper,ADS::AudioValueRangeWrapper>((uint64_t *)v351, &v478, v124, v125);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v365, "ADS::Device::Device");
          std::string::basic_string[abi:ne180100]<0>(&v363, "supported sample rate range (clock device)");
          if (v364 < 0)
            operator delete(v363);
          if (v366 < 0)
            operator delete(v365);
        }
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v489);
      }
      else
      {
        OS::CF::ArrayBase<__CFArray const*>::operator[]((const __CFArray *)&v489, (uint64_t)__p, n);
        OS::CF::UntypedObject::As<OS::CF::Number>(&v498, (uint64_t)&v489);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v489);
        if (v498.i64[1])
        {
          *(double *)v489.i64 = OS::CF::Number::GetValue<float>((const __CFNumber *)v498.i64[1]);
          v489.i64[1] = v489.i64[0];
          std::__tree<ADS::AudioValueRangeWrapper>::__emplace_unique_key_args<ADS::AudioValueRangeWrapper,ADS::AudioValueRangeWrapper>((uint64_t *)v351, &v489, *(double *)v489.i64, *(double *)v489.i64);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v361, "ADS::Device::Device");
          std::string::basic_string[abi:ne180100]<0>(&v359, "supported sample rate (clock device)");
          if (v360 < 0)
            operator delete(v359);
          if (v362 < 0)
            operator delete(v361);
        }
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v498);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
      v122 = *(const __CFArray **)&__p[8];
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v357, "ADS::Device::Device");
    std::string::basic_string[abi:ne180100]<0>(&v355, "supported sample rates (clock device)");
    if (v356 < 0)
      operator delete(v355);
    if (v358 < 0)
      operator delete(v357);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)__p);
  v181 = *(_QWORD *)v347;
LABEL_537:
  if (*(_QWORD *)(v6 + 352))
  {
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)buf, *(CFDictionaryRef *)(v181 + 8), CFSTR("sample rate"));
    if (*(_QWORD *)&buf[8])
      v215 = OS::CF::Number::GetValue<float>(*(const __CFNumber **)&buf[8]);
    else
      v215 = 0.0;
    if (!ADS::Device::isSupportedSampleRate((ADS::Device *)v6, v215))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "ADS_Device.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 406;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::Device: No valid, supported sample rate provided. Using default.", __p, 0x12u);
      }
      v215 = 44100.0;
      if (!ADS::Device::isSupportedSampleRate((ADS::Device *)v6, 44100.0))
        v215 = *((double *)*v351 + 4);
    }
    v216 = operator new();
    *(_DWORD *)(v216 + 8) = *(_DWORD *)(v6 + 8);
    *(_QWORD *)(v216 + 12) = 0x676C6F626E737274;
    *(_DWORD *)(v216 + 20) = 0;
    *(_QWORD *)(v216 + 48) = 0;
    *(_QWORD *)v216 = &off_1E6977258;
    *(double *)(v216 + 56) = v215;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 72))(v6, 0, v216);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = "ADS_Device.cpp";
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = 431;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::Device: Device does not support any sample rates.", __p, 0x12u);
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)&v487, *(CFDictionaryRef *)(v181 + 8), CFSTR("controls"));
  if (v488)
  {
    v217 = 0;
    v218 = MEMORY[0x1E0C81028];
    while (v217 < (unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v488))
    {
      OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)&v482, (uint64_t)&v487, v217);
      v219 = v483;
      if (v483)
      {
        v353 = &off_1E69A0E58;
        CFRetain(v483);
        v353 = &off_1E69A0DE0;
        v354 = v219;
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)&v484, (CFDictionaryRef)v219, CFSTR("type"));
        if (v485)
        {
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v476, (CFDictionaryRef)v354, CFSTR("subtype"));
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v497, (CFDictionaryRef)v354, CFSTR("subtype"));
          OS::CF::String::AsStdString((std::string *)&v489, (uint64_t)&v484);
          v220 = v354;
          if (v354)
            CFRetain(v354);
          applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v403, v220);
          GetFourCharacterCodeFromKey((applesauce::CF::NumberRef *)v481, (const __CFDictionary *)v403, "scope");
          if (v403)
            CFRelease(v403);
          if (v481[0])
          {
            v221 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v481[0]);
            v222 = v221;
          }
          else
          {
            v221 = os_log_type_enabled(v218, OS_LOG_TYPE_DEFAULT);
            v222 = 1735159650;
            if ((_DWORD)v221)
            {
              *(_DWORD *)__p = 136315394;
              *(_QWORD *)&__p[4] = "ADS_Device.cpp";
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = 894;
              _os_log_impl(&dword_1B57BA000, v218, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddControl: No valid 'scope' provided. Using default.", __p, 0x12u);
            }
          }
          v223 = ADS::ObjectManager::GetNextObjectID((ADS::ObjectManager *)v221);
          v224 = BYTE7(v490);
          if (SBYTE7(v490) < 0)
            v224 = v489.i64[1];
          v225 = (ADS::ObjectManager *)v223;
          switch(v224)
          {
            case 5:
              v226 = (int16x8_t *)v489.i64[0];
              if ((SBYTE7(v490) & 0x80u) == 0)
                v226 = &v489;
              v227 = v226->i32[0];
              v228 = v226->u8[4];
              if (v227 == 1702258028 && v228 == 108)
              {
                *(_DWORD *)buf = 0;
                *(_QWORD *)&buf[16] = 0;
                *(_QWORD *)&buf[24] = 0;
                *(_QWORD *)&buf[8] = &buf[16];
                v502[0] = 1;
                *(_DWORD *)&v502[4] = 5;
                *(_QWORD *)&v502[8] = 0x3F80000040000000;
                OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)&v496, (CFDictionaryRef)v354, CFSTR("dB range"));
                v255 = (const void *)*((_QWORD *)&v496 + 1);
                if (*((_QWORD *)&v496 + 1))
                {
                  v494 = &off_1E69A0E58;
                  CFRetain(*((CFTypeRef *)&v496 + 1));
                  cf = v255;
                  v494 = &off_1E69A0EA8;
                  ADS::Device::getRangeOptFromArray((uint64_t)__p, (uint64_t)&v494);
                  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v494);
                  if (__p[16])
                  {
                    HIDWORD(v256) = *(_DWORD *)&__p[4];
                    *(float *)&v256 = *(double *)__p;
                    v257 = *(double *)&__p[8];
                    CAVolumeCurve::AddRange((CAVolumeCurve *)buf, 0, 5000, v256, v257);
                  }
                }
                else
                {
                  if (os_log_type_enabled(v218, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)__p = 136315394;
                    *(_QWORD *)&__p[4] = "ADS_Device.cpp";
                    *(_WORD *)&__p[12] = 1024;
                    *(_DWORD *)&__p[14] = 976;
                    _os_log_impl(&dword_1B57BA000, v218, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddControl: 'dB range' for array type must be an array. Using default dB range.", __p, 0x12u);
                  }
                  LODWORD(v266) = 0;
                  CAVolumeCurve::AddRange((CAVolumeCurve *)buf, 0, 5000, v266, 120.0);
                }
                if (*(_QWORD *)&buf[24])
                  v267 = *(_DWORD *)(*(_QWORD *)&buf[8] + 28);
                else
                  v267 = 0;
                OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v492, (CFDictionaryRef)v354, CFSTR("value"));
                if (v493)
                {
                  v267 = OS::CF::Number::GetValue<int>(v493, 0);
                }
                else
                {
                  v273 = MEMORY[0x1E0C81028];
                  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)__p = 136315394;
                    *(_QWORD *)&__p[4] = "ADS_Device.cpp";
                    *(_WORD *)&__p[12] = 1024;
                    *(_DWORD *)&__p[14] = 984;
                    _os_log_impl(&dword_1B57BA000, v273, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddControl: No valid 'value' given for level control. Using default.", __p, 0x12u);
                  }
                }
                if (v476[1])
                {
                  OS::CF::String::AsStdString((std::string *)&v478, (uint64_t)v476);
                  std::string::basic_string[abi:ne180100]<0>(__p, "volume");
                  *(_DWORD *)&__p[24] = 1986817381;
                  std::string::basic_string[abi:ne180100]<0>(v504, "LFE volume");
                  v505 = 1937072758;
                  std::unordered_map<std::string,unsigned int>::unordered_map(v498.i64, (uint64_t)__p, 2);
                  for (ii = 0; ii != -64; ii -= 32)
                  {
                    if ((char)v504[ii + 23] < 0)
                      operator delete(*(void **)&__p[ii + 32]);
                  }
                  v275 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(&v498, (unsigned __int8 *)&v478);
                  if (v275)
                    v276 = *((_DWORD *)v275 + 10);
                  else
                    v276 = 0;
                  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&v498);
                  if ((SBYTE7(v479) & 0x80000000) == 0)
                  {
                    if (v276)
                      goto LABEL_708;
LABEL_710:
                    OS::CF::String::AsStdString((std::string *)__p, (uint64_t)v476);
                    if ((__p[23] & 0x80000000) != 0)
                    {
                      v308 = *(_QWORD *)&__p[8];
                      operator delete(*(void **)__p);
                      if (v308 != 4)
                      {
LABEL_828:
                        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)__p = 136315394;
                          *(_QWORD *)&__p[4] = "ADS_Device.cpp";
                          *(_WORD *)&__p[12] = 1024;
                          *(_DWORD *)&__p[14] = 999;
                          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::createAndAddControl: Custom level control subtypes must be specified with 4-char code or UInt32", __p, 0x12u);
                        }
                        v333 = __cxa_allocate_exception(0x10uLL);
                        *(_QWORD *)v333 = &off_1E69A1B30;
                        v333[2] = 2003332927;
                      }
                    }
                    else if (__p[23] != 4)
                    {
                      goto LABEL_828;
                    }
                    v309 = *(_DWORD *)(v6 + 8);
                    OS::CF::String::AsStdString((std::string *)&v498, (uint64_t)v476);
                    v310 = (unsigned int *)&v498;
                    if (SBYTE7(v499) < 0)
                      v310 = (unsigned int *)v498.i64[0];
                    v311 = *v310;
                    v265 = operator new();
                    *(_DWORD *)__p = *(_DWORD *)buf;
                    std::map<CARawPoint,CADBPoint>::map[abi:ne180100]((uint64_t)&__p[8], &buf[8]);
                    *(_OWORD *)v504 = *(_OWORD *)v502;
                    ADS::LevelControl::LevelControl(v265, (int)v225, v309, v222, bswap32(v311), v267, (uint64_t)__p);
                    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)&__p[16]);
                    v218 = MEMORY[0x1E0C81028];
                    if (SBYTE7(v499) < 0)
                      operator delete((void *)v498.i64[0]);
LABEL_754:
                    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v492);
                    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v496);
                    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)&buf[16]);
                    goto LABEL_755;
                  }
                  operator delete((void *)v478.i64[0]);
                  if (!v276)
                    goto LABEL_710;
LABEL_708:
                  v287 = *(_DWORD *)(v6 + 8);
                  v265 = operator new();
                  *(_DWORD *)__p = *(_DWORD *)buf;
                  std::map<CARawPoint,CADBPoint>::map[abi:ne180100]((uint64_t)&__p[8], &buf[8]);
                  *(_OWORD *)v504 = *(_OWORD *)v502;
                  ADS::LevelControl::LevelControl(v265, (int)v225, v287, v222, v276, v267, (uint64_t)__p);
                }
                else
                {
                  v277 = *(_DWORD *)(v6 + 8);
                  if (*((_QWORD *)&v497 + 1))
                  {
                    v278 = OS::CF::Number::GetValue<unsigned int>(*((const __CFNumber **)&v497 + 1), 0);
                    v265 = operator new();
                    *(_DWORD *)__p = *(_DWORD *)buf;
                    std::map<CARawPoint,CADBPoint>::map[abi:ne180100]((uint64_t)&__p[8], &buf[8]);
                    *(_OWORD *)v504 = *(_OWORD *)v502;
                    ADS::LevelControl::LevelControl(v265, (int)v225, v277, v222, v278, v267, (uint64_t)__p);
                  }
                  else
                  {
                    v265 = operator new();
                    *(_DWORD *)__p = *(_DWORD *)buf;
                    std::map<CARawPoint,CADBPoint>::map[abi:ne180100]((uint64_t)&__p[8], &buf[8]);
                    *(_OWORD *)v504 = *(_OWORD *)v502;
                    ADS::Control::Control((ADS::Control *)v265, (int)v225, v277, v222, 1818588780, 1633907820);
                    *(_QWORD *)v265 = off_1E6972AC8;
                    *(_DWORD *)(v265 + 144) = v267;
                    *(_DWORD *)(v265 + 152) = *(_DWORD *)__p;
                    std::map<CARawPoint,CADBPoint>::map[abi:ne180100](v265 + 160, &__p[8]);
                    *(_OWORD *)(v265 + 184) = *(_OWORD *)v504;
                  }
                }
                std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)&__p[16]);
                v218 = MEMORY[0x1E0C81028];
                goto LABEL_754;
              }
              if ((SBYTE7(v490) & 0x80u) == 0)
                v230 = &v489;
              else
                v230 = (int16x8_t *)v489.i64[0];
              v231 = v230->i32[0];
              v232 = v230->u8[4];
              if (v231 == 1668246626 && v232 == 107)
              {
                OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Dictionary>((uint64_t)__p, (CFDictionaryRef)v354, CFSTR("descriptor"));
                v234 = (OS::CF::UntypedObject *)__p;
                goto LABEL_670;
              }
LABEL_619:
              if (os_log_type_enabled(v218, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__p = 136315394;
                *(_QWORD *)&__p[4] = "ADS_Device.cpp";
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = 1150;
                v253 = v218;
                v254 = "%25s:%-5d  Not a recognized type of control.";
                goto LABEL_621;
              }
              goto LABEL_771;
            case 6:
              v240 = &v489;
              if (SBYTE7(v490) < 0)
                v240 = (int16x8_t *)v489.i64[0];
              v241 = v240->i32[0];
              v242 = v240->u16[2];
              if (v241 != 1684630643 || v242 != 29285)
                goto LABEL_619;
              OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)buf, (CFDictionaryRef)v354, CFSTR("value"));
              OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v498, (CFDictionaryRef)v354, CFSTR("min"));
              OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v478, (CFDictionaryRef)v354, CFSTR("max"));
              if (v498.i64[1])
              {
                v244 = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v498.i64[1], 0);
              }
              else
              {
                v244 = 0;
                if (os_log_type_enabled(v218, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)__p = 136315394;
                  *(_QWORD *)&__p[4] = "ADS_Device.cpp";
                  *(_WORD *)&__p[12] = 1024;
                  *(_DWORD *)&__p[14] = 914;
                  _os_log_impl(&dword_1B57BA000, v218, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddControl: No valid 'min' given for slider control. Using default.", __p, 0x12u);
                  v244 = 0;
                }
              }
              if (v478.i64[1])
              {
                v268 = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v478.i64[1], 0);
              }
              else
              {
                if (os_log_type_enabled(v218, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)__p = 136315394;
                  *(_QWORD *)&__p[4] = "ADS_Device.cpp";
                  *(_WORD *)&__p[12] = 1024;
                  *(_DWORD *)&__p[14] = 924;
                  _os_log_impl(&dword_1B57BA000, v218, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddControl: No valid 'max' given for slider control. Using default.", __p, 0x12u);
                }
                v268 = 10;
              }
              if (v244 <= v268)
              {
                v340 = v268;
                v268 = v244;
              }
              else
              {
                v269 = MEMORY[0x1E0C81028];
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)__p = 136315394;
                  *(_QWORD *)&__p[4] = "ADS_Device.cpp";
                  *(_WORD *)&__p[12] = 1024;
                  *(_DWORD *)&__p[14] = 934;
                  _os_log_impl(&dword_1B57BA000, v269, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddControl: 'min' is greater than 'max.' Swapping these values.", __p, 0x12u);
                }
                v340 = v244;
              }
              if (*(_QWORD *)&buf[8])
              {
                v270 = OS::CF::Number::GetValue<unsigned int>(*(const __CFNumber **)&buf[8], 0);
              }
              else
              {
                v270 = v268;
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)__p = 136315394;
                  *(_QWORD *)&__p[4] = "ADS_Device.cpp";
                  *(_WORD *)&__p[12] = 1024;
                  *(_DWORD *)&__p[14] = 942;
                  _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddControl: No valid 'value' given for slider control. Using default.", __p, 0x12u);
                  v270 = v268;
                }
              }
              if (v476[1])
              {
                OS::CF::String::AsStdString((std::string *)__p, (uint64_t)v476);
                if ((__p[23] & 0x80000000) != 0)
                {
                  v281 = *(_QWORD *)&__p[8];
                  operator delete(*(void **)__p);
                  if (v281 != 4)
                  {
LABEL_822:
                    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)__p = 136315394;
                      *(_QWORD *)&__p[4] = "ADS_Device.cpp";
                      *(_WORD *)&__p[12] = 1024;
                      *(_DWORD *)&__p[14] = 952;
                      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::createAndAddControl: Custom slider control subtypes must be specified with 4-char code or UInt32", __p, 0x12u);
                    }
                    v331 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v331 = &off_1E69A1B30;
                    v331[2] = 2003332927;
                  }
                }
                else if (__p[23] != 4)
                {
                  goto LABEL_822;
                }
                v282 = *(_DWORD *)(v6 + 8);
                OS::CF::String::AsStdString((std::string *)__p, (uint64_t)v476);
                v283 = (unsigned int *)__p;
                if (__p[23] < 0)
                  v283 = *(unsigned int **)__p;
                v284 = *v283;
                v265 = operator new();
                ADS::Control::Control((ADS::Control *)v265, (int)v225, v282, v222, bswap32(v284), 1936483442);
                *(_QWORD *)v265 = off_1E69704F0;
                *(_DWORD *)(v265 + 144) = v270;
                *(_DWORD *)(v265 + 148) = v268;
                *(_DWORD *)(v265 + 152) = v340;
                if ((__p[23] & 0x80000000) != 0)
                  operator delete(*(void **)__p);
              }
              else
              {
                v271 = *(_DWORD *)(v6 + 8);
                if (*((_QWORD *)&v497 + 1))
                {
                  v272 = OS::CF::Number::GetValue<unsigned int>(*((const __CFNumber **)&v497 + 1), 0);
                  v265 = operator new();
                  ADS::Control::Control((ADS::Control *)v265, (int)v225, v271, v222, v272, 1936483442);
                }
                else
                {
                  v265 = operator new();
                  ADS::Control::Control((ADS::Control *)v265, (int)v225, v271, v222, 1936483442, 1633907820);
                }
                *(_QWORD *)v265 = off_1E69704F0;
                *(_DWORD *)(v265 + 144) = v270;
                *(_DWORD *)(v265 + 148) = v268;
                *(_DWORD *)(v265 + 152) = v340;
              }
              v218 = MEMORY[0x1E0C81028];
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v478);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v498);
              v292 = (OS::CF::UntypedObject *)buf;
              goto LABEL_751;
            case 7:
              v235 = &v489;
              if (SBYTE7(v490) < 0)
                v235 = (int16x8_t *)v489.i64[0];
              v236 = v235->i32[0];
              v237 = *(__int32 *)((char *)v235->i32 + 3);
              if (v236 != 1819242338 || v237 != 1851876716)
                goto LABEL_619;
              OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v478, (CFDictionaryRef)v354, CFSTR("value"));
              if (v478.i64[1])
              {
                v239 = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v478.i64[1], 0);
              }
              else
              {
                v259 = os_log_type_enabled(v218, OS_LOG_TYPE_DEFAULT);
                v239 = 0;
                if (v259)
                {
                  *(_DWORD *)__p = 136315394;
                  *(_QWORD *)&__p[4] = "ADS_Device.cpp";
                  *(_WORD *)&__p[12] = 1024;
                  *(_DWORD *)&__p[14] = 1022;
                  _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddControl: No valid 'value' given for BOOLean control. Using default.", __p, 0x12u);
                  v239 = 0;
                }
              }
              if (!v476[1])
              {
                v263 = *(_DWORD *)(v6 + 8);
                if (*((_QWORD *)&v497 + 1))
                {
                  v264 = OS::CF::Number::GetValue<unsigned int>(*((const __CFNumber **)&v497 + 1), 0);
                  v265 = operator new();
                  ADS::Control::Control((ADS::Control *)v265, (int)v225, v263, v222, v264, 1953458028);
                }
                else
                {
                  v265 = operator new();
                  ADS::Control::Control((ADS::Control *)v265, (int)v225, v263, v222, 1953458028, 1633907820);
                }
                goto LABEL_745;
              }
              OS::CF::String::AsStdString((std::string *)&v498, (uint64_t)v476);
              std::string::basic_string[abi:ne180100]<0>(__p, "mute");
              *(_DWORD *)&__p[24] = 1836414053;
              std::string::basic_string[abi:ne180100]<0>(v504, "solo");
              v505 = 1936682095;
              std::string::basic_string[abi:ne180100]<0>(v506, "jack");
              v507 = 1784767339;
              std::string::basic_string[abi:ne180100]<0>(v508, "LFE mute");
              v509 = 1937072749;
              std::string::basic_string[abi:ne180100]<0>(v510, "phantom");
              v511 = 1885888878;
              std::string::basic_string[abi:ne180100]<0>(v512, "phase invert");
              v513 = 1885893481;
              std::string::basic_string[abi:ne180100]<0>(v514, "clip light");
              v515 = 1668049264;
              std::string::basic_string[abi:ne180100]<0>(v516, "talkback");
              v517 = 1952541794;
              std::string::basic_string[abi:ne180100]<0>(v518, "listenback");
              v519 = 1819504226;
              std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t *)buf, (uint64_t)__p, 9);
              v260 = 288;
              do
              {
                if ((char)v502[v260 + 23] < 0)
                  operator delete(*(void **)&v502[v260]);
                v260 -= 32;
              }
              while (v260);
              v261 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(buf, (unsigned __int8 *)&v498);
              if (v261)
                v262 = *((_DWORD *)v261 + 10);
              else
                v262 = 0;
              std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)buf);
              if (SBYTE7(v499) < 0)
              {
                operator delete((void *)v498.i64[0]);
                if (v262)
                {
LABEL_716:
                  v288 = *(_DWORD *)(v6 + 8);
                  v265 = operator new();
                  ADS::Control::Control((ADS::Control *)v265, (int)v225, v288, v222, v262, 1953458028);
LABEL_745:
                  *(_QWORD *)v265 = off_1E6976240;
                  *(_DWORD *)(v265 + 144) = v239;
                  goto LABEL_746;
                }
              }
              else if (v262)
              {
                goto LABEL_716;
              }
              OS::CF::String::AsStdString((std::string *)__p, (uint64_t)v476);
              if ((__p[23] & 0x80000000) != 0)
              {
                v312 = *(_QWORD *)&__p[8];
                operator delete(*(void **)__p);
                if (v312 != 4)
                {
LABEL_825:
                  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)__p = 136315394;
                    *(_QWORD *)&__p[4] = "ADS_Device.cpp";
                    *(_WORD *)&__p[12] = 1024;
                    *(_DWORD *)&__p[14] = 1033;
                    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::createAndAddControl: Custom BOOLean control subtypes must be specified with 4-char code or UInt32", __p, 0x12u);
                  }
                  v332 = __cxa_allocate_exception(0x10uLL);
                  *(_QWORD *)v332 = &off_1E69A1B30;
                  v332[2] = 2003332927;
                }
              }
              else if (__p[23] != 4)
              {
                goto LABEL_825;
              }
              v313 = *(_DWORD *)(v6 + 8);
              OS::CF::String::AsStdString((std::string *)__p, (uint64_t)v476);
              v314 = (unsigned int *)__p;
              if (__p[23] < 0)
                v314 = *(unsigned int **)__p;
              v315 = *v314;
              v265 = operator new();
              ADS::Control::Control((ADS::Control *)v265, (int)v225, v313, v222, bswap32(v315), 1953458028);
              *(_QWORD *)v265 = off_1E6976240;
              *(_DWORD *)(v265 + 144) = v239;
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
LABEL_746:
              v218 = MEMORY[0x1E0C81028];
              goto LABEL_747;
            case 8:
              v245 = &v489;
              if (SBYTE7(v490) < 0)
                v245 = (int16x8_t *)v489.i64[0];
              if (v245->i64[0] != 0x726F7463656C6573)
                goto LABEL_619;
              OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)&v478, (CFDictionaryRef)v354, CFSTR("items"));
              if (v478.i64[1])
              {
                if (!v476[1])
                {
                  v285 = *(_DWORD *)(v6 + 8);
                  if (*((_QWORD *)&v497 + 1))
                  {
                    v286 = OS::CF::Number::GetValue<unsigned int>(*((const __CFNumber **)&v497 + 1), 0);
                    v265 = operator new();
                    OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)__p, (CFTypeRef)v478.i64[1]);
                    *(_QWORD *)__p = &off_1E69A0EA8;
                    ADS::SelectorControl::SelectorControl((ADS::Control *)v265, (int)v225, v285, v222, v286, (uint64_t)__p);
                    goto LABEL_738;
                  }
                  v265 = operator new();
                  OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)buf, (CFTypeRef)v478.i64[1]);
                  *(_QWORD *)buf = &off_1E69A0EA8;
                  ADS::Control::Control((ADS::Control *)v265, (int)v225, v285, v222, 1936483188, 1633907820);
                  *(_QWORD *)v265 = off_1E6993758;
                  *(_QWORD *)(v265 + 144) = 0;
                  *(_QWORD *)(v265 + 152) = 0;
                  *(_QWORD *)(v265 + 160) = 0;
                  *(_QWORD *)__p = &off_1E69A0E58;
                  v307 = *(_QWORD *)&buf[8];
                  if (*(_QWORD *)&buf[8])
                    CFRetain(*(CFTypeRef *)&buf[8]);
                  *(_QWORD *)&__p[8] = v307;
                  *(_QWORD *)__p = &off_1E69A0EA8;
                  ADS::SelectorControl::parseItems((_QWORD *)v265, (uint64_t)__p);
                  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)__p);
                  v291 = (OS::CF::UntypedObject *)buf;
LABEL_739:
                  OS::CF::UntypedObject::~UntypedObject(v291);
                  goto LABEL_747;
                }
                OS::CF::String::AsStdString((std::string *)&v498, (uint64_t)v476);
                std::string::basic_string[abi:ne180100]<0>(__p, "data source");
                *(_DWORD *)&__p[24] = 1685287523;
                std::string::basic_string[abi:ne180100]<0>(v504, "data destination");
                v505 = 1684370292;
                std::string::basic_string[abi:ne180100]<0>(v506, "clock source");
                v507 = 1668047723;
                std::string::basic_string[abi:ne180100]<0>(v508, "line level");
                v509 = 1852601964;
                std::string::basic_string[abi:ne180100]<0>(v510, "hpf");
                v511 = 1751740518;
                std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t *)buf, (uint64_t)__p, 5);
                for (jj = 0; jj != -20; jj -= 4)
                {
                  if (SHIBYTE(v510[jj + 2]) < 0)
                    operator delete((void *)v510[jj]);
                }
                v247 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(buf, (unsigned __int8 *)&v498);
                if (v247)
                  v248 = *((_DWORD *)v247 + 10);
                else
                  v248 = 0;
                std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)buf);
                if (SBYTE7(v499) < 0)
                {
                  operator delete((void *)v498.i64[0]);
                  if (v248)
                  {
LABEL_737:
                    v290 = *(_DWORD *)(v6 + 8);
                    v265 = operator new();
                    OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)__p, (CFTypeRef)v478.i64[1]);
                    *(_QWORD *)__p = &off_1E69A0EA8;
                    ADS::SelectorControl::SelectorControl((ADS::Control *)v265, (int)v225, v290, v222, v248, (uint64_t)__p);
LABEL_738:
                    v291 = (OS::CF::UntypedObject *)__p;
                    goto LABEL_739;
                  }
                }
                else if (v248)
                {
                  goto LABEL_737;
                }
                OS::CF::String::AsStdString((std::string *)__p, (uint64_t)v476);
                if ((__p[23] & 0x80000000) != 0)
                {
                  v320 = *(_QWORD *)&__p[8];
                  operator delete(*(void **)__p);
                  if (v320 != 4)
                  {
LABEL_834:
                    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)__p = 136315394;
                      *(_QWORD *)&__p[4] = "ADS_Device.cpp";
                      *(_WORD *)&__p[12] = 1024;
                      *(_DWORD *)&__p[14] = 1063;
                      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::createAndAddControl: Custom selector control subtypes must be specified with 4-char code or UInt32", __p, 0x12u);
                    }
                    v335 = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)v335 = &off_1E69A1B30;
                    v335[2] = 2003332927;
                  }
                }
                else if (__p[23] != 4)
                {
                  goto LABEL_834;
                }
                v321 = *(_DWORD *)(v6 + 8);
                OS::CF::String::AsStdString((std::string *)__p, (uint64_t)v476);
                v322 = (unsigned int *)__p;
                if (__p[23] < 0)
                  v322 = *(unsigned int **)__p;
                v323 = *v322;
                v265 = operator new();
                OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)buf, (CFTypeRef)v478.i64[1]);
                *(_QWORD *)buf = &off_1E69A0EA8;
                ADS::SelectorControl::SelectorControl((ADS::Control *)v265, (int)v225, v321, v222, bswap32(v323), (uint64_t)buf);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
                if ((__p[23] & 0x80000000) != 0)
                  operator delete(*(void **)__p);
LABEL_747:
                v292 = (OS::CF::UntypedObject *)&v478;
LABEL_751:
                OS::CF::UntypedObject::~UntypedObject(v292);
LABEL_755:
                ADS::ObjectManager::MapObject(v225, v265, v293);
                v295 = *(char **)(v6 + 416);
                v294 = *(_QWORD *)(v6 + 424);
                if ((unint64_t)v295 >= v294)
                {
                  v297 = *(char **)(v6 + 408);
                  v298 = (v295 - v297) >> 2;
                  v299 = v298 + 1;
                  if ((unint64_t)(v298 + 1) >> 62)
                    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                  v300 = v294 - (_QWORD)v297;
                  if (v300 >> 1 > v299)
                    v299 = v300 >> 1;
                  v168 = (unint64_t)v300 >= 0x7FFFFFFFFFFFFFFCLL;
                  v301 = 0x3FFFFFFFFFFFFFFFLL;
                  if (!v168)
                    v301 = v299;
                  if (v301)
                  {
                    v301 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v301);
                    v297 = *(char **)(v6 + 408);
                    v295 = *(char **)(v6 + 416);
                  }
                  else
                  {
                    v302 = 0;
                  }
                  v303 = (_DWORD *)(v301 + 4 * v298);
                  *v303 = (_DWORD)v225;
                  v296 = v303 + 1;
                  while (v295 != v297)
                  {
                    v304 = *((_DWORD *)v295 - 1);
                    v295 -= 4;
                    *--v303 = v304;
                  }
                  *(_QWORD *)(v6 + 408) = v303;
                  *(_QWORD *)(v6 + 416) = v296;
                  *(_QWORD *)(v6 + 424) = v301 + 4 * v302;
                  if (v297)
                    operator delete(v297);
                }
                else
                {
                  *(_DWORD *)v295 = (_DWORD)v225;
                  v296 = v295 + 4;
                }
                *(_QWORD *)(v6 + 416) = v296;
              }
              else
              {
                if (os_log_type_enabled(v218, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)__p = 136315394;
                  *(_QWORD *)&__p[4] = "ADS_Device.cpp";
                  *(_WORD *)&__p[12] = 1024;
                  *(_DWORD *)&__p[14] = 1051;
                  _os_log_impl(&dword_1B57BA000, v218, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddControl: No valid 'items' list given for selector control. Skipping this control.", __p, 0x12u);
                }
                v234 = (OS::CF::UntypedObject *)&v478;
LABEL_670:
                OS::CF::UntypedObject::~UntypedObject(v234);
              }
LABEL_771:
              if (v481[0])
                CFRelease(v481[0]);
              if (SBYTE7(v490) < 0)
                operator delete((void *)v489.i64[0]);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v497);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v476);
              break;
            case 10:
              v249 = &v489;
              if (SBYTE7(v490) < 0)
                v249 = (int16x8_t *)v489.i64[0];
              v250 = v249->i64[0];
              v251 = v249->u16[4];
              if (v250 != 0x70206F6572657473 || v251 != 28257)
                goto LABEL_619;
              if (v222 == 1768845428 || v222 == 1869968496)
              {
                OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)buf, (CFDictionaryRef)v354, CFSTR("value"));
                if (*(_QWORD *)&buf[8])
                {
                  v258 = OS::CF::Number::GetValue<float>(*(const __CFNumber **)&buf[8]);
                }
                else
                {
                  v258 = 0.5;
                  if (os_log_type_enabled(v218, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)__p = 136315394;
                    *(_QWORD *)&__p[4] = "ADS_Device.cpp";
                    *(_WORD *)&__p[12] = 1024;
                    *(_DWORD *)&__p[14] = 1093;
                    _os_log_impl(&dword_1B57BA000, v218, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddControl: No valid 'value' given for stereo pan control. Using default.", __p, 0x12u);
                  }
                }
                OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v498, (CFDictionaryRef)v354, CFSTR("channel A"));
                OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v478, (CFDictionaryRef)v354, CFSTR("channel B"));
                v279 = 496;
                if (v222 == 1768845428)
                  v279 = 492;
                v280 = atomic_load((unsigned int *)(v6 + v279));
                if (v280 <= 2)
                {
                  if (os_log_type_enabled(v218, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)__p = 136315394;
                    *(_QWORD *)&__p[4] = "ADS_Device.cpp";
                    *(_WORD *)&__p[12] = 1024;
                    *(_DWORD *)&__p[14] = 1103;
                    _os_log_impl(&dword_1B57BA000, v218, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddControl: Cannot create a stereo pan control for a stream with fewer than two channels. Skipping this control.", __p, 0x12u);
                  }
                  v265 = 0;
                }
                else
                {
                  if (v498.i64[1]
                    && OS::CF::Number::GetValue<int>((const __CFNumber *)v498.i64[1], 0) < v280)
                  {
                    v341 = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v498.i64[1], 0);
                  }
                  else
                  {
                    if (os_log_type_enabled(v218, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)__p = 136315394;
                      *(_QWORD *)&__p[4] = "ADS_Device.cpp";
                      *(_WORD *)&__p[12] = 1024;
                      *(_DWORD *)&__p[14] = 1114;
                      _os_log_impl(&dword_1B57BA000, v218, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddControl: No valid 'channel A' given for stereo pan control. Using default.", __p, 0x12u);
                    }
                    v341 = 1;
                  }
                  if (v478.i64[1]
                    && OS::CF::Number::GetValue<int>((const __CFNumber *)v478.i64[1], 0) < v280)
                  {
                    v289 = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v478.i64[1], 0);
                  }
                  else
                  {
                    if (os_log_type_enabled(v218, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)__p = 136315394;
                      *(_QWORD *)&__p[4] = "ADS_Device.cpp";
                      *(_WORD *)&__p[12] = 1024;
                      *(_DWORD *)&__p[14] = 1125;
                      _os_log_impl(&dword_1B57BA000, v218, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddControl: No valid 'channel A' given for stereo pan control. Using default.", __p, 0x12u);
                    }
                    v289 = 2;
                  }
                  if (v476[1])
                  {
                    OS::CF::String::AsStdString((std::string *)__p, (uint64_t)v476);
                    if ((__p[23] & 0x80000000) != 0)
                    {
                      v316 = *(_QWORD *)&__p[8];
                      operator delete(*(void **)__p);
                      if (v316 != 4)
                      {
LABEL_831:
                        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)__p = 136315394;
                          *(_QWORD *)&__p[4] = "ADS_Device.cpp";
                          *(_WORD *)&__p[12] = 1024;
                          *(_DWORD *)&__p[14] = 1131;
                          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::createAndAddControl: Custom stereo pan control subtypes must be specified with 4-char code or UInt32", __p, 0x12u);
                        }
                        v334 = __cxa_allocate_exception(0x10uLL);
                        *(_QWORD *)v334 = &off_1E69A1B30;
                        v334[2] = 2003332927;
                      }
                    }
                    else if (__p[23] != 4)
                    {
                      goto LABEL_831;
                    }
                    v317 = *(_DWORD *)(v6 + 8);
                    OS::CF::String::AsStdString((std::string *)__p, (uint64_t)v476);
                    v318 = (unsigned int *)__p;
                    if (__p[23] < 0)
                      v318 = *(unsigned int **)__p;
                    v319 = *v318;
                    v265 = operator new();
                    ADS::Control::Control((ADS::Control *)v265, (int)v225, v317, v222, bswap32(v319), 1936744814);
                    *(_QWORD *)v265 = off_1E696F2D8;
                    *(float *)(v265 + 144) = v258;
                    *(_DWORD *)(v265 + 148) = v341;
                    *(_DWORD *)(v265 + 152) = v289;
                    if ((__p[23] & 0x80000000) != 0)
                      operator delete(*(void **)__p);
                  }
                  else
                  {
                    v305 = *(_DWORD *)(v6 + 8);
                    if (*((_QWORD *)&v497 + 1))
                    {
                      v306 = OS::CF::Number::GetValue<unsigned int>(*((const __CFNumber **)&v497 + 1), 0);
                      v265 = operator new();
                      ADS::Control::Control((ADS::Control *)v265, (int)v225, v305, v222, v306, 1936744814);
                    }
                    else
                    {
                      v265 = operator new();
                      ADS::Control::Control((ADS::Control *)v265, (int)v225, v305, v222, 1936744814, 1633907820);
                    }
                    *(_QWORD *)v265 = off_1E696F2D8;
                    *(float *)(v265 + 144) = v258;
                    *(_DWORD *)(v265 + 148) = v341;
                    *(_DWORD *)(v265 + 152) = v289;
                  }
                  v218 = MEMORY[0x1E0C81028];
                }
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v478);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v498);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
                if (v280 <= 2)
                {
                  if (v265)
                    (*(void (**)(uint64_t))(*(_QWORD *)v265 + 24))(v265);
                }
                else if (v265)
                {
                  goto LABEL_755;
                }
              }
              else if (os_log_type_enabled(v218, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__p = 136315394;
                *(_QWORD *)&__p[4] = "ADS_Device.cpp";
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = 1081;
                v253 = v218;
                v254 = "%25s:%-5d  ADS::Device::createAndAddControl: Invalid scope for stereo pan control. Skipping this control.";
LABEL_621:
                _os_log_impl(&dword_1B57BA000, v253, OS_LOG_TYPE_DEFAULT, v254, __p, 0x12u);
              }
              goto LABEL_771;
            default:
              goto LABEL_619;
          }
        }
        else if (os_log_type_enabled(v218, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = "ADS_Device.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 883;
          _os_log_impl(&dword_1B57BA000, v218, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddControl: Control must have a 'type.' Skipping this control.", __p, 0x12u);
        }
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v484);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v353);
      }
      else if (os_log_type_enabled(v218, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "ADS_Device.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 443;
        _os_log_impl(&dword_1B57BA000, v218, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::Device: Invalid control. Skipping and continuing.", __p, 0x12u);
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v482);
      ++v217;
    }
  }
  mach_timebase_info((mach_timebase_info_t)__p);
  LODWORD(v324) = *(_DWORD *)&__p[4];
  LODWORD(v325) = *(_DWORD *)__p;
  *(double *)(v6 + 472) = (double)v324 / (double)v325 * 1000000000.0 / *(double *)(v6 + 632);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v487);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v405);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v408);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v414);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v420);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v426);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v432);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v438);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v444);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v450);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v456);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v458);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v464);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v470);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v472);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v474);
  return v6;
}

void sub_1B5980F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void **a14, CADeprecated::CAMutex *a15, CADeprecated::CAMutex *a16, OS::CF::UntypedObject *a17, _QWORD **a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,OS::CF::UntypedObject *a23,OS::CF::UntypedObject *a24,OS::CF::UntypedObject *a25,OS::CF::UntypedObject *a26,OS::CF::UntypedObject *a27,uint64_t a28,OS::CF::UntypedObject *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,_QWORD *a41,char a42)
{
  uint64_t v42;
  void *v44;
  void *v45;
  void *v46;
  void *v47;

  MEMORY[0x1B5E50688](v42, 0x10F1C407846C2C0);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x650]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x728]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x750]);
  applesauce::CF::NumberRef::~NumberRef((const void **)&STACK[0x678]);
  if (SLOBYTE(STACK[0x6D7]) < 0)
    operator delete((void *)STACK[0x6C0]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x718]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x638]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x698]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a42);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x688]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x6B0]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x358]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x378]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x3B8]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x3F8]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x438]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x478]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x4B8]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x4F8]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x538]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x578]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x588]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x5C8]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x608]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x618]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x628]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a41 + 91));
  OS::CF::UntypedObject::~UntypedObject(a24);
  OS::CF::UntypedObject::~UntypedObject(a23);
  CAExtAudioFile::~CAExtAudioFile((CAExtAudioFile *)(a41 + 75));
  applesauce::CF::StringRef::~StringRef(a14);
  OS::CF::UntypedObject::~UntypedObject(a17);
  v44 = (void *)a41[63];
  if (v44)
  {
    a41[64] = v44;
    operator delete(v44);
  }
  v45 = (void *)a41[51];
  if (v45)
  {
    a41[52] = v45;
    operator delete(v45);
  }
  v46 = (void *)a41[48];
  if (v46)
  {
    a41[49] = v46;
    operator delete(v46);
  }
  v47 = *a22;
  if (*a22)
  {
    a41[46] = v47;
    operator delete(v47);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*a18);
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(a38);
  CADeprecated::CAMutex::~CAMutex(a15);
  CADeprecated::CAMutex::~CAMutex(a16);
  OS::CF::UntypedObject::~UntypedObject(a25);
  OS::CF::UntypedObject::~UntypedObject(a29);
  OS::CF::UntypedObject::~UntypedObject(a26);
  OS::CF::UntypedObject::~UntypedObject(a27);
  ADS::BaseObject::~BaseObject((ADS::BaseObject *)a41);
  _Unwind_Resume(a1);
}

OS::CF::String *OS::CF::String::String(OS::CF::String *this, const char *__s)
{
  CFIndex v4;
  CFStringRef v5;

  v4 = strlen(__s);
  v5 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v4, 0x8000100u, 0);
  *(_QWORD *)this = &off_1E69A0F60;
  *((_QWORD *)this + 1) = v5;
  return this;
}

uint64_t OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>(uint64_t result, CFDictionaryRef theDict, void *key)
{
  uint64_t v3;
  CFTypeID v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *value;

  *(_QWORD *)result = &off_1E69A0F10;
  *(_QWORD *)(result + 8) = 0;
  if (theDict)
  {
    v3 = result;
    value = 0;
    result = CFDictionaryGetValueIfPresent(theDict, key, (const void **)&value);
    if ((_DWORD)result)
    {
      v4 = value ? CFGetTypeID(value) : 0;
      result = CFNumberGetTypeID();
      if (v4 == result)
      {
        v5 = value;
        if (value)
        {
          CFRetain(value);
          v6 = v3;
          v7 = (uint64_t)v5;
        }
        else
        {
          v6 = v3;
          v7 = 0;
        }
        return OS::CF::UntypedObject::operator=(v6, v7);
      }
    }
  }
  return result;
}

void OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(_QWORD *a1, CFDictionaryRef theDict, void *key)
{
  CFTypeID v4;
  CFTypeID TypeID;
  CFTypeID v6;
  uint64_t v7;
  uint64_t v8;
  const __CFNumber *v9;
  _BOOL4 v10;
  _BYTE v11[8];
  uint64_t v12;
  _QWORD v13[2];
  void *value;

  *a1 = &off_1E6998690;
  a1[1] = 0;
  if (theDict)
  {
    value = 0;
    if (CFDictionaryGetValueIfPresent(theDict, key, (const void **)&value))
    {
      if (value)
        v4 = CFGetTypeID(value);
      else
        v4 = 0;
      TypeID = CFBooleanGetTypeID();
      v6 = (CFTypeID)value;
      if (v4 == TypeID)
      {
        if (value)
        {
          CFRetain(value);
          v7 = (uint64_t)a1;
          v8 = v6;
        }
        else
        {
          v7 = (uint64_t)a1;
          v8 = 0;
        }
        OS::CF::UntypedObject::operator=(v7, v8);
      }
      else
      {
        if (value)
          v6 = CFGetTypeID(value);
        if (v6 == CFNumberGetTypeID())
        {
          v9 = (const __CFNumber *)value;
          if (value)
            CFRetain(value);
          v13[0] = &off_1E69A0F10;
          v13[1] = v9;
          v10 = OS::CF::Number::GetValue<int>(v9, 0) != 0;
          OS::CF::Boolean::Boolean((OS::CF::Boolean *)v11, v10);
          a1[1] = v12;
          v12 = 0;
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v11);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v13);
        }
      }
    }
  }
}

const __CFBoolean *OS::CF::Boolean::AsBool(const __CFBoolean *this)
{
  if (this)
    return (const __CFBoolean *)(CFBooleanGetValue(this) != 0);
  return this;
}

uint64_t OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>(uint64_t result, CFDictionaryRef theDict, void *key)
{
  uint64_t v3;
  CFTypeID v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *value;

  *(_QWORD *)result = &off_1E69A0EA8;
  *(_QWORD *)(result + 8) = 0;
  if (theDict)
  {
    v3 = result;
    value = 0;
    result = CFDictionaryGetValueIfPresent(theDict, key, (const void **)&value);
    if ((_DWORD)result)
    {
      v4 = value ? CFGetTypeID(value) : 0;
      result = CFArrayGetTypeID();
      if (v4 == result)
      {
        v5 = value;
        if (value)
        {
          CFRetain(value);
          v6 = v3;
          v7 = (uint64_t)v5;
        }
        else
        {
          v6 = v3;
          v7 = 0;
        }
        return OS::CF::UntypedObject::operator=(v6, v7);
      }
    }
  }
  return result;
}

const __CFArray *OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>(const __CFArray *result, uint64_t a2, CFIndex a3)
{
  const __CFArray *v4;
  const void *ValueAtIndex;
  const void *v7;
  CFTypeID v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)result = &off_1E69A0DE0;
  *((_QWORD *)result + 1) = 0;
  if ((a3 & 0x8000000000000000) == 0)
  {
    v4 = result;
    result = *(const __CFArray **)(a2 + 8);
    if (result)
    {
      result = (const __CFArray *)CFArrayGetCount(result);
      if ((uint64_t)result > a3)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 8), a3);
        v7 = ValueAtIndex;
        v8 = ValueAtIndex ? CFGetTypeID(ValueAtIndex) : 0;
        result = (const __CFArray *)CFDictionaryGetTypeID();
        if ((const __CFArray *)v8 == result)
        {
          if (v7)
          {
            CFRetain(v7);
            v9 = (uint64_t)v4;
            v10 = (uint64_t)v7;
          }
          else
          {
            v9 = (uint64_t)v4;
            v10 = 0;
          }
          return (const __CFArray *)OS::CF::UntypedObject::operator=(v9, v10);
        }
      }
    }
  }
  return result;
}

float OS::CF::Number::GetValue<float>(const __CFNumber *a1)
{
  float valuePtr;

  valuePtr = 0.0;
  if (!a1)
    return 0.0;
  CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
  return valuePtr;
}

uint64_t *std::__tree<ADS::AudioValueRangeWrapper>::__emplace_unique_key_args<ADS::AudioValueRangeWrapper,ADS::AudioValueRangeWrapper>(uint64_t *result, _OWORD *a2, double a3, double a4)
{
  uint64_t **v5;
  uint64_t v6;
  uint64_t **v7;
  double v8;
  double v9;
  uint64_t **v10;
  uint64_t *v12;

  v5 = (uint64_t **)result;
  v7 = (uint64_t **)(result + 1);
  v6 = result[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v6;
        v8 = *(double *)(v6 + 32);
        if (v8 <= a3)
          break;
LABEL_5:
        v6 = *(_QWORD *)v6;
        v10 = v7;
        if (!*v7)
          goto LABEL_17;
      }
      if (v8 == a3)
      {
        v9 = *(double *)(v6 + 40);
        if (v9 > a4)
          goto LABEL_5;
        if (v8 >= a3 && v9 >= a4)
          return result;
      }
      else if (v8 >= a3)
      {
        return result;
      }
      v10 = (uint64_t **)(v6 + 8);
      v6 = *(_QWORD *)(v6 + 8);
      if (!v6)
        goto LABEL_17;
    }
  }
  v10 = (uint64_t **)(result + 1);
LABEL_17:
  v12 = (uint64_t *)operator new(0x30uLL);
  *((_OWORD *)v12 + 2) = *a2;
  return std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(v5, (uint64_t)v7, v10, v12);
}

uint64_t GetFourCharacterCodeFromKey(applesauce::CF::NumberRef *a1, const __CFDictionary *a2, char *a3)
{
  const void *Value;
  CFTypeID v6;
  CFTypeID v7;
  unsigned int *v8;
  CFNumberRef v9;
  std::runtime_error *exception;
  std::runtime_error *v11;
  std::runtime_error *v12;
  void *key[2];
  char v15;
  CFTypeRef v16;
  CFTypeRef cf;
  char v18;
  unsigned int valuePtr;

  if (!a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)key, a3);
  Value = CFDictionaryGetValue(a2, key[0]);
  if (key[0])
    CFRelease(key[0]);
  if (!Value)
  {
    LOBYTE(cf) = 0;
    v18 = 0;
    goto LABEL_26;
  }
  CFRetain(Value);
  cf = Value;
  v18 = 1;
  v6 = CFGetTypeID(Value);
  if (v6 == CFNumberGetTypeID())
  {
    applesauce::CF::TypeRef::operator applesauce::CF::NumberRef(a1, &cf);
    return std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
  }
  if (!v18)
    std::__throw_bad_optional_access[abi:ne180100]();
  if (!cf || (v7 = CFGetTypeID(cf), v7 != CFStringGetTypeID()))
  {
LABEL_26:
    *(_QWORD *)a1 = 0;
    return std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
  }
  if (!v18)
    std::__throw_bad_optional_access[abi:ne180100]();
  applesauce::CF::TypeRef::operator applesauce::CF::StringRef((applesauce::CF::StringRef *)&v16, &cf);
  if (!v16)
  {
    v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Could not construct");
    __cxa_throw(v11, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::convert_to<std::string,0>((uint64_t)key, (const __CFString *)v16);
  if (v15 >= 0)
    v8 = (unsigned int *)key;
  else
    v8 = (unsigned int *)key[0];
  valuePtr = bswap32(*v8);
  v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *(_QWORD *)a1 = v9;
  if (!v9)
  {
    v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v12, "Could not construct");
    __cxa_throw(v12, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v15 < 0)
    operator delete(key[0]);
  if (v16)
    CFRelease(v16);
  return std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

void ADS::Device::getRangeOptFromArray(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  double v5;
  float v6;
  char v7;
  uint64_t v8;
  const __CFNumber *v9;
  uint64_t v10;
  const __CFNumber *v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Number>(&v10, a2, 0);
  OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Number>(&v8, a2, 1);
  if (v11)
    v4 = v9 == 0;
  else
    v4 = 1;
  if (v4)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v13 = "ADS_Device.cpp";
      v14 = 1024;
      v15 = 473;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::getRangeFromArray: Requires numerical data for value types at indices 0 and 1", buf, 0x12u);
    }
    v7 = 0;
    *(_BYTE *)a1 = 0;
  }
  else
  {
    v5 = OS::CF::Number::GetValue<float>(v11);
    v6 = OS::CF::Number::GetValue<float>(v9);
    *(double *)a1 = v5;
    *(double *)(a1 + 8) = v6;
    v7 = 1;
  }
  *(_BYTE *)(a1 + 16) = v7;
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v8);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v10);
}

uint64_t OS::CF::Number::GetValue<int>(const __CFNumber *a1, uint64_t a2)
{
  unsigned int valuePtr;

  valuePtr = a2;
  if (a1)
  {
    CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
    return valuePtr;
  }
  return a2;
}

uint64_t *std::unordered_map<std::string,unsigned int>::unordered_map(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  char *v16;
  std::string *v17;
  __int128 v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v39;
  uint64_t v41;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_DWORD *)a1 + 8) = 1065353216;
  if (a3)
  {
    v5 = a2;
    v6 = 0;
    v7 = a1 + 2;
    v41 = a2 + 32 * a3;
    while (1)
    {
      v8 = std::__string_hash<char>::operator()[abi:ne180100](v5);
      v9 = v8;
      v10 = a1[1];
      if (v10)
      {
        v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
        v11.i16[0] = vaddlv_u8(v11);
        v12 = v11.u32[0];
        if (v11.u32[0] > 1uLL)
        {
          v3 = v8;
          if (v8 >= v10)
            v3 = v8 % v10;
        }
        else
        {
          v3 = (v10 - 1) & v8;
        }
        v13 = *(unsigned __int8 ***)(*a1 + 8 * v3);
        if (v13)
        {
          for (i = *v13; i; i = *(unsigned __int8 **)i)
          {
            v15 = *((_QWORD *)i + 1);
            if (v15 == v9)
            {
              if (std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(i + 16, (unsigned __int8 *)v5))
                goto LABEL_78;
            }
            else
            {
              if (v12 > 1)
              {
                if (v15 >= v10)
                  v15 %= v10;
              }
              else
              {
                v15 &= v10 - 1;
              }
              if (v15 != v3)
                break;
            }
          }
        }
      }
      v16 = (char *)operator new(0x30uLL);
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = v9;
      v17 = (std::string *)(v16 + 16);
      if (*(char *)(v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v5, *(_QWORD *)(v5 + 8));
        v6 = a1[3];
      }
      else
      {
        v18 = *(_OWORD *)v5;
        *((_QWORD *)v16 + 4) = *(_QWORD *)(v5 + 16);
        *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
      }
      *((_DWORD *)v16 + 10) = *(_DWORD *)(v5 + 24);
      v19 = (float)(unint64_t)(v6 + 1);
      v20 = *((float *)a1 + 8);
      if (!v10 || (float)(v20 * (float)v10) < v19)
        break;
LABEL_68:
      v36 = *a1;
      v37 = *(_QWORD **)(*a1 + 8 * v3);
      if (v37)
      {
        *(_QWORD *)v16 = *v37;
      }
      else
      {
        *(_QWORD *)v16 = *v7;
        *v7 = v16;
        *(_QWORD *)(v36 + 8 * v3) = v7;
        if (!*(_QWORD *)v16)
          goto LABEL_77;
        v38 = *(_QWORD *)(*(_QWORD *)v16 + 8);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v38 >= v10)
            v38 %= v10;
        }
        else
        {
          v38 &= v10 - 1;
        }
        v37 = (_QWORD *)(*a1 + 8 * v38);
      }
      *v37 = v16;
LABEL_77:
      v6 = a1[3] + 1;
      a1[3] = v6;
LABEL_78:
      v5 += 32;
      if (v5 == v41)
        return a1;
    }
    v21 = (v10 & (v10 - 1)) != 0;
    if (v10 < 3)
      v21 = 1;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v10 = a1[1];
    if (*(_QWORD *)&prime > v10)
      goto LABEL_34;
    if (*(_QWORD *)&prime < v10)
    {
      v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v10 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = (void *)*a1;
          *a1 = (uint64_t)v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD *)*v7;
          if (*v7)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v29) = v7;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v35))
                  {
                    *(_QWORD *)(*a1 + 8 * v35) = v28;
                    goto LABEL_59;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*a1 + 8 * v35);
                  **(_QWORD **)(*a1 + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_59:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_63;
        }
        v39 = (void *)*a1;
        *a1 = 0;
        if (v39)
          operator delete(v39);
        v10 = 0;
        a1[1] = 0;
      }
    }
LABEL_63:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
    goto LABEL_68;
  }
  return a1;
}

void sub_1B59829F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](1, v2);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

const __CFArray *OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Number>(_QWORD *a1, uint64_t a2, CFIndex a3)
{
  const __CFArray *result;
  const void *ValueAtIndex;
  const void *v8;
  CFTypeID v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = &off_1E69A0F10;
  a1[1] = 0;
  result = *(const __CFArray **)(a2 + 8);
  if (result)
  {
    result = (const __CFArray *)CFArrayGetCount(result);
    if ((uint64_t)result > a3)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 8), a3);
      v8 = ValueAtIndex;
      v9 = ValueAtIndex ? CFGetTypeID(ValueAtIndex) : 0;
      result = (const __CFArray *)CFNumberGetTypeID();
      if ((const __CFArray *)v9 == result)
      {
        if (v8)
        {
          CFRetain(v8);
          v10 = (uint64_t)a1;
          v11 = (uint64_t)v8;
        }
        else
        {
          v10 = (uint64_t)a1;
          v11 = 0;
        }
        return (const __CFArray *)OS::CF::UntypedObject::operator=(v10, v11);
      }
    }
  }
  return result;
}

void OS::CF::Number::~Number(OS::CF::Number *this)
{
  OS::CF::UntypedObject::~UntypedObject(this);
  JUMPOUT(0x1B5E50688);
}

void OS::CF::Array::~Array(OS::CF::Array *this)
{
  OS::CF::UntypedObject::~UntypedObject(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v2);
  }
  return a1;
}

_QWORD *std::__tree<ADS::AudioValueRangeWrapper>::__find_leaf_high(uint64_t a1, _QWORD *a2, double a3, double a4)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  double v7;
  _QWORD *v8;

  v6 = *(uint64_t **)(a1 + 8);
  v4 = (_QWORD *)(a1 + 8);
  v5 = v6;
  if (v6)
  {
    do
    {
      while (1)
      {
        v4 = v5;
        v7 = *((double *)v5 + 4);
        if (v7 <= a3 && (v7 != a3 || *((double *)v5 + 5) <= a4))
          break;
        v5 = (uint64_t *)*v5;
        v8 = v4;
        if (!*v4)
          goto LABEL_10;
      }
      v5 = (uint64_t *)v5[1];
    }
    while (v5);
    v8 = v4 + 1;
  }
  else
  {
    v8 = v4;
  }
LABEL_10:
  *a2 = v4;
  return v8;
}

void ADS::Device::ASBDfromDictionary(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const __CFNumber *v5;
  _BYTE v6[8];
  const __CFNumber *v7;
  _BYTE v8[8];
  const __CFNumber *v9;
  _BYTE v10[8];
  const __CFNumber *v11;
  _BYTE v12[8];
  const __CFNumber *v13;
  _BYTE v14[8];
  const __CFNumber *v15;
  _BYTE v16[8];
  const __CFNumber *v17;
  _BYTE v18[8];
  const __CFNumber *v19;

  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v18, *(CFDictionaryRef *)(a2 + 8), CFSTR("sample rate"));
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v16, *(CFDictionaryRef *)(a2 + 8), CFSTR("format id"));
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v14, *(CFDictionaryRef *)(a2 + 8), CFSTR("format flags"));
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v12, *(CFDictionaryRef *)(a2 + 8), CFSTR("bytes per frame"));
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v10, *(CFDictionaryRef *)(a2 + 8), CFSTR("frames per packet"));
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v8, *(CFDictionaryRef *)(a2 + 8), CFSTR("channels per frame"));
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v6, *(CFDictionaryRef *)(a2 + 8), CFSTR("bits per channel"));
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v4, *(CFDictionaryRef *)(a2 + 8), CFSTR("bytes per packet"));
  if (v19 && v17 && v15 && v13 && v11 && v9 && v7 && v5)
  {
    *(double *)a1 = OS::CF::Number::GetValue<float>(v19);
    *(_DWORD *)(a1 + 8) = OS::CF::Number::GetValue<unsigned int>(v17, 0);
    *(_DWORD *)(a1 + 12) = OS::CF::Number::GetValue<unsigned int>(v15, 0);
    *(_DWORD *)(a1 + 24) = OS::CF::Number::GetValue<unsigned int>(v13, 0);
    *(_DWORD *)(a1 + 20) = OS::CF::Number::GetValue<unsigned int>(v11, 0);
    *(_DWORD *)(a1 + 28) = OS::CF::Number::GetValue<unsigned int>(v9, 0);
    *(_DWORD *)(a1 + 32) = OS::CF::Number::GetValue<unsigned int>(v7, 0);
    *(_DWORD *)(a1 + 16) = OS::CF::Number::GetValue<unsigned int>(v5, 0);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v4);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v6);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v8);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v10);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v12);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v14);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v16);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v18);
}

uint64_t ADS::Device::isASBDValid(int16x8_t *this, AudioStreamBasicDescription *a2)
{
  unsigned int v3;
  _BOOL4 v4;
  uint64_t result;
  int16x8_t v6;
  void **v7;
  NSObject *v8;
  const char *v9;
  _BOOL4 v10;
  int16x8_t v11;
  void **v12;
  unsigned int v13;
  _BOOL4 v14;
  int16x8_t v15;
  void **v16;
  _BOOL4 v17;
  int16x8_t v18;
  void **v19;
  int16x8_t v20;
  int16x8_t v21;
  uint64_t v22;
  void *__p[2];
  char v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  void **v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = this[1].u32[2];
  if (this[1].i32[1] * v3 == this[1].i32[0] || this->i32[2] != 1819304813)
  {
    if (*(double *)this->i64 >= 0.0)
    {
      v13 = this[2].u32[0];
      if ((this->i8[12] & 1) != 0 || v13 < 0x19)
      {
        if (v3 >= (this[1].i32[3] * v13) >> 3 || this->i32[2] != 1819304813)
          return 1;
        v17 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
        result = 0;
        if (!v17)
          return result;
        v18 = this[1];
        v20 = *this;
        v21 = v18;
        v22 = this[2].i64[0];
        CA::StreamDescription::AsString((CA::StreamDescription *)__p, &v20, *(double *)v20.i64, v18);
        if (v24 >= 0)
          v19 = __p;
        else
          v19 = (void **)__p[0];
        *(_DWORD *)buf = 136315650;
        v26 = "ADS_Device.cpp";
        v27 = 1024;
        v28 = 776;
        v29 = 2080;
        v30 = v19;
        v8 = MEMORY[0x1E0C81028];
        v9 = "%25s:%-5d  ASBD is not valid because not (asbd.mBitsPerChannel * asbd.mChannelsPerFrame / 8 == asbd.mBytesP"
             "erFrame) and asbd.mFormatID == kAudioFormatLinearPCM. ASBD: %s";
      }
      else
      {
        v14 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
        result = 0;
        if (!v14)
          return result;
        v15 = this[1];
        v20 = *this;
        v21 = v15;
        v22 = this[2].i64[0];
        CA::StreamDescription::AsString((CA::StreamDescription *)__p, &v20, *(double *)v20.i64, v15);
        if (v24 >= 0)
          v16 = __p;
        else
          v16 = (void **)__p[0];
        *(_DWORD *)buf = 136315650;
        v26 = "ADS_Device.cpp";
        v27 = 1024;
        v28 = 770;
        v29 = 2080;
        v30 = v16;
        v8 = MEMORY[0x1E0C81028];
        v9 = "%25s:%-5d  ASBD is not valid because !(asbd.mFormatFlags & kAudioFormatFlagIsFloat) && (asbd.mBitsPerChanne"
             "l > 24). ASBD: %s";
      }
    }
    else
    {
      v10 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (!v10)
        return result;
      v11 = this[1];
      v20 = *this;
      v21 = v11;
      v22 = this[2].i64[0];
      CA::StreamDescription::AsString((CA::StreamDescription *)__p, &v20, *(double *)v20.i64, v11);
      if (v24 >= 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      v26 = "ADS_Device.cpp";
      v27 = 1024;
      v28 = 764;
      v29 = 2080;
      v30 = v12;
      v8 = MEMORY[0x1E0C81028];
      v9 = "%25s:%-5d  ASBD is not valid because sample rate was less than 0. ASBD: %s";
    }
  }
  else
  {
    v4 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v4)
      return result;
    v6 = this[1];
    v20 = *this;
    v21 = v6;
    v22 = this[2].i64[0];
    CA::StreamDescription::AsString((CA::StreamDescription *)__p, &v20, *(double *)v20.i64, v6);
    if (v24 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    *(_DWORD *)buf = 136315650;
    v26 = "ADS_Device.cpp";
    v27 = 1024;
    v28 = 758;
    v29 = 2080;
    v30 = v7;
    v8 = MEMORY[0x1E0C81028];
    v9 = "%25s:%-5d  ASBD is not valid because (asbd.mBytesPerFrame * asbd.mFramesPerPacket == asbd.mBytesPerPacket) and "
         "asbd.mFormatID == kAudioFormatLinearPCM returned false. ASBD: %s";
  }
  _os_log_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_DEFAULT, v9, buf, 0x1Cu);
  if (v24 < 0)
    operator delete(__p[0]);
  return 0;
}

uint64_t std::set<CAStreamRangedDescription,CAStreamRangedDescription_ReverseSort,std::allocator<CAStreamRangedDescription>>::set[abi:ne180100](uint64_t a1, _QWORD *a2, const AudioStreamRangedDescription *a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t **v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v19;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v5 = a2 + 1;
  v6 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v7 = *(_QWORD *)(a1 + 8);
      v8 = (_QWORD *)v4;
      if (*(_QWORD *)a1 == v4)
        goto LABEL_8;
      v9 = *(_QWORD **)(a1 + 8);
      v10 = (_QWORD *)v4;
      if (v7)
      {
        do
        {
          v8 = v9;
          v9 = (_QWORD *)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v10[2];
          v11 = *v8 == (_QWORD)v10;
          v10 = v8;
        }
        while (v11);
      }
      if (CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)(v8 + 4), (const AudioStreamRangedDescription *)(v6 + 4), a3))
      {
LABEL_8:
        if (!v7)
        {
          v19 = (_QWORD *)v4;
          v12 = (uint64_t **)v4;
LABEL_14:
          v13 = (char *)operator new(0x58uLL);
          v14 = *((_OWORD *)v6 + 2);
          v15 = *((_OWORD *)v6 + 3);
          *((_QWORD *)v13 + 8) = v6[8];
          *((_OWORD *)v13 + 2) = v14;
          *((_OWORD *)v13 + 3) = v15;
          *(_OWORD *)(v13 + 72) = *(_OWORD *)(v6 + 9);
          std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v19, v12, (uint64_t *)v13);
          goto LABEL_15;
        }
        v19 = v8;
        v12 = (uint64_t **)(v8 + 1);
      }
      else
      {
        v12 = (uint64_t **)std::__tree<CAStreamRangedDescription,CAStreamRangedDescription_ReverseSort,std::allocator<CAStreamRangedDescription>>::__find_equal<CAStreamRangedDescription>(a1, &v19, (CAStreamRangedDescription *)(v6 + 4));
      }
      if (!*v12)
        goto LABEL_14;
LABEL_15:
      v16 = (_QWORD *)v6[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v6[2];
          v11 = *v17 == (_QWORD)v6;
          v6 = v17;
        }
        while (!v11);
      }
      v6 = v17;
    }
    while (v17 != v5);
  }
  return a1;
}

void sub_1B59832A8(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<CAStreamRangedDescription,CAStreamRangedDescription_ReverseSort,std::allocator<CAStreamRangedDescription>>::__find_equal<CAStreamRangedDescription>(uint64_t a1, _QWORD *a2, CAStreamRangedDescription *this)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  CAStreamRangedDescription *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (CAStreamRangedDescription *)(v4 + 4);
        if (!CAStreamRangedDescription::Sorter(this, (const AudioStreamRangedDescription *)(v4 + 4), (const AudioStreamRangedDescription *)this))break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!CAStreamRangedDescription::Sorter(v8, (const AudioStreamRangedDescription *)this, (const AudioStreamRangedDescription *)this))break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t ADS::TypedProperty<AudioValueRange>::GetPropertyDataSize()
{
  return 16;
}

uint64_t ADS::TypedProperty<AudioValueRange>::GetPropertyData(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(a1 + 40);
  return 16;
}

BOOL ADS::TypedProperty<AudioValueRange>::SetPropertyData(uint64_t a1, _OWORD *a2, int a3, char a4)
{
  int v6;
  _DWORD *exception;
  int v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if ((a4 & 1) == 0 && !*(_BYTE *)(a1 + 8))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "ADS_Property.h";
      v12 = 1024;
      v13 = 266;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  TypedProperty::SetPropertyData: this property cannot be set.", (uint8_t *)&v10, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v9 = 1970171760;
LABEL_17:
    exception[2] = v9;
  }
  if (a3 != 16)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "ADS_Property.h";
      v12 = 1024;
      v13 = 268;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  TypedProperty::SetPropertyData: wrong size for the data for this property.", (uint8_t *)&v10, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v9 = 561211770;
    goto LABEL_17;
  }
  if (((*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)a1 + 96))(a1, a2) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "ADS_Property.h";
      v12 = 1024;
      v13 = 269;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  TypedProperty::SetPropertyData: proposed property value is not supported.", (uint8_t *)&v10, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v9 = 1852797029;
    goto LABEL_17;
  }
  v6 = *(unsigned __int8 *)(a1 + 9);
  if (!*(_BYTE *)(a1 + 9))
    *(_OWORD *)(a1 + 40) = *a2;
  return v6 == 0;
}

double ADS::TypedProperty<AudioValueRange>::PerformConfigChange(uint64_t a1, uint64_t a2)
{
  double result;
  _DWORD *exception;
  __int128 v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a2 + 56);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  if (((*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 96))(a1, &v5) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v7 = "ADS_Property.h";
      v8 = 1024;
      v9 = 245;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  TypedProperty::PerformConfigChange: proposed property value is not supported.", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  result = *(double *)&v5;
  *(_OWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t ADS::TypedProperty<AudioValueRange>::AbortConfigChange(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  return result;
}

__n128 ADS::TypedProperty<AudioValueRange>::GetChangeInfo(uint64_t a1, __n128 *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  __n128 result;
  int v10;
  _DWORD *exception;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  v7 = *(_QWORD *)(a1 + 12);
  v8 = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 12) = v7;
  *(_DWORD *)(v6 + 20) = v8;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)v6 = &off_1E69776C8;
  if (a3 != 16)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v12 = 136315394;
      v13 = "ADS_ChangeInfoData.h";
      v14 = 1024;
      v15 = 52;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ChangeInfoData::GetChangeInfo: wrong size for given property.", (uint8_t *)&v12, 0x12u);
    }
    v10 = 561211770;
LABEL_10:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v10;
  }
  if (!a2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v12 = 136315394;
      v13 = "ADS_ChangeInfoData.h";
      v14 = 1024;
      v15 = 53;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ChangeInfoData::GetChangeInfo: no data provided for new property value.", (uint8_t *)&v12, 0x12u);
    }
    v10 = 2003329396;
    goto LABEL_10;
  }
  result = *a2;
  *(__n128 *)(v6 + 56) = *a2;
  return result;
}

void sub_1B5983898(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &off_1E6977D78;
  MEMORY[0x1B5E50688](v1, 0x10A1C40AD1A5B81);
  _Unwind_Resume(a1);
}

uint64_t ADS::Property::IsPropertySettable(ADS::Property *this)
{
  return *((unsigned __int8 *)this + 8);
}

uint64_t ADS::Property::RequiresSetRequest(ADS::Property *this)
{
  return *((unsigned __int8 *)this + 9);
}

uint64_t ADS::Property::GetAddress(ADS::Property *this)
{
  return *(_QWORD *)((char *)this + 12);
}

uint64_t ADS::Property::GetPropertyInfo(ADS::Property *this)
{
  return *((_QWORD *)this + 3);
}

_QWORD *ADS::TypedProperty<AudioValueRange>::~TypedProperty(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E6977638;
  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  return a1;
}

void ADS::TypedProperty<AudioValueRange>::~TypedProperty(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E6977638;
  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B5E50688);
}

uint64_t ADS::TypedProperty<AudioValueRange>::IsSupportedValue(uint64_t a1, double *a2)
{
  double *v2;
  double *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  BOOL v9;
  BOOL v10;

  v3 = *(double **)(a1 + 56);
  v2 = *(double **)(a1 + 64);
  if (v2 == v3)
    return 1;
  v4 = *a2;
  v5 = a2[1];
  while (1)
  {
    v6 = v3[1];
    if (v6 >= v4)
    {
      v7 = *v3;
      if (*v3 >= v4 || v6 > v5)
      {
        v9 = v7 >= v4 || v6 <= v5;
        v10 = v9 && v7 == v4;
        if (v10 && v6 == v5)
          break;
      }
    }
    v3 += 2;
    if (v3 == v2)
    {
      v3 = *(double **)(a1 + 64);
      return v3 != v2;
    }
  }
  return v3 != v2;
}

_QWORD *ADS::ChangeInfoData<AudioValueRange>::~ChangeInfoData(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6977D78;
  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void ADS::ChangeInfoData<AudioValueRange>::~ChangeInfoData(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6977D78;
  v1 = a1 + 3;
  v2 = (_QWORD *)a1[6];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<ADS::TypedProperty<AudioValueRange>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69775E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ADS::TypedProperty<AudioValueRange>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69775E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<ADS::TypedProperty<AudioValueRange>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 80))(a1 + 24);
}

uint64_t ADS::CFProperty::GetPropertyDataSize(ADS::CFProperty *this)
{
  return 8;
}

uint64_t ADS::CFProperty::GetPropertyData(const __CFString **this, CFDictionaryRef *a2)
{
  *a2 = PropertyListDeepImmutableCopy(this[5]);
  return 8;
}

BOOL ADS::CFProperty::SetPropertyData(uint64_t a1, CFPropertyListRef *a2, int a3, char a4)
{
  int v6;
  const void *v7;
  _DWORD *exception;
  int v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if ((a4 & 1) == 0 && !*(_BYTE *)(a1 + 8))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v11 = 136315394;
      v12 = "ADS_Property.h";
      v13 = 1024;
      v14 = 167;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  CFProperty::SetPropertyData: this property cannot be set.", (uint8_t *)&v11, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v10 = 1970171760;
LABEL_17:
    exception[2] = v10;
  }
  if (a3 != 8)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v11 = 136315394;
      v12 = "ADS_Property.h";
      v13 = 1024;
      v14 = 169;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  CFProperty::SetPropertyData: wrong size for the data for this property.", (uint8_t *)&v11, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v10 = 561211770;
    goto LABEL_17;
  }
  if (((*(uint64_t (**)(uint64_t, CFPropertyListRef *))(*(_QWORD *)a1 + 96))(a1, a2) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v11 = 136315394;
      v12 = "ADS_Property.h";
      v13 = 1024;
      v14 = 170;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  CFProperty::SetPropertyData: proposed property value is not supported.", (uint8_t *)&v11, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v10 = 1852797029;
    goto LABEL_17;
  }
  v6 = *(unsigned __int8 *)(a1 + 9);
  if (!*(_BYTE *)(a1 + 9))
  {
    v7 = *(const void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE08], *a2, 0);
    CFRelease(v7);
  }
  return v6 == 0;
}

void ADS::CFProperty::PerformConfigChange(ADS::CFProperty *this, _QWORD *a2)
{
  const void *v3;
  _DWORD *exception;
  uint64_t v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = a2[7];
  (*(void (**)(_QWORD *))(*a2 + 8))(a2);
  if (((*(uint64_t (**)(ADS::CFProperty *, uint64_t *))(*(_QWORD *)this + 96))(this, &v5) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v7 = "ADS_Property.h";
      v8 = 1024;
      v9 = 143;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  CFProperty::PerformConfigChange: proposed property value is not supported.", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v3 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v5;
  CFRelease(v3);
}

uint64_t ADS::CFProperty::AbortConfigChange(ADS::CFProperty *this, void *a2)
{
  uint64_t result;

  if (a2)
    return (*(uint64_t (**)(void *))(*(_QWORD *)a2 + 8))(a2);
  return result;
}

uint64_t ADS::CFProperty::GetChangeInfo(ADS::CFProperty *this, _QWORD *a2, int a3)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  int v9;
  _DWORD *exception;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  result = operator new();
  v7 = *(_QWORD *)((char *)this + 12);
  v8 = *((_DWORD *)this + 5);
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 12) = v7;
  *(_DWORD *)(result + 20) = v8;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)result = &off_1E69775B0;
  if (a3 != 8)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v11 = 136315394;
      v12 = "ADS_ChangeInfoData.h";
      v13 = 1024;
      v14 = 52;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ChangeInfoData::GetChangeInfo: wrong size for given property.", (uint8_t *)&v11, 0x12u);
    }
    v9 = 561211770;
LABEL_10:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v9;
  }
  if (!a2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v11 = 136315394;
      v12 = "ADS_ChangeInfoData.h";
      v13 = 1024;
      v14 = 53;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ChangeInfoData::GetChangeInfo: no data provided for new property value.", (uint8_t *)&v11, 0x12u);
    }
    v9 = 2003329396;
    goto LABEL_10;
  }
  *(_QWORD *)(result + 56) = *a2;
  return result;
}

void sub_1B5984094(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &off_1E6977D78;
  MEMORY[0x1B5E50688](v1, 0x10E1C40D062FDF8);
  _Unwind_Resume(a1);
}

void ADS::CFProperty::~CFProperty(CFTypeRef *this)
{
  ADS::CFProperty::~CFProperty(this);
  JUMPOUT(0x1B5E50688);
}

{
  void *v2;

  *this = &off_1E6977520;
  CFRelease(this[5]);
  v2 = (void *)this[6];
  if (v2)
  {
    this[7] = v2;
    operator delete(v2);
  }
}

BOOL ADS::CFProperty::IsSupportedValue(CFTypeRef *this, CFTypeRef *a2)
{
  CFTypeRef v3;
  CFTypeID v4;
  CFTypeRef *v5;
  CFTypeRef *v6;

  v3 = *a2;
  v4 = CFGetTypeID(*a2);
  if (v4 != CFGetTypeID(this[5]))
    return 0;
  v6 = (CFTypeRef *)this[6];
  v5 = (CFTypeRef *)this[7];
  if (v5 == v6)
    return 1;
  while (*v6 != v3)
  {
    if (++v6 == v5)
    {
      v6 = (CFTypeRef *)this[7];
      return v6 != v5;
    }
  }
  return v6 != v5;
}

_QWORD *ADS::ChangeInfoData<void const*>::~ChangeInfoData(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6977D78;
  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void ADS::ChangeInfoData<void const*>::~ChangeInfoData(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6977D78;
  v1 = a1 + 3;
  v2 = (_QWORD *)a1[6];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<ADS::CFProperty>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69774D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ADS::CFProperty>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69774D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<ADS::CFProperty>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 80))(a1 + 24);
}

uint64_t ADS::TypedProperty<float>::GetPropertyDataSize()
{
  return 4;
}

uint64_t ADS::TypedProperty<float>::GetPropertyData(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 36);
  return 4;
}

BOOL ADS::TypedProperty<float>::SetPropertyData(uint64_t a1, _DWORD *a2, int a3, char a4)
{
  int v6;
  _DWORD *exception;
  int v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if ((a4 & 1) == 0 && !*(_BYTE *)(a1 + 8))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "ADS_Property.h";
      v12 = 1024;
      v13 = 266;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  TypedProperty::SetPropertyData: this property cannot be set.", (uint8_t *)&v10, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v9 = 1970171760;
LABEL_17:
    exception[2] = v9;
  }
  if (a3 != 4)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "ADS_Property.h";
      v12 = 1024;
      v13 = 268;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  TypedProperty::SetPropertyData: wrong size for the data for this property.", (uint8_t *)&v10, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v9 = 561211770;
    goto LABEL_17;
  }
  if (((*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a1 + 96))(a1, a2) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "ADS_Property.h";
      v12 = 1024;
      v13 = 269;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  TypedProperty::SetPropertyData: proposed property value is not supported.", (uint8_t *)&v10, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v9 = 1852797029;
    goto LABEL_17;
  }
  v6 = *(unsigned __int8 *)(a1 + 9);
  if (!*(_BYTE *)(a1 + 9))
    *(_DWORD *)(a1 + 36) = *a2;
  return v6 == 0;
}

float ADS::TypedProperty<float>::PerformConfigChange(float *a1, float *a2)
{
  float result;
  _DWORD *exception;
  float v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = a2[14];
  (*(void (**)(float *))(*(_QWORD *)a2 + 8))(a2);
  if (((*(uint64_t (**)(float *, float *))(*(_QWORD *)a1 + 96))(a1, &v5) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v7 = "ADS_Property.h";
      v8 = 1024;
      v9 = 245;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  TypedProperty::PerformConfigChange: proposed property value is not supported.", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  result = v5;
  a1[9] = v5;
  return result;
}

uint64_t ADS::TypedProperty<float>::AbortConfigChange(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  return result;
}

float ADS::TypedProperty<float>::GetChangeInfo(uint64_t a1, float *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  float result;
  int v10;
  _DWORD *exception;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  v7 = *(_QWORD *)(a1 + 12);
  v8 = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 12) = v7;
  *(_DWORD *)(v6 + 20) = v8;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)v6 = &off_1E6977498;
  if (a3 != 4)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v12 = 136315394;
      v13 = "ADS_ChangeInfoData.h";
      v14 = 1024;
      v15 = 52;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ChangeInfoData::GetChangeInfo: wrong size for given property.", (uint8_t *)&v12, 0x12u);
    }
    v10 = 561211770;
LABEL_10:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v10;
  }
  if (!a2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v12 = 136315394;
      v13 = "ADS_ChangeInfoData.h";
      v14 = 1024;
      v15 = 53;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ChangeInfoData::GetChangeInfo: no data provided for new property value.", (uint8_t *)&v12, 0x12u);
    }
    v10 = 2003329396;
    goto LABEL_10;
  }
  result = *a2;
  *(float *)(v6 + 56) = *a2;
  return result;
}

void sub_1B598481C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &off_1E6977D78;
  MEMORY[0x1B5E50688](v1, 0x10A1C401BAC4818);
  _Unwind_Resume(a1);
}

_QWORD *ADS::TypedProperty<float>::~TypedProperty(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E6977408;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return a1;
}

void ADS::TypedProperty<float>::~TypedProperty(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E6977408;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B5E50688);
}

uint64_t ADS::TypedProperty<float>::IsSupportedValue(uint64_t a1, float *a2)
{
  float *v2;
  float *v3;

  v3 = *(float **)(a1 + 40);
  v2 = *(float **)(a1 + 48);
  if (v2 == v3)
    return 1;
  while (*v3 != *a2)
  {
    if (++v3 == v2)
    {
      v3 = *(float **)(a1 + 48);
      return v3 != v2;
    }
  }
  return v3 != v2;
}

_QWORD *ADS::ChangeInfoData<float>::~ChangeInfoData(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6977D78;
  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void ADS::ChangeInfoData<float>::~ChangeInfoData(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6977D78;
  v1 = a1 + 3;
  v2 = (_QWORD *)a1[6];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<ADS::TypedProperty<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69773B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ADS::TypedProperty<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69773B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<ADS::TypedProperty<float>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 80))(a1 + 24);
}

uint64_t ADS::TypedProperty<unsigned int>::GetPropertyDataSize()
{
  return 4;
}

uint64_t ADS::TypedProperty<unsigned int>::GetPropertyData(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 36);
  return 4;
}

BOOL ADS::TypedProperty<unsigned int>::SetPropertyData(uint64_t a1, _DWORD *a2, int a3, char a4)
{
  int v6;
  _DWORD *exception;
  int v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if ((a4 & 1) == 0 && !*(_BYTE *)(a1 + 8))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "ADS_Property.h";
      v12 = 1024;
      v13 = 266;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  TypedProperty::SetPropertyData: this property cannot be set.", (uint8_t *)&v10, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v9 = 1970171760;
LABEL_17:
    exception[2] = v9;
  }
  if (a3 != 4)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "ADS_Property.h";
      v12 = 1024;
      v13 = 268;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  TypedProperty::SetPropertyData: wrong size for the data for this property.", (uint8_t *)&v10, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v9 = 561211770;
    goto LABEL_17;
  }
  if (((*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a1 + 96))(a1, a2) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "ADS_Property.h";
      v12 = 1024;
      v13 = 269;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  TypedProperty::SetPropertyData: proposed property value is not supported.", (uint8_t *)&v10, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v9 = 1852797029;
    goto LABEL_17;
  }
  v6 = *(unsigned __int8 *)(a1 + 9);
  if (!*(_BYTE *)(a1 + 9))
    *(_DWORD *)(a1 + 36) = *a2;
  return v6 == 0;
}

uint64_t ADS::TypedProperty<unsigned int>::PerformConfigChange(_DWORD *a1, _DWORD *a2)
{
  uint64_t result;
  _DWORD *exception;
  int v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = a2[14];
  (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 8))(a2);
  result = (*(uint64_t (**)(_DWORD *, int *))(*(_QWORD *)a1 + 96))(a1, &v5);
  if ((result & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v7 = "ADS_Property.h";
      v8 = 1024;
      v9 = 245;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  TypedProperty::PerformConfigChange: proposed property value is not supported.", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  a1[9] = v5;
  return result;
}

uint64_t ADS::TypedProperty<unsigned int>::AbortConfigChange(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  return result;
}

uint64_t ADS::TypedProperty<unsigned int>::GetChangeInfo(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  int v9;
  _DWORD *exception;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  result = operator new();
  v7 = *(_QWORD *)(a1 + 12);
  v8 = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 12) = v7;
  *(_DWORD *)(result + 20) = v8;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)result = &off_1E6977380;
  if (a3 != 4)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v11 = 136315394;
      v12 = "ADS_ChangeInfoData.h";
      v13 = 1024;
      v14 = 52;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ChangeInfoData::GetChangeInfo: wrong size for given property.", (uint8_t *)&v11, 0x12u);
    }
    v9 = 561211770;
LABEL_10:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v9;
  }
  if (!a2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v11 = 136315394;
      v12 = "ADS_ChangeInfoData.h";
      v13 = 1024;
      v14 = 53;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ChangeInfoData::GetChangeInfo: no data provided for new property value.", (uint8_t *)&v11, 0x12u);
    }
    v9 = 2003329396;
    goto LABEL_10;
  }
  *(_DWORD *)(result + 56) = *a2;
  return result;
}

void sub_1B5984F78(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = &off_1E6977D78;
  MEMORY[0x1B5E50688](v1, 0x10A1C401BAC4818);
  _Unwind_Resume(a1);
}

_QWORD *ADS::TypedProperty<unsigned int>::~TypedProperty(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E69772E0;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return a1;
}

void ADS::TypedProperty<unsigned int>::~TypedProperty(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E69772E0;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B5E50688);
}

BOOL ADS::TypedProperty<unsigned int>::IsSupportedValue(uint64_t a1, __int32 *a2)
{
  __int32 *v3;
  __int32 *v4;
  uint64_t v5;
  __int32 *v6;
  __int32 *v7;

  v5 = a1 + 40;
  v3 = *(__int32 **)(a1 + 40);
  v4 = *(__int32 **)(v5 + 8);
  if (v4 == v3)
    return 1;
  v6 = wmemchr(v3, *a2, v4 - v3);
  if (v6)
    v7 = v6;
  else
    v7 = v4;
  return v7 != *(__int32 **)(a1 + 48);
}

void std::__shared_ptr_emplace<ADS::TypedProperty<unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6977290;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ADS::TypedProperty<unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6977290;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<ADS::TypedProperty<unsigned int>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 80))(a1 + 24);
}

OS::CF::Boolean *OS::CF::Boolean::Boolean(OS::CF::Boolean *this, int a2)
{
  CFTypeRef *v3;
  CFTypeRef v4;

  v3 = (CFTypeRef *)MEMORY[0x1E0C9AE58];
  if (!a2)
    v3 = (CFTypeRef *)MEMORY[0x1E0C9AE48];
  v4 = *v3;
  if (*v3)
    CFRetain(*v3);
  *(_QWORD *)this = &off_1E6998690;
  *((_QWORD *)this + 1) = v4;
  return this;
}

void OS::CF::Boolean::~Boolean(OS::CF::Boolean *this)
{
  OS::CF::UntypedObject::~UntypedObject(this);
  JUMPOUT(0x1B5E50688);
}

void OS::CF::UUID::~UUID(OS::CF::UUID *this)
{
  OS::CF::UntypedObject::~UntypedObject(this);
  JUMPOUT(0x1B5E50688);
}

void OS::CF::Data::~Data(OS::CF::Data *this)
{
  OS::CF::UntypedObject::~UntypedObject(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t ADS::Device::getCurrentZTS(ADS::Device *this, double *a2, unint64_t *a3, unint64_t *a4)
{
  double *v7;
  uint64_t result;

  v7 = (double *)((char *)this + 208);
  result = (*(uint64_t (**)(char *))(*((_QWORD *)this + 26) + 16))((char *)this + 208);
  *a2 = v7[57];
  *a3 = *((_QWORD *)v7 + 58);
  *a4 = *((_QWORD *)v7 + 59);
  if ((_DWORD)result)
    return (*(uint64_t (**)(double *))(*(_QWORD *)v7 + 24))(v7);
  return result;
}

void caulk::concurrent::details::rt_message_call<ADS::Device::testOutputSafetyViolation(AudioTimeStamp const&)::$_0,std::tuple<unsigned int,char const*,int,double>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<ADS::Device::testOutputSafetyViolation(AudioTimeStamp const&)::$_0,std::tuple<unsigned int,char const*,int,double>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  caulk::concurrent::message *v12;
  uint8_t buf[8];
  _BYTE v14[10];
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v14;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v14)
  {
    v4 = (unint64_t *)(*(_QWORD *)v14 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v14 = 2080;
    *(_QWORD *)&v14[2] = v8;
    v15 = 1024;
    v16 = v9;
    v17 = 2048;
    v18 = v10;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Output Safety Offset Violation check failed, theSafetyViolation %f", buf, 0x22u);
  }
  return caulk::concurrent::details::rt_message_call<ADS::Device::testOutputSafetyViolation(AudioTimeStamp const&)::$_0,std::tuple<unsigned int,char const*,int,double>>::rt_cleanup::~rt_cleanup(&v12);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<ADS::Device::testOutputSafetyViolation(AudioTimeStamp const&)::$_0,std::tuple<unsigned int,char const*,int,double>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void CAX4CCString::CAX4CCString(CAX4CCString *this)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  *(_DWORD *)((char *)this + 1) = -1;
  if (!__maskrune(-1, 0x40000uLL))
    goto LABEL_14;
  v2 = *((char *)this + 2);
  v3 = MEMORY[0x1E0C80978];
  if ((v2 & 0x80000000) != 0)
  {
    if (!__maskrune(v2, 0x40000uLL))
      goto LABEL_14;
  }
  else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v2 + 60) & 0x40000) == 0)
  {
    goto LABEL_14;
  }
  v4 = *((char *)this + 3);
  if ((v4 & 0x80000000) != 0)
  {
    if (!__maskrune(v4, 0x40000uLL))
      goto LABEL_14;
  }
  else if ((*(_DWORD *)(v3 + 4 * v4 + 60) & 0x40000) == 0)
  {
    goto LABEL_14;
  }
  v5 = *((char *)this + 4);
  if ((v5 & 0x80000000) != 0)
  {
    if (__maskrune(v5, 0x40000uLL))
      goto LABEL_12;
  }
  else if ((*(_DWORD *)(v3 + 4 * v5 + 60) & 0x40000) != 0)
  {
LABEL_12:
    *(_WORD *)((char *)this + 5) = 39;
    *(_BYTE *)this = 39;
    return;
  }
LABEL_14:
  snprintf((char *)this, 0x10uLL, "%d", -1);
}

void caulk::concurrent::details::rt_message_call<ADS::Device::testInputSafetyViolation(AudioTimeStamp const&,unsigned int)::$_0,std::tuple<unsigned int,char const*,int,double>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<ADS::Device::testInputSafetyViolation(AudioTimeStamp const&,unsigned int)::$_0,std::tuple<unsigned int,char const*,int,double>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  caulk::concurrent::message *v12;
  uint8_t buf[8];
  _BYTE v14[10];
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v14;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v14)
  {
    v4 = (unint64_t *)(*(_QWORD *)v14 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v14 = 2080;
    *(_QWORD *)&v14[2] = v8;
    v15 = 1024;
    v16 = v9;
    v17 = 2048;
    v18 = v10;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Input Safety Offset Violation check failed, theSafetyViolation %f", buf, 0x22u);
  }
  return caulk::concurrent::details::rt_message_call<ADS::Device::testInputSafetyViolation(AudioTimeStamp const&,unsigned int)::$_0,std::tuple<unsigned int,char const*,int,double>>::rt_cleanup::~rt_cleanup(&v12);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<ADS::Device::testInputSafetyViolation(AudioTimeStamp const&,unsigned int)::$_0,std::tuple<unsigned int,char const*,int,double>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void AudioObjectShow(AudioObjectID inObjectID)
{
  HALS_ObjectMap *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  HALS_Object *v8;
  _DWORD *exception;
  CFIndex usedBufLen;
  int v11;
  CFStringRef theString;
  uint64_t v13;
  int v14;
  char v15[5];
  uint64_t v16;
  std::__shared_weak_count *v17;
  UInt8 buffer[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;
  CFRange v25;

  v1 = *(HALS_ObjectMap **)&inObjectID;
  v24 = *MEMORY[0x1E0C80C00];
  if (AllowHALClientsInThisProcess())
  {
    HALS_System::StartServer(&v16, 0);
    v2 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = (unsigned int *)HALS_ObjectMap::CopyObjectByObjectID(v1);
    v6 = v5;
    if (!v5)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buffer = 136315650;
        v19 = "HALS_Framework-ios-imp.cpp";
        v20 = 1024;
        v21 = 343;
        v22 = 1024;
        v23 = (int)v1;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectShow: no object with given ID %u", buffer, 0x18u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 560947818;
    }
    v7 = v5[5];
    v15[0] = HIBYTE(v7);
    v15[1] = BYTE2(v7);
    v15[2] = BYTE1(v7);
    v15[3] = v7;
    v15[4] = 0;
    v13 = 0x676C6F626C6E616DLL;
    v14 = 0;
    theString = 0;
    v11 = 8;
    (*(void (**)(unsigned int *, HALS_ObjectMap *, uint64_t *, uint64_t, int *, CFStringRef *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v5 + 112))(v5, v1, &v13, 8, &v11, &theString, 0, 0, 0);
    buffer[0] = 0;
    if (theString)
    {
      usedBufLen = 0;
      v25.length = CFStringGetLength(theString);
      v25.location = 0;
      CFStringGetBytes(theString, v25, 0x8000100u, 0, 0, buffer, 255, &usedBufLen);
      buffer[usedBufLen] = 0;
      CFRelease(theString);
    }
    printf("AudioObjectID:\t\t0x%lX\n\tAudioClassID:\t'%s'\n\tName:\t\t\t%s\n", v6[4], v15, (const char *)buffer);
    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v6, v8);
  }
}

void sub_1B59858A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

OSStatus AudioObjectIsPropertySettable(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, Boolean *outIsSettable)
{
  HALS_ObjectMap *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  HALS_Device *v9;
  AudioObjectPropertyAddress *v10;
  HALS_Device *v11;
  int v12;
  int v13;
  OSStatus v14;
  unsigned int *v15;
  unsigned int *v16;
  int v17;
  HALS_Object *v18;
  void *v19;
  HALS_ObjectMap *InternalIOContextID;
  uint64_t v21;
  HALS_ObjectMap *v22;
  int v23;
  HALS_Object *v24;
  int v25;
  HALS_Object *v26;
  int v27;
  int v28;
  int v30;
  _DWORD *exception;
  _DWORD *v32;
  _DWORD *v33;
  unsigned int v34[2];
  int v35;
  AudioObjectPropertyAddress v36;
  std::__shared_weak_count *v37;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  uint64_t v44;

  v5 = *(HALS_ObjectMap **)&inObjectID;
  v44 = *MEMORY[0x1E0C80C00];
  if (AllowHALClientsInThisProcess())
  {
    HALS_System::StartServer((uint64_t *)&v36.mElement, 0);
    v6 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (!outIsSettable)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v39 = "HALS_Framework-ios-imp.cpp";
        v40 = 1024;
        v41 = 531;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectIsPropertySettable: the outIsSettable argument is NULL", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
    v9 = (HALS_Device *)HALS_ObjectMap::CopyObjectByObjectID(v5);
    v11 = v9;
    if (!v9)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v39 = "HALS_Framework-ios-imp.cpp";
        v40 = 1024;
        v41 = 535;
        v42 = 1024;
        v43 = (int)v5;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectIsPropertySettable: no object with given ID %u", buf, 0x18u);
      }
      v32 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v32 = &off_1E69A1B30;
      v32[2] = 560947818;
    }
    v12 = *((_DWORD *)v9 + 5);
    if (v12 <= 1701078389)
    {
      if (v12 == 1633773415)
        goto LABEL_17;
      v13 = 1633969526;
    }
    else
    {
      if (v12 == 1701078390 || v12 == 1701733488)
        goto LABEL_17;
      v13 = 1919182198;
    }
    if (v12 != v13)
    {
      v28 = *((_DWORD *)v9 + 6);
      if (v12 != v28)
      {
        if (v28 <= 1701078389)
        {
          if (v28 == 1633773415)
            goto LABEL_17;
          v30 = 1633969526;
        }
        else
        {
          if (v28 == 1701078390 || v28 == 1919182198)
            goto LABEL_17;
          v30 = 1701733488;
        }
        if (v28 == v30)
          goto LABEL_17;
      }
      if (!(*(unsigned int (**)(HALS_Device *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, _QWORD))(*(_QWORD *)v9 + 88))(v9, v5, inAddress, 0))
      {
        v14 = 2003332927;
        *outIsSettable = 0;
        goto LABEL_39;
      }
      LOBYTE(v25) = (*(uint64_t (**)(HALS_Device *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, _QWORD))(*(_QWORD *)v11 + 96))(v11, v5, inAddress, 0);
      goto LABEL_33;
    }
LABEL_17:
    *(_QWORD *)&v36.mSelector = 0;
    v35 = 0;
    *(_QWORD *)v34 = 0;
    HALB_Info::TranslateDeviceAddressToControlAddress((int *)inAddress, (const AudioObjectPropertyAddress *)&v36.mScope, &v36.mSelector, v34, v10);
    if (v36.mScope)
    {
      v15 = (unsigned int *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)v11 + 640))(v11);
      v16 = v15;
      if (v15)
      {
        v17 = (*(uint64_t (**)(unsigned int *, _QWORD, unsigned int *, _QWORD))(*(_QWORD *)v15 + 88))(v15, v15[4], v34, 0);
        if (v17)
        {
          v5 = (HALS_ObjectMap *)v16[4];
          inAddress = (const AudioObjectPropertyAddress *)v34;
          v19 = v16;
LABEL_29:
          LOBYTE(v17) = (*(uint64_t (**)(void *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, _QWORD))(*(_QWORD *)v19 + 96))(v19, v5, inAddress, 0);
          v14 = 0;
LABEL_38:
          *outIsSettable = v17;
          HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v16, v18);
          goto LABEL_39;
        }
      }
      else
      {
        v27 = (*(uint64_t (**)(HALS_Device *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, _QWORD))(*(_QWORD *)v11 + 88))(v11, v5, inAddress, 0);
        v19 = v11;
        if (v27)
          goto LABEL_29;
        LOBYTE(v17) = 0;
      }
      v14 = 2003332927;
      goto LABEL_38;
    }
    if (HALB_Info::IsIOContextProperty((HALB_Info *)inAddress->mSelector, 0)
      && (*(unsigned int (**)(HALS_Device *))(*(_QWORD *)v11 + 832))(v11))
    {
      InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(v11);
      v21 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
      v22 = (HALS_ObjectMap *)v21;
      if (!v21)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v39 = "HALS_Framework-ios-imp.cpp";
          v40 = 1024;
          v41 = 601;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectIsPropertySettable: no IO Context with given description", buf, 0x12u);
        }
        v33 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v33 = &off_1E69A1B30;
        v33[2] = 2003332927;
      }
      v23 = (*(uint64_t (**)(uint64_t, HALS_ObjectMap *, const AudioObjectPropertyAddress *, _QWORD))(*(_QWORD *)v21 + 88))(v21, InternalIOContextID, inAddress, 0);
      if (v23)
      {
        LOBYTE(v23) = (*(uint64_t (**)(HALS_ObjectMap *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, _QWORD))(*(_QWORD *)v22 + 96))(v22, InternalIOContextID, inAddress, 0);
        v14 = 0;
      }
      else
      {
        v14 = 2003332927;
      }
      *outIsSettable = v23;
      HALS_ObjectMap::ReleaseObject(v22, v24);
      goto LABEL_39;
    }
    v25 = (*(uint64_t (**)(HALS_Device *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, _QWORD))(*(_QWORD *)v11 + 88))(v11, v5, inAddress, 0);
    if (!v25)
    {
      v14 = 2003332927;
      goto LABEL_35;
    }
    LOBYTE(v25) = (*(uint64_t (**)(HALS_Device *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, _QWORD))(*(_QWORD *)v11 + 96))(v11, v5, inAddress, 0);
LABEL_33:
    v14 = 0;
LABEL_35:
    *outIsSettable = v25;
LABEL_39:
    HALS_ObjectMap::ReleaseObject(v11, v26);
    return v14;
  }
  return 560033144;
}

void sub_1B5985EB0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

OSStatus AudioObjectGetPropertyDataSize(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, UInt32 inQualifierDataSize, const void *inQualifierData, UInt32 *outDataSize)
{
  uint64_t v7;
  HALS_ObjectMap *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  HALS_Device *v13;
  AudioObjectPropertyAddress *v14;
  HALS_Device *v15;
  int v16;
  int v17;
  OSStatus v18;
  unsigned int *v19;
  unsigned int *v20;
  UInt32 v21;
  HALS_Object *v22;
  void *v23;
  HALS_ObjectMap *InternalIOContextID;
  uint64_t v25;
  HALS_ObjectMap *v26;
  UInt32 v27;
  HALS_Object *v28;
  UInt32 v29;
  HALS_Object *v30;
  int v31;
  int v32;
  int v34;
  _DWORD *exception;
  _DWORD *v36;
  _DWORD *v37;
  unsigned int v38[2];
  int v39;
  AudioObjectPropertyAddress v40;
  std::__shared_weak_count *v41;
  uint8_t buf[4];
  const char *v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  uint64_t v48;

  v7 = *(_QWORD *)&inQualifierDataSize;
  v9 = *(HALS_ObjectMap **)&inObjectID;
  v48 = *MEMORY[0x1E0C80C00];
  if (AllowHALClientsInThisProcess())
  {
    HALS_System::StartServer((uint64_t *)&v40.mElement, 0);
    v10 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (!outDataSize)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v43 = "HALS_Framework-ios-imp.cpp";
        v44 = 1024;
        v45 = 715;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectGetPropertyDataSize: the outDataSize argument is NULL", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
    *outDataSize = 0;
    v13 = (HALS_Device *)HALS_ObjectMap::CopyObjectByObjectID(v9);
    v15 = v13;
    if (!v13)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v43 = "HALS_Framework-ios-imp.cpp";
        v44 = 1024;
        v45 = 719;
        v46 = 1024;
        v47 = (int)v9;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectGetPropertyDataSize: no object with given ID %u", buf, 0x18u);
      }
      v36 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v36 = &off_1E69A1B30;
      v36[2] = 560947818;
    }
    v16 = *((_DWORD *)v13 + 5);
    if (v16 <= 1701078389)
    {
      if (v16 == 1633773415)
        goto LABEL_17;
      v17 = 1633969526;
    }
    else
    {
      if (v16 == 1701078390 || v16 == 1701733488)
        goto LABEL_17;
      v17 = 1919182198;
    }
    if (v16 != v17)
    {
      v32 = *((_DWORD *)v13 + 6);
      if (v16 != v32)
      {
        if (v32 <= 1701078389)
        {
          if (v32 == 1633773415)
            goto LABEL_17;
          v34 = 1633969526;
        }
        else
        {
          if (v32 == 1701078390 || v32 == 1919182198)
            goto LABEL_17;
          v34 = 1701733488;
        }
        if (v32 == v34)
          goto LABEL_17;
      }
      if (!(*(unsigned int (**)(HALS_Device *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, _QWORD))(*(_QWORD *)v13 + 88))(v13, v9, inAddress, 0))
      {
        v18 = 2003332927;
        *outDataSize = 0;
        goto LABEL_39;
      }
      v29 = (*(uint64_t (**)(HALS_Device *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, uint64_t, const void *, _QWORD))(*(_QWORD *)v15 + 104))(v15, v9, inAddress, v7, inQualifierData, 0);
      goto LABEL_33;
    }
LABEL_17:
    *(_QWORD *)&v40.mSelector = 0;
    v39 = 0;
    *(_QWORD *)v38 = 0;
    HALB_Info::TranslateDeviceAddressToControlAddress((int *)inAddress, (const AudioObjectPropertyAddress *)&v40.mScope, &v40.mSelector, v38, v14);
    if (v40.mScope)
    {
      v19 = (unsigned int *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)v15 + 640))(v15);
      v20 = v19;
      if (v19)
      {
        v21 = (*(uint64_t (**)(unsigned int *, _QWORD, unsigned int *, _QWORD))(*(_QWORD *)v19 + 88))(v19, v19[4], v38, 0);
        if (v21)
        {
          v9 = (HALS_ObjectMap *)v20[4];
          inAddress = (const AudioObjectPropertyAddress *)v38;
          v23 = v20;
LABEL_29:
          v21 = (*(uint64_t (**)(void *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, uint64_t, const void *, _QWORD))(*(_QWORD *)v23 + 104))(v23, v9, inAddress, v7, inQualifierData, 0);
          v18 = 0;
LABEL_38:
          *outDataSize = v21;
          HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v20, v22);
          goto LABEL_39;
        }
      }
      else
      {
        v31 = (*(uint64_t (**)(HALS_Device *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, _QWORD))(*(_QWORD *)v15 + 88))(v15, v9, inAddress, 0);
        v23 = v15;
        if (v31)
          goto LABEL_29;
        v21 = 0;
      }
      v18 = 2003332927;
      goto LABEL_38;
    }
    if (HALB_Info::IsIOContextProperty((HALB_Info *)inAddress->mSelector, 0)
      && (*(unsigned int (**)(HALS_Device *))(*(_QWORD *)v15 + 832))(v15))
    {
      InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(v15);
      v25 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
      v26 = (HALS_ObjectMap *)v25;
      if (!v25)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v43 = "HALS_Framework-ios-imp.cpp";
          v44 = 1024;
          v45 = 785;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectGetPropertyDataSize: no IO Context with given description", buf, 0x12u);
        }
        v37 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v37 = &off_1E69A1B30;
        v37[2] = 2003332927;
      }
      v27 = (*(uint64_t (**)(uint64_t, HALS_ObjectMap *, const AudioObjectPropertyAddress *, _QWORD))(*(_QWORD *)v25 + 88))(v25, InternalIOContextID, inAddress, 0);
      if (v27)
      {
        v27 = (*(uint64_t (**)(HALS_ObjectMap *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, uint64_t, const void *, _QWORD))(*(_QWORD *)v26 + 104))(v26, InternalIOContextID, inAddress, v7, inQualifierData, 0);
        v18 = 0;
      }
      else
      {
        v18 = 2003332927;
      }
      *outDataSize = v27;
      HALS_ObjectMap::ReleaseObject(v26, v28);
      goto LABEL_39;
    }
    v29 = (*(uint64_t (**)(HALS_Device *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, _QWORD))(*(_QWORD *)v15 + 88))(v15, v9, inAddress, 0);
    if (!v29)
    {
      v18 = 2003332927;
      goto LABEL_35;
    }
    v29 = (*(uint64_t (**)(HALS_Device *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, uint64_t, const void *, _QWORD))(*(_QWORD *)v15 + 104))(v15, v9, inAddress, v7, inQualifierData, 0);
LABEL_33:
    v18 = 0;
LABEL_35:
    *outDataSize = v29;
LABEL_39:
    HALS_ObjectMap::ReleaseObject(v15, v30);
    return v18;
  }
  return 560033144;
}

void sub_1B598654C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

OSStatus AudioObjectGetPropertyData(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, UInt32 inQualifierDataSize, const void *inQualifierData, UInt32 *ioDataSize, void *outData)
{
  uint64_t v9;
  HALS_ObjectMap *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  HALS_Device *v15;
  AudioObjectPropertyAddress *v16;
  HALS_Device *v17;
  int v18;
  int v19;
  OSStatus v20;
  unsigned int *v21;
  unsigned int *v22;
  signed int mSelector;
  HALS_Object *v24;
  HALS_ObjectMap *InternalIOContextID;
  uint64_t v26;
  int v27;
  size_t v28;
  const AudioObjectPropertyAddress *v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  HALB_Info *v36;
  HALS_Object *v37;
  const __CFString **v38;
  NSObject *v40;
  const char *v41;
  _DWORD *exception;
  _DWORD *v43;
  _DWORD *v44;
  unsigned int v45[2];
  int v46;
  AudioObjectPropertyAddress v47;
  std::__shared_weak_count *v48;
  uint8_t buf[4];
  const char *v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  uint64_t v55;

  v9 = *(_QWORD *)&inQualifierDataSize;
  v11 = *(HALS_ObjectMap **)&inObjectID;
  v55 = *MEMORY[0x1E0C80C00];
  if (!AllowHALClientsInThisProcess())
    return 560033144;
  HALS_System::StartServer((uint64_t *)&v47.mElement, 0);
  v12 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (!ioDataSize)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_80;
    *(_DWORD *)buf = 136315394;
    v50 = "HALS_Framework-ios-imp.cpp";
    v51 = 1024;
    v52 = 894;
    v40 = MEMORY[0x1E0C81028];
    v41 = "%25s:%-5d  AudioObjectGetPropertyData: the ioDataSize argument is NULL";
    goto LABEL_79;
  }
  if (!outData)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_80;
    *(_DWORD *)buf = 136315394;
    v50 = "HALS_Framework-ios-imp.cpp";
    v51 = 1024;
    v52 = 895;
    v40 = MEMORY[0x1E0C81028];
    v41 = "%25s:%-5d  AudioObjectGetPropertyData: the outData argument is NULL";
LABEL_79:
    _os_log_impl(&dword_1B57BA000, v40, OS_LOG_TYPE_ERROR, v41, buf, 0x12u);
LABEL_80:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v15 = (HALS_Device *)HALS_ObjectMap::CopyObjectByObjectID(v11);
  v17 = v15;
  if (!v15)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v50 = "HALS_Framework-ios-imp.cpp";
      v51 = 1024;
      v52 = 899;
      v53 = 1024;
      v54 = (int)v11;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectGetPropertyData: no object with given ID %u", buf, 0x18u);
    }
    v43 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v43 = &off_1E69A1B30;
    v43[2] = 560947818;
  }
  v18 = *((_DWORD *)v15 + 5);
  if (v18 <= 1701078389)
  {
    if (v18 == 1633773415)
      goto LABEL_18;
    v19 = 1633969526;
  }
  else
  {
    if (v18 == 1701078390 || v18 == 1701733488)
      goto LABEL_18;
    v19 = 1919182198;
  }
  if (v18 == v19)
    goto LABEL_18;
  v32 = *((_DWORD *)v15 + 6);
  if (v18 == v32)
  {
LABEL_35:
    v33 = (*(uint64_t (**)(HALS_Device *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, _QWORD))(*(_QWORD *)v15 + 88))(v15, v11, inAddress, 0);
    v28 = *ioDataSize;
    if (v33)
    {
      (*(void (**)(HALS_Device *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, size_t, UInt32 *, void *, uint64_t, const void *, _QWORD))(*(_QWORD *)v17 + 112))(v17, v11, inAddress, v28, ioDataSize, outData, v9, inQualifierData, 0);
      goto LABEL_37;
    }
LABEL_38:
    v20 = 2003332927;
    bzero(outData, v28);
    *ioDataSize = 0;
    goto LABEL_67;
  }
  if (v32 <= 1701078389)
  {
    if (v32 == 1633773415)
      goto LABEL_18;
    v35 = 1633969526;
  }
  else
  {
    if (v32 == 1701078390 || v32 == 1919182198)
      goto LABEL_18;
    v35 = 1701733488;
  }
  if (v32 != v35)
    goto LABEL_35;
LABEL_18:
  *(_QWORD *)&v47.mSelector = 0;
  v46 = 0;
  *(_QWORD *)v45 = 0;
  HALB_Info::TranslateDeviceAddressToControlAddress((int *)inAddress, (const AudioObjectPropertyAddress *)&v47.mScope, &v47.mSelector, v45, v16);
  if (v47.mScope)
  {
    v21 = (unsigned int *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)v17 + 640))(v17);
    v22 = v21;
    if (v21)
    {
      if ((*(unsigned int (**)(unsigned int *, _QWORD, unsigned int *, _QWORD))(*(_QWORD *)v21 + 88))(v21, v21[4], v45, 0))
      {
        mSelector = inAddress->mSelector;
        if (HALB_Info::IsAVTProperty((HALB_Info *)inAddress->mSelector))
        {
          (*(void (**)(unsigned int *, _QWORD, unsigned int *, _QWORD, char *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v22 + 112))(v22, v22[4], v45, *((unsigned int *)outData + 6), (char *)outData + 24, *((_QWORD *)outData + 2), *((unsigned int *)outData + 2), *(_QWORD *)outData, 0);
LABEL_65:
          v20 = 0;
          goto LABEL_66;
        }
        if (mSelector > 1935946357)
        {
          if (mSelector > 1936811891)
          {
            if (mSelector == 1936811892 || mSelector == 1983013986)
              goto LABEL_64;
            v34 = 1937125988;
          }
          else
          {
            if (mSelector == 1935946358 || mSelector == 1936092525)
              goto LABEL_64;
            v34 = 1936811878;
          }
        }
        else
        {
          if (mSelector <= 1836462691)
          {
            if (mSelector != 1684157046 && mSelector != 1818453107)
            {
              v34 = 1818456932;
              goto LABEL_63;
            }
LABEL_64:
            (*(void (**)(unsigned int *, _QWORD, unsigned int *, _QWORD, UInt32 *, void *, _QWORD, void *, _QWORD))(*(_QWORD *)v22 + 112))(v22, v22[4], v45, *ioDataSize, ioDataSize, outData, *ioDataSize, outData, 0);
            goto LABEL_65;
          }
          if (mSelector == 1836462692 || mSelector == 1836462707)
            goto LABEL_64;
          v34 = 1885762669;
        }
LABEL_63:
        if (mSelector != v34)
        {
          (*(void (**)(unsigned int *, _QWORD, unsigned int *, _QWORD, UInt32 *, void *, uint64_t, const void *, _QWORD))(*(_QWORD *)v22 + 112))(v22, v22[4], v45, *ioDataSize, ioDataSize, outData, v9, inQualifierData, 0);
          goto LABEL_65;
        }
        goto LABEL_64;
      }
      LODWORD(v31) = *ioDataSize;
    }
    else
    {
      v30 = (*(uint64_t (**)(HALS_Device *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, _QWORD))(*(_QWORD *)v17 + 88))(v17, v11, inAddress, 0);
      v31 = *ioDataSize;
      if (v30)
      {
        (*(void (**)(HALS_Device *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, uint64_t, UInt32 *, void *, uint64_t, const void *, _QWORD))(*(_QWORD *)v17 + 112))(v17, v11, inAddress, v31, ioDataSize, outData, v9, inQualifierData, 0);
        goto LABEL_65;
      }
    }
    v20 = 2003332927;
    bzero(outData, v31);
    *ioDataSize = 0;
LABEL_66:
    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v22, v24);
    goto LABEL_67;
  }
  if (HALB_Info::IsIOContextProperty((HALB_Info *)inAddress->mSelector, 0)
    && (*(unsigned int (**)(HALS_Device *))(*(_QWORD *)v17 + 832))(v17))
  {
    InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(v17);
    v26 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
    v22 = (unsigned int *)v26;
    if (!v26)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v50 = "HALS_Framework-ios-imp.cpp";
        v51 = 1024;
        v52 = 982;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectGetPropertyData: no IO Context with given description", buf, 0x12u);
      }
      v44 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v44 = &off_1E69A1B30;
      v44[2] = 2003332927;
    }
    if ((*(unsigned int (**)(uint64_t, HALS_ObjectMap *, const AudioObjectPropertyAddress *, _QWORD))(*(_QWORD *)v26 + 88))(v26, InternalIOContextID, inAddress, 0))
    {
      (*(void (**)(unsigned int *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, _QWORD, UInt32 *, void *, uint64_t, const void *, _QWORD))(*(_QWORD *)v22 + 112))(v22, InternalIOContextID, inAddress, *ioDataSize, ioDataSize, outData, v9, inQualifierData, 0);
      v20 = 0;
    }
    else
    {
      v20 = 2003332927;
      bzero(outData, *ioDataSize);
      *ioDataSize = 0;
    }
    goto LABEL_66;
  }
  v27 = (*(uint64_t (**)(HALS_Device *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, _QWORD))(*(_QWORD *)v17 + 88))(v17, v11, inAddress, 0);
  v28 = *ioDataSize;
  if (!v27)
    goto LABEL_38;
  (*(void (**)(HALS_Device *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, size_t, UInt32 *, void *, uint64_t, const void *, _QWORD))(*(_QWORD *)v17 + 112))(v17, v11, inAddress, v28, ioDataSize, outData, v9, inQualifierData, 0);
LABEL_37:
  v20 = 0;
LABEL_67:
  v36 = (HALB_Info *)inAddress->mSelector;
  if (HALB_Info::IsLocalizedStringProperty(v36, v29))
  {
    if (HALB_Info::IsAVTProperty(v36))
    {
      v38 = (const __CFString **)*((_QWORD *)outData + 2);
      if (v38)
        **((_QWORD **)outData + 2) = HALS_Object::CopyLocalizedString(v17, inAddress, *v38);
    }
    else
    {
      *(_QWORD *)outData = HALS_Object::CopyLocalizedString(v17, inAddress, *(const __CFString **)outData);
    }
  }
  HALS_ObjectMap::ReleaseObject(v17, v37);
  return v20;
}

void sub_1B5986E58(_Unwind_Exception *exception_object, HALS_Object *a2)
{
  _DWORD *v2;
  void *v3;
  HALS_ObjectMap *v4;
  HALS_ObjectMap *v5;
  int v7;
  HALS_Object *v8;

  if (!(_DWORD)a2)
    _Unwind_Resume(exception_object);
  v7 = (int)a2;
  HALS_ObjectMap::ReleaseObject(v5, a2);
  HALS_ObjectMap::ReleaseObject(v4, v8);
  __cxa_begin_catch(exception_object);
  if (v7 == 2)
  {
    if (!v2)
      goto LABEL_9;
  }
  else if (!v2)
  {
    goto LABEL_9;
  }
  if (v3)
    bzero(v3, *v2);
  *v2 = 0;
LABEL_9:
  __cxa_end_catch();
  JUMPOUT(0x1B5986BB4);
}

OSStatus AudioObjectSetPropertyData(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, UInt32 inQualifierDataSize, const void *inQualifierData, UInt32 inDataSize, const void *inData)
{
  uint64_t v7;
  uint64_t v9;
  HALS_ObjectMap *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  OSStatus v15;
  unsigned int *v16;
  AudioObjectPropertyAddress *v17;
  unsigned int *v18;
  int v19;
  int v20;
  unsigned int *v21;
  unsigned int *v22;
  HALS_Object *v23;
  uint64_t v24;
  unint64_t v25;
  HALS_ObjectMap *InternalIOContextID;
  uint64_t v27;
  HALS_ObjectMap *v28;
  HALS_Object *v29;
  HALS_Object *v30;
  int v31;
  int v32;
  _DWORD *exception;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t mElement;
  std::string v38;
  unsigned int v39[2];
  int v40;
  AudioObjectPropertyAddress v41;
  std::__shared_weak_count *v42;
  std::string __p;
  std::string v44;
  void *v45;
  std::string v46;
  uint64_t v47;
  void *v48;
  char v49;
  void *v50;
  char v51;
  uint64_t v52;
  std::string v53;
  uint64_t v54;

  v7 = *(_QWORD *)&inDataSize;
  v9 = *(_QWORD *)&inQualifierDataSize;
  v11 = *(HALS_ObjectMap **)&inObjectID;
  v54 = *MEMORY[0x1E0C80C00];
  if (AllowHALClientsInThisProcess())
  {
    HALS_System::StartServer((uint64_t *)&v41.mElement, 0);
    v12 = v42;
    if (v42)
    {
      p_shared_owners = (unint64_t *)&v42->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = 2003332927;
    if (!inData)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        LODWORD(v44.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v44.__r_.__value_.__r.__words + 4) = (std::string::size_type)"HALS_Framework-ios-imp.cpp";
        WORD2(v44.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v44.__r_.__value_.__r.__words[1] + 6) = 1135;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectSetPropertyData: the inData argument is NULL", (uint8_t *)&v44, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
    v16 = (unsigned int *)HALS_ObjectMap::CopyObjectByObjectID(v11);
    v18 = v16;
    if (!v16)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        LODWORD(v44.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)v44.__r_.__value_.__r.__words + 4) = (std::string::size_type)"HALS_Framework-ios-imp.cpp";
        WORD2(v44.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v44.__r_.__value_.__r.__words[1] + 6) = 1139;
        WORD1(v44.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v44.__r_.__value_.__r.__words[2]) = (_DWORD)v11;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectSetPropertyData: no object with given ID %u", (uint8_t *)&v44, 0x18u);
      }
      v35 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v35 = &off_1E69A1B30;
      v35[2] = 560947818;
    }
    v19 = v16[5];
    if (v19 <= 1701078389)
    {
      if (v19 == 1633773415)
        goto LABEL_17;
      v20 = 1633969526;
    }
    else
    {
      if (v19 == 1701078390 || v19 == 1701733488)
        goto LABEL_17;
      v20 = 1919182198;
    }
    if (v19 == v20)
      goto LABEL_17;
    v31 = v16[6];
    if (v19 == v31)
    {
LABEL_42:
      if ((*(unsigned int (**)(unsigned int *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, _QWORD))(*(_QWORD *)v16 + 88))(v16, v11, inAddress, 0))
      {
        if ((*(unsigned int (**)(unsigned int *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, _QWORD))(*(_QWORD *)v18 + 96))(v18, v11, inAddress, 0))
        {
          (*(void (**)(unsigned int *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, const void *, _QWORD))(*(_QWORD *)v18 + 120))(v18, v11, inAddress, v7, inData, v9, inQualifierData, 0);
          goto LABEL_45;
        }
LABEL_47:
        v15 = 1852797029;
      }
LABEL_78:
      HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v18, v30);
      return v15;
    }
    if (v31 <= 1701078389)
    {
      if (v31 == 1633773415)
        goto LABEL_17;
      v32 = 1633969526;
    }
    else
    {
      if (v31 == 1701078390 || v31 == 1919182198)
        goto LABEL_17;
      v32 = 1701733488;
    }
    if (v31 != v32)
      goto LABEL_42;
LABEL_17:
    *(_QWORD *)&v41.mSelector = 0;
    v40 = 0;
    *(_QWORD *)v39 = 0;
    HALB_Info::TranslateDeviceAddressToControlAddress((int *)inAddress, (const AudioObjectPropertyAddress *)&v41.mScope, &v41.mSelector, v39, v17);
    if (v41.mScope)
    {
      v21 = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v18 + 640))(v18);
      v22 = v21;
      if (v21)
      {
        if ((*(unsigned int (**)(unsigned int *, _QWORD, unsigned int *, _QWORD))(*(_QWORD *)v21 + 88))(v21, v21[4], v39, 0))
        {
          if ((*(unsigned int (**)(unsigned int *, _QWORD, unsigned int *, _QWORD))(*(_QWORD *)v22 + 96))(v22, v22[4], v39, 0))
          {
            if (inAddress->mSelector == 1987013741 || inAddress->mSelector == 1987013732)
            {
              std::string::basic_string[abi:ne180100]<0>(&v38, "AudioObjectSetPropertyData");
              v24 = v18[4];
              v25 = *(_QWORD *)&inAddress->mSelector;
              mElement = inAddress->mElement;
              std::string::basic_string[abi:ne180100]<0>(&__p, "(nullptr)");
              if ((_DWORD)v7 == 4)
              {
                std::to_string(&v44, *(float *)inData);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                __p = v44;
              }
              v44.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
              v44.__r_.__value_.__l.__size_ = 1174405120;
              v44.__r_.__value_.__r.__words[2] = (std::string::size_type)___Z34LogVolumeChangeForClientSideDeviceNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj26AudioObjectPropertyAddressjPKv_block_invoke;
              v45 = &__block_descriptor_tmp_19;
              if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v46, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
              else
                v46 = v38;
              v47 = v24;
              v48 = (void *)bswap32(v25);
              v49 = 5;
              v50 = (void *)((v25 >> 40) & 0xFF00 | HIBYTE(v25) | (v25 >> 24) & 0xFF0000 | (v25 >> 8) & 0xFF000000);
              v51 = 5;
              v52 = mElement;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v53, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
              else
                v53 = __p;
              AMCP::Utility::Dispatch_Queue::async_on_global(&v44);
              if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v53.__r_.__value_.__l.__data_);
              if (v51 < 0)
                operator delete(v50);
              if (v49 < 0)
                operator delete(v48);
              if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v46.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v38.__r_.__value_.__l.__data_);
              kdebug_trace();
            }
            (*(void (**)(unsigned int *, _QWORD, unsigned int *, uint64_t, const void *, uint64_t, const void *, _QWORD))(*(_QWORD *)v22 + 120))(v22, v22[4], v39, v7, inData, v9, inQualifierData, 0);
            if (inAddress->mSelector == 1987013741 || inAddress->mSelector == 1987013732)
              kdebug_trace();
            goto LABEL_76;
          }
LABEL_46:
          v15 = 1852797029;
        }
      }
      else if ((*(unsigned int (**)(unsigned int *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, _QWORD))(*(_QWORD *)v18 + 88))(v18, v11, inAddress, 0))
      {
        if ((*(unsigned int (**)(unsigned int *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, _QWORD))(*(_QWORD *)v18 + 96))(v18, v11, inAddress, 0))
        {
          (*(void (**)(unsigned int *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, const void *, _QWORD))(*(_QWORD *)v18 + 120))(v18, v11, inAddress, v7, inData, v9, inQualifierData, 0);
LABEL_76:
          v15 = 0;
          goto LABEL_77;
        }
        goto LABEL_46;
      }
LABEL_77:
      HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v22, v23);
      goto LABEL_78;
    }
    if (HALB_Info::IsIOContextProperty((HALB_Info *)inAddress->mSelector, 0)
      && (*(unsigned int (**)(unsigned int *))(*(_QWORD *)v18 + 832))(v18))
    {
      InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID((HALS_Device *)v18);
      v27 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
      v28 = (HALS_ObjectMap *)v27;
      if (!v27)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v44.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v44.__r_.__value_.__r.__words + 4) = (std::string::size_type)"HALS_Framework-ios-imp.cpp";
          WORD2(v44.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v44.__r_.__value_.__r.__words[1] + 6) = 1225;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectSetPropertyData: no IO Context with given description", (uint8_t *)&v44, 0x12u);
        }
        v36 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v36 = &off_1E69A1B30;
        v36[2] = 2003332927;
      }
      if ((*(unsigned int (**)(uint64_t, HALS_ObjectMap *, const AudioObjectPropertyAddress *, _QWORD))(*(_QWORD *)v27 + 88))(v27, InternalIOContextID, inAddress, 0))
      {
        if ((*(unsigned int (**)(HALS_ObjectMap *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, _QWORD))(*(_QWORD *)v28 + 96))(v28, InternalIOContextID, inAddress, 0))
        {
          (*(void (**)(HALS_ObjectMap *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, const void *, _QWORD))(*(_QWORD *)v28 + 120))(v28, InternalIOContextID, inAddress, v7, inData, v9, inQualifierData, 0);
          v15 = 0;
        }
        else
        {
          v15 = 1852797029;
        }
      }
      HALS_ObjectMap::ReleaseObject(v28, v29);
      goto LABEL_78;
    }
    if ((*(unsigned int (**)(unsigned int *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, _QWORD))(*(_QWORD *)v18 + 88))(v18, v11, inAddress, 0))
    {
      if ((*(unsigned int (**)(unsigned int *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, _QWORD))(*(_QWORD *)v18 + 96))(v18, v11, inAddress, 0))
      {
        (*(void (**)(unsigned int *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, const void *, _QWORD))(*(_QWORD *)v18 + 120))(v18, v11, inAddress, v7, inData, v9, inQualifierData, 0);
LABEL_45:
        v15 = 0;
        goto LABEL_78;
      }
      goto LABEL_47;
    }
    goto LABEL_78;
  }
  return 560033144;
}

void sub_1B5987808(_Unwind_Exception *exception_object, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  HALS_ObjectMap *v51;
  HALS_ObjectMap *v52;
  HALS_Object *v54;

  if ((_DWORD)a2)
  {
    if (a51 < 0)
      operator delete(__p);
    if (a45 < 0)
      operator delete(a40);
    if (a38 < 0)
      operator delete(a33);
    if (a27 < 0)
      operator delete(a22);
    if (a16 < 0)
      operator delete(a11);
    HALS_ObjectMap::ReleaseObject(v52, a2);
    HALS_ObjectMap::ReleaseObject(v51, v54);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B59875E0);
  }
  _Unwind_Resume(exception_object);
}

OSStatus AudioObjectAddPropertyListenerBlock(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, dispatch_queue_t inDispatchQueue, AudioObjectPropertyListenerBlock inListener)
{
  HALS_ObjectMap *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  HALS_ObjectMap *v11;
  HALS_Object *v12;
  NSObject *v15;
  const char *v16;
  _DWORD *exception;
  _DWORD *v18;
  _QWORD v19[5];
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  char v28;
  uint64_t v29;

  v7 = *(HALS_ObjectMap **)&inObjectID;
  v29 = *MEMORY[0x1E0C80C00];
  if (!AllowHALClientsInThisProcess())
    return 560033144;
  HALS_System::StartServer(&v20, 0);
  v8 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (!inAddress)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    *(_DWORD *)buf = 136315394;
    v23 = "HALS_Framework-ios-imp.cpp";
    v24 = 1024;
    v25 = 1344;
    v15 = MEMORY[0x1E0C81028];
    v16 = "%25s:%-5d  AudioObjectAddPropertyListenerBlock: can't add a listener proc without an address";
    goto LABEL_19;
  }
  if (!inListener)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    *(_DWORD *)buf = 136315394;
    v23 = "HALS_Framework-ios-imp.cpp";
    v24 = 1024;
    v25 = 1345;
    v15 = MEMORY[0x1E0C81028];
    v16 = "%25s:%-5d  AudioObjectAddPropertyListenerBlock: can't add a NULL listener proc";
LABEL_19:
    _os_log_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, v16, buf, 0x12u);
LABEL_20:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v11 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v7);
  if (!v11)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v23 = "HALS_Framework-ios-imp.cpp";
      v24 = 1024;
      v25 = 1349;
      v26 = 1024;
      v27 = (int)v7;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectAddPropertyListenerBlock: no object with given ID %u", buf, 0x18u);
    }
    v18 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v18 = &off_1E69A1B30;
    v18[2] = 560947818;
  }
  HALS_Listener::HALS_Listener(v19, inDispatchQueue, inListener);
  buf[0] = 0;
  v28 = 0;
  HALS_NotificationManager::AddPropertyListener((uint64_t)v19, v7, (char *)inAddress, (uint64_t)buf);
  if (v28)
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)buf);
  HALS_Listener::~HALS_Listener((HALS_Listener *)v19);
  HALS_ObjectMap::ReleaseObject(v11, v12);
  return 0;
}

void sub_1B5987C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

OSStatus AudioObjectRemovePropertyListenerBlock(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, dispatch_queue_t inDispatchQueue, AudioObjectPropertyListenerBlock inListener)
{
  HALS_ObjectMap *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  HALS_ObjectMap *v11;
  unsigned int v12;
  const AudioObjectPropertyAddress *v13;
  HALS_Object *v14;
  NSObject *v17;
  const char *v18;
  _DWORD *exception;
  _DWORD *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v7 = *(HALS_ObjectMap **)&inObjectID;
  v29 = *MEMORY[0x1E0C80C00];
  if (!AllowHALClientsInThisProcess())
    return 560033144;
  HALS_System::StartServer(&v21, 0);
  v8 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (!inAddress)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 136315394;
    v24 = "HALS_Framework-ios-imp.cpp";
    v25 = 1024;
    v26 = 1395;
    v17 = MEMORY[0x1E0C81028];
    v18 = "%25s:%-5d  AudioObjectRemovePropertyListenerBlock: can't remove a listener proc without an address";
    goto LABEL_17;
  }
  if (!inListener)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 136315394;
    v24 = "HALS_Framework-ios-imp.cpp";
    v25 = 1024;
    v26 = 1396;
    v17 = MEMORY[0x1E0C81028];
    v18 = "%25s:%-5d  AudioObjectRemovePropertyListenerBlock: can't remove a NULL listener proc";
LABEL_17:
    _os_log_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, v18, buf, 0x12u);
LABEL_18:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v11 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v7);
  if (!v11)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v24 = "HALS_Framework-ios-imp.cpp";
      v25 = 1024;
      v26 = 1400;
      v27 = 1024;
      v28 = (int)v7;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectRemovePropertyListenerBlock: no object with given ID %u", buf, 0x18u);
    }
    v20 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v20 = &off_1E69A1B30;
    v20[2] = 560947818;
  }
  HALS_Listener::HALS_Listener(buf, inDispatchQueue, inListener);
  HALS_NotificationManager::RemovePropertyListener((HALS_NotificationManager *)buf, v7, inAddress, v12, v13);
  HALS_Listener::~HALS_Listener((HALS_Listener *)buf);
  HALS_ObjectMap::ReleaseObject(v11, v14);
  return 0;
}

void sub_1B5987F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

OSStatus AudioObjectAddPropertyListener(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, AudioObjectPropertyListenerProc inListener, void *inClientData)
{
  HALS_ObjectMap *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  HALS_ObjectMap *v11;
  HALS_Object *v12;
  NSObject *v15;
  const char *v16;
  _DWORD *exception;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  AudioObjectPropertyListenerProc v23;
  void *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  char v33;
  uint64_t v34;

  v7 = *(HALS_ObjectMap **)&inObjectID;
  v34 = *MEMORY[0x1E0C80C00];
  if (!AllowHALClientsInThisProcess())
    return 560033144;
  HALS_System::StartServer(&v25, 0);
  v8 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (!inAddress)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    *(_DWORD *)buf = 136315394;
    v28 = "HALS_Framework-ios-imp.cpp";
    v29 = 1024;
    v30 = 1451;
    v15 = MEMORY[0x1E0C81028];
    v16 = "%25s:%-5d  AudioObjectAddPropertyListener: can't add a listener proc without an address";
    goto LABEL_19;
  }
  if (!inListener)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    *(_DWORD *)buf = 136315394;
    v28 = "HALS_Framework-ios-imp.cpp";
    v29 = 1024;
    v30 = 1452;
    v15 = MEMORY[0x1E0C81028];
    v16 = "%25s:%-5d  AudioObjectAddPropertyListener: can't add a NULL listener proc";
LABEL_19:
    _os_log_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, v16, buf, 0x12u);
LABEL_20:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v11 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v7);
  if (!v11)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v28 = "HALS_Framework-ios-imp.cpp";
      v29 = 1024;
      v30 = 1456;
      v31 = 1024;
      v32 = (int)v7;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectAddPropertyListener: no object with given ID %u", buf, 0x18u);
    }
    v18 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v18 = &off_1E69A1B30;
    v18[2] = 560947818;
  }
  v19 = 3;
  v21 = 0;
  v20 = 0;
  v22 = 0;
  v23 = inListener;
  v24 = inClientData;
  buf[0] = 0;
  v33 = 0;
  HALS_NotificationManager::AddPropertyListener((uint64_t)&v19, v7, (char *)inAddress, (uint64_t)buf);
  if (v33)
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)buf);
  HALS_Listener::~HALS_Listener((HALS_Listener *)&v19);
  HALS_ObjectMap::ReleaseObject(v11, v12);
  return 0;
}

void sub_1B59882F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

OSStatus AudioObjectRemovePropertyListener(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, AudioObjectPropertyListenerProc inListener, void *inClientData)
{
  HALS_ObjectMap *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unsigned int v11;
  const AudioObjectPropertyAddress *v12;
  HALS_ObjectMap *v13;
  HALS_Object *v14;
  NSObject *v17;
  const char *v18;
  _DWORD *exception;
  _DWORD *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint8_t buf[4];
  const char *v24;
  uint64_t v25;
  int v26;
  AudioObjectPropertyListenerProc v27;
  void *v28;
  uint64_t v29;

  v7 = *(HALS_ObjectMap **)&inObjectID;
  v29 = *MEMORY[0x1E0C80C00];
  if (!AllowHALClientsInThisProcess())
    return 560033144;
  HALS_System::StartServer(&v21, 0);
  v8 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (!inAddress)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 136315394;
    v24 = "HALS_Framework-ios-imp.cpp";
    LOWORD(v25) = 1024;
    *(_DWORD *)((char *)&v25 + 2) = 1552;
    v17 = MEMORY[0x1E0C81028];
    v18 = "%25s:%-5d  AudioObjectRemovePropertyListener: can't remove a listener proc without an address";
    goto LABEL_17;
  }
  if (!inListener)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 136315394;
    v24 = "HALS_Framework-ios-imp.cpp";
    LOWORD(v25) = 1024;
    *(_DWORD *)((char *)&v25 + 2) = 1553;
    v17 = MEMORY[0x1E0C81028];
    v18 = "%25s:%-5d  AudioObjectRemovePropertyListener: can't remove a NULL listener proc";
LABEL_17:
    _os_log_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, v18, buf, 0x12u);
LABEL_18:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v13 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v7);
  if (!v13)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v24 = "HALS_Framework-ios-imp.cpp";
      v25 = 0x400000006150400;
      v26 = (int)v7;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectRemovePropertyListener: no object with given ID %u", buf, 0x18u);
    }
    v20 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v20 = &off_1E69A1B30;
    v20[2] = 560947818;
  }
  *(_DWORD *)buf = 3;
  v25 = 0;
  v24 = 0;
  v26 = 0;
  v27 = inListener;
  v28 = inClientData;
  HALS_NotificationManager::RemovePropertyListener((HALS_NotificationManager *)buf, v7, inAddress, v11, v12);
  HALS_Listener::~HALS_Listener((HALS_Listener *)buf);
  HALS_ObjectMap::ReleaseObject(v13, v14);
  return 0;
}

void sub_1B5988648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

OSStatus AudioHardwareUnload(void)
{
  if (AllowHALClientsInThisProcess())
    return 0;
  else
    return 560033144;
}

OSStatus AudioHardwareCreateAggregateDevice(CFDictionaryRef inDescription, AudioObjectID *outDeviceID)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  AudioObjectID Device;
  OSStatus v8;
  NSObject *v10;
  const char *v11;
  _DWORD *exception;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!AllowHALClientsInThisProcess())
    return 560033144;
  HALS_System::StartServer(&v13, 0);
  v4 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (!inDescription)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_17;
    *(_DWORD *)buf = 136315394;
    v16 = "HALS_Framework-ios-imp.cpp";
    v17 = 1024;
    v18 = 1633;
    v10 = MEMORY[0x1E0C81028];
    v11 = "%25s:%-5d  AudioHardwareCreateAggregateDevice: can't create an Agggregate Device with a NULL description";
    goto LABEL_16;
  }
  if (!outDeviceID)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_17;
    *(_DWORD *)buf = 136315394;
    v16 = "HALS_Framework-ios-imp.cpp";
    v17 = 1024;
    v18 = 1634;
    v10 = MEMORY[0x1E0C81028];
    v11 = "%25s:%-5d  AudioHardwareCreateAggregateDevice: nowhere to put the return value";
LABEL_16:
    _os_log_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, v11, buf, 0x12u);
LABEL_17:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  Device = HALS_MetaManager::CreateDevice((os_unfair_lock_s ***)HALS_MetaManager::sInstance, inDescription, 0);
  v8 = 0;
  *outDeviceID = Device;
  return v8;
}

void sub_1B59888D0(_Unwind_Exception *a1, int a2)
{
  _DWORD *v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      if (v2)
        *v2 = 0;
    }
    else if (v2)
    {
      *v2 = 0;
    }
    __cxa_end_catch();
    JUMPOUT(0x1B59887A8);
  }
  _Unwind_Resume(a1);
}

OSStatus AudioHardwareDestroyAggregateDevice(AudioObjectID inDeviceID)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v7;
  std::__shared_weak_count *v8;

  if (!AllowHALClientsInThisProcess())
    return 560033144;
  HALS_System::StartServer(&v7, 0);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  HALS_MetaManager::DestroyDevice((HALS_System **)HALS_MetaManager::sInstance, inDeviceID);
  return 0;
}

void sub_1B59889B4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B59889A0);
}

OSStatus AudioDeviceCreateIOProcID(AudioObjectID inDevice, AudioDeviceIOProc inProc, void *inClientData, AudioDeviceIOProcID *outIOProcID)
{
  HALS_ObjectMap *v7;
  HALS_ObjectMap *v8;
  HALS_Object *v9;
  HALS_ObjectMap *v10;
  int v11;
  int v12;
  int v13;
  HALS_Object *v15;
  int v17;
  _DWORD *exception;
  NSObject *v19;
  const char *v20;
  _DWORD *v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v7 = *(HALS_ObjectMap **)&inDevice;
  v26 = *MEMORY[0x1E0C80C00];
  if (AllowHALClientsInThisProcess())
  {
    if (inProc)
    {
      if (outIOProcID)
      {
        v8 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v7);
        v10 = v8;
        if (v8)
        {
          v12 = *((_DWORD *)v8 + 5);
          v11 = *((_DWORD *)v8 + 6);
          if (v12 <= 1701078389)
          {
            if (v12 == 1633773415)
            {
LABEL_13:
              *outIOProcID = (AudioDeviceIOProcID)(*(uint64_t (**)(HALS_ObjectMap *, AudioDeviceIOProc, void *))(*(_QWORD *)v8 + 840))(v8, inProc, inClientData);
              HALS_ObjectMap::ReleaseObject(v10, v15);
              return 0;
            }
            v13 = 1633969526;
          }
          else
          {
            if (v12 == 1701078390 || v12 == 1701733488)
              goto LABEL_13;
            v13 = 1919182198;
          }
          if (v12 == v13)
            goto LABEL_13;
          if (v12 != v11)
          {
            if (v11 <= 1701078389)
            {
              if (v11 == 1633773415)
                goto LABEL_13;
              v17 = 1633969526;
            }
            else
            {
              if (v11 == 1701078390 || v11 == 1701733488)
                goto LABEL_13;
              v17 = 1919182198;
            }
            if (v11 == v17)
              goto LABEL_13;
          }
          HALS_ObjectMap::ReleaseObject(v8, v9);
        }
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          v22 = 136315394;
          v23 = "HALS_Framework-ios-imp.cpp";
          v24 = 1024;
          v25 = 1733;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceCreateIOProcID: no device with given ID", (uint8_t *)&v22, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69A1B30;
        exception[2] = 560947818;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
LABEL_32:
        v21 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v21 = &off_1E69A1B30;
        v21[2] = 1852797029;
      }
      v22 = 136315394;
      v23 = "HALS_Framework-ios-imp.cpp";
      v24 = 1024;
      v25 = 1729;
      v19 = MEMORY[0x1E0C81028];
      v20 = "%25s:%-5d  AudioDeviceCreateIOProcID: nowhere to put the return value";
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_32;
      v22 = 136315394;
      v23 = "HALS_Framework-ios-imp.cpp";
      v24 = 1024;
      v25 = 1728;
      v19 = MEMORY[0x1E0C81028];
      v20 = "%25s:%-5d  AudioDeviceCreateIOProcID: can't create an AudioDeviceIOProcID for a NULL IOProc";
    }
    _os_log_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_ERROR, v20, (uint8_t *)&v22, 0x12u);
    goto LABEL_32;
  }
  return 560033144;
}

void sub_1B5988CF8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B5988D10(void *a1, int a2)
{
  _QWORD *v2;

  if (!a2)
    JUMPOUT(0x1B5988D00);
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (!v2)
      goto LABEL_7;
  }
  else if (!v2)
  {
LABEL_7:
    __cxa_end_catch();
    JUMPOUT(0x1B5988AC4);
  }
  *v2 = 0;
  goto LABEL_7;
}

void sub_1B5988D7C()
{
  JUMPOUT(0x1B5988D00);
}

OSStatus AudioDeviceCreateIOProcIDWithBlock(AudioDeviceIOProcID *outIOProcID, AudioObjectID inDevice, dispatch_queue_t inDispatchQueue, AudioDeviceIOBlock inIOBlock)
{
  HALS_ObjectMap *v6;
  HALS_ObjectMap *v8;
  HALS_Object *v9;
  HALS_ObjectMap *v10;
  int v11;
  int v12;
  int v13;
  HALS_Object *v15;
  int v17;
  _DWORD *exception;
  NSObject *v19;
  const char *v20;
  _DWORD *v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v6 = *(HALS_ObjectMap **)&inDevice;
  v26 = *MEMORY[0x1E0C80C00];
  if (AllowHALClientsInThisProcess())
  {
    if (inIOBlock)
    {
      if (outIOProcID)
      {
        v8 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v6);
        v10 = v8;
        if (v8)
        {
          v12 = *((_DWORD *)v8 + 5);
          v11 = *((_DWORD *)v8 + 6);
          if (v12 <= 1701078389)
          {
            if (v12 == 1633773415)
            {
LABEL_13:
              *outIOProcID = (AudioDeviceIOProcID)(*(uint64_t (**)(HALS_ObjectMap *, dispatch_queue_t, AudioDeviceIOBlock))(*(_QWORD *)v8 + 848))(v8, inDispatchQueue, inIOBlock);
              HALS_ObjectMap::ReleaseObject(v10, v15);
              return 0;
            }
            v13 = 1633969526;
          }
          else
          {
            if (v12 == 1701078390 || v12 == 1701733488)
              goto LABEL_13;
            v13 = 1919182198;
          }
          if (v12 == v13)
            goto LABEL_13;
          if (v12 != v11)
          {
            if (v11 <= 1701078389)
            {
              if (v11 == 1633773415)
                goto LABEL_13;
              v17 = 1633969526;
            }
            else
            {
              if (v11 == 1701078390 || v11 == 1701733488)
                goto LABEL_13;
              v17 = 1919182198;
            }
            if (v11 == v17)
              goto LABEL_13;
          }
          HALS_ObjectMap::ReleaseObject(v8, v9);
        }
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          v22 = 136315394;
          v23 = "HALS_Framework-ios-imp.cpp";
          v24 = 1024;
          v25 = 1793;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceCreateIOProcIDWithBlock: no device with given ID", (uint8_t *)&v22, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69A1B30;
        exception[2] = 560947818;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
LABEL_32:
        v21 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v21 = &off_1E69A1B30;
        v21[2] = 1852797029;
      }
      v22 = 136315394;
      v23 = "HALS_Framework-ios-imp.cpp";
      v24 = 1024;
      v25 = 1789;
      v19 = MEMORY[0x1E0C81028];
      v20 = "%25s:%-5d  AudioDeviceCreateIOProcIDWithBlock: nowhere to put the return value";
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_32;
      v22 = 136315394;
      v23 = "HALS_Framework-ios-imp.cpp";
      v24 = 1024;
      v25 = 1788;
      v19 = MEMORY[0x1E0C81028];
      v20 = "%25s:%-5d  AudioDeviceCreateIOProcIDWithBlock: can't create an AudioDeviceIOProcID for a NULL IOBlock";
    }
    _os_log_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_ERROR, v20, (uint8_t *)&v22, 0x12u);
    goto LABEL_32;
  }
  return 560033144;
}

void sub_1B59890A0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B59890B8(void *a1, int a2)
{
  _QWORD *v2;

  if (!a2)
    JUMPOUT(0x1B59890A8);
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (!v2)
      goto LABEL_7;
  }
  else if (!v2)
  {
LABEL_7:
    __cxa_end_catch();
    JUMPOUT(0x1B5988E6CLL);
  }
  *v2 = 0;
  goto LABEL_7;
}

void sub_1B5989124()
{
  JUMPOUT(0x1B59890A8);
}

OSStatus AudioDeviceDestroyIOProcID(AudioObjectID inDevice, AudioDeviceIOProcID inIOProcID)
{
  HALS_ObjectMap *v3;
  HALS_ObjectMap *v4;
  HALS_Object *v5;
  HALS_ObjectMap *v6;
  int v7;
  int v8;
  int v9;
  HALS_Object *v11;
  int v13;
  _DWORD *exception;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v3 = *(HALS_ObjectMap **)&inDevice;
  v19 = *MEMORY[0x1E0C80C00];
  if (AllowHALClientsInThisProcess())
  {
    v4 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v3);
    v6 = v4;
    if (v4)
    {
      v8 = *((_DWORD *)v4 + 5);
      v7 = *((_DWORD *)v4 + 6);
      if (v8 <= 1701078389)
      {
        if (v8 == 1633773415)
        {
LABEL_11:
          (*(void (**)(HALS_ObjectMap *, AudioDeviceIOProcID))(*(_QWORD *)v4 + 856))(v4, inIOProcID);
          HALS_ObjectMap::ReleaseObject(v6, v11);
          return 0;
        }
        v9 = 1633969526;
      }
      else
      {
        if (v8 == 1701078390 || v8 == 1701733488)
          goto LABEL_11;
        v9 = 1919182198;
      }
      if (v8 == v9)
        goto LABEL_11;
      if (v8 != v7)
      {
        if (v7 <= 1701078389)
        {
          if (v7 == 1633773415)
            goto LABEL_11;
          v13 = 1633969526;
        }
        else
        {
          if (v7 == 1701078390 || v7 == 1701733488)
            goto LABEL_11;
          v13 = 1919182198;
        }
        if (v7 == v13)
          goto LABEL_11;
      }
      HALS_ObjectMap::ReleaseObject(v4, v5);
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v15 = 136315394;
      v16 = "HALS_Framework-ios-imp.cpp";
      v17 = 1024;
      v18 = 1969;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceDestroyIOProcID: no device with given ID", (uint8_t *)&v15, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  return 560033144;
}

void sub_1B598933C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B5989354(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B59891FCLL);
  }
  JUMPOUT(0x1B5989344);
}

void sub_1B59893A4()
{
  JUMPOUT(0x1B5989344);
}

OSStatus AudioDeviceStart(AudioObjectID inDevice, AudioDeviceIOProcID inProcID)
{
  HALS_ObjectMap *v3;
  HALS_ObjectMap *v4;
  HALS_Object *v5;
  HALS_ObjectMap *v6;
  int v7;
  int v8;
  int v9;
  HALS_Object *v11;
  int v13;
  _DWORD *exception;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v3 = *(HALS_ObjectMap **)&inDevice;
  v19 = *MEMORY[0x1E0C80C00];
  if (AllowHALClientsInThisProcess())
  {
    v4 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v3);
    v6 = v4;
    if (v4)
    {
      v8 = *((_DWORD *)v4 + 5);
      v7 = *((_DWORD *)v4 + 6);
      if (v8 <= 1701078389)
      {
        if (v8 == 1633773415)
        {
LABEL_11:
          (*(void (**)(HALS_ObjectMap *, AudioDeviceIOProcID))(*(_QWORD *)v4 + 880))(v4, inProcID);
          HALS_ObjectMap::ReleaseObject(v6, v11);
          return 0;
        }
        v9 = 1633969526;
      }
      else
      {
        if (v8 == 1701078390 || v8 == 1701733488)
          goto LABEL_11;
        v9 = 1919182198;
      }
      if (v8 == v9)
        goto LABEL_11;
      if (v8 != v7)
      {
        if (v7 <= 1701078389)
        {
          if (v7 == 1633773415)
            goto LABEL_11;
          v13 = 1633969526;
        }
        else
        {
          if (v7 == 1701078390 || v7 == 1701733488)
            goto LABEL_11;
          v13 = 1919182198;
        }
        if (v7 == v13)
          goto LABEL_11;
      }
      HALS_ObjectMap::ReleaseObject(v4, v5);
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v15 = 136315394;
      v16 = "HALS_Framework-ios-imp.cpp";
      v17 = 1024;
      v18 = 2018;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceStart: no device with given ID", (uint8_t *)&v15, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  return 560033144;
}

void sub_1B59895BC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B59895D4(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B598947CLL);
  }
  JUMPOUT(0x1B59895C4);
}

void sub_1B5989624()
{
  JUMPOUT(0x1B59895C4);
}

OSStatus AudioDeviceStartAtTime(AudioObjectID inDevice, AudioDeviceIOProcID inProcID, AudioTimeStamp *ioRequestedStartTime, UInt32 inFlags)
{
  uint64_t v4;
  HALS_ObjectMap *v7;
  HALS_ObjectMap *v8;
  HALS_Object *v9;
  HALS_ObjectMap *v10;
  int v11;
  int v12;
  int v13;
  HALS_Object *v15;
  int v17;
  _DWORD *exception;
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v4 = *(_QWORD *)&inFlags;
  v7 = *(HALS_ObjectMap **)&inDevice;
  v23 = *MEMORY[0x1E0C80C00];
  if (!AllowHALClientsInThisProcess())
    return 560033144;
  if (ioRequestedStartTime)
  {
    v8 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v7);
    v10 = v8;
    if (v8)
    {
      v12 = *((_DWORD *)v8 + 5);
      v11 = *((_DWORD *)v8 + 6);
      if (v12 <= 1701078389)
      {
        if (v12 == 1633773415)
        {
LABEL_13:
          (*(void (**)(HALS_ObjectMap *, AudioDeviceIOProcID, AudioTimeStamp *, uint64_t))(*(_QWORD *)v8 + 888))(v8, inProcID, ioRequestedStartTime, v4);
          HALS_ObjectMap::ReleaseObject(v10, v15);
          return 0;
        }
        v13 = 1633969526;
      }
      else
      {
        if (v12 == 1701078390 || v12 == 1701733488)
          goto LABEL_13;
        v13 = 1919182198;
      }
      if (v12 == v13)
        goto LABEL_13;
      if (v12 != v11)
      {
        if (v11 <= 1701078389)
        {
          if (v11 == 1633773415)
            goto LABEL_13;
          v17 = 1633969526;
        }
        else
        {
          if (v11 == 1701078390 || v11 == 1701733488)
            goto LABEL_13;
          v17 = 1919182198;
        }
        if (v11 == v17)
          goto LABEL_13;
      }
      HALS_ObjectMap::ReleaseObject(v8, v9);
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v19 = 136315394;
      v20 = "HALS_Framework-ios-imp.cpp";
      v21 = 1024;
      v22 = 2078;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceStartAtTime: no device with given ID", (uint8_t *)&v19, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  return AudioDeviceStart((AudioObjectID)v7, inProcID);
}

void sub_1B5989864(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B5989724);
  }
  _Unwind_Resume(a1);
}

void sub_1B59898DC()
{
  JUMPOUT(0x1B598987CLL);
}

OSStatus AudioDeviceGetCurrentTime(AudioObjectID inDevice, AudioTimeStamp *outTime)
{
  HALS_ObjectMap *v3;
  HALS_ObjectMap *v4;
  HALS_Object *v5;
  HALS_ObjectMap *v6;
  int v7;
  int v8;
  int v9;
  HALS_Object *v11;
  int v13;
  _DWORD *v14;
  _DWORD *exception;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v3 = *(HALS_ObjectMap **)&inDevice;
  v20 = *MEMORY[0x1E0C80C00];
  if (AllowHALClientsInThisProcess())
  {
    if (!outTime)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v16 = 136315394;
        v17 = "HALS_Framework-ios-imp.cpp";
        v18 = 1024;
        v19 = 2175;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceGetCurrentTime: time stamp can't be NULL", (uint8_t *)&v16, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
    v4 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v3);
    v6 = v4;
    if (v4)
    {
      v8 = *((_DWORD *)v4 + 5);
      v7 = *((_DWORD *)v4 + 6);
      if (v8 <= 1701078389)
      {
        if (v8 == 1633773415)
        {
LABEL_12:
          (*(void (**)(HALS_ObjectMap *, AudioTimeStamp *))(*(_QWORD *)v4 + 904))(v4, outTime);
          HALS_ObjectMap::ReleaseObject(v6, v11);
          return 0;
        }
        v9 = 1633969526;
      }
      else
      {
        if (v8 == 1701078390 || v8 == 1701733488)
          goto LABEL_12;
        v9 = 1919182198;
      }
      if (v8 == v9)
        goto LABEL_12;
      if (v8 != v7)
      {
        if (v7 <= 1701078389)
        {
          if (v7 == 1633773415)
            goto LABEL_12;
          v13 = 1633969526;
        }
        else
        {
          if (v7 == 1701078390 || v7 == 1701733488)
            goto LABEL_12;
          v13 = 1919182198;
        }
        if (v7 == v13)
          goto LABEL_12;
      }
      HALS_ObjectMap::ReleaseObject(v4, v5);
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v16 = 136315394;
      v17 = "HALS_Framework-ios-imp.cpp";
      v18 = 1024;
      v19 = 2179;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceGetCurrentTime: no device with given ID", (uint8_t *)&v16, 0x12u);
    }
    v14 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v14 = &off_1E69A1B30;
    v14[2] = 560947818;
  }
  return 560033144;
}

void sub_1B5989B94(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B5989BAC(void *a1, int a2)
{
  _OWORD *v2;

  if (!a2)
    JUMPOUT(0x1B5989B9CLL);
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (!v2)
      goto LABEL_7;
  }
  else if (!v2)
  {
LABEL_7:
    __cxa_end_catch();
    JUMPOUT(0x1B59899B8);
  }
  v2[2] = 0u;
  v2[3] = 0u;
  *v2 = 0u;
  v2[1] = 0u;
  goto LABEL_7;
}

void sub_1B5989C20()
{
  JUMPOUT(0x1B5989B9CLL);
}

OSStatus AudioDeviceTranslateTime(AudioObjectID inDevice, const AudioTimeStamp *inTime, AudioTimeStamp *outTime)
{
  HALS_ObjectMap *v5;
  HALS_ObjectMap *v6;
  HALS_Object *v7;
  HALS_ObjectMap *v8;
  int v9;
  int v10;
  int v11;
  HALS_Object *v13;
  int v15;
  _DWORD *exception;
  NSObject *v17;
  const char *v18;
  _DWORD *v19;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v5 = *(HALS_ObjectMap **)&inDevice;
  v24 = *MEMORY[0x1E0C80C00];
  if (AllowHALClientsInThisProcess())
  {
    if (inTime)
    {
      if (outTime)
      {
        v6 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v5);
        v8 = v6;
        if (v6)
        {
          v10 = *((_DWORD *)v6 + 5);
          v9 = *((_DWORD *)v6 + 6);
          if (v10 <= 1701078389)
          {
            if (v10 == 1633773415)
            {
LABEL_13:
              (*(void (**)(HALS_ObjectMap *, const AudioTimeStamp *, AudioTimeStamp *))(*(_QWORD *)v6 + 912))(v6, inTime, outTime);
              HALS_ObjectMap::ReleaseObject(v8, v13);
              return 0;
            }
            v11 = 1633969526;
          }
          else
          {
            if (v10 == 1701078390 || v10 == 1701733488)
              goto LABEL_13;
            v11 = 1919182198;
          }
          if (v10 == v11)
            goto LABEL_13;
          if (v10 != v9)
          {
            if (v9 <= 1701078389)
            {
              if (v9 == 1633773415)
                goto LABEL_13;
              v15 = 1633969526;
            }
            else
            {
              if (v9 == 1701078390 || v9 == 1701733488)
                goto LABEL_13;
              v15 = 1919182198;
            }
            if (v9 == v15)
              goto LABEL_13;
          }
          HALS_ObjectMap::ReleaseObject(v6, v7);
        }
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          v20 = 136315394;
          v21 = "HALS_Framework-ios-imp.cpp";
          v22 = 1024;
          v23 = 2253;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceTranslateTime: no device with given ID", (uint8_t *)&v20, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69A1B30;
        exception[2] = 560947818;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
LABEL_32:
        v19 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v19 = &off_1E69A1B30;
        v19[2] = 1852797029;
      }
      v20 = 136315394;
      v21 = "HALS_Framework-ios-imp.cpp";
      v22 = 1024;
      v23 = 2249;
      v17 = MEMORY[0x1E0C81028];
      v18 = "%25s:%-5d  AudioDeviceTranslateTime: output time stamp can't be NULL";
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_32;
      v20 = 136315394;
      v21 = "HALS_Framework-ios-imp.cpp";
      v22 = 1024;
      v23 = 2248;
      v17 = MEMORY[0x1E0C81028];
      v18 = "%25s:%-5d  AudioDeviceTranslateTime: input time stamp can't be NULL";
    }
    _os_log_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, v18, (uint8_t *)&v20, 0x12u);
    goto LABEL_32;
  }
  return 560033144;
}

void sub_1B5989F3C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B5989F54(void *a1, int a2)
{
  _OWORD *v2;

  if (!a2)
    JUMPOUT(0x1B5989F44);
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (!v2)
      goto LABEL_7;
  }
  else if (!v2)
  {
LABEL_7:
    __cxa_end_catch();
    JUMPOUT(0x1B5989D08);
  }
  v2[2] = 0u;
  v2[3] = 0u;
  *v2 = 0u;
  v2[1] = 0u;
  goto LABEL_7;
}

void sub_1B5989FC8()
{
  JUMPOUT(0x1B5989F44);
}

OSStatus AudioDeviceGetNearestStartTime(AudioObjectID inDevice, AudioTimeStamp *ioRequestedStartTime, UInt32 inFlags)
{
  uint64_t v3;
  HALS_ObjectMap *v5;
  HALS_ObjectMap *v6;
  HALS_Object *v7;
  HALS_ObjectMap *v8;
  int v9;
  int v10;
  int v11;
  HALS_Object *v13;
  int v15;
  _DWORD *v16;
  _DWORD *exception;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v3 = *(_QWORD *)&inFlags;
  v5 = *(HALS_ObjectMap **)&inDevice;
  v22 = *MEMORY[0x1E0C80C00];
  if (AllowHALClientsInThisProcess())
  {
    if (!ioRequestedStartTime)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v18 = 136315394;
        v19 = "HALS_Framework-ios-imp.cpp";
        v20 = 1024;
        v21 = 2323;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceGetNearestStartTime: time stamp can't be NULL", (uint8_t *)&v18, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
    v6 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v5);
    v8 = v6;
    if (v6)
    {
      v10 = *((_DWORD *)v6 + 5);
      v9 = *((_DWORD *)v6 + 6);
      if (v10 <= 1701078389)
      {
        if (v10 == 1633773415)
        {
LABEL_12:
          (*(void (**)(HALS_ObjectMap *, AudioTimeStamp *, uint64_t))(*(_QWORD *)v6 + 920))(v6, ioRequestedStartTime, v3);
          HALS_ObjectMap::ReleaseObject(v8, v13);
          return 0;
        }
        v11 = 1633969526;
      }
      else
      {
        if (v10 == 1701078390 || v10 == 1701733488)
          goto LABEL_12;
        v11 = 1919182198;
      }
      if (v10 == v11)
        goto LABEL_12;
      if (v10 != v9)
      {
        if (v9 <= 1701078389)
        {
          if (v9 == 1633773415)
            goto LABEL_12;
          v15 = 1633969526;
        }
        else
        {
          if (v9 == 1701078390 || v9 == 1701733488)
            goto LABEL_12;
          v15 = 1919182198;
        }
        if (v9 == v15)
          goto LABEL_12;
      }
      HALS_ObjectMap::ReleaseObject(v6, v7);
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v18 = 136315394;
      v19 = "HALS_Framework-ios-imp.cpp";
      v20 = 1024;
      v21 = 2327;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceGetNearestStartTime: no device with given ID", (uint8_t *)&v18, 0x12u);
    }
    v16 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v16 = &off_1E69A1B30;
    v16[2] = 560947818;
  }
  return 560033144;
}

void sub_1B598A288(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B598A2A0(void *a1, int a2)
{
  _OWORD *v2;

  if (!a2)
    JUMPOUT(0x1B598A290);
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (!v2)
      goto LABEL_7;
  }
  else if (!v2)
  {
LABEL_7:
    __cxa_end_catch();
    JUMPOUT(0x1B598A0ACLL);
  }
  v2[2] = 0u;
  v2[3] = 0u;
  *v2 = 0u;
  v2[1] = 0u;
  goto LABEL_7;
}

void sub_1B598A314()
{
  JUMPOUT(0x1B598A290);
}

uint64_t AudioHardwareCreateProcessTap()
{
  return 2003329396;
}

uint64_t AudioHardwareDestroyProcessTap()
{
  return 2003329396;
}

uint64_t AudioDriverPlugInOpen()
{
  return 1970171760;
}

uint64_t AudioDriverPlugInClose()
{
  return 1970171760;
}

uint64_t AudioDriverPlugInDeviceGetPropertyInfo()
{
  return 1970171760;
}

uint64_t AudioDriverPlugInDeviceGetProperty()
{
  return 1970171760;
}

uint64_t AudioDriverPlugInDeviceSetProperty()
{
  return 1970171760;
}

uint64_t AudioDriverPlugInStreamGetPropertyInfo()
{
  return 1970171760;
}

uint64_t AudioDriverPlugInStreamGetProperty()
{
  return 1970171760;
}

uint64_t AudioDriverPlugInStreamSetProperty()
{
  return 1970171760;
}

const char *CAException::what(CAException *this)
{
  return "CAException";
}

_DWORD *HALS_Device_HostedDSP::RationalizeDSPOffloadsForClient(HALS_Device_HostedDSP *this, HALS_Device_HostedDSP *a2, HALS_Client *a3, uint64_t a4)
{
  char v5;
  int v8;
  int v9;
  DSP_Host_OffloadDictionary *begin;
  CFDictionaryRef v11;
  CFMutableDictionaryRef Mutable;
  CFIndex Count;
  std::vector<std::string>::pointer v14;
  std::vector<std::string>::pointer end;
  const CFDictionaryKeyCallBacks *v16;
  const CFDictionaryValueCallBacks *v17;
  CFTypeRef v18;
  CFMutableDictionaryRef v19;
  void *v20;
  void *v21;
  __CFDictionary *v22;
  const __CFDictionary **v23;
  const __CFDictionary *v24;
  const __CFDictionary *v25;
  CFMutableDictionaryRef v26;
  std::vector<std::string>::pointer v27;
  std::vector<std::string>::pointer i;
  __int128 v29;
  std::string *v30;
  CFIndex size;
  __CFString *v32;
  const __CFDictionary *v33;
  const __CFDictionary *v34;
  CFTypeRef v35;
  const void *v36;
  const __CFDictionary *v37;
  std::runtime_error *v39;
  std::runtime_error *v40;
  std::runtime_error *v41;
  std::runtime_error *exception;
  uint64_t v43;
  std::__shared_weak_count *v44;
  CFDictionaryRef v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  CFDictionaryRef theDict;
  const __CFDictionary *v49;
  std::__shared_weak_count *v50;
  CFDictionaryRef v51;
  char *v52;
  int v53;
  int v54;
  BOOL OffloadsAvailableForDevice;
  int v56;
  CFTypeRef cf;
  char v58;
  void *value;
  std::string v60;
  CFMutableDictionaryRef v61;
  std::vector<std::string> v62;

  v5 = (char)a3;
  v51 = 0;
  v52 = (char *)a2 + 40;
  v56 = 0;
  OffloadsAvailableForDevice = 0;
  v49 = 0;
  v50 = 0;
  v53 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  if (a4)
    v8 = *(_DWORD *)(a4 + 16);
  else
    v8 = 0;
  v54 = v8;
  OffloadsAvailableForDevice = HALS_Device_HostedDSP::GetOffloadsAvailableForDevice(a2, a3, &v49);
  if ((v5 & 1) == 0)
    goto LABEL_101;
  if (!HALS_Device::GetNumberStreamsExcludingReferenceStreams(*(HALS_Device **)a2, 1))
  {
    v56 = 2;
LABEL_101:
    *(_QWORD *)this = 0;
    goto LABEL_102;
  }
  v46 = 0;
  v47 = 0;
  theDict = 0;
  DSP_Host_OffloadDictionary::make_empty((DSP_Host_OffloadDictionary *)&v46);
  if ((*(unsigned int (**)(_QWORD, _QWORD, const char *, _QWORD))(**(_QWORD **)a2 + 88))(*(_QWORD *)a2, *(unsigned int *)(*(_QWORD *)a2 + 16), "rOsdtpni", 0))
  {
    LODWORD(v60.__r_.__value_.__l.__data_) = 8;
    v62.__begin_ = 0;
    (*(void (**)(_QWORD, _QWORD, const char *, uint64_t, std::string *, std::vector<std::string> *, _QWORD, _QWORD, _QWORD))(**(_QWORD **)a2 + 112))(*(_QWORD *)a2, *(unsigned int *)(*(_QWORD *)a2 + 16), "rOsdtpni", 8, &v60, &v62, 0, 0, 0);
    if (v62.__begin_)
    {
      DSP_Host_OffloadDictionary::deep_copy_from((DSP_Host_OffloadDictionary *)&v46, (const __CFString *)v62.__begin_);
      CFRelease(v62.__begin_);
    }
    if (theDict)
      CFDictionaryGetCount(theDict);
  }
  v43 = 0;
  v44 = 0;
  v45 = 0;
  DSP_Host_OffloadDictionary::make_empty((DSP_Host_OffloadDictionary *)&v43);
  if ((*(unsigned int (**)(_QWORD, _QWORD, const char *, uint64_t))(**(_QWORD **)a2 + 88))(*(_QWORD *)a2, *(unsigned int *)(*(_QWORD *)a2 + 16), "bOsdtpni", a4))
  {
    LODWORD(v60.__r_.__value_.__l.__data_) = 8;
    v62.__begin_ = 0;
    (*(void (**)(_QWORD, _QWORD, const char *, uint64_t, std::string *, std::vector<std::string> *, _QWORD, _QWORD, uint64_t))(**(_QWORD **)a2 + 112))(*(_QWORD *)a2, *(unsigned int *)(*(_QWORD *)a2 + 16), "bOsdtpni", 8, &v60, &v62, 0, 0, a4);
    if (v62.__begin_)
    {
      DSP_Host_OffloadDictionary::deep_copy_from((DSP_Host_OffloadDictionary *)&v43, (const __CFString *)v62.__begin_);
      CFRelease(v62.__begin_);
    }
    if (v45)
      CFDictionaryGetCount(v45);
  }
  if (theDict && CFDictionaryGetCount(theDict))
  {
    if (theDict && CFDictionaryGetCount(theDict) && !OffloadsAvailableForDevice)
    {
      v9 = 1;
    }
    else
    {
      if (!v45 || !CFDictionaryGetCount(v45))
        goto LABEL_24;
      v9 = 4;
    }
  }
  else
  {
    v9 = 3;
  }
  v56 = v9;
LABEL_24:
  *(_QWORD *)this = 0;
  if (v51 && CFDictionaryGetCount(v51))
  {
    if (theDict
      && CFDictionaryGetCount(theDict)
      && !DSP_Host_OffloadDictionary::has_all_id((DSP_Host_OffloadDictionary *)&v46))
    {
      DSP_Host_OffloadDictionary::deep_copy((DSP_Host_OffloadDictionary *)&v62, (uint64_t)&v46);
      begin = (DSP_Host_OffloadDictionary *)v62.__begin_;
      *(_QWORD *)this = v62.__begin_;
      v23 = &v49;
    }
    else
    {
      begin = (DSP_Host_OffloadDictionary *)operator new();
      *(_QWORD *)begin = 0;
      *((_QWORD *)begin + 1) = 0;
      *((_QWORD *)begin + 2) = 0;
      *(_QWORD *)this = begin;
      v11 = v51;
      DSP_Host_OffloadDictionary::make_empty(begin);
      if (v11)
      {
        CFRetain(v11);
        applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v60, v11);
        Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
        cf = Mutable;
        if (!v60.__r_.__value_.__r.__words[0])
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        Count = CFDictionaryGetCount((CFDictionaryRef)v60.__r_.__value_.__l.__data_);
        v61 = 0;
        std::vector<__CFString const*>::vector(&v62, Count, &v61);
        CFDictionaryGetKeysAndValues((CFDictionaryRef)v60.__r_.__value_.__l.__data_, (const void **)&v62.__begin_->__r_.__value_.__l.__data_, 0);
        v14 = v62.__begin_;
        end = v62.__end_;
        if (v62.__begin_ != v62.__end_)
        {
          v16 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B398];
          v17 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A8];
          do
          {
            v18 = (CFTypeRef)v14->__r_.__value_.__r.__words[0];
            if (v14->__r_.__value_.__r.__words[0])
              CFRetain(v14->__r_.__value_.__l.__data_);
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v61, v18);
            v19 = CFDictionaryCreateMutable(0, 0, v16, v17);
            mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&value, v19);
            v20 = value;
            if (Mutable)
            {
              CFDictionaryAddValue(Mutable, v61, value);
              v20 = value;
            }
            if (v20)
              CFRelease(v20);
            if (v19)
              CFRelease(v19);
            if (v61)
              CFRelease(v61);
            v14 = (std::vector<std::string>::pointer)((char *)v14 + 8);
          }
          while (v14 != end);
        }
        mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&value, Mutable);
        v21 = value;
        value = 0;
        applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v61, v21);
        v22 = (__CFDictionary *)*((_QWORD *)begin + 2);
        *((_QWORD *)begin + 2) = v61;
        v61 = v22;
        if (v22)
          CFRelease(v22);
        if (value)
          CFRelease(value);
        if (v62.__begin_)
        {
          v62.__end_ = v62.__begin_;
          operator delete(v62.__begin_);
        }
        if (Mutable)
          CFRelease(Mutable);
        if (v60.__r_.__value_.__r.__words[0])
          CFRelease(v60.__r_.__value_.__l.__data_);
      }
      v23 = (const __CFDictionary **)&v46;
    }
    v24 = (const __CFDictionary *)*((_QWORD *)begin + 2);
    if (v24 && CFDictionaryGetCount(v24) && !DSP_Host_OffloadDictionary::has_all_id((DSP_Host_OffloadDictionary *)v23))
    {
      v25 = v23[2];
      if (!v25 || !CFDictionaryGetCount(v25))
        DSP_Host_OffloadDictionary::make_empty(begin);
      DSP_Host_OffloadDictionary::get_offload_id_list(&v62, (uint64_t)begin);
      v26 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
      v61 = v26;
      v27 = v62.__begin_;
      for (i = v62.__end_; v27 != i; ++v27)
      {
        if (SHIBYTE(v27->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v60, v27->__r_.__value_.__l.__data_, v27->__r_.__value_.__l.__size_);
        }
        else
        {
          v29 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
          v60.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v29;
        }
        if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = &v60;
        else
          v30 = (std::string *)v60.__r_.__value_.__r.__words[0];
        if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
        else
          size = v60.__r_.__value_.__l.__size_;
        v32 = (__CFString *)CFStringCreateWithBytes(0, (const UInt8 *)v30, size, 0x8000100u, 0);
        value = v32;
        if (!v32)
        {
          v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v39, "Could not construct");
          __cxa_throw(v39, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v33 = v23[2];
        if (!v33)
        {
          v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v40, "Could not construct");
          __cxa_throw(v40, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        if (applesauce::CF::details::has_key<applesauce::CF::StringRef &>(v33, v32))
        {
          v34 = (const __CFDictionary *)*((_QWORD *)begin + 2);
          if (!v34)
          {
            v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v41, "Could not construct");
            __cxa_throw(v41, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,applesauce::CF::StringRef &>(&cf, v34, v32);
          if (v58)
            mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::DictionaryRef>(v26, v32, cf);
          std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
        }
        CFRelease(v32);
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v60.__r_.__value_.__l.__data_);
      }
      mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&cf, v26);
      v35 = cf;
      cf = 0;
      applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v60, v35);
      v36 = (const void *)*((_QWORD *)begin + 2);
      *((_QWORD *)begin + 2) = v60.__r_.__value_.__r.__words[0];
      v60.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
      if (v36)
        CFRelease(v36);
      if (cf)
        CFRelease(cf);
      if (v26)
        CFRelease(v26);
      v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&v62;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
    }
    DSP_Host_OffloadDictionary::remove(begin, (const DSP_Host_OffloadDictionary *)&v43);
    v37 = (const __CFDictionary *)*((_QWORD *)begin + 2);
    if (!v37 || !CFDictionaryGetCount(v37) || DSP_Host_OffloadDictionary::has_all_id(begin))
    {
      *(_QWORD *)this = 0;
      std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100]((uint64_t)begin);
    }
  }
  if (v45)
    CFRelease(v45);
  if (v44)
    std::__shared_weak_count::__release_weak(v44);
  if (theDict)
    CFRelease(theDict);
  if (v47)
    std::__shared_weak_count::__release_weak(v47);
LABEL_102:
  if (v51)
    CFRelease(v51);
  if (v50)
    std::__shared_weak_count::__release_weak(v50);
  return HALS_Device_HostedDSP::RationalizeDSPOffloadsForClient(BOOL,HALS_Client *)const::LogExplanation::~LogExplanation(&v52);
}

void sub_1B598AADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,const void *a22,uint64_t a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  applesauce::CF::DictionaryRef::~DictionaryRef(&a22);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)(v32 - 112));
  __p = (void *)(v32 - 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *v30 = 0;
  if (v31)
    std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v31);
  DSP_Host_OffloadDictionary::~DSP_Host_OffloadDictionary((DSP_Host_OffloadDictionary *)&a10);
  DSP_Host_OffloadDictionary::~DSP_Host_OffloadDictionary((DSP_Host_OffloadDictionary *)&a13);
  DSP_Host_OffloadDictionary::~DSP_Host_OffloadDictionary((DSP_Host_OffloadDictionary *)&a16);
  HALS_Device_HostedDSP::RationalizeDSPOffloadsForClient(BOOL,HALS_Client *)const::LogExplanation::~LogExplanation(&a19);
  _Unwind_Resume(a1);
}

BOOL HALS_Device_HostedDSP::GetOffloadsAvailableForDevice(HALS_Device_HostedDSP *this, int a2, const __CFDictionary **a3)
{
  std::string *v6;
  __CFDictionary *v7;
  std::string::size_type size;
  uint64_t v9;
  const BOOL *v10;
  const BOOL *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  AudioObjectPropertyAddress *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  CFDataRef Data;
  int v18;
  std::string::size_type v19;
  __CFDictionary *v20;
  CFMutableDictionaryRef v21;
  CFPropertyListRef v22;
  CFTypeRef v23;
  _OWORD *v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  const __CFDictionary *v40;
  _BOOL8 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::runtime_error *exception;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  CFTypeRef cf[2];
  std::string __p;
  char v53;
  void (**v54)();
  _QWORD v55[2];
  _QWORD v56[2];
  std::string v57;
  char v58;
  std::string v59;
  std::string v60;
  char v61;
  CFMutableDictionaryRef Mutable;
  char v63;
  const __CFString *v64;
  int v65;
  const __CFData *v66;
  const __CFString *v67;
  CFTypeRef v68;

  DSP_Host_OffloadDictionary::make_empty((DSP_Host_OffloadDictionary *)a3);
  v55[0] = 0;
  v55[1] = 0;
  v54 = (void (**)())off_1E69947E0;
  std::string::basic_string[abi:ne180100]<0>(&v60, "device model uid");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v56, (const UInt8 *)&v60);
  v56[0] = off_1E6994AA8;
  v57.__r_.__value_.__s.__data_[0] = 0;
  v58 = 0;
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  v6 = (std::string *)((char *)this + 8);
  if (*((_BYTE *)this + 32))
  {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, (__int128 *)((char *)this + 8));
  }
  else
  {
    v60.__r_.__value_.__s.__data_[0] = 0;
    v61 = 0;
    v64 = *(const __CFString **)"diumbolg";
    v65 = 0;
    if ((*(unsigned int (**)(_QWORD, _QWORD, const __CFString **, _QWORD))(**(_QWORD **)this + 88))(*(_QWORD *)this, *(unsigned int *)(*(_QWORD *)this + 16), &v64, 0))
    {
      Mutable = 0;
      LODWORD(v49) = 8;
      (*(void (**)(_QWORD, _QWORD, const __CFString **, uint64_t, uint64_t *, CFMutableDictionaryRef *, _QWORD, _QWORD, _QWORD))(**(_QWORD **)this + 112))(*(_QWORD *)this, *(unsigned int *)(*(_QWORD *)this + 16), &v64, 8, &v49, &Mutable, 0, 0, 0);
      v7 = Mutable;
      if (Mutable)
      {
        CFRetain(Mutable);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, v7);
        if (!cf[0])
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)&v59, (const __CFString *)cf[0]);
        v60 = v59;
        memset(&v59, 0, sizeof(v59));
        v61 = 1;
        if (cf[0])
          CFRelease(cf[0]);
        CFRelease(Mutable);
        size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
        if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v60.__r_.__value_.__l.__size_;
        if (size)
          std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(v6, &v60);
      }
    }
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, (__int128 *)v6);
    if (v61 && SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
  }
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(&v57, &__p);
  if (v53 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v47 = 0;
  v48 = 0;
  HALS_System::GetInstance(&v49, 0, &v47);
  v9 = v49;
  if ((AMCP::Feature_Flags::force_mock_dsp_type(0, v10) & 1) != 0
    || (AMCP::Feature_Flags::allow_adm_dsp_offloads(0, v11) & 1) != 0)
  {
    cf[0] = 0;
    cf[1] = 0;
  }
  else
  {
    cf[0] = 0;
    cf[1] = 0;
    if (g_static_start_options != 1)
      goto LABEL_82;
  }
  v12 = *(_QWORD *)(v9 + 1504);
  if (v12 && a2)
  {
    v14 = *(AudioObjectPropertyAddress **)(v12 + 32);
    v13 = *(std::__shared_weak_count **)(v12 + 40);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    if (v14)
    {
      v59.__r_.__value_.__s.__data_[0] = 0;
      v59.__r_.__value_.__s.__data_[8] = 0;
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
      ((void (*)(DSP_Host_Types::DeviceDSPOffloadInfo *, __CFDictionary **))v54[3])((DSP_Host_Types::DeviceDSPOffloadInfo *)&v54, &Mutable);
      mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v68, Mutable);
      v60.__r_.__value_.__s.__data_[0] = 0;
      v60.__r_.__value_.__s.__data_[8] = 0;
      if (v68)
      {
        Data = CFPropertyListCreateData(0, v68, kCFPropertyListBinaryFormat_v1_0, 0, 0);
        if (Data)
        {
          applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v64, Data);
          v18 = 1;
          v60.__r_.__value_.__s.__data_[8] = 1;
          v60.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
        }
        else
        {
          v18 = v60.__r_.__value_.__s.__data_[8];
        }
      }
      else
      {
        v18 = 0;
      }
      if (v59.__r_.__value_.__s.__data_[8] == v18)
      {
        if (v59.__r_.__value_.__s.__data_[8])
        {
          v19 = v59.__r_.__value_.__r.__words[0];
          v59.__r_.__value_.__r.__words[0] = v60.__r_.__value_.__r.__words[0];
          v60.__r_.__value_.__r.__words[0] = v19;
        }
      }
      else if (v59.__r_.__value_.__s.__data_[8])
      {
        if (v59.__r_.__value_.__r.__words[0])
          CFRelease(v59.__r_.__value_.__l.__data_);
        v59.__r_.__value_.__s.__data_[8] = 0;
      }
      else
      {
        v59.__r_.__value_.__r.__words[0] = v60.__r_.__value_.__r.__words[0];
        v60.__r_.__value_.__r.__words[0] = 0;
        v59.__r_.__value_.__s.__data_[8] = 1;
      }
      std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v60);
      if (v68)
        CFRelease(v68);
      if (Mutable)
        CFRelease(Mutable);
      if (v59.__r_.__value_.__s.__data_[8])
      {
        LOBYTE(Mutable) = 0;
        v63 = 0;
        v20 = (__CFDictionary *)v59.__r_.__value_.__r.__words[0];
        if (v59.__r_.__value_.__r.__words[0])
          CFRetain(v59.__r_.__value_.__l.__data_);
        Mutable = v20;
        v63 = 1;
        if (DSP_Host_PropertySet::getHostedDSPPropertyDataType(v14, (AudioObjectPropertyAddress *)"aOsdtpni") != 7)goto LABEL_61;
        v60.__r_.__value_.__s.__data_[0] = 0;
        v60.__r_.__value_.__s.__data_[8] = 0;
        if (v63)
        {
          v21 = Mutable;
          if (Mutable)
            CFRetain(Mutable);
          v60.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
          v60.__r_.__value_.__s.__data_[8] = 1;
        }
        (*(void (**)(const __CFData **__return_ptr, AudioObjectPropertyAddress *, const char *, std::string *))(*(_QWORD *)&v14->mSelector + 40))(&v66, v14, "aOsdtpni", &v60);
        std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v60);
        if (v66)
        {
          LOBYTE(v64) = 0;
          LOBYTE(v65) = 0;
          v22 = CFPropertyListCreateWithData(0, v66, 0, 0, 0);
          mcp_applesauce::CF::PropertyListRef::PropertyListRef((mcp_applesauce::CF::PropertyListRef *)&v68, v22);
          v23 = v68;
          v68 = 0;
          applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v67, v23);
          LOBYTE(v65) = 1;
          v64 = v67;
          if (v68)
            CFRelease(v68);
          if (v66)
            CFRelease(v66);
        }
        else
        {
LABEL_61:
          LOBYTE(v64) = 0;
          LOBYTE(v65) = 0;
        }
        std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&Mutable);
        if ((_BYTE)v65 && v64)
        {
          v24 = operator new(0x30uLL);
          *(_OWORD *)((char *)v24 + 8) = 0u;
          *(_QWORD *)v24 = &off_1E6994C38;
          v24[2] = 0u;
          *((_QWORD *)v24 + 3) = 0;
          v60.__r_.__value_.__r.__words[0] = (std::string::size_type)v24 + 24;
          v60.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
          std::shared_ptr<AMCP::ASP::Engine>::__enable_weak_this[abi:ne180100]<AMCP::Core::Engine,AMCP::ASP::Engine,void>((uint64_t)&v60, (_QWORD *)v24 + 3, (uint64_t)v24 + 24);
          v25 = *(_OWORD *)&v60.__r_.__value_.__l.__data_;
          *(_OWORD *)&v60.__r_.__value_.__l.__data_ = 0u;
          v26 = (std::__shared_weak_count *)cf[1];
          *(_OWORD *)cf = v25;
          if (v26)
          {
            v27 = (unint64_t *)&v26->__shared_owners_;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          v29 = (std::__shared_weak_count *)v60.__r_.__value_.__l.__size_;
          if (v60.__r_.__value_.__l.__size_)
          {
            v30 = (unint64_t *)(v60.__r_.__value_.__l.__size_ + 8);
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          DSP_Host_OffloadDictionary::deep_copy_from((DSP_Host_OffloadDictionary *)cf[0], v64);
          v13 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        }
        std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v64);
      }
      std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v59);
    }
    if (v13)
    {
      v32 = (unint64_t *)&v13->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
LABEL_82:
  v34 = v50;
  if (v50)
  {
    v35 = (unint64_t *)&v50->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v48;
  if (v48)
  {
    v38 = (unint64_t *)&v48->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (cf[0])
    DSP_Host_OffloadDictionary::deep_copy_from((DSP_Host_OffloadDictionary *)a3, *((const __CFString **)cf[0] + 2));
  else
    DSP_Host_OffloadDictionary::make_empty((DSP_Host_OffloadDictionary *)a3);
  v40 = a3[2];
  v41 = v40 && CFDictionaryGetCount(v40) && !DSP_Host_OffloadDictionary::has_all_id((DSP_Host_OffloadDictionary *)a3);
  v42 = (std::__shared_weak_count *)cf[1];
  if (cf[1])
  {
    v43 = (unint64_t *)((char *)cf[1] + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v54 = (void (**)())off_1E69947E0;
  v56[0] = off_1E6994AA8;
  if (v58 && SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v56);
  v54 = off_1E6994CC8;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v55);
  return v41;
}

void sub_1B598B3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  mcp_applesauce::CF::PropertyListRef::~PropertyListRef((const void **)(v30 - 88));
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100](v30 - 120);
  applesauce::CF::DataRef::~DataRef((const void **)(v30 - 104));
  std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100](v30 - 136);
  std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  DSP_Host_Types::DeviceDSPOffloadInfo::~DeviceDSPOffloadInfo((DSP_Host_Types::DeviceDSPOffloadInfo *)&a21);
  _Unwind_Resume(a1);
}

void DSP_Host_OffloadDictionary::~DSP_Host_OffloadDictionary(DSP_Host_OffloadDictionary *this)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

_DWORD *HALS_Device_HostedDSP::RationalizeDSPOffloadsForClient(BOOL,HALS_Client *)const::LogExplanation::~LogExplanation(_DWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  char *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v12;
  int v13;
  int v14;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = a1[5];
  if ((v2 - 2) >= 3)
  {
    if ((_DWORD)v2 == 1 && !*((_BYTE *)a1 + 16))
    {
      v9 = *(_QWORD *)a1;
      v10 = *(unsigned __int8 *)(*(_QWORD *)a1 + 4);
      if (!*(_BYTE *)(*(_QWORD *)a1 + 4) || **(_DWORD **)a1 != 1)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          v13 = a1[2];
          v12 = a1[3];
          v16 = 136316162;
          v17 = "HALS_Device_HostedDSP.cpp";
          v18 = 1024;
          v19 = 112;
          v20 = 1024;
          v21 = v12;
          v22 = 1024;
          v23 = v13;
          v24 = 2080;
          v25 = "Offloads NOT Available And Device Requests Offloads";
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  [hal_dsp][offloads] (Client ID: %d) (Device ID: %d) This device will not offload -> %s", (uint8_t *)&v16, 0x28u);
          v9 = *(_QWORD *)a1;
          v10 = *(unsigned __int8 *)(*(_QWORD *)a1 + 4);
          v14 = a1[5];
        }
        else
        {
          v14 = 1;
        }
        if (!v10)
          *(_BYTE *)(v9 + 4) = 1;
        *(_DWORD *)v9 = v14;
      }
    }
  }
  else if (*((_BYTE *)a1 + 16))
  {
    v3 = *(_QWORD *)a1;
    v4 = *(unsigned __int8 *)(*(_QWORD *)a1 + 4);
    if (!*(_BYTE *)(*(_QWORD *)a1 + 4) || (_DWORD)v2 != **(_DWORD **)a1)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v6 = HALS_Device_HostedDSP::RationalizeDSPOffloadsForClient(BOOL,HALS_Client *)const::kExplanationStrings[v2];
        v8 = a1[2];
        v7 = a1[3];
        v16 = 136316162;
        v17 = "HALS_Device_HostedDSP.cpp";
        v18 = 1024;
        v19 = 103;
        v20 = 1024;
        v21 = v7;
        v22 = 1024;
        v23 = v8;
        v24 = 2080;
        v25 = v6;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  [hal_dsp][offloads] (Client ID: %d) (Device ID: %d) Offloads are available, but this device will not offload -> %s", (uint8_t *)&v16, 0x28u);
        v3 = *(_QWORD *)a1;
        v4 = *(unsigned __int8 *)(*(_QWORD *)a1 + 4);
        LODWORD(v2) = a1[5];
      }
      if (!v4)
        *(_BYTE *)(v3 + 4) = 1;
      *(_DWORD *)v3 = v2;
    }
  }
  return a1;
}

void DSP_Host_Types::DeviceDSPOffloadInfo::~DeviceDSPOffloadInfo(DSP_Host_Types::DeviceDSPOffloadInfo *this)
{
  DSP_Dictionariable::DictionariableKvp *v2;

  *(_QWORD *)this = off_1E69947E0;
  *((_QWORD *)this + 3) = off_1E6994AA8;
  v2 = (DSP_Host_Types::DeviceDSPOffloadInfo *)((char *)this + 24);
  if (*((_BYTE *)this + 64) && *((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v2);
  *(_QWORD *)this = off_1E6994CC8;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

{
  DSP_Dictionariable::DictionariableKvp *v2;

  *(_QWORD *)this = off_1E69947E0;
  *((_QWORD *)this + 3) = off_1E6994AA8;
  v2 = (DSP_Host_Types::DeviceDSPOffloadInfo *)((char *)this + 24);
  if (*((_BYTE *)this + 64) && *((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v2);
  *(_QWORD *)this = off_1E6994CC8;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1B5E50688);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::DeviceDSPOffloadInfo>::description(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const __CFString *v4;
  const __CFString *v5;
  CFIndex Length;
  CFIndex v7;
  CFTypeRef v8;
  std::vector<char>::value_type __x;
  std::vector<char> cf;

  cf.__begin_ = (std::vector<char>::pointer)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, std::vector<char> *))(*(_QWORD *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v8, cf.__begin_);
  if (cf.__begin_)
    CFRelease(cf.__begin_);
  v4 = CFCopyDescription(v8);
  v5 = v4;
  if (v4)
  {
    Length = CFStringGetLength(v4);
    v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    __x = 0;
    std::vector<char>::vector(&cf, v7, &__x);
    LODWORD(v7) = CFStringGetCString(v5, cf.__begin_, v7, 0x8000100u);
    CFRelease(v5);
    if ((_DWORD)v7)
      std::string::basic_string[abi:ne180100]<0>(a2, cf.__begin_);
    else
      std::string::basic_string[abi:ne180100]<0>(a2, "<error>");
    if (cf.__begin_)
    {
      cf.__end_ = cf.__begin_;
      operator delete(cf.__begin_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<empty>");
  }
  if (v8)
    CFRelease(v8);
}

void sub_1B598B980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)&__p);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::DeviceDSPOffloadInfo>::add_to(uint64_t a1, __CFArray **a2)
{
  CFTypeRef v4;
  CFTypeRef cf;

  cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v4, cf);
  if (cf)
    CFRelease(cf);
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, v4);
  if (v4)
    CFRelease(v4);
}

void sub_1B598BA50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

const __CFDictionary *DSP_Host_OffloadDictionary::has_specific_offloads(DSP_Host_OffloadDictionary *this)
{
  const __CFDictionary *result;

  result = (const __CFDictionary *)*((_QWORD *)this + 2);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetCount(result);
    if (result)
      return (const __CFDictionary *)!DSP_Host_OffloadDictionary::has_all_id(this);
  }
  return result;
}

void HALS_Device_HostedDSP::DiscoverDSPPropertySetsForClient(HALS_Device **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _DWORD *v8;
  _DWORD *v9;
  int InternalIOContextID;
  HALS_Object *v11;
  uint64_t v12;
  HALS_ObjectMap *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a4 + 24))
    return;
  if (!a2)
  {
    InternalIOContextID = HALS_Device::GetInternalIOContextID(*a1);
    v9 = operator new(4uLL);
    *v9 = InternalIOContextID;
    v8 = v9 + 1;
    v31 = v9 + 1;
    v32 = v9 + 1;
    v30 = v9;
    while (1)
    {
LABEL_10:
      v12 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v9);
      v13 = (HALS_ObjectMap *)v12;
      if (!v12)
        goto LABEL_33;
      (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v12 + 96) + 728))(&v28, *(_QWORD *)(v12 + 96), *((unsigned int *)*a1 + 4));
      v14 = v28;
      if (!v28)
        break;
      if (a5)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28))
          break;
        v14 = v28;
      }
      v26 = v14;
      v27 = v29;
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = *(_QWORD *)(a4 + 24);
      if (!v17)
        std::__throw_bad_function_call[abi:ne180100]();
      v18 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v26);
      v19 = v27;
      if (v27)
      {
        v20 = (unint64_t *)&v27->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if (v18)
        v22 = 0;
      else
        v22 = 2;
LABEL_28:
      v23 = v29;
      if (v29)
      {
        v24 = (unint64_t *)&v29->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
          if ((v18 & 1) == 0)
            goto LABEL_34;
LABEL_33:
          v22 = 0;
          goto LABEL_34;
        }
      }
      if ((v18 & 1) != 0)
        goto LABEL_33;
LABEL_34:
      HALS_ObjectMap::ReleaseObject(v13, v11);
      if ((v22 == 3 || !v22) && ++v9 != v8)
        continue;
      v8 = v30;
      if (!v30)
        return;
LABEL_5:
      v31 = v8;
      operator delete(v8);
      return;
    }
    LOBYTE(v18) = 0;
    v22 = 3;
    goto LABEL_28;
  }
  (*(void (**)(_DWORD **__return_ptr, uint64_t))(*(_QWORD *)a2 + 200))(&v30, a2);
  v9 = v30;
  v8 = v31;
  if (v30 != v31)
    goto LABEL_10;
  if (v31)
    goto LABEL_5;
}

void sub_1B598BCE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, NSObject **buf, __int128 a14)
{
  AMCP::Log::Scope_Registry *v14;
  NSObject *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;

  if (a2)
  {
    v14 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v15 = *buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v17;
      LOWORD(a14) = 2080;
      *(_QWORD *)((char *)&a14 + 2) = "HALS_Device_HostedDSP.cpp";
      WORD5(a14) = 1024;
      HIDWORD(a14) = 313;
      _os_log_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d [hal_dsp] Encountered an unknown issue while enumerating DSP property sets.", (uint8_t *)&buf, 0x18u);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1B598BDF8()
{
  __cxa_end_catch();
  JUMPOUT(0x1B598BE10);
}

uint64_t HALS_Device_HostedDSP::HasProperty(HALS_Device **this, _DWORD *a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  unsigned __int8 v5;
  int v6;
  uint64_t v9;
  BOOL v10;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned __int16 v15;
  __int128 v16;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  if (*a2 != 1684500589)
  {
    if (*a2 == 1983997011)
      v15 = (a2[1] == 1768845428) | 0x100;
    goto LABEL_4;
  }
  if (a2[1] != 1768845428
    || ((v9 = (*(uint64_t (**)(HALS_Device *))(*(_QWORD *)*this + 464))(*this), (v9 & 0xFF00000000) != 0)
      ? (v10 = v9 == 0)
      : (v10 = 1),
        v10))
  {
    v5 = 0;
    v6 = 0;
    return v5 | (v6 << 8);
  }
  *(_QWORD *)&v16 = *(_QWORD *)a2;
  DWORD2(v16) = a2[2];
  v12 = (char *)operator new(0x20uLL);
  *(_QWORD *)v12 = &off_1E6977960;
  *(_OWORD *)(v12 + 8) = v16;
  *((_QWORD *)v12 + 3) = &v15;
  v18 = v12;
  HALS_Device_HostedDSP::DiscoverDSPPropertySetsForClient(this, (uint64_t)a3, (uint64_t)a2, (uint64_t)v17, 0);
  v13 = v18;
  if (v18 == v17)
  {
    v14 = 4;
    v13 = v17;
    goto LABEL_17;
  }
  if (v18)
  {
    v14 = 5;
LABEL_17:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
LABEL_4:
  v5 = v15;
  v6 = HIBYTE(v15);
  return v5 | (v6 << 8);
}

void sub_1B598BF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<HALS_Device_HostedDSP::HasProperty(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::HasProperty(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_Device_HostedDSP::HasProperty(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::HasProperty(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E6977960;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<HALS_Device_HostedDSP::HasProperty(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::HasProperty(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6977960;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_Device_HostedDSP::HasProperty(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::HasProperty(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  AMCP::Log::Scope_Registry *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *v9;
  unint64_t v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  _BYTE *v13;
  const char *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  NSObject **v18;
  _BYTE v19[10];
  __int16 v20;
  int v21;
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1 + 8;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v6 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, v3);
  **(_WORD **)(a1 + 24) = (unsigned __int16)v6 | 0x100;
  AMCP::Log::Scope_Registry::get(v6);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v18, "com.apple.coreaudio", "AMCP");
  v7 = *(std::__shared_weak_count **)v19;
  v8 = *v18;
  if (*(_QWORD *)v19)
  {
    v9 = (unint64_t *)(*(_QWORD *)v19 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v11 = pthread_self();
    v12 = pthread_mach_thread_np(v11);
    v13 = *(_BYTE **)(a1 + 24);
    v14 = "DOES NOT HAVE";
    if (v13[1] && *v13)
      v14 = "HAS";
    LODWORD(v18) = 67109890;
    HIDWORD(v18) = v12;
    *(_WORD *)v19 = 2080;
    *(_QWORD *)&v19[2] = "HALS_Device_HostedDSP.cpp";
    v20 = 1024;
    v21 = 502;
    v22 = 2080;
    v23 = v14;
    _os_log_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d [hal_dsp][graph] Hosted DSP %s kAudioDevicePropertyDSPGraphParameter", (uint8_t *)&v18, 0x22u);
  }
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return 0;
}

void sub_1B598C204(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<HALS_Device_HostedDSP::HasProperty(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::HasProperty(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK21HALS_Device_HostedDSP11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_ClientE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_Device_HostedDSP::HasProperty(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::HasProperty(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::target_type()
{
}

uint64_t HALS_Device_HostedDSP::IsPropertySettable(HALS_Device **this, uint64_t a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v11;
  __int128 v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  if (*(_DWORD *)a2 == 1684500589)
  {
    *(_QWORD *)&v12 = *(_QWORD *)a2;
    DWORD2(v12) = *(_DWORD *)(a2 + 8);
    v7 = (char *)operator new(0x20uLL);
    *(_QWORD *)v7 = &off_1E69779F0;
    *(_OWORD *)(v7 + 8) = v12;
    *((_QWORD *)v7 + 3) = &v11;
    v14 = v7;
    HALS_Device_HostedDSP::DiscoverDSPPropertySetsForClient(this, (uint64_t)a3, a2, (uint64_t)v13, 1);
    v8 = v14;
    if (v14 == v13)
    {
      v9 = 4;
      v8 = v13;
      goto LABEL_6;
    }
    if (v14)
    {
      v9 = 5;
LABEL_6:
      (*(void (**)(void))(*v8 + 8 * v9))();
    }
  }
  return v11;
}

void sub_1B598C384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<HALS_Device_HostedDSP::IsPropertySettable(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::IsPropertySettable(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_Device_HostedDSP::IsPropertySettable(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::IsPropertySettable(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E69779F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<HALS_Device_HostedDSP::IsPropertySettable(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::IsPropertySettable(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E69779F0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_Device_HostedDSP::IsPropertySettable(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::IsPropertySettable(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::operator()(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  const AudioObjectPropertyAddress *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v4 = *(const AudioObjectPropertyAddress **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  DSP_Host_PropertySet::getHostedDSPPropertyInfo((DSP_Host_PropertySet *)&v13, v4, (_DWORD *)(a1 + 8));
  v6 = v13;
  if (v13)
  {
    if (*(_BYTE *)(v13 + 113))
      v2 = *(_BYTE *)(v13 + 112) != 0;
    else
      v2 = 0;
  }
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  **(_BYTE **)(a1 + 24) = v6 != 0 && v2;
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return 0;
}

void sub_1B598C534(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<HALS_Device_HostedDSP::IsPropertySettable(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::IsPropertySettable(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK21HALS_Device_HostedDSP18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_ClientE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_Device_HostedDSP::IsPropertySettable(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::IsPropertySettable(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::target_type()
{
}

uint64_t HALS_Device_HostedDSP::GetPropertyDataSize(HALS_Device **this, uint64_t a2, const AudioObjectPropertyAddress *a3, unsigned int a4, const void *a5, HALS_Client *a6)
{
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v13;
  __int128 v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  if (*(_DWORD *)a2 == 1684500589)
  {
    *(_QWORD *)&v14 = *(_QWORD *)a2;
    DWORD2(v14) = *(_DWORD *)(a2 + 8);
    v9 = (char *)operator new(0x20uLL);
    *(_QWORD *)v9 = &off_1E6977A70;
    *(_OWORD *)(v9 + 8) = v14;
    *((_QWORD *)v9 + 3) = &v13;
    v16 = v9;
    HALS_Device_HostedDSP::DiscoverDSPPropertySetsForClient(this, (uint64_t)a3, a2, (uint64_t)v15, 1);
    v10 = v16;
    if (v16 == v15)
    {
      v11 = 4;
      v10 = v15;
    }
    else
    {
      if (!v16)
        return v13;
      v11 = 5;
    }
    (*(void (**)(void))(*v10 + 8 * v11))();
    return v13;
  }
  if (*(_DWORD *)a2 == 1983997011)
    return 4;
  return v13;
}

void sub_1B598C6D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<HALS_Device_HostedDSP::GetPropertyDataSize(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::GetPropertyDataSize(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_Device_HostedDSP::GetPropertyDataSize(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::GetPropertyDataSize(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E6977A70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<HALS_Device_HostedDSP::GetPropertyDataSize(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::GetPropertyDataSize(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6977A70;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_Device_HostedDSP::GetPropertyDataSize(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::GetPropertyDataSize(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::operator()(uint64_t a1, uint64_t a2)
{
  AudioObjectPropertyAddress *v3;
  AudioObjectPropertyAddress *v4;
  std::__shared_weak_count *v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (AudioObjectPropertyAddress *)(a1 + 8);
  v4 = *(AudioObjectPropertyAddress **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v6 = DSP_Host_PropertySet::getHostedDSPPropertyDataType(v4, v3) - 3;
  if (v6 > 4)
    LODWORD(v7) = 0;
  else
    v7 = qword_1B5D49FD0[v6];
  **(_DWORD **)(a1 + 24) = v7;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return 0;
}

void sub_1B598C818(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<HALS_Device_HostedDSP::GetPropertyDataSize(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::GetPropertyDataSize(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK21HALS_Device_HostedDSP19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_ClientE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_Device_HostedDSP::GetPropertyDataSize(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::GetPropertyDataSize(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::target_type()
{
}

void HALS_Device_HostedDSP::GetPropertyData(HALS_Device_HostedDSP *this, _DWORD *a2, const AudioObjectPropertyAddress *a3, _DWORD *a4, unsigned int *a5, void *a6, uint64_t a7, _DWORD *a8, HALS_Client *a9)
{
  int v11;
  _QWORD *v14;
  AMCP::Log::Scope_Registry *v15;
  uint64_t v16;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  AMCP::Log::Scope_Registry *v21;
  uint64_t v22;
  NSObject *v23;
  _opaque_pthread_t *v24;
  mach_port_t v25;
  void *v26;
  std::__shared_weak_count *v27;
  NSObject *v28;
  unint64_t *v29;
  unint64_t v30;
  _opaque_pthread_t *v31;
  mach_port_t v32;
  int v33;
  std::__shared_weak_count *v34;
  NSObject *v35;
  unint64_t *v36;
  unint64_t v37;
  _opaque_pthread_t *v38;
  mach_port_t v39;
  int v40;
  int v41;
  const char *v42;
  NSObject *v43;
  uint32_t v44;
  int v45;
  unsigned int v46;
  NSObject *v47;
  _opaque_pthread_t *v48;
  mach_port_t v49;
  void *exception;
  NSObject *v51;
  _opaque_pthread_t *v52;
  mach_port_t v53;
  void *v54;
  char v55;
  __int128 v56;
  uint64_t v57;
  uint64_t (**v58)();
  __int128 v59;
  uint64_t v60;
  void (**v61)(CAException *__hidden);
  int v62;
  uint64_t (**v63)();
  int v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  char v70;
  unsigned int *v71;
  _BYTE v72[24];
  AMCP::Log::Scope_Registry *v73;
  _BYTE v74[24];
  AMCP::Log::Scope_Registry *v75;
  NSObject **buf;
  _BYTE v77[10];
  __int16 v78;
  int v79;
  __int16 v80;
  _BYTE v81[22];
  int v82;
  uint64_t v83;

  v11 = (int)a3;
  v83 = *MEMORY[0x1E0C80C00];
  v71 = a5;
  if (*a2 != 1684500589)
  {
    if (*a2 != 1983997011)
      return;
    if (!a5)
    {
      AMCP::Log::Scope_Registry::get(this);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
      v47 = *buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        v48 = pthread_self();
        v49 = pthread_mach_thread_np(v48);
        LODWORD(buf) = 67109890;
        HIDWORD(buf) = v49;
        *(_WORD *)v77 = 2080;
        *(_QWORD *)&v77[2] = "HALS_Device_HostedDSP.cpp";
        v78 = 1024;
        v79 = 569;
        v80 = 2080;
        *(_QWORD *)v81 = "outData == nullptr";
        _os_log_error_impl(&dword_1B57BA000, v47, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: outData is nullptr for kAudioDevicePropertyVoiceActivityDetectionState", (uint8_t *)&buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v70);
      exception = __cxa_allocate_exception(0x40uLL);
      v61 = &off_1E69A1B30;
      v62 = 1852797029;
      v64 = 1852797029;
      v67 = 0;
      v68 = 0;
      v69 = -1;
      v63 = &off_1E699E510;
      v65 = &unk_1E699E538;
      v66 = 0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)&buf, (uint64_t)&v63);
      *(_QWORD *)&v81[6] = "void HALS_Device_HostedDSP::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &"
                           ", UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
      *(_QWORD *)&v81[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device_HostedDSP.cpp";
      v82 = 569;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v56);
      v59 = v56;
      v60 = v57;
      v56 = 0uLL;
      v57 = 0;
      v58 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)&buf, (uint64_t)&v58);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)exception, (uint64_t)&buf);
    }
    if ((_DWORD)a3 != 4)
    {
      AMCP::Log::Scope_Registry::get(this);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
      v51 = *buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      {
        v52 = pthread_self();
        v53 = pthread_mach_thread_np(v52);
        LODWORD(buf) = 67109890;
        HIDWORD(buf) = v53;
        *(_WORD *)v77 = 2080;
        *(_QWORD *)&v77[2] = "HALS_Device_HostedDSP.cpp";
        v78 = 1024;
        v79 = 570;
        v80 = 2080;
        *(_QWORD *)v81 = "inDataSize != sizeof(UInt32)";
        _os_log_error_impl(&dword_1B57BA000, v51, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: inDataSize is not UInt32 for kAudioDevicePropertyVoiceActivityDetectionState", (uint8_t *)&buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v70);
      v54 = __cxa_allocate_exception(0x40uLL);
      v61 = &off_1E69A1B30;
      v62 = 1852797029;
      v64 = 1852797029;
      v67 = 0;
      v68 = 0;
      v69 = -1;
      v63 = &off_1E699E510;
      v65 = &unk_1E699E538;
      v66 = 0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)&buf, (uint64_t)&v63);
      *(_QWORD *)&v81[6] = "void HALS_Device_HostedDSP::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &"
                           ", UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
      *(_QWORD *)&v81[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device_HostedDSP.cpp";
      v82 = 570;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v56);
      v59 = v56;
      v60 = v57;
      v56 = 0uLL;
      v57 = 0;
      v58 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)&buf, (uint64_t)&v58);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v54, (uint64_t)&buf);
    }
    LOBYTE(v63) = 0;
    BYTE4(v63) = 0;
    v75 = 0;
    v14 = operator new(0x20uLL);
    *v14 = &off_1E6977AF0;
    v14[1] = &v63;
    v14[2] = *(_QWORD *)a2;
    *((_DWORD *)v14 + 6) = a2[2];
    v75 = (AMCP::Log::Scope_Registry *)v14;
    HALS_Device_HostedDSP::DiscoverDSPPropertySetsForClient((HALS_Device **)this, (uint64_t)a8, (uint64_t)a2, (uint64_t)v74, 1);
    v15 = v75;
    if (v75 == (AMCP::Log::Scope_Registry *)v74)
    {
      v16 = 4;
      v15 = (AMCP::Log::Scope_Registry *)v74;
    }
    else
    {
      if (!v75)
        goto LABEL_19;
      v16 = 5;
    }
    v15 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_19:
    if (BYTE4(v63))
    {
      AMCP::Log::Scope_Registry::get(v15);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
      v27 = *(std::__shared_weak_count **)v77;
      v28 = *buf;
      if (*(_QWORD *)v77)
      {
        v29 = (unint64_t *)(*(_QWORD *)v77 + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        goto LABEL_41;
      v31 = pthread_self();
      v32 = pthread_mach_thread_np(v31);
      if (a8)
        v33 = a8[4];
      else
        v33 = 0;
      v41 = *(_DWORD *)(*(_QWORD *)this + 16);
      LODWORD(buf) = 67110402;
      HIDWORD(buf) = v32;
      *(_WORD *)v77 = 2080;
      *(_QWORD *)&v77[2] = "HALS_Device_HostedDSP.cpp";
      v78 = 1024;
      v79 = 584;
      v80 = 1024;
      *(_DWORD *)v81 = v33;
      *(_WORD *)&v81[4] = 1024;
      *(_DWORD *)&v81[6] = v41;
      *(_WORD *)&v81[10] = 1024;
      *(_DWORD *)&v81[12] = (_DWORD)v63;
      v42 = "%6u %32s:%-5d [hal_dsp][mtd] (Client ID: %d) (Device ID: %d) Reading kAudioDevicePropertyVoiceActivityDetect"
            "ionState with %d.";
      v43 = v28;
      v44 = 42;
    }
    else
    {
      AMCP::Log::Scope_Registry::get(v15);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
      v34 = *(std::__shared_weak_count **)v77;
      v35 = *buf;
      if (*(_QWORD *)v77)
      {
        v36 = (unint64_t *)(*(_QWORD *)v77 + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        goto LABEL_41;
      v38 = pthread_self();
      v39 = pthread_mach_thread_np(v38);
      if (a8)
        v40 = a8[4];
      else
        v40 = 0;
      v45 = *(_DWORD *)(*(_QWORD *)this + 16);
      LODWORD(buf) = 67110146;
      HIDWORD(buf) = v39;
      *(_WORD *)v77 = 2080;
      *(_QWORD *)&v77[2] = "HALS_Device_HostedDSP.cpp";
      v78 = 1024;
      v79 = 589;
      v80 = 1024;
      *(_DWORD *)v81 = v40;
      *(_WORD *)&v81[4] = 1024;
      *(_DWORD *)&v81[6] = v45;
      v42 = "%6u %32s:%-5d [hal_dsp][mtd] (Client ID: %d) (Device ID: %d) Unable to read kAudioDevicePropertyVoiceActivit"
            "yDetectionState, no DSP properties found/available (defaulting to 0).";
      v43 = v35;
      v44 = 36;
    }
    _os_log_impl(&dword_1B57BA000, v43, OS_LOG_TYPE_DEFAULT, v42, (uint8_t *)&buf, v44);
LABEL_41:
    *a4 = 4;
    if (BYTE4(v63))
      v46 = v63;
    else
      v46 = 0;
    *v71 = v46;
    return;
  }
  v18 = (int)a6;
  v70 = 0;
  v73 = 0;
  v19 = operator new(0x40uLL);
  v20 = *(_QWORD *)a2;
  *v19 = &off_1E6977B70;
  v19[1] = v20;
  *((_DWORD *)v19 + 4) = a2[2];
  *((_DWORD *)v19 + 5) = v11;
  v19[3] = a7;
  *((_DWORD *)v19 + 8) = v18;
  v19[5] = &v71;
  v19[6] = a4;
  v19[7] = &v70;
  v73 = (AMCP::Log::Scope_Registry *)v19;
  HALS_Device_HostedDSP::DiscoverDSPPropertySetsForClient((HALS_Device **)this, (uint64_t)a8, (uint64_t)a2, (uint64_t)v72, 1);
  v21 = v73;
  if (v73 == (AMCP::Log::Scope_Registry *)v72)
  {
    v22 = 4;
    v21 = (AMCP::Log::Scope_Registry *)v72;
  }
  else
  {
    if (!v73)
      goto LABEL_13;
    v22 = 5;
  }
  v21 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_13:
  if (!v70)
  {
    AMCP::Log::Scope_Registry::get(v21);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v23 = *buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v24 = pthread_self();
      v25 = pthread_mach_thread_np(v24);
      LODWORD(buf) = 67109890;
      HIDWORD(buf) = v25;
      *(_WORD *)v77 = 2080;
      *(_QWORD *)&v77[2] = "HALS_Device_HostedDSP.cpp";
      v78 = 1024;
      v79 = 620;
      v80 = 2080;
      *(_QWORD *)v81 = "!didCopyData";
      _os_log_error_impl(&dword_1B57BA000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device_HostedDSP::GetPropertyData returned no data", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v55);
    v26 = __cxa_allocate_exception(0x40uLL);
    v61 = &off_1E69A1B30;
    v62 = 1852797029;
    v64 = 1852797029;
    v67 = 0;
    v68 = 0;
    v69 = -1;
    v63 = &off_1E699E510;
    v65 = &unk_1E699E538;
    v66 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)&buf, (uint64_t)&v63);
    *(_QWORD *)&v81[6] = "void HALS_Device_HostedDSP::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &, "
                         "UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
    *(_QWORD *)&v81[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device_HostedDSP.cpp";
    v82 = 620;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v56);
    v59 = v56;
    v60 = v57;
    v56 = 0uLL;
    v57 = 0;
    v58 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)&buf, (uint64_t)&v58);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)v26, (uint64_t)&buf);
  }
}

void sub_1B598D11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,std::exception a21,uint64_t a22,std::exception a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  char *v41;
  uint64_t v42;

  if (!a2)
    _Unwind_Resume(exception_object);
  v41 = *(char **)(v39 + 64);
  if (v41 == &a39)
  {
    v42 = 4;
    v41 = &a39;
  }
  else
  {
    if (!v41)
    {
LABEL_7:
      __cxa_begin_catch(exception_object);
      __cxa_end_catch();
      JUMPOUT(0x1B598CBBCLL);
    }
    v42 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v41 + 8 * v42))();
  goto LABEL_7;
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)(a1 + 56) = &unk_1E69A1F88;
  *(_QWORD *)a1 = &off_1E699E4D0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = &unk_1E69A2000;
  v4 = a1 + 16;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v6;
  *(_QWORD *)a1 = &off_1E699E418;
  *(_QWORD *)(a1 + 16) = &unk_1E699E450;
  *(_QWORD *)(a1 + 56) = &unk_1E699E488;
  boost::exception_detail::copy_boost_exception(v4, a2 + 16);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &unk_1E69A1F88;
  *(_QWORD *)a1 = &off_1E699E4D0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &unk_1E69A2000;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &off_1E699E418;
  *(_QWORD *)(a1 + 16) = &unk_1E699E450;
  *(_QWORD *)(a1 + 56) = &unk_1E699E488;
  return a1;
}

void sub_1B598D408(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)(boost::exception_detail::error_info_container_impl *__hidden, const char *);
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  void *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;

  v4 = operator new();
  *(_QWORD *)v4 = off_1E69A20A0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  boost::shared_ptr<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::shared_ptr<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>(&v14, v4);
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
  {
    v5 = operator new();
    v6 = &off_1E69A2168;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = &off_1E69A2168;
    *(_QWORD *)(v5 + 8) = v5 + 16;
    *(_QWORD *)(v5 + 40) = 0;
    *(_QWORD *)(v5 + 48) = 0;
    *(_DWORD *)(v5 + 56) = 0;
    v7 = *(_QWORD *)(a1 + 24);
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
      v6 = *(uint64_t (***)(boost::exception_detail::error_info_container_impl *__hidden, const char *))v5;
    }
    *(_QWORD *)(a1 + 24) = v5;
    ((void (*)(uint64_t))v6[3])(v5);
  }
  v12 = v14;
  v13 = v15;
  if (v15)
  {
    v8 = v15 + 2;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v5 + 16))(v5, &v12, &v11);
  boost::detail::shared_count::~shared_count(&v13);
  boost::detail::shared_count::~shared_count(&v15);
  return a1;
}

void sub_1B598D57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, unsigned int *a14)
{
  unsigned int **v14;

  boost::detail::shared_count::~shared_count(v14);
  boost::detail::shared_count::~shared_count(&a14);
  _Unwind_Resume(a1);
}

void sub_1B598D634(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::~clone_impl(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)a1);
}

{
  *(_QWORD *)(a1 + 16) = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x1B5E50688);
}

void boost::exception_detail::error_info_injector<CAException>::~error_info_injector(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)a1);
}

{
  *(_QWORD *)(a1 + 16) = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x1B5E50688);
}

void std::__function::__func<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_1,std::allocator<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_1>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_1,std::allocator<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_1>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E6977B70;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_1,std::allocator<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_1>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E6977B70;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_1,std::allocator<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_1>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::operator()(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  const UInt8 *v5;
  CFIndex v6;
  CFDataRef v7;
  CFTypeRef v8;
  unint64_t v9;
  void *v10;
  const UInt8 *BytePtr;
  CFIndex Length;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::runtime_error *exception;
  std::runtime_error *v17;
  std::runtime_error *v18;
  CFTypeRef cf;
  char v20;
  CFDataRef theData;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v5 = *(const UInt8 **)(a1 + 24);
  if (v5 && (v6 = *(unsigned int *)(a1 + 32), (_DWORD)v6))
  {
    v7 = CFDataCreate(0, v5, v6);
    applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&cf, v7);
    v8 = cf;
    if (cf)
      CFRetain(cf);
  }
  else
  {
    v8 = 0;
  }
  cf = v8;
  v20 = 1;
  (*(void (**)(CFDataRef *__return_ptr, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)v4 + 40))(&theData, v4, a1 + 8, &cf);
  std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
  if (theData)
  {
    v9 = *(unsigned int *)(a1 + 20);
    if (CFDataGetLength(theData) <= v9)
    {
      if (!theData)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v10 = **(void ***)(a1 + 40);
      BytePtr = CFDataGetBytePtr(theData);
      if (!theData)
      {
        v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v17, "Could not construct");
        __cxa_throw(v17, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      Length = CFDataGetLength(theData);
      memcpy(v10, BytePtr, Length);
      if (!theData)
      {
        v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v18, "Could not construct");
        __cxa_throw(v18, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      **(_DWORD **)(a1 + 48) = CFDataGetLength(theData);
      **(_BYTE **)(a1 + 56) = 1;
    }
    if (theData)
      CFRelease(theData);
  }
  if (v8)
    CFRelease(v8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return 0;
}

void sub_1B598D950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, CFTypeRef cf)
{
  std::__shared_weak_count *v12;
  const void *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (cf)
    CFRelease(cf);
  if (v13)
    CFRelease(v13);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_1,std::allocator<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_1>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK21HALS_Device_HostedDSP15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_ClientE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_1,std::allocator<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_1>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::target_type()
{
}

void std::__function::__func<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E6977AF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6977AF0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  std::__shared_weak_count *v4;
  AudioObjectPropertyAddress *v5;
  uint64_t v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::runtime_error *exception;
  std::runtime_error *v17;
  CFTypeRef cf;
  char v19;
  uint64_t v20;
  char v21;
  CFDataRef theData;

  v5 = *(AudioObjectPropertyAddress **)a2;
  v4 = *(std::__shared_weak_count **)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v6 = a1 + 16;
  LOBYTE(cf) = 0;
  v19 = 0;
  if (DSP_Host_PropertySet::getHostedDSPPropertyDataType(v5, (AudioObjectPropertyAddress *)(a1 + 16)) != 5)
    goto LABEL_13;
  LOBYTE(v20) = 0;
  v21 = 0;
  (*(void (**)(CFDataRef *__return_ptr, AudioObjectPropertyAddress *, uint64_t, uint64_t *))(*(_QWORD *)&v5->mSelector + 40))(&theData, v5, v6, &v20);
  std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v20);
  if (!theData)
    goto LABEL_13;
  if (CFDataGetLength(theData) != 4)
    goto LABEL_8;
  if (!theData)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (CFDataGetBytePtr(theData))
  {
    if (!theData)
    {
      v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v17, "Could not construct");
      __cxa_throw(v17, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v7 = 0;
    v8 = *(_DWORD *)CFDataGetBytePtr(theData);
    v2 = v8 >> 8;
  }
  else
  {
LABEL_8:
    LOBYTE(v8) = 0;
    v7 = 1;
  }
  if (theData)
    CFRelease(theData);
  if ((v7 & 1) == 0)
  {
    v9 = 0x100000000;
  }
  else
  {
LABEL_13:
    v9 = 0;
    LOBYTE(v8) = 0;
  }
  v10 = v9 | v8 | (v2 << 8);
  if (v10 <= 0x100000000)
    LODWORD(v10) = 0;
  v11 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)v11 = v10;
  *(_BYTE *)(v11 + 4) = 1;
  std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
  v12 = **(_DWORD **)(a1 + 8);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v12 == 0;
}

void sub_1B598DCB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  applesauce::CF::DataRef::~DataRef((const void **)va1);
  std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK21HALS_Device_HostedDSP15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_ClientE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::target_type()
{
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)(v2 + 56) = &unk_1E69A1F88;
  *(_QWORD *)v2 = &off_1E699E4D0;
  *(_DWORD *)(v2 + 8) = *(_DWORD *)(a1 + 8);
  *(_QWORD *)(v2 + 16) = &unk_1E69A2000;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v2 + 24) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 32) = *(_OWORD *)(a1 + 32);
  *(_DWORD *)(v2 + 48) = *(_DWORD *)(a1 + 48);
  *(_QWORD *)v2 = &off_1E699E418;
  *(_QWORD *)(v2 + 16) = &unk_1E699E450;
  *(_QWORD *)(v2 + 56) = &unk_1E699E488;
  boost::exception_detail::copy_boost_exception(v2 + 16, a1 + 16);
  return v2 + *(_QWORD *)(*(_QWORD *)v2 - 48);
}

void sub_1B598DEF4(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  MEMORY[0x1B5E50688]();
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)exception, a1);
}

void sub_1B598DF6C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::~clone_impl(_QWORD *a1)
{
  std::exception *v1;

  v1 = (std::exception *)(a1 - 2);
  *a1 = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception(v1);
}

{
  std::exception *v1;

  v1 = (std::exception *)(a1 - 2);
  *a1 = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception(v1);
  JUMPOUT(0x1B5E50688);
}

uint64_t `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::~clone_impl(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 40);
  *((_QWORD *)v1 + 2) = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 3);
  std::exception::~exception((std::exception *)v1);
}

{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 40);
  *((_QWORD *)v1 + 2) = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 3);
  std::exception::~exception((std::exception *)v1);
  JUMPOUT(0x1B5E50688);
}

void `non-virtual thunk to'boost::exception_detail::error_info_injector<CAException>::~error_info_injector(_QWORD *a1)
{
  std::exception *v1;

  v1 = (std::exception *)(a1 - 2);
  *a1 = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception(v1);
}

{
  std::exception *v1;

  v1 = (std::exception *)(a1 - 2);
  *a1 = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception(v1);
  JUMPOUT(0x1B5E50688);
}

void std::__function::__func<HALS_Device_HostedDSP::SetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::SetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_Device_HostedDSP::SetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::SetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E6977BF0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<HALS_Device_HostedDSP::SetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::SetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E6977BF0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_Device_HostedDSP::SetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::SetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::operator()(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  CFDataRef v5;
  const UInt8 *v6;
  CFIndex v7;
  CFDataRef v8;
  unsigned int v9;
  AMCP::Log::Scope_Registry *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v14;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  int v20;
  int8x8_t v21;
  int8x8_t v22;
  int32x4_t v23;
  int32x4_t v24;
  uint32x4_t v25;
  int16x8_t v26;
  _DWORD *exception;
  void *__p;
  char v29;
  void *v30;
  char v31;
  CFTypeRef v32;
  CFTypeRef cf;
  _BYTE v34[10];
  __int16 v35;
  int v36;
  __int16 v37;
  void **v38;
  __int16 v39;
  int v40;
  __int16 v41;
  void **p_p;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v5 = CFDataCreate(0, *(const UInt8 **)(a1 + 24), *(unsigned int *)(a1 + 32));
  applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v32, v5);
  v6 = *(const UInt8 **)(a1 + 40);
  if (v6 && (v7 = *(unsigned int *)(a1 + 48), (_DWORD)v7))
  {
    v8 = CFDataCreate(0, v6, v7);
    applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&cf, v8);
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, CFTypeRef *))(*(_QWORD *)v4 + 32))(v4, a1 + 8, &v32, &cf);
    v10 = (AMCP::Log::Scope_Registry *)cf;
    if (cf)
      CFRelease(cf);
  }
  else
  {
    v10 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)v4 + 32))(v4, a1 + 8, &v32, 0);
    v9 = v10;
  }
  if (v9)
  {
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
    v14 = *(std::__shared_weak_count **)v34;
    v15 = *(NSObject **)cf;
    if (*(_QWORD *)v34)
    {
      v16 = (unint64_t *)(*(_QWORD *)v34 + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v18 = pthread_self();
      v19 = pthread_mach_thread_np(v18);
      v20 = *(_DWORD *)(a1 + 16);
      v21.i32[0] = bswap32(*(_DWORD *)(a1 + 12));
      v22 = vzip1_s8(v21, v21);
      v23.i64[0] = 0x1F0000001FLL;
      v23.i64[1] = 0x1F0000001FLL;
      v24.i64[0] = 0x1F0000001FLL;
      v24.i64[1] = 0x1F0000001FLL;
      v25.i64[0] = 0x5F0000005FLL;
      v25.i64[1] = 0x5F0000005FLL;
      *(int8x8_t *)v26.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v25, (uint32x4_t)vsraq_n_s32(v24, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v22), 0x18uLL), 0x18uLL))), v22, (int8x8_t)0x2E002E002E002ELL);
      v31 = 4;
      *(int8x8_t *)v26.i8 = vmovn_s16(v26);
      LODWORD(v30) = v26.i32[0];
      BYTE4(v30) = 0;
      v26.i32[0] = bswap32(v9);
      *(int8x8_t *)v26.i8 = vzip1_s8(*(int8x8_t *)v26.i8, *(int8x8_t *)v26.i8);
      v29 = 4;
      *(int8x8_t *)v26.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v25, (uint32x4_t)vsraq_n_s32(v23, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v26.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v26.i8, (int8x8_t)0x2E002E002E002ELL);
      LODWORD(__p) = vmovn_s16(v26).u32[0];
      BYTE4(__p) = 0;
      LODWORD(cf) = 67110402;
      HIDWORD(cf) = v19;
      *(_WORD *)v34 = 2080;
      *(_QWORD *)&v34[2] = "HALS_Device_HostedDSP.cpp";
      v35 = 1024;
      v36 = 662;
      v37 = 2080;
      v38 = &v30;
      v39 = 1024;
      v40 = v20;
      v41 = 2080;
      p_p = &__p;
      _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp][graph] kAudioDevicePropertyDSPGraphParameter from setHostedDSPProperty scope:%s el:%d err:%s", (uint8_t *)&cf, 0x32u);
      if (v29 < 0)
        operator delete(__p);
      if (v31 < 0)
        operator delete(v30);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v9;
  }
  if (v32)
    CFRelease(v32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return 0;
}

void sub_1B598E4A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef a16, CFTypeRef cf)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t std::__function::__func<HALS_Device_HostedDSP::SetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::SetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN21HALS_Device_HostedDSP15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_ClientE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_Device_HostedDSP::SetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::SetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::target_type()
{
}

void ADS::Stream::~Stream(ADS::Stream *this)
{
  *(_QWORD *)this = off_1E6977C70;
  *((_QWORD *)this + 17) = &off_1E69985F8;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 160));
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)this + 14));
  ADS::BaseObject::~BaseObject(this);
}

{
  *(_QWORD *)this = off_1E6977C70;
  *((_QWORD *)this + 17) = &off_1E69985F8;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 160));
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)this + 14));
  ADS::BaseObject::~BaseObject(this);
  JUMPOUT(0x1B5E50688);
}

BOOL ADS::Stream::HasProperty(ADS::Stream *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  signed int mSelector;
  BOOL v5;
  int v6;

  mSelector = a4->mSelector;
  if ((int)a4->mSelector > 1935960433)
  {
    if (mSelector <= 1936092531)
    {
      v5 = mSelector == 1935960434;
      v6 = 1936092513;
    }
    else
    {
      v5 = mSelector == 1936092532 || mSelector == 1952542835;
      v6 = 1952805485;
    }
  }
  else if (mSelector <= 1885762656)
  {
    v5 = mSelector == 1819569763;
    v6 = 1885762592;
  }
  else
  {
    v5 = mSelector == 1885762657 || mSelector == 1935762292;
    v6 = 1935894638;
  }
  return v5 || mSelector == v6 || ADS::BaseObject::HasProperty(this, a2, a3, a4);
}

uint64_t ADS::Stream::IsPropertySettable(ADS::Stream *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  uint64_t v4;
  signed int mSelector;
  int v7;

  v4 = 0;
  mSelector = a4->mSelector;
  if ((int)a4->mSelector > 1935960433)
  {
    if (mSelector <= 1936092531)
    {
      if (mSelector != 1935960434 && mSelector != 1936092513)
        return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
      return v4;
    }
    if (mSelector == 1952805485 || mSelector == 1952542835)
      return v4;
    v7 = 1936092532;
  }
  else
  {
    if (mSelector > 1885762656)
    {
      if (mSelector == 1885762657)
        return v4;
      if (mSelector != 1935762292)
      {
        if (mSelector != 1935894638)
          return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
        return v4;
      }
      return 1;
    }
    if (mSelector == 1819569763)
      return v4;
    v7 = 1885762592;
  }
  if (mSelector == v7)
    return 1;
  return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
}

uint64_t ADS::Stream::GetPropertyDataSize(ADS::Stream *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6)
{
  signed int mSelector;
  uint64_t v7;
  int v9;

  mSelector = a4->mSelector;
  v7 = 4;
  if ((int)a4->mSelector <= 1935960433)
  {
    if (mSelector > 1885762656)
    {
      if (mSelector != 1885762657)
      {
        if (mSelector != 1935762292 && mSelector != 1935894638)
          return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
        return v7;
      }
      return (56 * *((_DWORD *)this + 30));
    }
    if (mSelector == 1819569763)
      return v7;
    v9 = 1885762592;
    goto LABEL_15;
  }
  if (mSelector > 1936092531)
  {
    if (mSelector == 1952805485 || mSelector == 1952542835)
      return v7;
    v9 = 1936092532;
LABEL_15:
    if (mSelector == v9)
      return 40;
    return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
  }
  if (mSelector == 1935960434)
    return v7;
  if (mSelector == 1936092513)
    return (56 * *((_DWORD *)this + 30));
  return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
}

void ADS::Stream::GetPropertyData(ADS::Stream *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6, unsigned int a7, unsigned int *a8, char *a9)
{
  signed int mSelector;
  int v11;
  char *v12;
  int v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  unsigned int v17;
  _QWORD *v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  _DWORD *v27;
  _DWORD *exception;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  int v37;
  const char *v38;
  __int16 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  mSelector = a4->mSelector;
  if ((int)a4->mSelector > 1935894637)
  {
    if (mSelector > 1936092531)
    {
      if (mSelector > 1952542834)
      {
        if (mSelector == 1952542835)
        {
          if (a7 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              v37 = 136315394;
              v38 = "ADS_Stream.cpp";
              v39 = 1024;
              v40 = 192;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Stream_GetPropertyData: not enough space for the return value of kAudioStreamPropertyIsReferenceStream for the stream", (uint8_t *)&v37, 0x12u);
            }
            exception = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)exception = &off_1E69A1B30;
            exception[2] = 561211770;
          }
          v11 = *((unsigned __int8 *)this + 128);
          goto LABEL_53;
        }
        if (mSelector == 1952805485)
        {
          if (a7 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              v37 = 136315394;
              v38 = "ADS_Stream.cpp";
              v39 = 1024;
              v40 = 210;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Stream_GetPropertyData: not enough space for the return value of kAudioStreamPropertyTerminalType for the stream", (uint8_t *)&v37, 0x12u);
            }
            v30 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v30 = &off_1E69A1B30;
            v30[2] = 561211770;
          }
          v11 = *((_DWORD *)this + 13);
          goto LABEL_53;
        }
LABEL_56:
        ADS::BaseObject::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, a9);
        return;
      }
      if (mSelector != 1936092532)
      {
        if (mSelector == 1937007734)
        {
          if (a7 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              v37 = 136315394;
              v38 = "ADS_Stream.cpp";
              v39 = 1024;
              v40 = 169;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Stream_GetPropertyData: not enough space for the return value of kAudioObjectPropertyOwner for the volume control", (uint8_t *)&v37, 0x12u);
            }
            v29 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v29 = &off_1E69A1B30;
            v29[2] = 561211770;
          }
          v11 = *((_DWORD *)this + 5);
LABEL_53:
          *(_DWORD *)a9 = v11;
LABEL_54:
          *a8 = 4;
          return;
        }
        goto LABEL_56;
      }
LABEL_28:
      if (a7 <= 0x27)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          v37 = 136315394;
          v38 = "ADS_Stream.cpp";
          v39 = 1024;
          v40 = 238;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Stream_GetPropertyData: not enough space for the return value of kAudioStreamPropertyVirtualFormat for the stream", (uint8_t *)&v37, 0x12u);
        }
        v27 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v27 = &off_1E69A1B30;
        v27[2] = 561211770;
      }
      v12 = (char *)this + 136;
      v14 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 17) + 16))((char *)this + 136);
      v15 = *((_QWORD *)v12 - 6);
      v16 = *((_OWORD *)v12 - 4);
      *(_OWORD *)a9 = *((_OWORD *)v12 - 5);
      *((_OWORD *)a9 + 1) = v16;
      *((_QWORD *)a9 + 4) = v15;
      *a8 = 40;
      if (v14)
        goto LABEL_23;
      return;
    }
    if (mSelector == 1935894638)
    {
      if (a7 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          v37 = 136315394;
          v38 = "ADS_Stream.cpp";
          v39 = 1024;
          v40 = 220;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Stream_GetPropertyData: not enough space for the return value of kAudioStreamPropertyStartingChannel for the stream", (uint8_t *)&v37, 0x12u);
        }
        v31 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v31 = &off_1E69A1B30;
        v31[2] = 561211770;
      }
      v11 = *((_DWORD *)this + 24);
      goto LABEL_53;
    }
    if (mSelector == 1935960434)
    {
      if (a7 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          v37 = 136315394;
          v38 = "ADS_Stream.cpp";
          v39 = 1024;
          v40 = 201;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Stream_GetPropertyData: not enough space for the return value of kAudioStreamPropertyDirection for the stream", (uint8_t *)&v37, 0x12u);
        }
        v32 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v32 = &off_1E69A1B30;
        v32[2] = 561211770;
      }
      v11 = *((unsigned __int8 *)this + 49);
      goto LABEL_53;
    }
    if (mSelector != 1936092513)
      goto LABEL_56;
LABEL_31:
    v17 = 0;
    if (a7 >= 0x38)
    {
      v18 = (_QWORD *)*((_QWORD *)this + 13);
      if (v18 != (_QWORD *)((char *)this + 112))
      {
        v19 = 0;
        do
        {
          v20 = &a9[56 * v19];
          v21 = *((_OWORD *)v18 + 2);
          v22 = *((_OWORD *)v18 + 3);
          v23 = *((_OWORD *)v18 + 4);
          *((_QWORD *)v20 + 6) = v18[10];
          *((_OWORD *)v20 + 1) = v22;
          *((_OWORD *)v20 + 2) = v23;
          *(_OWORD *)v20 = v21;
          v24 = (_QWORD *)v18[1];
          v25 = v18;
          if (v24)
          {
            do
            {
              v18 = v24;
              v24 = (_QWORD *)*v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              v18 = (_QWORD *)v25[2];
              v26 = *v18 == (_QWORD)v25;
              v25 = v18;
            }
            while (!v26);
          }
          ++v19;
        }
        while (v19 < a7 / 0x38uLL && v18 != (_QWORD *)((char *)this + 112));
        v17 = 56 * v19;
      }
    }
    *a8 = v17;
    return;
  }
  if (mSelector <= 1885762591)
  {
    switch(mSelector)
    {
      case 1650682995:
        if (a7 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            v37 = 136315394;
            v38 = "ADS_Stream.cpp";
            v39 = 1024;
            v40 = 155;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Stream_GetPropertyData: not enough space for the return value of kAudioObjectPropertyBaseClass for the volume control", (uint8_t *)&v37, 0x12u);
          }
          v33 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v33 = &off_1E69A1B30;
          v33[2] = 561211770;
        }
        v11 = *((_DWORD *)this + 4);
        goto LABEL_53;
      case 1668047219:
        if (a7 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            v37 = 136315394;
            v38 = "ADS_Stream.cpp";
            v39 = 1024;
            v40 = 162;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Stream_GetPropertyData: not enough space for the return value of kAudioObjectPropertyClass for the volume control", (uint8_t *)&v37, 0x12u);
          }
          v34 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v34 = &off_1E69A1B30;
          v34[2] = 561211770;
        }
        v11 = *((_DWORD *)this + 3);
        goto LABEL_53;
      case 1819569763:
        if (a7 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            v37 = 136315394;
            v38 = "ADS_Stream.cpp";
            v39 = 1024;
            v40 = 227;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Stream_GetPropertyData: not enough space for the return value of kAudioStreamPropertyStartingChannel for the stream", (uint8_t *)&v37, 0x12u);
          }
          v35 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v35 = &off_1E69A1B30;
          v35[2] = 561211770;
        }
        *(_DWORD *)a9 = 0;
        goto LABEL_54;
    }
    goto LABEL_56;
  }
  if (mSelector == 1885762592)
    goto LABEL_28;
  if (mSelector == 1885762657)
    goto LABEL_31;
  if (mSelector != 1935762292)
    goto LABEL_56;
  if (a7 <= 3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v37 = 136315394;
      v38 = "ADS_Stream.cpp";
      v39 = 1024;
      v40 = 179;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Stream_GetPropertyData: not enough space for the return value of kAudioStreamPropertyIsActive for the stream", (uint8_t *)&v37, 0x12u);
    }
    v36 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v36 = &off_1E69A1B30;
    v36[2] = 561211770;
  }
  v12 = (char *)this + 136;
  v13 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 17) + 16))((char *)this + 136);
  *(_DWORD *)a9 = *(v12 - 88);
  *a8 = 4;
  if (v13)
LABEL_23:
    (*(void (**)(char *))(*(_QWORD *)v12 + 24))(v12);
}

void sub_1B598F23C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ADS::Stream::SetPropertyData(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, unint64_t *a10, unsigned __int8 a11)
{
  int v13;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  _BOOL4 v19;
  uint64_t v20;
  int v21;
  int v22;
  _DWORD *v23;
  unint64_t v24;
  _DWORD *v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  int v31;
  dispatch_queue_t *v32;
  unsigned __int8 v33;
  unint64_t v34;
  _DWORD *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  _DWORD *exception;
  _DWORD *v45;
  _DWORD *v46;
  _QWORD v47[5];
  int v48;
  AudioStreamBasicDescription v49;
  uint8_t v50[4];
  const char *v51;
  __int16 v52;
  int v53;
  _BYTE buf[32];
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v13 = *(_DWORD *)a4;
  if (*(_DWORD *)a4 == 1885762592 || v13 == 1936092532)
  {
    if ((_DWORD)a7 != 40)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "ADS_Stream.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 310;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Stream_SetPropertyData: wrong size for the data for kAudioStreamPropertyPhysicalFormat", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 561211770;
    }
    v15 = *(_OWORD *)(a8 + 16);
    *(_OWORD *)buf = *(_OWORD *)a8;
    *(_OWORD *)&buf[16] = v15;
    v55 = *(_QWORD *)(a8 + 32);
    v16 = a1 + 136;
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 136) + 16))(a1 + 136);
    v18 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)&v49.mSampleRate = *(_OWORD *)(a1 + 56);
    *(_OWORD *)&v49.mBytesPerPacket = v18;
    *(_QWORD *)&v49.mBitsPerChannel = *(_QWORD *)(a1 + 88);
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(a1 + 136);
    if (*(double *)buf != 0.0 && v49.mSampleRate != 0.0 && *(double *)buf != v49.mSampleRate
      || *(_DWORD *)&buf[8] && v49.mFormatID && *(_DWORD *)&buf[8] != v49.mFormatID
      || *(_DWORD *)&buf[16] && v49.mBytesPerPacket && *(_DWORD *)&buf[16] != v49.mBytesPerPacket
      || *(_DWORD *)&buf[20] && v49.mFramesPerPacket && *(_DWORD *)&buf[20] != v49.mFramesPerPacket
      || *(_DWORD *)&buf[24] && v49.mBytesPerFrame && *(_DWORD *)&buf[24] != v49.mBytesPerFrame
      || *(_DWORD *)&buf[28] && v49.mChannelsPerFrame && *(_DWORD *)&buf[28] != v49.mChannelsPerFrame
      || (_DWORD)v55 && v49.mBitsPerChannel && (_DWORD)v55 != v49.mBitsPerChannel
      || !CA::Implementation::EquivalentFormatFlags((CA::Implementation *)buf, &v49, (const AudioStreamBasicDescription *)1, 1))
    {
      if (!ADS::Stream::IsSupportedFormat(a1, (uint64_t)buf))
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v50 = 136315394;
          v51 = "ADS_Stream.cpp";
          v52 = 1024;
          v53 = 324;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Stream::SetPropertyData: unsupported format for kAudioStreamPropertyPhysicalFormat/kAudioStreamPropertyVirtualFormat", v50, 0x12u);
        }
        v45 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v45 = &off_1E69A1B30;
        v45[2] = 560226676;
      }
      v26 = *(_DWORD *)(a1 + 20);
      v27 = operator new();
      v28 = *(_OWORD *)&buf[16];
      *(_OWORD *)(v27 + 56) = *(_OWORD *)buf;
      v29 = *(_DWORD *)(a1 + 8);
      v30 = *a4;
      v31 = *((_DWORD *)a4 + 2);
      *(_OWORD *)(v27 + 72) = v28;
      *(_QWORD *)(v27 + 88) = v55;
      *(_DWORD *)(v27 + 8) = v29;
      *(_QWORD *)(v27 + 12) = v30;
      *(_DWORD *)(v27 + 20) = v31;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)v27 = &off_1E6977D30;
      pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
      v47[0] = MEMORY[0x1E0C809B0];
      v47[1] = 0x40000000;
      v47[2] = ___ZN3ADS6Stream15SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke;
      v47[3] = &__block_descriptor_tmp_3750;
      v48 = v26;
      v47[4] = v27;
      v32 = (dispatch_queue_t *)ADS::Simulator::sServerDefaultPriorityQueue;
      if (ADS::Simulator::sServerDefaultPriorityQueue)
      {
        v33 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 32));
        if ((v33 & 1) != 0)
          atomic_store(1u, (unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 33));
        dispatch_async(*v32, v47);
      }
    }
  }
  else if (v13 == 1935762292)
  {
    if ((_DWORD)a7 != 4)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "ADS_Stream.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 287;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Stream_SetPropertyData: wrong size for the data for kAudioDevicePropertyNominalSampleRate", buf, 0x12u);
      }
      v46 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v46 = &off_1E69A1B30;
      v46[2] = 561211770;
    }
    v19 = *(_DWORD *)a8 == 0;
    v20 = a1 + 136;
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 136) + 16))(a1 + 136);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8 * v19))(a1);
    *a9 = 1;
    v22 = *((_DWORD *)a4 + 1);
    v23 = (_DWORD *)a10[1];
    v24 = a10[2];
    if ((unint64_t)v23 >= v24)
    {
      v34 = 0x1555555555555555;
      v35 = (_DWORD *)*a10;
      v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v23 - *a10) >> 2);
      v37 = v36 + 1;
      if (v36 + 1 > 0x1555555555555555)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v35) >> 2);
      if (2 * v38 > v37)
        v37 = 2 * v38;
      if (v38 < 0xAAAAAAAAAAAAAAALL)
        v34 = v37;
      if (v34)
      {
        v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v34);
        v35 = (_DWORD *)*a10;
        v23 = (_DWORD *)a10[1];
      }
      else
      {
        v39 = 0;
      }
      v40 = (_DWORD *)(v34 + 12 * v36);
      v41 = v34 + 12 * v39;
      *v40 = 1935762292;
      v40[1] = v22;
      v40[2] = 0;
      v25 = v40 + 3;
      if (v23 != v35)
      {
        do
        {
          v42 = *(_QWORD *)(v23 - 3);
          v23 -= 3;
          v43 = v23[2];
          *(_QWORD *)(v40 - 3) = v42;
          v40 -= 3;
          v40[2] = v43;
        }
        while (v23 != v35);
        v35 = (_DWORD *)*a10;
      }
      *a10 = (unint64_t)v40;
      a10[1] = (unint64_t)v25;
      a10[2] = v41;
      if (v35)
        operator delete(v35);
    }
    else
    {
      *v23 = 1935762292;
      v23[1] = v22;
      v23[2] = 0;
      v25 = v23 + 3;
    }
    a10[1] = (unint64_t)v25;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
  }
  else
  {
    ADS::BaseObject::SetPropertyData(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  }
}

void sub_1B598F864(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ADS::Stream::PerformConfigChange(ADS::Stream *this, unint64_t a2, char *a3)
{
  int v5;
  __int128 v7;
  char *v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  _DWORD *exception;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *((_DWORD *)a3 + 3);
  if (v5 == 1936092532 || v5 == 1885762592)
  {
    v7 = *(_OWORD *)(a3 + 72);
    v13 = *(_OWORD *)(a3 + 56);
    v14 = v7;
    v15 = *((_QWORD *)a3 + 11);
    if (!ADS::Stream::IsSupportedFormat((uint64_t)this, (uint64_t)&v13))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v17 = "ADS_Stream.cpp";
        v18 = 1024;
        v19 = 433;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Stream::PerformConfigChange: unsupported sample format", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 560226676;
    }
    v9 = *((_QWORD *)this + 17);
    v8 = (char *)this + 136;
    v10 = (*(uint64_t (**)(char *))(v9 + 16))(v8);
    v11 = v14;
    *((_OWORD *)v8 - 5) = v13;
    *((_OWORD *)v8 - 4) = v11;
    *((_QWORD *)v8 - 6) = v15;
    (*(void (**)(char *))(*(_QWORD *)a3 + 8))(a3);
    if (v10)
      (*(void (**)(char *))(*(_QWORD *)v8 + 24))(v8);
  }
  else
  {
    ADS::BaseObject::PerformConfigChange(this, a2, a3);
  }
}

void sub_1B598FA60(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ADS::Stream::AbortConfigChange(ADS::Stream *this, unint64_t a2, ADS::BaseObject *a3)
{
  if (*(_DWORD *)a3 == 1936092532 || *(_DWORD *)a3 == 1885762592)
    (*(void (**)(ADS::BaseObject *))(*(_QWORD *)a3 + 8))(a3);
  else
    ADS::BaseObject::AbortConfigChange(this, a2, (char *)a3);
}

BOOL ADS::Stream::IsSupportedFormat(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  __int128 v4;
  double v5;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _OWORD v11[2];
  uint64_t v12;
  int v13;

  v2 = *(_QWORD **)(a1 + 104);
  v3 = (_QWORD *)(a1 + 112);
  v4 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v4;
  v12 = *(_QWORD *)(a2 + 32);
  v13 = 3;
  if (v2 != (_QWORD *)(a1 + 112))
  {
    v5 = *(double *)v11;
    while (!CA::StreamDescription::IsEquivalent((CA::Implementation *)v11, (const AudioStreamBasicDescription *)(v2 + 4), 3u)|| *((double *)v2 + 9) > v5|| *((double *)v2 + 10) < v5)
    {
      v7 = (_QWORD *)v2[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v2[2];
          v9 = *v8 == (_QWORD)v2;
          v2 = v8;
        }
        while (!v9);
      }
      v2 = v8;
      if (v8 == v3)
      {
        v2 = v3;
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

uint64_t ___ZN3ADS6Stream15SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, _QWORD, uint64_t);

  if (ADS::Simulator::sHost)
  {
    v1 = *(unsigned int *)(result + 40);
    v2 = *(_QWORD *)(result + 32);
    v3 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(ADS::Simulator::sHost + 32);
    pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
    return v3(ADS::Simulator::sHost, v1, 0, v2);
  }
  return result;
}

void sub_1B598FBBC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

_QWORD *ADS::ChangeInfoData<AudioStreamBasicDescription>::~ChangeInfoData(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6977D78;
  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void ADS::ChangeInfoData<AudioStreamBasicDescription>::~ChangeInfoData(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6977D78;
  v1 = a1 + 3;
  v2 = (_QWORD *)a1[6];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1B5E50688);
}

uint64_t ADS::Stream::Stream(uint64_t a1, int a2, const AudioStreamRangedDescription *a3, _QWORD *a4, __int128 *a5, char a6, int a7, int a8, char a9)
{
  __int128 v10;
  __int128 v11;

  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 12) = 0x616F626A61737472;
  *(_DWORD *)(a1 + 20) = (_DWORD)a3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_1E6977C70;
  *(_BYTE *)(a1 + 49) = a6;
  *(_DWORD *)(a1 + 52) = a7;
  v10 = *a5;
  v11 = a5[1];
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a5 + 4);
  *(_OWORD *)(a1 + 72) = v11;
  *(_OWORD *)(a1 + 56) = v10;
  *(_DWORD *)(a1 + 96) = a8;
  std::set<CAStreamRangedDescription,CAStreamRangedDescription_ReverseSort,std::allocator<CAStreamRangedDescription>>::set[abi:ne180100](a1 + 104, a4, a3);
  *(_BYTE *)(a1 + 128) = a9;
  CADeprecated::CAMutex::CAMutex((CADeprecated::CAMutex *)(a1 + 136), "Stream State");
  return a1;
}

void sub_1B598FD28(_Unwind_Exception *a1)
{
  ADS::BaseObject *v1;

  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)v1 + 14));
  ADS::BaseObject::~BaseObject(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3ADS6Stream16UpdateSampleRateEjd_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, __int128 *);
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(result + 32);
  v4 = *(_OWORD *)"tmfsbolg";
  v5 = 1735159650;
  if (ADS::Simulator::sHost)
  {
    v2 = *(unsigned int *)(v1 + 8);
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __int128 *))ADS::Simulator::sHost;
    pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
    return v3(ADS::Simulator::sHost, v2, 2, &v4);
  }
  return result;
}

void sub_1B598FDFC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B598FDCCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Timebase_Set::stop(AMCP::Graph::Timebase_Set *this)
{
  unsigned int *v1;
  unsigned int *v2;
  uint64_t **i;
  NSObject *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  void *exception;
  __int128 v10;
  uint64_t v11;
  uint64_t (**v12)();
  __int128 v13;
  uint64_t v14;
  std::string v15;
  std::logic_error v16;
  std::logic_error v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  uint8_t buf[8];
  __int16 v25;
  char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  _BYTE v30[14];
  const char *v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v1 = (unsigned int *)*((_QWORD *)this + 5);
  v2 = (unsigned int *)*((_QWORD *)this + 6);
  if (v1 == v2)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = pthread_self();
      v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v8;
      v25 = 2080;
      v26 = "Timebase_Set.cpp";
      v27 = 1024;
      v28 = 104;
      v29 = 2080;
      *(_QWORD *)v30 = "not (not m_state.empty())";
      _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v23);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v15);
    std::logic_error::logic_error(&v16, &v15);
    v16.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v17, &v16);
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = -1;
    v17.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v18 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v17);
    *(_QWORD *)&v30[6] = "Start_Stop_Result AMCP::Graph::Timebase_Set::stop() const";
    v31 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Timebase_Set.cpp";
    v32 = 104;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v10);
    v13 = v10;
    v14 = v11;
    v10 = 0uLL;
    v11 = 0;
    v12 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v12);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  do
  {
    for (i = (uint64_t **)*((_QWORD *)this + 2); i; i = (uint64_t **)*i)
      (*(void (**)(uint64_t *, _QWORD))(*i[2] + 112))(i[2], *v1);
    ++v1;
  }
  while (v1 != v2);
  return 0;
}

void sub_1B5990080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 112) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 104);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 104) = 0;
  MEMORY[0x1B5E500E8](v29 - 128);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 129));
  _Unwind_Resume(a1);
}

std::string *AMCP::Graph::Timebase_Set::wait_for_time_to_start(AMCP::Log::Scope_Registry *a1, uint64_t a2)
{
  std::string *v3;
  std::string *v4;
  uint64_t **v5;
  int v6;
  std::string *p_p;
  std::string::size_type size;
  std::string *v9;
  __int128 v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::__shared_weak_count *v13;
  NSObject *v14;
  unint64_t *v15;
  unint64_t v16;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  std::string *v20;
  NSObject *v21;
  _opaque_pthread_t *v22;
  mach_port_t v23;
  void *exception;
  __int128 v25;
  uint64_t v26;
  std::string v27;
  uint64_t v28;
  std::string __p;
  std::logic_error v30;
  std::string v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  _BYTE buf[24];
  __int16 v38;
  _BYTE v39[14];
  const char *v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)a1 + 3))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v21 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v22 = pthread_self();
      v23 = pthread_mach_thread_np(v22);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v23;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Timebase_Set.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 126;
      v38 = 2080;
      *(_QWORD *)v39 = "not (not m_timebases.empty())";
      _os_log_error_impl(&dword_1B57BA000, v21, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to run an manifest with no timebases", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to run an manifest with no timebases", (uint64_t)&__p);
    std::logic_error::logic_error(&v30, &__p);
    v30.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v31, &v30);
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = -1;
    v31.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
    v31.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v31);
    *(_QWORD *)&v39[6] = "Start_Stop_Result AMCP::Graph::Timebase_Set::wait_for_time_to_start(const std::atomic_uint32_t &) const";
    v40 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Timebase_Set.cpp";
    v41 = 126;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v25);
    *(_OWORD *)&v27.__r_.__value_.__r.__words[1] = v25;
    v28 = v26;
    v25 = 0uLL;
    v26 = 0;
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v27);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v3 = (std::string *)(*(uint64_t (**)(_QWORD, AMCP::Log::Scope_Registry *, uint64_t))(**(_QWORD **)(*((_QWORD *)a1 + 2) + 16)
                                                                                              + 200))(*(_QWORD *)(*((_QWORD *)a1 + 2) + 16), a1, a2);
  v4 = v3;
  if ((_DWORD)v3 == 1)
  {
    memset(&v31, 0, sizeof(v31));
    v5 = (uint64_t **)*((_QWORD *)a1 + 2);
    if (v5)
    {
      v6 = 0;
      do
      {
        if (v6)
          std::string::basic_string[abi:ne180100]<0>(&v27, ", ");
        else
          memset(&v27, 0, sizeof(v27));
        (*(void (**)(std::string *__return_ptr))(*v5[2] + 24))(&__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v9 = std::string::append(&v27, (const std::string::value_type *)p_p, size);
        v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        *(_QWORD *)&buf[16] = *((_QWORD *)&v9->__r_.__value_.__l + 2);
        *(_OWORD *)buf = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (buf[23] >= 0)
          v11 = buf;
        else
          v11 = *(const std::string::value_type **)buf;
        if (buf[23] >= 0)
          v12 = buf[23];
        else
          v12 = *(_QWORD *)&buf[8];
        v3 = std::string::append(&v31, v11, v12);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v27.__r_.__value_.__l.__data_);
        v5 = (uint64_t **)*v5;
        --v6;
      }
      while (v5);
    }
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v13 = *(std::__shared_weak_count **)&buf[8];
    v14 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v15 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v18 = pthread_self();
      v19 = pthread_mach_thread_np(v18);
      v20 = &v31;
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v20 = (std::string *)v31.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v19;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Timebase_Set.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 139;
      v38 = 2080;
      *(_QWORD *)v39 = v20;
      _os_log_error_impl(&dword_1B57BA000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Failure to start hardware: %s", buf, 0x22u);
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_1B5990598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, void *a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33)
{
  if (a32 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *AMCP::Graph::Timebase_Set::for_each(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  _BYTE v15[24];
  _BYTE *v16;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::__value_func[abi:ne180100]((uint64_t)v15, a2);
  for (; a1; a1 = (_QWORD *)*a1)
  {
    v3 = (std::__shared_weak_count *)a1[3];
    v13 = a1[2];
    v14 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    if (!v16)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v16 + 48))(v16, &v13);
    v6 = v14;
    if (v14)
    {
      v7 = (unint64_t *)&v14->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  std::__function::__value_func<void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)v15);
  v9 = v18;
  if (v18 == v17)
  {
    v10 = 4;
    v9 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_17;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_17:
  result = v16;
  if (v16 == v15)
  {
    v12 = 4;
    result = v15;
  }
  else
  {
    if (!v16)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_1B5990834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void std::vector<AMCP::Utility::Dispatch_Queue::Event_Source>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  NSObject *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = *((_QWORD *)v6 - 2);
        v6 -= 16;
        v7 = v8;
        if (v8)
        {
          dispatch_release(v7);
          *((_QWORD *)v4 - 2) = 0;
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(AMCP::Utility::Dispatch_Queue *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  void **v4;

  dispatch_release(*((dispatch_object_t *)this + 39));
  std::mutex::~mutex((std::mutex *)((char *)this + 240));
  v4 = (void **)((char *)this + 216);
  std::vector<AMCP::Utility::Dispatch_Queue::Event_Source>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::mutex::~mutex((std::mutex *)((char *)this + 152));
  v4 = (void **)((char *)this + 128);
  std::vector<AMCP::Utility::Dispatch_Queue::Event_Source>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::mutex::~mutex((std::mutex *)this + 1);
  v4 = (void **)((char *)this + 40);
  std::vector<AMCP::Utility::Dispatch_Queue::Event_Source>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *((_QWORD *)this + 3);
  if (v2)
    dispatch_release(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  if (*(_QWORD *)this)
    dispatch_release(*(dispatch_object_t *)this);
}

void AMCP::Utility::Dispatch_Queue::create_serial_with_workloop(AMCP::Utility::Dispatch_Queue *a1, char *label)
{
  NSObject *inactive;
  NSObject *v5;
  NSObject *v6;

  inactive = dispatch_workloop_create_inactive(label);
  if (inactive)
  {
    dispatch_workloop_set_scheduler_priority();
    dispatch_activate(inactive);
  }
  v5 = dispatch_queue_create_with_target_V2(label, 0, inactive);
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue(a1, v5);
  if (v5)
    dispatch_release(v5);
  v6 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = inactive;
  if (v6)
    dispatch_release(v6);
}

void AMCP::Utility::Dispatch_Queue::create_concurrent_with_workloop(AMCP::Utility::Dispatch_Queue *a1, char *label)
{
  NSObject *inactive;
  NSObject *v5;
  NSObject *v6;

  inactive = dispatch_workloop_create_inactive(label);
  if (inactive)
  {
    dispatch_workloop_set_scheduler_priority();
    dispatch_activate(inactive);
  }
  v5 = dispatch_queue_create_with_target_V2(label, MEMORY[0x1E0C80D50], inactive);
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue(a1, v5);
  if (v5)
    dispatch_release(v5);
  v6 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = inactive;
  if (v6)
    dispatch_release(v6);
}

void AMCP::Utility::Dispatch_Queue::after(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  dispatch_time_t v15;
  NSObject *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD v19[7];
  std::__shared_weak_count *v20;

  v4 = atomic_load((unsigned __int8 *)(a1 + 32));
  if ((v4 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(a1 + 33));
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    v6 = std::__shared_weak_count::lock(v5);
    v7 = v6;
    if (v6)
    {
      v8 = *(_QWORD *)(a1 + 8);
      p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
      do
        v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v13 = (unint64_t *)(a1 + 304);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  v15 = dispatch_time(0, 12000);
  v16 = *(NSObject **)a1;
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 1174405120;
  v19[2] = ___ZNK4AMCP7Utility14Dispatch_Queue5afterEyU13block_pointerFvvE_block_invoke;
  v19[3] = &unk_1E6977D90;
  v19[5] = a1;
  v19[6] = v8;
  v20 = v7;
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19[4] = a2;
  dispatch_after(v15, v16, v19);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void ___ZNK4AMCP7Utility14Dispatch_Queue5afterEyU13block_pointerFvvE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unsigned __int8 v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;

  v2 = a1[5];
  v10 = 0;
  v3 = (std::__shared_weak_count *)a1[7];
  if (v3)
  {
    v10 = std::__shared_weak_count::lock(v3);
    if (v10)
    {
      v4 = a1[6];
      if (v4)
      {
        v5 = atomic_load((unsigned __int8 *)(v4 + 32));
        if ((v5 & 1) == 0)
          (*(void (**)(_QWORD))(a1[4] + 16))(a1[4]);
      }
    }
  }
  v6 = (unint64_t *)(v2 + 304);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v2 + 312));
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1B5990D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_48c55_ZTSNSt3__18weak_ptrIKN4AMCP7Utility14Dispatch_QueueEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_48c55_ZTSNSt3__18weak_ptrIKN4AMCP7Utility14Dispatch_QueueEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void AMCP::Utility::Dispatch_Queue::async_on_global(void *a1)
{
  NSObject *global_queue;
  NSObject *v3;

  global_queue = dispatch_get_global_queue(-2, 0);
  if (global_queue)
  {
    v3 = global_queue;
    dispatch_retain(global_queue);
    dispatch_async(v3, a1);
    dispatch_release(v3);
  }
  else
  {
    dispatch_async(0, a1);
  }
}

void AMCP::Utility::Dispatch_Queue::flush_all_work(AMCP::Utility::Dispatch_Queue *this)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  char v5;
  _QWORD block[5];

  if (*(_QWORD *)this)
  {
    atomic_store(0, (unsigned __int8 *)this + 33);
    atomic_store(1u, (unsigned __int8 *)this + 32);
    v2 = atomic_load((unint64_t *)this + 38);
    if (v2 >= 1)
    {
      do
      {
        dispatch_semaphore_wait(*((dispatch_semaphore_t *)this + 39), 0xFFFFFFFFFFFFFFFFLL);
        v3 = atomic_load((unint64_t *)this + 38);
      }
      while (v3 > 0);
    }
    v4 = *(NSObject **)this;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN10applesauce8dispatch2v19sync_implIZNK4AMCP7Utility14Dispatch_Queue14flush_all_workEvE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke;
    block[3] = &__block_descriptor_tmp_7_3819;
    block[4] = &v5;
    dispatch_sync(v4, block);
  }
}

void ___ZN4AMCP7Utility14Dispatch_Queue26install_mach_port_receiverEjU13block_pointerFvvEbb_block_invoke(uint64_t a1)
{
  mach_port_name_t v1;
  int v2;
  int v3;
  ipc_space_t *v4;
  kern_return_t v5;
  kern_return_t v6;
  kern_return_t v7;
  kern_return_t v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  kern_return_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 32);
  if (v1)
  {
    v2 = *(unsigned __int8 *)(a1 + 36);
    v3 = *(unsigned __int8 *)(a1 + 37);
    if (!(v2 | v3) && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = 136315394;
      v10 = "Dispatch_Queue.cpp";
      v11 = 1024;
      v12 = 140;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AMCP::Utility::Destroy_Port: not going to destroy anything this way", (uint8_t *)&v9, 0x12u);
    }
    v4 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
    if (v2)
    {
      v5 = mach_port_deallocate(*MEMORY[0x1E0C83DA0], v1);
      if (v5)
      {
        v6 = v5;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          v9 = 136315650;
          v10 = "Dispatch_Queue.cpp";
          v11 = 1024;
          v12 = 148;
          v13 = 1024;
          v14 = v6;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AMCP::Utility::Destroy_Port: deallocating the send right failed, Error: 0x%X", (uint8_t *)&v9, 0x18u);
        }
      }
    }
    if (v3)
    {
      v7 = mach_port_mod_refs(*v4, v1, 1u, -1);
      if (v7)
      {
        v8 = v7;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          v9 = 136315650;
          v10 = "Dispatch_Queue.cpp";
          v11 = 1024;
          v12 = 158;
          v13 = 1024;
          v14 = v8;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AMCP::Utility::Destroy_Port: deallocating the receive right failed, Error: 0x%X", (uint8_t *)&v9, 0x18u);
        }
      }
    }
  }
}

void AMCP::Utility::Dispatch_Queue::remove_mach_port_receiver(AMCP::Utility::Dispatch_Queue *this, int a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;

  v4 = (std::mutex *)((char *)this + 152);
  std::mutex::lock((std::mutex *)((char *)this + 152));
  v5 = *((_QWORD *)this + 16);
  v6 = *((_QWORD *)this + 17);
  if (v5 != v6)
  {
    while (*(_DWORD *)(v5 + 8) != a2)
    {
      v5 += 16;
      if (v5 == v6)
        goto LABEL_21;
    }
  }
  if (v5 != v6)
  {
    if (*(_QWORD *)v5)
    {
      dispatch_source_cancel(*(dispatch_source_t *)v5);
      v6 = *((_QWORD *)this + 17);
    }
    if (v5 + 16 != v6)
    {
      do
      {
        if (*(_QWORD *)v5)
          dispatch_release(*(dispatch_object_t *)v5);
        v7 = *(NSObject **)(v5 + 16);
        *(_QWORD *)v5 = v7;
        *(_DWORD *)(v5 + 8) = *(_DWORD *)(v5 + 24);
        if (v7)
          dispatch_retain(v7);
        v8 = v5 + 16;
        v9 = v5 + 32;
        v5 += 16;
      }
      while (v9 != v6);
      v6 = *((_QWORD *)this + 17);
      v5 = v8;
    }
    if (v6 != v5)
    {
      v10 = v6;
      do
      {
        v12 = *(NSObject **)(v10 - 16);
        v10 -= 16;
        v11 = v12;
        if (v12)
        {
          dispatch_release(v11);
          *(_QWORD *)(v6 - 16) = 0;
        }
        v6 = v10;
      }
      while (v10 != v5);
    }
    *((_QWORD *)this + 17) = v5;
  }
LABEL_21:
  std::mutex::unlock(v4);
}

uint64_t HALS_PDPlugIn::Activate(HALS_PDPlugIn *this, HALS_Object *a2)
{
  uint64_t result;
  int v4;
  _DWORD *exception;
  _BYTE v6[5];
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  HALS_Object::Activate(this, a2);
  result = (*((uint64_t (**)(char *))this + 46))((char *)this + 488);
  if ((_DWORD)result)
  {
    v6[0] = BYTE3(result);
    v6[1] = BYTE2(result);
    v6[2] = BYTE1(result);
    v4 = result;
    v6[3] = result;
    v6[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v8 = "HALS_PDPUCPlugIn.cpp";
      v9 = 1024;
      v10 = 111;
      v11 = 1024;
      v12 = v4;
      v13 = 2080;
      v14 = v6;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPUCPlugIn::Initialize: got an error from the plug-in, Error: %d (%s)", buf, 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v4;
  }
  return result;
}

void HALS_PDPlugIn::~HALS_PDPlugIn(HALS_PDPlugIn *this)
{
  HALS_PDPlugIn::~HALS_PDPlugIn(this);
  JUMPOUT(0x1B5E50688);
}

{
  HALB_Mutex *v2;
  AMCP::Utility::Dispatch_Queue *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = off_1E6977E10;
  v2 = (HALB_Mutex *)*((_QWORD *)this + 41);
  if (v2)
  {
    HALB_Mutex::~HALB_Mutex(v2);
    MEMORY[0x1B5E50688]();
  }
  v3 = (AMCP::Utility::Dispatch_Queue *)*((_QWORD *)this + 42);
  if (v3)
  {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v3);
    MEMORY[0x1B5E50688]();
  }
  v4 = (void *)*((_QWORD *)this + 74);
  if (v4)
  {
    *((_QWORD *)this + 75) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 71);
  if (v5)
  {
    *((_QWORD *)this + 72) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 68);
  if (v6)
  {
    *((_QWORD *)this + 69) = v6;
    operator delete(v6);
  }
  HALB_CFBundle::~HALB_CFBundle((HALS_PDPlugIn *)((char *)this + 344));
  *(_QWORD *)this = off_1E6985A90;
  CACFString::~CACFString((HALS_PDPlugIn *)((char *)this + 48));
  HALS_Object::~HALS_Object(this);
}

uint64_t HALS_PDPlugIn::_Deactivate(uint64_t (**this)(void))
{
  uint64_t result;
  _DWORD *exception;
  int v3;
  _BYTE v4[5];
  uint8_t buf[4];
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  __int16 v11;
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  result = this[47]();
  if ((_DWORD)result)
  {
    v4[0] = BYTE3(result);
    v4[1] = BYTE2(result);
    v4[2] = BYTE1(result);
    v3 = result;
    v4[3] = result;
    v4[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v6 = "HALS_PDPUCPlugIn.cpp";
      v7 = 1024;
      v8 = 117;
      v9 = 1024;
      v10 = v3;
      v11 = 2080;
      v12 = v4;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPUCPlugIn::Teardown: got an error from the plug-in, Error: %d (%s)", buf, 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v3;
  }
  return result;
}

uint64_t HALS_PDPlugIn::GetCommandGate(HALS_PDPlugIn *this)
{
  return *((_QWORD *)this + 41);
}

{
  return *((_QWORD *)this + 41);
}

uint64_t HALS_PDPlugIn::GetMIGDispatchQueue(HALS_PDPlugIn *this)
{
  return *((_QWORD *)this + 42);
}

{
  return *((_QWORD *)this + 42);
}

void HALS_PDPlugIn::_CopyDeviceList(uint64_t a1, void **a2)
{
  unsigned int *v2;
  unsigned int *i;
  HALS_ObjectMap *v5;
  HALS_Object *v6;
  HALS_ObjectMap *v7;
  unint64_t v8;
  HALS_ObjectMap **v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  HALS_ObjectMap **v15;
  char *v16;
  char *v17;
  HALS_ObjectMap *v18;

  v2 = *(unsigned int **)(a1 + 592);
  for (i = *(unsigned int **)(a1 + 600); v2 != i; ++v2)
  {
    v5 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v2);
    v7 = v5;
    if (v5)
    {
      HALS_ObjectMap::RetainObject(v5, v6);
      v9 = (HALS_ObjectMap **)a2[1];
      v8 = (unint64_t)a2[2];
      if ((unint64_t)v9 >= v8)
      {
        v11 = ((char *)v9 - (_BYTE *)*a2) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v12 = v8 - (_QWORD)*a2;
        v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1))
          v13 = v11 + 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v14);
        else
          v6 = 0;
        v15 = (HALS_ObjectMap **)(v14 + 8 * v11);
        *v15 = v7;
        v10 = v15 + 1;
        v17 = (char *)*a2;
        v16 = (char *)a2[1];
        if (v16 != *a2)
        {
          do
          {
            v18 = (HALS_ObjectMap *)*((_QWORD *)v16 - 1);
            v16 -= 8;
            *--v15 = v18;
          }
          while (v16 != v17);
          v16 = (char *)*a2;
        }
        *a2 = v15;
        a2[1] = v10;
        a2[2] = (void *)(v14 + 8 * (_QWORD)v6);
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v9 = v7;
        v10 = v9 + 1;
      }
      a2[1] = v10;
    }
    HALS_ObjectMap::ReleaseObject(v7, v6);
  }
}

void sub_1B5991534(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_PDPlugIn::CreateObject(HALS_PDPlugIn *this, HALS_Object *a2, HALS_ObjectMap *a3, HALS_Client *a4)
{
  HALS_PDPlugIn *v6;
  uint64_t v7;
  HALS_Object *v8;
  const __CFString *v9;
  uint64_t v10;
  HALB_Mutex *v11;
  HALS_Object *v12;
  HALS_Object *v14;
  _QWORD v15[5];
  int v16;

  if ((_DWORD)a3 == 1)
  {
    HALS_ObjectMap::RetainObject(this, a2);
    v6 = this;
  }
  else
  {
    v6 = (HALS_PDPlugIn *)HALS_ObjectMap::CopyObjectByObjectID(a3);
  }
  if ((int)a2 > 1701078389)
  {
    if ((_DWORD)a2 != 1701078390 && (_DWORD)a2 != 1919182198 && (_DWORD)a2 != 1701733488)
      goto LABEL_14;
LABEL_12:
    v7 = operator new();
    HALS_Device::HALS_Device((HALS_Device *)v7, a2, (uint64_t)v6, (HALS_Object *)CFSTR("temporary"), v9);
    *(_QWORD *)v7 = off_1E6976340;
    *(_QWORD *)(v7 + 1312) = 0;
    *(_QWORD *)(v7 + 1328) = 0;
    *(_QWORD *)(v7 + 1320) = 0;
    *(_QWORD *)(v7 + 1304) = v7 + 1312;
    *(_QWORD *)(v7 + 1336) = (char *)this + 344;
    AMCP::Utility::Dispatch_Queue::Dispatch_Queue(v7 + 1344, "PDPDevice Change Queue");
    goto LABEL_13;
  }
  if ((_DWORD)a2 == 1633773415 || (_DWORD)a2 == 1633969526)
    goto LABEL_12;
  if ((_DWORD)a2 == 1634956402)
  {
    v7 = operator new();
    HALS_Object::HALS_Object((HALS_Object *)v7, 1634956402, 1634956402, (uint64_t)v6, v8);
    *(_DWORD *)(v7 + 48) = *((_DWORD *)v6 + 4);
    *(_BYTE *)(v7 + 52) = 0;
    *(_DWORD *)(v7 + 56) = 0;
    *(_QWORD *)v7 = off_1E697D3B8;
    *(_QWORD *)(v7 + 64) = (char *)this + 344;
    *(_QWORD *)(v7 + 72) = &off_1E69749F0;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_OWORD *)(v7 + 96) = 0u;
    *(_OWORD *)(v7 + 112) = 0u;
    *(_QWORD *)(v7 + 128) = &off_1E69749F0;
    *(_OWORD *)(v7 + 136) = 0u;
    *(_OWORD *)(v7 + 152) = 0u;
    *(_OWORD *)(v7 + 168) = 0u;
    goto LABEL_13;
  }
LABEL_14:
  if (HALB_Info::IsSubClass(a2, 1633907820))
  {
    v7 = operator new();
    HALS_Control::HALS_Control((HALS_Object *)v7, (uint64_t)v6, (int)a2, 0, 0, 0, 0);
    *(_QWORD *)v7 = off_1E6995D50;
    *(_QWORD *)(v7 + 72) = (char *)this + 344;
  }
  else
  {
    v7 = operator new();
    HALS_Object::HALS_Object((HALS_Object *)v7, (int)a2, 0, (uint64_t)v6, v14);
    *(_QWORD *)v7 = off_1E696DD90;
    *(_QWORD *)(v7 + 48) = (char *)this + 344;
  }
LABEL_13:
  v10 = *(unsigned int *)(v7 + 16);
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 0x40000000;
  v15[2] = ___ZN13HALS_PDPlugIn12CreateObjectEjjP11HALS_Client_block_invoke;
  v15[3] = &__block_descriptor_tmp_3845;
  v15[4] = this;
  v16 = v10;
  v11 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPlugIn *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v11, (uint64_t)v15);
  HALS_ObjectMap::ReleaseObject(v6, v12);
  return v10;
}

void sub_1B599180C(_Unwind_Exception *a1)
{
  HALS_ObjectMap *v1;
  uint64_t v2;
  HALS_Object *v4;

  MEMORY[0x1B5E50688](v2, 0x10E1C4000EA2748);
  HALS_ObjectMap::ReleaseObject(v1, v4);
  _Unwind_Resume(a1);
}

void HALS_PDPlugIn::ObjectsPublishedAndDied(HALS_PDPlugIn *this, HALS_ObjectMap *a2, uint64_t a3, const unsigned int *a4, uint64_t a5, const unsigned int *a6, HALS_Client *a7)
{
  HALB_Mutex *v13;
  HALS_Object *v14;
  HALS_ObjectMap *v15;
  HALS_Object *v16;
  HALS_NotificationManager *v17;
  _QWORD v18[8];
  int v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  AudioObjectPropertyAddress v25;

  v21 = 0;
  v22 = &v21;
  v23 = 0x2000000000;
  v24 = 0;
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 0x40000000;
  v18[2] = ___ZN13HALS_PDPlugIn23ObjectsPublishedAndDiedEjjPKjjS1_P11HALS_Client_block_invoke;
  v18[3] = &unk_1E6977F68;
  v18[4] = &v21;
  v18[5] = this;
  v19 = a5;
  v20 = a3;
  v18[6] = a6;
  v18[7] = a4;
  v13 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPlugIn *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v13, (uint64_t)v18);
  if ((_DWORD)a2 == 1)
  {
    HALS_ObjectMap::RetainObject(this, v14);
    v15 = this;
  }
  else
  {
    v15 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(a2);
    if (!v15)
      goto LABEL_5;
  }
  (*(void (**)(HALS_ObjectMap *, uint64_t, const unsigned int *, uint64_t, const unsigned int *))(*(_QWORD *)v15 + 192))(v15, a3, a4, a5, a6);
LABEL_5:
  if (*((_BYTE *)v22 + 24))
  {
    v17 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
    *(_QWORD *)&v25.mSelector = 0x676C6F6264657623;
    v25.mElement = 0;
    HALS_Object::PropertiesChanged(this, v17, 0, 1, &v25);
  }
  HALS_ObjectMap::ReleaseObject(v15, v16);
  _Block_object_dispose(&v21, 8);
}

