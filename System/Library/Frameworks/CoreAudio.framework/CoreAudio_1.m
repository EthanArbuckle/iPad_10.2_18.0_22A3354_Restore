void sub_1B5831A18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned short>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B5831AA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, __int128 *);
  char *v12;
  uint64_t v13;
  AMCP::Thing *v14;
  uint64_t *v15;
  void *v16;
  char *v17;
  BOOL v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  char v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE *v35;
  char v36;
  char *v37;
  char *v38;
  uint64_t v39;
  _BYTE *v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  size_t v50;
  uint64_t (*v51)(int, int, int);
  __int128 v52;
  __int128 v53;
  uint64_t (*v54)();
  char *v55;
  unint64_t v56;
  uint64_t v57;

  switch((int)result)
  {
    case 0:
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
      {
        *(_QWORD *)(a2 + 8) = v7;
        operator delete(v7);
      }
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>((_QWORD *)a3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
      result = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
      return result;
    case 2:
      result = 0;
      v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      v9 = AMCP::Implementation::get_type_marker<std::vector<short>>();
      result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<short>>())
        return a2;
      else
        return 0;
    case 5:
      v10 = AMCP::Implementation::get_type_marker<std::vector<short>>();
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v52 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v52);
        v11 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v52;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v10)
        goto LABEL_30;
      v12 = *(char **)(a3 + 32);
      v55 = 0;
      if (v12)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, char **))v12)(3, a3, 0, &v55);
        v12 = v55;
      }
      if (v12 == (char *)v10)
      {
        if (*(_QWORD *)(a2 + 32))
        {
          *(_QWORD *)&v52 = AMCP::Implementation::get_type_marker<std::vector<short>>();
          v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v52);
        }
        else
        {
          v13 = 0;
        }
        *(_QWORD *)&v52 = AMCP::Implementation::get_type_marker<std::vector<short>>();
        v49 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v52);
        v50 = *(_QWORD *)(v13 + 8) - *(_QWORD *)v13;
        if (v50 == *(_QWORD *)(v49 + 8) - *(_QWORD *)v49 && !memcmp(*(const void **)v13, *(const void **)v49, v50))
          return 1;
      }
      else
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<short>>(&v52, a2);
        AMCP::Thing::convert_to<std::vector<short>>(&v55, a3);
        v16 = (void *)v52;
        v17 = v55;
        v18 = *((_QWORD *)&v52 + 1) - (_QWORD)v52 == v56 - (_QWORD)v55
           && memcmp((const void *)v52, v55, *((_QWORD *)&v52 + 1) - v52) == 0;
        if (v17)
          operator delete(v17);
        if (v16)
          operator delete(v16);
        if (v18)
          return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_125;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v52 = AMCP::Implementation::get_type_marker<std::vector<short>>();
        v15 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v52);
      }
      else
      {
        v15 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
        {
          if (v15)
          {
            v27 = (char *)*v15;
            v26 = (char *)v15[1];
            v28 = v26 - v27;
            if (v26 == v27)
            {
              v29 = 0;
              v30 = 0;
            }
            else
            {
              if (v28 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = operator new(v28 >> 1);
              v30 = v29;
              do
              {
                v31 = *v27;
                v27 += 2;
                *v30++ = v31;
              }
              while (v27 != v26);
            }
            v54 = 0;
            v52 = 0u;
            v53 = 0u;
            std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v52, v29, (uint64_t)v30, v30 - v29);
            v51 = AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
LABEL_97:
            v54 = (uint64_t (*)())v51;
            if (!v29)
              goto LABEL_100;
            v48 = v29;
            goto LABEL_99;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
        {
          if (v15)
          {
            v33 = (char *)*v15;
            v32 = (char *)v15[1];
            v34 = v32 - v33;
            if (v32 == v33)
            {
              v29 = 0;
              v35 = 0;
            }
            else
            {
              if (v34 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = operator new(v34 >> 1);
              v35 = v29;
              do
              {
                v36 = *v33;
                v33 += 2;
                *v35++ = v36;
              }
              while (v33 != v32);
            }
            v54 = 0;
            v52 = 0u;
            v53 = 0u;
            std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v52, v29, (uint64_t)v35, v35 - v29);
            v51 = AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
            goto LABEL_97;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
        {
          if (v15)
          {
            v38 = (char *)*v15;
            v37 = (char *)v15[1];
            v39 = v37 - v38;
            if (v37 == v38)
            {
              v29 = 0;
              v40 = 0;
            }
            else
            {
              if (v39 < 0)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v29 = operator new(v39 >> 1);
              v40 = v29;
              do
              {
                v41 = *v38;
                v38 += 2;
                *v40++ = v41;
              }
              while (v38 != v37);
            }
            v54 = 0;
            v52 = 0u;
            v53 = 0u;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v52, v29, (uint64_t)v40, v40 - v29);
            v51 = AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
            goto LABEL_97;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<unsigned short>>((uint64_t)&v52, v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<int>>((uint64_t)&v52, (__int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<unsigned int>>((uint64_t)&v52, (__int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<long>>((uint64_t)&v52, (__int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<unsigned long>>((uint64_t)&v52, (__int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<long long>>((uint64_t)&v52, (__int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<unsigned long long>>((uint64_t)&v52, (__int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<float>>((uint64_t)&v52, (__int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<double>>((uint64_t)&v52, (__int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<long double>>((uint64_t)&v52, (__int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,applesauce::CF::ArrayRef>(&v52, (uint64_t)v15);
            }
            else
            {
LABEL_125:
              v54 = 0;
              v52 = 0u;
              v53 = 0u;
            }
            goto LABEL_100;
          }
          if (v15)
          {
            v54 = 0;
            v52 = 0u;
            v53 = 0u;
            std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v52, (const void *)*v15, v15[1], (v15[1] - *v15) >> 1);
            v54 = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
            goto LABEL_100;
          }
        }
LABEL_116:
        __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
      }
      if (!v15)
        goto LABEL_116;
      v20 = (char *)*v15;
      v19 = (char *)v15[1];
      v56 = 0;
      v57 = 0;
      v55 = 0;
      v21 = v19 - v20;
      if (v19 == v20)
        goto LABEL_80;
      v22 = v21 >> 1;
      std::vector<BOOL>::__vallocate[abi:ne180100](&v55, v21 >> 1);
      v23 = v56;
      v24 = v56 + v22;
      v56 += v22;
      if (v23)
      {
        v25 = v24 - 1;
        if (((v24 - 1) ^ (v23 - 1)) < 0x40)
          goto LABEL_72;
      }
      else
      {
        v25 = v24 - 1;
      }
      v42 = v25 >> 6;
      if (v24 >= 0x41)
        v43 = v42;
      else
        v43 = 0;
      *(_QWORD *)&v55[8 * v43] = 0;
LABEL_72:
      v44 = v23 & 0x3F;
      v45 = &v55[8 * (v23 >> 6)];
      do
      {
        v46 = 1 << v44;
        if (*(_WORD *)v20)
          v47 = *(_QWORD *)v45 | v46;
        else
          v47 = *(_QWORD *)v45 & ~v46;
        *(_QWORD *)v45 = v47;
        v20 += 2;
        v45 += 8 * (v44 == 63);
        if (v44 == 63)
          v44 = 0;
        else
          ++v44;
      }
      while (v20 != v19);
LABEL_80:
      v54 = 0;
      v52 = 0u;
      v53 = 0u;
      std::vector<BOOL>::vector(&v52, (uint64_t)&v55);
      v54 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
      v48 = v55;
      if (v55)
LABEL_99:
        operator delete(v48);
LABEL_100:
      AMCP::swap((AMCP::Thing *)&v52, (AMCP::Thing *)a3, v14);
      if (v54)
        ((void (*)(_QWORD, __int128 *, _QWORD, _QWORD))v54)(0, &v52, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B583224C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  void *v14;

  if (v14)
    operator delete(v14);
  __clang_call_terminate(a1);
}

_QWORD *AMCP::Thing::convert_to<std::vector<short>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<std::vector<short>>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(a1, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 1);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<std::vector<short>>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(a1, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 1);
  if (v18)
    return (_QWORD *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B5832474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<unsigned short>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
    v9 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5 >> 1);
    v7 = v6;
    v8 = 0;
    do
    {
      *(_WORD *)&v6[v8] = *(_WORD *)(v3 + v8);
      v8 += 2;
    }
    while (v3 + v8 != v4);
    v9 = (uint64_t)&v6[v8];
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((_QWORD *)a1, v7, v9, (v9 - (uint64_t)v7) >> 1);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v7)
    operator delete(v7);
}

void sub_1B583256C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<int>>(uint64_t a1, __int16 **a2)
{
  __int16 *v3;
  __int16 *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFFLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 1);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_DWORD *)v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5832658(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<unsigned int>>(uint64_t a1, __int16 **a2)
{
  __int16 *v3;
  __int16 *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFFLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 1);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_DWORD *)v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5832744(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<long>>(uint64_t a1, __int16 **a2)
{
  __int16 *v3;
  __int16 *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x3FFFFFFFFFFFFFFFLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 1);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5832830(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<unsigned long>>(uint64_t a1, __int16 **a2)
{
  __int16 *v3;
  __int16 *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x3FFFFFFFFFFFFFFFLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 1);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B583291C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<long long>>(uint64_t a1, __int16 **a2)
{
  __int16 *v3;
  __int16 *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x3FFFFFFFFFFFFFFFLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 1);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5832A08(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<unsigned long long>>(uint64_t a1, __int16 **a2)
{
  __int16 *v3;
  __int16 *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x3FFFFFFFFFFFFFFFLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 1);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5832AF4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<float>>(uint64_t a1, __int16 **a2)
{
  __int16 *v3;
  __int16 *v4;
  uint64_t v5;
  float *v6;
  float *v7;
  int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFFLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 1);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *v7++ = (float)v8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)a1, v6, (uint64_t)v7, v7 - v6);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5832BE4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<double>>(uint64_t a1, __int16 **a2)
{
  __int16 *v3;
  __int16 *v4;
  uint64_t v5;
  double *v6;
  double *v7;
  int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x3FFFFFFFFFFFFFFFLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 1);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *v7++ = (double)v8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)a1, v6, (uint64_t)v7, v7 - v6);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5832CD4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<long double>>(uint64_t a1, __int16 **a2)
{
  __int16 *v3;
  __int16 *v4;
  uint64_t v5;
  double *v6;
  double *v7;
  int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x3FFFFFFFFFFFFFFFLL)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 1);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *v7++ = (double)v8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((_QWORD *)a1, v6, (uint64_t)v7, v7 - v6);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5832DC4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,applesauce::CF::ArrayRef>(_QWORD *a1, uint64_t a2)
{
  __CFArray *Mutable;
  _WORD *v5;
  _WORD *v6;
  CFNumberRef v7;
  std::runtime_error *exception;
  _QWORD v9[2];

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  v9[1] = Mutable;
  v5 = *(_WORD **)a2;
  v6 = *(_WORD **)(a2 + 8);
  while (v5 != v6)
  {
    LOWORD(v9[0]) = *v5;
    v7 = CFNumberCreate(0, kCFNumberShortType, v9);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)v9, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = v9[0];
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1B5832F04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  _Unwind_Resume(a1);
}

char *std::vector<unsigned short>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1)
{
  if (a1 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a1);
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

_QWORD *AMCP::Thing::convert_to<std::vector<unsigned char>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<std::vector<unsigned char>>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(const void **)v6, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 8) - *(_QWORD *)v6);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<std::vector<unsigned char>>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(const void **)v8, *(_QWORD *)(v8 + 8), *(_QWORD *)(v8 + 8) - *(_QWORD *)v8);
  if (v18)
    return (_QWORD *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B583316C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<unsigned short>>(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  __int16 v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (unsigned __int8 *)*a2;
  v4 = (unsigned __int8 *)a2[1];
  v5 = (uint64_t)&v4[-*a2];
  if (v4 == (unsigned __int8 *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_WORD *)v7 = v8;
      v7 += 2;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 1);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5833254(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<int>>(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (unsigned __int8 *)*a2;
  v4 = (unsigned __int8 *)a2[1];
  v5 = (unint64_t)&v4[-*a2];
  if (v4 == (unsigned __int8 *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 >> 62)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_DWORD *)v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5833338(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<unsigned int>>(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (unsigned __int8 *)*a2;
  v4 = (unsigned __int8 *)a2[1];
  v5 = (unint64_t)&v4[-*a2];
  if (v4 == (unsigned __int8 *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 >> 62)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_DWORD *)v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B583341C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<long>>(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  unsigned int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (unsigned __int8 *)*a2;
  v4 = (unsigned __int8 *)a2[1];
  v5 = (unint64_t)&v4[-*a2];
  if (v4 == (unsigned __int8 *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5833500(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<unsigned long>>(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  unsigned int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (unsigned __int8 *)*a2;
  v4 = (unsigned __int8 *)a2[1];
  v5 = (unint64_t)&v4[-*a2];
  if (v4 == (unsigned __int8 *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B58335E4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<long long>>(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  unsigned int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (unsigned __int8 *)*a2;
  v4 = (unsigned __int8 *)a2[1];
  v5 = (unint64_t)&v4[-*a2];
  if (v4 == (unsigned __int8 *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B58336C8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<unsigned long long>>(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  unsigned int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (unsigned __int8 *)*a2;
  v4 = (unsigned __int8 *)a2[1];
  v5 = (unint64_t)&v4[-*a2];
  if (v4 == (unsigned __int8 *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B58337AC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<float>>(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unint64_t v5;
  float *v6;
  float *v7;
  unsigned int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (unsigned __int8 *)*a2;
  v4 = (unsigned __int8 *)a2[1];
  v5 = (unint64_t)&v4[-*a2];
  if (v4 == (unsigned __int8 *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 >> 62)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *v7++ = (float)v8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)a1, v6, (uint64_t)v7, v7 - v6);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5833894(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<double>>(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unint64_t v5;
  double *v6;
  double *v7;
  unsigned int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (unsigned __int8 *)*a2;
  v4 = (unsigned __int8 *)a2[1];
  v5 = (unint64_t)&v4[-*a2];
  if (v4 == (unsigned __int8 *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *v7++ = (double)v8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)a1, v6, (uint64_t)v7, v7 - v6);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B583397C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<long double>>(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unint64_t v5;
  double *v6;
  double *v7;
  unsigned int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (unsigned __int8 *)*a2;
  v4 = (unsigned __int8 *)a2[1];
  v5 = (unint64_t)&v4[-*a2];
  if (v4 == (unsigned __int8 *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *v7++ = (double)v8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((_QWORD *)a1, v6, (uint64_t)v7, v7 - v6);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5833A64(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,applesauce::CF::ArrayRef>(_QWORD *a1, uint64_t a2)
{
  __CFArray *Mutable;
  _BYTE *v5;
  _BYTE *v6;
  CFNumberRef v7;
  std::runtime_error *exception;
  _QWORD v9[2];

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  v9[1] = Mutable;
  v5 = *(_BYTE **)a2;
  v6 = *(_BYTE **)(a2 + 8);
  while (v5 != v6)
  {
    LOBYTE(v9[0]) = *v5;
    v7 = CFNumberCreate(0, kCFNumberCharType, v9);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)v9, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = v9[0];
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1B5833BA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  _Unwind_Resume(a1);
}

_QWORD *AMCP::Thing::convert_to<std::vector<signed char>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<std::vector<signed char>>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(a1, *(const void **)v6, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 8) - *(_QWORD *)v6);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<std::vector<signed char>>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(a1, *(const void **)v8, *(_QWORD *)(v8 + 8), *(_QWORD *)(v8 + 8) - *(_QWORD *)v8);
  if (v18)
    return (_QWORD *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B5833D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<unsigned short>>(uint64_t a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  __int16 v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (char *)*a2;
  v4 = (char *)a2[1];
  v5 = (uint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_WORD *)v7 = v8;
      v7 += 2;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 1);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5833E50(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<int>>(uint64_t a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (char *)*a2;
  v4 = (char *)a2[1];
  v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 >> 62)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_DWORD *)v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5833F34(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<unsigned int>>(uint64_t a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (char *)*a2;
  v4 = (char *)a2[1];
  v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 >> 62)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_DWORD *)v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5834018(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<long>>(uint64_t a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (char *)*a2;
  v4 = (char *)a2[1];
  v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B58340FC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<unsigned long>>(uint64_t a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (char *)*a2;
  v4 = (char *)a2[1];
  v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B58341E0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<long long>>(uint64_t a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (char *)*a2;
  v4 = (char *)a2[1];
  v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B58342C4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<unsigned long long>>(uint64_t a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (char *)*a2;
  v4 = (char *)a2[1];
  v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B58343A8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<float>>(uint64_t a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  float *v6;
  float *v7;
  int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (char *)*a2;
  v4 = (char *)a2[1];
  v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 >> 62)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *v7++ = (float)v8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)a1, v6, (uint64_t)v7, v7 - v6);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5834490(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<double>>(uint64_t a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  double *v6;
  double *v7;
  int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (char *)*a2;
  v4 = (char *)a2[1];
  v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *v7++ = (double)v8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)a1, v6, (uint64_t)v7, v7 - v6);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5834578(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<long double>>(uint64_t a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  double *v6;
  double *v7;
  int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (char *)*a2;
  v4 = (char *)a2[1];
  v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *v7++ = (double)v8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((_QWORD *)a1, v6, (uint64_t)v7, v7 - v6);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5834660(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,applesauce::CF::ArrayRef>(_QWORD *a1, uint64_t a2)
{
  __CFArray *Mutable;
  _BYTE *v5;
  _BYTE *v6;
  CFNumberRef v7;
  std::runtime_error *exception;
  _QWORD v9[2];

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  v9[1] = Mutable;
  v5 = *(_BYTE **)a2;
  v6 = *(_BYTE **)(a2 + 8);
  while (v5 != v6)
  {
    LOBYTE(v9[0]) = *v5;
    v7 = CFNumberCreate(0, kCFNumberCharType, v9);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)v9, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = v9[0];
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1B58347A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  _Unwind_Resume(a1);
}

_QWORD *AMCP::Thing::convert_to<std::vector<char>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<std::vector<char>>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a1, *(const void **)v6, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 8) - *(_QWORD *)v6);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<std::vector<char>>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a1, *(const void **)v8, *(_QWORD *)(v8 + 8), *(_QWORD *)(v8 + 8) - *(_QWORD *)v8);
  if (v18)
    return (_QWORD *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B5834964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<unsigned short>>(uint64_t a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  __int16 v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (char *)*a2;
  v4 = (char *)a2[1];
  v5 = (uint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_WORD *)v7 = v8;
      v7 += 2;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 1);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5834A4C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<int>>(uint64_t a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (char *)*a2;
  v4 = (char *)a2[1];
  v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 >> 62)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_DWORD *)v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5834B30(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<unsigned int>>(uint64_t a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (char *)*a2;
  v4 = (char *)a2[1];
  v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 >> 62)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_DWORD *)v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5834C14(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<long>>(uint64_t a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (char *)*a2;
  v4 = (char *)a2[1];
  v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5834CF8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<unsigned long>>(uint64_t a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (char *)*a2;
  v4 = (char *)a2[1];
  v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5834DDC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<long long>>(uint64_t a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (char *)*a2;
  v4 = (char *)a2[1];
  v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5834EC0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<unsigned long long>>(uint64_t a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (char *)*a2;
  v4 = (char *)a2[1];
  v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *(_QWORD *)v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5834FA4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<float>>(uint64_t a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  float *v6;
  float *v7;
  int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (char *)*a2;
  v4 = (char *)a2[1];
  v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 >> 62)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *v7++ = (float)v8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)a1, v6, (uint64_t)v7, v7 - v6);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B583508C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<double>>(uint64_t a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  double *v6;
  double *v7;
  int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (char *)*a2;
  v4 = (char *)a2[1];
  v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *v7++ = (double)v8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)a1, v6, (uint64_t)v7, v7 - v6);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5835174(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<long double>>(uint64_t a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  double *v6;
  double *v7;
  int v8;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = (char *)*a2;
  v4 = (char *)a2[1];
  v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    v7 = v6;
    do
    {
      v8 = *v3++;
      *v7++ = (double)v8;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((_QWORD *)a1, v6, (uint64_t)v7, v7 - v6);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B583525C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,applesauce::CF::ArrayRef>(_QWORD *a1, uint64_t a2)
{
  __CFArray *Mutable;
  _BYTE *v5;
  _BYTE *v6;
  CFNumberRef v7;
  std::runtime_error *exception;
  _QWORD v9[2];

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  v9[1] = Mutable;
  v5 = *(_BYTE **)a2;
  v6 = *(_BYTE **)(a2 + 8);
  while (v5 != v6)
  {
    LOBYTE(v9[0]) = *v5;
    v7 = CFNumberCreate(0, kCFNumberCharType, v9);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)v9, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = v9[0];
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1B583539C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  _Unwind_Resume(a1);
}

_QWORD *AMCP::Thing::convert_to<std::vector<BOOL>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<std::vector<BOOL>>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
      return std::vector<BOOL>::vector(a1, v6);
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<std::vector<BOOL>>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  result = std::vector<BOOL>::vector(a1, v8);
  if (v18)
    return (_QWORD *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B5835548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__equal_aligned[abi:ne180100]<std::vector<BOOL>,true,true>(_QWORD *a1, unsigned int a2, uint64_t a3, unsigned int a4, _QWORD *a5)
{
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;

  v5 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
  if (v5 >= 1)
  {
    if (a2)
    {
      if (v5 >= (unint64_t)(64 - a2))
        v6 = 64 - a2;
      else
        v6 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
      if (((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v6)) & (-1 << a2) & (*a1 ^ *a5)) != 0)
        return 0;
      v5 -= v6;
      ++a5;
      ++a1;
    }
    if (v5 >= 64)
    {
      while (*a5 == *a1)
      {
        v7 = v5 - 64;
        ++a1;
        ++a5;
        v8 = v5 <= 127;
        v5 -= 64;
        if (v8)
          goto LABEL_14;
      }
      return 0;
    }
    v7 = v5;
LABEL_14:
    if (v7 >= 1 && (*a1 ^ *a5) << -(char)v7)
      return 0;
  }
  return 1;
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<unsigned short>>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  char *v7;
  int v8;
  _QWORD *v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    if ((v3 & 0x8000000000000000) != 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v4 = *(_QWORD **)a2;
    v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(*(_QWORD *)(a2 + 8));
    v6 = v5;
    if (v3 > 0x3F || (v7 = (char *)v5, (v3 & 0x3F) != 0))
    {
      v8 = 0;
      v9 = &v4[v3 >> 6];
      v7 = (char *)v5;
      do
      {
        *(_WORD *)v7 = (*v4 >> v8) & 1;
        v7 += 2;
        v4 += v8 == 63;
        if (v8 == 63)
          v8 = 0;
        else
          ++v8;
      }
      while (v4 != v9 || v8 != (v3 & 0x3F));
    }
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - (_BYTE *)v6) >> 1);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B583573C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<int>>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  char *v7;
  int v8;
  _QWORD *v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    if (v3 >> 62)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v4 = *(_QWORD **)a2;
    v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(*(_QWORD *)(a2 + 8));
    v6 = v5;
    if (v3 > 0x3F || (v7 = (char *)v5, (v3 & 0x3F) != 0))
    {
      v8 = 0;
      v9 = &v4[v3 >> 6];
      v7 = (char *)v5;
      do
      {
        *(_DWORD *)v7 = (*v4 >> v8) & 1;
        v7 += 4;
        v4 += v8 == 63;
        if (v8 == 63)
          v8 = 0;
        else
          ++v8;
      }
      while (v4 != v9 || v8 != (v3 & 0x3F));
    }
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - (_BYTE *)v6) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5835860(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<unsigned int>>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  char *v7;
  int v8;
  _QWORD *v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    if (v3 >> 62)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v4 = *(_QWORD **)a2;
    v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(*(_QWORD *)(a2 + 8));
    v6 = v5;
    if (v3 > 0x3F || (v7 = (char *)v5, (v3 & 0x3F) != 0))
    {
      v8 = 0;
      v9 = &v4[v3 >> 6];
      v7 = (char *)v5;
      do
      {
        *(_DWORD *)v7 = (*v4 >> v8) & 1;
        v7 += 4;
        v4 += v8 == 63;
        if (v8 == 63)
          v8 = 0;
        else
          ++v8;
      }
      while (v4 != v9 || v8 != (v3 & 0x3F));
    }
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)a1, v6, (uint64_t)v7, (v7 - (_BYTE *)v6) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5835984(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<long>>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  uint64_t *v7;
  int v8;
  _QWORD *v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    if (v3 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v4 = *(_QWORD **)a2;
    v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(*(_QWORD *)(a2 + 8));
    v6 = v5;
    if (v3 > 0x3F || (v7 = (uint64_t *)v5, (v3 & 0x3F) != 0))
    {
      v8 = 0;
      v9 = &v4[v3 >> 6];
      v7 = (uint64_t *)v5;
      do
      {
        *v7++ = (*v4 >> v8) & 1;
        v4 += v8 == 63;
        if (v8 == 63)
          v8 = 0;
        else
          ++v8;
      }
      while (v4 != v9 || v8 != (v3 & 0x3F));
    }
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((_QWORD *)a1, v6, (uint64_t)v7, ((char *)v7 - (_BYTE *)v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5835AA8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<unsigned long>>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  uint64_t *v7;
  int v8;
  _QWORD *v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    if (v3 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v4 = *(_QWORD **)a2;
    v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(*(_QWORD *)(a2 + 8));
    v6 = v5;
    if (v3 > 0x3F || (v7 = (uint64_t *)v5, (v3 & 0x3F) != 0))
    {
      v8 = 0;
      v9 = &v4[v3 >> 6];
      v7 = (uint64_t *)v5;
      do
      {
        *v7++ = (*v4 >> v8) & 1;
        v4 += v8 == 63;
        if (v8 == 63)
          v8 = 0;
        else
          ++v8;
      }
      while (v4 != v9 || v8 != (v3 & 0x3F));
    }
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)a1, v6, (uint64_t)v7, ((char *)v7 - (_BYTE *)v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5835BCC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<long long>>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  uint64_t *v7;
  int v8;
  _QWORD *v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    if (v3 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v4 = *(_QWORD **)a2;
    v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(*(_QWORD *)(a2 + 8));
    v6 = v5;
    if (v3 > 0x3F || (v7 = (uint64_t *)v5, (v3 & 0x3F) != 0))
    {
      v8 = 0;
      v9 = &v4[v3 >> 6];
      v7 = (uint64_t *)v5;
      do
      {
        *v7++ = (*v4 >> v8) & 1;
        v4 += v8 == 63;
        if (v8 == 63)
          v8 = 0;
        else
          ++v8;
      }
      while (v4 != v9 || v8 != (v3 & 0x3F));
    }
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)a1, v6, (uint64_t)v7, ((char *)v7 - (_BYTE *)v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5835CF0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<unsigned long long>>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  uint64_t *v7;
  int v8;
  _QWORD *v9;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    if (v3 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v4 = *(_QWORD **)a2;
    v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(*(_QWORD *)(a2 + 8));
    v6 = v5;
    if (v3 > 0x3F || (v7 = (uint64_t *)v5, (v3 & 0x3F) != 0))
    {
      v8 = 0;
      v9 = &v4[v3 >> 6];
      v7 = (uint64_t *)v5;
      do
      {
        *v7++ = (*v4 >> v8) & 1;
        v4 += v8 == 63;
        if (v8 == 63)
          v8 = 0;
        else
          ++v8;
      }
      while (v4 != v9 || v8 != (v3 & 0x3F));
    }
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((_QWORD *)a1, v6, (uint64_t)v7, ((char *)v7 - (_BYTE *)v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5835E14(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<float>>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  float *v7;
  int v8;
  _QWORD *v9;
  float v10;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    if (v3 >> 62)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v4 = *(_QWORD **)a2;
    v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(*(_QWORD *)(a2 + 8));
    v6 = v5;
    if (v3 > 0x3F || (v7 = (float *)v5, (v3 & 0x3F) != 0))
    {
      v8 = 0;
      v9 = &v4[v3 >> 6];
      v7 = (float *)v5;
      do
      {
        if (((*v4 >> v8) & 1) != 0)
          v10 = 1.0;
        else
          v10 = 0.0;
        *v7++ = v10;
        v4 += v8 == 63;
        if (v8 == 63)
          v8 = 0;
        else
          ++v8;
      }
      while (v4 != v9 || v8 != (v3 & 0x3F));
    }
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)a1, v6, (uint64_t)v7, ((char *)v7 - (_BYTE *)v6) >> 2);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5835F44(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<double>>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  double *v7;
  int v8;
  _QWORD *v9;
  double v10;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    if (v3 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v4 = *(_QWORD **)a2;
    v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(*(_QWORD *)(a2 + 8));
    v6 = v5;
    if (v3 > 0x3F || (v7 = (double *)v5, (v3 & 0x3F) != 0))
    {
      v8 = 0;
      v9 = &v4[v3 >> 6];
      v7 = (double *)v5;
      do
      {
        if (((*v4 >> v8) & 1) != 0)
          v10 = 1.0;
        else
          v10 = 0.0;
        *v7++ = v10;
        v4 += v8 == 63;
        if (v8 == 63)
          v8 = 0;
        else
          ++v8;
      }
      while (v4 != v9 || v8 != (v3 & 0x3F));
    }
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)a1, v6, (uint64_t)v7, ((char *)v7 - (_BYTE *)v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B5836074(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<long double>>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  double *v7;
  int v8;
  _QWORD *v9;
  double v10;

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    if (v3 >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v4 = *(_QWORD **)a2;
    v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(*(_QWORD *)(a2 + 8));
    v6 = v5;
    if (v3 > 0x3F || (v7 = (double *)v5, (v3 & 0x3F) != 0))
    {
      v8 = 0;
      v9 = &v4[v3 >> 6];
      v7 = (double *)v5;
      do
      {
        if (((*v4 >> v8) & 1) != 0)
          v10 = 1.0;
        else
          v10 = 0.0;
        *v7++ = v10;
        v4 += v8 == 63;
        if (v8 == 63)
          v8 = 0;
        else
          ++v8;
      }
      while (v4 != v9 || v8 != (v3 & 0x3F));
    }
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((_QWORD *)a1, v6, (uint64_t)v7, ((char *)v7 - (_BYTE *)v6) >> 3);
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v6)
    operator delete(v6);
}

void sub_1B58361A4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,applesauce::CF::ArrayRef>(_QWORD *a1, uint64_t a2)
{
  __CFArray *Mutable;
  unint64_t v5;
  int v6;
  int v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  CFNumberRef v12;
  std::runtime_error *exception;
  _QWORD v14[2];

  if (!a2)
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  v14[1] = Mutable;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = v5 & 0x3F;
  if (v5 > 0x3F || v6 != 0)
  {
    v8 = 0;
    v9 = 0;
    v10 = *(_QWORD **)a2;
    v11 = *(_QWORD *)a2 + 8 * (v5 >> 6);
    do
    {
      LOBYTE(v14[0]) = (*v10 >> v9) & 1;
      v12 = CFNumberCreate(0, kCFNumberCharType, v14);
      if (!v12)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v12);
      CFRelease(v12);
      v10 += v8 == 63;
      if (v8 == 63)
        v9 = 0;
      else
        ++v9;
      v8 = v9;
    }
    while (v10 != (_QWORD *)v11 || v6 != v9);
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)v14, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = v14[0];
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1B5836330(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  _Unwind_Resume(a1);
}

unint64_t applesauce::CF::convert_to<unsigned long long,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;
  int Value;
  CFTypeID v4;
  unint64_t result;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned __int8 v12;
  uint64_t v14;
  int v15;
  unsigned __int8 v16;
  uint64_t v17;
  unint64_t v18;
  std::runtime_error *exception;
  int v20;
  unint64_t v21;
  double valuePtr;

  TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_12;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        v6 = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_24;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        v7 = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_26;
      case kCFNumberSInt64Type:
        valuePtr = 0.0;
        v8 = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_39;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr) = 0;
        v9 = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_35;
      case kCFNumberFloat64Type:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_41;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
LABEL_12:
        v11 = Value;
        if (Value)
          v12 = LOBYTE(valuePtr);
        else
          v12 = 0;
        if (SLOBYTE(valuePtr) >= 0 || Value == 0)
          v14 = 0;
        else
          v14 = -256;
        if (!v11)
          goto LABEL_31;
        return v14 & 0xFFFFFFFFFFFFFF00 | v12;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        v6 = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
LABEL_24:
        v15 = v6;
        v16 = LOBYTE(valuePtr);
        v17 = SLOWORD(valuePtr);
        goto LABEL_27;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        v7 = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
LABEL_26:
        v15 = v7;
        v16 = LOBYTE(valuePtr);
        v17 = SLODWORD(valuePtr);
LABEL_27:
        v18 = v17 & 0xFFFFFFFFFFFFFF00 | v16;
        if (v15)
          result = v18;
        else
          result = 0;
        if (!v15)
          goto LABEL_31;
        return result;
      case kCFNumberLongType:
        valuePtr = 0.0;
        v8 = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_39;
      case kCFNumberLongLongType:
        valuePtr = 0.0;
        v8 = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_39;
      case kCFNumberFloatType:
        LODWORD(valuePtr) = 0;
        v9 = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
LABEL_35:
        v20 = v9;
        v21 = (unint64_t)*(float *)&valuePtr;
        goto LABEL_42;
      case kCFNumberDoubleType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
        goto LABEL_41;
      case kCFNumberCFIndexType:
        valuePtr = 0.0;
        v8 = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_39;
      case kCFNumberNSIntegerType:
        valuePtr = 0.0;
        v8 = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_39:
        v20 = v8;
        v21 = *(_QWORD *)&valuePtr;
        goto LABEL_42;
      case kCFNumberCGFloatType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
LABEL_41:
        v20 = v10;
        v21 = (unint64_t)valuePtr;
LABEL_42:
        if (v20)
          result = v21;
        else
          result = 0;
        if (v20)
          return result;
        goto LABEL_31;
      default:
        goto LABEL_31;
    }
  }
  v4 = CFBooleanGetTypeID();
  if (v4 != CFGetTypeID(a1))
  {
LABEL_31:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return CFBooleanGetValue(a1);
}

void sub_1B5836608(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t applesauce::CF::convert_to<long long,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;
  int Value;
  CFTypeID v4;
  unint64_t result;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned __int8 v12;
  uint64_t v14;
  int v15;
  unsigned __int8 v16;
  uint64_t v17;
  unint64_t v18;
  std::runtime_error *exception;
  int v20;
  uint64_t v21;
  double valuePtr;

  TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_12;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        v6 = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_24;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        v7 = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_26;
      case kCFNumberSInt64Type:
        valuePtr = 0.0;
        v8 = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_39;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr) = 0;
        v9 = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_35;
      case kCFNumberFloat64Type:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_41;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
LABEL_12:
        v11 = Value;
        if (Value)
          v12 = LOBYTE(valuePtr);
        else
          v12 = 0;
        if (SLOBYTE(valuePtr) >= 0 || Value == 0)
          v14 = 0;
        else
          v14 = -256;
        if (!v11)
          goto LABEL_31;
        return v14 & 0xFFFFFFFFFFFFFF00 | v12;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        v6 = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
LABEL_24:
        v15 = v6;
        v16 = LOBYTE(valuePtr);
        v17 = SLOWORD(valuePtr);
        goto LABEL_27;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        v7 = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
LABEL_26:
        v15 = v7;
        v16 = LOBYTE(valuePtr);
        v17 = SLODWORD(valuePtr);
LABEL_27:
        v18 = v17 & 0xFFFFFFFFFFFFFF00 | v16;
        if (v15)
          result = v18;
        else
          result = 0;
        if (!v15)
          goto LABEL_31;
        return result;
      case kCFNumberLongType:
        valuePtr = 0.0;
        v8 = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_39;
      case kCFNumberLongLongType:
        valuePtr = 0.0;
        v8 = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_39;
      case kCFNumberFloatType:
        LODWORD(valuePtr) = 0;
        v9 = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
LABEL_35:
        v20 = v9;
        v21 = (uint64_t)*(float *)&valuePtr;
        goto LABEL_42;
      case kCFNumberDoubleType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
        goto LABEL_41;
      case kCFNumberCFIndexType:
        valuePtr = 0.0;
        v8 = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_39;
      case kCFNumberNSIntegerType:
        valuePtr = 0.0;
        v8 = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_39:
        v20 = v8;
        v21 = *(_QWORD *)&valuePtr;
        goto LABEL_42;
      case kCFNumberCGFloatType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
LABEL_41:
        v20 = v10;
        v21 = (uint64_t)valuePtr;
LABEL_42:
        if (v20)
          result = v21;
        else
          result = 0;
        if (v20)
          return result;
        goto LABEL_31;
      default:
        goto LABEL_31;
    }
  }
  v4 = CFBooleanGetTypeID();
  if (v4 != CFGetTypeID(a1))
  {
LABEL_31:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return CFBooleanGetValue(a1);
}

void sub_1B58368D0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t applesauce::CF::convert_to<unsigned long,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;
  int Value;
  CFTypeID v4;
  unint64_t result;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned __int8 v12;
  uint64_t v14;
  int v15;
  unsigned __int8 v16;
  uint64_t v17;
  unint64_t v18;
  std::runtime_error *exception;
  int v20;
  unint64_t v21;
  double valuePtr;

  TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_12;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        v6 = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_24;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        v7 = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_26;
      case kCFNumberSInt64Type:
        valuePtr = 0.0;
        v8 = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_39;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr) = 0;
        v9 = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_35;
      case kCFNumberFloat64Type:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_41;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
LABEL_12:
        v11 = Value;
        if (Value)
          v12 = LOBYTE(valuePtr);
        else
          v12 = 0;
        if (SLOBYTE(valuePtr) >= 0 || Value == 0)
          v14 = 0;
        else
          v14 = -256;
        if (!v11)
          goto LABEL_31;
        return v14 & 0xFFFFFFFFFFFFFF00 | v12;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        v6 = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
LABEL_24:
        v15 = v6;
        v16 = LOBYTE(valuePtr);
        v17 = SLOWORD(valuePtr);
        goto LABEL_27;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        v7 = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
LABEL_26:
        v15 = v7;
        v16 = LOBYTE(valuePtr);
        v17 = SLODWORD(valuePtr);
LABEL_27:
        v18 = v17 & 0xFFFFFFFFFFFFFF00 | v16;
        if (v15)
          result = v18;
        else
          result = 0;
        if (!v15)
          goto LABEL_31;
        return result;
      case kCFNumberLongType:
        valuePtr = 0.0;
        v8 = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_39;
      case kCFNumberLongLongType:
        valuePtr = 0.0;
        v8 = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_39;
      case kCFNumberFloatType:
        LODWORD(valuePtr) = 0;
        v9 = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
LABEL_35:
        v20 = v9;
        v21 = (unint64_t)*(float *)&valuePtr;
        goto LABEL_42;
      case kCFNumberDoubleType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
        goto LABEL_41;
      case kCFNumberCFIndexType:
        valuePtr = 0.0;
        v8 = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_39;
      case kCFNumberNSIntegerType:
        valuePtr = 0.0;
        v8 = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_39:
        v20 = v8;
        v21 = *(_QWORD *)&valuePtr;
        goto LABEL_42;
      case kCFNumberCGFloatType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
LABEL_41:
        v20 = v10;
        v21 = (unint64_t)valuePtr;
LABEL_42:
        if (v20)
          result = v21;
        else
          result = 0;
        if (v20)
          return result;
        goto LABEL_31;
      default:
        goto LABEL_31;
    }
  }
  v4 = CFBooleanGetTypeID();
  if (v4 != CFGetTypeID(a1))
  {
LABEL_31:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return CFBooleanGetValue(a1);
}

void sub_1B5836B98(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t applesauce::CF::convert_to<long,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;
  int Value;
  CFTypeID v4;
  unint64_t result;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned __int8 v12;
  uint64_t v14;
  int v15;
  unsigned __int8 v16;
  uint64_t v17;
  unint64_t v18;
  std::runtime_error *exception;
  int v20;
  uint64_t v21;
  double valuePtr;

  TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_12;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        v6 = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_24;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        v7 = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_26;
      case kCFNumberSInt64Type:
        valuePtr = 0.0;
        v8 = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_39;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr) = 0;
        v9 = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_35;
      case kCFNumberFloat64Type:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_41;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
LABEL_12:
        v11 = Value;
        if (Value)
          v12 = LOBYTE(valuePtr);
        else
          v12 = 0;
        if (SLOBYTE(valuePtr) >= 0 || Value == 0)
          v14 = 0;
        else
          v14 = -256;
        if (!v11)
          goto LABEL_31;
        return v14 & 0xFFFFFFFFFFFFFF00 | v12;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        v6 = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
LABEL_24:
        v15 = v6;
        v16 = LOBYTE(valuePtr);
        v17 = SLOWORD(valuePtr);
        goto LABEL_27;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        v7 = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
LABEL_26:
        v15 = v7;
        v16 = LOBYTE(valuePtr);
        v17 = SLODWORD(valuePtr);
LABEL_27:
        v18 = v17 & 0xFFFFFFFFFFFFFF00 | v16;
        if (v15)
          result = v18;
        else
          result = 0;
        if (!v15)
          goto LABEL_31;
        return result;
      case kCFNumberLongType:
        valuePtr = 0.0;
        v8 = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_39;
      case kCFNumberLongLongType:
        valuePtr = 0.0;
        v8 = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_39;
      case kCFNumberFloatType:
        LODWORD(valuePtr) = 0;
        v9 = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
LABEL_35:
        v20 = v9;
        v21 = (uint64_t)*(float *)&valuePtr;
        goto LABEL_42;
      case kCFNumberDoubleType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
        goto LABEL_41;
      case kCFNumberCFIndexType:
        valuePtr = 0.0;
        v8 = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_39;
      case kCFNumberNSIntegerType:
        valuePtr = 0.0;
        v8 = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_39:
        v20 = v8;
        v21 = *(_QWORD *)&valuePtr;
        goto LABEL_42;
      case kCFNumberCGFloatType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
LABEL_41:
        v20 = v10;
        v21 = (uint64_t)valuePtr;
LABEL_42:
        if (v20)
          result = v21;
        else
          result = 0;
        if (v20)
          return result;
        goto LABEL_31;
      default:
        goto LABEL_31;
    }
  }
  v4 = CFBooleanGetTypeID();
  if (v4 != CFGetTypeID(a1))
  {
LABEL_31:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return CFBooleanGetValue(a1);
}

void sub_1B5836E60(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<unsigned int>::reserve(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  int64_t v3;
  char *v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v7;
  std::vector<unsigned int>::pointer begin;
  unsigned int *end;
  unsigned int *v10;
  unsigned int v11;

  if (__n > this->__end_cap_.__value_ - this->__begin_)
  {
    if (__n >> 62)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v3 = (char *)this->__end_ - (char *)this->__begin_;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(__n);
    v5 = (unsigned int *)&v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    v7 = (unsigned int *)&v4[4 * v6];
    begin = this->__begin_;
    end = this->__end_;
    v10 = v5;
    if (end != this->__begin_)
    {
      v10 = v5;
      do
      {
        v11 = *--end;
        *--v10 = v11;
      }
      while (end != begin);
    }
    this->__begin_ = v10;
    this->__end_ = v5;
    this->__end_cap_.__value_ = v7;
    if (begin)
      operator delete(begin);
  }
}

uint64_t applesauce::CF::convert_to<int,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;
  int Value;
  CFTypeID v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  uint64_t result;
  std::runtime_error *exception;
  double valuePtr;

  TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_14;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        v9 = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_21;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        v10 = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_32;
      case kCFNumberSInt64Type:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_32;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr) = 0;
        v10 = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_28;
      case kCFNumberFloat64Type:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_34;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
LABEL_14:
        v11 = Value != 0;
        if (Value)
          v12 = LOBYTE(valuePtr);
        else
          v12 = 0;
        v13 = -256;
        if ((v11 & (SLOBYTE(valuePtr) < 0)) == 0)
          v13 = 0;
        v8 = v11 << 32;
        LODWORD(v5) = v13 & 0xFFFFFF00 | v12;
        v7 = v5 & 0xFFFFFF00;
        break;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        v9 = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
LABEL_21:
        if (v9)
          v5 = SLOWORD(valuePtr) & 0xFFFFFFFFLL | 0x100000000;
        else
          v5 = 0;
        goto LABEL_37;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        v10 = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
        goto LABEL_32;
      case kCFNumberLongType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_32;
      case kCFNumberLongLongType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_32;
      case kCFNumberFloatType:
        LODWORD(valuePtr) = 0;
        v10 = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
LABEL_28:
        v14 = (int)*(float *)&valuePtr;
        goto LABEL_35;
      case kCFNumberDoubleType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
        goto LABEL_34;
      case kCFNumberCFIndexType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_32;
      case kCFNumberNSIntegerType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_32:
        v14 = LODWORD(valuePtr);
        goto LABEL_35;
      case kCFNumberCGFloatType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
LABEL_34:
        v14 = (int)valuePtr;
LABEL_35:
        v5 = v14 | 0x100000000;
        if (!v10)
          v5 = 0;
LABEL_37:
        v7 = v5 & 0xFFFFFF00;
        v8 = v5 & 0x100000000;
        break;
      default:
        v7 = 0;
        v8 = 0;
        LOBYTE(v5) = 0;
        break;
    }
    v6 = v8 | v7 & 0xFFFFFF00;
    v5 = v5;
  }
  else
  {
    v4 = CFBooleanGetTypeID();
    if (v4 == CFGetTypeID(a1))
    {
      v5 = CFBooleanGetValue(a1);
      v6 = 0x100000000;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
  }
  result = v6 | v5;
  if (!((v6 | (unint64_t)v5) >> 32))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1B58371EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::convert_to<unsigned short,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;
  int Value;
  CFTypeID v4;
  int v5;
  int v6;
  unsigned int v7;
  __int16 v8;
  int v9;
  int v10;
  int v11;
  int v12;
  std::runtime_error *exception;
  double valuePtr;

  TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_15;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        v11 = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_27;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        v11 = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_27;
      case kCFNumberSInt64Type:
        valuePtr = 0.0;
        v11 = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_27;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr) = 0;
        v11 = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_23;
      case kCFNumberFloat64Type:
        valuePtr = 0.0;
        v11 = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_29;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
LABEL_15:
        LOBYTE(v10) = LOBYTE(valuePtr);
        if (!Value)
          LOBYTE(v10) = 0;
        v9 = (Value != 0) << 16;
        v8 = (SLOBYTE(valuePtr) >> 7) << 8;
        break;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        v11 = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
        goto LABEL_27;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        v11 = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
        goto LABEL_27;
      case kCFNumberLongType:
        valuePtr = 0.0;
        v11 = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_27;
      case kCFNumberLongLongType:
        valuePtr = 0.0;
        v11 = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_27;
      case kCFNumberFloatType:
        LODWORD(valuePtr) = 0;
        v11 = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
LABEL_23:
        v12 = (int)*(float *)&valuePtr;
        goto LABEL_30;
      case kCFNumberDoubleType:
        valuePtr = 0.0;
        v11 = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
        goto LABEL_29;
      case kCFNumberCFIndexType:
        valuePtr = 0.0;
        v11 = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_27;
      case kCFNumberNSIntegerType:
        valuePtr = 0.0;
        v11 = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_27:
        v12 = LOWORD(valuePtr);
        goto LABEL_30;
      case kCFNumberCGFloatType:
        valuePtr = 0.0;
        v11 = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
LABEL_29:
        v12 = (int)valuePtr;
LABEL_30:
        v10 = v12 | 0x10000;
        if (!v11)
          v10 = 0;
        v8 = v10 & 0xFF00;
        v9 = v10 & 0x10000;
        break;
      default:
        v8 = 0;
        v9 = 0;
        LOBYTE(v10) = 0;
        break;
    }
    v7 = v9 | v8 & 0xFF00 | v10;
  }
  else
  {
    v4 = CFBooleanGetTypeID();
    if (v4 == CFGetTypeID(a1))
    {
      v5 = CFBooleanGetValue(a1);
      v6 = 0x10000;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    v7 = v6 | v5;
  }
  if (!HIWORD(v7))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return (unsigned __int16)v7;
}

void sub_1B58374CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::convert_to<short,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;
  int Value;
  CFTypeID v4;
  int v5;
  int v6;
  unsigned int v7;
  __int16 v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  std::runtime_error *exception;
  double valuePtr;

  TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_15;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        v11 = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_27;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        v11 = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_27;
      case kCFNumberSInt64Type:
        valuePtr = 0.0;
        v11 = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_27;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr) = 0;
        v12 = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_23;
      case kCFNumberFloat64Type:
        valuePtr = 0.0;
        v12 = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_31;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
LABEL_15:
        LOBYTE(v10) = LOBYTE(valuePtr);
        if (!Value)
          LOBYTE(v10) = 0;
        v9 = (Value != 0) << 16;
        v8 = (SLOBYTE(valuePtr) >> 7) << 8;
        break;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        v11 = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
        goto LABEL_27;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        v11 = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
        goto LABEL_27;
      case kCFNumberLongType:
        valuePtr = 0.0;
        v11 = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_27;
      case kCFNumberLongLongType:
        valuePtr = 0.0;
        v11 = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_27;
      case kCFNumberFloatType:
        LODWORD(valuePtr) = 0;
        v12 = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
LABEL_23:
        v13 = (int)*(float *)&valuePtr;
        goto LABEL_32;
      case kCFNumberDoubleType:
        valuePtr = 0.0;
        v12 = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
        goto LABEL_31;
      case kCFNumberCFIndexType:
        valuePtr = 0.0;
        v11 = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_27;
      case kCFNumberNSIntegerType:
        valuePtr = 0.0;
        v11 = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_27:
        v10 = LOWORD(valuePtr) | 0x10000;
        if (!v11)
          v10 = 0;
        goto LABEL_35;
      case kCFNumberCGFloatType:
        valuePtr = 0.0;
        v12 = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
LABEL_31:
        v13 = (int)valuePtr;
LABEL_32:
        if (v12)
          v10 = (unsigned __int16)v13 | 0x10000;
        else
          v10 = 0;
LABEL_35:
        v8 = v10 & 0xFF00;
        v9 = v10 & 0x10000;
        break;
      default:
        v8 = 0;
        v9 = 0;
        LOBYTE(v10) = 0;
        break;
    }
    v7 = v9 | v8 & 0xFF00 | v10;
  }
  else
  {
    v4 = CFBooleanGetTypeID();
    if (v4 == CFGetTypeID(a1))
    {
      v5 = CFBooleanGetValue(a1);
      v6 = 0x10000;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    v7 = v6 | v5;
  }
  if (!HIWORD(v7))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return (__int16)v7;
}

void sub_1B58377BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<BOOL>::reserve(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  _QWORD *v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;

  if (a2 <= *(_QWORD *)(a1 + 16) << 6)
    return;
  if ((a2 & 0x8000000000000000) != 0)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  v19 = 0;
  v20 = 0uLL;
  std::vector<BOOL>::__vallocate[abi:ne180100](&v19, a2);
  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = v20;
  v6 = v20 + v4;
  *(_QWORD *)&v20 = v20 + v4;
  if (!v5)
  {
    v7 = v6 - 1;
    goto LABEL_7;
  }
  v7 = v6 - 1;
  if (((v6 - 1) ^ (v5 - 1)) > 0x3F)
  {
LABEL_7:
    v8 = v19;
    v9 = v7 >> 6;
    if (v6 >= 0x41)
      v10 = v9;
    else
      v10 = 0;
    *(_QWORD *)(v19 + 8 * v10) = 0;
    goto LABEL_11;
  }
  v8 = v19;
LABEL_11:
  v11 = v4 & 0x3F;
  if (v4 > 0x3F || (v4 & 0x3F) != 0)
  {
    v12 = 0;
    v13 = &v3[v4 >> 6];
    v14 = v5 & 0x3F;
    v15 = (uint64_t *)(v8 + 8 * (v5 >> 6));
    do
    {
      v16 = 1 << v14;
      if (((*v3 >> v12) & 1) != 0)
        v17 = *v15 | v16;
      else
        v17 = *v15 & ~v16;
      *v15 = v17;
      v3 += v12 == 63;
      if (v12 == 63)
        v12 = 0;
      else
        ++v12;
      v15 += v14 == 63;
      if (v14 == 63)
        v14 = 0;
      else
        ++v14;
    }
    while (v3 != v13 || v12 != v11);
  }
  v18 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v8;
  *(_OWORD *)(a1 + 8) = v20;
  if (v18)
    operator delete(v18);
}

void sub_1B5837904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL AMCP::Implementation::In_Place_Storage<applesauce::CF::DateRef>::dispatch(_BOOL8 result, const void **a2, uint64_t a3, uint64_t *a4)
{
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  CFDateRef v10;
  CFDateRef v11;
  CFDateRef *v12;
  AMCP::Thing *v13;
  CFTypeRef *v14;
  CFDateRef v15;
  CFDateRef v16;
  _BOOL4 v17;
  uint64_t v18;
  const __CFDate *v19;
  CFComparisonResult v20;
  CFDateRef theDate[2];
  __int128 v22;
  void (*v23)(_QWORD, CFDateRef *, _QWORD, _QWORD);
  CFDateRef otherDate;

  switch(result)
  {
    case 0:
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      v7 = *a2;
      if (*a2)
        CFRetain(v7);
      result = 0;
      *(_QWORD *)a3 = v7;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::DateRef>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)a3 = *a2;
      *a2 = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::DateRef>::dispatch;
LABEL_9:
      AMCP::Implementation::In_Place_Storage<applesauce::CF::DateRef>::destruct((uint64_t)a2);
      return 0;
    case 3:
      v8 = AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>();
      result = 0;
      *a4 = v8;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>())
        return (BOOL)a2;
      else
        return 0;
    case 5:
      v9 = AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>();
      v10 = (CFDateRef)a2[4];
      theDate[0] = 0;
      if (v10)
      {
        ((void (*)(uint64_t, const void **, _QWORD, CFDateRef *))v10)(3, a2, 0, theDate);
        v10 = theDate[0];
      }
      if (v10 != (CFDateRef)v9)
        goto LABEL_30;
      v11 = *(CFDateRef *)(a3 + 32);
      otherDate = 0;
      if (v11)
      {
        ((void (*)(uint64_t, uint64_t, _QWORD, CFDateRef *))v11)(3, a3, 0, &otherDate);
        v11 = otherDate;
      }
      if (v11 != (CFDateRef)v9)
      {
LABEL_30:
        AMCP::Thing::convert_to<applesauce::CF::DateRef>(theDate, (uint64_t)a2);
        AMCP::Thing::convert_to<applesauce::CF::DateRef>(&otherDate, a3);
        v15 = theDate[0];
        v16 = otherDate;
        if (theDate[0])
        {
          if (!otherDate)
          {
            v17 = 0;
            goto LABEL_56;
          }
          v17 = CFDateCompare(theDate[0], otherDate, 0) == kCFCompareEqualTo;
        }
        else
        {
          if (otherDate)
            v18 = -1;
          else
            v18 = 0;
          v17 = otherDate == 0;
          if (!otherDate)
            return !v18;
        }
        CFRelease(v16);
        if (!v15)
          return v17;
LABEL_56:
        CFRelease(v15);
        return v17;
      }
      if (a2[4])
      {
        theDate[0] = (CFDateRef)AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>();
        v12 = (CFDateRef *)((uint64_t (*)(uint64_t, const void **, _QWORD, CFDateRef *))a2[4])(4, a2, 0, theDate);
      }
      else
      {
        v12 = 0;
      }
      theDate[0] = (CFDateRef)AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>();
      v19 = *(const __CFDate **)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFDateRef *))(a3 + 32))(4, a3, 0, theDate);
      if (!*v12)
      {
        if (v19)
          v20 = kCFCompareLessThan;
        else
          v20 = kCFCompareEqualTo;
        return v20 == kCFCompareEqualTo;
      }
      if (v19)
      {
        v20 = CFDateCompare(*v12, v19, 0);
        return v20 == kCFCompareEqualTo;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()
        || *a4 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
      {
        goto LABEL_52;
      }
      if (a2[4])
      {
        theDate[0] = (CFDateRef)AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>();
        v14 = (CFTypeRef *)((uint64_t (*)(uint64_t, const void **, _QWORD, CFDateRef *))a2[4])(4, a2, 0, theDate);
      }
      else
      {
        v14 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
      {
        if (v14)
        {
          mcp_applesauce::CF::PropertyListRef::from_get((mcp_applesauce::CF::PropertyListRef *)&otherDate, *v14);
          v23 = 0;
          *(_OWORD *)theDate = 0u;
          v22 = 0u;
          AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::construct<mcp_applesauce::CF::PropertyListRef&>(theDate, &otherDate);
          if (otherDate)
            CFRelease(otherDate);
          goto LABEL_53;
        }
      }
      else if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()
             || v14)
      {
LABEL_52:
        v23 = 0;
        *(_OWORD *)theDate = 0u;
        v22 = 0u;
LABEL_53:
        AMCP::swap((AMCP::Thing *)theDate, (AMCP::Thing *)a3, v13);
        if (v23)
          v23(0, theDate, 0, 0);
        return 0;
      }
      __assert_rtn("create_cf_plist_from", "Thing.h", 2434, "in_value_ptr != nullptr");
    default:
      return result;
  }
}

void sub_1B5837D70(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  applesauce::CF::DateRef::~DateRef(&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5837D04);
}

double AMCP::Implementation::In_Place_Storage<applesauce::CF::DateRef>::destruct(uint64_t a1)
{
  const void *v2;
  double result;

  v2 = *(const void **)a1;
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

CFTypeRef *AMCP::Thing::convert_to<applesauce::CF::DateRef>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  CFTypeRef *result;
  CFTypeRef v7;
  CFTypeRef v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_16;
  v4 = AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    result = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (result)
    {
      v7 = *result;
      if (*result)
        result = (CFTypeRef *)CFRetain(*result);
      *a1 = v7;
      return result;
    }
LABEL_16:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  result = (CFTypeRef *)v18(4, v17, 0, &v15);
  if (!result)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v8 = *result;
  if (*result)
    result = (CFTypeRef *)CFRetain(*result);
  *a1 = v8;
  if (v18)
    return (CFTypeRef *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B5837F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void applesauce::CF::DateRef::~DateRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

applesauce::CF::BooleanRef *applesauce::CF::BooleanRef::BooleanRef(applesauce::CF::BooleanRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFBooleanGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return this;
}

void sub_1B5838034(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

applesauce::CF::NumberRef *applesauce::CF::NumberRef::NumberRef(applesauce::CF::NumberRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFNumberGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return this;
}

void sub_1B58380E0(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::In_Place_Storage<applesauce::CF::DataRef>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  void (*v10)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  CFDataRef *v11;
  CFTypeRef *v12;
  _BOOL4 v13;
  AMCP::Thing *v14;
  AMCP::Thing *v15;
  CFDataRef *v16;
  CFIndex Length;
  const __CFData *v18;
  void *v19;
  const UInt8 *BytePtr;
  CFDataRef *v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  CFTypeRef cf[2];
  __int128 v25;
  void (*v26)(_QWORD, CFTypeRef *, _QWORD, _QWORD);
  CFTypeRef v27[2];
  __int128 v28;
  void (*v29)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  void *v30;
  _BYTE *v31;

  switch((int)result)
  {
    case 0:
      goto LABEL_7;
    case 1:
      AMCP::Implementation::In_Place_Storage<applesauce::CF::DataRef>::construct<applesauce::CF::DataRef const&>(a3, (CFTypeRef *)a2);
      return 0;
    case 2:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)a3 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::DataRef>::dispatch;
LABEL_7:
      AMCP::Implementation::In_Place_Storage<applesauce::CF::DataRef>::destruct(a2);
      return 0;
    case 3:
      v7 = AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>();
      result = 0;
      *a4 = v7;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>())
        return a2;
      else
        return 0;
    case 5:
      v8 = AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>();
      v9 = *(void (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32);
      v27[0] = 0;
      if (v9)
      {
        v9(3, a2, 0, v27);
        v9 = (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))v27[0];
      }
      if (v9 != (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))v8)
        goto LABEL_28;
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a3 + 32);
      cf[0] = 0;
      if (v10)
      {
        v10(3, a3, 0, cf);
        v10 = (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))cf[0];
      }
      if (v10 == (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))v8)
      {
        if (*(_QWORD *)(a2 + 32))
        {
          v27[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>();
          v11 = (CFDataRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, v27);
        }
        else
        {
          v11 = 0;
        }
        v27[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>();
        v21 = (CFDataRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a3 + 32))(4, a3, 0, v27);
        if (applesauce::CF::operator==(v11, v21))
          return 1;
      }
      else
      {
LABEL_28:
        AMCP::Thing::convert_to<applesauce::CF::DataRef>(v27, a2);
        AMCP::Thing::convert_to<applesauce::CF::DataRef>(cf, a3);
        v13 = applesauce::CF::operator==((CFDataRef *)v27, (CFDataRef *)cf);
        if (cf[0])
          CFRelease(cf[0]);
        if (v27[0])
          CFRelease(v27[0]);
        if (v13)
          return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()
        || *a4 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
      {
        goto LABEL_49;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        v27[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>();
        v12 = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, v27);
      }
      else
      {
        v12 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
      {
        if (v12)
        {
          mcp_applesauce::CF::PropertyListRef::from_get((mcp_applesauce::CF::PropertyListRef *)v27, *v12);
          v26 = 0;
          *(_OWORD *)cf = 0u;
          v25 = 0u;
          AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::construct<mcp_applesauce::CF::PropertyListRef&>(cf, v27);
          if (v27[0])
            CFRelease(v27[0]);
          if (v26)
            goto LABEL_67;
          goto LABEL_50;
        }
LABEL_74:
        __assert_rtn("create_cf_plist_from", "Thing.h", 2434, "in_value_ptr != nullptr");
      }
      if ((*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
         || *a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
         || *a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
         || *a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
         || *a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
         || *a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
         || *a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
        && !v12)
      {
        goto LABEL_74;
      }
LABEL_49:
      v26 = 0;
      *(_OWORD *)cf = 0u;
      v25 = 0u;
      if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>())
      {
        goto LABEL_64;
      }
LABEL_50:
      if (*(_QWORD *)(a2 + 32))
      {
        v27[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>();
        v16 = (CFDataRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, v27);
      }
      else
      {
        v16 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>())
      {
        if (v16)
        {
          if (!*v16)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          Length = CFDataGetLength(*v16);
          LOBYTE(v27[0]) = 0;
          std::vector<std::byte>::vector(&v30, Length, v27);
          v18 = *v16;
          if (!*v16)
          {
            v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v23, "Could not construct");
            __cxa_throw(v23, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v19 = v30;
          BytePtr = CFDataGetBytePtr(v18);
          memcpy(v19, BytePtr, v31 - (_BYTE *)v30);
          *(_OWORD *)v27 = 0u;
          v28 = 0u;
          v29 = 0;
          std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>(v27, v30, (uint64_t)v31, v31 - (_BYTE *)v30);
          v29 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<AMCP::Bag_O_Bytes>::dispatch;
          if (v30)
          {
            v31 = v30;
            operator delete(v30);
          }
          goto LABEL_65;
        }
LABEL_75:
        __assert_rtn("create_data_bag_from", "Thing.h", 2381, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>())
      {
        if (!v16)
          goto LABEL_75;
        v29 = 0;
        *(_OWORD *)v27 = 0u;
        v28 = 0u;
        AMCP::Implementation::In_Place_Storage<applesauce::CF::DataRef>::construct<applesauce::CF::DataRef const&>((uint64_t)v27, (CFTypeRef *)v16);
      }
      else
      {
LABEL_64:
        v29 = 0;
        *(_OWORD *)v27 = 0u;
        v28 = 0u;
      }
LABEL_65:
      AMCP::swap((AMCP::Thing *)v27, (AMCP::Thing *)cf, v15);
      if (v29)
        v29(0, (uint64_t)v27, 0, 0);
LABEL_67:
      AMCP::swap((AMCP::Thing *)cf, (AMCP::Thing *)a3, v14);
      if (v26)
        v26(0, cf, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B58386A8(void *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 56);
  if (v3)
  {
    *(_QWORD *)(v1 - 48) = v3;
    operator delete(v3);
  }
  __clang_call_terminate(a1);
}

double AMCP::Implementation::In_Place_Storage<applesauce::CF::DataRef>::destruct(uint64_t a1)
{
  const void *v2;
  double result;

  v2 = *(const void **)a1;
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t AMCP::Implementation::In_Place_Storage<applesauce::CF::DataRef>::construct<applesauce::CF::DataRef const&>(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v3;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::DataRef>::dispatch;
  return a1;
}

BOOL applesauce::CF::operator==(CFDataRef *a1, CFDataRef *a2)
{
  const __CFData *v3;
  _BOOL8 result;
  BOOL v5;
  const UInt8 *BytePtr;
  const UInt8 *v8;
  CFIndex Length;
  const __CFData *v10;

  v3 = *a1;
  result = ((unint64_t)*a1 | (unint64_t)*a2) == 0;
  if (v3)
    v5 = *a2 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    BytePtr = CFDataGetBytePtr(v3);
    if (*a2)
      v8 = CFDataGetBytePtr(*a2);
    else
      v8 = 0;
    if (*a1)
      Length = CFDataGetLength(*a1);
    else
      Length = 0;
    v10 = *a2;
    if (*a2)
      v10 = (const __CFData *)CFDataGetLength(v10);
    return (const __CFData *)Length == v10 && memcmp(BytePtr, v8, Length) == 0;
  }
  return result;
}

CFTypeRef *AMCP::Thing::convert_to<applesauce::CF::DataRef>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  CFTypeRef *result;
  CFTypeRef v7;
  CFTypeRef v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_16;
  v4 = AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    result = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (result)
    {
      v7 = *result;
      if (*result)
        result = (CFTypeRef *)CFRetain(*result);
      *a1 = v7;
      return result;
    }
LABEL_16:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  result = (CFTypeRef *)v18(4, v17, 0, &v15);
  if (!result)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v8 = *result;
  if (*result)
    result = (CFTypeRef *)CFRetain(*result);
  *a1 = v8;
  if (v18)
    return (CFTypeRef *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B5838A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void applesauce::CF::DataRef::~DataRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[99];
}

_QWORD *std::vector<std::byte>::vector(_QWORD *a1, size_t a2, _BYTE *a3)
{
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v5 = a2;
    std::vector<char>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_BYTE *)a1[1];
    v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B5838B3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B5838BB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL AMCP::Implementation::In_Place_Storage<AMCP::Bag_O_Bytes>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, __int128 *);
  void (*v12)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  uint64_t v13;
  AMCP::Thing *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  _BOOL4 v20;
  BOOL v21;
  CFDataRef v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  __int128 v27;
  __int128 v28;
  void (*v29)(_QWORD, __int128 *, _QWORD, _QWORD);
  CFTypeRef cf[3];

  switch(result)
  {
    case 0:
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
      {
        *(_QWORD *)(a2 + 8) = v7;
        operator delete(v7);
      }
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>((_QWORD *)a3, *(const void **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
      result = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<AMCP::Bag_O_Bytes>::dispatch;
      return result;
    case 2:
      result = 0;
      v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<AMCP::Bag_O_Bytes>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      v9 = AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>();
      result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>())
        return a2;
      else
        return 0;
    case 5:
      v10 = AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>();
      v11 = *(void (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32);
      *(_QWORD *)&v27 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v27);
        v11 = (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v27;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, _QWORD, __int128 *))v10)
        goto LABEL_24;
      v12 = *(void (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a3 + 32);
      cf[0] = 0;
      if (v12)
      {
        v12(3, a3, 0, cf);
        v12 = (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))cf[0];
      }
      if (v12 != (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))v10)
      {
LABEL_24:
        AMCP::Thing::convert_to<AMCP::Bag_O_Bytes>(&v27, a2);
        AMCP::Thing::convert_to<AMCP::Bag_O_Bytes>(cf, a3);
        v16 = (void *)v27;
        if ((CFTypeRef)(*((_QWORD *)&v27 + 1) - v27) == (CFTypeRef)((char *)cf[1] - (char *)cf[0]))
        {
          if ((_QWORD)v27 == *((_QWORD *)&v27 + 1))
          {
            v20 = 1;
            if (!cf[0])
            {
LABEL_36:
              if (v16)
                operator delete(v16);
              return v20;
            }
LABEL_35:
            operator delete((void *)cf[0]);
            goto LABEL_36;
          }
          v17 = v27 + 1;
          v18 = (unsigned __int8 *)cf[0];
          do
          {
            v19 = *v18++;
            v20 = *(unsigned __int8 *)(v17 - 1) == v19;
            v21 = *(unsigned __int8 *)(v17 - 1) != v19 || v17 == *((_QWORD *)&v27 + 1);
            ++v17;
          }
          while (!v21);
        }
        else
        {
          v20 = 0;
        }
        if (!cf[0])
          goto LABEL_36;
        goto LABEL_35;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v27 = AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>();
        v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v27);
      }
      else
      {
        v13 = 0;
      }
      *(_QWORD *)&v27 = AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>();
      v23 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a3 + 32))(4, a3, 0, &v27);
      v25 = *(unsigned __int8 **)v13;
      v24 = *(unsigned __int8 **)(v13 + 8);
      v26 = *(unsigned __int8 **)v23;
      if (&v24[-*(_QWORD *)v13] == (unsigned __int8 *)(*(_QWORD *)(v23 + 8) - *(_QWORD *)v23))
      {
        while (v25 != v24)
        {
          if (*v25 != *v26)
            return 0;
          ++v25;
          ++v26;
        }
        return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>())
      {
        goto LABEL_48;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        *(_QWORD *)&v27 = AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>();
        v15 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __int128 *))(a2 + 32))(4, a2, 0, &v27);
      }
      else
      {
        v15 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>())
      {
        if (v15)
        {
          v29 = 0;
          v27 = 0u;
          v28 = 0u;
          std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>(&v27, *(const void **)v15, *(_QWORD *)(v15 + 8), *(_QWORD *)(v15 + 8) - *(_QWORD *)v15);
          v29 = (void (*)(_QWORD, __int128 *, _QWORD, _QWORD))AMCP::Implementation::In_Place_Storage<AMCP::Bag_O_Bytes>::dispatch;
          goto LABEL_49;
        }
      }
      else
      {
        if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>())
        {
LABEL_48:
          v29 = 0;
          v27 = 0u;
          v28 = 0u;
LABEL_49:
          AMCP::swap((AMCP::Thing *)&v27, (AMCP::Thing *)a3, v14);
          if (v29)
            v29(0, &v27, 0, 0);
          return 0;
        }
        if (v15)
        {
          v22 = CFDataCreate(0, *(const UInt8 **)v15, *(_QWORD *)(v15 + 8) - *(_QWORD *)v15);
          applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)cf, v22);
          v29 = 0;
          v27 = 0u;
          v28 = 0u;
          AMCP::Implementation::In_Place_Storage<applesauce::CF::DataRef>::construct<applesauce::CF::DataRef&>(&v27, cf);
          if (cf[0])
            CFRelease(cf[0]);
          goto LABEL_49;
        }
      }
      __assert_rtn("create_data_bag_from", "Thing.h", 2381, "in_value_ptr != nullptr");
    default:
      return result;
  }
}

void sub_1B5838FB8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5838EF4);
}

_QWORD *AMCP::Thing::convert_to<AMCP::Bag_O_Bytes>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>(a1, *(const void **)v6, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 8) - *(_QWORD *)v6);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>(a1, *(const void **)v8, *(_QWORD *)(v8 + 8), *(_QWORD *)(v8 + 8) - *(_QWORD *)v8);
  if (v18)
    return (_QWORD *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B583917C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

applesauce::CF::DataRef *applesauce::CF::DataRef::DataRef(applesauce::CF::DataRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFDataGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return this;
}

void sub_1B5839218(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  void (*v10)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  const __CFString **v11;
  CFTypeRef *v12;
  CFTypeRef v13;
  CFComparisonResult v14;
  AMCP::Thing *v15;
  AMCP::Thing *v16;
  const __CFString **v17;
  BOOL (*v18)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  const __CFString *v19;
  const __CFString **v20;
  std::runtime_error *exception;
  CFTypeRef cf[2];
  __int128 v23;
  void (*v24)(_QWORD, CFTypeRef *, _QWORD, _QWORD);
  CFTypeRef v25[2];
  __int128 v26;
  BOOL (*v27)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  __int128 v28;
  unint64_t v29;

  switch(result)
  {
    case 0:
      goto LABEL_7;
    case 1:
      AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::construct<applesauce::CF::StringRef const&>(a3, (CFTypeRef *)a2);
      return 0;
    case 2:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)a3 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::dispatch;
LABEL_7:
      AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::destruct(a2);
      return 0;
    case 3:
      v7 = AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>();
      result = 0;
      *a4 = v7;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>())
        return a2;
      else
        return 0;
    case 5:
      v8 = AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>();
      v9 = *(void (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32);
      v25[0] = 0;
      if (v9)
      {
        v9(3, a2, 0, v25);
        v9 = (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))v25[0];
      }
      if (v9 != (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))v8)
        goto LABEL_28;
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a3 + 32);
      cf[0] = 0;
      if (v10)
      {
        v10(3, a3, 0, cf);
        v10 = (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))cf[0];
      }
      if (v10 != (void (*)(uint64_t, uint64_t, _QWORD, CFTypeRef *))v8)
      {
LABEL_28:
        AMCP::Thing::convert_to<applesauce::CF::StringRef>(v25, a2);
        AMCP::Thing::convert_to<applesauce::CF::StringRef>(cf, a3);
        v13 = v25[0];
        v14 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)v25[0], (const __CFString **)cf);
        if (cf[0])
          CFRelease(cf[0]);
        if (v13)
          CFRelease(v13);
        return v14 == kCFCompareEqualTo;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        v25[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>();
        v11 = (const __CFString **)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, v25);
      }
      else
      {
        v11 = 0;
      }
      v25[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>();
      v20 = (const __CFString **)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a3 + 32))(4, a3, 0, v25);
      return applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v11, v20) == kCFCompareEqualTo;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()
        || *a4 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
      {
        goto LABEL_49;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        v25[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>();
        v12 = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, v25);
      }
      else
      {
        v12 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
      {
        if (v12)
        {
          mcp_applesauce::CF::PropertyListRef::from_get((mcp_applesauce::CF::PropertyListRef *)v25, *v12);
          v24 = 0;
          *(_OWORD *)cf = 0u;
          v23 = 0u;
          AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::construct<mcp_applesauce::CF::PropertyListRef&>(cf, v25);
          if (v25[0])
            CFRelease(v25[0]);
          if (v24)
            goto LABEL_68;
LABEL_50:
          if (*a4 == AMCP::Implementation::get_type_marker<std::string>()
            || *a4 == AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>())
          {
            if (*(_QWORD *)(a2 + 32))
            {
              v25[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>();
              v17 = (const __CFString **)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(a2 + 32))(4, a2, 0, v25);
            }
            else
            {
              v17 = 0;
            }
            if (*a4 == AMCP::Implementation::get_type_marker<std::string>())
            {
              if (v17)
              {
                if (!*v17)
                {
                  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(exception, "Could not construct");
                  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                applesauce::CF::convert_to<std::string,0>((uint64_t)&v28, *v17);
                *(_OWORD *)v25 = v28;
                v26 = v29;
                v18 = AMCP::Implementation::In_Place_Storage<std::string>::dispatch;
LABEL_64:
                v27 = v18;
                goto LABEL_66;
              }
              goto LABEL_76;
            }
            if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>())
            {
              if (v17)
              {
                v19 = *v17;
                if (v19)
                  CFRetain(v19);
                v26 = 0uLL;
                v25[0] = v19;
                v25[1] = 0;
                v18 = (BOOL (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::dispatch;
                goto LABEL_64;
              }
LABEL_76:
              __assert_rtn("create_string_from", "Thing.h", 1254, "in_value_ptr != nullptr");
            }
          }
          v27 = 0;
          *(_OWORD *)v25 = 0u;
          v26 = 0u;
LABEL_66:
          AMCP::swap((AMCP::Thing *)v25, (AMCP::Thing *)cf, v16);
          if (v27)
            v27(0, (uint64_t)v25, 0, 0);
LABEL_68:
          AMCP::swap((AMCP::Thing *)cf, (AMCP::Thing *)a3, v15);
          if (v24)
            v24(0, cf, 0, 0);
          return 0;
        }
      }
      else if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()
             || v12)
      {
LABEL_49:
        v24 = 0;
        *(_OWORD *)cf = 0u;
        v23 = 0u;
        goto LABEL_50;
      }
      __assert_rtn("create_cf_plist_from", "Thing.h", 2434, "in_value_ptr != nullptr");
    default:
      return result;
  }
}

void sub_1B5839770(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  __clang_call_terminate(a1);
}

double AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::destruct(uint64_t a1)
{
  const void *v2;
  double result;

  v2 = *(const void **)a1;
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::construct<applesauce::CF::StringRef const&>(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v3;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::dispatch;
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::string>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[205];
}

BOOL AMCP::Implementation::In_Place_Storage<std::string>::dispatch(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, _QWORD, void **);
  void (*v13)(uint64_t, uint64_t, _QWORD, std::string *);
  unsigned __int8 *v14;
  AMCP::Thing *v15;
  uint64_t v16;
  char v17;
  void *v18;
  std::string::size_type size;
  int v20;
  std::string *v21;
  uint64_t v22;
  void **v23;
  int v24;
  int v25;
  int v26;
  int v27;
  BOOL v29;
  BOOL v30;
  int v31;
  const UInt8 *v32;
  CFIndex v33;
  CFStringRef v34;
  uint64_t (*v35)();
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned __int8 *v41;
  std::runtime_error *exception;
  void *__s1[2];
  __int128 v44;
  uint64_t (*v45)();
  std::string v46;

  switch(result)
  {
    case 0:
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        v10 = *(_OWORD *)a2;
        *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a3 = v10;
      }
      result = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::string>::dispatch;
      return result;
    case 2:
      v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      v8 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::string>::dispatch;
      if (*(char *)(a2 + 23) < 0)
      {
        operator delete(*(void **)a2);
        v7 = 0uLL;
      }
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      v9 = AMCP::Implementation::get_type_marker<std::string>();
      result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::string>())
        return a2;
      else
        return 0;
    case 5:
      v11 = AMCP::Implementation::get_type_marker<std::string>();
      v12 = *(void (**)(uint64_t, uint64_t, _QWORD, void **))(a2 + 32);
      __s1[0] = 0;
      if (v12)
      {
        v12(3, a2, 0, __s1);
        v12 = (void (*)(uint64_t, uint64_t, _QWORD, void **))__s1[0];
      }
      if (v12 != (void (*)(uint64_t, uint64_t, _QWORD, void **))v11)
        goto LABEL_26;
      v13 = *(void (**)(uint64_t, uint64_t, _QWORD, std::string *))(a3 + 32);
      v46.__r_.__value_.__r.__words[0] = 0;
      if (v13)
      {
        v13(3, a3, 0, &v46);
        v13 = (void (*)(uint64_t, uint64_t, _QWORD, std::string *))v46.__r_.__value_.__r.__words[0];
      }
      if (v13 != (void (*)(uint64_t, uint64_t, _QWORD, std::string *))v11)
      {
LABEL_26:
        AMCP::Thing::convert_to<std::string>((std::string *)__s1, a2);
        AMCP::Thing::convert_to<std::string>(&v46, a3);
        v17 = BYTE7(v44);
        if ((SBYTE7(v44) & 0x80u) == 0)
          v18 = (void *)BYTE7(v44);
        else
          v18 = __s1[1];
        size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
        v20 = SHIBYTE(v46.__r_.__value_.__r.__words[2]);
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v46.__r_.__value_.__l.__size_;
        if (v18 == (void *)size)
        {
          if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v21 = &v46;
          else
            v21 = (std::string *)v46.__r_.__value_.__r.__words[0];
          if ((BYTE7(v44) & 0x80) != 0)
          {
            v30 = memcmp(__s1[0], v21, (size_t)__s1[1]) == 0;
          }
          else if (BYTE7(v44))
          {
            v22 = BYTE7(v44) - 1;
            v23 = __s1;
            do
            {
              v25 = *(unsigned __int8 *)v23;
              v23 = (void **)((char *)v23 + 1);
              v24 = v25;
              v27 = v21->__r_.__value_.__s.__data_[0];
              v21 = (std::string *)((char *)v21 + 1);
              v26 = v27;
              v29 = v22-- != 0;
              v30 = v24 == v26;
            }
            while (v24 == v26 && v29);
          }
          else
          {
            v30 = 1;
          }
        }
        else
        {
          v30 = 0;
        }
        if (v20 < 0)
          operator delete(v46.__r_.__value_.__l.__data_);
        if (v17 < 0)
          operator delete(__s1[0]);
        return v30;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        __s1[0] = (void *)AMCP::Implementation::get_type_marker<std::string>();
        v14 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, void **))(a2 + 32))(4, a2, 0, __s1);
      }
      else
      {
        v14 = 0;
      }
      if (*(_QWORD *)(a3 + 32))
      {
        __s1[0] = (void *)AMCP::Implementation::get_type_marker<std::string>();
        v36 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, void **))(a3 + 32))(4, a3, 0, __s1);
      }
      else
      {
        v36 = 0;
      }
      v37 = v14[23];
      if ((v37 & 0x80u) == 0)
        v38 = v14[23];
      else
        v38 = *((_QWORD *)v14 + 1);
      v39 = *(unsigned __int8 *)(v36 + 23);
      v40 = (char)v39;
      if ((v39 & 0x80u) != 0)
        v39 = *(_QWORD *)(v36 + 8);
      if (v38 == v39)
      {
        if (v40 >= 0)
          v41 = (unsigned __int8 *)v36;
        else
          v41 = *(unsigned __int8 **)v36;
        if ((v37 & 0x80) == 0)
        {
          if (v14[23])
          {
            do
            {
              if (*v14 != *v41)
                return 0;
              ++v14;
              ++v41;
              --v37;
            }
            while (v37);
          }
          return 1;
        }
        if (!memcmp(*(const void **)v14, v41, *((_QWORD *)v14 + 1)))
          return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::string>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>())
      {
        goto LABEL_62;
      }
      if (*(_QWORD *)(a2 + 32))
      {
        __s1[0] = (void *)AMCP::Implementation::get_type_marker<std::string>();
        v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, void **))(a2 + 32))(4, a2, 0, __s1);
      }
      else
      {
        v16 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::string>())
      {
        if (v16)
        {
          if (*(char *)(v16 + 23) < 0)
            std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)v16, *(_QWORD *)(v16 + 8));
          else
            v46 = *(std::string *)v16;
          *(_OWORD *)__s1 = *(_OWORD *)&v46.__r_.__value_.__l.__data_;
          v44 = v46.__r_.__value_.__r.__words[2];
          v35 = AMCP::Implementation::In_Place_Storage<std::string>::dispatch;
LABEL_66:
          v45 = v35;
LABEL_67:
          AMCP::swap((AMCP::Thing *)__s1, (AMCP::Thing *)a3, v15);
          if (v45)
            ((void (*)(_QWORD, void **, _QWORD, _QWORD))v45)(0, __s1, 0, 0);
          return 0;
        }
      }
      else
      {
        if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>())
        {
LABEL_62:
          v45 = 0;
          *(_OWORD *)__s1 = 0u;
          v44 = 0u;
          goto LABEL_67;
        }
        if (v16)
        {
          v31 = *(char *)(v16 + 23);
          if (v31 >= 0)
            v32 = (const UInt8 *)v16;
          else
            v32 = *(const UInt8 **)v16;
          if (v31 >= 0)
            v33 = *(unsigned __int8 *)(v16 + 23);
          else
            v33 = *(_QWORD *)(v16 + 8);
          v34 = CFStringCreateWithBytes(0, v32, v33, 0x8000100u, 0);
          if (!v34)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v44 = 0uLL;
          __s1[0] = (void *)v34;
          __s1[1] = 0;
          v35 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::dispatch;
          goto LABEL_66;
        }
      }
      __assert_rtn("create_string_from", "Thing.h", 1254, "in_value_ptr != nullptr");
    default:
      return result;
  }
}

void sub_1B5839DA0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  __cxa_free_exception(v14);
  __clang_call_terminate(a1);
}

void AMCP::Thing::convert_to<std::string>(std::string *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  uint64_t v7;
  std::bad_cast *exception;
  std::bad_cast *v9;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t (*v17)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_17;
  v4 = AMCP::Implementation::get_type_marker<std::string>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v19 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v19);
    v5 = v19;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v18 = v4;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v18);
    if (v6)
    {
      if (*(char *)(v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
      }
      else
      {
        *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)v6;
        a1->__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
      }
      return;
    }
LABEL_17:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = AMCP::Implementation::get_type_marker<std::string>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v14 = v4;
  v7 = v17(4, v16, 0, &v14);
  if (!v7)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  if (*(char *)(v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)v7;
    a1->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
  }
  if (v17)
    v17(0, v16, 0, 0);
}

void sub_1B5839FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::details::handle_case<float,unsigned char>(const __CFNumber *a1, CFNumberType a2)
{
  int Value;
  int v3;
  float valuePtr;

  valuePtr = 0.0;
  Value = CFNumberGetValue(a1, a2, &valuePtr);
  v3 = (int)valuePtr;
  if (!Value)
    v3 = 0;
  return v3 | ((Value != 0) << 8);
}

uint64_t applesauce::CF::details::handle_case<double,unsigned char>(const __CFNumber *a1, CFNumberType a2)
{
  int Value;
  int v3;
  double valuePtr;

  valuePtr = 0.0;
  Value = CFNumberGetValue(a1, a2, &valuePtr);
  v3 = (int)valuePtr;
  if (!Value)
    v3 = 0;
  return v3 | ((Value != 0) << 8);
}

uint64_t applesauce::CF::details::handle_case<float,signed char>(const __CFNumber *a1, CFNumberType a2)
{
  int Value;
  int v3;
  float valuePtr;

  valuePtr = 0.0;
  Value = CFNumberGetValue(a1, a2, &valuePtr);
  v3 = (int)valuePtr;
  if (!Value)
    LOBYTE(v3) = 0;
  return v3 | ((Value != 0) << 8);
}

uint64_t applesauce::CF::details::handle_case<double,signed char>(const __CFNumber *a1, CFNumberType a2)
{
  int Value;
  int v3;
  double valuePtr;

  valuePtr = 0.0;
  Value = CFNumberGetValue(a1, a2, &valuePtr);
  v3 = (int)valuePtr;
  if (!Value)
    LOBYTE(v3) = 0;
  return v3 | ((Value != 0) << 8);
}

uint64_t AMCP::Thing::convert_to<AMCP::Direction>(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  std::bad_cast *exception;
  std::bad_cast *v9;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t (*v17)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_12;
  v2 = AMCP::Implementation::get_type_marker<AMCP::Direction>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v2)
  {
    v18 = v2;
    v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4)
      return *v4;
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = AMCP::Implementation::get_type_marker<AMCP::Direction>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v14 = v2;
  v6 = (unsigned int *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v5 = *v6;
  if (v17)
    v17(0, v16, 0, 0);
  return v5;
}

void sub_1B583A238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

_QWORD *AMCP::Implementation::create_number_from<AMCP::Direction,applesauce::CF::BooleanRef>(_QWORD *result, _DWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  if (*a2)
    v2 = (uint64_t *)MEMORY[0x1E0C9AE58];
  else
    v2 = (uint64_t *)MEMORY[0x1E0C9AE48];
  v3 = *v2;
  result[2] = 0;
  result[3] = 0;
  *result = v3;
  result[1] = 0;
  result[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::dispatch;
  return result;
}

CFNumberRef AMCP::Implementation::create_number_from<AMCP::Direction,applesauce::CF::NumberRef>(CFNumberRef *a1, _DWORD *a2)
{
  CFNumberRef result;
  std::runtime_error *exception;
  BOOL valuePtr;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  valuePtr = *a2 != 0;
  result = CFNumberCreate(0, kCFNumberCharType, &valuePtr);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  a1[2] = 0;
  a1[3] = 0;
  *a1 = result;
  a1[1] = 0;
  a1[4] = (CFNumberRef)AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::dispatch;
  return result;
}

void sub_1B583A370(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Thing::convert_to<unsigned long long>(uint64_t a1)
{
  uint64_t type;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  std::bad_cast *exception;
  std::bad_cast *v9;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t (*v17)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_12;
  type = AMCP::Implementation::get_type_marker<unsigned long long>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))type)
  {
    v18 = type;
    v4 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4)
      return *(_QWORD *)v4;
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = AMCP::Implementation::get_type_marker<unsigned long long>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v14 = type;
  v6 = (uint64_t *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v5 = *v6;
  if (v17)
    v17(0, v16, 0, 0);
  return v5;
}

void sub_1B583A4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

_QWORD *AMCP::Implementation::create_number_from<unsigned long long,applesauce::CF::BooleanRef>(_QWORD *result, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  if (*a2)
    v2 = (uint64_t *)MEMORY[0x1E0C9AE58];
  else
    v2 = (uint64_t *)MEMORY[0x1E0C9AE48];
  v3 = *v2;
  result[2] = 0;
  result[3] = 0;
  *result = v3;
  result[1] = 0;
  result[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::dispatch;
  return result;
}

void AMCP::Implementation::create_number_from<unsigned long long,applesauce::CF::NumberRef>(uint64_t a1, uint64_t *a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  std::runtime_error *exception;
  CFNumberRef v6;
  uint64_t valuePtr;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  valuePtr = *a2;
  v3 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
  v6 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v4 = v3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(a1, (CFTypeRef *)&v6);
  CFRelease(v4);
}

void sub_1B583A630(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Thing::convert_to<long long>(uint64_t a1)
{
  uint64_t type;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  std::bad_cast *exception;
  std::bad_cast *v9;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t (*v17)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_12;
  type = AMCP::Implementation::get_type_marker<long long>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))type)
  {
    v18 = type;
    v4 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4)
      return *(_QWORD *)v4;
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = AMCP::Implementation::get_type_marker<long long>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v14 = type;
  v6 = (uint64_t *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v5 = *v6;
  if (v17)
    v17(0, v16, 0, 0);
  return v5;
}

void sub_1B583A7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_number_from<long long,applesauce::CF::NumberRef>(uint64_t a1, uint64_t *a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  std::runtime_error *exception;
  CFNumberRef v6;
  uint64_t valuePtr;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  valuePtr = *a2;
  v3 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
  v6 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v4 = v3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(a1, (CFTypeRef *)&v6);
  CFRelease(v4);
}

void sub_1B583A88C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Thing::convert_to<unsigned long>(uint64_t a1)
{
  uint64_t type;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  std::bad_cast *exception;
  std::bad_cast *v9;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t (*v17)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_12;
  type = AMCP::Implementation::get_type_marker<unsigned long>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))type)
  {
    v18 = type;
    v4 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4)
      return *(_QWORD *)v4;
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = AMCP::Implementation::get_type_marker<unsigned long>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v14 = type;
  v6 = (uint64_t *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v5 = *v6;
  if (v17)
    v17(0, v16, 0, 0);
  return v5;
}

void sub_1B583AA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_number_from<unsigned long,applesauce::CF::NumberRef>(uint64_t a1, uint64_t *a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  std::runtime_error *exception;
  CFNumberRef v6;
  uint64_t valuePtr;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  valuePtr = *a2;
  v3 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  v6 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v4 = v3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(a1, (CFTypeRef *)&v6);
  CFRelease(v4);
}

void sub_1B583AAE8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Thing::convert_to<long>(uint64_t a1)
{
  uint64_t type;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  std::bad_cast *exception;
  std::bad_cast *v9;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t (*v17)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_12;
  type = AMCP::Implementation::get_type_marker<long>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))type)
  {
    v18 = type;
    v4 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4)
      return *(_QWORD *)v4;
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = AMCP::Implementation::get_type_marker<long>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v14 = type;
  v6 = (uint64_t *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v5 = *v6;
  if (v17)
    v17(0, v16, 0, 0);
  return v5;
}

void sub_1B583AC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_number_from<long,applesauce::CF::NumberRef>(uint64_t a1, uint64_t *a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  std::runtime_error *exception;
  CFNumberRef v6;
  uint64_t valuePtr;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  valuePtr = *a2;
  v3 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  v6 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v4 = v3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(a1, (CFTypeRef *)&v6);
  CFRelease(v4);
}

void sub_1B583AD44(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_number_from<unsigned int,applesauce::CF::NumberRef>(uint64_t a1, int *a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  std::runtime_error *exception;
  CFNumberRef v6;
  int valuePtr;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  valuePtr = *a2;
  v3 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  v6 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v4 = v3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(a1, (CFTypeRef *)&v6);
  CFRelease(v4);
}

void sub_1B583AE18(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Thing::convert_to<int>(uint64_t a1)
{
  uint64_t type;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  std::bad_cast *exception;
  std::bad_cast *v9;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t (*v17)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_12;
  type = AMCP::Implementation::get_type_marker<int>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))type)
  {
    v18 = type;
    v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4)
      return *v4;
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = AMCP::Implementation::get_type_marker<int>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v14 = type;
  v6 = (unsigned int *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v5 = *v6;
  if (v17)
    v17(0, v16, 0, 0);
  return v5;
}

void sub_1B583AF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_number_from<int,applesauce::CF::NumberRef>(uint64_t a1, int *a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  std::runtime_error *exception;
  CFNumberRef v6;
  int valuePtr;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  valuePtr = *a2;
  v3 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  v6 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v4 = v3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(a1, (CFTypeRef *)&v6);
  CFRelease(v4);
}

void sub_1B583B074(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Thing::convert_to<unsigned short>(uint64_t a1)
{
  uint64_t type;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  std::bad_cast *exception;
  std::bad_cast *v9;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t (*v17)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_12;
  type = AMCP::Implementation::get_type_marker<unsigned short>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))type)
  {
    v18 = type;
    v4 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4)
      return *v4;
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = AMCP::Implementation::get_type_marker<unsigned short>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v14 = type;
  v6 = (unsigned __int16 *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v5 = *v6;
  if (v17)
    v17(0, v16, 0, 0);
  return v5;
}

void sub_1B583B1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

_QWORD *AMCP::Implementation::create_number_from<unsigned short,applesauce::CF::BooleanRef>(_QWORD *result, _WORD *a2)
{
  uint64_t *v2;
  uint64_t v3;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  if (*a2)
    v2 = (uint64_t *)MEMORY[0x1E0C9AE58];
  else
    v2 = (uint64_t *)MEMORY[0x1E0C9AE48];
  v3 = *v2;
  result[2] = 0;
  result[3] = 0;
  *result = v3;
  result[1] = 0;
  result[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::dispatch;
  return result;
}

void AMCP::Implementation::create_number_from<unsigned short,applesauce::CF::NumberRef>(uint64_t a1, __int16 *a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  std::runtime_error *exception;
  CFNumberRef v6;
  __int16 valuePtr;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  valuePtr = *a2;
  v3 = CFNumberCreate(0, kCFNumberShortType, &valuePtr);
  v6 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v4 = v3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(a1, (CFTypeRef *)&v6);
  CFRelease(v4);
}

void sub_1B583B338(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Thing::convert_to<short>(uint64_t a1)
{
  uint64_t type;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  __int16 *v4;
  __int16 v5;
  __int16 *v6;
  std::bad_cast *exception;
  std::bad_cast *v9;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t (*v17)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_12;
  type = AMCP::Implementation::get_type_marker<short>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))type)
  {
    v18 = type;
    v4 = (__int16 *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4)
      return *v4;
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = AMCP::Implementation::get_type_marker<short>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v14 = type;
  v6 = (__int16 *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v5 = *v6;
  if (v17)
    v17(0, v16, 0, 0);
  return v5;
}

void sub_1B583B4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_number_from<short,applesauce::CF::NumberRef>(uint64_t a1, __int16 *a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  std::runtime_error *exception;
  CFNumberRef v6;
  __int16 valuePtr;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  valuePtr = *a2;
  v3 = CFNumberCreate(0, kCFNumberShortType, &valuePtr);
  v6 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v4 = v3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(a1, (CFTypeRef *)&v6);
  CFRelease(v4);
}

void sub_1B583B594(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Thing::convert_to<unsigned char>(uint64_t a1)
{
  uint64_t type;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  std::bad_cast *exception;
  std::bad_cast *v9;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t (*v17)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_12;
  type = AMCP::Implementation::get_type_marker<unsigned char>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))type)
  {
    v18 = type;
    v4 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4)
      return *v4;
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = AMCP::Implementation::get_type_marker<unsigned char>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v14 = type;
  v6 = (unsigned __int8 *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v5 = *v6;
  if (v17)
    v17(0, v16, 0, 0);
  return v5;
}

void sub_1B583B714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_number_from<unsigned char,applesauce::CF::NumberRef>(uint64_t a1, char *a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  std::runtime_error *exception;
  CFNumberRef v6;
  char valuePtr;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  valuePtr = *a2;
  v3 = CFNumberCreate(0, kCFNumberCharType, &valuePtr);
  v6 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v4 = v3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(a1, (CFTypeRef *)&v6);
  CFRelease(v4);
}

void sub_1B583B7F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Thing::convert_to<signed char>(uint64_t a1)
{
  uint64_t type;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  char *v4;
  char v5;
  char *v6;
  std::bad_cast *exception;
  std::bad_cast *v9;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t (*v17)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_12;
  type = AMCP::Implementation::get_type_marker<signed char>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))type)
  {
    v18 = type;
    v4 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4)
      return *v4;
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = AMCP::Implementation::get_type_marker<signed char>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v14 = type;
  v6 = (char *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v5 = *v6;
  if (v17)
    v17(0, v16, 0, 0);
  return v5;
}

void sub_1B583B970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_number_from<signed char,applesauce::CF::NumberRef>(uint64_t a1, char *a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  std::runtime_error *exception;
  CFNumberRef v6;
  char valuePtr;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  valuePtr = *a2;
  v3 = CFNumberCreate(0, kCFNumberCharType, &valuePtr);
  v6 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v4 = v3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(a1, (CFTypeRef *)&v6);
  CFRelease(v4);
}

void sub_1B583BA4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Thing::convert_to<char>(uint64_t a1)
{
  uint64_t type;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  char *v4;
  char v5;
  char *v6;
  std::bad_cast *exception;
  std::bad_cast *v9;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t (*v17)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_12;
  type = AMCP::Implementation::get_type_marker<char>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))type)
  {
    v18 = type;
    v4 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4)
      return *v4;
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = AMCP::Implementation::get_type_marker<char>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v14 = type;
  v6 = (char *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v5 = *v6;
  if (v17)
    v17(0, v16, 0, 0);
  return v5;
}

void sub_1B583BBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_number_from<char,applesauce::CF::NumberRef>(uint64_t a1, char *a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  std::runtime_error *exception;
  CFNumberRef v6;
  char valuePtr;

  if (!a2)
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  valuePtr = *a2;
  v3 = CFNumberCreate(0, kCFNumberCharType, &valuePtr);
  v6 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v4 = v3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(a1, (CFTypeRef *)&v6);
  CFRelease(v4);
}

void sub_1B583BCA8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::is_one_of<unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(_QWORD *a1)
{
  return *a1 == AMCP::Implementation::get_type_marker<unsigned long>()
      || *a1 == AMCP::Implementation::get_type_marker<long long>()
      || *a1 == AMCP::Implementation::get_type_marker<unsigned long long>()
      || *a1 == AMCP::Implementation::get_type_marker<float>()
      || *a1 == AMCP::Implementation::get_type_marker<double>()
      || *a1 == AMCP::Implementation::get_type_marker<long double>()
      || *a1 == AMCP::Implementation::get_type_marker<AMCP::Direction>()
      || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
      || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>();
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_21,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_21>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_21,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_21>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696D028;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_21,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_21>,BOOL ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696D028;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_21,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_21>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 604);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_21,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_21>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_21"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_21,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_21>,BOOL ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E696CFA8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E696CFA8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E696CFA8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B583BEF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E696CFA8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _BYTE v3[64];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  AMCP::Thing::convert_to<caulk::mach::os_workgroup_interval_managed>((uint64_t)v3, a2);
  AMCP::Core::Operation::call_function<void,caulk::mach::os_workgroup_interval_managed const&>((_QWORD *)(a1 + 8), (uint64_t)v3);
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v3);
}

void sub_1B583BFF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_setterIN5caulk4mach29os_workgroup_interval_managedEEEvRNS0_9OperationEEUlRKNS_5ThingEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

uint64_t AMCP::Thing::convert_to<caulk::mach::os_workgroup_interval_managed>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t result;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  std::bad_cast *exception;
  std::bad_cast *v17;
  std::bad_cast *v18;
  std::bad_cast *v19;
  std::bad_cast *v20;
  std::bad_cast *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[2];
  uint64_t (*v25)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_12;
  v4 = AMCP::Implementation::get_type_marker<caulk::mach::os_workgroup_interval_managed>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v27 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v27);
    v5 = v27;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v26 = v4;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v26);
    if (v6)
    {
      v8 = v6;
      result = caulk::mach::details::retain_os_object(*(caulk::mach::details **)(v6 + 8), v7);
      v10 = *(_OWORD *)(v8 + 32);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(v8 + 16);
      *(_OWORD *)(a1 + 32) = v10;
      v11 = MEMORY[0x1E0DDB768];
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(v8 + 41);
      *(_QWORD *)a1 = v11 + 16;
      *(_QWORD *)(a1 + 8) = result;
      *(_BYTE *)(a1 + 57) = *(_BYTE *)(v8 + 57);
      return result;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v17 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v17, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v23 = AMCP::Implementation::get_type_marker<caulk::mach::os_workgroup_interval_managed>();
  memset(v24, 0, sizeof(v24));
  v25 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v24, &v23);
  if (!v25)
  {
    v18 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v19 = std::bad_cast::bad_cast(v18);
    __cxa_throw(v19, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v22 = v4;
  v12 = v25(4, v24, 0, &v22);
  v14 = v12;
  if (!v12)
  {
    v20 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v21 = std::bad_cast::bad_cast(v20);
    __cxa_throw(v21, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  result = caulk::mach::details::retain_os_object(*(caulk::mach::details **)(v12 + 8), v13);
  v15 = *(_OWORD *)(v14 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v14 + 16);
  *(_OWORD *)(a1 + 32) = v15;
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(v14 + 41);
  *(_QWORD *)a1 = MEMORY[0x1E0DDB768] + 16;
  *(_QWORD *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(v14 + 57);
  if (v25)
    return v25(0, v24, 0, 0);
  return result;
}

void sub_1B583C220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Core::Operation::call_function<void,caulk::mach::os_workgroup_interval_managed const&>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  AMCP::Log::Scope_Registry *v5;
  AMCP::Log::Scope_Registry *v6;
  uint64_t v7;
  NSObject *v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  void *v12;
  NSObject *v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  void *exception;
  __int128 v17;
  uint64_t v18;
  uint64_t (**v19)();
  __int128 v20;
  uint64_t v21;
  std::string v22;
  std::runtime_error v23;
  std::runtime_error v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint8_t buf[8];
  __int16 v32;
  char *v33;
  __int16 v34;
  int v35;
  const char *v36;
  const char *v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = AMCP::Implementation::get_type_marker<std::function<void ()(caulk::mach::os_workgroup_interval_managed const&)>>();
  v5 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v4);
  if (!v5)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v13 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = pthread_self();
      v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v15;
      v32 = 2080;
      v33 = "Operation.h";
      v34 = 1024;
      v35 = 154;
      _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v22);
    std::runtime_error::runtime_error(&v23, &v22);
    std::runtime_error::runtime_error(&v24, &v23);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = -1;
    v24.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v25 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    v36 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const caulk::mach::os_workgroup_interval_managed &>]";
    v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v38 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v17);
    v20 = v17;
    v21 = v18;
    v17 = 0uLL;
    v18 = 0;
    v19 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v19);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v6 = v5;
  if (!*((_QWORD *)v5 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(caulk::mach::os_workgroup_interval_managed const&)>>(),
        (v5 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v6 + 7))(4, (uint64_t)v6 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v11;
      v32 = 2080;
      v33 = "Operation.h";
      v34 = 1024;
      v35 = 161;
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    v12 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v22);
    std::runtime_error::runtime_error(&v23, &v22);
    std::runtime_error::runtime_error(&v24, &v23);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = -1;
    v24.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v25 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    v36 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const caulk::mach::os_workgroup_interval_managed &>]";
    v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v38 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v17);
    v20 = v17;
    v21 = v18;
    v17 = 0uLL;
    v18 = 0;
    v19 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v19);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v12, (uint64_t)buf);
  }
  v7 = *((_QWORD *)v5 + 3);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

void sub_1B583C620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<caulk::mach::os_workgroup_interval_managed>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      AMCP::Implementation::get_type_marker<caulk::mach::os_workgroup_interval_managed>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E0DDB758], v4);
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[290];
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_20,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_20>,void ()(caulk::mach::os_workgroup_interval_managed const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_20,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_20>,void ()(caulk::mach::os_workgroup_interval_managed const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696CF18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_20,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_20>,void ()(caulk::mach::os_workgroup_interval_managed const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696CF18;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_20,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_20>,void ()(caulk::mach::os_workgroup_interval_managed const&)>::operator()(uint64_t a1, uint64_t a2)
{
  caulk::mach::details *v4;
  __int128 v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  _QWORD v9[2];
  __int128 v10;
  _BYTE v11[25];
  char v12;
  uint64_t v13;
  caulk::mach::details *v14;
  __int128 v15;
  _BYTE v16[25];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = (caulk::mach::details *)caulk::mach::details::retain_os_object(*(caulk::mach::details **)(a2 + 8), (void *)a2);
  v5 = *(_OWORD *)(a2 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = v5;
  *(_OWORD *)&v11[9] = *(_OWORD *)(a2 + 41);
  v9[0] = MEMORY[0x1E0DDB768] + 16;
  v9[1] = v4;
  v12 = *(_BYTE *)(a2 + 57);
  v6 = *(_QWORD *)(a1 + 8);
  v15 = v10;
  *(_OWORD *)v16 = *(_OWORD *)v11;
  *(_OWORD *)&v16[9] = *(_OWORD *)&v11[9];
  v13 = MEMORY[0x1E0DDB768] + 16;
  v14 = (caulk::mach::details *)caulk::mach::details::retain_os_object(v4, v7);
  v17 = v12;
  if ((uint64_t *)(v6 + 64) != &v13)
  {
    caulk::mach::details::holder::operator=((caulk::mach::details **)(v6 + 72), &v14);
    v8 = *(_OWORD *)v16;
    *(_OWORD *)(v6 + 80) = v15;
    *(_OWORD *)(v6 + 96) = v8;
    *(_OWORD *)(v6 + 105) = *(_OWORD *)&v16[9];
    *(_BYTE *)(v6 + 121) = v17;
  }
  AMCP::IO_Core::IOContext_Core::maybe_enqueue_execution_context((AMCP::IO_Core::IOContext_Core *)v6);
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)&v13);
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v9);
}

void sub_1B583C970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
  {
    caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)&a18);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B583C938);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_20,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_20>,void ()(caulk::mach::os_workgroup_interval_managed const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_20"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_20,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_20>,void ()(caulk::mach::os_workgroup_interval_managed const&)>::target_type()
{
}

caulk::mach::details **caulk::mach::details::holder::operator=(caulk::mach::details **a1, caulk::mach::details **a2)
{
  void *v4;

  if (a1 != a2)
  {
    caulk::mach::details::release_os_object(*a1, a2);
    *a1 = (caulk::mach::details *)caulk::mach::details::retain_os_object(*a2, v4);
  }
  return a1;
}

void AMCP::IO_Core::IOContext_Core::maybe_enqueue_execution_context(AMCP::IO_Core::IOContext_Core *this)
{
  std::mutex *v2;
  uint64_t v3;
  double v4;
  double v5;
  unsigned int v6;
  int *v7;
  uint64_t v8;
  int v9;
  AMCP::Log::Scope_Registry *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *v14;
  _opaque_pthread_t *v15;
  mach_port_t v16;
  void *exception;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t (**v21)();
  __int128 v22;
  uint64_t v23;
  std::string v24;
  std::logic_error v25;
  std::logic_error v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  void *__p;
  __int16 v34;
  char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  _BYTE v39[14];
  const char *v40;
  int v41;
  __int128 v42[2];
  std::__shared_weak_count *v43;
  _QWORD v44[10];

  v44[9] = *MEMORY[0x1E0C80C00];
  v2 = (std::mutex *)((char *)this + 200);
  std::mutex::lock((std::mutex *)((char *)this + 200));
  if (*((_QWORD *)this + 16))
  {
    v3 = *((_QWORD *)this + 20);
    if (v3)
    {
      if (caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(*(_QWORD *)(v3 + 32)))
      {
        AMCP::IO_Core::IOContext_Core::create_execution_context((AMCP::IO_Core::IOContext_Core *)v42, (uint64_t)this, v4, v5);
        v6 = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(*(_QWORD *)(*((_QWORD *)this + 20) + 32));
        v7 = (int *)*((_QWORD *)this + 18);
        v26.__vftable = 0;
        v26.__imp_.__imp_ = 0;
        AMCP::IO_Core::Play_State_Manager::get_state_snapshot((AMCP::IO_Core::Play_State_Manager *)&__p, (unint64_t *)(*((_QWORD *)this + 20) + 16));
        *(_QWORD *)&v18 = 0;
        *((_QWORD *)&v18 + 1) = 1;
        v9 = AMCP::Graph::Manifest_Queue::enqueue_manifest(v7, &v26, v6, v6, &__p, v42, 2, v8, v18);
        v10 = (AMCP::Log::Scope_Registry *)__p;
        if (__p)
          operator delete(__p);
        if (v9 == 1)
        {
          AMCP::Log::Scope_Registry::get(v10);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
          v14 = *(NSObject **)__p;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            v15 = pthread_self();
            v16 = pthread_mach_thread_np(v15);
            LODWORD(__p) = 67109890;
            HIDWORD(__p) = v16;
            v34 = 2080;
            v35 = "IOContext_Core.cpp";
            v36 = 1024;
            v37 = 622;
            v38 = 2080;
            *(_QWORD *)v39 = "not (start_succeeded != Start_Stop_Result::failure)";
            _os_log_error_impl(&dword_1B57BA000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s enqueue should always succeed when only the execution context is queued", (uint8_t *)&__p, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
          exception = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"enqueue should always succeed when only the execution context is queued", (uint64_t)&v24);
          std::logic_error::logic_error(&v25, &v24);
          v25.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error(&v26, &v25);
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v31 = -1;
          v26.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
          v27 = &unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v26);
          *(_QWORD *)&v39[6] = "void AMCP::IO_Core::IOContext_Core::maybe_enqueue_execution_context()";
          v40 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
          v41 = 622;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
          v22 = v19;
          v23 = v20;
          v19 = 0uLL;
          v20 = 0;
          v21 = off_1E69A20A0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&__p, (uint64_t)&v21);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)&__p);
        }
        caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v44);
        v11 = v43;
        if (v43)
        {
          p_shared_owners = (unint64_t *)&v43->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
      }
    }
  }
  std::mutex::unlock(v2);
}

void sub_1B583CD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40)
{
  std::mutex *v40;
  uint64_t v41;

  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)(v41 - 128));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v41 - 152);
  std::mutex::unlock(v40);
  _Unwind_Resume(a1);
}

void AMCP::IO_Core::IOContext_Core::create_execution_context(AMCP::IO_Core::IOContext_Core *this, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  double v12;
  double v13;
  double v14;
  __int128 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  NSObject *v23;
  _opaque_pthread_t *v24;
  mach_port_t v25;
  void *exception;
  NSObject *v27;
  _opaque_pthread_t *v28;
  mach_port_t v29;
  void *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t (**v33)();
  __int128 v34;
  uint64_t v35;
  std::string v36;
  std::logic_error v37;
  std::logic_error v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;
  _BYTE buf[24];
  __int128 v46;
  const char *v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 128);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v23 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v24 = pthread_self();
      v25 = pthread_mach_thread_np(v24);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v25;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "IOContext_Core.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 593;
      LOWORD(v46) = 2080;
      *(_QWORD *)((char *)&v46 + 2) = "not (m_inventory)";
      _os_log_error_impl(&dword_1B57BA000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v44);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v36);
    std::logic_error::logic_error(&v37, &v36);
    v37.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v38, &v37);
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = -1;
    v38.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v39 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v38);
    *((_QWORD *)&v46 + 1) = "Graph::Manifest_Execution_Context AMCP::IO_Core::IOContext_Core::create_execution_context()";
    v47 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
    v48 = 593;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v31);
    v34 = v31;
    v35 = v32;
    v31 = 0uLL;
    v32 = 0;
    v33 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v33);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v8 = *(_QWORD *)(v4 + 96);
  v7 = *(std::__shared_weak_count **)(v4 + 104);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (!v8)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v27 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      v28 = pthread_self();
      v29 = pthread_mach_thread_np(v28);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v29;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "IOContext_Core.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 594;
      LOWORD(v46) = 2080;
      *(_QWORD *)((char *)&v46 + 2) = "not (m_inventory->get_master_timebase())";
      _os_log_error_impl(&dword_1B57BA000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v44);
    v30 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v36);
    std::logic_error::logic_error(&v37, &v36);
    v37.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v38, &v37);
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = -1;
    v38.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v39 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v38);
    *((_QWORD *)&v46 + 1) = "Graph::Manifest_Execution_Context AMCP::IO_Core::IOContext_Core::create_execution_context()";
    v47 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
    v48 = 594;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v31);
    v34 = v31;
    v35 = v32;
    v31 = 0uLL;
    v32 = 0;
    v33 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v33);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v30, (uint64_t)buf);
  }
  *(_DWORD *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_QWORD *)this + 6) = MEMORY[0x1E0DDB768] + 16;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 13) = 0;
  *((_WORD *)this + 56) = 0;
  v12 = *(double *)(a2 + 592);
  LODWORD(a4) = *(_DWORD *)(a2 + 608);
  v13 = (double)*(unint64_t *)&a4;
  v14 = round(v12);
  if (v14 < v13 || (LODWORD(v13) = *(_DWORD *)(a2 + 612), v13 = (double)*(unint64_t *)&v13, v14 > v13))
    v12 = v13;
  v15 = *(_OWORD *)(*(_QWORD *)(a2 + 128) + 96);
  v16 = *(_QWORD *)(*(_QWORD *)(a2 + 128) + 104);
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_DWORD *)buf = 2;
  *(double *)&buf[8] = v12;
  *(_QWORD *)&buf[16] = 0;
  v46 = v15;
  *((_QWORD *)this + 2) = 0;
  *(_OWORD *)this = *(_OWORD *)buf;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)this + 24, &v46);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (*((_QWORD *)&v46 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  *((_DWORD *)this + 10) = *(_DWORD *)(a2 + 600);
  if ((AMCP::IO_Core::IOContext_Core *)((char *)this + 48) != (AMCP::IO_Core::IOContext_Core *)(a2 + 64))
  {
    caulk::mach::details::holder::operator=((caulk::mach::details **)this + 7, (caulk::mach::details **)(a2 + 72));
    v22 = *(_OWORD *)(a2 + 96);
    *((_OWORD *)this + 4) = *(_OWORD *)(a2 + 80);
    *((_OWORD *)this + 5) = v22;
    *(_OWORD *)((char *)this + 89) = *(_OWORD *)(a2 + 105);
    *((_BYTE *)this + 105) = *(_BYTE *)(a2 + 121);
  }
  *((_BYTE *)this + 113) = *(_BYTE *)(a2 + 604);
}

void sub_1B583D3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 112) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 104);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 104) = 0;
  MEMORY[0x1B5E500E8](v29 - 128);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 129));
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E696CE98;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E696CE98;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E696CE98;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B583D5F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E696CE98;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  __int128 v6;
  _BYTE v7[8];
  caulk::mach::details *v8;
  __int128 v9;
  _BYTE v10[25];
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  AMCP::Core::Operation::call_function<caulk::mach::os_workgroup_interval_managed>((uint64_t)v7, (_QWORD *)(a1 + 8));
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 32) = AMCP::Implementation::Outboard_Storage<caulk::mach::os_workgroup_interval_managed>::dispatch;
  v3 = operator new();
  v5 = caulk::mach::details::retain_os_object(v8, v4);
  v6 = *(_OWORD *)v10;
  *(_OWORD *)(v3 + 16) = v9;
  *(_OWORD *)(v3 + 32) = v6;
  *(_OWORD *)(v3 + 41) = *(_OWORD *)&v10[9];
  *(_QWORD *)v3 = MEMORY[0x1E0DDB768] + 16;
  *(_QWORD *)(v3 + 8) = v5;
  *(_BYTE *)(v3 + 57) = v11;
  *(_QWORD *)a2 = v3;
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v7);
}

void sub_1B583D748(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIN5caulk4mach29os_workgroup_interval_managedEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t AMCP::Core::Operation::call_function<caulk::mach::os_workgroup_interval_managed>(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  AMCP::Log::Scope_Registry *v4;
  AMCP::Log::Scope_Registry *v5;
  uint64_t v6;
  NSObject *v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  void *v11;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *exception;
  __int128 v16;
  uint64_t v17;
  uint64_t (**v18)();
  __int128 v19;
  uint64_t v20;
  std::string v21;
  std::runtime_error v22;
  std::runtime_error v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  uint8_t buf[8];
  __int16 v31;
  char *v32;
  __int16 v33;
  int v34;
  const char *v35;
  const char *v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = AMCP::Implementation::get_type_marker<std::function<caulk::mach::os_workgroup_interval_managed ()(void)>>();
  v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a2, v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v14;
      v31 = 2080;
      v32 = "Operation.h";
      v33 = 1024;
      v34 = 154;
      _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v24 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    v35 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = caulk::mach::os_workg"
          "roup_interval_managed, Argument_Types = <>]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v37 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v5 = v4;
  if (!*((_QWORD *)v4 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<caulk::mach::os_workgroup_interval_managed ()(void)>>(),
        (v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v8 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = pthread_self();
      v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v10;
      v31 = 2080;
      v32 = "Operation.h";
      v33 = 1024;
      v34 = 161;
      _os_log_error_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    v11 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v24 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    v35 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = caulk::mach::os_workg"
          "roup_interval_managed, Argument_Types = <>]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v37 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v11, (uint64_t)buf);
  }
  v6 = *((_QWORD *)v4 + 3);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
}

void sub_1B583DB88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::Outboard_Storage<caulk::mach::os_workgroup_interval_managed>::dispatch(uint64_t result, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, _OWORD *);
  void (*v20)(uint64_t, AMCP::Thing *, _QWORD, _QWORD *);
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  _QWORD v25[7];
  char v26;
  unsigned __int8 v27;
  _OWORD v28[2];
  void (*v29)(_QWORD, _OWORD *, _QWORD, _QWORD);
  char v30;
  unsigned __int8 v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  switch((int)result)
  {
    case 0:
      goto LABEL_9;
    case 1:
      v7 = *(_QWORD *)a2;
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::Outboard_Storage<caulk::mach::os_workgroup_interval_managed>::dispatch;
      v8 = operator new();
      v10 = caulk::mach::details::retain_os_object(*(caulk::mach::details **)(v7 + 8), v9);
      result = 0;
      *(_QWORD *)(v8 + 8) = v10;
      v11 = *(_OWORD *)(v7 + 41);
      v13 = *(_OWORD *)(v7 + 16);
      v12 = *(_OWORD *)(v7 + 32);
      *(_QWORD *)v8 = MEMORY[0x1E0DDB768] + 16;
      *(_OWORD *)(v8 + 16) = v13;
      *(_OWORD *)(v8 + 32) = v12;
      *(_OWORD *)(v8 + 41) = v11;
      *(_BYTE *)(v8 + 57) = *(_BYTE *)(v7 + 57);
      *(_QWORD *)a3 = v8;
      return result;
    case 2:
      v14 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      v15 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v14;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::Outboard_Storage<caulk::mach::os_workgroup_interval_managed>::dispatch;
LABEL_9:
      v16 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v17 = AMCP::Implementation::get_type_marker<caulk::mach::os_workgroup_interval_managed>();
      result = 0;
      *a4 = v17;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<caulk::mach::os_workgroup_interval_managed>())
        return *(_QWORD *)a2;
      else
        return 0;
    case 5:
      v18 = AMCP::Implementation::get_type_marker<caulk::mach::os_workgroup_interval_managed>();
      v19 = *(void (**)(uint64_t, uint64_t, _QWORD, _OWORD *))(a2 + 32);
      *(_QWORD *)&v28[0] = 0;
      if (v19)
      {
        v19(3, a2, 0, v28);
        v19 = *(void (**)(uint64_t, uint64_t, _QWORD, _OWORD *))&v28[0];
      }
      if (v19 != (void (*)(uint64_t, uint64_t, _QWORD, _OWORD *))v18)
        goto LABEL_23;
      v20 = (void (*)(uint64_t, AMCP::Thing *, _QWORD, _QWORD *))*((_QWORD *)a3 + 4);
      v25[0] = 0;
      if (v20)
      {
        v20(3, a3, 0, v25);
        v20 = (void (*)(uint64_t, AMCP::Thing *, _QWORD, _QWORD *))v25[0];
      }
      if (v20 == (void (*)(uint64_t, AMCP::Thing *, _QWORD, _QWORD *))v18)
      {
        if (*(_QWORD *)(a2 + 32))
        {
          *(_QWORD *)&v28[0] = AMCP::Implementation::get_type_marker<caulk::mach::os_workgroup_interval_managed>();
          v21 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _OWORD *))(a2 + 32))(4, a2, 0, v28);
        }
        else
        {
          v21 = 0;
        }
        if (*((_QWORD *)a3 + 4))
        {
          *(_QWORD *)&v28[0] = AMCP::Implementation::get_type_marker<caulk::mach::os_workgroup_interval_managed>();
          v24 = (*((uint64_t (**)(uint64_t, AMCP::Thing *, _QWORD, _OWORD *))a3 + 4))(4, a3, 0, v28);
        }
        else
        {
          v24 = 0;
        }
        if (*(_QWORD *)(v21 + 8) == *(_QWORD *)(v24 + 8)
          && *(unsigned __int8 *)(v21 + 56) == *(unsigned __int8 *)(v24 + 56)
          && *(unsigned __int8 *)(v21 + 57) == *(unsigned __int8 *)(v24 + 57))
        {
          return 1;
        }
      }
      else
      {
LABEL_23:
        AMCP::Thing::convert_to<caulk::mach::os_workgroup_interval_managed>((uint64_t)v28, a2);
        AMCP::Thing::convert_to<caulk::mach::os_workgroup_interval_managed>((uint64_t)v25, (uint64_t)a3);
        if (*((_QWORD *)&v28[0] + 1) == v25[1] && v30 == v26)
        {
          v22 = v31;
          v23 = v27;
          caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v25);
          caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v28);
          if (v22 == v23)
            return 1;
        }
        else
        {
          caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v25);
          caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v28);
        }
      }
      return 0;
    case 6:
      v29 = 0;
      memset(v28, 0, sizeof(v28));
      AMCP::swap((AMCP::Thing *)v28, a3, a3);
      if (v29)
        v29(0, v28, 0, 0);
      return 0;
    default:
      return result;
  }
}

void sub_1B583E084()
{
  JUMPOUT(0x1B583E018);
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_19,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_19>,caulk::mach::os_workgroup_interval_managed ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_19,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_19>,caulk::mach::os_workgroup_interval_managed ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696CE08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_19,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_19>,caulk::mach::os_workgroup_interval_managed ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696CE08;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_19,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_19>,caulk::mach::os_workgroup_interval_managed ()(void)>::operator()@<Q0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __n128 result;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = caulk::mach::details::retain_os_object(*(caulk::mach::details **)(v4 + 72), a2);
  v6 = *(_OWORD *)(v4 + 96);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(v4 + 80);
  *(_OWORD *)(a3 + 32) = v6;
  result = *(__n128 *)(v4 + 105);
  v8 = MEMORY[0x1E0DDB768];
  *(__n128 *)(a3 + 41) = result;
  *(_QWORD *)a3 = v8 + 16;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 57) = *(_BYTE *)(v4 + 121);
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_19,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_19>,caulk::mach::os_workgroup_interval_managed ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_19"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_19,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_19>,caulk::mach::os_workgroup_interval_managed ()(void)>::target_type()
{
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_18,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_18>,unsigned int ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_18,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_18>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696CD88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_18,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_18>,unsigned int ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696CD88;
  a2[1] = v2;
  return result;
}

std::__shared_weak_count *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_18,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_18>,unsigned int ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(v1 + 24);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v1 + 16);
  p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
  do
    v5 = __ldxr(p_shared_weak_owners);
  while (__stxr(v5 + 1, p_shared_weak_owners));
  v6 = std::__shared_weak_count::lock(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (!v6)
    return 0;
  if (v3)
    v2 = (std::__shared_weak_count *)*(unsigned int *)(v3 + 168);
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v3)
      return v2;
    return 0;
  }
  if (!v3)
    return 0;
  return v2;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_18,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_18>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_18"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_18,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_18>,unsigned int ()(void)>::target_type()
{
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_17,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_17>,unsigned int ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_17,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_17>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696CD08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_17,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_17>,unsigned int ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696CD08;
  a2[1] = v2;
  return result;
}

std::__shared_weak_count *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_17,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_17>,unsigned int ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(v1 + 24);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v1 + 16);
  p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
  do
    v5 = __ldxr(p_shared_weak_owners);
  while (__stxr(v5 + 1, p_shared_weak_owners));
  v6 = std::__shared_weak_count::lock(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (!v6)
    return 0;
  if (v3)
    v2 = (std::__shared_weak_count *)*(unsigned int *)(v3 + 164);
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v3)
      return v2;
    return 0;
  }
  if (!v3)
    return 0;
  return v2;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_17,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_17>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_17"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_17,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_17>,unsigned int ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E698C6D8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E698C6D8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E698C6D8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B583E504(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E698C6D8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = AMCP::Core::Operation::call_function<double>((_QWORD *)(a1 + 8));
  a2[1] = 0;
  a2[2] = 0;
  *a2 = v4;
  a2[3] = 0;
  a2[4] = AMCP::Implementation::In_Place_Storage<double>::dispatch;
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIdEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t AMCP::Core::Operation::call_function<double>(_QWORD *a1)
{
  unint64_t v2;
  AMCP::Log::Scope_Registry *v3;
  AMCP::Log::Scope_Registry *v4;
  uint64_t v5;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  void *v10;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *exception;
  __int128 v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  std::string v20;
  std::runtime_error v21;
  std::runtime_error v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint8_t buf[8];
  __int16 v30;
  char *v31;
  __int16 v32;
  int v33;
  const char *v34;
  const char *v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = AMCP::Implementation::get_type_marker<std::function<double ()(void)>>();
  v3 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v2);
  if (!v3)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v11 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v13;
      v30 = 2080;
      v31 = "Operation.h";
      v32 = 1024;
      v33 = 154;
      _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v23 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = double, Argument_Types = <>]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v36 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v4 = v3;
  if (!*((_QWORD *)v3 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<double ()(void)>>(),
        (v3 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v4 + 7))(4, (uint64_t)v4 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v7 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v9;
      v30 = 2080;
      v31 = "Operation.h";
      v32 = 1024;
      v33 = 161;
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    v10 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v23 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = double, Argument_Types = <>]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v36 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v10, (uint64_t)buf);
  }
  v5 = *((_QWORD *)v3 + 3);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
}

void sub_1B583E9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_16>,double ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_16>,double ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696CC88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_16>,double ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696CC88;
  a2[1] = v2;
  return result;
}

double std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_16>,double ()(void)>::operator()(uint64_t a1)
{
  return AMCP::IO_Core::IOContext_Core::get_actual_sample_rate(*(AMCP::IO_Core::IOContext_Core **)(a1 + 8));
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_16>,double ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_16"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_16>,double ()(void)>::target_type()
{
}

double AMCP::IO_Core::IOContext_Core::get_actual_sample_rate(AMCP::IO_Core::IOContext_Core *this)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  double v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v17;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  void *exception;
  __int128 v21;
  uint64_t v22;
  uint64_t (**v23)();
  __int128 v24;
  uint64_t v25;
  std::string v26;
  std::logic_error v27;
  std::logic_error v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  uint8_t buf[8];
  _BYTE v36[10];
  __int16 v37;
  int v38;
  __int16 v39;
  _BYTE v40[14];
  const char *v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 16);
  if (!v1)
    return 0.0;
  v4 = *(_QWORD *)(v1 + 96);
  v3 = *(std::__shared_weak_count **)(v1 + 104);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v17 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = pthread_self();
      v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v19;
      *(_WORD *)v36 = 2080;
      *(_QWORD *)&v36[2] = "IOContext_Core.cpp";
      v37 = 1024;
      v38 = 874;
      v39 = 2080;
      *(_QWORD *)v40 = "not (m_inventory->get_master_timebase())";
      _os_log_error_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v34);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v26);
    std::logic_error::logic_error(&v27, &v26);
    v27.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v28, &v27);
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = -1;
    v28.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v29 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v28);
    *(_QWORD *)&v40[6] = "Sample_Rate AMCP::IO_Core::IOContext_Core::get_actual_sample_rate() const";
    v41 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
    v42 = 874;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
    v24 = v21;
    v25 = v22;
    v21 = 0uLL;
    v22 = 0;
    v23 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v23);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v8 = *((_QWORD *)this + 16);
  v9 = *(_QWORD *)(v8 + 96);
  v10 = *(std::__shared_weak_count **)(v8 + 104);
  *(_QWORD *)buf = v9;
  *(_QWORD *)v36 = v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = (*(double (**)(uint64_t))(*(_QWORD *)v9 + 152))(v9);
  if (v10)
  {
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v13;
}

void sub_1B583EEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v27 - 128);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6999720;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6999720;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E6999720;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B583F0B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E6999720;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  float v4;

  v2 = (_QWORD *)(a1 + 8);
  v4 = AMCP::Thing::convert_to<float>(a2);
  return AMCP::Core::Operation::call_function<void,float const&>(v2, (uint64_t)&v4);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_setterIfEEvRNS0_9OperationEEUlRKNS_5ThingEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

uint64_t AMCP::Core::Operation::call_function<void,float const&>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  AMCP::Log::Scope_Registry *v5;
  AMCP::Log::Scope_Registry *v6;
  uint64_t v7;
  NSObject *v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  void *v12;
  NSObject *v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  void *exception;
  __int128 v17;
  uint64_t v18;
  uint64_t (**v19)();
  __int128 v20;
  uint64_t v21;
  std::string v22;
  std::runtime_error v23;
  std::runtime_error v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint8_t buf[8];
  __int16 v32;
  char *v33;
  __int16 v34;
  int v35;
  const char *v36;
  const char *v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
  v5 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v4);
  if (!v5)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v13 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = pthread_self();
      v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v15;
      v32 = 2080;
      v33 = "Operation.h";
      v34 = 1024;
      v35 = 154;
      _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v22);
    std::runtime_error::runtime_error(&v23, &v22);
    std::runtime_error::runtime_error(&v24, &v23);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = -1;
    v24.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v25 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    v36 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const float &>]";
    v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v38 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v17);
    v20 = v17;
    v21 = v18;
    v17 = 0uLL;
    v18 = 0;
    v19 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v19);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v6 = v5;
  if (!*((_QWORD *)v5 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>(),
        (v5 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v6 + 7))(4, (uint64_t)v6 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v11;
      v32 = 2080;
      v33 = "Operation.h";
      v34 = 1024;
      v35 = 161;
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    v12 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v22);
    std::runtime_error::runtime_error(&v23, &v22);
    std::runtime_error::runtime_error(&v24, &v23);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = -1;
    v24.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v25 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    v36 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const float &>]";
    v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v38 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v17);
    v20 = v17;
    v21 = v18;
    v17 = 0uLL;
    v18 = 0;
    v19 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v19);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v12, (uint64_t)buf);
  }
  v7 = *((_QWORD *)v5 + 3);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

void sub_1B583F59C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_15>,void ()(float const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_15>,void ()(float const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696CC08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_15>,void ()(float const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696CC08;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_15>,void ()(float const&)>::operator()(AMCP::Log::Scope_Registry *a1, float *a2)
{
  float v2;
  float *v4;
  double v5;
  NSObject *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  void *exception;
  void *v10[2];
  uint64_t v11;
  uint64_t (**v12)();
  void *__p[2];
  uint64_t v14;
  std::string v15;
  std::logic_error v16;
  std::logic_error v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  uint8_t buf[8];
  __int16 v25;
  char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  _BYTE v30[22];
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  if (*a2 < 0.0 || v2 > 1.0)
  {
    v5 = v2;
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = pthread_self();
      v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v8;
      v25 = 2080;
      v26 = "IOContext_Core.cpp";
      v27 = 1024;
      v28 = 831;
      v29 = 2080;
      *(_QWORD *)v30 = "not (cycle_usage >= 0 and cycle_usage <= 1.0)";
      *(_WORD *)&v30[8] = 2048;
      *(double *)&v30[10] = v5;
      _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid cycle usage: %f", buf, 0x2Cu);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v23);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cycle usage: %f", (uint64_t)&v15, *(_QWORD *)&v5);
    std::logic_error::logic_error(&v16, &v15);
    v16.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v17, &v16);
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = -1;
    v17.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v18 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v17);
    *(_QWORD *)&v30[6] = "void AMCP::IO_Core::IOContext_Core::set_cycle_usage(float)";
    *(_QWORD *)&v30[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
    v31 = 831;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v10);
    *(_OWORD *)__p = *(_OWORD *)v10;
    v14 = v11;
    v10[0] = 0;
    v10[1] = 0;
    v11 = 0;
    v12 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v12);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v4 = (float *)*((_QWORD *)a1 + 1);
  v4[150] = v2;
  AMCP::IO_Core::IOContext_Core::maybe_enqueue_execution_context((AMCP::IO_Core::IOContext_Core *)v4);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_15>,void ()(float const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_15"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_15>,void ()(float const&)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69995A0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69995A0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E69995A0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B583FC00(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E69995A0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v4;

  result = AMCP::Core::Operation::call_function<float>((_QWORD *)(a1 + 8));
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)a2 = v4;
  *(_QWORD *)(a2 + 32) = AMCP::Implementation::In_Place_Storage<float>::dispatch;
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIfEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t AMCP::Core::Operation::call_function<float>(_QWORD *a1)
{
  unint64_t v2;
  AMCP::Log::Scope_Registry *v3;
  AMCP::Log::Scope_Registry *v4;
  uint64_t v5;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  void *v10;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *exception;
  __int128 v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  std::string v20;
  std::runtime_error v21;
  std::runtime_error v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint8_t buf[8];
  __int16 v30;
  char *v31;
  __int16 v32;
  int v33;
  const char *v34;
  const char *v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = AMCP::Implementation::get_type_marker<std::function<float ()(void)>>();
  v3 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v2);
  if (!v3)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v11 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v13;
      v30 = 2080;
      v31 = "Operation.h";
      v32 = 1024;
      v33 = 154;
      _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v23 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = float, Argument_Types = <>]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v36 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v4 = v3;
  if (!*((_QWORD *)v3 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<float ()(void)>>(),
        (v3 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v4 + 7))(4, (uint64_t)v4 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v7 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v9;
      v30 = 2080;
      v31 = "Operation.h";
      v32 = 1024;
      v33 = 161;
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    v10 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v23 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = float, Argument_Types = <>]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v36 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v10, (uint64_t)buf);
  }
  v5 = *((_QWORD *)v3 + 3);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
}

void sub_1B58400DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_14>,float ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_14>,float ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696CB88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_14>,float ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696CB88;
  a2[1] = v2;
  return result;
}

float std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_14>,float ()(void)>::operator()(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 8) + 600);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_14>,float ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_14"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_14>,float ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6999398;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6999398;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E6999398;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B58403E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E6999398;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = AMCP::Core::Operation::call_function<std::tuple<unsigned int,unsigned int>>((_QWORD *)(a1 + 8));
  a2[2] = 0;
  a2[3] = 0;
  *a2 = result;
  a2[1] = 0;
  a2[4] = (uint64_t)AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int>>::dispatch;
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterINSt3__15tupleIJjjEEEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t AMCP::Core::Operation::call_function<std::tuple<unsigned int,unsigned int>>(_QWORD *a1)
{
  unint64_t v2;
  AMCP::Log::Scope_Registry *v3;
  AMCP::Log::Scope_Registry *v4;
  uint64_t v5;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  void *v10;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *exception;
  __int128 v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  std::string v20;
  std::runtime_error v21;
  std::runtime_error v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint8_t buf[8];
  __int16 v30;
  char *v31;
  __int16 v32;
  int v33;
  const char *v34;
  const char *v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = AMCP::Implementation::get_type_marker<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>();
  v3 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v2);
  if (!v3)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v11 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v13;
      v30 = 2080;
      v31 = "Operation.h";
      v32 = 1024;
      v33 = 154;
      _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v23 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::tuple<unsigned i"
          "nt, unsigned int>, Argument_Types = <>]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v36 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v4 = v3;
  if (!*((_QWORD *)v3 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>(),
        (v3 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v4 + 7))(4, (uint64_t)v4 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v7 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v9;
      v30 = 2080;
      v31 = "Operation.h";
      v32 = 1024;
      v33 = 161;
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    v10 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v23 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::tuple<unsigned i"
          "nt, unsigned int>, Argument_Types = <>]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v36 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v10, (uint64_t)buf);
  }
  v5 = *((_QWORD *)v3 + 3);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
}

void sub_1B58408B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_13>,std::tuple<unsigned int,unsigned int> ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_13>,std::tuple<unsigned int,unsigned int> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696CB08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_13>,std::tuple<unsigned int,unsigned int> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696CB08;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_13>,std::tuple<unsigned int,unsigned int> ()(void)>::operator()(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 608);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_13>,std::tuple<unsigned int,unsigned int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_13"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_13>,std::tuple<unsigned int,unsigned int> ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6999110;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6999110;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E6999110;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5840BBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E6999110;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  int v4;

  v2 = (_QWORD *)(a1 + 8);
  v4 = AMCP::Thing::convert_to<unsigned int>(a2);
  return AMCP::Core::Operation::call_function<void,unsigned int const&>(v2, (uint64_t)&v4);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_setterIjEEvRNS0_9OperationEEUlRKNS_5ThingEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

uint64_t AMCP::Core::Operation::call_function<void,unsigned int const&>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  AMCP::Log::Scope_Registry *v5;
  AMCP::Log::Scope_Registry *v6;
  uint64_t v7;
  NSObject *v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  void *v12;
  NSObject *v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  void *exception;
  __int128 v17;
  uint64_t v18;
  uint64_t (**v19)();
  __int128 v20;
  uint64_t v21;
  std::string v22;
  std::runtime_error v23;
  std::runtime_error v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint8_t buf[8];
  __int16 v32;
  char *v33;
  __int16 v34;
  int v35;
  const char *v36;
  const char *v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = AMCP::Implementation::get_type_marker<std::function<void ()(unsigned int const&)>>();
  v5 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v4);
  if (!v5)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v13 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = pthread_self();
      v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v15;
      v32 = 2080;
      v33 = "Operation.h";
      v34 = 1024;
      v35 = 154;
      _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v22);
    std::runtime_error::runtime_error(&v23, &v22);
    std::runtime_error::runtime_error(&v24, &v23);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = -1;
    v24.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v25 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    v36 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const unsigned int &>]";
    v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v38 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v17);
    v20 = v17;
    v21 = v18;
    v17 = 0uLL;
    v18 = 0;
    v19 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v19);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v6 = v5;
  if (!*((_QWORD *)v5 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(unsigned int const&)>>(),
        (v5 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v6 + 7))(4, (uint64_t)v6 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v11;
      v32 = 2080;
      v33 = "Operation.h";
      v34 = 1024;
      v35 = 161;
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    v12 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v22);
    std::runtime_error::runtime_error(&v23, &v22);
    std::runtime_error::runtime_error(&v24, &v23);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = -1;
    v24.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v25 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    v36 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const unsigned int &>]";
    v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v38 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v17);
    v20 = v17;
    v21 = v18;
    v17 = 0uLL;
    v18 = 0;
    v19 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v19);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v12, (uint64_t)buf);
  }
  v7 = *((_QWORD *)v5 + 3);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

void sub_1B58410A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_12>,void ()(unsigned int const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_12>,void ()(unsigned int const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696CA88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_12>,void ()(unsigned int const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696CA88;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_12>,void ()(unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  AMCP::Log::Scope_Registry *v5;
  AMCP::Log::Scope_Registry *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  int v15;
  void *exception;
  NSObject *v17;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  int v20;
  void *v21;
  void *v22[2];
  uint64_t v23;
  uint64_t (**v24)();
  void *__p[2];
  uint64_t v26;
  std::string v27;
  std::logic_error v28;
  std::logic_error v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char v35;
  uint8_t buf[72];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_DWORD *)(v3 + 612);
  v5 = (AMCP::Log::Scope_Registry *)*(unsigned int *)(v3 + 608);
  v6 = v5;
  if (*a2 < v5 || (v6 = (AMCP::Log::Scope_Registry *)*(unsigned int *)(v3 + 612), v2 > v4))
    v2 = v6;
  if (v2 < v5)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      v15 = *(_DWORD *)(v3 + 608);
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v14;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "IOContext_Core.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 847;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "not (buffer_frame_size.get() >= std::get<AMCP::Min_Max_Index::min>(m_cached_min_max_buffer_frame_size))";
      *(_WORD *)&buf[34] = 2048;
      *(_QWORD *)&buf[36] = v2;
      *(_WORD *)&buf[44] = 1024;
      *(_DWORD *)&buf[46] = v15;
      _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid buffer size: %lld - too small (min %u)", buf, 0x32u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v35);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid buffer size: %lld - too small (min %u)", (uint64_t)&v27, v2, *(unsigned int *)(v3 + 608));
    std::logic_error::logic_error(&v28, &v27);
    v28.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v29, &v28);
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = -1;
    v29.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v30 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v29);
    *(_QWORD *)&buf[32] = "void AMCP::IO_Core::IOContext_Core::set_buffer_frame_size(const Sample_Time &)";
    *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
    *(_DWORD *)&buf[48] = 847;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v22);
    *(_OWORD *)__p = *(_OWORD *)v22;
    v26 = v23;
    v22[0] = 0;
    v22[1] = 0;
    v23 = 0;
    v24 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v24);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  if (v2 > v4)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v17 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = pthread_self();
      v19 = pthread_mach_thread_np(v18);
      v20 = *(_DWORD *)(v3 + 612);
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v19;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "IOContext_Core.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 848;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "not (buffer_frame_size.get() <= std::get<AMCP::Min_Max_Index::max>(m_cached_min_max_buffer_frame_size))";
      *(_WORD *)&buf[34] = 2048;
      *(_QWORD *)&buf[36] = v2;
      *(_WORD *)&buf[44] = 1024;
      *(_DWORD *)&buf[46] = v20;
      _os_log_error_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid buffer size: %lld - too large (max %u)", buf, 0x32u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v35);
    v21 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid buffer size: %lld - too large (max %u)", (uint64_t)&v27, v2, *(unsigned int *)(v3 + 612));
    std::logic_error::logic_error(&v28, &v27);
    v28.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v29, &v28);
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = -1;
    v29.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v30 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v29);
    *(_QWORD *)&buf[32] = "void AMCP::IO_Core::IOContext_Core::set_buffer_frame_size(const Sample_Time &)";
    *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
    *(_DWORD *)&buf[48] = 848;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v22);
    *(_OWORD *)__p = *(_OWORD *)v22;
    v26 = v23;
    v22[0] = 0;
    v22[1] = 0;
    v23 = 0;
    v24 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v24);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v21, (uint64_t)buf);
  }
  if (round(*(double *)(v3 + 592)) != (double)v2)
  {
    *(double *)(v3 + 592) = (double)v2;
    AMCP::IO_Core::IOContext_Core::maybe_enqueue_execution_context((AMCP::IO_Core::IOContext_Core *)v3);
    v29.__vftable = (std::logic_error_vtbl *)0x676C6F626673697ALL;
    LODWORD(v29.__imp_.__imp_) = 0;
    memset(buf, 0, 32);
    *(_DWORD *)buf = v2;
    *(_QWORD *)&buf[32] = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
    v7 = *(_QWORD *)(v3 + 32);
    v8 = *(std::__shared_weak_count **)(v3 + 40);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      (*(void (**)(uint64_t, _QWORD, std::logic_error *, uint8_t *))(*(_QWORD *)v7 + 48))(v7, *(unsigned int *)(v3 + 8), &v29, buf);
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD, std::logic_error *, uint8_t *))(*(_QWORD *)v7 + 48))(v7, *(unsigned int *)(v3 + 8), &v29, buf);
    }
    if (*(_QWORD *)&buf[32])
      (*(void (**)(_BOOL8, uint64_t, uint64_t, uint64_t *))&buf[32])(0, (uint64_t)buf, 0, 0);
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_12>,void ()(unsigned int const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_12"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_12>,void ()(unsigned int const&)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E699FE18;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E699FE18;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E699FE18;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5841A84(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E699FE18;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  double result;

  v3 = AMCP::Core::Operation::call_function<unsigned int>((_QWORD *)(a1 + 8));
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)a2 = v3;
  *(_QWORD *)(a2 + 32) = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIjEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_11>,unsigned int ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_11>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696CA08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_11>,unsigned int ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696CA08;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_11>,unsigned int ()(void)>::operator()(uint64_t a1)
{
  return vcvtmd_s64_f64(*(double *)(*(_QWORD *)(a1 + 8) + 592));
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_11>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_11"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_11>,unsigned int ()(void)>::target_type()
{
}

uint64_t AMCP::Core::Operation::Operation(uint64_t result, int *a2)
{
  int v2;
  int v3;
  int v4;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  NSObject **v10;
  __int16 v11;
  char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_DWORD *)(result + 32) = 1065353216;
  v2 = *a2;
  *(_DWORD *)(result + 40) = *a2;
  v3 = a2[1];
  *(_DWORD *)(result + 44) = v3;
  v4 = a2[2];
  *(_DWORD *)(result + 48) = v4;
  if (v2 == 707406378 || v3 == 707406378 || v4 == -1)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    v7 = *v10;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v10);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      v11 = 2080;
      v12 = "Operation.h";
      v13 = 1024;
      v14 = 127;
      v15 = 2080;
      v16 = "!m_address.has_wildcards()";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return result;
}

void sub_1B5841D94(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AMCP::Core::Operation>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E699FA88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Core::Operation>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E699FA88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::Core::Operation>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 24);
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_10>,void ()(AMCP::Resume_Behavior)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_10>,void ()(AMCP::Resume_Behavior)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696C978;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_10>,void ()(AMCP::Resume_Behavior)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696C978;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_10>,void ()(AMCP::Resume_Behavior)>::operator()(uint64_t a1, int *a2)
{
  int v2;
  uint64_t v3;
  _BOOL4 v4;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v3 + 200));
  v4 = AMCP::IO_Core::IOContext_Core::resume(v3, v2);
  std::mutex::unlock((std::mutex *)(v3 + 200));
  if (v4)
    AMCP::IO_Core::IO_Thread::wait_for_start(*(AMCP::IO_Core::IO_Thread **)(*(_QWORD *)(v3 + 160) + 32));
}

void sub_1B5841EC8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_10>,void ()(AMCP::Resume_Behavior)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_10"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_10>,void ()(AMCP::Resume_Behavior)>::target_type()
{
}

BOOL AMCP::IO_Core::IOContext_Core::resume(uint64_t a1, int a2)
{
  _BOOL8 v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *v7;
  unint64_t v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  int v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  std::string *v16;
  int v17;
  void *p_p;
  unsigned int v19;
  std::__shared_weak_count *size;
  unint64_t *v21;
  unint64_t v22;
  unsigned int *v23;
  int v24;
  unsigned int v25;
  char v26;
  unsigned int *v28;
  unsigned int *v29;
  NSObject *v30;
  _opaque_pthread_t *v31;
  mach_port_t v32;
  void *exception;
  __int128 v34;
  uint64_t v35;
  void *__p;
  __int128 v37;
  uint64_t v38;
  std::string v39;
  std::logic_error v40;
  std::string v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char v46;
  uint8_t buf[8];
  _BYTE v48[10];
  __int16 v49;
  int v50;
  __int16 v51;
  _BYTE v52[14];
  _BYTE v53[12];
  unsigned int v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  AMCP::Logging_Settings::instance((AMCP::Logging_Settings *)a1);
  if (HIBYTE(AMCP::Logging_Settings::instance(void)::s_instance))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v5 = *(std::__shared_weak_count **)v48;
    v6 = **(NSObject ***)buf;
    if (*(_QWORD *)v48)
    {
      v7 = (unint64_t *)(*(_QWORD *)v48 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v4 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
    if (v4)
    {
      v9 = pthread_self();
      v10 = pthread_mach_thread_np(v9);
      v11 = *(_DWORD *)(a1 + 8);
      v12 = *(std::__shared_weak_count **)(a1 + 24);
      if (v12)
      {
        v13 = *(_QWORD *)(a1 + 16);
        p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
        do
          v15 = __ldxr(p_shared_weak_owners);
        while (__stxr(v15 + 1, p_shared_weak_owners));
        v39.__r_.__value_.__r.__words[0] = 0;
        v39.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v12);
        if (v39.__r_.__value_.__l.__size_)
          v39.__r_.__value_.__r.__words[0] = v13;
        else
          v13 = 0;
      }
      else
      {
        v13 = 0;
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = 0uLL;
      }
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = &v41;
      else
        v16 = (std::string *)v41.__r_.__value_.__r.__words[0];
      v17 = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 32));
      std::string::basic_string[abi:ne180100]<0>(&__p, off_1E699CFF0[v17]);
      if (v37 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      v19 = atomic_load((unsigned int *)(a1 + 168));
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v10;
      *(_WORD *)v48 = 2080;
      *(_QWORD *)&v48[2] = "IOContext_Core.cpp";
      v49 = 1024;
      v50 = 925;
      v51 = 1024;
      *(_DWORD *)v52 = v11;
      *(_WORD *)&v52[4] = 2080;
      *(_QWORD *)&v52[6] = v16;
      *(_WORD *)v53 = 2080;
      *(_QWORD *)&v53[2] = p_p;
      *(_WORD *)&v53[10] = 1024;
      v54 = v19;
      _os_log_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_INFO, "%6u %32s:%-5d IOContext_Core(%d|\"%s\")::resume: current(%s)  pause_count(%d)", buf, 0x38u);
      if (SHIBYTE(v37) < 0)
        operator delete(__p);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      size = (std::__shared_weak_count *)v39.__r_.__value_.__l.__size_;
      if (v39.__r_.__value_.__l.__size_)
      {
        v21 = (unint64_t *)(v39.__r_.__value_.__l.__size_ + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (v12)
        std::__shared_weak_count::__release_weak(v12);
    }
  }
  v23 = (unsigned int *)(a1 + 168);
  v24 = atomic_load((unsigned int *)(a1 + 168));
  if (v24 < 1)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v30 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v31 = pthread_self();
      v32 = pthread_mach_thread_np(v31);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v32;
      *(_WORD *)v48 = 2080;
      *(_QWORD *)&v48[2] = "IOContext_Core.cpp";
      v49 = 1024;
      v50 = 928;
      v51 = 2080;
      *(_QWORD *)v52 = "not (m_pause_count >= 1)";
      _os_log_error_impl(&dword_1B57BA000, v30, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid pause count", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v46);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid pause count", (uint64_t)&v39);
    std::logic_error::logic_error(&v40, &v39);
    v40.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v41, &v40);
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = -1;
    v41.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
    v41.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v41);
    *(_QWORD *)&v52[6] = "BOOL AMCP::IO_Core::IOContext_Core::resume(Resume_Behavior)";
    *(_QWORD *)v53 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
    *(_DWORD *)&v53[8] = 928;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v34);
    v37 = v34;
    v38 = v35;
    v34 = 0uLL;
    v35 = 0;
    __p = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&__p);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  do
    v25 = __ldaxr(v23);
  while (__stlxr(v25 - 1, v23));
  if (v25 != 1)
    return 0;
  if (a2 || (v28 = *(unsigned int **)(a1 + 176), v29 = *(unsigned int **)(a1 + 184), v28 == v29))
  {
    v26 = 0;
  }
  else
  {
    do
      AMCP::IO_Core::IOContext_Core::start_internal((_QWORD *)a1, *v28++, 0);
    while (v28 != v29);
  }
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a1 + 176);
  return v26 != 0;
}

void sub_1B58423CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint8_t buf,int a39,__int16 a40,__int16 a41,int a42,__int16 a43,__int16 a44,__int16 a45,int a46,uint64_t a47)
{
  std::__shared_weak_count *v47;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v47)
    std::__shared_weak_count::__release_weak(v47);
  _Unwind_Resume(a1);
}

void AMCP::IO_Core::`anonymous namespace'::get_node_uid(std::string *a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
    }
    else
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 24);
      a1->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
    }
  }
  else
  {
    a1->__r_.__value_.__r.__words[0] = 0;
    a1->__r_.__value_.__l.__size_ = 0;
    a1->__r_.__value_.__r.__words[2] = 0;
  }
}

void AMCP::IO_Core::IOContext_Core::start_internal(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  AMCP::Log::Scope_Registry *v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  AMCP::Log::Scope_Registry *v36;
  int v37;
  pthread_cond_t **v38;
  int v39;
  _BOOL4 v40;
  pthread_t *v41;
  std::thread **v42;
  AMCP::Log::Scope_Registry *v43;
  uint64_t v44;
  std::string::size_type v45;
  std::string::size_type v46;
  unint64_t *v47;
  unint64_t v48;
  std::string *v49;
  uint64_t v50;
  std::thread *v51;
  std::__thread_struct *v52;
  uint64_t v53;
  int v54;
  std::__shared_weak_count *v55;
  NSObject *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _opaque_pthread_t *v62;
  mach_port_t v63;
  NSObject *v64;
  _opaque_pthread_t *v65;
  mach_port_t v66;
  void *exception;
  NSObject *v68;
  _opaque_pthread_t *v69;
  mach_port_t v70;
  void *v71;
  __int128 v72;
  uint64_t v73;
  uint64_t (**v74)();
  __int128 v75;
  uint64_t v76;
  std::string v77;
  std::logic_error v78;
  char v79;
  _BYTE buf[24];
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  std::string v85;
  __int128 v86;
  const char *v87;
  int v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  if (a2)
    goto LABEL_34;
  v6 = (std::__shared_weak_count *)a1[3];
  if (!v6)
  {
    v74 = 0;
    *(_QWORD *)&v75 = 0;
    goto LABEL_28;
  }
  v7 = a1[2];
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  v74 = 0;
  *(_QWORD *)&v75 = std::__shared_weak_count::lock(v6);
  if (!(_QWORD)v75)
  {
    std::__shared_weak_count::__release_weak(v6);
    goto LABEL_28;
  }
  v74 = (uint64_t (**)())v7;
  std::__shared_weak_count::__release_weak(v6);
  if (!v7)
  {
LABEL_28:
    v21 = 1;
    goto LABEL_29;
  }
  if (*(char *)(v7 + 47) < 0)
    std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v7 + 24), *(_QWORD *)(v7 + 32));
  else
    v85 = *(std::string *)(v7 + 24);
  v10 = a1[4];
  v11 = (std::__shared_weak_count *)a1[5];
  *(_QWORD *)buf = v10;
  *(_QWORD *)&buf[8] = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v17 = (AMCP::Log::Scope_Registry *)(*(_QWORD *(**)(std::string *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v14 + 16))(&v77, v14, &v85);
  if (*(_QWORD *)(v77.__r_.__value_.__r.__words[0] + 248))
  {
    size = (std::__shared_weak_count *)v77.__r_.__value_.__l.__size_;
    if (v77.__r_.__value_.__l.__size_)
    {
      v19 = (unint64_t *)(v77.__r_.__value_.__l.__size_ + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    goto LABEL_28;
  }
  AMCP::Log::Scope_Registry::get(v17);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v55 = *(std::__shared_weak_count **)&buf[8];
  v56 = **(NSObject ***)buf;
  if (*(_QWORD *)&buf[8])
  {
    v57 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
  {
    v62 = pthread_self();
    v63 = pthread_mach_thread_np(v62);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v63;
    *(_WORD *)&buf[8] = 2080;
    *(_QWORD *)&buf[10] = "IOContext_Core.cpp";
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = 522;
    _os_log_debug_impl(&dword_1B57BA000, v56, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Attempt to start an IO Context that has no IO Proc assigned", buf, 0x18u);
  }
  v59 = (std::__shared_weak_count *)v77.__r_.__value_.__l.__size_;
  if (v77.__r_.__value_.__l.__size_)
  {
    v60 = (unint64_t *)(v77.__r_.__value_.__l.__size_ + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  v21 = 0;
  if (!(_QWORD)v75)
    goto LABEL_33;
LABEL_29:
  v22 = (unint64_t *)(v75 + 8);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v75 + 16))(v75);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v75);
    if (!v21)
      return;
  }
  else
  {
LABEL_33:
    if (!v21)
      return;
  }
LABEL_34:
  if (caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(*(_QWORD *)(a1[20] + 32)) == 2)
    goto LABEL_53;
  AMCP::IO_Core::IOContext_Core::create_manifest((AMCP::IO_Core::IOContext_Core *)&v74, (uint64_t)a1);
  *(_OWORD *)buf = *(_OWORD *)(a1[20] + 16);
  std::string::basic_string[abi:ne180100]<0>(&v85, "");
  v24 = AMCP::IO_Core::Play_State_Manager::start((uint64_t *)buf, a2, (uint64_t *)&v85);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  v25 = AMCP::IO_Core::IOContext_Core::enqueue_manifest_sync((uint64_t)a1, (uint64_t)&v74, v24, a2 | 0x100000000, a3);
  if (v25 == 1)
  {
    AMCP::IO_Core::IOContext_Core::pause((uint64_t)a1, 0);
    v26 = (uint64_t)v74[9];
    v27 = (std::__shared_weak_count *)v74[10];
    v85.__r_.__value_.__r.__words[0] = v26;
    v85.__r_.__value_.__l.__size_ = (std::string::size_type)v27;
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    AMCP::Graph::Manifest_Inventory::report_thread_error(*(_QWORD *)(v26 + 192));
    if (v27)
    {
      v30 = (unint64_t *)&v27->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  v32 = (std::__shared_weak_count *)v75;
  if ((_QWORD)v75)
  {
    v33 = (unint64_t *)(v75 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v25 != 1)
  {
LABEL_53:
    v35 = (uint64_t *)a1[20];
    std::string::basic_string[abi:ne180100]<0>(&v85, "IO_Thread");
    v36 = (AMCP::Log::Scope_Registry *)AMCP::IO_Core::Play_State_Manager::start(v35 + 2, a2, (uint64_t *)&v85);
    v37 = (int)v36;
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    if (!v37)
    {
      AMCP::Log::Scope_Registry::get(v36);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v85, "com.apple.coreaudio", "AMCP");
      v64 = *(NSObject **)v85.__r_.__value_.__l.__data_;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v85);
      if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
      {
        v65 = pthread_self();
        v66 = pthread_mach_thread_np(v65);
        LODWORD(v85.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(v85.__r_.__value_.__r.__words[0]) = v66;
        LOWORD(v85.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v85.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"IO_Thread.cpp";
        WORD1(v85.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v85.__r_.__value_.__r.__words[2]) = 59;
        LOWORD(v86) = 2080;
        *(_QWORD *)((char *)&v86 + 2) = "not (new_state == Transport_State::on or new_state == Transport_State::prewarm)";
        _os_log_error_impl(&dword_1B57BA000, v64, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s IO_Thread::start: Start failed to change the prewarming state in a reasonable way", (uint8_t *)&v85, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v79);
      exception = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"IO_Thread::start: Start failed to change the prewarming state in a reasonable way", (uint64_t)&v77);
      std::logic_error::logic_error(&v78, &v77);
      v78.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error((std::logic_error *)buf, &v78);
      v81 = 0;
      v82 = 0;
      v83 = 0;
      v84 = -1;
      *(_QWORD *)buf = off_1E69A1208;
      *(_QWORD *)&buf[16] = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v85, (uint64_t)buf);
      *((_QWORD *)&v86 + 1) = "void AMCP::IO_Core::IO_Thread::start(Play_State_Manager::Play_Request)";
      v87 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IO_Thread.cpp";
      v88 = 59;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v72);
      v74 = off_1E69A20A0;
      v75 = v72;
      v76 = v73;
      v72 = 0uLL;
      v73 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v85, (uint64_t)&v74);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)&v85);
    }
    v38 = (pthread_cond_t **)(v35 + 4);
    v39 = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(v35[4]);
    if (v35[3])
    {
      v40 = 1;
      if (v39)
      {
LABEL_71:
        if (v37 != caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)*v38))
          AMCP::IO_Core::Thread_Control_State::set_state(*v38, v37);
        return;
      }
    }
    else
    {
      v40 = v35[2] != 0;
      if (v39)
        goto LABEL_71;
    }
    if (!v40)
      goto LABEL_71;
    v42 = (std::thread **)(v35 + 6);
    v41 = (pthread_t *)v35[6];
    if (v41)
    {
      v43 = (AMCP::Log::Scope_Registry *)pthread_kill(*v41, 0);
      if ((_DWORD)v43 != 3)
      {
        AMCP::Log::Scope_Registry::get(v43);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v85, "com.apple.coreaudio", "AMCP");
        v68 = *(NSObject **)v85.__r_.__value_.__l.__data_;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v85);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
        {
          v69 = pthread_self();
          v70 = pthread_mach_thread_np(v69);
          LODWORD(v85.__r_.__value_.__l.__data_) = 67109890;
          HIDWORD(v85.__r_.__value_.__r.__words[0]) = v70;
          LOWORD(v85.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v85.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"IO_Thread.cpp";
          WORD1(v85.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v85.__r_.__value_.__r.__words[2]) = 66;
          LOWORD(v86) = 2080;
          *(_QWORD *)((char *)&v86 + 2) = "not (m_thread.operator BOOL() ? thread_has_finished(*m_thread) : true)";
          _os_log_error_impl(&dword_1B57BA000, v68, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Trying to start an IO thread whose thread already exists", (uint8_t *)&v85, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v79);
        v71 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Trying to start an IO thread whose thread already exists", (uint64_t)&v77);
        std::logic_error::logic_error(&v78, &v77);
        v78.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error((std::logic_error *)buf, &v78);
        v81 = 0;
        v82 = 0;
        v83 = 0;
        v84 = -1;
        *(_QWORD *)buf = off_1E69A1208;
        *(_QWORD *)&buf[16] = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v85, (uint64_t)buf);
        *((_QWORD *)&v86 + 1) = "void AMCP::IO_Core::IO_Thread::start(Play_State_Manager::Play_Request)";
        v87 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IO_Thread.cpp";
        v88 = 66;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v72);
        v74 = off_1E69A20A0;
        v75 = v72;
        v76 = v73;
        v72 = 0uLL;
        v73 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v85, (uint64_t)&v74);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v71, (uint64_t)&v85);
      }
      if (*v42)
        std::thread::join(*v42);
    }
    v44 = *v35;
    v46 = v35[4];
    v45 = v35[5];
    if (v45)
    {
      v47 = (unint64_t *)(v45 + 8);
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E69950D0;
    v85.__r_.__value_.__l.__size_ = v46;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v85.__r_.__value_.__r.__words[2] = v45;
    *(_QWORD *)&v86 = &v85;
    std::function<void ()(void)>::operator=((_QWORD *)(v44 + 608), (uint64_t)&v85);
    v49 = (std::string *)v86;
    if ((std::string *)v86 == &v85)
    {
      v50 = 4;
      v49 = &v85;
    }
    else
    {
      if (!(_QWORD)v86)
        goto LABEL_75;
      v50 = 5;
    }
    (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_75:
    AMCP::IO_Core::Thread_Control_State::set_state((pthread_cond_t *)v35[4], v37);
    LOWORD(v77.__r_.__value_.__l.__data_) = *((_WORD *)v35 + 30);
    v77.__r_.__value_.__s.__data_[2] = *((_BYTE *)v35 + 62);
    v51 = (std::thread *)operator new();
    v52 = (std::__thread_struct *)operator new();
    std::__thread_struct::__thread_struct(v52);
    v53 = operator new();
    *(_QWORD *)v53 = v52;
    *(_QWORD *)(v53 + 8) = v35;
    *(_QWORD *)(v53 + 16) = v38;
    *(_WORD *)(v53 + 24) = v77.__r_.__value_.__l.__data_;
    *(_BYTE *)(v53 + 26) = v77.__r_.__value_.__s.__data_[2];
    v74 = (uint64_t (**)())v53;
    v54 = pthread_create(&v51->__t_, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_1>>, (void *)v53);
    if (v54)
    {
      std::__throw_system_error(v54, "thread constructor failed");
      __break(1u);
    }
    else
    {
      v74 = 0;
      std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_1>>::~unique_ptr[abi:ne180100]((uint64_t **)&v74);
      std::unique_ptr<std::thread>::reset[abi:ne180100]((std::thread **)v35 + 6, v51);
    }
  }
}

void sub_1B5842FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void AMCP::IO_Core::IOContext_Core::create_manifest(AMCP::IO_Core::IOContext_Core *this, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  std::string v33;
  uint64_t v34;
  std::__shared_weak_count *v35;

  v3 = *(std::__shared_weak_count **)(a2 + 24);
  if (!v3)
  {
    v8 = 0;
    v34 = 0;
    v35 = 0;
    goto LABEL_10;
  }
  v5 = *(_QWORD *)(a2 + 16);
  p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  v34 = 0;
  v8 = std::__shared_weak_count::lock(v3);
  v35 = v8;
  if (!v8)
  {
    std::__shared_weak_count::__release_weak(v3);
LABEL_10:
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    if (!v8)
      return;
    goto LABEL_42;
  }
  v34 = v5;
  std::__shared_weak_count::__release_weak(v3);
  if (!v5)
    goto LABEL_10;
  if (*(char *)(v5 + 47) < 0)
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(v5 + 24), *(_QWORD *)(v5 + 32));
  else
    v33 = *(std::string *)(v5 + 24);
  if (atomic_load((unsigned int *)(a2 + 168)))
  {
    v31 = 0;
    v32 = 0;
  }
  else
  {
    v10 = *(std::__shared_weak_count **)(a2 + 136);
    v31 = *(_QWORD *)(a2 + 128);
    v32 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
  }
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(std::__shared_weak_count **)(a2 + 40);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  (*(void (**)(uint64_t, std::string *, uint64_t *))(*(_QWORD *)v13 + 40))(v13, &v33, &v31);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v19 = *(_OWORD *)(*(_QWORD *)this + 72);
  v20 = *(_QWORD *)(*(_QWORD *)this + 80);
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(std::__shared_weak_count **)(a2 + 136);
  *(_OWORD *)(a2 + 128) = v19;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v32;
  if (v32)
  {
    v27 = (unint64_t *)&v32->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  v8 = v35;
  if (v35)
  {
LABEL_42:
    v29 = (unint64_t *)&v8->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1B58434DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t AMCP::IO_Core::IOContext_Core::enqueue_manifest_sync(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unsigned int *v15;
  uint64_t v16;
  int *v17;
  uint64_t *v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _QWORD block[5];

  v23 = a4;
  v22 = a3;
  v21 = a5;
  v20 = 0;
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v13, *(_QWORD *)(a1 + 48), *(std::__shared_weak_count **)(a1 + 56));
  v15 = &v20;
  v16 = a2;
  v17 = &v22;
  v18 = &v23;
  v19 = &v21;
  v7 = atomic_load((unsigned __int8 *)(a1 + 304));
  if ((v7 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(a1 + 305));
  v8 = *(NSObject **)(a1 + 272);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN10applesauce8dispatch2v19sync_implIRZN4AMCP7IO_Core14IOContext_Core21enqueue_manifest_syncERKNSt3__110shared_ptrINS3_5Graph8ManifestEEENS3_15Transport_StateENS6_8optionalINS4_18Play_State_Manager12Play_RequestEEEyE3__0EEvP16dispatch_queue_sOT_NS6_17integral_constantIbLb1EEE_block_invoke;
  block[3] = &__block_descriptor_tmp_324;
  block[4] = &v13;
  dispatch_sync(v8, block);
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v20;
}

void AMCP::IO_Core::IOContext_Core::pause(uint64_t a1, int a2)
{
  _BOOL8 v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *v7;
  unint64_t v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  int v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  std::string *v16;
  int v17;
  void *p_p;
  unsigned int v19;
  std::__shared_weak_count *size;
  unint64_t *v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  NSObject **v32;
  int *v33;
  int *v34;
  AMCP::Log::Scope_Registry *v35;
  void *v36;
  int *v37;
  int *v38;
  int *v39;
  NSObject *v40;
  _opaque_pthread_t *v41;
  mach_port_t v42;
  void *exception;
  NSObject *v44;
  _opaque_pthread_t *v45;
  mach_port_t v46;
  void *v47;
  NSObject *v48;
  _opaque_pthread_t *v49;
  mach_port_t v50;
  void *v51;
  NSObject *v52;
  _opaque_pthread_t *v53;
  mach_port_t v54;
  void *v55;
  __int128 v56;
  uint64_t v57;
  void *__p;
  __int128 v59;
  uint64_t v60;
  std::string v61;
  std::logic_error v62;
  std::string v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char v68;
  uint8_t buf[8];
  __int128 v70;
  __int16 v71;
  _BYTE v72[14];
  _BYTE v73[12];
  unsigned int v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  AMCP::Logging_Settings::instance((AMCP::Logging_Settings *)a1);
  if (HIBYTE(AMCP::Logging_Settings::instance(void)::s_instance))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v5 = (std::__shared_weak_count *)v70;
    v6 = **(NSObject ***)buf;
    if ((_QWORD)v70)
    {
      v7 = (unint64_t *)(v70 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v4 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
    if (v4)
    {
      v9 = pthread_self();
      v10 = pthread_mach_thread_np(v9);
      v11 = *(_DWORD *)(a1 + 8);
      v12 = *(std::__shared_weak_count **)(a1 + 24);
      if (v12)
      {
        v13 = *(_QWORD *)(a1 + 16);
        p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
        do
          v15 = __ldxr(p_shared_weak_owners);
        while (__stxr(v15 + 1, p_shared_weak_owners));
        v61.__r_.__value_.__r.__words[0] = 0;
        v61.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v12);
        if (v61.__r_.__value_.__l.__size_)
          v61.__r_.__value_.__r.__words[0] = v13;
        else
          v13 = 0;
      }
      else
      {
        v13 = 0;
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = 0uLL;
      }
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = &v63;
      else
        v16 = (std::string *)v63.__r_.__value_.__r.__words[0];
      v17 = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 32));
      std::string::basic_string[abi:ne180100]<0>(&__p, off_1E699CFF0[v17]);
      if (v59 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      v19 = atomic_load((unsigned int *)(a1 + 168));
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v10;
      LOWORD(v70) = 2080;
      *(_QWORD *)((char *)&v70 + 2) = "IOContext_Core.cpp";
      WORD5(v70) = 1024;
      HIDWORD(v70) = 886;
      v71 = 1024;
      *(_DWORD *)v72 = v11;
      *(_WORD *)&v72[4] = 2080;
      *(_QWORD *)&v72[6] = v16;
      *(_WORD *)v73 = 2080;
      *(_QWORD *)&v73[2] = p_p;
      *(_WORD *)&v73[10] = 1024;
      v74 = v19;
      _os_log_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_INFO, "%6u %32s:%-5d IOContext_Core(%d|\"%s\")::pause: current(%s)  pause_count(%d)", buf, 0x38u);
      if (SHIBYTE(v59) < 0)
        operator delete(__p);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      size = (std::__shared_weak_count *)v61.__r_.__value_.__l.__size_;
      if (v61.__r_.__value_.__l.__size_)
      {
        v21 = (unint64_t *)(v61.__r_.__value_.__l.__size_ + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (v12)
        std::__shared_weak_count::__release_weak(v12);
    }
  }
  v23 = (unsigned int *)(a1 + 168);
  v24 = atomic_load((unsigned int *)(a1 + 168));
  if ((v24 & 0x80000000) != 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v40 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      v41 = pthread_self();
      v42 = pthread_mach_thread_np(v41);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v42;
      LOWORD(v70) = 2080;
      *(_QWORD *)((char *)&v70 + 2) = "IOContext_Core.cpp";
      WORD5(v70) = 1024;
      HIDWORD(v70) = 888;
      v71 = 2080;
      *(_QWORD *)v72 = "not (m_pause_count >= 0)";
      _os_log_error_impl(&dword_1B57BA000, v40, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid pause count", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v68);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid pause count", (uint64_t)&v61);
    std::logic_error::logic_error(&v62, &v61);
    v62.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)&v63, &v62);
    v64 = 0;
    v65 = 0;
    v66 = 0;
    v67 = -1;
    v63.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
    v63.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v63);
    *(_QWORD *)&v72[6] = "void AMCP::IO_Core::IOContext_Core::pause(Pause_Behavior)";
    *(_QWORD *)v73 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
    *(_DWORD *)&v73[8] = 888;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v56);
    v59 = v56;
    v60 = v57;
    v56 = 0uLL;
    v57 = 0;
    __p = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&__p);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  do
    v25 = __ldaxr(v23);
  while (__stlxr(v25 + 1, v23));
  if (!v25)
  {
    v26 = *(_QWORD *)(a1 + 128);
    if (v26)
    {
      v28 = *(_QWORD *)(v26 + 96);
      v27 = *(std::__shared_weak_count **)(v26 + 104);
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v30 = __ldxr(p_shared_owners);
        while (__stxr(v30 + 1, p_shared_owners));
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      if (!v28)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v48 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
        {
          v49 = pthread_self();
          v50 = pthread_mach_thread_np(v49);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v50;
          LOWORD(v70) = 2080;
          *(_QWORD *)((char *)&v70 + 2) = "IOContext_Core.cpp";
          WORD5(v70) = 1024;
          HIDWORD(v70) = 894;
          v71 = 2080;
          *(_QWORD *)v72 = "not (m_inventory->get_master_timebase())";
          _os_log_error_impl(&dword_1B57BA000, v48, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v68);
        v51 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v61);
        std::logic_error::logic_error(&v62, &v61);
        v62.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error((std::logic_error *)&v63, &v62);
        v64 = 0;
        v65 = 0;
        v66 = 0;
        v67 = -1;
        v63.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
        v63.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v63);
        *(_QWORD *)&v72[6] = "void AMCP::IO_Core::IOContext_Core::pause(Pause_Behavior)";
        *(_QWORD *)v73 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
        *(_DWORD *)&v73[8] = 894;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v56);
        v59 = v56;
        v60 = v57;
        v56 = 0uLL;
        v57 = 0;
        __p = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&__p);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v51, (uint64_t)buf);
      }
      if (*(_QWORD *)(a1 + 176) != *(_QWORD *)(a1 + 184))
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v52 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
        {
          v53 = pthread_self();
          v54 = pthread_mach_thread_np(v53);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v54;
          LOWORD(v70) = 2080;
          *(_QWORD *)((char *)&v70 + 2) = "IOContext_Core.cpp";
          WORD5(v70) = 1024;
          HIDWORD(v70) = 895;
          v71 = 2080;
          *(_QWORD *)v72 = "not (m_paused_state.empty())";
          _os_log_error_impl(&dword_1B57BA000, v52, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v68);
        v55 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v61);
        std::logic_error::logic_error(&v62, &v61);
        v62.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error((std::logic_error *)&v63, &v62);
        v64 = 0;
        v65 = 0;
        v66 = 0;
        v67 = -1;
        v63.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
        v63.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v63);
        *(_QWORD *)&v72[6] = "void AMCP::IO_Core::IOContext_Core::pause(Pause_Behavior)";
        *(_QWORD *)v73 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
        *(_DWORD *)&v73[8] = 895;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v56);
        v59 = v56;
        v60 = v57;
        v56 = 0uLL;
        v57 = 0;
        __p = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&__p);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v55, (uint64_t)buf);
      }
      if (a2)
      {
        if (a2 == 1)
        {
          AMCP::IO_Core::Play_State_Manager::get_state_snapshot((AMCP::IO_Core::Play_State_Manager *)buf, (unint64_t *)(*(_QWORD *)(a1 + 160) + 16));
          v32 = *(NSObject ***)buf;
          v33 = (int *)v70;
          if (*(_QWORD *)buf != (_QWORD)v70)
          {
            v34 = *(int **)buf;
            do
              AMCP::IO_Core::IOContext_Core::stop_internal(a1, *v34++);
            while (v34 != v33);
          }
          if (v32)
            operator delete(v32);
          *(_QWORD *)(a1 + 184) = *(_QWORD *)(a1 + 176);
        }
      }
      else
      {
        AMCP::IO_Core::Play_State_Manager::get_state_snapshot((AMCP::IO_Core::Play_State_Manager *)buf, (unint64_t *)(*(_QWORD *)(a1 + 160) + 16));
        v36 = *(void **)(a1 + 176);
        if (v36)
        {
          *(_QWORD *)(a1 + 184) = v36;
          operator delete(v36);
          *(_QWORD *)(a1 + 176) = 0;
          *(_QWORD *)(a1 + 184) = 0;
          *(_QWORD *)(a1 + 192) = 0;
        }
        v37 = *(int **)buf;
        *(_QWORD *)(a1 + 176) = *(_QWORD *)buf;
        v38 = (int *)v70;
        *(_OWORD *)(a1 + 184) = v70;
        v39 = v38;
        while (v37 != v39)
          AMCP::IO_Core::IOContext_Core::stop_internal(a1, *v37++);
      }
    }
    v35 = (AMCP::Log::Scope_Registry *)caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 32));
    if ((_DWORD)v35)
    {
      AMCP::Log::Scope_Registry::get(v35);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v44 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        v45 = pthread_self();
        v46 = pthread_mach_thread_np(v45);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v46;
        LOWORD(v70) = 2080;
        *(_QWORD *)((char *)&v70 + 2) = "IOContext_Core.cpp";
        WORD5(v70) = 1024;
        HIDWORD(v70) = 913;
        v71 = 2080;
        *(_QWORD *)v72 = "not (m_io_thread->get_transport_state() == Transport_State::off)";
        _os_log_error_impl(&dword_1B57BA000, v44, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v68);
      v47 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v61);
      std::logic_error::logic_error(&v62, &v61);
      v62.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error((std::logic_error *)&v63, &v62);
      v64 = 0;
      v65 = 0;
      v66 = 0;
      v67 = -1;
      v63.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
      v63.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v63);
      *(_QWORD *)&v72[6] = "void AMCP::IO_Core::IOContext_Core::pause(Pause_Behavior)";
      *(_QWORD *)v73 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
      *(_DWORD *)&v73[8] = 913;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v56);
      v59 = v56;
      v60 = v57;
      v56 = 0uLL;
      v57 = 0;
      __p = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&__p);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v47, (uint64_t)buf);
    }
  }
}

void sub_1B5844080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  std::__shared_weak_count *v41;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v41)
    std::__shared_weak_count::__release_weak(v41);
  _Unwind_Resume(a1);
}

uint64_t AMCP::IO_Core::IOContext_Core::stop_internal(uint64_t a1, int a2)
{
  _QWORD *v3;
  char *v4;
  _QWORD *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  pthread_t *v15;
  std::thread **v16;
  pthread_t *v17;
  pthread_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  int v26;
  void *__p[2];
  char v28;
  _BYTE v29[24];
  _BYTE *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD **)(a1 + 160);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v25, *(_QWORD *)(a1 + 48), *(std::__shared_weak_count **)(a1 + 56));
  v26 = a2;
  v30 = 0;
  v4 = (char *)operator new(0x20uLL);
  *(_QWORD *)v4 = &off_1E696D820;
  *(_OWORD *)(v4 + 8) = v25;
  v25 = 0uLL;
  *((_DWORD *)v4 + 6) = a2;
  v30 = v4;
  v5 = v3 + 2;
  if (v3[3])
    v6 = 2;
  else
    v6 = *v5 != 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "IO_Thread");
  v7 = AMCP::IO_Core::Play_State_Manager::stop(v3 + 2, a2, (uint64_t *)__p);
  if (v28 < 0)
    operator delete(__p[0]);
  v8 = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(v3[4]);
  if (v3[3] || !v8 || *v5)
  {
    v9 = 1;
    if (v6 != 1 && v7 == 1)
    {
      v10 = (unsigned int *)(*v3 + 704);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v30)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_BYTE *))(*(_QWORD *)v30 + 48))(v30);
      do
        v12 = __ldaxr(v10);
      while (__stlxr(v12 + 1, v10));
      v9 = 1;
    }
  }
  else
  {
    v13 = v3[4];
    LODWORD(__p[0]) = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(v13);
    BYTE4(__p[0]) = ((unint64_t)caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(v13) >> 32) & 1;
    BYTE5(__p[0]) = (caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(v13) & 0x100000000) == 0;
    LODWORD(__p[1]) = 4;
    caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(v13);
    BYTE4(__p[1]) = v14 & 1;
    caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::store(v13, __p);
    v9 = 0;
  }
  AMCP::IO_Core::Thread_Control_State::set_state((pthread_cond_t *)v3[4], v7);
  v17 = (pthread_t *)v3[6];
  v16 = (std::thread **)(v3 + 6);
  v15 = v17;
  if (v17)
  {
    v18 = *v15;
    LODWORD(v15) = v18 == pthread_self();
  }
  if (((v9 | v15) & 1) == 0)
  {
    std::thread::join(*v16);
    std::unique_ptr<std::thread>::reset[abi:ne180100](v16, 0);
  }
  v19 = v30;
  if (v30 == v29)
  {
    v20 = 4;
    v19 = v29;
    goto LABEL_26;
  }
  if (v30)
  {
    v20 = 5;
LABEL_26:
    (*(void (**)(_QWORD *))(*v19 + 8 * v20))(v19);
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  return kdebug_trace();
}

void sub_1B58445F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  unsigned int *v22;
  unsigned int v24;
  char *v25;
  uint64_t v26;

  do
    v24 = __ldaxr(v22);
  while (__stlxr(v24 + 1, v22));
  v25 = a22;
  if (a22 == &a19)
  {
    v26 = 4;
    v25 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_7;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_7:
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *this)
{
  std::__shared_weak_count *v4;

  *a1 = a2;
  if (!this)
  {
    a1[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v4 = std::__shared_weak_count::lock(this);
  a1[1] = v4;
  if (!v4)
    goto LABEL_5;
  return a1;
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E696D820;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E696D820;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E696D820;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_1E696D820;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  AMCP::Log::Scope_Registry *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *v7;
  unint64_t v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  void *__p;
  _BYTE v18[10];
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_DWORD *)(a1 + 24);
  AMCP::IO_Core::IOContext_Core::create_manifest((AMCP::IO_Core::IOContext_Core *)&v14, v1);
  v16 = *(_OWORD *)(*(_QWORD *)(v1 + 160) + 16);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v3 = AMCP::IO_Core::Play_State_Manager::stop((uint64_t *)&v16, v2, (uint64_t *)&__p);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  v4 = (AMCP::Log::Scope_Registry *)AMCP::IO_Core::IOContext_Core::enqueue_manifest_sync(v1, (uint64_t)&v14, v3, 0, 0);
  if ((_DWORD)v4 == 1)
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    v5 = *(std::__shared_weak_count **)v18;
    v6 = *(NSObject **)__p;
    if (*(_QWORD *)v18)
    {
      v7 = (unint64_t *)(*(_QWORD *)v18 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v9 = pthread_self();
      v10 = pthread_mach_thread_np(v9);
      LODWORD(__p) = 67109634;
      HIDWORD(__p) = v10;
      *(_WORD *)v18 = 2080;
      *(_QWORD *)&v18[2] = "IOContext_Core.cpp";
      v19 = 1024;
      v20 = 585;
      _os_log_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_INFO, "%6u %32s:%-5d enqueue_manifest failed during stop when transitioning to prewarming", (uint8_t *)&__p, 0x18u);
    }
  }
  v11 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1B58449BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  unint64_t *p_shared_owners;
  unint64_t v20;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core13stop_internalENS0_18Play_State_Manager12Play_RequestEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::target_type()
{
}

uint64_t ___ZN10applesauce8dispatch2v19sync_implIRZN4AMCP7IO_Core14IOContext_Core21enqueue_manifest_syncERKNSt3__110shared_ptrINS3_5Graph8ManifestEEENS3_15Transport_StateENS6_8optionalINS4_18Play_State_Manager12Play_RequestEEEyE3__0EEvP16dispatch_queue_sOT_NS6_17integral_constantIbLb1EEE_block_invoke(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 32);
  result = AMCP::IO_Core::IOContext_Core::enqueue_manifest_internal(*(_QWORD *)v3, *(_QWORD **)(v3 + 24), **(_DWORD **)(v3 + 32), **(_QWORD **)(v3 + 40), **(_QWORD **)(v3 + 48), a2, a3);
  **(_DWORD **)(v3 + 16) = result;
  return result;
}

uint64_t AMCP::IO_Core::IOContext_Core::enqueue_manifest_internal(uint64_t a1, _QWORD *a2, unsigned int a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  const char *imp;
  std::__shared_weak_count *v18;
  uint64_t (**v19)();
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t (**v26)();
  uint64_t v27;
  std::string::size_type v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::string::size_type v35;
  std::string::size_type v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *size;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::string::size_type v47;
  std::string::size_type v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::logic_error *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  std::logic_error_vtbl *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  NSObject *v73;
  _opaque_pthread_t *v74;
  mach_port_t v75;
  void *exception;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t (**v80)();
  __int128 v81;
  uint64_t v82;
  std::string v83;
  std::logic_error v84;
  char v85;
  std::string v86;
  __int16 v87;
  _BYTE v88[14];
  const char *v89;
  int v90[16];
  char v91;
  std::logic_error v92;
  void *v93;
  std::logic_error *v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  if (!*a2)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v86, "com.apple.coreaudio", "AMCP");
    v73 = *(NSObject **)v86.__r_.__value_.__l.__data_;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v86);
    if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
    {
      v74 = pthread_self();
      v75 = pthread_mach_thread_np(v74);
      LODWORD(v86.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v86.__r_.__value_.__r.__words[0]) = v75;
      LOWORD(v86.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v86.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"IOContext_Core.cpp";
      WORD1(v86.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v86.__r_.__value_.__r.__words[2]) = 655;
      v87 = 2080;
      *(_QWORD *)v88 = "not (manifest)";
      _os_log_error_impl(&dword_1B57BA000, v73, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Error creating manifest", (uint8_t *)&v86, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v85);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Error creating manifest", (uint64_t)&v83);
    std::logic_error::logic_error(&v84, &v83);
    v84.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v92, &v84);
    v94 = 0;
    v95 = 0;
    v96 = 0;
    v97 = -1;
    v92.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v93 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v86, (uint64_t)&v92);
    *(_QWORD *)&v88[6] = "Start_Stop_Result AMCP::IO_Core::IOContext_Core::enqueue_manifest_internal(const std::shared_pt"
                         "r<Manifest> &, Transport_State, std::optional<Play_State_Manager::Play_Request>, uint64_t)";
    v89 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
    v90[0] = 655;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v78);
    v80 = off_1E69A20A0;
    v81 = v78;
    v82 = v79;
    v78 = 0uLL;
    v79 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&v86, (uint64_t)&v80);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)&v86);
  }
  v12 = *(std::__shared_weak_count **)(a1 + 24);
  if (v12)
  {
    v13 = *(_QWORD *)(a1 + 16);
    p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    v16 = std::__shared_weak_count::lock(v12);
    v92.__imp_.__imp_ = (const char *)v16;
    if (!v16)
    {
      v18 = v12;
LABEL_50:
      std::__shared_weak_count::__release_weak(v18);
      goto LABEL_51;
    }
    imp = (const char *)v16;
    v92.__vftable = (std::logic_error_vtbl *)v13;
    std::__shared_weak_count::__release_weak(v12);
    if (!v13)
      goto LABEL_48;
    if (*(char *)(v13 + 47) < 0)
      std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)(v13 + 24), *(_QWORD *)(v13 + 32));
    else
      v86 = *(std::string *)(v13 + 24);
    v19 = *(uint64_t (***)())(a1 + 32);
    v20 = *(std::__shared_weak_count **)(a1 + 40);
    v80 = v19;
    *(_QWORD *)&v81 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
    v23 = (*((uint64_t (**)(uint64_t (**)()))*v19 + 3))(v19);
    if (v20)
    {
      v24 = (unint64_t *)&v20->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, std::string *))(*(_QWORD *)v23 + 16))(&v80, v23, &v86);
    v26 = v80;
    if (v80[67])
    {
      v27 = (uint64_t)(v80 + 64);
      v28 = *(_QWORD *)(*a2 + 72);
      v29 = *(std::__shared_weak_count **)(*a2 + 80);
      v83.__r_.__value_.__r.__words[0] = v28;
      v83.__r_.__value_.__l.__size_ = (std::string::size_type)v29;
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      std::function<void ()>::operator=((_QWORD *)(v28 + 136), v27);
      if (v29)
      {
        v32 = (unint64_t *)&v29->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v26 = v80;
    }
    if (v26[71])
    {
      v34 = (uint64_t)(v26 + 68);
      v35 = *(_QWORD *)(*a2 + 72);
      v36 = *(_QWORD *)(*a2 + 80);
      v83.__r_.__value_.__r.__words[0] = v35;
      v83.__r_.__value_.__l.__size_ = v36;
      if (v36)
      {
        v37 = (unint64_t *)(v36 + 8);
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      std::function<void ()(void)>::operator=((_QWORD *)(v35 + 168), v34);
      size = (std::__shared_weak_count *)v83.__r_.__value_.__l.__size_;
      if (v83.__r_.__value_.__l.__size_)
      {
        v40 = (unint64_t *)(v83.__r_.__value_.__l.__size_ + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
    }
    v42 = (std::__shared_weak_count *)v81;
    if ((_QWORD)v81)
    {
      v43 = (unint64_t *)(v81 + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
    imp = v92.__imp_.__imp_;
    if (v92.__imp_.__imp_)
    {
LABEL_48:
      v45 = (unint64_t *)(imp + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        (*(void (**)(const char *))(*(_QWORD *)imp + 16))(imp);
        v18 = (std::__shared_weak_count *)imp;
        goto LABEL_50;
      }
    }
  }
LABEL_51:
  AMCP::IO_Core::IOContext_Core::create_execution_context((AMCP::IO_Core::IOContext_Core *)&v86, a1, a6, a7);
  if (!a5)
  {
    v57 = 0;
    goto LABEL_77;
  }
  v48 = *(_QWORD *)(*a2 + 72);
  v47 = *(_QWORD *)(*a2 + 80);
  v83.__r_.__value_.__r.__words[0] = v48;
  v83.__r_.__value_.__l.__size_ = v47;
  if (v47)
  {
    v49 = (unint64_t *)(v47 + 8);
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  v51 = *(_QWORD *)(v48 + 80);
  v52 = *(std::__shared_weak_count **)(v48 + 88);
  v80 = (uint64_t (**)())v51;
  *(_QWORD *)&v81 = v52;
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  LOBYTE(v78) = 0;
  v92.__vftable = (std::logic_error_vtbl *)&off_1E696D950;
  v92.__imp_.__imp_ = (const char *)&v78;
  v94 = &v92;
  AMCP::Graph::Timebase_Set::for_each(*(_QWORD **)(v51 + 16), (uint64_t)&v92);
  v55 = v94;
  if (v94 == &v92)
  {
    v56 = 4;
    v55 = &v92;
  }
  else
  {
    if (!v94)
      goto LABEL_64;
    v56 = 5;
  }
  (*((void (**)(void))&v55->~logic_error + v56))();
LABEL_64:
  v58 = v78;
  if (v52)
  {
    v59 = (unint64_t *)&v52->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v61 = (std::__shared_weak_count *)v83.__r_.__value_.__l.__size_;
  if (!v83.__r_.__value_.__l.__size_)
    goto LABEL_73;
  v62 = (unint64_t *)(v83.__r_.__value_.__l.__size_ + 8);
  do
    v63 = __ldaxr(v62);
  while (__stlxr(v63 - 1, v62));
  if (!v63)
  {
    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
    std::__shared_weak_count::__release_weak(v61);
    if (v58)
      goto LABEL_74;
  }
  else
  {
LABEL_73:
    if (v58)
    {
LABEL_74:
      v57 = 1;
      v91 = 1;
      v64 = 1;
      goto LABEL_78;
    }
  }
  v57 = 0;
  a5 = 0;
LABEL_77:
  v64 = 2;
LABEL_78:
  v65 = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 32));
  AMCP::IO_Core::IO_Thread::get_state_snapshot((AMCP::IO_Core::Play_State_Manager *)&v92, *(_QWORD *)(a1 + 160), a4);
  v67 = v92.__vftable;
  if (v92.__vftable == (std::logic_error_vtbl *)v92.__imp_.__imp_)
  {
    v68 = 0;
    if (!v92.__vftable)
      goto LABEL_81;
    goto LABEL_80;
  }
  *(_QWORD *)&v77 = a5;
  *((_QWORD *)&v77 + 1) = v57;
  v68 = AMCP::Graph::Manifest_Queue::enqueue_manifest(*(int **)(a1 + 144), a2, v65, a3, &v92, (__int128 *)&v86, v64, v66, v77);
  if (v67)
LABEL_80:
    operator delete(v67);
LABEL_81:
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v90);
  v69 = *(std::__shared_weak_count **)&v88[6];
  if (*(_QWORD *)&v88[6])
  {
    v70 = (unint64_t *)(*(_QWORD *)&v88[6] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  return v68;
}

void sub_1B584512C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37)
{
  uint64_t v37;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v37 - 144);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::can_run_catchup_mode_on_devices(std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::can_run_catchup_mode_on_devices(std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::can_run_catchup_mode_on_devices(std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::can_run_catchup_mode_on_devices(std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696D950;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::can_run_catchup_mode_on_devices(std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::can_run_catchup_mode_on_devices(std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696D950;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::can_run_catchup_mode_on_devices(std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::can_run_catchup_mode_on_devices(std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  char *v5;
  char v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v5 = *(char **)(a1 + 8);
  if (*v5)
  {
    v6 = 1;
  }
  else
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 176))(v3);
    v5 = *(char **)(a1 + 8);
  }
  *v5 = v6;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::can_run_catchup_mode_on_devices(std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::can_run_catchup_mode_on_devices(std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core31can_run_catchup_mode_on_devicesERKNSt3__110shared_ptrINS_5Graph12Timebase_SetEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::can_run_catchup_mode_on_devices(std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::can_run_catchup_mode_on_devices(std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::target_type()
{
}

_QWORD *std::function<void ()(unsigned int)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::function<void ()(void)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(void)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::__function::__value_func<void ()(void)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B58456B4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__value_func<void ()(unsigned int)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B5845828(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_9>,void ()(AMCP::Pause_Behavior)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_9>,void ()(AMCP::Pause_Behavior)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696C8E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_9>,void ()(AMCP::Pause_Behavior)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696C8E8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_9>,void ()(AMCP::Pause_Behavior)>::operator()(uint64_t a1, int *a2)
{
  int v2;
  uint64_t v3;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v3 + 200));
  AMCP::IO_Core::IOContext_Core::pause(v3, v2);
  std::mutex::unlock((std::mutex *)(v3 + 200));
}

void sub_1B58458E0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_9>,void ()(AMCP::Pause_Behavior)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE3$_9"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_9>,void ()(AMCP::Pause_Behavior)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E696C868;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E696C868;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E696C868;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B5845A04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E696C868;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  double result;

  v3 = AMCP::Core::Operation::call_function<AMCP::Transport_State>((_QWORD *)(a1 + 8));
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)a2 = v3;
  *(_QWORD *)(a2 + 32) = AMCP::Implementation::In_Place_Storage<AMCP::Transport_State>::dispatch;
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterINS_15Transport_StateEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t AMCP::Core::Operation::call_function<AMCP::Transport_State>(_QWORD *a1)
{
  unint64_t v2;
  AMCP::Log::Scope_Registry *v3;
  AMCP::Log::Scope_Registry *v4;
  uint64_t v5;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  void *v10;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *exception;
  __int128 v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  std::string v20;
  std::runtime_error v21;
  std::runtime_error v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint8_t buf[8];
  __int16 v30;
  char *v31;
  __int16 v32;
  int v33;
  const char *v34;
  const char *v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Transport_State ()(void)>>();
  v3 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v2);
  if (!v3)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v11 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v13;
      v30 = 2080;
      v31 = "Operation.h";
      v32 = 1024;
      v33 = 154;
      _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v23 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Transport_State"
          ", Argument_Types = <>]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v36 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v4 = v3;
  if (!*((_QWORD *)v3 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<AMCP::Transport_State ()(void)>>(),
        (v3 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v4 + 7))(4, (uint64_t)v4 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v7 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v9;
      v30 = 2080;
      v31 = "Operation.h";
      v32 = 1024;
      v33 = 161;
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    v10 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v23 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Transport_State"
          ", Argument_Types = <>]";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v36 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    v17 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v10, (uint64_t)buf);
  }
  v5 = *((_QWORD *)v3 + 3);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
}

void sub_1B5845EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::In_Place_Storage<AMCP::Transport_State>::dispatch(uint64_t result, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, _QWORD, _OWORD *);
  void (*v11)(uint64_t, AMCP::Thing *, _QWORD, _QWORD);
  _DWORD *v12;
  int v13;
  _OWORD v14[2];
  void (*v15)(_QWORD, _OWORD *, _QWORD, _QWORD);
  void (*v16)(uint64_t, AMCP::Thing *, _QWORD, _QWORD);

  switch((int)result)
  {
    case 0:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v7 = 0uLL;
      goto LABEL_5;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<AMCP::Transport_State>::dispatch;
      return result;
    case 2:
      result = 0;
      v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<AMCP::Transport_State>::dispatch;
      *(_QWORD *)(a2 + 32) = 0;
LABEL_5:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      v8 = AMCP::Implementation::get_type_marker<AMCP::Transport_State>();
      result = 0;
      *a4 = v8;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<AMCP::Transport_State>())
        return a2;
      else
        return 0;
    case 5:
      v9 = AMCP::Implementation::get_type_marker<AMCP::Transport_State>();
      v10 = *(void (**)(uint64_t, uint64_t, _QWORD, _OWORD *))(a2 + 32);
      *(_QWORD *)&v14[0] = 0;
      if (v10)
      {
        v10(3, a2, 0, v14);
        v10 = *(void (**)(uint64_t, uint64_t, _QWORD, _OWORD *))&v14[0];
      }
      if (v10 != (void (*)(uint64_t, uint64_t, _QWORD, _OWORD *))v9)
        goto LABEL_20;
      v11 = (void (*)(uint64_t, AMCP::Thing *, _QWORD, _QWORD))*((_QWORD *)a3 + 4);
      v16 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v16);
        v11 = v16;
      }
      if (v11 == (void (*)(uint64_t, AMCP::Thing *, _QWORD, _QWORD))v9)
      {
        if (*(_QWORD *)(a2 + 32))
        {
          *(_QWORD *)&v14[0] = AMCP::Implementation::get_type_marker<AMCP::Transport_State>();
          v12 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _OWORD *))(a2 + 32))(4, a2, 0, v14);
        }
        else
        {
          v12 = 0;
        }
        *(_QWORD *)&v14[0] = AMCP::Implementation::get_type_marker<AMCP::Transport_State>();
        if (*v12 == *(_DWORD *)(*((uint64_t (**)(uint64_t, AMCP::Thing *, _QWORD, _OWORD *))a3 + 4))(4, a3, 0, v14))return 1;
      }
      else
      {
LABEL_20:
        v13 = AMCP::Thing::convert_to<AMCP::Transport_State>(a2);
        if (v13 == AMCP::Thing::convert_to<AMCP::Transport_State>((uint64_t)a3))
          return 1;
      }
      return 0;
    case 6:
      v15 = 0;
      memset(v14, 0, sizeof(v14));
      AMCP::swap((AMCP::Thing *)v14, a3, a3);
      if (v15)
        v15(0, v14, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<AMCP::Transport_State>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[280];
}

uint64_t AMCP::Thing::convert_to<AMCP::Transport_State>(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  std::bad_cast *exception;
  std::bad_cast *v9;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t (*v17)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_12;
  v2 = AMCP::Implementation::get_type_marker<AMCP::Transport_State>();
  v3 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v2)
  {
    v18 = v2;
    v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4)
      return *v4;
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = AMCP::Implementation::get_type_marker<AMCP::Transport_State>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v14 = v2;
  v6 = (unsigned int *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v5 = *v6;
  if (v17)
    v17(0, v16, 0, 0);
  return v5;
}

void sub_1B5846458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_8>,AMCP::Transport_State ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_8>,AMCP::Transport_State ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696C7D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_8>,AMCP::Transport_State ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696C7D8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_8>,AMCP::Transport_State ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = **(_QWORD **)(a1 + 8);
  if (v1)
    return caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(*(_QWORD *)(v1 + 32));
  else
    return 0;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_8>,AMCP::Transport_State ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE3$_8"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_8>,AMCP::Transport_State ()(void)>::target_type()
{
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_7>,BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_7>,BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696C748;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_7>,BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696C748;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_7>,BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::mutex *v4;
  uint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int8x8_t v12;
  uint8x8_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  _BOOL4 v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = (std::mutex *)(v3 + 200);
  std::mutex::lock((std::mutex *)(v3 + 200));
  v5 = *(_QWORD *)(v3 + 128);
  if (!v5)
    goto LABEL_30;
  v6 = *(_QWORD **)(v5 + 80);
  v7 = *(std::__shared_weak_count **)(v5 + 88);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = *(_QWORD **)a2;
  v11 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 != v11)
  {
    v12 = (int8x8_t)v6[1];
    v13 = (uint8x8_t)vcnt_s8(v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = *(_QWORD *)&v12 - 1;
    do
    {
      if (v12)
      {
        v15 = 0x9DDFEA08EB382D69 * ((8 * *v10 + 8) ^ HIDWORD(*v10));
        v16 = 0x9DDFEA08EB382D69 * (HIDWORD(*v10) ^ (v15 >> 47) ^ v15);
        v17 = 0x9DDFEA08EB382D69 * (v16 ^ (v16 >> 47));
        if (v13.u32[0] > 1uLL)
        {
          v18 = v17;
          if (v17 >= *(_QWORD *)&v12)
            v18 = v17 % *(_QWORD *)&v12;
        }
        else
        {
          v18 = v17 & v14;
        }
        v19 = *(_QWORD **)(*v6 + 8 * v18);
        if (v19)
        {
          while (1)
          {
            v19 = (_QWORD *)*v19;
            if (!v19)
              break;
            v20 = v19[1];
            if (v17 == v20)
            {
              if (v19[2] == *v10)
              {
                v21 = v19 == 0;
                if (!v7)
                  goto LABEL_29;
                goto LABEL_26;
              }
            }
            else
            {
              if (v13.u32[0] > 1uLL)
              {
                if (v20 >= *(_QWORD *)&v12)
                  v20 %= *(_QWORD *)&v12;
              }
              else
              {
                v20 &= v14;
              }
              if (v20 != v18)
                break;
            }
          }
        }
      }
      v10 += 2;
    }
    while (v10 != v11);
  }
  v21 = 1;
  if (v7)
  {
LABEL_26:
    v22 = (unint64_t *)&v7->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (v21)
        goto LABEL_30;
LABEL_32:
      v24 = 1;
      goto LABEL_33;
    }
  }
LABEL_29:
  if (!v21)
    goto LABEL_32;
LABEL_30:
  v24 = 0;
LABEL_33:
  std::mutex::unlock(v4);
  return v24;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_7>,BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE3$_7"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_7>,BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>::target_type()
{
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_6>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_6>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696C6C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_6>,BOOL ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696C6C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_6>,BOOL ()(void)>::operator()(uint64_t a1)
{
  AMCP::IO_Core::IOContext_Core::stop(*(_QWORD *)(a1 + 8), 1);
  return 1;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_6>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE3$_6"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_6>,BOOL ()(void)>::target_type()
{
}

void AMCP::IO_Core::IOContext_Core::stop(uint64_t a1, int a2)
{
  AMCP::Log::Scope_Registry *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *v7;
  unint64_t v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  int v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  std::string *v16;
  const char *v17;
  int v18;
  void **v19;
  unsigned int v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  int v24;
  char *v25;
  char *v26;
  int64_t v27;
  void *__p[2];
  char v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::string v32;
  uint8_t buf[8];
  _BYTE v34[10];
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  std::string *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  void **v44;
  __int16 v45;
  unsigned int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  AMCP::Logging_Settings::instance((AMCP::Logging_Settings *)a1);
  if (HIBYTE(AMCP::Logging_Settings::instance(void)::s_instance)
    || (AMCP::Logging_Settings::instance(v4), BYTE2(AMCP::Logging_Settings::instance(void)::s_instance)))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v5 = *(std::__shared_weak_count **)v34;
    v6 = **(NSObject ***)buf;
    if (*(_QWORD *)v34)
    {
      v7 = (unint64_t *)(*(_QWORD *)v34 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v9 = pthread_self();
      v10 = pthread_mach_thread_np(v9);
      v11 = *(_DWORD *)(a1 + 8);
      v12 = *(std::__shared_weak_count **)(a1 + 24);
      if (v12)
      {
        v13 = *(_QWORD *)(a1 + 16);
        p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
        do
          v15 = __ldxr(p_shared_weak_owners);
        while (__stxr(v15 + 1, p_shared_weak_owners));
        v30 = 0;
        v31 = std::__shared_weak_count::lock(v12);
        if (v31)
          v30 = v13;
        else
          v13 = 0;
      }
      else
      {
        v13 = 0;
        v30 = 0;
        v31 = 0;
      }
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = &v32;
      else
        v16 = (std::string *)v32.__r_.__value_.__r.__words[0];
      if (a2)
        v17 = "Prewarm";
      else
        v17 = "Play";
      v18 = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 32));
      std::string::basic_string[abi:ne180100]<0>(__p, off_1E699CFF0[v18]);
      if (v29 >= 0)
        v19 = __p;
      else
        v19 = (void **)__p[0];
      v20 = atomic_load((unsigned int *)(a1 + 168));
      *(_DWORD *)buf = 67110914;
      *(_DWORD *)&buf[4] = v10;
      *(_WORD *)v34 = 2080;
      *(_QWORD *)&v34[2] = "IOContext_Core.cpp";
      v35 = 1024;
      v36 = 548;
      v37 = 1024;
      v38 = v11;
      v39 = 2080;
      v40 = v16;
      v41 = 2080;
      v42 = v17;
      v43 = 2080;
      v44 = v19;
      v45 = 1024;
      v46 = v20;
      _os_log_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_INFO, "%6u %32s:%-5d IOContext_Core(%d|\"%s\")::stop: request(%s)  current(%s)  pause_count(%d)", buf, 0x42u);
      if (v29 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      v21 = v31;
      if (v31)
      {
        p_shared_owners = (unint64_t *)&v31->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      if (v12)
        std::__shared_weak_count::__release_weak(v12);
    }
  }
  v24 = atomic_load((unsigned int *)(a1 + 168));
  if (v24 < 1)
  {
    AMCP::IO_Core::IOContext_Core::stop_internal(a1, a2);
  }
  else
  {
    v26 = *(char **)(a1 + 176);
    v25 = *(char **)(a1 + 184);
    if (v26 != v25)
    {
      while (*(_DWORD *)v26 != a2)
      {
        v26 += 4;
        if (v26 == v25)
        {
          v26 = *(char **)(a1 + 184);
          break;
        }
      }
    }
    if (v26 != v25)
    {
      v27 = v25 - (v26 + 4);
      if (v25 != v26 + 4)
        memmove(v26, v26 + 4, v25 - (v26 + 4));
      *(_QWORD *)(a1 + 184) = &v26[v27];
    }
  }
}

void sub_1B5846B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::__shared_weak_count *v19;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_5>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_5>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696C648;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_5>,BOOL ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696C648;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_5>,BOOL ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  std::mutex *v2;
  _BOOL8 v3;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (std::mutex *)(v1 + 200);
  std::mutex::lock((std::mutex *)(v1 + 200));
  v3 = AMCP::IO_Core::IOContext_Core::start((AMCP::Log::Scope_Registry *)v1, 1u, 0) != 2;
  std::mutex::unlock(v2);
  return v3;
}

void sub_1B5846C8C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_5>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE3$_5"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_5>,BOOL ()(void)>::target_type()
{
}

uint64_t AMCP::IO_Core::IOContext_Core::start(AMCP::Log::Scope_Registry *a1, unsigned int a2, unint64_t a3)
{
  AMCP::Log::Scope_Registry *v5;
  _BOOL8 v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *v9;
  unint64_t v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  int v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  std::string *v18;
  const char *v19;
  int v20;
  void *p_p;
  unsigned int v22;
  std::__shared_weak_count *size;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v27;
  unsigned int *v28;
  _DWORD *v29;
  int v30;
  unsigned int *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unint64_t v40;
  unsigned int v41;
  NSObject *v42;
  _opaque_pthread_t *v43;
  mach_port_t v44;
  void *exception;
  NSObject *v46;
  _opaque_pthread_t *v47;
  mach_port_t v48;
  void *v49;
  __int128 v50;
  uint64_t v51;
  void *__p;
  __int128 v53;
  uint64_t v54;
  std::string v55;
  std::logic_error v56;
  std::string v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  char v62;
  uint8_t buf[8];
  _BYTE v64[10];
  __int16 v65;
  int v66;
  __int16 v67;
  _BYTE v68[14];
  _BYTE v69[12];
  void *v70;
  __int16 v71;
  unsigned int v72;
  uint64_t v73;

  v5 = a1;
  v73 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    a1 = (AMCP::Log::Scope_Registry *)mach_absolute_time();
    if ((unint64_t)a1 <= a3)
    {
      AMCP::Log::Scope_Registry::get(a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v42 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        v43 = pthread_self();
        v44 = pthread_mach_thread_np(v43);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v44;
        *(_WORD *)v64 = 2080;
        *(_QWORD *)&v64[2] = "IOContext_Core.cpp";
        v65 = 1024;
        v66 = 482;
        v67 = 2080;
        *(_QWORD *)v68 = "not (in_start_host_time == 0 or in_start_host_time < caulk::host_time::current())";
        _os_log_error_impl(&dword_1B57BA000, v42, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s start host time must be before the current time", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v62);
      exception = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"start host time must be before the current time", (uint64_t)&v55);
      std::logic_error::logic_error(&v56, &v55);
      v56.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error((std::logic_error *)&v57, &v56);
      v58 = 0;
      v59 = 0;
      v60 = 0;
      v61 = -1;
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
      v57.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v57);
      *(_QWORD *)&v68[6] = "IOContext_Core::IOC_Start_Result AMCP::IO_Core::IOContext_Core::start(Play_State_Manager::Pla"
                           "y_Request, uint64_t)";
      *(_QWORD *)v69 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
      *(_DWORD *)&v69[8] = 482;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v50);
      v53 = v50;
      v54 = v51;
      v50 = 0uLL;
      v51 = 0;
      __p = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&__p);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
    }
  }
  AMCP::Logging_Settings::instance(a1);
  if (HIBYTE(AMCP::Logging_Settings::instance(void)::s_instance)
    || (AMCP::Logging_Settings::instance((AMCP::Logging_Settings *)v6),
        BYTE2(AMCP::Logging_Settings::instance(void)::s_instance)))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v7 = *(std::__shared_weak_count **)v64;
    v8 = **(NSObject ***)buf;
    if (*(_QWORD *)v64)
    {
      v9 = (unint64_t *)(*(_QWORD *)v64 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v6 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
    if (v6)
    {
      v11 = pthread_self();
      v12 = pthread_mach_thread_np(v11);
      v13 = *((_DWORD *)v5 + 2);
      v14 = (std::__shared_weak_count *)*((_QWORD *)v5 + 3);
      if (v14)
      {
        v15 = *((_QWORD *)v5 + 2);
        p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
        do
          v17 = __ldxr(p_shared_weak_owners);
        while (__stxr(v17 + 1, p_shared_weak_owners));
        v55.__r_.__value_.__r.__words[0] = 0;
        v55.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v14);
        if (v55.__r_.__value_.__l.__size_)
          v55.__r_.__value_.__r.__words[0] = v15;
        else
          v15 = 0;
      }
      else
      {
        v15 = 0;
        *(_OWORD *)&v55.__r_.__value_.__l.__data_ = 0uLL;
      }
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &v57;
      else
        v18 = (std::string *)v57.__r_.__value_.__r.__words[0];
      if (a2)
        v19 = "Prewarm";
      else
        v19 = "Play";
      v20 = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(*(_QWORD *)(*((_QWORD *)v5 + 20) + 32));
      std::string::basic_string[abi:ne180100]<0>(&__p, off_1E699CFF0[v20]);
      if (v53 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      v22 = atomic_load((unsigned int *)v5 + 42);
      *(_DWORD *)buf = 67110914;
      *(_DWORD *)&buf[4] = v12;
      *(_WORD *)v64 = 2080;
      *(_QWORD *)&v64[2] = "IOContext_Core.cpp";
      v65 = 1024;
      v66 = 485;
      v67 = 1024;
      *(_DWORD *)v68 = v13;
      *(_WORD *)&v68[4] = 2080;
      *(_QWORD *)&v68[6] = v18;
      *(_WORD *)v69 = 2080;
      *(_QWORD *)&v69[2] = v19;
      *(_WORD *)&v69[10] = 2080;
      v70 = p_p;
      v71 = 1024;
      v72 = v22;
      _os_log_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_INFO, "%6u %32s:%-5d IOContext_Core(%d|\"%s\")::start: request(%s)  current(%s)  pause_count(%d)", buf, 0x42u);
      if (SHIBYTE(v53) < 0)
        operator delete(__p);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      size = (std::__shared_weak_count *)v55.__r_.__value_.__l.__size_;
      if (v55.__r_.__value_.__l.__size_)
      {
        v24 = (unint64_t *)(v55.__r_.__value_.__l.__size_ + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (v14)
        std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (atomic_load((unsigned int *)v5 + 42))
  {
    v28 = (unsigned int *)*((_QWORD *)v5 + 23);
    v27 = *((_QWORD *)v5 + 24);
    if ((unint64_t)v28 >= v27)
    {
      v32 = (unsigned int *)*((_QWORD *)v5 + 22);
      v33 = v28 - v32;
      v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 62)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v35 = v27 - (_QWORD)v32;
      if (v35 >> 1 > v34)
        v34 = v35 >> 1;
      v36 = (unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL;
      v37 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v36)
        v37 = v34;
      if (v37)
      {
        v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v37);
        v32 = (unsigned int *)*((_QWORD *)v5 + 22);
        v28 = (unsigned int *)*((_QWORD *)v5 + 23);
      }
      else
      {
        v38 = 0;
      }
      v39 = (unsigned int *)(v37 + 4 * v33);
      v40 = v37 + 4 * v38;
      *v39 = a2;
      v29 = v39 + 1;
      while (v28 != v32)
      {
        v41 = *--v28;
        *--v39 = v41;
      }
      *((_QWORD *)v5 + 22) = v39;
      *((_QWORD *)v5 + 23) = v29;
      *((_QWORD *)v5 + 24) = v40;
      if (v32)
        operator delete(v32);
    }
    else
    {
      *v28 = a2;
      v29 = v28 + 1;
    }
    *((_QWORD *)v5 + 23) = v29;
    return 1;
  }
  else
  {
    if (*((_QWORD *)v5 + 22) != *((_QWORD *)v5 + 23))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v46 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
        v47 = pthread_self();
        v48 = pthread_mach_thread_np(v47);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v48;
        *(_WORD *)v64 = 2080;
        *(_QWORD *)&v64[2] = "IOContext_Core.cpp";
        v65 = 1024;
        v66 = 490;
        v67 = 2080;
        *(_QWORD *)v68 = "not (m_paused_state.empty())";
        _os_log_error_impl(&dword_1B57BA000, v46, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v62);
      v49 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v55);
      std::logic_error::logic_error(&v56, &v55);
      v56.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error((std::logic_error *)&v57, &v56);
      v58 = 0;
      v59 = 0;
      v60 = 0;
      v61 = -1;
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A1208;
      v57.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v57);
      *(_QWORD *)&v68[6] = "IOContext_Core::IOC_Start_Result AMCP::IO_Core::IOContext_Core::start(Play_State_Manager::Pla"
                           "y_Request, uint64_t)";
      *(_QWORD *)v69 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
      *(_DWORD *)&v69[8] = 490;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v50);
      v53 = v50;
      v54 = v51;
      v50 = 0uLL;
      v51 = 0;
      __p = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&__p);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v49, (uint64_t)buf);
    }
    AMCP::IO_Core::IOContext_Core::start_internal(v5, a2, a3);
    if (v30)
      return 0;
    else
      return 2;
  }
}

void sub_1B58473F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  std::__shared_weak_count *v41;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v41)
    std::__shared_weak_count::__release_weak(v41);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_4>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_4>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696C5C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_4>,BOOL ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696C5C8;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_4>,BOOL ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v1 + 200));
  v2 = AMCP::IO_Core::IOContext_Core::start((AMCP::Log::Scope_Registry *)v1, 1u, 0);
  std::mutex::unlock((std::mutex *)(v1 + 200));
  if (v2)
    return v2 != 2;
  if ((AMCP::IO_Core::IO_Thread::wait_for_start(*(AMCP::IO_Core::IO_Thread **)(*(_QWORD *)(v1 + 160) + 32)) & 1) != 0)
    return 1;
  std::mutex::lock((std::mutex *)(v1 + 200));
  AMCP::IO_Core::IOContext_Core::stop(v1, 1);
  std::mutex::unlock((std::mutex *)(v1 + 200));
  return 0;
}

void sub_1B584769C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_4>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_4>,BOOL ()(void)>::target_type()
{
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_3>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_3>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696C548;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_3>,BOOL ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696C548;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_3>,BOOL ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _opaque_pthread_t **v3;
  _opaque_pthread_t *v4;
  pthread_t v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 160);
  if (v2 && (v3 = *(_opaque_pthread_t ***)(v2 + 48)) != 0)
  {
    v4 = *v3;
    v5 = pthread_self();
    v6 = (_QWORD *)(v1 + 144);
    v7 = (unsigned int *)(*(_QWORD *)(v1 + 144) + 704);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    if (v4 == v5)
    {
      AMCP::IO_Core::IOContext_Core::stop(v1, 0);
      goto LABEL_12;
    }
  }
  else
  {
    v6 = (_QWORD *)(v1 + 144);
    v9 = (unsigned int *)(*(_QWORD *)(v1 + 144) + 704);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  if (std::mutex::try_lock((std::mutex *)(v1 + 200)))
    std::mutex::unlock((std::mutex *)(v1 + 200));
  std::mutex::lock((std::mutex *)(v1 + 200));
  AMCP::IO_Core::IOContext_Core::stop(v1, 0);
  std::mutex::unlock((std::mutex *)(v1 + 200));
LABEL_12:
  v11 = (unsigned int *)(*v6 + 704);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  return 1;
}

void sub_1B584783C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_3>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_3>,BOOL ()(void)>::target_type()
{
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_2>,void ()(AMCP::Thing const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_2>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696C4C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_2>,void ()(AMCP::Thing const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696C4C8;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_2>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  AMCP::IO_Core::IOContext_Core *v2;
  unint64_t v3;

  v2 = *(AMCP::IO_Core::IOContext_Core **)(a1 + 8);
  v3 = AMCP::Thing::convert_to<unsigned long long>(a2);
  return AMCP::IO_Core::IOContext_Core::start_property_helper(v2, v3);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_2>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_2>,void ()(AMCP::Thing const&)>::target_type()
{
}

BOOL AMCP::IO_Core::IOContext_Core::start_property_helper(AMCP::IO_Core::IOContext_Core *this, unint64_t a2)
{
  std::mutex *v4;
  int v5;

  v4 = (std::mutex *)((char *)this + 200);
  std::mutex::lock((std::mutex *)((char *)this + 200));
  if (caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(*(_QWORD *)(*((_QWORD *)this + 20) + 32)) == 2)
  {
    std::mutex::unlock(v4);
  }
  else
  {
    v5 = AMCP::IO_Core::IOContext_Core::start(this, 0, a2);
    std::mutex::unlock(v4);
    if (v5)
      return v5 != 2;
  }
  if ((AMCP::IO_Core::IO_Thread::wait_for_start(*(AMCP::IO_Core::IO_Thread **)(*((_QWORD *)this + 20) + 32)) & 1) != 0)
    return 1;
  std::mutex::lock(v4);
  AMCP::IO_Core::IOContext_Core::stop((uint64_t)this, 0);
  std::mutex::unlock(v4);
  return 0;
}

void sub_1B5847A24(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_1>,BOOL ()(unsigned long long)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_1>,BOOL ()(unsigned long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696C438;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_1>,BOOL ()(unsigned long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696C438;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_1>,BOOL ()(unsigned long long)>::operator()(uint64_t a1, unint64_t *a2)
{
  return AMCP::IO_Core::IOContext_Core::start_property_helper(*(AMCP::IO_Core::IOContext_Core **)(a1 + 8), *a2);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_1>,BOOL ()(unsigned long long)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_1>,BOOL ()(unsigned long long)>::target_type()
{
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696C3B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696C3B8;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return AMCP::IO_Core::IOContext_Core::start_property_helper(*(AMCP::IO_Core::IOContext_Core **)(a1 + 8), 0);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::target_type()
{
}

uint64_t *applesauce::dispatch::v1::async<AMCP::IO_Core::IOContext_Core::enqueue_manifest_async(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,std::function<void ()(std::shared_ptr<AMCP::Graph::Manifest>)>)::$_0 &>(dispatch_queue_s *,AMCP::IO_Core::IOContext_Core::enqueue_manifest_async(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,std::function<void ()(std::shared_ptr<AMCP::Graph::Manifest>)>)::$_0 &)::{lambda(void *)#1}::__invoke(uint64_t a1, double a2, double a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v12 = a1;
  if (AMCP::IO_Core::IOContext_Core::enqueue_manifest_internal(*(_QWORD *)a1, (_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 32), 0, 0, a2, a3) == 1)
  {
    v4 = *(std::__shared_weak_count **)(a1 + 24);
    v13 = *(_QWORD *)(a1 + 16);
    v14 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    v7 = *(_QWORD *)(a1 + 64);
    if (!v7)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 48))(v7, &v13);
    v8 = v14;
    if (v14)
    {
      v9 = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  return std::unique_ptr<AMCP::IO_Core::IOContext_Core::enqueue_manifest_async(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,std::function<void ()(std::shared_ptr<AMCP::Graph::Manifest>)>)::$_0,std::default_delete<AMCP::IO_Core::IOContext_Core::enqueue_manifest_async(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,std::function<void ()(std::shared_ptr<AMCP::Graph::Manifest>)>)::$_0>>::~unique_ptr[abi:ne180100](&v12);
}

void sub_1B5847CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = a12;
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  std::unique_ptr<AMCP::IO_Core::IOContext_Core::enqueue_manifest_async(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,std::function<void ()(std::shared_ptr<AMCP::Graph::Manifest>)>)::$_0,std::default_delete<AMCP::IO_Core::IOContext_Core::enqueue_manifest_async(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,std::function<void ()(std::shared_ptr<AMCP::Graph::Manifest>)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<AMCP::IO_Core::IOContext_Core::enqueue_manifest_async(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,std::function<void ()(std::shared_ptr<AMCP::Graph::Manifest>)>)::$_0,std::default_delete<AMCP::IO_Core::IOContext_Core::enqueue_manifest_async(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,std::function<void ()(std::shared_ptr<AMCP::Graph::Manifest>)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 64);
    if (v3 == (_QWORD *)(v2 + 40))
    {
      v4 = 4;
      v3 = (_QWORD *)(v2 + 40);
    }
    else
    {
      if (!v3)
      {
LABEL_7:
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2 + 16);
        v5 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
        MEMORY[0x1B5E50688](v5, 0x1020C40DADCD8D6);
        return a1;
      }
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_7;
  }
  return a1;
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Manifest>)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E696D8C0;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Manifest>)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E696D8C0;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Manifest>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E696D8C0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Manifest>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E696D8C0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Manifest>)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Manifest>)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Manifest>)>::operator()(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = *a2;
  v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  AMCP::IO_Core::IOContext_Core::pause(*(_QWORD *)(a1 + 8), 0);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(std::__shared_weak_count **)(v3 + 80);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  AMCP::Graph::Manifest_Inventory::report_thread_error(*(_QWORD *)(v4 + 192));
  if (!v5)
    goto LABEL_8;
  v8 = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v2)
      return;
  }
  else
  {
LABEL_8:
    if (!v2)
      return;
  }
  v10 = (unint64_t *)&v2->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1B5847F80(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (v1)
  {
    v6 = (unint64_t *)&v1->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Manifest>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core30maybe_update_running_iocontextEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Manifest>)>::target_type()
{
}

uint64_t *std::unique_ptr<AMCP::IO_Core::IO_Thread>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    if (*(_QWORD *)(v1 + 48))
    {
      AMCP::IO_Core::Thread_Control_State::set_state(*(pthread_cond_t **)(v1 + 32), 0);
      std::thread::join(*(std::thread **)(v1 + 48));
    }
    std::unique_ptr<std::thread>::reset[abi:ne180100]((std::thread **)(v1 + 48), 0);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1 + 32);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

NSObject **AMCP::Utility::Dispatch_Queue::operator=(NSObject **a1, dispatch_object_t object)
{
  NSObject *v4;

  if (object)
    dispatch_retain(object);
  v4 = *a1;
  *a1 = object;
  if (v4)
    dispatch_release(v4);
  return a1;
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest_Queue>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E696C368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest_Queue>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E696C368;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest_Queue>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  std::mutex *v6;
  unint64_t *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unsigned __int128 *v17;
  _QWORD *v18;
  uint64_t v19;

  AMCP::Graph::Manifest_Queue::flush((AMCP::Graph::Manifest_Queue *)(a1 + 32));
  v2 = *(_QWORD **)(a1 + 664);
  if (v2 == (_QWORD *)(a1 + 640))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 640);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = *(_QWORD **)(a1 + 632);
  if (v4 == (_QWORD *)(a1 + 608))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 608);
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 592);
  std::__optional_destruct_base<AMCP::Graph::Manifest_Execution_Context,false>::~__optional_destruct_base[abi:ne180100](a1 + 464);
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)(a1 + 392));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 368);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 296));
  std::mutex::~mutex((std::mutex *)(a1 + 232));
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)(a1 + 224), 0);
  v6 = (std::mutex *)(a1 + 144);
  std::mutex::lock((std::mutex *)(a1 + 144));
  v7 = (unint64_t *)(a1 + 48);
  v8 = *(_QWORD **)(a1 + 112);
  if (v8)
    goto LABEL_17;
  do
    v9 = __ldaxr(v7);
  while (__stxr(0, v7));
  if (v9)
  {
    v10 = 0;
    do
    {
      v8 = (_QWORD *)v9;
      v11 = (unint64_t *)(v9 + 200);
      v9 = atomic_load((unint64_t *)(v9 + 200));
      atomic_store(v10, v11);
      v10 = (unint64_t)v8;
    }
    while (v9);
    while (1)
    {
      *(_QWORD *)(a1 + 112) = v8;
      do
      {
LABEL_17:
        v12 = atomic_load(v8 + 25);
        *(_QWORD *)(a1 + 112) = v12;
        v13 = AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::Message::~Message(v8);
        MEMORY[0x1B5E50688](v13, 0x10A0C4075219A73);
        v8 = *(_QWORD **)(a1 + 112);
      }
      while (v8);
      do
        v14 = __ldaxr(v7);
      while (__stxr(0, v7));
      if (!v14)
        break;
      v8 = 0;
      do
      {
        v15 = (unint64_t)v8;
        v8 = (_QWORD *)v14;
        v16 = (unint64_t *)(v14 + 200);
        v14 = atomic_load((unint64_t *)(v14 + 200));
        atomic_store(v15, v16);
      }
      while (v14);
    }
  }
  v17 = (unsigned __int128 *)(a1 + 128);
  while (1)
  {
    v18 = (_QWORD *)caulk::concurrent::stack<AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::Message,caulk::concurrent::intrusive_single_link_member<AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::Message,&AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::Message::m_next_free_message>>::pop(v17);
    if (!v18)
      break;
    v19 = AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::Message::~Message(v18);
    MEMORY[0x1B5E50688](v19, 0x10A0C4075219A73);
  }
  std::mutex::unlock(v6);
  std::mutex::~mutex(v6);
}

void HALS_IOUAStream::Activate(HALS_IOUAStream *this)
{
  HALS_Object *v2;

  HALS_IOUAStream::SynchronizeWithHardware(this);
  (*(void (**)(char *))(*((_QWORD *)this + 8) + 24))((char *)this + 64);
  HALS_Object::Activate(this, v2);
}

void HALS_IOUAStream::~HALS_IOUAStream(HALS_IOUAStream *this)
{
  HALS_IOUAStream::~HALS_IOUAStream(this);
  JUMPOUT(0x1B5E50688);
}

{
  HALS_IOUAObject *v2;
  HALS_Object *v3;

  *(_QWORD *)this = off_1E696D9D0;
  *((_QWORD *)this + 8) = &unk_1E696DAC8;
  v2 = (HALS_IOUAStream *)((char *)this + 64);
  HALS_IOUAStream::unmap_memory(this);
  HALB_FormatList::~HALB_FormatList((HALS_IOUAStream *)((char *)this + 120));
  HALS_IOUAObject::~HALS_IOUAObject(v2, v3);
  HALS_Object::~HALS_Object(this);
}

uint64_t HALS_IOUAStream::HasProperty(HALS_IOUAStream *this, unsigned int a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  AudioObjectPropertySelector mSelector;
  int v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _BOOL8 HasProperty;
  unint64_t *v14;
  unint64_t v15;
  BOOL v16;

  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1851878763)
  {
    if (mSelector != 1668641652)
    {
      v7 = 1819173229;
      goto LABEL_6;
    }
    v16 = *((_QWORD *)this + 12) == *((_QWORD *)this + 11);
    return !v16;
  }
  if (mSelector == 1952542835)
  {
    v16 = *((_BYTE *)this + 52) == 0;
    return !v16;
  }
  v7 = 1851878764;
LABEL_6:
  if (mSelector == v7)
  {
    v8 = *((_QWORD *)this + 9);
    v9 = *(_QWORD *)(v8 + 792);
    v10 = *(std::__shared_weak_count **)(v8 + 800);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    HasProperty = HALS_IOUAUCDriver::GetHasProperty((HALS_IOUAUCDriver *)*(unsigned int *)(v9 + 4), a3, *((_DWORD *)this + 20));
    if (v10)
    {
      v14 = (unint64_t *)&v10->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    return HasProperty;
  }
  if ((HALS_Stream::HasProperty(this, a2, a3, a4) & 1) != 0)
    return 1;
  return (*(uint64_t (**)(char *, _QWORD))(*((_QWORD *)this + 8) + 16))((char *)this + 64, a3->mSelector);
}

void sub_1B5848514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOUAStream::IsPropertySettable(HALS_IOUAStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  AudioObjectPropertySelector mSelector;
  const AudioObjectPropertyAddress *v9;
  HALS_Client *v10;

  mSelector = a3->mSelector;
  if (a3->mSelector == 1952542835)
    return 0;
  if (mSelector == 1935762292)
    return 1;
  if (mSelector == 1668641652)
    return 0;
  if (HALS_Stream::HasProperty(this, a2, a3, a4))
    return HALS_Stream::IsPropertySettable((uint64_t)this, a2, (int *)a3);
  else
    return HALS_IOUAObject::IsPropertySettable((HALS_IOUAStream *)((char *)this + 64), a3, v9, v10);
}

uint64_t HALS_IOUAStream::GetPropertyDataSize(HALS_IOUAStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, const void *a5, HALS_Client *a6)
{
  AudioObjectPropertySelector mSelector;
  HALB_Mutex *v10;
  _QWORD *v11;
  uint64_t v12;
  const AudioObjectPropertyAddress *v13;
  uint64_t v14;
  const void *v15;
  HALS_Client *v16;
  uint64_t PropertyDataSize;
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;

  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = 0;
  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1936092450)
  {
    if (mSelector != 1668641652)
    {
      if (mSelector == 1885762595)
      {
        v19[0] = MEMORY[0x1E0C809B0];
        v19[1] = 0x40000000;
        v19[2] = ___ZNK15HALS_IOUAStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_4;
        v19[3] = &unk_1E696DB68;
        v19[4] = &v23;
        v19[5] = this;
        v10 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(_QWORD *)this + 56))(this);
        v11 = v19;
        goto LABEL_15;
      }
      if (mSelector == 1885762657)
      {
        v20[0] = MEMORY[0x1E0C809B0];
        v20[1] = 0x40000000;
        v20[2] = ___ZNK15HALS_IOUAStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3;
        v20[3] = &unk_1E696DB40;
        v20[4] = &v23;
        v20[5] = this;
        v10 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(_QWORD *)this + 56))(this);
        v11 = v20;
LABEL_15:
        HALB_CommandGate::ExecuteCommand(v10, (uint64_t)v11);
        v12 = *((unsigned int *)v24 + 6);
        goto LABEL_20;
      }
      goto LABEL_16;
    }
    v12 = (*((_DWORD *)this + 24) - *((_DWORD *)this + 22)) & 0xFFFFFFFC;
LABEL_11:
    v26 = v12;
    goto LABEL_20;
  }
  switch(mSelector)
  {
    case 0x73666D23u:
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 0x40000000;
      v21[2] = ___ZNK15HALS_IOUAStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2;
      v21[3] = &unk_1E696DB18;
      v21[4] = &v23;
      v21[5] = this;
      v10 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(_QWORD *)this + 56))(this);
      v11 = v21;
      goto LABEL_15;
    case 0x73666D61u:
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 0x40000000;
      v22[2] = ___ZNK15HALS_IOUAStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke;
      v22[3] = &unk_1E696DAF0;
      v22[4] = &v23;
      v22[5] = this;
      v10 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(_QWORD *)this + 56))(this);
      v11 = v22;
      goto LABEL_15;
    case 0x74617073u:
      v12 = 4;
      goto LABEL_11;
  }
LABEL_16:
  if (HALS_Stream::HasProperty(this, a2, a3, a6))
    PropertyDataSize = HALS_Stream::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
  else
    PropertyDataSize = HALS_IOUAObject::GetPropertyDataSize((HALS_IOUAStream *)((char *)this + 64), a3, v13, v14, v15, v16);
  v12 = PropertyDataSize;
  *((_DWORD *)v24 + 6) = PropertyDataSize;
LABEL_20:
  _Block_object_dispose(&v23, 8);
  return v12;
}

void sub_1B5848870(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void HALS_IOUAStream::GetPropertyData(HALS_IOUAStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, AudioObjectPropertyAddress *a5, uint64_t *a6, uint64_t a7, void *a8, HALS_Client *a9)
{
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  HALS_Object *v19;
  HALS_IODevice *v20;
  unint64_t v21;
  signed int mSelector;
  HALB_Mutex *v23;
  _DWORD *v24;
  BOOL v25;
  uint64_t *v26;
  __int128 v27;
  uint64_t v28;
  HALB_Mutex *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  _BOOL4 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  HALB_Mutex *v47;
  uint64_t v48;
  uint64_t v49;
  int NeighborStartingChannel;
  AudioStreamBasicDescription *v51;
  int v52;
  int v53;
  BOOL v54;
  uint64_t *v55;
  __int128 v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t *v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  HALB_Mutex *v73;
  uint64_t v74;
  int64x2_t v75;
  uint64_t v76;
  HALB_Mutex *v77;
  _DWORD *v78;
  HALB_Mutex *v79;
  uint64_t v80;
  unsigned int v81;
  HALB_Mutex *v82;
  int v83;
  int v84;
  HALB_Mutex *v85;
  HALB_Mutex *v86;
  int64x2_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  const void *v91;
  uint64_t v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *p_shared_owners;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  _DWORD *exception;
  NSObject *v100;
  const char *v101;
  _DWORD *v102;
  HALS_Client *v103;
  HALS_Object *v104;
  HALS_ObjectMap *v106;
  _QWORD v107[9];
  _QWORD v108[7];
  int v109;
  _QWORD v110[7];
  int v111;
  _QWORD v112[9];
  _QWORD v113[7];
  int v114;
  BOOL v115;
  _QWORD v116[7];
  int v117;
  BOOL v118;
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[8];
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  uint64_t *v125;
  _QWORD v126[8];
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  AudioStreamBasicDescription *v132;
  uint64_t v133;
  __n128 (*v134)(uint64_t, uint64_t);
  uint64_t (*v135)();
  unsigned int outputStruct;
  _BYTE buf[12];
  __int16 v138;
  int v139;
  _BYTE v140[24];
  uint64_t v141;
  uint64_t v142;
  __int128 v143;

  v142 = *MEMORY[0x1E0C80C00];
  if (a9)
    v16 = *((_BYTE *)a9 + 258) == 0;
  else
    v16 = 1;
  v131 = 0;
  v132 = (AudioStreamBasicDescription *)&v131;
  v133 = 0x5002000000;
  v134 = __Block_byref_object_copy__357;
  v135 = __Block_byref_object_dispose__358;
  v17 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
  v106 = (HALS_ObjectMap *)v17;
  if (!v17)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v140 = 136315394;
      *(_QWORD *)&v140[4] = "HALS_IOUAStream.cpp";
      *(_WORD *)&v140[12] = 1024;
      *(_DWORD *)&v140[14] = 211;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: owning device is missing", v140, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  v18 = (*(uint64_t (**)(uint64_t, HALS_Client *))(*(_QWORD *)v17 + 696))(v17, a9);
  v104 = v19;
  v21 = v18;
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1935762291)
  {
    if (mSelector <= 1936092512)
    {
      if (mSelector > 1935960433)
      {
        if (mSelector != 1935960434)
        {
          if (mSelector != 1936092451)
          {
            if (mSelector == 1936092479)
            {
              if (a4 > 0x27)
              {
                a5->mSelector = 40;
                *(_QWORD *)v140 = 0;
                *(_QWORD *)&v140[8] = v140;
                *(_QWORD *)&v140[16] = 0x2000000000;
                LOBYTE(v141) = 0;
                v112[0] = MEMORY[0x1E0C809B0];
                v112[1] = 0x40000000;
                v112[2] = ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_17;
                v112[3] = &unk_1E696DC70;
                v112[6] = v18;
                v112[7] = v19;
                v112[4] = v140;
                v112[5] = this;
                v112[8] = a6;
                v23 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(_QWORD *)this + 56))(this);
                HALB_CommandGate::ExecuteCommand(v23, (uint64_t)v112);
                if (!*(_BYTE *)(*(_QWORD *)&v140[8] + 24))
                {
                  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315394;
                    *(_QWORD *)&buf[4] = "HALS_IOUAStream.cpp";
                    v138 = 1024;
                    v139 = 421;
                    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOUAStream::_GetPropertyData: kAudioDevicePropertyStreamFormatSupported: the format is not supported", buf, 0x12u);
                  }
                  v24 = __cxa_allocate_exception(0x10uLL);
                  *(_QWORD *)v24 = &off_1E69A1B30;
                  v24[2] = 560226676;
                }
                goto LABEL_149;
              }
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v140 = 136315394;
                *(_QWORD *)&v140[4] = "HALS_IOUAStream.cpp";
                *(_WORD *)&v140[12] = 1024;
                *(_DWORD *)&v140[14] = 404;
                v100 = MEMORY[0x1E0C81028];
                v101 = "%25s:%-5d  HALS_IOUAStream::_GetPropertyData: bad property data size for kAudioDevicePropertyStre"
                       "amFormatSupported";
                goto LABEL_197;
              }
              goto LABEL_198;
            }
            goto LABEL_150;
          }
          *(_QWORD *)v140 = 0;
          *(_QWORD *)&v140[8] = v140;
          *(_QWORD *)&v140[16] = 0x2000000000;
          v141 = 0;
          v113[0] = MEMORY[0x1E0C809B0];
          v113[1] = 0x40000000;
          v113[2] = ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_3;
          v113[3] = &unk_1E696DC48;
          v115 = v16;
          v114 = a4;
          v113[4] = v140;
          v113[5] = this;
          v113[6] = a6;
          v79 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v79, (uint64_t)v113);
          v48 = *(_QWORD *)(*(_QWORD *)&v140[8] + 24);
          if ((_BYTE)v104 && v48)
          {
            v80 = *(_QWORD *)(*(_QWORD *)&v140[8] + 24);
            do
            {
              *a6 = v21;
              a6 += 5;
              --v80;
            }
            while (v80);
          }
          goto LABEL_123;
        }
        if (a4 <= 3)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_198;
          *(_DWORD *)v140 = 136315394;
          *(_QWORD *)&v140[4] = "HALS_IOUAStream.cpp";
          *(_WORD *)&v140[12] = 1024;
          *(_DWORD *)&v140[14] = 377;
          v100 = MEMORY[0x1E0C81028];
          v101 = "%25s:%-5d  HALS_IOUAStream::_GetPropertyData: bad property data size for kAudioStreamPropertyDirection";
          goto LABEL_197;
        }
        v119[0] = MEMORY[0x1E0C809B0];
        v119[1] = 0x40000000;
        v119[2] = ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_13;
        v119[3] = &__block_descriptor_tmp_14;
        v119[4] = this;
        v119[5] = a6;
        v82 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v82, (uint64_t)v119);
        goto LABEL_164;
      }
      if (mSelector != 1935762292)
      {
        if (mSelector == 1935894638)
        {
          if (a4 <= 3)
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_198;
            *(_DWORD *)v140 = 136315394;
            *(_QWORD *)&v140[4] = "HALS_IOUAStream.cpp";
            *(_WORD *)&v140[12] = 1024;
            *(_DWORD *)&v140[14] = 249;
            v100 = MEMORY[0x1E0C81028];
            v101 = "%25s:%-5d  HALS_IOUAStream::GetPropertyData: bad property data size for kAudioStreamPropertyStartingChannel";
            goto LABEL_197;
          }
          if (*((_DWORD *)this + 14) == 1)
          {
            NeighborStartingChannel = HALS_Device::GetNeighborStartingChannel(this, v106, v20);
          }
          else
          {
            *(_QWORD *)buf = 4;
            v92 = *((_QWORD *)this + 9);
            v93 = *(_QWORD *)(v92 + 792);
            v94 = *(std::__shared_weak_count **)(v92 + 800);
            *(_QWORD *)v140 = v93;
            *(_QWORD *)&v140[8] = v94;
            if (v94)
            {
              p_shared_owners = (unint64_t *)&v94->__shared_owners_;
              do
                v96 = __ldxr(p_shared_owners);
              while (__stxr(v96 + 1, p_shared_owners));
            }
            outputStruct = 0;
            HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v93 + 4), (const AudioObjectPropertyAddress *)"nhcsbolg", *((_DWORD *)this + 20), 0, 0, &outputStruct, (unint64_t *)buf);
            if (v94)
            {
              v97 = (unint64_t *)&v94->__shared_owners_;
              do
                v98 = __ldaxr(v97);
              while (__stlxr(v98 - 1, v97));
              if (!v98)
              {
                ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                std::__shared_weak_count::__release_weak(v94);
              }
            }
            if (outputStruct <= 1)
              NeighborStartingChannel = 1;
            else
              NeighborStartingChannel = outputStruct;
          }
          *(_DWORD *)a6 = NeighborStartingChannel;
          goto LABEL_164;
        }
LABEL_150:
        if (HALS_Stream::HasProperty(this, a2, a3, a9))
          HALS_Stream::GetPropertyData(this, a2, a3, a4, &a5->mSelector, a6, a7, a8, a9);
        else
          HALS_IOUAObject::GetPropertyData((HALS_IOUAStream *)((char *)this + 64), &a3->mSelector, a5, (AMCP::Log::Scope_Registry **)a6, (unsigned int *)a8, v89, v90, v91, v103);
        goto LABEL_166;
      }
      if (a4 <= 3)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_198;
        *(_DWORD *)v140 = 136315394;
        *(_QWORD *)&v140[4] = "HALS_IOUAStream.cpp";
        *(_WORD *)&v140[12] = 1024;
        *(_DWORD *)&v140[14] = 368;
        v100 = MEMORY[0x1E0C81028];
        v101 = "%25s:%-5d  HALS_IOUAStream::_GetPropertyData: bad property data size for kAudioStreamPropertyIsActive";
        goto LABEL_197;
      }
      v120[0] = MEMORY[0x1E0C809B0];
      v120[1] = 0x40000000;
      v120[2] = ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_11;
      v120[3] = &__block_descriptor_tmp_12;
      v120[4] = this;
      v120[5] = a6;
      v85 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v85, (uint64_t)v120);
LABEL_164:
      v65 = 4;
LABEL_165:
      a5->mSelector = v65;
      goto LABEL_166;
    }
    if (mSelector > 1936092531)
    {
      if (mSelector != 1936092532)
      {
        if (mSelector == 1952542835)
        {
          if (a4 <= 3)
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_198;
            *(_DWORD *)v140 = 136315394;
            *(_QWORD *)&v140[4] = "HALS_IOUAStream.cpp";
            *(_WORD *)&v140[12] = 1024;
            *(_DWORD *)&v140[14] = 469;
            v100 = MEMORY[0x1E0C81028];
            v101 = "%25s:%-5d  HALS_IOUAStream::_GetPropertyData: bad property data size for kAudioStreamPropertyIsReferenceStream";
            goto LABEL_197;
          }
          v38 = *((_DWORD *)this + 14) == 1;
        }
        else
        {
          if (mSelector != 1952805485)
            goto LABEL_150;
          if (a4 <= 3)
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_198;
            *(_DWORD *)v140 = 136315394;
            *(_QWORD *)&v140[4] = "HALS_IOUAStream.cpp";
            *(_WORD *)&v140[12] = 1024;
            *(_DWORD *)&v140[14] = 241;
            v100 = MEMORY[0x1E0C81028];
            v101 = "%25s:%-5d  HALS_IOUAStream::GetPropertyData: bad property data size for kAudioStreamPropertyTerminalType";
            goto LABEL_197;
          }
          *(_QWORD *)buf = 4;
          v31 = *((_QWORD *)this + 9);
          v32 = *(_QWORD *)(v31 + 792);
          v33 = *(std::__shared_weak_count **)(v31 + 800);
          *(_QWORD *)v140 = v32;
          *(_QWORD *)&v140[8] = v33;
          if (v33)
          {
            v34 = (unint64_t *)&v33->__shared_owners_;
            do
              v35 = __ldxr(v34);
            while (__stxr(v35 + 1, v34));
          }
          outputStruct = 0;
          HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v32 + 4), (const AudioObjectPropertyAddress *)"mretbolg", *((_DWORD *)this + 20), 0, 0, &outputStruct, (unint64_t *)buf);
          if (v33)
          {
            v36 = (unint64_t *)&v33->__shared_owners_;
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          v38 = outputStruct;
        }
        *(_DWORD *)a6 = v38;
        goto LABEL_164;
      }
      if (a4 <= 0x27)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_198;
        *(_DWORD *)v140 = 136315394;
        *(_QWORD *)&v140[4] = "HALS_IOUAStream.cpp";
        *(_WORD *)&v140[12] = 1024;
        *(_DWORD *)&v140[14] = 284;
        v100 = MEMORY[0x1E0C81028];
        v101 = "%25s:%-5d  HALS_IOUAStream::GetPropertyData: bad property data size for kAudioStreamPropertyVirtualFormat";
        goto LABEL_197;
      }
      HALS_IOUAStream::get_current_format(this, (AudioStreamBasicDescription *)a6);
      if (*((_DWORD *)a6 + 2) == 1819304813 && (*((_BYTE *)a6 + 12) & 0x40) == 0)
      {
        if (v16)
          v83 = 9;
        else
          v83 = 11;
        v84 = 4 * *((_DWORD *)a6 + 7);
        *((_DWORD *)a6 + 3) = v83;
        *((_DWORD *)a6 + 4) = v84;
        *((_DWORD *)a6 + 5) = 1;
        *((_DWORD *)a6 + 6) = v84;
        *((_DWORD *)a6 + 8) = 32;
      }
LABEL_138:
      if ((_BYTE)v104)
        *a6 = v21;
      v65 = 40;
      goto LABEL_165;
    }
    if (mSelector != 1936092513)
    {
      if (mSelector != 1936092525)
        goto LABEL_150;
      if (a4 <= 0x27)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_198;
        *(_DWORD *)v140 = 136315394;
        *(_QWORD *)&v140[4] = "HALS_IOUAStream.cpp";
        *(_WORD *)&v140[12] = 1024;
        *(_DWORD *)&v140[14] = 294;
        v100 = MEMORY[0x1E0C81028];
        v101 = "%25s:%-5d  HALS_IOUAStream::_GetPropertyData: bad property data size for kAudioDevicePropertyStreamFormatMatch";
        goto LABEL_197;
      }
      a5->mSelector = 40;
      HALS_IOUAStream::get_current_format(this, v132 + 1);
      v51 = v132;
      if (v132[1].mFormatID == 1819304813 && (v132[1].mFormatFlags & 0x40) == 0)
      {
        if (v16)
          v52 = 9;
        else
          v52 = 11;
        v53 = 4 * v132[1].mChannelsPerFrame;
        v132[1].mFormatFlags = v52;
        v51[1].mBytesPerPacket = v53;
        v51[1].mFramesPerPacket = 1;
        v51[1].mBytesPerFrame = v53;
        v51[1].mBitsPerChannel = 32;
      }
      if (a8)
        v54 = (_DWORD)a7 == 40;
      else
        v54 = 0;
      if (v54)
        v55 = (uint64_t *)a8;
      else
        v55 = a6;
      v126[0] = MEMORY[0x1E0C809B0];
      v126[1] = 0x40000000;
      v126[2] = ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
      v126[3] = &unk_1E696DB90;
      v126[6] = v21;
      v126[7] = v104;
      v56 = *((_OWORD *)v55 + 1);
      v127 = *(_OWORD *)v55;
      v128 = v56;
      v57 = v55[4];
      v126[5] = this;
      v126[4] = &v131;
      v129 = v57;
      v130 = a6;
      v29 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(_QWORD *)this + 56))(this);
      v30 = v126;
LABEL_88:
      HALB_CommandGate::ExecuteCommand(v29, (uint64_t)v30);
      goto LABEL_166;
    }
    *(_QWORD *)v140 = 0;
    *(_QWORD *)&v140[8] = v140;
    *(_QWORD *)&v140[16] = 0x2000000000;
    v141 = 0;
    v116[0] = MEMORY[0x1E0C809B0];
    v116[1] = 0x40000000;
    v116[2] = ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2;
    v116[3] = &unk_1E696DC20;
    v118 = v16;
    v117 = a4;
    v116[4] = v140;
    v116[5] = this;
    v116[6] = a6;
    v86 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v86, (uint64_t)v116);
    v74 = *(_QWORD *)(*(_QWORD *)&v140[8] + 24);
    if ((_BYTE)v104 && v74)
    {
      v87 = vdupq_n_s64(v21);
      v88 = *(_QWORD *)(*(_QWORD *)&v140[8] + 24);
      do
      {
        *a6 = v21;
        *(int64x2_t *)(a6 + 5) = v87;
        a6 += 7;
        --v88;
      }
      while (v88);
    }
    goto LABEL_147;
  }
  if (mSelector > 1885762591)
  {
    if (mSelector <= 1885762622)
    {
      if (mSelector != 1885762592)
      {
        if (mSelector == 1885762595)
        {
          *(_QWORD *)v140 = 0;
          *(_QWORD *)&v140[8] = v140;
          *(_QWORD *)&v140[16] = 0x2000000000;
          v141 = 0;
          v108[0] = MEMORY[0x1E0C809B0];
          v108[1] = 0x40000000;
          v108[2] = ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_21;
          v108[3] = &unk_1E696DCC0;
          v109 = a4;
          v108[4] = v140;
          v108[5] = this;
          v108[6] = a6;
          v47 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(_QWORD *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v47, (uint64_t)v108);
          v48 = *(_QWORD *)(*(_QWORD *)&v140[8] + 24);
          if ((_BYTE)v104 && v48)
          {
            v49 = *(_QWORD *)(*(_QWORD *)&v140[8] + 24);
            do
            {
              *a6 = v21;
              a6 += 5;
              --v49;
            }
            while (v49);
          }
LABEL_123:
          v81 = 40 * v48;
LABEL_148:
          a5->mSelector = v81;
LABEL_149:
          _Block_object_dispose(v140, 8);
          goto LABEL_166;
        }
        goto LABEL_150;
      }
      if (a4 <= 0x27)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_198;
        *(_DWORD *)v140 = 136315394;
        *(_QWORD *)&v140[4] = "HALS_IOUAStream.cpp";
        *(_WORD *)&v140[12] = 1024;
        *(_DWORD *)&v140[14] = 326;
        v100 = MEMORY[0x1E0C81028];
        v101 = "%25s:%-5d  HALS_IOUAStream::GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormat";
        goto LABEL_197;
      }
      HALS_IOUAStream::get_current_format(this, (AudioStreamBasicDescription *)a6);
      goto LABEL_138;
    }
    if (mSelector == 1885762623)
    {
      if (a4 > 0x27)
      {
        a5->mSelector = 40;
        *(_QWORD *)v140 = 0;
        *(_QWORD *)&v140[8] = v140;
        *(_QWORD *)&v140[16] = 0x2000000000;
        LOBYTE(v141) = 0;
        v107[0] = MEMORY[0x1E0C809B0];
        v107[1] = 0x40000000;
        v107[2] = ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_23;
        v107[3] = &unk_1E696DCE8;
        v107[6] = v18;
        v107[7] = v19;
        v107[4] = v140;
        v107[5] = this;
        v107[8] = a6;
        v77 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v77, (uint64_t)v107);
        if (!*(_BYTE *)(*(_QWORD *)&v140[8] + 24))
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_IOUAStream.cpp";
            v138 = 1024;
            v139 = 463;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOUAStream::_GetPropertyData: kAudioStreamPropertyPhysicalFormatSupported: the format is not supported", buf, 0x12u);
          }
          v78 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v78 = &off_1E69A1B30;
          v78[2] = 560226676;
        }
        goto LABEL_149;
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v140 = 136315394;
        *(_QWORD *)&v140[4] = "HALS_IOUAStream.cpp";
        *(_WORD *)&v140[12] = 1024;
        *(_DWORD *)&v140[14] = 446;
        v100 = MEMORY[0x1E0C81028];
        v101 = "%25s:%-5d  HALS_IOUAStream::_GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormatSupported";
LABEL_197:
        _os_log_impl(&dword_1B57BA000, v100, OS_LOG_TYPE_ERROR, v101, v140, 0x12u);
      }
LABEL_198:
      v102 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v102 = &off_1E69A1B30;
      v102[2] = 561211770;
    }
    if (mSelector != 1885762657)
    {
      if (mSelector != 1885762669)
        goto LABEL_150;
      if (a4 <= 0x27)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_198;
        *(_DWORD *)v140 = 136315394;
        *(_QWORD *)&v140[4] = "HALS_IOUAStream.cpp";
        *(_WORD *)&v140[12] = 1024;
        *(_DWORD *)&v140[14] = 335;
        v100 = MEMORY[0x1E0C81028];
        v101 = "%25s:%-5d  HALS_IOUAStream::_GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormatMatch";
        goto LABEL_197;
      }
      a5->mSelector = 40;
      HALS_IOUAStream::get_current_format(this, v132 + 1);
      if (a8)
        v25 = (_DWORD)a7 == 40;
      else
        v25 = 0;
      if (v25)
        v26 = (uint64_t *)a8;
      else
        v26 = a6;
      v121[0] = MEMORY[0x1E0C809B0];
      v121[1] = 0x40000000;
      v121[2] = ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_9;
      v121[3] = &unk_1E696DBB8;
      v121[6] = v21;
      v121[7] = v104;
      v27 = *((_OWORD *)v26 + 1);
      v122 = *(_OWORD *)v26;
      v123 = v27;
      v28 = v26[4];
      v121[5] = this;
      v121[4] = &v131;
      v124 = v28;
      v125 = a6;
      v29 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(_QWORD *)this + 56))(this);
      v30 = v121;
      goto LABEL_88;
    }
    *(_QWORD *)v140 = 0;
    *(_QWORD *)&v140[8] = v140;
    *(_QWORD *)&v140[16] = 0x2000000000;
    v141 = 0;
    v110[0] = MEMORY[0x1E0C809B0];
    v110[1] = 0x40000000;
    v110[2] = ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_19;
    v110[3] = &unk_1E696DC98;
    v111 = a4;
    v110[4] = v140;
    v110[5] = this;
    v110[6] = a6;
    v73 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v73, (uint64_t)v110);
    v74 = *(_QWORD *)(*(_QWORD *)&v140[8] + 24);
    if ((_BYTE)v104 && v74)
    {
      v75 = vdupq_n_s64(v21);
      v76 = *(_QWORD *)(*(_QWORD *)&v140[8] + 24);
      do
      {
        *a6 = v21;
        *(int64x2_t *)(a6 + 5) = v75;
        a6 += 7;
        --v76;
      }
      while (v76);
    }
LABEL_147:
    v81 = 56 * v74;
    goto LABEL_148;
  }
  if (mSelector > 1819569762)
  {
    if (mSelector == 1819569763)
    {
      if (a4 <= 3)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_198;
        *(_DWORD *)v140 = 136315394;
        *(_QWORD *)&v140[4] = "HALS_IOUAStream.cpp";
        *(_WORD *)&v140[12] = 1024;
        *(_DWORD *)&v140[14] = 272;
        v100 = MEMORY[0x1E0C81028];
        v101 = "%25s:%-5d  HALS_IOUAStream::GetPropertyData: bad property data size for kAudioStreamPropertyLatency";
        goto LABEL_197;
      }
      *(_QWORD *)buf = 4;
      v66 = *((_QWORD *)this + 9);
      v67 = *(_QWORD *)(v66 + 792);
      v68 = *(std::__shared_weak_count **)(v66 + 800);
      *(_QWORD *)v140 = v67;
      *(_QWORD *)&v140[8] = v68;
      if (v68)
      {
        v69 = (unint64_t *)&v68->__shared_owners_;
        do
          v70 = __ldxr(v69);
        while (__stxr(v70 + 1, v69));
      }
      outputStruct = 0;
      HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v67 + 4), (const AudioObjectPropertyAddress *)"cntlbolg", *((_DWORD *)this + 20), 0, 0, &outputStruct, (unint64_t *)buf);
      if (v68)
      {
        v71 = (unint64_t *)&v68->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      if ((_BYTE)v104)
        (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v106 + 264))(v106);
      goto LABEL_164;
    }
    v39 = 1851878764;
  }
  else
  {
    if (mSelector == 1668641652)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 2) >= a4 / 0xCuLL)
        v58 = a4 / 0xCuLL;
      else
        v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 2);
      if (v58)
      {
        v59 = 0;
        v60 = 0;
        do
        {
          v61 = *((_QWORD *)this + 11);
          if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 12) - v61) >> 2) > v60)
          {
            v62 = (char *)a6 + v59;
            v63 = (uint64_t *)(v61 + v59);
            v64 = *v63;
            *((_DWORD *)v62 + 2) = *((_DWORD *)v63 + 2);
            *(_QWORD *)v62 = v64;
          }
          ++v60;
          v59 += 12;
        }
        while (12 * v58 != v59);
      }
      v65 = 12 * v58;
      goto LABEL_165;
    }
    v39 = 1819173229;
  }
  if (mSelector != v39)
    goto LABEL_150;
  if (a4 <= 7)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_198;
    *(_DWORD *)v140 = 136315394;
    *(_QWORD *)&v140[4] = "HALS_IOUAStream.cpp";
    *(_WORD *)&v140[12] = 1024;
    *(_DWORD *)&v140[14] = 219;
    v100 = MEMORY[0x1E0C81028];
    v101 = "%25s:%-5d  HALS_IOUAStream::GetPropertyData: bad property data size for kAudioObjectPropertyName";
    goto LABEL_197;
  }
  v40 = *((_QWORD *)this + 9);
  v41 = *(_QWORD *)(v40 + 792);
  v42 = *(std::__shared_weak_count **)(v40 + 800);
  *(_QWORD *)v140 = v41;
  *(_QWORD *)&v140[8] = v42;
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  *(_QWORD *)&v143 = *((unsigned int *)this + 20);
  *((_QWORD *)&v143 + 1) = *(_QWORD *)&a3->mSelector;
  HALS_IOUAUCDriver::get_string_property((HALS_IOUAUCDriver *)buf, v41, v143, (void *)a3->mElement, a8, a7);
  if (v42)
  {
    v45 = (unint64_t *)&v42->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  *a6 = (uint64_t)CFRetain(*(CFTypeRef *)buf);
  a5->mSelector = 8;
  if (*(_QWORD *)buf)
    CFRelease(*(CFTypeRef *)buf);
LABEL_166:
  HALS_ObjectMap::ReleaseObject(v106, v19);
  _Block_object_dispose(&v131, 8);
}

void sub_1B5849C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, HALS_ObjectMap *a13)
{
  uint64_t v13;
  HALS_Object *v15;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v13 - 144);
  HALS_ObjectMap::ReleaseObject(a13, v15);
  _Block_object_dispose(&STACK[0x2F8], 8);
  _Unwind_Resume(a1);
}

void HALS_IOUAStream::SetPropertyData(HALS_IOUAStream *this, uint64_t a2, const AudioObjectPropertyAddress *a3, unsigned int a4, const AudioStreamBasicDescription *a5, unsigned int a6, CFTypeRef *a7, HALS_Client *a8)
{
  HALS_ObjectMap *v15;
  AudioObjectPropertySelector mSelector;
  HALB_Mutex *v17;
  HALS_Object *v18;
  AudioObjectPropertyElement mElement;
  uint64_t v20;
  Float64 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  AudioStreamBasicDescription *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  int v29;
  HALB_Mutex *v30;
  uint64_t v31;
  HALS_IOUAUCDriver *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  Float64 v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  AudioStreamBasicDescription *v43;
  unint64_t *v44;
  unint64_t v45;
  int v46;
  HALB_Mutex *v47;
  uint64_t v48;
  HALS_IOUAUCDriver *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  const void *v54;
  uint64_t v55;
  const void *v56;
  HALS_Client *v57;
  uint64_t v58;
  HALS_IOUAUCDriver *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  _DWORD *exception;
  _DWORD *v66;
  NSObject *v67;
  const char *v68;
  _DWORD *v69;
  unint64_t v70;
  AudioObjectPropertyAddress v71;
  _QWORD v72[6];
  double outputStruct[5];
  AudioStreamBasicDescription v74;
  AudioStreamBasicDescription buf;
  int v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_IOUAStream *, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 96))(this, a2, a3, a8) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  v15 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
  if (!v15)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&buf.mSampleRate + 4) = "HALS_IOUAStream.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 493;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOUAStream::SetPropertyData: owning device is missing", (uint8_t *)&buf, 0x12u);
    }
    v66 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v66 = &off_1E69A1B30;
    v66[2] = 560947818;
  }
  mSelector = a3->mSelector;
  if (a3->mSelector == 1885762592)
  {
    if (a4 <= 0x27)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_74;
      LODWORD(buf.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&buf.mSampleRate + 4) = "HALS_IOUAStream.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 537;
      v67 = MEMORY[0x1E0C81028];
      v68 = "%25s:%-5d  HALS_IOUAStream::SetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormat";
      goto LABEL_73;
    }
    *(_QWORD *)&v71.mSelector = 40;
    v38 = *((_QWORD *)this + 9);
    v39 = *(double *)(v38 + 792);
    v40 = *(std::__shared_weak_count **)(v38 + 800);
    buf.mSampleRate = v39;
    *(_QWORD *)&buf.mFormatID = v40;
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(p_shared_owners);
      while (__stxr(v42 + 1, p_shared_owners));
    }
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(*(_QWORD *)&v39 + 4), a3, *((_DWORD *)this + 20), 0, 0, outputStruct, (unint64_t *)&v71.mSelector);
    if (v40)
    {
      v44 = (unint64_t *)&v40->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    HALB_FormatList::BestMatchForPhysicalFormat((HALS_IOUAStream *)((char *)this + 120), a5, &v74, v43, outputStruct[0]);
    if (a8 && (v74.mFormatID != 1819304813 || (v74.mFormatFlags & 0x40) != 0))
    {
      v46 = *((_DWORD *)v15 + 4);
      *(_QWORD *)&buf.mSampleRate = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf.mFormatID = 0x40000000;
      *(_QWORD *)&buf.mBytesPerPacket = ___ZN11HALS_Client19SetNonMixableFormatEj_block_invoke;
      *(_QWORD *)&buf.mBytesPerFrame = &__block_descriptor_tmp_14_2053;
      *(_QWORD *)&buf.mBitsPerChannel = a8;
      v76 = v46;
      v47 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Client *))(*(_QWORD *)a8 + 56))(a8);
      HALB_CommandGate::ExecuteCommand(v47, (uint64_t)&buf);
    }
    v48 = *((_QWORD *)this + 9);
    v49 = *(HALS_IOUAUCDriver **)(v48 + 792);
    v33 = *(std::__shared_weak_count **)(v48 + 800);
    *(_QWORD *)&buf.mSampleRate = v49;
    *(_QWORD *)&buf.mFormatID = v33;
    if (v33)
    {
      v50 = (unint64_t *)&v33->__shared_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    HALS_IOUAUCDriver::SetPropertyData(v49, a3, *((_DWORD *)this + 20), 0, 0, &v74, 0x28uLL);
    if (!v33)
      goto LABEL_54;
    v52 = (unint64_t *)&v33->__shared_owners_;
    do
      v37 = __ldaxr(v52);
    while (__stlxr(v37 - 1, v52));
LABEL_50:
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    goto LABEL_54;
  }
  if (mSelector != 1936092532)
  {
    if (mSelector == 1935762292)
    {
      if (a4 > 3)
      {
        if (!*((_DWORD *)this + 14))
        {
          v58 = *((_QWORD *)this + 9);
          v59 = *(HALS_IOUAUCDriver **)(v58 + 792);
          v60 = *(std::__shared_weak_count **)(v58 + 800);
          *(_QWORD *)&buf.mSampleRate = v59;
          *(_QWORD *)&buf.mFormatID = v60;
          if (v60)
          {
            v61 = (unint64_t *)&v60->__shared_owners_;
            do
              v62 = __ldxr(v61);
            while (__stxr(v62 + 1, v61));
          }
          HALS_IOUAUCDriver::SetPropertyData(v59, a3, *((_DWORD *)this + 20), 0, 0, a5, a4);
          if (v60)
          {
            v63 = (unint64_t *)&v60->__shared_owners_;
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
        }
        v72[0] = MEMORY[0x1E0C809B0];
        v72[1] = 0x40000000;
        v72[2] = ___ZN15HALS_IOUAStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
        v72[3] = &__block_descriptor_tmp_25;
        v72[4] = this;
        v72[5] = a5;
        v17 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v17, (uint64_t)v72);
        goto LABEL_54;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
LABEL_74:
        v69 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v69 = &off_1E69A1B30;
        v69[2] = 561211770;
      }
      LODWORD(buf.mSampleRate) = 136315394;
      *(_QWORD *)((char *)&buf.mSampleRate + 4) = "HALS_IOUAStream.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 501;
      v67 = MEMORY[0x1E0C81028];
      v68 = "%25s:%-5d  HALS_IOUAStream::SetPropertyData: bad property data size for kAudioStreamPropertyIsActive";
LABEL_73:
      _os_log_impl(&dword_1B57BA000, v67, OS_LOG_TYPE_ERROR, v68, (uint8_t *)&buf, 0x12u);
      goto LABEL_74;
    }
    if (HALS_Stream::HasProperty(this, a2, a3, a8))
      HALS_Object::SetPropertyData((uint64_t)this, a2, (uint64_t)a3, v53, (uint64_t)v54, v55, (uint64_t)v56, (uint64_t)a8);
    HALS_IOUAObject::SetPropertyData((HALS_IOUAStream *)((char *)this + 64), &a3->mSelector, (const AudioObjectPropertyAddress *)a5, a7, v54, v55, v56, v57);
    goto LABEL_54;
  }
  if (a4 <= 0x27)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_74;
    LODWORD(buf.mSampleRate) = 136315394;
    *(_QWORD *)((char *)&buf.mSampleRate + 4) = "HALS_IOUAStream.cpp";
    LOWORD(buf.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 514;
    v67 = MEMORY[0x1E0C81028];
    v68 = "%25s:%-5d  HALS_IOUAStream::SetPropertyData: bad property data size for kAudioStreamPropertyVirtualFormat";
    goto LABEL_73;
  }
  *(_QWORD *)&v71.mSelector = *(_QWORD *)&a3->mSelector;
  mElement = a3->mElement;
  v71.mScope = 1885762592;
  v71.mElement = mElement;
  v70 = 40;
  v20 = *((_QWORD *)this + 9);
  v21 = *(double *)(v20 + 792);
  v22 = *(std::__shared_weak_count **)(v20 + 800);
  buf.mSampleRate = v21;
  *(_QWORD *)&buf.mFormatID = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(*(_QWORD *)&v21 + 4), &v71, *((_DWORD *)this + 20), 0, 0, outputStruct, &v70);
  if (v22)
  {
    v26 = (unint64_t *)&v22->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v28 = *(_OWORD *)&a5->mBytesPerPacket;
  *(_OWORD *)&buf.mSampleRate = *(_OWORD *)&a5->mSampleRate;
  *(_OWORD *)&buf.mBytesPerPacket = v28;
  *(_QWORD *)&buf.mBitsPerChannel = *(_QWORD *)&a5->mBitsPerChannel;
  if (buf.mFormatID == 1819304813)
  {
    buf.mBitsPerChannel = 0;
    *(_OWORD *)&buf.mFormatFlags = 0uLL;
  }
  HALB_FormatList::BestMatchForPhysicalFormat((HALS_IOUAStream *)((char *)this + 120), &buf, &v74, v25, outputStruct[0]);
  if (a8 && (v74.mFormatID != 1819304813 || (v74.mFormatFlags & 0x40) != 0))
  {
    v29 = *((_DWORD *)v15 + 4);
    *(_QWORD *)&buf.mSampleRate = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf.mFormatID = 0x40000000;
    *(_QWORD *)&buf.mBytesPerPacket = ___ZN11HALS_Client19SetNonMixableFormatEj_block_invoke;
    *(_QWORD *)&buf.mBytesPerFrame = &__block_descriptor_tmp_14_2053;
    *(_QWORD *)&buf.mBitsPerChannel = a8;
    v76 = v29;
    v30 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Client *))(*(_QWORD *)a8 + 56))(a8);
    HALB_CommandGate::ExecuteCommand(v30, (uint64_t)&buf);
  }
  v31 = *((_QWORD *)this + 9);
  v32 = *(HALS_IOUAUCDriver **)(v31 + 792);
  v33 = *(std::__shared_weak_count **)(v31 + 800);
  *(_QWORD *)&buf.mSampleRate = v32;
  *(_QWORD *)&buf.mFormatID = v33;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  HALS_IOUAUCDriver::SetPropertyData(v32, &v71, *((_DWORD *)this + 20), 0, 0, &v74, 0x28uLL);
  if (v33)
  {
    v36 = (unint64_t *)&v33->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    goto LABEL_50;
  }
LABEL_54:
  HALS_ObjectMap::ReleaseObject(v15, v18);
}

void sub_1B584A474(_Unwind_Exception *a1)
{
  HALS_ObjectMap *v1;
  uint64_t v2;
  HALS_Object *v4;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2 - 144);
  HALS_ObjectMap::ReleaseObject(v1, v4);
  _Unwind_Resume(a1);
}

uint64_t HALS_Object::WantsOwnedObjectPropertiesChanged(HALS_Object *this)
{
  return 0;
}

uint64_t HALS_Stream::GetStartingChannel(HALS_Stream *this)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v1 = *((unsigned int *)this + 4);
  v3 = 0x676C6F627363686ELL;
  v4 = 0;
  v5 = 0;
  (*(void (**)(HALS_Stream *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, v1, &v3, 4, &v5, (char *)&v5 + 4, 0, 0, 0);
  return HIDWORD(v5);
}

uint64_t HALS_Stream::IsMetaStream(HALS_Stream *this)
{
  return 0;
}

uint64_t HALS_IOUAStream::GetIOBuffer(HALS_IOUAStream *this)
{
  return *((_QWORD *)this + 23);
}

uint64_t HALS_IOUAStream::GetIOBufferByteSize(HALS_IOUAStream *this)
{
  return *((unsigned int *)this + 48);
}

void `non-virtual thunk to'HALS_IOUAStream::~HALS_IOUAStream(HALS_IOUAStream *this)
{
  HALS_IOUAStream::~HALS_IOUAStream((HALS_IOUAStream *)((char *)this - 64));
}

{
  HALS_IOUAStream::~HALS_IOUAStream((HALS_IOUAStream *)((char *)this - 64));
  JUMPOUT(0x1B5E50688);
}

void HALS_IOUAStream::unmap_memory(HALS_IOUAStream *this)
{
  unsigned int v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (_QWORD *)((char *)this + 180);
  v1 = *((_DWORD *)this + 45);
  if (v1)
  {
    v3 = *((_QWORD *)this + 23);
    if (v3)
    {
      v4 = *((_QWORD *)this + 9);
      v5 = *(_QWORD *)(v4 + 792);
      v6 = *(std::__shared_weak_count **)(v4 + 800);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        v1 = *((_DWORD *)this + 45);
        v3 = *((_QWORD *)this + 23);
      }
      HALS_IOUAUCDriver::unmap_memory((HALS_IOUAUCDriver *)*(unsigned int *)(v5 + 4), v1, v3);
      if (v6)
      {
        v9 = (unint64_t *)&v6->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      *v2 = 0;
      v2[1] = 0;
    }
  }
}

void sub_1B584A69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, NSObject **a9, __int128 a10, __int16 a11, int a12)
{
  _QWORD *v12;
  AMCP::Log::Scope_Registry *v14;
  NSObject *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;

  if (a2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    v14 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a9, "com.apple.coreaudio", "AMCP");
    v15 = *a9;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      LODWORD(a9) = 67109634;
      HIDWORD(a9) = v17;
      LOWORD(a10) = 2080;
      *(_QWORD *)((char *)&a10 + 2) = "HALS_IOUAStream.cpp";
      WORD5(a10) = 1024;
      HIDWORD(a10) = 75;
      _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception unmapping io buffers", (uint8_t *)&a9, 0x18u);
    }
    *v12 = 0;
    v12[1] = 0;
    __cxa_end_catch();
    JUMPOUT(0x1B584A670);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN15HALS_IOUAStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 112) = **(_DWORD **)(result + 40) != 0;
  return result;
}

__n128 __Block_byref_object_copy__357(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 40);
  v3 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v3;
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void HALS_IOUAStream::get_current_format(HALS_IOUAStream *this, AudioStreamBasicDescription *a2)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;

  v9 = 40;
  v2 = *((_QWORD *)this + 9);
  v3 = *(_QWORD *)(v2 + 792);
  v4 = *(std::__shared_weak_count **)(v2 + 800);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v3 + 4), (const AudioObjectPropertyAddress *)" tfpbolg", *((_DWORD *)this + 20), 0, 0, a2, &v9);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1B584A86C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, AudioStreamBasicDescription *a4)
{
  HALB_FormatList **v5;
  AudioStreamBasicDescription *v6;
  void (**v7)(HALB_FormatList *__hidden);
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v5 = *(HALB_FormatList ***)(a1 + 40);
  if (*(_BYTE *)(a1 + 56))
  {
    v7 = &off_1E69749F0;
    v8 = 0u;
    v9 = 0u;
    v10 = 0u;
    HALB_FormatList::GetFormatListWithUpdatedSampleRate(v5[19], v5[20], (HALB_FormatList *)&v7, *(Float64 *)(a1 + 48));
    HALB_FormatList::BestMatchForVirtualFormat((HALB_FormatList *)&v7, (const AudioStreamBasicDescription *)(a1 + 64), *(const AudioStreamBasicDescription **)(a1 + 104), v6, *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
    HALB_FormatList::~HALB_FormatList((HALB_FormatList *)&v7);
  }
  else
  {
    HALB_FormatList::BestMatchForVirtualFormat((HALB_FormatList *)(v5 + 15), (const AudioStreamBasicDescription *)(a1 + 64), *(const AudioStreamBasicDescription **)(a1 + 104), a4, *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
  }
}

void sub_1B584A91C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B584A90CLL);
}

void ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_9(uint64_t a1, uint64_t a2, uint64_t a3, AudioStreamBasicDescription *a4)
{
  HALB_FormatList **v5;
  AudioStreamBasicDescription *v6;
  void (**v7)(HALB_FormatList *__hidden);
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v5 = *(HALB_FormatList ***)(a1 + 40);
  if (*(_BYTE *)(a1 + 56))
  {
    v7 = &off_1E69749F0;
    v8 = 0u;
    v9 = 0u;
    v10 = 0u;
    HALB_FormatList::GetFormatListWithUpdatedSampleRate(v5[19], v5[20], (HALB_FormatList *)&v7, *(Float64 *)(a1 + 48));
    HALB_FormatList::BestMatchForPhysicalFormat((HALB_FormatList *)&v7, (const AudioStreamBasicDescription *)(a1 + 64), *(const AudioStreamBasicDescription **)(a1 + 104), v6, *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
    HALB_FormatList::~HALB_FormatList((HALB_FormatList *)&v7);
  }
  else
  {
    HALB_FormatList::BestMatchForPhysicalFormat((HALB_FormatList *)(v5 + 15), (const AudioStreamBasicDescription *)(a1 + 64), *(const AudioStreamBasicDescription **)(a1 + 104), a4, *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
  }
}

void sub_1B584A9DC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B584A9CCLL);
}

uint64_t ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_11(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(unsigned __int8 *)(*(_QWORD *)(result + 32) + 112);
  return result;
}

uint64_t ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_13(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(unsigned __int8 *)(*(_QWORD *)(result + 32) + 52);
  return result;
}

uint64_t ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2(uint64_t a1)
{
  return HALB_FormatList::GetVirtualFormats(*(_QWORD *)(a1 + 40) + 120, *(_BYTE *)(a1 + 60), *(unsigned int *)(a1 + 56) / 0x38uLL, (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(AudioStreamRangedDescription **)(a1 + 48));
}

uint64_t ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_3(uint64_t a1)
{
  return HALB_FormatList::GetVirtualFormats(*(_QWORD *)(a1 + 40) + 120, *(_BYTE *)(a1 + 60), *(unsigned int *)(a1 + 56) / 0x28uLL, (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(AudioStreamBasicDescription **)(a1 + 48));
}

void sub_1B584AA9C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_17(uint64_t a1)
{
  uint64_t v2;
  void (**v3)(HALB_FormatList *__hidden);
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 56))
  {
    v3 = &off_1E69749F0;
    v4 = 0u;
    v5 = 0u;
    v6 = 0u;
    HALB_FormatList::GetFormatListWithUpdatedSampleRate(*(HALB_FormatList **)(v2 + 152), *(const HALB_FormatList **)(v2 + 160), (HALB_FormatList *)&v3, *(Float64 *)(a1 + 48));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = HALB_FormatList::IsVirtualFormatSupported((const AudioStreamBasicDescription *)v4, *((AudioStreamBasicDescription **)&v4 + 1), *(_QWORD *)(a1 + 64));
    HALB_FormatList::~HALB_FormatList((HALB_FormatList *)&v3);
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = HALB_FormatList::IsVirtualFormatSupported(*(const AudioStreamBasicDescription **)(v2 + 128), *(AudioStreamBasicDescription **)(v2 + 136), *(_QWORD *)(a1 + 64));
  }
}

void sub_1B584AB3C(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HALB_FormatList::~HALB_FormatList((HALB_FormatList *)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B584AB2CLL);
}

__n128 ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_19(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __int128 v13;
  __int128 v14;

  v1 = *(_DWORD *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(v3 + 24) = 0;
  if (v1 >= 0x38)
  {
    v5 = 0;
    v6 = 0;
    v7 = v1 / 0x38uLL;
    v8 = -1;
    do
    {
      v9 = *(_QWORD *)(v2 + 152);
      if (++v8 >= (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v2 + 160) - v9) >> 3)))
        break;
      v10 = v9 + v5;
      v5 += 56;
      v11 = v4 + 56 * v6;
      result = *(__n128 *)v10;
      v13 = *(_OWORD *)(v10 + 16);
      v14 = *(_OWORD *)(v10 + 32);
      *(_QWORD *)(v11 + 48) = *(_QWORD *)(v10 + 48);
      *(_OWORD *)(v11 + 16) = v13;
      *(_OWORD *)(v11 + 32) = v14;
      *(__n128 *)v11 = result;
      v6 = *(_QWORD *)(v3 + 24) + 1;
      *(_QWORD *)(v3 + 24) = v6;
    }
    while (v6 < v7);
  }
  return result;
}

uint64_t ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_21(uint64_t a1)
{
  return HALB_FormatList::GetPhysicalFormats(*(_QWORD *)(a1 + 40) + 120, *(unsigned int *)(a1 + 56) / 0x38uLL, (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(AudioStreamBasicDescription **)(a1 + 48));
}

void sub_1B584AC44(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_23(uint64_t a1)
{
  uint64_t v2;
  void (**v3)(HALB_FormatList *__hidden);
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 56))
  {
    v3 = &off_1E69749F0;
    v4 = 0u;
    v5 = 0u;
    v6 = 0u;
    HALB_FormatList::GetFormatListWithUpdatedSampleRate(*(HALB_FormatList **)(v2 + 152), *(const HALB_FormatList **)(v2 + 160), (HALB_FormatList *)&v3, *(Float64 *)(a1 + 48));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = HALB_FormatList::IsVirtualFormatSupported(*((const AudioStreamBasicDescription **)&v5 + 1), (AudioStreamBasicDescription *)v6, *(_QWORD *)(a1 + 64));
    HALB_FormatList::~HALB_FormatList((HALB_FormatList *)&v3);
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = HALB_FormatList::IsVirtualFormatSupported(*(const AudioStreamBasicDescription **)(v2 + 152), *(AudioStreamBasicDescription **)(v2 + 160), *(_QWORD *)(a1 + 64));
  }
}

void sub_1B584ACE4(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  HALB_FormatList::~HALB_FormatList((HALB_FormatList *)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B584ACD4);
}

uint64_t ___ZNK15HALS_IOUAStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(_QWORD *)(result + 40) + 136)
                                                                   - *(_DWORD *)(*(_QWORD *)(result + 40) + 128)) & 0xFFFFFFF8;
  return result;
}

uint64_t ___ZNK15HALS_IOUAStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = -1840700264
                                                                  * ((*(_QWORD *)(*(_QWORD *)(result + 40) + 136)
                                                                    - *(_QWORD *)(*(_QWORD *)(result + 40) + 128)) >> 3);
  return result;
}

uint64_t ___ZNK15HALS_IOUAStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(_QWORD *)(result + 40) + 160)
                                                                   - *(_DWORD *)(*(_QWORD *)(result + 40) + 152)) & 0xFFFFFFF8;
  return result;
}

uint64_t ___ZNK15HALS_IOUAStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_4(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(_QWORD *)(result + 40) + 160)
                                                                   - *(_DWORD *)(*(_QWORD *)(result + 40) + 152)) & 0xFFFFFFF8;
  return result;
}

void HALS_IOUAStream::SynchronizeWithHardware(HALS_IOUAStream *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  AMCP::Log::Scope_Registry *v8;
  unsigned int v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  _opaque_pthread_t *v21;
  mach_port_t v22;
  void *exception;
  __int128 v24;
  uint64_t v25;
  uint64_t (**v26)();
  __int128 v27;
  uint64_t v28;
  std::runtime_error v29;
  std::runtime_error v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  uint32_t outputCnt;
  uint64_t output;
  uint8_t buf[8];
  _BYTE v40[10];
  __int16 v41;
  int v42;
  __int16 v43;
  _BYTE v44[14];
  const char *v45;
  int v46;
  uint64_t input[3];

  input[2] = *MEMORY[0x1E0C80C00];
  if (!*((_DWORD *)this + 14))
  {
    v2 = *((_QWORD *)this + 9);
    v3 = *(_QWORD *)(v2 + 792);
    v4 = *(std::__shared_weak_count **)(v2 + 800);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    v7 = *((unsigned int *)this + 20);
    input[0] = *((unsigned int *)this + 44);
    input[1] = v7;
    output = 0;
    outputCnt = 1;
    v8 = (AMCP::Log::Scope_Registry *)IOConnectCallMethod(*(_DWORD *)(v3 + 4), 8u, input, 2u, 0, 0, &output, &outputCnt, 0, 0);
    if ((_DWORD)v8)
    {
      AMCP::Log::Scope_Registry::get(v8);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v20 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v21 = pthread_self();
        v22 = pthread_mach_thread_np(v21);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v22;
        *(_WORD *)v40 = 2080;
        *(_QWORD *)&v40[2] = "HALS_IOUAUCDriver.cpp";
        v41 = 1024;
        v42 = 350;
        v43 = 2080;
        *(_QWORD *)v44 = "ret != kIOReturnSuccess";
        _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to get buffer id", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
      exception = __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v29, "Failed to get buffer id");
      std::runtime_error::runtime_error(&v30, &v29);
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v35 = -1;
      v30.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v31 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v30);
      *(_QWORD *)&v44[6] = "uint64_t HALS_IOUAUCDriver::get_stream_io_buffer_id(AudioObjectID, AudioObjectID)";
      v45 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
      v46 = 350;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v24);
      v27 = v24;
      v28 = v25;
      v24 = 0uLL;
      v25 = 0;
      v26 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v26);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
    }
    v9 = output;
    if (*((_DWORD *)this + 45) != (_DWORD)output)
    {
      HALS_IOUAStream::unmap_memory(this);
      v30.__vftable = 0;
      v11 = *((_QWORD *)this + 9);
      v12 = *(_QWORD *)(v11 + 792);
      v13 = *(std::__shared_weak_count **)(v11 + 800);
      *(_QWORD *)buf = v12;
      *(_QWORD *)v40 = v13;
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      *((_QWORD *)this + 23) = HALS_IOUAUCDriver::map_memory((HALS_IOUAUCDriver *)*(unsigned int *)(v12 + 4), v9, &v30, v10);
      if (v13)
      {
        v16 = (unint64_t *)&v13->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      *((_DWORD *)this + 48) = v30.__vftable;
      *((_DWORD *)this + 45) = v9;
    }
    if (v4)
    {
      v18 = (unint64_t *)&v4->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  HALS_IOUAStream::build_format_list(this);
}

void sub_1B584B0C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, std::runtime_error a20,std::runtime_error a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  AMCP::Log::Scope_Registry *v27;
  NSObject *v28;
  _opaque_pthread_t *v29;
  mach_port_t v30;

  if (a2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v25 - 144);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
    v27 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v27);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)(v25 - 144), "com.apple.coreaudio", "AMCP");
    v28 = **(NSObject ***)(v25 - 144);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v25 - 144);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v29 = pthread_self();
      v30 = pthread_mach_thread_np(v29);
      *(_DWORD *)(v25 - 144) = 67109634;
      *(_DWORD *)(v25 - 140) = v30;
      *(_WORD *)(v25 - 136) = 2080;
      *(_QWORD *)(v24 + 10) = "HALS_IOUAStream.cpp";
      *(_WORD *)(v25 - 126) = 1024;
      *(_DWORD *)(v25 - 124) = 600;
      _os_log_error_impl(&dword_1B57BA000, v28, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception remapping io buffers", (uint8_t *)(v25 - 144), 0x18u);
    }
    *(_QWORD *)(v23 + 188) = 0;
    *(_QWORD *)(v23 + 180) = 0;
    __cxa_end_catch();
    JUMPOUT(0x1B584ADBCLL);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOUAStream::build_format_list(HALS_IOUAStream *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t PropertySize;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  HALB_Mutex *v21;
  _QWORD v22[6];
  void *__p;
  char *v24;
  char *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t v28;

  v2 = *((_QWORD *)this + 9);
  v3 = *(_QWORD *)(v2 + 792);
  v4 = *(std::__shared_weak_count **)(v2 + 800);
  v26 = v3;
  v27 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v28 = 0;
  PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v3 + 4), (const AudioObjectPropertyAddress *)"amfsbolg", *((_DWORD *)this + 20), 0, 0);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v10 = 0;
  v28 = PropertySize;
  v24 = 0;
  v25 = 0;
  __p = 0;
  if (PropertySize >= 0x28)
  {
    v11 = PropertySize / 0x28;
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v11);
    __p = v10;
    v25 = &v10[40 * v12];
    v13 = 40 * ((40 * v11 - 40) / 0x28) + 40;
    bzero(v10, v13);
    v24 = &v10[v13];
  }
  v14 = *((_QWORD *)this + 9);
  v15 = *(_QWORD *)(v14 + 792);
  v16 = *(std::__shared_weak_count **)(v14 + 800);
  v26 = v15;
  v27 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v15 + 4), (const AudioObjectPropertyAddress *)"amfsbolg", *((_DWORD *)this + 20), 0, 0, v10, &v28);
  if (v16)
  {
    v19 = (unint64_t *)&v16->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 0x40000000;
  v22[2] = ___ZN15HALS_IOUAStream17build_format_listEv_block_invoke;
  v22[3] = &__block_descriptor_tmp_26_384;
  v22[4] = this;
  v22[5] = &__p;
  v21 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v21, (uint64_t)v22);
  if (__p)
  {
    v24 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1B584B484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  void *v16;
  uint64_t v17;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v17 - 56);
  if (v16)
    operator delete(v16);
  _Unwind_Resume(a1);
}

void ___ZN15HALS_IOUAStream17build_format_listEv_block_invoke(uint64_t a1, uint64_t a2, const AudioStreamRangedDescription *a3)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  HALB_FormatList *v7;
  __int128 v8;
  Float64 v9;
  AudioStreamRangedDescription v10;

  v3 = *(_QWORD **)(a1 + 32);
  v3[17] = v3[16];
  v3[20] = v3[19];
  v4 = *(uint64_t **)(a1 + 40);
  v5 = *v4;
  v6 = v4[1];
  if (*v4 != v6)
  {
    v7 = (HALB_FormatList *)(v3 + 15);
    do
    {
      v8 = *(_OWORD *)(v5 + 16);
      *(_OWORD *)&v10.mFormat.mSampleRate = *(_OWORD *)v5;
      *(_OWORD *)&v10.mFormat.mBytesPerPacket = v8;
      *(_QWORD *)&v10.mFormat.mBitsPerChannel = *(_QWORD *)(v5 + 32);
      v9 = *(double *)v5;
      v5 += 40;
      v10.mSampleRateRange.mMinimum = v9;
      v10.mSampleRateRange.mMaximum = v9;
      HALB_FormatList::AddPhysicalFormat(v7, &v10, a3);
    }
    while (v5 != v6);
  }
}

void HALS_IOUAStream::HandlePropertiesChanged(HALS_IOUAStream *this, uint64_t a2, const AudioObjectPropertyAddress *a3)
{
  char v6;
  const AudioObjectPropertyAddress *v7;
  uint64_t v8;
  AudioObjectPropertySelector mSelector;

  if ((_DWORD)a2)
  {
    v6 = 0;
    v7 = a3;
    v8 = a2;
    do
    {
      mSelector = v7->mSelector;
      ++v7;
      v6 |= mSelector == 1885762657;
      --v8;
    }
    while (v8);
    if ((v6 & 1) != 0)
      HALS_IOUAStream::build_format_list(this);
  }
  HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*((unsigned int *)this + 4), 0, a2, a3);
}

void HALS_PDPObject::~HALS_PDPObject(HALS_PDPObject *this)
{
  HALS_Object::~HALS_Object(this);
  JUMPOUT(0x1B5E50688);
}

BOOL HALS_PDPObject::HasProperty(uint64_t a1, uint64_t a2, int *a3)
{
  int v4;
  _BOOL8 result;
  BOOL v6;
  int v7;

  v4 = *a3;
  result = 1;
  if (*a3 > 1869638758)
  {
    v6 = v4 == 1869638759;
    v7 = 1937007734;
  }
  else
  {
    v6 = v4 == 1650682995;
    v7 = 1668047219;
  }
  if (!v6 && v4 != v7)
    return (*(unsigned int (**)(uint64_t, int *))(*(_QWORD *)(a1 + 48) + 48))(a2, a3) != 0;
  return result;
}

uint64_t HALS_PDPObject::IsPropertySettable(_QWORD *a1, uint64_t a2, AudioObjectPropertyAddress *a3)
{
  uint64_t v6;
  uint64_t v7;
  int mSelector;
  BOOL v9;
  int v10;
  _DWORD *exception;

  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1);
  if ((v6 & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    v9 = mSelector == 1937007734;
    v10 = 1869638759;
  }
  else
  {
    v9 = mSelector == 1650682995;
    v10 = 1668047219;
  }
  if (v9 || mSelector == v10)
    return HALS_Object::IsPropertySettable(v6, v7, (int *)a3);
  else
    return HALS_PDPUCPlugIn::ObjectIsPropertySettable(*(HALS_PDPUCPlugIn **)(a1[6] + 56), a2, a3);
}

uint64_t HALS_PDPObject::GetPropertyDataSize(_QWORD *a1, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  int mSelector;
  BOOL v14;
  int v15;
  _DWORD *exception;

  v11 = (*(uint64_t (**)(_QWORD *, uint64_t, AudioObjectPropertyAddress *, uint64_t))(*a1 + 88))(a1, a2, a3, a6);
  if ((v11 & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    v14 = mSelector == 1937007734;
    v15 = 1869638759;
  }
  else
  {
    v14 = mSelector == 1650682995;
    v15 = 1668047219;
  }
  if (v14 || mSelector == v15)
    return HALS_Object::GetPropertyDataSize(v11, v12, (int *)a3);
  else
    return HALS_PDPUCPlugIn::ObjectGetPropertyDataSize(*(HALS_PDPUCPlugIn **)(a1[6] + 64), a2, a3, a4, a5);
}

uint64_t HALS_PDPObject::GetPropertyData(_QWORD *a1, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, int *a5, uint64_t *a6, uint64_t a7, const void *a8, uint64_t a9)
{
  uint64_t v17;
  int mSelector;
  BOOL v19;
  int v20;
  _DWORD *exception;

  if (((*(uint64_t (**)(_QWORD *, uint64_t, AudioObjectPropertyAddress *, uint64_t))(*a1 + 88))(a1, a2, a3, a9) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    v19 = mSelector == 1937007734;
    v20 = 1869638759;
  }
  else
  {
    v19 = mSelector == 1650682995;
    v20 = 1668047219;
  }
  if (v19 || mSelector == v20)
    return HALS_Object::GetPropertyData((uint64_t)a1, v17, (int *)a3, a4, a5, a6);
  *a5 = a4;
  return HALS_PDPUCPlugIn::ObjectGetPropertyData(*(HALS_PDPUCPlugIn **)(a1[6] + 72), a2, a3, a7, a8, (unsigned int *)a5, a6);
}

uint64_t HALS_PDPObject::SetPropertyData(_QWORD *a1, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, uint64_t a6, const void *a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int mSelector;
  BOOL v21;
  int v22;
  _DWORD *exception;

  if (((*(uint64_t (**)(_QWORD *, uint64_t, const AudioObjectPropertyAddress *, uint64_t))(*a1 + 96))(a1, a2, a3, a8) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    v21 = mSelector == 1937007734;
    v22 = 1869638759;
  }
  else
  {
    v21 = mSelector == 1650682995;
    v22 = 1668047219;
  }
  if (v21 || mSelector == v22)
    HALS_Object::SetPropertyData((uint64_t)a1, a2, (uint64_t)a3, v16, v17, v18, v19, a8);
  return HALS_PDPUCPlugIn::ObjectSetPropertyData(*(HALS_PDPUCPlugIn **)(a1[6] + 80), a2, a3, a6, a7, a4, a5);
}

void AudioHardwareReloadServerSettings()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int ServerBooleanSetting;
  int v5;
  const __CFString *v6;
  int v7;
  char v8;
  const __CFString *v9;
  char v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  HALB_Mutex *v14;
  AMCP::Feature_Flags *v15;
  const BOOL *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  __int128 block;
  uint64_t (*v28)(uint64_t);
  void *v29;
  uint64_t v30;

  v23 = 0;
  v24 = 0;
  HALS_System::GetInstance(&v25, 0, &v23);
  v0 = v25;
  v1 = *(_QWORD *)(v25 + 1408);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = MEMORY[0x1E0C809B0];
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 0x40000000;
  v28 = ___ZN20HALS_SettingsManager12ForceRefreshEv_block_invoke;
  v29 = &__block_descriptor_tmp_2585;
  v30 = v1;
  LOBYTE(v1) = atomic_load((unsigned __int8 *)(v2 + 32));
  if ((v1 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(v2 + 33));
  dispatch_sync(*(dispatch_queue_t *)v2, &block);
  ServerBooleanSetting = HALS_SettingsManager::ReadServerBooleanSetting(*(HALS_SettingsManager **)(v0 + 1408), CFSTR("DefaultDeviceLogging"), 1);
  HALS_DefaultDeviceManager::SetLoggingIsEnabled(*(HALS_DefaultDeviceManager **)(v0 + 1264), ServerBooleanSetting);
  v5 = HALS_SettingsManager::ReadServerBooleanSetting(*(HALS_SettingsManager **)(v0 + 1408), CFSTR("VerboseDefaultDeviceLogging"), 1);
  HALS_DefaultDeviceManager::SetVerboseLoggingIsEnabled(*(HALS_DefaultDeviceManager **)(v0 + 1264), v5);
  if (HALS_SettingsManager::HasServerSetting(*(HALS_SettingsManager **)(v0 + 1408), v6))
  {
    v7 = HALS_SettingsManager::ReadServerBooleanSetting(*(HALS_SettingsManager **)(v0 + 1408), CFSTR("AirPlayIsAlwaysTransient"), 0);
    HALS_DefaultDeviceManager::SetAirPlayIsAlwaysTransient(*(HALS_DefaultDeviceManager **)(v0 + 1264), v7);
  }
  *(_BYTE *)(v0 + 1424) = HALS_SettingsManager::ReadServerBooleanSetting(*(HALS_SettingsManager **)(v0 + 1408), CFSTR("PowerManagementLogging"), 0);
  if ((HALS_SettingsManager::ReadServerBooleanSetting(*(HALS_SettingsManager **)(v0 + 1408), CFSTR("CaptureFilesEnabled"), 0) & 1) != 0)v8 = 1;
  else
    v8 = HALS_SettingsManager::ReadServerBooleanSetting(*(HALS_SettingsManager **)(v0 + 1408), CFSTR("DataTapsEnabled"), 0);
  *(_BYTE *)(v0 + 1464) = v8;
  *(_BYTE *)(v0 + 1465) = HALS_SettingsManager::ReadServerBooleanSetting(*(HALS_SettingsManager **)(v0 + 1408), CFSTR("DSPCaptureEnabled"), 0);
  *(_DWORD *)(v0 + 1468) = HALS_SettingsManager::ReadServerIntSetting(*(HALS_SettingsManager **)(v0 + 1408), v9);
  if (g_static_start_options == 1)
    v10 = 1;
  else
    v10 = HALS_SettingsManager::ReadServerBooleanSetting(*(HALS_SettingsManager **)(v0 + 1408), CFSTR("AdaptableDriverSimulatorEnabled"), 0);
  *(_BYTE *)(v0 + 1280) = v10;
  *(_BYTE *)(v0 + 1472) = HALS_SettingsManager::ReadServerBooleanSetting(*(HALS_SettingsManager **)(v0 + 1408), CFSTR("Trace_SchedulingLatency"), 0);
  *(_BYTE *)(v0 + 1496) = HALS_SettingsManager::ReadServerBooleanSetting(*(HALS_SettingsManager **)(v0 + 1408), CFSTR("TailspinDumpWhenOverload"), 0);
  if (*(_QWORD *)(v0 + 1480))
  {
    _ZNSt3__115allocate_sharedB8ne180100I13HALB_TailspinNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&block);
    std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v0 + 1480, &block);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
    if (*((_QWORD *)&block + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    +[HALB_TailspinImpl enableTailspinSync](HALB_TailspinImpl, "enableTailspinSync");
  }
  *(_QWORD *)&block = v3;
  *((_QWORD *)&block + 1) = 0x40000000;
  v28 = ___ZN11HALS_System20ReloadServerSettingsEv_block_invoke;
  v29 = &__block_descriptor_tmp_142;
  v30 = v0;
  v14 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 56))(v0);
  HALB_CommandGate::ExecuteCommand(v14, (uint64_t)&block);
  if (AMCP::Feature_Flags::run_hybrid_hal(v15, v16))
    load_mcp_server_settings();
  v17 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v24;
  if (v24)
  {
    v21 = (unint64_t *)&v24->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1B584BD80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13)
{
  unint64_t *p_shared_owners;
  unint64_t v15;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL AudioObjectExists(HALS_ObjectMap *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  HALS_ObjectMap *v5;
  _BOOL8 v6;
  HALS_Object *v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  if (!AllowHALClientsInThisProcess())
    return 0;
  HALS_System::StartServer(&v9, 0);
  v2 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(a1);
  v6 = v5 != 0;
  HALS_ObjectMap::ReleaseObject(v5, v7);
  return v6;
}

BOOL AudioObjectIsOnListenerThread()
{
  unint64_t v0;
  uint64_t (**v2)(HALS_NotificationManager *);
  uint64_t (*v3)(HALS_NotificationManager *);

  v0 = atomic_load(&HALS_NotificationManager::sInitialized);
  if (v0 != -1)
  {
    v2 = &v3;
    v3 = HALS_NotificationManager::Initialize;
    std::__call_once(&HALS_NotificationManager::sInitialized, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(void)>>);
  }
  return pthread_getspecific(HALS_NotificationManager::sThreadMarkerKey) != 0;
}

uint64_t AudioObjectAddPropertyListenerInternal(HALS_ObjectMap *a1, char *a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  HALS_ObjectMap *v11;
  HALS_Object *v12;
  NSObject *v15;
  const char *v16;
  _DWORD *exception;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!AllowHALClientsInThisProcess())
    return 560033144;
  HALS_System::StartServer(&v25, 0);
  v8 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (!a2)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    *(_DWORD *)buf = 136315394;
    v28 = "HALS_Framework-ios-imp.cpp";
    v29 = 1024;
    v30 = 1502;
    v15 = MEMORY[0x1E0C81028];
    v16 = "%25s:%-5d  AudioObjectAddPropertyListenerInternal: can't add a listener proc without an address";
    goto LABEL_19;
  }
  if (!a3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    *(_DWORD *)buf = 136315394;
    v28 = "HALS_Framework-ios-imp.cpp";
    v29 = 1024;
    v30 = 1503;
    v15 = MEMORY[0x1E0C81028];
    v16 = "%25s:%-5d  AudioObjectAddPropertyListenerInternal: can't add a NULL listener proc";
LABEL_19:
    _os_log_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, v16, buf, 0x12u);
LABEL_20:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v11 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(a1);
  if (!v11)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v28 = "HALS_Framework-ios-imp.cpp";
      v29 = 1024;
      v30 = 1507;
      v31 = 1024;
      v32 = (int)a1;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectAddPropertyListenerInternal: no object with given ID %u", buf, 0x18u);
    }
    v18 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v18 = &off_1E69A1B30;
    v18[2] = 560947818;
  }
  v19 = 3;
  v21 = 0;
  v20 = 0;
  v22 = 0;
  v23 = a3;
  v24 = a4;
  buf[0] = 0;
  v33 = 0;
  HALS_NotificationManager::AddPropertyListener((uint64_t)&v19, a1, a2, (uint64_t)buf);
  if (v33)
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)buf);
  HALS_Listener::~HALS_Listener((HALS_Listener *)&v19);
  HALS_ObjectMap::ReleaseObject(v11, v12);
  return 0;
}

void sub_1B584C1D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AudioHardwareBeMaster()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  if (AllowHALClientsInThisProcess())
  {
    HALS_System::StartServer(&v3, 0);
    v0 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v2 = __ldaxr(p_shared_owners);
      while (__stlxr(v2 - 1, p_shared_owners));
      if (!v2)
      {
        ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
        std::__shared_weak_count::__release_weak(v0);
      }
    }
  }
}

uint64_t AudioDeviceCreateIOProcIDWithClockedProc(HALS_ObjectMap *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  HALS_ObjectMap *v7;
  HALS_Object *v8;
  int v9;
  int v10;
  int v11;
  int v14;
  _DWORD *exception;
  NSObject *v16;
  const char *v17;
  _DWORD *v18;
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (AllowHALClientsInThisProcess())
  {
    if (a2)
    {
      if (a4)
      {
        v7 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(a1);
        if (v7)
        {
          v10 = *((_DWORD *)v7 + 5);
          v9 = *((_DWORD *)v7 + 6);
          if (v10 <= 1701078389)
          {
            if (v10 == 1633773415)
            {
LABEL_13:
              HALS_ObjectMap::ReleaseObject(v7, v8);
              return 1970171760;
            }
            v11 = 1633969526;
          }
          else
          {
            if (v10 == 1701078390 || v10 == 1701733488)
              goto LABEL_13;
            v11 = 1919182198;
          }
          if (v10 == v11)
            goto LABEL_13;
          if (v10 != v9)
          {
            if (v9 <= 1701078389)
            {
              if (v9 == 1633773415)
                goto LABEL_13;
              v14 = 1633969526;
            }
            else
            {
              if (v9 == 1701078390 || v9 == 1701733488)
                goto LABEL_13;
              v14 = 1919182198;
            }
            if (v9 == v14)
              goto LABEL_13;
          }
          HALS_ObjectMap::ReleaseObject(v7, v8);
        }
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          v19 = 136315394;
          v20 = "HALS_Framework-ios-imp.cpp";
          v21 = 1024;
          v22 = 1853;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceCreateIOProcIDWithClockedProc: no device with given ID", (uint8_t *)&v19, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69A1B30;
        exception[2] = 560947818;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
LABEL_32:
        v18 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v18 = &off_1E69A1B30;
        v18[2] = 1852797029;
      }
      v19 = 136315394;
      v20 = "HALS_Framework-ios-imp.cpp";
      v21 = 1024;
      v22 = 1849;
      v16 = MEMORY[0x1E0C81028];
      v17 = "%25s:%-5d  AudioDeviceCreateIOProcIDWithClockedProc: nowhere to put the return value";
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_32;
      v19 = 136315394;
      v20 = "HALS_Framework-ios-imp.cpp";
      v21 = 1024;
      v22 = 1848;
      v16 = MEMORY[0x1E0C81028];
      v17 = "%25s:%-5d  AudioDeviceCreateIOProcIDWithClockedProc: can't create an AudioDeviceIOProcID for a NULL IOProc";
    }
    _os_log_impl(&dword_1B57BA000, v16, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&v19, 0x12u);
    goto LABEL_32;
  }
  return 560033144;
}

void sub_1B584C5D8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B584C5F0(void *a1, int a2)
{
  _QWORD *v2;

  if (!a2)
    JUMPOUT(0x1B584C5E0);
  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (!v2)
      goto LABEL_7;
  }
  else if (!v2)
  {
LABEL_7:
    __cxa_end_catch();
    JUMPOUT(0x1B584C3ACLL);
  }
  *v2 = 0;
  goto LABEL_7;
}

void sub_1B584C668()
{
  JUMPOUT(0x1B584C5E0);
}

uint64_t AudioDeviceCreateIOProcIDWithClockedBlock(uint64_t a1, HALS_ObjectMap *a2, uint64_t a3, uint64_t a4)
{
  HALS_ObjectMap *v7;
  HALS_Object *v8;
  int v9;
  int v10;
  int v11;
  int v14;
  _DWORD *exception;
  NSObject *v16;
  const char *v17;
  _DWORD *v18;
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (AllowHALClientsInThisProcess())
  {
    if (a4)
    {
      if (a1)
      {
        v7 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(a2);
        if (v7)
        {
          v10 = *((_DWORD *)v7 + 5);
          v9 = *((_DWORD *)v7 + 6);
          if (v10 <= 1701078389)
          {
            if (v10 == 1633773415)
            {
LABEL_13:
              HALS_ObjectMap::ReleaseObject(v7, v8);
              return 1970171760;
            }
            v11 = 1633969526;
          }
          else
          {
            if (v10 == 1701078390 || v10 == 1701733488)
              goto LABEL_13;
            v11 = 1919182198;
          }
          if (v10 == v11)
            goto LABEL_13;
          if (v10 != v9)
          {
            if (v9 <= 1701078389)
            {
              if (v9 == 1633773415)
                goto LABEL_13;
              v14 = 1633969526;
            }
            else
            {
              if (v9 == 1701078390 || v9 == 1701733488)
                goto LABEL_13;
              v14 = 1919182198;
            }
            if (v9 == v14)
              goto LABEL_13;
          }
          HALS_ObjectMap::ReleaseObject(v7, v8);
        }
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          v19 = 136315394;
          v20 = "HALS_Framework-ios-imp.cpp";
          v21 = 1024;
          v22 = 1915;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceCreateIOProcIDWithClockedBlock: no device with given ID", (uint8_t *)&v19, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69A1B30;
        exception[2] = 560947818;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
LABEL_32:
        v18 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v18 = &off_1E69A1B30;
        v18[2] = 1852797029;
      }
      v19 = 136315394;
      v20 = "HALS_Framework-ios-imp.cpp";
      v21 = 1024;
      v22 = 1911;
      v16 = MEMORY[0x1E0C81028];
      v17 = "%25s:%-5d  AudioDeviceCreateIOProcIDWithClockedBlock: nowhere to put the return value";
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_32;
      v19 = 136315394;
      v20 = "HALS_Framework-ios-imp.cpp";
      v21 = 1024;
      v22 = 1910;
      v16 = MEMORY[0x1E0C81028];
      v17 = "%25s:%-5d  AudioDeviceCreateIOProcIDWithClockedBlock: can't create an AudioDeviceIOProcID for a NULL IOBlock";
    }
    _os_log_impl(&dword_1B57BA000, v16, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&v19, 0x12u);
    goto LABEL_32;
  }
  return 560033144;
}

void sub_1B584C960(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B584C978(void *a1, int a2)
{
  _QWORD *v2;

  if (!a2)
    JUMPOUT(0x1B584C968);
  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (!v2)
      goto LABEL_7;
  }
  else if (!v2)
  {
LABEL_7:
    __cxa_end_catch();
    JUMPOUT(0x1B584C734);
  }
  *v2 = 0;
  goto LABEL_7;
}

void sub_1B584C9F0()
{
  JUMPOUT(0x1B584C968);
}

uint64_t AudioDeviceRun()
{
  return 0;
}

uint64_t AudioDeviceWrite()
{
  return 0;
}

uint64_t AudioDeviceDuck(AMCP::Log::Scope_Registry *a1, uint64_t *a2, float a3, float a4)
{
  unsigned int v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  HALS_ObjectMap *v14;
  HALS_Object *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _opaque_pthread_t *v21;
  mach_port_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *exception;
  _DWORD *v26;
  uint64_t v27[2];
  HALS_System *v28;
  std::__shared_weak_count *v29;
  _BYTE buf[18];
  __int16 v31;
  _BYTE v32[54];
  uint64_t v33;

  v7 = a1;
  v33 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v8 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  v9 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v10 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v21 = pthread_self();
    v22 = pthread_mach_thread_np(v21);
    if (a2)
    {
      v23 = *a2;
      v24 = a2[1];
    }
    else
    {
      v23 = 0;
      v24 = 0;
    }
    *(_DWORD *)buf = 67110914;
    *(_DWORD *)&buf[4] = v22;
    *(_WORD *)&buf[8] = 2080;
    *(_QWORD *)&buf[10] = "AudioHardwarePriv.mm";
    v31 = 1024;
    *(_DWORD *)v32 = 247;
    *(_WORD *)&v32[4] = 2048;
    *(_QWORD *)&v32[6] = v7;
    *(_WORD *)&v32[14] = 2048;
    *(double *)&v32[16] = a3;
    *(_WORD *)&v32[24] = 2048;
    *(_QWORD *)&v32[26] = v23;
    *(_WORD *)&v32[34] = 2048;
    *(_QWORD *)&v32[36] = v24;
    *(_WORD *)&v32[44] = 2048;
    *(double *)&v32[46] = a4;
    _os_log_debug_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d AudioDeviceDuck %lu, %f, [%.0f, %lld], %f", buf, 0x4Au);
  }

  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    if (a2)
    {
      v12 = *a2;
      v13 = a2[1];
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
    *(_DWORD *)buf = 136316674;
    *(_QWORD *)&buf[4] = "HALS_Framework-ios-imp.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3765;
    v31 = 2048;
    *(_QWORD *)v32 = v7;
    *(_WORD *)&v32[8] = 2048;
    *(double *)&v32[10] = a3;
    *(_WORD *)&v32[18] = 2048;
    *(_QWORD *)&v32[20] = v12;
    *(_WORD *)&v32[28] = 2048;
    *(_QWORD *)&v32[30] = v13;
    *(_WORD *)&v32[38] = 2048;
    *(double *)&v32[40] = a4;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  AudioDeviceDuck(%lu, %f, [%.0f, %lld], %f)", buf, 0x44u);
  }
  if (!AllowHALClientsInThisProcess())
    return 560033144;
  v27[0] = 0;
  v27[1] = 0;
  HALS_System::GetInstance(&v28, 0, v27);
  if (!v28)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_Framework-ios-imp.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3776;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceDuck: no system object", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v14 = HALS_System::CopyDeviceByObjectID(v28, v7, 0);
  if (!v14)
  {
    v26 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v26 = &off_1E69A1B30;
    v26[2] = 560227702;
  }
  HALS_ObjectMap::ReleaseObject(v14, v15);
  v16 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return 0;
}

void sub_1B584CDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AudioDeviceEnterMode()
{
  return 1970171760;
}

uint64_t AudioDeviceExitMode()
{
  return 1970171760;
}

void AudioHardwareInitializeForTesting(int a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  CFTypeRef v9;
  const void *v10;
  CFTypeRef v11;
  CFTypeID v12;
  BOOL v13;
  SecTaskRef v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::runtime_error *exception;
  CFTypeRef cf;
  std::__shared_weak_count *v37;
  SecTaskRef v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  _BYTE buf[18];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v40 = 0;
  v41 = 0;
  HALS_System::GetInstance(buf, 0, &v40);
  v3 = *(_QWORD *)buf;
  v2 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v4 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_Framework-ios-imp.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3907;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Local AudioHAL System initialized before initializing for testing", buf, 0x12u);
    }
    abort();
  }
  v38 = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x1E0C9AE08]);
  if (!v38)
  {
    AMCP::Utility::SecTask::release((const void **)&v38);
    goto LABEL_63;
  }
  AMCP::Utility::SecTask_Proxy::SecTask_Proxy((AMCP::Log::Scope_Registry *)buf, (const AMCP::Utility::SecTask *)&v38);
  v9 = SecTaskCopyValueForEntitlement(**(SecTaskRef **)buf, CFSTR("com.apple.private.audio.direct-hal-testing"), 0);
  v10 = v9;
  v11 = (CFTypeRef)*MEMORY[0x1E0C9AE48];
  if (v9)
  {
    v12 = CFGetTypeID(v9);
    if (v12 == CFBooleanGetTypeID())
    {
      CFRetain(v10);
      applesauce::CF::BooleanRef::BooleanRef((applesauce::CF::BooleanRef *)&cf, v10);
    }
    else
    {
      cf = v11;
      v11 = 0;
    }
    CFRelease(v10);
    if (v11)
      CFRelease(v11);
    v11 = cf;
  }
  else
  {
    cf = (CFTypeRef)*MEMORY[0x1E0C9AE48];
  }
  if (!v11)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v13 = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)v11);
  if (cf)
    CFRelease(cf);
  AMCP::Utility::SecTask::release((const void **)&v38);
  if (!v13)
  {
LABEL_63:
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_Framework-ios-imp.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3913;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HAL Testing entitlement is missing", buf, 0x12u);
    }
    abort();
  }
  if (a1 == 2 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "HALS_Framework-ios-imp.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3922;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  WARNING: Do not run with kAudioHardwareTestConfiguration_LoadVirtualAudioWithFakeDevices in CI: Virtual Audio with the HAL does not shut down cleanly and will cause tests that run afterward to fail.", buf, 0x12u);
  }
  Testing_PlatformBehaviors::s_test_configuration = a1;
  HALS_System::StartServer((uint64_t *)buf, 1);
  cf = 0;
  v37 = 0;
  HALS_System::GetInstance(&v38, 0, (uint64_t *)&cf);
  v14 = v38;
  v15 = *(_QWORD *)buf;
  v16 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v17 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v19 = (unint64_t *)&v16->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)v14 + 17);
  *((_QWORD *)v14 + 16) = v15;
  *((_QWORD *)v14 + 17) = v16;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (v16)
  {
    v24 = (unint64_t *)&v16->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v26 = v39;
  if (v39)
  {
    v27 = (unint64_t *)&v39->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v33 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_1B584D30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AudioHardwareDisposeForTesting()
{
  HALS_PlatformBehaviors *v0;
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *platform_behaviors;
  uint64_t result;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  atomic_store(0, StaticContainerBase::s_statics_initializable);
  v13 = 0;
  v14 = 0;
  HALS_System::GetInstance(&v15, 0, &v13);
  v1 = v15;
  v2 = *(std::__shared_weak_count **)(v15 + 136);
  *(_QWORD *)(v15 + 128) = 0;
  *(_QWORD *)(v1 + 136) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = v16;
  if (v16)
  {
    v6 = (unint64_t *)&v16->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  Testing_PlatformBehaviors::s_test_configuration = 0;
  platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(v0);
  result = (*(uint64_t (**)(uint64_t *))(*platform_behaviors + 72))(platform_behaviors);
  atomic_store(1u, StaticContainerBase::s_statics_initializable);
  return result;
}

BOOL HALS_ClientEntitlements::HasEntitlementWithBooleanValue(HALS_ClientEntitlements *this, const __CFString *a2)
{
  _BOOL8 v4;
  CFTypeRef v5;
  const void *v6;
  CFTypeRef v7;
  CFTypeID v8;
  std::runtime_error *exception;
  SecTaskRef *v11;
  CFTypeRef cf;

  if (g_static_start_options == 1 || a2 == 0)
    return 1;
  if (!*(_QWORD *)this)
    return 0;
  AMCP::Utility::SecTask_Proxy::SecTask_Proxy((AMCP::Log::Scope_Registry *)&v11, this);
  v5 = SecTaskCopyValueForEntitlement(*v11, a2, 0);
  v6 = v5;
  v7 = (CFTypeRef)*MEMORY[0x1E0C9AE48];
  if (v5)
  {
    v8 = CFGetTypeID(v5);
    if (v8 == CFBooleanGetTypeID())
    {
      CFRetain(v6);
      applesauce::CF::BooleanRef::BooleanRef((applesauce::CF::BooleanRef *)&cf, v6);
    }
    else
    {
      cf = v7;
      v7 = 0;
    }
    CFRelease(v6);
    if (v7)
      CFRelease(v7);
    v7 = cf;
  }
  else
  {
    cf = (CFTypeRef)*MEMORY[0x1E0C9AE48];
  }
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v4 = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)v7);
  if (cf)
    CFRelease(cf);
  return v4;
}

void sub_1B584D610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  void *v10;

  __cxa_free_exception(v10);
  applesauce::CF::BooleanRef::~BooleanRef(&a10);
  _Unwind_Resume(a1);
}

AMCP::Log::Scope_Registry *AMCP::Utility::SecTask_Proxy::SecTask_Proxy(AMCP::Log::Scope_Registry *this, const AMCP::Utility::SecTask *a2)
{
  NSObject *v2;
  _opaque_pthread_t *v3;
  mach_port_t v4;
  void *exception;
  __int128 v6;
  uint64_t v7;
  uint64_t (**v8)();
  __int128 v9;
  uint64_t v10;
  std::string v11;
  std::runtime_error v12;
  std::runtime_error v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint8_t buf[8];
  __int16 v21;
  char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  _BYTE v26[14];
  const char *v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = a2;
  if (!*(_QWORD *)a2)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v2 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3 = pthread_self();
      v4 = pthread_mach_thread_np(v3);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v4;
      v21 = 2080;
      v22 = "Security_Utilities.h";
      v23 = 1024;
      v24 = 177;
      v25 = 2080;
      *(_QWORD *)v26 = "(m_proxy.is_valid()) == false";
      _os_log_error_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Cannot dereference a nullptr SecTask", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v19);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Cannot dereference a nullptr SecTask", (uint64_t)&v11);
    std::runtime_error::runtime_error(&v12, &v11);
    std::runtime_error::runtime_error(&v13, &v12);
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = -1;
    v13.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v14 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v13);
    *(_QWORD *)&v26[6] = "AMCP::Utility::SecTask_Proxy::SecTask_Proxy(const SecTask &)";
    v27 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Utility/Security_Utilities.h";
    v28 = 177;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v6);
    v9 = v6;
    v10 = v7;
    v6 = 0uLL;
    v7 = 0;
    v8 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v8);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return this;
}

void sub_1B584D844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,void *a24,uint64_t a25)
{
  void *v25;
  int v26;
  uint64_t v27;
  uint64_t v29;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v27 - 96) = &unk_1E69A2000;
  v29 = *(_QWORD *)(v27 - 88);
  if (v29 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29))
    *(_QWORD *)(v27 - 88) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(v27 - 112));
  a24 = &unk_1E69A2000;
  if (a25 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a25 + 32))(a25))
    a25 = 0;
  std::runtime_error::~runtime_error(&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v26)
    __cxa_free_exception(v25);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v27 - 113));
  _Unwind_Resume(a1);
}

void boost::detail::variant::forced_return<BOOL>()
{
  __assert_rtn("forced_return", "forced_return.hpp", 38, "false");
}

void ca::concurrent::details::shared_instance_mgr<ca::concurrent::details::service_thread>::~shared_instance_mgr(std::mutex *this)
{
  void *sig;

  sig = (void *)this[1].__m_.__sig;
  if (sig)
  {
    *(_QWORD *)this[1].__m_.__opaque = sig;
    operator delete(sig);
  }
  std::mutex::~mutex(this);
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v3;

  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[0] = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_1B584D9F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *std::__optional_copy_base<boost::variant<ca::mach::thread::priority_qos,ca::mach::thread::priority_realtime,ca::mach::thread::priority_absolute>,false>::__optional_copy_base[abi:ne180100](_BYTE *result, uint64_t a2)
{
  _OWORD *v2;
  _OWORD *v3;
  int v4;

  *result = 0;
  result[20] = 0;
  if (*(_BYTE *)(a2 + 20))
  {
    v2 = result + 4;
    v3 = (_OWORD *)(a2 + 4);
    v4 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
    if (v4 != 2)
    {
      if (v4 == 1)
      {
        *v2 = *v3;
        goto LABEL_7;
      }
      if (v4)
        boost::detail::variant::forced_return<BOOL>();
    }
    *(_QWORD *)v2 = *(_QWORD *)v3;
LABEL_7:
    *(_DWORD *)result = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
    result[20] = 1;
  }
  return result;
}

void sub_1B584DA98(_Unwind_Exception *exception_object)
{
  unsigned int *v1;

  if (*((_BYTE *)v1 + 20))
    boost::variant<ca::mach::thread::priority_qos,ca::mach::thread::priority_realtime,ca::mach::thread::priority_absolute>::destroy_content(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t boost::variant<ca::mach::thread::priority_qos,ca::mach::thread::priority_realtime,ca::mach::thread::priority_absolute>::destroy_content(uint64_t result)
{
  if ((result ^ ((int)result >> 31)) >= 3)
    boost::detail::variant::forced_return<BOOL>();
  return result;
}

uint64_t ca::concurrent::details::worker_thread::run(uint64_t a1, uint64_t a2)
{
  const char *v4;
  int v5;
  int v6;
  int v7;
  _opaque_pthread_t *v8;
  thread_act_t v9;
  const char *v10;
  _opaque_pthread_t *v11;
  thread_act_t v12;
  thread_act_t v13;
  const char *v14;
  pid_t v15;
  int v16;
  int v17;
  const char *v18;
  unsigned int *v19;
  int v20;
  uint64_t v21;
  uint64_t result;
  integer_t v23;
  integer_t policy_info;
  _BYTE buffer[228];
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 24))
  {
    v4 = (const char *)a2;
    if (*(char *)(a2 + 23) < 0)
      v4 = *(const char **)a2;
    v5 = pthread_setname_np(v4);
    check_posix_error((uint64_t)"pthread_setname_np failed", v5);
  }
  if (*(_BYTE *)(a2 + 52))
  {
    v6 = *(_DWORD *)(a2 + 32) ^ (*(int *)(a2 + 32) >> 31);
    switch(v6)
    {
      case 2:
        v11 = pthread_self();
        v12 = pthread_mach_thread_np(v11);
        if (v12)
        {
          v13 = v12;
          policy_info = *(_BYTE *)(a2 + 40) == 0;
          v14 = (const char *)thread_policy_set(v12, 1u, &policy_info, 1u);
          ca::mach::throw_if_mach_error((uint64_t)"thread_policy_set extended failed", v14);
          v15 = getpid();
          v16 = proc_pidinfo(v15, 2, 0, buffer, 232);
          v17 = v26;
          if (v16 <= 0)
            v17 = 0;
          v23 = *(_DWORD *)(a2 + 36) - v17;
          v18 = (const char *)thread_policy_set(v13, 3u, &v23, 1u);
          ca::mach::throw_if_mach_error((uint64_t)"thread_policy_set precedence failed", v18);
        }
        break;
      case 1:
        v8 = pthread_self();
        v9 = pthread_mach_thread_np(v8);
        v10 = (const char *)thread_policy_set(v9, 2u, (thread_policy_t)(a2 + 36), 4u);
        ca::mach::throw_if_mach_error((uint64_t)"thread_policy_set realtime failed", v10);
        break;
      case 0:
        v7 = pthread_set_qos_class_self_np(*(qos_class_t *)(a2 + 36), *(_DWORD *)(a2 + 40));
        check_posix_error((uint64_t)"pthread_set_qos_class_self_np failed", v7);
        break;
    }
  }
  v19 = (unsigned int *)(a1 + 16);
  do
  {
    do
      v20 = __ldaxr(v19);
    while (__stxr(v20 - 1, v19));
    if (v20 <= 0)
      ca::mach::semaphore::wait((ca::mach::semaphore *)(a1 + 8));
    v21 = *(_QWORD *)(a1 + 48);
    if (!v21)
      std::__throw_bad_function_call[abi:ne180100]();
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 48))(v21);
  }
  while (!*(_BYTE *)(a1 + 57));
  return result;
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (ca::concurrent::details::worker_thread::*)(ca::thread::attributes),ca::concurrent::details::worker_thread*,ca::thread::attributes>>(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, void **);
  _QWORD *v6;
  int v7;
  __int128 *v8;
  void *__p[2];
  uint64_t v11;
  char v12;
  unsigned int v13;
  __int128 v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(void (**)(_QWORD *, void **))(a1 + 8);
  v6 = (_QWORD *)(*(_QWORD *)(a1 + 24) + (v4 >> 1));
  if ((v4 & 1) != 0)
    v5 = *(void (**)(_QWORD *, void **))(*v6 + v5);
  LOBYTE(__p[0]) = 0;
  v12 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    v12 = 1;
  }
  LOBYTE(v13) = 0;
  v15 = 0;
  if (*(_BYTE *)(a1 + 84))
  {
    v7 = *(_DWORD *)(a1 + 64) ^ (*(int *)(a1 + 64) >> 31);
    v8 = (__int128 *)(a1 + 68);
    if (v7 != 2)
    {
      if (v7 == 1)
      {
        v14 = *v8;
        goto LABEL_11;
      }
      if (v7)
        boost::detail::variant::forced_return<BOOL>();
    }
    *(_QWORD *)&v14 = *(_QWORD *)v8;
LABEL_11:
    v13 = v7;
    v15 = 1;
  }
  v5(v6, __p);
  if (v15)
    boost::variant<ca::mach::thread::priority_qos,ca::mach::thread::priority_realtime,ca::mach::thread::priority_absolute>::destroy_content(v13);
  if (v12 && SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,void (ca::concurrent::details::worker_thread::*)(ca::thread::attributes),ca::concurrent::details::worker_thread*,ca::thread::attributes>>::operator()[abi:ne180100](a1);
  return 0;
}

void sub_1B584DE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, int a17, uint64_t a18, int a19, char a20)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,void (ca::concurrent::details::worker_thread::*)(ca::thread::attributes),ca::concurrent::details::worker_thread*,ca::thread::attributes>>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if (*(_BYTE *)(result + 84))
      boost::variant<ca::mach::thread::priority_qos,ca::mach::thread::priority_realtime,ca::mach::thread::priority_absolute>::destroy_content(*(unsigned int *)(result + 64));
    if (*(_BYTE *)(v1 + 56) && *(char *)(v1 + 55) < 0)
      operator delete(*(void **)(v1 + 32));
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100]((uint64_t *)v1);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

uint64_t std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    MEMORY[0x1B5E50358]();
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

void std::__function::__func<ca::concurrent::details::service_thread::service_thread(BOOL,ca::thread::attributes const&)::{lambda(void)#1},std::allocator<ca::concurrent::details::service_thread::service_thread(BOOL,ca::thread::attributes const&)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<ca::concurrent::details::service_thread::service_thread(BOOL,ca::thread::attributes const&)::{lambda(void)#1},std::allocator<ca::concurrent::details::service_thread::service_thread(BOOL,ca::thread::attributes const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696DE80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ca::concurrent::details::service_thread::service_thread(BOOL,ca::thread::attributes const&)::{lambda(void)#1},std::allocator<ca::concurrent::details::service_thread::service_thread(BOOL,ca::thread::attributes const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696DE80;
  a2[1] = v2;
  return result;
}

unint64_t *std::__function::__func<ca::concurrent::details::service_thread::service_thread(BOOL,ca::thread::attributes const&)::{lambda(void)#1},std::allocator<ca::concurrent::details::service_thread::service_thread(BOOL,ca::thread::attributes const&)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  unint64_t *v1;
  unint64_t *result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v1 = *(unint64_t **)(a1 + 8);
  while (1)
  {
    result = (unint64_t *)v1[8];
    if (result)
      goto LABEL_10;
LABEL_3:
    v3 = *v1;
    if (!*v1)
      return result;
    do
    {
      v4 = __ldaxr(v1);
      if (v4 != v3)
      {
        __clrex();
        goto LABEL_3;
      }
    }
    while (__stlxr(0, v1));
    v5 = 0;
    do
    {
      result = (unint64_t *)v3;
      v6 = (unint64_t *)(v3 + 8);
      v3 = atomic_load((unint64_t *)(v3 + 8));
      atomic_store(v5, v6);
      v5 = (unint64_t)result;
    }
    while (v3);
    v1[8] = (unint64_t)result;
LABEL_10:
    v7 = atomic_load(result + 1);
    v1[8] = v7;
    (*(void (**)(unint64_t *))(*result + 16))(result);
  }
}

void sub_1B584E03C(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  *(_BYTE *)(v1 + 200) = 1;
  __cxa_end_catch();
}

uint64_t std::__function::__func<ca::concurrent::details::service_thread::service_thread(BOOL,ca::thread::attributes const&)::{lambda(void)#1},std::allocator<ca::concurrent::details::service_thread::service_thread(BOOL,ca::thread::attributes const&)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN2ca10concurrent7details14service_threadC1EbRKNS_6thread10attributesEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ca::concurrent::details::service_thread::service_thread(BOOL,ca::thread::attributes const&)::{lambda(void)#1},std::allocator<ca::concurrent::details::service_thread::service_thread(BOOL,ca::thread::attributes const&)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t *ca::concurrent::messenger::messenger(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__thread_struct *v7;
  char *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  pthread_t v13[2];
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 57) = 0u;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(v4 + 80), a2);
  std::__optional_copy_base<boost::variant<ca::mach::thread::priority_qos,ca::mach::thread::priority_realtime,ca::mach::thread::priority_absolute>,false>::__optional_copy_base[abi:ne180100]((_BYTE *)(v4 + 112), (uint64_t)(a2 + 2));
  v14[0] = &off_1E696DE80;
  v14[1] = v4;
  v15 = v14;
  *(_QWORD *)(v4 + 136) = 0;
  v5 = (_QWORD *)(v4 + 136);
  ca::sync::semaphore::semaphore((semaphore_t *)(v4 + 144));
  v6 = (uint64_t)v15;
  if (!v15)
    goto LABEL_4;
  if (v15 != v14)
  {
    v6 = (*(uint64_t (**)(_QWORD *))(*v15 + 16))(v15);
LABEL_4:
    *(_QWORD *)(v4 + 184) = v6;
    goto LABEL_6;
  }
  *(_QWORD *)(v4 + 184) = v4 + 160;
  (*(void (**)(_QWORD *, uint64_t))(v14[0] + 24))(v14, v4 + 160);
LABEL_6:
  *(_WORD *)(v4 + 192) = 0;
  std::function<void ()(void)>::operator=((_QWORD *)(v4 + 160), (uint64_t)v14);
  v7 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v7);
  v8 = (char *)operator new();
  v13[1] = 0;
  *(_QWORD *)v8 = v7;
  *(_OWORD *)(v8 + 8) = (unint64_t)ca::concurrent::details::worker_thread::run;
  *((_QWORD *)v8 + 3) = v5;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(v8 + 32), a2);
  std::__optional_copy_base<boost::variant<ca::mach::thread::priority_qos,ca::mach::thread::priority_realtime,ca::mach::thread::priority_absolute>,false>::__optional_copy_base[abi:ne180100](v8 + 64, (uint64_t)(a2 + 2));
  v9 = pthread_create(v13, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (ca::concurrent::details::worker_thread::*)(ca::thread::attributes),ca::concurrent::details::worker_thread*,ca::thread::attributes>>, v8);
  if (v9)
  {
    std::__throw_system_error(v9, "thread constructor failed");
    __break(1u);
LABEL_15:
    std::terminate();
  }
  if (*v5)
    goto LABEL_15;
  *v5 = v13[0];
  v13[0] = 0;
  std::thread::~thread((std::thread *)v13);
  v10 = v15;
  if (v15 == v14)
  {
    v11 = 4;
    v10 = v14;
    goto LABEL_12;
  }
  if (v15)
  {
    v11 = 5;
LABEL_12:
    (*(void (**)(_QWORD *))(*v10 + 8 * v11))(v10);
  }
  *(_BYTE *)(v4 + 200) = 0;
  *a1 = v4;
  return a1;
}

void sub_1B584E2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, __int16 *a18)
{
  char *v18;
  unsigned int *v19;
  std::thread *v20;
  ca::sync::semaphore *v21;
  __int16 *v23;
  uint64_t v24;

  ca::sync::semaphore::~semaphore(v21);
  std::thread::~thread(v20);
  v23 = a18;
  if (a18 == &a13)
  {
    v24 = 4;
    v23 = &a13;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  if (v18[132])
    boost::variant<ca::mach::thread::priority_qos,ca::mach::thread::priority_realtime,ca::mach::thread::priority_absolute>::destroy_content(*v19);
  if (v18[104])
  {
    if (v18[103] < 0)
      operator delete(*a9);
  }
  MEMORY[0x1B5E50688](v18, 0x10B2C406E065C64);
  _Unwind_Resume(a1);
}

void ca::concurrent::details::service_thread::drain(ca::concurrent::details::service_thread *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  mach_timespec_t v8;
  const char *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  semaphore_t semaphore;
  unsigned int v14;
  _QWORD v15[3];
  _QWORD *v16;
  void (**v17)(ca::concurrent::details::internal_message *__hidden);
  unint64_t v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  ca::sync::semaphore::semaphore(&semaphore);
  v15[0] = &off_1E696DF00;
  v15[1] = &semaphore;
  v18 = 0;
  v16 = v15;
  v17 = &off_1E696DF80;
  v2 = v19;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)v15);
  v3 = v16;
  if (v16 == v15)
  {
    v4 = 4;
    v3 = v15;
    goto LABEL_5;
  }
  if (v16)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
LABEL_6:
  v5 = *(_QWORD *)this;
  atomic_store(*(_QWORD *)this, &v18);
  do
  {
    v6 = __ldaxr((unint64_t *)this);
    if (v6 != v5)
    {
      __clrex();
      goto LABEL_6;
    }
  }
  while (__stlxr((unint64_t)&v17, (unint64_t *)this));
  ca::sync::semaphore::signal((unsigned int *)this + 36);
LABEL_11:
  if (!*((_BYTE *)this + 200))
  {
    do
      v7 = __ldaxr(&v14);
    while (__stxr(v7 - 1, &v14));
    if (v7 <= 0)
    {
      do
      {
        v8 = (mach_timespec_t)0x1DCD650000000000;
        v9 = (const char *)semaphore_timedwait(semaphore, v8);
      }
      while ((_DWORD)v9 == 14);
      if ((_DWORD)v9 == 49)
      {
        v10 = atomic_load(&v14);
        if ((v10 & 0x80000000) != 0)
        {
          do
          {
            v11 = __ldxr(&v14);
            if (v11 == v10)
            {
              if (!__stxr(v10 + 1, &v14))
                goto LABEL_11;
            }
            else
            {
              __clrex();
            }
            v10 = v11;
          }
          while ((v11 & 0x80000000) != 0);
        }
        ca::mach::semaphore::wait((ca::mach::semaphore *)&semaphore);
      }
      else
      {
        ca::mach::throw_if_mach_error((uint64_t)"semaphore_timedwait failed", v9);
      }
    }
  }
  v17 = &off_1E696DF80;
  if (v20 == v19)
  {
    v12 = 4;
    goto LABEL_28;
  }
  if (v20)
  {
    v12 = 5;
    v2 = v20;
LABEL_28:
    (*(void (**)(_QWORD *))(*v2 + 8 * v12))(v2);
  }
  ca::sync::semaphore::~semaphore((ca::sync::semaphore *)&semaphore);
}

void sub_1B584E648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_QWORD *a21)
{
  _QWORD *v21;
  uint64_t v23;

  if (a21 == v21)
  {
    v23 = 4;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
    v21 = a21;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v23))(v21);
LABEL_6:
  ca::sync::semaphore::~semaphore((ca::sync::semaphore *)&a10);
  _Unwind_Resume(a1);
}

void ca::concurrent::details::service_thread::~service_thread(ca::concurrent::details::service_thread *this)
{
  ca::concurrent::details::service_thread *v2;
  uint64_t v3;

  ca::concurrent::details::service_thread::drain(this);
  if (!*((_BYTE *)this + 192))
  {
    *((_BYTE *)this + 193) = 1;
    ca::sync::semaphore::signal((unsigned int *)this + 36);
  }
  if (*((_QWORD *)this + 17))
    std::thread::join((std::thread *)this + 17);
  v2 = (ca::concurrent::details::service_thread *)*((_QWORD *)this + 23);
  if (v2 == (ca::concurrent::details::service_thread *)((char *)this + 160))
  {
    v3 = 4;
    v2 = (ca::concurrent::details::service_thread *)((char *)this + 160);
  }
  else
  {
    if (!v2)
      goto LABEL_10;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_10:
  ca::sync::semaphore::~semaphore((ca::concurrent::details::service_thread *)((char *)this + 144));
  std::thread::~thread((std::thread *)this + 17);
  if (*((_BYTE *)this + 132))
    boost::variant<ca::mach::thread::priority_qos,ca::mach::thread::priority_realtime,ca::mach::thread::priority_absolute>::destroy_content(*((unsigned int *)this + 28));
  if (*((_BYTE *)this + 104))
  {
    if (*((char *)this + 103) < 0)
      operator delete(*((void **)this + 10));
  }
}

void ca::concurrent::details::internal_message::~internal_message(ca::concurrent::details::internal_message *this)
{
  char *v1;
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E696DF80;
  v1 = (char *)this + 16;
  v2 = (_QWORD *)*((_QWORD *)this + 5);
  if (v2 == (_QWORD *)v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      return;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
}

{
  char *v1;
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E696DF80;
  v1 = (char *)this + 16;
  v2 = (_QWORD *)*((_QWORD *)this + 5);
  if (v2 == (_QWORD *)v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1B5E50688);
}

uint64_t ca::concurrent::details::internal_message::perform(ca::concurrent::details::internal_message *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 5);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

void std::__function::__func<ca::concurrent::details::service_thread::drain(void)::{lambda(void)#1},std::allocator<ca::concurrent::details::service_thread::drain(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<ca::concurrent::details::service_thread::drain(void)::{lambda(void)#1},std::allocator<ca::concurrent::details::service_thread::drain(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E696DF00;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ca::concurrent::details::service_thread::drain(void)::{lambda(void)#1},std::allocator<ca::concurrent::details::service_thread::drain(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E696DF00;
  a2[1] = v2;
  return result;
}

unsigned int *std::__function::__func<ca::concurrent::details::service_thread::drain(void)::{lambda(void)#1},std::allocator<ca::concurrent::details::service_thread::drain(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  return ca::sync::semaphore::signal(*(unsigned int **)(a1 + 8));
}

uint64_t std::__function::__func<ca::concurrent::details::service_thread::drain(void)::{lambda(void)#1},std::allocator<ca::concurrent::details::service_thread::drain(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN2ca10concurrent7details14service_thread5drainEvEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ca::concurrent::details::service_thread::drain(void)::{lambda(void)#1},std::allocator<ca::concurrent::details::service_thread::drain(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void ca::concurrent::messenger::~messenger(ca::concurrent::details::service_thread **this)
{
  ca::concurrent::details::service_thread *v2;
  unsigned __int8 v3;
  uint64_t i;
  int v5;
  uint64_t v6;
  uint64_t v7;
  std::runtime_error *exception;

  ca::concurrent::details::service_thread::drain(*this);
  v2 = *this;
  if (*((_BYTE *)*this + 72))
  {
    if ((v3 & 1) == 0
    {
      __cxa_atexit((void (*)(void *))ca::concurrent::details::shared_instance_mgr<ca::concurrent::details::service_thread>::~shared_instance_mgr, &ca::concurrent::details::service_thread::sharedMgr(void)::x, &dword_1B57BA000);
    }
    std::mutex::lock(&ca::concurrent::details::service_thread::sharedMgr(void)::x);
    for (i = qword_1EDB87138; ; i += 16)
    {
      if (i == qword_1EDB87140)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "shared_instance_mgr: releasing unknown instance");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (*(ca::concurrent::details::service_thread **)i == v2)
        break;
    }
    v5 = *(_DWORD *)(i + 8) - 1;
    *(_DWORD *)(i + 8) = v5;
    if (!v5)
    {
      ca::concurrent::details::service_thread::~service_thread(v2);
      MEMORY[0x1B5E50688]();
      v6 = qword_1EDB87140;
      v7 = i + 16;
      if (i + 16 != qword_1EDB87140)
      {
        do
        {
          *(_QWORD *)(v7 - 16) = *(_QWORD *)v7;
          *(_DWORD *)(v7 - 8) = *(_DWORD *)(v7 + 8);
          v7 += 16;
        }
        while (v7 != v6);
        i = v7 - 16;
      }
      qword_1EDB87140 = i;
    }
    std::mutex::unlock(&ca::concurrent::details::service_thread::sharedMgr(void)::x);
  }
  else
  {
    ca::concurrent::details::service_thread::~service_thread(*this);
    MEMORY[0x1B5E50688]();
  }
}

void sub_1B584EAE4(void *a1)
{
  __clang_call_terminate(a1);
}

void sub_1B584EC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  void *v15;
  void *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == &a12)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_1B584F0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;
  _QWORD *v16;
  uint64_t v17;

  v16 = *(_QWORD **)(v14 - 48);
  if (v16 == (_QWORD *)(v14 - 72))
  {
    v17 = 4;
    v16 = (_QWORD *)(v14 - 72);
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1B584F1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B584F560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;
  _QWORD *v16;
  uint64_t v17;

  v16 = *(_QWORD **)(v14 - 48);
  if (v16 == (_QWORD *)(v14 - 72))
  {
    v17 = 4;
    v16 = (_QWORD *)(v14 - 72);
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1B584FD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  _QWORD *v27;
  uint64_t v28;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  DSP_Host_Types::FormatDescription::~FormatDescription((DSP_Host_Types::FormatDescription *)&a25);
  DSP_Host_Types::NegotiateResponse::~NegotiateResponse((DSP_Host_Types::NegotiateResponse *)&a12);
  v27 = *(_QWORD **)(v25 - 104);
  if (v27 == (_QWORD *)(v25 - 128))
  {
    v28 = 4;
    v27 = (_QWORD *)(v25 - 128);
  }
  else
  {
    if (!v27)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_1B5850AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  DSP_Host_Types::FormatDescription::~FormatDescription((DSP_Host_Types::FormatDescription *)&a35);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  DSP_Host_Types::NegotiateResponse::~NegotiateResponse((DSP_Host_Types::NegotiateResponse *)&a16);
  _Unwind_Resume(a1);
}

void sub_1B5850F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  DSP_Host_Types::FormatDescription::~FormatDescription((DSP_Host_Types::FormatDescription *)&a12);
  DSP_Host_Types::NegotiateResponse::~NegotiateResponse((DSP_Host_Types::NegotiateResponse *)&a31);
  _Unwind_Resume(a1);
}

void sub_1B585119C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  DSP_Host_Types::NegotiateRequest::~NegotiateRequest((DSP_Host_Types::NegotiateRequest *)va);

  _Unwind_Resume(a1);
}

void sub_1B5852348(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1B58528A8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

DSP_Host_Types::ConfigurationChangeRequest *DSP_Host_Types::ConfigurationChangeRequest::ConfigurationChangeRequest(DSP_Host_Types::ConfigurationChangeRequest *this)
{
  void *__p[2];
  char v4;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E699D0D8;
  std::string::basic_string[abi:ne180100]<0>(__p, "is activation");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)this + 3, (const UInt8 *)__p);
  *((_QWORD *)this + 3) = &off_1E699D180;
  *((_WORD *)this + 20) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "INTERNAL_is_simulated");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)this + 6, (const UInt8 *)__p);
  *((_QWORD *)this + 6) = &off_1E699D180;
  *((_WORD *)this + 32) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
  DSP_Host_Types::IOContextDescription::IOContextDescription((DSP_Host_Types::ConfigurationChangeRequest *)((char *)this + 72), "io context description");
  *((_QWORD *)this + 84) = 0;
  *((_OWORD *)this + 41) = 0u;
  return this;
}

void sub_1B5852A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  uint64_t v16;
  DSP_Dictionariable::DictionariableKvp *v17;
  DSP_Dictionariable::DictionariableKvp *v18;
  DSP_Dictionariable::DictionariableKvp *v19;

  v19 = v18;
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v19);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v17);
  *v15 = off_1E699D128;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void DSP_HAL_Mock_TestHooks::~DSP_HAL_Mock_TestHooks(DSP_HAL_Mock_TestHooks *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  DSP_HAL_Mock_TestHooks *v5;
  uint64_t v6;
  DSP_HAL_Mock_TestHooks *v7;
  uint64_t v8;
  DSP_HAL_Mock_TestHooks *v9;
  uint64_t v10;
  DSP_HAL_Mock_TestHooks *v11;
  uint64_t v12;

  v2 = (char *)this + 128;
  v3 = (char *)*((_QWORD *)this + 19);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (DSP_HAL_Mock_TestHooks *)*((_QWORD *)this + 15);
  if (v5 == (DSP_HAL_Mock_TestHooks *)((char *)this + 96))
  {
    v6 = 4;
    v5 = (DSP_HAL_Mock_TestHooks *)((char *)this + 96);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  v7 = (DSP_HAL_Mock_TestHooks *)*((_QWORD *)this + 11);
  if (v7 == (DSP_HAL_Mock_TestHooks *)((char *)this + 64))
  {
    v8 = 4;
    v7 = (DSP_HAL_Mock_TestHooks *)((char *)this + 64);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_16:
  v9 = (DSP_HAL_Mock_TestHooks *)*((_QWORD *)this + 7);
  if (v9 == (DSP_HAL_Mock_TestHooks *)((char *)this + 32))
  {
    v10 = 4;
    v9 = (DSP_HAL_Mock_TestHooks *)((char *)this + 32);
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_21:
  v11 = (DSP_HAL_Mock_TestHooks *)*((_QWORD *)this + 3);
  if (v11 == this)
  {
    v12 = 4;
    v11 = this;
  }
  else
  {
    if (!v11)
      return;
    v12 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
}

DSP_Host_Types::AdaptResponse *DSP_Host_Types::AdaptResponse::AdaptResponse(DSP_Host_Types::AdaptResponse *this)
{
  void *__p[2];
  char v4;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E699E8B8;
  std::string::basic_string[abi:ne180100]<0>(__p, "dsp processing latency samples");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)this + 3, (const UInt8 *)__p);
  *((_QWORD *)this + 3) = &off_1E699E950;
  *((_BYTE *)this + 40) = 0;
  *((_BYTE *)this + 44) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = -1;
  DSP_Dictionariable::DictionarySet::add_kvp((DSP_Host_Types::AdaptResponse *)((char *)this + 48), (DSP_Host_Types::AdaptResponse *)((char *)this + 24));
  return this;
}

void sub_1B5852C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  uint64_t v16;
  DSP_Dictionariable::DictionariableKvp *v17;
  void **v18;
  void **v19;
  void *v21;

  v19 = v18;
  v21 = *v19;
  if (*v19)
  {
    v15[7] = v21;
    operator delete(v21);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v17);
  *v15 = off_1E699E8F8;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::AdaptResponse::~AdaptResponse(DSP_Host_Types::AdaptResponse *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E699E8B8;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::AdaptResponse *)((char *)this + 24));
  *(_QWORD *)this = off_1E699E8F8;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E699E8B8;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::AdaptResponse *)((char *)this + 24));
  *(_QWORD *)this = off_1E699E8F8;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1B5E50688);
}

void DSP_Host_Types::IOContextDescription::~IOContextDescription(DSP_Host_Types::IOContextDescription *this)
{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = &off_1E699D1D8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 568);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::IOContextDescription *)((char *)this + 544));
  v4 = (void **)((char *)this + 520);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  *((_QWORD *)this + 50) = &off_1E699D360;
  v4 = (void **)((char *)this + 496);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v4);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::IOContextDescription *)((char *)this + 472));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::IOContextDescription *)((char *)this + 448));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::IOContextDescription *)((char *)this + 424));
  *((_QWORD *)this + 50) = off_1E699D3A0;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 408);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::IOContextDescription *)((char *)this + 376));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::IOContextDescription *)((char *)this + 352));
  *((_QWORD *)this + 25) = &off_1E699D270;
  v2 = (void *)*((_QWORD *)this + 41);
  if (v2)
  {
    *((_QWORD *)this + 42) = v2;
    operator delete(v2);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::IOContextDescription *)((char *)this + 304));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::IOContextDescription *)((char *)this + 280));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::IOContextDescription *)((char *)this + 256));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::IOContextDescription *)((char *)this + 224));
  *((_QWORD *)this + 25) = off_1E699D2B0;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 208);
  *((_QWORD *)this + 6) = &off_1E699D270;
  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
  {
    *((_QWORD *)this + 23) = v3;
    operator delete(v3);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::IOContextDescription *)((char *)this + 152));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::IOContextDescription *)((char *)this + 128));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::IOContextDescription *)((char *)this + 104));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::IOContextDescription *)((char *)this + 72));
  *((_QWORD *)this + 6) = off_1E699D2B0;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 56);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)this + 4));
  *(_QWORD *)this = off_1E699D218;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

{
  DSP_Host_Types::IOContextDescription::~IOContextDescription(this);
  JUMPOUT(0x1B5E50688);
}

void DSP_Host_Types::AdaptRequest::~AdaptRequest(DSP_Host_Types::AdaptRequest *this)
{
  DSP_Dictionariable::DictionariableKvp *v2;
  void **v3;

  *(_QWORD *)this = &off_1E699D0D8;
  v2 = (DSP_Host_Types::AdaptRequest *)((char *)this + 24);
  v3 = (void **)((char *)this + 656);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::AdaptRequest *)((char *)this + 72));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::AdaptRequest *)((char *)this + 48));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v2);
  *(_QWORD *)this = off_1E699D128;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

{
  DSP_Dictionariable::DictionariableKvp *v2;
  void **v3;

  *(_QWORD *)this = &off_1E699D0D8;
  v2 = (DSP_Host_Types::AdaptRequest *)((char *)this + 24);
  v3 = (void **)((char *)this + 656);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::AdaptRequest *)((char *)this + 72));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::AdaptRequest *)((char *)this + 48));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v2);
  *(_QWORD *)this = off_1E699D128;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1B5E50688);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::description(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const __CFString *v4;
  const __CFString *v5;
  CFIndex Length;
  CFIndex v7;
  CFTypeRef v8;
  std::vector<char>::value_type __x;
  std::vector<char> cf;

  cf.__begin_ = (std::vector<char>::pointer)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, std::vector<char> *))(*(_QWORD *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v8, cf.__begin_);
  if (cf.__begin_)
    CFRelease(cf.__begin_);
  v4 = CFCopyDescription(v8);
  v5 = v4;
  if (v4)
  {
    Length = CFStringGetLength(v4);
    v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    __x = 0;
    std::vector<char>::vector(&cf, v7, &__x);
    LODWORD(v7) = CFStringGetCString(v5, cf.__begin_, v7, 0x8000100u);
    CFRelease(v5);
    if ((_DWORD)v7)
      std::string::basic_string[abi:ne180100]<0>(a2, cf.__begin_);
    else
      std::string::basic_string[abi:ne180100]<0>(a2, "<error>");
    if (cf.__begin_)
    {
      cf.__end_ = cf.__begin_;
      operator delete(cf.__begin_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<empty>");
  }
  if (v8)
    CFRelease(v8);
}

void sub_1B5852FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)&__p);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::add_to(uint64_t a1, __CFArray **a2)
{
  CFTypeRef v4;
  CFTypeRef cf;

  cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v4, cf);
  if (cf)
    CFRelease(cf);
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, v4);
  if (v4)
    CFRelease(v4);
}

void sub_1B58530C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*a1);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a1[1]);
    operator delete(a1);
  }
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::IOContextDescription>::description(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const __CFString *v4;
  const __CFString *v5;
  CFIndex Length;
  CFIndex v7;
  CFTypeRef v8;
  std::vector<char>::value_type __x;
  std::vector<char> cf;

  cf.__begin_ = (std::vector<char>::pointer)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, std::vector<char> *))(*(_QWORD *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v8, cf.__begin_);
  if (cf.__begin_)
    CFRelease(cf.__begin_);
  v4 = CFCopyDescription(v8);
  v5 = v4;
  if (v4)
  {
    Length = CFStringGetLength(v4);
    v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    __x = 0;
    std::vector<char>::vector(&cf, v7, &__x);
    LODWORD(v7) = CFStringGetCString(v5, cf.__begin_, v7, 0x8000100u);
    CFRelease(v5);
    if ((_DWORD)v7)
      std::string::basic_string[abi:ne180100]<0>(a2, cf.__begin_);
    else
      std::string::basic_string[abi:ne180100]<0>(a2, "<error>");
    if (cf.__begin_)
    {
      cf.__end_ = cf.__begin_;
      operator delete(cf.__begin_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<empty>");
  }
  if (v8)
    CFRelease(v8);
}

void sub_1B5853254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)&__p);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::IOContextDescription>::add_to(uint64_t a1, __CFArray **a2)
{
  CFTypeRef v4;
  CFTypeRef cf;

  cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v4, cf);
  if (cf)
    CFRelease(cf);
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, v4);
  if (v4)
    CFRelease(v4);
}

void sub_1B5853324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::FormatDescription>::description(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const __CFString *v4;
  const __CFString *v5;
  CFIndex Length;
  CFIndex v7;
  CFTypeRef v8;
  std::vector<char>::value_type __x;
  std::vector<char> cf;

  cf.__begin_ = (std::vector<char>::pointer)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, std::vector<char> *))(*(_QWORD *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v8, cf.__begin_);
  if (cf.__begin_)
    CFRelease(cf.__begin_);
  v4 = CFCopyDescription(v8);
  v5 = v4;
  if (v4)
  {
    Length = CFStringGetLength(v4);
    v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    __x = 0;
    std::vector<char>::vector(&cf, v7, &__x);
    LODWORD(v7) = CFStringGetCString(v5, cf.__begin_, v7, 0x8000100u);
    CFRelease(v5);
    if ((_DWORD)v7)
      std::string::basic_string[abi:ne180100]<0>(a2, cf.__begin_);
    else
      std::string::basic_string[abi:ne180100]<0>(a2, "<error>");
    if (cf.__begin_)
    {
      cf.__end_ = cf.__begin_;
      operator delete(cf.__begin_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<empty>");
  }
  if (v8)
    CFRelease(v8);
}

void sub_1B5853480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)&__p);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::FormatDescription>::add_to(uint64_t a1, __CFArray **a2)
{
  CFTypeRef v4;
  CFTypeRef cf;

  cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v4, cf);
  if (cf)
    CFRelease(cf);
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, v4);
  if (v4)
    CFRelease(v4);
}

void sub_1B5853550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::AudioChannelConfiguration>::description(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const __CFString *v4;
  const __CFString *v5;
  CFIndex Length;
  CFIndex v7;
  CFTypeRef v8;
  std::vector<char>::value_type __x;
  std::vector<char> cf;

  cf.__begin_ = (std::vector<char>::pointer)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, std::vector<char> *))(*(_QWORD *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v8, cf.__begin_);
  if (cf.__begin_)
    CFRelease(cf.__begin_);
  v4 = CFCopyDescription(v8);
  v5 = v4;
  if (v4)
  {
    Length = CFStringGetLength(v4);
    v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    __x = 0;
    std::vector<char>::vector(&cf, v7, &__x);
    LODWORD(v7) = CFStringGetCString(v5, cf.__begin_, v7, 0x8000100u);
    CFRelease(v5);
    if ((_DWORD)v7)
      std::string::basic_string[abi:ne180100]<0>(a2, cf.__begin_);
    else
      std::string::basic_string[abi:ne180100]<0>(a2, "<error>");
    if (cf.__begin_)
    {
      cf.__end_ = cf.__begin_;
      operator delete(cf.__begin_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<empty>");
  }
  if (v8)
    CFRelease(v8);
}

void sub_1B58536AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)&__p);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::AudioChannelConfiguration>::add_to(uint64_t a1, __CFArray **a2)
{
  CFTypeRef v4;
  CFTypeRef cf;

  cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v4, cf);
  if (cf)
    CFRelease(cf);
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, v4);
  if (v4)
    CFRelease(v4);
}

void sub_1B585377C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::AdaptResponse>::description(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const __CFString *v4;
  const __CFString *v5;
  CFIndex Length;
  CFIndex v7;
  CFTypeRef v8;
  std::vector<char>::value_type __x;
  std::vector<char> cf;

  cf.__begin_ = (std::vector<char>::pointer)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, std::vector<char> *))(*(_QWORD *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v8, cf.__begin_);
  if (cf.__begin_)
    CFRelease(cf.__begin_);
  v4 = CFCopyDescription(v8);
  v5 = v4;
  if (v4)
  {
    Length = CFStringGetLength(v4);
    v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    __x = 0;
    std::vector<char>::vector(&cf, v7, &__x);
    LODWORD(v7) = CFStringGetCString(v5, cf.__begin_, v7, 0x8000100u);
    CFRelease(v5);
    if ((_DWORD)v7)
      std::string::basic_string[abi:ne180100]<0>(a2, cf.__begin_);
    else
      std::string::basic_string[abi:ne180100]<0>(a2, "<error>");
    if (cf.__begin_)
    {
      cf.__end_ = cf.__begin_;
      operator delete(cf.__begin_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<empty>");
  }
  if (v8)
    CFRelease(v8);
}

void sub_1B58538D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)&__p);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::AdaptResponse>::add_to(uint64_t a1, __CFArray **a2)
{
  CFTypeRef v4;
  CFTypeRef cf;

  cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v4, cf);
  if (cf)
    CFRelease(cf);
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, v4);
  if (v4)
    CFRelease(v4);
}

void sub_1B58539A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

_QWORD *DSP_Dictionariable::DictionariableKvp::DictionariableKvp(_QWORD *a1, const UInt8 *a2)
{
  CFIndex v3;
  CFIndex v4;
  CFStringRef v5;
  std::runtime_error *exception;

  *a1 = off_1E699E9B8;
  v3 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v4 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v4 = v3;
  }
  v5 = CFStringCreateWithBytes(0, a2, v4, 0x8000100u, 0);
  a1[1] = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return a1;
}

void sub_1B5853A60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void DSP_Dictionariable::SingleKvp<unsigned int>::~SingleKvp(DSP_Dictionariable::DictionariableKvp *a1)
{
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(a1);
  JUMPOUT(0x1B5E50688);
}

void DSP_Dictionariable::SingleKvp<unsigned int>::add_to(uint64_t a1, __CFDictionary **a2)
{
  const void *v3;
  CFNumberRef v4;
  CFNumberRef v5;
  std::runtime_error *exception;
  int valuePtr;

  if (*(_BYTE *)(a1 + 20))
  {
    v3 = *(const void **)(a1 + 8);
    valuePtr = *(_DWORD *)(a1 + 16);
    v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!v4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v5 = v4;
    mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::NumberRef>(*a2, v3, v4);
    CFRelease(v5);
  }
}

void sub_1B5853B54(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t DSP_Dictionariable::SingleKvp<unsigned int>::load_from(uint64_t a1, CFDictionaryRef *a2)
{
  const __CFNumber *v4;
  uint64_t v5;
  std::runtime_error *exception;
  _QWORD v8[3];

  v8[0] = &off_1E699E9F8;
  v8[1] = 0;
  v8[2] = a2;
  if (*(_BYTE *)(a1 + 20))
    *(_BYTE *)(a1 + 20) = 0;
  if (applesauce::CF::details::has_key<__CFString const*&>(*a2, *(const void **)(a1 + 8)))
  {
    v4 = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const*&>(*a2, *(const void **)(a1 + 8));
    if (!v4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not find item");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    *(_DWORD *)(a1 + 16) = applesauce::CF::convert_to<unsigned int,0>(v4);
    v5 = 1;
    *(_BYTE *)(a1 + 20) = 1;
  }
  else
  {
    v5 = 0;
  }
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v8);
  return v5;
}

uint64_t DSP_Dictionariable::SingleKvp<unsigned int>::has_value(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 20);
}

uint64_t DSP_Dictionariable::SingleKvp<unsigned int>::clear_value(uint64_t result)
{
  if (*(_BYTE *)(result + 20))
    *(_BYTE *)(result + 20) = 0;
  return result;
}

BOOL applesauce::CF::details::has_key<__CFString const*&>(CFDictionaryRef theDict, const void *a2)
{
  _BOOL8 result;

  result = 0;
  if (theDict)
  {
    if (a2)
      return CFDictionaryContainsKey(theDict, a2) != 0;
  }
  return result;
}

const void *applesauce::CF::details::at_key<__CFString const*&>(CFDictionaryRef theDict, const void *a2)
{
  const void *result;

  result = 0;
  if (theDict)
  {
    if (a2)
      return CFDictionaryGetValue(theDict, a2);
  }
  return result;
}

void mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::NumberRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1)
    CFDictionaryAddValue(a1, a2, a3);
}

void sub_1B5853E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B5853FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

DSP_Host_Types::IOContextDescription *DSP_Host_Types::IOContextDescription::IOContextDescription(DSP_Host_Types::IOContextDescription *this, char *a2)
{
  CFTypeRef cf[2];
  char v5;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, a2);
  *(_QWORD *)this = off_1E699D218;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::__optional_destruct_base[abi:ne180100]<applesauce::CF::StringRef const&>((uint64_t)this + 8, cf[0]);
  if (cf[0])
    CFRelease(cf[0]);
  *(_QWORD *)this = &off_1E699D1D8;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = (char *)this + 32;
  DSP_Host_Types::FormatDescription::FormatDescription((DSP_Host_Types::IOContextDescription *)((char *)this + 48), "io context input format");
  DSP_Host_Types::FormatDescription::FormatDescription((DSP_Host_Types::IOContextDescription *)((char *)this + 200), "io context output format");
  std::string::basic_string[abi:ne180100]<0>(cf, "io context buffer size");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)this + 44, (const UInt8 *)cf);
  *((_QWORD *)this + 44) = &off_1E699E950;
  *((_BYTE *)this + 368) = 0;
  *((_BYTE *)this + 372) = 0;
  if (v5 < 0)
    operator delete((void *)cf[0]);
  std::string::basic_string[abi:ne180100]<0>(cf, "io context maximum buffer size");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)this + 47, (const UInt8 *)cf);
  *((_QWORD *)this + 47) = &off_1E699E950;
  *((_BYTE *)this + 392) = 0;
  *((_BYTE *)this + 396) = 0;
  if (v5 < 0)
    operator delete((void *)cf[0]);
  DSP_Host_Types::AudioChannelConfiguration::AudioChannelConfiguration((DSP_Host_Types::IOContextDescription *)((char *)this + 400), "io context output client virtual layout");
  *((_QWORD *)this + 67) = 0;
  *(_OWORD *)((char *)this + 520) = 0u;
  std::string::basic_string[abi:ne180100]<0>(cf, "isolated audio use case id");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)this + 68, (const UInt8 *)cf);
  *((_QWORD *)this + 68) = &off_1E699E950;
  *((_BYTE *)this + 560) = 0;
  *((_BYTE *)this + 564) = 0;
  if (v5 < 0)
    operator delete((void *)cf[0]);
  *(_OWORD *)((char *)this + 568) = 0u;
  return this;
}

void sub_1B58541F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  DSP_Host_Types::FormatDescription *v17;
  DSP_Host_Types::FormatDescription *v18;
  DSP_Dictionariable::DictionariableKvp *v19;
  DSP_Dictionariable::DictionariableKvp *v20;
  DSP_Host_Types::AudioChannelConfiguration *v21;
  uint64_t v22;

  if (a15 < 0)
    operator delete(__p);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  DSP_Host_Types::AudioChannelConfiguration::~AudioChannelConfiguration(v21);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v20);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v19);
  DSP_Host_Types::FormatDescription::~FormatDescription(v18);
  DSP_Host_Types::FormatDescription::~FormatDescription(v17);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)(v15 + 32));
  *(_QWORD *)v15 = v22;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void sub_1B5854288(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  JUMPOUT(0x1B585425CLL);
}

void sub_1B58542A0()
{
  JUMPOUT(0x1B585425CLL);
}

void sub_1B58542A8()
{
  JUMPOUT(0x1B5854264);
}

void sub_1B58542B0()
{
  JUMPOUT(0x1B585426CLL);
}

uint64_t std::__optional_destruct_base<applesauce::CF::StringRef,false>::__optional_destruct_base[abi:ne180100]<applesauce::CF::StringRef const&>(uint64_t a1, CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  *(_QWORD *)a1 = cf;
  *(_BYTE *)(a1 + 8) = 1;
  return a1;
}

DSP_Host_Types::FormatDescription *DSP_Host_Types::FormatDescription::FormatDescription(DSP_Host_Types::FormatDescription *this, char *a2)
{
  CFTypeRef cf[2];
  char v5;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, a2);
  *(_QWORD *)this = off_1E699D2B0;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::__optional_destruct_base[abi:ne180100]<applesauce::CF::StringRef const&>((uint64_t)this + 8, cf[0]);
  if (cf[0])
    CFRelease(cf[0]);
  *(_QWORD *)this = &off_1E699D270;
  std::string::basic_string[abi:ne180100]<0>(cf, "sample rate");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)this + 3, (const UInt8 *)cf);
  *((_QWORD *)this + 3) = &off_1E699D308;
  *((_BYTE *)this + 40) = 0;
  *((_BYTE *)this + 48) = 0;
  if (v5 < 0)
    operator delete((void *)cf[0]);
  std::string::basic_string[abi:ne180100]<0>(cf, "channels");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)this + 7, (const UInt8 *)cf);
  *((_QWORD *)this + 7) = &off_1E699E950;
  *((_BYTE *)this + 72) = 0;
  *((_BYTE *)this + 76) = 0;
  if (v5 < 0)
    operator delete((void *)cf[0]);
  std::string::basic_string[abi:ne180100]<0>(cf, "is interleaved");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)this + 10, (const UInt8 *)cf);
  *((_QWORD *)this + 10) = &off_1E699D180;
  *((_WORD *)this + 48) = 0;
  if (v5 < 0)
    operator delete((void *)cf[0]);
  std::string::basic_string[abi:ne180100]<0>(cf, "common pcm format");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)this + 13, (const UInt8 *)cf);
  *((_QWORD *)this + 13) = &off_1E699E950;
  *((_BYTE *)this + 120) = 0;
  *((_BYTE *)this + 124) = 0;
  if (v5 < 0)
    operator delete((void *)cf[0]);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  DSP_Host_Types::FormatDescription::init_set(this);
  return this;
}

void sub_1B5854490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  uint64_t v16;
  DSP_Dictionariable::DictionariableKvp *v17;
  DSP_Dictionariable::DictionariableKvp *v18;
  void **v19;
  DSP_Dictionariable::DictionariableKvp *v20;
  DSP_Dictionariable::DictionariableKvp *v21;
  uint64_t v22;
  void **v23;
  void *v25;

  v23 = v19;
  v25 = *v23;
  if (*v23)
  {
    v15[17] = v25;
    operator delete(v25);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v21);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v20);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v18);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v17);
  *v15 = v22;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void sub_1B585451C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  JUMPOUT(0x1B5854500);
}

void sub_1B5854534()
{
  JUMPOUT(0x1B5854500);
}

void sub_1B585453C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  JUMPOUT(0x1B5854508);
}

void sub_1B5854554()
{
  JUMPOUT(0x1B5854508);
}

DSP_Host_Types::AudioChannelConfiguration *DSP_Host_Types::AudioChannelConfiguration::AudioChannelConfiguration(DSP_Host_Types::AudioChannelConfiguration *this, char *a2)
{
  CFTypeRef cf[2];
  char v5;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, a2);
  *(_QWORD *)this = off_1E699D3A0;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::__optional_destruct_base[abi:ne180100]<applesauce::CF::StringRef const&>((uint64_t)this + 8, cf[0]);
  if (cf[0])
    CFRelease(cf[0]);
  *(_QWORD *)this = &off_1E699D360;
  std::string::basic_string[abi:ne180100]<0>(cf, "channel layout tag");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)this + 3, (const UInt8 *)cf);
  *((_QWORD *)this + 3) = &off_1E699E950;
  *((_BYTE *)this + 40) = 0;
  *((_BYTE *)this + 44) = 0;
  if (v5 < 0)
    operator delete((void *)cf[0]);
  std::string::basic_string[abi:ne180100]<0>(cf, "channel bitmap");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)this + 6, (const UInt8 *)cf);
  *((_QWORD *)this + 6) = &off_1E699E950;
  *((_BYTE *)this + 64) = 0;
  *((_BYTE *)this + 68) = 0;
  if (v5 < 0)
    operator delete((void *)cf[0]);
  std::string::basic_string[abi:ne180100]<0>(cf, "channel description count");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)this + 9, (const UInt8 *)cf);
  *((_QWORD *)this + 9) = &off_1E699E950;
  *((_BYTE *)this + 88) = 0;
  *((_BYTE *)this + 92) = 0;
  if (v5 < 0)
    operator delete((void *)cf[0]);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  return this;
}

void sub_1B5854694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  uint64_t v16;
  DSP_Dictionariable::DictionariableKvp *v17;
  DSP_Dictionariable::DictionariableKvp *v18;
  uint64_t v19;

  if (a15 < 0)
    operator delete(__p);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v18);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v17);
  *v15 = v19;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::AudioChannelConfiguration::~AudioChannelConfiguration(DSP_Host_Types::AudioChannelConfiguration *this)
{
  DSP_Dictionariable::DictionariableKvp *v2;
  void **v3;

  *(_QWORD *)this = &off_1E699D360;
  v2 = (DSP_Host_Types::AudioChannelConfiguration *)((char *)this + 24);
  v3 = (void **)((char *)this + 96);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::AudioChannelConfiguration *)((char *)this + 72));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::AudioChannelConfiguration *)((char *)this + 48));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v2);
  *(_QWORD *)this = off_1E699D3A0;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

{
  DSP_Dictionariable::DictionariableKvp *v2;
  void **v3;

  *(_QWORD *)this = &off_1E699D360;
  v2 = (DSP_Host_Types::AudioChannelConfiguration *)((char *)this + 24);
  v3 = (void **)((char *)this + 96);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::AudioChannelConfiguration *)((char *)this + 72));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::AudioChannelConfiguration *)((char *)this + 48));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v2);
  *(_QWORD *)this = off_1E699D3A0;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1B5E50688);
}

void DSP_Host_Types::FormatDescription::~FormatDescription(DSP_Host_Types::FormatDescription *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E699D270;
  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
  {
    *((_QWORD *)this + 17) = v2;
    operator delete(v2);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::FormatDescription *)((char *)this + 104));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::FormatDescription *)((char *)this + 80));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::FormatDescription *)((char *)this + 56));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::FormatDescription *)((char *)this + 24));
  *(_QWORD *)this = off_1E699D2B0;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E699D270;
  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
  {
    *((_QWORD *)this + 17) = v2;
    operator delete(v2);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::FormatDescription *)((char *)this + 104));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::FormatDescription *)((char *)this + 80));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::FormatDescription *)((char *)this + 56));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::FormatDescription *)((char *)this + 24));
  *(_QWORD *)this = off_1E699D2B0;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1B5E50688);
}

void DSP_Dictionariable::SingleKvp<double>::~SingleKvp(DSP_Dictionariable::DictionariableKvp *a1)
{
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(a1);
  JUMPOUT(0x1B5E50688);
}

void DSP_Dictionariable::SingleKvp<double>::add_to(uint64_t a1, __CFDictionary **a2)
{
  const void *v3;
  CFNumberRef v4;
  CFNumberRef v5;
  std::runtime_error *exception;
  uint64_t valuePtr;

  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(const void **)(a1 + 8);
    valuePtr = *(_QWORD *)(a1 + 16);
    v4 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
    if (!v4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v5 = v4;
    mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::NumberRef>(*a2, v3, v4);
    CFRelease(v5);
  }
}

void sub_1B58548C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t DSP_Dictionariable::SingleKvp<double>::load_from(uint64_t a1, CFDictionaryRef *a2)
{
  const __CFNumber *v4;
  uint64_t v5;
  std::runtime_error *exception;
  _QWORD v8[3];

  v8[0] = &off_1E699E9F8;
  v8[1] = 0;
  v8[2] = a2;
  if (*(_BYTE *)(a1 + 24))
    *(_BYTE *)(a1 + 24) = 0;
  if (applesauce::CF::details::has_key<__CFString const*&>(*a2, *(const void **)(a1 + 8)))
  {
    v4 = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const*&>(*a2, *(const void **)(a1 + 8));
    if (!v4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not find item");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    *(double *)(a1 + 16) = applesauce::CF::convert_to<double,0>(v4);
    v5 = 1;
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    v5 = 0;
  }
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v8);
  return v5;
}

uint64_t DSP_Dictionariable::SingleKvp<double>::has_value(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t DSP_Dictionariable::SingleKvp<double>::clear_value(uint64_t result)
{
  if (*(_BYTE *)(result + 24))
    *(_BYTE *)(result + 24) = 0;
  return result;
}

void DSP_Dictionariable::SingleKvp<BOOL>::~SingleKvp(DSP_Dictionariable::DictionariableKvp *a1)
{
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(a1);
  JUMPOUT(0x1B5E50688);
}

void DSP_Dictionariable::SingleKvp<BOOL>::add_to(uint64_t a1, __CFDictionary **a2)
{
  const void **v2;
  const void *v3;

  if (*(_BYTE *)(a1 + 17))
  {
    if (*(_BYTE *)(a1 + 16))
      v2 = (const void **)MEMORY[0x1E0C9AE58];
    else
      v2 = (const void **)MEMORY[0x1E0C9AE48];
    v3 = *v2;
    mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::BooleanRef>(*a2, *(const void **)(a1 + 8), *v2);
    if (v3)
      CFRelease(v3);
  }
}

uint64_t DSP_Dictionariable::SingleKvp<BOOL>::load_from(uint64_t a1, CFDictionaryRef *a2)
{
  const __CFBoolean *v4;
  uint64_t v5;
  std::runtime_error *exception;
  _QWORD v8[3];

  v8[0] = &off_1E699E9F8;
  v8[1] = 0;
  v8[2] = a2;
  if (*(_BYTE *)(a1 + 17))
    *(_BYTE *)(a1 + 17) = 0;
  if (applesauce::CF::details::has_key<__CFString const*&>(*a2, *(const void **)(a1 + 8)))
  {
    v4 = (const __CFBoolean *)applesauce::CF::details::at_key<__CFString const*&>(*a2, *(const void **)(a1 + 8));
    if (!v4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not find item");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    *(_WORD *)(a1 + 16) = applesauce::CF::convert_to<BOOL,0>(v4) | 0x100;
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v8);
  return v5;
}

uint64_t DSP_Dictionariable::SingleKvp<BOOL>::has_value(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 17);
}

uint64_t DSP_Dictionariable::SingleKvp<BOOL>::clear_value(uint64_t result)
{
  if (*(_BYTE *)(result + 17))
    *(_BYTE *)(result + 17) = 0;
  return result;
}

void mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::BooleanRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1)
    CFDictionaryAddValue(a1, a2, a3);
}

void std::vector<std::unique_ptr<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine,std::default_delete<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          std::default_delete<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine>::operator()[abi:ne180100](v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::vector<std::unique_ptr<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine,std::default_delete<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine>>>::__swap_out_circular_buffer(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *--v2;
    *v2 = 0;
    *(_QWORD *)(v4 - 8) = v5;
    v4 -= 8;
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine,std::default_delete<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      std::default_delete<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine>::operator()[abi:ne180100](v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::default_delete<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine>::operator()[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B5E50688);
}

void caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::DSP_HAL_Mock_Callbacks(HAL_DSP_IOCallbacks &,DSP_HAL_Mock_FeatureFlag)::{lambda(std::tuple<unsigned int,char const*,int,DSP_HAL_Mock_FeatureFlag> &)#1},std::tuple<unsigned int,char const*,int,DSP_HAL_Mock_FeatureFlag>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::DSP_HAL_Mock_Callbacks(HAL_DSP_IOCallbacks &,DSP_HAL_Mock_FeatureFlag)::{lambda(std::tuple<unsigned int,char const*,int,DSP_HAL_Mock_FeatureFlag> &)#1},std::tuple<unsigned int,char const*,int,DSP_HAL_Mock_FeatureFlag>>::perform(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  id *v12;
  _BYTE v13[10];
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
  v2 = *v12;
  AMCP::Log::Scope::get_os_log_t(*v12);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v13;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    LODWORD(v12) = 67109890;
    HIDWORD(v12) = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    v16 = 1024;
    v17 = v10;
    _os_log_impl(&dword_1B57BA000, v2, v6, "%6u %32s:%-5d DSP_HAL_MockCallbacks - configured Mock DSP IO with feature %d", (uint8_t *)&v12, 0x1Eu);
  }

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], a1, 48, 8);
}

void sub_1B5854EB4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void DSP_HAL_Mock_Callbacks::~DSP_HAL_Mock_Callbacks(DSP_HAL_Mock_Callbacks *this)
{
  DSP_HAL_Mock_Callbacks::~DSP_HAL_Mock_Callbacks(this);
  JUMPOUT(0x1B5E50688);
}

{
  const void *v2;
  DSP_HAL_Mock_Callbacks *v3;
  uint64_t v4;
  DSP_HAL_Mock_Callbacks *v5;
  uint64_t v6;
  DSP_HAL_Mock_Callbacks *v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)this = &off_1E696DFC0;
  v2 = (const void *)*((_QWORD *)this + 61);
  if (v2)
    CFRelease(v2);
  v3 = (DSP_HAL_Mock_Callbacks *)*((_QWORD *)this + 60);
  if (v3 == (DSP_HAL_Mock_Callbacks *)((char *)this + 456))
  {
    v4 = 4;
    v3 = (DSP_HAL_Mock_Callbacks *)((char *)this + 456);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_8:
  v5 = (DSP_HAL_Mock_Callbacks *)*((_QWORD *)this + 56);
  if (v5 == (DSP_HAL_Mock_Callbacks *)((char *)this + 424))
  {
    v6 = 4;
    v5 = (DSP_HAL_Mock_Callbacks *)((char *)this + 424);
  }
  else
  {
    if (!v5)
      goto LABEL_13;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_13:
  if (*((char *)this + 415) < 0)
    operator delete(*((void **)this + 49));
  v9 = (void **)((char *)this + 360);
  std::vector<std::unique_ptr<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine,std::default_delete<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v7 = (DSP_HAL_Mock_Callbacks *)*((_QWORD *)this + 43);
  if (v7 == (DSP_HAL_Mock_Callbacks *)((char *)this + 320))
  {
    v8 = 4;
    v7 = (DSP_HAL_Mock_Callbacks *)((char *)this + 320);
    goto LABEL_19;
  }
  if (v7)
  {
    v8 = 5;
LABEL_19:
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
  }
  *(_QWORD *)this = &off_1E699A310;
  atomic_load((unsigned __int8 *)this + 316);
  DSP_HAL_BypassCallbacks::FormatPlus<BOOL>::~FormatPlus((_QWORD *)this + 20);
  DSP_HAL_BypassCallbacks::FormatPlus<BOOL>::~FormatPlus((_QWORD *)this + 1);
}

uint64_t DSP_HAL_Mock_Callbacks::onBeginProcessing(DSP_HAL_Mock_Callbacks *this)
{
  uint64_t result;
  char v2;

  result = *((_QWORD *)this + 60);
  if (result)
  {
    v2 = 1;
    return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)result + 48))(result, &v2);
  }
  return result;
}

void DSP_HAL_Mock_Callbacks::onClientIO(AMCP::Log::Scope_Registry *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  AMCP::Log::Scope_Registry *v7;
  unint64_t v8;
  unsigned __int8 v9;
  caulk::concurrent::messenger *v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  unint64_t v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v17;
  const char *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  caulk::concurrent::messenger *v25;
  _opaque_pthread_t *v26;
  mach_port_t v27;
  unint64_t v28;
  char *v29;
  int v30;
  char *v31;
  uint64_t v32;
  const char *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  caulk::concurrent::messenger *v38;
  _opaque_pthread_t *v39;
  mach_port_t v40;
  unint64_t v41;
  char *v42;
  int v43;
  char *v44;
  const char *v45;
  _QWORD *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  caulk::concurrent::messenger *v51;
  _opaque_pthread_t *v52;
  mach_port_t v53;
  unint64_t v54;
  char *v55;
  int v56;
  char *v57;
  uint64_t v58;
  const char *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  caulk::concurrent::messenger *v63;
  _opaque_pthread_t *v64;
  mach_port_t v65;
  unint64_t v66;
  char *v67;
  int v68;
  char *v69;
  uint64_t v70;
  const char *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  BOOL v75;
  int *v76;
  uint64_t v77;
  char v78;
  int v79;
  caulk::concurrent::messenger *v80;
  _opaque_pthread_t *v81;
  mach_port_t v82;
  unint64_t v83;
  char *v84;
  int v85;
  char *v86;
  uint64_t v87;
  const char *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  int v92;
  _DWORD *v93;
  _DWORD *v94;
  _BOOL8 is_every_sample;
  unint64_t v96;
  caulk::concurrent::messenger *v97;
  _opaque_pthread_t *v98;
  mach_port_t v99;
  unint64_t v100;
  char *v101;
  int v102;
  char *v103;
  const char *v104;
  _DWORD *v105;
  _DWORD *v106;
  uint64_t v107;
  uint64_t i;
  int v109;
  _DWORD *v110;
  _DWORD *v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t (***v120)();
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  int v130;
  int v131;
  char v132;
  _QWORD v133[2];
  std::chrono::nanoseconds __ns;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  _DWORD *v138;
  uint64_t (**v139)();
  __int128 v140;
  __int128 v141;
  __int128 v142;
  _DWORD *v143;
  uint64_t v144;

  v7 = a1;
  v144 = *MEMORY[0x1E0C80C00];
  v124 = a3;
  v125 = a4;
  v126 = a5;
  v127 = a6;
  v128 = a7;
  if ((*((_BYTE *)a1 + 353) & 0x20) != 0)
  {
    ++DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::heart;
    HIDWORD(v8) = -1030792151
                * DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::heart
                + 85899344;
    LODWORD(v8) = HIDWORD(v8);
    if ((v8 >> 3) <= 0x147AE14)
    {
      AMCP::Log::Scope_Registry::get(a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v139, "com.apple.coreaudio", "AMCP");
      v38 = (caulk::concurrent::messenger *)v139[1];
      v39 = pthread_self();
      v40 = pthread_mach_thread_np(v39);
      v41 = 0;
      v42 = 0;
      v43 = 47;
      do
      {
        v44 = &aLibraryCachesC_10[v41];
        if (v43 == 47)
          v42 = &aLibraryCachesC_10[v41];
        v43 = v44[1];
        if (!v44[1])
          break;
        v75 = v41++ >= 0xFFF;
      }
      while (!v75);
      if (v42)
        v45 = v42 + 1;
      else
        v45 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/DSP/Factories/DSP_HAL_MockFeature_Processors.mm";
      v46 = (_QWORD *)((char *)v7 + 392);
      if (*((char *)v7 + 415) < 0)
        v46 = (_QWORD *)*v46;
      v47 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
      *(_DWORD *)(v47 + 16) = 0;
      *(_BYTE *)(v47 + 20) = 2;
      *(_DWORD *)(v47 + 24) = v40;
      *(_QWORD *)(v47 + 32) = v45;
      *(_DWORD *)(v47 + 40) = 38;
      *(_QWORD *)(v47 + 48) = v46;
      *(_QWORD *)v47 = &off_1E696E0D0;
      *(_QWORD *)(v47 + 8) = 0;
      a1 = (AMCP::Log::Scope_Registry *)caulk::concurrent::messenger::enqueue(v38, (caulk::concurrent::message *)v47);
      v48 = (std::__shared_weak_count *)v140;
      if ((_QWORD)v140)
      {
        v49 = (unint64_t *)(v140 + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
    }
  }
  if (!*((_BYTE *)v7 + 317))
  {
    DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>((uint64_t)&v124);
    return;
  }
  if ((*((_BYTE *)v7 + 353) & 0x20) != 0)
  {
    v9 = atomic_load((unsigned __int8 *)v7 + 316);
    if ((v9 & 1) == 0 && !*((_BYTE *)v7 + 416))
    {
      *((_BYTE *)v7 + 416) = 1;
      AMCP::Log::Scope_Registry::get(a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v139, "com.apple.coreaudio", "AMCP");
      v51 = (caulk::concurrent::messenger *)v139[1];
      v52 = pthread_self();
      v53 = pthread_mach_thread_np(v52);
      v54 = 0;
      v55 = 0;
      v56 = 47;
      do
      {
        v57 = &aLibraryCachesC_10[v54];
        if (v56 == 47)
          v55 = &aLibraryCachesC_10[v54];
        v56 = v57[1];
        if (!v57[1])
          break;
        v75 = v54++ >= 0xFFF;
      }
      while (!v75);
      v58 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
      *(_DWORD *)(v58 + 16) = 0;
      if (v55)
        v59 = v55 + 1;
      else
        v59 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/DSP/Factories/DSP_HAL_MockFeature_Processors.mm";
      *(_BYTE *)(v58 + 20) = 2;
      *(_DWORD *)(v58 + 24) = v53;
      *(_QWORD *)(v58 + 32) = v59;
      *(_DWORD *)(v58 + 40) = 51;
      *(_QWORD *)v58 = &off_1E696E128;
      *(_QWORD *)(v58 + 8) = 0;
      a1 = (AMCP::Log::Scope_Registry *)caulk::concurrent::messenger::enqueue(v51, (caulk::concurrent::message *)v58);
      v60 = (std::__shared_weak_count *)v140;
      if ((_QWORD)v140)
      {
        v61 = (unint64_t *)(v140 + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
    }
    if (!v126 || !v125 || !v128 || !v127)
    {
      AMCP::Log::Scope_Registry::get(a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v139, "com.apple.coreaudio", "AMCP");
      v10 = (caulk::concurrent::messenger *)v139[1];
      v11 = pthread_self();
      v12 = pthread_mach_thread_np(v11);
      v13 = 0;
      v14 = 0;
      v15 = 47;
      do
      {
        v16 = &aLibraryCachesC_10[v13];
        if (v15 == 47)
          v14 = &aLibraryCachesC_10[v13];
        v15 = v16[1];
        if (!v16[1])
          break;
        v75 = v13++ >= 0xFFF;
      }
      while (!v75);
      v17 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
      *(_DWORD *)(v17 + 16) = 0;
      if (v14)
        v18 = v14 + 1;
      else
        v18 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/DSP/Factories/DSP_HAL_MockFeature_Processors.mm";
      *(_BYTE *)(v17 + 20) = 2;
      *(_DWORD *)(v17 + 24) = v12;
      *(_QWORD *)(v17 + 32) = v18;
      *(_DWORD *)(v17 + 40) = 55;
      *(_QWORD *)v17 = &off_1E696E180;
      *(_QWORD *)(v17 + 8) = 0;
      a1 = (AMCP::Log::Scope_Registry *)caulk::concurrent::messenger::enqueue(v10, (caulk::concurrent::message *)v17);
      v19 = (std::__shared_weak_count *)v140;
      if ((_QWORD)v140)
      {
        v20 = (unint64_t *)(v140 + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
  }
  if (v126)
  {
    v22 = v125;
    if (v125)
    {
      if (v128)
      {
        v23 = v127;
        if (v127)
        {
          if ((*((_DWORD *)v7 + 124) & 0xFFFFFFFE) != 4)
          {
            v24 = *((_DWORD *)v7 + 88);
            if ((~v24 & 0x21) == 0)
            {
              if ((v24 & 0x2000) != 0)
              {
                if (v125 <= 1)
                {
                  AMCP::Log::Scope_Registry::get(a1);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v139, "com.apple.coreaudio", "AMCP");
                  v25 = (caulk::concurrent::messenger *)v139[1];
                  v26 = pthread_self();
                  v27 = pthread_mach_thread_np(v26);
                  v28 = 0;
                  v29 = 0;
                  v30 = 47;
                  do
                  {
                    v31 = &aLibraryCachesC_10[v28];
                    if (v30 == 47)
                      v29 = &aLibraryCachesC_10[v28];
                    v30 = v31[1];
                    if (!v31[1])
                      break;
                    v75 = v28++ >= 0xFFF;
                  }
                  while (!v75);
                  v32 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
                  *(_DWORD *)(v32 + 16) = 0;
                  if (v29)
                    v33 = v29 + 1;
                  else
                    v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/DSP/Factories/DSP_HAL_MockFeature_Processors.mm";
                  *(_BYTE *)(v32 + 20) = 2;
                  *(_DWORD *)(v32 + 24) = v27;
                  *(_QWORD *)(v32 + 32) = v33;
                  *(_DWORD *)(v32 + 40) = 93;
                  *(_DWORD *)(v32 + 44) = v22;
                  *(_QWORD *)v32 = &off_1E696E2D8;
                  *(_QWORD *)(v32 + 8) = 0;
                  a1 = (AMCP::Log::Scope_Registry *)caulk::concurrent::messenger::enqueue(v25, (caulk::concurrent::message *)v32);
                  v34 = (std::__shared_weak_count *)v140;
                  if ((_QWORD)v140)
                  {
                    v35 = (unint64_t *)(v140 + 8);
                    do
                      v36 = __ldaxr(v35);
                    while (__stlxr(v36 - 1, v35));
                    if (!v36)
                    {
                      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                      std::__shared_weak_count::__release_weak(v34);
                    }
                  }
                  v23 = v127;
                }
                if (v23 == 1)
                {
                  v37 = 1;
                }
                else
                {
                  AMCP::Log::Scope_Registry::get(a1);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v139, "com.apple.coreaudio", "AMCP");
                  v63 = (caulk::concurrent::messenger *)v139[1];
                  v64 = pthread_self();
                  v65 = pthread_mach_thread_np(v64);
                  v66 = 0;
                  v67 = 0;
                  v68 = 47;
                  do
                  {
                    v69 = &aLibraryCachesC_10[v66];
                    if (v68 == 47)
                      v67 = &aLibraryCachesC_10[v66];
                    v68 = v69[1];
                    if (!v69[1])
                      break;
                    v75 = v66++ >= 0xFFF;
                  }
                  while (!v75);
                  v70 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
                  *(_DWORD *)(v70 + 16) = 0;
                  if (v67)
                    v71 = v67 + 1;
                  else
                    v71 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/DSP/Factories/DSP_HAL_MockFeature_Processors.mm";
                  *(_BYTE *)(v70 + 20) = 2;
                  *(_DWORD *)(v70 + 24) = v65;
                  *(_QWORD *)(v70 + 32) = v71;
                  *(_DWORD *)(v70 + 40) = 97;
                  *(_DWORD *)(v70 + 44) = v23;
                  *(_QWORD *)v70 = &off_1E696E330;
                  *(_QWORD *)(v70 + 8) = 0;
                  a1 = (AMCP::Log::Scope_Registry *)caulk::concurrent::messenger::enqueue(v63, (caulk::concurrent::message *)v70);
                  v72 = (std::__shared_weak_count *)v140;
                  if ((_QWORD)v140)
                  {
                    v73 = (unint64_t *)(v140 + 8);
                    do
                      v74 = __ldaxr(v73);
                    while (__stlxr(v74 - 1, v73));
                    if (!v74)
                    {
                      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                      std::__shared_weak_count::__release_weak(v72);
                    }
                  }
                  v37 = v127;
                }
                v22 = v125;
                v75 = v37 == 1 && v125 >= 2;
                if (v75)
                {
                  v76 = (int *)(v126 + 144);
                  v77 = 1;
                  v78 = 1;
                  do
                  {
                    v79 = *v76;
                    v76 += 20;
                    v78 &= *(_DWORD *)(v126 + 64) == v79;
                    ++v77;
                  }
                  while (v125 != v77);
                  if ((v78 & 1) == 0)
                  {
                    AMCP::Log::Scope_Registry::get(a1);
                    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v139, "com.apple.coreaudio", "AMCP");
                    v80 = (caulk::concurrent::messenger *)v139[1];
                    v81 = pthread_self();
                    v82 = pthread_mach_thread_np(v81);
                    v83 = 0;
                    v84 = 0;
                    v85 = 47;
                    do
                    {
                      v86 = &aLibraryCachesC_10[v83];
                      if (v85 == 47)
                        v84 = &aLibraryCachesC_10[v83];
                      v85 = v86[1];
                      if (!v86[1])
                        break;
                      v75 = v83++ >= 0xFFF;
                    }
                    while (!v75);
                    v87 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
                    *(_DWORD *)(v87 + 16) = 0;
                    if (v84)
                      v88 = v84 + 1;
                    else
                      v88 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/DSP/Factories/DSP_HAL_MockFeature_Processors.mm";
                    *(_BYTE *)(v87 + 20) = 2;
                    *(_DWORD *)(v87 + 24) = v82;
                    *(_QWORD *)(v87 + 32) = v88;
                    *(_DWORD *)(v87 + 40) = 114;
                    *(_QWORD *)v87 = &off_1E696E388;
                    *(_QWORD *)(v87 + 8) = 0;
                    caulk::concurrent::messenger::enqueue(v80, (caulk::concurrent::message *)v87);
                    v89 = (std::__shared_weak_count *)v140;
                    if ((_QWORD)v140)
                    {
                      v90 = (unint64_t *)(v140 + 8);
                      do
                        v91 = __ldaxr(v90);
                      while (__stlxr(v91 - 1, v90));
                      if (!v91)
                      {
                        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                        std::__shared_weak_count::__release_weak(v89);
                      }
                    }
                    v22 = v125;
                  }
                }
              }
              if (v22 >= 2)
              {
                v92 = *(_DWORD *)(v126 + 64);
                if (v92 == *(_DWORD *)(v126 + 144))
                {
                  v93 = *(_DWORD **)(v126 + 72);
                  v140 = 0u;
                  v141 = 0u;
                  v142 = 0u;
                  v139 = &off_1E696E3E0;
                  v143 = v93;
                  v94 = *(_DWORD **)(v126 + 152);
                  v135 = 0u;
                  v136 = 0u;
                  v137 = 0u;
                  __ns.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)&off_1E696E3E0;
                  v138 = v94;
                  if ((*((_BYTE *)v7 + 353) & 0x20) != 0)
                  {
                    is_every_sample = DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample((uint64_t)&__ns, 0.0);
                    if (is_every_sample)
                    {
                      ++DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::referenceSilent;
                      HIDWORD(v96) = -1030792151
                                   * DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::referenceSilent
                                   + 85899344;
                      LODWORD(v96) = HIDWORD(v96);
                      if ((v96 >> 3) <= 0x147AE14)
                      {
                        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_every_sample);
                        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v133, "com.apple.coreaudio", "AMCP");
                        v97 = *(caulk::concurrent::messenger **)(v133[0] + 8);
                        v132 = 2;
                        v98 = pthread_self();
                        v99 = pthread_mach_thread_np(v98);
                        v100 = 0;
                        v101 = 0;
                        v102 = 47;
                        do
                        {
                          v103 = &aLibraryCachesC_10[v100];
                          if (v102 == 47)
                            v101 = &aLibraryCachesC_10[v100];
                          v102 = v103[1];
                          if (!v103[1])
                            break;
                          v75 = v100++ >= 0xFFF;
                        }
                        while (!v75);
                        if (v101)
                          v104 = v101 + 1;
                        else
                          v104 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/DSP/Factories/DSP_HAL_MockFe"
                                 "ature_Processors.mm";
                        LODWORD(v129) = v99;
                        *((_QWORD *)&v129 + 1) = v104;
                        v130 = 154;
                        v131 = DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::referenceSilent;
                        caulk::concurrent::messenger::enqueue_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_4,std::tuple<unsigned int,char const*,int,int>>(v97, &v132, &v129);
                        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v133);
                      }
                    }
                    else
                    {
                      DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::referenceSilent = 0;
                    }
                  }
                  v105 = v138;
                  v106 = v143;
                  LODWORD(v107) = *v143;
                  if (*v143 >= *v138)
                    v107 = *v138;
                  else
                    v107 = v107;
                  if ((_DWORD)v107)
                  {
                    for (i = 0; i != v107; ++i)
                    {
                      if (v92)
                      {
                        v109 = 0;
                        v110 = &v106[4 * i];
                        v111 = &v105[4 * i];
                        v112 = v110[2];
                        v113 = v111[2];
                        if (v112 >= v113)
                          v114 = v111[2];
                        else
                          v114 = v110[2];
                        v115 = *((_QWORD *)v110 + 2);
                        v116 = *((_QWORD *)v111 + 2);
                        v117 = 4 * v112;
                        v118 = 4 * v113;
                        do
                        {
                          if (v114)
                          {
                            v119 = 0;
                            do
                            {
                              *(float *)(v115 + v119) = *(float *)(v116 + v119) + *(float *)(v115 + v119);
                              v119 += 4;
                            }
                            while (4 * v114 != v119);
                          }
                          ++v109;
                          v115 += v117;
                          v116 += v118;
                        }
                        while (v109 != v92);
                      }
                    }
                  }
                  DSP_HAL_Bypass_Utils::ABL_Allocation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::~ABL_Allocation(&__ns);
                  DSP_HAL_Bypass_Utils::ABL_Allocation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::~ABL_Allocation(&v139);
                }
              }
            }
          }
          DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(&v124);
          if (!*((_QWORD *)v7 + 48))
            goto LABEL_157;
          __ns.__rep_ = 0;
          v139 = &off_1E696E1D8;
          *(_QWORD *)&v140 = &__ns;
          *((_QWORD *)&v140 + 1) = (char *)v7 + 360;
          *(_QWORD *)&v141 = &v139;
          DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer((uint64_t)&v124, (uint64_t)&v139);
          v120 = (uint64_t (***)())v141;
          if ((uint64_t (***)())v141 == &v139)
          {
            v121 = 4;
            v120 = &v139;
          }
          else
          {
            if (!(_QWORD)v141)
            {
LABEL_157:
              if ((~*((_DWORD *)v7 + 88) & 0x801) == 0)
              {
                __ns.__rep_ = 100000000;
                std::this_thread::sleep_for (&__ns);
              }
              v122 = *((_QWORD *)v7 + 56);
              if (v122)
                (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v122 + 48))(v122, &v124, (uint64_t)v7 + 488);
              v123 = *((_QWORD *)v7 + 43);
              if (v123)
                (*(void (**)(uint64_t))(*(_QWORD *)v123 + 48))(v123);
              return;
            }
            v121 = 5;
          }
          ((void (*)(uint64_t (***)()))(*v120)[v121])(v120);
          goto LABEL_157;
        }
      }
    }
  }
}

void sub_1B5855994(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, __int128 a20,int a21,uint64_t a22)
{
  uint64_t v22;
  AMCP::Log::Scope_Registry *v25;
  caulk::concurrent::messenger *v26;
  _opaque_pthread_t *v27;
  mach_port_t v28;
  unint64_t v29;
  char *v30;
  int v31;
  char *v32;
  const char *v34;
  uint64_t v35;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  DSP_HAL_Bypass_Utils::ABL_Allocation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::~ABL_Allocation(&a20);
  DSP_HAL_Bypass_Utils::ABL_Allocation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::~ABL_Allocation((_QWORD *)(v22 - 136));
  if (a2 == 1)
  {
    v25 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(a1);
    AMCP::Log::Scope_Registry::get(v25);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a14, "com.apple.coreaudio", "AMCP");
    v26 = *(caulk::concurrent::messenger **)(a14 + 8);
    a18 = 2;
    v27 = pthread_self();
    v28 = pthread_mach_thread_np(v27);
    v29 = 0;
    v30 = 0;
    v31 = 47;
    while (1)
    {
      v32 = &aLibraryCachesC_10[v29];
      if (v31 == 47)
        v30 = &aLibraryCachesC_10[v29];
      v31 = v32[1];
      if (v32[1])
      {
        if (v29++ < 0xFFF)
          continue;
      }
      if (v30)
        v34 = v30 + 1;
      else
        v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/DSP/Factories/DSP_HAL_MockFeature_Processors.mm";
      v35 = (*(uint64_t (**)(AMCP::Log::Scope_Registry *))(*(_QWORD *)v25 + 16))(v25);
      LODWORD(a20) = v28;
      *((_QWORD *)&a20 + 1) = v34;
      a21 = 68;
      a22 = v35;
      caulk::concurrent::messenger::enqueue_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_3,std::tuple<unsigned int,char const*,int,char const*>>(v26, &a18, &a20);
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
      __cxa_end_catch();
      JUMPOUT(0x1B5855908);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t DSP_HAL_Mock_Callbacks::onEndProcessing(DSP_HAL_Mock_Callbacks *this)
{
  uint64_t result;
  char v2;

  result = *((_QWORD *)this + 60);
  if (result)
  {
    v2 = 0;
    return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)result + 48))(result, &v2);
  }
  return result;
}

uint64_t (***DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>(uint64_t a1))()
{
  uint64_t (***result)();
  uint64_t v2;
  uint64_t (**v3)();
  char v4;
  uint64_t (***v5)();
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = &off_1E699A628;
  v4 = 0;
  v5 = &v3;
  DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(a1, (uint64_t)&v3);
  result = v5;
  if (v5 == &v3)
  {
    v2 = 4;
    result = &v3;
  }
  else
  {
    if (!v5)
      return result;
    v2 = 5;
  }
  return (uint64_t (***)())(*result)[v2]();
}

void sub_1B5855C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t caulk::concurrent::messenger::enqueue_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_3,std::tuple<unsigned int,char const*,int,char const*>>(caulk::concurrent::messenger *a1, _BYTE *a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;

  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = &off_1E696E2B0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 20) = *a2;
  v7 = *a3;
  *(_OWORD *)(v6 + 40) = a3[1];
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)v6 = &off_1E696E258;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

void caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_3,std::tuple<unsigned int,char const*,int,char const*>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_3,std::tuple<unsigned int,char const*,int,char const*>>::perform(caulk::concurrent::message *a1)
{
  caulk::concurrent::message *v2;

  v2 = a1;
  caulk::concurrent::details::message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_3,std::tuple<unsigned int,char const*,int,char const*>>::perform((uint64_t)a1);
  return caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_3,std::tuple<unsigned int,char const*,int,char const*>>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_1B5855D3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_3,std::tuple<unsigned int,char const*,int,char const*>>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_3,std::tuple<unsigned int,char const*,int,char const*>>::perform(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  id *v11;
  _BYTE v12[10];
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v11, "com.apple.coreaudio", "AMCP");
  v2 = *v11;
  AMCP::Log::Scope::get_os_log_t(*v11);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v12;
  if (*(_QWORD *)v12)
  {
    v4 = (unint64_t *)(*(_QWORD *)v12 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    LODWORD(v11) = 67109890;
    HIDWORD(v11) = v7;
    *(_WORD *)v12 = 2080;
    *(_QWORD *)&v12[2] = v8;
    v13 = 1024;
    v14 = v9;
    v15 = 2080;
    v16 = v10;
    _os_log_impl(&dword_1B57BA000, v2, v6, "%6u %32s:%-5d DSP_HAL_MockCallbacks::onClientIO - something went terribly wrong while mocking processing: %s", (uint8_t *)&v11, 0x22u);
  }

}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_3,std::tuple<unsigned int,char const*,int,char const*>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_3,std::tuple<unsigned int,char const*,int,char const*>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t (***DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(_QWORD *a1))()
{
  uint64_t (***result)();
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t (***v16)();
  uint64_t (**v17)();
  int v18;
  uint64_t (***v19)();
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v17 = &off_1E699A6B8;
  v18 = 0;
  v19 = &v17;
  DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer((uint64_t)a1, (uint64_t)&v17);
  result = v19;
  if (v19 == &v17)
  {
    v3 = 4;
    result = &v17;
    goto LABEL_5;
  }
  if (v19)
  {
    v3 = 5;
LABEL_5:
    result = (uint64_t (***)())(*result)[v3]();
  }
  v13 = 1;
  if (a1[2] == a1[4])
    return result;
  v15[0] = &off_1E699A738;
  result = (uint64_t (***)())v15;
  v15[2] = &v13;
  v16 = (uint64_t (***)())v15;
  v4 = a1[1];
  v5 = a1[3];
  if (v4 <= v5)
    v6 = a1[3];
  else
    v6 = a1[1];
  if (v5 >= v4)
    v7 = a1[1];
  else
    v7 = a1[3];
  if (!v6)
  {
    v12 = 4;
    return (uint64_t (***)())(*result)[v12]();
  }
  v8 = 0;
  for (i = 0; i != v6; ++i)
  {
    if (i >= v7)
    {
      if (i >= a1[1])
      {
        if (i >= a1[3])
          goto LABEL_23;
        v10 = 0;
        v11 = a1[4] + 80 * i;
      }
      else
      {
        v11 = 0;
        v10 = a1[2] + 80 * i;
      }
    }
    else
    {
      v10 = a1[2] + v8;
      v11 = a1[4] + v8;
    }
    v17 = (uint64_t (**)())v10;
    v14 = v11;
    if (!v16)
      std::__throw_bad_function_call[abi:ne180100]();
    ((void (*)(uint64_t (***)(), uint64_t (***)(), uint64_t *))(*v16)[6])(v16, &v17, &v14);
LABEL_23:
    v8 += 80;
  }
  result = v16;
  if (v16 == v15)
  {
    v12 = 4;
    result = (uint64_t (***)())v15;
    return (uint64_t (***)())(*result)[v12]();
  }
  if (v16)
  {
    v12 = 5;
    return (uint64_t (***)())(*result)[v12]();
  }
  return result;
}

void sub_1B58560D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE *v19;
  _BYTE v20[24];
  _BYTE *v21;
  _QWORD v22[3];
  _QWORD *v23;
  _BYTE v24[24];
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v18, a2);
  v21 = 0;
  v3 = operator new(0x28uLL);
  *(_QWORD *)v3 = &off_1E699A598;
  std::__function::__value_func<void ()(AMCP::Proc_Stream &,AudioBuffer &)>::__value_func[abi:ne180100]((uint64_t)(v3 + 8), (uint64_t)v18);
  v21 = v3;
  v6 = a1 + 24;
  v5 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(v6 + 8);
  v7 = (_QWORD *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 16))(v3);
  v23 = v7;
  if (v5)
  {
    v8 = 80 * v5;
    do
    {
      if (!v7)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_QWORD *, uint64_t))(*v7 + 48))(v7, v4);
      v4 += 80;
      v7 = v23;
      v8 -= 80;
    }
    while (v8);
  }
  if (!v7)
  {
    v9 = v25;
    goto LABEL_9;
  }
  if (v7 != v22)
  {
    v9 = &v23;
    v25[0] = v7;
LABEL_9:
    *v9 = 0;
    goto LABEL_11;
  }
  v25[0] = v24;
  (*(void (**)(_QWORD *, _BYTE *))(v22[0] + 24))(v22, v24);
LABEL_11:
  v10 = (_QWORD *)v25[0];
  if ((_BYTE *)v25[0] == v24)
  {
    v11 = 4;
    v10 = v24;
  }
  else
  {
    if (!v25[0])
      goto LABEL_16;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_16:
  v12 = v23;
  if (v23 == v22)
  {
    v13 = 4;
    v12 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_21;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_21:
  v14 = v21;
  if (v21 == v20)
  {
    v15 = 4;
    v14 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_26;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_26:
  result = v19;
  if (v19 == v18)
  {
    v17 = 4;
    result = v18;
  }
  else
  {
    if (!v19)
      return result;
    v17 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v17))();
}

void sub_1B5856310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(AMCP::Proc_Stream &,AudioBuffer &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *std::__function::__func<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1},std::allocator<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1}>,void ()(AMCP::Proc_Stream &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E699A598;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1},std::allocator<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1}>,void ()(AMCP::Proc_Stream &)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E699A598;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1},std::allocator<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1}>,void ()(AMCP::Proc_Stream &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E699A598;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B5856544(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1},std::allocator<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1}>,void ()(AMCP::Proc_Stream &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E699A598;
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1},std::allocator<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1}>,void ()(AMCP::Proc_Stream &)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1},std::allocator<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1}>,void ()(AMCP::Proc_Stream &)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1},std::allocator<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1}>,void ()(AMCP::Proc_Stream &)>::operator()(_QWORD *result, uint64_t a2)
{
  unsigned int *v2;
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned int **)(a2 + 72);
  if (!v2)
    return result;
  v5 = *v2;
  v3 = v2 + 2;
  v4 = v5;
  v6 = v11;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v11, (uint64_t)(result + 1));
  if (v5)
  {
    v7 = 16 * v4;
    do
    {
      if (!v12)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_BYTE *, uint64_t, _DWORD *))(*(_QWORD *)v12 + 48))(v12, a2, v3);
      v3 += 4;
      v7 -= 16;
    }
    while (v7);
  }
  v13 = a2;
  std::__function::__value_func<void ()(AMCP::Proc_Stream &,AudioBuffer &)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)v11);
  result = v15;
  if (v15 == v14)
  {
    v8 = 4;
    result = v14;
    goto LABEL_10;
  }
  if (v15)
  {
    v8 = 5;
LABEL_10:
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
  if (v12 == v11)
  {
    v9 = 4;
  }
  else
  {
    if (!v12)
      return result;
    v9 = 5;
    v6 = v12;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 8 * v9))(v6);
}

void sub_1B5856724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1},std::allocator<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1}>,void ()(AMCP::Proc_Stream &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN20DSP_HAL_Bypass_Utils18AMCP_IOData_HelperILNS_16InterleavePolicyE0EE15for_each_bufferENS2_10StreamSideENSt3__18functionIFvRN4AMCP11Proc_StreamER11AudioBufferEEEEUlS8_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1},std::allocator<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1}>,void ()(AMCP::Proc_Stream &)>::target_type()
{
}

void std::__function::__func<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_with_delay(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_with_delay(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_with_delay(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_with_delay(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E696E1D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_with_delay(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_with_delay(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E696E1D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_with_delay(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_with_delay(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::operator()(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  int64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  int64_t v27;
  const void *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  BOOL v33;
  const void *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  AMCP::Log::Scope_Registry *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _opaque_pthread_t *v46;
  mach_port_t v47;
  uint8_t buf[8];
  __int128 v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(a1 + 16);
  v5 = **(_QWORD **)(a1 + 8);
  v6 = *v4;
  if (v5 <= (v4[1] - *v4) >> 3)
  {
    v7 = (_QWORD *)operator new();
    v8 = v7;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    v7[3] = v7;
    v7[4] = 0;
    v7[5] = 0;
    v7[6] = v7;
    v7[7] = 0;
    v7[8] = 0;
    v7[9] = 1;
    v9 = v4[2];
    v10 = (_QWORD *)v4[1];
    if ((unint64_t)v10 >= v9)
    {
      v12 = ((uint64_t)v10 - *v4) >> 3;
      if ((unint64_t)(v12 + 1) >> 61)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v13 = v9 - *v4;
      v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1))
        v14 = v12 + 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      v52 = v4 + 2;
      if (v15)
      {
        if (v15 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v16 = (char *)operator new(8 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = &v16[8 * v12];
      *(_QWORD *)buf = v16;
      *(_QWORD *)&v50 = v17;
      *(_QWORD *)v17 = v8;
      *((_QWORD *)&v50 + 1) = v17 + 8;
      v51 = &v16[8 * v15];
      std::vector<std::unique_ptr<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine,std::default_delete<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine>>>::__swap_out_circular_buffer(v4, buf);
      v11 = (_QWORD *)v4[1];
      std::__split_buffer<std::unique_ptr<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine,std::default_delete<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine>>>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      *v10 = v7;
      v11 = v10 + 1;
    }
    v4[1] = (uint64_t)v11;
    DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine::init(*(v11 - 1), v4[3], *a3);
    v5 = **(_QWORD **)(a1 + 8);
    v6 = *v4;
  }
  v18 = *(_QWORD *)(v6 + 8 * v5);
  v19 = *a3;
  v20 = *(_QWORD *)(v18 + 72);
  if (v20 != v19)
  {
    DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine::init(v18, ((uint64_t)(*(_QWORD *)(v18 + 8) - *(_QWORD *)v18) >> 2) / v20, v19);
    v18 = *(_QWORD *)(*v4 + 8 * **(_QWORD **)(a1 + 8));
  }
  v21 = (char *)*((_QWORD *)a3 + 1);
  v22 = (unint64_t)a3[1] >> 2;
  v23 = v22;
  v24 = v21;
  do
  {
    if (!(v23 | v22))
      break;
    v25 = DSP_HAL_Bypass_Utils::SimpleRing<float>::write_advance((_QWORD *)v18, v21, v23);
    v21 += 4 * v25;
    v26 = v22 >= (v21 - v24) >> 2 ? (v21 - v24) >> 2 : v22;
    v27 = *(_QWORD *)(v18 + 64);
    if (v27)
    {
      v29 = *(uint64_t **)(v18 + 48);
      v28 = *(const void **)(v18 + 56);
      v30 = *v29;
      v31 = v29[1] - (_QWORD)v28;
      v32 = v27 - (v31 >> 2);
      if (v27 < v32)
        v32 = *(_QWORD *)(v18 + 64);
      v33 = v27 <= v31 >> 2;
      if (v27 >= v31 >> 2)
        v27 = v31 >> 2;
      v34 = v33 ? 0 : (const void *)v30;
      v35 = v33 ? 0 : v32;
    }
    else
    {
      v34 = 0;
      v35 = 0;
      v28 = 0;
    }
    v36 = v26 & ~(v26 >> 63);
    if (v27 >= v36)
      v37 = v26 & ~(v26 >> 63);
    else
      v37 = v27;
    memcpy(v24, v28, 4 * v37);
    if (v35 >= v36 - v37)
      v35 = v36 - v37;
    v38 = (AMCP::Log::Scope_Registry *)memcpy(&v24[4 * v37], v34, 4 * v35);
    v39 = v35 + v37;
    v40 = *(_QWORD *)(v18 + 56);
    *(_QWORD *)(v18 + 64) -= v39;
    v41 = *(_QWORD *)(v18 + 40);
    *(_QWORD *)(v18 + 56) = **(_QWORD **)(v18 + 48)
                          + 4
                          * ((uint64_t)(v39 + ((v40 - **(_QWORD **)(v18 + 48)) >> 2))
                           % ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v18 + 48) + 8) - **(_QWORD **)(v18 + 48)) >> 2));
    *(_QWORD *)(v18 + 40) = v41 + v39;
    *(_QWORD *)(v18 + 32) = **(_QWORD **)(v18 + 24)
                          + 4
                          * (((uint64_t)(*(_QWORD *)(v18 + 32) - **(_QWORD **)(v18 + 24)) >> 2)
                           % ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v18 + 24) + 8) - **(_QWORD **)(v18 + 24)) >> 2));
    v24 += 4 * v39;
    if (v21 < v24)
    {
      AMCP::Log::Scope_Registry::get(v38);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v42 = **(NSObject ***)buf;
      AMCP::Log::Scope::get_os_log_t(**(id **)buf);
      objc_claimAutoreleasedReturnValue();
      v43 = (std::__shared_weak_count *)v50;
      if ((_QWORD)v50)
      {
        v44 = (unint64_t *)(v50 + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
      {
        v46 = pthread_self();
        v47 = pthread_mach_thread_np(v46);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v47;
        LOWORD(v50) = 2080;
        *(_QWORD *)((char *)&v50 + 2) = "DSP_HAL_Bypass_Utilities.h";
        WORD5(v50) = 1024;
        HIDWORD(v50) = 695;
        _os_log_debug_impl(&dword_1B57BA000, v42, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d SimulatedLatency::delay_samples - delay line corruption, read overwriting unwritten write data\n", buf, 0x18u);
      }

    }
    v23 -= v25;
    v22 -= v39;
  }
  while (v39 + v25);
  ++**(_QWORD **)(a1 + 8);
}

void sub_1B5856C34()
{
  uint64_t v0;

  std::default_delete<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine>::operator()[abi:ne180100](v0);
}

void sub_1B5856C40()
{
  _Unwind_Exception *v0;

  _Unwind_Resume(v0);
}

uint64_t std::__function::__func<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_with_delay(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_with_delay(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN20DSP_HAL_Bypass_Utils16SimulatedLatencyIfLNS_16InterleavePolicyE0EE15copy_with_delayERNS_18AMCP_IOData_HelperILS1_0EEEEUlRN4AMCP11Proc_StreamER11AudioBufferE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_with_delay(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_with_delay(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::target_type()
{
}

void DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  void *__p;
  _BYTE *v8;

  *(_QWORD *)(a1 + 72) = a3;
  v4 = a3 * a2;
  v5 = 2 * a3 * a2;
  LODWORD(__p) = 0;
  std::vector<float>::resize((char **)a1, v5, &__p);
  *(_QWORD *)(a1 + 32) = **(_QWORD **)(a1 + 24);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 56) = **(_QWORD **)(a1 + 48);
  *(_QWORD *)(a1 + 64) = 0;
  v6 = 0;
  std::vector<float>::vector(&__p, v4, &v6);
  DSP_HAL_Bypass_Utils::SimpleRing<float>::write_advance((_QWORD *)a1, (char *)__p, (v8 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
}

unint64_t DSP_HAL_Bypass_Utils::SimpleRing<float>::write_advance(_QWORD *a1, char *__src, unint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t result;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v6 = a1[5];
  if (v6)
  {
    v8 = a1[3];
    v7 = (void *)a1[4];
    v9 = *(_QWORD *)(v8 + 8) - (_QWORD)v7;
    v10 = v9 >> 2;
    v11 = v6 <= v9 >> 2;
    if (v6 >= v9 >> 2)
      v12 = v9 >> 2;
    else
      v12 = v6;
    if (v11)
    {
      v13 = 0;
      v14 = 0;
    }
    else
    {
      v13 = *(void **)v8;
      if (v6 >= v6 - v10)
        v14 = v6 - v10;
      else
        v14 = v6;
    }
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v7 = 0;
  }
  if (v12 >= a3)
    v15 = a3;
  else
    v15 = v12;
  memcpy(v7, __src, 4 * v15);
  if (v14 >= a3 - v15)
    v16 = a3 - v15;
  else
    v16 = v14;
  memcpy(v13, &__src[4 * v15], 4 * v16);
  result = v16 + v15;
  v18 = (uint64_t *)a1[6];
  v19 = a1[8];
  v20 = *v18;
  v21 = (a1[7] - *v18) >> 2;
  v22 = (v18[1] - *v18) >> 2;
  v23 = a1[5] - (v16 + v15);
  a1[4] = *(_QWORD *)a1[3]
        + 4
        * ((uint64_t)(v16 + v15 + ((uint64_t)(a1[4] - *(_QWORD *)a1[3]) >> 2))
         % ((uint64_t)(*(_QWORD *)(a1[3] + 8) - *(_QWORD *)a1[3]) >> 2));
  a1[5] = v23;
  a1[7] = v20 + 4 * (v21 % v22);
  a1[8] = v19 + v16 + v15;
  return result;
}

void std::vector<float>::resize(char **a1, unint64_t a2, _DWORD *a3)
{
  char *v5;
  char *v6;
  unint64_t v7;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *i;
  int v22;
  char *v23;
  uint64_t v24;

  v6 = *a1;
  v5 = a1[1];
  v7 = (v5 - *a1) >> 2;
  if (a2 <= v7)
  {
    if (a2 < v7)
      a1[1] = &v6[4 * a2];
  }
  else
  {
    v9 = a1[2];
    if (a2 - v7 <= (v9 - v5) >> 2)
    {
      v23 = &v5[4 * (a2 - v7)];
      v24 = 4 * a2 - 4 * v7;
      do
      {
        *(_DWORD *)v5 = *a3;
        v5 += 4;
        v24 -= 4;
      }
      while (v24);
      a1[1] = v23;
    }
    else
    {
      if (a2 >> 62)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v10 = v9 - v6;
      v11 = (v9 - v6) >> 1;
      if (v11 <= a2)
        v11 = a2;
      if (v10 >= 0x7FFFFFFFFFFFFFFCLL)
        v12 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v12);
      v15 = &v13[4 * v7];
      v16 = &v13[4 * a2];
      v17 = 4 * a2 - 4 * v7;
      v18 = v15;
      do
      {
        *(_DWORD *)v18 = *a3;
        v18 += 4;
        v17 -= 4;
      }
      while (v17);
      v19 = &v13[4 * v14];
      v20 = *a1;
      for (i = a1[1]; i != v20; i -= 4)
      {
        v22 = *((_DWORD *)i - 1);
        *((_DWORD *)v15 - 1) = v22;
        v15 -= 4;
      }
      *a1 = v15;
      a1[1] = v16;
      a1[2] = v19;
      if (v20)
        operator delete(v20);
    }
  }
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B5856FCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<BOOL DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(BOOL)::{lambda(AMCP::Proc_Stream *,AMCP::Proc_Stream *)#1},std::allocator<BOOL DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(BOOL)::{lambda(AMCP::Proc_Stream *,AMCP::Proc_Stream *)#1}>,void ()(AMCP::Proc_Stream *,AMCP::Proc_Stream *)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<BOOL DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(BOOL)::{lambda(AMCP::Proc_Stream *,AMCP::Proc_Stream *)#1},std::allocator<BOOL DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(BOOL)::{lambda(AMCP::Proc_Stream *,AMCP::Proc_Stream *)#1}>,void ()(AMCP::Proc_Stream *,AMCP::Proc_Stream *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E699A738;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(BOOL)::{lambda(AMCP::Proc_Stream *,AMCP::Proc_Stream *)#1},std::allocator<BOOL DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(BOOL)::{lambda(AMCP::Proc_Stream *,AMCP::Proc_Stream *)#1}>,void ()(AMCP::Proc_Stream *,AMCP::Proc_Stream *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E699A738;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<BOOL DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(BOOL)::{lambda(AMCP::Proc_Stream *,AMCP::Proc_Stream *)#1},std::allocator<BOOL DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(BOOL)::{lambda(AMCP::Proc_Stream *,AMCP::Proc_Stream *)#1}>,void ()(AMCP::Proc_Stream *,AMCP::Proc_Stream *)>::operator()(_QWORD *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  BOOL v4;
  unsigned int *v5;
  unsigned int *v6;
  BOOL v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _DWORD *v13;
  _DWORD *v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  size_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  BOOL v28;
  size_t v30;
  _BYTE *v31;
  char v32;
  uint64_t v33;
  _QWORD *v34;

  v3 = *a3;
  if (*(_QWORD *)a2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = *(unsigned int **)(*(_QWORD *)a2 + 72);
    v6 = *(unsigned int **)(v3 + 72);
    if (v5)
      v7 = v6 == 0;
    else
      v7 = 1;
    v34 = result;
    if (!v7)
    {
      v8 = *v5;
      if (*v5)
      {
        v9 = *v6;
        if (*v6)
        {
          v10 = 0;
          if (v9 >= v8)
            v11 = v8;
          else
            v11 = v9;
          v12 = v8 == v9;
          v13 = v5 + 2;
          v14 = v6 + 2;
          v33 = v11;
          while (1)
          {
            v15 = &v13[4 * v10];
            v16 = &v14[4 * v10];
            v17 = *v15;
            v18 = *v16;
            if ((_DWORD)v17 != (_DWORD)v18)
              break;
            v19 = v16[1];
            v20 = v15[1];
            if (v19 >= v20)
              v21 = v20;
            else
              v21 = v19;
            result = memcpy(*((void **)v16 + 1), *((const void **)v15 + 1), v21);
            v22 = v15[1] == v16[1];
LABEL_42:
            v12 &= v22;
            if (++v10 == v11)
              goto LABEL_45;
          }
          if ((_DWORD)v17)
          {
            v23 = v13[4 * v10 + 1] / (unint64_t)(4 * v17);
            if ((_DWORD)v18)
            {
LABEL_22:
              v24 = v14[4 * v10 + 1] / (unint64_t)(4 * v18);
              goto LABEL_25;
            }
          }
          else
          {
            v23 = 0;
            if ((_DWORD)v18)
              goto LABEL_22;
          }
          v24 = 0;
LABEL_25:
          if (v24 >= v23)
            v25 = v23;
          else
            v25 = v24;
          v26 = *(char **)&v13[4 * v10 + 2];
          v27 = *(char **)&v14[4 * v10 + 2];
          if (v26)
            v28 = v27 == 0;
          else
            v28 = 1;
          if (v28 || v25 == 0)
          {
            v22 = 0;
          }
          else
          {
            if (v18 < v17)
              LODWORD(v17) = *v16;
            v30 = 4 * v17;
            do
            {
              result = memcpy(v27, v26, v30);
              v26 += 4 * *v15;
              v27 += 4 * *v16;
              --v25;
            }
            while (v25);
            v22 = 0;
            v11 = v33;
          }
          goto LABEL_42;
        }
      }
    }
    v12 = 0;
LABEL_45:
    v31 = (_BYTE *)v34[2];
    if (*v31)
      v32 = v12;
    else
      v32 = 0;
    *v31 = v32;
  }
  return result;
}

uint64_t std::__function::__func<BOOL DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(BOOL)::{lambda(AMCP::Proc_Stream *,AMCP::Proc_Stream *)#1},std::allocator<BOOL DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(BOOL)::{lambda(AMCP::Proc_Stream *,AMCP::Proc_Stream *)#1}>,void ()(AMCP::Proc_Stream *,AMCP::Proc_Stream *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN20DSP_HAL_Bypass_Utils18AMCP_IOData_HelperILNS_16InterleavePolicyE0EE20copy_input_to_outputIfLNS2_12CopyStrategyE0EEEbbEUlPN4AMCP11Proc_StreamES7_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(BOOL)::{lambda(AMCP::Proc_Stream *,AMCP::Proc_Stream *)#1},std::allocator<BOOL DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(BOOL)::{lambda(AMCP::Proc_Stream *,AMCP::Proc_Stream *)#1}>,void ()(AMCP::Proc_Stream *,AMCP::Proc_Stream *)>::target_type()
{
}

void std::__function::__func<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<float>(float,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<float>(float,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_DWORD *std::__function::__func<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<float>(float,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<float>(float,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E699A6B8;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<float>(float,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<float>(float,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E699A6B8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

void std::__function::__func<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<float>(float,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<float>(float,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v4;
  size_t v5;
  unint64_t v6;

  v4 = *(_DWORD **)(a3 + 8);
  if (v4)
  {
    v5 = *(unsigned int *)(a3 + 4);
    if (*(float *)(a1 + 8) == 0.0)
    {
      bzero(v4, v5);
    }
    else if (v5 >= 4)
    {
      v6 = (v5 >> 2) + 1;
      do
      {
        *v4++ = *(_DWORD *)(a1 + 8);
        --v6;
      }
      while (v6 > 1);
    }
  }
}

uint64_t std::__function::__func<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<float>(float,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<float>(float,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN20DSP_HAL_Bypass_Utils18AMCP_IOData_HelperILNS_16InterleavePolicyE0EE10set_outputIfEEvT_mEUlRN4AMCP11Proc_StreamER11AudioBufferE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<float>(float,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<float>(float,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::target_type()
{
}

BOOL DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(uint64_t a1, float a2)
{
  _DWORD *v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v18;
  float v19;
  _QWORD v20[3];
  _QWORD *v21;
  _QWORD v22[3];
  _QWORD *v23;
  _QWORD v24[3];
  _QWORD *v25;
  _BYTE v26[24];
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  v19 = a2;
  v2 = *(_DWORD **)(a1 + 56);
  v3 = *v2;
  v18 = *v2 != 0;
  v20[0] = &off_1E696E4C8;
  v20[1] = &v18;
  v20[2] = &v19;
  v21 = v20;
  if (!(_DWORD)v3)
  {
    v6 = v20;
    v7 = 4;
LABEL_36:
    (*(void (**)(void))(*v6 + 8 * v7))();
    return v18;
  }
  v23 = v22;
  v4 = std::__function::__func<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(float)::{lambda(AudioBuffer const&)#1},std::allocator<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(float)::{lambda(AudioBuffer const&)#1}>,void ()(AudioBuffer const&)>::__clone((uint64_t)v20, (uint64_t)v22);
  v5 = (uint64_t)v23;
  if (v23)
  {
    if (v23 == v22)
    {
      v25 = v24;
      (*(void (**)(_QWORD *, _QWORD *, __n128))(v22[0] + 24))(v22, v24, v4);
      goto LABEL_8;
    }
    v5 = (*(uint64_t (**)(__n128))(*v23 + 16))(v4);
  }
  v25 = (_QWORD *)v5;
LABEL_8:
  v8 = v2 + 2;
  v9 = &v25;
  v10 = 16 * v3;
  do
  {
    if (!v25)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD *, _DWORD *, __n128))(*v25 + 48))(v25, v8, v4);
    v8 += 4;
    v10 -= 16;
  }
  while (v10);
  if (!v25)
  {
    v9 = v27;
    goto LABEL_15;
  }
  if (v25 != v24)
  {
    v27[0] = v25;
LABEL_15:
    *v9 = 0;
    goto LABEL_17;
  }
  v27[0] = v26;
  (*(void (**)(_QWORD *, _BYTE *))(v24[0] + 24))(v24, v26);
LABEL_17:
  v11 = (_QWORD *)v27[0];
  if ((_BYTE *)v27[0] == v26)
  {
    v12 = 4;
    v11 = v26;
  }
  else
  {
    if (!v27[0])
      goto LABEL_22;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_22:
  v13 = v25;
  if (v25 == v24)
  {
    v14 = 4;
    v13 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_27;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_27:
  v15 = v23;
  if (v23 == v22)
  {
    v16 = 4;
    v15 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_32;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_32:
  v6 = v21;
  if (v21 == v20)
  {
    v7 = 4;
    v6 = v20;
    goto LABEL_36;
  }
  if (v21)
  {
    v7 = 5;
    goto LABEL_36;
  }
  return v18;
}

void sub_1B5857588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t caulk::concurrent::messenger::enqueue_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_4,std::tuple<unsigned int,char const*,int,int>>(caulk::concurrent::messenger *a1, _BYTE *a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;

  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = &off_1E696E5B0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 20) = *a2;
  v7 = *a3;
  *(_QWORD *)(v6 + 40) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)v6 = &off_1E696E558;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

_QWORD *DSP_HAL_Bypass_Utils::ABL_Allocation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::~ABL_Allocation(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E696E028;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void DSP_HAL_Bypass_Utils::ABL_Allocation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::~ABL_Allocation(_QWORD *a1)
{
  DSP_HAL_Bypass_Utils::ABL_Allocation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::~ABL_Allocation(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t DSP_HAL_Bypass_Utils::ABL_Allocation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(uint64_t a1, float a2)
{
  float *v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;

  v4 = *(float **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v6 = *(_QWORD *)(result + 8) - (_QWORD)v4;
  if (v6 >= 1)
  {
    v7 = ((unint64_t)v6 >> 2) + 1;
    do
    {
      *v4++ = a2;
      --v7;
    }
    while (v7 > 1);
  }
  return result;
}

BOOL DSP_HAL_Bypass_Utils::ABL_Allocation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(uint64_t a1, float a2)
{
  _QWORD *v4;
  float *v6;
  float *v7;
  float *v8;
  float v9;
  float v10;

  v4 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (*v4 == v4[1] || **(float **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) != a2)
    return 0;
  v6 = *(float **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v7 = *(float **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
  if (v6 == v7)
  {
    v7 = v6;
  }
  else
  {
    v8 = v6 + 1;
    while (v8 != v7)
    {
      v9 = *(v8 - 1);
      v10 = *v8++;
      if (v9 != v10)
      {
        v7 = v8 - 2;
        return v7 == *(float **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
      }
    }
  }
  return v7 == *(float **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
}

uint64_t DSP_HAL_Bypass_Utils::ABL_Allocation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::rawSamples(uint64_t a1)
{
  return a1 + 8;
}

{
  return a1 + 8;
}

void caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_4,std::tuple<unsigned int,char const*,int,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_4,std::tuple<unsigned int,char const*,int,int>>::perform(caulk::concurrent::message *a1)
{
  caulk::concurrent::message *v2;

  v2 = a1;
  caulk::concurrent::details::message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_4,std::tuple<unsigned int,char const*,int,int>>::perform((uint64_t)a1);
  return caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_4,std::tuple<unsigned int,char const*,int,int>>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_1B58578F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_4,std::tuple<unsigned int,char const*,int,int>>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_4,std::tuple<unsigned int,char const*,int,int>>::perform(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  id *v11;
  _BYTE v12[10];
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v11, "com.apple.coreaudio", "AMCP");
  v2 = *v11;
  AMCP::Log::Scope::get_os_log_t(*v11);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v12;
  if (*(_QWORD *)v12)
  {
    v4 = (unint64_t *)(*(_QWORD *)v12 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    LODWORD(v11) = 67109890;
    HIDWORD(v11) = v7;
    *(_WORD *)v12 = 2080;
    *(_QWORD *)&v12[2] = v8;
    v13 = 1024;
    v14 = v9;
    v15 = 1024;
    v16 = v10;
    _os_log_impl(&dword_1B57BA000, v2, v6, "%6u %32s:%-5d Mix reference mic mock reference has been silent for %d IO calls.", (uint8_t *)&v11, 0x1Eu);
  }

}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_4,std::tuple<unsigned int,char const*,int,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_4,std::tuple<unsigned int,char const*,int,int>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__function::__func<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(float)::{lambda(AudioBuffer const&)#1},std::allocator<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(float)::{lambda(AudioBuffer const&)#1}>,void ()(AudioBuffer const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(float)::{lambda(AudioBuffer const&)#1},std::allocator<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(float)::{lambda(AudioBuffer const&)#1}>,void ()(AudioBuffer const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E696E4C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(float)::{lambda(AudioBuffer const&)#1},std::allocator<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(float)::{lambda(AudioBuffer const&)#1}>,void ()(AudioBuffer const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E696E4C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(float)::{lambda(AudioBuffer const&)#1},std::allocator<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(float)::{lambda(AudioBuffer const&)#1}>,void ()(AudioBuffer const&)>::operator()(uint64_t result, uint64_t a2)
{
  BOOL *v2;
  unint64_t v3;
  float *v4;
  float v5;
  BOOL v6;
  float *v7;
  uint64_t v8;
  float v9;
  BOOL v10;

  v2 = *(BOOL **)(result + 8);
  if (*v2)
  {
    v3 = *(unsigned int *)(a2 + 4);
    if ((_DWORD)v3 && (v4 = *(float **)(a2 + 8), v5 = *v4, *v4 == **(float **)(result + 16)))
    {
      v7 = &v4[v3 >> 2];
      if (v3 >= 4)
      {
        --v4;
        v8 = 4 * (v3 >> 2) - 4;
        while (v8)
        {
          v9 = v4[2];
          ++v4;
          v8 -= 4;
          v10 = v5 == v9;
          v5 = v9;
          if (!v10)
            goto LABEL_11;
        }
        v4 = v7;
      }
LABEL_11:
      v6 = v4 == v7;
    }
    else
    {
      v6 = 0;
    }
    *v2 = v6;
  }
  return result;
}

uint64_t std::__function::__func<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(float)::{lambda(AudioBuffer const&)#1},std::allocator<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(float)::{lambda(AudioBuffer const&)#1}>,void ()(AudioBuffer const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK20DSP_HAL_Bypass_Utils17ABL_EncapsulationIfLNS_16InterleavePolicyE0EE15is_every_sampleEfEUlRK11AudioBufferE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(float)::{lambda(AudioBuffer const&)#1},std::allocator<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(float)::{lambda(AudioBuffer const&)#1}>,void ()(AudioBuffer const&)>::target_type()
{
}

void DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::~ABL_Encapsulation(_QWORD *a1)
{
  DSP_HAL_Bypass_Utils::ABL_Allocation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::~ABL_Allocation(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t (***DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(uint64_t a1, float a2))()
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (***result)();
  uint64_t v6;
  unsigned int *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t (**v16)();
  float v17;
  uint64_t (***v18)();
  _QWORD v19[3];
  _QWORD *v20;
  _QWORD v21[3];
  _QWORD *v22;
  _BYTE v23[24];
  _QWORD v24[2];

  v24[1] = *MEMORY[0x1E0C80C00];
  v16 = &off_1E696E438;
  v17 = a2;
  v18 = &v16;
  v2 = *(unsigned int **)(a1 + 56);
  if (!v2)
  {
    result = &v16;
    v6 = 4;
    return (uint64_t (***)())(*result)[v6]();
  }
  v3 = *v2;
  if (!(_DWORD)v3)
    goto LABEL_33;
  v20 = v19;
  std::__function::__func<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(float)::{lambda(AudioBuffer &)#1},std::allocator<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(float)::{lambda(AudioBuffer &)#1}>,void ()(AudioBuffer &)>::__clone((uint64_t)&v16, (uint64_t)v19);
  v4 = (uint64_t)v20;
  if (v20)
  {
    if (v20 == v19)
    {
      v22 = v21;
      (*(void (**)(_QWORD *, _QWORD *))(v19[0] + 24))(v19, v21);
      goto LABEL_9;
    }
    v4 = (*(uint64_t (**)(void))(*v20 + 16))();
  }
  v22 = (_QWORD *)v4;
LABEL_9:
  v7 = v2 + 2;
  v8 = &v22;
  v9 = 16 * v3;
  do
  {
    if (!v22)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD *, unsigned int *))(*v22 + 48))(v22, v7);
    v7 += 4;
    v9 -= 16;
  }
  while (v9);
  if (!v22)
  {
    v8 = v24;
    goto LABEL_16;
  }
  if (v22 != v21)
  {
    v24[0] = v22;
LABEL_16:
    *v8 = 0;
    goto LABEL_18;
  }
  v24[0] = v23;
  (*(void (**)(_QWORD *, _BYTE *))(v21[0] + 24))(v21, v23);
LABEL_18:
  v10 = (_QWORD *)v24[0];
  if ((_BYTE *)v24[0] == v23)
  {
    v11 = 4;
    v10 = v23;
  }
  else
  {
    if (!v24[0])
      goto LABEL_23;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_23:
  v12 = v22;
  if (v22 == v21)
  {
    v13 = 4;
    v12 = v21;
    goto LABEL_27;
  }
  if (v22)
  {
    v13 = 5;
LABEL_27:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  v14 = v20;
  if (v20 == v19)
  {
    v15 = 4;
    v14 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_33;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_33:
  result = v18;
  if (v18 == &v16)
  {
    v6 = 4;
    result = &v16;
  }
  else
  {
    if (!v18)
      return result;
    v6 = 5;
  }
  return (uint64_t (***)())(*result)[v6]();
}

void sub_1B5857E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::rawSamples(AMCP::Log::Scope_Registry *a1)
{
  NSObject *v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  _opaque_pthread_t *v5;
  mach_port_t v6;
  id *v7;
  _BYTE v8[10];
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v7, "com.apple.coreaudio", "AMCP");
  v1 = *v7;
  AMCP::Log::Scope::get_os_log_t(*v7);
  objc_claimAutoreleasedReturnValue();
  v2 = *(std::__shared_weak_count **)v8;
  if (*(_QWORD *)v8)
  {
    v3 = (unint64_t *)(*(_QWORD *)v8 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    v5 = pthread_self();
    v6 = pthread_mach_thread_np(v5);
    LODWORD(v7) = 67109890;
    HIDWORD(v7) = v6;
    *(_WORD *)v8 = 2080;
    *(_QWORD *)&v8[2] = "DSP_HAL_Bypass_Utilities.h";
    v9 = 1024;
    v10 = 259;
    v11 = 2080;
    v12 = "false";
    _os_log_error_impl(&dword_1B57BA000, v1, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ABL_Encapsulation doesn't hold any samples on its own.", (uint8_t *)&v7, 0x22u);
  }

  abort();
}

void sub_1B585800C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__function::__func<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(float)::{lambda(AudioBuffer &)#1},std::allocator<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(float)::{lambda(AudioBuffer &)#1}>,void ()(AudioBuffer &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_DWORD *std::__function::__func<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(float)::{lambda(AudioBuffer &)#1},std::allocator<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(float)::{lambda(AudioBuffer &)#1}>,void ()(AudioBuffer &)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E696E438;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(float)::{lambda(AudioBuffer &)#1},std::allocator<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(float)::{lambda(AudioBuffer &)#1}>,void ()(AudioBuffer &)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E696E438;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

float std::__function::__func<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(float)::{lambda(AudioBuffer &)#1},std::allocator<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(float)::{lambda(AudioBuffer &)#1}>,void ()(AudioBuffer &)>::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  float *v3;
  unint64_t v4;
  float result;

  v2 = *(unsigned int *)(a2 + 4);
  if (v2 >= 4)
  {
    v3 = *(float **)(a2 + 8);
    v4 = (v2 >> 2) + 1;
    do
    {
      result = *(float *)(a1 + 8);
      *v3++ = result;
      --v4;
    }
    while (v4 > 1);
  }
  return result;
}

uint64_t std::__function::__func<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(float)::{lambda(AudioBuffer &)#1},std::allocator<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(float)::{lambda(AudioBuffer &)#1}>,void ()(AudioBuffer &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN20DSP_HAL_Bypass_Utils17ABL_EncapsulationIfLNS_16InterleavePolicyE0EE9fill_withEfEUlR11AudioBufferE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(float)::{lambda(AudioBuffer &)#1},std::allocator<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(float)::{lambda(AudioBuffer &)#1}>,void ()(AudioBuffer &)>::target_type()
{
}

void caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_2,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_2,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  caulk::concurrent::message *v11;
  uint8_t buf[8];
  _BYTE v13[10];
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v13;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    _os_log_impl(&dword_1B57BA000, v2, v6, "%6u %32s:%-5d Mix reference mic mock is expecting that all stream frame counts are equal", buf, 0x18u);
  }

  return caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_2,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(&v11);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_2,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_1,std::tuple<unsigned int,char const*,int,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_1,std::tuple<unsigned int,char const*,int,int>>::perform(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  caulk::concurrent::message *v12;
  uint8_t buf[8];
  _BYTE v14[10];
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v14;
  if (*(_QWORD *)v14)
  {
    v4 = (unint64_t *)(*(_QWORD *)v14 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v14 = 2080;
    *(_QWORD *)&v14[2] = v8;
    v15 = 1024;
    v16 = v9;
    v17 = 1024;
    v18 = v10;
    _os_log_impl(&dword_1B57BA000, v2, v6, "%6u %32s:%-5d Mix reference mic mock is expecting 1 IO output stream, not %d", buf, 0x1Eu);
  }

  return caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_1,std::tuple<unsigned int,char const*,int,int>>::rt_cleanup::~rt_cleanup(&v12);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_1,std::tuple<unsigned int,char const*,int,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_0,std::tuple<unsigned int,char const*,int,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_0,std::tuple<unsigned int,char const*,int,int>>::perform(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  caulk::concurrent::message *v12;
  uint8_t buf[8];
  _BYTE v14[10];
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v14;
  if (*(_QWORD *)v14)
  {
    v4 = (unint64_t *)(*(_QWORD *)v14 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v14 = 2080;
    *(_QWORD *)&v14[2] = v8;
    v15 = 1024;
    v16 = v9;
    v17 = 1024;
    v18 = v10;
    _os_log_impl(&dword_1B57BA000, v2, v6, "%6u %32s:%-5d Mix reference mic mock is expecting at least 2 IO input streams, not %d", buf, 0x1Eu);
  }

  return caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_0,std::tuple<unsigned int,char const*,int,int>>::rt_cleanup::~rt_cleanup(&v12);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_0,std::tuple<unsigned int,char const*,int,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_2,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_2,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  caulk::concurrent::message *v11;
  uint8_t buf[8];
  _BYTE v13[10];
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v13;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    _os_log_impl(&dword_1B57BA000, v2, v6, "%6u %32s:%-5d DSP_HAL_MockCallbacks::onClientIO - buffer data is invalid, nothing to process", buf, 0x18u);
  }

  return caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_2,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(&v11);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_2,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_1,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_1,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  caulk::concurrent::message *v11;
  uint8_t buf[8];
  _BYTE v13[10];
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v13;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    _os_log_impl(&dword_1B57BA000, v2, v6, "%6u %32s:%-5d DSP_HAL_MockCallbacks::onClientIO - ClientIO called without prior registration.", buf, 0x18u);
  }

  return caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_1,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(&v11);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_1,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void std::__function::__func<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>(char,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>(char,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_BYTE *std::__function::__func<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>(char,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>(char,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E699A628;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>(char,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>(char,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E699A628;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>(char,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>(char,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;

  v3 = *(void **)(a3 + 8);
  if (v3)
    bzero(v3, *(unsigned int *)(a3 + 4));
}

uint64_t std::__function::__func<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>(char,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>(char,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN20DSP_HAL_Bypass_Utils18AMCP_IOData_HelperILNS_16InterleavePolicyE0EE10set_outputIcEEvT_mEUlRN4AMCP11Proc_StreamER11AudioBufferE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>(char,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>(char,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::target_type()
{
}

void caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_0,std::tuple<unsigned int,char const*,int,char const*>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_0,std::tuple<unsigned int,char const*,int,char const*>>::perform(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  caulk::concurrent::message *v12;
  uint8_t buf[8];
  _BYTE v14[10];
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v14;
  if (*(_QWORD *)v14)
  {
    v4 = (unint64_t *)(*(_QWORD *)v14 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v14 = 2080;
    *(_QWORD *)&v14[2] = v8;
    v15 = 1024;
    v16 = v9;
    v17 = 2080;
    v18 = v10;
    _os_log_impl(&dword_1B57BA000, v2, v6, "%6u %32s:%-5d [hal_dsp] Mock IO is being called for %s", buf, 0x22u);
  }

  return caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_0,std::tuple<unsigned int,char const*,int,char const*>>::rt_cleanup::~rt_cleanup(&v12);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_0,std::tuple<unsigned int,char const*,int,char const*>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void DSP_Host_Types::NegotiateRequest::~NegotiateRequest(DSP_Host_Types::NegotiateRequest *this)
{
  DSP_Dictionariable::DictionariableKvp *v2;
  void **v3;

  *(_QWORD *)this = &off_1E699D0D8;
  v2 = (DSP_Host_Types::NegotiateRequest *)((char *)this + 24);
  v3 = (void **)((char *)this + 656);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::NegotiateRequest *)((char *)this + 72));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::NegotiateRequest *)((char *)this + 48));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v2);
  *(_QWORD *)this = off_1E699D128;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

{
  DSP_Dictionariable::DictionariableKvp *v2;
  void **v3;

  *(_QWORD *)this = &off_1E699D0D8;
  v2 = (DSP_Host_Types::NegotiateRequest *)((char *)this + 24);
  v3 = (void **)((char *)this + 656);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::NegotiateRequest *)((char *)this + 72));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::NegotiateRequest *)((char *)this + 48));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v2);
  *(_QWORD *)this = off_1E699D128;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1B5E50688);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::operator applesauce::CF::DictionaryRef(applesauce::CF::DictionaryRef *a1, uint64_t a2)
{
  CFTypeRef cf;

  cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)a2 + 24))(a2, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary(a1, cf);
  if (cf)
    CFRelease(cf);
}

void sub_1B5858E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t DSP_Host_Types::FormatDescription::FormatDescription(DSP_Host_Types::FormatDescription *this, const DSP_Host_Types::FormatDescription *a2)
{
  void *__p[2];
  char v6;

  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 16) = 0;
  *(_QWORD *)this = &off_1E699D270;
  std::string::basic_string[abi:ne180100]<0>(__p, "sample rate");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)this + 3, (const UInt8 *)__p);
  *((_QWORD *)this + 3) = &off_1E699D308;
  *((_BYTE *)this + 40) = 0;
  *((_BYTE *)this + 48) = 0;
  if (v6 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "channels");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)this + 7, (const UInt8 *)__p);
  *((_QWORD *)this + 7) = &off_1E699E950;
  *((_BYTE *)this + 72) = 0;
  *((_BYTE *)this + 76) = 0;
  if (v6 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "is interleaved");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)this + 10, (const UInt8 *)__p);
  *((_QWORD *)this + 10) = &off_1E699D180;
  *((_WORD *)this + 48) = 0;
  if (v6 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "common pcm format");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)this + 13, (const UInt8 *)__p);
  *((_QWORD *)this + 13) = &off_1E699E950;
  *((_BYTE *)this + 120) = 0;
  *((_BYTE *)this + 124) = 0;
  if (v6 < 0)
    operator delete(__p[0]);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  return DSP_Host_Types::FormatDescription::operator=((uint64_t)this, (uint64_t)a2);
}

void sub_1B5858FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  uint64_t v16;
  DSP_Dictionariable::DictionariableKvp *v17;
  DSP_Dictionariable::DictionariableKvp *v18;
  DSP_Dictionariable::DictionariableKvp *v19;

  if (a15 < 0)
    operator delete(__p);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v19);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v18);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v17);
  *v15 = off_1E699D2B0;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void sub_1B5859074(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  JUMPOUT(0x1B5859058);
}

void sub_1B585908C()
{
  JUMPOUT(0x1B5859058);
}

uint64_t std::allocate_shared[abi:ne180100]<DSP_Host_Types::FormatDescription,std::allocator<DSP_Host_Types::FormatDescription>,DSP_Host_Types::FormatDescription&,void>(uint64_t *a1, const DSP_Host_Types::FormatDescription *a2)
{
  _QWORD *v4;
  uint64_t result;

  v4 = operator new(0xB0uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E6994E70;
  result = DSP_Host_Types::FormatDescription::FormatDescription((DSP_Host_Types::FormatDescription *)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (uint64_t)v4;
  return result;
}

void sub_1B58590E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void DSP_Host_Types::NegotiateResponse::~NegotiateResponse(DSP_Host_Types::NegotiateResponse *this)
{
  void **v2;
  void **v3;

  *(_QWORD *)this = &off_1E699E820;
  v2 = (void **)((char *)this + 24);
  v3 = (void **)((char *)this + 72);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 48);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *(_QWORD *)this = off_1E699E860;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

{
  void **v2;
  void **v3;

  *(_QWORD *)this = &off_1E699E820;
  v2 = (void **)((char *)this + 24);
  v3 = (void **)((char *)this + 72);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 48);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *(_QWORD *)this = off_1E699E860;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1B5E50688);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::NegotiateResponse>::description(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const __CFString *v4;
  const __CFString *v5;
  CFIndex Length;
  CFIndex v7;
  CFTypeRef v8;
  std::vector<char>::value_type __x;
  std::vector<char> cf;

  cf.__begin_ = (std::vector<char>::pointer)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, std::vector<char> *))(*(_QWORD *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v8, cf.__begin_);
  if (cf.__begin_)
    CFRelease(cf.__begin_);
  v4 = CFCopyDescription(v8);
  v5 = v4;
  if (v4)
  {
    Length = CFStringGetLength(v4);
    v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    __x = 0;
    std::vector<char>::vector(&cf, v7, &__x);
    LODWORD(v7) = CFStringGetCString(v5, cf.__begin_, v7, 0x8000100u);
    CFRelease(v5);
    if ((_DWORD)v7)
      std::string::basic_string[abi:ne180100]<0>(a2, cf.__begin_);
    else
      std::string::basic_string[abi:ne180100]<0>(a2, "<error>");
    if (cf.__begin_)
    {
      cf.__end_ = cf.__begin_;
      operator delete(cf.__begin_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<empty>");
  }
  if (v8)
    CFRelease(v8);
}

void sub_1B5859300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)&__p);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::NegotiateResponse>::add_to(uint64_t a1, __CFArray **a2)
{
  CFTypeRef v4;
  CFTypeRef cf;

  cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v4, cf);
  if (cf)
    CFRelease(cf);
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, v4);
  if (v4)
    CFRelease(v4);
}

void sub_1B58593D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<DSP_Host_Types::FormatDescription>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6994E70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DSP_Host_Types::FormatDescription>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6994E70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<DSP_Host_Types::FormatDescription>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t DSP_Host_Types::FormatDescription::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;

  DSP_Dictionariable::SingleKvp<double>::operator=(a1 + 24, a2 + 24);
  DSP_Dictionariable::SingleKvp<unsigned int>::operator=(a1 + 56, a2 + 56);
  v4 = *(const void **)(a1 + 88);
  v5 = *(const void **)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v5;
  if (v5)
    CFRetain(v5);
  if (v4)
    CFRelease(v4);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  DSP_Dictionariable::SingleKvp<unsigned int>::operator=(a1 + 104, a2 + 104);
  return a1;
}

uint64_t DSP_Dictionariable::SingleKvp<double>::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  uint64_t v6;

  v4 = *(const void **)(a1 + 8);
  v5 = *(const void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
    CFRetain(v5);
  if (v4)
    CFRelease(v4);
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  return a1;
}

uint64_t DSP_Dictionariable::SingleKvp<unsigned int>::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  int v6;

  v4 = *(const void **)(a1 + 8);
  v5 = *(const void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
    CFRetain(v5);
  if (v4)
    CFRelease(v4);
  v6 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = v6;
  return a1;
}

void std::allocate_shared[abi:ne180100]<DSP_Host_Types::DeviceConfiguration,std::allocator<DSP_Host_Types::DeviceConfiguration>,char const(&)[1],void>(_QWORD *a1, char *a2)
{
  _QWORD *v4;
  CFTypeRef cf[2];
  char v6;

  v4 = operator new(0x148uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E6994EC0;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, a2);
  v4[3] = off_1E6994D48;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::__optional_destruct_base[abi:ne180100]<applesauce::CF::StringRef const&>((uint64_t)(v4 + 4), cf[0]);
  if (cf[0])
    CFRelease(cf[0]);
  v4[3] = &off_1E6994940;
  std::string::basic_string[abi:ne180100]<0>(cf, "device uid");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v4 + 6, (const UInt8 *)cf);
  v4[6] = off_1E6994AA8;
  *((_BYTE *)v4 + 64) = 0;
  *((_BYTE *)v4 + 88) = 0;
  if (v6 < 0)
    operator delete((void *)cf[0]);
  std::string::basic_string[abi:ne180100]<0>(cf, "sample rate");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v4 + 12, (const UInt8 *)cf);
  v4[12] = &off_1E699D308;
  *((_BYTE *)v4 + 112) = 0;
  *((_BYTE *)v4 + 120) = 0;
  if (v6 < 0)
    operator delete((void *)cf[0]);
  std::string::basic_string[abi:ne180100]<0>(cf, "reference stream enablement");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v4 + 16, (const UInt8 *)cf);
  v4[16] = &off_1E699D180;
  *((_WORD *)v4 + 72) = 0;
  if (v6 < 0)
    operator delete((void *)cf[0]);
  std::string::basic_string[abi:ne180100]<0>(cf, "tap stream enablement");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v4 + 19, (const UInt8 *)cf);
  v4[19] = &off_1E699D180;
  *((_WORD *)v4 + 84) = 0;
  if (v6 < 0)
    operator delete((void *)cf[0]);
  std::string::basic_string[abi:ne180100]<0>(cf, "reference stream channel count");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v4 + 22, (const UInt8 *)cf);
  v4[22] = &off_1E699E950;
  *((_BYTE *)v4 + 192) = 0;
  *((_BYTE *)v4 + 196) = 0;
  if (v6 < 0)
    operator delete((void *)cf[0]);
  *((_BYTE *)v4 + 200) = 0;
  *((_BYTE *)v4 + 204) = 0;
  std::string::basic_string[abi:ne180100]<0>(cf, "mic processing mode");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v4 + 26, (const UInt8 *)cf);
  v4[26] = &off_1E699E950;
  *((_BYTE *)v4 + 224) = 0;
  *((_BYTE *)v4 + 228) = 0;
  if (v6 < 0)
    operator delete((void *)cf[0]);
  std::string::basic_string[abi:ne180100]<0>(cf, "mic processing kind");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v4 + 29, (const UInt8 *)cf);
  v4[29] = &off_1E699E950;
  *((_BYTE *)v4 + 248) = 0;
  *((_BYTE *)v4 + 252) = 0;
  if (v6 < 0)
    operator delete((void *)cf[0]);
  v4[32] = 0;
  v4[33] = 0;
  v4[34] = 0;
  std::string::basic_string[abi:ne180100]<0>(cf, "bluetooth format");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v4 + 35, (const UInt8 *)cf);
  v4[35] = off_1E6994AA8;
  *((_BYTE *)v4 + 296) = 0;
  *((_BYTE *)v4 + 320) = 0;
  if (v6 < 0)
    operator delete((void *)cf[0]);
  DSP_Host_Types::DeviceConfiguration::init_set((DSP_Host_Types::DeviceConfiguration *)(v4 + 3));
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_1B5859850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, DSP_Dictionariable::DictionariableKvp *a9, void **a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::__shared_weak_count *v17;
  DSP_Dictionariable::DictionariableKvp *v18;
  _QWORD *v19;
  void **v20;
  DSP_Dictionariable::DictionariableKvp *v21;
  DSP_Dictionariable::DictionariableKvp *v22;
  DSP_Dictionariable::DictionariableKvp *v23;
  DSP_Dictionariable::DictionariableKvp *v24;
  std::__shared_weak_count_vtbl *shared_weak_owners;
  void *v27;

  DSP_Dictionariable::SingleKvp<std::string>::~SingleKvp(v20);
  shared_weak_owners = (std::__shared_weak_count_vtbl *)v17[10].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    v17[11].__vftable = shared_weak_owners;
    operator delete(shared_weak_owners);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v18);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v24);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v23);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v22);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v21);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(a9);
  DSP_Dictionariable::SingleKvp<std::string>::~SingleKvp(a10);
  *v19 = off_1E6994D48;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100](a11);
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v27);
  _Unwind_Resume(a1);
}

void sub_1B5859910(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  JUMPOUT(0x1B58598C0);
}

void sub_1B5859928()
{
  JUMPOUT(0x1B58598C0);
}

void sub_1B5859930(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  JUMPOUT(0x1B58598C8);
}

void sub_1B5859948()
{
  JUMPOUT(0x1B58598C8);
}

void sub_1B5859950(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  JUMPOUT(0x1B58598D0);
}

void sub_1B5859968()
{
  JUMPOUT(0x1B58598D0);
}

void sub_1B5859970(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  JUMPOUT(0x1B58598D8);
}

void sub_1B5859988()
{
  JUMPOUT(0x1B58598D8);
}

void sub_1B5859990(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  JUMPOUT(0x1B58598E0);
}

void sub_1B58599A8()
{
  JUMPOUT(0x1B58598E0);
}

void sub_1B58599B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  JUMPOUT(0x1B58598E8);
}

void sub_1B58599C8()
{
  JUMPOUT(0x1B58598E8);
}

void sub_1B58599D0()
{
  JUMPOUT(0x1B58598FCLL);
}

uint64_t DSP_Dictionariable::SingleKvp<std::string>::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;

  v4 = *(const void **)(a1 + 8);
  v5 = *(const void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
    CFRetain(v5);
  if (v4)
    CFRelease(v4);
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  return a1;
}

void std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(std::string *this, const std::string *a2)
{
  __int128 v3;

  if (this[1].__r_.__value_.__s.__data_[0] == a2[1].__r_.__value_.__s.__data_[0])
  {
    if (this[1].__r_.__value_.__s.__data_[0])
      std::string::operator=(this, a2);
  }
  else if (this[1].__r_.__value_.__s.__data_[0])
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      operator delete(this->__r_.__value_.__l.__data_);
    this[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

void DSP_Dictionariable::SingleKvp<std::string>::~SingleKvp(void **this)
{
  *this = off_1E6994AA8;
  if (*((_BYTE *)this + 40) && *((char *)this + 39) < 0)
    operator delete(this[2]);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)this);
}

{
  *this = off_1E6994AA8;
  if (*((_BYTE *)this + 40) && *((char *)this + 39) < 0)
    operator delete(this[2]);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)this);
  JUMPOUT(0x1B5E50688);
}

void DSP_Dictionariable::SingleKvp<std::string>::add_to(uint64_t a1, __CFDictionary **a2)
{
  uint64_t v3;
  const UInt8 *v4;
  const UInt8 *v5;
  const void *v6;
  int v7;
  const UInt8 *v8;
  CFIndex v9;
  CFStringRef v10;
  CFStringRef v11;
  std::runtime_error *exception;

  if (*(_BYTE *)(a1 + 40))
  {
    v5 = *(const UInt8 **)(a1 + 16);
    v3 = a1 + 16;
    v4 = v5;
    v6 = *(const void **)(v3 - 8);
    v7 = *(char *)(v3 + 23);
    if (v7 >= 0)
      v8 = (const UInt8 *)v3;
    else
      v8 = v4;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(v3 + 23);
    else
      v9 = *(_QWORD *)(v3 + 8);
    v10 = CFStringCreateWithBytes(0, v8, v9, 0x8000100u, 0);
    if (!v10)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v11 = v10;
    mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::StringRef>(*a2, v6, v10);
    CFRelease(v11);
  }
}

void sub_1B5859C14(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t DSP_Dictionariable::SingleKvp<std::string>::load_from(uint64_t a1, CFDictionaryRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  _QWORD v9[3];

  v9[0] = &off_1E699E9F8;
  v9[1] = 0;
  v9[2] = a2;
  v4 = a1 + 16;
  if (*(_BYTE *)(a1 + 40))
  {
    if (*(char *)(a1 + 39) < 0)
      operator delete(*(void **)v4);
    *(_BYTE *)(a1 + 40) = 0;
  }
  if (applesauce::CF::details::has_key<__CFString const*&>(*a2, *(const void **)(a1 + 8)))
  {
    applesauce::CF::details::find_at_key<std::string,__CFString const*&>((uint64_t)&v7, *a2, *(const void **)(a1 + 8));
    if (*(_BYTE *)(a1 + 40))
    {
      if (*(char *)(a1 + 39) < 0)
        operator delete(*(void **)v4);
      *(_OWORD *)v4 = v7;
      *(_QWORD *)(v4 + 16) = v8;
      HIBYTE(v8) = 0;
      LOBYTE(v7) = 0;
    }
    else
    {
      *(_OWORD *)v4 = v7;
      *(_QWORD *)(v4 + 16) = v8;
      v8 = 0;
      v7 = 0uLL;
      *(_BYTE *)(a1 + 40) = 1;
    }
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v9);
  return v5;
}

uint64_t DSP_Dictionariable::SingleKvp<std::string>::has_value(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

void DSP_Dictionariable::SingleKvp<std::string>::clear_value(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40))
  {
    if (*(char *)(a1 + 39) < 0)
      operator delete(*(void **)(a1 + 16));
    *(_BYTE *)(a1 + 40) = 0;
  }
}

_QWORD *applesauce::CF::details::find_at_key<std::string,__CFString const*&>(uint64_t a1, CFDictionaryRef theDict, const void *a3)
{
  const __CFString *v4;
  std::runtime_error *exception;

  v4 = (const __CFString *)applesauce::CF::details::at_key<__CFString const*&>(theDict, a3);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return applesauce::CF::convert_to<std::string,0>(a1, v4);
}

void sub_1B5859DE0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::StringRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1)
    CFDictionaryAddValue(a1, a2, a3);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::DeviceConfiguration>::description(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const __CFString *v4;
  const __CFString *v5;
  CFIndex Length;
  CFIndex v7;
  CFTypeRef v8;
  std::vector<char>::value_type __x;
  std::vector<char> cf;

  cf.__begin_ = (std::vector<char>::pointer)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, std::vector<char> *))(*(_QWORD *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v8, cf.__begin_);
  if (cf.__begin_)
    CFRelease(cf.__begin_);
  v4 = CFCopyDescription(v8);
  v5 = v4;
  if (v4)
  {
    Length = CFStringGetLength(v4);
    v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    __x = 0;
    std::vector<char>::vector(&cf, v7, &__x);
    LODWORD(v7) = CFStringGetCString(v5, cf.__begin_, v7, 0x8000100u);
    CFRelease(v5);
    if ((_DWORD)v7)
      std::string::basic_string[abi:ne180100]<0>(a2, cf.__begin_);
    else
      std::string::basic_string[abi:ne180100]<0>(a2, "<error>");
    if (cf.__begin_)
    {
      cf.__end_ = cf.__begin_;
      operator delete(cf.__begin_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<empty>");
  }
  if (v8)
    CFRelease(v8);
}

void sub_1B5859F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)&__p);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::DeviceConfiguration>::add_to(uint64_t a1, __CFArray **a2)
{
  CFTypeRef v4;
  CFTypeRef cf;

  cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v4, cf);
  if (cf)
    CFRelease(cf);
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, v4);
  if (v4)
    CFRelease(v4);
}

void sub_1B585A020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<DSP_Host_Types::DeviceConfiguration>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6994EC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DSP_Host_Types::DeviceConfiguration>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6994EC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<DSP_Host_Types::DeviceConfiguration>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void AMCP::IOAudio2::Driver::~Driver(AMCP::IOAudio2::Driver *this)
{
  AMCP::IOAudio2::Driver::~Driver(this);
  JUMPOUT(0x1B5E50688);
}

{
  AMCP::IOAudio2::Device **v2;
  AMCP::IOAudio2::Device **v3;
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  *(_QWORD *)this = &off_1E696E6E8;
  *((_QWORD *)this + 3) = &unk_1E696E710;
  v2 = (AMCP::IOAudio2::Device **)*((_QWORD *)this + 8);
  if (v2)
  {
    v3 = (AMCP::IOAudio2::Device **)*((_QWORD *)this + 9);
    v4 = (void *)*((_QWORD *)this + 8);
    if (v3 != v2)
    {
      do
        std::unique_ptr<AMCP::IOAudio2::Device>::reset[abi:ne180100](--v3, 0);
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 8);
    }
    *((_QWORD *)this + 9) = v2;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    std::default_delete<applesauce::iokit::io_service_factory>::operator()[abi:ne180100](v5);
  *((_QWORD *)this + 3) = &off_1E697FC58;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

std::__shared_mutex_base *AMCP::IOAudio2::Driver::shutdown(AMCP::IOAudio2::Driver *this)
{
  AMCP::Log::Scope_Registry *v2;
  int v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  unint64_t *v6;
  unint64_t v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  NSObject *v10;
  os_log_type_t v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  std::__shared_weak_count *v18;
  NSObject *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  AMCP::IOAudio2::Device **i;
  AMCP::IOAudio2::Device **v27;
  _opaque_pthread_t *v29;
  mach_port_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint8_t buf[8];
  _BYTE v34[10];
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v31, "com.apple.coreaudio", "AMCP");
  v3 = *(_DWORD *)(v31 + 16);
  switch(v3)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v12 = *(std::__shared_weak_count **)v34;
      v13 = **(NSObject ***)buf;
      if (*(_QWORD *)v34)
      {
        v14 = (unint64_t *)(*(_QWORD *)v34 + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        v16 = pthread_self();
        v17 = pthread_mach_thread_np(v16);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v17;
        *(_WORD *)v34 = 2080;
        *(_QWORD *)&v34[2] = "IOAudio2_Driver.cpp";
        v35 = 1024;
        v36 = 50;
        v10 = v13;
        v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v18 = *(std::__shared_weak_count **)v34;
      v19 = **(NSObject ***)buf;
      if (*(_QWORD *)v34)
      {
        v20 = (unint64_t *)(*(_QWORD *)v34 + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        v29 = pthread_self();
        v30 = pthread_mach_thread_np(v29);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v30;
        *(_WORD *)v34 = 2080;
        *(_QWORD *)&v34[2] = "IOAudio2_Driver.cpp";
        v35 = 1024;
        v36 = 50;
        _os_log_debug_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Tearing down IOAudio2 Driver", buf, 0x18u);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v4 = *(std::__shared_weak_count **)v34;
      v5 = **(NSObject ***)buf;
      if (*(_QWORD *)v34)
      {
        v6 = (unint64_t *)(*(_QWORD *)v34 + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v8 = pthread_self();
        v9 = pthread_mach_thread_np(v8);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v9;
        *(_WORD *)v34 = 2080;
        *(_QWORD *)&v34[2] = "IOAudio2_Driver.cpp";
        v35 = 1024;
        v36 = 50;
        v10 = v5;
        v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_1B57BA000, v10, v11, "%6u %32s:%-5d Tearing down IOAudio2 Driver", buf, 0x18u);
      }
      break;
  }
  v22 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v25)
    std::default_delete<applesauce::iokit::io_service_factory>::operator()[abi:ne180100](v25);
  v27 = (AMCP::IOAudio2::Device **)*((_QWORD *)this + 8);
  for (i = (AMCP::IOAudio2::Device **)*((_QWORD *)this + 9);
        i != v27;
        std::unique_ptr<AMCP::IOAudio2::Device>::reset[abi:ne180100](i, 0))
  {
    --i;
  }
  *((_QWORD *)this + 9) = v27;
  return AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*((_QWORD *)this + 4) + 16), *((_DWORD *)this + 12));
}

void sub_1B585A420(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void `non-virtual thunk to'AMCP::IOAudio2::Driver::~Driver(AMCP::IOAudio2::Driver *this)
{
  AMCP::IOAudio2::Driver::~Driver((AMCP::IOAudio2::Driver *)((char *)this - 24));
}

{
  AMCP::IOAudio2::Driver::~Driver((AMCP::IOAudio2::Driver *)((char *)this - 24));
  JUMPOUT(0x1B5E50688);
}

void std::default_delete<applesauce::iokit::io_service_factory>::operator()[abi:ne180100](uint64_t a1)
{
  io_object_t v2;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;

  v2 = *(_DWORD *)(a1 + 48);
  if (v2)
    IOObjectRelease(v2);
  v3 = *(_QWORD **)(a1 + 40);
  if (v3 == (_QWORD *)(a1 + 16))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 16);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  v5 = *(NSObject **)(a1 + 8);
  if (v5)
    dispatch_release(v5);
  IONotificationPortDestroy(*(IONotificationPortRef *)a1);
  JUMPOUT(0x1B5E50688);
}

AMCP::IOAudio2::Device *std::unique_ptr<AMCP::IOAudio2::Device>::reset[abi:ne180100](AMCP::IOAudio2::Device **a1, AMCP::IOAudio2::Device *a2)
{
  AMCP::IOAudio2::Device *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    AMCP::IOAudio2::Device::~Device(result);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

AMCP::Utility::Dispatch_Queue *AMCP::Utility::Dispatch_Queue::Dispatch_Queue(AMCP::Utility::Dispatch_Queue *this, dispatch_object_t object)
{
  *(_QWORD *)this = object;
  if (object)
    dispatch_retain(object);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_WORD *)this + 16) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 850045863;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_QWORD *)this + 19) = 850045863;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_QWORD *)this + 30) = 850045863;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((_QWORD *)this + 39) = dispatch_semaphore_create(0);
  return this;
}

uint64_t applesauce::iokit::io_service_factory::io_service_factory(uint64_t a1, NSObject **a2, const __CFDictionary **a3, const char *a4, uint64_t a5)
{
  NSObject *v10;
  uint64_t v11;
  io_object_t *v12;
  IONotificationPort *v13;
  const __CFDictionary *v14;
  uint64_t v15;
  io_object_t v16;
  io_object_t v17;
  uint64_t v18;
  void *exception;
  const std::error_category *v21;
  uint64_t v22;
  const std::error_category *v23;
  io_iterator_t notification;

  applesauce::iokit::details::io_notificationport_holder::io_notificationport_holder((applesauce::iokit::details::io_notificationport_holder *)a1);
  v10 = *a2;
  *(_QWORD *)(a1 + 8) = *a2;
  if (v10)
    dispatch_retain(v10);
  v11 = *(_QWORD *)(a5 + 24);
  if (!v11)
    goto LABEL_6;
  if (v11 != a5)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
LABEL_6:
    *(_QWORD *)(a1 + 40) = v11;
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 40) = a1 + 16;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a5 + 24) + 24))(*(_QWORD *)(a5 + 24), a1 + 16);
LABEL_8:
  *(_DWORD *)(a1 + 48) = 0;
  v12 = (io_object_t *)(a1 + 48);
  IONotificationPortSetDispatchQueue(*(IONotificationPortRef *)a1, *(dispatch_queue_t *)(a1 + 8));
  notification = 0;
  v13 = *(IONotificationPort **)a1;
  v14 = *a3;
  *a3 = 0;
  v15 = IOServiceAddMatchingNotification(v13, a4, v14, (IOServiceMatchingCallback)applesauce::iokit::io_service_factory::matching_callback_, (void *)a1, &notification);
  if ((_DWORD)v15)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v21 = std::system_category();
    MEMORY[0x1B5E5022C](exception, v15, v21, "Error on IOServiceAddMatchingNotification");
    goto LABEL_18;
  }
  v16 = notification;
  v17 = *v12;
  *v12 = notification;
  if (v17)
  {
    IOObjectRelease(v17);
    v16 = *v12;
  }
  if (v16)
  {
    v18 = IOObjectRetain(v16);
    if ((_DWORD)v18)
    {
      v22 = v18;
      exception = __cxa_allocate_exception(0x20uLL);
      v23 = std::system_category();
      MEMORY[0x1B5E5022C](exception, v22, v23, "Error on Retain");
LABEL_18:
      __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
  }
  applesauce::iokit::io_service_factory::matching_callback(a1, v16);
  if (v16)
    IOObjectRelease(v16);
  return a1;
}

void sub_1B585A7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  _QWORD *v11;
  io_object_t *v12;
  void *v13;
  _QWORD *v15;
  uint64_t v16;
  NSObject *v17;

  __cxa_free_exception(v13);
  applesauce::iokit::io_object_holder::~io_object_holder(v12);
  v15 = *(_QWORD **)(v10 + 40);
  if (v15 == v11)
  {
    v16 = 4;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v16 = 5;
    v11 = *(_QWORD **)(v10 + 40);
  }
  (*(void (**)(_QWORD *))(*v11 + 8 * v16))(v11);
LABEL_6:
  v17 = *(NSObject **)(v10 + 8);
  if (v17)
    dispatch_release(v17);
  applesauce::iokit::details::io_notificationport_holder::~io_notificationport_holder((IONotificationPortRef *)v10);
  _Unwind_Resume(a1);
}

applesauce::iokit::details::io_notificationport_holder *applesauce::iokit::details::io_notificationport_holder::io_notificationport_holder(applesauce::iokit::details::io_notificationport_holder *this)
{
  uint64_t v2;
  IONotificationPortRef v3;
  uint64_t v5;
  std::runtime_error *exception;
  const std::error_category *v7;
  struct type_info *v8;
  void (*v9)(void *);
  mach_port_t mainPort;

  mainPort = 0;
  v2 = MEMORY[0x1B5E4FB0C](*MEMORY[0x1E0C81720], &mainPort);
  if ((_DWORD)v2)
  {
    v5 = v2;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
    v7 = std::system_category();
    MEMORY[0x1B5E5022C](exception, v5, v7, "IOMainPort failed");
    v8 = (struct type_info *)MEMORY[0x1E0DE4E38];
    v9 = (void (*)(void *))MEMORY[0x1E0DE4580];
    goto LABEL_6;
  }
  v3 = IONotificationPortCreate(mainPort);
  *(_QWORD *)this = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "IONotificationPortCreate failed");
    v8 = (struct type_info *)MEMORY[0x1E0DE4E80];
    v9 = (void (*)(void *))MEMORY[0x1E0DE4338];
LABEL_6:
    __cxa_throw(exception, v8, v9);
  }
  return this;
}

void sub_1B585A948(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t applesauce::iokit::io_service_factory::matching_callback_(uint64_t this, io_object_t object)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *exception;
  const std::error_category *v7;

  if (this && object)
  {
    v3 = this;
    v4 = IOObjectRetain(object);
    if ((_DWORD)v4)
    {
      v5 = v4;
      exception = __cxa_allocate_exception(0x20uLL);
      v7 = std::system_category();
      MEMORY[0x1B5E5022C](exception, v5, v7, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
    applesauce::iokit::io_service_factory::matching_callback(v3, object);
    return IOObjectRelease(object);
  }
  return this;
}

void sub_1B585A9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11)
{
  void *v11;

  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

uint64_t applesauce::iokit::io_service_factory::matching_callback(uint64_t a1, io_object_t a2)
{
  uint64_t v4;
  io_object_t v5;
  uint64_t v6;
  uint64_t v7;
  io_object_t v8;
  io_object_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  std::logic_error *v13;
  uint64_t v14;
  void *v15;
  const std::error_category *v16;
  uint64_t v17;
  void *v18;
  const std::error_category *v19;
  uint64_t v20;
  void *v21;
  const std::error_category *v22;
  uint64_t v23;
  void *exception;
  const std::error_category *v25;
  io_iterator_t v26;
  io_object_t object;
  io_object_t v28;
  uint64_t v29;
  io_object_t v30;
  io_iterator_t v31;
  io_object_t v32;

  v30 = a2;
  if (a2)
  {
    v4 = IOObjectRetain(a2);
    if ((_DWORD)v4)
    {
      v23 = v4;
      exception = __cxa_allocate_exception(0x20uLL);
      v25 = std::system_category();
      MEMORY[0x1B5E5022C](exception, v23, v25, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
  }
  applesauce::iokit::details::io_services_iterator::io_services_iterator(&v31, a2);
  if (a2)
    IOObjectRelease(a2);
  v29 = 0;
  while (1)
  {
    v5 = v32;
    if (!v32)
      break;
    v26 = v31;
    if (v31)
    {
      v6 = IOObjectRetain(v31);
      if ((_DWORD)v6)
      {
        v17 = v6;
        v18 = __cxa_allocate_exception(0x20uLL);
        v19 = std::system_category();
        MEMORY[0x1B5E5022C](v18, v17, v19, "Error on Retain");
        __cxa_throw(v18, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
      }
      v5 = v32;
      object = v32;
      if (!v32)
      {
LABEL_28:
        v13 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v13, "io_services_iterator exceeding size");
        v13->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        __cxa_throw(v13, (struct type_info *)off_1E696A668, (void (*)(void *))MEMORY[0x1E0DE42E0]);
      }
    }
    else
    {
      object = v32;
    }
    v7 = IOObjectRetain(v5);
    if ((_DWORD)v7)
    {
      v14 = v7;
      v15 = __cxa_allocate_exception(0x20uLL);
      v16 = std::system_category();
      MEMORY[0x1B5E5022C](v15, v14, v16, "Error on Retain");
      __cxa_throw(v15, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
    if (!v32)
      goto LABEL_28;
    v8 = IOIteratorNext(v31);
    v9 = v32;
    v32 = v8;
    if (v9)
      IOObjectRelease(v9);
    v28 = object;
    if (object)
    {
      v10 = IOObjectRetain(object);
      if ((_DWORD)v10)
      {
        v20 = v10;
        v21 = __cxa_allocate_exception(0x20uLL);
        v22 = std::system_category();
        MEMORY[0x1B5E5022C](v21, v20, v22, "Error on Retain");
        __cxa_throw(v21, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
      }
    }
    v11 = *(_QWORD *)(a1 + 40);
    if (!v11)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, io_object_t *))(*(_QWORD *)v11 + 48))(v11, &v28);
    if (v28)
      IOObjectRelease(v28);
    if (object)
      IOObjectRelease(object);
    if (v26)
      IOObjectRelease(v26);
  }
  result = v31;
  if (v31)
    return IOObjectRelease(v31);
  return result;
}

void sub_1B585ACA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, int a12, char a13, __int16 a14, char a15, char a16)
{
  void *v16;

  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

void applesauce::iokit::io_object_holder::~io_object_holder(io_object_t *this)
{
  io_object_t v1;

  v1 = *this;
  if (v1)
    IOObjectRelease(v1);
}

void applesauce::iokit::details::io_notificationport_holder::~io_notificationport_holder(IONotificationPortRef *this)
{
  IONotificationPortDestroy(*this);
}

io_iterator_t *applesauce::iokit::details::io_services_iterator::io_services_iterator(io_iterator_t *a1, io_object_t a2)
{
  uint64_t v3;
  io_iterator_t v4;
  uint64_t v6;
  void *exception;
  const std::error_category *v8;

  *a1 = a2;
  if (a2)
  {
    v3 = IOObjectRetain(a2);
    if ((_DWORD)v3)
    {
      v6 = v3;
      exception = __cxa_allocate_exception(0x20uLL);
      v8 = std::system_category();
      MEMORY[0x1B5E5022C](exception, v6, v8, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
    v4 = *a1;
  }
  else
  {
    v4 = 0;
  }
  a1[1] = IOIteratorNext(v4);
  return a1;
}

void sub_1B585AE58(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void applesauce::iokit::details::io_services_iterator::~io_services_iterator(applesauce::iokit::details::io_services_iterator *this)
{
  io_object_t v2;

  v2 = *((_DWORD *)this + 1);
  if (v2)
    IOObjectRelease(v2);
  if (*(_DWORD *)this)
    IOObjectRelease(*(_DWORD *)this);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio2::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E696E778;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::IOAudio2::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio2::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E696E778;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio2::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E696E778;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio2::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E696E778;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio2::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IOAudio2::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio2::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::IOAudio2::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio2::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::operator()(uint64_t a1, io_object_t *a2)
{
  io_object_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *exception;
  const std::error_category *v7;
  io_registry_entry_t v8;

  v2 = *a2;
  *a2 = 0;
  v3 = *(_QWORD *)(a1 + 8);
  v8 = v2;
  if (v2)
  {
    v4 = IOObjectRetain(v2);
    if ((_DWORD)v4)
    {
      v5 = v4;
      exception = __cxa_allocate_exception(0x20uLL);
      v7 = std::system_category();
      MEMORY[0x1B5E5022C](exception, v5, v7, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
    AMCP::IOAudio2::Driver::handle_device_arrival(v3, &v8);
    IOObjectRelease(v2);
    IOObjectRelease(v2);
  }
  else
  {
    AMCP::IOAudio2::Driver::handle_device_arrival(v3, &v8);
  }
}

void sub_1B585B0A0(_Unwind_Exception *a1)
{
  io_object_t v1;
  void *v2;

  __cxa_free_exception(v2);
  IOObjectRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio2::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio26Driver5startEvE3$_0"))
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<AMCP::IOAudio2::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio2::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::target_type()
{
}

void AMCP::IOAudio2::Driver::handle_device_arrival(uint64_t a1, io_registry_entry_t *a2)
{
  io_registry_entry_t v3;
  uint64_t CFProperties;
  const __CFBoolean *v6;
  CFTypeID TypeID;
  int v8;
  CFTypeID v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  CFMutableDictionaryRef v13;
  CFComparisonResult v14;
  uint64_t v15;
  unsigned int v16;
  void *v17;
  void **p_lpsrc;
  io_object_t v19;
  uint64_t v20;
  CFTypeRef v21;
  char *v22;
  CFMutableDictionaryRef *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::runtime_error *exception;
  void (*v32)(void *);
  struct type_info *v33;
  const std::error_category *v34;
  std::runtime_error *v35;
  std::runtime_error *v36;
  void *v37;
  const std::error_category *v38;
  void *lpsrc;
  std::__shared_weak_count *v40;
  __int128 v41;
  io_object_t object;
  CFTypeRef v43;
  CFTypeRef cf;
  CFTypeRef v45;
  CFMutableDictionaryRef properties[3];
  CFMutableDictionaryRef *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
    v32 = (void (*)(void *))MEMORY[0x1E0DE4338];
    v33 = (struct type_info *)MEMORY[0x1E0DE4E80];
    goto LABEL_54;
  }
  properties[0] = 0;
  CFProperties = IORegistryEntryCreateCFProperties(v3, properties, 0, 0);
  if ((_DWORD)CFProperties)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
    v34 = std::system_category();
    MEMORY[0x1B5E5022C](exception, CFProperties, v34, "Error on get_properties");
    v32 = (void (*)(void *))MEMORY[0x1E0DE4580];
    v33 = (struct type_info *)MEMORY[0x1E0DE4E38];
LABEL_54:
    __cxa_throw(exception, v33, v32);
  }
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v45, properties[0]);
  if (!v45)
  {
    v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v35, "Could not construct");
    __cxa_throw(v35, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key<applesauce::CF::StringRef,__CFString const*>((applesauce::CF::StringRef *)&cf, (CFDictionaryRef)v45, CFSTR("device UID"));
  if (!v45)
  {
    v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v36, "Could not construct");
    __cxa_throw(v36, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = (const __CFBoolean *)applesauce::CF::details::at_key<__CFString const*>((CFDictionaryRef)v45, CFSTR("is private"));
  if (v6)
  {
    TypeID = CFBooleanGetTypeID();
    if (TypeID == CFGetTypeID(v6))
    {
      LOBYTE(v6) = CFBooleanGetValue(v6) != 0;
      v8 = 1;
    }
    else
    {
      v9 = CFNumberGetTypeID();
      if (v9 == CFGetTypeID(v6))
      {
        v10 = applesauce::CF::details::number_convert_as<BOOL>(v6);
        LOBYTE(v6) = v10;
        v8 = HIBYTE(v10);
      }
      else
      {
        v8 = 0;
        LOBYTE(v6) = 0;
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(_QWORD *)(a1 + 72);
  if (v11 != v12)
  {
    while (1)
    {
      AMCP::IOAudio2::Device::get_uid(properties, *(const void **)(*(_QWORD *)v11 + 8));
      v13 = properties[0];
      v14 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)properties[0], (const __CFString **)&cf);
      if (v13)
        CFRelease(v13);
      if (v14 == kCFCompareEqualTo)
        break;
      v11 += 8;
      if (v11 == v12)
      {
        v11 = v12;
        break;
      }
    }
  }
  if ((v6 | (v8 << 8)) <= 0x100 && v11 == *(_QWORD *)(a1 + 72))
  {
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
    v16 = *(_DWORD *)(a1 + 48);
    std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&lpsrc, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
    if (lpsrc
    {
      *(_QWORD *)&v41 = v17;
      *((_QWORD *)&v41 + 1) = v40;
      p_lpsrc = &lpsrc;
    }
    else
    {
      p_lpsrc = (void **)&v41;
    }
    *p_lpsrc = 0;
    p_lpsrc[1] = 0;
    v19 = *a2;
    object = v19;
    if (v19)
    {
      v20 = IOObjectRetain(v19);
      if ((_DWORD)v20)
      {
        v37 = __cxa_allocate_exception(0x20uLL);
        v38 = std::system_category();
        MEMORY[0x1B5E5022C](v37, v20, v38, "Error on Retain");
        __cxa_throw(v37, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
      }
    }
    v21 = v45;
    if (v45)
      CFRetain(v45);
    v43 = v21;
    v47 = 0;
    v22 = (char *)operator new(0x28uLL);
    *(_QWORD *)v22 = &off_1E696E7F8;
    *(_OWORD *)(v22 + 8) = v41;
    v41 = 0uLL;
    *((_DWORD *)v22 + 6) = object;
    object = 0;
    *((_QWORD *)v22 + 4) = v21;
    v43 = 0;
    v47 = (CFMutableDictionaryRef *)v22;
    AMCP::Core::Conductor::enqueue_config_change(v15, v16, v16, 1, (uint64_t)properties);
    v23 = v47;
    if (v47 == properties)
    {
      v24 = 4;
      v23 = properties;
    }
    else
    {
      if (!v47)
      {
LABEL_38:
        if (v43)
          CFRelease(v43);
        if (object)
          IOObjectRelease(object);
        v25 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
        if (*((_QWORD *)&v41 + 1))
        {
          v26 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v28 = v40;
        if (v40)
        {
          p_shared_owners = (unint64_t *)&v40->__shared_owners_;
          do
            v30 = __ldaxr(p_shared_owners);
          while (__stlxr(v30 - 1, p_shared_owners));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        goto LABEL_20;
      }
      v24 = 5;
    }
    (*((void (**)(void))*v23 + v24))();
    goto LABEL_38;
  }
LABEL_20:
  if (cf)
    CFRelease(cf);
  if (v45)
    CFRelease(v45);
}

void sub_1B585B580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16, const void *a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  void *v23;

  if (a2)
  {
    __cxa_free_exception(v23);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    applesauce::CF::StringRef::~StringRef(&a16);
    applesauce::CF::DictionaryRef::~DictionaryRef(&a17);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B585B29CLL);
  }
  _Unwind_Resume(exception_object);
}

applesauce::CF::StringRef *applesauce::CF::details::find_at_key<applesauce::CF::StringRef,__CFString const*>(applesauce::CF::StringRef *a1, CFDictionaryRef theDict, const void *a3)
{
  const void *v4;
  const void *v5;
  std::runtime_error *exception;

  v4 = applesauce::CF::details::at_key<__CFString const*>(theDict, a3);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = v4;
  CFRetain(v4);
  return applesauce::CF::StringRef::StringRef(a1, v5);
}

void sub_1B585B720(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *AMCP::IOAudio2::Device::get_uid(_QWORD *this, const void *a2)
{
  _QWORD *v3;

  v3 = this;
  if (a2)
    this = CFRetain(a2);
  *v3 = a2;
  return this;
}

uint64_t AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1::~$_1(uint64_t a1)
{
  const void *v2;
  io_object_t v3;

  v2 = *(const void **)(a1 + 24);
  if (v2)
    CFRelease(v2);
  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
    IOObjectRelease(v3);
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::~__func(uint64_t a1)
{
  const void *v2;
  io_object_t v3;

  *(_QWORD *)a1 = &off_1E696E7F8;
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
  v3 = *(_DWORD *)(a1 + 24);
  if (v3)
    IOObjectRelease(v3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

void std::__function::__func<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::~__func(uint64_t a1)
{
  const void *v2;
  io_object_t v3;

  *(_QWORD *)a1 = &off_1E696E7F8;
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
  v3 = *(_DWORD *)(a1 + 24);
  if (v3)
    IOObjectRelease(v3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E696E7F8;
  std::__compressed_pair_elem<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B585B8A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E696E7F8;
  return std::__compressed_pair_elem<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  int64x2_t *v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  int64x2_t v17;
  AMCP::IOAudio2::Device **v18;
  AMCP::IOAudio2::Device **v19;
  CFTypeRef cf;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = operator new();
  v4 = *(const void **)(a1 + 32);
  if (v4)
    CFRetain(*(CFTypeRef *)(a1 + 32));
  cf = v4;
  AMCP::IOAudio2::Device::Device(v3, v2, (io_service_t *)(a1 + 24), (CFDictionaryRef *)&cf);
  if (cf)
    CFRelease(cf);
  v5 = *(int64x2_t **)(a1 + 8);
  v7 = (uint64_t *)v5[4].i64[1];
  v6 = v5[5].u64[0];
  if ((unint64_t)v7 >= v6)
  {
    v8 = (_QWORD *)v5[4].i64[0];
    v9 = v7 - v8;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v11 = v6 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = (uint64_t *)&v13[8 * v9];
    *v14 = v3;
    v15 = v14 + 1;
    if (v7 == v8)
    {
      v17 = vdupq_n_s64((unint64_t)v7);
    }
    else
    {
      do
      {
        v16 = *--v7;
        *v7 = 0;
        *--v14 = v16;
      }
      while (v7 != v8);
      v17 = v5[4];
    }
    v5[4].i64[0] = (uint64_t)v14;
    v5[4].i64[1] = (uint64_t)v15;
    v5[5].i64[0] = (uint64_t)&v13[8 * v12];
    v19 = (AMCP::IOAudio2::Device **)v17.i64[1];
    v18 = (AMCP::IOAudio2::Device **)v17.i64[0];
    while (v19 != v18)
      std::unique_ptr<AMCP::IOAudio2::Device>::reset[abi:ne180100](--v19, 0);
    if (v18)
      operator delete(v18);
    v5[4].i64[1] = (uint64_t)v15;
  }
  else
  {
    *v7 = v3;
    v5[4].i64[1] = (uint64_t)(v7 + 1);
  }
}

void sub_1B585BA88(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  const void *v20;

  if (v20)
    CFRelease(v20);
  MEMORY[0x1B5E50688](v18, 0x1060C40B23E0A7FLL);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t std::__function::__func<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio26Driver21handle_device_arrivalEN10applesauce5iokit16io_object_holderEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__alloc_func<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  const void *v2;
  io_object_t v3;

  v2 = *(const void **)(a1 + 24);
  if (v2)
    CFRelease(v2);
  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
    IOObjectRelease(v3);
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1);
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  io_object_t v7;
  uint64_t v8;
  const void *v9;
  uint64_t v11;
  void *exception;
  const std::error_category *v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v7;
  if (v7)
  {
    v8 = IOObjectRetain(v7);
    if ((_DWORD)v8)
    {
      v11 = v8;
      exception = __cxa_allocate_exception(0x20uLL);
      v13 = std::system_category();
      MEMORY[0x1B5E5022C](exception, v11, v13, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
    }
  }
  v9 = *(const void **)(a2 + 24);
  if (v9)
    CFRetain(v9);
  *(_QWORD *)(a1 + 24) = v9;
  return a1;
}

void sub_1B585BC2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

const void *applesauce::CF::details::at_key<__CFString const*>(CFDictionaryRef theDict, const void *a2)
{
  const void *result;

  result = 0;
  if (theDict)
  {
    if (a2)
      return CFDictionaryGetValue(theDict, a2);
  }
  return result;
}

uint64_t AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>(uint64_t *a1, int a2, int *a3, double a4)
{
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t (***v9)();
  uint64_t v10;
  _OWORD v12[2];
  void (*v13)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t (**v14)();
  int v15;
  uint64_t (***v16)();
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, a2, a4);
  v6 = *a1;
  v7 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  v8 = *a3;
  v13 = 0;
  v14 = &off_1E699FD88;
  v15 = v8;
  v16 = &v14;
  memset(v12, 0, sizeof(v12));
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)&v14);
  v13 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v12);
  if (v13)
    v13(0, (uint64_t)v12, 0, 0);
  v9 = v16;
  if (v16 == &v14)
  {
    v10 = 4;
    v9 = &v14;
    goto LABEL_7;
  }
  if (v16)
  {
    v10 = 5;
LABEL_7:
    (*v9)[v10]();
  }
  return AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v6);
}

void sub_1B585BD8C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(uint64_t *a1, uint64_t a2, CFTypeRef cf)
{
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD v10[2];
  void (*v11)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (cf)
    CFRetain(cf);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, *(_DWORD *)(a2 + 8), *(double *)a2);
  v6 = *a1;
  v7 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  if (cf)
  {
    CFRetain(cf);
    v13 = 0;
    v12[0] = &off_1E699FE98;
    CFRetain(cf);
  }
  else
  {
    v13 = 0;
    v12[0] = &off_1E699FE98;
  }
  v12[1] = cf;
  v13 = v12;
  memset(v10, 0, sizeof(v10));
  v11 = 0;
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)v12);
  v11 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v10);
  if (v11)
    v11(0, (uint64_t)v10, 0, 0);
  v8 = v13;
  if (v13 == v12)
  {
    v9 = 4;
    v8 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_13;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_13:
  if (cf)
    CFRelease(cf);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(v6);
  if (cf)
    CFRelease(cf);
}

void sub_1B585BF28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>(uint64_t *a1, int a2, __int128 *a3, double a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t (***v8)();
  uint64_t v9;
  _OWORD v11[2];
  void (*v12)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t (**v13)();
  __int128 v14;
  uint64_t (***v15)();
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, a2, a4);
  v6 = *a1;
  v7 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
  v12 = 0;
  v13 = &off_1E699FAD8;
  v14 = *a3;
  v15 = &v13;
  memset(v11, 0, sizeof(v11));
  std::__function::__value_func<std::vector<unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)v11, (uint64_t)&v13);
  v12 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v11);
  if (v12)
    v12(0, (uint64_t)v11, 0, 0);
  v8 = v15;
  if (v15 == &v13)
  {
    v9 = 4;
    v8 = &v13;
    goto LABEL_7;
  }
  if (v15)
  {
    v9 = 5;
LABEL_7:
    (*v8)[v9]();
  }
  return AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(v6);
}

void sub_1B585C080(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>(uint64_t *a1, int a2, __int128 *a3, double a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t (***v8)();
  uint64_t v9;
  _OWORD v11[2];
  void (*v12)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t (**v13)();
  __int128 v14;
  uint64_t (***v15)();
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, a2, a4);
  v6 = *a1;
  v7 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
  v12 = 0;
  v13 = &off_1E699FBF8;
  v14 = *a3;
  v15 = &v13;
  memset(v11, 0, sizeof(v11));
  std::__function::__value_func<std::vector<unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)v11, (uint64_t)&v13);
  v12 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v11);
  if (v12)
    v12(0, (uint64_t)v11, 0, 0);
  v8 = v15;
  if (v15 == &v13)
  {
    v9 = 4;
    v8 = &v13;
    goto LABEL_7;
  }
  if (v15)
  {
    v9 = 5;
LABEL_7:
    (*v8)[v9]();
  }
  return AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(v6);
}

void sub_1B585C1B8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 4));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E699FB68;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B585C40C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E699FB68;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E699FB68;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E699FB68;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B585C4F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E699FB68;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *__p;
  _BYTE *v4;

  AMCP::Core::Operation::call_function<std::vector<unsigned int>>((uint64_t)&__p, (_QWORD *)(a1 + 8));
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)a2, __p, (uint64_t)v4, (v4 - (_BYTE *)__p) >> 2);
  *(_QWORD *)(a2 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
}

void sub_1B585C5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterINSt3__16vectorIjNS3_9allocatorIjEEEEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__value_func<std::vector<unsigned int> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::vector<unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

void std::__function::__func<AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1},std::allocator<AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1},std::allocator<AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E699FBF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1},std::allocator<AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E699FBF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1},std::allocator<AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_mutex_base *v2;
  unsigned int v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_mutex_base **)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 16);
  v6 = 0x676C6F6262636C73;
  v7 = 0;
  v8[0] = &off_1E699FC68;
  v8[1] = &v6;
  v8[2] = a1 + 20;
  v9 = v8;
  AMCP::Core::Broker::fetch_owned_object_ids_if (a2, v2, v3, (uint64_t)v8);
  result = v9;
  if (v9 == v8)
  {
    v5 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

uint64_t std::__function::__func<AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1},std::allocator<AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities40make_owned_object_of_class_list_propertyERNS0_6BrokerEjRKNS_7AddressEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1},std::allocator<AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjRKNS2_7AddressERKT_DpOT0_EUlSJ_E_NS9_ISN_EEFbRKNS_10shared_ptrINS3_4CoreEEEEED0Ev()
{
  JUMPOUT(0x1B5E50688);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjRKNS2_7AddressERKT_DpOT0_EUlSJ_E_NS9_ISN_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E699FC68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjRKNS2_7AddressERKT_DpOT0_EUlSJ_E_NS9_ISN_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E699FC68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjRKNS2_7AddressERKT_DpOT0_EUlSJ_E_NS9_ISN_EEFbRKNS_10shared_ptrINS3_4CoreEEEEEclEST_(uint64_t a1, AMCP::Core::Core **a2)
{
  return _ZN4AMCP4Core4Core26has_properties_with_valuesIjJENSt3__19enable_ifILb1EvEEEEbRKNS_7AddressERKT_DpOT0_(*a2, *(const AMCP::Address **)(a1 + 8), *(_DWORD **)(a1 + 16));
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjRKNS2_7AddressERKT_DpOT0_EUlSJ_E_NS9_ISN_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJENSt3__19enable_ifILb1EvEEEENS3_6vectorIjNS3_9allocatorIjEEEERNS0_6BrokerEjRKNS_7AddressERKT_DpOT0_EUlSH_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjRKNS2_7AddressERKT_DpOT0_EUlSJ_E_NS9_ISN_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE11target_typeEv()
{
  return &_ZTIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJENSt3__19enable_ifILb1EvEEEENS3_6vectorIjNS3_9allocatorIjEEEERNS0_6BrokerEjRKNS_7AddressERKT_DpOT0_EUlSH_E_;
}

BOOL _ZN4AMCP4Core4Core26has_properties_with_valuesIjJENSt3__19enable_ifILb1EvEEEEbRKNS_7AddressERKT_DpOT0_(AMCP::Core::Core *a1, const AMCP::Address *a2, _DWORD *a3)
{
  unint64_t v5;

  v5 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(a1, a2);
  if (!HIDWORD(v5))
    return 0;
  if (*(_DWORD *)a2 != 1668047219 && *(_DWORD *)a2 != 1650682995)
    return *a3 == (_DWORD)v5;
  return (AMCP::is_base_of((AMCP *)*a3, v5) & 1) != 0;
}

void std::__function::__func<AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1},std::allocator<AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1},std::allocator<AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E699FAD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1},std::allocator<AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E699FAD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1},std::allocator<AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::operator()(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_mutex_base *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int *begin;
  std::vector<unsigned int>::pointer end;
  int v8;
  unint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unsigned int *v23;
  std::__shared_weak_count *v24;
  unsigned int *v25;
  std::vector<unsigned int> v26;

  v3 = *(std::__shared_mutex_base **)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 16);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v5 = (unsigned int *)operator new(4uLL);
  *v5 = v4;
  v24 = (std::__shared_weak_count *)(v5 + 1);
  v25 = v5 + 1;
  v23 = v5;
  AMCP::Core::Broker::gather_directly_owned_objects(&v26, v3, &v23);
  operator delete(v5);
  begin = v26.__begin_;
  end = v26.__end_;
  if (v26.__begin_ != v26.__end_)
  {
    do
    {
      AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v23, v3, *begin);
      if (v23)
      {
        v8 = *v23;
        v10 = (_DWORD *)a2[1];
        v9 = a2[2];
        if ((unint64_t)v10 >= v9)
        {
          v12 = (_DWORD *)*a2;
          v13 = ((uint64_t)v10 - *a2) >> 2;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 62)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v15 = v9 - (_QWORD)v12;
          if (v15 >> 1 > v14)
            v14 = v15 >> 1;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v16 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
            v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v16);
          else
            v17 = 0;
          v18 = (_DWORD *)(v16 + 4 * v13);
          *v18 = v8;
          v11 = v18 + 1;
          while (v10 != v12)
          {
            v19 = *--v10;
            *--v18 = v19;
          }
          *a2 = v18;
          a2[2] = v16 + 4 * v17;
          if (v12)
            operator delete(v12);
        }
        else
        {
          *v10 = v8;
          v11 = v10 + 1;
        }
        a2[1] = v11;
      }
      v20 = v24;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      ++begin;
    }
    while (begin != end);
    begin = v26.__begin_;
  }
  if (begin)
  {
    v26.__end_ = begin;
    operator delete(begin);
  }
}

uint64_t std::__function::__func<AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1},std::allocator<AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities31make_owned_object_list_propertyERNS0_6BrokerEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1},std::allocator<AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::target_type()
{
}

const void **AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1}::~Address(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E699FF28;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B585CF24(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E699FF28;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E699FF28;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  *v3 = &off_1E699FF28;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(_QWORD *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1B585D008(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a2 = &off_1E699FF28;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef cf;

  AMCP::Core::Operation::call_function<applesauce::CF::StringRef>((uint64_t)&cf, (_QWORD *)(a1 + 8));
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::construct<applesauce::CF::StringRef&>(a2, &cf);
  if (cf)
    CFRelease(cf);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIN10applesauce2CF9StringRefEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::~__func(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E699FE98;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::~__func(_QWORD *a1)
{
  const void *v1;

  *a1 = &off_1E699FE98;
  v1 = (const void *)a1[1];
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::__clone(uint64_t a1)
{
  CFTypeRef *v1;
  _QWORD *v2;

  v1 = (CFTypeRef *)(a1 + 8);
  v2 = operator new(0x10uLL);
  *v2 = &off_1E699FE98;
  std::__compressed_pair_elem<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1} const&,0ul>(v2 + 1, v1);
  return v2;
}

_QWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E699FE98;
  return std::__compressed_pair_elem<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1} const&,0ul>(a2 + 1, (CFTypeRef *)(a1 + 8));
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::destroy[abi:ne180100](*(const void **)(a1 + 8));
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::destroy_deallocate(const void **a1)
{
  std::__function::__alloc_func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::destroy[abi:ne180100](a1[1]);
  operator delete(a1);
}

CFTypeRef std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::operator()@<X0>(CFTypeRef result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)result + 1);
  if (v3)
    result = CFRetain(*((CFTypeRef *)result + 1));
  *a2 = v3;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities22make_constant_propertyIN10applesauce2CF9StringRefEEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::target_type()
{
}

void std::__function::__alloc_func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::destroy[abi:ne180100](const void *a1)
{
  if (a1)
    CFRelease(a1);
}

_QWORD *std::__compressed_pair_elem<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1} const&,0ul>(_QWORD *a1, CFTypeRef *a2)
{
  CFTypeRef v3;

  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *a1 = v3;
  return a1;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>,unsigned int ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_DWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E699FD88;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>,unsigned int ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E699FD88;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>,unsigned int ()(void)>::operator()(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities22make_constant_propertyIjEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>,unsigned int ()(void)>::target_type()
{
}

uint64_t AMCP::Utility::Expiration_Check::Expiration_Check(uint64_t a1, uint64_t *a2)
{
  int v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t v8;

  v3 = *((_DWORD *)a2 + 4);
  if (*((_DWORD *)a2 + 6))
  {
    if (v3 == 1)
      goto LABEL_3;
LABEL_10:
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  if (v3)
    goto LABEL_10;
LABEL_3:
  v5 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    *(_DWORD *)(a1 + 16) = 1;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 1;
  }
  *(_DWORD *)(a1 + 24) = 1;
  return a1;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E696E758[v2])(&v4, a1);
  *(_DWORD *)(a1 + 16) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_10shared_ptrISt4byteEENS_8weak_ptrIS9_EEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_10shared_ptrISt4byteEENS_8weak_ptrIS9_EEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

_QWORD *std::__function::__func<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E696E878;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E696E878;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t *v2;
  char *v3;

  v2 = (uint64_t *)(a1 + 8);
  v3 = (char *)operator new(0x38uLL);
  *(_QWORD *)v3 = &off_1E696E878;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v3 + 8), v2);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a1 + 40);
  return v3;
}

void sub_1B585D7C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E696E878;
  AMCP::Utility::Expiration_Check::Expiration_Check(a2 + 8, (uint64_t *)(a1 + 8));
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 8);
}

void std::__function::__func<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)a1 + 8);
  operator delete(a1);
}

AMCP::Log::Scope_Registry *std::__function::__func<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  AMCP::Log::Scope_Registry *result;
  AMCP::IOAudio2::Device **v4;
  AMCP::IOAudio2::Device **v5;
  AMCP::IOAudio2::Device **v6;
  AMCP::IOAudio2::Device **v7;
  AMCP::IOAudio2::Device *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  NSObject **v15;
  _BYTE v16[10];
  __int16 v17;
  int v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  result = (AMCP::Log::Scope_Registry *)AMCP::Utility::Expiration_Check::is_valid((AMCP::Utility::Expiration_Check *)(a1 + 8));
  if ((result & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v15, "com.apple.coreaudio", "AMCP");
    v9 = *(std::__shared_weak_count **)v16;
    v10 = *v15;
    if (*(_QWORD *)v16)
    {
      v11 = (unint64_t *)(*(_QWORD *)v16 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      LODWORD(v15) = 67109890;
      HIDWORD(v15) = v14;
      *(_WORD *)v16 = 2080;
      *(_QWORD *)&v16[2] = "IOAudio2_Driver.cpp";
      v17 = 1024;
      v18 = 151;
      v19 = 2080;
      v20 = "expiration_check.is_valid()";
      _os_log_error_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s caller has gone out of scope", (uint8_t *)&v15, 0x22u);
    }
    abort();
  }
  v4 = **(AMCP::IOAudio2::Device ****)(a1 + 48);
  v5 = v4 + 1;
  v6 = *(AMCP::IOAudio2::Device ***)(v2 + 72);
  if (v4 + 1 != v6)
  {
    do
    {
      v4 = v5;
      v7 = v5 - 1;
      v8 = *v5;
      *v5++ = 0;
      result = std::unique_ptr<AMCP::IOAudio2::Device>::reset[abi:ne180100](v7, v8);
    }
    while (v5 != v6);
    v5 = *(AMCP::IOAudio2::Device ***)(v2 + 72);
  }
  while (v5 != v4)
    result = std::unique_ptr<AMCP::IOAudio2::Device>::reset[abi:ne180100](--v5, 0);
  *(_QWORD *)(v2 + 72) = v4;
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio26Driver23handle_device_departureEPNS0_6DeviceEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1>,void ()(void)>::target_type()
{
}

BOOL AMCP::Utility::Expiration_Check::is_valid(AMCP::Utility::Expiration_Check *this)
{
  int v1;
  uint64_t v2;
  BOOL v3;

  v1 = *((_DWORD *)this + 4);
  if (!*((_DWORD *)this + 6))
  {
    if (!v1)
    {
      v3 = *(_QWORD *)this == 0;
      return !v3;
    }
LABEL_12:
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  if (v1 != 1)
    goto LABEL_12;
  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8) == -1;
  return !v3;
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5040] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E88], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

void std::__shared_ptr_emplace<std::byte>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69A0170;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::byte>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69A0170;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void HALS_IOUAClockDevice::Activate(HALS_IOUAClockDevice *this)
{
  HALS_IOEngine2 *v2;
  uint64_t v3;
  uint64_t v4;
  HALS_Object *v5;
  HALS_IOEngine2 *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unsigned int v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t device_timestamp_buffer_id;
  unint64_t *v16;
  uint64_t device_client_status_buffer_id;
  unint64_t *v18;
  uint64_t device_io_status_buffer_id;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  HALS_Object *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  HALS_IOUAClockDevice::UpdateControls(this);
  v2 = (HALS_IOEngine2 *)operator new();
  v6 = v2;
  v7 = *((_QWORD *)this + 47);
  v8 = *(_QWORD *)(v7 + 792);
  v9 = *(std::__shared_weak_count **)(v7 + 800);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  HALS_IOEngine2::HALS_IOEngine2(v2, this, v3, v4, v5);
  *(_QWORD *)v6 = off_1E697A778;
  v12 = *((_DWORD *)this + 96);
  *((_DWORD *)v6 + 278) = v12;
  *((_QWORD *)v6 + 140) = v8;
  *((_QWORD *)v6 + 141) = v9;
  if (v9)
  {
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *((_QWORD *)v6 + 150) = 0;
  *((_QWORD *)v6 + 149) = 0;
  *((_OWORD *)v6 + 71) = 0u;
  *((_OWORD *)v6 + 72) = 0u;
  *((_QWORD *)v6 + 148) = (char *)v6 + 1192;
  device_timestamp_buffer_id = HALS_IOUAUCDriver::get_device_timestamp_buffer_id((HALS_IOUAUCDriver *)*(unsigned int *)(v8 + 4), v12);
  *((_QWORD *)v6 + 142) = device_timestamp_buffer_id;
  *((_QWORD *)v6 + 143) = HALS_IOUAUCDriver::map_memory((HALS_IOUAUCDriver *)*(unsigned int *)(v8 + 4), device_timestamp_buffer_id, &v26, v16);
  device_client_status_buffer_id = HALS_IOUAUCDriver::get_device_client_status_buffer_id((HALS_IOUAUCDriver *)*(unsigned int *)(v8 + 4), *((_DWORD *)v6 + 278));
  *((_QWORD *)v6 + 144) = device_client_status_buffer_id;
  *((_QWORD *)v6 + 145) = HALS_IOUAUCDriver::map_memory((HALS_IOUAUCDriver *)*(unsigned int *)(v8 + 4), device_client_status_buffer_id, &v25, v18);
  device_io_status_buffer_id = HALS_IOUAUCDriver::get_device_io_status_buffer_id((HALS_IOUAUCDriver *)*(unsigned int *)(v8 + 4), *((_DWORD *)v6 + 278));
  *((_QWORD *)v6 + 146) = device_io_status_buffer_id;
  *((_QWORD *)v6 + 147) = HALS_IOUAUCDriver::map_memory((HALS_IOUAUCDriver *)*(unsigned int *)(v8 + 4), device_io_status_buffer_id, &v24, v20);
  *((_QWORD *)this + 55) = v6;
  if (v9)
  {
    v21 = (unint64_t *)&v9->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  (***((void (****)(_QWORD))this + 55))(*((_QWORD *)this + 55));
  (*(void (**)(char *))(*((_QWORD *)this + 46) + 24))((char *)this + 368);
  HALS_Object::Activate(this, v23);
}

void sub_1B585DCA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  HALS_IOEngine2 *v2;
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>>>::destroy(*((_QWORD **)v2 + 149));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 1120);
  HALS_IOEngine2::~HALS_IOEngine2(v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  MEMORY[0x1B5E50688](v2, 0x10E1C404CC6C7EDLL);
  _Unwind_Resume(a1);
}

void HALS_IOUAClockDevice::~HALS_IOUAClockDevice(HALS_IOUAClockDevice *this)
{
  HALS_IOUAClockDevice::~HALS_IOUAClockDevice(this);
  JUMPOUT(0x1B5E50688);
}

{
  uint64_t v2;
  HALS_Object *v3;
  HALS_Object *v4;
  void *v5;

  *(_QWORD *)this = off_1E696E8F8;
  *((_QWORD *)this + 46) = &unk_1E696EAF8;
  v2 = *((_QWORD *)this + 55);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    HALS_ObjectMap::ObjectIsDead(*((HALS_ObjectMap **)this + 55), v3);
    *((_QWORD *)this + 55) = 0;
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_IOUAClockDevice *)((char *)this + 448));
  v5 = (void *)*((_QWORD *)this + 52);
  if (v5)
  {
    *((_QWORD *)this + 53) = v5;
    operator delete(v5);
  }
  HALS_IOUAObject::~HALS_IOUAObject((HALS_IOUAClockDevice *)((char *)this + 368), v4);
  HALS_ClockDevice::~HALS_ClockDevice(this);
}

void HALS_IOUAClockDevice::_Deactivate(HALS_IOUAClockDevice *this)
{
  HALS_ObjectMap **v2;
  HALS_ObjectMap **v3;
  HALS_ObjectMap *v4;
  HALS_Object *v5;

  v2 = (HALS_ObjectMap **)*((_QWORD *)this + 52);
  v3 = (HALS_ObjectMap **)*((_QWORD *)this + 53);
  if (v2 != v3)
  {
    do
    {
      (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)*v2 + 8))(*v2);
      v4 = *v2++;
      HALS_ObjectMap::ObjectIsDead(v4, v5);
    }
    while (v2 != v3);
    v2 = (HALS_ObjectMap **)*((_QWORD *)this + 52);
  }
  *((_QWORD *)this + 53) = v2;
  *((_DWORD *)this + 2) = 0;
}

uint64_t HALS_IOUAClockDevice::HasProperty(HALS_IOUAClockDevice *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  uint64_t mSelector;
  _BOOL8 HasProperty;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  mSelector = a3->mSelector;
  HasProperty = 1;
  if ((int)mSelector <= 1819107690)
  {
    if ((int)mSelector <= 1735354733)
    {
      if ((int)mSelector <= 1668510817)
      {
        if ((_DWORD)mSelector == 1634429294 || (_DWORD)mSelector == 1668049764)
          goto LABEL_47;
        v8 = 1668050795;
      }
      else if ((int)mSelector > 1668641651)
      {
        if ((_DWORD)mSelector == 1668641652)
          return *((_QWORD *)this + 50) != *((_QWORD *)this + 49);
        v8 = 1684434036;
      }
      else
      {
        if ((_DWORD)mSelector == 1668510818)
          goto LABEL_47;
        v8 = 1668639076;
      }
    }
    else if ((int)mSelector > 1768124269)
    {
      if ((int)mSelector > 1818850144)
      {
        if ((_DWORD)mSelector == 1818850145)
          goto LABEL_47;
        v8 = 1818850162;
      }
      else
      {
        if ((_DWORD)mSelector == 1768124270)
          goto LABEL_47;
        v8 = 1768777573;
      }
    }
    else
    {
      if ((int)mSelector <= 1751412336)
      {
        if ((_DWORD)mSelector != 1735354734)
        {
          v7 = 1735356005;
          goto LABEL_36;
        }
        return HasProperty;
      }
      if ((_DWORD)mSelector == 1751412337)
      {
LABEL_47:
        v9 = *((_QWORD *)this + 47);
        v10 = *(_QWORD *)(v9 + 792);
        v11 = *(std::__shared_weak_count **)(v9 + 800);
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldxr(p_shared_owners);
          while (__stxr(v13 + 1, p_shared_owners));
        }
        HasProperty = HALS_IOUAUCDriver::GetHasProperty((HALS_IOUAUCDriver *)*(unsigned int *)(v10 + 4), a3, *((_DWORD *)this + 96));
        if (v11)
        {
          v14 = (unint64_t *)&v11->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        return HasProperty;
      }
      v8 = 1751737454;
    }
LABEL_46:
    if ((_DWORD)mSelector != v8)
      goto LABEL_57;
    goto LABEL_47;
  }
  if ((int)mSelector <= 1853059699)
  {
    if ((int)mSelector <= 1819569762)
    {
      if ((_DWORD)mSelector == 1819107691 || (_DWORD)mSelector == 1819111268)
        goto LABEL_47;
      v8 = 1819173229;
    }
    else if ((int)mSelector > 1851878763)
    {
      if ((_DWORD)mSelector == 1851878764)
        goto LABEL_47;
      v8 = 1853059619;
    }
    else
    {
      if ((_DWORD)mSelector == 1819569763)
        return HasProperty;
      v8 = 1836411236;
    }
    goto LABEL_46;
  }
  if ((int)mSelector > 1936092275)
  {
    if ((int)mSelector > 1953653101)
    {
      if ((_DWORD)mSelector == 1969841184)
        goto LABEL_47;
      v8 = 1953653102;
    }
    else
    {
      if ((_DWORD)mSelector == 1936092276)
        goto LABEL_47;
      v8 = 1937009955;
    }
    goto LABEL_46;
  }
  if ((int)mSelector <= 1920168546)
  {
    if ((_DWORD)mSelector == 1853059700)
      goto LABEL_47;
    v8 = 1919512167;
    goto LABEL_46;
  }
  if ((_DWORD)mSelector == 1920168547)
    goto LABEL_47;
  v7 = 1935763060;
LABEL_36:
  if ((_DWORD)mSelector == v7)
    return HasProperty;
LABEL_57:
  if ((HALS_ClockDevice::HasProperty((uint64_t)this, a2, (int *)a3) & 1) != 0)
    return HasProperty;
  return (*(uint64_t (**)(char *, uint64_t))(*((_QWORD *)this + 46) + 16))((char *)this + 368, mSelector);
}

void sub_1B585E0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOUAClockDevice::IsPropertySettable(HALS_IOUAClockDevice *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  _BOOL8 IsPropertySettable;
  signed int mSelector;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  const AudioObjectPropertyAddress *v22;
  HALS_Client *v23;

  IsPropertySettable = 0;
  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1819107690)
  {
    if (mSelector > 1735354733)
    {
      if (mSelector <= 1768124269)
      {
        if (mSelector <= 1751412336)
        {
          if (mSelector != 1735354734)
          {
            v9 = 1735356005;
            goto LABEL_43;
          }
          return IsPropertySettable;
        }
        if (mSelector != 1751412337)
        {
          v10 = 1751737454;
          goto LABEL_53;
        }
LABEL_54:
        v14 = *((_QWORD *)this + 47);
        v15 = *(_QWORD *)(v14 + 792);
        v16 = *(std::__shared_weak_count **)(v14 + 800);
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldxr(p_shared_owners);
          while (__stxr(v18 + 1, p_shared_owners));
        }
        IsPropertySettable = HALS_IOUAUCDriver::GetIsPropertySettable((HALS_IOUAUCDriver *)*(unsigned int *)(v15 + 4), a3, *((_DWORD *)this + 96));
        if (v16)
        {
          v19 = (unint64_t *)&v16->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        return IsPropertySettable;
      }
      if (mSelector <= 1818850144)
      {
        if (mSelector != 1768124270)
        {
          v10 = 1768777573;
          goto LABEL_53;
        }
        goto LABEL_54;
      }
      if (mSelector == 1818850145)
        goto LABEL_54;
      v10 = 1818850162;
      goto LABEL_53;
    }
    if (mSelector > 1668510817)
    {
      if (mSelector > 1668641651)
      {
        if (mSelector == 1668641652)
          return IsPropertySettable;
        v10 = 1684434036;
        goto LABEL_53;
      }
      if (mSelector != 1668510818)
      {
        v10 = 1668639076;
        goto LABEL_53;
      }
      goto LABEL_54;
    }
    v11 = mSelector == 1634429294 || mSelector == 1668049764;
    v12 = 1668050795;
LABEL_34:
    if (!v11 && mSelector != v12)
      goto LABEL_63;
    goto LABEL_54;
  }
  if (mSelector <= 1853059699)
  {
    if (mSelector > 1819569762)
    {
      if (mSelector <= 1851878763)
      {
        if (mSelector == 1819569763)
          return IsPropertySettable;
        v10 = 1836411236;
        goto LABEL_53;
      }
      if (mSelector == 1851878764)
        goto LABEL_54;
      v10 = 1853059619;
      goto LABEL_53;
    }
    v11 = mSelector == 1819107691 || mSelector == 1819111268;
    v12 = 1819173229;
    goto LABEL_34;
  }
  if (mSelector > 1936092275)
  {
    if (mSelector <= 1953653101)
    {
      if (mSelector != 1936092276)
      {
        v10 = 1937009955;
        goto LABEL_53;
      }
      goto LABEL_54;
    }
    if (mSelector == 1969841184)
      goto LABEL_54;
    v10 = 1953653102;
LABEL_53:
    if (mSelector != v10)
      goto LABEL_63;
    goto LABEL_54;
  }
  if (mSelector <= 1920168546)
  {
    if (mSelector != 1853059700)
    {
      v10 = 1919512167;
      goto LABEL_53;
    }
    goto LABEL_54;
  }
  if (mSelector == 1920168547)
    goto LABEL_54;
  v9 = 1935763060;
LABEL_43:
  if (mSelector == v9)
    return IsPropertySettable;
LABEL_63:
  if (HALS_ClockDevice::HasProperty((uint64_t)this, a2, (int *)a3))
    return HALS_ClockDevice::IsPropertySettable((uint64_t)this, a2, (int *)a3);
  else
    return HALS_IOUAObject::IsPropertySettable((HALS_IOUAClockDevice *)((char *)this + 368), a3, v22, v23);
}

void sub_1B585E4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOUAClockDevice::GetPropertyDataSize(HALS_IOUAClockDevice *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, const void *a5, HALS_Client *a6)
{
  signed int mSelector;
  uint64_t PropertySize;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _BOOL4 HasProperty;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  const AudioObjectPropertyAddress *v38;
  uint64_t v39;
  const void *v40;
  HALS_Client *v41;
  AudioObjectPropertyAddress v42;
  uint64_t v43;
  std::__shared_weak_count *v44;

  mSelector = a3->mSelector;
  PropertySize = 4;
  if ((int)a3->mSelector <= 1819107690)
  {
    if (mSelector > 1735354733)
    {
      if (mSelector > 1768124269)
      {
        if (mSelector > 1818850144)
        {
          if (mSelector != 1818850145)
          {
            v14 = 1818850162;
LABEL_57:
            if (mSelector != v14)
              goto LABEL_72;
          }
        }
        else if (mSelector != 1768124270)
        {
          v14 = 1768777573;
          goto LABEL_57;
        }
      }
      else
      {
        if (mSelector <= 1751412336)
        {
          if (mSelector != 1735354734)
          {
            v13 = 1735356005;
            goto LABEL_36;
          }
          return PropertySize;
        }
        if (mSelector != 1751412337)
        {
          v14 = 1751737454;
          goto LABEL_57;
        }
      }
LABEL_58:
      v30 = *((_QWORD *)this + 47);
      v31 = *(_QWORD *)(v30 + 792);
      v32 = *(std::__shared_weak_count **)(v30 + 800);
      v43 = v31;
      v44 = v32;
      if (v32)
      {
        p_shared_owners = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldxr(p_shared_owners);
        while (__stxr(v34 + 1, p_shared_owners));
      }
      PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v31 + 4), a3, *((_DWORD *)this + 96), a5, a4);
      if (v32)
      {
        v35 = (unint64_t *)&v32->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      return PropertySize;
    }
    if (mSelector <= 1668510817)
    {
      if (mSelector != 1634429294 && mSelector != 1668049764)
      {
        v14 = 1668050795;
        goto LABEL_57;
      }
      goto LABEL_58;
    }
    if (mSelector > 1668641651)
    {
      if (mSelector == 1668641652)
        return (*((_DWORD *)this + 100) - *((_DWORD *)this + 98)) & 0xFFFFFFFC;
      v14 = 1684434036;
      goto LABEL_57;
    }
    if (mSelector == 1668510818)
      goto LABEL_58;
    v15 = 1668639076;
    goto LABEL_68;
  }
  if (mSelector <= 1853059699)
  {
    if (mSelector <= 1819569762)
    {
      if (mSelector != 1819107691 && mSelector != 1819111268)
      {
        v15 = 1819173229;
LABEL_68:
        if (mSelector != v15)
          goto LABEL_72;
      }
    }
    else
    {
      if (mSelector <= 1851878763)
      {
        if (mSelector == 1819569763)
          return PropertySize;
        v15 = 1836411236;
        goto LABEL_68;
      }
      if (mSelector != 1851878764)
      {
        if (mSelector != 1853059619)
          goto LABEL_72;
        *(_QWORD *)&v42.mSelector = 0x676C6F626E737223;
        v42.mElement = 0;
        v16 = *((_QWORD *)this + 47);
        v17 = *(_QWORD *)(v16 + 792);
        v18 = *(std::__shared_weak_count **)(v16 + 800);
        v43 = v17;
        v44 = v18;
        if (v18)
        {
          v19 = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        HasProperty = HALS_IOUAUCDriver::GetHasProperty((HALS_IOUAUCDriver *)*(unsigned int *)(v17 + 4), &v42, *((_DWORD *)this + 96));
        if (v18)
        {
          v22 = (unint64_t *)&v18->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        if (!HasProperty)
          return 16;
        v24 = *((_QWORD *)this + 47);
        v25 = *(_QWORD *)(v24 + 792);
        v26 = *(std::__shared_weak_count **)(v24 + 800);
        v43 = v25;
        v44 = v26;
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        v29 = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v25 + 4), &v42, *((_DWORD *)this + 96), a5, a4);
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v43);
        return (2 * v29) & 0xFFFFFFF0;
      }
    }
    return 8;
  }
  if (mSelector > 1936092275)
  {
    if (mSelector <= 1953653101)
    {
      if (mSelector != 1936092276)
      {
        v14 = 1937009955;
        goto LABEL_57;
      }
      goto LABEL_58;
    }
    if (mSelector == 1953653102)
      goto LABEL_58;
    v15 = 1969841184;
    goto LABEL_68;
  }
  if (mSelector <= 1920168546)
  {
    if (mSelector != 1853059700)
    {
      v14 = 1919512167;
      goto LABEL_57;
    }
    goto LABEL_58;
  }
  if (mSelector == 1920168547)
    goto LABEL_58;
  v13 = 1935763060;
LABEL_36:
  if (mSelector == v13)
    return PropertySize;
LABEL_72:
  if (HALS_ClockDevice::HasProperty((uint64_t)this, a2, (int *)a3))
    return HALS_ClockDevice::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
  else
    return HALS_IOUAObject::GetPropertyDataSize((HALS_IOUAClockDevice *)((char *)this + 368), a3, v38, v39, v40, v41);
}

void sub_1B585E984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void HALS_IOUAClockDevice::GetPropertyData(HALS_IOUAClockDevice *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, AudioObjectPropertyAddress *a5, uint64_t *a6, unsigned int a7, void *a8, HALS_Client *a9)
{
  uint64_t *v11;
  signed int mSelector;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _BOOL8 HasProperty;
  _BOOL4 v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  const double *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  float64x2_t v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  const void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::runtime_error_vtbl *v70;
  NSObject *v71;
  _opaque_pthread_t *v72;
  mach_port_t v73;
  void *v74;
  _DWORD *exception;
  __int128 v76;
  uint64_t v77;
  AudioObjectPropertyAddress v78[2];
  uint64_t v79;
  std::runtime_error outputStruct;
  std::runtime_error v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  char v87;
  _BYTE buf[18];
  __int16 v89;
  int v90;
  __int16 v91;
  _BYTE v92[14];
  const char *v93;
  int v94;
  uint64_t v95;
  __int128 v96;

  v11 = a6;
  v95 = *MEMORY[0x1E0C80C00];
  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1819107690)
  {
    if (mSelector > 1735354733)
    {
      if (mSelector <= 1768124269)
      {
        if (mSelector <= 1751412336)
        {
          if (mSelector == 1735354734 || mSelector == 1735356005)
          {
            if (a4 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_IOUAClockDevice.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 400;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOUAClockDevice::GetPropertyData: bad property data size for kAudioDevicePropertyDeviceIsRunning", buf, 0x12u);
              }
              exception = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)exception = &off_1E69A1B30;
              exception[2] = 561211770;
            }
            *(_DWORD *)a6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 55) + 672))(*((_QWORD *)this + 55));
            v18 = 4;
LABEL_96:
            a5->mSelector = v18;
            return;
          }
          goto LABEL_98;
        }
        if (mSelector == 1751412337)
          goto LABEL_65;
        v19 = 1751737454;
        goto LABEL_64;
      }
      if (mSelector > 1818850144)
      {
        if (mSelector != 1818850145)
        {
          v19 = 1818850162;
          goto LABEL_64;
        }
      }
      else if (mSelector != 1768124270)
      {
        v19 = 1768777573;
        goto LABEL_64;
      }
      goto LABEL_65;
    }
    if (mSelector <= 1668510817)
    {
      if (mSelector == 1634429294 || mSelector == 1668049764)
        goto LABEL_65;
      v19 = 1668050795;
LABEL_64:
      if (mSelector == v19)
        goto LABEL_65;
LABEL_98:
      if (HALS_ClockDevice::HasProperty((uint64_t)this, a2, (int *)a3))
        HALS_ClockDevice::GetPropertyData(this, a2, a3, a4, &a5->mSelector, v11, a7, a8, a9);
      else
        HALS_IOUAObject::GetPropertyData((HALS_IOUAClockDevice *)((char *)this + 368), &a3->mSelector, a5, (AMCP::Log::Scope_Registry **)v11, (unsigned int *)a8, v62, v63, v64, a9);
      return;
    }
    if (mSelector > 1668641651)
    {
      if (mSelector == 1668641652)
      {
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 50) - *((_QWORD *)this + 49)) >> 2) >= a4 / 0xCuLL)
          v55 = a4 / 0xCuLL;
        else
          v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 50) - *((_QWORD *)this + 49)) >> 2);
        if (v55)
        {
          v56 = 0;
          v57 = 0;
          do
          {
            v58 = *((_QWORD *)this + 49);
            if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 50) - v58) >> 2) > v57)
            {
              v59 = (char *)a6 + v56;
              v60 = (uint64_t *)(v58 + v56);
              v61 = *v60;
              *((_DWORD *)v59 + 2) = *((_DWORD *)v60 + 2);
              *(_QWORD *)v59 = v61;
            }
            ++v57;
            v56 += 12;
          }
          while (12 * v55 != v56);
        }
        v18 = 12 * v55;
        goto LABEL_96;
      }
      v19 = 1684434036;
      goto LABEL_64;
    }
    if (mSelector == 1668510818)
    {
LABEL_65:
      v81.__vftable = (std::runtime_error_vtbl *)a4;
      v41 = *((_QWORD *)this + 47);
      v42 = *(_QWORD *)(v41 + 792);
      v43 = *(std::__shared_weak_count **)(v41 + 800);
      *(_QWORD *)buf = v42;
      *(_QWORD *)&buf[8] = v43;
      if (v43)
      {
        p_shared_owners = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldxr(p_shared_owners);
        while (__stxr(v45 + 1, p_shared_owners));
      }
      HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v42 + 4), a3, *((_DWORD *)this + 96), a8, a7, a6, (unint64_t *)&v81);
      if (v43)
      {
        v46 = (unint64_t *)&v43->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      a5->mSelector = (AudioObjectPropertySelector)v81.__vftable;
      return;
    }
    v20 = 1668639076;
    goto LABEL_76;
  }
  if (mSelector > 1853059699)
  {
    if (mSelector <= 1936092275)
    {
      if (mSelector <= 1920168546)
      {
        if (mSelector != 1853059700)
        {
          v19 = 1919512167;
          goto LABEL_64;
        }
        goto LABEL_65;
      }
      if (mSelector == 1920168547)
        goto LABEL_65;
      if (mSelector != 1935763060)
        goto LABEL_98;
      goto LABEL_60;
    }
    if (mSelector <= 1953653101)
    {
      if (mSelector != 1936092276)
      {
        v19 = 1936876644;
        goto LABEL_64;
      }
      goto LABEL_65;
    }
    if (mSelector == 1953653102)
      goto LABEL_65;
    v20 = 1969841184;
    goto LABEL_76;
  }
  if (mSelector <= 1819569762)
  {
    if (mSelector != 1819107691 && mSelector != 1819111268)
    {
      v20 = 1819173229;
      goto LABEL_76;
    }
    goto LABEL_77;
  }
  if (mSelector <= 1851878763)
  {
    if (mSelector == 1819569763)
    {
LABEL_60:
      if (a4 <= 3)
      {
        AMCP::Log::Scope_Registry::get(this);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v71 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
        {
          v72 = pthread_self();
          v73 = pthread_mach_thread_np(v72);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v73;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "HALS_IOUAClockDevice.cpp";
          v89 = 1024;
          v90 = 337;
          v91 = 2080;
          *(_QWORD *)v92 = "inDataSize < SizeOf32(UInt32)";
          _os_log_error_impl(&dword_1B57BA000, v71, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s bad property data size", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v87);
        v74 = __cxa_allocate_exception(0x40uLL);
        std::runtime_error::runtime_error(&outputStruct, "kAudioHardwareBadPropertySizeError");
        std::runtime_error::runtime_error(&v81, &outputStruct);
        v83 = 0;
        v84 = 0;
        v85 = 0;
        v86 = -1;
        v81.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v82 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v81);
        *(_QWORD *)&v92[6] = "virtual void HALS_IOUAClockDevice::GetPropertyData(AudioObjectID, const AudioObjectProperty"
                             "Address &, UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
        v93 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAClockDevice.cpp";
        v94 = 337;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v76);
        *(_QWORD *)&v78[0].mSelector = off_1E69A20A0;
        *(_OWORD *)&v78[0].mElement = v76;
        v79 = v77;
        v76 = 0uLL;
        v77 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)v78);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v74, (uint64_t)buf);
      }
      a5->mSelector = 4;
      *(_DWORD *)a6 = 0;
      return;
    }
    v20 = 1836411236;
LABEL_76:
    if (mSelector != v20)
      goto LABEL_98;
    goto LABEL_77;
  }
  if (mSelector == 1851878764)
  {
LABEL_77:
    v48 = *((_QWORD *)this + 47);
    v49 = *(_QWORD *)(v48 + 792);
    v50 = *(std::__shared_weak_count **)(v48 + 800);
    *(_QWORD *)buf = v49;
    *(_QWORD *)&buf[8] = v50;
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    *(_QWORD *)&v96 = *((unsigned int *)this + 96);
    *((_QWORD *)&v96 + 1) = *(_QWORD *)&a3->mSelector;
    HALS_IOUAUCDriver::get_string_property((HALS_IOUAUCDriver *)&v81, v49, v96, (void *)a3->mElement, a8, a7);
    if (v50)
    {
      v53 = (unint64_t *)&v50->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    *v11 = (uint64_t)CFRetain(v81.__vftable);
    a5->mSelector = 8;
    if (v81.__vftable)
      CFRelease(v81.__vftable);
    return;
  }
  if (mSelector != 1853059619)
    goto LABEL_98;
  v81.__vftable = (std::runtime_error_vtbl *)0x676C6F626E737223;
  LODWORD(v81.__imp_.__imp_) = 0;
  v21 = *((_QWORD *)this + 47);
  v22 = *(_QWORD *)(v21 + 792);
  v23 = *(std::__shared_weak_count **)(v21 + 800);
  *(_QWORD *)buf = v22;
  *(_QWORD *)&buf[8] = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  HasProperty = HALS_IOUAUCDriver::GetHasProperty((HALS_IOUAUCDriver *)*(unsigned int *)(v22 + 4), (const AudioObjectPropertyAddress *)&v81, *((_DWORD *)this + 96));
  v27 = HasProperty;
  if (v23)
  {
    v28 = (unint64_t *)&v23->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (!v27)
  {
    *(_QWORD *)&v76 = 8;
    outputStruct.__vftable = 0;
    strcpy((char *)v78, "trsnbolg");
    BYTE1(v78[0].mElement) = 0;
    HIWORD(v78[0].mElement) = 0;
    v65 = *((_QWORD *)this + 47);
    v66 = *(_QWORD *)(v65 + 792);
    v67 = *(_QWORD *)(v65 + 800);
    *(_QWORD *)buf = v66;
    *(_QWORD *)&buf[8] = v67;
    if (v67)
    {
      v68 = (unint64_t *)(v67 + 8);
      do
        v69 = __ldxr(v68);
      while (__stxr(v69 + 1, v68));
    }
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v66 + 4), v78, *((_DWORD *)this + 96), 0, 0, &outputStruct, (unint64_t *)&v76);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (a4 < 0x10)
    {
      v18 = 0;
    }
    else
    {
      v70 = outputStruct.__vftable;
      *v11 = (uint64_t)outputStruct.__vftable;
      v11[1] = (uint64_t)v70;
      v18 = 16;
    }
    goto LABEL_96;
  }
  MEMORY[0x1E0C80A78](HasProperty);
  v31 = (const double *)((char *)&v76 - v30);
  *(_QWORD *)&v78[0].mSelector = v32;
  v33 = *((_QWORD *)this + 47);
  v34 = *(_QWORD *)(v33 + 792);
  v35 = *(_QWORD *)(v33 + 800);
  *(_QWORD *)buf = v34;
  *(_QWORD *)&buf[8] = v35;
  if (v35)
  {
    v36 = (unint64_t *)(v35 + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v34 + 4), (const AudioObjectPropertyAddress *)&v81, *((_DWORD *)this + 96), a8, a7, (char *)&v76 - v30, (unint64_t *)&v78[0].mSelector);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
  v38 = *(_QWORD *)&v78[0].mSelector >> 3;
  if (*(_QWORD *)&v78[0].mSelector >= 8uLL)
  {
    if (v38 <= 1)
      v39 = 1;
    else
      v39 = *(_QWORD *)&v78[0].mSelector >> 3;
    do
    {
      v40 = vld1q_dup_f64(v31++);
      *(float64x2_t *)v11 = v40;
      v11 += 2;
      --v39;
    }
    while (v39);
  }
  a5->mSelector = 16 * v38;
}

void sub_1B585F3AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1 - 160);
  _Unwind_Resume(a1);
}

void HALS_IOUAClockDevice::SetPropertyData(HALS_IOUAClockDevice *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, const AudioObjectPropertyAddress *a5, unsigned int a6, void *a7, HALS_Client *a8)
{
  uint64_t v12;
  HALS_IOUAUCDriver *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  const void *v24;
  HALS_Client *v25;
  NSObject *v26;
  _opaque_pthread_t *v27;
  mach_port_t v28;
  void *exception;
  __int128 v30;
  uint64_t v31;
  uint64_t (**v32)();
  __int128 v33;
  uint64_t v34;
  std::runtime_error v35;
  std::runtime_error v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  uint8_t buf[8];
  _BYTE v44[10];
  __int16 v45;
  int v46;
  __int16 v47;
  _BYTE v48[14];
  const char *v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (a3->mSelector == 1853059700)
  {
    if (a4 <= 7)
    {
      AMCP::Log::Scope_Registry::get(this);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v26 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        v27 = pthread_self();
        v28 = pthread_mach_thread_np(v27);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v28;
        *(_WORD *)v44 = 2080;
        *(_QWORD *)&v44[2] = "HALS_IOUAClockDevice.cpp";
        v45 = 1024;
        v46 = 477;
        v47 = 2080;
        *(_QWORD *)v48 = "inDataSize < SizeOf32(Float64)";
        _os_log_error_impl(&dword_1B57BA000, v26, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s bad property data size for kAudioDevicePropertyNominalSampleRate", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v42);
      exception = __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v35, "kAudioHardwareBadPropertySizeError");
      std::runtime_error::runtime_error(&v36, &v35);
      v38 = 0;
      v39 = 0;
      v40 = 0;
      v41 = -1;
      v36.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v37 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
      *(_QWORD *)&v48[6] = "virtual void HALS_IOUAClockDevice::SetPropertyData(AudioObjectID, const AudioObjectPropertyAd"
                           "dress &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
      v49 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAClockDevice.cpp";
      v50 = 477;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v30);
      v32 = off_1E69A20A0;
      v33 = v30;
      v34 = v31;
      v30 = 0uLL;
      v31 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v32);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
    }
    v12 = *((_QWORD *)this + 47);
    v13 = *(HALS_IOUAUCDriver **)(v12 + 792);
    v14 = *(std::__shared_weak_count **)(v12 + 800);
    *(_QWORD *)buf = v13;
    *(_QWORD *)v44 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    HALS_IOUAUCDriver::SetPropertyData(v13, a3, *((_DWORD *)this + 96), a7, a6, a5, a4);
    if (v14)
    {
      v17 = (unint64_t *)&v14->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  else
  {
    if (HALS_ClockDevice::HasProperty((uint64_t)this, a2, (int *)a3))
      HALS_Object::SetPropertyData((uint64_t)this, a2, (uint64_t)a3, v21, (uint64_t)v22, v23, (uint64_t)v24, (uint64_t)a8);
    HALS_IOUAObject::SetPropertyData((HALS_IOUAClockDevice *)((char *)this + 368), &a3->mSelector, a5, (CFTypeRef *)a7, v22, v23, v24, v25);
  }
}

void sub_1B585F808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,uint64_t a29,uint64_t a30)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t HALS_ClockDevice::GetDeviceUID(HALS_ClockDevice *this)
{
  return *((_QWORD *)this + 12);
}

const void *HALS_ClockDevice::CopyDeviceUID(HALS_ClockDevice *this)
{
  const void *result;

  result = (const void *)*((_QWORD *)this + 12);
  if (result)
  {
    CFRetain(result);
    return (const void *)*((_QWORD *)this + 12);
  }
  return result;
}

uint64_t HALS_ClockDevice::GetDebugDeviceUID(HALS_ClockDevice *this)
{
  return (uint64_t)this + 112;
}

uint64_t HALS_IODevice::CanBeAggregated(HALS_IODevice *this)
{
  return 1;
}

uint64_t HALS_IODevice::DoAnyQueuesHaveWorkAfterFlush(HALS_IODevice *this)
{
  return 0;
}

float HALS_ClockDevice::GetCombinedVolumeScalarForClient(HALS_ClockDevice *this)
{
  return 0.0;
}

void HALS_IOUAClockDevice::create_mcp_engine(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

double HALS_IODevice::GetNominalSampleRate(HALS_IODevice *this)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  int v5;
  double v6;

  v1 = *((unsigned int *)this + 4);
  v3 = 0x676C6F626E737274;
  v4 = 0;
  v6 = 0.0;
  v5 = 0;
  (*(void (**)(HALS_IODevice *, uint64_t, uint64_t *, uint64_t, int *, double *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, v1, &v3, 8, &v5, &v6, 0, 0, 0);
  return v6;
}

uint64_t HALS_IODevice::SetNominalSampleRate(unsigned int *a1, uint64_t a2, double a3)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  double v8;

  v4 = a1[4];
  v6 = 0x676C6F626E737274;
  v7 = 0;
  v8 = a3;
  return (*(uint64_t (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, double *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 120))(a1, v4, &v6, 8, &v8, 0, 0, a2);
}

uint64_t HALS_IODevice::GetNumberNominalSampleRateRanges(HALS_IODevice *this)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  v1 = *((unsigned int *)this + 4);
  v3 = 0x676C6F626E737223;
  v4 = 0;
  return (*(unsigned int (**)(HALS_IODevice *, uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 104))(this, v1, &v3, 0, 0, 0) >> 4;
}

uint64_t HALS_IODevice::GetNominalSampleRateRanges(HALS_IODevice *this, int a2, unsigned int *a3, AudioValueRange *a4)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  unsigned int v9;

  v5 = *((unsigned int *)this + 4);
  v7 = 0x676C6F626E737223;
  v8 = 0;
  v9 = 0;
  result = (*(uint64_t (**)(HALS_IODevice *, uint64_t, uint64_t *, _QWORD, unsigned int *, AudioValueRange *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, v5, &v7, (16 * a2), &v9, a4, 0, 0, 0);
  *a3 = v9 >> 4;
  return result;
}

uint64_t HALS_IODevice::GetRingBufferFrameSize(HALS_IODevice *this)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v1 = *((unsigned int *)this + 4);
  v3 = 0x676C6F6272696E67;
  v4 = 0;
  v5 = 0;
  (*(void (**)(HALS_IODevice *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, v1, &v3, 4, &v5, (char *)&v5 + 4, 0, 0, 0);
  return HIDWORD(v5);
}

uint64_t HALS_IODevice::GetLatency(HALS_IODevice *this, int a2)
{
  uint64_t v2;
  int v3;
  _DWORD v5[3];
  uint64_t v6;

  v2 = *((unsigned int *)this + 4);
  if (a2)
    v3 = 1768845428;
  else
    v3 = 1869968496;
  v5[0] = 1819569763;
  v5[1] = v3;
  v5[2] = 0;
  v6 = 0;
  (*(void (**)(HALS_IODevice *, uint64_t, _DWORD *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, v2, v5, 4, &v6, (char *)&v6 + 4, 0, 0, 0);
  return HIDWORD(v6);
}

uint64_t HALS_IODevice::GetSafetyOffset(HALS_IODevice *this, int a2)
{
  uint64_t v2;
  int v3;
  _DWORD v5[3];
  uint64_t v6;

  v2 = *((unsigned int *)this + 4);
  if (a2)
    v3 = 1768845428;
  else
    v3 = 1869968496;
  v5[0] = 1935763060;
  v5[1] = v3;
  v5[2] = 0;
  v6 = 0;
  (*(void (**)(HALS_IODevice *, uint64_t, _DWORD *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, v2, v5, 4, &v6, (char *)&v6 + 4, 0, 0, 0);
  return HIDWORD(v6);
}

uint64_t HALS_IODevice::GetClockDomain(HALS_IODevice *this)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v1 = *((unsigned int *)this + 4);
  v3 = 0x676C6F62636C6B64;
  v4 = 0;
  v5 = 0;
  (*(void (**)(HALS_IODevice *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, v1, &v3, 4, &v5, (char *)&v5 + 4, 0, 0, 0);
  return HIDWORD(v5);
}

uint64_t HALS_IOUAClockDevice::GetClockAlgorithm(HALS_IOUAClockDevice *this)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  int v5;

  v5 = 0;
  v4 = *(_QWORD *)"kolcbolg";
  v2 = 4;
  v3 = 0;
  (*(void (**)(HALS_IOUAClockDevice *, _QWORD, uint64_t *, uint64_t, int *, unsigned int *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, *((unsigned int *)this + 96), &v4, 4, &v2, &v3, 0, 0, 0);
  return v3;
}

BOOL HALS_IOUAClockDevice::IsClockStable(HALS_IOUAClockDevice *this)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;

  v5 = 0;
  v4 = *(_QWORD *)"btscbolg";
  v2 = 4;
  v3 = 0;
  (*(void (**)(HALS_IOUAClockDevice *, _QWORD, uint64_t *, uint64_t, int *, int *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, *((unsigned int *)this + 96), &v4, 4, &v2, &v3, 0, 0, 0);
  return v3 != 0;
}

BOOL HALS_IODevice::GetIsRunningSomewhere(HALS_IODevice *this)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v1 = *((unsigned int *)this + 4);
  v3 = 0x676C6F62676F6E65;
  v4 = 0;
  v5 = 0;
  (*(void (**)(HALS_IODevice *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, v1, &v3, 4, &v5, (char *)&v5 + 4, 0, 0, 0);
  return HIDWORD(v5) != 0;
}

uint64_t HALS_ClockDevice::_GetNumberStreams(HALS_ClockDevice *this)
{
  return 0;
}

uint64_t HALS_ClockDevice::_CopyStreamByIndex(HALS_ClockDevice *this)
{
  return 0;
}

HALS_ObjectMap *HALS_IOUAClockDevice::_CopyIOEngine(HALS_ObjectMap **this, HALS_Object *a2)
{
  HALS_ObjectMap::RetainObject(this[55], a2);
  return this[55];
}

uint64_t HALS_ClockDevice::SupportsPastData(HALS_ClockDevice *this)
{
  return 0;
}

uint64_t HALS_ClockDevice::AvailablePastData(HALS_ClockDevice *this)
{
  return 0;
}

uint64_t HALS_ClockDevice::MaximumPastData(HALS_ClockDevice *this)
{
  return 0;
}

uint64_t HALS_IODevice::ReapplyDSP(HALS_IODevice *this)
{
  return 0;
}

uint64_t HALS_IODevice::HasValidDSP(HALS_IODevice *this)
{
  return 0;
}

uint64_t HALS_IODevice::GetDSPScope(HALS_IODevice *this)
{
  return 0;
}

uint64_t HALS_IOUAClockDevice::PerformNonDriverConfigChange(HALS_IOUAClockDevice *this, BOOL a2, int a3)
{
  __int128 v4;
  char v5;

  v4 = 0uLL;
  v5 = 0;
  return HALS_IOUAClockDevice::HandleConfigurationChangeRequest((uint64_t)this, &v4, a3);
}

void HALS_IOUAClockDevice::_CopyControls(uint64_t a1, void **a2)
{
  HALS_ObjectMap **v2;
  HALS_ObjectMap **v3;
  void **v4;
  unint64_t v5;
  HALS_ObjectMap **v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  HALS_ObjectMap **v12;
  char *v13;
  char *v14;
  HALS_ObjectMap *v15;

  v2 = *(HALS_ObjectMap ***)(a1 + 416);
  v3 = *(HALS_ObjectMap ***)(a1 + 424);
  if (v2 != v3)
  {
    v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, (HALS_Object *)a2);
      v6 = (HALS_ObjectMap **)v4[1];
      v5 = (unint64_t)v4[2];
      if ((unint64_t)v6 >= v5)
      {
        v8 = ((char *)v6 - (_BYTE *)*v4) >> 3;
        if ((unint64_t)(v8 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v9 = v5 - (_QWORD)*v4;
        v10 = v9 >> 2;
        if (v9 >> 2 <= (unint64_t)(v8 + 1))
          v10 = v8 + 1;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v11);
        else
          a2 = 0;
        v12 = (HALS_ObjectMap **)(v11 + 8 * v8);
        *v12 = *v2;
        v7 = v12 + 1;
        v14 = (char *)*v4;
        v13 = (char *)v4[1];
        if (v13 != *v4)
        {
          do
          {
            v15 = (HALS_ObjectMap *)*((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v12 = v15;
          }
          while (v13 != v14);
          v13 = (char *)*v4;
        }
        *v4 = v12;
        v4[1] = v7;
        v4[2] = (void *)(v11 + 8 * (_QWORD)a2);
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v6 = *v2;
        v7 = v6 + 1;
      }
      v4[1] = v7;
      ++v2;
    }
    while (v2 != v3);
  }
}

uint64_t HALS_IOUAClockDevice::_GetNumberControls(HALS_IOUAClockDevice *this)
{
  return (*((_QWORD *)this + 53) - *((_QWORD *)this + 52)) >> 3;
}

HALS_ObjectMap *HALS_IOUAClockDevice::_CopyControlByIndex(HALS_IOUAClockDevice *this, HALS_Object *a2)
{
  uint64_t v2;
  HALS_ObjectMap *v3;

  v2 = *((_QWORD *)this + 52);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 53) - v2) >> 3))
    v3 = 0;
  else
    v3 = *(HALS_ObjectMap **)(v2 + 8 * a2);
  HALS_ObjectMap::RetainObject(v3, a2);
  return v3;
}

HALS_ObjectMap *HALS_IOUAClockDevice::_CopyControlByDescription(HALS_IOUAClockDevice *this, HALS_Object *a2, int a3, int a4)
{
  HALS_ObjectMap **v4;
  HALS_ObjectMap **v5;
  HALS_ObjectMap *v6;
  HALS_ObjectMap *v7;

  v4 = (HALS_ObjectMap **)*((_QWORD *)this + 52);
  v5 = (HALS_ObjectMap **)*((_QWORD *)this + 53);
  if (v4 != v5)
  {
    while (1)
    {
      v6 = *v4;
      if (*v4)
      {
        if (*((_DWORD *)v6 + 5) == (_DWORD)a2 && *((_DWORD *)v6 + 12) == a3 && *((_DWORD *)v6 + 13) == a4)
          break;
      }
      if (++v4 == v5)
        return 0;
    }
  }
  if (v4 == v5)
    return 0;
  v7 = *v4;
  HALS_ObjectMap::RetainObject(*v4, a2);
  return v7;
}

void `non-virtual thunk to'HALS_IOUAClockDevice::~HALS_IOUAClockDevice(HALS_IOUAClockDevice *this)
{
  HALS_IOUAClockDevice::~HALS_IOUAClockDevice((HALS_IOUAClockDevice *)((char *)this - 368));
}

{
  HALS_IOUAClockDevice::~HALS_IOUAClockDevice((HALS_IOUAClockDevice *)((char *)this - 368));
  JUMPOUT(0x1B5E50688);
}

uint64_t HALS_IOUAClockDevice::HandleConfigurationChangeRequest(uint64_t a1, __int128 *a2, int a3)
{
  unsigned __int8 v3;
  uint64_t v4;
  _QWORD v6[6];
  __int128 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZN20HALS_IOUAClockDevice32HandleConfigurationChangeRequestENS_19ConfigChangePayloadEbj_block_invoke;
  v6[3] = &unk_1E696EB58;
  v7 = *a2;
  v8 = *((_QWORD *)a2 + 2);
  v6[4] = &v10;
  v6[5] = a1;
  v9 = a3;
  v3 = atomic_load((unsigned __int8 *)(a1 + 480));
  if ((v3 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(a1 + 481));
  dispatch_async(*(dispatch_queue_t *)(a1 + 448), v6);
  v4 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v4;
}

uint64_t ___ZN20HALS_IOUAClockDevice32HandleConfigurationChangeRequestENS_19ConfigChangePayloadEbj_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const AudioObjectPropertyAddress *v3;
  HALS_NotificationManager *v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  HALS_ClockDeviceState *v15;
  int v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  AMCP::Log::Scope_Registry *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  NSObject *v27;
  unint64_t *v28;
  unint64_t v29;
  NSObject *v30;
  const char *v31;
  _BOOL4 updated;
  CAPropertyAddressList *v33;
  const AudioObjectPropertyAddress *v34;
  const AudioObjectPropertyAddress *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _opaque_pthread_t *v51;
  mach_port_t v52;
  int v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  AudioObjectPropertyAddress v56;
  void *__p;
  void *v58;
  uint64_t v59;
  CFTypeRef cf;
  uint64_t v61;
  std::__shared_weak_count *v62;
  void *v63;
  unsigned int *v64;
  uint64_t v65;
  AudioObjectPropertyAddress v66;
  __int16 v67;
  int v68;
  __int16 v69;
  uint64_t v70;
  _BYTE v71[30];
  _BYTE v72[28];
  AudioObjectPropertyAddress buf[3];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  kdebug_trace();
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    buf[0].mSelector = 136315650;
    *(_QWORD *)&buf[0].mScope = "HALS_IOUAClockDevice.cpp";
    LOWORD(buf[1].mSelector) = 1024;
    *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 735;
    HIWORD(buf[1].mScope) = 2080;
    *(_QWORD *)&buf[1].mElement = v2 + 112;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUAClockDevice::HandleConfigurationChangeRequest: %s  --->", (uint8_t *)buf, 0x1Cu);
  }
  memset(buf, 0, 32);
  v4 = (HALS_NotificationManager *)*(unsigned int *)(v2 + 16);
  strcpy(v72, "bgfcbolg");
  v72[9] = 0;
  *(_WORD *)&v72[10] = 0;
  HALS_NotificationManager::PropertiesChanged_Sync(v4, 0, 1u, (const AudioObjectPropertyAddress *)v72, v3);
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v61 = 0;
  v62 = 0;
  HALS_System::GetInstance(v72, 0, &v61);
  v5 = *(_QWORD *)v72;
  v6 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 200))(v2);
  v7 = v6;
  if (v6)
    CFRetain(v6);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v7);
  HALS_System::GetRawDeviceListUsingClockDevice(v5, (uint64_t)&v63, &cf);
  if (cf)
    CFRelease(cf);
  v8 = *(std::__shared_weak_count **)&v72[8];
  if (*(_QWORD *)&v72[8])
  {
    v9 = (unint64_t *)(*(_QWORD *)&v72[8] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v62;
  if (v62)
  {
    p_shared_owners = (unint64_t *)&v62->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  __p = 0;
  v58 = 0;
  v59 = 0;
  v14 = *(_QWORD *)(v2 + 440);
  if (v14)
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v14 + 216))(v14, &__p);
  HALS_ClockDeviceState::HALS_ClockDeviceState((HALS_ClockDeviceState *)v72);
  HALS_ClockDeviceState::Capture(v15, (HALS_ClockDevice *)v2, (const CAPropertyAddressList *)HALS_ClockDeviceState::sStandardDevicePropertiesToCapture);
  v16 = *(unsigned __int8 *)(a1 + 64);
  v17 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
  if (!v16)
  {
    if (!v17)
      goto LABEL_43;
    *(_DWORD *)v71 = 136315650;
    *(_QWORD *)&v71[4] = "HALS_IOUAClockDevice.cpp";
    *(_WORD *)&v71[12] = 1024;
    *(_DWORD *)&v71[14] = 785;
    *(_WORD *)&v71[18] = 2080;
    *(_QWORD *)&v71[20] = v2 + 112;
    v30 = MEMORY[0x1E0C81028];
    v31 = "%25s:%-5d  HALS_IOUAClockDevice::HandleConfigurationChangeRequest: %s  --- skipping driver config change";
    goto LABEL_42;
  }
  if (v17)
  {
    *(_DWORD *)v71 = 136315650;
    *(_QWORD *)&v71[4] = "HALS_IOUAClockDevice.cpp";
    *(_WORD *)&v71[12] = 1024;
    *(_DWORD *)&v71[14] = 766;
    *(_WORD *)&v71[18] = 2080;
    *(_QWORD *)&v71[20] = v2 + 112;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUAClockDevice::HandleConfigurationChangeRequest: %s  --- calling driver", v71, 0x1Cu);
  }
  kdebug_trace();
  v18 = *(_QWORD *)(v2 + 376);
  v19 = *(_QWORD *)(v18 + 792);
  v20 = *(std::__shared_weak_count **)(v18 + 800);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = (AMCP::Log::Scope_Registry *)HALS_IOUAUCDriver::perform_config_change((HALS_IOUAUCDriver *)*(unsigned int *)(v19 + 4), *(_DWORD *)(v2 + 384), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (_DWORD)v23;
  if (v20)
  {
    v24 = (unint64_t *)&v20->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    AMCP::Log::Scope_Registry::get(v23);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v71, "com.apple.coreaudio", "AMCP");
    v26 = *(std::__shared_weak_count **)&v71[8];
    v27 = **(NSObject ***)v71;
    if (*(_QWORD *)&v71[8])
    {
      v28 = (unint64_t *)(*(_QWORD *)&v71[8] + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      v51 = pthread_self();
      v52 = pthread_mach_thread_np(v51);
      v53 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      *(_DWORD *)v71 = 67109890;
      *(_DWORD *)&v71[4] = v52;
      *(_WORD *)&v71[8] = 2080;
      *(_QWORD *)&v71[10] = "HALS_IOUAClockDevice.cpp";
      *(_WORD *)&v71[18] = 1024;
      *(_DWORD *)&v71[20] = 774;
      *(_WORD *)&v71[24] = 1024;
      *(_DWORD *)&v71[26] = v53;
      _os_log_error_impl(&dword_1B57BA000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception performing config change %u", v71, 0x1Eu);
    }
  }
  kdebug_trace();
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v71 = 136315650;
    *(_QWORD *)&v71[4] = "HALS_IOUAClockDevice.cpp";
    *(_WORD *)&v71[12] = 1024;
    *(_DWORD *)&v71[14] = 779;
    *(_WORD *)&v71[18] = 2080;
    *(_QWORD *)&v71[20] = v2 + 112;
    v30 = MEMORY[0x1E0C81028];
    v31 = "%25s:%-5d  HALS_IOUAClockDevice::HandleConfigurationChangeRequest: %s  --- driver returned";
LABEL_42:
    _os_log_impl(&dword_1B57BA000, v30, OS_LOG_TYPE_DEFAULT, v31, v71, 0x1Cu);
  }
LABEL_43:
  updated = HALS_IOUAClockDevice::UpdateControls((HALS_IOUAClockDevice *)v2);
  HALS_ClockDeviceState::HALS_ClockDeviceState((HALS_ClockDeviceState *)v71);
  HALS_ClockDeviceState::Capture((HALS_ClockDeviceState *)v71, (HALS_ClockDevice *)v2, (const CAPropertyAddressList *)HALS_ClockDeviceState::sStandardDevicePropertiesToCapture);
  HALS_ClockDeviceState::Compare((HALS_ClockDeviceState *)v72, (const HALS_ClockDeviceState *)v71, buf, v33);
  *(_QWORD *)&v56.mSelector = 0x676C6F6200000000;
  if (updated)
  {
    v56.mSelector = 1668575852;
    v56.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)buf, &v56, v34);
  }
  if (*(_QWORD *)&buf[0].mSelector == *(_QWORD *)&buf[0].mElement)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v66.mSelector = 136315650;
      *(_QWORD *)&v66.mScope = "HALS_IOUAClockDevice.cpp";
      v67 = 1024;
      v68 = 823;
      v69 = 2080;
      v70 = v2 + 112;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUAClockDevice::HandleConfigurationChangeRequest: %s  but nothing changed", (uint8_t *)&v66, 0x1Cu);
    }
  }
  else
  {
    *(_QWORD *)&v56.mSelector = 0x676C6F6264696666;
    v56.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)buf, &v56, v34);
  }
  strcpy((char *)&v66, "egfcbolg");
  BYTE1(v66.mElement) = 0;
  HIWORD(v66.mElement) = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)buf, &v66, v35);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*(_QWORD **)&v71[16]);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*(_QWORD **)&v72[16]);
  v36 = *(_QWORD *)(v2 + 440);
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 928))(v36);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v72 = 136315650;
    *(_QWORD *)&v72[4] = "HALS_IOUAClockDevice.cpp";
    *(_WORD *)&v72[12] = 1024;
    *(_DWORD *)&v72[14] = 843;
    *(_WORD *)&v72[18] = 2080;
    *(_QWORD *)&v72[20] = v2 + 112;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUAClockDevice::HandleConfigurationChangeRequest: %s  --- sending notifications", v72, 0x1Cu);
  }
  kdebug_trace();
  v37 = *(_DWORD *)(v2 + 16);
  v38 = *(_DWORD *)(a1 + 72);
  memset(v72, 0, 24);
  HALS_NotificationManager::GroupPropertiesChanged(1, v37, v38, (uint64_t)buf, (uint64_t *)v72, (uint64_t)&__p);
  *(_QWORD *)v71 = v72;
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
  v39 = (unsigned int *)v63;
  v40 = v64;
  if (v63 != v64)
  {
    do
    {
      v41 = *v39;
      v42 = *(_DWORD *)(a1 + 72);
      memset(v72, 0, 24);
      HALS_NotificationManager::GroupPropertiesChanged(1, v41, v42, (uint64_t)buf, (uint64_t *)v72, (uint64_t)&__p);
      *(_QWORD *)v71 = v72;
      std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
      ++v39;
    }
    while (v39 != v40);
  }
  kdebug_trace();
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v72 = 136315650;
    *(_QWORD *)&v72[4] = "HALS_IOUAClockDevice.cpp";
    *(_WORD *)&v72[12] = 1024;
    *(_DWORD *)&v72[14] = 857;
    *(_WORD *)&v72[18] = 2080;
    *(_QWORD *)&v72[20] = v2 + 112;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUAClockDevice::HandleConfigurationChangeRequest: %s  --- restarting IO", v72, 0x1Cu);
  }
  v43 = *(_QWORD *)(v2 + 440);
  if (v43)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 232))(v43);
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v2 + 440) + 224))(*(_QWORD *)(v2 + 440), &__p);
  }
  v54 = 0;
  v55 = 0;
  HALS_System::GetInstance(v72, 0, &v54);
  HALS_System::CheckForDefaultDeviceChanges(*(HALS_System **)v72);
  v44 = *(std::__shared_weak_count **)&v72[8];
  if (*(_QWORD *)&v72[8])
  {
    v45 = (unint64_t *)(*(_QWORD *)&v72[8] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = v55;
  if (v55)
  {
    v48 = (unint64_t *)&v55->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (__p)
  {
    v58 = __p;
    operator delete(__p);
  }
  if (v63)
    operator delete(v63);
  if (*(_QWORD *)&buf[0].mSelector)
    operator delete(*(void **)&buf[0].mSelector);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    buf[0].mSelector = 136315650;
    *(_QWORD *)&buf[0].mScope = "HALS_IOUAClockDevice.cpp";
    LOWORD(buf[1].mSelector) = 1024;
    *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 877;
    HIWORD(buf[1].mScope) = 2080;
    *(_QWORD *)&buf[1].mElement = v2 + 112;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUAClockDevice::HandleConfigurationChangeRequest: %s  <---", (uint8_t *)buf, 0x1Cu);
  }
  return kdebug_trace();
}

void sub_1B5860AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL HALS_IOUAClockDevice::UpdateControls(HALS_IOUAClockDevice *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t PropertySize;
  unint64_t *v8;
  unint64_t v9;
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::pointer v11;
  std::vector<unsigned int>::pointer begin;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  HALB_Mutex *v20;
  _QWORD *v21;
  _QWORD *v22;
  HALS_IOUAControl **v23;
  HALS_IOUAControl **i;
  HALS_ObjectMap *v25;
  HALS_Object *v26;
  int v27;
  _QWORD v29[8];
  void *__p;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  __n128 (*v36)(_QWORD *, uint64_t);
  void (*v37)(uint64_t);
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  __n128 (*v44)(_QWORD *, uint64_t);
  void (*v45)(uint64_t);
  void *v46;
  void *v47;
  uint64_t v48;
  std::vector<unsigned int> v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  char v53;

  v50 = 0;
  v51 = &v50;
  v52 = 0x2000000000;
  v53 = 0;
  v2 = *((_QWORD *)this + 47);
  v3 = *(_QWORD *)(v2 + 792);
  v4 = *(std::__shared_weak_count **)(v2 + 800);
  v41 = v3;
  v42 = (uint64_t *)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v3 + 4), (const AudioObjectPropertyAddress *)"lrtcbolg", *((_DWORD *)this + 96), 0, 0);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (PropertySize >= 4)
  {
    std::vector<unsigned int>::vector(&v49, PropertySize >> 2);
    begin = v49.__begin_;
    v33 = (char *)v49.__end_ - (char *)v49.__begin_;
    v13 = *((_QWORD *)this + 47);
    v14 = *(_QWORD *)(v13 + 792);
    v15 = *(std::__shared_weak_count **)(v13 + 800);
    v41 = v14;
    v42 = (uint64_t *)v15;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v14 + 4), (const AudioObjectPropertyAddress *)"lrtcbolg", *((_DWORD *)this + 96), 0, 0, begin, &v33);
    if (v15)
    {
      v18 = (unint64_t *)&v15->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v11 = v49.__begin_;
    end = v49.__end_;
  }
  else
  {
    end = 0;
    v11 = 0;
    memset(&v49, 0, sizeof(v49));
  }
  v41 = 0;
  v42 = &v41;
  v43 = 0x4002000000;
  v44 = __Block_byref_object_copy__513;
  v45 = __Block_byref_object_dispose__514;
  v47 = 0;
  v48 = 0;
  v46 = 0;
  v33 = 0;
  v34 = &v33;
  v35 = 0x4002000000;
  v36 = __Block_byref_object_copy__513;
  v37 = __Block_byref_object_dispose__514;
  v39 = 0;
  v40 = 0;
  v38 = 0;
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 1174405120;
  v29[2] = ___ZN20HALS_IOUAClockDevice14UpdateControlsEv_block_invoke;
  v29[3] = &unk_1E696EB20;
  v29[7] = this;
  __p = 0;
  v29[4] = &v50;
  v31 = 0;
  v32 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v11, (uint64_t)end, end - v11);
  v29[5] = &v41;
  v29[6] = &v33;
  v20 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAClockDevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v20, (uint64_t)v29);
  v21 = (_QWORD *)v42[5];
  v22 = (_QWORD *)v42[6];
  while (v21 != v22)
  {
    (**(void (***)(_QWORD))*v21)(*v21);
    ++v21;
  }
  v23 = (HALS_IOUAControl **)v34[5];
  for (i = (HALS_IOUAControl **)v34[6]; v23 != i; ++v23)
  {
    v25 = *v23;
    if (HALS_IOUAControl::RefreshCache(*v23))
      *((_BYTE *)v51 + 24) = 1;
    HALS_ObjectMap::ReleaseObject(v25, v26);
  }
  v27 = *((unsigned __int8 *)v51 + 24);
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v33, 8);
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  _Block_object_dispose(&v41, 8);
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
  if (v49.__begin_)
  {
    v49.__end_ = v49.__begin_;
    operator delete(v49.__begin_);
  }
  _Block_object_dispose(&v50, 8);
  return v27 != 0;
}

void sub_1B5860FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34)
{
  uint64_t v34;
  void *v36;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  v36 = *(void **)(v34 - 104);
  if (v36)
  {
    *(_QWORD *)(v34 - 96) = v36;
    operator delete(v36);
  }
  _Block_object_dispose((const void *)(v34 - 80), 8);
  _Unwind_Resume(a1);
}

void std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 4);
        v6 -= 32;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 3) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 __Block_byref_object_copy__513(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__514(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN20HALS_IOUAClockDevice14UpdateControlsEv_block_invoke(_QWORD *a1, HALS_Object *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  HALS_ObjectMap **v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  int v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  HALS_Object *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  int v44;
  unint64_t *v45;
  unint64_t v46;
  HALS_Object *v47;
  unint64_t v48;
  HALS_Object **v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  HALS_Object **v56;
  char *v57;
  char *v58;
  HALS_Object *v59;
  HALS_ObjectMap *v60;
  char v61;
  HALS_Object *v62;
  HALS_ObjectMap **v63;
  HALS_ObjectMap *v64;
  HALS_Object *v65;
  char **v66;
  uint64_t *v67;
  uint64_t *v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  HALS_ObjectMap **v81;
  HALS_ObjectMap **v82;
  HALS_ObjectMap *v83;
  uint64_t v85;
  unint64_t v86;
  int outputStruct;
  unint64_t v88;
  int v89;
  unint64_t v90;
  unsigned int v91;
  unint64_t v92;
  int v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v2 = a1[8];
  v3 = a1[7];
  v4 = a1[9] - v2;
  v5 = *(_QWORD **)(a1[5] + 8);
  v6 = *(HALS_ObjectMap ***)(v3 + 416);
  v7 = *(char **)(v3 + 424);
  if (v6 != (HALS_ObjectMap **)v7)
  {
    v8 = *(char **)(v3 + 416);
    do
    {
      v9 = *(_QWORD *)v8;
      v8 += 8;
      *(_BYTE *)(v9 + 13) = 0;
    }
    while (v8 != v7);
  }
  if ((v4 & 0x3FFFFFFFCLL) != 0)
  {
    v10 = 0;
    v11 = (v4 >> 2);
    v85 = v11;
    while (1)
    {
      v12 = *(_QWORD *)(v3 + 416);
      v13 = *(_QWORD *)(v3 + 424);
      if (v12 != v13)
      {
        while (!*(_QWORD *)v12 || *(_DWORD *)(*(_QWORD *)v12 + 88) != *(_DWORD *)(v2 + 4 * v10))
        {
          v12 += 8;
          if (v12 == v13)
            goto LABEL_13;
        }
      }
      if (v12 == v13)
      {
LABEL_13:
        v14 = *(_DWORD *)(v2 + 4 * v10);
        if (v14)
        {
          v15 = *(_QWORD *)(v3 + 376);
          v16 = *(_QWORD *)(v15 + 792);
          v17 = *(std::__shared_weak_count **)(v15 + 800);
          if (v17)
          {
            p_shared_owners = (unint64_t *)&v17->__shared_owners_;
            do
              v19 = __ldxr(p_shared_owners);
            while (__stxr(v19 + 1, p_shared_owners));
          }
          outputStruct = 0;
          v86 = 4;
          HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v16 + 4), (const AudioObjectPropertyAddress *)"salcbolg", v14, 0, 0, &outputStruct, &v86);
          v20 = outputStruct;
          if (v17)
          {
            v21 = (unint64_t *)&v17->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
          v23 = *(_QWORD *)(v3 + 376);
          v24 = *(_QWORD *)(v23 + 792);
          v25 = *(std::__shared_weak_count **)(v23 + 800);
          if (v25)
          {
            v26 = (unint64_t *)&v25->__shared_owners_;
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
          }
          v89 = 0;
          v88 = 4;
          HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v24 + 4), (const AudioObjectPropertyAddress *)"slcbbolg", v14, 0, 0, &v89, &v88);
          v28 = v89;
          if (v25)
          {
            v29 = (unint64_t *)&v25->__shared_owners_;
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
          v31 = *(_QWORD *)(v3 + 376);
          v32 = *(_QWORD *)(v31 + 792);
          v33 = *(std::__shared_weak_count **)(v31 + 800);
          if (v33)
          {
            v34 = (unint64_t *)&v33->__shared_owners_;
            do
              v35 = __ldxr(v34);
            while (__stxr(v35 + 1, v34));
          }
          v91 = 0;
          v90 = 4;
          HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v32 + 4), (const AudioObjectPropertyAddress *)"pcscbolg", v14, 0, 0, &v91, &v90);
          v36 = (HALS_Object *)v91;
          if (v33)
          {
            v37 = (unint64_t *)&v33->__shared_owners_;
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          v39 = *(_QWORD *)(v3 + 376);
          v40 = *(_QWORD *)(v39 + 792);
          v41 = *(std::__shared_weak_count **)(v39 + 800);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldxr(v42);
            while (__stxr(v43 + 1, v42));
          }
          v93 = 0;
          v92 = 4;
          HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v40 + 4), (const AudioObjectPropertyAddress *)"mlecbolg", v14, 0, 0, &v93, &v92);
          v44 = v93;
          if (v41)
          {
            v45 = (unint64_t *)&v41->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v47 = (HALS_Object *)operator new();
          HALS_IOUAControl::HALS_IOUAControl(v47, *(HALS_IOUADriver **)(v3 + 376), v3, v14, v20, v28, v36, v44, 0);
          v49 = (HALS_Object **)v5[6];
          v48 = v5[7];
          if ((unint64_t)v49 >= v48)
          {
            v51 = v5[5];
            v52 = ((uint64_t)v49 - v51) >> 3;
            if ((unint64_t)(v52 + 1) >> 61)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v53 = v48 - v51;
            v54 = v53 >> 2;
            if (v53 >> 2 <= (unint64_t)(v52 + 1))
              v54 = v52 + 1;
            if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
              v55 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v55 = v54;
            if (v55)
              v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v55);
            else
              a2 = 0;
            v56 = (HALS_Object **)(v55 + 8 * v52);
            *v56 = v47;
            v50 = v56 + 1;
            v58 = (char *)v5[5];
            v57 = (char *)v5[6];
            if (v57 == v58)
            {
              v11 = v85;
            }
            else
            {
              v11 = v85;
              do
              {
                v59 = (HALS_Object *)*((_QWORD *)v57 - 1);
                v57 -= 8;
                *--v56 = v59;
              }
              while (v57 != v58);
              v57 = (char *)v5[5];
            }
            v5[5] = v56;
            v5[6] = v50;
            v5[7] = v55 + 8 * (_QWORD)a2;
            if (v57)
              operator delete(v57);
          }
          else
          {
            *v49 = v47;
            v50 = v49 + 1;
            v11 = v85;
          }
          v5[6] = v50;
        }
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)v12 + 13) = 1;
      }
      if (++v10 == v11)
      {
        v6 = *(HALS_ObjectMap ***)(v3 + 416);
        v7 = *(char **)(v3 + 424);
        goto LABEL_71;
      }
    }
  }
  while (1)
  {
LABEL_71:
    if (v6 == (HALS_ObjectMap **)v7)
    {
      v61 = 0;
      goto LABEL_82;
    }
    v60 = *v6;
    if (*v6)
    {
      if (!*((_BYTE *)v60 + 13))
        break;
    }
    ++v6;
  }
  (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v60 + 8))(v60);
  HALS_ObjectMap::ObjectIsDead(*v6, v62);
  v61 = 1;
  if (v6 != (HALS_ObjectMap **)v7)
  {
    v63 = v6 + 1;
    if (v6 + 1 != (HALS_ObjectMap **)v7)
    {
      do
      {
        v64 = *v63;
        if (*v63 && !*((_BYTE *)v64 + 13))
        {
          (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v64 + 8))(v64);
          HALS_ObjectMap::ObjectIsDead(*v63, v65);
        }
        else
        {
          *v6++ = v64;
        }
        ++v63;
      }
      while (v63 != (HALS_ObjectMap **)v7);
      v61 = 1;
    }
  }
  v7 = (char *)v6;
LABEL_82:
  v66 = (char **)(v3 + 416);
  if (v7 != *(char **)(v3 + 424))
  {
    a2 = *(HALS_Object **)(v3 + 424);
    *(_QWORD *)(v3 + 424) = v7;
  }
  v69 = v5 + 5;
  v68 = (uint64_t *)v5[5];
  v67 = (uint64_t *)v69[1];
  if (v67 != v68)
  {
    do
    {
      v70 = *v68;
      v71 = *(_QWORD *)(v3 + 432);
      if ((unint64_t)v7 >= v71)
      {
        v72 = (v7 - *v66) >> 3;
        if ((unint64_t)(v72 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v73 = v71 - (_QWORD)*v66;
        v74 = v73 >> 2;
        if (v73 >> 2 <= (unint64_t)(v72 + 1))
          v74 = v72 + 1;
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
          v75 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v75 = v74;
        if (v75)
          v75 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v75);
        else
          a2 = 0;
        v76 = (_QWORD *)(v75 + 8 * v72);
        *v76 = v70;
        v7 = (char *)(v76 + 1);
        v78 = *(char **)(v3 + 416);
        v77 = *(char **)(v3 + 424);
        if (v77 != v78)
        {
          do
          {
            v79 = *((_QWORD *)v77 - 1);
            v77 -= 8;
            *--v76 = v79;
          }
          while (v77 != v78);
          v77 = *v66;
        }
        *(_QWORD *)(v3 + 416) = v76;
        *(_QWORD *)(v3 + 424) = v7;
        *(_QWORD *)(v3 + 432) = v75 + 8 * (_QWORD)a2;
        if (v77)
          operator delete(v77);
      }
      else
      {
        *(_QWORD *)v7 = v70;
        v7 += 8;
      }
      *(_QWORD *)(v3 + 424) = v7;
      ++v68;
    }
    while (v68 != v67);
    v61 = 1;
  }
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = v61;
  v80 = *(_QWORD *)(a1[6] + 8);
  if (v66 != (char **)(v80 + 40))
    std::vector<HALS_IOUAControl *>::__assign_with_size[abi:ne180100]<HALS_IOUAControl **,HALS_IOUAControl **>((_QWORD *)(v80 + 40), *v66, v7, (v7 - *v66) >> 3);
  v81 = *(HALS_ObjectMap ***)(v80 + 40);
  v82 = *(HALS_ObjectMap ***)(v80 + 48);
  while (v81 != v82)
  {
    v83 = *v81++;
    HALS_ObjectMap::RetainObject(v83, a2);
  }
}

void sub_1B586191C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1B5861928(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_64c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v2 = (_QWORD *)(a1 + 64);
  v2[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v2, *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 2);
}

void __destroy_helper_block_e8_64c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
}

_QWORD *std::vector<HALS_IOUAControl *>::__assign_with_size[abi:ne180100]<HALS_IOUAControl **,HALS_IOUAControl **>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  void **v14;
  _BYTE *v15;
  unint64_t v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      goto LABEL_23;
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 61)
LABEL_23:
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v12];
    v13 = a3 - v6;
    if (v13)
      result = memmove(result, v6, v13);
    v14 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v14 = (void **)(result + 1);
  v15 = (_BYTE *)result[1];
  v16 = (v15 - v9) >> 3;
  if (v16 >= a4)
  {
    v13 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = (void *)*result;
LABEL_21:
    result = memmove(v18, __src, v13);
    goto LABEL_22;
  }
  v17 = &__src[8 * v16];
  if (v15 != v9)
  {
    result = memmove((void *)*result, __src, v15 - v9);
    v9 = (char *)*v14;
  }
  v13 = a3 - v17;
  if (v13)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v14 = &v9[v13];
  return result;
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::vector<unsigned int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_1B5861B08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void HALB_SharedBuffer::~HALB_SharedBuffer(HALB_SharedBuffer *this)
{
  HALB_SharedBuffer::~HALB_SharedBuffer(this);
  JUMPOUT(0x1B5E50688);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E696EBC0;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    if (*((_BYTE *)this + 56))
    {
      munlock(v2, *((_QWORD *)this + 2));
      v2 = (void *)*((_QWORD *)this + 1);
    }
    HALB_IOBufferManager_Server::FreeBuffer((HALB_IOBufferManager_Server *)v2, *((_DWORD *)this + 4));
  }
  caulk::mach::mach_port::~mach_port((mach_port_name_t *)this + 15);
}

void caulk::mach::mach_port::~mach_port(mach_port_name_t *this)
{
  if (*this)
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], *this);
}

vm_address_t HALB_SharedBuffer::Allocate_Server(HALB_SharedBuffer *this)
{
  vm_size_t v2;
  vm_address_t result;
  _DWORD *exception;
  _DWORD *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 55))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v6 = 136315394;
      v7 = "HALB_SharedBuffer.cpp";
      v8 = 1024;
      v9 = 281;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_SharedBuffer::Allocate_Server: this process does not own the shared memory object", (uint8_t *)&v6, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v2 = *((_QWORD *)this + 2);
  if (!v2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v6 = 136315394;
      v7 = "HALB_SharedBuffer.cpp";
      v8 = 1024;
      v9 = 282;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_SharedBuffer::Allocate_Server: allocating a size of 0 is not supported", (uint8_t *)&v6, 0x12u);
    }
    v5 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v5 = &off_1E69A1B30;
    v5[2] = 1852797029;
  }
  result = HALB_IOBufferManager_Server::AllocateBuffer(v2);
  *((_QWORD *)this + 1) = result;
  return result;
}

void caulk::mach::error_category::~error_category(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x1B5E50688);
}

const char *caulk::mach::error_category::name(caulk::mach::error_category *this)
{
  return "Mach";
}

void caulk::mach::error_category::message(caulk::mach::error_category *this@<X0>, mach_error_t a2@<W1>, std::string *a3@<X8>)
{
  char *v5;
  std::string *v6;
  __int128 v7;
  char *v8;
  size_t v9;
  std::string *v10;
  std::string v11;
  std::string v12;

  v5 = (char *)(*(uint64_t (**)(caulk::mach::error_category *))(*(_QWORD *)this + 16))(this);
  std::string::basic_string[abi:ne180100]<0>(&v11, v5);
  v6 = std::string::append(&v11, ": ", 2uLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = mach_error_string(a2);
  v9 = strlen(v8);
  v10 = std::string::append(&v12, v8, v9);
  *a3 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1B5861E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void HALS_IOA2UCDevice::~HALS_IOA2UCDevice(HALS_IOA2UCDevice *this)
{
  HALB_UCObject::~HALB_UCObject(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t HALS_IOA2UCDevice::SupportsPreWarming(HALS_IOA2UCDevice *this)
{
  return *((unsigned __int8 *)this + 35);
}

double HALS_IOA2UCDevice::GetNominalSampleRate(const __CFDictionary **this)
{
  double v1;
  const __CFNumber *v2;
  CFTypeID v3;
  uint64_t v4;
  double v5;
  const __CFNumber *v7;
  char v8;
  CFTypeRef cf;
  uint64_t valuePtr;

  cf = 0;
  v1 = 0.0;
  if (HALB_UCObject::CopyProperty_CFType(this, CFSTR("sample rate"), &cf))
  {
    v2 = (const __CFNumber *)cf;
    v3 = CFGetTypeID(cf);
    if (v3 == CFNumberGetTypeID())
    {
      v7 = v2;
      v8 = 0;
      valuePtr = 0;
      if (v2)
      {
        CFNumberGetValue(v2, kCFNumberSInt64Type, &valuePtr);
        v4 = valuePtr;
        v5 = 1.0;
        if (valuePtr < 0)
          v5 = -1.0;
      }
      else
      {
        v4 = 0;
        v5 = 1.0;
      }
      v1 = v5
         * ((double)(v4 * (uint64_t)v5) * 2.32830644e-10
          + (double)(((unint64_t)(v4 * (uint64_t)v5) >> 32) & 0x7FFFFFFF));
      CACFNumber::~CACFNumber((CACFNumber *)&v7);
    }
    CFRelease(v2);
  }
  return v1;
}

void sub_1B5861FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFNumber::~CACFNumber((CACFNumber *)&a9);
  _Unwind_Resume(a1);
}

const void *HALS_IOA2UCDevice::CopyDeviceUID(HALS_IOA2UCDevice *this)
{
  CFTypeRef CFProperty;
  const void *v2;
  CFTypeID v3;

  CFProperty = IORegistryEntryCreateCFProperty((io_registry_entry_t)this, CFSTR("device UID"), 0, 0);
  v2 = CFProperty;
  if (CFProperty)
  {
    v3 = CFGetTypeID(CFProperty);
    if (v3 != CFStringGetTypeID())
    {
      CFRelease(v2);
      return 0;
    }
  }
  return v2;
}

void CACFArray::~CACFArray(CACFArray *this)
{
  const void *v2;

  if (*((_BYTE *)this + 8))
  {
    v2 = *(const void **)this;
    if (*(_QWORD *)this)
      CFRelease(v2);
  }
}

CFArrayRef HALS_IOA2UCDevice::CopyStreamDictionaryByID(const __CFDictionary **this, int a2)
{
  char v4;
  const __CFString *v5;
  unsigned int Count;
  unsigned int v7;
  int UInt32;
  int v9;
  CFArrayRef v10;
  char v12;
  unsigned int v14;
  CFArrayRef theArray;
  __int16 v16;
  CFArrayRef v17;
  __int16 v18;

  v4 = 1;
  do
  {
    theArray = 0;
    if ((v4 & 1) != 0)
      v5 = CFSTR("output streams");
    else
      v5 = CFSTR("input streams");
    HALB_UCObject::CopyProperty_CFArray(this, v5, &theArray);
    v17 = theArray;
    v18 = 1;
    if (theArray && (Count = CFArrayGetCount(theArray)) != 0)
    {
      v7 = 1;
      do
      {
        theArray = 0;
        v16 = 0;
        CACFArray::GetCACFDictionary(&v17, v7 - 1, (CACFDictionary *)&theArray);
        if (theArray
          && ((v14 = 0, UInt32 = CACFDictionary::GetUInt32((uint64_t)theArray, CFSTR("stream ID"), &v14), v14 == a2)
            ? (v9 = UInt32)
            : (v9 = 0),
              v9 == 1 && theArray))
        {
          CFRetain(theArray);
          v10 = theArray;
        }
        else
        {
          v10 = 0;
        }
        CACFDictionary::~CACFDictionary((CACFDictionary *)&theArray);
        if (v10)
          break;
      }
      while (v7++ < Count);
    }
    else
    {
      v10 = 0;
    }
    CACFArray::~CACFArray((CACFArray *)&v17);
    v12 = (v10 == 0) & v4;
    v4 = 0;
  }
  while ((v12 & 1) != 0);
  return v10;
}

void sub_1B58621AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  CACFArray::~CACFArray((CACFArray *)va);
  _Unwind_Resume(a1);
}

BOOL CA::Implementation::EquivalentFormatFlags(CA::Implementation *this, const AudioStreamBasicDescription *a2, const AudioStreamBasicDescription *a3, char a4)
{
  int v4;
  int32x4_t v5;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  BOOL v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  unsigned int v20;
  AudioFormatFlags mFormatFlags;
  AudioFormatFlags v22;
  unsigned int v23;
  UInt32 mBytesPerFrame;
  UInt32 mChannelsPerFrame;
  UInt32 v26;
  UInt32 mBitsPerChannel;
  int v28;
  BOOL v29;
  BOOL v30;
  unsigned int v31;
  BOOL v32;
  int v33;
  unsigned int v34;

  if ((a4 & 1) != 0)
  {
    v4 = *((_DWORD *)this + 3);
    v5 = *(int32x4_t *)&a2->mFormatID;
    v5.i64[1] = *((_QWORD *)this + 1);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5))) & 1) != 0)
      return 1;
  }
  else
  {
    v4 = *((_DWORD *)this + 3);
  }
  if (*((_DWORD *)this + 2) != 1819304813)
    return v4 == a2->mFormatFlags;
  v7 = v4 & 0x7FFFFFFF;
  if ((v4 & 0x7FFFFFFF) == 0)
    v7 = v4;
  if ((_DWORD)a3)
    v8 = v7;
  else
    v8 = v7 & 0xFFFFFFBF;
  v9 = *((_DWORD *)this + 6);
  if (v9)
  {
    v10 = *((_DWORD *)this + 7);
    if ((v4 & 0x20) != 0)
      v11 = 1;
    else
      v11 = *((_DWORD *)this + 7);
    if (v11)
    {
      v9 = 8 * (v9 / v11);
      v12 = *((_DWORD *)this + 8);
      v13 = v8 | 8;
      v14 = v9 == v12;
      goto LABEL_21;
    }
    v9 = 0;
    v12 = *((_DWORD *)this + 8);
    v13 = v8 | 8;
  }
  else
  {
    v13 = v8 | 8;
    v10 = *((_DWORD *)this + 7);
    v12 = *((_DWORD *)this + 8);
  }
  v14 = v12 == 0;
LABEL_21:
  if (v14)
    v8 = v13;
  v16 = (v12 & 7) == 0 && v9 == v12;
  v17 = v8 & 0xFFFFFFEF;
  if (!v16)
    v17 = v8;
  if ((v17 & 1) != 0)
    v17 &= ~4u;
  v18 = (v17 & 8) == 0 || v12 > 8;
  v19 = v17 & 2;
  if (v18)
    v19 = v17;
  if (v10 == 1)
    v20 = v19 & 0xFFFFFFDF;
  else
    v20 = v19;
  if (!v20)
    v20 = 0x80000000;
  mFormatFlags = a2->mFormatFlags;
  if (a2->mFormatID != 1819304813)
    return v20 == mFormatFlags;
  v22 = mFormatFlags & 0x7FFFFFFF;
  if ((mFormatFlags & 0x7FFFFFFF) == 0)
    v22 = a2->mFormatFlags;
  if ((_DWORD)a3)
    v23 = v22;
  else
    v23 = v22 & 0xFFFFFFBF;
  mBytesPerFrame = a2->mBytesPerFrame;
  if (!mBytesPerFrame)
  {
    v28 = v23 | 8;
    mChannelsPerFrame = a2->mChannelsPerFrame;
    mBitsPerChannel = a2->mBitsPerChannel;
LABEL_54:
    v29 = mBitsPerChannel == 0;
    goto LABEL_55;
  }
  mChannelsPerFrame = a2->mChannelsPerFrame;
  if ((mFormatFlags & 0x20) != 0)
    v26 = 1;
  else
    v26 = a2->mChannelsPerFrame;
  if (!v26)
  {
    mBytesPerFrame = 0;
    mBitsPerChannel = a2->mBitsPerChannel;
    v28 = v23 | 8;
    goto LABEL_54;
  }
  mBytesPerFrame = 8 * (mBytesPerFrame / v26);
  mBitsPerChannel = a2->mBitsPerChannel;
  v28 = v23 | 8;
  v29 = mBytesPerFrame == mBitsPerChannel;
LABEL_55:
  if (v29)
    v23 = v28;
  v30 = (mBitsPerChannel & 7) == 0 && mBytesPerFrame == mBitsPerChannel;
  v31 = v23 & 0xFFFFFFEF;
  if (!v30)
    v31 = v23;
  if ((v31 & 1) != 0)
    v31 &= ~4u;
  v32 = (v31 & 8) == 0 || mBitsPerChannel > 8;
  v33 = v31 & 2;
  if (v32)
    v33 = v31;
  if (mChannelsPerFrame == 1)
    v34 = v33 & 0xFFFFFFDF;
  else
    v34 = v33;
  if (v34)
    mFormatFlags = v34;
  else
    mFormatFlags = 0x80000000;
  return v20 == mFormatFlags;
}

void HALS_IOA2UCDevice::SetStreamActive(HALS_IOA2UCDevice *this, unsigned int a2, unsigned int a3)
{
  kern_return_t v4;
  mach_port_t v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  kern_return_t v11;
  uint64_t input[3];

  input[2] = *MEMORY[0x1E0C80C00];
  v4 = 1937010544;
  input[0] = a2;
  input[1] = a3;
  v5 = *((_DWORD *)this + 3);
  if ((!v5 || !*((_BYTE *)this + 34)
            || (v4 = IOConnectCallMethod(v5, 6u, input, 2u, 0, 0, 0, 0, 0, 0)) != 0)
    && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v7 = "HALS_IOA2UCDevice.cpp";
    v8 = 1024;
    v9 = 735;
    v10 = 1024;
    v11 = v4;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::SetStreamActive: got an error when telling the hardware to turn a stream on or off, Error: 0x%X", buf, 0x18u);
  }
}

CFTypeRef HALS_IOA2UCDevice::CopyControlDictionaryByID(const __CFDictionary **this, int a2)
{
  unsigned int Count;
  unsigned int i;
  int UInt32;
  int v6;
  CFTypeRef v7;
  CFArrayRef v9;
  __int16 v10;
  unsigned int v11;
  CFTypeRef cf;
  __int16 v13;
  CFArrayRef theArray;
  __int16 v15;

  theArray = 0;
  HALB_UCObject::CopyProperty_CFArray(this, CFSTR("controls"), &theArray);
  v9 = theArray;
  v10 = 1;
  v15 = 0;
  if (theArray && (Count = CFArrayGetCount(theArray)) != 0)
  {
    for (i = 0; i < Count; ++i)
    {
      cf = 0;
      v13 = 0;
      CACFArray::GetCACFDictionary(&theArray, i, (CACFDictionary *)&cf);
      if (cf
        && ((v11 = 0, UInt32 = CACFDictionary::GetUInt32((uint64_t)cf, CFSTR("control ID"), &v11), v11 == a2)
          ? (v6 = UInt32)
          : (v6 = 0),
            v6 == 1 && cf))
      {
        CFRetain(cf);
        v7 = cf;
      }
      else
      {
        v7 = 0;
      }
      CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
      if (v7)
        break;
    }
  }
  else
  {
    v7 = 0;
  }
  CACFArray::~CACFArray((CACFArray *)&theArray);
  CACFArray::~CACFArray((CACFArray *)&v9);
  return v7;
}

void sub_1B58625A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  CACFArray::~CACFArray((CACFArray *)va1);
  CACFArray::~CACFArray((CACFArray *)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOA2UCDevice::GetControlInfo_Value(HALS_IOA2UCDevice *this, const __CFDictionary *a2)
{
  uint64_t v2;
  _DWORD *exception;
  HALS_IOA2UCDevice *v5;
  __int16 v6;
  unsigned int v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  v5 = this;
  v6 = 0;
  if (this)
  {
    if (!CACFDictionary::GetUInt32((uint64_t)this, CFSTR("value"), &v7))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v9 = "HALS_IOA2UCDevice.cpp";
        v10 = 1024;
        v11 = 921;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::GetControlInfoByIndex_Value: there is no control value", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
    v2 = v7;
  }
  else
  {
    v2 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v5);
  return v2;
}

void sub_1B58626FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

CFTypeRef HALS_IOA2UCDevice::CopySelectorControlInfo_MultiSelectorValue(HALS_IOA2UCDevice *this, const __CFDictionary *a2)
{
  CFTypeRef v2;
  _DWORD *exception;
  HALS_IOA2UCDevice *v5;
  __int16 v6;
  CFTypeRef cf;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v5 = this;
  v6 = 0;
  if (this)
  {
    if ((CACFDictionary::GetArray((uint64_t)this, CFSTR("value"), (const __CFArray **)&cf) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v9 = "HALS_IOA2UCDevice.cpp";
        v10 = 1024;
        v11 = 1034;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::CopySelectorControlInfo_MultiSelectorValue: there is no selector value", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
    v2 = cf;
    CFRetain(cf);
  }
  else
  {
    v2 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v5);
  return v2;
}

void sub_1B586283C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

CFTypeRef HALS_IOA2UCDevice::CopySelectorControlInfo_SelectorMap(HALS_IOA2UCDevice *this, const __CFDictionary *a2)
{
  CFTypeRef v2;
  _DWORD *exception;
  HALS_IOA2UCDevice *v5;
  __int16 v6;
  CFTypeRef cf;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v5 = this;
  v6 = 0;
  if (this)
  {
    if ((CACFDictionary::GetArray((uint64_t)this, CFSTR("selectors"), (const __CFArray **)&cf) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v9 = "HALS_IOA2UCDevice.cpp";
        v10 = 1024;
        v11 = 1047;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::CopySelectorControlInfoByIndex_SelectorMap: there is no selector map", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
    v2 = cf;
    CFRetain(cf);
  }
  else
  {
    v2 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v5);
  return v2;
}

void sub_1B586297C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOA2UCDevice::GetStereoPanControlInfo_LeftValue(HALS_IOA2UCDevice *this, const __CFDictionary *a2)
{
  uint64_t v2;
  _DWORD *exception;
  HALS_IOA2UCDevice *v5;
  __int16 v6;
  unsigned int v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  v5 = this;
  v6 = 0;
  if (this)
  {
    if (!CACFDictionary::GetUInt32((uint64_t)this, CFSTR("left value"), &v7))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v9 = "HALS_IOA2UCDevice.cpp";
        v10 = 1024;
        v11 = 1060;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::GetStereoPanControlInfoByIndex_LeftValue: there is no left value", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
    v2 = v7;
  }
  else
  {
    v2 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v5);
  return v2;
}

void sub_1B5862AB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOA2UCDevice::GetStereoPanControlInfo_CenterValue(HALS_IOA2UCDevice *this, const __CFDictionary *a2)
{
  uint64_t v2;
  _DWORD *exception;
  HALS_IOA2UCDevice *v5;
  __int16 v6;
  unsigned int v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  v5 = this;
  v6 = 0;
  if (this)
  {
    if (!CACFDictionary::GetUInt32((uint64_t)this, CFSTR("center value"), &v7))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v9 = "HALS_IOA2UCDevice.cpp";
        v10 = 1024;
        v11 = 1072;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::GetStereoPanControlInfoByIndex_CenterValue: there is no center value", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
    v2 = v7;
  }
  else
  {
    v2 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v5);
  return v2;
}

void sub_1B5862BEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOA2UCDevice::GetStereoPanControlInfo_RightValue(HALS_IOA2UCDevice *this, const __CFDictionary *a2)
{
  uint64_t v2;
  _DWORD *exception;
  HALS_IOA2UCDevice *v5;
  __int16 v6;
  unsigned int v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  v5 = this;
  v6 = 0;
  if (this)
  {
    if (!CACFDictionary::GetUInt32((uint64_t)this, CFSTR("right value"), &v7))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v9 = "HALS_IOA2UCDevice.cpp";
        v10 = 1024;
        v11 = 1084;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::GetStereoPanControlInfoByIndex_RightValue: there is no right value", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
    v2 = v7;
  }
  else
  {
    v2 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v5);
  return v2;
}

void sub_1B5862D24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

void HALS_IOA2UCDevice::MoveBlockControlData(HALS_IOA2UCDevice *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  kern_return_t v5;
  mach_port_t v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  kern_return_t v12;
  uint64_t input[4];

  input[3] = *MEMORY[0x1E0C80C00];
  v5 = 1937010544;
  input[0] = a2;
  input[1] = a3;
  input[2] = a4;
  v6 = *((_DWORD *)this + 3);
  if ((!v6 || !*((_BYTE *)this + 34)
            || (v5 = IOConnectCallMethod(v6, 9u, input, 3u, 0, 0, 0, 0, 0, 0)) != 0)
    && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v8 = "HALS_IOA2UCDevice.cpp";
    v9 = 1024;
    v10 = 1157;
    v11 = 1024;
    v12 = v5;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::MoveBlockControlData: got an error when telling the hardware to move the block control data, Error: 0x%X", buf, 0x18u);
  }
}

uint64_t HALS_IOA2UCDevice::MoveDataExchangeBlockData(HALS_IOA2UCDevice *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v5;
  mach_port_t v6;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  uint64_t input[4];

  input[3] = *MEMORY[0x1E0C80C00];
  v5 = 1937010544;
  input[0] = a2;
  input[1] = a4;
  input[2] = a3;
  v6 = *((_DWORD *)this + 3);
  if (!v6
    || !*((_BYTE *)this + 34)
    || (v5 = IOConnectCallMethod(v6, 7u, input, 3u, 0, 0, 0, 0, 0, 0), (_DWORD)v5))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v9 = "HALS_IOA2UCDevice.cpp";
      v10 = 1024;
      v11 = 1251;
      v12 = 1024;
      v13 = v5;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::MoveDataExchangeBlockData: got an error when telling the hardware to move the block control data, Error: 0x%X", buf, 0x18u);
    }
  }
  return v5;
}

uint64_t HALS_IOA2UCDevice::StartIOWithFlags(HALS_IOA2UCDevice *this, uint64_t a2)
{
  uint64_t v3;
  mach_port_t v4;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = 1937010544;
  output = 0;
  input = a2;
  outputCnt = 1;
  v4 = *((_DWORD *)this + 3);
  if (!v4
    || !*((_BYTE *)this + 34)
    || (v3 = IOConnectCallMethod(v4, 0xAu, &input, 1u, 0, 0, &output, &outputCnt, 0, 0), (_DWORD)v3))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v10 = "HALS_IOA2UCDevice.cpp";
      v11 = 1024;
      v12 = 1271;
      v13 = 1024;
      v14 = v3;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::StartIOWithFlags: got an error when telling the hardware to start, Error: 0x%X", buf, 0x18u);
    }
  }
  return v3;
}

void HALS_IOA2UCDevice::StopIOWithFlags(HALS_IOA2UCDevice *this, uint64_t a2)
{
  kern_return_t v3;
  mach_port_t v4;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  kern_return_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = 1937010544;
  output = 0;
  input = a2;
  outputCnt = 1;
  v4 = *((_DWORD *)this + 3);
  if ((!v4
     || !*((_BYTE *)this + 34)
     || (v3 = IOConnectCallMethod(v4, 0xBu, &input, 1u, 0, 0, &output, &outputCnt, 0, 0)) != 0)
    && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v9 = "HALS_IOA2UCDevice.cpp";
    v10 = 1024;
    v11 = 1291;
    v12 = 1024;
    v13 = v3;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::StopIOWithFlags: got an error when telling the hardware to stop, Error: 0x%X", buf, 0x18u);
  }
}

uint64_t HALS_IOA2UCDevice::DoIO(HALS_IOA2UCDevice *this)
{
  uint64_t result;

  result = *((unsigned int *)this + 3);
  if ((_DWORD)result)
  {
    if (*((_BYTE *)this + 34))
      JUMPOUT(0x1B5E4FADCLL);
  }
  return result;
}

void HALS_IOA2UCDevice::SetStreamCurrentFormat(HALS_IOA2UCDevice *this, unsigned int a2, const AudioStreamBasicDescription *a3)
{
  kern_return_t v4;
  mach_port_t v5;
  unint64_t inputStruct;
  __int128 v7;
  uint64_t v8;
  UInt32 mBitsPerChannel;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  kern_return_t v15;
  uint64_t input[2];

  input[1] = *MEMORY[0x1E0C80C00];
  v4 = 1937010544;
  inputStruct = vcvtd_n_s64_f64(a3->mSampleRate - floor(a3->mSampleRate), 0x20uLL) | (vcvtmd_s64_f64(a3->mSampleRate) << 32);
  v7 = *(_OWORD *)&a3->mFormatID;
  v8 = *(_QWORD *)&a3->mBytesPerFrame;
  mBitsPerChannel = a3->mBitsPerChannel;
  input[0] = a2;
  v5 = *((_DWORD *)this + 3);
  if ((!v5
     || !*((_BYTE *)this + 34)
     || (v4 = IOConnectCallMethod(v5, 5u, input, 1u, &inputStruct, 0x28uLL, 0, 0, 0, 0)) != 0)
    && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v11 = "HALS_IOA2UCDevice.cpp";
    v12 = 1024;
    v13 = 1328;
    v14 = 1024;
    v15 = v4;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::SetStreamCurrentFormat: got an error when telling the hardware to set the stream format, Error: 0x%X", buf, 0x18u);
  }
}

uint64_t HALS_IOA2UCDevice::SetControlValue(HALS_IOA2UCDevice *this, unsigned int a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v5;
  mach_port_t v6;
  uint32_t outputCnt;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t output;
  uint64_t input[3];

  input[2] = *MEMORY[0x1E0C80C00];
  v5 = 1937010544;
  input[0] = a2;
  input[1] = a3;
  output = a3;
  outputCnt = 1;
  v6 = *((_DWORD *)this + 3);
  if (v6
    && *((_BYTE *)this + 34)
    && (v5 = IOConnectCallMethod(v6, 2u, input, 2u, 0, 0, &output, &outputCnt, 0, 0), !(_DWORD)v5))
  {
    *a4 = output;
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v11 = "HALS_IOA2UCDevice.cpp";
    v12 = 1024;
    v13 = 1339;
    v14 = 1024;
    v15 = v5;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::SetControlValue: got an error when telling the hardware to change a control value, Error: 0x%X", buf, 0x18u);
  }
  return v5;
}

uint64_t HALS_IOA2UCDevice::SetMultiControlValue(mach_port_t *this, unsigned int a2, const unsigned int *a3, int a4, unsigned int *a5, unsigned int a6, unsigned int *a7)
{
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  unsigned int v16;
  const void *v17;
  mach_port_t v18;
  uint64_t v20;
  size_t v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v11 = 1937010544;
  v12 = 4 * (a4 + 1);
  MEMORY[0x1E0C80A78](this);
  v14 = (char *)&v20 - v13;
  *(_DWORD *)((char *)&v20 - v13) = v15;
  memcpy((char *)&v20 - v13 + 4, v17, 4 * v16);
  v21 = 4 * a6;
  v18 = this[3];
  if (v18
    && *((_BYTE *)this + 34)
    && (v11 = IOConnectCallMethod(v18, 8u, 0, 0, v14, v12, 0, 0, a5, &v21), !(_DWORD)v11))
  {
    *a7 = v21 >> 2;
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v23 = "HALS_IOA2UCDevice.cpp";
    v24 = 1024;
    v25 = 1362;
    v26 = 1024;
    v27 = v11;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HAL_IOA2PhysicalDevice::SetMultiControlValue: got an error when telling the hardware to change a multi control value, Error: 0x%X", buf, 0x18u);
  }
  return v11;
}

uint64_t CACFDictionary::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  int v6;
  BOOL v7;

  if (*(_BYTE *)(a1 + 8))
  {
    v4 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v4);
  }
  v5 = *(const void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(unsigned __int8 *)(a2 + 8);
  *(_BYTE *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  if (v6)
    v7 = v5 == 0;
  else
    v7 = 1;
  if (!v7)
    CFRetain(v5);
  return a1;
}

uint64_t HALS_IOA2UCDevice::PerformConfigChange(uint64_t a1, void *inputStruct)
{
  uint64_t v3;
  mach_port_t v4;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = 1937010544;
  v4 = *(_DWORD *)(a1 + 12);
  if (!v4
    || !*(_BYTE *)(a1 + 34)
    || (v3 = IOConnectCallMethod(v4, 3u, 0, 0, inputStruct, 0x20uLL, 0, 0, 0, 0), (_DWORD)v3))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v7 = "HALS_IOA2UCDevice.cpp";
      v8 = 1024;
      v9 = 1606;
      v10 = 1024;
      v11 = v3;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::PerformConfigChange: got an error from the call down to the driver, Error: 0x%X", buf, 0x18u);
    }
  }
  return v3;
}

uint64_t HALS_IOA2UCDevice::MapEngineStatus(HALB_UCObject *a1, uint64_t *a2)
{
  uint64_t result;
  _DWORD *exception;
  unsigned int v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  result = HALB_UCObject::MapMemory(a1, 0, 1u, &v5);
  if (v5 <= 0x27)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v7 = "HALS_IOA2UCDevice.cpp";
      v8 = 1024;
      v9 = 1614;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::MapEngineStatus: Mapped engine status is not large enough.", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003329396;
  }
  *a2 = result;
  return result;
}

void HALS_IOThread::~HALS_IOThread(HALS_IOThread *this)
{
  HALS_IOThread::~HALS_IOThread(this);
  JUMPOUT(0x1B5E50688);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E696EC50;
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_IOThread *)((char *)this + 416));
  v2 = *((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v2)
    MEMORY[0x1B5E50688](v2, 0xC400A2AC0F1);
  if (*((char *)this + 407) < 0)
    operator delete(*((void **)this + 48));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 368);

  v3 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = off_1E699B578;
  HALB_Guard::~HALB_Guard((pthread_cond_t *)((char *)this + 16));
}

uint64_t HALS_IOThread::ConfigureThreadForRealtimePriority(_opaque_pthread_t **this, _opaque_pthread_t *a2, int a3)
{
  HALB_IOThread::ConfigureThreadForRealtimePriority(this, a2, a3);
  return 0;
}

uint64_t HALS_IOThread::DispatchThread(HALS_IOThread *this)
{
  return HALB_IOThread::DispatchPThread(this, (void *(__cdecl *)(void *))HALS_IOThread::Entry, this);
}

uint64_t HALS_IOThread::Entry(HALS_IOThread *this, void *a2)
{
  AMCP::Utility *v3;
  int v4;
  AMCP::Log::Scope_Registry *v5;
  int v6;
  caulk::concurrent::messenger *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  int *v10;
  char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  caulk::mach::os_workgroup_managed *v16;
  AMCP::Log::Scope_Registry *v17;
  int v18;
  caulk::concurrent::messenger *v19;
  _opaque_pthread_t *v20;
  mach_port_t v21;
  int *v22;
  char *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  AMCP::Log::Scope_Registry *v28;
  int v29;
  caulk::concurrent::messenger *v30;
  _opaque_pthread_t *v31;
  mach_port_t v32;
  int *v33;
  char *v34;
  uint64_t v35;
  unint64_t *p_shared_owners;
  caulk::concurrent::messenger *v37;
  _opaque_pthread_t *v38;
  mach_port_t v39;
  uint64_t v40;
  unint64_t *v41;
  int v42;
  int v43;
  int v44;
  char v45;
  caulk::mach::os_workgroup_managed *v46;
  caulk::concurrent::messenger *v48;
  _opaque_pthread_t *v49;
  mach_port_t v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  void *v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  NSObject *v65;
  _opaque_pthread_t *v66;
  mach_port_t v67;
  HALB_Mutex *v68;
  int v69;
  void *__p;
  char v71;
  void *v72;
  char v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  char v79;
  char v80;
  _BYTE buf[20];
  __int128 v82;
  _DWORD v83[7];
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v68 = (HALS_IOThread *)((char *)this + 16);
  v69 = HALB_Mutex::Lock((HALS_IOThread *)((char *)this + 16));
  if (*((_BYTE *)this + 180))
    pthread_setname_np((const char *)this + 180);
  HALB_IOThread::PostStateChange(this, 1920298606);
  v3 = (AMCP::Utility *)(*(uint64_t (**)(HALS_IOThread *, _QWORD, _QWORD))(*(_QWORD *)this + 16))(this, *((_QWORD *)this + 42), *((unsigned __int8 *)this + 344));
  v4 = (int)v3;
  v5 = AMCP::Utility::configure_syscall_mask_for_normal_priority(v3);
  v6 = (int)v5;
  if ((_DWORD)v5)
  {
    v5 = (AMCP::Log::Scope_Registry *)os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if ((_DWORD)v5)
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "HALS_IOThread.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 208;
      *(_WORD *)&buf[18] = 1024;
      LODWORD(v82) = v6;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOThread::ClearAllSyscallMasks - configure_syscall_mask_for_normal_priority failed, Error: 0x%X", buf, 0x18u);
    }
  }
  if (v4)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v7 = *(caulk::concurrent::messenger **)(*(_QWORD *)buf + 8);
    v8 = pthread_self();
    v9 = pthread_mach_thread_np(v8);
    v10 = __error();
    v11 = strerror(*v10);
    v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
    *(_DWORD *)(v12 + 16) = 0;
    *(_BYTE *)(v12 + 20) = 16;
    *(_DWORD *)(v12 + 24) = v9;
    *(_QWORD *)(v12 + 32) = "HALS_IOThread.mm";
    *(_DWORD *)(v12 + 40) = 307;
    *(_DWORD *)(v12 + 44) = v4;
    *(_QWORD *)(v12 + 48) = v11;
    *(_QWORD *)v12 = &off_1E696ED50;
    *(_QWORD *)(v12 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v7, (caulk::concurrent::message *)v12);
    v13 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v14 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  if (*((_DWORD *)this + 40) != 1735552612)
  {
    v16 = (caulk::mach::os_workgroup_managed *)*((_QWORD *)this + 31);
    if (!v16)
    {
      memset(v83, 0, sizeof(v83));
      v82 = 0u;
      *(_OWORD *)&buf[4] = 0u;
      *(_DWORD *)buf = 799564724;
      v28 = (AMCP::Log::Scope_Registry *)os_workgroup_attr_set_telemetry_flavor();
      v29 = (int)v28;
      if ((_DWORD)v28)
      {
        AMCP::Log::Scope_Registry::get(v28);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v74, "com.apple.coreaudio", "AMCP");
        v30 = *(caulk::concurrent::messenger **)(v74 + 8);
        v31 = pthread_self();
        v32 = pthread_mach_thread_np(v31);
        v33 = __error();
        v34 = strerror(*v33);
        v35 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
        *(_DWORD *)(v35 + 16) = 0;
        *(_BYTE *)(v35 + 20) = 16;
        *(_DWORD *)(v35 + 24) = v32;
        *(_QWORD *)(v35 + 32) = "HALS_IOThread.mm";
        *(_DWORD *)(v35 + 40) = 691;
        *(_DWORD *)(v35 + 44) = v29;
        *(_QWORD *)(v35 + 48) = v34;
        *(_QWORD *)v35 = &off_1E696EEA8;
        *(_QWORD *)(v35 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v30, (caulk::concurrent::message *)v35);
        v25 = v75;
        if (!v75)
          goto LABEL_30;
        p_shared_owners = (unint64_t *)&v75->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        goto LABEL_28;
      }
      os_workgroup_attr_set_interval_type();
      std::string::basic_string[abi:ne180100]<0>(&v72, "AudioHALS Workgroup");
      std::string::basic_string[abi:ne180100]<0>(&__p, "com.apple.coreaudio.hal.iothread");
      caulk::mach::os_workgroup_interval_managed::make_with_workload_id();
      v56 = operator new();
      *(_OWORD *)(v56 + 41) = 0u;
      *(_OWORD *)(v56 + 16) = 0u;
      *(_OWORD *)(v56 + 32) = 0u;
      v57 = MEMORY[0x1E0DDB768] + 16;
      *(_BYTE *)(v56 + 57) = 0;
      v58 = v75;
      *(_QWORD *)v56 = v57;
      *(_QWORD *)(v56 + 8) = v58;
      v75 = 0;
      caulk::mach::details::release_os_object(0, v59);
      v60 = *(_QWORD *)(v56 + 48);
      v61 = *(_OWORD *)(v56 + 16);
      v62 = *(_OWORD *)(v56 + 32);
      v63 = v77;
      *(_OWORD *)(v56 + 16) = v76;
      *(_OWORD *)(v56 + 32) = v63;
      *(_QWORD *)(v56 + 48) = v78;
      v76 = v61;
      v77 = v62;
      v78 = v60;
      LOBYTE(v60) = *(_BYTE *)(v56 + 56);
      *(_BYTE *)(v56 + 56) = v79;
      v79 = v60;
      LOBYTE(v60) = *(_BYTE *)(v56 + 57);
      *(_BYTE *)(v56 + 57) = v80;
      v80 = v60;
      v64 = *((_QWORD *)this + 31);
      *((_QWORD *)this + 31) = v56;
      if (v64)
        (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
      caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)&v74);
      if (v71 < 0)
        operator delete(__p);
      if (v73 < 0)
        operator delete(v72);
      v16 = (caulk::mach::os_workgroup_managed *)*((_QWORD *)this + 31);
    }
    if (*((_QWORD *)v16 + 1))
    {
      v17 = (AMCP::Log::Scope_Registry *)caulk::mach::os_workgroup_managed::join(v16);
      if ((_DWORD)v17)
      {
        v18 = (int)v17;
        AMCP::Log::Scope_Registry::get(v17);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v19 = *(caulk::concurrent::messenger **)(*(_QWORD *)buf + 8);
        v20 = pthread_self();
        v21 = pthread_mach_thread_np(v20);
        v22 = __error();
        v23 = strerror(*v22);
        v24 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
        *(_DWORD *)(v24 + 16) = 0;
        *(_BYTE *)(v24 + 20) = 16;
        *(_DWORD *)(v24 + 24) = v21;
        *(_QWORD *)(v24 + 32) = "HALS_IOThread.mm";
        *(_DWORD *)(v24 + 40) = 706;
        *(_DWORD *)(v24 + 44) = v18;
        *(_QWORD *)(v24 + 48) = v23;
        *(_QWORD *)v24 = &off_1E696EF00;
        *(_QWORD *)(v24 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v19, (caulk::concurrent::message *)v24);
        v25 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v26 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          goto LABEL_28;
        }
      }
LABEL_30:
      LOBYTE(v42) = 0;
      v43 = 0;
      v44 = 1;
      while ((HALB_IOThread::HasBeenStopped(this) & 1) == 0 && v44 && !v43)
      {
        v44 = (*(uint64_t (**)(void))(*((_QWORD *)this + 44) + 16))();
        v45 = v42;
        if (!(v42 & 1 | (v44 != 1)))
          v45 = HALS_IOThread::WorkgroupStart((caulk::mach::os_workgroup_interval_managed **)this, 0, 0);
        v43 = (*(uint64_t (**)(void))(*((_QWORD *)this + 45) + 16))();
        LOBYTE(v42) = 0;
        if ((v45 & 1) != 0)
          v42 = HALS_IOThread::WorkgroupFinish(this) ^ 1;
      }
      v46 = (caulk::mach::os_workgroup_managed *)*((_QWORD *)this + 31);
      if (!v46)
      {
        AMCP::Log::Scope_Registry::get(0);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v65 = **(NSObject ***)buf;
        AMCP::Log::Scope::get_os_log_t(**(id **)buf);
        objc_claimAutoreleasedReturnValue();
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
        {
          v66 = pthread_self();
          v67 = pthread_mach_thread_np(v66);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v67;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "HALS_IOThread.mm";
          *(_WORD *)&buf[18] = 1024;
          LODWORD(v82) = 812;
          WORD2(v82) = 2080;
          *(_QWORD *)((char *)&v82 + 6) = "mWorkgroupInterval != nullptr";
          _os_log_error_impl(&dword_1B57BA000, v65, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Workgroup must be allocated to leave", buf, 0x22u);
        }

        abort();
      }
      if (*((_QWORD *)v46 + 1))
      {
        caulk::mach::os_workgroup_managed::leave(v46);
      }
      else
      {
        AMCP::Log::Scope_Registry::get(v46);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v48 = *(caulk::concurrent::messenger **)(*(_QWORD *)buf + 8);
        v49 = pthread_self();
        v50 = pthread_mach_thread_np(v49);
        v51 = *(_QWORD *)(*((_QWORD *)this + 31) + 8);
        v52 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
        *(_DWORD *)(v52 + 16) = 0;
        *(_BYTE *)(v52 + 20) = 2;
        *(_DWORD *)(v52 + 24) = v50;
        *(_QWORD *)(v52 + 32) = "HALS_IOThread.mm";
        *(_DWORD *)(v52 + 40) = 822;
        *(_BYTE *)(v52 + 44) = v51 != 0;
        *(_QWORD *)v52 = &off_1E696F1C0;
        *(_QWORD *)(v52 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v48, (caulk::concurrent::message *)v52);
        v53 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v54 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
      }
      HALB_IOThread::ConfigureThreadForNormalPriority((_opaque_pthread_t **)this);
      HALB_IOThread::PostStateChange(this, 1735552612);
      *((_QWORD *)this + 1) = 0;
      goto LABEL_42;
    }
    AMCP::Log::Scope_Registry::get(v16);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v37 = *(caulk::concurrent::messenger **)(*(_QWORD *)buf + 8);
    v38 = pthread_self();
    v39 = pthread_mach_thread_np(v38);
    v40 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
    *(_DWORD *)(v40 + 16) = 0;
    *(_BYTE *)(v40 + 20) = 2;
    *(_DWORD *)(v40 + 24) = v39;
    *(_QWORD *)(v40 + 32) = "HALS_IOThread.mm";
    *(_DWORD *)(v40 + 40) = 712;
    *(_QWORD *)v40 = &off_1E696EF58;
    *(_QWORD *)(v40 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v37, (caulk::concurrent::message *)v40);
    v25 = *(std::__shared_weak_count **)&buf[8];
    if (!*(_QWORD *)&buf[8])
      goto LABEL_30;
    v41 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v27 = __ldaxr(v41);
    while (__stlxr(v27 - 1, v41));
LABEL_28:
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    goto LABEL_30;
  }
LABEL_42:
  HALB_Guard::Locker::~Locker(&v68);
  return 0;
}

void sub_1B58640A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, HALB_Mutex *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,uint64_t a34,int a35,uint64_t a36)
{
  void *v36;

  HALB_Guard::Locker::~Locker(&a11);
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::messenger::enqueue_call<HALS_IOThread::Entry(void *)::$_1,std::tuple<unsigned int,char const*,int,char *>>(caulk::concurrent::messenger *a1, _BYTE *a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;

  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = &off_1E696EE00;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 20) = *a2;
  v7 = *a3;
  *(_OWORD *)(v6 + 40) = a3[1];
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)v6 = &off_1E696EDA8;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

uint64_t HALS_IOThread::WorkgroupStart(caulk::mach::os_workgroup_interval_managed **this, unint64_t a2, unint64_t a3)
{
  AMCP::Log::Scope_Registry *v6;
  unint64_t v7;
  caulk::concurrent::messenger *v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  caulk::concurrent::messenger *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  BOOL v22;
  caulk::concurrent::messenger *v23;
  _opaque_pthread_t *v24;
  mach_port_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  AMCP::Log::Scope_Registry *v31;
  int v32;
  caulk::concurrent::messenger *v33;
  _opaque_pthread_t *v34;
  mach_port_t v35;
  int *v36;
  char *v37;
  uint64_t v38;
  unint64_t *p_shared_owners;
  AMCP::Log::Scope_Registry *v40;
  int v41;
  caulk::concurrent::messenger *v42;
  _opaque_pthread_t *v43;
  mach_port_t v44;
  int *v45;
  char *v46;
  uint64_t v47;
  unint64_t *v48;
  NSObject *v50;
  _opaque_pthread_t *v51;
  mach_port_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  os_workgroup_interval_data_opaque_s buf;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (!this[31])
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v50 = **(NSObject ***)&buf.sig;
    AMCP::Log::Scope::get_os_log_t(**(id **)&buf.sig);
    objc_claimAutoreleasedReturnValue();
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      v51 = pthread_self();
      v52 = pthread_mach_thread_np(v51);
      buf.sig = 67109890;
      *(_DWORD *)buf.opaque = v52;
      *(_WORD *)&buf.opaque[4] = 2080;
      *(_QWORD *)&buf.opaque[6] = "HALS_IOThread.mm";
      *(_WORD *)&buf.opaque[14] = 1024;
      *(_DWORD *)&buf.opaque[16] = 732;
      *(_WORD *)&buf.opaque[20] = 2080;
      *(_QWORD *)&buf.opaque[22] = "mWorkgroupInterval != nullptr";
      _os_log_error_impl(&dword_1B57BA000, v50, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Workgroup must be allocated to start", (uint8_t *)&buf, 0x22u);
    }

    abort();
  }
  v6 = (AMCP::Log::Scope_Registry *)mach_absolute_time();
  v7 = (unint64_t)v6;
  if ((unint64_t)v6 < a2)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v8 = *(caulk::concurrent::messenger **)(*(_QWORD *)&buf.sig + 8);
    v9 = pthread_self();
    v10 = pthread_mach_thread_np(v9);
    v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 64, 8);
    *(_DWORD *)(v11 + 16) = 0;
    *(_BYTE *)(v11 + 20) = 16;
    *(_DWORD *)(v11 + 24) = v10;
    *(_QWORD *)(v11 + 32) = "HALS_IOThread.mm";
    *(_DWORD *)(v11 + 40) = 124;
    *(_QWORD *)(v11 + 48) = v7;
    *(_QWORD *)(v11 + 56) = a2;
    *(_QWORD *)v11 = &off_1E696ECA0;
    *(_QWORD *)(v11 + 8) = 0;
    v6 = (AMCP::Log::Scope_Registry *)caulk::concurrent::messenger::enqueue(v8, (caulk::concurrent::message *)v11);
    v12 = *(std::__shared_weak_count **)&buf.opaque[4];
    if (*(_QWORD *)&buf.opaque[4])
    {
      v13 = (unint64_t *)(*(_QWORD *)&buf.opaque[4] + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  if (a2 >= v7)
    a2 = v7;
  if (a2 > a3)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v15 = *(caulk::concurrent::messenger **)(*(_QWORD *)&buf.sig + 8);
    v16 = pthread_self();
    v17 = pthread_mach_thread_np(v16);
    v18 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 64, 8);
    *(_DWORD *)(v18 + 16) = 0;
    *(_BYTE *)(v18 + 20) = 16;
    *(_DWORD *)(v18 + 24) = v17;
    *(_QWORD *)(v18 + 32) = "HALS_IOThread.mm";
    *(_DWORD *)(v18 + 40) = 130;
    *(_QWORD *)(v18 + 48) = a2;
    *(_QWORD *)(v18 + 56) = a3;
    *(_QWORD *)v18 = &off_1E696ECF8;
    *(_QWORD *)(v18 + 8) = 0;
    v6 = (AMCP::Log::Scope_Registry *)caulk::concurrent::messenger::enqueue(v15, (caulk::concurrent::message *)v18);
    v19 = *(std::__shared_weak_count **)&buf.opaque[4];
    if (*(_QWORD *)&buf.opaque[4])
    {
      v20 = (unint64_t *)(*(_QWORD *)&buf.opaque[4] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  if (v7 <= a3)
    v7 = a3;
  if (*((_QWORD *)this[31] + 1))
    v22 = a2 == v7;
  else
    v22 = 1;
  if (v22)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v23 = *(caulk::concurrent::messenger **)(*(_QWORD *)&buf.sig + 8);
    v24 = pthread_self();
    v25 = pthread_mach_thread_np(v24);
    v26 = *((_QWORD *)this[31] + 1);
    v27 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
    *(_DWORD *)(v27 + 16) = 0;
    *(_BYTE *)(v27 + 20) = 2;
    *(_DWORD *)(v27 + 24) = v25;
    *(_QWORD *)(v27 + 32) = "HALS_IOThread.mm";
    *(_DWORD *)(v27 + 40) = 758;
    *(_BYTE *)(v27 + 44) = v26 != 0;
    *(_QWORD *)v27 = &off_1E696F060;
    *(_QWORD *)(v27 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v23, (caulk::concurrent::message *)v27);
    v28 = *(std::__shared_weak_count **)&buf.opaque[4];
    if (*(_QWORD *)&buf.opaque[4])
    {
      v29 = (unint64_t *)(*(_QWORD *)&buf.opaque[4] + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      goto LABEL_36;
    }
  }
  else
  {
    memset(buf.opaque, 0, sizeof(buf.opaque));
    buf.sig = 1386695757;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 17) = 0u;
    this[36] = 0;
    v31 = (AMCP::Log::Scope_Registry *)os_workgroup_interval_data_set_telemetry();
    v32 = (int)v31;
    if ((_DWORD)v31)
    {
      AMCP::Log::Scope_Registry::get(v31);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v53, "com.apple.coreaudio", "AMCP");
      v33 = *(caulk::concurrent::messenger **)(v53 + 8);
      v34 = pthread_self();
      v35 = pthread_mach_thread_np(v34);
      v36 = __error();
      v37 = strerror(*v36);
      v38 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
      *(_DWORD *)(v38 + 16) = 0;
      *(_BYTE *)(v38 + 20) = 16;
      *(_DWORD *)(v38 + 24) = v35;
      *(_QWORD *)(v38 + 32) = "HALS_IOThread.mm";
      *(_DWORD *)(v38 + 40) = 746;
      *(_DWORD *)(v38 + 44) = v32;
      *(_QWORD *)(v38 + 48) = v37;
      *(_QWORD *)v38 = &off_1E696EFB0;
      *(_QWORD *)(v38 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v33, (caulk::concurrent::message *)v38);
      v28 = v54;
      if (v54)
      {
        p_shared_owners = (unint64_t *)&v54->__shared_owners_;
        do
          v30 = __ldaxr(p_shared_owners);
        while (__stlxr(v30 - 1, p_shared_owners));
LABEL_36:
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }
    else
    {
      v40 = (AMCP::Log::Scope_Registry *)caulk::mach::os_workgroup_interval_managed::start(this[31], a2, v7, &buf);
      if (!(_DWORD)v40)
        return 1;
      v41 = (int)v40;
      AMCP::Log::Scope_Registry::get(v40);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v53, "com.apple.coreaudio", "AMCP");
      v42 = *(caulk::concurrent::messenger **)(v53 + 8);
      v43 = pthread_self();
      v44 = pthread_mach_thread_np(v43);
      v45 = __error();
      v46 = strerror(*v45);
      v47 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
      *(_DWORD *)(v47 + 16) = 0;
      *(_BYTE *)(v47 + 20) = 16;
      *(_DWORD *)(v47 + 24) = v44;
      *(_QWORD *)(v47 + 32) = "HALS_IOThread.mm";
      *(_DWORD *)(v47 + 40) = 752;
      *(_DWORD *)(v47 + 44) = v41;
      *(_QWORD *)(v47 + 48) = v46;
      *(_QWORD *)v47 = &off_1E696F008;
      *(_QWORD *)(v47 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v42, (caulk::concurrent::message *)v47);
      v28 = v54;
      if (v54)
      {
        v48 = (unint64_t *)&v54->__shared_owners_;
        do
          v30 = __ldaxr(v48);
        while (__stlxr(v30 - 1, v48));
        goto LABEL_36;
      }
    }
  }
  return 0;
}

void sub_1B5864950(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t HALS_IOThread::WorkgroupFinish(HALS_IOThread *this)
{
  uint64_t v1;
  AMCP::Log::Scope_Registry *v3;
  int v4;
  caulk::concurrent::messenger *v5;
  _opaque_pthread_t *v6;
  mach_port_t v7;
  int *v8;
  char *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  caulk::concurrent::messenger *v14;
  _opaque_pthread_t *v15;
  mach_port_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  AMCP::Log::Scope_Registry *v20;
  int v21;
  caulk::concurrent::messenger *v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  int *v25;
  char *v26;
  uint64_t v27;
  unint64_t *v28;
  NSObject *v30;
  _opaque_pthread_t *v31;
  mach_port_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  os_workgroup_interval_data_opaque_s buf;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 31);
  if (!v1)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v30 = **(NSObject ***)&buf.sig;
    AMCP::Log::Scope::get_os_log_t(**(id **)&buf.sig);
    objc_claimAutoreleasedReturnValue();
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v31 = pthread_self();
      v32 = pthread_mach_thread_np(v31);
      buf.sig = 67109890;
      *(_DWORD *)buf.opaque = v32;
      *(_WORD *)&buf.opaque[4] = 2080;
      *(_QWORD *)&buf.opaque[6] = "HALS_IOThread.mm";
      *(_WORD *)&buf.opaque[14] = 1024;
      *(_DWORD *)&buf.opaque[16] = 773;
      *(_WORD *)&buf.opaque[20] = 2080;
      *(_QWORD *)&buf.opaque[22] = "mWorkgroupInterval != nullptr";
      _os_log_error_impl(&dword_1B57BA000, v30, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Workgroup must be allocated to finish", (uint8_t *)&buf, 0x22u);
    }

    abort();
  }
  if (*(_QWORD *)(v1 + 8))
  {
    memset(buf.opaque, 0, sizeof(buf.opaque));
    buf.sig = 1386695757;
    *((_QWORD *)this + 41) = 0;
    *(_OWORD *)((char *)this + 296) = 0u;
    *(_OWORD *)((char *)this + 312) = 0u;
    v3 = (AMCP::Log::Scope_Registry *)os_workgroup_interval_data_set_telemetry();
    v4 = (int)v3;
    if ((_DWORD)v3)
    {
      AMCP::Log::Scope_Registry::get(v3);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v33, "com.apple.coreaudio", "AMCP");
      v5 = *(caulk::concurrent::messenger **)(v33 + 8);
      v6 = pthread_self();
      v7 = pthread_mach_thread_np(v6);
      v8 = __error();
      v9 = strerror(*v8);
      v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
      *(_DWORD *)(v10 + 16) = 0;
      *(_BYTE *)(v10 + 20) = 16;
      *(_DWORD *)(v10 + 24) = v7;
      *(_QWORD *)(v10 + 32) = "HALS_IOThread.mm";
      *(_DWORD *)(v10 + 40) = 785;
      *(_DWORD *)(v10 + 44) = v4;
      *(_QWORD *)(v10 + 48) = v9;
      *(_QWORD *)v10 = &off_1E696F0B8;
      *(_QWORD *)(v10 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v5, (caulk::concurrent::message *)v10);
      v11 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
LABEL_16:
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    else
    {
      v20 = (AMCP::Log::Scope_Registry *)caulk::mach::os_workgroup_interval_managed::finish(*((caulk::mach::os_workgroup_interval_managed **)this + 31), &buf);
      if (!(_DWORD)v20)
        return 1;
      v21 = (int)v20;
      AMCP::Log::Scope_Registry::get(v20);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v33, "com.apple.coreaudio", "AMCP");
      v22 = *(caulk::concurrent::messenger **)(v33 + 8);
      v23 = pthread_self();
      v24 = pthread_mach_thread_np(v23);
      v25 = __error();
      v26 = strerror(*v25);
      v27 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
      *(_DWORD *)(v27 + 16) = 0;
      *(_BYTE *)(v27 + 20) = 16;
      *(_DWORD *)(v27 + 24) = v24;
      *(_QWORD *)(v27 + 32) = "HALS_IOThread.mm";
      *(_DWORD *)(v27 + 40) = 791;
      *(_DWORD *)(v27 + 44) = v21;
      *(_QWORD *)(v27 + 48) = v26;
      *(_QWORD *)v27 = &off_1E696F110;
      *(_QWORD *)(v27 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v22, (caulk::concurrent::message *)v27);
      v11 = v34;
      if (v34)
      {
        v28 = (unint64_t *)&v34->__shared_owners_;
        do
          v13 = __ldaxr(v28);
        while (__stlxr(v13 - 1, v28));
        goto LABEL_16;
      }
    }
  }
  else
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v14 = *(caulk::concurrent::messenger **)(*(_QWORD *)&buf.sig + 8);
    v15 = pthread_self();
    v16 = pthread_mach_thread_np(v15);
    v17 = *(_QWORD *)(*((_QWORD *)this + 31) + 8);
    v18 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
    *(_DWORD *)(v18 + 16) = 0;
    *(_BYTE *)(v18 + 20) = 2;
    *(_DWORD *)(v18 + 24) = v16;
    *(_QWORD *)(v18 + 32) = "HALS_IOThread.mm";
    *(_DWORD *)(v18 + 40) = 797;
    *(_BYTE *)(v18 + 44) = v17 != 0;
    *(_QWORD *)v18 = &off_1E696F168;
    *(_QWORD *)(v18 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v14, (caulk::concurrent::message *)v18);
    v11 = *(std::__shared_weak_count **)&buf.opaque[4];
    if (*(_QWORD *)&buf.opaque[4])
    {
      v19 = (unint64_t *)(*(_QWORD *)&buf.opaque[4] + 8);
      do
        v13 = __ldaxr(v19);
      while (__stlxr(v13 - 1, v19));
      goto LABEL_16;
    }
  }
  return 0;
}

void sub_1B5864D8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::messenger::enqueue_call<HALS_IOThread::Entry(void *)::$_3,std::tuple<unsigned int,char const*,int,char *>>(caulk::concurrent::messenger *a1, _BYTE *a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;

  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = &off_1E696EE80;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 20) = *a2;
  v7 = *a3;
  *(_OWORD *)(v6 + 40) = a3[1];
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)v6 = &off_1E696EE28;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::Entry(void *)::$_3,std::tuple<unsigned int,char const*,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::Entry(void *)::$_3,std::tuple<unsigned int,char const*,int,char *>>::perform(caulk::concurrent::message *a1)
{
  caulk::concurrent::message *v2;

  v2 = a1;
  caulk::concurrent::details::message_call<HALS_IOThread::Entry(void *)::$_3,std::tuple<unsigned int,char const*,int,char *>>::perform((uint64_t)a1);
  return caulk::concurrent::details::rt_message_call<HALS_IOThread::Entry(void *)::$_3,std::tuple<unsigned int,char const*,int,char *>>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_1B5864EAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<HALS_IOThread::Entry(void *)::$_3,std::tuple<unsigned int,char const*,int,char *>>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::message_call<HALS_IOThread::Entry(void *)::$_3,std::tuple<unsigned int,char const*,int,char *>>::perform(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  id *v11;
  _BYTE v12[10];
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v11, "com.apple.coreaudio", "AMCP");
  v2 = *v11;
  AMCP::Log::Scope::get_os_log_t(*v11);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v12;
  if (*(_QWORD *)v12)
  {
    v4 = (unint64_t *)(*(_QWORD *)v12 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    LODWORD(v11) = 67109890;
    HIDWORD(v11) = v7;
    *(_WORD *)v12 = 2080;
    *(_QWORD *)&v12[2] = v8;
    v13 = 1024;
    v14 = v9;
    v15 = 2080;
    v16 = v10;
    _os_log_impl(&dword_1B57BA000, v2, v6, "%6u %32s:%-5d Failed to change thread to normal priority because of exception - %s", (uint8_t *)&v11, 0x22u);
  }

}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::Entry(void *)::$_3,std::tuple<unsigned int,char const*,int,char *>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::message_call<HALS_IOThread::Entry(void *)::$_3,std::tuple<unsigned int,char const*,int,char *>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupLeave(void)::$_1,std::tuple<unsigned int,char const*,int,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupLeave(void)::$_1,std::tuple<unsigned int,char const*,int,BOOL>>::perform(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  caulk::concurrent::message *v12;
  uint8_t buf[8];
  _BYTE v14[10];
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v14;
  if (*(_QWORD *)v14)
  {
    v4 = (unint64_t *)(*(_QWORD *)v14 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(unsigned __int8 *)(a1 + 44);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v14 = 2080;
    *(_QWORD *)&v14[2] = v8;
    v15 = 1024;
    v16 = v9;
    v17 = 1024;
    v18 = v10;
    _os_log_impl(&dword_1B57BA000, v2, v6, "%6u %32s:%-5d Could not leave an invalid or unjoined workgroup - %d", buf, 0x1Eu);
  }

  return caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupLeave(void)::$_1,std::tuple<unsigned int,char const*,int,BOOL>>::rt_cleanup::~rt_cleanup(&v12);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupLeave(void)::$_1,std::tuple<unsigned int,char const*,int,BOOL>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupFinish(void)::$_3,std::tuple<unsigned int,char const*,int,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupFinish(void)::$_3,std::tuple<unsigned int,char const*,int,BOOL>>::perform(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  caulk::concurrent::message *v12;
  uint8_t buf[8];
  _BYTE v14[10];
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v14;
  if (*(_QWORD *)v14)
  {
    v4 = (unint64_t *)(*(_QWORD *)v14 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(unsigned __int8 *)(a1 + 44);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v14 = 2080;
    *(_QWORD *)&v14[2] = v8;
    v15 = 1024;
    v16 = v9;
    v17 = 1024;
    v18 = v10;
    _os_log_impl(&dword_1B57BA000, v2, v6, "%6u %32s:%-5d Could not finish an invalid or unstarted workgroup - %d", buf, 0x1Eu);
  }

  return caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupFinish(void)::$_3,std::tuple<unsigned int,char const*,int,BOOL>>::rt_cleanup::~rt_cleanup(&v12);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupFinish(void)::$_3,std::tuple<unsigned int,char const*,int,BOOL>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupFinish(void)::$_2,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupFinish(void)::$_2,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v15;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 2080;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v2, v6, "%6u %32s:%-5d Failed to finish the workgroup with code: %d - %s", buf, 0x28u);
  }

  return caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupFinish(void)::$_2,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupFinish(void)::$_2,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupFinish(void)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupFinish(void)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v15;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 2080;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v2, v6, "%6u %32s:%-5d Failed to set telemetry data with code: %d - %s", buf, 0x28u);
  }

  return caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupFinish(void)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupFinish(void)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupStart(unsigned long long,unsigned long long)::$_3,std::tuple<unsigned int,char const*,int,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupStart(unsigned long long,unsigned long long)::$_3,std::tuple<unsigned int,char const*,int,BOOL>>::perform(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  caulk::concurrent::message *v12;
  uint8_t buf[8];
  _BYTE v14[10];
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v14;
  if (*(_QWORD *)v14)
  {
    v4 = (unint64_t *)(*(_QWORD *)v14 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(unsigned __int8 *)(a1 + 44);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v14 = 2080;
    *(_QWORD *)&v14[2] = v8;
    v15 = 1024;
    v16 = v9;
    v17 = 1024;
    v18 = v10;
    _os_log_impl(&dword_1B57BA000, v2, v6, "%6u %32s:%-5d Could not start an invalid or unjoined workgroup - %d", buf, 0x1Eu);
  }

  return caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupStart(unsigned long long,unsigned long long)::$_3,std::tuple<unsigned int,char const*,int,BOOL>>::rt_cleanup::~rt_cleanup(&v12);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupStart(unsigned long long,unsigned long long)::$_3,std::tuple<unsigned int,char const*,int,BOOL>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupStart(unsigned long long,unsigned long long)::$_2,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupStart(unsigned long long,unsigned long long)::$_2,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v15;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 2080;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v2, v6, "%6u %32s:%-5d Failed to start the workgroup with code: %d - %s", buf, 0x28u);
  }

  return caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupStart(unsigned long long,unsigned long long)::$_2,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupStart(unsigned long long,unsigned long long)::$_2,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupStart(unsigned long long,unsigned long long)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupStart(unsigned long long,unsigned long long)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v15;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 2080;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v2, v6, "%6u %32s:%-5d Failed to set telemetry data with code: %d - %s", buf, 0x28u);
  }

  return caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupStart(unsigned long long,unsigned long long)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupStart(unsigned long long,unsigned long long)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<ValidateWorkgroupIntervalTimestamps(unsigned long long &,unsigned long long &)::$_1,std::tuple<unsigned int,char const*,int,unsigned long long,unsigned long long>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<ValidateWorkgroupIntervalTimestamps(unsigned long long &,unsigned long long &)::$_1,std::tuple<unsigned int,char const*,int,unsigned long long,unsigned long long>>::perform(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v15;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 2048;
    v19 = v10;
    v20 = 2048;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v2, v6, "%6u %32s:%-5d Deadline is prior to Start time - this will cause a workgroup error. Start Time: %llu Deadline Time: %llu", buf, 0x2Cu);
  }

  return caulk::concurrent::details::rt_message_call<ValidateWorkgroupIntervalTimestamps(unsigned long long &,unsigned long long &)::$_1,std::tuple<unsigned int,char const*,int,unsigned long long,unsigned long long>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<ValidateWorkgroupIntervalTimestamps(unsigned long long &,unsigned long long &)::$_1,std::tuple<unsigned int,char const*,int,unsigned long long,unsigned long long>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 64, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<ValidateWorkgroupIntervalTimestamps(unsigned long long &,unsigned long long &)::$_0,std::tuple<unsigned int,char const*,int,unsigned long long,unsigned long long>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<ValidateWorkgroupIntervalTimestamps(unsigned long long &,unsigned long long &)::$_0,std::tuple<unsigned int,char const*,int,unsigned long long,unsigned long long>>::perform(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v15;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 2048;
    v19 = v10;
    v20 = 2048;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v2, v6, "%6u %32s:%-5d Start time is in the future relative to current time - this will cause a workgroup error. Current Mach Time: %llu Provided Start Time: %llu", buf, 0x2Cu);
  }

  return caulk::concurrent::details::rt_message_call<ValidateWorkgroupIntervalTimestamps(unsigned long long &,unsigned long long &)::$_0,std::tuple<unsigned int,char const*,int,unsigned long long,unsigned long long>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<ValidateWorkgroupIntervalTimestamps(unsigned long long &,unsigned long long &)::$_0,std::tuple<unsigned int,char const*,int,unsigned long long,unsigned long long>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 64, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupJoin(void)::$_3,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupJoin(void)::$_3,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  caulk::concurrent::message *v11;
  uint8_t buf[8];
  _BYTE v13[10];
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v13;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    _os_log_impl(&dword_1B57BA000, v2, v6, "%6u %32s:%-5d Could not join an invalid workgroup", buf, 0x18u);
  }

  return caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupJoin(void)::$_3,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(&v11);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupJoin(void)::$_3,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupJoin(void)::$_2,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupJoin(void)::$_2,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v15;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 2080;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v2, v6, "%6u %32s:%-5d Failed to join the workgroup with code: %d - %s", buf, 0x28u);
  }

  return caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupJoin(void)::$_2,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupJoin(void)::$_2,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupJoin(void)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupJoin(void)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v15;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 2080;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v2, v6, "%6u %32s:%-5d Failed to set telemetry flavor with code: %d - %s", buf, 0x28u);
  }

  return caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupJoin(void)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupJoin(void)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::Entry(void *)::$_1,std::tuple<unsigned int,char const*,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::Entry(void *)::$_1,std::tuple<unsigned int,char const*,int,char *>>::perform(caulk::concurrent::message *a1)
{
  caulk::concurrent::message *v2;

  v2 = a1;
  caulk::concurrent::details::message_call<HALS_IOThread::Entry(void *)::$_1,std::tuple<unsigned int,char const*,int,char *>>::perform((uint64_t)a1);
  return caulk::concurrent::details::rt_message_call<HALS_IOThread::Entry(void *)::$_1,std::tuple<unsigned int,char const*,int,char *>>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_1B586666C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<HALS_IOThread::Entry(void *)::$_1,std::tuple<unsigned int,char const*,int,char *>>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::message_call<HALS_IOThread::Entry(void *)::$_1,std::tuple<unsigned int,char const*,int,char *>>::perform(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  id *v11;
  _BYTE v12[10];
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v11, "com.apple.coreaudio", "AMCP");
  v2 = *v11;
  AMCP::Log::Scope::get_os_log_t(*v11);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v12;
  if (*(_QWORD *)v12)
  {
    v4 = (unint64_t *)(*(_QWORD *)v12 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    LODWORD(v11) = 67109890;
    HIDWORD(v11) = v7;
    *(_WORD *)v12 = 2080;
    *(_QWORD *)&v12[2] = v8;
    v13 = 1024;
    v14 = v9;
    v15 = 2080;
    v16 = v10;
    _os_log_impl(&dword_1B57BA000, v2, v6, "%6u %32s:%-5d Failed to change thread to realtime priority with code because of exception - %s", (uint8_t *)&v11, 0x22u);
  }

}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::Entry(void *)::$_1,std::tuple<unsigned int,char const*,int,char *>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::message_call<HALS_IOThread::Entry(void *)::$_1,std::tuple<unsigned int,char const*,int,char *>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::Entry(void *)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::Entry(void *)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v15;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 2080;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v2, v6, "%6u %32s:%-5d Failed to change thread to realtime priority with code: %d - %s", buf, 0x28u);
  }

  return caulk::concurrent::details::rt_message_call<HALS_IOThread::Entry(void *)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::Entry(void *)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

AMCP::Log::Scope_Registry *HALS_IOThread::EnableRTSafeSyscallMasks(_opaque_pthread_t **this)
{
  _opaque_pthread_t *v2;
  pthread_t v3;
  AMCP::Log::Scope_Registry *v4;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!HALB_IOThread::IsCurrentThread((HALB_IOThread *)this, 1)
    && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v6 = 136315394;
    v7 = "HALS_IOThread.mm";
    v8 = 1024;
    v9 = 215;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOThread::EnableRTSafeSyscallMasks - must be called from on the thread", (uint8_t *)&v6, 0x12u);
  }
  v2 = this[11];
  v3 = pthread_self();
  if (v2 != v3)
  {
    v3 = (pthread_t)os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if ((_DWORD)v3)
    {
      v6 = 136315394;
      v7 = "HALS_IOThread.mm";
      v8 = 1024;
      v9 = 216;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOThread::EnableRTSafeSyscallMasks - this thread ought to lock the lock", (uint8_t *)&v6, 0x12u);
    }
  }
  v4 = AMCP::Utility::configure_syscall_mask_for_realtime_priority((AMCP::Utility *)v3);
  if ((_DWORD)v4 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v6 = 136315650;
    v7 = "HALS_IOThread.mm";
    v8 = 1024;
    v9 = 220;
    v10 = 1024;
    v11 = (int)v4;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOThread::EnableRTSafeSyscallMasks - configure_syscall_mask_for_realtime_priority failed, Error: 0x%X", (uint8_t *)&v6, 0x18u);
  }
  return v4;
}

AMCP::Log::Scope_Registry *HALS_IOThread::ClearAllSyscallMasks(_opaque_pthread_t **this)
{
  _opaque_pthread_t *v2;
  pthread_t v3;
  AMCP::Log::Scope_Registry *v4;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!HALB_IOThread::IsCurrentThread((HALB_IOThread *)this, 1)
    && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v6 = 136315394;
    v7 = "HALS_IOThread.mm";
    v8 = 1024;
    v9 = 227;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOThread::ClearAllSyscallMasks - must be called from on the thread", (uint8_t *)&v6, 0x12u);
  }
  v2 = this[11];
  v3 = pthread_self();
  if (v2 != v3)
  {
    v3 = (pthread_t)os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if ((_DWORD)v3)
    {
      v6 = 136315394;
      v7 = "HALS_IOThread.mm";
      v8 = 1024;
      v9 = 228;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOThread::ClearAllSyscallMasks - this thread ought to lock the lock", (uint8_t *)&v6, 0x12u);
    }
  }
  v4 = AMCP::Utility::configure_syscall_mask_for_normal_priority((AMCP::Utility *)v3);
  if ((_DWORD)v4 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v6 = 136315650;
    v7 = "HALS_IOThread.mm";
    v8 = 1024;
    v9 = 232;
    v10 = 1024;
    v11 = (int)v4;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOThread::ClearAllSyscallMasks - configure_syscall_mask_for_normal_priority failed, Error: 0x%X", (uint8_t *)&v6, 0x18u);
  }
  return v4;
}

uint64_t HALS_IOThread::HasBeenDeactivated(HALS_IOThread *this)
{
  _opaque_pthread_t *v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = (_opaque_pthread_t *)*((_QWORD *)this + 11);
  if (v2 != pthread_self() && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v4 = 136315394;
    v5 = "HALS_IOThread.mm";
    v6 = 1024;
    v7 = 239;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOThread::HasBeenDeactivated: this thread ought to lock the lock", (uint8_t *)&v4, 0x12u);
  }
  return *((unsigned __int8 *)this + 173);
}

uint64_t HALS_IOThread::CopyWorkgroupIntervalPort(HALS_IOThread *this)
{
  caulk::mach::os_workgroup_managed *v2;
  uint64_t v3;
  AMCP::Log::Scope_Registry *v4;
  int v5;
  caulk::concurrent::messenger *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  int *v9;
  char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  void *__p;
  char v26;
  void *v27;
  char v28;
  HALB_Mutex *v29;
  int v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  __int128 v38;
  __int128 v39;
  _DWORD v40[7];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v29 = (HALS_IOThread *)((char *)this + 16);
  v30 = HALB_Mutex::Lock((HALS_IOThread *)((char *)this + 16));
  v2 = (caulk::mach::os_workgroup_managed *)*((_QWORD *)this + 31);
  if (!v2)
  {
    memset(v40, 0, sizeof(v40));
    v39 = 0u;
    v38 = 0u;
    v37 = 799564724;
    v4 = (AMCP::Log::Scope_Registry *)os_workgroup_attr_set_telemetry_flavor();
    v5 = (int)v4;
    if ((_DWORD)v4)
    {
      AMCP::Log::Scope_Registry::get(v4);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v31, "com.apple.coreaudio", "AMCP");
      v6 = *(caulk::concurrent::messenger **)(v31 + 8);
      v7 = pthread_self();
      v8 = pthread_mach_thread_np(v7);
      v9 = __error();
      v10 = strerror(*v9);
      v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
      *(_DWORD *)(v11 + 16) = 0;
      *(_BYTE *)(v11 + 20) = 16;
      *(_DWORD *)(v11 + 24) = v8;
      *(_QWORD *)(v11 + 32) = "HALS_IOThread.mm";
      *(_DWORD *)(v11 + 40) = 869;
      *(_DWORD *)(v11 + 44) = v5;
      *(_QWORD *)(v11 + 48) = v10;
      *(_QWORD *)v11 = &off_1E696F218;
      *(_QWORD *)(v11 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v6, (caulk::concurrent::message *)v11);
      v12 = v32;
      if (v32)
      {
        p_shared_owners = (unint64_t *)&v32->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      goto LABEL_10;
    }
    os_workgroup_attr_set_interval_type();
    std::string::basic_string[abi:ne180100]<0>(&v27, "AudioHALS Workgroup");
    std::string::basic_string[abi:ne180100]<0>(&__p, "com.apple.coreaudio.hal.iothread");
    caulk::mach::os_workgroup_interval_managed::make_with_workload_id();
    v16 = operator new();
    *(_OWORD *)(v16 + 41) = 0u;
    v17 = MEMORY[0x1E0DDB768];
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    v18 = v32;
    *(_QWORD *)v16 = v17 + 16;
    *(_QWORD *)(v16 + 8) = v18;
    v32 = 0;
    caulk::mach::details::release_os_object(0, v19);
    v20 = *(_QWORD *)(v16 + 48);
    v21 = *(_OWORD *)(v16 + 16);
    v22 = *(_OWORD *)(v16 + 32);
    v23 = v34;
    *(_OWORD *)(v16 + 16) = v33;
    *(_OWORD *)(v16 + 32) = v23;
    *(_QWORD *)(v16 + 48) = v35;
    v33 = v21;
    v34 = v22;
    v35 = v20;
    *(_WORD *)(v16 + 56) = v36;
    v36 = 0;
    v24 = *((_QWORD *)this + 31);
    *((_QWORD *)this + 31) = v16;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)&v31);
    if (v26 < 0)
      operator delete(__p);
    if (v28 < 0)
      operator delete(v27);
    v2 = (caulk::mach::os_workgroup_managed *)*((_QWORD *)this + 31);
  }
  if (!*((_QWORD *)v2 + 1))
  {
LABEL_10:
    v3 = 0;
    goto LABEL_11;
  }
  v3 = caulk::mach::os_workgroup_managed::copy_mach_port(v2);
LABEL_11:
  HALB_Guard::Locker::~Locker(&v29);
  return v3;
}

void sub_1B5867180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,HALB_Mutex *a21,uint64_t a22,char a23)
{
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)&a23);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  HALB_Guard::Locker::~Locker(&a21);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::CopyWorkgroupIntervalPort(void)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::CopyWorkgroupIntervalPort(void)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v15;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 2080;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v2, v6, "%6u %32s:%-5d Failed to set telemetry flavor with code: %d - %s", buf, 0x28u);
  }

  return caulk::concurrent::details::rt_message_call<HALS_IOThread::CopyWorkgroupIntervalPort(void)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::CopyWorkgroupIntervalPort(void)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void HALS_IOThread::GetIOThreadOSWorkgroup(HALS_IOThread *this, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  AMCP::Log::Scope_Registry *v7;
  int v8;
  caulk::concurrent::messenger *v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  int *v12;
  char *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  void *__p[2];
  char v30;
  void *v31[2];
  char v32;
  HALB_Mutex *v33;
  int v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int16 v40;
  int v41;
  __int128 v42;
  __int128 v43;
  _DWORD v44[7];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v33 = (HALB_Mutex *)(a2 + 16);
  v34 = HALB_Mutex::Lock((HALB_Mutex *)(a2 + 16));
  v5 = *(_QWORD *)(a2 + 248);
  v6 = MEMORY[0x1E0DDB768];
  if (!v5)
  {
    memset(v44, 0, sizeof(v44));
    v43 = 0u;
    v42 = 0u;
    v41 = 799564724;
    v7 = (AMCP::Log::Scope_Registry *)os_workgroup_attr_set_telemetry_flavor();
    v8 = (int)v7;
    if ((_DWORD)v7)
    {
      AMCP::Log::Scope_Registry::get(v7);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v35, "com.apple.coreaudio", "AMCP");
      v9 = *(caulk::concurrent::messenger **)(v35 + 8);
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      v12 = __error();
      v13 = strerror(*v12);
      v14 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
      *(_DWORD *)(v14 + 16) = 0;
      *(_BYTE *)(v14 + 20) = 16;
      *(_DWORD *)(v14 + 24) = v11;
      *(_QWORD *)(v14 + 32) = "HALS_IOThread.mm";
      *(_DWORD *)(v14 + 40) = 927;
      *(_DWORD *)(v14 + 44) = v8;
      *(_QWORD *)(v14 + 48) = v13;
      *(_QWORD *)v14 = &off_1E696F270;
      *(_QWORD *)(v14 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v9, (caulk::concurrent::message *)v14);
      v15 = v36;
      if (v36)
      {
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(v31, "AudioHALS Workgroup");
      std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.coreaudio.hal.iothread");
      caulk::mach::os_workgroup_interval_managed::make_with_workload_id();
      v18 = operator new();
    }
    else
    {
      os_workgroup_attr_set_interval_type();
      std::string::basic_string[abi:ne180100]<0>(v31, "AudioHALS Workgroup");
      std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.coreaudio.hal.iothread");
      caulk::mach::os_workgroup_interval_managed::make_with_workload_id();
      v18 = operator new();
    }
    v20 = v18;
    *(_OWORD *)(v18 + 41) = 0u;
    *(_OWORD *)(v18 + 16) = 0u;
    *(_OWORD *)(v18 + 32) = 0u;
    v21 = v36;
    *(_QWORD *)v18 = v6 + 16;
    *(_QWORD *)(v18 + 8) = v21;
    v36 = 0;
    caulk::mach::details::release_os_object(0, v19);
    v22 = *(_QWORD *)(v20 + 48);
    v23 = *(_OWORD *)(v20 + 16);
    v24 = *(_OWORD *)(v20 + 32);
    v25 = v38;
    *(_OWORD *)(v20 + 16) = v37;
    *(_OWORD *)(v20 + 32) = v25;
    *(_QWORD *)(v20 + 48) = v39;
    v37 = v23;
    v38 = v24;
    v39 = v22;
    *(_WORD *)(v20 + 56) = v40;
    v40 = 0;
    v26 = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a2 + 248) = v20;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)&v35);
    if (v30 < 0)
      operator delete(__p[0]);
    if (v32 < 0)
      operator delete(v31[0]);
    v5 = *(_QWORD *)(a2 + 248);
  }
  v27 = caulk::mach::details::retain_os_object(*(caulk::mach::details **)(v5 + 8), v4);
  v28 = *(_OWORD *)(v5 + 32);
  *((_OWORD *)this + 1) = *(_OWORD *)(v5 + 16);
  *((_OWORD *)this + 2) = v28;
  *(_OWORD *)((char *)this + 41) = *(_OWORD *)(v5 + 41);
  *(_QWORD *)this = v6 + 16;
  *((_QWORD *)this + 1) = v27;
  *((_BYTE *)this + 57) = *(_BYTE *)(v5 + 57);
  HALB_Guard::Locker::~Locker(&v33);
}

void sub_1B58676C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,HALB_Mutex *a21,uint64_t a22,char a23)
{
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)&a23);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  HALB_Guard::Locker::~Locker(&a21);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::GetIOThreadOSWorkgroup(void)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::GetIOThreadOSWorkgroup(void)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v15;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 2080;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v2, v6, "%6u %32s:%-5d Failed to set telemetry flavor with code: %d - %s", buf, 0x28u);
  }

  return caulk::concurrent::details::rt_message_call<HALS_IOThread::GetIOThreadOSWorkgroup(void)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOThread::GetIOThreadOSWorkgroup(void)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

AMCP::Utility::Dispatch_Queue *std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100](AMCP::Utility::Dispatch_Queue **a1, AMCP::Utility::Dispatch_Queue *a2)
{
  AMCP::Utility::Dispatch_Queue *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(result);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

void HALB_Mutex::Locker::~Locker(HALB_Mutex **this)
{
  if (!*((_DWORD *)this + 2))
    HALB_Mutex::Unlock(*this);
}

void HALS_IOEngineInfo::~HALS_IOEngineInfo(HALS_IOEngineInfo *this)
{
  HALS_IOEngineInfo::~HALS_IOEngineInfo(this);
  JUMPOUT(0x1B5E50688);
}

{
  void **v2;
  void **v3;
  void **v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = &off_1E6996958;
  v2 = (void **)((char *)this + 696);
  v3 = (void **)((char *)this + 744);
  v4 = (void **)((char *)this + 744);
  do
  {
    v6 = *(v4 - 3);
    v4 -= 3;
    v5 = v6;
    if (v6)
    {
      v7 = *(v3 - 2);
      v8 = v5;
      if (v7 != v5)
      {
        do
        {
          v10 = *--v7;
          v9 = v10;
          *v7 = 0;
          if (v10)
            (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        }
        while (v7 != v5);
        v8 = *v4;
      }
      *(v3 - 2) = v5;
      operator delete(v8);
    }
    v3 = v4;
  }
  while (v4 != v2);
  v11 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  CACFString::~CACFString((HALS_IOEngineInfo *)((char *)this + 16));
}

BOOL HALS_IOEngineInfo::has_engine(HALS_IOEngineInfo *this)
{
  return *((_QWORD *)this + 1) != 0;
}

uint64_t HALS_IOEngineInfo::has_device(HALS_IOEngineInfo *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 320))(result) != 0;
  return result;
}

uint64_t HALS_IOEngineInfo::begin_io_cycle(HALS_IOEngineInfo *this, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, HALS_IOEngineInfo *))(**((_QWORD **)this + 1) + 720))(*((_QWORD *)this + 1), a2, this);
}

uint64_t HALS_IOEngineInfo::end_io_cycle(HALS_IOEngineInfo *this, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(HALS_IOEngineInfo *))(*(_QWORD *)this + 16))(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD, uint64_t, HALS_IOEngineInfo *))(**((_QWORD **)this + 1) + 728))(*((_QWORD *)this + 1), a2, this);
  return result;
}

uint64_t HALS_IOEngineInfo::begin_reading(HALS_IOEngineInfo *this, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(HALS_IOEngineInfo *))(*(_QWORD *)this + 216))(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, HALS_IOEngineInfo *))(**((_QWORD **)this + 1) + 736))(*((_QWORD *)this + 1), a2, *((unsigned int *)this + 169), this);
  return result;
}

uint64_t HALS_IOEngineInfo::end_reading(HALS_IOEngineInfo *this, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(HALS_IOEngineInfo *))(*(_QWORD *)this + 216))(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, HALS_IOEngineInfo *))(**((_QWORD **)this + 1) + 776))(*((_QWORD *)this + 1), a2, *((unsigned int *)this + 169), this);
  return result;
}

uint64_t HALS_IOEngineInfo::begin_writing(HALS_IOEngineInfo *this, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(HALS_IOEngineInfo *))(*(_QWORD *)this + 224))(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, HALS_IOEngineInfo *))(**((_QWORD **)this + 1) + 784))(*((_QWORD *)this + 1), a2, *((unsigned int *)this + 168), this);
  return result;
}

uint64_t HALS_IOEngineInfo::end_writing(HALS_IOEngineInfo *this, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(HALS_IOEngineInfo *))(*(_QWORD *)this + 224))(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, HALS_IOEngineInfo *))(**((_QWORD **)this + 1) + 808))(*((_QWORD *)this + 1), a2, *((unsigned int *)this + 168), this);
  return result;
}

uint64_t HALS_IOEngineInfo::read_from_stream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 744))(*(_QWORD *)(a1 + 8), a2, a3, a4, a1, a5);
}

uint64_t HALS_IOEngineInfo::write_to_stream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 792))(*(_QWORD *)(a1 + 8), a2, a3, a4, a1, a5);
}

uint64_t HALS_IOEngineInfo::write_to_stream_commit_trailing_silence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 800))(*(_QWORD *)(a1 + 8), a2, a3, a4, a1, a5);
}

uint64_t HALS_IOEngineInfo::process_input_stream_data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 824))(v9, v10, a3, a1, a4, a5);
}

uint64_t HALS_IOEngineInfo::process_output_stream_data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 832))(v9, v10, a3, a1, a4, a5);
}

uint64_t HALS_IOEngineInfo::isolated_read_from_stream(HALS_IOEngineInfo *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, HALS_IOEngineInfo *, uint64_t))(**((_QWORD **)this + 1)
                                                                                           + 752))(*((_QWORD *)this + 1), a2, a3, this, a4);
}

__n128 HALS_IOEngineInfo::update_cycle_info(HALS_IOEngineInfo *this, unsigned int a2, double a3, double a4)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  __n128 result;
  __int128 v18;
  __int128 v19;
  AudioTimeStamp v20;
  AudioTimeStamp v21;

  *((_QWORD *)this + 54) = a2;
  *((_DWORD *)this + 110) = *((_DWORD *)this + 170);
  *((_DWORD *)this + 126) = 3;
  HALS_IOClock::GetCurrentTime(*((HALS_IOClock **)this + 36), (AudioTimeStamp *)this + 7);
  *((double *)this + 80) = a3;
  v7 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 81) = *(_QWORD *)(v7 + 40 * *(unsigned int *)(v7 + 192) + 200);
  v8 = *(_OWORD *)((char *)this + 376);
  *(_OWORD *)&v21.mSampleTime = *(_OWORD *)((char *)this + 360);
  *(_OWORD *)&v21.mRateScalar = v8;
  v9 = *(_OWORD *)((char *)this + 408);
  *(_OWORD *)&v21.mSMPTETime.mSubframes = *(_OWORD *)((char *)this + 392);
  *(_OWORD *)&v21.mSMPTETime.mHours = v9;
  v21.mFlags = 1;
  DWORD1(v8) = HIDWORD(v21.mSampleTime);
  LODWORD(v8) = *((_DWORD *)this + 79);
  *(double *)&v9 = v21.mSampleTime + (double)*((uint64_t *)this + 83) - (double)(unint64_t)v8;
  v10 = *((_DWORD *)this + 81);
  *(double *)&v8 = (double)v10;
  LODWORD(v8) = *((_DWORD *)this + 85);
  *(double *)&v8 = (double)(unint64_t)v8;
  *(double *)&v9 = *(double *)&v9 - (double)v10 - *(double *)&v8;
  LODWORD(v8) = *((_DWORD *)this + 170);
  v21.mSampleTime = *(double *)&v9 - (double)(unint64_t)v8;
  memset(&v20, 0, sizeof(v20));
  v20.mFlags = 3;
  HALS_IOClock::TranslateTime(v7, &v21, &v20);
  v12 = *(_OWORD *)&v20.mSMPTETime.mSubframes;
  v11 = *(_OWORD *)&v20.mSMPTETime.mHours;
  v13 = *(_OWORD *)&v20.mRateScalar;
  *((_OWORD *)this + 32) = *(_OWORD *)&v20.mSampleTime;
  *((_OWORD *)this + 33) = v13;
  *((_OWORD *)this + 34) = v12;
  *((_OWORD *)this + 35) = v11;
  v14 = *(_OWORD *)((char *)this + 376);
  *(_OWORD *)&v21.mSampleTime = *(_OWORD *)((char *)this + 360);
  *(_OWORD *)&v21.mRateScalar = v14;
  v15 = *(_OWORD *)((char *)this + 408);
  *(_OWORD *)&v21.mSMPTETime.mSubframes = *(_OWORD *)((char *)this + 392);
  *(_OWORD *)&v21.mSMPTETime.mHours = v15;
  v21.mFlags = 1;
  DWORD1(v14) = HIDWORD(v21.mSampleTime);
  LODWORD(v14) = *((_DWORD *)this + 78);
  *(double *)&v15 = v21.mSampleTime + (double)*((uint64_t *)this + 82) + (double)(unint64_t)v14;
  v16 = *((_DWORD *)this + 80);
  *(double *)&v14 = (double)v16;
  LODWORD(v14) = *((_DWORD *)this + 84);
  *(double *)&v14 = (double)(unint64_t)v14;
  *(double *)&v15 = *(double *)&v15 + (double)v16 + *(double *)&v14;
  LODWORD(v14) = *((_DWORD *)this + 170);
  v21.mSampleTime = *(double *)&v15 + round((double)(unint64_t)v14 * a4);
  memset(&v20, 0, sizeof(v20));
  v20.mFlags = 3;
  HALS_IOClock::TranslateTime(*((_QWORD *)this + 36), &v21, &v20);
  v18 = *(_OWORD *)&v20.mSMPTETime.mSubframes;
  result = *(__n128 *)&v20.mSMPTETime.mHours;
  v19 = *(_OWORD *)&v20.mRateScalar;
  *((_OWORD *)this + 36) = *(_OWORD *)&v20.mSampleTime;
  *((_OWORD *)this + 37) = v19;
  *((_OWORD *)this + 38) = v18;
  *((__n128 *)this + 39) = result;
  return result;
}

uint64_t HALS_IOEngineInfo::only_needs_reference_streams(HALS_IOEngineInfo *this)
{
  return *((unsigned __int8 *)this + 748);
}

uint64_t HALS_IOEngineInfo::io_buffer_frame_size(HALS_IOEngineInfo *this, unsigned int a2)
{
  return *((unsigned int *)this + a2 + 168);
}

double HALS_IOEngineInfo::actual_host_ticks_per_frame(HALS_IOEngineInfo *this)
{
  return *(double *)(*((_QWORD *)this + 36) + 40 * *(unsigned int *)(*((_QWORD *)this + 36) + 192) + 200);
}

double HALS_IOEngineInfo::nominal_host_ticks_per_frame(HALS_IOEngineInfo *this)
{
  return *(double *)(*((_QWORD *)this + 36) + 112);
}

uint64_t HALS_IOEngineInfo::number_of_processors(HALS_IOEngineInfo *this, unsigned int a2)
{
  return (*((_QWORD *)this + 3 * a2 + 88) - *((_QWORD *)this + 3 * a2 + 87)) >> 3;
}

uint64_t HALS_IOEngineInfo::processor(HALS_IOEngineInfo *this, unsigned int a2, unsigned int a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (char *)this + 24 * a2;
  v4 = *((_QWORD *)v3 + 88);
  v5 = *((_QWORD *)v3 + 87);
  if (a3 >= (unint64_t)((v4 - v5) >> 3))
    return 0;
  else
    return *(_QWORD *)(v5 + 8 * a3);
}

uint64_t HALS_IOEngineInfo::io_frame_counter(HALS_IOEngineInfo *this, unsigned int a2)
{
  return *((_QWORD *)this + a2 + 82);
}

uint64_t HALS_IOEngineInfo::has_client_visibile_output(HALS_IOEngineInfo *this)
{
  return *((unsigned __int8 *)this + 751);
}

uint64_t HALS_IOEngineInfo::has_client_visibile_input(HALS_IOEngineInfo *this)
{
  return *((unsigned __int8 *)this + 750);
}

uint64_t HALS_IOEngineInfo::is_shadow_reference_stream(HALS_IOEngineInfo *this)
{
  return *((unsigned __int8 *)this + 762);
}

uint64_t HALS_IOEngineInfo::must_begin_and_end_reading(HALS_IOEngineInfo *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(HALS_IOEngineInfo *))(*(_QWORD *)this + 16))(this);
  if ((_DWORD)result)
  {
    if (*((_BYTE *)this + 749))
      return 0;
    else
      return *((_BYTE *)this + 750) || *((_BYTE *)this + 762) != 0;
  }
  return result;
}

uint64_t HALS_IOEngineInfo::must_begin_and_end_writing(HALS_IOEngineInfo *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(HALS_IOEngineInfo *))(*(_QWORD *)this + 16))(this);
  if ((_DWORD)result)
    return !*((_BYTE *)this + 749) && *((_BYTE *)this + 751) != 0;
  return result;
}

uint64_t HALS_IOEngineInfo::set_io_cycle_usage(uint64_t this, double a2)
{
  *(double *)(this + 688) = a2;
  return this;
}

uint64_t HALS_IOEngineInfo::set_io_frame_counter(uint64_t this, unsigned int a2, uint64_t a3)
{
  *(_QWORD *)(this + 8 * a2 + 656) = a3;
  return this;
}

uint64_t HALS_IOEngineInfo::add_to_io_frame_counter(uint64_t this, unsigned int a2, uint64_t a3)
{
  *(_QWORD *)(this + 8 * a2 + 656) += a3;
  return this;
}

uint64_t HALS_IOEngineInfo::set_nominal_io_buffer_frame_size(uint64_t this, int a2)
{
  *(_DWORD *)(this + 680) = a2;
  return this;
}

uint64_t HALS_IOEngineInfo::update_io_buffer_frame_size(HALS_IOEngineInfo *this, uint64_t a2, double a3, int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;

  if ((*(unsigned int (**)(HALS_IOEngineInfo *, uint64_t))(*(_QWORD *)this + 288))(this, a5))
  {
    v10 = *(_QWORD *)this;
    if (a4)
    {
      a2 = (*(uint64_t (**)(HALS_IOEngineInfo *, uint64_t, uint64_t))(v10 + 296))(this, a5, a2);
    }
    else
    {
      v11 = (*(uint64_t (**)(HALS_IOEngineInfo *, uint64_t))(v10 + 184))(this, a5);
      a2 = ((double)a2 * a3
                        + fmod((double)v11, (double)a2 * a3) / ((double)a2 * a3));
    }
  }
  return (*(uint64_t (**)(HALS_IOEngineInfo *, uint64_t, uint64_t))(*(_QWORD *)this + 272))(this, a5, a2);
}

uint64_t HALS_IOEngineInfo::set_io_buffer_frame_size(uint64_t this, unsigned int a2, int a3)
{
  *(_DWORD *)(this + 4 * a2 + 672) = a3;
  return this;
}

uint64_t HALS_IOEngineInfo::match_buffer_size_in_directions_without_streams(HALS_IOEngineInfo *this, int a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*(unsigned int (**)(HALS_IOEngineInfo *))(*(_QWORD *)this + 192))(this)
    && ((*(uint64_t (**)(HALS_IOEngineInfo *))(*(_QWORD *)this + 200))(this) & 1) == 0)
  {
    if (!a2
      || (result = (*(uint64_t (**)(HALS_IOEngineInfo *))(*(_QWORD *)this + 208))(this), (result & 1) == 0))
    {
      v6 = 0;
      v5 = 1;
      goto LABEL_10;
    }
  }
  else
  {
    result = (*(uint64_t (**)(HALS_IOEngineInfo *))(*(_QWORD *)this + 192))(this);
    if ((result & 1) == 0)
    {
      result = (*(uint64_t (**)(HALS_IOEngineInfo *))(*(_QWORD *)this + 200))(this);
      if ((_DWORD)result)
      {
        v5 = 0;
        v6 = 1;
LABEL_10:
        v7 = (*(uint64_t (**)(HALS_IOEngineInfo *, uint64_t))(*(_QWORD *)this + 144))(this, v6);
        return (*(uint64_t (**)(HALS_IOEngineInfo *, uint64_t, uint64_t))(*(_QWORD *)this + 272))(this, v5, v7);
      }
    }
  }
  return result;
}

uint64_t HALS_IOEngineInfo::should_fetch_buffer_size_from_processors(HALS_IOEngineInfo *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!(*(unsigned int (**)(HALS_IOEngineInfo *))(*(_QWORD *)this + 168))(this))
    return 0;
  v4 = 0;
  do
  {
    v5 = (*(uint64_t (**)(HALS_IOEngineInfo *, uint64_t, uint64_t))(*(_QWORD *)this + 176))(this, a2, v4);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    if ((_DWORD)v6)
      break;
    v4 = (v4 + 1);
  }
  while (v4 < (*(unsigned int (**)(HALS_IOEngineInfo *, uint64_t))(*(_QWORD *)this + 168))(this, a2));
  return v6;
}

uint64_t HALS_IOEngineInfo::max_procesor_frame_size(HALS_IOEngineInfo *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  if (!(*(unsigned int (**)(HALS_IOEngineInfo *))(*(_QWORD *)this + 168))(this))
    return 0;
  v6 = 0;
  v7 = 0;
  do
  {
    v8 = (*(uint64_t (**)(HALS_IOEngineInfo *, uint64_t, uint64_t))(*(_QWORD *)this + 176))(this, a2, v6);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8))
    {
      v9 = (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(*(_QWORD *)v8 + 16))(v8, (_DWORD)a2 != 0, a3);
      if (v9 <= v7)
        v7 = v7;
      else
        v7 = v9;
    }
    v6 = (v6 + 1);
  }
  while (v6 < (*(unsigned int (**)(HALS_IOEngineInfo *, uint64_t))(*(_QWORD *)this + 168))(this, a2));
  return v7;
}

uint64_t HALS_IOEngineInfo::update_engine_start_sample(HALS_IOEngineInfo *this, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(**((_QWORD **)this + 1) + 464))(*((_QWORD *)this + 1), a2, (uint64_t)*((double *)this + 72), (uint64_t)*((double *)this + 64), a3, *((unsigned __int8 *)this + 424));
}

uint64_t HALS_IOEngineInfo::is_mixing(HALS_IOEngineInfo *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 856))(*((_QWORD *)this + 1));
}

uint64_t HALS_IOEngineInfo::engine_has_time_for_reference_stream(HALS_IOEngineInfo *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 680))(result);
    if ((_DWORD)result)
      return *(_DWORD *)(*((_QWORD *)this + 36) + 96) != 0;
  }
  return result;
}

uint64_t HALS_IOEngineInfo::engine_is_running_for_reference_stream(HALS_IOEngineInfo *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 680))(result);
  return result;
}

void ADS::StereoPanControl::~StereoPanControl(ADS::StereoPanControl *this)
{
  *(_QWORD *)this = off_1E69937F0;
  *((_QWORD *)this + 7) = &off_1E69985F8;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 80));
  ADS::BaseObject::~BaseObject(this);
}

{
  *(_QWORD *)this = off_1E69937F0;
  *((_QWORD *)this + 7) = &off_1E69985F8;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 80));
  ADS::BaseObject::~BaseObject(this);
  JUMPOUT(0x1B5E50688);
}

BOOL ADS::StereoPanControl::HasProperty(ADS::StereoPanControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  AudioObjectPropertySelector mSelector;
  BOOL v5;
  int v6;

  mSelector = a4->mSelector;
  if ((int)a4->mSelector > 1936745314)
  {
    v5 = mSelector == 1936745315;
    v6 = 1936745334;
  }
  else
  {
    v5 = mSelector == 1667591277;
    v6 = 1668506480;
  }
  return v5 || mSelector == v6 || ADS::BaseObject::HasProperty(this, a2, a3, a4);
}

uint64_t ADS::StereoPanControl::IsPropertySettable(ADS::StereoPanControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  AudioObjectPropertySelector mSelector;

  mSelector = a4->mSelector;
  if ((int)a4->mSelector > 1936745314)
  {
    if (mSelector == 1936745315 || mSelector == 1936745334)
      return 1;
  }
  else if (mSelector == 1667591277 || mSelector == 1668506480)
  {
    return 0;
  }
  return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
}

uint64_t ADS::StereoPanControl::GetPropertyDataSize(ADS::StereoPanControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6)
{
  AudioObjectPropertySelector mSelector;
  uint64_t v7;

  mSelector = a4->mSelector;
  v7 = 4;
  if ((int)a4->mSelector <= 1936745314)
  {
    if (mSelector != 1667591277 && mSelector != 1668506480)
      return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
    return v7;
  }
  if (mSelector == 1936745334)
    return v7;
  if (mSelector == 1936745315)
    return 8;
  return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
}

void ADS::StereoPanControl::GetPropertyData(ADS::StereoPanControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6, unsigned int a7, unsigned int *a8, char *a9)
{
  _DWORD *v10;
  int v11;
  unsigned int v12;
  _DWORD *v13;
  int v14;

  if (a4->mSelector == 1936745315)
  {
    v13 = (_DWORD *)((char *)this + 56);
    v14 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 7) + 16))((char *)this + 56);
    *(_DWORD *)a9 = v13[23];
    *((_DWORD *)a9 + 1) = v13[24];
    if (v14)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 24))(v13);
    v12 = 8;
    goto LABEL_9;
  }
  if (a4->mSelector == 1936745334)
  {
    v10 = (_DWORD *)((char *)this + 56);
    v11 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 7) + 16))((char *)this + 56);
    *(_DWORD *)a9 = v10[22];
    if (v11)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 24))(v10);
    v12 = 4;
LABEL_9:
    *a8 = v12;
    return;
  }
  ADS::Control::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

void ADS::StereoPanControl::SetPropertyData(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, _DWORD *a8, _DWORD *a9, unint64_t *a10, unsigned __int8 a11)
{
  _DWORD *v12;
  int v13;
  int v14;
  _DWORD *v15;
  unint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  int v19;
  int v20;
  _DWORD *v21;
  unint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  _DWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  _DWORD *v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  _DWORD *v44;
  _DWORD *exception;
  int v46;
  const char *v47;
  __int16 v48;
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a4 == 1936745315)
  {
    if ((_DWORD)a7 != 8)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v46 = 136315394;
        v47 = "ADS_StereoPanControl.cpp";
        v48 = 1024;
        v49 = 144;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::StereoPanControl::SetPropertyData: wrong size for the data for kAudioStereoPanControlPropertyPanningChannels", (uint8_t *)&v46, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 561211770;
    }
    v18 = (_DWORD *)(a1 + 56);
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 16))(a1 + 56);
    v18[23] = *a8;
    v18[24] = a8[1];
    *a9 = 1;
    v20 = *(v18 - 1);
    v21 = (_DWORD *)a10[1];
    v22 = a10[2];
    if ((unint64_t)v21 >= v22)
    {
      v30 = 0x1555555555555555;
      v31 = (_DWORD *)*a10;
      v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v21 - *a10) >> 2);
      v33 = v32 + 1;
      if (v32 + 1 > 0x1555555555555555)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (_QWORD)v31) >> 2);
      if (2 * v34 > v33)
        v33 = 2 * v34;
      if (v34 < 0xAAAAAAAAAAAAAAALL)
        v30 = v33;
      if (v30)
      {
        v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v30);
        v31 = (_DWORD *)*a10;
        v21 = (_DWORD *)a10[1];
      }
      else
      {
        v35 = 0;
      }
      v40 = (_DWORD *)(v30 + 12 * v32);
      v41 = v30 + 12 * v35;
      *v40 = 1936745315;
      v40[1] = v20;
      v40[2] = 0;
      v23 = v40 + 3;
      if (v21 != v31)
      {
        do
        {
          v42 = *(_QWORD *)(v21 - 3);
          v21 -= 3;
          v43 = v21[2];
          *(_QWORD *)(v40 - 3) = v42;
          v40 -= 3;
          v40[2] = v43;
        }
        while (v21 != v31);
        v31 = (_DWORD *)*a10;
      }
      *a10 = (unint64_t)v40;
      a10[1] = (unint64_t)v23;
      a10[2] = v41;
      if (v31)
        operator delete(v31);
    }
    else
    {
      *v21 = 1936745315;
      v21[1] = v20;
      v21[2] = 0;
      v23 = v21 + 3;
    }
    a10[1] = (unint64_t)v23;
    if (v19)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 24))(v18);
  }
  else if (*(_DWORD *)a4 == 1936745334)
  {
    if ((_DWORD)a7 != 4)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v46 = 136315394;
        v47 = "ADS_StereoPanControl.cpp";
        v48 = 1024;
        v49 = 131;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::StereoPanControl::SetPropertyData: wrong size for the data for kAudioStereoPanControlPropertyValue", (uint8_t *)&v46, 0x12u);
      }
      v44 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v44 = &off_1E69A1B30;
      v44[2] = 561211770;
    }
    v12 = (_DWORD *)(a1 + 56);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 16))(a1 + 56);
    v12[22] = *a8;
    *a9 = 1;
    v14 = *(v12 - 1);
    v15 = (_DWORD *)a10[1];
    v16 = a10[2];
    if ((unint64_t)v15 >= v16)
    {
      v24 = 0x1555555555555555;
      v25 = (_DWORD *)*a10;
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v15 - *a10) >> 2);
      v27 = v26 + 1;
      if (v26 + 1 > 0x1555555555555555)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (_QWORD)v25) >> 2);
      if (2 * v28 > v27)
        v27 = 2 * v28;
      if (v28 < 0xAAAAAAAAAAAAAAALL)
        v24 = v27;
      if (v24)
      {
        v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v24);
        v25 = (_DWORD *)*a10;
        v15 = (_DWORD *)a10[1];
      }
      else
      {
        v29 = 0;
      }
      v36 = (_DWORD *)(v24 + 12 * v26);
      v37 = v24 + 12 * v29;
      *v36 = 1936745334;
      v36[1] = v14;
      v36[2] = 0;
      v17 = v36 + 3;
      if (v15 != v25)
      {
        do
        {
          v38 = *(_QWORD *)(v15 - 3);
          v15 -= 3;
          v39 = v15[2];
          *(_QWORD *)(v36 - 3) = v38;
          v36 -= 3;
          v36[2] = v39;
        }
        while (v15 != v25);
        v25 = (_DWORD *)*a10;
      }
      *a10 = (unint64_t)v36;
      a10[1] = (unint64_t)v17;
      a10[2] = v37;
      if (v25)
        operator delete(v25);
    }
    else
    {
      *v15 = 1936745334;
      v15[1] = v14;
      v15[2] = 0;
      v17 = v15 + 3;
    }
    a10[1] = (unint64_t)v17;
    if (v13)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 24))(v12);
  }
  else
  {
    ADS::BaseObject::SetPropertyData(a1, a2, a3, a4, a5, a6, a7, (uint64_t)a8, a9, a10, a11);
  }
}

void sub_1B5868B4C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AMCP::Object::~Object(AMCP::Object *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t AMCP::Object::Object(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v13[2];

  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)v13, *(std::__shared_mutex_base **)(**(_QWORD **)a2 + 16), a3);
  *(_QWORD *)a1 = &off_1E696F358;
  v5 = v13[0];
  if (v13[0])
    v6 = *(_DWORD *)v13[0];
  else
    v6 = 0;
  *(_DWORD *)(a1 + 8) = v6;
  v7 = (std::__shared_weak_count *)v13[1];
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 32) = a2;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = a2;
  }
  return a1;
}

{
  uint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v13[2];

  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)v13, *(std::__shared_mutex_base **)(**(_QWORD **)a2 + 16), a3);
  *(_QWORD *)a1 = &off_1E696F358;
  v5 = v13[0];
  if (v13[0])
    v6 = *(_DWORD *)v13[0];
  else
    v6 = 0;
  *(_DWORD *)(a1 + 8) = v6;
  v7 = (std::__shared_weak_count *)v13[1];
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 32) = a2;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = a2;
  }
  return a1;
}

uint64_t AMCP::Object::Object(uint64_t result, uint64_t a2, int **a3)
{
  int *v3;
  int v4;
  int *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)result = &off_1E696F358;
  v3 = *a3;
  if (*a3)
    v4 = *v3;
  else
    v4 = 0;
  *(_DWORD *)(result + 8) = v4;
  v5 = a3[1];
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 4);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(result + 32) = a2;
  return result;
}

{
  int *v3;
  int v4;
  int *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)result = &off_1E696F358;
  v3 = *a3;
  if (*a3)
    v4 = *v3;
  else
    v4 = 0;
  *(_DWORD *)(result + 8) = v4;
  v5 = a3[1];
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 4);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(result + 32) = a2;
  return result;
}

BOOL AMCP::Object::expired(AMCP::Object *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  return !v1 || *(_QWORD *)(v1 + 8) == -1;
}

uint64_t AMCP::Object::has_property(AMCP::Object *this, const AMCP::Address *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  uint64_t has_property;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v7)
    has_property = AMCP::Core::Core::has_property(v7, a2);
  else
    has_property = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return has_property;
}

uint64_t AMCP::Object::is_property_settable(AMCP::Object *this, const AMCP::Address *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  uint64_t is_property_settable;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = (int8x8_t *)*((_QWORD *)this + 2);
  if (v7)
    is_property_settable = AMCP::Core::Core::is_property_settable(v7, a2);
  else
    is_property_settable = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return is_property_settable;
}

uint64_t AMCP::Core::Core::is_property_settable(int8x8_t *this, const AMCP::Address *a2)
{
  int8x8_t *v3;
  _QWORD *v4;
  unint64_t Is_Property_Settable;
  unint64_t v6;
  AMCP::Log::Scope_Registry *v7;
  AMCP::Log::Scope_Registry *v8;
  uint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  void *v18;
  NSObject *v19;
  _opaque_pthread_t *v20;
  mach_port_t v21;
  void *exception;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t (**v27)();
  __int128 v28;
  uint64_t v29;
  std::string v30;
  std::runtime_error v31;
  std::runtime_error v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char v38;
  uint8_t buf[8];
  __int16 v40;
  char *v41;
  __int16 v42;
  int v43;
  const char *v44;
  const char *v45;
  int v46;
  uint64_t v47;

  v3 = this;
  v47 = *MEMORY[0x1E0C80C00];
  if (!AMCP::Core::Core::has_property((AMCP::Core::Core *)this, a2))
    goto LABEL_16;
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v23, v3, (unsigned int *)a2);
  v4 = v23;
  if (v23)
  {
    Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, Is_Property_Settable))
    {
      v6 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
      v7 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v6);
      if (!v7)
      {
        AMCP::Log::Scope_Registry::get(0);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v19 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          v20 = pthread_self();
          v21 = pthread_mach_thread_np(v20);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v21;
          v40 = 2080;
          v41 = "Operation.h";
          v42 = 1024;
          v43 = 154;
          _os_log_error_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v38);
        exception = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v30);
        std::runtime_error::runtime_error(&v31, &v30);
        std::runtime_error::runtime_error(&v32, &v31);
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = -1;
        v32.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v33 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v32);
        v44 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = BOOL, Argument_Ty"
              "pes = <AMCP::Core::Is_Property_Settable_Function>]";
        v45 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        v46 = 154;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v25);
        v28 = v25;
        v29 = v26;
        v25 = 0uLL;
        v26 = 0;
        v27 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v27);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
      }
      v8 = v7;
      if (!*((_QWORD *)v7 + 7)
        || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>(),
            (v7 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v8 + 7))(4, (uint64_t)v8 + 24, 0, buf)) == 0))
      {
        AMCP::Log::Scope_Registry::get(v7);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v15 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          v16 = pthread_self();
          v17 = pthread_mach_thread_np(v16);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v17;
          v40 = 2080;
          v41 = "Operation.h";
          v42 = 1024;
          v43 = 161;
          _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v38);
        v18 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v30);
        std::runtime_error::runtime_error(&v31, &v30);
        std::runtime_error::runtime_error(&v32, &v31);
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = -1;
        v32.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v33 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v32);
        v44 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = BOOL, Argument_Ty"
              "pes = <AMCP::Core::Is_Property_Settable_Function>]";
        v45 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        v46 = 161;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v25);
        v28 = v25;
        v29 = v26;
        v25 = 0uLL;
        v26 = 0;
        v27 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v27);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v18, (uint64_t)buf);
      }
      v9 = *((_QWORD *)v7 + 3);
      if (!v9)
        std::__throw_bad_function_call[abi:ne180100]();
      LOBYTE(v3) = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v9 + 48))(v9, buf);
    }
    else
    {
      v10 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
      LOBYTE(v3) = std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v10) != 0;
    }
  }
  v11 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v4)
        return v3 & 1;
      goto LABEL_16;
    }
  }
  if (!v4)
LABEL_16:
    LOBYTE(v3) = 0;
  return v3 & 1;
}

void sub_1B5869458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,std::runtime_error a25,uint64_t a26,uint64_t a27)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[284];
}

unint64_t AMCP::Object::get_property_type_hint(AMCP::Object *this, const AMCP::Address *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t Property_Type_Hint;
  AMCP::Log::Scope_Registry *v11;
  AMCP::Log::Scope_Registry *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  NSObject *v23;
  _opaque_pthread_t *v24;
  mach_port_t v25;
  void *v26;
  NSObject *v27;
  _opaque_pthread_t *v28;
  mach_port_t v29;
  void *exception;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t (**v35)();
  __int128 v36;
  uint64_t v37;
  std::string v38;
  std::runtime_error v39;
  std::runtime_error v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char v46;
  uint8_t buf[8];
  _BYTE v48[10];
  __int16 v49;
  int v50;
  const char *v51;
  const char *v52;
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *((_QWORD *)this + 2);
    if (v7)
    {
      if (AMCP::Core::Core::has_property((AMCP::Core::Core *)v7, a2))
      {
        AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v31, (int8x8_t *)v7, (unsigned int *)a2);
        v8 = v31;
        if (v31
          && (v9 = AMCP::Implementation::get_type_marker<std::function<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>>(),
              std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9)))
        {
          Property_Type_Hint = AMCP::Implementation::get_type_marker<std::function<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>>();
          v11 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, Property_Type_Hint);
          if (!v11)
          {
            AMCP::Log::Scope_Registry::get(0);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            v27 = **(NSObject ***)buf;
            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
            {
              v28 = pthread_self();
              v29 = pthread_mach_thread_np(v28);
              *(_DWORD *)buf = 67109634;
              *(_DWORD *)&buf[4] = v29;
              *(_WORD *)v48 = 2080;
              *(_QWORD *)&v48[2] = "Operation.h";
              v49 = 1024;
              v50 = 154;
              _os_log_error_impl(&dword_1B57BA000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v46);
            exception = __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v38);
            std::runtime_error::runtime_error(&v39, &v38);
            std::runtime_error::runtime_error(&v40, &v39);
            v42 = 0;
            v43 = 0;
            v44 = 0;
            v45 = -1;
            v40.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
            v41 = &unk_1E69A1FE0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v40);
            v51 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Propert"
                  "y_Type_Hint, Argument_Types = <AMCP::Core::Get_Property_Type_Hint_Function>]";
            v52 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
            v53 = 154;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v33);
            v36 = v33;
            v37 = v34;
            v33 = 0uLL;
            v34 = 0;
            v35 = off_1E69A20A0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v35);
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
          }
          v12 = v11;
          if (!*((_QWORD *)v11 + 7)
            || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>>(),
                (v11 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v12
                                                     + 7))(4, (uint64_t)v12 + 24, 0, buf)) == 0))
          {
            AMCP::Log::Scope_Registry::get(v11);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            v23 = **(NSObject ***)buf;
            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              v24 = pthread_self();
              v25 = pthread_mach_thread_np(v24);
              *(_DWORD *)buf = 67109634;
              *(_DWORD *)&buf[4] = v25;
              *(_WORD *)v48 = 2080;
              *(_QWORD *)&v48[2] = "Operation.h";
              v49 = 1024;
              v50 = 161;
              _os_log_error_impl(&dword_1B57BA000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v46);
            v26 = __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v38);
            std::runtime_error::runtime_error(&v39, &v38);
            std::runtime_error::runtime_error(&v40, &v39);
            v42 = 0;
            v43 = 0;
            v44 = 0;
            v45 = -1;
            v40.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
            v41 = &unk_1E69A1FE0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v40);
            v51 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Propert"
                  "y_Type_Hint, Argument_Types = <AMCP::Core::Get_Property_Type_Hint_Function>]";
            v52 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
            v53 = 161;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v33);
            v36 = v33;
            v37 = v34;
            v33 = 0uLL;
            v34 = 0;
            v35 = off_1E69A20A0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v35);
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v26, (uint64_t)buf);
          }
          v13 = *((_QWORD *)v11 + 3);
          if (!v13)
            std::__throw_bad_function_call[abi:ne180100]();
          v14 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v13 + 48))(v13, buf);
          v15 = v14;
          v16 = v14 & 0xFFFFFFFF00000000;
        }
        else
        {
          AMCP::get_property_traits((AMCP *)*(unsigned int *)a2, (uint64_t)buf);
          v15 = v52;
          if (*(_QWORD *)v48)
            operator delete(*(void **)v48);
          v16 = 0;
        }
        v17 = v32;
        if (v32)
        {
          p_shared_owners = (unint64_t *)&v32->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
      }
      else
      {
        v16 = 0;
        v15 = 0;
      }
      v7 = HIDWORD(v16);
    }
    else
    {
      v15 = 0;
    }
    v20 = (unint64_t *)&v6->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v15 = 0;
    v7 = 0;
  }
  return v15 | (v7 << 32);
}

void sub_1B5869B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,std::runtime_error a25,uint64_t a26,uint64_t a27)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[249];
}

void AMCP::Object::get_property_value(AMCP::Object *this@<X0>, const AMCP::Address *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  const AMCP::Address *v9;
  __n128 v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v5 && (v7 = std::__shared_weak_count::lock(v5)) != 0)
  {
    v8 = v7;
    v9 = (const AMCP::Address *)*((_QWORD *)this + 2);
    if (v9)
    {
      v10.n128_f64[0] = AMCP::Core::Core::get_property_value((AMCP::Core::Core *)a3, v9, a2);
    }
    else
    {
      *(_QWORD *)(a3 + 32) = 0;
      v10 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
    }
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v10);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
}

double AMCP::Core::Core::get_property_value(AMCP::Core::Core *this, const AMCP::Address *a2, const AMCP::Address *a3)
{
  double result;
  _QWORD *v7;
  unint64_t v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;

  if (!AMCP::Core::Core::has_property(a2, a3))
    goto LABEL_12;
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v13, (int8x8_t *)a2, (unsigned int *)a3);
  v7 = v13;
  if (v13
    && (v8 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>(),
        std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, v8)))
  {
    AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)this, v7);
    v9 = 0;
  }
  else
  {
    v9 = 1;
  }
  v10 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v9)
  {
LABEL_12:
    *((_QWORD *)this + 4) = 0;
    result = 0.0;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  return result;
}

void AMCP::Object::get_property_value(AMCP::Object *this@<X0>, const AMCP::Address *a2@<X1>, const AMCP::Thing *a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v9;
  int8x8_t *v10;
  void (*v11)(uint64_t, const AMCP::Thing *, uint64_t, _QWORD);
  unint64_t *p_shared_owners;
  unint64_t v13;

  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v7)
  {
    v9 = std::__shared_weak_count::lock(v7);
    if (v9)
    {
      v10 = (int8x8_t *)*((_QWORD *)this + 2);
      if (v10)
      {
        AMCP::Core::Core::get_property_value((AMCP::Core::Core *)a4, v10, a2, (uint64_t)a3);
LABEL_9:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
    }
  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)(a4 + 32) = 0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  v11 = (void (*)(uint64_t, const AMCP::Thing *, uint64_t, _QWORD))*((_QWORD *)a3 + 4);
  if (v11)
    v11(1, a3, a4, 0);
  if (v9)
    goto LABEL_9;
}

void AMCP::Core::Core::get_property_value(AMCP::Core::Core *this, int8x8_t *a2, const AMCP::Thing *a3, uint64_t a4)
{
  _QWORD *v8;
  unint64_t v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void (*v14)(uint64_t, uint64_t, AMCP::Core::Core *, _QWORD);
  _QWORD *v15;
  std::__shared_weak_count *v16;

  if (AMCP::Core::Core::has_property((AMCP::Core::Core *)a2, a3))
  {
    AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v15, a2, (unsigned int *)a3);
    v8 = v15;
    if (v15
      && (v9 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>(),
          std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9)))
    {
      AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)this, v8);
      v10 = 0;
    }
    else
    {
      v10 = 1;
    }
    v11 = v16;
    if (!v16)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (!v10)
        return;
    }
    else
    {
LABEL_10:
      if (!v10)
        return;
    }
  }
  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v14 = *(void (**)(uint64_t, uint64_t, AMCP::Core::Core *, _QWORD))(a4 + 32);
  if (v14)
    v14(1, a4, this, 0);
}

uint64_t AMCP::Object::set_property_value(AMCP::Object *this, const AMCP::Address *a2, const AMCP::Thing *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  int8x8_t *v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v4)
    return 0;
  v7 = std::__shared_weak_count::lock(v4);
  if (!v7)
    return 0;
  v8 = v7;
  v9 = (int8x8_t *)*((_QWORD *)this + 2);
  if (!v9 || !AMCP::Core::Core::is_property_settable(v9, a2))
    goto LABEL_16;
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v20, v9, (unsigned int *)a2);
  v10 = v20;
  if (v20
    && (v11 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>(),
        std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v10, v11)))
  {
    AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v10, (uint64_t)a3);
    v12 = 0;
  }
  else
  {
    v12 = 1;
  }
  v14 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if ((v12 & 1) == 0)
    v13 = 1;
  else
LABEL_16:
    v13 = 0;
  v17 = (unint64_t *)&v8->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return v13;
}

void sub_1B586A1F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, NSObject **buf, __int128 a17, __int128 a18, uint64_t a19)
{
  unsigned int *v19;
  AMCP::Log::Scope_Registry *v21;
  NSObject *v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  int8x8_t v25;
  int8x8_t v26;
  int32x4_t v27;
  uint32x4_t v28;
  int16x8_t v29;

  if (a2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    v21 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v21);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v22 = *buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      v23 = pthread_self();
      v24 = pthread_mach_thread_np(v23);
      v25.i32[0] = bswap32(*v19);
      v26 = vzip1_s8(v25, v25);
      v27.i64[0] = 0x1F0000001FLL;
      v27.i64[1] = 0x1F0000001FLL;
      v28.i64[0] = 0x5F0000005FLL;
      v28.i64[1] = 0x5F0000005FLL;
      *(int8x8_t *)v29.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v28, (uint32x4_t)vsraq_n_s32(v27, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v26), 0x18uLL), 0x18uLL))), v26, (int8x8_t)0x2E002E002E002ELL);
      a15 = 4;
      LODWORD(__p) = vmovn_s16(v29).u32[0];
      BYTE4(__p) = 0;
      LODWORD(buf) = 67109890;
      HIDWORD(buf) = v24;
      LOWORD(a17) = 2080;
      *(_QWORD *)((char *)&a17 + 2) = "Core.h";
      WORD5(a17) = 1024;
      HIDWORD(a17) = 311;
      LOWORD(a18) = 2080;
      *(_QWORD *)((char *)&a18 + 2) = &__p;
      _os_log_debug_impl(&dword_1B57BA000, v22, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Caught exception trying to set property value %s", (uint8_t *)&buf, 0x22u);
      if (a15 < 0)
        operator delete(__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B586A180);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  AMCP::Log::Scope_Registry *v5;
  AMCP::Log::Scope_Registry *v6;
  uint64_t v7;
  NSObject *v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  void *v12;
  NSObject *v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  void *exception;
  __int128 v17;
  uint64_t v18;
  uint64_t (**v19)();
  __int128 v20;
  uint64_t v21;
  std::string v22;
  std::runtime_error v23;
  std::runtime_error v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint8_t buf[8];
  __int16 v32;
  char *v33;
  __int16 v34;
  int v35;
  const char *v36;
  const char *v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  v5 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v4);
  if (!v5)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v13 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = pthread_self();
      v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v15;
      v32 = 2080;
      v33 = "Operation.h";
      v34 = 1024;
      v35 = 154;
      _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v22);
    std::runtime_error::runtime_error(&v23, &v22);
    std::runtime_error::runtime_error(&v24, &v23);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = -1;
    v24.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v25 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    v36 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const AMCP::Thing &>]";
    v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v38 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v17);
    v20 = v17;
    v21 = v18;
    v17 = 0uLL;
    v18 = 0;
    v19 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v19);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v6 = v5;
  if (!*((_QWORD *)v5 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>(),
        (v5 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v6 + 7))(4, (uint64_t)v6 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v11;
      v32 = 2080;
      v33 = "Operation.h";
      v34 = 1024;
      v35 = 161;
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    v12 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v22);
    std::runtime_error::runtime_error(&v23, &v22);
    std::runtime_error::runtime_error(&v24, &v23);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = -1;
    v24.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v25 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    v36 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const AMCP::Thing &>]";
    v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v38 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v17);
    v20 = v17;
    v21 = v18;
    v17 = 0uLL;
    v18 = 0;
    v19 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v19);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v12, (uint64_t)buf);
  }
  v7 = *((_QWORD *)v5 + 3);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
}

void sub_1B586A718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Object::set_property_value_and_wait(AMCP::Object *this, const AMCP::Address *a2, const AMCP::Thing *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  int8x8_t *v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v4)
    return 0;
  v7 = std::__shared_weak_count::lock(v4);
  if (!v7)
    return 0;
  v8 = v7;
  v9 = (int8x8_t *)*((_QWORD *)this + 2);
  if (!v9 || !AMCP::Core::Core::is_property_settable(v9, a2))
    goto LABEL_16;
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v20, v9, (unsigned int *)a2);
  v10 = v20;
  if (v20
    && (v11 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>(),
        std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v10, v11)))
  {
    AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v10, (uint64_t)a3);
    v12 = 0;
  }
  else
  {
    v12 = 1;
  }
  v14 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if ((v12 & 1) == 0)
    v13 = 1;
  else
LABEL_16:
    v13 = 0;
  v17 = (unint64_t *)&v8->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return v13;
}

void sub_1B586A9EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, NSObject **buf, __int128 a17, __int128 a18, uint64_t a19)
{
  unsigned int *v19;
  AMCP::Log::Scope_Registry *v21;
  NSObject *v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  int8x8_t v25;
  int8x8_t v26;
  int32x4_t v27;
  uint32x4_t v28;
  int16x8_t v29;

  if (a2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    v21 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v21);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v22 = *buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      v23 = pthread_self();
      v24 = pthread_mach_thread_np(v23);
      v25.i32[0] = bswap32(*v19);
      v26 = vzip1_s8(v25, v25);
      v27.i64[0] = 0x1F0000001FLL;
      v27.i64[1] = 0x1F0000001FLL;
      v28.i64[0] = 0x5F0000005FLL;
      v28.i64[1] = 0x5F0000005FLL;
      *(int8x8_t *)v29.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v28, (uint32x4_t)vsraq_n_s32(v27, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v26), 0x18uLL), 0x18uLL))), v26, (int8x8_t)0x2E002E002E002ELL);
      a15 = 4;
      LODWORD(__p) = vmovn_s16(v29).u32[0];
      BYTE4(__p) = 0;
      LODWORD(buf) = 67109890;
      HIDWORD(buf) = v24;
      LOWORD(a17) = 2080;
      *(_QWORD *)((char *)&a17 + 2) = "Core.h";
      WORD5(a17) = 1024;
      HIDWORD(a17) = 332;
      LOWORD(a18) = 2080;
      *(_QWORD *)((char *)&a18 + 2) = &__p;
      _os_log_debug_impl(&dword_1B57BA000, v22, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Caught exception trying to set property value %s", (uint8_t *)&buf, 0x22u);
      if (a15 < 0)
        operator delete(__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B586A97CLL);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Object::get_property_value_with_qualifier(AMCP::Object *this@<X0>, const AMCP::Address *a2@<X1>, const AMCP::Thing *a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  int8x8_t *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v6 && (v9 = std::__shared_weak_count::lock(v6)) != 0)
  {
    v10 = v9;
    v11 = (int8x8_t *)*((_QWORD *)this + 2);
    if (v11)
    {
      AMCP::Core::Core::call_operation_function<AMCP::Thing,AMCP::Thing const&>((AMCP::Log::Scope_Registry *)a4, v11, (unsigned int *)a2, (uint64_t)a3);
    }
    else
    {
      *(_QWORD *)(a4 + 32) = 0;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
    }
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    *(_QWORD *)(a4 + 32) = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
}

void AMCP::Core::Core::call_operation_function<AMCP::Thing,AMCP::Thing const&>(AMCP::Log::Scope_Registry *a1, int8x8_t *a2, unsigned int *a3, uint64_t a4)
{
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v8;
  unint64_t v9;
  AMCP::Log::Scope_Registry *v10;
  AMCP::Log::Scope_Registry *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  NSObject *v16;
  _opaque_pthread_t *v17;
  mach_port_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _opaque_pthread_t *v24;
  mach_port_t v25;
  void *exception;
  NSObject *v27;
  _opaque_pthread_t *v28;
  mach_port_t v29;
  void *v30;
  NSObject *v31;
  _opaque_pthread_t *v32;
  mach_port_t v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t (**v38)();
  __int128 v39;
  uint64_t v40;
  std::string v41;
  std::runtime_error v42;
  std::runtime_error v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  char v49;
  uint8_t buf[8];
  _BYTE v51[10];
  __int16 v52;
  int v53;
  __int16 v54;
  _BYTE v55[14];
  const char *v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (*a3 == 707406378 || a3[1] == 707406378 || a3[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v31 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      v32 = pthread_self();
      v33 = pthread_mach_thread_np(v32);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v33;
      *(_WORD *)v51 = 2080;
      *(_QWORD *)&v51[2] = "Core.h";
      v52 = 1024;
      v53 = 198;
      v54 = 2080;
      *(_QWORD *)v55 = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1B57BA000, v31, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v34, a2, a3);
  v8 = v34;
  if (!v34)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v20 = *(std::__shared_weak_count **)v51;
    v21 = **(NSObject ***)buf;
    if (*(_QWORD *)v51)
    {
      v22 = (unint64_t *)(*(_QWORD *)v51 + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v24 = pthread_self();
      v25 = pthread_mach_thread_np(v24);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v25;
      *(_WORD *)v51 = 2080;
      *(_QWORD *)&v51[2] = "Core.h";
      v52 = 1024;
      v53 = 202;
      _os_log_error_impl(&dword_1B57BA000, v21, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v49);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v41);
    std::runtime_error::runtime_error(&v42, &v41);
    std::runtime_error::runtime_error(&v43, &v42);
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = -1;
    v43.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v44 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v43);
    *(_QWORD *)&v55[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = AMCP::Thing, Argument_Types = <const AMCP::Thing &>]";
    v56 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    v57 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v36);
    v39 = v36;
    v40 = v37;
    v36 = 0uLL;
    v37 = 0;
    v38 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v38);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v9 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(AMCP::Thing const&)>>();
  v10 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9);
  if (!v10)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v27 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      v28 = pthread_self();
      v29 = pthread_mach_thread_np(v28);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v29;
      *(_WORD *)v51 = 2080;
      *(_QWORD *)&v51[2] = "Operation.h";
      v52 = 1024;
      v53 = 154;
      _os_log_error_impl(&dword_1B57BA000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v49);
    v30 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v41);
    std::runtime_error::runtime_error(&v42, &v41);
    std::runtime_error::runtime_error(&v43, &v42);
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = -1;
    v43.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v44 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v43);
    *(_QWORD *)&v55[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::"
                         "Thing, Argument_Types = <const AMCP::Thing &>]";
    v56 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v57 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v36);
    v39 = v36;
    v40 = v37;
    v36 = 0uLL;
    v37 = 0;
    v38 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v38);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v30, (uint64_t)buf);
  }
  v11 = v10;
  if (!*((_QWORD *)v10 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(AMCP::Thing const&)>>(),
        (v10 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v11 + 7))(4, (uint64_t)v11 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v16 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = pthread_self();
      v18 = pthread_mach_thread_np(v17);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v18;
      *(_WORD *)v51 = 2080;
      *(_QWORD *)&v51[2] = "Operation.h";
      v52 = 1024;
      v53 = 161;
      _os_log_error_impl(&dword_1B57BA000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v49);
    v19 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v41);
    std::runtime_error::runtime_error(&v42, &v41);
    std::runtime_error::runtime_error(&v43, &v42);
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = -1;
    v43.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v44 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v43);
    *(_QWORD *)&v55[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::"
                         "Thing, Argument_Types = <const AMCP::Thing &>]";
    v56 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v57 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v36);
    v39 = v36;
    v40 = v37;
    v36 = 0uLL;
    v37 = 0;
    v38 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v38);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v19, (uint64_t)buf);
  }
  v12 = *((_QWORD *)v10 + 3);
  if (!v12)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v12, a4);
  v13 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1B586B2B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,std::runtime_error a25,uint64_t a26,uint64_t a27)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(AMCP::Thing const&)>>()
{
  unsigned __int8 v0;
  int *v1;
  int v3;
  const std::type_info *v4;

  v1 = &OBJC_IVAR___DSP_HAL_Mock_IOProcessor__processorProperties;
  if ((v0 & 1) == 0)
  {
    v1 = &OBJC_IVAR___DSP_HAL_Mock_IOProcessor__processorProperties;
    if (v3)
    {
      v1 = &OBJC_IVAR___DSP_HAL_Mock_IOProcessor__processorProperties;
    }
  }
  return *((_QWORD *)v1 + 276);
}

void AMCP::Object::get_property_value_with_qualifier(AMCP::Object *this@<X0>, const AMCP::Address *a2@<X1>, const AMCP::Thing *a3@<X2>, const AMCP::Thing *a4@<X3>, uint64_t a5@<X8>)
{
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  int8x8_t *v13;
  NSObject **v14;
  unint64_t v15;
  BOOL v16;
  void (*v17)(uint64_t, const AMCP::Thing *, uint64_t, _QWORD);
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void (*v21)(uint64_t, const AMCP::Thing *, uint64_t, _QWORD);
  unint64_t *p_shared_owners;
  unint64_t v23;
  NSObject *v24;
  _opaque_pthread_t *v25;
  mach_port_t v26;
  NSObject **v27;
  _BYTE v28[10];
  __int16 v29;
  int v30;
  __int16 v31;
  const char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v8)
  {
    v11 = std::__shared_weak_count::lock(v8);
    v12 = v11;
    if (v11)
    {
      v13 = (int8x8_t *)*((_QWORD *)this + 2);
      if (v13)
      {
        if (*(_DWORD *)a2 == 707406378 || *((_DWORD *)a2 + 1) == 707406378 || *((_DWORD *)a2 + 2) == -1)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v11);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v27, "com.apple.coreaudio", "AMCP");
          v24 = *v27;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v27);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            v25 = pthread_self();
            v26 = pthread_mach_thread_np(v25);
            LODWORD(v27) = 67109890;
            HIDWORD(v27) = v26;
            *(_WORD *)v28 = 2080;
            *(_QWORD *)&v28[2] = "Core.h";
            v29 = 1024;
            v30 = 186;
            v31 = 2080;
            v32 = "!in_address.has_wildcards()";
            _os_log_error_impl(&dword_1B57BA000, v24, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", (uint8_t *)&v27, 0x22u);
          }
          abort();
        }
        AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v27, v13, (unsigned int *)a2);
        v14 = v27;
        if (v27)
        {
          v15 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(AMCP::Thing const&)>>();
          v16 = std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v14, v15) != 0;
        }
        else
        {
          v16 = 0;
        }
        v18 = *(std::__shared_weak_count **)v28;
        if (!*(_QWORD *)v28)
          goto LABEL_19;
        v19 = (unint64_t *)(*(_QWORD *)v28 + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
          if (v16)
            goto LABEL_20;
        }
        else
        {
LABEL_19:
          if (v16)
          {
LABEL_20:
            AMCP::Core::Core::call_operation_function<AMCP::Thing,AMCP::Thing const&>((AMCP::Log::Scope_Registry *)a5, v13, (unsigned int *)a2, (uint64_t)a3);
LABEL_24:
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v23 = __ldaxr(p_shared_owners);
            while (__stlxr(v23 - 1, p_shared_owners));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
            return;
          }
        }
        *(_QWORD *)(a5 + 32) = 0;
        *(_OWORD *)a5 = 0u;
        *(_OWORD *)(a5 + 16) = 0u;
        v21 = (void (*)(uint64_t, const AMCP::Thing *, uint64_t, _QWORD))*((_QWORD *)a4 + 4);
        if (v21)
          v21(1, a4, a5, 0);
        goto LABEL_24;
      }
    }
  }
  else
  {
    v12 = 0;
  }
  *(_QWORD *)(a5 + 32) = 0;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  v17 = (void (*)(uint64_t, const AMCP::Thing *, uint64_t, _QWORD))*((_QWORD *)a4 + 4);
  if (v17)
    v17(1, a4, a5, 0);
  if (v12)
    goto LABEL_24;
}

void sub_1B586B82C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Object::set_property_value_with_qualifier(AMCP::Object *this, const AMCP::Address *a2, const AMCP::Thing *a3, const AMCP::Thing *a4)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  AMCP::Address *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v5)
    return 0;
  v9 = std::__shared_weak_count::lock(v5);
  if (!v9)
    return 0;
  v10 = v9;
  v11 = (AMCP::Address *)*((_QWORD *)this + 2);
  if (v11)
  {
    AMCP::Core::Core::call_operation_function<void,AMCP::Thing const&,AMCP::Thing const&>(v11, (unsigned int *)a2, (uint64_t)a3, (uint64_t)a4);
    v12 = 1;
  }
  else
  {
    v12 = 0;
  }
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v12;
}

void AMCP::Core::Core::call_operation_function<void,AMCP::Thing const&,AMCP::Thing const&>(AMCP::Address *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v9;
  unint64_t v10;
  AMCP::Log::Scope_Registry *v11;
  AMCP::Log::Scope_Registry *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  NSObject *v17;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _opaque_pthread_t *v25;
  mach_port_t v26;
  void *exception;
  NSObject *v28;
  _opaque_pthread_t *v29;
  mach_port_t v30;
  void *v31;
  NSObject *v32;
  _opaque_pthread_t *v33;
  mach_port_t v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t v41;
  std::string v42;
  std::runtime_error v43;
  std::runtime_error v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char v50;
  uint8_t buf[8];
  _BYTE v52[10];
  __int16 v53;
  int v54;
  __int16 v55;
  _BYTE v56[14];
  const char *v57;
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (*a2 == 707406378 || a2[1] == 707406378 || a2[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v32 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      v33 = pthread_self();
      v34 = pthread_mach_thread_np(v33);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v34;
      *(_WORD *)v52 = 2080;
      *(_QWORD *)&v52[2] = "Core.h";
      v53 = 1024;
      v54 = 198;
      v55 = 2080;
      *(_QWORD *)v56 = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1B57BA000, v32, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v35, (int8x8_t *)a1, a2);
  v9 = v35;
  if (!v35)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v21 = *(std::__shared_weak_count **)v52;
    v22 = **(NSObject ***)buf;
    if (*(_QWORD *)v52)
    {
      v23 = (unint64_t *)(*(_QWORD *)v52 + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v25 = pthread_self();
      v26 = pthread_mach_thread_np(v25);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v26;
      *(_WORD *)v52 = 2080;
      *(_QWORD *)&v52[2] = "Core.h";
      v53 = 1024;
      v54 = 202;
      _os_log_error_impl(&dword_1B57BA000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v50);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v42);
    std::runtime_error::runtime_error(&v43, &v42);
    std::runtime_error::runtime_error(&v44, &v43);
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = -1;
    v44.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v45 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v44);
    *(_QWORD *)&v56[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = void, Argument_Types = <const AMCP::Thing &, const AMCP::Thing &>]";
    v57 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    v58 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v37);
    v40 = v37;
    v41 = v38;
    v37 = 0uLL;
    v38 = 0;
    v39 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v39);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v10 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&,AMCP::Thing const&)>>();
  v11 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10);
  if (!v11)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v28 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v29 = pthread_self();
      v30 = pthread_mach_thread_np(v29);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v30;
      *(_WORD *)v52 = 2080;
      *(_QWORD *)&v52[2] = "Operation.h";
      v53 = 1024;
      v54 = 154;
      _os_log_error_impl(&dword_1B57BA000, v28, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v50);
    v31 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v42);
    std::runtime_error::runtime_error(&v43, &v42);
    std::runtime_error::runtime_error(&v44, &v43);
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = -1;
    v44.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v45 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v44);
    *(_QWORD *)&v56[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, "
                         "Argument_Types = <const AMCP::Thing &, const AMCP::Thing &>]";
    v57 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v58 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v37);
    v40 = v37;
    v41 = v38;
    v37 = 0uLL;
    v38 = 0;
    v39 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v39);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v31, (uint64_t)buf);
  }
  v12 = v11;
  if (!*((_QWORD *)v11 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&,AMCP::Thing const&)>>(),
        (v11 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v12 + 7))(4, (uint64_t)v12 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v17 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = pthread_self();
      v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v19;
      *(_WORD *)v52 = 2080;
      *(_QWORD *)&v52[2] = "Operation.h";
      v53 = 1024;
      v54 = 161;
      _os_log_error_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v50);
    v20 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v42);
    std::runtime_error::runtime_error(&v43, &v42);
    std::runtime_error::runtime_error(&v44, &v43);
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = -1;
    v44.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v45 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v44);
    *(_QWORD *)&v56[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, "
                         "Argument_Types = <const AMCP::Thing &, const AMCP::Thing &>]";
    v57 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v58 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v37);
    v40 = v37;
    v41 = v38;
    v37 = 0uLL;
    v38 = 0;
    v39 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v39);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v20, (uint64_t)buf);
  }
  v13 = *((_QWORD *)v11 + 3);
  if (!v13)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 48))(v13, a3, a4);
  v14 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1B586BFB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,std::runtime_error a25,uint64_t a26,uint64_t a27)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&,AMCP::Thing const&)>>()
{
  unsigned __int8 v0;
  int *v1;
  int v3;
  const std::type_info *v4;

  v1 = &OBJC_IVAR___DSP_HAL_Mock_IOProcessor__processorProperties;
  if ((v0 & 1) == 0)
  {
    v1 = &OBJC_IVAR___DSP_HAL_Mock_IOProcessor__processorProperties;
    if (v3)
    {
      v1 = &OBJC_IVAR___DSP_HAL_Mock_IOProcessor__processorProperties;
    }
  }
  return *((_QWORD *)v1 + 278);
}

uint64_t AMCP::Object::set_property_value_with_qualifier_and_wait(AMCP::Object *this, const AMCP::Address *a2, const AMCP::Thing *a3, const AMCP::Thing *a4)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  AMCP::Address *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v5)
    return 0;
  v9 = std::__shared_weak_count::lock(v5);
  if (!v9)
    return 0;
  v10 = v9;
  v11 = (AMCP::Address *)*((_QWORD *)this + 2);
  if (v11)
  {
    AMCP::Core::Core::call_operation_function<void,AMCP::Thing const&,AMCP::Thing const&>(v11, (unsigned int *)a2, (uint64_t)a3, (uint64_t)a4);
    v12 = 1;
  }
  else
  {
    v12 = 0;
  }
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v12;
}

unint64_t AMCP::Object::get_stock_class_id(AMCP::Object *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  unint64_t simple_required;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
    simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(v5);
  else
    simple_required = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return simple_required;
}

unint64_t AMCP::Object::get_class_id(AMCP::Object *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  unint64_t simple_required;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
    simple_required = AMCP::Core::Core::get_simple_required_property<1668047219u>(v5);
  else
    simple_required = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return simple_required;
}

unint64_t AMCP::Core::Core::get_simple_required_property<1668047219u>(AMCP::Core::Core *a1)
{
  unint64_t result;
  NSObject *v2;
  _opaque_pthread_t *v3;
  mach_port_t v4;
  void *__p[2];
  char v6;
  _BYTE buf[10];
  char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  void **v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  strcpy(buf, "salcbolg");
  buf[9] = 0;
  LOWORD(v8) = 0;
  result = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!HIDWORD(result))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v2 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3 = pthread_self();
      v4 = pthread_mach_thread_np(v3);
      v6 = 4;
      strcpy((char *)__p, "clas");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v4;
      *(_WORD *)&buf[8] = 2080;
      v8 = "Core.h";
      v9 = 1024;
      v10 = 391;
      v11 = 2080;
      v12 = "optional_value.operator BOOL() == true";
      v13 = 2080;
      v14 = __p;
      v15 = 1024;
      v16 = 1735159650;
      v17 = 1024;
      v18 = 0;
      _os_log_error_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v6 < 0)
        operator delete(__p[0]);
    }
    abort();
  }
  return result;
}

void sub_1B586C598(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

unint64_t AMCP::Object::get_owner(AMCP::Object *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  unint64_t simple_required;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
    simple_required = AMCP::Core::Core::get_simple_required_property<1870098034u>(v5);
  else
    simple_required = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return simple_required;
}

unint64_t AMCP::Core::Core::get_simple_required_property<1870098034u>(AMCP::Core::Core *a1)
{
  unint64_t result;
  NSObject *v2;
  _opaque_pthread_t *v3;
  mach_port_t v4;
  void *__p[2];
  char v6;
  _BYTE buf[10];
  char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  void **v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  strcpy(buf, "rnwobolg");
  buf[9] = 0;
  LOWORD(v8) = 0;
  result = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!HIDWORD(result))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v2 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3 = pthread_self();
      v4 = pthread_mach_thread_np(v3);
      v6 = 4;
      strcpy((char *)__p, "ownr");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v4;
      *(_WORD *)&buf[8] = 2080;
      v8 = "Core.h";
      v9 = 1024;
      v10 = 391;
      v11 = 2080;
      v12 = "optional_value.operator BOOL() == true";
      v13 = 2080;
      v14 = __p;
      v15 = 1024;
      v16 = 1735159650;
      v17 = 1024;
      v18 = 0;
      _os_log_error_impl(&dword_1B57BA000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v6 < 0)
        operator delete(__p[0]);
    }
    abort();
  }
  return result;
}

void sub_1B586C794(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMCP::Object::get_creator(AMCP::Object *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  AMCP::Log::Scope_Registry *v8;
  CFTypeRef v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *__p[2];
  char v16;
  CFTypeRef cf;
  char v18;
  _BYTE buf[10];
  char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  void **v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
    {
      strcpy(buf, "glpobolg");
      buf[9] = 0;
      LOWORD(v20) = 0;
      AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(&cf, v7, (const AMCP::Address *)buf);
      if (!v18)
      {
        AMCP::Log::Scope_Registry::get(v8);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v12 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          v13 = pthread_self();
          v14 = pthread_mach_thread_np(v13);
          v16 = 4;
          strcpy((char *)__p, "oplg");
          *(_DWORD *)buf = 67110658;
          *(_DWORD *)&buf[4] = v14;
          *(_WORD *)&buf[8] = 2080;
          v20 = "Core.h";
          v21 = 1024;
          v22 = 391;
          v23 = 2080;
          v24 = "optional_value.operator BOOL() == true";
          v25 = 2080;
          v26 = __p;
          v27 = 1024;
          v28 = 1735159650;
          v29 = 1024;
          v30 = 0;
          _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v16 < 0)
            operator delete(__p[0]);
        }
        abort();
      }
      v9 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v9;
      std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
    }
    else
    {
      *a2 = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
  }
}

void sub_1B586C9BC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void AMCP::Object::get_owned_object_list(AMCP::Object *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  AMCP::Log::Scope_Registry *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *__p[2];
  char v16;
  void *v17;
  uint64_t v18;
  char v19;
  _BYTE buf[10];
  char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  void **v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
    {
      strcpy(buf, "#nwobolg");
      buf[9] = 0;
      LOWORD(v21) = 0;
      AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>((uint64_t)&v17, v7, (AMCP::Address *)buf);
      if (!v19)
      {
        AMCP::Log::Scope_Registry::get(v8);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v12 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          v13 = pthread_self();
          v14 = pthread_mach_thread_np(v13);
          v16 = 4;
          strcpy((char *)__p, "own#");
          *(_DWORD *)buf = 67110658;
          *(_DWORD *)&buf[4] = v14;
          *(_WORD *)&buf[8] = 2080;
          v21 = "Core.h";
          v22 = 1024;
          v23 = 391;
          v24 = 2080;
          v25 = "optional_value.operator BOOL() == true";
          v26 = 2080;
          v27 = __p;
          v28 = 1024;
          v29 = 1735159650;
          v30 = 1024;
          v31 = 0;
          _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v16 < 0)
            operator delete(__p[0]);
        }
        abort();
      }
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v9 = v17;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2, v17, v18, (v18 - (uint64_t)v17) >> 2);
      if (v9)
        operator delete(v9);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_1B586CC04(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMCP::Object::get_name(AMCP::Object *this@<X0>, _BYTE *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  int v11;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
    {
      v10 = 0x676C6F626C6E616DLL;
      v11 = 0;
      AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a2, v7, (const AMCP::Address *)&v10);
    }
    else
    {
      *a2 = 0;
      a2[8] = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
}

void AMCP::Object::get_name(AMCP::Object *this@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  AMCP::Core::Core *v8;
  const void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  int v13;

  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v6)
  {
    v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      v8 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
      if (v8)
      {
        v12 = 0x676C6F626C6E616DLL;
        v13 = 0;
        AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a3, v8, (AMCP::Address *)&v12, a2);
LABEL_9:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  v9 = *a2;
  if (v9)
    CFRetain(v9);
  *a3 = v9;
  if (v7)
    goto LABEL_9;
}

void AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(_QWORD *a1, AMCP::Core::Core *this, AMCP::Address *a3, const void **a4)
{
  _QWORD *v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  const void *v15;
  _BYTE v16[32];
  void (*v17)(_QWORD, _BYTE *, _QWORD, _QWORD);
  _QWORD *v18;
  std::__shared_weak_count *v19;

  if (!AMCP::Core::Core::has_property(this, a3))
    goto LABEL_15;
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v18, (int8x8_t *)this, (unsigned int *)a3);
  v8 = v18;
  if (!v18)
    goto LABEL_9;
  v9 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
  {
    v11 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v11))
    {
      AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v16, v8);
      AMCP::Thing::convert_to<applesauce::CF::StringRef>(a1, (uint64_t)v16);
      if (v17)
        v17(0, v16, 0, 0);
      goto LABEL_5;
    }
LABEL_9:
    v10 = 1;
    goto LABEL_10;
  }
  AMCP::Core::Operation::call_function<applesauce::CF::StringRef>((uint64_t)a1, v8);
LABEL_5:
  v10 = 0;
LABEL_10:
  v12 = v19;
  if (!v19)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v19->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (!v10)
      return;
  }
  else
  {
LABEL_14:
    if (!v10)
      return;
  }
LABEL_15:
  v15 = *a4;
  if (v15)
    CFRetain(v15);
  *a1 = v15;
}

void AMCP::Object::get_model_name(AMCP::Object *this@<X0>, _BYTE *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  int v11;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
    {
      v10 = 0x676C6F626C6D6F64;
      v11 = 0;
      AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a2, v7, (const AMCP::Address *)&v10);
    }
    else
    {
      *a2 = 0;
      a2[8] = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
}

void AMCP::Object::get_model_name(AMCP::Object *this@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  AMCP::Core::Core *v8;
  const void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  int v13;

  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v6)
  {
    v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      v8 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
      if (v8)
      {
        v12 = 0x676C6F626C6D6F64;
        v13 = 0;
        AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a3, v8, (AMCP::Address *)&v12, a2);
LABEL_9:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  v9 = *a2;
  if (v9)
    CFRetain(v9);
  *a3 = v9;
  if (v7)
    goto LABEL_9;
}

void AMCP::Object::get_manufacturer_name(AMCP::Object *this@<X0>, _BYTE *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  int v11;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
    {
      v10 = 0x676C6F626C6D616BLL;
      v11 = 0;
      AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a2, v7, (const AMCP::Address *)&v10);
    }
    else
    {
      *a2 = 0;
      a2[8] = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
}

void AMCP::Object::get_manufacturer_name(AMCP::Object *this@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  AMCP::Core::Core *v8;
  const void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  int v13;

  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v6)
  {
    v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      v8 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
      if (v8)
      {
        v12 = 0x676C6F626C6D616BLL;
        v13 = 0;
        AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a3, v8, (AMCP::Address *)&v12, a2);
LABEL_9:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  v9 = *a2;
  if (v9)
    CFRetain(v9);
  *a3 = v9;
  if (v7)
    goto LABEL_9;
}

void AMCP::Object::get_icon(AMCP::Object *this@<X0>, _BYTE *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  int v11;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
    {
      v10 = 0x676C6F6269636F6ELL;
      v11 = 0;
      AMCP::Core::Core::get_typed_property_value<applesauce::CF::URLRef,std::enable_if<true,void>>(a2, v7, (AMCP::Address *)&v10);
    }
    else
    {
      *a2 = 0;
      a2[8] = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
}

void AMCP::Core::Core::get_typed_property_value<applesauce::CF::URLRef,std::enable_if<true,void>>(_BYTE *a1, AMCP::Core::Core *this, AMCP::Address *a3)
{
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  void (*v15)(_QWORD, _QWORD *, _QWORD, _QWORD);
  _QWORD *v16;
  std::__shared_weak_count *v17;

  if (!AMCP::Core::Core::has_property(this, a3))
  {
LABEL_16:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v16, (int8x8_t *)this, (unsigned int *)a3);
  v6 = v16;
  if (!v16)
    goto LABEL_9;
  v7 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::URLRef ()(void)>>();
  if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v7))
  {
    AMCP::Core::Operation::call_function<applesauce::CF::URLRef>((uint64_t)v14, v6);
    v8 = 0;
    *(_QWORD *)a1 = v14[0];
    a1[8] = 1;
    goto LABEL_10;
  }
  v9 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v9))
  {
    AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v14, v6);
    AMCP::Thing::convert_to<applesauce::CF::URLRef>(&v13, (uint64_t)v14);
    *(_QWORD *)a1 = v13;
    a1[8] = 1;
    if (v15)
      v15(0, v14, 0, 0);
    v8 = 0;
  }
  else
  {
LABEL_9:
    v8 = 1;
  }
LABEL_10:
  v10 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v8)
    goto LABEL_16;
}

uint64_t AMCP::Core::Operation::call_function<applesauce::CF::URLRef>(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  AMCP::Log::Scope_Registry *v4;
  AMCP::Log::Scope_Registry *v5;
  uint64_t v6;
  NSObject *v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  void *v11;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *exception;
  __int128 v16;
  uint64_t v17;
  uint64_t (**v18)();
  __int128 v19;
  uint64_t v20;
  std::string v21;
  std::runtime_error v22;
  std::runtime_error v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  uint8_t buf[8];
  __int16 v31;
  char *v32;
  __int16 v33;
  int v34;
  const char *v35;
  const char *v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::URLRef ()(void)>>();
  v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a2, v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v14;
      v31 = 2080;
      v32 = "Operation.h";
      v33 = 1024;
      v34 = 154;
      _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v24 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    v35 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = applesauce::CF::URLRe"
          "f, Argument_Types = <>]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v37 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v5 = v4;
  if (!*((_QWORD *)v4 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::URLRef ()(void)>>(),
        (v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v8 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = pthread_self();
      v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v10;
      v31 = 2080;
      v32 = "Operation.h";
      v33 = 1024;
      v34 = 161;
      _os_log_error_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    v11 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v24 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    v35 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = applesauce::CF::URLRe"
          "f, Argument_Types = <>]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v37 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v11, (uint64_t)buf);
  }
  v6 = *((_QWORD *)v4 + 3);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
}

void sub_1B586D7EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

CFTypeRef *AMCP::Thing::convert_to<applesauce::CF::URLRef>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  CFTypeRef *result;
  CFTypeRef v7;
  CFTypeRef v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  std::bad_cast *v11;
  std::bad_cast *v12;
  std::bad_cast *v13;
  std::bad_cast *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t (*v18)(uint64_t, _OWORD *, _QWORD, uint64_t *);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_16;
  v4 = AMCP::Implementation::get_type_marker<applesauce::CF::URLRef>();
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 32);
  v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v4)
  {
    v19 = v4;
    result = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (result)
    {
      v7 = *result;
      if (*result)
        result = (CFTypeRef *)CFRetain(*result);
      *a1 = v7;
      return result;
    }
LABEL_16:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v16 = AMCP::Implementation::get_type_marker<applesauce::CF::URLRef>();
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v15 = v4;
  result = (CFTypeRef *)v18(4, v17, 0, &v15);
  if (!result)
  {
    v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E0DE4EA0], MEMORY[0x1E0DE4DA0]);
  }
  v8 = *result;
  if (*result)
    result = (CFTypeRef *)CFRetain(*result);
  *a1 = v8;
  if (v18)
    return (CFTypeRef *)v18(0, v17, 0, 0);
  return result;
}

void sub_1B586DB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<applesauce::CF::URLRef>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[57];
}

uint64_t AMCP::Implementation::get_type_marker<std::function<applesauce::CF::URLRef ()(void)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[339];
}

void AMCP::Object::get_icon(AMCP::Object *this@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  AMCP::Core::Core *v8;
  const void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  int v13;

  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v6)
  {
    v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      v8 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
      if (v8)
      {
        v12 = 0x676C6F6269636F6ELL;
        v13 = 0;
        AMCP::Core::Core::get_typed_property_value<applesauce::CF::URLRef,std::enable_if<true,void>>(a3, v8, (AMCP::Address *)&v12, a2);
LABEL_9:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  v9 = *a2;
  if (v9)
    CFRetain(v9);
  *a3 = v9;
  if (v7)
    goto LABEL_9;
}

void AMCP::Core::Core::get_typed_property_value<applesauce::CF::URLRef,std::enable_if<true,void>>(_QWORD *a1, AMCP::Core::Core *this, AMCP::Address *a3, const void **a4)
{
  _QWORD *v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  const void *v15;
  _BYTE v16[32];
  void (*v17)(_QWORD, _BYTE *, _QWORD, _QWORD);
  _QWORD *v18;
  std::__shared_weak_count *v19;

  if (!AMCP::Core::Core::has_property(this, a3))
    goto LABEL_15;
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v18, (int8x8_t *)this, (unsigned int *)a3);
  v8 = v18;
  if (!v18)
    goto LABEL_9;
  v9 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::URLRef ()(void)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
  {
    v11 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v11))
    {
      AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v16, v8);
      AMCP::Thing::convert_to<applesauce::CF::URLRef>(a1, (uint64_t)v16);
      if (v17)
        v17(0, v16, 0, 0);
      goto LABEL_5;
    }
LABEL_9:
    v10 = 1;
    goto LABEL_10;
  }
  AMCP::Core::Operation::call_function<applesauce::CF::URLRef>((uint64_t)a1, v8);
LABEL_5:
  v10 = 0;
LABEL_10:
  v12 = v19;
  if (!v19)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v19->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (!v10)
      return;
  }
  else
  {
LABEL_14:
    if (!v10)
      return;
  }
LABEL_15:
  v15 = *a4;
  if (v15)
    CFRetain(v15);
  *a1 = v15;
}

void AMCP::Object::get_configuration_app(AMCP::Object *this@<X0>, _BYTE *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  int v11;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
    {
      v10 = 0x676C6F6263617070;
      v11 = 0;
      AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a2, v7, (const AMCP::Address *)&v10);
    }
    else
    {
      *a2 = 0;
      a2[8] = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
}

void AMCP::Object::get_configuration_app(AMCP::Object *this@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  AMCP::Core::Core *v8;
  const void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  int v13;

  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v6)
  {
    v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      v8 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
      if (v8)
      {
        v12 = 0x676C6F6263617070;
        v13 = 0;
        AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a3, v8, (AMCP::Address *)&v12, a2);
LABEL_9:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  v9 = *a2;
  if (v9)
    CFRetain(v9);
  *a3 = v9;
  if (v7)
    goto LABEL_9;
}

void AMCP::Object::get_serial_number(AMCP::Object *this@<X0>, _BYTE *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  int v11;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
    {
      v10 = 0x676C6F62736E756DLL;
      v11 = 0;
      AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a2, v7, (const AMCP::Address *)&v10);
    }
    else
    {
      *a2 = 0;
      a2[8] = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
}

void AMCP::Object::get_serial_number(AMCP::Object *this@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  AMCP::Core::Core *v8;
  const void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  int v13;

  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v6)
  {
    v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      v8 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
      if (v8)
      {
        v12 = 0x676C6F62736E756DLL;
        v13 = 0;
        AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a3, v8, (AMCP::Address *)&v12, a2);
LABEL_9:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  v9 = *a2;
  if (v9)
    CFRetain(v9);
  *a3 = v9;
  if (v7)
    goto LABEL_9;
}

void AMCP::Object::get_firmware_version(AMCP::Object *this@<X0>, _BYTE *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  int v11;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
    {
      v10 = 0x676C6F626677766ELL;
      v11 = 0;
      AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a2, v7, (const AMCP::Address *)&v10);
    }
    else
    {
      *a2 = 0;
      a2[8] = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
}

void AMCP::Object::get_firmware_version(AMCP::Object *this@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  AMCP::Core::Core *v8;
  const void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  int v13;

  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v6)
  {
    v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      v8 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
      if (v8)
      {
        v12 = 0x676C6F626677766ELL;
        v13 = 0;
        AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a3, v8, (AMCP::Address *)&v12, a2);
LABEL_9:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  v9 = *a2;
  if (v9)
    CFRetain(v9);
  *a3 = v9;
  if (v7)
    goto LABEL_9;
}

void AMCP::Object::get_element_name(AMCP::Object *this@<X0>, const AMCP::Address *a2@<X1>, _BYTE *a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  AMCP::Core::Core *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int v12;
  uint64_t v13;

  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v5 && (v7 = std::__shared_weak_count::lock(v5)) != 0)
  {
    v8 = v7;
    v9 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v9)
    {
      v12 = 1818454126;
      v13 = *(_QWORD *)((char *)a2 + 4);
      AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a3, v9, (const AMCP::Address *)&v12);
    }
    else
    {
      *a3 = 0;
      a3[8] = 0;
    }
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *a3 = 0;
    a3[8] = 0;
  }
}

void AMCP::Object::get_element_name(AMCP::Object *this@<X0>, const AMCP::Address *a2@<X1>, const void **a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v9;
  AMCP::Core::Core *v10;
  const void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  uint64_t v15;

  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v7)
  {
    v9 = std::__shared_weak_count::lock(v7);
    if (v9)
    {
      v10 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
      if (v10)
      {
        v14 = 1818454126;
        v15 = *(_QWORD *)((char *)a2 + 4);
        AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a4, v10, (AMCP::Address *)&v14, a3);
LABEL_9:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
    }
  }
  else
  {
    v9 = 0;
  }
  v11 = *a3;
  if (v11)
    CFRetain(v11);
  *a4 = v11;
  if (v9)
    goto LABEL_9;
}

void AMCP::Object::get_element_category_name(AMCP::Object *this@<X0>, const AMCP::Address *a2@<X1>, _BYTE *a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  AMCP::Core::Core *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int v12;
  uint64_t v13;

  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v5 && (v7 = std::__shared_weak_count::lock(v5)) != 0)
  {
    v8 = v7;
    v9 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v9)
    {
      v12 = 1818452846;
      v13 = *(_QWORD *)((char *)a2 + 4);
      AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a3, v9, (const AMCP::Address *)&v12);
    }
    else
    {
      *a3 = 0;
      a3[8] = 0;
    }
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *a3 = 0;
    a3[8] = 0;
  }
}

void AMCP::Object::get_element_category_name(AMCP::Object *this@<X0>, const AMCP::Address *a2@<X1>, const void **a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v9;
  AMCP::Core::Core *v10;
  const void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  uint64_t v15;

  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v7)
  {
    v9 = std::__shared_weak_count::lock(v7);
    if (v9)
    {
      v10 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
      if (v10)
      {
        v14 = 1818452846;
        v15 = *(_QWORD *)((char *)a2 + 4);
        AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a4, v10, (AMCP::Address *)&v14, a3);
LABEL_9:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
    }
  }
  else
  {
    v9 = 0;
  }
  v11 = *a3;
  if (v11)
    CFRetain(v11);
  *a4 = v11;
  if (v9)
    goto LABEL_9;
}

void AMCP::Object::get_element_number_name(AMCP::Object *this@<X0>, const AMCP::Address *a2@<X1>, _BYTE *a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  AMCP::Core::Core *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int v12;
  uint64_t v13;

  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v5 && (v7 = std::__shared_weak_count::lock(v5)) != 0)
  {
    v8 = v7;
    v9 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v9)
    {
      v12 = 1818455662;
      v13 = *(_QWORD *)((char *)a2 + 4);
      AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a3, v9, (const AMCP::Address *)&v12);
    }
    else
    {
      *a3 = 0;
      a3[8] = 0;
    }
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *a3 = 0;
    a3[8] = 0;
  }
}

void AMCP::Object::get_element_number_name(AMCP::Object *this@<X0>, const AMCP::Address *a2@<X1>, const void **a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v9;
  AMCP::Core::Core *v10;
  const void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  uint64_t v15;

  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v7)
  {
    v9 = std::__shared_weak_count::lock(v7);
    if (v9)
    {
      v10 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
      if (v10)
      {
        v14 = 1818455662;
        v15 = *(_QWORD *)((char *)a2 + 4);
        AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a4, v10, (AMCP::Address *)&v14, a3);
LABEL_9:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
    }
  }
  else
  {
    v9 = 0;
  }
  v11 = *a3;
  if (v11)
    CFRetain(v11);
  *a4 = v11;
  if (v9)
    goto LABEL_9;
}

void AMCP::Object::get_resource_bundle_url(AMCP::Object *this@<X0>, _BYTE *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  int v11;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
    {
      v10 = 0x676C6F6272737263;
      v11 = 0;
      AMCP::Core::Core::get_typed_property_value<applesauce::CF::URLRef,std::enable_if<true,void>>(a2, v7, (AMCP::Address *)&v10);
    }
    else
    {
      *a2 = 0;
      a2[8] = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
}

void AMCP::Object::get_resource_bundle_url(AMCP::Object *this@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  AMCP::Core::Core *v8;
  const void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  int v13;

  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v6)
  {
    v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      v8 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
      if (v8)
      {
        v12 = 0x676C6F6272737263;
        v13 = 0;
        AMCP::Core::Core::get_typed_property_value<applesauce::CF::URLRef,std::enable_if<true,void>>(a3, v8, (AMCP::Address *)&v12, a2);
LABEL_9:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  v9 = *a2;
  if (v9)
    CFRetain(v9);
  *a3 = v9;
  if (v7)
    goto LABEL_9;
}

void AMCP::Object::get_localized_string(AMCP::Object *this@<X0>, CFStringRef *a2@<X1>, CFTypeRef *a3@<X2>, CFStringRef *a4@<X3>, CFStringRef *a5@<X4>, CFTypeRef *a6@<X8>)
{
  CFTypeRef v11;
  CFBundleRef v12;
  CFStringRef v13;
  CFTypeRef v14;
  CFStringRef v15;
  CFTypeRef v16;
  CFBundleRef bundle;
  CFURLRef bundleURL;
  char v19;
  CFTypeRef cf;
  CFTypeRef v21;
  CFTypeRef v22;

  v11 = *a3;
  if (*a3)
  {
    CFRetain(*a3);
    cf = v11;
  }
  else
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "");
  }
  AMCP::Object::get_resource_bundle_url(this, &bundleURL);
  if (!v19)
  {
    *a6 = cf;
    cf = 0;
    return;
  }
  v12 = CFBundleCreate(0, bundleURL);
  mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::BundleRef_Traits>::BasicRef(&bundle, v12);
  *a6 = 0;
  v22 = 0;
  if (!bundle)
    goto LABEL_19;
  if (*a2)
  {
    v13 = CFBundleCopyLocalizedString(bundle, *a2, 0, *a5);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v21, v13);
    v14 = v21;
    v22 = v21;
    if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)v21, a2))
    {
      *a6 = v14;
      if (v14)
        goto LABEL_16;
    }
    else
    {
      v22 = 0;
      if (v14)
        CFRelease(v14);
    }
  }
  if (!*a4)
    goto LABEL_19;
  v15 = CFBundleCopyLocalizedString(bundle, *a4, 0, *a5);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v21, v15);
  v14 = v21;
  v22 = v21;
  if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)v21, a4) == kCFCompareEqualTo)
  {
    v22 = 0;
    if (v14)
      CFRelease(v14);
    goto LABEL_19;
  }
  *a6 = v14;
  if (!v14)
  {
LABEL_19:
    v16 = cf;
    *a6 = cf;
    if (v16)
      CFRetain(v16);
    goto LABEL_21;
  }
LABEL_16:
  CFRetain(v14);
  CFRelease(v14);
LABEL_21:
  if (bundle)
    CFRelease(bundle);
  if (bundleURL)
    CFRelease(bundleURL);
  if (cf)
    CFRelease(cf);
}

void sub_1B586EB24(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  const void **v6;
  va_list va;

  va_start(va, a6);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  applesauce::CF::StringRef::~StringRef(v6);
  __clang_call_terminate(a1);
}

_QWORD *mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::BundleRef_Traits>::BasicRef(_QWORD *a1, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *a1 = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFBundleGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return a1;
}

void sub_1B586EBD8(_Unwind_Exception *a1)
{
  const void **v1;
  void *v2;

  __cxa_free_exception(v2);
  applesauce::CF::ObjectRef<__CFBundle *>::~ObjectRef(v1);
  _Unwind_Resume(a1);
}

const void **applesauce::CF::ObjectRef<__CFBundle *>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t AMCP::Object::constructed_correct_class(AMCP::Object *this, AMCP *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  unsigned int simple_required;
  uint64_t is_base_of;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    return 1;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 1;
  v6 = v5;
  v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v7)
  {
    simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(v7);
    is_base_of = AMCP::is_base_of(a2, simple_required);
  }
  else
  {
    is_base_of = 1;
  }
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return is_base_of;
}

void AMCP::Object::get_control_list(AMCP::Object *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  AMCP::Core::Core *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[3];
  _DWORD v13[3];

  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v5 && (v7 = std::__shared_weak_count::lock(v5)) != 0)
  {
    v8 = v7;
    v9 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v9)
    {
      memset(v12, 0, sizeof(v12));
      v13[0] = 1668575852;
      v13[1] = a2;
      v13[2] = 0;
      AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>(a3, v9, (AMCP::Address *)v13, (uint64_t)v12);
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>(_QWORD *a1, AMCP::Core::Core *this, AMCP::Address *a3, uint64_t a4)
{
  _QWORD *v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _BYTE v15[32];
  void (*v16)(_QWORD, _BYTE *, _QWORD, _QWORD);
  _QWORD *v17;
  std::__shared_weak_count *v18;

  if (!AMCP::Core::Core::has_property(this, a3))
    goto LABEL_15;
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v17, (int8x8_t *)this, (unsigned int *)a3);
  v8 = v17;
  if (!v17)
    goto LABEL_9;
  v9 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
  {
    v11 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v11))
    {
      AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v15, v8);
      AMCP::Thing::convert_to<std::vector<unsigned int>>(a1, (uint64_t)v15);
      if (v16)
        v16(0, v15, 0, 0);
      goto LABEL_5;
    }
LABEL_9:
    v10 = 1;
    goto LABEL_10;
  }
  AMCP::Core::Operation::call_function<std::vector<unsigned int>>((uint64_t)a1, v8);
LABEL_5:
  v10 = 0;
LABEL_10:
  v12 = v18;
  if (!v18)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (!v10)
      return;
  }
  else
  {
LABEL_14:
    if (!v10)
      return;
  }
LABEL_15:
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
}

uint64_t AMCP::Object::get_control(AMCP::Object *this, int a2, int a3, int a4)
{
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  int class_id;
  int scope;
  int element;
  BOOL v14;
  BOOL v15;
  _BOOL4 v16;
  _QWORD v18[3];
  std::__shared_weak_count *v19;
  void *__p;
  unsigned int *v21;

  AMCP::Object::get_control_list(this, a3, &__p);
  v8 = (unsigned int *)__p;
  v9 = v21;
  if (__p == v21)
  {
    v10 = 0;
    if (!__p)
      return v10;
    goto LABEL_17;
  }
  while (1)
  {
    v10 = *v8;
    AMCP::Control::Control((uint64_t)v18, *((_QWORD *)this + 4), *v8);
    class_id = AMCP::Object::get_class_id((AMCP::Object *)v18);
    scope = AMCP::Control::get_scope((AMCP::Control *)v18);
    element = AMCP::Control::get_element((AMCP::Control *)v18);
    v14 = class_id == a2 && scope == a3;
    v15 = v14 && element == a4;
    v16 = v15;
    v18[0] = &off_1E696F358;
    if (v19)
      std::__shared_weak_count::__release_weak(v19);
    if (v16)
      break;
    if (++v8 == v9)
    {
      v10 = 0;
      break;
    }
  }
  v8 = (unsigned int *)__p;
  if (__p)
  {
LABEL_17:
    v21 = v8;
    operator delete(v8);
  }
  return v10;
}

void HALS_ReferenceStreamControlPropertyHandler::~HALS_ReferenceStreamControlPropertyHandler(HALS_ReferenceStreamControlPropertyHandler *this)
{
  JUMPOUT(0x1B5E50688);
}

uint64_t HALS_ReferenceStreamControlPropertyHandler::SetReferenceStreamControlValue(_QWORD *a1)
{
  int v1;
  uint64_t v2;
  _QWORD *exception;

  v1 = *(_DWORD *)(a1[1] + 60);
  if (v1 == 1)
  {
    v2 = 4;
  }
  else
  {
    if (v1)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = "HALS_ReferenceStreamControlPropertyHandler::SetReferenceStreamControlValue: unknown control type";
      __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
    }
    v2 = 3;
  }
  return (*(uint64_t (**)(void))(*a1 + 8 * v2))();
}

void HALS_ReferenceStreamControlPropertyHandler::SetHardwareReferenceStreamControlValue(HALS_ReferenceStreamControlPropertyHandler *this, HALS_Client *a2, uint64_t a3)
{
  HALS_ObjectMap *v6;
  HALS_Object *v7;
  _DWORD *exception;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(*((_QWORD *)this + 1)
                                                                                                + 56));
  if (!v6)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = 136315394;
      v10 = "HALS_ReferenceStreamControlPropertyHandler.cpp";
      v11 = 1024;
      v12 = 107;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_ReferenceStreamControlPropertyHandler::SetHardwareReferenceStreamControlValue: owning device is missing", (uint8_t *)&v9, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  (*(void (**)(_QWORD, HALS_Client *, uint64_t))(**((_QWORD **)this + 1) + 216))(*((_QWORD *)this + 1), a2, a3);
  (*(void (**)(HALS_ObjectMap *, HALS_Client *, _QWORD))(*(_QWORD *)v6 + 944))(v6, a2, *(unsigned int *)(*((_QWORD *)this + 1) + 16));
  HALS_ObjectMap::ReleaseObject(v6, v7);
}

void sub_1B586F19C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void HALS_ReferenceStreamControlPropertyHandler::SetSoftwareReferenceStreamControlValue(HALS_ReferenceStreamControlPropertyHandler *this, HALS_Client *a2, char a3)
{
  uint64_t v6;
  HALS_ObjectMap *v7;
  uint64_t v8;
  HALS_Object *v9;
  _DWORD *exception;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v6 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(*((_QWORD *)this + 1) + 56));
  v7 = (HALS_ObjectMap *)v6;
  if (!v6)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v11 = 136315394;
      v12 = "HALS_ReferenceStreamControlPropertyHandler.cpp";
      v13 = 1024;
      v14 = 120;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_ReferenceStreamControlPropertyHandler::SetSoftwareReferenceStreamControlValue: owning device is missing", (uint8_t *)&v11, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 560947818;
  }
  *((_BYTE *)this + 16) = a3;
  if (a2)
    v8 = *((unsigned int *)a2 + 4);
  else
    v8 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 936))(v6, 1, v8);
  HALS_ObjectMap::ReleaseObject(v7, v9);
}

void sub_1B586F308(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t HALS_ReferenceStreamControlPropertyHandler::GetReferenceStreamControlValue(_QWORD *a1)
{
  int v1;
  uint64_t v2;
  _QWORD *exception;

  v1 = *(_DWORD *)(a1[1] + 60);
  if (v1 == 1)
  {
    v2 = 7;
  }
  else
  {
    if (v1)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = "HALS_ReferenceStreamControlPropertyHandler::GetReferenceStreamControlValue: unknown control type";
      __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
    }
    v2 = 6;
  }
  return (*(uint64_t (**)(void))(*a1 + 8 * v2))();
}

uint64_t HALS_ReferenceStreamControlPropertyHandler::GetHardwareReferenceStreamControlValue(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 224))(*(_QWORD *)(a1 + 8));
}

uint64_t HALS_ReferenceStreamControlPropertyHandler::GetSoftwareReferenceStreamControlValue(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

void HALS_ReferenceStreamControlPropertyHandler::SetReferenceStreamControlPropertyData(HALS_ReferenceStreamControlPropertyHandler *this, HALS_Client *a2, int a3)
{
  HALS_ObjectMap *v5;
  HALS_ObjectMap *v6;
  uint64_t v7;
  HALS_ObjectMap *v8;
  BOOL v9;
  HALS_ObjectMap *v10;
  HALS_Object *v11;
  HALS_ObjectMap *v12;
  uint64_t v13;
  _BYTE *v14;
  HALS_Object *v15;
  _QWORD *v16;
  HALS_ObjectMap *v17;
  uint64_t *v18;
  HALS_Object *v19;
  int v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  HALS_Object *v24;
  _BYTE *v25;
  uint64_t v26;
  HALS_Object *v27;
  HALS_Object *v28;
  _QWORD *exception;
  _DWORD *v30;
  HALS_ObjectMap *v31;
  _BYTE v32[24];
  uint64_t v33;
  uint64_t v34;
  char v35;
  _BYTE v36[24];
  _BYTE *v37;
  _BYTE v38[24];
  _BYTE *v39;
  uint8_t buf[12];
  __int16 v41;
  int v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 15) >= 2u)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = "HALS_ReferenceStreamControlPropertyHandler::SetReferenceStreamControlPropertyData: unknown control type";
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  v5 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 14));
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_ReferenceStreamControlPropertyHandler.cpp";
      v41 = 1024;
      v42 = 44;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_ReferenceStreamControlPropertyHandler::SetReferenceStreamControlPropertyData: owning device is missing", buf, 0x12u);
    }
    v30 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v30 = &off_1E69A1B30;
    v30[2] = 560947818;
  }
  if (a2)
    v6 = (HALS_ObjectMap *)*((unsigned int *)a2 + 4);
  else
    v6 = 0;
  v7 = 0;
  *(_QWORD *)buf = 0x696E70746F757470;
  do
  {
    v8 = (HALS_ObjectMap *)(*(uint64_t (**)(HALS_ObjectMap *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 640))(v5, 1702259059, *(unsigned int *)&buf[v7], 0);
    if (v8)
      v9 = 1;
    else
      v9 = v7 == 4;
    v7 += 4;
  }
  while (!v9);
  v31 = v8;
  v10 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v6);
  v12 = v10;
  if (v31)
  {
    HALS_ObjectMap::RetainObject(v10, v11);
    v13 = *((_QWORD *)v5 + 55);
    v14 = operator new(0x20uLL);
    *(_QWORD *)v14 = &off_1E699E558;
    *((_QWORD *)v14 + 1) = v5;
    *((_QWORD *)v14 + 2) = &v31;
    *((_DWORD *)v14 + 6) = (_DWORD)v6;
    v39 = v14;
    HALS_ObjectMap::RetainObject(v12, v15);
    v37 = 0;
    v16 = operator new(0x28uLL);
    *v16 = &off_1E699E5E8;
    v16[1] = v5;
    *((_DWORD *)v16 + 4) = (_DWORD)v6;
    v16[3] = v12;
    *((_BYTE *)v16 + 32) = a3;
    v37 = v16;
    v17 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v6);
    v34 = v13;
    v35 = 1;
    std::__shared_mutex_base::lock((std::__shared_mutex_base *)v13);
    v18 = *(uint64_t **)(v13 + 184);
    if (v18)
    {
      while (*((_DWORD *)v18 + 4) != (_DWORD)v6)
      {
        v18 = (uint64_t *)*v18;
        if (!v18)
          goto LABEL_16;
      }
      if ((a3 & 1) != 0)
        goto LABEL_20;
    }
    else
    {
LABEL_16:
      if ((a3 & 1) == 0)
      {
LABEL_20:
        std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v34);
        goto LABEL_28;
      }
    }
    std::unordered_set<unsigned int>::unordered_set((uint64_t)buf, v13 + 168);
    std::unordered_set<unsigned int>::unordered_set((uint64_t)v32, v13 + 208);
    if (a3)
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(v13 + 168, v6, (int)v6);
    else
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__erase_unique<unsigned int>((_QWORD *)(v13 + 168), v6);
    v20 = (v43 | v33) != 0;
    v21 = (*(_QWORD *)(v13 + 192) | *(_QWORD *)(v13 + 232)) == 0;
    std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)v32);
    std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)buf);
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v34);
    if (v20 == v21)
    {
      if (v17)
        std::function<void ()(HALS_Client *,BOOL)>::operator()((uint64_t)v39, (uint64_t)v17, a3);
      else
        std::function<void ()(HALS_Client *,BOOL)>::operator()((uint64_t)v39, 0, a3);
    }
    else
    {
      if (!v37)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_BYTE *))(*(_QWORD *)v37 + 48))(v37);
    }
LABEL_28:
    HALS_ObjectMap::ReleaseObject(v17, v19);
    v22 = v37;
    if (v37 == v36)
    {
      v23 = 4;
      v22 = v36;
    }
    else
    {
      if (!v37)
        goto LABEL_33;
      v23 = 5;
    }
    (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_33:
    pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
    v25 = v39;
    if (v39 == v38)
    {
      v26 = 4;
      v25 = v38;
    }
    else
    {
      if (!v39)
      {
LABEL_38:
        HALS_ObjectMap::ReleaseObject(v12, v24);
        goto LABEL_39;
      }
      v26 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
    goto LABEL_38;
  }
LABEL_39:
  HALS_ObjectMap::ReleaseObject(v12, v11);
  HALS_ObjectMap::ReleaseObject(v31, v27);
  HALS_ObjectMap::ReleaseObject(v5, v28);
}

void sub_1B586F77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, HALS_ObjectMap *a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,char *a24)
{
  HALS_ObjectMap *v24;
  HALS_ObjectMap *v25;
  HALS_ObjectMap *v26;
  uint64_t v27;
  HALS_Object *v29;
  HALS_Object *v30;
  char *v31;
  uint64_t v32;
  HALS_Object *v33;
  char *v34;
  uint64_t v35;
  HALS_Object *v36;
  HALS_Object *v37;
  HALS_Object *v38;

  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)&a10);
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(v27 - 112);
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a15);
  HALS_ObjectMap::ReleaseObject(v26, v29);
  v31 = a20;
  if (a20 == &a17)
  {
    v32 = 4;
    v31 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v32 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
  v31 = 0;
LABEL_6:
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v31, v30);
  v34 = a24;
  if (a24 == &a21)
  {
    v35 = 4;
    v34 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_11;
    v35 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
LABEL_11:
  HALS_ObjectMap::ReleaseObject(v25, v33);
  HALS_ObjectMap::ReleaseObject(v25, v36);
  HALS_ObjectMap::ReleaseObject(a9, v37);
  HALS_ObjectMap::ReleaseObject(v24, v38);
  _Unwind_Resume(a1);
}

BOOL HALS_ReferenceStreamControlPropertyHandler::GetReferenceStreamControlPropertyData(HALS_ReferenceStreamControlPropertyHandler *this, const HALS_Client *a2)
{
  uint64_t v3;
  HALS_ObjectMap *v4;
  int v5;
  _BOOL8 ReferenceStreamStateForClient;
  HALS_Object *v7;
  _QWORD *exception;
  _DWORD *v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 15) >= 2u)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = "HALS_ReferenceStreamControlPropertyHandler::GetReferenceStreamControlPropertyData: unknown control type";
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  v3 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 14));
  v4 = (HALS_ObjectMap *)v3;
  if (!v3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v11 = 136315394;
      v12 = "HALS_ReferenceStreamControlPropertyHandler.cpp";
      v13 = 1024;
      v14 = 69;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_ReferenceStreamControlPropertyHandler::GetReferenceStreamControlPropertyData: owning device is missing", (uint8_t *)&v11, 0x12u);
    }
    v10 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v10 = &off_1E69A1B30;
    v10[2] = 560947818;
  }
  if (a2)
    v5 = *((_DWORD *)a2 + 4);
  else
    v5 = 0;
  ReferenceStreamStateForClient = HALS_ReferenceStreamStateManager::GetReferenceStreamStateForClient(*(std::__shared_mutex_base **)(v3 + 440), v5);
  HALS_ObjectMap::ReleaseObject(v4, v7);
  return ReferenceStreamStateForClient;
}

void sub_1B586FA20(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void IOProcessorHookForDSP::~IOProcessorHookForDSP(IOProcessorHookForDSP *this)
{
  IOProcessorHookForDSP::~IOProcessorHookForDSP(this);
  JUMPOUT(0x1B5E50688);
}

{
  void *v2;
  void *v3;
  IOProcessorHookForDSP *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E696F4B8;
  v2 = (void *)*((_QWORD *)this + 21);
  if (v2)
  {
    *((_QWORD *)this + 22) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 18);
  if (v3)
  {
    *((_QWORD *)this + 19) = v3;
    operator delete(v3);
  }
  v4 = (IOProcessorHookForDSP *)*((_QWORD *)this + 7);
  if (v4 == (IOProcessorHookForDSP *)((char *)this + 32))
  {
    v5 = 4;
    v4 = (IOProcessorHookForDSP *)((char *)this + 32);
  }
  else
  {
    if (!v4)
      return;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
}

BOOL IOProcessorHookForDSP::Init(IOProcessorHookForDSP *this, const AudioStreamBasicDescription *a2, const AudioStreamBasicDescription *a3)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  _DWORD **v12;
  unint64_t v13;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<char>::value_type __x;
  std::vector<char>::value_type v19;

  v3 = *(_OWORD *)&a2->mSampleRate;
  v4 = *(_OWORD *)&a2->mBytesPerPacket;
  *((_QWORD *)this + 12) = *(_QWORD *)&a2->mBitsPerChannel;
  *((_OWORD *)this + 4) = v3;
  *((_OWORD *)this + 5) = v4;
  v5 = *(_QWORD *)&a3->mBitsPerChannel;
  v6 = *(_OWORD *)&a3->mBytesPerPacket;
  *(_OWORD *)((char *)this + 104) = *(_OWORD *)&a3->mSampleRate;
  *((_QWORD *)this + 17) = v5;
  *(_OWORD *)((char *)this + 120) = v6;
  *(_QWORD *)&v6 = *((_QWORD *)this + 8);
  *(_QWORD *)&v4 = *((_QWORD *)this + 13);
  *((_BYTE *)this + 24) = *(double *)&v6 == *(double *)&v4;
  if (*(double *)&v6 != *(double *)&v4)
    return 0;
  v8 = *(_QWORD *)(*((_QWORD *)this + 1) + 8) - **((_QWORD **)this + 1);
  v9 = v8 >> 7;
  v10 = (v8 >> 3) & 0xFFFFFFFF0 | 8;
  __x = 0;
  v11 = (_DWORD *)*((_QWORD *)this + 18);
  v12 = (_DWORD **)((char *)this + 144);
  v13 = *((_QWORD *)this + 19) - (_QWORD)v11;
  if (v10 <= v13)
  {
    if (v10 < v13)
      *((_QWORD *)this + 19) = (char *)v11 + v10;
  }
  else
  {
    std::vector<char>::__append((std::vector<char> *)this + 6, v10 - v13, &__x);
    v11 = *v12;
  }
  *v11 = v9;
  v15 = (_DWORD *)*((_QWORD *)this + 21);
  v16 = *((_QWORD *)this + 22);
  v19 = 0;
  v17 = v16 - (_QWORD)v15;
  if (v17 > 0x17)
  {
    if (v17 != 24)
      *((_QWORD *)this + 22) = v15 + 6;
  }
  else
  {
    std::vector<char>::__append((std::vector<char> *)this + 7, 24 - v17, &v19);
    v15 = (_DWORD *)*((_QWORD *)this + 21);
  }
  *v15 = 1;
  return *((_BYTE *)this + 24) != 0;
}

void IOProcessorHookForDSP::Process(IOProcessorHookForDSP *this, __n128 a2, const unsigned __int8 *a3, unsigned __int8 *a4, int a5)
{
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  caulk::concurrent::messenger *v23;
  _opaque_pthread_t *v24;
  mach_port_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  size_t v30;
  size_t v31;
  std::logic_error *exception;
  unsigned int *v33;
  std::__shared_weak_count *v34;
  int v35;
  unsigned int *v36;

  if (*((_BYTE *)this + 24))
  {
    v9 = *((_QWORD *)this + 7);
    if (v9)
    {
      v10 = (unsigned int *)*((_QWORD *)this + 21);
      v11 = *v10;
      if (v11 != (unint64_t)(*((_QWORD *)this + 22) - (_QWORD)v10 - 8) >> 4)
        __assert_rtn("GetNumberBuffers", "CoreAudioBaseTypes.hpp", 1096, "GetAudioBufferList().mNumberBuffers == (mStorage.size() - kHeaderSize) / sizeof(AudioBuffer)");
      if (!(_DWORD)v11)
        goto LABEL_29;
      *((_QWORD *)v10 + 2) = a4;
      v10[3] = *((_DWORD *)this + 32) * a5;
      v10[2] = *((_DWORD *)this + 33);
      v12 = (uint64_t *)*((_QWORD *)this + 1);
      v13 = *v12;
      v14 = v12[1];
      v15 = (unsigned int *)*((_QWORD *)this + 18);
      v16 = v14 - v13;
      if (v14 != v13)
      {
        v17 = *v15;
        if (v17 != (unint64_t)(*((_QWORD *)this + 19) - (_QWORD)v15 - 8) >> 4)
          __assert_rtn("GetNumberBuffers", "CoreAudioBaseTypes.hpp", 1096, "GetAudioBufferList().mNumberBuffers == (mStorage.size() - kHeaderSize) / sizeof(AudioBuffer)");
        v18 = v16 >> 7;
        if ((unint64_t)(v16 >> 7) <= 1)
          v18 = 1;
        v19 = v15 + 4;
        while (v17)
        {
          if (v13 == *((_QWORD *)this + 2))
          {
            *v19 = a3;
            *((_DWORD *)v19 - 1) = *((_DWORD *)this + 22) * a5;
            v22 = (uint64_t)this + 92;
          }
          else
          {
            v20 = *(_QWORD *)(v13 + 104);
            v21 = *(unsigned int *)(v13 + 48);
            if (v20)
            {
              *v19 = *(_QWORD *)(v13 + 32) + v21;
              *((_DWORD *)v19 - 1) = *(_DWORD *)(v20 + 48) * a5;
              v22 = v20 + 52;
            }
            else
            {
              *v19 = *(_QWORD *)(v13 + 16) + v21;
              *((_DWORD *)v19 - 1) = MEMORY[0x30] * a5;
              v22 = 52;
            }
          }
          *((_DWORD *)v19 - 2) = *(_DWORD *)v22;
          v13 += 128;
          v19 += 2;
          --v17;
          if (!--v18)
            goto LABEL_17;
        }
LABEL_29:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::out_of_range::out_of_range[abi:ne180100](exception, "accessing a CA::BufferList with an out-of-range index");
        __cxa_throw(exception, (struct type_info *)off_1E696A668, (void (*)(void *))MEMORY[0x1E0DE42E0]);
      }
LABEL_17:
      v33 = v15;
      v36 = v10;
      v35 = a5;
      (*(void (**)(uint64_t, unsigned int **, unsigned int **, int *, __n128))(*(_QWORD *)v9 + 48))(v9, &v33, &v36, &v35, a2);
    }
    else
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v33, "com.apple.coreaudio", "AMCP");
      v23 = (caulk::concurrent::messenger *)*((_QWORD *)v33 + 1);
      v24 = pthread_self();
      v25 = pthread_mach_thread_np(v24);
      v26 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
      *(_DWORD *)(v26 + 16) = 0;
      *(_BYTE *)(v26 + 20) = 2;
      *(_DWORD *)(v26 + 24) = v25;
      *(_QWORD *)(v26 + 32) = "HALS_IODSPInfo.cpp";
      *(_DWORD *)(v26 + 40) = 302;
      *(_QWORD *)(v26 + 48) = this;
      *(_QWORD *)v26 = &off_1E696F530;
      *(_QWORD *)(v26 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v23, (caulk::concurrent::message *)v26);
      v27 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v29 = __ldaxr(p_shared_owners);
        while (__stlxr(v29 - 1, p_shared_owners));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = (*((_DWORD *)this + 22) * a5 * *((_DWORD *)this + 23));
      v31 = (*((_DWORD *)this + 32) * a5 * *((_DWORD *)this + 33));
      if ((_DWORD)v30 == (_DWORD)v31)
        memcpy(a4, a3, v30);
      else
        bzero(a4, v31);
    }
  }
}

void sub_1B586FEA4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<IOProcessorHookForDSP::Process(double,unsigned char const*,unsigned char *,unsigned int)::$_0,std::tuple<unsigned int,char const*,int,IOProcessorHookForDSP*>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<IOProcessorHookForDSP::Process(double,unsigned char const*,unsigned char *,unsigned int)::$_0,std::tuple<unsigned int,char const*,int,IOProcessorHookForDSP*>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  caulk::concurrent::message *v12;
  uint8_t buf[8];
  _BYTE v14[10];
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v14;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v14)
  {
    v4 = (unint64_t *)(*(_QWORD *)v14 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v14 = 2080;
    *(_QWORD *)&v14[2] = v8;
    v15 = 1024;
    v16 = v9;
    v17 = 2048;
    v18 = v10;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d [hal_dsp] %p Fallback processing from custom IOProcessor hook without a DSP callback, may copy or silence output.", buf, 0x22u);
  }
  return caulk::concurrent::details::rt_message_call<IOProcessorHookForDSP::Process(double,unsigned char const*,unsigned char *,unsigned int)::$_0,std::tuple<unsigned int,char const*,int,IOProcessorHookForDSP*>>::rt_cleanup::~rt_cleanup(&v12);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<IOProcessorHookForDSP::Process(double,unsigned char const*,unsigned char *,unsigned int)::$_0,std::tuple<unsigned int,char const*,int,IOProcessorHookForDSP*>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n, std::vector<char>::const_reference __x)
{
  std::vector<char>::size_type v4;
  char *value;
  char *end;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  std::vector<char>::value_type *v16;
  std::vector<char>::pointer begin;
  char v18;

  v4 = __n;
  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      v13 = &end[__n];
      do
      {
        *end++ = *__x;
        --v4;
      }
      while (v4);
      end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    v8 = end - this->__begin_;
    v9 = v8 + __n;
    if ((uint64_t)(v8 + __n) < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v10 = value - this->__begin_;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)operator new(v11);
    else
      v12 = 0;
    v14 = &v12[v8];
    v15 = &v12[v8 + v4];
    v16 = &v12[v8];
    do
    {
      *v16++ = *__x;
      --v4;
    }
    while (v4);
    begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        v18 = *--end;
        *--v14 = v18;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v15;
    this->__end_cap_.__value_ = &v12[v11];
    if (end)
      operator delete(end);
  }
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1B5870320(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1B5E50598](v1);
  _Unwind_Resume(a1);
}

void CA::StreamDescription::AsString(CA::StreamDescription *this, _QWORD *a2, double a3, int16x8_t a4)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  BOOL v15;
  int32x4_t v16;
  uint32x4_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  const char *v22;
  unsigned int v23;
  const char *v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type size;
  std::string *v32;
  __int128 v33;
  void *v34;
  int v35;
  const char *v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  unsigned int v41;
  unsigned int v42;
  const char *v43;
  unsigned int v44;
  int v45;
  const char *v46;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  _BOOL4 v52;
  const char *v53;
  std::string v54;
  std::string v55;
  char __str[20];
  std::string v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)a2 + 2);
  if (v6 == 1718773105)
  {
    caulk::make_string((caulk *)"%2u ch, %6.0f Hz, 'freq'", (uint64_t)this, *((unsigned int *)a2 + 7), *a2);
    return;
  }
  if (v6 != 1819304813)
    goto LABEL_19;
  if (*((_DWORD *)a2 + 5) != 1)
    goto LABEL_19;
  v7 = *((_DWORD *)a2 + 6);
  if (v7 != *((_DWORD *)a2 + 4))
    goto LABEL_19;
  v8 = *((_DWORD *)a2 + 8);
  if (v7 < v8 >> 3)
    goto LABEL_19;
  v9 = *((unsigned int *)a2 + 7);
  if (!(_DWORD)v9)
    goto LABEL_19;
  v10 = *((_DWORD *)a2 + 3);
  if ((v10 & 0x20) == 0)
  {
    v15 = v7 == v7 / v9 * (_DWORD)v9;
    v7 /= v9;
    if (!v15)
      goto LABEL_19;
  }
  if ((v10 & 2) != 0 || 8 * v7 != v8)
    goto LABEL_19;
  if ((v10 & 1) != 0)
  {
    if ((v10 & 0x1F84) == 0)
    {
      if (v7 == 4)
      {
        v12 = 1;
        goto LABEL_163;
      }
      v15 = v7 == 8;
      v52 = v7 == 8;
      if (v15)
      {
        v12 = 4 * v52;
        goto LABEL_163;
      }
    }
LABEL_19:
    v13 = *((unsigned int *)a2 + 7);
    v14 = *(double *)a2;
    if ((_DWORD)v13)
      v15 = 0;
    else
      v15 = v6 == 0;
    if (v15 && v14 == 0.0)
    {
      caulk::make_string((caulk *)"%2u ch, %6.0f Hz", (uint64_t)this, 0, *a2);
      return;
    }
    a4.i32[0] = bswap32(v6);
    *(int8x8_t *)a4.i8 = vzip1_s8(*(int8x8_t *)a4.i8, *(int8x8_t *)&v14);
    v16.i64[0] = 0x1F0000001FLL;
    v16.i64[1] = 0x1F0000001FLL;
    v17.i64[0] = 0x5F0000005FLL;
    v17.i64[1] = 0x5F0000005FLL;
    *(int8x8_t *)a4.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v17, (uint32x4_t)vsraq_n_s32(v16, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)a4.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)a4.i8, (int8x8_t)0x2E002E002E002ELL);
    *((_BYTE *)&v57.__r_.__value_.__s + 23) = 4;
    LODWORD(v57.__r_.__value_.__l.__data_) = vmovn_s16(a4).u32[0];
    v57.__r_.__value_.__s.__data_[4] = 0;
    caulk::make_string((caulk *)"%2u ch, %6.0f Hz, %s (0x%08X) ", (uint64_t)&v55, v13, *(_QWORD *)&v14, &v57, *((unsigned int *)a2 + 3));
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    v18 = *((_DWORD *)a2 + 2);
    if (v18 <= 1819304812)
    {
      if (v18 != 1634492771 && v18 != 1634497332 && v18 != 1718378851)
      {
LABEL_70:
        caulk::make_string((caulk *)"%u bits/channel, %u bytes/packet, %u frames/packet, %u bytes/frame", (uint64_t)&v57, *((unsigned int *)a2 + 8), *((unsigned int *)a2 + 4), *((unsigned int *)a2 + 5), *((unsigned int *)a2 + 6));
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = &v55;
        else
          v30 = (std::string *)v55.__r_.__value_.__r.__words[0];
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
        else
          size = v55.__r_.__value_.__l.__size_;
LABEL_62:
        v32 = std::string::insert(&v57, 0, (const std::string::value_type *)v30, size);
        v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        *((_QWORD *)this + 2) = *((_QWORD *)&v32->__r_.__value_.__l + 2);
        *(_OWORD *)this = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_65;
        v34 = (void *)v57.__r_.__value_.__r.__words[0];
LABEL_64:
        operator delete(v34);
LABEL_65:
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v55.__r_.__value_.__l.__data_);
        return;
      }
LABEL_45:
      v27 = *((unsigned int *)a2 + 3);
      if ((v27 - 1) < 4 || !(_DWORD)v27 && (v18 == 1634497332 || v18 == 1936487278 || v18 == 1936487267))
      {
        caulk::make_string((caulk *)"from %u-bit source, ", (uint64_t)&v57, CA::StreamDescription::AsString(void)const::kSourceBits[v27]);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v28 = &v57;
        else
          v28 = (std::string *)v57.__r_.__value_.__r.__words[0];
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v29 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
        else
          v29 = v57.__r_.__value_.__l.__size_;
        std::string::append(&v55, (const std::string::value_type *)v28, v29);
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v57.__r_.__value_.__l.__data_);
      }
      else
      {
        std::string::append(&v55, "from UNKNOWN source bit depth, ", 0x1FuLL);
      }
      caulk::make_string((caulk *)"%u frames/packet", (uint64_t)&v57, *((unsigned int *)a2 + 5));
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &v55;
      else
        v30 = (std::string *)v55.__r_.__value_.__r.__words[0];
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      else
        size = v55.__r_.__value_.__l.__size_;
      goto LABEL_62;
    }
    if (v18 == 1936487278 || v18 == 1936487267)
      goto LABEL_45;
    if (v18 != 1819304813)
      goto LABEL_70;
    v19 = *((_DWORD *)a2 + 3);
    v20 = *((_DWORD *)a2 + 6);
    v21 = v19 & 0x20;
    v22 = "";
    if (!v20)
      goto LABEL_37;
    if ((v19 & 0x20) != 0)
    {
      v23 = 1;
    }
    else
    {
      v23 = *((_DWORD *)a2 + 7);
      if (!v23)
      {
        v21 = 0;
LABEL_37:
        v24 = " signed";
        if ((v19 & 4) == 0)
          v24 = " unsigned";
        if ((v19 & 1) != 0)
          v25 = "float";
        else
          v25 = "integer";
        if ((v19 & 1) != 0)
          v26 = "";
        else
          v26 = v24;
LABEL_102:
        v57.__r_.__value_.__s.__data_[0] = 0;
        if (v21)
          v39 = ", deinterleaved";
        else
          v39 = "";
        v36 = "";
        v40 = "";
        goto LABEL_106;
      }
    }
    v35 = v20 / v23;
    if (v20 / v23 < 2)
    {
      v38 = " signed";
      if ((v19 & 4) == 0)
        v38 = " unsigned";
      if ((v19 & 1) != 0)
        v25 = "float";
      else
        v25 = "integer";
      if ((v19 & 1) != 0)
        v26 = "";
      else
        v26 = v38;
      if (v23 > v20)
        goto LABEL_102;
      v35 = 1;
      v36 = "";
    }
    else
    {
      if ((v19 & 2) != 0)
        v36 = " big-endian";
      else
        v36 = " little-endian";
      v37 = " unsigned";
      if ((v19 & 4) != 0)
        v37 = " signed";
      if ((v19 & 1) != 0)
        v25 = "float";
      else
        v25 = "integer";
      if ((v19 & 1) != 0)
        v26 = "";
      else
        v26 = v37;
    }
    v41 = *((_DWORD *)a2 + 7);
    if ((v19 & 0x20) != 0)
      v42 = 1;
    else
      v42 = *((_DWORD *)a2 + 7);
    if (v42)
      v42 = 8 * (v20 / v42);
    if (v42 == *((_DWORD *)a2 + 8))
    {
      v57.__r_.__value_.__s.__data_[0] = 0;
    }
    else
    {
      if ((v19 & 8) != 0)
        v43 = "";
      else
        v43 = "un";
      snprintf((char *)&v57, 0x20uLL, "%spacked in %u bytes", v43, v35);
      v20 = *((_DWORD *)a2 + 6);
      v19 = *((_DWORD *)a2 + 3);
      if (!v20)
      {
        v44 = 0;
        v21 = *((_DWORD *)a2 + 3) & 0x20;
        goto LABEL_128;
      }
      v41 = *((_DWORD *)a2 + 7);
      v21 = *((_DWORD *)a2 + 3) & 0x20;
    }
    if (v21)
      v44 = 1;
    else
      v44 = v41;
    if (v44)
      v44 = 8 * (v20 / v44);
LABEL_128:
    v45 = *((_DWORD *)a2 + 8);
    v46 = " high-aligned";
    if ((v19 & 0x10) == 0)
      v46 = " low-aligned";
    if ((v45 & 7) == 0 && v44 == v45)
      v40 = "";
    else
      v40 = v46;
    if (v21)
      v39 = ", deinterleaved";
    else
      v39 = "";
    if (v57.__r_.__value_.__s.__data_[0])
    {
      v22 = ", ";
LABEL_141:
      if (((v19 >> 7) & 0x3F) != 0)
        snprintf(__str, 0x14uLL, "%u.%u");
      else
        snprintf(__str, 0x14uLL, "%u");
      caulk::make_string((caulk *)"%s-bit%s%s %s%s%s%s%s", (uint64_t)&v54, __str, v36, v26, v25, v22, &v57, v40, v39);
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = &v55;
      else
        v48 = (std::string *)v55.__r_.__value_.__r.__words[0];
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      else
        v49 = v55.__r_.__value_.__l.__size_;
      v50 = std::string::insert(&v54, 0, (const std::string::value_type *)v48, v49);
      v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      *((_QWORD *)this + 2) = *((_QWORD *)&v50->__r_.__value_.__l + 2);
      *(_OWORD *)this = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_65;
      v34 = (void *)v54.__r_.__value_.__r.__words[0];
      goto LABEL_64;
    }
LABEL_106:
    if (*v40)
      v22 = ", ";
    goto LABEL_141;
  }
  if ((v10 & 4) == 0)
    goto LABEL_19;
  v11 = (v10 >> 7) & 0x3F;
  if (v11 != 24 || v7 != 4)
  {
    if (!v11 && v7 == 4)
    {
      v12 = 5;
      goto LABEL_163;
    }
    if (!v11 && v7 == 2)
    {
      v12 = 2;
      goto LABEL_163;
    }
    goto LABEL_19;
  }
  v12 = 3;
LABEL_163:
  if ((v10 & 0x20) != 0)
    v53 = ", deinterleaved";
  else
    v53 = ", interleaved";
  if (v9 <= 1)
    v53 = "";
  caulk::make_string((caulk *)"%2u ch, %6.0f Hz, %s%s", (uint64_t)this, v9, *a2, *((_QWORD *)&off_1E696F4F0 + v12), v53);
}

void sub_1B5870A74(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B5E50598](a1 + 128);
  return a1;
}

__n128 HALS_IODSPInfo::GetClientFormat(HALS_IODSPInfo *this, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  BOOL v4;
  __int128 v5;
  __int128 v6;
  unsigned __int8 v7;
  uint64_t *v8;
  __n128 result;
  __int128 v10;
  int v11;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  HALS_IODSPInfo *v15;

  if (a2[1] == *a2)
    v2 = 0;
  else
    v2 = *a2;
  v3 = a2 + 25;
  if (*((_BYTE *)a2 + 240))
    v4 = 1;
  else
    v4 = v2 == 0;
  if (!v4)
  {
    v5 = *(_OWORD *)(v2 + 56);
    v6 = *(_OWORD *)(v2 + 72);
    a2[29] = *(_QWORD *)(v2 + 88);
    *(_OWORD *)v3 = v5;
    *(_OWORD *)(a2 + 27) = v6;
    *((_BYTE *)a2 + 240) = 1;
  }
  if ((v7 & 1) == 0)
  {
    v15 = this;
    v13 = a2 + 25;
    v14 = a2;
    v3 = v13;
    a2 = v14;
    v12 = v11;
    this = v15;
    if (v12)
    {
      HALS_IODSPInfo::GetClientFormat(void)const::kDummyFormat = 0x40E5888000000000;
      unk_1EF12F8C8 = xmmword_1B5D68B30;
      unk_1EF12F8D8 = xmmword_1B5D68B40;
      v3 = v13;
      a2 = v14;
      this = v15;
    }
  }
  if (*((_BYTE *)a2 + 240))
    v8 = v3;
  else
    v8 = &HALS_IODSPInfo::GetClientFormat(void)const::kDummyFormat;
  result = *(__n128 *)v8;
  v10 = *((_OWORD *)v8 + 1);
  *(_OWORD *)this = *(_OWORD *)v8;
  *((_OWORD *)this + 1) = v10;
  *((_QWORD *)this + 4) = v8[4];
  return result;
}

void HALS_IODSPInfo::AddStream(char **a1, __int128 *a2)
{
  char *v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  std::vector<char>::value_type __x;

  v4 = a1[1];
  v5 = (unint64_t)a1[2];
  if ((unint64_t)v4 >= v5)
  {
    v13 = (v4 - *a1) >> 7;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 57)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v15 = v5 - (_QWORD)*a1;
    if (v15 >> 6 > v14)
      v14 = v15 >> 6;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFF80)
      v16 = 0x1FFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
      v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HALS_IODSPInfo::EngineStreamInfo>>(v16);
    else
      v17 = 0;
    v18 = (char *)(v16 + (v13 << 7));
    v19 = v16 + (v17 << 7);
    v20 = *a2;
    v21 = a2[1];
    v22 = a2[3];
    *((_OWORD *)v18 + 2) = a2[2];
    *((_OWORD *)v18 + 3) = v22;
    *(_OWORD *)v18 = v20;
    *((_OWORD *)v18 + 1) = v21;
    v23 = a2[4];
    v24 = a2[5];
    v25 = a2[7];
    *((_OWORD *)v18 + 6) = a2[6];
    *((_OWORD *)v18 + 7) = v25;
    *((_OWORD *)v18 + 4) = v23;
    *((_OWORD *)v18 + 5) = v24;
    v12 = v18 + 128;
    v27 = *a1;
    v26 = a1[1];
    if (v26 != *a1)
    {
      do
      {
        v28 = *((_OWORD *)v26 - 8);
        v29 = *((_OWORD *)v26 - 7);
        v30 = *((_OWORD *)v26 - 5);
        *((_OWORD *)v18 - 6) = *((_OWORD *)v26 - 6);
        *((_OWORD *)v18 - 5) = v30;
        *((_OWORD *)v18 - 8) = v28;
        *((_OWORD *)v18 - 7) = v29;
        v31 = *((_OWORD *)v26 - 4);
        v32 = *((_OWORD *)v26 - 3);
        v33 = *((_OWORD *)v26 - 1);
        *((_OWORD *)v18 - 2) = *((_OWORD *)v26 - 2);
        *((_OWORD *)v18 - 1) = v33;
        *((_OWORD *)v18 - 4) = v31;
        *((_OWORD *)v18 - 3) = v32;
        v18 -= 128;
        v26 -= 128;
      }
      while (v26 != v27);
      v26 = *a1;
    }
    *a1 = v18;
    a1[1] = v12;
    a1[2] = (char *)v19;
    if (v26)
      operator delete(v26);
  }
  else
  {
    v6 = *a2;
    v7 = a2[1];
    v8 = a2[3];
    *((_OWORD *)v4 + 2) = a2[2];
    *((_OWORD *)v4 + 3) = v8;
    *(_OWORD *)v4 = v6;
    *((_OWORD *)v4 + 1) = v7;
    v9 = a2[4];
    v10 = a2[5];
    v11 = a2[7];
    *((_OWORD *)v4 + 6) = a2[6];
    *((_OWORD *)v4 + 7) = v11;
    *((_OWORD *)v4 + 4) = v9;
    *((_OWORD *)v4 + 5) = v10;
    v12 = v4 + 128;
  }
  a1[1] = v12;
  v34 = a1[19];
  v35 = a1[20];
  v36 = v12 - *a1;
  v37 = (v36 >> 3) & 0xFFFFFFFF0 | 8;
  __x = 0;
  v38 = v35 - v34;
  if (v37 <= v38)
  {
    if (v37 < v38)
      a1[20] = &v34[v37];
  }
  else
  {
    std::vector<char>::__append((std::vector<char> *)(a1 + 19), v37 - v38, &__x);
    v34 = a1[19];
  }
  *(_DWORD *)v34 = v36 >> 7;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<HALS_IODSPInfo::EngineStreamInfo>>(unint64_t a1)
{
  if (a1 >> 57)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a1 << 7);
}

uint64_t *std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t *result, unsigned int a2, int a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

uint64_t CAVolumeCurve::GetMaximumRaw(CAVolumeCurve *this)
{
  uint64_t v1;
  _QWORD *v3;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
    return 0;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  std::__advance[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<CARawPoint,CADBPoint>,std::__tree_node<std::__value_type<CARawPoint,CADBPoint>,void *> *,long>>>(&v3, (int)v1 - 1);
  return *((unsigned int *)v3 + 8);
}

_QWORD **std::__advance[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<CARawPoint,CADBPoint>,std::__tree_node<std::__value_type<CARawPoint,CADBPoint>,void *> *,long>>>(_QWORD **result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD *v7;
  _QWORD *v8;

  if (a2 < 0)
  {
    v7 = *result;
    do
    {
      v8 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v4 = v8;
          v8 = (_QWORD *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v7[2];
          v5 = *v4 == (_QWORD)v7;
          v7 = v4;
        }
        while (v5);
      }
      v7 = v4;
    }
    while (!__CFADD__(a2++, 1));
  }
  else
  {
    if (!a2)
      return result;
    v2 = *result;
    do
    {
      v3 = (_QWORD *)v2[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v2[2];
          v5 = *v4 == (_QWORD)v2;
          v2 = v4;
        }
        while (!v5);
      }
      v2 = v4;
    }
    while (a2-- > 1);
  }
  *result = v4;
  return result;
}

float CAVolumeCurve::GetMaximumDB(CAVolumeCurve *this)
{
  uint64_t v1;
  float *v3;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
    return 0.0;
  v3 = (float *)*((_QWORD *)this + 1);
  std::__advance[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<CARawPoint,CADBPoint>,std::__tree_node<std::__value_type<CARawPoint,CADBPoint>,void *> *,long>>>((_QWORD **)&v3, (int)v1 - 1);
  return v3[10];
}

void CAVolumeCurve::AddRange(CAVolumeCurve *this, signed int a2, signed int a3, double a4, float a5)
{
  uint64_t **v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  BOOL v9;
  char v10;
  uint64_t *v11;
  uint64_t **v12;
  BOOL v13;
  char v14;
  uint64_t *v15;
  uint64_t **v16;
  int v17;
  uint64_t *v18;
  double v19;
  unint64_t v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t **)((char *)this + 8);
  v5 = (uint64_t **)*((_QWORD *)this + 1);
  v7 = (uint64_t **)((char *)this + 16);
  if (v5 == (uint64_t **)((char *)this + 16))
    goto LABEL_26;
  do
  {
    v8 = *((_DWORD *)v5 + 7);
    v9 = *((_DWORD *)v5 + 8) > a2 && v8 < a3;
    v10 = v9;
    if (v9 || v8 <= a2)
    {
      v12 = v5;
    }
    else
    {
      v11 = v5[1];
      if (v11)
      {
        do
        {
          v12 = (uint64_t **)v11;
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (uint64_t **)v5[2];
          v13 = *v12 == (uint64_t *)v5;
          v5 = v12;
        }
        while (!v13);
      }
    }
    if (v12 == v7)
      v14 = 1;
    else
      v14 = v10;
    if ((v14 & 1) != 0)
      break;
    v5 = v12;
  }
  while (v8 > a2);
  if ((v10 & 1) == 0)
  {
LABEL_26:
    v15 = *v7;
    v16 = (uint64_t **)((char *)this + 16);
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          v16 = (uint64_t **)v15;
          v17 = *((_DWORD *)v15 + 7);
          if (v17 <= a2)
            break;
          v15 = *v16;
          v7 = v16;
          if (!*v16)
            goto LABEL_33;
        }
        if (v17 >= a2)
          break;
        v15 = v16[1];
        if (!v15)
        {
          v7 = v16 + 1;
          goto LABEL_33;
        }
      }
    }
    else
    {
LABEL_33:
      *((float *)&a4 + 1) = a5;
      v19 = a4;
      v20 = __PAIR64__(a3, a2);
      v18 = (uint64_t *)operator new(0x30uLL);
      *(uint64_t *)((char *)v18 + 28) = v20;
      *(double *)((char *)v18 + 36) = v19;
      std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(v6, (uint64_t)v16, v7, v18);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v22 = "CAVolumeCurve.cpp";
    v23 = 1024;
    v24 = 214;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  CAVolumeCurve::AddRange: new point overlaps", buf, 0x12u);
  }
}

uint64_t CAVolumeCurve::ConvertDBToRaw(CAVolumeCurve *this, float a2)
{
  float v4;
  float MaximumDB;
  float v6;
  _QWORD *v7;
  uint64_t result;
  int v9;
  float v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;

  if (*((_QWORD *)this + 3))
    v4 = *(float *)(*((_QWORD *)this + 1) + 36);
  else
    v4 = 0.0;
  MaximumDB = CAVolumeCurve::GetMaximumDB(this);
  if (v4 <= a2)
    v6 = a2;
  else
    v6 = v4;
  if (v6 <= MaximumDB)
    MaximumDB = v6;
  v7 = (_QWORD *)*((_QWORD *)this + 1);
  result = *((unsigned int *)v7 + 7);
  if (v7 != (_QWORD *)((char *)this + 16))
  {
    do
    {
      v9 = *((_DWORD *)v7 + 8) - *((_DWORD *)v7 + 7);
      v10 = *((float *)v7 + 10);
      if (MaximumDB > v10)
      {
        result = (v9 + result);
      }
      else
      {
        v11 = llroundf((float)(MaximumDB - *((float *)v7 + 9)) / (float)((float)(v10 - *((float *)v7 + 9)) / (float)v9));
        v12 = __OFADD__((_DWORD)result, v11);
        v13 = result + v11;
        v14 = ((int)(result | v11) >> 31) ^ 0x7FFFFFFF;
        if (v12)
          result = v14;
        else
          result = v13;
      }
      v15 = (_QWORD *)v7[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v7[2];
          v17 = *v16 == (_QWORD)v7;
          v7 = v16;
        }
        while (!v17);
      }
      v17 = MaximumDB <= v10 || v16 == (_QWORD *)((char *)this + 16);
      v7 = v16;
    }
    while (!v17);
  }
  return result;
}

uint64_t CAVolumeCurve::ConvertRawToDB(CAVolumeCurve *this, int a2)
{
  int v4;
  uint64_t result;
  int v6;
  int v7;
  float *v8;
  float v9;
  float *v10;
  BOOL v11;
  int v12;
  int v13;
  float *v14;
  float *v15;
  float *v16;

  if (*((_QWORD *)this + 3))
    v4 = *(_DWORD *)(*((_QWORD *)this + 1) + 28);
  else
    v4 = 0;
  result = CAVolumeCurve::GetMaximumRaw(this);
  if (v4 <= a2)
    v6 = a2;
  else
    v6 = v4;
  if (v6 >= (int)result)
    v6 = result;
  v7 = v6 - v4;
  v8 = (float *)*((_QWORD *)this + 1);
  v9 = v8[9];
  v10 = (float *)((char *)this + 16);
  v11 = v7 < 1 || v8 == v10;
  if (!v11)
  {
    do
    {
      v12 = *((_DWORD *)v8 + 8) - *((_DWORD *)v8 + 7);
      if (v7 >= v12)
        v13 = *((_DWORD *)v8 + 8) - *((_DWORD *)v8 + 7);
      else
        v13 = v7;
      v14 = (float *)*((_QWORD *)v8 + 1);
      v15 = v8;
      if (v14)
      {
        do
        {
          v16 = v14;
          v14 = *(float **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v16 = (float *)*((_QWORD *)v15 + 2);
          v11 = *(_QWORD *)v16 == (_QWORD)v15;
          v15 = v16;
        }
        while (!v11);
      }
      v9 = v9 + (float)((float)v13 * (float)((float)(v8[10] - v8[9]) / (float)v12));
      v7 -= v13;
      if (v7 < 1)
        break;
      v8 = v16;
    }
    while (v16 != v10);
  }
  return result;
}

float CAVolumeCurve::ConvertRawToScalar(CAVolumeCurve *this, int a2)
{
  int v4;
  int MaximumRaw;
  int v6;
  float v7;

  if (*((_QWORD *)this + 3))
    v4 = *(_DWORD *)(*((_QWORD *)this + 1) + 28);
  else
    v4 = 0;
  MaximumRaw = CAVolumeCurve::GetMaximumRaw(this);
  if (v4 <= a2)
    v6 = a2;
  else
    v6 = v4;
  if (v6 >= MaximumRaw)
    v6 = MaximumRaw;
  v7 = (float)(v6 - v4) / (float)(MaximumRaw - v4);
  if (CAVolumeCurve::GetIsApplyingTransferFunction(this))
    return powf(v7, *((float *)this + 10) / *((float *)this + 11));
  else
    return v7;
}

BOOL CAVolumeCurve::GetIsApplyingTransferFunction(CAVolumeCurve *this)
{
  float v2;

  if (*((_QWORD *)this + 3))
    v2 = *(float *)(*((_QWORD *)this + 1) + 36);
  else
    v2 = 0.0;
  return (float)(CAVolumeCurve::GetMaximumDB(this) - v2) > 30.0 && *((_BYTE *)this + 32) != 0;
}

uint64_t CAVolumeCurve::ConvertScalarToRaw(CAVolumeCurve *this, float a2)
{
  float v3;
  int v4;
  float v5;
  int MaximumRaw;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;

  v3 = fmaxf(a2, 0.0);
  if (*((_QWORD *)this + 3))
    v4 = *(_DWORD *)(*((_QWORD *)this + 1) + 28);
  else
    v4 = 0;
  v5 = fminf(v3, 1.0);
  MaximumRaw = CAVolumeCurve::GetMaximumRaw(this);
  if (CAVolumeCurve::GetIsApplyingTransferFunction(this))
    v5 = powf(v5, *((float *)this + 11) / *((float *)this + 10));
  v7 = llroundf(v5 * (float)(MaximumRaw - v4));
  v8 = __OFADD__(v4, v7);
  v9 = v4 + v7;
  v10 = ((int)(v4 | v7) >> 31) ^ 0x7FFFFFFF;
  if (v8)
    return v10;
  else
    return v9;
}

uint64_t std::__optional_destruct_base<AMCP::DAL::DAL_Time_Range,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 80))
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 64);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 24);
  }
  return a1;
}

void AMCP::DAL::Synchronizer_Source::receive_data(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  AMCP::Log::Scope_Registry *host_time;
  AMCP::DAL::DAL_Time *v6;
  _BOOL8 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  NSObject *v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  void *exception;
  NSObject *v26;
  _opaque_pthread_t *v27;
  mach_port_t v28;
  void *v29;
  NSObject *v30;
  _opaque_pthread_t *v31;
  mach_port_t v32;
  void *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t (**v36)();
  __int128 v37;
  uint64_t v38;
  std::string v39;
  std::logic_error v40;
  std::logic_error v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char v47;
  _BYTE buf[24];
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 280;
  host_time = (AMCP::Log::Scope_Registry *)AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)(a1 + 280));
  if (!host_time)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v22 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v23 = pthread_self();
      v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v24;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Synchronizer.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 48;
      LOWORD(v49) = 2080;
      *(_QWORD *)((char *)&v49 + 2) = "not (is_anchored())";
      _os_log_error_impl(&dword_1B57BA000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Synchronizer::receive_data on unanchored source", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v47);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Synchronizer::receive_data on unanchored source", (uint64_t)&v39);
    std::logic_error::logic_error(&v40, &v39);
    v40.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v41, &v40);
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = -1;
    v41.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v42 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v41);
    *((_QWORD *)&v49 + 1) = "void AMCP::DAL::Synchronizer_Source::receive_data(const DAL_Time_Range &)";
    *(_QWORD *)&v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
    DWORD2(v50) = 48;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v34);
    v37 = v34;
    v38 = v35;
    v34 = 0uLL;
    v35 = 0;
    v36 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v36);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  if (*(_BYTE *)(a1 + 136))
  {
    AMCP::Log::Scope_Registry::get(host_time);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v26 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      v27 = pthread_self();
      v28 = pthread_mach_thread_np(v27);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v28;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Synchronizer.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 49;
      LOWORD(v49) = 2080;
      *(_QWORD *)((char *)&v49 + 2) = "not (not m_removal_pending)";
      _os_log_error_impl(&dword_1B57BA000, v26, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Synchronizer::receive_data on removed source", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v47);
    v29 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Synchronizer::receive_data on removed source", (uint64_t)&v39);
    std::logic_error::logic_error(&v40, &v39);
    v40.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v41, &v40);
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = -1;
    v41.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v42 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v41);
    *((_QWORD *)&v49 + 1) = "void AMCP::DAL::Synchronizer_Source::receive_data(const DAL_Time_Range &)";
    *(_QWORD *)&v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
    DWORD2(v50) = 49;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v34);
    v37 = v34;
    v38 = v35;
    v34 = 0uLL;
    v35 = 0;
    v36 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v36);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v29, (uint64_t)buf);
  }
  if (!*(_BYTE *)(a1 + 184))
  {
    v6 = (AMCP::DAL::DAL_Time *)(AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a1 + 56), (AMCP::DAL::DAL_Time *)(a1 + 96))? a1 + 96: v4);
    v7 = AMCP::DAL::DAL_Time::operator==((AMCP::DAL::DAL_Time *)a2, v6);
    if (!v7)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v30 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        v31 = pthread_self();
        v32 = pthread_mach_thread_np(v31);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v32;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "Synchronizer.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 50;
        LOWORD(v49) = 2080;
        *(_QWORD *)((char *)&v49 + 2) = "not (m_did_overload or range_is_continuous(range_to_commit))";
        _os_log_error_impl(&dword_1B57BA000, v30, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Synchronizer::receive_data not contiguous", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v47);
      v33 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Synchronizer::receive_data not contiguous", (uint64_t)&v39);
      std::logic_error::logic_error(&v40, &v39);
      v40.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v41, &v40);
      v43 = 0;
      v44 = 0;
      v45 = 0;
      v46 = -1;
      v41.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v42 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v41);
      *((_QWORD *)&v49 + 1) = "void AMCP::DAL::Synchronizer_Source::receive_data(const DAL_Time_Range &)";
      *(_QWORD *)&v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
      DWORD2(v50) = 50;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v34);
      v37 = v34;
      v38 = v35;
      v34 = 0uLL;
      v35 = 0;
      v36 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v36);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v33, (uint64_t)buf);
    }
  }
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a1 + 56), (AMCP::DAL::DAL_Time *)(a1 + 96))
    || round(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a1 + 56))) != 0.0)
  {
    if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a1 + 96), (AMCP::DAL::DAL_Time *)(a2 + 5)))
    {
      AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)buf, (const AMCP::DAL::DAL_Time *)(a1 + 56), (const AMCP::DAL::DAL_Time *)(a2 + 5));
      *(_OWORD *)(a1 + 56) = *(_OWORD *)buf;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)&buf[16];
      std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](a1 + 80, &v49);
      *(_OWORD *)(a1 + 96) = v50;
      *(_QWORD *)(a1 + 112) = v51;
      std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](a1 + 120, &v52);
      v8 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
      if (*((_QWORD *)&v52 + 1))
      {
        v9 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
      if (*((_QWORD *)&v49 + 1))
      {
        v12 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
  }
  else
  {
    *(_DWORD *)(a1 + 56) = *(_DWORD *)a2;
    *(_QWORD *)(a1 + 64) = a2[1];
    *(_QWORD *)(a1 + 72) = a2[2];
    std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(a1 + 80), a2[3], a2[4]);
    *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 10);
    *(_QWORD *)(a1 + 104) = a2[6];
    *(_QWORD *)(a1 + 112) = a2[7];
    std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(a1 + 120), a2[8], a2[9]);
  }
  if (*(_BYTE *)(a1 + 272))
  {
    *(_DWORD *)(a1 + 192) = *(_DWORD *)a2;
    *(_QWORD *)(a1 + 200) = a2[1];
    *(_QWORD *)(a1 + 208) = a2[2];
    std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(a1 + 216), a2[3], a2[4]);
    *(_DWORD *)(a1 + 232) = *((_DWORD *)a2 + 10);
    *(_QWORD *)(a1 + 240) = a2[6];
    *(_QWORD *)(a1 + 248) = a2[7];
    std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(a1 + 256), a2[8], a2[9]);
  }
  else
  {
    v14 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 208) = a2[2];
    *(_OWORD *)(a1 + 192) = v14;
    *(_QWORD *)(a1 + 216) = a2[3];
    v15 = a2[4];
    *(_QWORD *)(a1 + 224) = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = *(_OWORD *)(a2 + 5);
    *(_QWORD *)(a1 + 248) = a2[7];
    *(_OWORD *)(a1 + 232) = v18;
    *(_QWORD *)(a1 + 256) = a2[8];
    v19 = a2[9];
    *(_QWORD *)(a1 + 264) = v19;
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    *(_BYTE *)(a1 + 272) = 1;
  }
  *(_BYTE *)(a1 + 184) = 0;
}

void sub_1B5871CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38)
{
  void *v38;
  int v39;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  a37 = &unk_1E69A2000;
  if (a38 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a38 + 32))(a38))
    a38 = 0;
  MEMORY[0x1B5E500E8](&a35);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v39)
    __cxa_free_exception(v38);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a34);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<AMCP::DAL::DAL_Time_Range,false>::reset[abi:ne180100](uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 80))
  {
    v1 = result;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](result + 64);
    result = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1 + 24);
    *(_BYTE *)(v1 + 80) = 0;
  }
  return result;
}

BOOL caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::operator==(uint64_t a1, uint64_t a2)
{
  AMCP::DAL::DAL_Time *v4;
  _BOOL8 result;

  v4 = (AMCP::DAL::DAL_Time *)(a2 + 40);
  if (!AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a2, (AMCP::DAL::DAL_Time *)(a2 + 40)))
    return !AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a1, (AMCP::DAL::DAL_Time *)(a1 + 40));
  result = AMCP::DAL::DAL_Time::operator==((AMCP::DAL::DAL_Time *)a2, (AMCP::DAL::DAL_Time *)a1);
  if (result)
    return AMCP::DAL::DAL_Time::operator==(v4, (AMCP::DAL::DAL_Time *)(a1 + 40));
  return result;
}

void std::vector<std::function<void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (!v2)
    return;
  v4 = (char *)v1[1];
  v5 = **a1;
  if (v4 == v2)
    goto LABEL_10;
  do
  {
    v6 = v4 - 32;
    v7 = (char *)*((_QWORD *)v4 - 1);
    if (v4 - 32 == v7)
    {
      v7 = v4 - 32;
      v8 = 4;
    }
    else
    {
      if (!v7)
        goto LABEL_8;
      v8 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_8:
    v4 = v6;
  }
  while (v6 != v2);
  v5 = **a1;
LABEL_10:
  v1[1] = v2;
  operator delete(v5);
}

uint64_t std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<AMCP::DAL::Source_ID const,AMCP::DAL::Synchronizer_Source>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<AMCP::DAL::Source_ID const,AMCP::DAL::Synchronizer_Source>,0>(uint64_t a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 352);
  std::__optional_destruct_base<AMCP::DAL::DAL_Time_Range,false>::~__optional_destruct_base[abi:ne180100](a1 + 240);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 216);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 168);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 128);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

uint64_t AMCP::DAL::Synchronizer::Synchronizer(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  AMCP::DAL::DAL_Time_Range *v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  BOOL v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  AMCP::Log::Scope_Registry *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  _opaque_pthread_t *v28;
  mach_port_t v29;
  std::logic_error *exception;
  uint64_t v31;
  int v32;
  uint64_t v33;
  std::logic_error v34;
  __int128 v35;
  uint64_t v36;
  uint64_t (**v37)();
  __int128 v38;
  uint64_t v39;
  std::string v40;
  std::logic_error v41;
  std::logic_error v42;
  void *v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  char v47;
  uint8_t buf[8];
  __int128 v49;
  _BYTE v50[24];
  int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 48) = *a2;
  v3 = a2[1];
  *(_QWORD *)(a1 + 56) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (AMCP::DAL::DAL_Time_Range *)(a1 + 64);
  *(_QWORD *)&v7 = *a2;
  v8 = a2[1];
  *(_QWORD *)&v9 = *a2;
  *((_QWORD *)&v9 + 1) = v8;
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = (std::__shared_weak_count *)a2[1];
    *(_DWORD *)buf = 2;
    v49 = 0uLL;
    *(_OWORD *)v50 = v9;
    *(_QWORD *)&v7 = *a2;
    *((_QWORD *)&v7 + 1) = v12;
    v13 = v12 == 0;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
  }
  else
  {
    v12 = 0;
    *(_DWORD *)buf = 2;
    v49 = 0uLL;
    *(_OWORD *)v50 = (unint64_t)v9;
    v13 = 1;
    *((_QWORD *)&v7 + 1) = 0;
  }
  LODWORD(v42.__vftable) = 2;
  v42.__imp_.__imp_ = 0;
  v43 = 0;
  v44 = v7;
  v16 = AMCP::DAL::DAL_Time_Range::DAL_Time_Range(v6, (const AMCP::DAL::DAL_Time *)buf, (const AMCP::DAL::DAL_Time *)&v42);
  if (!v13)
  {
    v17 = (unint64_t *)&v12->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v19 = *(std::__shared_weak_count **)&v50[8];
  if (*(_QWORD *)&v50[8])
  {
    v20 = (unint64_t *)(*(_QWORD *)&v50[8] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 1;
  if (!v22)
  {
    AMCP::Log::Scope_Registry::get(v16);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v24 = (std::__shared_weak_count *)v49;
    v25 = **(NSObject ***)buf;
    if ((_QWORD)v49)
    {
      v26 = (unint64_t *)(v49 + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v28 = pthread_self();
      v29 = pthread_mach_thread_np(v28);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v29;
      LOWORD(v49) = 2080;
      *(_QWORD *)((char *)&v49 + 2) = "Synchronizer.cpp";
      WORD5(v49) = 1024;
      HIDWORD(v49) = 124;
      *(_WORD *)v50 = 2080;
      *(_QWORD *)&v50[2] = "not (m_timebase)";
      _os_log_error_impl(&dword_1B57BA000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v47);
    exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v40);
    std::logic_error::logic_error(&v41, &v40);
    v31 = MEMORY[0x1E0DE5018];
    v41.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v42, &v41);
    v44 = 0uLL;
    v45 = 0;
    v46 = -1;
    v42.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v43 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v42);
    *(_QWORD *)&v50[8] = "AMCP::DAL::Synchronizer::Synchronizer(const Timebase_Ref &)";
    *(_QWORD *)&v50[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
    v51 = 124;
    std::vector<void *>::vector(&v35);
    v32 = backtrace((void **)v35, (*((_QWORD *)&v35 + 1) - (_QWORD)v35) >> 3);
    std::vector<void *>::resize((char **)&v35, v32);
    v38 = v35;
    v39 = v36;
    v35 = 0uLL;
    v36 = 0;
    v37 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v37);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(exception, (const std::logic_error *)buf);
    exception->__vftable = (std::logic_error_vtbl *)(v31 + 16);
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v33 = *(_QWORD *)v50;
    exception[1].__imp_.__imp_ = *(const char **)v50;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
    v34 = *(std::logic_error *)&v50[8];
    LODWORD(exception[3].__vftable) = v51;
    exception[2] = v34;
    exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
  }
  return a1;
}

void sub_1B587251C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)(v31 - 144) = v30;
  std::vector<std::function<void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 144));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v29 + 128);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v29 + 88);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v28);
  std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::~__hash_table(v27);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;

  v4 = *a2;
  v5 = std::hash<AMCP::Terminal_Identifier>::operator()((uint64_t)(a2 + 2));
  v6 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v6)
    return 0;
  v7 = 0xC6A4A7935BD1E995
     * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v5) ^ ((0xC6A4A7935BD1E995 * v5) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v4) ^ ((0xC6A4A7935BD1E995 * v4) >> 47)) + 3864292196u))
     + 3864292196u;
  v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v7;
    if (v7 >= *(_QWORD *)&v6)
      v10 = v7 % *(_QWORD *)&v6;
  }
  else
  {
    v10 = v7 & (*(_QWORD *)&v6 - 1);
  }
  v11 = *(_QWORD **)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = (_QWORD *)*v11;
  if (*v11)
  {
    do
    {
      v13 = v12[1];
      if (v13 == v7)
      {
        if (AMCP::DAL::Source_ID::operator==((uint64_t)(v12 + 2), a2))
          return v12;
      }
      else
      {
        if (v9 > 1)
        {
          if (v13 >= *(_QWORD *)&v6)
            v13 %= *(_QWORD *)&v6;
        }
        else
        {
          v13 &= *(_QWORD *)&v6 - 1;
        }
        if (v13 != v10)
          return 0;
      }
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  return v12;
}

{
  uint64_t v4;
  unint64_t v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;

  v4 = *a2;
  v5 = std::hash<AMCP::Terminal_Identifier>::operator()((uint64_t)(a2 + 2));
  v6 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v6)
    return 0;
  v7 = 0xC6A4A7935BD1E995
     * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v5) ^ ((0xC6A4A7935BD1E995 * v5) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v4) ^ ((0xC6A4A7935BD1E995 * v4) >> 47)) + 3864292196u))
     + 3864292196u;
  v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v7;
    if (v7 >= *(_QWORD *)&v6)
      v10 = v7 % *(_QWORD *)&v6;
  }
  else
  {
    v10 = v7 & (*(_QWORD *)&v6 - 1);
  }
  v11 = *(_QWORD **)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = (_QWORD *)*v11;
  if (*v11)
  {
    do
    {
      v13 = v12[1];
      if (v7 == v13)
      {
        if (AMCP::DAL::Source_ID::operator==((uint64_t)(v12 + 2), a2))
          return v12;
      }
      else
      {
        if (v9 > 1)
        {
          if (v13 >= *(_QWORD *)&v6)
            v13 %= *(_QWORD *)&v6;
        }
        else
        {
          v13 &= *(_QWORD *)&v6 - 1;
        }
        if (v13 != v10)
          return 0;
      }
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  return v12;
}

void AMCP::DAL::Synchronizer_Source::~Synchronizer_Source(void **this)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(this + 38));
  std::__optional_destruct_base<AMCP::DAL::DAL_Time_Range,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 24));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(this + 21));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(this + 15));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(this + 10));
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

unint64_t std::hash<AMCP::Terminal_Identifier>::operator()(uint64_t a1)
{
  unint64_t v2;

  v2 = boost::hash<std::string>::operator()((char *)a1);
  return 0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995
         * ((0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * *(_QWORD *)(a1 + 24)) ^ ((0xC6A4A7935BD1E995 * *(_QWORD *)(a1 + 24)) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v2) ^ ((0xC6A4A7935BD1E995 * v2) >> 47)) + 3864292196u))
         + 3864292196u) ^ (0xC6A4A7935BD1E995
                         * ((0xC6A4A7935BD1E995 * *(unsigned int *)(a1 + 32)) ^ ((0xC6A4A7935BD1E995
                                                                                  * *(unsigned int *)(a1 + 32)) >> 47))))
       + 3864292196u;
}

BOOL AMCP::DAL::Source_ID::operator==(uint64_t a1, _DWORD *a2)
{
  unsigned __int8 **v3[3];
  _QWORD v4[3];

  if (*a2 != *(_DWORD *)a1)
    return 0;
  v4[0] = a2 + 2;
  v4[1] = a2 + 8;
  v4[2] = a2 + 10;
  v3[0] = (unsigned __int8 **)(a1 + 8);
  v3[1] = (unsigned __int8 **)(a1 + 32);
  v3[2] = (unsigned __int8 **)(a1 + 40);
  return std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)v4, v3);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<AMCP::DAL::Source_ID const,AMCP::DAL::Synchronizer_Source>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

BOOL std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>(uint64_t a1, unsigned __int8 ***a2)
{
  const void **v2;
  unsigned __int8 **v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 **v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v17;

  v2 = *(const void ***)a1;
  v3 = *a2;
  v4 = *(unsigned __int8 *)(*(_QWORD *)a1 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = (unsigned __int8 *)*(unsigned __int8 *)(*(_QWORD *)a1 + 23);
  else
    v5 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  v6 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  v7 = (char)v6;
  if ((char)v6 < 0)
    v6 = v3[1];
  if (v5 != v6)
    return 0;
  if (v7 >= 0)
    v10 = *a2;
  else
    v10 = (unsigned __int8 **)*v3;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v2, v10, *(_QWORD *)(*(_QWORD *)a1 + 8)))
      return 0;
  }
  else if (*(_BYTE *)(*(_QWORD *)a1 + 23))
  {
    v11 = v4 - 1;
    do
    {
      v13 = *(unsigned __int8 *)v2;
      v2 = (const void **)((char *)v2 + 1);
      v12 = v13;
      v15 = *(unsigned __int8 *)v10;
      v10 = (unsigned __int8 **)((char *)v10 + 1);
      v14 = v15;
      v17 = v11-- != 0;
    }
    while (v12 == v14 && v17);
    if (v12 != v14)
      return 0;
  }
  if (**(unsigned __int8 ***)(a1 + 8) == *a2[1])
    return **(_DWORD **)(a1 + 16) == *(_DWORD *)a2[2];
  return 0;
}

void AMCP::DAL::Synchronizer::_sweep_and_remove_sources(AMCP::DAL::Synchronizer *this)
{
  char *v2;
  char *v3;
  BOOL has_pending_range;
  BOOL v5;
  uint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  void *__p[2];
  uint64_t v50;
  __int128 v51[2];
  uint64_t v52;
  __int128 v53;

  v2 = (char *)this + 24;
  v3 = (char *)*((_QWORD *)this + 3);
  if (v3)
  {
    do
    {
      if (v3[200])
      {
        AMCP::DAL::Synchronizer_Source::get_source_id((AMCP::DAL::Synchronizer_Source *)__p, (uint64_t)(v3 + 64));
        has_pending_range = AMCP::DAL::Synchronizer::_has_pending_range((uint64_t)this, __p);
        v5 = has_pending_range;
        if (SBYTE7(v51[0]) < 0)
        {
          operator delete(__p[1]);
          if (!v5)
          {
LABEL_7:
            v7 = *(int8x8_t *)((char *)this + 16);
            v8 = *((_QWORD *)v3 + 1);
            v9 = (uint8x8_t)vcnt_s8(v7);
            v9.i16[0] = vaddlv_u8(v9);
            if (v9.u32[0] > 1uLL)
            {
              if (v8 >= *(_QWORD *)&v7)
                v8 %= *(_QWORD *)&v7;
            }
            else
            {
              v8 &= *(_QWORD *)&v7 - 1;
            }
            v6 = *(_QWORD *)v3;
            v10 = *((_QWORD *)this + 1);
            v11 = *(char **)(v10 + 8 * v8);
            do
            {
              v12 = v11;
              v11 = *(char **)v11;
            }
            while (v11 != v3);
            if (v12 == v2)
              goto LABEL_72;
            v13 = *((_QWORD *)v12 + 1);
            if (v9.u32[0] > 1uLL)
            {
              if (v13 >= *(_QWORD *)&v7)
                v13 %= *(_QWORD *)&v7;
            }
            else
            {
              v13 &= *(_QWORD *)&v7 - 1;
            }
            v14 = *(_QWORD *)v3;
            if (v13 == v8)
            {
LABEL_26:
              if (v14)
                goto LABEL_27;
            }
            else
            {
LABEL_72:
              if (!v6)
                goto LABEL_25;
              v15 = *(_QWORD *)(v6 + 8);
              if (v9.u32[0] > 1uLL)
              {
                if (v15 >= *(_QWORD *)&v7)
                  v15 %= *(_QWORD *)&v7;
              }
              else
              {
                v15 &= *(_QWORD *)&v7 - 1;
              }
              v14 = *(_QWORD *)v3;
              if (v15 != v8)
              {
LABEL_25:
                *(_QWORD *)(v10 + 8 * v8) = 0;
                v14 = *(_QWORD *)v3;
                goto LABEL_26;
              }
LABEL_27:
              v16 = *(_QWORD *)(v14 + 8);
              if (v9.u32[0] > 1uLL)
              {
                if (v16 >= *(_QWORD *)&v7)
                  v16 %= *(_QWORD *)&v7;
              }
              else
              {
                v16 &= *(_QWORD *)&v7 - 1;
              }
              if (v16 != v8)
              {
                *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v16) = v12;
                v14 = *(_QWORD *)v3;
              }
            }
            *(_QWORD *)v12 = v14;
            *(_QWORD *)v3 = 0;
            --*((_QWORD *)this + 4);
            __p[0] = v3;
            __p[1] = v2;
            LOBYTE(v50) = 1;
            std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,void *>>>>::reset[abi:ne180100]((uint64_t)__p);
            goto LABEL_34;
          }
        }
        else if (!has_pending_range)
        {
          goto LABEL_7;
        }
      }
      v6 = *(_QWORD *)v3;
LABEL_34:
      v3 = (char *)v6;
    }
    while (v6);
  }
  if (!*((_QWORD *)this + 4))
  {
    v17 = *((_QWORD *)this + 6);
    v18 = *((_QWORD *)this + 7);
    *(_QWORD *)&v44 = v17;
    *((_QWORD *)&v44 + 1) = v18;
    if (v18)
    {
      v19 = (unint64_t *)(v18 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v17 = *((_QWORD *)this + 6);
      v21 = *((_QWORD *)this + 7);
    }
    else
    {
      v21 = 0;
    }
    v45 = 2;
    v46 = 0;
    v47 = 0;
    v48 = v44;
    v44 = 0uLL;
    *(_QWORD *)&v39 = v17;
    *((_QWORD *)&v39 + 1) = v21;
    if (v21)
    {
      v22 = (unint64_t *)(v21 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v40 = 2;
    v41 = 0;
    v42 = 0;
    v43 = v39;
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)__p, (const AMCP::DAL::DAL_Time *)&v45, (const AMCP::DAL::DAL_Time *)&v40);
    *((_OWORD *)this + 4) = *(_OWORD *)__p;
    *((_QWORD *)this + 10) = v50;
    std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)this + 88, v51);
    *(_OWORD *)((char *)this + 104) = v51[1];
    *((_QWORD *)this + 15) = v52;
    std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)this + 128, &v53);
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
    if (*((_QWORD *)&v53 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = (std::__shared_weak_count *)*((_QWORD *)&v51[0] + 1);
    if (*((_QWORD *)&v51[0] + 1))
    {
      v28 = (unint64_t *)(*((_QWORD *)&v51[0] + 1) + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
    if (*((_QWORD *)&v43 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
    if (*((_QWORD *)&v48 + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
    if (*((_QWORD *)&v44 + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    *((_BYTE *)this + 168) = 1;
  }
}

void sub_1B5872FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;
  uint64_t v32;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v32);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v31);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Synchronizer_Source::get_source_id(AMCP::DAL::Synchronizer_Source *this, uint64_t a2)
{
  std::string *v4;

  *(_DWORD *)this = *(_DWORD *)a2;
  v4 = (std::string *)((char *)this + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
  }
  *((_QWORD *)this + 4) = *(_QWORD *)(a2 + 32);
  *((_DWORD *)this + 10) = *(_DWORD *)(a2 + 40);
}

BOOL AMCP::DAL::Synchronizer::_has_pending_range(uint64_t a1, _DWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  double sample_time;
  _BOOL8 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v3 = std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((_QWORD *)(a1 + 8), a2);
  if (!v3)
    return 0;
  v21 = *(_OWORD *)(v3 + 15);
  v4 = v3[18];
  v22 = v3[17];
  v23 = v4;
  v5 = (std::__shared_weak_count *)v3[19];
  v24 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v25 = *((_OWORD *)v3 + 10);
  v8 = v3[23];
  v26 = v3[22];
  v27 = v8;
  v9 = (std::__shared_weak_count *)v3[24];
  v28 = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a1 + 104), (AMCP::DAL::DAL_Time *)&v25))
  {
    sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v21);
    v13 = round(sample_time) < round(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v25));
  }
  else
  {
    v13 = 0;
  }
  v14 = v28;
  if (v28)
  {
    v15 = (unint64_t *)&v28->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v24;
  if (v24)
  {
    v18 = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v13;
}

void sub_1B58731A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1 + 64);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1 + 24);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Synchronizer::_get_latest_common_pending_time(AMCP::DAL::Synchronizer *this, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  AMCP::DAL::DAL_Time *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  _BYTE v35[24];
  uint64_t v36;
  std::__shared_weak_count *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;

  AMCP::DAL::Synchronizer::_get_pending_time_range((AMCP::DAL::Synchronizer *)v35, a2);
  *(_OWORD *)this = v38;
  v4 = v40;
  *((_QWORD *)this + 2) = v39;
  *((_QWORD *)this + 3) = v4;
  v5 = v41;
  *((_QWORD *)this + 4) = v41;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = v41;
    if (v41)
    {
      v9 = (unint64_t *)&v41->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v11 = v37;
  if (v37)
  {
    v12 = (unint64_t *)&v37->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = *(uint64_t **)(a2 + 24);
  if (v14)
  {
    v15 = (AMCP::DAL::DAL_Time *)(a2 + 104);
    do
    {
      if (AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)(v14 + 43)))
      {
        *(_OWORD *)v35 = *(_OWORD *)(v14 + 43);
        v17 = v14[46];
        v16 = v14[47];
        *(_QWORD *)&v35[16] = v14[45];
        v36 = v17;
        v37 = (std::__shared_weak_count *)v16;
        if (v16)
        {
          v18 = (unint64_t *)(v16 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(v14 + 15), (AMCP::DAL::DAL_Time *)(v14 + 20))
          && !*((_BYTE *)v14 + 200))
        {
          v23 = (std::__shared_weak_count *)v14[19];
          if (v23)
          {
            v24 = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldxr(v24);
            while (__stxr(v25 + 1, v24));
          }
          v26 = *((_DWORD *)v14 + 40);
          v27 = *(_OWORD *)(v14 + 21);
          v28 = v14[23];
          v29 = (std::__shared_weak_count *)v14[24];
          if (v29)
          {
            v30 = (unint64_t *)&v29->__shared_owners_;
            do
              v31 = __ldxr(v30);
            while (__stxr(v31 + 1, v30));
            *(_DWORD *)v35 = v26;
            *(_OWORD *)&v35[8] = v27;
            std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](&v36, v28, (uint64_t)v29);
            do
              v32 = __ldaxr(v30);
            while (__stlxr(v32 - 1, v30));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          else
          {
            *(_DWORD *)v35 = *((_DWORD *)v14 + 40);
            *(_OWORD *)&v35[8] = v27;
            std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](&v36, v28, 0);
          }
          if (v23)
          {
            v33 = (unint64_t *)&v23->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
        }
        if (!AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)v35, v15)
          && AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)v35, this))
        {
          *(_DWORD *)this = *(_DWORD *)v35;
          *(_OWORD *)((char *)this + 8) = *(_OWORD *)&v35[8];
          std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)this + 3, v36, (uint64_t)v37);
        }
        v20 = v37;
        if (v37)
        {
          v21 = (unint64_t *)&v37->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
      }
      v14 = (uint64_t *)*v14;
    }
    while (v14);
  }
}

void sub_1B5873474(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Synchronizer::_emit(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  AMCP::DAL::DAL_Time *v6;
  uint64_t result;
  _BOOL8 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  _opaque_pthread_t *v21;
  mach_port_t v22;
  void *exception;
  __int128 v24;
  uint64_t v25;
  uint64_t (**v26)();
  __int128 v27;
  uint64_t v28;
  std::string v29;
  std::logic_error v30;
  std::logic_error v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;
  uint8_t buf[8];
  _WORD v39[6];
  int v40;
  __int16 v41;
  _BYTE v42[14];
  const char *v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v6 = (AMCP::DAL::DAL_Time *)(a3 + 5);
  result = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a3, (AMCP::DAL::DAL_Time *)(a3 + 5));
  if ((_DWORD)result)
  {
    if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a1 + 8), (AMCP::DAL::DAL_Time *)(a1 + 13)))
    {
      v8 = AMCP::DAL::DAL_Time::operator==((AMCP::DAL::DAL_Time *)a3, (AMCP::DAL::DAL_Time *)(a1 + 13));
      if (!v8)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v8);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v20 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          v21 = pthread_self();
          v22 = pthread_mach_thread_np(v21);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v22;
          v39[0] = 2080;
          *(_QWORD *)&v39[1] = "Synchronizer.cpp";
          v39[5] = 1024;
          v40 = 535;
          v41 = 2080;
          *(_QWORD *)v42 = "not (is_contiguous)";
          _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s emitting gap range", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v37);
        exception = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"emitting gap range", (uint64_t)&v29);
        std::logic_error::logic_error(&v30, &v29);
        v30.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error(&v31, &v30);
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = -1;
        v31.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
        v32 = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v31);
        *(_QWORD *)&v42[6] = "void AMCP::DAL::Synchronizer::_emit(const Source_ID &, const DAL::DAL_Time_Range &)";
        v43 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
        v44 = 535;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v24);
        v27 = v24;
        v28 = v25;
        v24 = 0uLL;
        v25 = 0;
        v26 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v26);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
      }
    }
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a3);
    AMCP::DAL::DAL_Time::get_sample_time(v6);
    AMCP::DAL::DAL_Time::operator-((uint64_t)buf, v6, (AMCP::DAL::DAL_Time *)a3);
    if ((buf[0] & 2) == 0)
      AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)buf);
    kdebug_trace();
    v9 = *(std::__shared_weak_count **)&v42[6];
    if (*(_QWORD *)&v42[6])
    {
      v10 = (unint64_t *)(*(_QWORD *)&v42[6] + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a1 + 8), (AMCP::DAL::DAL_Time *)(a1 + 13))
      || round(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a1 + 8))) != 0.0)
    {
      if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a3, (AMCP::DAL::DAL_Time *)(a1 + 8)))
        v15 = (uint64_t)a3;
      else
        v15 = (uint64_t)(a1 + 8);
      if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a1 + 13), v6))
        v16 = (uint64_t)v6;
      else
        v16 = (uint64_t)(a1 + 13);
      result = (uint64_t)caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::set((uint64_t)(a1 + 8), v15, v16);
    }
    else
    {
      *((_DWORD *)a1 + 16) = *(_DWORD *)a3;
      a1[9] = a3[1];
      a1[10] = a3[2];
      std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](a1 + 11, a3[3], a3[4]);
      *((_DWORD *)a1 + 26) = *((_DWORD *)a3 + 10);
      a1[14] = a3[6];
      a1[15] = a3[7];
      result = (uint64_t)std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](a1 + 16, a3[8], a3[9]);
    }
    v18 = a1[18];
    v17 = a1[19];
    while (v18 != v17)
    {
      v19 = *(_QWORD *)(v18 + 24);
      if (!v19)
        goto LABEL_33;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v19 + 48))(v19, a2, a3);
      v18 += 32;
    }
  }
  else
  {
    v13 = a1[18];
    v12 = a1[19];
    while (v13 != v12)
    {
      v14 = *(_QWORD *)(v13 + 24);
      if (!v14)
LABEL_33:
        std::__throw_bad_function_call[abi:ne180100]();
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v14 + 48))(v14, a2, a3);
      v13 += 32;
    }
  }
  return result;
}

void sub_1B5873894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v38 + 24);
  _Unwind_Resume(a1);
}

_QWORD *caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(a1 + 24), v5, *(_QWORD *)(a2 + 32));
  *(_DWORD *)(a1 + 40) = *(_DWORD *)a3;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a3 + 8);
  v6 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a3 + 16);
  return std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(a1 + 64), v6, *(_QWORD *)(a3 + 32));
}

void AMCP::DAL::Synchronizer::_get_pending_time_range(AMCP::DAL::Synchronizer *this, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *i;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _BOOL4 v25;
  __int128 *v26;
  char *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;

  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)this, (uint64_t *)(a2 + 48));
  if (*(_QWORD *)(a2 + 32))
  {
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(std::__shared_weak_count **)(v4 + 152);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    v57 = *(_OWORD *)(v4 + 160);
    v8 = *(_QWORD *)(v4 + 184);
    v58 = *(_QWORD *)(v4 + 176);
    v9 = *(std::__shared_weak_count **)(v4 + 192);
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v63 = v57;
      v64 = v58;
      v65 = v8;
      v66 = v9;
      do
        v12 = __ldxr(v10);
      while (__stxr(v12 + 1, v10));
      do
        v13 = __ldaxr(v10);
      while (__stlxr(v13 - 1, v10));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    else
    {
      v63 = *(_OWORD *)(v4 + 160);
      v64 = *(_QWORD *)(v4 + 176);
      v65 = v8;
      v66 = 0;
    }
    if (v5)
    {
      v14 = (unint64_t *)&v5->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    for (i = *(uint64_t **)(a2 + 24); i; i = (uint64_t *)*i)
    {
      v57 = *(_OWORD *)(i + 15);
      v17 = i[18];
      v58 = i[17];
      *(_QWORD *)&v59 = v17;
      v18 = i[19];
      *((_QWORD *)&v59 + 1) = v18;
      if (v18)
      {
        v19 = (unint64_t *)(v18 + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v60 = *((_OWORD *)i + 10);
      v21 = i[23];
      v61 = i[22];
      v22 = i[24];
      *(_QWORD *)&v62 = v21;
      *((_QWORD *)&v62 + 1) = v22;
      if (v22)
      {
        v23 = (unint64_t *)(v22 + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v25 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v63, (AMCP::DAL::DAL_Time *)&v60);
      v26 = &v60;
      if (!v25)
        v26 = &v63;
      LODWORD(v63) = *(_DWORD *)v26;
      v27 = (char *)&v60 + 8;
      if (!v25)
        v27 = (char *)&v63 + 8;
      *((_QWORD *)&v63 + 1) = *(_QWORD *)v27;
      v28 = &v61;
      if (!v25)
        v28 = &v64;
      v64 = *v28;
      if (v25)
        v29 = (uint64_t *)&v62;
      else
        v29 = &v65;
      v30 = *v29;
      v31 = (uint64_t *)&v62 + 1;
      if (!v25)
        v31 = (uint64_t *)&v66;
      std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](&v65, v30, *v31);
      v32 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
      if (*((_QWORD *)&v62 + 1))
      {
        v33 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      if (*((_QWORD *)&v59 + 1))
      {
        v35 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v59 + 1) + 16))(*((_QWORD *)&v59 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v59 + 1));
        }
      }
    }
    v53 = *(_OWORD *)(a2 + 104);
    v37 = *(_QWORD *)(a2 + 128);
    v54 = *(_QWORD *)(a2 + 120);
    v55 = v37;
    v38 = *(std::__shared_weak_count **)(a2 + 136);
    v56 = v38;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v57, (const AMCP::DAL::DAL_Time *)&v53, (const AMCP::DAL::DAL_Time *)&v63);
    *(_OWORD *)this = v57;
    *((_QWORD *)this + 2) = v58;
    std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)this + 24, &v59);
    *(_OWORD *)((char *)this + 40) = v60;
    *((_QWORD *)this + 7) = v61;
    std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)this + 64, &v62);
    v41 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
    if (*((_QWORD *)&v62 + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
    if (*((_QWORD *)&v59 + 1))
    {
      v45 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v47 = v56;
    if (v56)
    {
      v48 = (unint64_t *)&v56->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v50 = v66;
    if (v66)
    {
      v51 = (unint64_t *)&v66->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
  }
}

void sub_1B5873E10(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1 + 64);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1 + 24);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Synchronizer::receive_data(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _BOOL8 v12;
  _BOOL4 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _BOOL8 v19;
  NSObject *v20;
  _opaque_pthread_t *v21;
  mach_port_t v22;
  void *v23;
  _BOOL8 v24;
  _BOOL8 v25;
  _QWORD *v26;
  _BOOL8 v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  NSObject *v37;
  _opaque_pthread_t *v38;
  mach_port_t v39;
  unsigned int v40;
  unsigned int *v41;
  void *exception;
  unsigned int *v43;
  NSObject *v44;
  _opaque_pthread_t *v45;
  mach_port_t v46;
  void *v47;
  NSObject *v48;
  _opaque_pthread_t *v49;
  mach_port_t v50;
  void *v51;
  NSObject *v52;
  _opaque_pthread_t *v53;
  mach_port_t v54;
  void *v55;
  NSObject *v56;
  _opaque_pthread_t *v57;
  mach_port_t v58;
  void *v59;
  std::logic_error v60;
  uint64_t v61;
  std::string v62;
  uint64_t v63;
  std::logic_error v64;
  char v65;
  uint64_t (**v66)();
  std::string v67;
  std::__shared_weak_count *v68;
  std::string v69;
  std::logic_error v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  _BYTE buf[24];
  __int128 v77;
  _BYTE v78[12];
  std::__shared_weak_count *v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v6 = std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((_QWORD *)(a1 + 8), a2);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (!AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)(v6 + 43)))
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v37 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      v38 = pthread_self();
      v39 = pthread_mach_thread_np(v38);
      v40 = *a2;
      v41 = a2 + 2;
      if (*((char *)a2 + 31) < 0)
        v41 = (unsigned int *)*((_QWORD *)a2 + 1);
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v39;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Synchronizer.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 189;
      LOWORD(v77) = 2080;
      *(_QWORD *)((char *)&v77 + 2) = "not (_is_anchored(source_id))";
      WORD5(v77) = 1024;
      HIDWORD(v77) = v40;
      *(_WORD *)v78 = 2080;
      *(_QWORD *)&v78[2] = v41;
      _os_log_error_impl(&dword_1B57BA000, v37, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Synchronizer::receive_data on unanchored source: %d  '%s'", buf, 0x32u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v64);
    exception = __cxa_allocate_exception(0x40uLL);
    if (*((char *)a2 + 31) >= 0)
      v43 = a2 + 2;
    else
      v43 = (unsigned int *)*((_QWORD *)a2 + 1);
    caulk::make_string((caulk *)"Synchronizer::receive_data on unanchored source: %d  '%s'", (uint64_t)&v62, *a2, v43);
    std::logic_error::logic_error(&v60, &v62);
    v60.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v70, &v60);
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v75 = -1;
    v70.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v71 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v70);
    *((_QWORD *)&v77 + 1) = "void AMCP::DAL::Synchronizer::receive_data(const Source_ID &, const DAL_Time_Range &)";
    *(_QWORD *)v78 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
    *(_DWORD *)&v78[8] = 189;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v69.__r_.__value_.__l.__data_);
    v66 = off_1E69A20A0;
    v67 = v69;
    memset(&v69, 0, sizeof(v69));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v66);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v7 = std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((_QWORD *)(a1 + 8), a2);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  *(_OWORD *)buf = *(_OWORD *)(v7 + 43);
  v8 = v7[46];
  *(_QWORD *)&buf[16] = v7[45];
  *(_QWORD *)&v77 = v8;
  v9 = v7[47];
  *((_QWORD *)&v77 + 1) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a3 + 40), (AMCP::DAL::DAL_Time *)buf);
  v13 = v12;
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v13)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v44 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      v45 = pthread_self();
      v46 = pthread_mach_thread_np(v45);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v46;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Synchronizer.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 190;
      LOWORD(v77) = 2080;
      *(_QWORD *)((char *)&v77 + 2) = "not (received_range.end() >= _get_anchor_time(source_id))";
      _os_log_error_impl(&dword_1B57BA000, v44, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Synchronizer::receive_data older than anchor", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v64);
    v47 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Synchronizer::receive_data older than anchor", (uint64_t)&v62);
    std::logic_error::logic_error(&v60, &v62);
    v60.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v70, &v60);
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v75 = -1;
    v70.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v71 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v70);
    *((_QWORD *)&v77 + 1) = "void AMCP::DAL::Synchronizer::receive_data(const Source_ID &, const DAL_Time_Range &)";
    *(_QWORD *)v78 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
    *(_DWORD *)&v78[8] = 190;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v69.__r_.__value_.__l.__data_);
    v66 = off_1E69A20A0;
    v67 = v69;
    memset(&v69, 0, sizeof(v69));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v66);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v47, (uint64_t)buf);
  }
  AMCP::DAL::Synchronizer::_check_sources_for_overloads(a1);
  if (!std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((_QWORD *)(a1 + 8), a2))goto LABEL_72;
  v17 = std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((_QWORD *)(a1 + 8), a2);
  if (!v17)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v18 = v17;
  if (*((_BYTE *)v17 + 336))
  {
    v19 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::operator==((uint64_t)(v17 + 32), a3);
    if (!v19 && *((_BYTE *)v18 + 336))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v19);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v20 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v21 = pthread_self();
        v22 = pthread_mach_thread_np(v21);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v22;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "Synchronizer.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 110;
        LOWORD(v77) = 2080;
        *(_QWORD *)((char *)&v77 + 2) = "not (m_current_range == range_to_commit or not m_current_range)";
        _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Synchronizer_Source has seen two different ranges in the same cycle", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v64);
      v23 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Synchronizer_Source has seen two different ranges in the same cycle", (uint64_t)&v62);
      std::logic_error::logic_error(&v60, &v62);
      v60.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v70, &v60);
      v72 = 0;
      v73 = 0;
      v74 = 0;
      v75 = -1;
      v70.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v71 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v70);
      *((_QWORD *)&v77 + 1) = "BOOL AMCP::DAL::Synchronizer_Source::is_unique_range(const DAL_Time_Range &) const";
      *(_QWORD *)v78 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
      *(_DWORD *)&v78[8] = 110;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v69.__r_.__value_.__l.__data_);
      v66 = off_1E69A20A0;
      v67 = v69;
      memset(&v69, 0, sizeof(v69));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v66);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v23, (uint64_t)buf);
    }
  }
  else
  {
LABEL_72:
    if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a1 + 64), (AMCP::DAL::DAL_Time *)(a1 + 104)))
    {
      v24 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a1 + 104), (AMCP::DAL::DAL_Time *)(a3 + 40));
      if (!v24)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v24);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v48 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
        {
          v49 = pthread_self();
          v50 = pthread_mach_thread_np(v49);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v50;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "Synchronizer.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 204;
          LOWORD(v77) = 2080;
          *(_QWORD *)((char *)&v77 + 2) = "not (received_range.end() > m_emitted_time_range.end())";
          _os_log_error_impl(&dword_1B57BA000, v48, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Synchronizer::receive_data end of range already emitted", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v64);
        v51 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Synchronizer::receive_data end of range already emitted", (uint64_t)&v62);
        std::logic_error::logic_error(&v60, &v62);
        v60.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error(&v70, &v60);
        v72 = 0;
        v73 = 0;
        v74 = 0;
        v75 = -1;
        v70.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
        v71 = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v70);
        *((_QWORD *)&v77 + 1) = "void AMCP::DAL::Synchronizer::receive_data(const Source_ID &, const DAL_Time_Range &)";
        *(_QWORD *)v78 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
        *(_DWORD *)&v78[8] = 204;
        applesauce::backtrace::snapshot_N<64>::snapshot_N(&v69.__r_.__value_.__l.__data_);
        v66 = off_1E69A20A0;
        v67 = v69;
        memset(&v69, 0, sizeof(v69));
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v66);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v51, (uint64_t)buf);
      }
      v25 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a3, (AMCP::DAL::DAL_Time *)(a1 + 104));
      if (v25)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v25);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v52 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
        {
          v53 = pthread_self();
          v54 = pthread_mach_thread_np(v53);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v54;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "Synchronizer.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 205;
          LOWORD(v77) = 2080;
          *(_QWORD *)((char *)&v77 + 2) = "not (received_range.start() >= m_emitted_time_range.end())";
          _os_log_error_impl(&dword_1B57BA000, v52, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Synchronizer::receive_data start of range already emitted", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v64);
        v55 = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Synchronizer::receive_data start of range already emitted", (uint64_t)&v62);
        std::logic_error::logic_error(&v60, &v62);
        v60.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error(&v70, &v60);
        v72 = 0;
        v73 = 0;
        v74 = 0;
        v75 = -1;
        v70.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
        v71 = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v70);
        *((_QWORD *)&v77 + 1) = "void AMCP::DAL::Synchronizer::receive_data(const Source_ID &, const DAL_Time_Range &)";
        *(_QWORD *)v78 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
        *(_DWORD *)&v78[8] = 205;
        applesauce::backtrace::snapshot_N<64>::snapshot_N(&v69.__r_.__value_.__l.__data_);
        v66 = off_1E69A20A0;
        v67 = v69;
        memset(&v69, 0, sizeof(v69));
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v66);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v55, (uint64_t)buf);
      }
    }
    if (std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((_QWORD *)(a1 + 8), a2))
    {
      v26 = std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((_QWORD *)(a1 + 8), a2);
      if (!v26)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      if (!*((_BYTE *)v26 + 200) && !*((_BYTE *)v26 + 248))
      {
        AMCP::DAL::Synchronizer_Source::receive_data((uint64_t)(v26 + 8), (_QWORD *)a3);
        AMCP::DAL::Synchronizer::_get_latest_common_pending_time((AMCP::DAL::Synchronizer *)&v66, a1);
        v27 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v66, (AMCP::DAL::DAL_Time *)(a1 + 104));
        if (v27)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v27);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v56 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
          {
            v57 = pthread_self();
            v58 = pthread_mach_thread_np(v57);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v58;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "Synchronizer.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 216;
            LOWORD(v77) = 2080;
            *(_QWORD *)((char *)&v77 + 2) = "not (m_emitted_time_range.end() <= emit_end_time)";
            _os_log_error_impl(&dword_1B57BA000, v56, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid time in Synchronizer", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v65);
          v59 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Invalid time in Synchronizer", (uint64_t)&v69);
          std::logic_error::logic_error(&v64, &v69);
          v64.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error(&v70, &v64);
          v72 = 0;
          v73 = 0;
          v74 = 0;
          v75 = -1;
          v70.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
          v71 = &unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v70);
          *((_QWORD *)&v77 + 1) = "void AMCP::DAL::Synchronizer::receive_data(const Source_ID &, const DAL_Time_Range &)";
          *(_QWORD *)v78 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
          *(_DWORD *)&v78[8] = 216;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v60);
          v62.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
          *(std::logic_error *)&v62.__r_.__value_.__r.__words[1] = v60;
          v63 = v61;
          v60.__vftable = 0;
          v60.__imp_.__imp_ = 0;
          v61 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v62);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v59, (uint64_t)buf);
        }
        AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)buf, (const AMCP::DAL::DAL_Time *)(a1 + 104), (const AMCP::DAL::DAL_Time *)&v66);
        AMCP::DAL::Synchronizer::_emit((_QWORD *)a1, (uint64_t)a2, buf);
        v28 = v79;
        if (v79)
        {
          p_shared_owners = (unint64_t *)&v79->__shared_owners_;
          do
            v30 = __ldaxr(p_shared_owners);
          while (__stlxr(v30 - 1, p_shared_owners));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v31 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
        if (*((_QWORD *)&v77 + 1))
        {
          v32 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        v34 = v68;
        if (v68)
        {
          v35 = (unint64_t *)&v68->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
      }
    }
    AMCP::DAL::Synchronizer::_sweep_and_remove_sources((AMCP::DAL::Synchronizer *)a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_1B5874BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *__p, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  os_unfair_lock_s *v42;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  os_unfair_lock_unlock(v42);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Synchronizer::_check_sources_for_overloads(uint64_t a1)
{
  uint64_t v2;
  double v3;
  unsigned int v4;
  uint64_t *v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  double sample_time;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  NSObject *v48;
  _opaque_pthread_t *v49;
  mach_port_t v50;
  void *exception;
  __int128 v52;
  uint64_t (**v53)();
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  std::string v58;
  std::logic_error v59;
  std::logic_error v60;
  void *v61;
  __int128 v62;
  uint64_t v63;
  int v64;
  char v65;
  _BYTE buf[24];
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  if (!v2)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v48 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      v49 = pthread_self();
      v50 = pthread_mach_thread_np(v49);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v50;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Synchronizer.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 494;
      LOWORD(v67) = 2080;
      *(_QWORD *)((char *)&v67 + 2) = "not (m_timebase)";
      _os_log_error_impl(&dword_1B57BA000, v48, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v65);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v58);
    std::logic_error::logic_error(&v59, &v58);
    v59.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v60, &v59);
    v62 = 0uLL;
    v63 = 0;
    v64 = -1;
    v60.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v61 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v60);
    *((_QWORD *)&v67 + 1) = "void AMCP::DAL::Synchronizer::_check_sources_for_overloads(const DAL_Time &)";
    *(_QWORD *)&v68 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
    DWORD2(v68) = 494;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v56);
    v53 = off_1E69A20A0;
    v54 = v56;
    *(_QWORD *)&v55 = v57;
    v56 = 0uLL;
    v57 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v53);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 120))(v2))
  {
    (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(a1 + 48) + 32))(buf);
    v3 = *(double *)buf;
    v4 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 48) + 144))(*(_QWORD *)(a1 + 48), 0);
    v5 = *(uint64_t **)(a1 + 24);
    if (v5)
    {
      v6 = v3 + (double)v4;
      v7 = round(v6);
      do
      {
        if (AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)(v5 + 43)))
        {
          *(_OWORD *)buf = *(_OWORD *)(v5 + 15);
          v8 = v5[18];
          *(_QWORD *)&buf[16] = v5[17];
          *(_QWORD *)&v67 = v8;
          v9 = v5[19];
          *((_QWORD *)&v67 + 1) = v9;
          if (v9)
          {
            v10 = (unint64_t *)(v9 + 8);
            do
              v11 = __ldxr(v10);
            while (__stxr(v11 + 1, v10));
          }
          v68 = *((_OWORD *)v5 + 10);
          v12 = v5[23];
          v69 = v5[22];
          v13 = (std::__shared_weak_count *)v5[24];
          v70 = v12;
          v71 = v13;
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldxr(p_shared_owners);
            while (__stxr(v15 + 1, p_shared_owners));
          }
          sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v68);
          v17 = v71;
          if (v71)
          {
            v18 = (unint64_t *)&v71->__shared_owners_;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
          v20 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
          if (*((_QWORD *)&v67 + 1))
          {
            v21 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          if (round(sample_time) < v7 && !*((_BYTE *)v5 + 200))
          {
            v23 = (std::__shared_weak_count *)v5[19];
            if (v23)
            {
              v24 = (unint64_t *)&v23->__shared_owners_;
              do
                v25 = __ldxr(v24);
              while (__stxr(v25 + 1, v24));
            }
            *(_OWORD *)buf = *((_OWORD *)v5 + 10);
            *(_QWORD *)&buf[16] = v5[22];
            v26 = v5[23];
            v27 = (std::__shared_weak_count *)v5[24];
            if (v27)
            {
              v28 = (unint64_t *)&v27->__shared_owners_;
              do
                v29 = __ldxr(v28);
              while (__stxr(v29 + 1, v28));
              v60 = *(std::logic_error *)buf;
              v61 = *(void **)&buf[16];
              *(_QWORD *)&v62 = v26;
              *((_QWORD *)&v62 + 1) = v27;
              do
                v30 = __ldxr(v28);
              while (__stxr(v30 + 1, v28));
              do
                v31 = __ldaxr(v28);
              while (__stlxr(v31 - 1, v28));
              if (!v31)
              {
                ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                std::__shared_weak_count::__release_weak(v27);
              }
            }
            else
            {
              v60 = (std::logic_error)*((_OWORD *)v5 + 10);
              v61 = (void *)v5[22];
              v62 = v26;
            }
            if (v23)
            {
              v32 = (unint64_t *)&v23->__shared_owners_;
              do
                v33 = __ldaxr(v32);
              while (__stlxr(v33 - 1, v32));
              if (!v33)
              {
                ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                std::__shared_weak_count::__release_weak(v23);
              }
            }
            v52 = v62;
            if (*((_QWORD *)&v62 + 1))
            {
              v34 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
              do
                v35 = __ldxr(v34);
              while (__stxr(v35 + 1, v34));
            }
            LODWORD(v53) = 2;
            v54 = *(unint64_t *)&v6;
            v55 = v52;
            AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)buf, (const AMCP::DAL::DAL_Time *)&v60, (const AMCP::DAL::DAL_Time *)&v53);
            AMCP::DAL::Synchronizer_Source::receive_data((uint64_t)(v5 + 8), buf);
            v36 = v71;
            if (v71)
            {
              v37 = (unint64_t *)&v71->__shared_owners_;
              do
                v38 = __ldaxr(v37);
              while (__stlxr(v38 - 1, v37));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                std::__shared_weak_count::__release_weak(v36);
              }
            }
            v39 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
            if (*((_QWORD *)&v67 + 1))
            {
              v40 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
            v42 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
            if (*((_QWORD *)&v55 + 1))
            {
              v43 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 - 1, v43));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                std::__shared_weak_count::__release_weak(v42);
              }
            }
            *((_BYTE *)v5 + 248) = 1;
            std::__optional_destruct_base<AMCP::DAL::DAL_Time_Range,false>::reset[abi:ne180100]((uint64_t)(v5 + 32));
            v45 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
            if (*((_QWORD *)&v62 + 1))
            {
              v46 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
              do
                v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v45);
              }
            }
          }
        }
        v5 = (uint64_t *)*v5;
      }
      while (v5);
    }
  }
}

void sub_1B5875674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;
  uint64_t v48;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a42);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v48);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v47);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::function<void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>>::~__split_buffer(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 16);
  if (v2 != v3)
  {
    while (1)
    {
      v4 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      v5 = (_QWORD *)*(v2 - 1);
      if (v5 == v4)
        break;
      if (v5)
      {
        v4 = v5;
        v6 = 5;
LABEL_6:
        (*(void (**)(void))(*v4 + 8 * v6))();
        v4 = *(_QWORD **)(a1 + 16);
      }
      v2 = v4;
      if (v4 == v3)
        goto LABEL_8;
    }
    v6 = 4;
    goto LABEL_6;
  }
LABEL_8:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void HALS_PlugInDevice::Activate(HALS_PlugInDevice *this)
{
  int v2;
  int v3;
  uint64_t v6;
  _BOOL4 has_engine_for_device;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  BOOL v37;
  BOOL v38;

  HALS_PlugInDevice::UpdateStreams(this, &v38);
  v37 = 0;
  HALS_PlugInDevice::UpdateControls(this, &v37);
  v3 = *((_DWORD *)this + 5);
  v2 = *((_DWORD *)this + 6);
  if (v3 == v2 || v3 == 1701733488)
  {
    if (v3 == 1701733488 || v3 != v2)
      goto LABEL_45;
  }
  else if (v2 == 1701733488)
  {
    goto LABEL_45;
  }
  v6 = (*(uint64_t (**)(_QWORD, _QWORD, HALS_PlugInDevice *))(**(_QWORD **)(*((_QWORD *)this + 164) + 400)
                                                                      + 136))(*(_QWORD *)(*((_QWORD *)this + 164) + 400), *((_QWORD *)this + 164), this);
  *((_QWORD *)this + 177) = v6;
  *((_DWORD *)this + 356) = *(_DWORD *)(v6 + 16);
  (**(void (***)(uint64_t))v6)(v6);
  v33 = 0;
  v34 = 0;
  HALS_System::GetInstance(&v35, 0, &v33);
  if (v35)
  {
    v29 = 0;
    v30 = 0;
    HALS_System::GetInstance(&v31, 0, &v29);
    has_engine_for_device = HALS_IOContext_Manager::has_engine_for_device(*(HALS_IOContext_Manager **)(v31 + 1392), this);
    v8 = v32;
    if (v32)
    {
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = !has_engine_for_device;
    v12 = v30;
    if (v30)
    {
      v13 = (unint64_t *)&v30->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    v11 = 0;
  }
  v15 = v36;
  if (v36)
  {
    v16 = (unint64_t *)&v36->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v34;
  if (!v34)
    goto LABEL_33;
  v19 = (unint64_t *)&v34->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v11)
      goto LABEL_45;
  }
  else
  {
LABEL_33:
    if (!v11)
      goto LABEL_45;
  }
  v27 = 0;
  v28 = 0;
  HALS_System::GetInstance(&v35, 0, &v27);
  HALS_IOContext_Manager::create_engine_for_device(*(os_unfair_lock_s **)(v35 + 1392), this);
  v21 = v36;
  if (v36)
  {
    v22 = (unint64_t *)&v36->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v28;
  if (v28)
  {
    v25 = (unint64_t *)&v28->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
LABEL_45:
  (*(void (**)(char *))(*((_QWORD *)this + 163) + 32))((char *)this + 1304);
  HALS_Device::Activate((const __CFString **)this);
}

void sub_1B5875AB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2 - 56);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void HALS_PlugInDevice::~HALS_PlugInDevice(HALS_PlugInDevice *this)
{
  HALS_PlugInDevice::~HALS_PlugInDevice(this);
  JUMPOUT(0x1B5E50688);
}

{
  HALS_ObjectMap *v2;
  AMCP::Log::Scope_Registry *v3;
  HALS_ObjectMap *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *v7;
  unint64_t v8;
  HALS_Object *v9;
  HALS_Object *v10;
  std::__shared_weak_count *v11;
  NSObject *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  uint64_t i;
  void *v20;
  _opaque_pthread_t *v21;
  mach_port_t v22;
  int v23;
  uint64_t v24;
  _opaque_pthread_t *v25;
  mach_port_t v26;
  int v27;
  HALS_ObjectMap *v28;
  uint64_t v29[2];
  uint8_t buf[8];
  _BYTE v31[10];
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  HALS_ObjectMap *v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E696F5B0;
  *((_QWORD *)this + 163) = &unk_1E696F980;
  v2 = (HALS_ObjectMap *)*((unsigned int *)this + 356);
  if ((_DWORD)v2)
  {
    v3 = (AMCP::Log::Scope_Registry *)HALS_ObjectMap::CopyObjectByObjectID(v2);
    v4 = v3;
    if (v3)
    {
      if (v3 != *((AMCP::Log::Scope_Registry **)this + 177))
      {
        AMCP::Log::Scope_Registry::get(v3);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v5 = *(std::__shared_weak_count **)v31;
        v6 = **(NSObject ***)buf;
        if (*(_QWORD *)v31)
        {
          v7 = (unint64_t *)(*(_QWORD *)v31 + 8);
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 - 1, v7));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          v21 = pthread_self();
          v22 = pthread_mach_thread_np(v21);
          v23 = *((_DWORD *)this + 356);
          v24 = *((_QWORD *)this + 177);
          *(_DWORD *)buf = 67110402;
          *(_DWORD *)&buf[4] = v22;
          *(_WORD *)v31 = 2080;
          *(_QWORD *)&v31[2] = "HALS_PlugInDevice.cpp";
          v32 = 1024;
          v33 = 72;
          v34 = 1024;
          v35 = v23;
          v36 = 2048;
          v37 = v4;
          v38 = 2048;
          v39 = v24;
          _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d IO Engine ID %u object from map %p is not the same as cached object %p", buf, 0x32u);
        }
      }
      (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v4 + 8))(v4);
      HALS_ObjectMap::ObjectIsDead(*((HALS_ObjectMap **)this + 177), v9);
    }
    else
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v11 = *(std::__shared_weak_count **)v31;
      v12 = **(NSObject ***)buf;
      if (*(_QWORD *)v31)
      {
        v13 = (unint64_t *)(*(_QWORD *)v31 + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v25 = pthread_self();
        v26 = pthread_mach_thread_np(v25);
        v27 = *((_DWORD *)this + 356);
        v28 = (HALS_ObjectMap *)*((_QWORD *)this + 177);
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v26;
        *(_WORD *)v31 = 2080;
        *(_QWORD *)&v31[2] = "HALS_PlugInDevice.cpp";
        v32 = 1024;
        v33 = 80;
        v34 = 1024;
        v35 = v27;
        v36 = 2048;
        v37 = v28;
        _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d IO Engine ID %u is not valid, ptr %p", buf, 0x28u);
      }
    }
    HALS_ObjectMap::ReleaseObject(v4, v10);
  }
  *((_QWORD *)this + 177) = 0;
  *((_DWORD *)this + 356) = 0;
  v29[0] = 0;
  v29[1] = 0;
  HALS_System::GetInstance(buf, 0, v29);
  if (*(_QWORD *)buf)
    HALS_IOContext_Manager::destroy_engine_for_device(*(os_unfair_lock_s **)(*(_QWORD *)buf + 1392), this);
  v15 = *(std::__shared_weak_count **)v31;
  if (*(_QWORD *)v31)
  {
    v16 = (unint64_t *)(*(_QWORD *)v31 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_PlugInDevice *)((char *)this + 1432));
  v18 = (void *)*((_QWORD *)this + 174);
  if (v18)
  {
    *((_QWORD *)this + 175) = v18;
    operator delete(v18);
  }
  for (i = 0; i != -48; i -= 24)
  {
    v20 = *(void **)((char *)this + i + 1368);
    if (v20)
    {
      *(_QWORD *)((char *)this + i + 1376) = v20;
      operator delete(v20);
    }
  }
  HALS_PlugInObject::~HALS_PlugInObject((HALS_PlugInDevice *)((char *)this + 1304));
  HALS_Device::~HALS_Device(this);
}

uint64_t HALS_PlugInDevice::_Deactivate(HALS_PlugInDevice *this)
{
  uint64_t v2;
  char v3;
  char v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  HALS_ObjectMap *v11;
  HALS_Object *v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  HALS_ObjectMap *v16;
  HALS_Object *v17;

  v2 = 0;
  v3 = 1;
  do
  {
    v4 = v3;
    v5 = (char *)this + 24 * v2;
    v6 = v5 + 1352;
    v7 = *((_QWORD *)v5 + 169);
    if (v7 != *((_QWORD *)v5 + 168))
    {
      v8 = 0;
      v9 = (uint64_t *)(v5 + 1344);
      v10 = 1;
      v7 = *((_QWORD *)v5 + 168);
      do
      {
        v11 = *(HALS_ObjectMap **)(v7 + 8 * v8);
        (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v11 + 8))(v11);
        HALS_ObjectMap::ObjectIsDead(v11, v12);
        v8 = v10;
        v7 = *v9;
        ++v10;
      }
      while (v8 < (*v6 - *v9) >> 3);
    }
    v3 = 0;
    *v6 = v7;
    v2 = 1;
  }
  while ((v4 & 1) != 0);
  v13 = *((_QWORD *)this + 175);
  if (v13 != *((_QWORD *)this + 174))
  {
    v14 = 0;
    v15 = 1;
    v13 = *((_QWORD *)this + 174);
    do
    {
      v16 = *(HALS_ObjectMap **)(v13 + 8 * v14);
      (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v16 + 8))(v16);
      HALS_ObjectMap::ObjectIsDead(v16, v17);
      v14 = v15;
      v13 = *((_QWORD *)this + 174);
      ++v15;
    }
    while (v14 < (*((_QWORD *)this + 175) - v13) >> 3);
  }
  *((_QWORD *)this + 175) = v13;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)this + 164) + 400) + 144))(*(_QWORD *)(*((_QWORD *)this + 164) + 400), *((unsigned int *)this + 331));
  return HALS_Device::_Deactivate(this);
}

uint64_t HALS_PlugInDevice::HasProperty(HALS_PlugInDevice *this, const BOOL *a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4)
{
  signed int mSelector;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t *p_shared_owners;
  unint64_t v120;
  uint64_t mScope;
  uint64_t v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t *v151;
  unint64_t *v152;
  unint64_t *v153;
  unint64_t *v154;
  unint64_t *v155;
  unint64_t *v156;
  unint64_t *v157;
  unint64_t *v158;
  unint64_t *v159;
  unint64_t *v160;
  unint64_t *v161;
  unint64_t *v162;
  unint64_t *v163;
  unint64_t *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t *v167;
  unint64_t *v168;
  unint64_t *v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  std::__shared_weak_count *v173;

  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1768124269)
  {
    if (mSelector <= 1819173228)
    {
      if (mSelector > 1818850144)
      {
        if (mSelector > 1819107690)
        {
          if (mSelector == 1819107691)
          {
            v117 = *((_QWORD *)this + 164);
            v118 = *(_QWORD *)(v117 + 400);
            v10 = *(std::__shared_weak_count **)(v117 + 408);
            v172 = v118;
            v173 = v10;
            if (v10)
            {
              p_shared_owners = (unint64_t *)&v10->__shared_owners_;
              do
                v120 = __ldxr(p_shared_owners);
              while (__stxr(v120 + 1, p_shared_owners));
            }
            if (a4)
              mScope = a4[19].mScope;
            else
              mScope = 0;
            v41 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v118 + 544))(v118, *((unsigned int *)this + 331), mScope, a3);
            if (!v10)
              return v41;
            v168 = (unint64_t *)&v10->__shared_owners_;
            do
              v128 = __ldaxr(v168);
            while (__stlxr(v128 - 1, v168));
            goto LABEL_301;
          }
          if (mSelector == 1819111268)
          {
            v65 = *((_QWORD *)this + 164);
            v66 = *(_QWORD *)(v65 + 400);
            v10 = *(std::__shared_weak_count **)(v65 + 408);
            v172 = v66;
            v173 = v10;
            if (v10)
            {
              v67 = (unint64_t *)&v10->__shared_owners_;
              do
                v68 = __ldxr(v67);
              while (__stxr(v68 + 1, v67));
            }
            if (a4)
              v69 = a4[19].mScope;
            else
              v69 = 0;
            v41 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v66 + 544))(v66, *((unsigned int *)this + 331), v69, a3);
            if (!v10)
              return v41;
            v158 = (unint64_t *)&v10->__shared_owners_;
            do
              v128 = __ldaxr(v158);
            while (__stlxr(v128 - 1, v158));
            goto LABEL_301;
          }
        }
        else if (mSelector == 1818850145 || mSelector == 1818850162)
        {
          v31 = *((_QWORD *)this + 164);
          v32 = *(_QWORD *)(v31 + 400);
          v10 = *(std::__shared_weak_count **)(v31 + 408);
          v172 = v32;
          v173 = v10;
          if (v10)
          {
            v33 = (unint64_t *)&v10->__shared_owners_;
            do
              v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
          }
          if (a4)
            v35 = a4[19].mScope;
          else
            v35 = 0;
          v41 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v32
                                                                                                  + 544))(v32, *((unsigned int *)this + 331), v35, a3);
          if (!v10)
            return v41;
          v129 = (unint64_t *)&v10->__shared_owners_;
          do
            v128 = __ldaxr(v129);
          while (__stlxr(v128 - 1, v129));
          goto LABEL_301;
        }
      }
      else if (mSelector > 1818452845)
      {
        if (mSelector == 1818452846)
        {
          v96 = *((_QWORD *)this + 164);
          v97 = *(_QWORD *)(v96 + 400);
          v10 = *(std::__shared_weak_count **)(v96 + 408);
          v172 = v97;
          v173 = v10;
          if (v10)
          {
            v98 = (unint64_t *)&v10->__shared_owners_;
            do
              v99 = __ldxr(v98);
            while (__stxr(v99 + 1, v98));
          }
          if (a4)
            v100 = a4[19].mScope;
          else
            v100 = 0;
          v41 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v97
                                                                                                  + 544))(v97, *((unsigned int *)this + 331), v100, a3);
          if (!v10)
            return v41;
          v163 = (unint64_t *)&v10->__shared_owners_;
          do
            v128 = __ldaxr(v163);
          while (__stlxr(v128 - 1, v163));
          goto LABEL_301;
        }
        if (mSelector == 1818455662)
        {
          v44 = *((_QWORD *)this + 164);
          v45 = *(_QWORD *)(v44 + 400);
          v10 = *(std::__shared_weak_count **)(v44 + 408);
          v172 = v45;
          v173 = v10;
          if (v10)
          {
            v46 = (unint64_t *)&v10->__shared_owners_;
            do
              v47 = __ldxr(v46);
            while (__stxr(v47 + 1, v46));
          }
          if (a4)
            v48 = a4[19].mScope;
          else
            v48 = 0;
          v41 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v45
                                                                                                  + 544))(v45, *((unsigned int *)this + 331), v48, a3);
          if (!v10)
            return v41;
          v155 = (unint64_t *)&v10->__shared_owners_;
          do
            v128 = __ldaxr(v155);
          while (__stlxr(v128 - 1, v155));
          goto LABEL_301;
        }
      }
      else if (mSelector == 1768124270 || mSelector == 1768777573)
      {
        v8 = *((_QWORD *)this + 164);
        v9 = *(_QWORD *)(v8 + 400);
        v10 = *(std::__shared_weak_count **)(v8 + 408);
        v172 = v9;
        v173 = v10;
        if (v10)
        {
          v11 = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        if (a4)
          v13 = a4[19].mScope;
        else
          v13 = 0;
        v41 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v9 + 544))(v9, *((unsigned int *)this + 331), v13, a3);
        if (!v10)
          return v41;
        v127 = (unint64_t *)&v10->__shared_owners_;
        do
          v128 = __ldaxr(v127);
        while (__stlxr(v128 - 1, v127));
LABEL_301:
        if (!v128)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          v165 = v10;
          goto LABEL_303;
        }
        return v41;
      }
      goto LABEL_166;
    }
    if (mSelector > 1886546293)
    {
      v41 = 1;
      if (mSelector > 1919251301)
      {
        if (mSelector == 1919251302)
          return v41;
        if (mSelector == 1920168547)
          return HALS_PlugInObject::HasResourceBundle((uint64_t)this + 1304, (uint64_t)a4);
      }
      else
      {
        if (mSelector == 1886546294)
        {
          v87 = *((_DWORD *)this + 5);
          v86 = *((_DWORD *)this + 6);
          if (v87 == v86 || v87 == 1701078390)
          {
            if (v87 != 1701078390 && v87 == v86)
              return 0;
          }
          else if (v86 != 1701078390)
          {
            return 0;
          }
          v139 = *((_QWORD *)this + 164);
          v133 = *(_QWORD *)(v139 + 400);
          v140 = *(std::__shared_weak_count **)(v139 + 408);
          v172 = v133;
          v173 = v140;
          if (v140)
          {
            v141 = (unint64_t *)&v140->__shared_owners_;
            do
              v142 = __ldxr(v141);
            while (__stxr(v142 + 1, v141));
          }
          v137 = *((unsigned int *)this + 331);
          if (a4)
            v138 = a4[19].mScope;
          else
            v138 = 0;
          goto LABEL_308;
        }
        if (mSelector == 1919251299)
          return v41;
      }
      goto LABEL_166;
    }
    if (mSelector > 1836411235)
    {
      if (mSelector == 1836411236)
      {
        v107 = *((_QWORD *)this + 164);
        v108 = *(_QWORD *)(v107 + 400);
        v10 = *(std::__shared_weak_count **)(v107 + 408);
        v172 = v108;
        v173 = v10;
        if (v10)
        {
          v109 = (unint64_t *)&v10->__shared_owners_;
          do
            v110 = __ldxr(v109);
          while (__stxr(v110 + 1, v109));
        }
        if (a4)
          v111 = a4[19].mScope;
        else
          v111 = 0;
        v41 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v108 + 544))(v108, *((unsigned int *)this + 331), v111, a3);
        if (!v10)
          return v41;
        v166 = (unint64_t *)&v10->__shared_owners_;
        do
          v128 = __ldaxr(v166);
        while (__stlxr(v128 - 1, v166));
        goto LABEL_301;
      }
      if (mSelector != 1851878764)
        goto LABEL_166;
    }
    else if (mSelector != 1819173229)
    {
      if (mSelector != 1819634020)
        goto LABEL_166;
      v19 = *((_QWORD *)this + 164);
      v20 = *(_QWORD *)(v19 + 400);
      v21 = *(std::__shared_weak_count **)(v19 + 408);
      v172 = v20;
      v173 = v21;
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v24 = *((unsigned int *)this + 331);
      if (a4)
        v25 = a4[19].mScope;
      else
        v25 = 0;
      v170 = 0x676C6F626C756964;
      v171 = 0;
      v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v20 + 544))(v20, v24, v25, &v170);
      if (!v21)
        return v41;
      v152 = (unint64_t *)&v21->__shared_owners_;
      do
        v131 = __ldaxr(v152);
      while (__stlxr(v131 - 1, v152));
      goto LABEL_280;
    }
    v54 = *((_QWORD *)this + 164);
    v55 = *(_QWORD *)(v54 + 400);
    v21 = *(std::__shared_weak_count **)(v54 + 408);
    v172 = v55;
    v173 = v21;
    if (v21)
    {
      v56 = (unint64_t *)&v21->__shared_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
    v58 = *((unsigned int *)this + 331);
    if (a4)
      v59 = a4[19].mScope;
    else
      v59 = 0;
    v170 = 0x676C6F626C6E616DLL;
    v171 = 0;
    v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v55 + 544))(v55, v58, v59, &v170);
    if (!v21)
      return v41;
    v130 = (unint64_t *)&v21->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    goto LABEL_280;
  }
  if (mSelector <= 1668641651)
  {
    if (mSelector > 1635087470)
    {
      if (mSelector > 1668050794)
      {
        if (mSelector == 1668050795)
        {
          v112 = *((_QWORD *)this + 164);
          v113 = *(_QWORD *)(v112 + 400);
          v10 = *(std::__shared_weak_count **)(v112 + 408);
          v172 = v113;
          v173 = v10;
          if (v10)
          {
            v114 = (unint64_t *)&v10->__shared_owners_;
            do
              v115 = __ldxr(v114);
            while (__stxr(v115 + 1, v114));
          }
          if (a4)
            v116 = a4[19].mScope;
          else
            v116 = 0;
          v41 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v113
                                                                                                  + 544))(v113, *((unsigned int *)this + 331), v116, a3);
          if (!v10)
            return v41;
          v167 = (unint64_t *)&v10->__shared_owners_;
          do
            v128 = __ldaxr(v167);
          while (__stlxr(v128 - 1, v167));
          goto LABEL_301;
        }
        if (mSelector == 1668510818)
        {
          v60 = *((_QWORD *)this + 164);
          v61 = *(_QWORD *)(v60 + 400);
          v10 = *(std::__shared_weak_count **)(v60 + 408);
          v172 = v61;
          v173 = v10;
          if (v10)
          {
            v62 = (unint64_t *)&v10->__shared_owners_;
            do
              v63 = __ldxr(v62);
            while (__stxr(v63 + 1, v62));
          }
          if (a4)
            v64 = a4[19].mScope;
          else
            v64 = 0;
          v41 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v61
                                                                                                  + 544))(v61, *((unsigned int *)this + 331), v64, a3);
          if (!v10)
            return v41;
          v157 = (unint64_t *)&v10->__shared_owners_;
          do
            v128 = __ldaxr(v157);
          while (__stlxr(v128 - 1, v157));
          goto LABEL_301;
        }
      }
      else
      {
        if (mSelector == 1635087471)
        {
          v76 = *((_QWORD *)this + 164);
          v77 = *(_QWORD *)(v76 + 400);
          v10 = *(std::__shared_weak_count **)(v76 + 408);
          v172 = v77;
          v173 = v10;
          if (v10)
          {
            v78 = (unint64_t *)&v10->__shared_owners_;
            do
              v79 = __ldxr(v78);
            while (__stxr(v79 + 1, v78));
          }
          if (a4)
            v80 = a4[19].mScope;
          else
            v80 = 0;
          v41 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v77
                                                                                                  + 544))(v77, *((unsigned int *)this + 331), v80, a3);
          if (!v10)
            return v41;
          v160 = (unint64_t *)&v10->__shared_owners_;
          do
            v128 = __ldaxr(v160);
          while (__stlxr(v128 - 1, v160));
          goto LABEL_301;
        }
        if (mSelector == 1667658618)
        {
          v26 = *((_QWORD *)this + 164);
          v27 = *(_QWORD *)(v26 + 400);
          v10 = *(std::__shared_weak_count **)(v26 + 408);
          v172 = v27;
          v173 = v10;
          if (v10)
          {
            v28 = (unint64_t *)&v10->__shared_owners_;
            do
              v29 = __ldxr(v28);
            while (__stxr(v29 + 1, v28));
          }
          if (a4)
            v30 = a4[19].mScope;
          else
            v30 = 0;
          v41 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v27
                                                                                                  + 544))(v27, *((unsigned int *)this + 331), v30, a3);
          if (!v10)
            return v41;
          v153 = (unint64_t *)&v10->__shared_owners_;
          do
            v128 = __ldaxr(v153);
          while (__stlxr(v128 - 1, v153));
          goto LABEL_301;
        }
      }
      goto LABEL_166;
    }
    if (mSelector != 1633903475)
    {
      if (mSelector == 1633906541)
      {
        v95 = *((_DWORD *)this + 5);
        v94 = *((_DWORD *)this + 6);
        if (v95 == v94 || v95 == 1701078390)
        {
          if (v95 != 1701078390 && v95 == v94)
            return 0;
        }
        else if (v94 != 1701078390)
        {
          return 0;
        }
        v143 = *((_QWORD *)this + 164);
        v133 = *(_QWORD *)(v143 + 400);
        v144 = *(std::__shared_weak_count **)(v143 + 408);
        v172 = v133;
        v173 = v144;
        if (v144)
        {
          v145 = (unint64_t *)&v144->__shared_owners_;
          do
            v146 = __ldxr(v145);
          while (__stxr(v146 + 1, v145));
        }
        v137 = *((unsigned int *)this + 331);
        if (a4)
          v138 = a4[19].mScope;
        else
          v138 = 0;
        goto LABEL_308;
      }
      if (mSelector == 1634169456)
      {
        v43 = *((_DWORD *)this + 5);
        v42 = *((_DWORD *)this + 6);
        if (v43 == v42 || v43 == 1701078390)
        {
          if (v43 != 1701078390 && v43 == v42)
            return 0;
        }
        else if (v42 != 1701078390)
        {
          return 0;
        }
        v132 = *((_QWORD *)this + 164);
        v133 = *(_QWORD *)(v132 + 400);
        v134 = *(std::__shared_weak_count **)(v132 + 408);
        v172 = v133;
        v173 = v134;
        if (v134)
        {
          v135 = (unint64_t *)&v134->__shared_owners_;
          do
            v136 = __ldxr(v135);
          while (__stxr(v136 + 1, v135));
        }
        v137 = *((unsigned int *)this + 331);
        if (a4)
          v138 = a4[19].mScope;
        else
          v138 = 0;
        goto LABEL_308;
      }
LABEL_166:
      if ((HALS_Device::HasProperty((HALS_Device ***)this, a2, a3, a4) & 1) != 0)
        return 1;
      if ((*(unsigned int (**)(char *, _QWORD))(*((_QWORD *)this + 163) + 24))((char *)this + 1304, a3->mSelector))
      {
        v147 = *((_QWORD *)this + 164);
        v133 = *(_QWORD *)(v147 + 400);
        v148 = *(std::__shared_weak_count **)(v147 + 408);
        v172 = v133;
        v173 = v148;
        if (v148)
        {
          v149 = (unint64_t *)&v148->__shared_owners_;
          do
            v150 = __ldxr(v149);
          while (__stxr(v150 + 1, v149));
        }
        v137 = *((unsigned int *)this + 331);
        if (a4)
          v138 = a4[19].mScope;
        else
          v138 = 0;
LABEL_308:
        v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v133
                                                                                                 + 544))(v133, v137, v138, a3);
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v172);
        return v41;
      }
      return 0;
    }
    v88 = *((_QWORD *)this + 164);
    v89 = *(_QWORD *)(v88 + 400);
    v21 = *(std::__shared_weak_count **)(v88 + 408);
    v172 = v89;
    v173 = v21;
    if (v21)
    {
      v90 = (unint64_t *)&v21->__shared_owners_;
      do
        v91 = __ldxr(v90);
      while (__stxr(v91 + 1, v90));
    }
    v92 = *((unsigned int *)this + 331);
    if (a4)
      v93 = a4[19].mScope;
    else
      v93 = 0;
    v170 = 0x676C6F6261636373;
    v171 = 0;
    v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v89 + 544))(v89, v92, v93, &v170);
    if (!v21)
      return v41;
    v162 = (unint64_t *)&v21->__shared_owners_;
    do
      v131 = __ldaxr(v162);
    while (__stlxr(v131 - 1, v162));
  }
  else
  {
    if (mSelector > 1685087595)
    {
      if (mSelector > 1685278577)
      {
        if (mSelector == 1685278578)
        {
          v122 = *((_QWORD *)this + 164);
          v123 = *(_QWORD *)(v122 + 400);
          v10 = *(std::__shared_weak_count **)(v122 + 408);
          v172 = v123;
          v173 = v10;
          if (v10)
          {
            v124 = (unint64_t *)&v10->__shared_owners_;
            do
              v125 = __ldxr(v124);
            while (__stxr(v125 + 1, v124));
          }
          if (a4)
            v126 = a4[19].mScope;
          else
            v126 = 0;
          v41 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v123
                                                                                                  + 544))(v123, *((unsigned int *)this + 331), v126, a3);
          if (!v10)
            return v41;
          v169 = (unint64_t *)&v10->__shared_owners_;
          do
            v128 = __ldaxr(v169);
          while (__stlxr(v128 - 1, v169));
          goto LABEL_301;
        }
        if (mSelector == 1685287012)
        {
          v70 = *((_QWORD *)this + 164);
          v71 = *(_QWORD *)(v70 + 400);
          v10 = *(std::__shared_weak_count **)(v70 + 408);
          v172 = v71;
          v173 = v10;
          if (v10)
          {
            v72 = (unint64_t *)&v10->__shared_owners_;
            do
              v73 = __ldxr(v72);
            while (__stxr(v73 + 1, v72));
          }
          if (a4)
            v74 = a4[19].mScope;
          else
            v74 = 0;
          v41 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v71
                                                                                                  + 544))(v71, *((unsigned int *)this + 331), v74, a3);
          if (!v10)
            return v41;
          v159 = (unint64_t *)&v10->__shared_owners_;
          do
            v128 = __ldaxr(v159);
          while (__stlxr(v128 - 1, v159));
          goto LABEL_301;
        }
      }
      else
      {
        if (mSelector == 1685087596)
        {
          v81 = *((_QWORD *)this + 164);
          v82 = *(_QWORD *)(v81 + 400);
          v10 = *(std::__shared_weak_count **)(v81 + 408);
          v172 = v82;
          v173 = v10;
          if (v10)
          {
            v83 = (unint64_t *)&v10->__shared_owners_;
            do
              v84 = __ldxr(v83);
            while (__stxr(v84 + 1, v83));
          }
          if (a4)
            v85 = a4[19].mScope;
          else
            v85 = 0;
          v41 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v82
                                                                                                  + 544))(v82, *((unsigned int *)this + 331), v85, a3);
          if (!v10)
            return v41;
          v161 = (unint64_t *)&v10->__shared_owners_;
          do
            v128 = __ldaxr(v161);
          while (__stlxr(v128 - 1, v161));
          goto LABEL_301;
        }
        if (mSelector == 1685222501)
        {
          v36 = *((_QWORD *)this + 164);
          v37 = *(_QWORD *)(v36 + 400);
          v10 = *(std::__shared_weak_count **)(v36 + 408);
          v172 = v37;
          v173 = v10;
          if (v10)
          {
            v38 = (unint64_t *)&v10->__shared_owners_;
            do
              v39 = __ldxr(v38);
            while (__stxr(v39 + 1, v38));
          }
          if (a4)
            v40 = a4[19].mScope;
          else
            v40 = 0;
          v41 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v37
                                                                                                  + 544))(v37, *((unsigned int *)this + 331), v40, a3);
          if (!v10)
            return v41;
          v154 = (unint64_t *)&v10->__shared_owners_;
          do
            v128 = __ldaxr(v154);
          while (__stlxr(v128 - 1, v154));
          goto LABEL_301;
        }
      }
      goto LABEL_166;
    }
    if (mSelector <= 1684301170)
    {
      if (mSelector == 1668641652)
        return *((_DWORD *)this + 334) != 0;
      if (mSelector == 1684107364)
      {
        v14 = *((_QWORD *)this + 164);
        v15 = *(_QWORD *)(v14 + 400);
        v10 = *(std::__shared_weak_count **)(v14 + 408);
        v172 = v15;
        v173 = v10;
        if (v10)
        {
          v16 = (unint64_t *)&v10->__shared_owners_;
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
        }
        if (a4)
          v18 = a4[19].mScope;
        else
          v18 = 0;
        v41 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v15 + 544))(v15, *((unsigned int *)this + 331), v18, a3);
        if (!v10)
          return v41;
        v151 = (unint64_t *)&v10->__shared_owners_;
        do
          v128 = __ldaxr(v151);
        while (__stlxr(v128 - 1, v151));
        goto LABEL_301;
      }
      goto LABEL_166;
    }
    if (mSelector != 1684301171)
    {
      if (mSelector == 1684893796)
      {
        v49 = *((_QWORD *)this + 164);
        v50 = *(_QWORD *)(v49 + 400);
        v10 = *(std::__shared_weak_count **)(v49 + 408);
        v172 = v50;
        v173 = v10;
        if (v10)
        {
          v51 = (unint64_t *)&v10->__shared_owners_;
          do
            v52 = __ldxr(v51);
          while (__stxr(v52 + 1, v51));
        }
        if (a4)
          v53 = a4[19].mScope;
        else
          v53 = 0;
        v41 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v50 + 544))(v50, *((unsigned int *)this + 331), v53, a3);
        if (!v10)
          return v41;
        v156 = (unint64_t *)&v10->__shared_owners_;
        do
          v128 = __ldaxr(v156);
        while (__stlxr(v128 - 1, v156));
        goto LABEL_301;
      }
      goto LABEL_166;
    }
    v101 = *((_QWORD *)this + 164);
    v102 = *(_QWORD *)(v101 + 400);
    v21 = *(std::__shared_weak_count **)(v101 + 408);
    v172 = v102;
    v173 = v21;
    if (v21)
    {
      v103 = (unint64_t *)&v21->__shared_owners_;
      do
        v104 = __ldxr(v103);
      while (__stxr(v104 + 1, v103));
    }
    v105 = *((unsigned int *)this + 331);
    if (a4)
      v106 = a4[19].mScope;
    else
      v106 = 0;
    v170 = 0x676C6F6264646573;
    v171 = 0;
    v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v102 + 544))(v102, v105, v106, &v170);
    if (!v21)
      return v41;
    v164 = (unint64_t *)&v21->__shared_owners_;
    do
      v131 = __ldaxr(v164);
    while (__stlxr(v131 - 1, v164));
  }
LABEL_280:
  if (!v131)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    v165 = v21;
LABEL_303:
    std::__shared_weak_count::__release_weak(v165);
  }
  return v41;
}

void sub_1B5876AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugInDevice::IsPropertySettable(HALS_PlugInDevice *this, const BOOL *a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4)
{
  uint64_t v7;
  signed int mSelector;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v15;
  int v16;
  int v17;
  int v18;
  const BOOL *v19;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t mScope;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;

  v7 = 0;
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1685087595)
  {
    if (mSelector <= 1818850161)
    {
      if (mSelector > 1685278577)
      {
        if (mSelector == 1685278578)
          return v7;
        if (mSelector != 1818850145)
          goto LABEL_47;
      }
      else if (mSelector != 1685087596)
      {
        v13 = 1685222501;
        goto LABEL_38;
      }
    }
    else
    {
      if (mSelector > 1919251298)
      {
        v9 = mSelector == 1919251299 || mSelector == 1919251302;
        v10 = 1920168547;
LABEL_25:
        if (v9 || mSelector == v10)
          return v7;
        goto LABEL_47;
      }
      if (mSelector != 1818850162)
      {
        if (mSelector == 1886546294)
        {
          v16 = *((_DWORD *)this + 5);
          v15 = *((_DWORD *)this + 6);
          if (v16 == v15 || v16 == 1701078390)
          {
            if (v16 != 1701078390 && v16 == v15)
              return 0;
          }
          else if (v15 != 1701078390)
          {
            return 0;
          }
          v27 = *((_QWORD *)this + 164);
          v28 = *(_QWORD *)(v27 + 400);
          v23 = *(std::__shared_weak_count **)(v27 + 408);
          v47 = v28;
          v48 = v23;
          if (v23)
          {
            p_shared_owners = (unint64_t *)&v23->__shared_owners_;
            do
              v30 = __ldxr(p_shared_owners);
            while (__stxr(v30 + 1, p_shared_owners));
          }
          if (a4)
            mScope = a4[19].mScope;
          else
            mScope = 0;
          v7 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v28 + 552))(v28, *((unsigned int *)this + 331), mScope, a3);
          if (!v23)
            return v7;
          v45 = (unint64_t *)&v23->__shared_owners_;
          do
            v44 = __ldaxr(v45);
          while (__stlxr(v44 - 1, v45));
          goto LABEL_91;
        }
LABEL_47:
        if (HALS_Device::HasProperty((HALS_Device ***)this, a2, a3, a4))
          return HALS_Device::IsPropertySettable(this, v19, a3, a4);
        if ((*(unsigned int (**)(char *, _QWORD))(*((_QWORD *)this + 163) + 24))((char *)this + 1304, a3->mSelector))
        {
          v37 = *((_QWORD *)this + 164);
          v38 = *(_QWORD *)(v37 + 400);
          v39 = *(std::__shared_weak_count **)(v37 + 408);
          v47 = v38;
          v48 = v39;
          if (v39)
          {
            v40 = (unint64_t *)&v39->__shared_owners_;
            do
              v41 = __ldxr(v40);
            while (__stxr(v41 + 1, v40));
          }
          if (a4)
            v42 = a4[19].mScope;
          else
            v42 = 0;
          v7 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v38 + 552))(v38, *((unsigned int *)this + 331), v42, a3);
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v47);
          return v7;
        }
        return 0;
      }
    }
    return 1;
  }
  if (mSelector > 1667658617)
  {
    if (mSelector <= 1668510817)
    {
      v9 = mSelector == 1667658618;
      v10 = 1668050795;
    }
    else
    {
      v9 = mSelector == 1668510818 || mSelector == 1668641652;
      v10 = 1684301171;
    }
    goto LABEL_25;
  }
  if (mSelector > 1634169455)
  {
    if (mSelector == 1634169456)
    {
      v18 = *((_DWORD *)this + 5);
      v17 = *((_DWORD *)this + 6);
      if (v18 == v17 || v18 == 1701078390)
      {
        if (v18 != 1701078390 && v18 == v17)
          return 0;
      }
      else if (v17 != 1701078390)
      {
        return 0;
      }
      v32 = *((_QWORD *)this + 164);
      v33 = *(_QWORD *)(v32 + 400);
      v23 = *(std::__shared_weak_count **)(v32 + 408);
      v47 = v33;
      v48 = v23;
      if (v23)
      {
        v34 = (unint64_t *)&v23->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      if (a4)
        v36 = a4[19].mScope;
      else
        v36 = 0;
      v7 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v33 + 552))(v33, *((unsigned int *)this + 331), v36, a3);
      if (!v23)
        return v7;
      v46 = (unint64_t *)&v23->__shared_owners_;
      do
        v44 = __ldaxr(v46);
      while (__stlxr(v44 - 1, v46));
      goto LABEL_91;
    }
    v13 = 1635087471;
LABEL_38:
    if (mSelector != v13)
      goto LABEL_47;
    return v7;
  }
  if (mSelector != 1633903475)
  {
    if (mSelector == 1633906541)
    {
      v12 = *((_DWORD *)this + 5);
      v11 = *((_DWORD *)this + 6);
      if (v12 == v11 || v12 == 1701078390)
      {
        if (v12 != 1701078390 && v12 == v11)
          return 0;
      }
      else if (v11 != 1701078390)
      {
        return 0;
      }
      v21 = *((_QWORD *)this + 164);
      v22 = *(_QWORD *)(v21 + 400);
      v23 = *(std::__shared_weak_count **)(v21 + 408);
      v47 = v22;
      v48 = v23;
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      if (a4)
        v26 = a4[19].mScope;
      else
        v26 = 0;
      v7 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v22 + 552))(v22, *((unsigned int *)this + 331), v26, a3);
      if (!v23)
        return v7;
      v43 = (unint64_t *)&v23->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
LABEL_91:
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
      return v7;
    }
    goto LABEL_47;
  }
  return v7;
}

void sub_1B5876F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugInDevice::GetPropertyDataSize(HALS_PlugInDevice *this, const BOOL *a2, AudioObjectPropertyAddress *a3, uint64_t a4, int *a5, AudioObjectPropertyAddress *a6)
{
  signed int mSelector;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  int NumberStreams;
  unsigned int *v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  const BOOL *v32;
  uint64_t v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  double *v54;
  void *v55;
  void *v56;
  int v57;
  HALS_Object *v58;
  unint64_t *v59;
  uint64_t mScope;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  int v67;
  uint64_t v68;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  void *__p;
  std::__shared_weak_count *v77;
  uint64_t v78;

  mSelector = a3->mSelector;
  v12 = 8;
  if ((int)a3->mSelector > 1685278577)
  {
    if (mSelector > 1851878763)
    {
      if (mSelector <= 1919251298)
      {
        if (mSelector != 1851878764)
        {
          if (mSelector == 1853059619)
          {
            NumberStreams = HALS_IODevice::GetNumberStreams(this, 0);
            if (NumberStreams || HALS_IODevice::GetNumberStreams(this, 1))
            {
              v22 = (unsigned int *)HALS_IODevice::CopyStreamByIndex(this, NumberStreams == 0, 0);
              v23 = v22;
              if (v22)
              {
                v24 = v22[4];
                __p = (void *)0x676C6F6270667461;
                LODWORD(v77) = 0;
                v25 = (*(unsigned int (**)(unsigned int *, uint64_t, void **, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v22 + 104))(v22, v24, &__p, 0, 0, 0)/ 0x38;
              }
              else
              {
                v25 = 0;
              }
              v50 = operator new[]();
              if (v23)
              {
                v51 = v23[4];
                __p = (void *)0x676C6F6270667461;
                LODWORD(v77) = 0;
                LODWORD(v73) = 0;
                (*(void (**)(unsigned int *, uint64_t, void **, _QWORD, uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v23 + 112))(v23, v51, &__p, 56 * v25, &v73, v50, 0, 0, 0);
                v52 = v73 / 0x38uLL;
                v25 = v73 / 0x38;
              }
              else
              {
                v52 = v25;
              }
              __p = 0;
              v77 = 0;
              v78 = 0;
              v73 = 0;
              v74 = 0;
              v75 = 0;
              std::vector<CAAudioValueRange>::reserve(&__p, v52);
              v53 = v25;
              std::vector<CAAudioValueRange>::reserve((void **)&v73, v25);
              if (v25)
              {
                v54 = (double *)(v50 + 40);
                do
                {
                  CAAudioValueRange_ComputeUnion(v54, (double **)&__p, (char **)&v73);
                  v55 = (void *)v73;
                  std::vector<CAAudioValueRange>::__assign_with_size[abi:ne180100]<CAAudioValueRange*,CAAudioValueRange*>(&__p, (char *)v73, v74, (uint64_t)&v74[-v73] >> 4);
                  v54 += 7;
                  --v53;
                }
                while (v53);
              }
              else
              {
                v55 = (void *)v73;
              }
              v56 = __p;
              v57 = (_DWORD)v77 - (_DWORD)__p;
              if (v55)
                operator delete(v55);
              v12 = v57 & 0xFFFFFFF0;
              if (v56)
                operator delete(v56);
              MEMORY[0x1B5E50664](v50, 0x1000C8021716A34);
              HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v23, v58);
              return v12;
            }
            v73 = 0x676C6F626E737223;
            LODWORD(v74) = 0;
            if (a6)
              mScope = a6[19].mScope;
            else
              mScope = 0;
            v62 = *((_QWORD *)this + 164);
            v63 = *(void **)(v62 + 400);
            v64 = *(std::__shared_weak_count **)(v62 + 408);
            __p = v63;
            v77 = v64;
            if (v64)
            {
              p_shared_owners = (unint64_t *)&v64->__shared_owners_;
              do
                v66 = __ldxr(p_shared_owners);
              while (__stxr(v66 + 1, p_shared_owners));
            }
            v67 = (*(uint64_t (**)(void *, _QWORD, uint64_t, uint64_t *))(*(_QWORD *)v63 + 544))(v63, *((unsigned int *)this + 331), mScope, &v73);
            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
            if (!v67)
              return 16;
            v68 = *((_QWORD *)this + 164);
            v69 = *(void **)(v68 + 400);
            v70 = *(std::__shared_weak_count **)(v68 + 408);
            __p = v69;
            v77 = v70;
            if (v70)
            {
              v71 = (unint64_t *)&v70->__shared_owners_;
              do
                v72 = __ldxr(v71);
              while (__stxr(v72 + 1, v71));
            }
            v61 = (*(uint64_t (**)(void *, _QWORD, uint64_t, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)v69 + 560))(v69, *((unsigned int *)this + 331), mScope, &v73, 0, 0);
            goto LABEL_109;
          }
          v13 = 1886546294;
          goto LABEL_23;
        }
        return v12;
      }
      if (mSelector == 1919251299 || mSelector == 1919251302)
        return 4;
      v14 = 1920168547;
      goto LABEL_30;
    }
    if (mSelector <= 1818850161)
    {
      if (mSelector == 1685278578)
        return v12;
      if (mSelector != 1818850145)
      {
LABEL_50:
        if (HALS_Device::HasProperty((HALS_Device ***)this, a2, a3, a6))
          return HALS_Device::GetPropertyDataSize((HALS_Device ***)this, v32, a3, a4, a5, a6);
        if (!(*(unsigned int (**)(char *, _QWORD))(*((_QWORD *)this + 163) + 24))((char *)this + 1304, a3->mSelector))return 0;
        v34 = *((_QWORD *)this + 164);
        v35 = *(void **)(v34 + 400);
        v36 = *(std::__shared_weak_count **)(v34 + 408);
        __p = v35;
        v77 = v36;
        if (v36)
        {
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
        }
        if (a6)
          v39 = a6[19].mScope;
        else
          v39 = 0;
        v61 = (*(uint64_t (**)(void *, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, int *))(*(_QWORD *)v35 + 560))(v35, *((unsigned int *)this + 331), v39, a3, a4, a5);
LABEL_109:
        v12 = v61;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
        return v12;
      }
    }
    else if (mSelector != 1818850162)
    {
      if (mSelector == 1819173229)
        return v12;
      v14 = 1836411236;
      goto LABEL_30;
    }
    return 12;
  }
  if (mSelector <= 1667658617)
  {
    if (mSelector > 1634169455)
    {
      if (mSelector == 1634169456)
      {
        v26 = *((_QWORD *)this + 164);
        v27 = *(void **)(v26 + 400);
        v28 = *(std::__shared_weak_count **)(v26 + 408);
        __p = v27;
        v77 = v28;
        if (v28)
        {
          v29 = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
        if (a6)
          v31 = a6[19].mScope;
        else
          v31 = 0;
        v12 = (*(uint64_t (**)(void *, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, int *))(*(_QWORD *)v27 + 560))(v27, *((unsigned int *)this + 331), v31, a3, a4, a5);
        if (!v28)
          return v12;
        v48 = (unint64_t *)&v28->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
      }
      else
      {
        if (mSelector != 1634429294)
        {
          v13 = 1635087471;
          goto LABEL_23;
        }
        v15 = *((_QWORD *)this + 164);
        v16 = *(void **)(v15 + 400);
        v17 = *(std::__shared_weak_count **)(v15 + 408);
        __p = v16;
        v77 = v17;
        if (v17)
        {
          v18 = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        if (a6)
          v20 = a6[19].mScope;
        else
          v20 = 0;
        v40 = (*(uint64_t (**)(void *, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v16 + 544))(v16, *((unsigned int *)this + 331), v20, a3);
        if (v17)
        {
          v41 = (unint64_t *)&v17->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        if (!v40)
          return 4;
        v43 = *((_QWORD *)this + 164);
        v44 = *(void **)(v43 + 400);
        v28 = *(std::__shared_weak_count **)(v43 + 408);
        __p = v44;
        v77 = v28;
        if (v28)
        {
          v45 = (unint64_t *)&v28->__shared_owners_;
          do
            v46 = __ldxr(v45);
          while (__stxr(v46 + 1, v45));
        }
        if (a6)
          v47 = a6[19].mScope;
        else
          v47 = 0;
        v12 = (*(uint64_t (**)(void *, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, int *))(*(_QWORD *)v44 + 560))(v44, *((unsigned int *)this + 331), v47, a3, a4, a5);
        if (!v28)
          return v12;
        v59 = (unint64_t *)&v28->__shared_owners_;
        do
          v49 = __ldaxr(v59);
        while (__stlxr(v49 - 1, v59));
      }
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
      return v12;
    }
    if (mSelector == 1633903475)
      return v12;
    v14 = 1633906541;
LABEL_30:
    if (mSelector == v14)
      return v12;
    goto LABEL_50;
  }
  if (mSelector <= 1668641651)
  {
    if (mSelector == 1667658618 || mSelector == 1668050795)
      return 4;
    v13 = 1668510818;
LABEL_23:
    if (mSelector == v13)
      return 4;
    goto LABEL_50;
  }
  if (mSelector == 1668641652)
    return (12 * *((_DWORD *)this + 334));
  if (mSelector != 1684301171)
  {
    v13 = 1685222501;
    goto LABEL_23;
  }
  return v12;
}

void sub_1B58776C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void HALS_PlugInDevice::GetPropertyData(HALS_PlugInDevice *this, const BOOL *a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4, unsigned int *a5, int *a6, void *a7, int *a8, HALS_Client *a9)
{
  uint64_t v16;
  const BOOL *v17;
  AudioObjectPropertyAddress *v18;
  signed int mSelector;
  AudioObjectPropertyScope mScope;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  AudioObjectPropertyAddress *v64;
  int v65;
  unsigned int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  AudioObjectPropertyAddress *v92;
  uint64_t v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  char v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  BOOL v150;
  unsigned int *v151;
  const AudioObjectPropertyAddress *v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  int *v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  unint64_t v195;
  int *v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  AudioObjectPropertyAddress *v205;
  unsigned int TotalNumberChannelsForClient;
  int v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t *p_shared_owners;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t *v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t *v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int NumberStreams;
  unsigned int *v238;
  HALS_Stream *v239;
  uint64_t v240;
  unsigned int v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t *v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t *v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t *v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  AudioObjectPropertyAddress *v291;
  unsigned int v292;
  int v293;
  uint64_t v294;
  uint64_t v295;
  unsigned int v296;
  int *v297;
  uint64_t v298;
  _QWORD *v299;
  AudioObjectPropertyScope v300;
  uint64_t v301;
  uint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  uint64_t v306;
  AudioObjectPropertyAddress *v307;
  unint64_t *v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t *v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t *v319;
  unint64_t v320;
  uint64_t v321;
  AudioObjectPropertyAddress *v322;
  uint64_t v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t *v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t *v336;
  unint64_t v337;
  unsigned int v338;
  unint64_t *v339;
  unint64_t v340;
  unint64_t *v341;
  unint64_t *v342;
  int v343;
  unint64_t *v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t *v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t *v353;
  unint64_t *v354;
  unint64_t v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  unint64_t v358;
  std::__shared_weak_count *v359;
  unint64_t *v360;
  unint64_t v361;
  const __CFString *v362;
  AudioChannelLayout *v363;
  unint64_t *v364;
  unint64_t *v365;
  unint64_t *v366;
  unint64_t *v367;
  unint64_t *v368;
  unint64_t *v369;
  AudioObjectPropertyAddress *v370;
  int v371;
  unint64_t *v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t *v377;
  unint64_t v378;
  uint64_t v379;
  unint64_t *v380;
  int v381;
  unint64_t *v382;
  unint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t *v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t *v391;
  unint64_t *v392;
  unint64_t *v393;
  unint64_t v394;
  unint64_t *v395;
  unint64_t *v396;
  unint64_t *v397;
  unint64_t *v398;
  int *v399;
  unsigned int v400;
  unint64_t *v401;
  unint64_t v402;
  uint64_t DSPLatencyForClient;
  AudioObjectPropertyAddress *v404;
  int v405;
  unint64_t *v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  unint64_t *v411;
  unint64_t v412;
  uint64_t v413;
  uint64_t v414;
  unint64_t *v415;
  AudioObjectPropertyAddress *v416;
  int v417;
  unint64_t *v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  unint64_t *v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  unint64_t *v427;
  unint64_t *v428;
  unint64_t *v429;
  unint64_t *v430;
  AudioStreamRangedDescription *v431;
  unint64_t v432;
  double *p_mMinimum;
  void *v434;
  void *v435;
  uint64_t v436;
  size_t v437;
  HALS_Object *v438;
  int v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  unint64_t *v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  int v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t *v450;
  unint64_t v451;
  unint64_t v452;
  unint64_t v453;
  HALS_ObjectMap *v454;
  HALS_Object *v455;
  int v456;
  unsigned int v457;
  void *v458;
  double *v459;
  uint64_t v460;
  int v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  unint64_t *v465;
  unint64_t v466;
  int v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unint64_t *v471;
  unint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  unint64_t *v476;
  unint64_t v477;
  uint64_t v478;
  _DWORD *v479;
  _DWORD *v480;
  _DWORD *v481;
  _DWORD *v482;
  _DWORD *v483;
  _DWORD *v484;
  _DWORD *v486;
  _DWORD *v487;
  _DWORD *v488;
  _DWORD *v489;
  _DWORD *v490;
  _DWORD *v491;
  _DWORD *v492;
  _DWORD *v493;
  _DWORD *v494;
  _DWORD *exception;
  _DWORD *v496;
  _DWORD *v497;
  _DWORD *v498;
  _DWORD *v499;
  _DWORD *v500;
  _DWORD *v501;
  _DWORD *v502;
  _DWORD *v503;
  _DWORD *v504;
  _DWORD *v505;
  _DWORD *v506;
  _DWORD *v507;
  _DWORD *v508;
  _DWORD *v509;
  _DWORD *v510;
  _DWORD *v511;
  _DWORD *v512;
  _DWORD *v513;
  _DWORD *v514;
  _DWORD *v515;
  _DWORD *v516;
  _DWORD *v517;
  _DWORD *v518;
  _DWORD *v519;
  _DWORD *v520;
  int64x2_t v521;
  unsigned int v523[2];
  int v524;
  void *__p;
  char *v526;
  uint64_t v527;
  uint64_t v528;
  std::__shared_weak_count *v529;
  int v530;
  int v531;
  double v532;
  uint8_t buf[32];
  uint64_t v534;

  v534 = *MEMORY[0x1E0C80C00];
  v530 = 0;
  *(double *)&v16 = COERCE_DOUBLE((*(uint64_t (**)(HALS_PlugInDevice *, HALS_Client *))(*(_QWORD *)this + 696))(this, a9));
  v18 = a3;
  mSelector = a3->mSelector;
  mScope = a3->mScope;
  if ((int)a3->mSelector <= 1768777572)
  {
    if (mSelector <= 1684301170)
    {
      if (mSelector <= 1667658617)
      {
        if (mSelector <= 1634429293)
        {
          switch(mSelector)
          {
            case 1633903475:
              if (a4 <= 7)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 1846;
                  _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyAccessEntitlementName", buf, 0x12u);
                }
                exception = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)exception = &off_1E69A1B30;
                exception[2] = 561211770;
              }
              v219 = *((_QWORD *)this + 164);
              v220 = *(_QWORD *)(v219 + 400);
              v32 = *(std::__shared_weak_count **)(v219 + 408);
              *(_QWORD *)buf = v220;
              *(_QWORD *)&buf[8] = v32;
              v66 = a5;
              if (v32)
              {
                p_shared_owners = (unint64_t *)&v32->__shared_owners_;
                do
                  v222 = __ldxr(p_shared_owners);
                while (__stxr(v222 + 1, p_shared_owners));
              }
              v223 = *((unsigned int *)this + 331);
              if (a9)
                v224 = *((unsigned int *)a9 + 58);
              else
                v224 = 0;
              __p = (void *)0x676C6F6261636373;
              LODWORD(v526) = 0;
              *(_QWORD *)v523 = 0;
              LODWORD(v532) = 0;
              (*(void (**)(uint64_t, uint64_t, uint64_t, void **, _QWORD, _QWORD, uint64_t, double *, unsigned int *))(*(_QWORD *)v220 + 568))(v220, v223, v224, &__p, 0, 0, 8, &v532, v523);
              *(_QWORD *)a6 = *(_QWORD *)v523;
              if (!v32)
                goto LABEL_660;
              v364 = (unint64_t *)&v32->__shared_owners_;
              do
                v309 = __ldaxr(v364);
              while (__stlxr(v309 - 1, v364));
              break;
            case 1633906541:
              if (a4 <= 7)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 1764;
                  _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioEndPointDevicePropertyComposition", buf, 0x12u);
                }
                v483 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v483 = &off_1E69A1B30;
                v483[2] = 561211770;
              }
              v138 = *((_QWORD *)this + 164);
              v139 = *(_QWORD *)(v138 + 400);
              v32 = *(std::__shared_weak_count **)(v138 + 408);
              *(_QWORD *)buf = v139;
              *(_QWORD *)&buf[8] = v32;
              v66 = a5;
              if (v32)
              {
                v140 = (unint64_t *)&v32->__shared_owners_;
                do
                  v141 = __ldxr(v140);
                while (__stxr(v141 + 1, v140));
              }
              v142 = *((unsigned int *)this + 331);
              if (a9)
                v143 = *((unsigned int *)a9 + 58);
              else
                v143 = 0;
              __p = 0;
              v523[0] = 0;
              (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, unsigned int *, void **))(*(_QWORD *)v139 + 568))(v139, v142, v143, v18, 0, 0, 8, v523, &__p);
              *(_QWORD *)a6 = __p;
              if (!v32)
                goto LABEL_660;
              v327 = (unint64_t *)&v32->__shared_owners_;
              do
                v309 = __ldaxr(v327);
              while (__stlxr(v309 - 1, v327));
              break;
            case 1634169456:
              v21 = *((_QWORD *)this + 164);
              v22 = *(_QWORD *)(v21 + 400);
              v23 = *(std::__shared_weak_count **)(v21 + 408);
              *(_QWORD *)buf = v22;
              *(_QWORD *)&buf[8] = v23;
              if (v23)
              {
                v24 = (unint64_t *)&v23->__shared_owners_;
                do
                  v25 = __ldxr(v24);
                while (__stxr(v25 + 1, v24));
              }
              if (a9)
                v26 = *((unsigned int *)a9 + 58);
              else
                v26 = 0;
              (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, void *, int *, AudioObjectPropertyAddress *, unsigned int *, int *))(*(_QWORD *)v22 + 568))(v22, *((unsigned int *)this + 331), v26, v18, a7, a8, a4, a5, a6);
              if (v23)
              {
                v324 = (unint64_t *)&v23->__shared_owners_;
                do
                  v325 = __ldaxr(v324);
                while (__stlxr(v325 - 1, v324));
                if (!v325)
                {
                  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                  v326 = v23;
LABEL_513:
                  std::__shared_weak_count::__release_weak(v326);
                  return;
                }
              }
              return;
            default:
              goto LABEL_333;
          }
          goto LABEL_588;
        }
        if (mSelector != 1634429294)
        {
          if (mSelector != 1635087471)
          {
            if (mSelector == 1667330160)
            {
              if (a4 <= 7)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 1397;
                  _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyConfigurationApplication", buf, 0x12u);
                }
                v514 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v514 = &off_1E69A1B30;
                v514[2] = 561211770;
              }
              v73 = *((_QWORD *)this + 164);
              v74 = *(_QWORD *)(v73 + 400);
              v75 = *(std::__shared_weak_count **)(v73 + 408);
              *(_QWORD *)buf = v74;
              *(_QWORD *)&buf[8] = v75;
              if (v75)
              {
                v76 = (unint64_t *)&v75->__shared_owners_;
                do
                  v77 = __ldxr(v76);
                while (__stxr(v77 + 1, v76));
              }
              if (a9)
                v78 = *((unsigned int *)a9 + 58);
              else
                v78 = 0;
              v66 = a5;
              v404 = v18;
              v405 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v74 + 544))(v74, *((unsigned int *)this + 331), v78, v18);
              if (v75)
              {
                v406 = (unint64_t *)&v75->__shared_owners_;
                do
                  v407 = __ldaxr(v406);
                while (__stlxr(v407 - 1, v406));
                if (!v407)
                {
                  ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                  std::__shared_weak_count::__release_weak(v75);
                }
              }
              if (v405)
              {
                v408 = *((_QWORD *)this + 164);
                v409 = *(_QWORD *)(v408 + 400);
                v410 = *(_QWORD *)(v408 + 408);
                *(_QWORD *)buf = v409;
                *(_QWORD *)&buf[8] = v410;
                if (v410)
                {
                  v411 = (unint64_t *)(v410 + 8);
                  do
                    v412 = __ldxr(v411);
                  while (__stxr(v412 + 1, v411));
                }
                v413 = *((unsigned int *)this + 331);
                if (a9)
                  v414 = *((unsigned int *)a9 + 58);
                else
                  v414 = 0;
                __p = 0;
                v523[0] = 0;
                (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, unsigned int *, void **))(*(_QWORD *)v409 + 568))(v409, v413, v414, v404, 0, 0, 8, v523, &__p);
                v458 = __p;
LABEL_654:
                *(_QWORD *)a6 = v458;
LABEL_659:
                std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
                goto LABEL_660;
              }
              *(_QWORD *)a6 = CFRetain(CFSTR("com.apple.audio.AudioMIDISetup"));
              goto LABEL_660;
            }
            goto LABEL_333;
          }
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1862;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyAllowsAutoRoute", buf, 0x12u);
            }
            v490 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v490 = &off_1E69A1B30;
            v490[2] = 561211770;
          }
          v173 = *((_QWORD *)this + 164);
          v174 = *(_QWORD *)(v173 + 400);
          v39 = *(std::__shared_weak_count **)(v173 + 408);
          *(_QWORD *)buf = v174;
          *(_QWORD *)&buf[8] = v39;
          v66 = a5;
          if (v39)
          {
            v175 = (unint64_t *)&v39->__shared_owners_;
            do
              v176 = __ldxr(v175);
            while (__stxr(v176 + 1, v175));
          }
          v177 = *((unsigned int *)this + 331);
          if (a9)
            v178 = *((unsigned int *)a9 + 58);
          else
            v178 = 0;
          LODWORD(__p) = 0;
          v523[0] = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, unsigned int *, void **))(*(_QWORD *)v174 + 568))(v174, v177, v178, v18, 0, 0, 4, v523, &__p);
          *a6 = (int)__p;
          if (v39)
          {
            v341 = (unint64_t *)&v39->__shared_owners_;
            do
              v337 = __ldaxr(v341);
            while (__stlxr(v337 - 1, v341));
            goto LABEL_599;
          }
LABEL_668:
          v461 = 4;
          goto LABEL_669;
        }
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1428;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyRelatedDevices", buf, 0x12u);
          }
          v502 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v502 = &off_1E69A1B30;
          v502[2] = 561211770;
        }
        v260 = *((_QWORD *)this + 164);
        v261 = *(_QWORD *)(v260 + 400);
        v262 = *(std::__shared_weak_count **)(v260 + 408);
        *(_QWORD *)buf = v261;
        *(_QWORD *)&buf[8] = v262;
        if (v262)
        {
          v263 = (unint64_t *)&v262->__shared_owners_;
          do
            v264 = __ldxr(v263);
          while (__stxr(v264 + 1, v263));
        }
        if (a9)
          v265 = *((unsigned int *)a9 + 58);
        else
          v265 = 0;
        v370 = v18;
        v371 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v261
                                                                                                 + 544))(v261, *((unsigned int *)this + 331), v265, v18);
        if (v262)
        {
          v372 = (unint64_t *)&v262->__shared_owners_;
          do
            v373 = __ldaxr(v372);
          while (__stlxr(v373 - 1, v372));
          if (!v373)
          {
            ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
            std::__shared_weak_count::__release_weak(v262);
          }
        }
        if (v371)
        {
          v374 = *((_QWORD *)this + 164);
          v375 = *(_QWORD *)(v374 + 400);
          v376 = *(_QWORD *)(v374 + 408);
          *(_QWORD *)buf = v375;
          *(_QWORD *)&buf[8] = v376;
          if (v376)
          {
            v377 = (unint64_t *)(v376 + 8);
            do
              v378 = __ldxr(v377);
            while (__stxr(v378 + 1, v377));
          }
          if (a9)
            v379 = *((unsigned int *)a9 + 58);
          else
            v379 = 0;
          (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, void *, int *, AudioObjectPropertyAddress *, unsigned int *, int *))(*(_QWORD *)v375 + 568))(v375, *((unsigned int *)this + 331), v379, v370, a7, a8, a4, a5, a6);
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          v452 = *a5;
          if (v452 >= 4)
          {
            v453 = v452 >> 2;
            do
            {
              v454 = HALS_PlugIn::CopyObjectByUCID(*((HALS_PlugIn **)this + 164), *a6);
              if (v454)
                v456 = *((_DWORD *)v454 + 4);
              else
                v456 = 0;
              *a6 = v456;
              HALS_ObjectMap::ReleaseObject(v454, v455);
              ++a6;
              --v453;
            }
            while (v453);
          }
          return;
        }
        *a6 = *((_DWORD *)this + 4);
        goto LABEL_73;
      }
      if (mSelector > 1668510817)
      {
        if (mSelector == 1668510818)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1557;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyClockIsStable", buf, 0x12u);
            }
            v505 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v505 = &off_1E69A1B30;
            v505[2] = 561211770;
          }
          v279 = *((_QWORD *)this + 164);
          v280 = *(_QWORD *)(v279 + 400);
          v39 = *(std::__shared_weak_count **)(v279 + 408);
          *(_QWORD *)buf = v280;
          *(_QWORD *)&buf[8] = v39;
          v66 = a5;
          if (v39)
          {
            v281 = (unint64_t *)&v39->__shared_owners_;
            do
              v282 = __ldxr(v281);
            while (__stxr(v282 + 1, v281));
          }
          v283 = *((unsigned int *)this + 331);
          if (a9)
            v284 = *((unsigned int *)a9 + 58);
          else
            v284 = 0;
          LODWORD(__p) = 0;
          v523[0] = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, unsigned int *, void **))(*(_QWORD *)v280 + 568))(v280, v283, v284, v18, 0, 0, 4, v523, &__p);
          *a6 = (int)__p;
          if (!v39)
            goto LABEL_668;
          v391 = (unint64_t *)&v39->__shared_owners_;
          do
            v337 = __ldaxr(v391);
          while (__stlxr(v337 - 1, v391));
          goto LABEL_599;
        }
        if (mSelector == 1668641652)
        {
          v193 = a4 / 0xC;
          if (*((_DWORD *)this + 334) < a4 / 0xC)
            v193 = *((_DWORD *)this + 334);
          if (v193)
          {
            v194 = 0;
            v195 = 0;
            do
            {
              if (v195 < *((unsigned int *)this + 334))
              {
                v196 = &a6[v194];
                v197 = (uint64_t *)(*((_QWORD *)this + 166) + v194 * 4);
                v198 = *v197;
                v196[2] = *((_DWORD *)v197 + 2);
                *(_QWORD *)v196 = v198;
              }
              ++v195;
              v194 += 3;
            }
            while (3 * v193 != v194);
          }
          *a5 = 12 * v193;
          return;
        }
        if (mSelector != 1684107364)
          goto LABEL_333;
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1803;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyAvailablePastData", buf, 0x12u);
          }
          v518 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v518 = &off_1E69A1B30;
          v518[2] = 561211770;
        }
        v108 = *((_QWORD *)this + 164);
        v109 = *(_QWORD *)(v108 + 400);
        v39 = *(std::__shared_weak_count **)(v108 + 408);
        *(_QWORD *)buf = v109;
        *(_QWORD *)&buf[8] = v39;
        if (v39)
        {
          v110 = (unint64_t *)&v39->__shared_owners_;
          do
            v111 = __ldxr(v110);
          while (__stxr(v111 + 1, v110));
        }
        v112 = *((unsigned int *)this + 331);
        if (a9)
          v113 = *((unsigned int *)a9 + 58);
        else
          v113 = 0;
        v66 = a5;
        LODWORD(__p) = 0;
        v523[0] = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, unsigned int *, void **))(*(_QWORD *)v109 + 568))(v109, v112, v113, v18, 0, 0, 4, v523, &__p);
        *a6 = (int)__p;
        if (!v39)
          goto LABEL_668;
        v427 = (unint64_t *)&v39->__shared_owners_;
        do
          v337 = __ldaxr(v427);
        while (__stlxr(v337 - 1, v427));
      }
      else
      {
        if (mSelector == 1667658618)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1830;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyCalculateBufferFrameSize", buf, 0x12u);
            }
            v498 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v498 = &off_1E69A1B30;
            v498[2] = 561211770;
          }
          v242 = *((_QWORD *)this + 164);
          v243 = *(_QWORD *)(v242 + 400);
          v39 = *(std::__shared_weak_count **)(v242 + 408);
          *(_QWORD *)buf = v243;
          *(_QWORD *)&buf[8] = v39;
          if (v39)
          {
            v244 = (unint64_t *)&v39->__shared_owners_;
            do
              v245 = __ldxr(v244);
            while (__stxr(v245 + 1, v244));
          }
          v246 = *((unsigned int *)this + 331);
          if (a9)
            v247 = *((unsigned int *)a9 + 58);
          else
            v247 = 0;
          LODWORD(__p) = 0;
          v523[0] = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, void *, int *, uint64_t, unsigned int *, void **))(*(_QWORD *)v243 + 568))(v243, v246, v247, v18, a7, a8, 4, v523, &__p);
          *a6 = (int)__p;
          v66 = a5;
          if (!v39)
            goto LABEL_668;
          v367 = (unint64_t *)&v39->__shared_owners_;
          do
            v337 = __ldaxr(v367);
          while (__stlxr(v337 - 1, v367));
          goto LABEL_599;
        }
        if (mSelector == 1668049764)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1459;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyClockDomain", buf, 0x12u);
            }
            v488 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v488 = &off_1E69A1B30;
            v488[2] = 561211770;
          }
          v160 = *((_QWORD *)this + 164);
          v161 = *(_QWORD *)(v160 + 400);
          v39 = *(std::__shared_weak_count **)(v160 + 408);
          *(_QWORD *)buf = v161;
          *(_QWORD *)&buf[8] = v39;
          v66 = a5;
          if (v39)
          {
            v162 = (unint64_t *)&v39->__shared_owners_;
            do
              v163 = __ldxr(v162);
            while (__stxr(v163 + 1, v162));
          }
          v164 = *((unsigned int *)this + 331);
          if (a9)
            v165 = *((unsigned int *)a9 + 58);
          else
            v165 = 0;
          LODWORD(__p) = 0;
          v523[0] = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, unsigned int *, void **))(*(_QWORD *)v161 + 568))(v161, v164, v165, v18, 0, 0, 4, v523, &__p);
          *a6 = (int)__p;
          if (!v39)
            goto LABEL_668;
          v336 = (unint64_t *)&v39->__shared_owners_;
          do
            v337 = __ldaxr(v336);
          while (__stlxr(v337 - 1, v336));
          goto LABEL_599;
        }
        if (mSelector != 1668050795)
          goto LABEL_333;
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1549;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyClockAlgorithm", buf, 0x12u);
          }
          v511 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v511 = &off_1E69A1B30;
          v511[2] = 561211770;
        }
        v50 = *((_QWORD *)this + 164);
        v51 = *(_QWORD *)(v50 + 400);
        v39 = *(std::__shared_weak_count **)(v50 + 408);
        *(_QWORD *)buf = v51;
        *(_QWORD *)&buf[8] = v39;
        if (v39)
        {
          v52 = (unint64_t *)&v39->__shared_owners_;
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
        }
        v54 = *((unsigned int *)this + 331);
        if (a9)
          v55 = *((unsigned int *)a9 + 58);
        else
          v55 = 0;
        v66 = a5;
        LODWORD(__p) = 0;
        v523[0] = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, unsigned int *, void **))(*(_QWORD *)v51 + 568))(v51, v54, v55, v18, 0, 0, 4, v523, &__p);
        *a6 = (int)__p;
        if (!v39)
          goto LABEL_668;
        v398 = (unint64_t *)&v39->__shared_owners_;
        do
          v337 = __ldaxr(v398);
        while (__stlxr(v337 - 1, v398));
      }
LABEL_599:
      if (!v337)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
      goto LABEL_668;
    }
    if (mSelector > 1685287011)
    {
      if (mSelector <= 1751412336)
      {
        if (mSelector == 1685287012)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1795;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertySupportsPastData", buf, 0x12u);
            }
            v500 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v500 = &off_1E69A1B30;
            v500[2] = 561211770;
          }
          v254 = *((_QWORD *)this + 164);
          v255 = *(_QWORD *)(v254 + 400);
          v39 = *(std::__shared_weak_count **)(v254 + 408);
          *(_QWORD *)buf = v255;
          *(_QWORD *)&buf[8] = v39;
          v66 = a5;
          if (v39)
          {
            v256 = (unint64_t *)&v39->__shared_owners_;
            do
              v257 = __ldxr(v256);
            while (__stxr(v257 + 1, v256));
          }
          v258 = *((unsigned int *)this + 331);
          if (a9)
            v259 = *((unsigned int *)a9 + 58);
          else
            v259 = 0;
          LODWORD(__p) = 0;
          v523[0] = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, unsigned int *, void **))(*(_QWORD *)v255 + 568))(v255, v258, v259, v18, 0, 0, 4, v523, &__p);
          *a6 = (int)__p;
          if (!v39)
            goto LABEL_668;
          v369 = (unint64_t *)&v39->__shared_owners_;
          do
            v337 = __ldaxr(v369);
          while (__stlxr(v337 - 1, v369));
          goto LABEL_599;
        }
        if (mSelector != 1735354734 && mSelector != 1735356005)
          goto LABEL_333;
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1468;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyDeviceIsRunning", buf, 0x12u);
          }
          v479 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v479 = &off_1E69A1B30;
          v479[2] = 561211770;
        }
        *a6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 177) + 672))(*((_QWORD *)this + 177));
LABEL_73:
        v63 = 4;
LABEL_293:
        *a5 = v63;
        return;
      }
      if (mSelector == 1751412337 || mSelector == 1751737454)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1723;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyIsHidden", buf, 0x12u);
          }
          v482 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v482 = &off_1E69A1B30;
          v482[2] = 561211770;
        }
        __p = *(void **)&a3->mSelector;
        LODWORD(v526) = a3->mElement;
        LODWORD(__p) = 1751737454;
        v66 = a5;
        if (!(*(unsigned int (**)(HALS_PlugInDevice *, const BOOL *, void **, HALS_Client *))(*(_QWORD *)this + 88))(this, a2, &__p, a9))goto LABEL_668;
        v132 = *((_QWORD *)this + 164);
        v133 = *(_QWORD *)(v132 + 400);
        v39 = *(std::__shared_weak_count **)(v132 + 408);
        *(_QWORD *)buf = v133;
        *(_QWORD *)&buf[8] = v39;
        if (v39)
        {
          v134 = (unint64_t *)&v39->__shared_owners_;
          do
            v135 = __ldxr(v134);
          while (__stxr(v135 + 1, v134));
        }
        v136 = *((unsigned int *)this + 331);
        v137 = a9 ? *((unsigned int *)a9 + 58) : 0;
        v523[0] = 0;
        LODWORD(v532) = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, void **, _QWORD, _QWORD, uint64_t, double *, unsigned int *))(*(_QWORD *)v133 + 568))(v133, v136, v137, &__p, 0, 0, 4, &v532, v523);
        *a6 = v523[0];
        if (!v39)
          goto LABEL_668;
        v430 = (unint64_t *)&v39->__shared_owners_;
        do
          v337 = __ldaxr(v430);
        while (__stlxr(v337 - 1, v430));
        goto LABEL_599;
      }
      if (mSelector != 1768124270)
        goto LABEL_333;
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1748;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyIcon", buf, 0x12u);
        }
        v519 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v519 = &off_1E69A1B30;
        v519[2] = 561211770;
      }
      v120 = *((_QWORD *)this + 164);
      v121 = *(_QWORD *)(v120 + 400);
      v32 = *(std::__shared_weak_count **)(v120 + 408);
      *(_QWORD *)buf = v121;
      *(_QWORD *)&buf[8] = v32;
      if (v32)
      {
        v122 = (unint64_t *)&v32->__shared_owners_;
        do
          v123 = __ldxr(v122);
        while (__stxr(v123 + 1, v122));
      }
      v124 = *((unsigned int *)this + 331);
      if (a9)
        v125 = *((unsigned int *)a9 + 58);
      else
        v125 = 0;
      v66 = a5;
      __p = 0;
      v523[0] = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, unsigned int *, void **))(*(_QWORD *)v121 + 568))(v121, v124, v125, v18, 0, 0, 8, v523, &__p);
      *(_QWORD *)a6 = __p;
      if (!v32)
        goto LABEL_660;
      v428 = (unint64_t *)&v32->__shared_owners_;
      do
        v309 = __ldaxr(v428);
      while (__stlxr(v309 - 1, v428));
    }
    else
    {
      if (mSelector > 1685087595)
      {
        if (mSelector == 1685087596)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1822;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyEnableListening", buf, 0x12u);
            }
            v503 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v503 = &off_1E69A1B30;
            v503[2] = 561211770;
          }
          v266 = *((_QWORD *)this + 164);
          v267 = *(_QWORD *)(v266 + 400);
          v39 = *(std::__shared_weak_count **)(v266 + 408);
          *(_QWORD *)buf = v267;
          *(_QWORD *)&buf[8] = v39;
          v66 = a5;
          if (v39)
          {
            v268 = (unint64_t *)&v39->__shared_owners_;
            do
              v269 = __ldxr(v268);
            while (__stxr(v269 + 1, v268));
          }
          v270 = *((unsigned int *)this + 331);
          if (a9)
            v271 = *((unsigned int *)a9 + 58);
          else
            v271 = 0;
          LODWORD(__p) = 0;
          v523[0] = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, unsigned int *, void **))(*(_QWORD *)v267 + 568))(v267, v270, v271, v18, 0, 0, 4, v523, &__p);
          *a6 = (int)__p;
          if (!v39)
            goto LABEL_668;
          v380 = (unint64_t *)&v39->__shared_owners_;
          do
            v337 = __ldaxr(v380);
          while (__stlxr(v337 - 1, v380));
          goto LABEL_599;
        }
        if (mSelector != 1685222501)
        {
          if (mSelector == 1685278578)
          {
            if (a4 <= 7)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1899;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyDSPOffloadRequested", buf, 0x12u);
              }
              v516 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v516 = &off_1E69A1B30;
              v516[2] = 561211770;
            }
            v85 = *((_QWORD *)this + 164);
            v86 = *(_QWORD *)(v85 + 400);
            v87 = *(std::__shared_weak_count **)(v85 + 408);
            *(_QWORD *)buf = v86;
            *(_QWORD *)&buf[8] = v87;
            if (v87)
            {
              v88 = (unint64_t *)&v87->__shared_owners_;
              do
                v89 = __ldxr(v88);
              while (__stxr(v89 + 1, v88));
            }
            v90 = *((unsigned int *)this + 331);
            if (a9)
              v91 = *((unsigned int *)a9 + 58);
            else
              v91 = 0;
            v66 = a5;
            __p = *(void **)&v18->mSelector;
            v416 = v18;
            LODWORD(v526) = v18->mElement;
            v417 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v86 + 544))(v86, v90, v91, &__p);
            if (v87)
            {
              v418 = (unint64_t *)&v87->__shared_owners_;
              do
                v419 = __ldaxr(v418);
              while (__stlxr(v419 - 1, v418));
              if (!v419)
              {
                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                std::__shared_weak_count::__release_weak(v87);
              }
            }
            if (v417)
            {
              v420 = *((_QWORD *)this + 164);
              v421 = *(_QWORD *)(v420 + 400);
              v422 = *(_QWORD *)(v420 + 408);
              *(_QWORD *)buf = v421;
              *(_QWORD *)&buf[8] = v422;
              if (v422)
              {
                v423 = (unint64_t *)(v422 + 8);
                do
                  v424 = __ldxr(v423);
                while (__stxr(v424 + 1, v423));
              }
              v425 = *((unsigned int *)this + 331);
              if (a9)
                v426 = *((unsigned int *)a9 + 58);
              else
                v426 = 0;
              __p = *(void **)&v416->mSelector;
              LODWORD(v526) = v416->mElement;
              *(_QWORD *)v523 = 0;
              LODWORD(v532) = 0;
              (*(void (**)(uint64_t, uint64_t, uint64_t, void **, _QWORD, _QWORD, uint64_t, double *, unsigned int *))(*(_QWORD *)v421 + 568))(v421, v425, v426, &__p, 0, 0, 8, &v532, v523);
              v458 = *(void **)v523;
              goto LABEL_654;
            }
            *(_QWORD *)a6 = 0;
LABEL_660:
            v461 = 8;
            goto LABEL_669;
          }
LABEL_333:
          v307 = v18;
          if (HALS_Device::HasProperty((HALS_Device ***)this, v17, v18, (AudioObjectPropertyAddress *)a9))
          {
            HALS_Device::GetPropertyData(this, a2, v307, a4, a5, (unsigned int *)a6, a7, a8, a9);
            return;
          }
          if (!(*(unsigned int (**)(char *, _QWORD))(*((_QWORD *)this + 163) + 24))((char *)this + 1304, v307->mSelector))return;
          v310 = *((_QWORD *)this + 164);
          v311 = *(_QWORD *)(v310 + 400);
          v312 = *(_QWORD *)(v310 + 408);
          *(_QWORD *)buf = v311;
          *(_QWORD *)&buf[8] = v312;
          if (v312)
          {
            v313 = (unint64_t *)(v312 + 8);
            do
              v314 = __ldxr(v313);
            while (__stxr(v314 + 1, v313));
          }
          if (a9)
            v315 = *((unsigned int *)a9 + 58);
          else
            v315 = 0;
          (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, void *, int *, AudioObjectPropertyAddress *, unsigned int *, int *))(*(_QWORD *)v311 + 568))(v311, *((unsigned int *)this + 331), v315, v307, a7, a8, a4, a5, a6);
LABEL_682:
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          return;
        }
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1924;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyWantsDisplayRouting", buf, 0x12u);
          }
          v491 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v491 = &off_1E69A1B30;
          v491[2] = 561211770;
        }
        v179 = *((_QWORD *)this + 164);
        v180 = *(_QWORD *)(v179 + 400);
        v39 = *(std::__shared_weak_count **)(v179 + 408);
        *(_QWORD *)buf = v180;
        *(_QWORD *)&buf[8] = v39;
        v66 = a5;
        if (v39)
        {
          v181 = (unint64_t *)&v39->__shared_owners_;
          do
            v182 = __ldxr(v181);
          while (__stxr(v182 + 1, v181));
        }
        v183 = *((unsigned int *)this + 331);
        if (a9)
          v184 = *((unsigned int *)a9 + 58);
        else
          v184 = 0;
        LODWORD(__p) = 0;
        v523[0] = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, unsigned int *, void **))(*(_QWORD *)v180 + 568))(v180, v183, v184, v18, 0, 0, 4, v523, &__p);
        *a6 = (int)__p;
        if (!v39)
          goto LABEL_668;
        v342 = (unint64_t *)&v39->__shared_owners_;
        do
          v337 = __ldaxr(v342);
        while (__stlxr(v337 - 1, v342));
        goto LABEL_599;
      }
      if (mSelector != 1684301171)
      {
        if (mSelector != 1684434036)
        {
          if (mSelector != 1684893796)
            goto LABEL_333;
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1814;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyMaximumPastData", buf, 0x12u);
            }
            v509 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v509 = &off_1E69A1B30;
            v509[2] = 561211770;
          }
          v37 = *((_QWORD *)this + 164);
          v38 = *(_QWORD *)(v37 + 400);
          v39 = *(std::__shared_weak_count **)(v37 + 408);
          *(_QWORD *)buf = v38;
          *(_QWORD *)&buf[8] = v39;
          if (v39)
          {
            v40 = (unint64_t *)&v39->__shared_owners_;
            do
              v41 = __ldxr(v40);
            while (__stxr(v41 + 1, v40));
          }
          v42 = *((unsigned int *)this + 331);
          if (a9)
            v43 = *((unsigned int *)a9 + 58);
          else
            v43 = 0;
          v66 = a5;
          LODWORD(__p) = 0;
          v523[0] = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, unsigned int *, void **))(*(_QWORD *)v38 + 568))(v38, v42, v43, v18, 0, 0, 4, v523, &__p);
          *a6 = (int)__p;
          if (!v39)
            goto LABEL_668;
          v396 = (unint64_t *)&v39->__shared_owners_;
          do
            v337 = __ldaxr(v396);
          while (__stlxr(v337 - 1, v396));
          goto LABEL_599;
        }
        v150 = a4 > 3;
        v151 = a5;
        if (!v150)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1476;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyDeviceCanBeDefaultDevice", buf, 0x12u);
          }
          v486 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v486 = &off_1E69A1B30;
          v486[2] = 561211770;
        }
        v152 = a3;
        v153 = (*(uint64_t (**)(HALS_PlugInDevice *, BOOL, HALS_Client *))(*(_QWORD *)this + 536))(this, mScope == 1768845428, a9);
        *a6 = v153 != 0;
        if (v153)
        {
          v154 = *((_QWORD *)this + 164);
          v155 = *(_QWORD *)(v154 + 400);
          v156 = *(_QWORD *)(v154 + 408);
          *(_QWORD *)buf = v155;
          *(_QWORD *)&buf[8] = v156;
          if (v156)
          {
            v157 = (unint64_t *)(v156 + 8);
            do
              v158 = __ldxr(v157);
            while (__stxr(v158 + 1, v157));
          }
          if (a9)
            v159 = *((unsigned int *)a9 + 58);
          else
            v159 = 0;
          v439 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v155 + 544))(v155, *((unsigned int *)this + 331), v159, a3);
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (v439)
          {
            v440 = *((_QWORD *)this + 164);
            v441 = *(_QWORD *)(v440 + 400);
            v442 = *(_QWORD *)(v440 + 408);
            *(_QWORD *)buf = v441;
            *(_QWORD *)&buf[8] = v442;
            if (v442)
            {
              v443 = (unint64_t *)(v442 + 8);
              do
                v444 = __ldxr(v443);
              while (__stxr(v444 + 1, v443));
            }
            v445 = *((unsigned int *)this + 331);
            if (a9)
              v446 = *((unsigned int *)a9 + 58);
            else
              v446 = 0;
            LODWORD(__p) = 0;
            v523[0] = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t, const AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, unsigned int *, void **))(*(_QWORD *)v441 + 568))(v441, v445, v446, v152, 0, 0, 4, v523, &__p);
            *a6 = (int)__p;
            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          }
        }
LABEL_663:
        *v151 = 4;
        return;
      }
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1838;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyDeviceDescription", buf, 0x12u);
        }
        v497 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v497 = &off_1E69A1B30;
        v497[2] = 561211770;
      }
      v231 = *((_QWORD *)this + 164);
      v232 = *(_QWORD *)(v231 + 400);
      v32 = *(std::__shared_weak_count **)(v231 + 408);
      *(_QWORD *)buf = v232;
      *(_QWORD *)&buf[8] = v32;
      v66 = a5;
      if (v32)
      {
        v233 = (unint64_t *)&v32->__shared_owners_;
        do
          v234 = __ldxr(v233);
        while (__stxr(v234 + 1, v233));
      }
      v235 = *((unsigned int *)this + 331);
      if (a9)
        v236 = *((unsigned int *)a9 + 58);
      else
        v236 = 0;
      __p = 0;
      v523[0] = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, unsigned int *, void **))(*(_QWORD *)v232 + 568))(v232, v235, v236, v18, 0, 0, 8, v523, &__p);
      *(_QWORD *)a6 = __p;
      if (!v32)
        goto LABEL_660;
      v366 = (unint64_t *)&v32->__shared_owners_;
      do
        v309 = __ldaxr(v366);
      while (__stlxr(v309 - 1, v366));
    }
    goto LABEL_588;
  }
  v27 = v16;
  v28 = (char)v17;
  v29 = *(double *)&v16;
  if (mSelector <= 1853059618)
  {
    if (mSelector > 1819111267)
    {
      if (mSelector > 1819634019)
      {
        if (mSelector == 1819634020)
        {
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1854;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyLegacyUIDList", buf, 0x12u);
            }
            v506 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v506 = &off_1E69A1B30;
            v506[2] = 561211770;
          }
          v285 = *((_QWORD *)this + 164);
          v286 = *(_QWORD *)(v285 + 400);
          v39 = *(std::__shared_weak_count **)(v285 + 408);
          *(_QWORD *)buf = v286;
          *(_QWORD *)&buf[8] = v39;
          v66 = a5;
          if (v39)
          {
            v287 = (unint64_t *)&v39->__shared_owners_;
            do
              v288 = __ldxr(v287);
            while (__stxr(v288 + 1, v287));
          }
          v289 = *((unsigned int *)this + 331);
          if (a9)
            v290 = *((unsigned int *)a9 + 58);
          else
            v290 = 0;
          __p = (void *)0x676C6F626C756964;
          LODWORD(v526) = 0;
          *(_QWORD *)v523 = 0;
          LODWORD(v532) = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, void **, _QWORD, _QWORD, uint64_t, double *, unsigned int *))(*(_QWORD *)v286 + 568))(v286, v289, v290, &__p, 0, 0, 8, &v532, v523);
          *(_QWORD *)a6 = *(_QWORD *)v523;
          if (!v39)
            goto LABEL_668;
          v392 = (unint64_t *)&v39->__shared_owners_;
          do
            v337 = __ldaxr(v392);
          while (__stlxr(v337 - 1, v392));
          goto LABEL_599;
        }
        if (mSelector == 1836411236)
        {
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1412;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyModelUID", buf, 0x12u);
            }
            v493 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v493 = &off_1E69A1B30;
            v493[2] = 561211770;
          }
          v199 = *((_QWORD *)this + 164);
          v200 = *(_QWORD *)(v199 + 400);
          v32 = *(std::__shared_weak_count **)(v199 + 408);
          *(_QWORD *)buf = v200;
          *(_QWORD *)&buf[8] = v32;
          v66 = a5;
          if (v32)
          {
            v201 = (unint64_t *)&v32->__shared_owners_;
            do
              v202 = __ldxr(v201);
            while (__stxr(v202 + 1, v201));
          }
          v203 = *((unsigned int *)this + 331);
          if (a9)
            v204 = *((unsigned int *)a9 + 58);
          else
            v204 = 0;
          __p = 0;
          v523[0] = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, unsigned int *, void **))(*(_QWORD *)v200 + 568))(v200, v203, v204, v18, 0, 0, 8, v523, &__p);
          *(_QWORD *)a6 = __p;
          if (!v32)
            goto LABEL_660;
          v353 = (unint64_t *)&v32->__shared_owners_;
          do
            v309 = __ldaxr(v353);
          while (__stlxr(v309 - 1, v353));
          goto LABEL_588;
        }
        if (mSelector != 1851878764)
          goto LABEL_333;
      }
      else
      {
        if (mSelector == 1819111268)
        {
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1352;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioObjectPropertyModelName", buf, 0x12u);
            }
            v499 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v499 = &off_1E69A1B30;
            v499[2] = 561211770;
          }
          v248 = *((_QWORD *)this + 164);
          v249 = *(_QWORD *)(v248 + 400);
          v32 = *(std::__shared_weak_count **)(v248 + 408);
          *(_QWORD *)buf = v249;
          *(_QWORD *)&buf[8] = v32;
          v66 = a5;
          if (v32)
          {
            v250 = (unint64_t *)&v32->__shared_owners_;
            do
              v251 = __ldxr(v250);
            while (__stxr(v251 + 1, v250));
          }
          v252 = *((unsigned int *)this + 331);
          if (a9)
            v253 = *((unsigned int *)a9 + 58);
          else
            v253 = 0;
          __p = 0;
          v523[0] = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, unsigned int *, void **))(*(_QWORD *)v249 + 568))(v249, v252, v253, v18, 0, 0, 8, v523, &__p);
          *(_QWORD *)a6 = __p;
          if (!v32)
            goto LABEL_660;
          v368 = (unint64_t *)&v32->__shared_owners_;
          do
            v309 = __ldaxr(v368);
          while (__stlxr(v309 - 1, v368));
          goto LABEL_588;
        }
        if (mSelector != 1819173229)
        {
          if (mSelector != 1819569763)
            goto LABEL_333;
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1500;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyLatency", buf, 0x12u);
            }
            v512 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v512 = &off_1E69A1B30;
            v512[2] = 561211770;
          }
          v56 = *((_QWORD *)this + 164);
          v57 = *(_QWORD *)(v56 + 400);
          v58 = *(std::__shared_weak_count **)(v56 + 408);
          *(_QWORD *)buf = v57;
          *(_QWORD *)&buf[8] = v58;
          if (v58)
          {
            v59 = (unint64_t *)&v58->__shared_owners_;
            do
              v60 = __ldxr(v59);
            while (__stxr(v60 + 1, v59));
          }
          v61 = *((unsigned int *)this + 331);
          if (a9)
            v62 = *((unsigned int *)a9 + 58);
          else
            v62 = 0;
          v151 = a5;
          v399 = a6;
          LODWORD(__p) = 0;
          v523[0] = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, unsigned int *, void **))(*(_QWORD *)v57 + 568))(v57, v61, v62, v18, 0, 0, 4, v523, &__p);
          v400 = __p;
          if (v58)
          {
            v401 = (unint64_t *)&v58->__shared_owners_;
            do
              v402 = __ldaxr(v401);
            while (__stlxr(v402 - 1, v401));
            if (!v402)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
          if ((*(unsigned int (**)(HALS_PlugInDevice *))(*(_QWORD *)this + 440))(this))
            v400 += HALS_Device::GetStreamDSPLatency(this, (const BOOL *)(mScope == 1768845428));
          if (v28)
            v400 = (v29
                                / (*(double (**)(HALS_PlugInDevice *))(*(_QWORD *)this + 264))(this)
                                * (double)v400);
          if (a9)
          {
            DSPLatencyForClient = HALS_Device::GetDSPLatencyForClient(this, mScope == 1768845428, a9);
            if ((DSPLatencyForClient & 0xFF00000000) != 0)
              v400 += DSPLatencyForClient;
          }
          *v399 = v400;
          goto LABEL_663;
        }
      }
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1344;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioObjectPropertyName", buf, 0x12u);
        }
        v480 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v480 = &off_1E69A1B30;
        v480[2] = 561211770;
      }
      v114 = *((_QWORD *)this + 164);
      v115 = *(_QWORD *)(v114 + 400);
      v32 = *(std::__shared_weak_count **)(v114 + 408);
      *(_QWORD *)buf = v115;
      *(_QWORD *)&buf[8] = v32;
      if (v32)
      {
        v116 = (unint64_t *)&v32->__shared_owners_;
        do
          v117 = __ldxr(v116);
        while (__stxr(v117 + 1, v116));
      }
      v118 = *((unsigned int *)this + 331);
      if (a9)
        v119 = *((unsigned int *)a9 + 58);
      else
        v119 = 0;
      v66 = a5;
      __p = (void *)0x676C6F626C6E616DLL;
      LODWORD(v526) = 0;
      *(_QWORD *)v523 = 0;
      LODWORD(v532) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, void **, _QWORD, _QWORD, uint64_t, double *, unsigned int *))(*(_QWORD *)v115 + 568))(v115, v118, v119, &__p, 0, 0, 8, &v532, v523);
      *(_QWORD *)a6 = *(_QWORD *)v523;
      if (!v32)
        goto LABEL_660;
      v308 = (unint64_t *)&v32->__shared_owners_;
      do
        v309 = __ldaxr(v308);
      while (__stlxr(v309 - 1, v308));
      goto LABEL_588;
    }
    if (mSelector > 1818850144)
    {
      if (mSelector == 1818850145 || mSelector == 1818850162)
      {
        if (a4 <= 0xB)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1787;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioObjectPropertyListenerAdded or kAudioObjectPropertyListenerRemoved", buf, 0x12u);
          }
          v481 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v481 = &off_1E69A1B30;
          v481[2] = 561211770;
        }
        a6[2] = 0;
        *(_QWORD *)a6 = 0;
        v63 = 12;
        goto LABEL_293;
      }
      if (mSelector != 1819107691)
        goto LABEL_333;
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1360;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioObjectPropertyManufacturer", buf, 0x12u);
        }
        v515 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v515 = &off_1E69A1B30;
        v515[2] = 561211770;
      }
      v79 = *((_QWORD *)this + 164);
      v80 = *(_QWORD *)(v79 + 400);
      v32 = *(std::__shared_weak_count **)(v79 + 408);
      *(_QWORD *)buf = v80;
      *(_QWORD *)&buf[8] = v32;
      if (v32)
      {
        v81 = (unint64_t *)&v32->__shared_owners_;
        do
          v82 = __ldxr(v81);
        while (__stxr(v82 + 1, v81));
      }
      v83 = *((unsigned int *)this + 331);
      if (a9)
        v84 = *((unsigned int *)a9 + 58);
      else
        v84 = 0;
      v66 = a5;
      __p = 0;
      v523[0] = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, unsigned int *, void **))(*(_QWORD *)v80 + 568))(v80, v83, v84, v18, 0, 0, 8, v523, &__p);
      *(_QWORD *)a6 = __p;
      if (!v32)
        goto LABEL_660;
      v415 = (unint64_t *)&v32->__shared_owners_;
      do
        v309 = __ldaxr(v415);
      while (__stlxr(v309 - 1, v415));
    }
    else
    {
      switch(mSelector)
      {
        case 1768777573:
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1756;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyRawImageData", buf, 0x12u);
            }
            v496 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v496 = &off_1E69A1B30;
            v496[2] = 561211770;
          }
          v225 = *((_QWORD *)this + 164);
          v226 = *(_QWORD *)(v225 + 400);
          v32 = *(std::__shared_weak_count **)(v225 + 408);
          *(_QWORD *)buf = v226;
          *(_QWORD *)&buf[8] = v32;
          v66 = a5;
          if (v32)
          {
            v227 = (unint64_t *)&v32->__shared_owners_;
            do
              v228 = __ldxr(v227);
            while (__stxr(v228 + 1, v227));
          }
          v229 = *((unsigned int *)this + 331);
          if (a9)
            v230 = *((unsigned int *)a9 + 58);
          else
            v230 = 0;
          __p = 0;
          v523[0] = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, unsigned int *, void **))(*(_QWORD *)v226 + 568))(v226, v229, v230, v18, 0, 0, 8, v523, &__p);
          *(_QWORD *)a6 = __p;
          if (!v32)
            goto LABEL_660;
          v365 = (unint64_t *)&v32->__shared_owners_;
          do
            v309 = __ldaxr(v365);
          while (__stlxr(v309 - 1, v365));
          break;
        case 1818452846:
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1368;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioObjectPropertyElementCategoryName", buf, 0x12u);
            }
            v484 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v484 = &off_1E69A1B30;
            v484[2] = 561211770;
          }
          v144 = *((_QWORD *)this + 164);
          v145 = *(_QWORD *)(v144 + 400);
          v32 = *(std::__shared_weak_count **)(v144 + 408);
          *(_QWORD *)buf = v145;
          *(_QWORD *)&buf[8] = v32;
          v66 = a5;
          if (v32)
          {
            v146 = (unint64_t *)&v32->__shared_owners_;
            do
              v147 = __ldxr(v146);
            while (__stxr(v147 + 1, v146));
          }
          v148 = *((unsigned int *)this + 331);
          if (a9)
            v149 = *((unsigned int *)a9 + 58);
          else
            v149 = 0;
          __p = 0;
          v523[0] = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, unsigned int *, void **))(*(_QWORD *)v145 + 568))(v145, v148, v149, v18, 0, 0, 8, v523, &__p);
          *(_QWORD *)a6 = __p;
          if (!v32)
            goto LABEL_660;
          v328 = (unint64_t *)&v32->__shared_owners_;
          do
            v309 = __ldaxr(v328);
          while (__stlxr(v309 - 1, v328));
          break;
        case 1818455662:
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1376;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioObjectPropertyElementNumberName", buf, 0x12u);
            }
            v508 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v508 = &off_1E69A1B30;
            v508[2] = 561211770;
          }
          v30 = *((_QWORD *)this + 164);
          v31 = *(_QWORD *)(v30 + 400);
          v32 = *(std::__shared_weak_count **)(v30 + 408);
          *(_QWORD *)buf = v31;
          *(_QWORD *)&buf[8] = v32;
          if (v32)
          {
            v33 = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
          }
          v35 = *((unsigned int *)this + 331);
          if (a9)
            v36 = *((unsigned int *)a9 + 58);
          else
            v36 = 0;
          v66 = a5;
          __p = 0;
          v523[0] = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, unsigned int *, void **))(*(_QWORD *)v31 + 568))(v31, v35, v36, v18, 0, 0, 8, v523, &__p);
          *(_QWORD *)a6 = __p;
          if (!v32)
            goto LABEL_660;
          v395 = (unint64_t *)&v32->__shared_owners_;
          do
            v309 = __ldaxr(v395);
          while (__stlxr(v309 - 1, v395));
          break;
        default:
          goto LABEL_333;
      }
    }
LABEL_588:
    if (!v309)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
    goto LABEL_660;
  }
  if (mSelector <= 1920168546)
  {
    if (mSelector <= 1919251298)
    {
      if (mSelector == 1853059619)
      {
        NumberStreams = HALS_IODevice::GetNumberStreams(this, 0);
        if (NumberStreams || HALS_IODevice::GetNumberStreams(this, 1))
        {
          v238 = (unsigned int *)HALS_IODevice::CopyStreamByIndex(this, NumberStreams == 0, 0);
          v239 = (HALS_Stream *)v238;
          if (v238)
          {
            v240 = v238[4];
            strcpy((char *)buf, "atfpbolg");
            buf[9] = 0;
            *(_WORD *)&buf[10] = 0;
            v241 = (*(unsigned int (**)(unsigned int *, uint64_t, uint8_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v238 + 104))(v238, v240, buf, 0, 0, 0)/ 0x38;
          }
          else
          {
            v241 = 0;
          }
          v523[0] = v241;
          v431 = (AudioStreamRangedDescription *)operator new[]();
          if (v239)
          {
            HALS_Stream::GetAvailablePhysicalFormats(v239, v241, v523, v431);
            v432 = v523[0];
            v241 = v523[0];
          }
          else
          {
            v432 = v241;
          }
          memset(buf, 0, 24);
          __p = 0;
          v526 = 0;
          v527 = 0;
          std::vector<CAAudioValueRange>::reserve((void **)buf, v432);
          std::vector<CAAudioValueRange>::reserve(&__p, v432);
          if (v241)
          {
            v521 = vdupq_n_s64(v27);
            if (v432 <= 1)
              v432 = 1;
            p_mMinimum = &v431->mSampleRateRange.mMinimum;
            do
            {
              if (v28)
              {
                *((_QWORD *)p_mMinimum - 5) = v27;
                *(int64x2_t *)p_mMinimum = v521;
              }
              CAAudioValueRange_ComputeUnion(p_mMinimum, (double **)buf, (char **)&__p);
              std::vector<CAAudioValueRange>::__assign_with_size[abi:ne180100]<CAAudioValueRange*,CAAudioValueRange*>(buf, (char *)__p, v526, (v526 - (_BYTE *)__p) >> 4);
              p_mMinimum += 7;
              --v432;
            }
            while (v432);
          }
          v435 = *(void **)buf;
          v434 = *(void **)&buf[8];
          v436 = (*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 4;
          if (a4 >> 4 < v436)
            LODWORD(v436) = a4 >> 4;
          v437 = (16 * v436);
          *a5 = v437;
          if (v434 == v435)
            std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
          memcpy(a6, v435, v437);
          if (__p)
            operator delete(__p);
          if (v435)
            operator delete(v435);
          MEMORY[0x1B5E50664](v431, 0x1000C8021716A34);
          HALS_ObjectMap::ReleaseObject(v239, v438);
          return;
        }
        __p = (void *)0x676C6F626E737223;
        LODWORD(v526) = 0;
        v66 = a5;
        v459 = (double *)a6;
        if (a9)
          v460 = *((unsigned int *)a9 + 58);
        else
          v460 = 0;
        v462 = *((_QWORD *)this + 164);
        v463 = *(_QWORD *)(v462 + 400);
        v464 = *(_QWORD *)(v462 + 408);
        *(_QWORD *)buf = v463;
        *(_QWORD *)&buf[8] = v464;
        if (v464)
        {
          v465 = (unint64_t *)(v464 + 8);
          do
            v466 = __ldxr(v465);
          while (__stxr(v466 + 1, v465));
        }
        v467 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, void **))(*(_QWORD *)v463 + 544))(v463, *((unsigned int *)this + 331), v460, &__p);
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (v467)
        {
          v468 = *((_QWORD *)this + 164);
          v469 = *(_QWORD *)(v468 + 400);
          v470 = *(_QWORD *)(v468 + 408);
          *(_QWORD *)buf = v469;
          *(_QWORD *)&buf[8] = v470;
          if (v470)
          {
            v471 = (unint64_t *)(v470 + 8);
            do
              v472 = __ldxr(v471);
            while (__stxr(v472 + 1, v471));
          }
          (*(void (**)(uint64_t, _QWORD, uint64_t, void **, _QWORD, _QWORD, AudioObjectPropertyAddress *, unsigned int *, double *))(*(_QWORD *)v469 + 568))(v469, *((unsigned int *)this + 331), v460, &__p, 0, 0, a4, a5, v459);
          goto LABEL_682;
        }
        if (!v28)
        {
          v473 = *((_QWORD *)this + 164);
          v474 = *(_QWORD *)(v473 + 400);
          v475 = *(_QWORD *)(v473 + 408);
          *(_QWORD *)buf = v474;
          *(_QWORD *)&buf[8] = v475;
          if (v475)
          {
            v476 = (unint64_t *)(v475 + 8);
            do
              v477 = __ldxr(v476);
            while (__stxr(v477 + 1, v476));
          }
          v478 = *((unsigned int *)this + 331);
          *(_QWORD *)v523 = 0x676C6F626E737274;
          v524 = 0;
          v532 = 0.0;
          v531 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *, _QWORD, _QWORD, uint64_t, int *, double *))(*(_QWORD *)v474 + 568))(v474, v478, v460, v523, 0, 0, 8, &v531, &v532);
          v29 = v532;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        }
        if (a4 < 0x10)
        {
          v461 = 0;
        }
        else
        {
          *v459 = v29;
          v459[1] = v29;
          v461 = 16;
        }
LABEL_669:
        *v66 = v461;
        return;
      }
      if (mSelector == 1853059700)
      {
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1629;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyNominalSampleRate", buf, 0x12u);
          }
          v487 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v487 = &off_1E69A1B30;
          v487[2] = 561211770;
        }
        v66 = a5;
        if (!(_BYTE)v17)
        {
          v329 = *((_QWORD *)this + 164);
          v330 = *(_QWORD *)(v329 + 400);
          v331 = *(_QWORD *)(v329 + 408);
          *(_QWORD *)buf = v330;
          *(_QWORD *)&buf[8] = v331;
          if (v331)
          {
            v332 = (unint64_t *)(v331 + 8);
            do
              v333 = __ldxr(v332);
            while (__stxr(v333 + 1, v332));
          }
          v334 = *((unsigned int *)this + 331);
          if (a9)
            v335 = *((unsigned int *)a9 + 58);
          else
            v335 = 0;
          __p = 0;
          v523[0] = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, unsigned int *, void **))(*(_QWORD *)v330 + 568))(v330, v334, v335, v18, 0, 0, 8, v523, &__p);
          *(_QWORD *)a6 = __p;
          goto LABEL_659;
        }
        *(double *)a6 = *(double *)&v16;
        goto LABEL_660;
      }
      if (mSelector != 1886546294)
        goto LABEL_333;
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1778;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioEndPointDevicePropertyIsPrivate", buf, 0x12u);
        }
        v510 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v510 = &off_1E69A1B30;
        v510[2] = 561211770;
      }
      v44 = *((_QWORD *)this + 164);
      v45 = *(_QWORD *)(v44 + 400);
      v39 = *(std::__shared_weak_count **)(v44 + 408);
      *(_QWORD *)buf = v45;
      *(_QWORD *)&buf[8] = v39;
      if (v39)
      {
        v46 = (unint64_t *)&v39->__shared_owners_;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
      }
      v48 = *((unsigned int *)this + 331);
      if (a9)
        v49 = *((unsigned int *)a9 + 58);
      else
        v49 = 0;
      v66 = a5;
      LODWORD(__p) = 0;
      v523[0] = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, unsigned int *, void **))(*(_QWORD *)v45 + 568))(v45, v48, v49, v18, 0, 0, 4, v523, &__p);
      *a6 = (int)__p;
      if (!v39)
        goto LABEL_668;
      v397 = (unint64_t *)&v39->__shared_owners_;
      do
        v337 = __ldaxr(v397);
      while (__stlxr(v337 - 1, v397));
      goto LABEL_599;
    }
    switch(mSelector)
    {
      case 1919251299:
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1870;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyWantsControlsRestored", buf, 0x12u);
          }
          v504 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v504 = &off_1E69A1B30;
          v504[2] = 561211770;
        }
        v272 = *((_QWORD *)this + 164);
        v273 = *(_QWORD *)(v272 + 400);
        v274 = *(std::__shared_weak_count **)(v272 + 408);
        *(_QWORD *)buf = v273;
        *(_QWORD *)&buf[8] = v274;
        v66 = a5;
        v188 = a6;
        if (v274)
        {
          v275 = (unint64_t *)&v274->__shared_owners_;
          do
            v276 = __ldxr(v275);
          while (__stxr(v276 + 1, v275));
        }
        v277 = *((unsigned int *)this + 331);
        if (a9)
          v278 = *((unsigned int *)a9 + 58);
        else
          v278 = 0;
        __p = (void *)0x676C6F6272657363;
        LODWORD(v526) = 0;
        v381 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v273 + 544))(v273, v277, v278, &__p);
        if (v274)
        {
          v382 = (unint64_t *)&v274->__shared_owners_;
          do
            v383 = __ldaxr(v382);
          while (__stlxr(v383 - 1, v382));
          if (!v383)
          {
            ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
            std::__shared_weak_count::__release_weak(v274);
          }
        }
        if (v381)
        {
          v384 = *((_QWORD *)this + 164);
          v385 = *(_QWORD *)(v384 + 400);
          v386 = *(_QWORD *)(v384 + 408);
          *(_QWORD *)buf = v385;
          *(_QWORD *)&buf[8] = v386;
          if (v386)
          {
            v387 = (unint64_t *)(v386 + 8);
            do
              v388 = __ldxr(v387);
            while (__stxr(v388 + 1, v387));
          }
          v389 = *((unsigned int *)this + 331);
          if (a9)
            v390 = *((unsigned int *)a9 + 58);
          else
            v390 = 0;
          __p = (void *)0x676C6F6272657363;
          LODWORD(v526) = 0;
          v523[0] = 0;
          LODWORD(v532) = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, void **, _QWORD, _QWORD, uint64_t, double *, unsigned int *))(*(_QWORD *)v385 + 568))(v385, v389, v390, &__p, 0, 0, 4, &v532, v523);
          goto LABEL_646;
        }
        break;
      case 1919251302:
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1885;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyWantsStreamFormatsRestored", buf, 0x12u);
          }
          v492 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v492 = &off_1E69A1B30;
          v492[2] = 561211770;
        }
        v185 = *((_QWORD *)this + 164);
        v186 = *(_QWORD *)(v185 + 400);
        v187 = *(std::__shared_weak_count **)(v185 + 408);
        *(_QWORD *)buf = v186;
        *(_QWORD *)&buf[8] = v187;
        v66 = a5;
        v188 = a6;
        if (v187)
        {
          v189 = (unint64_t *)&v187->__shared_owners_;
          do
            v190 = __ldxr(v189);
          while (__stxr(v190 + 1, v189));
        }
        v191 = *((unsigned int *)this + 331);
        if (a9)
          v192 = *((unsigned int *)a9 + 58);
        else
          v192 = 0;
        __p = (void *)0x676C6F6272657366;
        LODWORD(v526) = 0;
        v343 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v186 + 544))(v186, v191, v192, &__p);
        if (v187)
        {
          v344 = (unint64_t *)&v187->__shared_owners_;
          do
            v345 = __ldaxr(v344);
          while (__stlxr(v345 - 1, v344));
          if (!v345)
          {
            ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
            std::__shared_weak_count::__release_weak(v187);
          }
        }
        if (v343)
        {
          v346 = *((_QWORD *)this + 164);
          v347 = *(_QWORD *)(v346 + 400);
          v348 = *(_QWORD *)(v346 + 408);
          *(_QWORD *)buf = v347;
          *(_QWORD *)&buf[8] = v348;
          if (v348)
          {
            v349 = (unint64_t *)(v348 + 8);
            do
              v350 = __ldxr(v349);
            while (__stxr(v350 + 1, v349));
          }
          v351 = *((unsigned int *)this + 331);
          if (a9)
            v352 = *((unsigned int *)a9 + 58);
          else
            v352 = 0;
          __p = (void *)0x676C6F6272657366;
          LODWORD(v526) = 0;
          v523[0] = 0;
          LODWORD(v532) = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, void **, _QWORD, _QWORD, uint64_t, double *, unsigned int *))(*(_QWORD *)v347 + 568))(v347, v351, v352, &__p, 0, 0, 4, &v532, v523);
LABEL_646:
          *v188 = v523[0];
LABEL_667:
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          goto LABEL_668;
        }
        break;
      case 1919512167:
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1534;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyZeroTimeStampPeriod", buf, 0x12u);
          }
          v517 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v517 = &off_1E69A1B30;
          v517[2] = 561211770;
        }
        v92 = v18;
        v93 = *((_QWORD *)this + 164);
        v94 = *(_QWORD *)(v93 + 400);
        v95 = *(std::__shared_weak_count **)(v93 + 408);
        *(_QWORD *)buf = v94;
        *(_QWORD *)&buf[8] = v95;
        if (v95)
        {
          v96 = (unint64_t *)&v95->__shared_owners_;
          do
            v97 = __ldxr(v96);
          while (__stxr(v97 + 1, v96));
        }
        v98 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v94 + 24))(v94);
        v66 = a5;
        if (v95)
        {
          v99 = (unint64_t *)&v95->__shared_owners_;
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
        if ((v98 & 1) != 0)
        {
          v101 = *((_QWORD *)this + 164);
          v102 = *(_QWORD *)(v101 + 400);
          v103 = *(_QWORD *)(v101 + 408);
          *(_QWORD *)buf = v102;
          *(_QWORD *)&buf[8] = v103;
          if (v103)
          {
            v104 = (unint64_t *)(v103 + 8);
            do
              v105 = __ldxr(v104);
            while (__stxr(v105 + 1, v104));
          }
          v106 = *((unsigned int *)this + 331);
          if (a9)
            v107 = *((unsigned int *)a9 + 58);
          else
            v107 = 0;
          __p = (void *)0x676C6F626673697ALL;
          LODWORD(v526) = 0;
          v523[0] = 0;
          LODWORD(v532) = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, void **, _QWORD, _QWORD, uint64_t, double *, unsigned int *))(*(_QWORD *)v102 + 568))(v102, v106, v107, &__p, 0, 0, 4, &v532, v523);
          v457 = v523[0];
          goto LABEL_666;
        }
        v316 = *((_QWORD *)this + 164);
        v317 = *(_QWORD *)(v316 + 400);
        v318 = *(_QWORD *)(v316 + 408);
        *(_QWORD *)buf = v317;
        *(_QWORD *)&buf[8] = v318;
        if (v318)
        {
          v319 = (unint64_t *)(v318 + 8);
          do
            v320 = __ldxr(v319);
          while (__stxr(v320 + 1, v319));
        }
        v321 = *((unsigned int *)this + 331);
        v322 = v92;
        if (a9)
          v323 = *((unsigned int *)a9 + 58);
        else
          v323 = 0;
LABEL_665:
        LODWORD(__p) = 0;
        v523[0] = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, unsigned int *, void **))(*(_QWORD *)v317 + 568))(v317, v321, v323, v322, 0, 0, 4, v523, &__p);
        v457 = __p;
LABEL_666:
        *a6 = v457;
        goto LABEL_667;
      default:
        goto LABEL_333;
    }
    *v188 = 1;
    goto LABEL_668;
  }
  if (mSelector <= 1936876643)
  {
    if (mSelector == 1920168547)
    {
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1740;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyResourceBundle", buf, 0x12u);
        }
        v501 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v501 = &off_1E69A1B30;
        v501[2] = 561211770;
      }
      *(_QWORD *)a6 = HALS_PlugInObject::CopyResourceBundlePath((uint64_t)this + 1304, (uint64_t)a9);
      v63 = 8;
      goto LABEL_293;
    }
    if (mSelector == 1935763060)
    {
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1565;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertySafetyOffset", buf, 0x12u);
        }
        v489 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v489 = &off_1E69A1B30;
        v489[2] = 561211770;
      }
      v166 = *((_QWORD *)this + 164);
      v167 = *(_QWORD *)(v166 + 400);
      v168 = *(std::__shared_weak_count **)(v166 + 408);
      *(_QWORD *)buf = v167;
      *(_QWORD *)&buf[8] = v168;
      v151 = a5;
      if (v168)
      {
        v169 = (unint64_t *)&v168->__shared_owners_;
        do
          v170 = __ldxr(v169);
        while (__stxr(v170 + 1, v169));
      }
      v171 = *((unsigned int *)this + 331);
      if (a9)
        v172 = *((unsigned int *)a9 + 58);
      else
        v172 = 0;
      LODWORD(__p) = 0;
      v523[0] = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, unsigned int *, void **))(*(_QWORD *)v167 + 568))(v167, v171, v172, v18, 0, 0, 4, v523, &__p);
      v338 = __p;
      if (v168)
      {
        v339 = (unint64_t *)&v168->__shared_owners_;
        do
          v340 = __ldaxr(v339);
        while (__stlxr(v340 - 1, v339));
        if (!v340)
        {
          ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
          std::__shared_weak_count::__release_weak(v168);
        }
      }
      if (v28)
        v338 = (v29
                            / (*(double (**)(HALS_PlugInDevice *))(*(_QWORD *)this + 264))(this)
                            * (double)v338);
      *a6 = v338;
      goto LABEL_663;
    }
    if (mSelector != 1936092276)
      goto LABEL_333;
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1488;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyDeviceCanBeDefaultSystemDevice", buf, 0x12u);
      }
      v513 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v513 = &off_1E69A1B30;
      v513[2] = 561211770;
    }
    v64 = v18;
    v65 = (*(uint64_t (**)(HALS_PlugInDevice *, BOOL, HALS_Client *))(*(_QWORD *)this + 536))(this, mScope == 1768845428, a9);
    *a6 = v65 != 0;
    v66 = a5;
    if (!v65)
      goto LABEL_668;
    v67 = *((_QWORD *)this + 164);
    v68 = *(_QWORD *)(v67 + 400);
    v69 = *(_QWORD *)(v67 + 408);
    *(_QWORD *)buf = v68;
    *(_QWORD *)&buf[8] = v69;
    if (v69)
    {
      v70 = (unint64_t *)(v69 + 8);
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }
    v72 = a9 ? *((unsigned int *)a9 + 58) : 0;
    v447 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v68 + 544))(v68, *((unsigned int *)this + 331), v72, v64);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (!v447)
      goto LABEL_668;
    v448 = *((_QWORD *)this + 164);
    v317 = *(_QWORD *)(v448 + 400);
    v449 = *(_QWORD *)(v448 + 408);
    *(_QWORD *)buf = v317;
    *(_QWORD *)&buf[8] = v449;
    if (v449)
    {
      v450 = (unint64_t *)(v449 + 8);
      do
        v451 = __ldxr(v450);
      while (__stxr(v451 + 1, v450));
    }
    v321 = *((unsigned int *)this + 331);
    v322 = v64;
    if (a9)
      v323 = *((unsigned int *)a9 + 58);
    else
      v323 = 0;
    goto LABEL_665;
  }
  if (mSelector != 1936876644)
  {
    if (mSelector != 1936879204)
    {
      if (mSelector != 1953653102)
        goto LABEL_333;
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1420;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyTransportType", buf, 0x12u);
        }
        v520 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v520 = &off_1E69A1B30;
        v520[2] = 561211770;
      }
      v126 = *((_QWORD *)this + 164);
      v127 = *(_QWORD *)(v126 + 400);
      v39 = *(std::__shared_weak_count **)(v126 + 408);
      *(_QWORD *)buf = v127;
      *(_QWORD *)&buf[8] = v39;
      if (v39)
      {
        v128 = (unint64_t *)&v39->__shared_owners_;
        do
          v129 = __ldxr(v128);
        while (__stxr(v129 + 1, v128));
      }
      v130 = *((unsigned int *)this + 331);
      if (a9)
        v131 = *((unsigned int *)a9 + 58);
      else
        v131 = 0;
      v66 = a5;
      LODWORD(__p) = 0;
      v523[0] = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, unsigned int *, void **))(*(_QWORD *)v127 + 568))(v127, v130, v131, v18, 0, 0, 4, v523, &__p);
      *a6 = (int)__p;
      if (!v39)
        goto LABEL_668;
      v429 = (unint64_t *)&v39->__shared_owners_;
      do
        v337 = __ldaxr(v429);
      while (__stlxr(v337 - 1, v429));
      goto LABEL_599;
    }
    v205 = v18;
    TotalNumberChannelsForClient = HALS_Device::GetTotalNumberChannelsForClient(this, mScope == 1768845428, a9);
    v207 = caulk::numeric::exceptional_mul<unsigned int>(TotalNumberChannelsForClient);
    v208 = caulk::numeric::exceptional_add<unsigned int>(v207);
    v530 = v208;
    if (v208 > a4)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1580;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyPreferredChannelLayout", buf, 0x12u);
      }
      v494 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v494 = &off_1E69A1B30;
      v494[2] = 561211770;
    }
    v209 = v208;
    v210 = (*(uint64_t (**)(HALS_PlugInDevice *, BOOL, HALS_Client *))(*(_QWORD *)this + 600))(this, mScope == 1768845428, a9);
    *(_QWORD *)a6 = 0;
    a6[2] = v210;
    if (v210)
    {
      v211 = v210;
      v212 = a6 + 4;
      do
      {
        *((_DWORD *)v212 - 1) = -1;
        *v212 = 0;
        v212[1] = 0;
        v212 = (_QWORD *)((char *)v212 + 20);
        --v211;
      }
      while (v211);
    }
    *a5 = v209;
    v213 = *((_QWORD *)this + 164);
    v214 = *(_QWORD *)(v213 + 400);
    v215 = *(std::__shared_weak_count **)(v213 + 408);
    *(_QWORD *)buf = v214;
    *(_QWORD *)&buf[8] = v215;
    if (v215)
    {
      v216 = (unint64_t *)&v215->__shared_owners_;
      do
        v217 = __ldxr(v216);
      while (__stxr(v217 + 1, v216));
    }
    if (a9)
      v218 = *((unsigned int *)a9 + 58);
    else
      v218 = 0;
    (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, unsigned int *, int *))(*(_QWORD *)v214 + 568))(v214, *((unsigned int *)this + 331), v218, v205, 0, 0, v209, a5, a6);
    if (v215)
    {
      v354 = (unint64_t *)&v215->__shared_owners_;
      do
        v355 = __ldaxr(v354);
      while (__stlxr(v355 - 1, v354));
      if (!v355)
      {
        ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
        std::__shared_weak_count::__release_weak(v215);
      }
    }
    v528 = 0;
    v529 = 0;
    HALS_System::GetInstance(&__p, 0, &v528);
    *(_QWORD *)buf = HALS_SettingsManager::ReadSetting(*((HALS_SettingsManager **)__p + 176), *((const __CFString **)this + 14));
    *(_WORD *)&buf[8] = 1;
    v356 = (std::__shared_weak_count *)v526;
    if (v526)
    {
      v357 = (unint64_t *)(v526 + 8);
      do
        v358 = __ldaxr(v357);
      while (__stlxr(v358 - 1, v357));
      if (!v358)
      {
        ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
        std::__shared_weak_count::__release_weak(v356);
      }
    }
    v359 = v529;
    if (v529)
    {
      v360 = (unint64_t *)&v529->__shared_owners_;
      do
        v361 = __ldaxr(v360);
      while (__stlxr(v361 - 1, v360));
      if (!v361)
      {
        ((void (*)(std::__shared_weak_count *))v359->__on_zero_shared)(v359);
        std::__shared_weak_count::__release_weak(v359);
      }
    }
    __p = 0;
    LOWORD(v526) = 1;
    if (mScope == 1768845428)
    {
      v362 = CFSTR("input.surround");
    }
    else
    {
      if (v205->mScope != 1869968496)
      {
LABEL_435:
        CACFDictionary::~CACFDictionary((CACFDictionary *)&__p);
        CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
        return;
      }
      v362 = CFSTR("output.surround");
    }
    CACFDictionary::GetCACFDictionary((const __CFDictionary **)buf, v362, (CACFDictionary *)&__p);
    if (__p)
      HALS_Device::ConstructLayoutFromDictionary((HALS_Device *)&__p, (const CACFDictionary *)a6, v363);
    goto LABEL_435;
  }
  v291 = v18;
  v292 = HALS_Device::GetTotalNumberChannelsForClient(this, mScope == 1768845428, a9);
  v293 = caulk::numeric::exceptional_mul<unsigned int>(v292);
  v294 = caulk::numeric::exceptional_add<unsigned int>(v293);
  v530 = v294;
  if (v294 > a4)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1614;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyDefaultChannelLayout", buf, 0x12u);
    }
    v507 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v507 = &off_1E69A1B30;
    v507[2] = 561211770;
  }
  v295 = v294;
  v296 = (*(uint64_t (**)(HALS_PlugInDevice *, BOOL, HALS_Client *))(*(_QWORD *)this + 600))(this, mScope == 1768845428, a9);
  v297 = a6;
  *(_QWORD *)a6 = 0;
  a6[2] = v296;
  if (v296)
  {
    v298 = v296;
    v299 = a6 + 4;
    do
    {
      *((_DWORD *)v299 - 1) = -1;
      *v299 = 0;
      v299[1] = 0;
      v299 = (_QWORD *)((char *)v299 + 20);
      --v298;
    }
    while (v298);
  }
  *a5 = v295;
  v300 = v291->mScope;
  LODWORD(__p) = 1936879204;
  HIDWORD(__p) = v300;
  LODWORD(v526) = 1735159650;
  v301 = *((_QWORD *)this + 164);
  v302 = *(_QWORD *)(v301 + 400);
  v303 = *(std::__shared_weak_count **)(v301 + 408);
  *(_QWORD *)buf = v302;
  *(_QWORD *)&buf[8] = v303;
  if (v303)
  {
    v304 = (unint64_t *)&v303->__shared_owners_;
    do
      v305 = __ldxr(v304);
    while (__stxr(v305 + 1, v304));
  }
  if (a9)
    v306 = *((unsigned int *)a9 + 58);
  else
    v306 = 0;
  (*(void (**)(uint64_t, _QWORD, uint64_t, void **, _QWORD, _QWORD, uint64_t, int *, int *))(*(_QWORD *)v302 + 568))(v302, *((unsigned int *)this + 331), v306, &__p, 0, 0, v295, &v530, v297);
  if (v303)
  {
    v393 = (unint64_t *)&v303->__shared_owners_;
    do
      v394 = __ldaxr(v393);
    while (__stlxr(v394 - 1, v393));
    if (!v394)
    {
      ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
      v326 = v303;
      goto LABEL_513;
    }
  }
}

void sub_1B587B9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void HALS_PlugInDevice::SetPropertyData(HALS_PlugInDevice *this, const AudioObjectPropertyAddress *a2, AudioObjectPropertyAddress *a3, uint64_t a4, _DWORD *a5, uint64_t a6, int *a7, HALS_Client *a8)
{
  signed int mSelector;
  const BOOL *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t *v64;
  unint64_t *v65;
  unint64_t *v66;
  int v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  std::__shared_weak_count *v77;
  int v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  _DWORD *exception;
  _DWORD *v92;
  _DWORD *v93;
  _DWORD *v94;
  _DWORD *v95;
  _DWORD *v96;
  _DWORD *v97;
  _BYTE v98[18];
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  mSelector = a3->mSelector;
  if (HALB_Info::PropertyRequiresHogMode((HALB_Info *)a3->mSelector, a2))
  {
    if (!HALS_Device::IsHogModeOwnerOrFree(this, a8))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v98 = 136315394;
        *(_QWORD *)&v98[4] = "HALS_PlugInDevice.cpp";
        *(_WORD *)&v98[12] = 1024;
        *(_DWORD *)&v98[14] = 1947;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::SetPropertyData: the given process does not own hog mode", v98, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 560492391;
    }
    mSelector = a3->mSelector;
  }
  if (mSelector > 1818850144)
  {
    if (mSelector > 1853059699)
    {
      if (mSelector == 1886546294)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v98 = 136315394;
            *(_QWORD *)&v98[4] = "HALS_PlugInDevice.cpp";
            *(_WORD *)&v98[12] = 1024;
            *(_DWORD *)&v98[14] = 1973;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::SetPropertyData: bad property data size for kAudioEndPointDevicePropertyIsPrivate", v98, 0x12u);
          }
          v95 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v95 = &off_1E69A1B30;
          v95[2] = 561211770;
        }
        v50 = *((_QWORD *)this + 164);
        v51 = *(_QWORD *)(v50 + 400);
        v20 = *(std::__shared_weak_count **)(v50 + 408);
        *(_QWORD *)v98 = v51;
        *(_QWORD *)&v98[8] = v20;
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v53 = __ldxr(p_shared_owners);
          while (__stxr(v53 + 1, p_shared_owners));
        }
        if (a8)
          v54 = *((unsigned int *)a8 + 58);
        else
          v54 = 0;
        (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, _DWORD *, _QWORD, _QWORD))(*(_QWORD *)v51 + 576))(v51, *((unsigned int *)this + 331), v54, a3, 0, 0, a4, a5, *(_QWORD *)v98, *(_QWORD *)&v98[8]);
        if (v20)
        {
          v66 = (unint64_t *)&v20->__shared_owners_;
          do
            v62 = __ldaxr(v66);
          while (__stlxr(v62 - 1, v66));
          goto LABEL_104;
        }
        return;
      }
      if (mSelector == 1853059700)
      {
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v98 = 136315394;
            *(_QWORD *)&v98[4] = "HALS_PlugInDevice.cpp";
            *(_WORD *)&v98[12] = 1024;
            *(_DWORD *)&v98[14] = 1953;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::SetPropertyData: bad property data size for kAudioDevicePropertyNominalSampleRate", v98, 0x12u);
          }
          v97 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v97 = &off_1E69A1B30;
          v97[2] = 561211770;
        }
        v35 = *((_QWORD *)this + 164);
        v36 = *(_QWORD *)(v35 + 400);
        v20 = *(std::__shared_weak_count **)(v35 + 408);
        *(_QWORD *)v98 = v36;
        *(_QWORD *)&v98[8] = v20;
        if (v20)
        {
          v37 = (unint64_t *)&v20->__shared_owners_;
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
        }
        if (a8)
          v39 = *((unsigned int *)a8 + 58);
        else
          v39 = 0;
        (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, _DWORD *, _QWORD, _QWORD))(*(_QWORD *)v36 + 576))(v36, *((unsigned int *)this + 331), v39, a3, 0, 0, a4, a5, *(_QWORD *)v98, *(_QWORD *)&v98[8]);
        if (v20)
        {
          v76 = (unint64_t *)&v20->__shared_owners_;
          do
            v62 = __ldaxr(v76);
          while (__stlxr(v62 - 1, v76));
          goto LABEL_104;
        }
        return;
      }
    }
    else if (mSelector == 1818850145 || mSelector == 1818850162)
    {
      if (a4 <= 0xB)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v98 = 136315394;
          *(_QWORD *)&v98[4] = "HALS_PlugInDevice.cpp";
          *(_WORD *)&v98[12] = 1024;
          *(_DWORD *)&v98[14] = 1981;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::SetPropertyData: bad property data size for kAudioObjectPropertyListenerAdded or kAudioObjectPropertyListenerRemoved", v98, 0x12u);
        }
        v92 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v92 = &off_1E69A1B30;
        v92[2] = 561211770;
      }
      v24 = *((_QWORD *)this + 164);
      v25 = *(_QWORD *)(v24 + 400);
      v20 = *(std::__shared_weak_count **)(v24 + 408);
      *(_QWORD *)v98 = v25;
      *(_QWORD *)&v98[8] = v20;
      if (v20)
      {
        v26 = (unint64_t *)&v20->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      if (a8)
        v28 = *((unsigned int *)a8 + 58);
      else
        v28 = 0;
      (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, _DWORD *, _QWORD, _QWORD))(*(_QWORD *)v25 + 576))(v25, *((unsigned int *)this + 331), v28, a3, 0, 0, a4, a5, *(_QWORD *)v98, *(_QWORD *)&v98[8]);
      if (v20)
      {
        v61 = (unint64_t *)&v20->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        goto LABEL_104;
      }
      return;
    }
    goto LABEL_56;
  }
  if (mSelector > 1685087595)
  {
    if (mSelector == 1685087596)
    {
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v98 = 136315394;
          *(_QWORD *)&v98[4] = "HALS_PlugInDevice.cpp";
          *(_WORD *)&v98[12] = 1024;
          *(_DWORD *)&v98[14] = 1988;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::SetPropertyData: bad property data size for kAudioDevicePropertyEnableListening", v98, 0x12u);
        }
        v94 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v94 = &off_1E69A1B30;
        v94[2] = 561211770;
      }
      v45 = *((_QWORD *)this + 164);
      v46 = *(_QWORD *)(v45 + 400);
      v20 = *(std::__shared_weak_count **)(v45 + 408);
      *(_QWORD *)v98 = v46;
      *(_QWORD *)&v98[8] = v20;
      if (v20)
      {
        v47 = (unint64_t *)&v20->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      if (a8)
        v49 = *((unsigned int *)a8 + 58);
      else
        v49 = 0;
      (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, _DWORD *, _QWORD, _QWORD))(*(_QWORD *)v46 + 576))(v46, *((unsigned int *)this + 331), v49, a3, 0, 0, a4, a5, *(_QWORD *)v98, *(_QWORD *)&v98[8]);
      if (v20)
      {
        v65 = (unint64_t *)&v20->__shared_owners_;
        do
          v62 = __ldaxr(v65);
        while (__stlxr(v62 - 1, v65));
        goto LABEL_104;
      }
      return;
    }
    if (mSelector == 1685414763)
    {
      if (a4 <= 0xF)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v98 = 136315394;
          *(_QWORD *)&v98[4] = "HALS_PlugInDevice.cpp";
          *(_WORD *)&v98[12] = 1024;
          *(_DWORD *)&v98[14] = 1996;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::_SetPropertyData: bad property data size for kAudioDevicePropertyProcessDuck", v98, 0x12u);
        }
        v96 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v96 = &off_1E69A1B30;
        v96[2] = 561211770;
      }
      v29 = *((_QWORD *)this + 164);
      v30 = *(_QWORD *)(v29 + 400);
      v31 = *(std::__shared_weak_count **)(v29 + 408);
      *(_QWORD *)v98 = v30;
      *(_QWORD *)&v98[8] = v31;
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      if (a8)
        v34 = *((unsigned int *)a8 + 58);
      else
        v34 = 0;
      v67 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v30 + 544))(v30, *((unsigned int *)this + 331), v34, a3);
      if (v31)
      {
        v68 = (unint64_t *)&v31->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      if (v67)
      {
        v70 = *((_QWORD *)this + 164);
        v71 = *(_QWORD *)(v70 + 400);
        v72 = *(std::__shared_weak_count **)(v70 + 408);
        *(_QWORD *)v98 = v71;
        *(_QWORD *)&v98[8] = v72;
        if (v72)
        {
          v73 = (unint64_t *)&v72->__shared_owners_;
          do
            v74 = __ldxr(v73);
          while (__stxr(v74 + 1, v73));
        }
        if (a8)
          v75 = *((unsigned int *)a8 + 58);
        else
          v75 = 0;
        v78 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *))(*(_QWORD *)v71 + 552))(v71, *((unsigned int *)this + 331), v75, a3);
        if (v72)
        {
          v79 = (unint64_t *)&v72->__shared_owners_;
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        if (v78)
        {
          v81 = *((_QWORD *)this + 164);
          v82 = *(_QWORD *)(v81 + 400);
          v83 = *(std::__shared_weak_count **)(v81 + 408);
          *(_QWORD *)v98 = v82;
          *(_QWORD *)&v98[8] = v83;
          if (v83)
          {
            v84 = (unint64_t *)&v83->__shared_owners_;
            do
              v85 = __ldxr(v84);
            while (__stxr(v85 + 1, v84));
          }
          if (a8)
            v86 = *((unsigned int *)a8 + 58);
          else
            v86 = 0;
          (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, _DWORD *, _QWORD, _QWORD))(*(_QWORD *)v82 + 576))(v82, *((unsigned int *)this + 331), v86, a3, 0, 0, 16, a5, *(_QWORD *)v98, *(_QWORD *)&v98[8]);
          if (!v83)
            return;
          v89 = (unint64_t *)&v83->__shared_owners_;
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (v90)
            return;
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          v77 = v83;
LABEL_106:
          std::__shared_weak_count::__release_weak(v77);
          return;
        }
      }
LABEL_120:
      HALS_Device::SetPropertyData(this, a2, a3, a4, a5, a6, a7, a8);
      return;
    }
LABEL_56:
    if (!HALS_Device::HasProperty((HALS_Device ***)this, v17, a3, (AudioObjectPropertyAddress *)a8))
    {
      if (!(*(unsigned int (**)(char *, _QWORD))(*((_QWORD *)this + 163) + 24))((char *)this + 1304, a3->mSelector))return;
      v55 = *((_QWORD *)this + 164);
      v56 = *(_QWORD *)(v55 + 400);
      v57 = *(std::__shared_weak_count **)(v55 + 408);
      *(_QWORD *)v98 = v56;
      *(_QWORD *)&v98[8] = v57;
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      v60 = a8 ? *((unsigned int *)a8 + 58) : 0;
      (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, uint64_t, int *, uint64_t, _DWORD *, _QWORD, _QWORD))(*(_QWORD *)v56 + 576))(v56, *((unsigned int *)this + 331), v60, a3, a6, a7, a4, a5, *(_QWORD *)v98, *(_QWORD *)&v98[8]);
      if (!v57)
        return;
      v87 = (unint64_t *)&v57->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (v88)
        return;
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      v77 = v57;
      goto LABEL_106;
    }
    goto LABEL_120;
  }
  if (mSelector != 1633906541)
  {
    if (mSelector == 1634169456)
    {
      v18 = *((_QWORD *)this + 164);
      v19 = *(_QWORD *)(v18 + 400);
      v20 = *(std::__shared_weak_count **)(v18 + 408);
      *(_QWORD *)v98 = v19;
      *(_QWORD *)&v98[8] = v20;
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      if (a8)
        v23 = *((unsigned int *)a8 + 58);
      else
        v23 = 0;
      (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, _DWORD *, _QWORD, _QWORD))(*(_QWORD *)v19 + 576))(v19, *((unsigned int *)this + 331), v23, a3, 0, 0, a4, a5, *(_QWORD *)v98, *(_QWORD *)&v98[8]);
      if (v20)
      {
        v63 = (unint64_t *)&v20->__shared_owners_;
        do
          v62 = __ldaxr(v63);
        while (__stlxr(v62 - 1, v63));
LABEL_104:
        if (v62)
          return;
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        v77 = v20;
        goto LABEL_106;
      }
      return;
    }
    goto LABEL_56;
  }
  if (a4 <= 7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v98 = 136315394;
      *(_QWORD *)&v98[4] = "HALS_PlugInDevice.cpp";
      *(_WORD *)&v98[12] = 1024;
      *(_DWORD *)&v98[14] = 1960;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::SetPropertyData: bad property data size for kAudioEndPointDevicePropertyComposition", v98, 0x12u);
    }
    v93 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v93 = &off_1E69A1B30;
    v93[2] = 561211770;
  }
  v40 = *((_QWORD *)this + 164);
  v41 = *(_QWORD *)(v40 + 400);
  v20 = *(std::__shared_weak_count **)(v40 + 408);
  *(_QWORD *)v98 = v41;
  *(_QWORD *)&v98[8] = v20;
  if (v20)
  {
    v42 = (unint64_t *)&v20->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  if (a8)
    v44 = *((unsigned int *)a8 + 58);
  else
    v44 = 0;
  (*(void (**)(uint64_t, _QWORD, uint64_t, AudioObjectPropertyAddress *, _QWORD, _QWORD, uint64_t, _DWORD *, _QWORD, _QWORD))(*(_QWORD *)v41 + 576))(v41, *((unsigned int *)this + 331), v44, a3, 0, 0, a4, a5, *(_QWORD *)v98, *(_QWORD *)&v98[8]);
  if (v20)
  {
    v64 = (unint64_t *)&v20->__shared_owners_;
    do
      v62 = __ldaxr(v64);
    while (__stlxr(v62 - 1, v64));
    goto LABEL_104;
  }
}

void sub_1B587C6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::WantsOwnedObjectPropertiesChanged(HALS_Device *this)
{
  return 1;
}

uint64_t HALS_Device::GetDeviceUID(HALS_Device *this)
{
  return *((_QWORD *)this + 12);
}

const void *HALS_Device::CopyDeviceUID(HALS_Device *this)
{
  const void *result;

  result = (const void *)*((_QWORD *)this + 12);
  if (result)
  {
    CFRetain(result);
    return (const void *)*((_QWORD *)this + 12);
  }
  return result;
}

void HALS_PlugInDevice::FlushAllQueues(HALS_PlugInDevice *this)
{
  AMCP::Utility::Dispatch_Queue::flush_all_work((HALS_PlugInDevice *)((char *)this + 664));
  AMCP::Utility::Dispatch_Queue::flush_all_work((HALS_PlugInDevice *)((char *)this + 984));
  AMCP::Utility::Dispatch_Queue::flush_all_work((HALS_PlugInDevice *)((char *)this + 1432));
}

uint64_t HALS_PlugInDevice::DoAnyQueuesHaveWorkAfterFlush(HALS_PlugInDevice *this)
{
  unsigned __int8 v1;
  unsigned __int8 v2;
  unsigned __int8 v4;

  v1 = atomic_load((unsigned __int8 *)this + 697);
  if ((v1 & 1) == 0)
  {
    v2 = atomic_load((unsigned __int8 *)this + 1017);
    if ((v2 & 1) == 0)
      return 0;
  }
  v4 = atomic_load((unsigned __int8 *)this + 1465);
  return v4 & 1;
}

uint64_t HALS_PlugInDevice::create_mcp_engine(HALS_PlugInDevice *this)
{
  uint64_t v1;
  int v3;

  v1 = *((_QWORD *)this + 164);
  v3 = *((_DWORD *)this + 331);
  return (*(uint64_t (**)(_QWORD, uint64_t, HALS_PlugInDevice *, int *))(**(_QWORD **)(v1 + 400) + 152))(*(_QWORD *)(v1 + 400), v1, this, &v3);
}

uint64_t HALS_Device::GetClockDomain(HALS_Device *this)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v1 = *((unsigned int *)this + 4);
  v3 = 0x676C6F62636C6B64;
  v4 = 0;
  v5 = 0;
  (*(void (**)(HALS_Device *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, v1, &v3, 4, &v5, (char *)&v5 + 4, 0, 0, 0);
  return HIDWORD(v5);
}

uint64_t HALS_PlugInDevice::GetClockAlgorithm(HALS_PlugInDevice *this)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;

  v2 = 1768518246;
  v7 = 1768518246;
  v5 = 0x676C6F62636C6F6BLL;
  v6 = 0;
  if ((*(unsigned int (**)(HALS_PlugInDevice *, _QWORD, uint64_t *, _QWORD))(*(_QWORD *)this + 88))(this, *((unsigned int *)this + 4), &v5, 0))
  {
    v4 = 4;
    (*(void (**)(HALS_PlugInDevice *, _QWORD, uint64_t *, uint64_t, int *, unsigned int *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, *((unsigned int *)this + 4), &v5, 4, &v4, &v7, 0, 0, 0);
    return v7;
  }
  return v2;
}

void sub_1B587C8CC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B587C8B4);
}

BOOL HALS_PlugInDevice::IsClockStable(HALS_PlugInDevice *this)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;

  v5 = 0x676C6F6263737462;
  v6 = 0;
  if (!(*(unsigned int (**)(HALS_PlugInDevice *, _QWORD, uint64_t *, _QWORD))(*(_QWORD *)this + 88))(this, *((unsigned int *)this + 4), &v5, 0))return 1;
  v3 = 4;
  v4 = 0;
  (*(void (**)(HALS_PlugInDevice *, _QWORD, uint64_t *, uint64_t, int *, int *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, *((unsigned int *)this + 4), &v5, 4, &v3, &v4, 0, 0, 0);
  return v4 != 0;
}

void sub_1B587C974(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B587C950);
}

uint64_t HALS_PlugInDevice::_GetNumberStreams(HALS_PlugInDevice *this, unsigned int a2)
{
  return (*((_QWORD *)this + 3 * a2 + 169) - *((_QWORD *)this + 3 * a2 + 168)) >> 3;
}

HALS_ObjectMap *HALS_PlugInDevice::_CopyStreamByIndex(HALS_PlugInDevice *this, HALS_Object *a2, unsigned int a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  HALS_ObjectMap *v6;

  v3 = (char *)this + 24 * a2;
  v4 = *((_QWORD *)v3 + 169);
  v5 = *((_QWORD *)v3 + 168);
  if (a3 >= (unint64_t)((v4 - v5) >> 3))
    v6 = 0;
  else
    v6 = *(HALS_ObjectMap **)(v5 + 8 * a3);
  HALS_ObjectMap::RetainObject(v6, a2);
  return v6;
}

uint64_t HALS_PlugInDevice::_CopyIOEngine(HALS_PlugInDevice *this, HALS_Object *a2)
{
  int v3;
  int v4;
  _DWORD *exception;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)this + 5);
  v3 = *((_DWORD *)this + 6);
  if (v4 == v3 || v4 == 1701733488)
  {
    if (v4 == 1701733488 || v4 != v3)
    {
LABEL_13:
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v9 = 136315394;
        v10 = "HALS_PlugInDevice.cpp";
        v11 = 1024;
        v12 = 846;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::_GetIOEngine: EndPoints shouldn't need engines", (uint8_t *)&v9, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
  }
  else if (v3 == 1701733488)
  {
    goto LABEL_13;
  }
  HALS_ObjectMap::RetainObject(*((HALS_ObjectMap **)this + 177), a2);
  return *((_QWORD *)this + 177);
}

BOOL HALS_Device::SupportsPastData(HALS_Device *this)
{
  uint64_t v2;
  int v3;
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;

  v2 = *((unsigned int *)this + 4);
  v8 = 0x676C6F6264737064;
  v9 = 0;
  v3 = (*(uint64_t (**)(HALS_Device *, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)this + 88))(this, v2, &v8, 0);
  result = 0;
  if (v3)
  {
    v5 = *((unsigned int *)this + 4);
    v6 = 0x676C6F6264737064;
    v7 = 0;
    v11 = 0;
    v10 = 0;
    (*(void (**)(HALS_Device *, uint64_t, uint64_t *, uint64_t, int *, int *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, v5, &v6, 4, &v10, &v11, 0, 0, 0);
    return v11 != 0;
  }
  return result;
}

uint64_t HALS_Device::AvailablePastData(HALS_Device *this)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v1 = *((unsigned int *)this + 4);
  v3 = 0x676C6F6264617064;
  v4 = 0;
  v5 = 0;
  (*(void (**)(HALS_Device *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, v1, &v3, 4, &v5, (char *)&v5 + 4, 0, 0, 0);
  return HIDWORD(v5);
}

uint64_t HALS_Device::MaximumPastData(HALS_Device *this)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v1 = *((unsigned int *)this + 4);
  v3 = 0x676C6F62646D7064;
  v4 = 0;
  v5 = 0;
  (*(void (**)(HALS_Device *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, v1, &v3, 4, &v5, (char *)&v5 + 4, 0, 0, 0);
  return HIDWORD(v5);
}

uint64_t HALS_Device::IsolatedUseCaseID(HALS_Device *this)
{
  return 0;
}

BOOL HALS_Device::HasAccessEntitlement(HALS_Device *this)
{
  return *((_QWORD *)this + 16) != 0;
}

uint64_t HALS_Device::GetAccessEntitlementName(HALS_Device *this)
{
  return *((_QWORD *)this + 16);
}

uint64_t HALS_PlugInDevice::_CopyDefaultElementName(HALS_PlugInDevice *this, int a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _DWORD v23[3];
  int v24;
  uint64_t v25;

  v23[0] = 1818454126;
  v23[1] = a2;
  v23[2] = a3;
  v4 = *((_QWORD *)this + 164);
  v5 = *(_QWORD *)(v4 + 400);
  v6 = *(std::__shared_weak_count **)(v4 + 408);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _DWORD *))(*(_QWORD *)v5 + 544))(v5, *((unsigned int *)this + 331), 0, v23);
  v10 = v9;
  if (v6)
  {
    v11 = (unint64_t *)&v6->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v10)
        goto LABEL_9;
      return 0;
    }
  }
  if (!v9)
    return 0;
LABEL_9:
  v13 = *((_QWORD *)this + 164);
  v14 = *(_QWORD *)(v13 + 400);
  v15 = *(std::__shared_weak_count **)(v13 + 408);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *((unsigned int *)this + 331);
  v25 = 0;
  v24 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _DWORD *, _QWORD, _QWORD, uint64_t, int *, uint64_t *, uint64_t, std::__shared_weak_count *))(*(_QWORD *)v14 + 568))(v14, v18, 0, v23, 0, 0, 8, &v24, &v25, v14, v15);
  v19 = v25;
  if (v15)
  {
    v20 = (unint64_t *)&v15->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v19;
}

void sub_1B587CDE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugInDevice::_GetTotalNumberChannels(HALS_PlugInDevice *this, unsigned int a2)
{
  char *v2;
  unsigned int **v3;
  uint64_t v4;
  unsigned int ***v5;
  unsigned int *v6;
  uint64_t v7;
  _BYTE v9[28];
  int v10;
  uint64_t v11;
  int v12;
  int v13;

  v2 = (char *)this + 24 * a2;
  v3 = (unsigned int **)*((_QWORD *)v2 + 168);
  if (v3 == *((unsigned int ***)v2 + 169))
    return 0;
  LODWORD(v4) = 0;
  v5 = (unsigned int ***)(v2 + 1352);
  do
  {
    v6 = *v3++;
    v7 = v6[4];
    v11 = 0x676C6F6270667420;
    v12 = 0;
    v13 = 0;
    (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, int *, _BYTE *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v6 + 112))(v6, v7, &v11, 40, &v13, v9, 0, 0, 0);
    v4 = (v10 + v4);
  }
  while (v3 != *v5);
  return v4;
}

void HALS_PlugInDevice::_CopyStreamList(uint64_t a1, unsigned int a2, void **a3)
{
  uint64_t v4;
  HALS_Object *v5;
  HALS_ObjectMap **v6;
  HALS_ObjectMap **i;
  HALS_ObjectMap *v8;
  unint64_t v9;
  HALS_ObjectMap **v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  HALS_ObjectMap **v16;
  char *v17;
  char *v18;
  HALS_ObjectMap *v19;

  a3[1] = *a3;
  v4 = a1 + 24 * a2;
  std::vector<void const*>::reserve(a3, (uint64_t)(*(_QWORD *)(v4 + 1352) - *(_QWORD *)(v4 + 1344)) >> 3);
  v6 = *(HALS_ObjectMap ***)(v4 + 1344);
  for (i = *(HALS_ObjectMap ***)(v4 + 1352); v6 != i; ++v6)
  {
    HALS_ObjectMap::RetainObject(*v6, v5);
    v8 = *v6;
    v10 = (HALS_ObjectMap **)a3[1];
    v9 = (unint64_t)a3[2];
    if ((unint64_t)v10 >= v9)
    {
      v12 = ((char *)v10 - (_BYTE *)*a3) >> 3;
      if ((unint64_t)(v12 + 1) >> 61)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v13 = v9 - (_QWORD)*a3;
      v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1))
        v14 = v12 + 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
        v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v15);
      else
        v5 = 0;
      v16 = (HALS_ObjectMap **)(v15 + 8 * v12);
      *v16 = v8;
      v11 = (char *)(v16 + 1);
      v18 = (char *)*a3;
      v17 = (char *)a3[1];
      if (v17 != *a3)
      {
        do
        {
          v19 = (HALS_ObjectMap *)*((_QWORD *)v17 - 1);
          v17 -= 8;
          *--v16 = v19;
        }
        while (v17 != v18);
        v17 = (char *)*a3;
      }
      *a3 = v16;
      a3[1] = v11;
      a3[2] = (void *)(v15 + 8 * (_QWORD)v5);
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v10 = v8;
      v11 = (char *)(v10 + 1);
    }
    a3[1] = v11;
  }
}

void HALS_PlugInDevice::_CopyControls(HALS_PlugInDevice *this, HALS_Device::BasicControlList *a2)
{
  HALS_ObjectMap **v2;
  HALS_ObjectMap **v3;
  HALS_Device::BasicControlList *v4;
  HALS_ObjectMap *v5;
  unint64_t v6;
  HALS_ObjectMap **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  HALS_ObjectMap **v13;
  char *v14;
  char *v15;
  HALS_ObjectMap *v16;

  v2 = (HALS_ObjectMap **)*((_QWORD *)this + 174);
  v3 = (HALS_ObjectMap **)*((_QWORD *)this + 175);
  if (v2 != v3)
  {
    v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, a2);
      v5 = *v2;
      v7 = (HALS_ObjectMap **)*((_QWORD *)v4 + 1);
      v6 = *((_QWORD *)v4 + 2);
      if ((unint64_t)v7 >= v6)
      {
        v9 = ((uint64_t)v7 - *(_QWORD *)v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v10 = v6 - *(_QWORD *)v4;
        v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1))
          v11 = v9 + 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
          v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        else
          a2 = 0;
        v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        *v13 = v5;
        v8 = v13 + 1;
        v15 = *(char **)v4;
        v14 = (char *)*((_QWORD *)v4 + 1);
        if (v14 != *(char **)v4)
        {
          do
          {
            v16 = (HALS_ObjectMap *)*((_QWORD *)v14 - 1);
            v14 -= 8;
            *--v13 = v16;
          }
          while (v14 != v15);
          v14 = *(char **)v4;
        }
        *(_QWORD *)v4 = v13;
        *((_QWORD *)v4 + 1) = v8;
        *((_QWORD *)v4 + 2) = v12 + 8 * (_QWORD)a2;
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v7 = v5;
        v8 = v7 + 1;
      }
      *((_QWORD *)v4 + 1) = v8;
      ++v2;
    }
    while (v2 != v3);
  }
}

uint64_t HALS_PlugInDevice::_GetNumberControls(HALS_PlugInDevice *this)
{
  return (*((_QWORD *)this + 175) - *((_QWORD *)this + 174)) >> 3;
}

HALS_ObjectMap *HALS_PlugInDevice::_CopyControlByIndex(HALS_PlugInDevice *this, HALS_Object *a2)
{
  uint64_t v2;
  HALS_ObjectMap *v3;

  v2 = *((_QWORD *)this + 174);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 175) - v2) >> 3))
    v3 = 0;
  else
    v3 = *(HALS_ObjectMap **)(v2 + 8 * a2);
  HALS_ObjectMap::RetainObject(v3, a2);
  return v3;
}

HALS_ObjectMap *HALS_PlugInDevice::_CopyControlByDescription(HALS_PlugInDevice *this, HALS_Object *a2, int a3, int a4)
{
  HALS_ObjectMap **i;
  HALS_ObjectMap *v5;

  for (i = (HALS_ObjectMap **)*((_QWORD *)this + 174); i != *((HALS_ObjectMap ***)this + 175); ++i)
  {
    v5 = *i;
    if (*((_DWORD *)*i + 5) == (_DWORD)a2 && *((_DWORD *)v5 + 12) == a3 && *((_DWORD *)v5 + 13) == a4)
      goto LABEL_8;
  }
  v5 = 0;
LABEL_8:
  HALS_ObjectMap::RetainObject(v5, a2);
  return v5;
}

void HALS_PlugInDevice::_ClientDescriptionChanged(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __CFDictionary *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __CFDictionary *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  CFMutableDictionaryRef v38;
  CFMutableDictionaryRef Mutable;
  std::__shared_weak_count *v40;

  v4 = *(_QWORD *)(a1 + 1312);
  v5 = *(__CFDictionary **)(v4 + 400);
  v6 = *(std::__shared_weak_count **)(v4 + 408);
  Mutable = v5;
  v40 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *(unsigned int *)(a1 + 1324);
  if (a2)
    v10 = *(unsigned int *)(a2 + 232);
  else
    v10 = 0;
  v36 = 0x676C6F6263646573;
  LODWORD(v37) = 0;
  v11 = (*(uint64_t (**)(__CFDictionary *, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v5 + 544))(v5, v9, v10, &v36);
  v12 = v11;
  if (!v6)
    goto LABEL_11;
  v13 = (unint64_t *)&v6->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v12)
      return;
  }
  else
  {
LABEL_11:
    if (!v11)
      return;
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 728))(a1);
  if (*(_QWORD *)(a1 + 536) == v15)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
    LOWORD(v40) = 257;
    CACFDictionary::AddUInt32(&Mutable, CFSTR("kind"), 0);
    v23 = *(_QWORD *)(a1 + 1312);
    v24 = *(_QWORD *)(v23 + 400);
    v25 = *(std::__shared_weak_count **)(v23 + 408);
    v36 = v24;
    v37 = v25;
    v38 = Mutable;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v28 = *(unsigned int *)(a1 + 1324);
    if (a2)
      v29 = *(unsigned int *)(a2 + 232);
    else
      v29 = 0;
    v34 = 0x676C6F6263646573;
    v35 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, CFMutableDictionaryRef *))(*(_QWORD *)v24 + 576))(v24, v28, v29, &v34, 0, 0, 8, &v38);
    if (v25)
    {
      v32 = (unint64_t *)&v25->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  }
  else
  {
    v34 = *(_QWORD *)(v15 + 8);
    v16 = *(_QWORD *)(a1 + 1312);
    v17 = *(__CFDictionary **)(v16 + 400);
    v18 = *(std::__shared_weak_count **)(v16 + 408);
    Mutable = v17;
    v40 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v21 = *(unsigned int *)(a1 + 1324);
    if (a2)
      v22 = *(unsigned int *)(a2 + 232);
    else
      v22 = 0;
    v36 = 0x676C6F6263646573;
    LODWORD(v37) = 0;
    (*(void (**)(__CFDictionary *, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, uint64_t *))(*(_QWORD *)v17 + 576))(v17, v21, v22, &v36, 0, 0, 8, &v34);
    if (v18)
    {
      v30 = (unint64_t *)&v18->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
}

void sub_1B587D418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va1);
  _Unwind_Resume(a1);
}

void HALS_PlugInDevice::_SetDSPForClient(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  unsigned __int8 v7;
  _QWORD block[6];
  char v9;
  int v10;
  int v11;
  int v12;
  int v13;

  if (a3)
    v3 = *(_DWORD *)(a3 + 16);
  else
    v3 = 0;
  v4 = *(_DWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 1324);
  v6 = *(_DWORD *)(*(_QWORD *)(a1 + 1312) + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN17HALS_PlugInDevice32HandlePlugIn_RequestConfigChangeENS_19ConfigChangePayloadEbj_block_invoke;
  block[3] = &__block_descriptor_tmp_21_873;
  v10 = v6;
  v11 = v4;
  block[4] = 4444;
  block[5] = 0;
  v9 = 0;
  v12 = v3;
  v13 = v5;
  v7 = atomic_load((unsigned __int8 *)(a1 + 1464));
  if ((v7 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(a1 + 1465));
  dispatch_async(*(dispatch_queue_t *)(a1 + 1432), block);
}

void HALS_PlugInDevice::PerformNonDriverConfigChange(HALS_PlugInDevice *this, BOOL a2, int a3)
{
  int v3;
  int v4;
  int v5;
  _QWORD block[6];
  char v7;
  int v8;
  int v9;
  int v10;
  int v11;

  v3 = *((_DWORD *)this + 4);
  v4 = *((_DWORD *)this + 331);
  v5 = *(_DWORD *)(*((_QWORD *)this + 164) + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN17HALS_PlugInDevice32HandlePlugIn_RequestConfigChangeENS_19ConfigChangePayloadEbj_block_invoke;
  block[3] = &__block_descriptor_tmp_21_873;
  v8 = v5;
  v9 = v3;
  block[4] = 0;
  block[5] = 0;
  v7 = 0;
  v10 = a3;
  v11 = v4;
  LOBYTE(v3) = atomic_load((unsigned __int8 *)this + 1464);
  if ((v3 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)this + 1465);
  dispatch_async(*((dispatch_queue_t *)this + 179), block);
}

void HALS_PlugInDevice::ConfigChange_HardwareReferenceStream(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  _QWORD block[6];
  int v5;
  int v6;

  v3 = *(_DWORD *)(a1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN17HALS_PlugInDevice36ConfigChange_HardwareReferenceStreamEPK11HALS_Clientj_block_invoke;
  block[3] = &__block_descriptor_tmp_10_864;
  v5 = v3;
  v6 = a3;
  block[4] = a1;
  block[5] = a2;
  LOBYTE(v3) = atomic_load((unsigned __int8 *)(a1 + 1464));
  if ((v3 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(a1 + 1465));
  dispatch_async(*(dispatch_queue_t *)(a1 + 1432), block);
}

void HALS_PlugInDevice::HandlePlugIn_PropertiesChanged(HALS_PlugInDevice *this, uint64_t a2, const AudioObjectPropertyAddress *a3)
{
  HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*((unsigned int *)this + 4), 0, a2, a3);
}

void `non-virtual thunk to'HALS_PlugInDevice::~HALS_PlugInDevice(HALS_PlugInDevice *this)
{
  HALS_PlugInDevice::~HALS_PlugInDevice((HALS_PlugInDevice *)((char *)this - 1304));
}

{
  HALS_PlugInDevice::~HALS_PlugInDevice((HALS_PlugInDevice *)((char *)this - 1304));
  JUMPOUT(0x1B5E50688);
}

void `non-virtual thunk to'HALS_PlugInDevice::HandlePlugIn_PropertiesChanged(HALS_PlugInDevice *this, uint64_t a2, const AudioObjectPropertyAddress *a3)
{
  HALS_Object::PropertiesChanged((HALS_PlugInDevice *)((char *)this - 1304), (HALS_NotificationManager *)*((unsigned int *)this - 322), 0, a2, a3);
}

void sub_1B587D990(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ___ZN17HALS_PlugInDevice36ConfigChange_HardwareReferenceStreamEPK11HALS_Clientj_block_invoke(uint64_t a1)
{
  uint64_t v2;
  HALS_Object *v3;
  HALS_ObjectMap *v4;
  const AudioObjectPropertyAddress *v5;
  HALS_NotificationManager *v6;
  uint64_t v7;
  const AudioObjectPropertyAddress *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  const AudioObjectPropertyAddress *v15;
  const AudioObjectPropertyAddress *v16;
  const AudioObjectPropertyAddress *v17;
  const AudioObjectPropertyAddress *v18;
  const AudioObjectPropertyAddress *v19;
  HALS_Object *v20;
  HALS_Stream **v21;
  HALS_Stream **v22;
  unsigned int v23;
  HALS_ObjectMap ***v24;
  const AudioObjectPropertyAddress *v25;
  const AudioObjectPropertyAddress *v26;
  const AudioObjectPropertyAddress *v27;
  const AudioObjectPropertyAddress *v28;
  const AudioObjectPropertyAddress *v29;
  uint64_t v30;
  const AudioObjectPropertyAddress *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  os_unfair_lock_s *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  AudioObjectPropertyAddress v61;
  void *__p;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71[3];
  _BYTE v72[32];
  uint8_t buf[40];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v4 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 48));
  if (v4)
  {
    kdebug_trace();
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 502;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v2 + 156;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInDevice::ConfigChange_HardwareReferenceStream: %s  --->", buf, 0x1Cu);
    }
    memset(buf, 0, 32);
    memset(v71, 0, sizeof(v71));
    v6 = (HALS_NotificationManager *)*(unsigned int *)(v2 + 16);
    strcpy(v72, "bgfcbolg");
    v72[9] = 0;
    *(_WORD *)&v72[10] = 0;
    HALS_NotificationManager::PropertiesChanged_Sync(v6, 0, 1u, (const AudioObjectPropertyAddress *)v72, v5);
    v68 = 0;
    v69 = 0;
    v70 = 0;
    v7 = *(_QWORD *)(v2 + 1416);
    if (v7)
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 216))(v7, &v68);
    v66 = 0;
    v67 = 0;
    HALS_System::GetInstance(v72, 0, &v66);
    HALS_IOContext_Manager::pause_contexts_for_device(*(os_unfair_lock_s **)(*(_QWORD *)v72 + 1392), (HALS_IODevice *)v2);
    v9 = *(std::__shared_weak_count **)&v72[8];
    if (*(_QWORD *)&v72[8])
    {
      v10 = (unint64_t *)(*(_QWORD *)&v72[8] + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v67;
    if (v67)
    {
      p_shared_owners = (unint64_t *)&v67->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    strcpy(v72, "ffidbolg");
    v72[9] = 0;
    *(_WORD *)&v72[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)buf, (AudioObjectPropertyAddress *)v72, v8);
    strcpy(v72, "egfcbolg");
    v72[9] = 0;
    *(_WORD *)&v72[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)buf, (AudioObjectPropertyAddress *)v72, v15);
    strcpy(v72, "#mtsbolg");
    v72[9] = 0;
    *(_WORD *)&v72[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)buf, (AudioObjectPropertyAddress *)v72, v16);
    strcpy(v72, "#mtstpni");
    v72[9] = 0;
    *(_WORD *)&v72[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)buf, (AudioObjectPropertyAddress *)v72, v17);
    strcpy(v72, "cntltpni");
    v72[9] = 0;
    *(_WORD *)&v72[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)buf, (AudioObjectPropertyAddress *)v72, v18);
    strcpy(v72, "tfastpni");
    v72[9] = 0;
    *(_WORD *)&v72[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)buf, (AudioObjectPropertyAddress *)v72, v19);
    memset(v72, 0, 24);
    HALS_Device::CopyStreamList(v2, 1, (char **)v72);
    v21 = *(HALS_Stream ***)v72;
    v22 = *(HALS_Stream ***)&v72[8];
    while (1)
    {
      if (v21 == v22)
      {
        v23 = 0;
        goto LABEL_22;
      }
      if (HALS_Stream::IsReferenceStream(*v21))
        break;
      ++v21;
    }
    v23 = *((_DWORD *)*v21 + 4);
LABEL_22:
    v24 = HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)v72, v20);
    memset(v72, 0, 24);
    *(_QWORD *)&v72[24] = v23;
    __p = (void *)0x676C6F627363686ELL;
    LODWORD(v63) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v24, (AudioObjectPropertyAddress *)&__p, v25);
    __p = (void *)0x676C6F6273666D74;
    LODWORD(v63) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v72, (AudioObjectPropertyAddress *)&__p, v26);
    __p = (void *)0x676C6F6273666D61;
    LODWORD(v63) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v72, (AudioObjectPropertyAddress *)&__p, v27);
    __p = (void *)0x676C6F6270667420;
    LODWORD(v63) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v72, (AudioObjectPropertyAddress *)&__p, v28);
    __p = (void *)0x676C6F6270667461;
    LODWORD(v63) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v72, (AudioObjectPropertyAddress *)&__p, v29);
    CAPropertyAddressListVector::AppendItem((CAPropertyAddressListVector *)v71, (uint64_t **)v72);
    v30 = *(unsigned int *)(a1 + 52);
    __p = 0;
    v63 = 0;
    v64 = 0;
    v65 = v30;
    *(_QWORD *)&v61.mSelector = 0x676C6F626263766CLL;
    v61.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&__p, &v61, v31);
    CAPropertyAddressListVector::AppendItem((CAPropertyAddressListVector *)v71, (uint64_t **)&__p);
    v32 = *(_QWORD *)(v2 + 1416);
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 928))(v32);
    if (__p)
      operator delete(__p);
    if (*(_QWORD *)v72)
      operator delete(*(void **)v72);
    v59 = 0;
    v60 = 0;
    HALS_System::GetInstance(v72, 0, &v59);
    HALS_IOContext_Manager::rebuild_engine_for_device(*(HALS_IOContext_Manager **)(*(_QWORD *)v72 + 1392), (const HALS_IODevice *)v2);
    v33 = *(std::__shared_weak_count **)&v72[8];
    if (*(_QWORD *)&v72[8])
    {
      v34 = (unint64_t *)(*(_QWORD *)&v72[8] + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = v60;
    if (v60)
    {
      v37 = (unint64_t *)&v60->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v72 = 136315650;
      *(_QWORD *)&v72[4] = "HALS_PlugInDevice.cpp";
      *(_WORD *)&v72[12] = 1024;
      *(_DWORD *)&v72[14] = 564;
      *(_WORD *)&v72[18] = 2080;
      *(_QWORD *)&v72[20] = v2 + 156;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInDevice::ConfigChange_HardwareReferenceStream: %s  --- sending notifications", v72, 0x1Cu);
    }
    kdebug_trace();
    v39 = *(_QWORD *)(a1 + 40);
    if (v39)
      v40 = *(_DWORD *)(v39 + 16);
    else
      v40 = 0;
    HALS_NotificationManager::GroupPropertiesChanged(1, *(_DWORD *)(v2 + 16), v40, (uint64_t)buf, v71, (uint64_t)&v68);
    kdebug_trace();
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v72 = 136315650;
      *(_QWORD *)&v72[4] = "HALS_PlugInDevice.cpp";
      *(_WORD *)&v72[12] = 1024;
      *(_DWORD *)&v72[14] = 573;
      *(_WORD *)&v72[18] = 2080;
      *(_QWORD *)&v72[20] = v2 + 156;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInDevice::ConfigChange_HardwareReferenceStream: %s  --- restarting IO", v72, 0x1Cu);
    }
    v41 = *(_QWORD *)(v2 + 1416);
    if (v41)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 232))(v41);
      (*(void (**)(_QWORD, void **))(**(_QWORD **)(v2 + 1416) + 224))(*(_QWORD *)(v2 + 1416), &v68);
    }
    v57 = 0;
    v58 = 0;
    HALS_System::GetInstance(v72, 0, &v57);
    v42 = (os_unfair_lock_s *)(*(_QWORD *)(*(_QWORD *)v72 + 1392) + 16);
    os_unfair_lock_lock(v42);
    os_unfair_lock_unlock(v42);
    v43 = *(std::__shared_weak_count **)&v72[8];
    if (*(_QWORD *)&v72[8])
    {
      v44 = (unint64_t *)(*(_QWORD *)&v72[8] + 8);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = v58;
    if (v58)
    {
      v47 = (unint64_t *)&v58->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v55 = 0;
    v56 = 0;
    HALS_System::GetInstance(v72, 0, &v55);
    HALS_IOContext_Manager::resume_contexts_for_device(*(os_unfair_lock_s **)(*(_QWORD *)v72 + 1392), (HALS_IODevice *)v2);
    v49 = *(std::__shared_weak_count **)&v72[8];
    if (*(_QWORD *)&v72[8])
    {
      v50 = (unint64_t *)(*(_QWORD *)&v72[8] + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = v56;
    if (v56)
    {
      v53 = (unint64_t *)&v56->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    if (v68)
    {
      v69 = v68;
      operator delete(v68);
    }
    *(_QWORD *)v72 = v71;
    std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
    if (*(_QWORD *)buf)
      operator delete(*(void **)buf);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 590;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v2 + 156;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInDevice::ConfigChange_HardwareReferenceStream: %s  <---", buf, 0x1Cu);
    }
    kdebug_trace();
  }
  HALS_ObjectMap::ReleaseObject(v4, v3);
}

void sub_1B587E1A8(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  AMCP::Log::Scope_Registry *v29;
  NSObject *v30;
  _opaque_pthread_t *v31;
  mach_port_t v32;

  if ((_DWORD)a2)
  {
    HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)(v27 - 144), a2);
    v29 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(a1);
    AMCP::Log::Scope_Registry::get(v29);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)(v27 - 144), "com.apple.coreaudio", "AMCP");
    v30 = **(NSObject ***)(v27 - 144);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v27 - 144);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v31 = pthread_self();
      v32 = pthread_mach_thread_np(v31);
      *(_DWORD *)(v27 - 144) = 67109634;
      *(_DWORD *)(v27 - 140) = v32;
      *(_WORD *)(v27 - 136) = 2080;
      *(_QWORD *)(v26 + 10) = "HALS_PlugInDevice.cpp";
      *(_WORD *)(v27 - 126) = 1024;
      *(_DWORD *)(v27 - 124) = 559;
      _os_log_error_impl(&dword_1B57BA000, v30, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception trying to notify about reference stream", (uint8_t *)(v27 - 144), 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B587DD70);
  }
  _Unwind_Resume(a1);
}

void sub_1B587E374(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  void *v28;

  if (a2)
  {
    __cxa_end_catch();
    if (a23)
    {
      a24 = a23;
      operator delete(a23);
    }
    v28 = *(void **)(v26 - 112);
    a17 = (void **)&a26;
    std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100](&a17);
    if (v28)
      operator delete(v28);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B587E0D8);
  }
  _Unwind_Resume(a1);
}

void sub_1B587E388(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x1B587E390);
  _Unwind_Resume(a1);
}

void sub_1B587E3D0(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1B587E3E0(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B587E3E8);
  __clang_call_terminate(a1);
}

uint64_t CAPropertyAddressListVector::AppendItem(CAPropertyAddressListVector *this, uint64_t **a2)
{
  unint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  _BYTE v26[24];
  char *v27;
  _QWORD v28[3];
  char v29;
  __int128 v30;
  __int128 v31;

  v5 = (char *)this + 16;
  v4 = *((_QWORD *)this + 2);
  v6 = *((_QWORD *)this + 1);
  if (v6 >= v4)
  {
    v9 = (uint64_t)(v6 - *(_QWORD *)this) >> 5;
    if ((unint64_t)(v9 + 1) >> 59)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v10 = v4 - *(_QWORD *)this;
    v11 = v10 >> 4;
    if (v10 >> 4 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v27 = v5;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CAPropertyAddressList>>(v12);
    else
      v13 = 0;
    v14 = v12 + 32 * v9;
    v25 = v12;
    *(_QWORD *)v26 = v14;
    *(_QWORD *)&v26[8] = v14;
    *(_QWORD *)&v26[16] = v12 + 32 * v13;
    *(_QWORD *)v14 = 0;
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 16) = 0;
    std::vector<CAPropertyAddress>::__init_with_size[abi:ne180100]<CAPropertyAddress*,CAPropertyAddress*>((char *)v14, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 2));
    *(_QWORD *)(v14 + 24) = a2[3];
    v15 = *(_QWORD *)v26;
    *(_QWORD *)&v26[8] += 32;
    v16 = *(_QWORD *)this;
    v17 = *((_QWORD *)this + 1);
    *(_QWORD *)&v31 = *(_QWORD *)v26;
    *((_QWORD *)&v31 + 1) = *(_QWORD *)v26;
    v30 = v31;
    v28[0] = v5;
    v28[1] = &v30;
    v28[2] = &v31;
    v29 = 0;
    if (v17 != v16)
    {
      v18 = v17;
      do
      {
        *(_QWORD *)(v15 - 32) = 0;
        *(_QWORD *)(v15 - 24) = 0;
        *(_QWORD *)(v15 - 16) = 0;
        v19 = *(uint64_t **)(v18 - 32);
        v20 = *(uint64_t **)(v18 - 24);
        v18 -= 32;
        std::vector<CAPropertyAddress>::__init_with_size[abi:ne180100]<CAPropertyAddress*,CAPropertyAddress*>((char *)(v15 - 32), v19, v20, 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v19) >> 2));
        *(_QWORD *)(v15 - 8) = *(_QWORD *)(v17 - 8);
        v15 = *((_QWORD *)&v31 + 1) - 32;
        *((_QWORD *)&v31 + 1) -= 32;
        v17 = v18;
      }
      while (v18 != v16);
    }
    v29 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CAPropertyAddressList>,std::reverse_iterator<CAPropertyAddressList*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v28);
    v21 = *((_QWORD *)this + 2);
    v22 = *(_OWORD *)&v26[8];
    v24 = *(_QWORD *)&v26[8];
    v23 = *(_OWORD *)this;
    *(_QWORD *)this = v15;
    *(_OWORD *)v26 = v23;
    *(_OWORD *)((char *)this + 8) = v22;
    *(_QWORD *)&v26[16] = v21;
    v25 = v23;
    result = std::__split_buffer<CAPropertyAddressList>::~__split_buffer((uint64_t)&v25);
    v8 = v24;
  }
  else
  {
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    result = (uint64_t)std::vector<CAPropertyAddress>::__init_with_size[abi:ne180100]<CAPropertyAddress*,CAPropertyAddress*>((char *)v6, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 2));
    *(_QWORD *)(v6 + 24) = a2[3];
    v8 = v6 + 32;
    *((_QWORD *)this + 1) = v6 + 32;
  }
  *((_QWORD *)this + 1) = v8;
  return result;
}

void sub_1B587E5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__split_buffer<CAPropertyAddressList>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CAPropertyAddressList>>(unint64_t a1)
{
  if (a1 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a1);
}

char *std::vector<CAPropertyAddress>::__init_with_size[abi:ne180100]<CAPropertyAddress*,CAPropertyAddress*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<AudioObjectPropertyAddress>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_DWORD *)(v7 + 8) = *((_DWORD *)a2 + 2);
      *(_QWORD *)v7 = v8;
      v7 += 12;
      a2 = (uint64_t *)((char *)a2 + 12);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B587E6A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<CAPropertyAddressList>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(void **)(v2 - 32);
    *(_QWORD *)(a1 + 16) = v2 - 32;
    if (v4)
    {
      *(_QWORD *)(v2 - 24) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CAPropertyAddressList>,std::reverse_iterator<CAPropertyAddressList*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      v5 = *(void **)v3;
      if (*(_QWORD *)v3)
      {
        *(_QWORD *)(v3 + 8) = v5;
        operator delete(v5);
      }
      v3 += 32;
    }
  }
  return a1;
}

void ___ZN17HALS_PlugInDevice32HandlePlugIn_RequestConfigChangeENS_19ConfigChangePayloadEbj_block_invoke(uint64_t a1)
{
  HALS_ObjectMap *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  const AudioObjectPropertyAddress *v8;
  HALS_NotificationManager *v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  HALS_DeviceState *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  HALB_Mutex *v36;
  AMCP::Log::Scope_Registry *v37;
  HALS_DeviceState *v38;
  CAPropertyAddressListVector *v39;
  const AudioObjectPropertyAddress *v40;
  _BOOL4 v41;
  _BOOL4 v42;
  CAPropertyAddressList *v43;
  uint64_t v44;
  uint64_t v45;
  const AudioObjectPropertyAddress *v46;
  _BOOL4 v47;
  HALS_Object *v48;
  int v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  NSObject *v57;
  unint64_t *v58;
  unint64_t v59;
  _opaque_pthread_t *v60;
  mach_port_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  const AudioObjectPropertyAddress *v69;
  const AudioObjectPropertyAddress *v70;
  const AudioObjectPropertyAddress *v71;
  const AudioObjectPropertyAddress *v72;
  unsigned int *v73;
  unsigned int *v74;
  uint64_t v75;
  os_unfair_lock_s *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  HALS_Object *v95;
  int v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  BOOL v99;
  BOOL v100[2];
  _QWORD v101[6];
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  void *__p;
  void *v109;
  uint64_t v110;
  CFTypeRef cf;
  uint64_t v112;
  std::__shared_weak_count *v113;
  void *v114;
  unsigned int *v115;
  uint64_t v116;
  CAPropertyAddressList *v117;
  CAPropertyAddressList *v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  _BYTE v122[18];
  __int16 v123;
  uint64_t v124;
  _BYTE v125[28];
  __int16 v126;
  int v127;
  _BYTE buf[28];
  _QWORD v129[6];

  v129[3] = *MEMORY[0x1E0C80C00];
  v2 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 56));
  v3 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 60));
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(unsigned __int8 *)(a1 + 48);
    v7 = *(unsigned int *)(a1 + 64);
    kdebug_trace();
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2101;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v3 + 156;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInDevice::HandlePlugIn_RequestConfigChange: %s  --->", buf, 0x1Cu);
    }
    v120 = 0u;
    v121 = 0u;
    v118 = 0;
    v119 = 0;
    v117 = 0;
    v9 = (HALS_NotificationManager *)*(unsigned int *)(v3 + 16);
    strcpy(v125, "bgfcbolg");
    v125[9] = 0;
    *(_WORD *)&v125[10] = 0;
    HALS_NotificationManager::PropertiesChanged_Sync(v9, v7, 1u, (const AudioObjectPropertyAddress *)v125, v8);
    v114 = 0;
    v115 = 0;
    v116 = 0;
    v112 = 0;
    v113 = 0;
    HALS_System::GetInstance(buf, 0, &v112);
    v10 = *(_QWORD *)buf;
    v11 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 200))(v3);
    v12 = v11;
    if (v11)
      CFRetain(v11);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v12);
    HALS_System::GetRawDeviceListUsingClockDevice(v10, (uint64_t)&v114, &cf);
    if (cf)
      CFRelease(cf);
    v13 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v14 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v113;
    if (v113)
    {
      p_shared_owners = (unint64_t *)&v113->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    __p = 0;
    v109 = 0;
    v110 = 0;
    v19 = *(_QWORD *)(v3 + 1416);
    if (v19)
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v19 + 216))(v19, &__p);
    v106 = 0;
    v107 = 0;
    HALS_System::GetInstance(buf, 0, &v106);
    HALS_IOContext_Manager::pause_contexts_for_device(*(os_unfair_lock_s **)(*(_QWORD *)buf + 1392), (HALS_IODevice *)v3);
    v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v21 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = v107;
    if (v107)
    {
      v24 = (unint64_t *)&v107->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)buf);
    HALS_DeviceState::Capture(v26, (HALS_Device *)v3, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v125 = 136315650;
      *(_QWORD *)&v125[4] = "HALS_PlugInDevice.cpp";
      *(_WORD *)&v125[12] = 1024;
      *(_DWORD *)&v125[14] = 2132;
      *(_WORD *)&v125[18] = 2080;
      *(_QWORD *)&v125[20] = v3 + 156;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInDevice::HandlePlugIn_RequestConfigChange: %s  --- calling driver", v125, 0x1Cu);
    }
    if (v6)
    {
      kdebug_trace();
      v27 = *(_QWORD *)(v3 + 1312);
      v28 = *(_QWORD *)(v27 + 400);
      v29 = *(_QWORD *)(v27 + 408);
      *(_QWORD *)v125 = v28;
      *(_QWORD *)&v125[8] = v29;
      if (v29)
      {
        v30 = (unint64_t *)(v29 + 8);
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      v32 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v28 + 96))(v28, *(unsigned int *)(v3 + 1324), v4, v5);
      v33 = *(std::__shared_weak_count **)&v125[8];
      if (*(_QWORD *)&v125[8])
      {
        v34 = (unint64_t *)(*(_QWORD *)&v125[8] + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      kdebug_trace();
      if (v32 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v125 = 136315906;
        *(_QWORD *)&v125[4] = "HALS_PlugInDevice.cpp";
        *(_WORD *)&v125[12] = 1024;
        *(_DWORD *)&v125[14] = 2143;
        *(_WORD *)&v125[18] = 2080;
        *(_QWORD *)&v125[20] = v3 + 156;
        v126 = 1024;
        v127 = v32;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInDevice::HandlePlugIn_RequestConfigChange: %s  --- driver encountered error %d", v125, 0x22u);
      }
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v125 = 136315650;
      *(_QWORD *)&v125[4] = "HALS_PlugInDevice.cpp";
      *(_WORD *)&v125[12] = 1024;
      *(_DWORD *)&v125[14] = 2148;
      *(_WORD *)&v125[18] = 2080;
      *(_QWORD *)&v125[20] = v3 + 156;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInDevice::HandlePlugIn_RequestConfigChange: %s  --- driver returned", v125, 0x1Cu);
    }
    v102 = 0;
    v103 = &v102;
    v104 = 0x2000000000;
    v105 = 1;
    v101[0] = MEMORY[0x1E0C809B0];
    v101[1] = 0x40000000;
    v101[2] = ___ZN17HALS_PlugInDevice33_HandlePlugIn_RequestConfigChangeENS_19ConfigChangePayloadEj_block_invoke;
    v101[3] = &unk_1E696FA40;
    v101[4] = &v102;
    v101[5] = v3;
    v36 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
    HALB_CommandGate::ExecuteCommand(v36, (uint64_t)v101);
    if (*((_BYTE *)v103 + 24))
    {
      *(_WORD *)v100 = 0;
      HALS_PlugInDevice::UpdateStreams((HALS_PlugInDevice *)v3, v100);
      v99 = 0;
      HALS_PlugInDevice::UpdateControls((HALS_PlugInDevice *)v3, &v99);
      HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)v125);
      HALS_DeviceState::Capture(v38, (HALS_Device *)v3, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
      HALS_DeviceState::Compare((HALS_DeviceState *)buf, (const HALS_DeviceState *)v125, (const AudioObjectPropertyAddress *)&v120, &v117, v39);
      v97 = 0x676C6F6200000000;
      v41 = v100[1];
      v42 = v100[0];
      if (v100[1] || v100[0])
      {
        LODWORD(v97) = 1937009955;
        LODWORD(v98) = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v120, (AudioObjectPropertyAddress *)&v97, v40);
        if (v41)
        {
          v97 = 0x696E707473746D23;
          LODWORD(v98) = 0;
          CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v120, (AudioObjectPropertyAddress *)&v97, v40);
        }
        if (v42)
        {
          v97 = 0x6F75747073746D23;
          LODWORD(v98) = 0;
          CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v120, (AudioObjectPropertyAddress *)&v97, v40);
        }
      }
      if (v99)
      {
        v97 = 0x676C6F626374726CLL;
        LODWORD(v98) = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v120, (AudioObjectPropertyAddress *)&v97, v40);
      }
      if ((_QWORD)v120 == *((_QWORD *)&v120 + 1))
      {
        v43 = v117;
        while (v43 != v118)
        {
          v44 = *(_QWORD *)v43;
          v45 = *((_QWORD *)v43 + 1);
          v43 = (CAPropertyAddressList *)((char *)v43 + 32);
          if (v44 != v45)
            goto LABEL_58;
        }
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v122 = 136315650;
          *(_QWORD *)&v122[4] = "HALS_PlugInDevice.cpp";
          *(_WORD *)&v122[12] = 1024;
          *(_DWORD *)&v122[14] = 2231;
          v123 = 2080;
          v124 = v3 + 156;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInDevice::HandlePlugIn_RequestConfigChange: %s  but nothing changed", v122, 0x1Cu);
        }
      }
      else
      {
LABEL_58:
        v97 = 0x676C6F6264696666;
        LODWORD(v98) = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v120, (AudioObjectPropertyAddress *)&v97, v40);
      }
      strcpy(v122, "egfcbolg");
      v122[9] = 0;
      *(_WORD *)&v122[10] = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v120, (AudioObjectPropertyAddress *)v122, v46);
      *(_QWORD *)v122 = (char *)&v127 + 2;
      std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)v122);
      std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*(_QWORD **)&v125[16]);
    }
    else
    {
      AMCP::Log::Scope_Registry::get(v37);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v125, "com.apple.coreaudio", "AMCP");
      v56 = *(std::__shared_weak_count **)&v125[8];
      v57 = **(NSObject ***)v125;
      if (*(_QWORD *)&v125[8])
      {
        v58 = (unint64_t *)(*(_QWORD *)&v125[8] + 8);
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
      {
        v60 = pthread_self();
        v61 = pthread_mach_thread_np(v60);
        *(_DWORD *)v125 = 67109634;
        *(_DWORD *)&v125[4] = v61;
        *(_WORD *)&v125[8] = 2080;
        *(_QWORD *)&v125[10] = "HALS_PlugInDevice.cpp";
        *(_WORD *)&v125[18] = 1024;
        *(_DWORD *)&v125[20] = 2158;
        _os_log_impl(&dword_1B57BA000, v57, OS_LOG_TYPE_INFO, "%6u %32s:%-5d The device is no longer active after performing the config change, skip updating the device", v125, 0x18u);
      }
    }
    _Block_object_dispose(&v102, 8);
    *(_QWORD *)v125 = v129;
    std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)v125);
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*(_QWORD **)&buf[16]);
    v62 = *(_QWORD *)(v3 + 1416);
    if (v62)
      (*(void (**)(uint64_t))(*(_QWORD *)v62 + 928))(v62);
    *(_QWORD *)v125 = 0;
    *(_QWORD *)&v125[8] = 0;
    HALS_System::GetInstance(buf, 0, (uint64_t *)v125);
    HALS_IOContext_Manager::rebuild_engine_for_device(*(HALS_IOContext_Manager **)(*(_QWORD *)buf + 1392), (const HALS_IODevice *)v3);
    v63 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v64 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v66 = *(std::__shared_weak_count **)&v125[8];
    if (*(_QWORD *)&v125[8])
    {
      v67 = (unint64_t *)(*(_QWORD *)&v125[8] + 8);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2253;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v3 + 156;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInDevice::HandlePlugIn_RequestConfigChange: %s  --- sending notifications", buf, 0x1Cu);
    }
    if (!v6 && v4 == 4444)
    {
      strcpy(buf, "tsivbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v120, (AudioObjectPropertyAddress *)buf, v69);
      strcpy(buf, "TaPsbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v120, (AudioObjectPropertyAddress *)buf, v70);
      strcpy(buf, "CaPsbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v120, (AudioObjectPropertyAddress *)buf, v71);
      strcpy(buf, "#mtsbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v120, (AudioObjectPropertyAddress *)buf, v72);
    }
    kdebug_trace();
    HALS_NotificationManager::GroupPropertiesChanged(1, *(_DWORD *)(v3 + 16), v7, (uint64_t)&v120, (uint64_t *)&v117, (uint64_t)&__p);
    v73 = (unsigned int *)v114;
    v74 = v115;
    while (v73 != v74)
      HALS_NotificationManager::GroupPropertiesChanged(1, *v73++, v7, (uint64_t)&v120, (uint64_t *)&v117, (uint64_t)&__p);
    kdebug_trace();
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2275;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v3 + 156;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInDevice::HandlePlugIn_RequestConfigChange: %s  --- restarting IO", buf, 0x1Cu);
    }
    v75 = *(_QWORD *)(v3 + 1416);
    if (v75)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v75 + 232))(v75);
      (*(void (**)(_QWORD, void **))(**(_QWORD **)(v3 + 1416) + 224))(*(_QWORD *)(v3 + 1416), &__p);
    }
    v102 = 0;
    v103 = 0;
    HALS_System::GetInstance(buf, 0, &v102);
    v76 = (os_unfair_lock_s *)(*(_QWORD *)(*(_QWORD *)buf + 1392) + 16);
    os_unfair_lock_lock(v76);
    os_unfair_lock_unlock(v76);
    v77 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v78 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    v80 = (std::__shared_weak_count *)v103;
    if (v103)
    {
      v81 = (unint64_t *)(v103 + 1);
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    *(_QWORD *)v122 = 0;
    *(_QWORD *)&v122[8] = 0;
    HALS_System::GetInstance(buf, 0, (uint64_t *)v122);
    HALS_IOContext_Manager::resume_contexts_for_device(*(os_unfair_lock_s **)(*(_QWORD *)buf + 1392), (HALS_IODevice *)v3);
    v83 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v84 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    v86 = *(std::__shared_weak_count **)&v122[8];
    if (*(_QWORD *)&v122[8])
    {
      v87 = (unint64_t *)(*(_QWORD *)&v122[8] + 8);
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    v97 = 0;
    v98 = 0;
    HALS_System::GetInstance(buf, 0, &v97);
    HALS_System::CheckForDefaultDeviceChanges(*(HALS_System **)buf);
    v89 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v90 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    v92 = v98;
    if (v98)
    {
      v93 = (unint64_t *)&v98->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    if (__p)
    {
      v109 = __p;
      operator delete(__p);
    }
    if (v114)
      operator delete(v114);
    *(_QWORD *)buf = &v117;
    std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if ((_QWORD)v120)
      operator delete((void *)v120);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2295;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v3 + 156;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInDevice::HandlePlugIn_RequestConfigChange: %s  <---", buf, 0x1Cu);
    }
    kdebug_trace();
  }
  else
  {
    v47 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
    if (v2)
    {
      if (v47)
      {
        v49 = *(_DWORD *)(a1 + 60);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2080;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v49;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInDevice::HandlePlugIn_RequestConfigChange: Device %u is no longer valid, calling abort config change", buf, 0x18u);
      }
      if (*(_BYTE *)(a1 + 48))
      {
        v50 = *((_QWORD *)v2 + 50);
        v51 = (std::__shared_weak_count *)*((_QWORD *)v2 + 51);
        *(_QWORD *)buf = v50;
        *(_QWORD *)&buf[8] = v51;
        if (v51)
        {
          v52 = (unint64_t *)&v51->__shared_owners_;
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
        }
        (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v50 + 104))(v50, *(unsigned int *)(a1 + 68), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
        if (v51)
        {
          v54 = (unint64_t *)&v51->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
      }
    }
    else if (v47)
    {
      v96 = *(_DWORD *)(a1 + 60);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "HALS_PlugInDevice.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2090;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v96;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInDevice::HandlePlugIn_RequestConfigChange: Failed to perform or abort config change request for device %u", buf, 0x18u);
    }
  }
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v3, v48);
  HALS_ObjectMap::ReleaseObject(v2, v95);
}

void sub_1B587F67C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  HALS_ObjectMap *v44;
  HALS_ObjectMap *v45;
  uint64_t v46;
  HALS_Object *v48;
  HALS_Object *v49;

  if (a2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v46 - 160);
    HALS_ObjectMap::ReleaseObject(v45, v48);
    HALS_ObjectMap::ReleaseObject(v44, v49);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B587F564);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B587F8E8()
{
  JUMPOUT(0x1B587F7E4);
}

uint64_t ___ZN17HALS_PlugInDevice33_HandlePlugIn_RequestConfigChangeENS_19ConfigChangePayloadEj_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t HALS_PlugInDevice::UpdateStreams(HALS_PlugInDevice *this, BOOL *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  HALB_Mutex *v44;
  uint64_t *v45;
  std::__shared_weak_count_vtbl *shared_weak_owners;
  std::__shared_weak_count_vtbl *v47;
  _QWORD *v48;
  _QWORD *v49;
  HALS_PlugInStream **v50;
  HALS_PlugInStream **v51;
  HALS_ObjectMap *v52;
  HALS_Object *v53;
  HALS_PlugInStream **v54;
  HALS_PlugInStream **v55;
  HALS_ObjectMap *v56;
  HALS_Object *v57;
  _QWORD v59[12];
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  __n128 (*v65)(_QWORD *, uint64_t);
  void (*v66)(uint64_t);
  void *__p;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t, uint64_t);
  uint64_t (*v74)();
  __int16 v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  __n128 (*v79)(_QWORD *, uint64_t);
  void (*v80)(uint64_t);
  void *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  __n128 (*v87)(_QWORD *, uint64_t);
  void (*v88)(uint64_t);
  void *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  __n128 (*v95)(_QWORD *, uint64_t);
  void (*v96)(uint64_t);
  void *v97;
  void *v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;

  *(_WORD *)a2 = 0;
  v4 = *((_QWORD *)this + 164);
  v5 = *(_QWORD *)(v4 + 400);
  v6 = *(std::__shared_weak_count **)(v4 + 408);
  v92 = v5;
  v93 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v101 = 0;
  v9 = *((unsigned int *)this + 331);
  v84 = 0x6F75747073746D23;
  LODWORD(v85) = 0;
  v10 = (*(unsigned int (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)v5 + 560))(v5, v9, 0, &v84, 0, 0) >> 2;
  if (v6)
  {
    v11 = (unint64_t *)&v6->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v101 = v10;
  v13 = operator new[]();
  v14 = v101;
  if (v101)
  {
    v15 = *((_QWORD *)this + 164);
    v16 = *(_QWORD *)(v15 + 400);
    v17 = *(std::__shared_weak_count **)(v15 + 408);
    v92 = v16;
    v93 = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v20 = *((unsigned int *)this + 331);
    v102 = 0x6F75747073746D23;
    v103 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD, _QWORD, unsigned int *, uint64_t))(*(_QWORD *)v16 + 568))(v16, v20, 0, &v102, 0, 0, 4 * v14, &v101, v13);
    v101 >>= 2;
    v21 = v93;
    if (v93)
    {
      v22 = (unint64_t *)&v93->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  v100 = 0;
  v24 = *((_QWORD *)this + 164);
  v25 = *(_QWORD *)(v24 + 400);
  v26 = *(std::__shared_weak_count **)(v24 + 408);
  v92 = v25;
  v93 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = *((unsigned int *)this + 331);
  v84 = 0x696E707473746D23;
  LODWORD(v85) = 0;
  v30 = (*(unsigned int (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)v25 + 560))(v25, v29, 0, &v84, 0, 0) >> 2;
  if (v26)
  {
    v31 = (unint64_t *)&v26->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v100 = v30;
  v33 = operator new[]();
  v34 = v100;
  if (v100)
  {
    v35 = *((_QWORD *)this + 164);
    v36 = *(_QWORD *)(v35 + 400);
    v37 = *(std::__shared_weak_count **)(v35 + 408);
    v92 = v36;
    v93 = v37;
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    v40 = *((unsigned int *)this + 331);
    v104 = 0x696E707473746D23;
    v105 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD, _QWORD, unsigned int *, uint64_t))(*(_QWORD *)v36 + 568))(v36, v40, 0, &v104, 0, 0, 4 * v34, &v100, v33);
    v100 >>= 2;
    v41 = v93;
    if (v93)
    {
      v42 = (unint64_t *)&v93->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
  v92 = 0;
  v93 = (std::__shared_weak_count *)&v92;
  v94 = 0x4002000000;
  v95 = __Block_byref_object_copy__887;
  v96 = __Block_byref_object_dispose__888;
  v98 = 0;
  v99 = 0;
  v97 = 0;
  v84 = 0;
  v85 = &v84;
  v86 = 0x4002000000;
  v87 = __Block_byref_object_copy__887;
  v88 = __Block_byref_object_dispose__888;
  v90 = 0;
  v91 = 0;
  v89 = 0;
  v76 = 0;
  v77 = &v76;
  v78 = 0x4002000000;
  v79 = __Block_byref_object_copy__887;
  v80 = __Block_byref_object_dispose__888;
  v82 = 0;
  v83 = 0;
  v81 = 0;
  v70 = 0;
  v71 = &v70;
  v72 = 0x3002000000;
  v73 = __Block_byref_object_copy__4;
  v74 = __Block_byref_object_dispose__5;
  v75 = 0;
  v62 = 0;
  v63 = &v62;
  v64 = 0x4002000000;
  v65 = __Block_byref_object_copy__887;
  v66 = __Block_byref_object_dispose__888;
  v68 = 0;
  v69 = 0;
  __p = 0;
  v59[0] = MEMORY[0x1E0C809B0];
  v59[1] = 0x40000000;
  v59[2] = ___ZN17HALS_PlugInDevice13UpdateStreamsEPb_block_invoke;
  v59[3] = &unk_1E696F9B0;
  v60 = v101;
  v61 = v100;
  v59[10] = v13;
  v59[11] = v33;
  v59[4] = &v92;
  v59[5] = &v84;
  v59[6] = &v70;
  v59[7] = &v76;
  v59[8] = &v62;
  v59[9] = this;
  v44 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInDevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v44, (uint64_t)v59);
  v45 = v71;
  *a2 = *((_BYTE *)v71 + 40);
  a2[1] = *((_BYTE *)v45 + 41);
  shared_weak_owners = (std::__shared_weak_count_vtbl *)v93[1].__shared_weak_owners_;
  v47 = v93[2].__vftable;
  while (shared_weak_owners != v47)
  {
    (**(void (***)(void (__cdecl *)(std::__shared_weak_count *__hidden)))shared_weak_owners->~__shared_weak_count)(shared_weak_owners->~__shared_weak_count);
    shared_weak_owners = (std::__shared_weak_count_vtbl *)((char *)shared_weak_owners + 8);
  }
  v48 = (_QWORD *)v85[5];
  v49 = (_QWORD *)v85[6];
  while (v48 != v49)
  {
    (**(void (***)(_QWORD))*v48)(*v48);
    ++v48;
  }
  v50 = (HALS_PlugInStream **)v77[5];
  v51 = (HALS_PlugInStream **)v77[6];
  while (v50 != v51)
  {
    v52 = *v50;
    HALS_PlugInStream::BuildFormatList(*v50);
    HALS_ObjectMap::ReleaseObject(v52, v53);
    ++v50;
  }
  v54 = (HALS_PlugInStream **)v63[5];
  v55 = (HALS_PlugInStream **)v63[6];
  while (v54 != v55)
  {
    v56 = *v54;
    HALS_PlugInStream::BuildFormatList(*v54);
    HALS_ObjectMap::ReleaseObject(v56, v57);
    ++v54;
  }
  _Block_object_dispose(&v62, 8);
  if (__p)
  {
    v68 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v70, 8);
  _Block_object_dispose(&v76, 8);
  if (v81)
  {
    v82 = v81;
    operator delete(v81);
  }
  _Block_object_dispose(&v84, 8);
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
  _Block_object_dispose(&v92, 8);
  if (v97)
  {
    v98 = v97;
    operator delete(v97);
  }
  MEMORY[0x1B5E50664](v33, 0x1000C8052888210);
  return MEMORY[0x1B5E50664](v13, 0x1000C8052888210);
}

void sub_1B587FE8C(void *a1)
{
  uint64_t v1;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1 - 184);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B587FC04);
}

void sub_1B587FEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44)
{
  uint64_t v44;
  uint64_t v45;

  MEMORY[0x1B5E50664](v45, 0x1000C8052888210);
  MEMORY[0x1B5E50664](v44, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugInDevice::UpdateControls(HALS_PlugInDevice *this, BOOL *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  HALB_Mutex *v24;
  std::__shared_weak_count_vtbl *shared_weak_owners;
  std::__shared_weak_count_vtbl *v26;
  HALS_PlugInControl **v27;
  HALS_PlugInControl **i;
  HALS_ObjectMap *v29;
  HALS_Object *v30;
  _QWORD v32[9];
  unsigned int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  __n128 (*v37)(_QWORD *, uint64_t);
  void (*v38)(uint64_t);
  void *__p;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  __n128 (*v45)(_QWORD *, uint64_t);
  void (*v46)(uint64_t);
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  int v56;

  *a2 = 0;
  v4 = *((_QWORD *)this + 164);
  v5 = *(_QWORD *)(v4 + 400);
  v6 = *(std::__shared_weak_count **)(v4 + 408);
  v42 = v5;
  v43 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v54 = 0;
  v9 = *((unsigned int *)this + 331);
  v34 = 0x676C6F626374726CLL;
  LODWORD(v35) = 0;
  v10 = (*(unsigned int (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)v5 + 560))(v5, v9, 0, &v34, 0, 0) >> 2;
  if (v6)
  {
    v11 = (unint64_t *)&v6->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v54 = v10;
  v13 = operator new[]();
  v14 = v54;
  if (v54)
  {
    v15 = *((_QWORD *)this + 164);
    v16 = *(_QWORD *)(v15 + 400);
    v17 = *(std::__shared_weak_count **)(v15 + 408);
    v42 = v16;
    v43 = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v20 = *((unsigned int *)this + 331);
    v55 = 0x676C6F626374726CLL;
    v56 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD, _QWORD, unsigned int *, uint64_t))(*(_QWORD *)v16 + 568))(v16, v20, 0, &v55, 0, 0, 4 * v14, &v54, v13);
    v54 >>= 2;
    v21 = v43;
    if (v43)
    {
      v22 = (unint64_t *)&v43->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  v50 = 0;
  v51 = &v50;
  v52 = 0x2000000000;
  v53 = 0;
  v42 = 0;
  v43 = (std::__shared_weak_count *)&v42;
  v44 = 0x4002000000;
  v45 = __Block_byref_object_copy__11;
  v46 = __Block_byref_object_dispose__12;
  v48 = 0;
  v49 = 0;
  v47 = 0;
  v34 = 0;
  v35 = &v34;
  v36 = 0x4002000000;
  v37 = __Block_byref_object_copy__11;
  v38 = __Block_byref_object_dispose__12;
  v40 = 0;
  v41 = 0;
  __p = 0;
  v32[0] = MEMORY[0x1E0C809B0];
  v32[1] = 0x40000000;
  v32[2] = ___ZN17HALS_PlugInDevice14UpdateControlsERb_block_invoke;
  v32[3] = &unk_1E696F9F8;
  v33 = v54;
  v32[7] = this;
  v32[8] = v13;
  v32[4] = &v42;
  v32[5] = &v50;
  v32[6] = &v34;
  v24 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInDevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v24, (uint64_t)v32);
  *a2 = *((_BYTE *)v51 + 24);
  shared_weak_owners = (std::__shared_weak_count_vtbl *)v43[1].__shared_weak_owners_;
  v26 = v43[2].__vftable;
  while (shared_weak_owners != v26)
  {
    (**(void (***)(void (__cdecl *)(std::__shared_weak_count *__hidden)))shared_weak_owners->~__shared_weak_count)(shared_weak_owners->~__shared_weak_count);
    shared_weak_owners = (std::__shared_weak_count_vtbl *)((char *)shared_weak_owners + 8);
  }
  v27 = (HALS_PlugInControl **)v35[5];
  for (i = (HALS_PlugInControl **)v35[6]; v27 != i; ++v27)
  {
    v29 = *v27;
    if (HALS_PlugInControl::RefreshCache(*v27))
      *a2 = 1;
    HALS_ObjectMap::ReleaseObject(v29, v30);
  }
  _Block_object_dispose(&v34, 8);
  if (__p)
  {
    v40 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v42, 8);
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  _Block_object_dispose(&v50, 8);
  return MEMORY[0x1B5E50664](v13, 0x1000C8052888210);
}

void sub_1B58802E8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5880144);
}

void sub_1B5880304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34)
{
  uint64_t v34;

  MEMORY[0x1B5E50664](v34, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__11(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN17HALS_PlugInDevice14UpdateControlsERb_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t i;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  HALB_Info *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char **v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  HALS_ObjectMap *v68;
  HALS_Object *v69;
  char *v70;
  char *v71;
  int64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  HALS_ObjectMap **v88;
  HALS_ObjectMap **v89;
  HALS_ObjectMap *v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;

  v1 = *(unsigned int *)(a1 + 72);
  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v93 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(uint64_t **)(v2 + 1392);
  v6 = *(uint64_t **)(v2 + 1400);
  if (v5 == v6)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *v5;
      *(_BYTE *)(v9 + 13) = 0;
      if (*(_DWORD *)(v9 + 60) == 1)
        v7 = v9;
      else
        v8 |= *(_DWORD *)(v9 + 20) == 1702259059;
      ++v5;
    }
    while (v5 != v6);
  }
  v91 = v7;
  if ((_DWORD)v1)
  {
    for (i = 0; i != v1; ++i)
    {
      v11 = *(uint64_t **)(v2 + 1392);
      v12 = (uint64_t)(*(_QWORD *)(v2 + 1400) - (_QWORD)v11) >> 3;
      while (v12)
      {
        v14 = *v11++;
        v13 = v14;
        --v12;
        if (*(_DWORD *)(v14 + 92) == *(_DWORD *)(v3 + 4 * i) && v13 != 0)
        {
          *(_BYTE *)(v13 + 13) = 1;
          goto LABEL_52;
        }
      }
      v16 = *(unsigned int *)(v3 + 4 * i);
      if ((_DWORD)v16)
      {
        v17 = *(_QWORD *)(v2 + 1312);
        v18 = *(_QWORD *)(v17 + 400);
        v19 = *(std::__shared_weak_count **)(v17 + 408);
        if (v19)
        {
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        v94 = 0x676C6F62636C6173;
        v95 = 0;
        v96 = 0;
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD, uint64_t, uint64_t *, char *))(*(_QWORD *)v18 + 568))(v18, v16, 0, &v94, 0, 0, 4, &v96, (char *)&v96 + 4);
        v22 = (HALB_Info *)HIDWORD(v96);
        if (v19)
        {
          v23 = (unint64_t *)&v19->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v25 = *(_QWORD *)(v2 + 1312);
        v26 = *(_QWORD *)(v25 + 400);
        v27 = *(std::__shared_weak_count **)(v25 + 408);
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v97 = 0x676C6F6262636C73;
        v98 = 0;
        v99 = 0;
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD, uint64_t, uint64_t *, char *))(*(_QWORD *)v26 + 568))(v26, v16, 0, &v97, 0, 0, 4, &v99, (char *)&v99 + 4);
        v30 = HIDWORD(v99);
        if (v27)
        {
          v31 = (unint64_t *)&v27->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v8 |= (_DWORD)v22 == 1702259059;
        v33 = operator new();
        HALS_PlugInControl::HALS_PlugInControl(v33, *(HALS_ObjectMap **)(v2 + 1312), v2, v16, v22, v30, 0);
        v35 = (uint64_t *)v4[6];
        v34 = v4[7];
        if ((unint64_t)v35 >= v34)
        {
          v37 = v4[5];
          v38 = ((uint64_t)v35 - v37) >> 3;
          if ((unint64_t)(v38 + 1) >> 61)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v39 = v34 - v37;
          v40 = v39 >> 2;
          if (v39 >> 2 <= (unint64_t)(v38 + 1))
            v40 = v38 + 1;
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
            v41 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v41 = v40;
          if (v41)
            v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v41);
          else
            v42 = 0;
          v43 = (uint64_t *)(v41 + 8 * v38);
          *v43 = v33;
          v36 = v43 + 1;
          v45 = (char *)v4[5];
          v44 = (char *)v4[6];
          if (v44 != v45)
          {
            do
            {
              v46 = *((_QWORD *)v44 - 1);
              v44 -= 8;
              *--v43 = v46;
            }
            while (v44 != v45);
            v44 = (char *)v4[5];
          }
          v4[5] = v43;
          v4[6] = v36;
          v4[7] = v41 + 8 * v42;
          if (v44)
            operator delete(v44);
        }
        else
        {
          *v35 = v33;
          v36 = v35 + 1;
        }
        v4[6] = v36;
      }
LABEL_52:
      ;
    }
  }
  if ((v8 & 1) == 0 && *(_QWORD *)(v2 + 1352) != *(_QWORD *)(v2 + 1344))
  {
    if ((*(_QWORD *)(v2 + 448) & 0xFF00000000) != 0 && *(_QWORD *)(v2 + 448) == 1 && v91)
    {
      *(_BYTE *)(v91 + 13) = 1;
    }
    else
    {
      v47 = operator new();
      HALS_PlugInControl::HALS_PlugInControl(v47, *(HALS_ObjectMap **)(v2 + 1312), v2, 0, (HALB_Info *)0x65766973, 1650685548, 1);
      v49 = (uint64_t *)v4[6];
      v48 = v4[7];
      if ((unint64_t)v49 >= v48)
      {
        v51 = v4[5];
        v52 = ((uint64_t)v49 - v51) >> 3;
        if ((unint64_t)(v52 + 1) >> 61)
LABEL_119:
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v53 = v48 - v51;
        v54 = v53 >> 2;
        if (v53 >> 2 <= (unint64_t)(v52 + 1))
          v54 = v52 + 1;
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
          v55 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v55 = v54;
        if (v55)
          v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v55);
        else
          v56 = 0;
        v57 = (uint64_t *)(v55 + 8 * v52);
        v58 = v55 + 8 * v56;
        *v57 = v47;
        v50 = v57 + 1;
        v60 = (char *)v4[5];
        v59 = (char *)v4[6];
        if (v59 != v60)
        {
          do
          {
            v61 = *((_QWORD *)v59 - 1);
            v59 -= 8;
            *--v57 = v61;
          }
          while (v59 != v60);
          v59 = (char *)v4[5];
        }
        v4[5] = v57;
        v4[6] = v50;
        v4[7] = v58;
        if (v59)
          operator delete(v59);
      }
      else
      {
        *v49 = v47;
        v50 = v49 + 1;
      }
      v4[6] = v50;
    }
  }
  v62 = (char **)(v2 + 1392);
  v63 = *(char **)(v2 + 1400);
  v64 = *(char **)(v2 + 1392);
  if (v63 == v64)
  {
    v64 = *(char **)(v2 + 1400);
    v67 = v93;
  }
  else
  {
    v65 = 0;
    v66 = 0;
    v67 = v93;
    do
    {
      v68 = *(HALS_ObjectMap **)&v64[8 * v65];
      if (*((_BYTE *)v68 + 13))
      {
        ++v66;
      }
      else
      {
        *(_BYTE *)(v93 + 24) = 1;
        (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v68 + 8))(v68);
        HALS_ObjectMap::ObjectIsDead(v68, v69);
        v64 = *(char **)(v2 + 1392);
        v70 = &v64[8 * v65];
        v71 = *(char **)(v2 + 1400);
        v72 = v71 - (v70 + 8);
        if (v71 != v70 + 8)
        {
          memmove(&v64[8 * v65], v70 + 8, v71 - (v70 + 8));
          v64 = *v62;
        }
        v63 = &v70[v72];
        *(_QWORD *)(v2 + 1400) = v63;
      }
      v65 = v66;
    }
    while (v66 < (unint64_t)((v63 - v64) >> 3));
  }
  v74 = (uint64_t *)v4[5];
  v73 = (uint64_t *)v4[6];
  if (v73 != v74)
  {
    do
    {
      v75 = *v74;
      *(_BYTE *)(v67 + 24) = 1;
      v76 = *(_QWORD *)(v2 + 1408);
      if ((unint64_t)v63 >= v76)
      {
        v77 = (v63 - *v62) >> 3;
        if ((unint64_t)(v77 + 1) >> 61)
          goto LABEL_119;
        v78 = v76 - (_QWORD)*v62;
        v79 = v78 >> 2;
        if (v78 >> 2 <= (unint64_t)(v77 + 1))
          v79 = v77 + 1;
        if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
          v80 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v80 = v79;
        if (v80)
          v80 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v80);
        else
          v81 = 0;
        v82 = (_QWORD *)(v80 + 8 * v77);
        *v82 = v75;
        v63 = (char *)(v82 + 1);
        v83 = *(char **)(v2 + 1400);
        v84 = *(char **)(v2 + 1392);
        if (v83 != v84)
        {
          do
          {
            v85 = *((_QWORD *)v83 - 1);
            v83 -= 8;
            *--v82 = v85;
          }
          while (v83 != v84);
          v83 = *v62;
        }
        *(_QWORD *)(v2 + 1392) = v82;
        *(_QWORD *)(v2 + 1400) = v63;
        *(_QWORD *)(v2 + 1408) = v80 + 8 * v81;
        if (v83)
          operator delete(v83);
      }
      else
      {
        *(_QWORD *)v63 = v75;
        v63 += 8;
      }
      *(_QWORD *)(v2 + 1400) = v63;
      ++v74;
    }
    while (v74 != v73);
    v64 = *v62;
  }
  if (v64 != v63)
  {
    v86 = v64;
    while (*(_DWORD *)(*(_QWORD *)v86 + 20) != 1702259059)
    {
      v86 += 8;
      if (v86 == v63)
        goto LABEL_113;
    }
    *(_DWORD *)(v2 + 448) = *(_DWORD *)(*(_QWORD *)v86 + 60);
    *(_BYTE *)(v2 + 452) = 1;
  }
LABEL_113:
  v87 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  if (v62 != (char **)(v87 + 40))
    std::vector<HALS_IOUAControl *>::__assign_with_size[abi:ne180100]<HALS_IOUAControl **,HALS_IOUAControl **>((_QWORD *)(v87 + 40), v64, v63, (v63 - v64) >> 3);
  v88 = *(HALS_ObjectMap ***)(v87 + 40);
  v89 = *(HALS_ObjectMap ***)(v87 + 48);
  while (v88 != v89)
  {
    v90 = *v88++;
    HALS_ObjectMap::RetainObject(v90, (HALS_Object *)v64);
  }
}

void sub_1B5880ADC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E50688](v1, 0x10E1C402F24237BLL);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__887(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__888(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 40) = *(_WORD *)(a2 + 40);
  return result;
}

void ___ZN17HALS_PlugInDevice13UpdateStreamsEPb_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL IsEnabledForAnyClientOrContext;
  uint64_t v22;
  char *v23;
  char *v24;
  _DWORD *v25;
  void ***v26;
  uint64_t i;
  char *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  void **v33;
  int v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v47;
  HALS_ObjectMap *v48;
  int v49;
  HALS_Object *v50;
  HALS_Object *v51;
  unint64_t v52;
  uint64_t *v53;
  _QWORD *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  const void **v72;
  uint64_t v73;
  uint64_t v74;
  HALS_ObjectMap *v75;
  HALS_Object *v76;
  uint64_t v77;
  _BYTE *v78;
  int64_t v79;
  uint64_t v80;
  char v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD **v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  int8x16_t *v108;
  unint64_t v109;
  uint64_t v110;
  BOOL v111;
  void ***v113;
  char *v114;
  uint64_t *v115;
  uint64_t *v116;
  void ***v117;
  void **v118;
  BOOL v119;
  uint64_t v120;
  char v121;

  v1 = 0;
  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_DWORD *)(a1 + 96);
  v5 = *(_DWORD *)(a1 + 100);
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = *(_QWORD *)(v8 + 40);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v120 = v10 + 40;
  v115 = (uint64_t *)(v7 + 40);
  v116 = (uint64_t *)(v8 + 40);
  *(_QWORD *)(v7 + 48) = *(_QWORD *)(v7 + 40);
  *(_QWORD *)(v8 + 48) = v9;
  v11 = 1;
  do
  {
    v12 = v11;
    v13 = v2 + 24 * v1;
    v14 = *(_QWORD *)(v13 + 1352);
    v15 = *(uint64_t **)(v13 + 1344);
    v16 = v14 - (_QWORD)v15;
    if (((v14 - (_QWORD)v15) & 0x7FFFFFFF8) != 0)
    {
      v17 = v16 >> 3;
      v18 = ((unint64_t)v16 >> 3);
      do
      {
        if (!v17)
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        v19 = *v15++;
        *(_BYTE *)(v19 + 13) = 0;
        --v17;
        --v18;
      }
      while (v18);
    }
    v11 = 0;
    *(_BYTE *)(v120 + v1) = 0;
    v1 = 1;
  }
  while ((v12 & 1) != 0);
  v20 = *(_QWORD *)(v2 + 448);
  IsEnabledForAnyClientOrContext = HALS_ReferenceStreamStateManager::ReferenceStreamIsEnabledForAnyClientOrContext(*(std::__shared_mutex_base **)(v2 + 440));
  v22 = v10 + 41;
  v23 = (char *)operator new(0x50uLL);
  v24 = v23;
  v114 = v23 + 80;
  *(_DWORD *)v23 = 0;
  *((_DWORD *)v23 + 1) = v4;
  *((_QWORD *)v23 + 1) = v3;
  *((_QWORD *)v23 + 2) = 0;
  *((_QWORD *)v23 + 3) = v115;
  *((_QWORD *)v23 + 4) = v120;
  *((_DWORD *)v23 + 10) = 1;
  *((_DWORD *)v23 + 11) = v5;
  *((_QWORD *)v23 + 6) = v6;
  *((_QWORD *)v23 + 7) = 1;
  *((_QWORD *)v23 + 8) = v116;
  *((_QWORD *)v23 + 9) = v22;
  if ((v20 & 0xFF00000000) != 0 && v20 == 1 && IsEnabledForAnyClientOrContext)
  {
    v25 = operator new(0xA0uLL);
    v26 = (void ***)v25;
    v25[20] = 0;
    v25[21] = v4;
    *((_QWORD *)v25 + 11) = v3;
    *((_QWORD *)v25 + 12) = 0x100000001;
    *((_QWORD *)v25 + 13) = v116;
    *((_QWORD *)v25 + 14) = v22;
    v114 = (char *)(v25 + 30);
    for (i = 10; i != -10; i -= 10)
    {
      v28 = (char *)&v25[i];
      v29 = *(_OWORD *)&v24[i * 4 + 16];
      *(_OWORD *)v28 = *(_OWORD *)&v24[i * 4];
      *((_OWORD *)v28 + 1) = v29;
      *((_QWORD *)v28 + 4) = *(_QWORD *)&v24[i * 4 + 32];
    }
    operator delete(v24);
  }
  else
  {
    v26 = (void ***)v23;
  }
  v113 = v26;
  do
  {
    v117 = v26;
    v30 = *((unsigned int *)v26 + 1);
    if ((_DWORD)v30)
    {
      v31 = 0;
      v32 = v26[1];
      v33 = v26[3];
      v118 = v26[4];
      v34 = *((_DWORD *)v26 + 5);
      v119 = *((_DWORD *)v26 + 4) != 0;
      do
      {
        v35 = 0;
        v36 = 1;
        while (1)
        {
          v37 = v36;
          v38 = v2 + 24 * v35;
          v39 = *(_QWORD *)(v38 + 1352);
          v40 = *(_QWORD *)(v38 + 1344);
          v41 = v39 - v40;
          if (v41)
            break;
LABEL_23:
          v36 = 0;
          v35 = 1;
          if ((v37 & 1) == 0)
          {
            v47 = operator new();
            v48 = *(HALS_ObjectMap **)(v2 + 1312);
            v49 = *((_DWORD *)v32 + v31);
            HALS_Object::HALS_Object((HALS_Object *)v47, 1634956402, 1634956402, v2, v50);
            *(_QWORD *)v47 = off_1E6995F68;
            *(_DWORD *)(v47 + 48) = *(_DWORD *)(v2 + 16);
            *(_BYTE *)(v47 + 52) = v119;
            *(_DWORD *)(v47 + 56) = v34;
            *(_QWORD *)(v47 + 64) = off_1E6996080;
            *(_QWORD *)(v47 + 72) = v48;
            *(_DWORD *)(v47 + 80) = *((_DWORD *)v48 + 4);
            *(_DWORD *)(v47 + 84) = v49;
            *(_QWORD *)(v47 + 88) = 0;
            *(_DWORD *)(v47 + 96) = 0;
            if (!v48 || (HALS_ObjectMap *)((char *)v48 + 328) != (HALS_ObjectMap *)(v47 + 64))
              HALS_ObjectMap::RetainObject(v48, v51);
            *(_QWORD *)v47 = off_1E6982FF8;
            *(_QWORD *)(v47 + 64) = &unk_1E69830F8;
            *(_BYTE *)(v47 + 100) = 1;
            *(_QWORD *)(v47 + 104) = &off_1E69749F0;
            *(_OWORD *)(v47 + 112) = 0u;
            *(_OWORD *)(v47 + 128) = 0u;
            *(_OWORD *)(v47 + 144) = 0u;
            *(_DWORD *)(v47 + 44) = v49;
            v53 = (uint64_t *)v33[1];
            v52 = (unint64_t)v33[2];
            if ((unint64_t)v53 >= v52)
            {
              v56 = ((char *)v53 - (_BYTE *)*v33) >> 3;
              if ((unint64_t)(v56 + 1) >> 61)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v57 = v52 - (_QWORD)*v33;
              v58 = v57 >> 2;
              if (v57 >> 2 <= (unint64_t)(v56 + 1))
                v58 = v56 + 1;
              if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
                v59 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v59 = v58;
              if (v59)
                v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v59);
              else
                v60 = 0;
              v61 = (uint64_t *)(v59 + 8 * v56);
              *v61 = v47;
              v54 = v61 + 1;
              v63 = (char *)*v33;
              v62 = (char *)v33[1];
              if (v62 != *v33)
              {
                do
                {
                  v64 = *((_QWORD *)v62 - 1);
                  v62 -= 8;
                  *--v61 = v64;
                }
                while (v62 != v63);
                v62 = (char *)*v33;
              }
              *v33 = v61;
              v33[1] = v54;
              v33[2] = (void *)(v59 + 8 * v60);
              if (v62)
                operator delete(v62);
            }
            else
            {
              *v53 = v47;
              v54 = v53 + 1;
            }
            v33[1] = v54;
            v55 = v118;
            goto LABEL_30;
          }
        }
        v42 = 0;
        v43 = v41 >> 3;
        v44 = 1;
        while (1)
        {
          v45 = *(_QWORD *)(v40 + 8 * v42);
          if (*(_DWORD *)(v45 + 84) == *((_DWORD *)v32 + v31) && *(_DWORD *)(v45 + 56) == v34)
            break;
          v42 = v44;
          if (v43 <= v44++)
            goto LABEL_23;
        }
        v55 = (_BYTE *)(v45 + 13);
LABEL_30:
        *v55 = 1;
        ++v31;
      }
      while (v31 != v30);
    }
    v26 = v117 + 5;
  }
  while (v117 + 5 != (void ***)v114);
  v65 = 0;
  v66 = 1;
  do
  {
    v67 = v66;
    v68 = v2 + 24 * v65;
    v69 = *(_QWORD *)(v68 + 1352);
    v70 = v69 - *(_QWORD *)(v68 + 1344);
    if ((v70 & 0x7FFFFFFF8) != 0)
    {
      v71 = (_QWORD *)(v68 + 1344);
      v72 = (const void **)(v68 + 1352);
      v73 = (v70 >> 3);
      do
      {
        v74 = v73 - 1;
        if (v73 - 1 >= (unint64_t)((v69 - *v71) >> 3))
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        v75 = *(HALS_ObjectMap **)(*v71 + 8 * v74);
        if (!*((_BYTE *)v75 + 13))
        {
          (*(void (**)(_QWORD))(*(_QWORD *)v75 + 8))(*(_QWORD *)(*v71 + 8 * v74));
          HALS_ObjectMap::ObjectIsDead(v75, v76);
          v77 = *v71 + 8 * v74;
          v78 = (_BYTE *)(*v71 + 8 * v73);
          v79 = (_BYTE *)*v72 - v78;
          if (*v72 != v78)
            memmove((void *)(*v71 + 8 * v74), v78, (_BYTE *)*v72 - v78);
          v69 = v77 + v79;
          *v72 = (const void *)(v77 + v79);
          *(_BYTE *)(v120 + v65) = 1;
        }
        v73 = v74;
      }
      while (v74);
    }
    v66 = 0;
    v65 = 1;
  }
  while ((v67 & 1) != 0);
  v80 = 0;
  v81 = 1;
  do
  {
    v121 = v81;
    if ((v81 & 1) != 0)
      v82 = v115;
    else
      v82 = v116;
    v83 = *v82;
    v84 = v82[1] - *v82;
    if ((v84 & 0x7FFFFFFF8) != 0)
    {
      v85 = 0;
      v86 = v84 >> 3;
      v87 = v2 + 24 * v80;
      v88 = (_QWORD *)(v87 + 1344);
      v89 = (_QWORD **)(v87 + 1352);
      v90 = (_QWORD *)(v87 + 1360);
      do
      {
        if (v86 <= v85)
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        v91 = *(_QWORD *)(v83 + 8 * v85);
        v92 = *v89;
        if ((unint64_t)*v89 >= *v90)
        {
          v94 = ((uint64_t)v92 - *v88) >> 3;
          if ((unint64_t)(v94 + 1) >> 61)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v95 = *v90 - *v88;
          v96 = v95 >> 2;
          if (v95 >> 2 <= (unint64_t)(v94 + 1))
            v96 = v94 + 1;
          if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8)
            v97 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v97 = v96;
          if (v97)
            v97 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v97);
          else
            v98 = 0;
          v99 = (_QWORD *)(v97 + 8 * v94);
          *v99 = v91;
          v93 = v99 + 1;
          v100 = *v89;
          v101 = (_QWORD *)*v88;
          if (*v89 != (_QWORD *)*v88)
          {
            do
            {
              v102 = *--v100;
              *--v99 = v102;
            }
            while (v100 != v101);
            v100 = (_QWORD *)*v88;
          }
          *v88 = v99;
          *v89 = v93;
          *v90 = v97 + 8 * v98;
          if (v100)
            operator delete(v100);
        }
        else
        {
          *v92 = v91;
          v93 = v92 + 1;
        }
        *v89 = v93;
        ++v85;
        v83 = *v82;
        v86 = (v82[1] - *v82) >> 3;
      }
      while (v85 < v86);
    }
    v81 = 0;
    v80 = 1;
  }
  while ((v121 & 1) != 0);
  v103 = 0;
  v104 = 1;
  do
  {
    v105 = v104;
    v106 = v2 + 24 * v103;
    v107 = *(_QWORD *)(v106 + 1344);
    v108 = *(int8x16_t **)(v106 + 1352);
    v109 = 126 - 2 * __clz(((uint64_t)v108->i64 - v107) >> 3);
    if (v108 == (int8x16_t *)v107)
      v110 = 0;
    else
      v110 = v109;
    std::__introsort<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **,false>(v107, v108, v110, 1);
    v104 = 0;
    v103 = 1;
  }
  while ((v105 & 1) != 0);
  v111 = *(_QWORD *)(v2 + 1352) == *(_QWORD *)(v2 + 1344) && *(_QWORD *)(v2 + 1376) != *(_QWORD *)(v2 + 1368);
  *(_BYTE *)(v2 + 432) = v111;
  operator delete(v113);
  HALS_PlugInDevice::_CopyStreamList(v2, 0, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  HALS_PlugInDevice::_CopyStreamList(v2, (HALS_Object *)1, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
}

void sub_1B58812E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  operator delete(__p);
  JUMPOUT(0x1B588130CLL);
}

void HALS_PlugInDevice::_CopyStreamList(uint64_t a1, HALS_Object *a2, uint64_t a3)
{
  const void **v4;
  HALS_ObjectMap **v5;
  char *v6;
  char *v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  HALS_ObjectMap **v13;
  char *v14;
  unint64_t v15;
  char *v16;
  HALS_ObjectMap **v17;
  char *v18;
  HALS_ObjectMap *v19;

  v4 = (const void **)(a1 + 24 * a2 + 1344);
  v5 = *(HALS_ObjectMap ***)a3;
  if (v4 == (const void **)a3)
  {
    v13 = *(HALS_ObjectMap ***)(a3 + 8);
    goto LABEL_24;
  }
  v6 = (char *)*v4;
  v7 = *(char **)(a1 + 24 * a2 + 1352);
  v8 = v7 - (_BYTE *)*v4;
  v9 = v8 >> 3;
  v10 = *(_QWORD *)(a3 + 16);
  if (v8 >> 3 <= (unint64_t)((v10 - (uint64_t)v5) >> 3))
  {
    v14 = *(char **)(a3 + 8);
    v15 = (v14 - (char *)v5) >> 3;
    if (v15 < v9)
    {
      v16 = &v6[8 * v15];
      if (v14 != (char *)v5)
      {
        memmove(v5, v6, v14 - (char *)v5);
        v5 = *(HALS_ObjectMap ***)(a3 + 8);
      }
      v8 = v7 - v16;
      if (v7 == v16)
        goto LABEL_22;
      v17 = v5;
      v18 = v16;
      goto LABEL_21;
    }
  }
  else
  {
    if (v5)
    {
      *(_QWORD *)(a3 + 8) = v5;
      operator delete(v5);
      v10 = 0;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    if (v8 < 0)
      goto LABEL_26;
    v11 = v10 >> 2;
    if (v10 >> 2 <= v9)
      v11 = v8 >> 3;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v11;
    if (v12 >> 61)
LABEL_26:
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v5 = (HALS_ObjectMap **)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
    *(_QWORD *)a3 = v5;
    *(_QWORD *)(a3 + 8) = v5;
    *(_QWORD *)(a3 + 16) = &v5[(_QWORD)a2];
  }
  if (v7 != v6)
  {
    v17 = v5;
    v18 = v6;
LABEL_21:
    memmove(v17, v18, v8);
  }
LABEL_22:
  v13 = (HALS_ObjectMap **)((char *)v5 + v8);
  *(_QWORD *)(a3 + 8) = v13;
  v5 = *(HALS_ObjectMap ***)a3;
LABEL_24:
  while (v5 != v13)
  {
    v19 = *v5++;
    HALS_ObjectMap::RetainObject(v19, a2);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  int8x16_t *v5;
  int8x16_t *v6;
  uint64_t *v7;
  int8x16_t *i;
  int8x16_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  unsigned int v22;
  unsigned int v23;
  int8x16_t *v24;
  uint64_t *j;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  unsigned int v40;
  BOOL v41;
  BOOL v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  int8x16_t *v49;
  uint64_t *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  int8x16_t *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  BOOL v61;
  unsigned int v62;
  uint64_t v63;
  int8x16_t *v64;
  uint64_t *v65;
  uint64_t v66;
  BOOL v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  int8x16_t *v78;
  BOOL v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  BOOL v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unsigned int v92;
  int64_t v93;
  int64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  unsigned int v99;
  uint64_t *v100;
  uint64_t v101;
  BOOL v102;
  unsigned int v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  unsigned int v109;
  BOOL v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v121;
  uint64_t *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  unsigned int v128;
  uint64_t v129;
  uint64_t *v130;
  unsigned int v132;
  uint64_t *v134;
  uint64_t v135;
  BOOL v136;
  unsigned int v137;
  int8x16_t *v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  unsigned int v142;
  int64_t v143;
  int64_t v145;
  int8x16_t *v147;

  v5 = (int8x16_t *)result;
LABEL_2:
  v6 = a2;
  v7 = &a2[-1].i64[1];
  i = v5;
  while (2)
  {
    v9 = i;
    v10 = (char *)v6 - (char *)i;
    v11 = v10 >> 3;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = *v7;
        v60 = v9->i64[0];
        if (*v7)
          v61 = v60 == 0;
        else
          v61 = 1;
        if (!v61)
        {
          v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 200))(v60);
          if (v62 < result)
          {
            v63 = v9->i64[0];
            v9->i64[0] = *v7;
            *v7 = v63;
          }
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v9->i64, &v9->i64[1], v7);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v9->i64, &v9->i64[1], v9[1].i64, v7);
      case 5:
        v64 = v9 + 1;
        v65 = &v9[1].i64[1];
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v9->i64, &v9->i64[1], v9[1].i64, &v9[1].i64[1]);
        result = *v7;
        v66 = v9[1].i64[1];
        if (*v7)
          v67 = v66 == 0;
        else
          v67 = 1;
        if (!v67)
        {
          v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 200))(v66);
          if (v68 < result)
          {
            v69 = *v65;
            *v65 = *v7;
            *v7 = v69;
            result = *v65;
            if (*v65)
            {
              v70 = v64->i64[0];
              if (v64->i64[0])
              {
                v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 200))(v70);
                if (v71 < result)
                {
                  v72 = v64->i64[0];
                  result = *v65;
                  v64->i64[0] = *v65;
                  *v65 = v72;
                  if (result)
                  {
                    v73 = v9->i64[1];
                    if (v73)
                    {
                      v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
                      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 200))(v73);
                      if (v74 < result)
                      {
                        v75 = v9->i64[1];
                        result = v9[1].i64[0];
                        v9->i64[1] = result;
                        v9[1].i64[0] = v75;
                        if (result)
                        {
                          v76 = v9->i64[0];
                          if (v9->i64[0])
                          {
                            v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
                            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 200))(v76);
                            if (v77 < result)
                              *v9 = vextq_s8(*v9, *v9, 8uLL);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result;
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if (v9 == v6)
              return result;
            v93 = (unint64_t)(v11 - 2) >> 1;
            v145 = v93;
            v147 = v9;
            while (1)
            {
              v94 = v93;
              if (v145 >= v93)
              {
                v95 = (2 * v93) | 1;
                v96 = &v9->i64[v95];
                if (2 * v93 + 2 < v11)
                {
                  v97 = v96[1];
                  if (*v96 && v97 != 0)
                  {
                    v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v96 + 200))(*v96);
                    if (v99 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)v97 + 200))(v97))
                    {
                      ++v96;
                      v95 = 2 * v94 + 2;
                    }
                  }
                }
                v9 = v147;
                v100 = &v147->i64[v94];
                result = *v96;
                v101 = *v100;
                if (*v96)
                  v102 = v101 == 0;
                else
                  v102 = 1;
                if (v102)
                {
                  v143 = v94;
                  goto LABEL_157;
                }
                v103 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 200))(v101);
                if (v103 >= result)
                {
                  v143 = v94;
                  v101 = *v100;
                  while (1)
                  {
LABEL_157:
                    v104 = v100;
                    v100 = v96;
                    *v104 = *v96;
                    if (v145 < v95)
                      break;
                    v105 = (2 * v95) | 1;
                    v96 = &v9->i64[v105];
                    v106 = 2 * v95 + 2;
                    if (v106 >= v11)
                    {
                      v95 = (2 * v95) | 1;
                    }
                    else
                    {
                      v107 = v96[1];
                      if (*v96)
                        v108 = v107 == 0;
                      else
                        v108 = 1;
                      v95 = (2 * v95) | 1;
                      if (!v108)
                      {
                        v109 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v96 + 200))(*v96);
                        if (v109 >= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v107 + 200))(v107))
                        {
                          v95 = v105;
                        }
                        else
                        {
                          ++v96;
                          v95 = v106;
                        }
                      }
                    }
                    result = *v96;
                    v110 = !*v96 || v101 == 0;
                    v9 = v147;
                    if (!v110)
                    {
                      v111 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
                      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 200))(v101);
                      if (v111 < result)
                        break;
                    }
                  }
                  *v100 = v101;
                  v94 = v143;
                }
              }
              v93 = v94 - 1;
              if (!v94)
              {
                v112 = (unint64_t)v10 >> 3;
                do
                {
                  v113 = 0;
                  v114 = v9->i64[0];
                  v115 = (uint64_t *)v9;
                  do
                  {
                    v116 = v115;
                    v115 += v113 + 1;
                    v117 = 2 * v113;
                    v113 = (2 * v113) | 1;
                    v118 = v117 + 2;
                    if (v117 + 2 < v112)
                    {
                      v119 = v115[1];
                      result = *v115;
                      if (*v115 && v119 != 0)
                      {
                        v121 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
                        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v119 + 200))(v119);
                        if (v121 < result)
                        {
                          ++v115;
                          v113 = v118;
                        }
                      }
                    }
                    *v116 = *v115;
                  }
                  while (v113 <= (uint64_t)((unint64_t)(v112 - 2) >> 1));
                  v122 = &a2[-1].i64[1];
                  v21 = v115 == (uint64_t *)&a2[-1].u64[1];
                  a2 = (int8x16_t *)((char *)a2 - 8);
                  if (v21)
                  {
                    *v115 = v114;
                    v9 = v147;
                  }
                  else
                  {
                    *v115 = *v122;
                    *v122 = v114;
                    v9 = v147;
                    v123 = (char *)v115 - (char *)v147 + 8;
                    if (v123 >= 9)
                    {
                      v124 = (((unint64_t)v123 >> 3) - 2) >> 1;
                      v125 = &v147->i64[v124];
                      result = *v125;
                      v126 = *v115;
                      if (*v125 && v126 != 0)
                      {
                        v128 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
                        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v126 + 200))(v126);
                        if (v128 < result)
                        {
                          v129 = *v115;
                          do
                          {
                            v130 = v115;
                            v115 = v125;
                            *v130 = *v125;
                            if (!v124)
                              break;
                            v124 = (v124 - 1) >> 1;
                            v125 = &v147->i64[v124];
                            result = *v125;
                            if (!*v125 || v129 == 0)
                              break;
                            v132 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
                            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v129 + 200))(v129);
                          }
                          while (v132 < result);
                          *v115 = v129;
                        }
                      }
                    }
                  }
                }
                while (v112-- > 2);
                return result;
              }
            }
          }
          v12 = (uint64_t *)v9;
          v13 = (unint64_t)v11 >> 1;
          v14 = &v12[(unint64_t)v11 >> 1];
          if ((unint64_t)v10 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v14, v12, v7);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v12, v14, v7);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v12 + 1, v14 - 1, a2[-1].i64);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v12 + 2, &v12[v13 + 1], &a2[-2].i64[1]);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v14 - 1, v14, &v12[v13 + 1]);
            v15 = *v12;
            *v12 = *v14;
            *v14 = v15;
          }
          v5 = (int8x16_t *)v12;
          --a3;
          if ((a4 & 1) == 0)
          {
            result = *(v12 - 1);
            v16 = *v12;
            if (result && v16)
            {
              v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 200))(v16);
              if (v17 < result)
                goto LABEL_13;
              v16 = *v12;
            }
            if (v16
              && (v43 = *v7) != 0
              && (v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 200))(v16),
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 200))(v43),
                  v44 < result))
            {
              for (i = (int8x16_t *)(v12 + 1); ; i = (int8x16_t *)((char *)i + 8))
              {
                v45 = i->i64[0];
                if (i->i64[0])
                {
                  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 200))(v16);
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 200))(v45);
                  if (v46 < result)
                    break;
                }
              }
            }
            else
            {
              for (i = (int8x16_t *)(v12 + 1); i < v6; i = (int8x16_t *)((char *)i + 8))
              {
                if (v16)
                {
                  v47 = i->i64[0];
                  if (i->i64[0])
                  {
                    v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 200))(v16);
                    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 200))(v47);
                    if (v48 < result)
                      break;
                  }
                }
              }
            }
            v49 = v6;
            if (i < v6)
            {
              v50 = &a2[-1].i64[1];
              do
              {
                v49 = (int8x16_t *)v50;
                if (!v16)
                  break;
                v51 = *v50;
                if (!*v50)
                  break;
                v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 200))(v16);
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 200))(v51);
                v50 = &v49[-1].i64[1];
              }
              while (v52 < result);
            }
            while (i < v49)
            {
              v53 = i->i64[0];
              i->i64[0] = v49->i64[0];
              i = (int8x16_t *)((char *)i + 8);
              v49->i64[0] = v53;
              if (!v16)
                goto LABEL_80;
              while (1)
              {
                v54 = i->i64[0];
                if (i->i64[0])
                {
                  v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 200))(v16);
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 200))(v54);
                  if (v55 < result)
                    break;
                }
                do
LABEL_80:
                  i = (int8x16_t *)((char *)i + 8);
                while (!v16);
              }
              v56 = (int8x16_t *)((char *)v49 - 8);
              do
              {
                v49 = v56;
                v57 = v56->i64[0];
                if (!v56->i64[0])
                  break;
                v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 200))(v16);
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 200))(v57);
                v56 = (int8x16_t *)((char *)v49 - 8);
              }
              while (v58 < result);
            }
            v59 = &i[-1].i64[1];
            if (&i[-1].u64[1] != (unint64_t *)v5)
              v5->i64[0] = *v59;
            a4 = 0;
            *v59 = v16;
            continue;
          }
LABEL_13:
          v18 = v12 + 1;
          v19 = *v12;
          do
          {
            v20 = (unint64_t)v18;
            if (*v18)
              v21 = v19 == 0;
            else
              v21 = 1;
            if (v21)
              break;
            v22 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v18 + 200))(*v18);
            v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 200))(v19);
            v18 = (_QWORD *)(v20 + 8);
          }
          while (v22 < v23);
          v24 = (int8x16_t *)(v20 - 8);
          j = &a2[-1].i64[1];
          if ((uint64_t *)(v20 - 8) == v12)
          {
            for (j = &a2[-1].i64[1]; v20 < (unint64_t)(j + 1); --j)
            {
              if (*j)
                v28 = v19 == 0;
              else
                v28 = 1;
              if (!v28)
              {
                v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*j + 200))(*j);
                if (v29 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 200))(v19))
                  goto LABEL_35;
              }
            }
            ++j;
          }
          else
          {
            while (1)
            {
              if (*j && v19 != 0)
              {
                v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*j + 200))(*j);
                if (v27 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 200))(v19))
                  break;
              }
              --j;
            }
          }
LABEL_35:
          if (v20 < (unint64_t)j)
          {
            v30 = (uint64_t *)v20;
            v31 = j;
            do
            {
              v32 = *v30;
              *v30 = *v31;
              *v31 = v32;
              v33 = v30 + 1;
              do
              {
                v30 = v33;
                if (*v33)
                  v34 = v19 == 0;
                else
                  v34 = 1;
                if (v34)
                  break;
                v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v33 + 200))(*v33);
                v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 200))(v19);
                v33 = v30 + 1;
              }
              while (v35 < v36);
              v24 = (int8x16_t *)(v30 - 1);
              while (1)
              {
                v38 = *--v31;
                v37 = v38;
                if (v38)
                  v39 = v19 == 0;
                else
                  v39 = 1;
                if (!v39)
                {
                  v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 200))(v37);
                  if (v40 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 200))(v19))
                    break;
                }
              }
            }
            while (v30 < v31);
          }
          if (v24 != v5)
            v5->i64[0] = v24->i64[0];
          v24->i64[0] = v19;
          v41 = v20 >= (unint64_t)j;
          v6 = a2;
          if (!v41)
            goto LABEL_56;
          v42 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v5, v24);
          i = (int8x16_t *)&v24->u64[1];
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>((int8x16_t *)&v24->u64[1], a2);
          if (!(_DWORD)result)
          {
            if (v42)
              continue;
LABEL_56:
            result = std::__introsort<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **,false>(v5, v24, a3, a4 & 1);
            a4 = 0;
            i = (int8x16_t *)&v24->u64[1];
            continue;
          }
          a2 = v24;
          if (v42)
            return result;
          goto LABEL_2;
        }
        v78 = (int8x16_t *)&v9->u64[1];
        v80 = v9 == v6 || v78 == v6;
        if ((a4 & 1) != 0)
        {
          if (v80)
            return result;
          v81 = 0;
          v82 = (uint64_t *)v9;
          while (1)
          {
            v83 = v82;
            v82 = (uint64_t *)v78;
            v84 = *v83;
            result = v83[1];
            if (result)
              v85 = v84 == 0;
            else
              v85 = 1;
            if (!v85)
            {
              v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 200))(v84);
              if (v86 < result)
              {
                v87 = *v82;
                v88 = v81;
                while (1)
                {
                  v89 = v88;
                  v90 = (uint64_t *)((char *)v9->i64 + v88);
                  v90[1] = *v90;
                  if (!v89)
                    break;
                  if (!v87)
                    goto LABEL_136;
                  v91 = *(v90 - 1);
                  if (!v91)
                    goto LABEL_136;
                  --v83;
                  v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v87 + 200))(v87);
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v91 + 200))(v91);
                  v88 = v89 - 8;
                  if (v92 >= result)
                  {
                    v83 = (uint64_t *)((char *)v9->i64 + v89);
                    goto LABEL_136;
                  }
                }
                v83 = (uint64_t *)v9;
LABEL_136:
                *v83 = v87;
              }
            }
            v78 = (int8x16_t *)(v82 + 1);
            v81 += 8;
            if (v82 + 1 == (uint64_t *)a2)
              return result;
          }
        }
        if (!v80)
        {
          do
          {
            v134 = (uint64_t *)v9;
            v9 = v78;
            v135 = *v134;
            result = v134[1];
            if (result)
              v136 = v135 == 0;
            else
              v136 = 1;
            if (!v136)
            {
              v137 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 200))(v135);
              if (v137 < result)
              {
                v138 = v9;
                v139 = v9->i64[0];
                do
                {
                  v140 = v134;
                  v134[1] = *v134;
                  if (!v139)
                    break;
                  --v134;
                  v141 = *(v140 - 1);
                  if (!v141)
                    break;
                  v142 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v139 + 200))(v139);
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v141 + 200))(v141);
                }
                while (v142 < result);
                *v140 = v139;
                v9 = v138;
              }
            }
            v78 = (int8x16_t *)&v9->u64[1];
          }
          while (&v9->u64[1] != (unint64_t *)a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t result;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;

  v6 = *a2;
  v7 = *a1;
  if (*a2)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    result = *a3;
    if (*a3)
      v10 = v6 == 0;
    else
      v10 = 1;
    if (v10)
      return result;
    v13 = 0;
  }
  else
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 200))(*a2);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 200))(v7);
    v13 = v11 < v12;
    result = *a3;
    v6 = *a2;
    if (*a3)
      v14 = v6 == 0;
    else
      v14 = 1;
    if (v14)
    {
      if (v11 >= v12)
        return result;
      v15 = *a1;
LABEL_27:
      *a1 = v6;
      *a2 = v15;
      result = *a3;
      if (*a3 && v15)
      {
        v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 200))(v15);
        if (v21 < result)
        {
          v22 = *a2;
          *a2 = *a3;
          *a3 = v22;
        }
      }
      return result;
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 200))(v6);
  if (v13)
  {
    v15 = *a1;
    if (v16 < result)
    {
      *a1 = *a3;
      *a3 = v15;
      return result;
    }
    v6 = *a2;
    goto LABEL_27;
  }
  if (v16 < result)
  {
    v17 = *a2;
    *a2 = *a3;
    *a3 = v17;
    result = *a2;
    if (*a2)
    {
      v18 = *a1;
      if (*a1)
      {
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 200))(v18);
        if (v19 < result)
        {
          v20 = *a1;
          *a1 = *a2;
          *a2 = v20;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(a1, a2, a3);
  result = *a4;
  v9 = *a3;
  if (*a4)
    v10 = v9 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 200))(v9);
    if (v11 < result)
    {
      v12 = *a3;
      *a3 = *a4;
      *a4 = v12;
      result = *a3;
      if (*a3)
      {
        v13 = *a2;
        if (*a2)
        {
          v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 200))(v13);
          if (v14 < result)
          {
            v15 = *a2;
            *a2 = *a3;
            *a3 = v15;
            result = *a2;
            if (*a2)
            {
              v16 = *a1;
              if (*a1)
              {
                v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 200))(v16);
                if (v17 < result)
                {
                  v18 = *a1;
                  *a1 = *a2;
                  *a2 = v18;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(int8x16_t *a1, int8x16_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  uint64_t v10;
  int8x16_t *v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t *v25;
  int8x16_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2[-1].i64[1];
      v7 = a1->i64[0];
      if (v6)
        v8 = v7 == 0;
      else
        v8 = 1;
      if (!v8)
      {
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 200))(v6);
        if (v9 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 200))(v7))
        {
          v10 = a1->i64[0];
          a1->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v10;
        }
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(a1->i64, &a1->i64[1], a1[1].i64, &a2[-1].i64[1]);
      return 1;
    case 5:
      v25 = &a1->i64[1];
      v26 = a1 + 1;
      v27 = &a1[1].i64[1];
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1]);
      v28 = a2[-1].i64[1];
      result = 1;
      if (!v28)
        return result;
      v29 = a1[1].i64[1];
      if (!v29)
        return result;
      v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 200))(a2[-1].i64[1]);
      if (v30 >= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 200))(v29))
        return 1;
      v31 = *v27;
      *v27 = a2[-1].i64[1];
      a2[-1].i64[1] = v31;
      result = 1;
      if (!*v27)
        return result;
      v32 = v26->i64[0];
      if (!v26->i64[0])
        return result;
      v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v27 + 200))(*v27);
      if (v33 >= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v32 + 200))(v32))
        return 1;
      v34 = v26->i64[0];
      v35 = *v27;
      v26->i64[0] = *v27;
      *v27 = v34;
      result = 1;
      if (!v35)
        return result;
      v36 = *v25;
      if (!*v25)
        return result;
      v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 200))(v35);
      if (v37 >= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 200))(v36))
        return 1;
      v39 = a1->i64[1];
      v38 = a1[1].i64[0];
      a1->i64[1] = v38;
      a1[1].i64[0] = v39;
      result = 1;
      if (!v38)
        return result;
      v40 = a1->i64[0];
      if (!a1->i64[0])
        return result;
      v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 200))(v38);
      if (v41 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)v40 + 200))(v40))
        *a1 = vextq_s8(*a1, *a1, 8uLL);
      return 1;
    default:
      v11 = a1 + 1;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(a1->i64, &a1->i64[1], a1[1].i64);
      v12 = &a1[1].i64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2)
        return 1;
      v13 = 0;
      v14 = 16;
      break;
  }
  while (1)
  {
    v15 = v11->i64[0];
    if (*v12 && v15 != 0)
    {
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v12 + 200))(*v12);
      if (v17 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 200))(v15))
      {
        v18 = *v12;
        v19 = v14;
        while (1)
        {
          v20 = v19;
          v21 = (uint64_t *)((char *)a1->i64 + v19);
          v21[1] = *v21;
          if (!v20)
            break;
          if (!v18)
            goto LABEL_22;
          v22 = *(v21 - 1);
          if (!v22)
            goto LABEL_22;
          v11 = (int8x16_t *)((char *)v11 - 8);
          v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 200))(v18);
          v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 200))(v22);
          v19 = v20 - 8;
          if (v23 >= v24)
          {
            v11 = (int8x16_t *)((char *)a1 + v20);
            goto LABEL_22;
          }
        }
        v11 = a1;
LABEL_22:
        v11->i64[0] = v18;
        if (++v13 == 8)
          return v12 + 1 == (uint64_t *)a2;
      }
    }
    v11 = (int8x16_t *)v12;
    v14 += 8;
    if (++v12 == (uint64_t *)a2)
      return 1;
  }
}

BOOL HALS_Device::IsHogModeOwnerOrFree(HALS_Device *this, HALS_Client *a2)
{
  pid_t v3;

  if (a2)
    v3 = *((_DWORD *)a2 + 58);
  else
    v3 = getpid();
  return HALS_Device::GetHogModeOwner(this) == v3
      || HALS_Device::GetHogModeOwner(this) == -1;
}

uint64_t caulk::numeric::exceptional_mul<unsigned int>(unsigned int a1)
{
  uint64_t result;
  std::runtime_error *exception;

  result = 20 * a1;
  if ((result & 0xFFFFFFFF00000000) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::overflow_error::overflow_error[abi:ne180100](exception, "arithmetic multiplication overflow");
    __cxa_throw(exception, (struct type_info *)off_1E696A678, MEMORY[0x1E0DE4350]);
  }
  return result;
}

void sub_1B5882734(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t caulk::numeric::exceptional_add<unsigned int>(int a1)
{
  BOOL v1;
  uint64_t result;
  std::runtime_error *exception;

  v1 = __CFADD__(a1, 12);
  result = (a1 + 12);
  if (v1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::overflow_error::overflow_error[abi:ne180100](exception, "arithmetic addition overflow");
    __cxa_throw(exception, (struct type_info *)off_1E696A678, MEMORY[0x1E0DE4350]);
  }
  return result;
}

void sub_1B5882798(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t HALS_Stream::GetAvailablePhysicalFormats(HALS_Stream *this, int a2, unsigned int *a3, AudioStreamRangedDescription *a4)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  unsigned int v9;

  v5 = *((unsigned int *)this + 4);
  v7 = 0x676C6F6270667461;
  v8 = 0;
  v9 = 0;
  result = (*(uint64_t (**)(HALS_Stream *, uint64_t, uint64_t *, _QWORD, unsigned int *, AudioStreamRangedDescription *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, v5, &v7, (56 * a2), &v9, a4, 0, 0, 0);
  *a3 = v9 / 0x38;
  return result;
}

void std::vector<CAAudioValueRange>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4)
  {
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF0];
    v7 = &v4[16 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v8 - 1);
        v10 -= 16;
        v8 -= 16;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

_QWORD *std::vector<CAAudioValueRange>::__assign_with_size[abi:ne180100]<CAAudioValueRange*,CAAudioValueRange*>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  void **v14;
  _BYTE *v15;
  unint64_t v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      goto LABEL_23;
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 60)
LABEL_23:
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[2 * v12];
    v13 = a3 - v6;
    if (v13)
      result = memmove(result, v6, v13);
    v14 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v14 = (void **)(result + 1);
  v15 = (_BYTE *)result[1];
  v16 = (v15 - v9) >> 4;
  if (v16 >= a4)
  {
    v13 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = (void *)*result;
LABEL_21:
    result = memmove(v18, __src, v13);
    goto LABEL_22;
  }
  v17 = &__src[16 * v16];
  if (v15 != v9)
  {
    result = memmove((void *)*result, __src, v15 - v9);
    v9 = (char *)*v14;
  }
  v13 = a3 - v17;
  if (v13)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v14 = &v9[v13];
  return result;
}

std::runtime_error *std::overflow_error::overflow_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5030] + 16);
  return result;
}

void HALS_PlugInDevice::HALS_PlugInDevice(HALS_PlugInDevice *this, HALB_Info *a2, HALS_PlugIn *a3, uint64_t a4)
{
  int v4;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const __CFString *v12;
  HALS_Object *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  void *__p[2];
  char v19;
  HALS_Object *v20[2];
  uint64_t v21;
  _QWORD v22[10];
  char v23;
  uint64_t v24;
  dispatch_object_t object;
  int v26;
  uint64_t v27;

  v4 = a4;
  v27 = *MEMORY[0x1E0C80C00];
  v8 = *((_QWORD *)a3 + 50);
  v9 = (std::__shared_weak_count *)*((_QWORD *)a3 + 51);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  object = (dispatch_object_t)0x676C6F6275696420;
  v26 = 0;
  v20[0] = 0;
  LODWORD(__p[0]) = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD, dispatch_object_t *, _QWORD, _QWORD, uint64_t, void **, HALS_Object **))(*(_QWORD *)v8 + 568))(v8, a4, 0, &object, 0, 0, 8, __p, v20);
  HALS_Device::HALS_Device(this, a2, (uint64_t)a3, v20[0], v12);
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *((_QWORD *)this + 163) = off_1E6996080;
  *((_QWORD *)this + 164) = a3;
  *((_DWORD *)this + 330) = *((_DWORD *)a3 + 4);
  *((_DWORD *)this + 331) = v4;
  *((_QWORD *)this + 166) = 0;
  *((_DWORD *)this + 334) = 0;
  if (!a3 || (char *)a3 + 328 != (char *)this + 1304)
    HALS_ObjectMap::RetainObject(a3, v13);
  *(_QWORD *)this = off_1E696F5B0;
  *((_QWORD *)this + 163) = &unk_1E696F980;
  *((_QWORD *)this + 184) = 0;
  *((_QWORD *)this + 186) = 0;
  *((_QWORD *)this + 185) = 0;
  *((_WORD *)this + 732) = 0;
  *(_OWORD *)((char *)this + 1432) = 0u;
  *(_OWORD *)((char *)this + 1448) = 0u;
  *((_OWORD *)this + 84) = 0u;
  *((_OWORD *)this + 85) = 0u;
  *((_OWORD *)this + 86) = 0u;
  *((_OWORD *)this + 87) = 0u;
  *((_OWORD *)this + 88) = 0u;
  *((_DWORD *)this + 356) = 0;
  *((_QWORD *)this + 187) = 850045863;
  *((_OWORD *)this + 94) = 0u;
  *((_OWORD *)this + 95) = 0u;
  *((_OWORD *)this + 96) = 0u;
  *((_OWORD *)this + 97) = 0u;
  *((_OWORD *)this + 98) = 0u;
  *((_QWORD *)this + 198) = 850045863;
  *(_OWORD *)((char *)this + 1592) = 0u;
  *(_OWORD *)((char *)this + 1608) = 0u;
  *(_OWORD *)((char *)this + 1624) = 0u;
  *(_OWORD *)((char *)this + 1640) = 0u;
  *(_OWORD *)((char *)this + 1656) = 0u;
  *((_QWORD *)this + 209) = 850045863;
  *((_OWORD *)this + 105) = 0u;
  *((_OWORD *)this + 106) = 0u;
  *((_OWORD *)this + 107) = 0u;
  *((_OWORD *)this + 108) = 0u;
  *((_QWORD *)this + 218) = dispatch_semaphore_create(0);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"PlugInDevice Change Queue ", 26);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__p, (uint64_t)v22);
  if (v19 >= 0)
    v16 = (char *)__p;
  else
    v16 = (char *)__p[0];
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((uint64_t)&object, v16);
  AMCP::Utility::Dispatch_Queue::operator=((NSObject **)this + 179, object);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&object);
  if (v19 < 0)
    operator delete(__p[0]);
  *((_DWORD *)this + 11) = v4;
  v20[0] = *(HALS_Object **)MEMORY[0x1E0DE4F50];
  v17 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(HALS_Object **)((char *)v20 + *((_QWORD *)v20[0] - 3)) = *(HALS_Object **)(MEMORY[0x1E0DE4F50] + 64);
  v21 = v17;
  v22[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v23 < 0)
    operator delete((void *)v22[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B5E50598](&v24);
}

void sub_1B5882D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  HALS_Device *v29;

  HALS_Device::~HALS_Device(v29);
  _Unwind_Resume(a1);
}

void sub_1B5882DCC()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;

  if (v0)
  {
    p_shared_owners = (unint64_t *)&v0->__shared_owners_;
    do
      v2 = __ldaxr(p_shared_owners);
    while (__stlxr(v2 - 1, p_shared_owners));
    if (!v2)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
  JUMPOUT(0x1B5882DC4);
}

char *CAStreamBasicDescription::AsString(CAStreamBasicDescription *this, char *a2, size_t a3, double a4, int16x8_t a5)
{
  void **v7;
  void *__p[2];
  char v10;

  CA::StreamDescription::AsString((CA::StreamDescription *)__p, this, a4, a5);
  if (v10 >= 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  strlcpy(a2, (const char *)v7, a3);
  if (v10 < 0)
    operator delete(__p[0]);
  return a2;
}

void sub_1B5882E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<AudioStreamRangedDescription>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<CA::RangedStreamDescription>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 56 * ((56 * a2 - 56) / 0x38) + 56;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1B5882F18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<AudioStreamRangedDescription>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  size_t v23;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v22 = &v3[56 * a2];
    goto LABEL_17;
  }
  v7 = a1[2];
  if (0x6DB6DB6DB6DB6DB7 * ((v7 - v4) >> 3) >= v6)
  {
    v23 = 56 * ((56 * v6 - 56) / 0x38) + 56;
    bzero(a1[1], v23);
    v22 = &v4[v23];
LABEL_17:
    a1[1] = v22;
    return;
  }
  if (a2 > 0x492492492492492)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - v3) >> 3);
  v9 = 2 * v8;
  if (2 * v8 <= a2)
    v9 = a2;
  if (v8 >= 0x249249249249249)
    v10 = 0x492492492492492;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v10);
  v12 = &v11[56 * v5];
  v14 = &v11[56 * v13];
  v15 = 56 * ((56 * v6 - 56) / 0x38) + 56;
  bzero(v12, v15);
  v16 = &v12[v15];
  v18 = *a1;
  v17 = a1[1];
  if (v17 != *a1)
  {
    do
    {
      v19 = *(_OWORD *)(v17 - 56);
      v20 = *(_OWORD *)(v17 - 40);
      v21 = *(_OWORD *)(v17 - 24);
      *((_QWORD *)v12 - 1) = *((_QWORD *)v17 - 1);
      *(_OWORD *)(v12 - 24) = v21;
      *(_OWORD *)(v12 - 40) = v20;
      *(_OWORD *)(v12 - 56) = v19;
      v12 -= 56;
      v17 -= 56;
    }
    while (v17 != v18);
    v17 = *a1;
  }
  *a1 = v12;
  a1[1] = v16;
  a1[2] = v14;
  if (v17)
    operator delete(v17);
}

void HALS_PlugInDevice::HandlePlugIn_RequestConfigChange(uint64_t a1, __int128 *a2)
{
  int v2;
  int v3;
  int v4;
  _QWORD block[4];
  __int128 v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 1324);
  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 1312) + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN17HALS_PlugInDevice32HandlePlugIn_RequestConfigChangeENS_19ConfigChangePayloadEbj_block_invoke;
  block[3] = &__block_descriptor_tmp_21_873;
  v8 = v4;
  v9 = v2;
  v6 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  v10 = 0;
  v11 = v3;
  LOBYTE(v2) = atomic_load((unsigned __int8 *)(a1 + 1464));
  if ((v2 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(a1 + 1465));
  dispatch_async(*(dispatch_queue_t *)(a1 + 1432), block);
}

void std::vector<std::pair<unsigned int,std::vector<unsigned int>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<unsigned int,std::vector<unsigned int>>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<unsigned int,std::vector<unsigned int>>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t *std::vector<std::pair<unsigned int,std::vector<unsigned int>>>::reserve(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (a2 > (result[2] - *result) >> 5)
  {
    if (a2 >> 59)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<CAPropertyAddressList>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 32 * v4;
    std::vector<std::pair<unsigned int,std::vector<unsigned int>>>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<std::pair<unsigned int,std::vector<unsigned int>>>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

BOOL CodecRegistryEntry::ReadRegistersFromCFData<CodecRegistryEntry::RegisterWidth>(uint64_t *a1, CFDataRef theData, int a3, int a4)
{
  unint64_t v7;
  const UInt8 *v8;
  const UInt8 *v9;
  unsigned int *v10;
  unsigned int *v11;
  unint64_t v12;
  const UInt8 *v13;
  const UInt8 *v14;
  unsigned int *v15;
  unsigned int *v16;
  int64_t Length;
  const UInt8 *BytePtr;
  const UInt8 *v19;
  uint64_t v20;
  unsigned int *value;
  unsigned int *end;
  unsigned int *begin;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  int v70;
  int v71;
  int v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  int v76;
  __int128 v77;
  uint64_t v78;
  std::vector<unsigned int> v79;
  _QWORD v80[5];

  if (!theData)
    return theData != 0;
  if (a4 == 1)
  {
    Length = CFDataGetLength(theData);
    BytePtr = CFDataGetBytePtr(theData);
    if (!BytePtr)
      return theData != 0;
    v19 = BytePtr;
    memset(&v79, 0, sizeof(v79));
    std::vector<unsigned int>::reserve(&v79, Length);
    if (Length <= 0)
    {
      begin = v79.__begin_;
      end = v79.__end_;
    }
    else
    {
      v70 = a3;
      v73 = a1;
      v20 = 0;
      end = v79.__end_;
      value = v79.__end_cap_.__value_;
      begin = v79.__begin_;
      do
      {
        v24 = v19[v20];
        if (end >= value)
        {
          v25 = end - begin;
          v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 62)
          {
            v79.__begin_ = begin;
            v79.__end_ = end;
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if (((char *)value - (char *)begin) >> 1 > v26)
            v26 = ((char *)value - (char *)begin) >> 1;
          if ((unint64_t)((char *)value - (char *)begin) >= 0x7FFFFFFFFFFFFFFCLL)
            v27 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v27 = v26;
          if (v27)
            v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v27);
          else
            v28 = 0;
          v29 = (unsigned int *)(v27 + 4 * v25);
          *v29 = v24;
          v30 = v29 + 1;
          while (end != begin)
          {
            v31 = *--end;
            *--v29 = v31;
          }
          value = (unsigned int *)(v27 + 4 * v28);
          if (begin)
            operator delete(begin);
          begin = v29;
          end = v30;
        }
        else
        {
          *end++ = v24;
        }
        ++v20;
      }
      while (v20 != Length);
      v79.__end_ = end;
      v79.__end_cap_.__value_ = value;
      v79.__begin_ = begin;
      a1 = v73;
      a3 = v70;
    }
    v76 = a3;
    v78 = 0;
    v77 = 0uLL;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v77, begin, (uint64_t)end, end - begin);
    v62 = a1[2];
    v44 = a1[1];
    if (v44 >= v62)
    {
      v45 = (uint64_t)(v44 - *a1) >> 5;
      v64 = v45 + 1;
      if ((unint64_t)(v45 + 1) >> 59)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v65 = v62 - *a1;
      if (v65 >> 4 > v64)
        v64 = v65 >> 4;
      if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFE0)
        v48 = 0x7FFFFFFFFFFFFFFLL;
      else
        v48 = v64;
      goto LABEL_102;
    }
    goto LABEL_95;
  }
  if (a4 == 2)
  {
    v12 = CFDataGetLength(theData);
    v13 = CFDataGetBytePtr(theData);
    if (!v13)
      return theData != 0;
    v14 = v13;
    memset(&v79, 0, sizeof(v79));
    std::vector<unsigned int>::reserve(&v79, v12 >> 1);
    if (v12 > 1)
    {
      v71 = a3;
      v74 = a1;
      v32 = 0;
      if (v12 >> 1 <= 1)
        v33 = 1;
      else
        v33 = v12 >> 1;
      v16 = v79.__end_;
      v34 = v79.__end_cap_.__value_;
      v15 = v79.__begin_;
      do
      {
        v35 = *(unsigned __int16 *)&v14[2 * v32];
        if (v16 >= v34)
        {
          v36 = v16 - v15;
          v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 62)
          {
            v79.__begin_ = v15;
            v79.__end_ = v16;
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if (((char *)v34 - (char *)v15) >> 1 > v37)
            v37 = ((char *)v34 - (char *)v15) >> 1;
          if ((unint64_t)((char *)v34 - (char *)v15) >= 0x7FFFFFFFFFFFFFFCLL)
            v38 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v38 = v37;
          if (v38)
            v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v38);
          else
            v39 = 0;
          v40 = (unsigned int *)(v38 + 4 * v36);
          *v40 = v35;
          v41 = v40 + 1;
          while (v16 != v15)
          {
            v42 = *--v16;
            *--v40 = v42;
          }
          v34 = (unsigned int *)(v38 + 4 * v39);
          if (v15)
            operator delete(v15);
          v15 = v40;
          v16 = v41;
        }
        else
        {
          *v16++ = v35;
        }
        ++v32;
      }
      while (v32 != v33);
      v79.__end_ = v16;
      v79.__end_cap_.__value_ = v34;
      v79.__begin_ = v15;
      a1 = v74;
      a3 = v71;
    }
    else
    {
      v15 = v79.__begin_;
      v16 = v79.__end_;
    }
    v76 = a3;
    v78 = 0;
    v77 = 0uLL;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v77, v15, (uint64_t)v16, v16 - v15);
    v43 = a1[2];
    v44 = a1[1];
    if (v44 >= v43)
    {
      v45 = (uint64_t)(v44 - *a1) >> 5;
      v46 = v45 + 1;
      if ((unint64_t)(v45 + 1) >> 59)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v47 = v43 - *a1;
      if (v47 >> 4 > v46)
        v46 = v47 >> 4;
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFE0)
        v48 = 0x7FFFFFFFFFFFFFFLL;
      else
        v48 = v46;
      goto LABEL_102;
    }
LABEL_95:
    *(_DWORD *)v44 = v76;
    *(_OWORD *)(v44 + 8) = v77;
    *(_QWORD *)(v44 + 24) = v78;
    v63 = v44 + 32;
    goto LABEL_103;
  }
  if (a4 != 4)
    return theData != 0;
  v7 = CFDataGetLength(theData);
  v8 = CFDataGetBytePtr(theData);
  if (!v8)
    return theData != 0;
  v9 = v8;
  memset(&v79, 0, sizeof(v79));
  std::vector<unsigned int>::reserve(&v79, v7 >> 2);
  if (v7 > 3)
  {
    v72 = a3;
    v75 = a1;
    v49 = 0;
    if (v7 >> 2 <= 1)
      v50 = 1;
    else
      v50 = v7 >> 2;
    v11 = v79.__end_;
    v51 = v79.__end_cap_.__value_;
    v10 = v79.__begin_;
    do
    {
      if (v11 >= v51)
      {
        v52 = v11 - v10;
        v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 62)
        {
          v79.__begin_ = v10;
          v79.__end_ = v11;
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        if (((char *)v51 - (char *)v10) >> 1 > v53)
          v53 = ((char *)v51 - (char *)v10) >> 1;
        if ((unint64_t)((char *)v51 - (char *)v10) >= 0x7FFFFFFFFFFFFFFCLL)
          v54 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v54 = v53;
        if (v54)
          v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v54);
        else
          v55 = 0;
        v56 = (unsigned int *)(v54 + 4 * v52);
        *v56 = *(_DWORD *)&v9[4 * v49];
        v57 = v56 + 1;
        while (v11 != v10)
        {
          v58 = *--v11;
          *--v56 = v58;
        }
        v51 = (unsigned int *)(v54 + 4 * v55);
        if (v10)
          operator delete(v10);
        v10 = v56;
        v11 = v57;
      }
      else
      {
        *v11++ = *(_DWORD *)&v9[4 * v49];
      }
      ++v49;
    }
    while (v49 != v50);
    v79.__end_ = v11;
    v79.__end_cap_.__value_ = v51;
    v79.__begin_ = v10;
    a1 = v75;
    a3 = v72;
  }
  else
  {
    v10 = v79.__begin_;
    v11 = v79.__end_;
  }
  v76 = a3;
  v78 = 0;
  v77 = 0uLL;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v77, v10, (uint64_t)v11, v11 - v10);
  v59 = a1[2];
  v44 = a1[1];
  if (v44 < v59)
    goto LABEL_95;
  v45 = (uint64_t)(v44 - *a1) >> 5;
  v60 = v45 + 1;
  if ((unint64_t)(v45 + 1) >> 59)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  v61 = v59 - *a1;
  if (v61 >> 4 > v60)
    v60 = v61 >> 4;
  if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFE0)
    v48 = 0x7FFFFFFFFFFFFFFLL;
  else
    v48 = v60;
LABEL_102:
  v80[4] = a1 + 2;
  v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CAPropertyAddressList>>(v48);
  v67 = &v66[32 * v45];
  v80[0] = v66;
  v80[1] = v67;
  v80[3] = &v66[32 * v68];
  *(_DWORD *)v67 = v76;
  *(_OWORD *)(v67 + 8) = v77;
  *((_QWORD *)v67 + 3) = v78;
  v80[2] = v67 + 32;
  std::vector<std::pair<unsigned int,std::vector<unsigned int>>>::__swap_out_circular_buffer(a1, v80);
  v63 = a1[1];
  std::__split_buffer<std::pair<unsigned int,std::vector<unsigned int>>>::~__split_buffer((uint64_t)v80);
LABEL_103:
  a1[1] = v63;
  if (v79.__begin_)
    operator delete(v79.__begin_);
  return theData != 0;
}

void sub_1B5883844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<std::pair<unsigned int,std::vector<unsigned int>>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_DWORD *)(v6 - 32) = *(_DWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 16) = 0;
      *(_QWORD *)(v6 - 8) = 0;
      *(_QWORD *)(v6 - 24) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<unsigned int,std::vector<unsigned int>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 32;
    v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void AMCP::Core::Driver_Manager::load(char **a1, __int128 *a2, const void ***a3, const void ***a4)
{
  CFBundleRef MainBundle;
  uint64_t v9;
  const BOOL *v10;
  CFComparisonResult v11;
  const BOOL *v12;
  uint64_t v13;
  const __CFString **v14;
  const __CFString **v15;
  BOOL v16;
  AMCP::Log::Scope_Registry *v17;
  int v18;
  std::__shared_weak_count *v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  NSObject *v25;
  os_log_type_t v26;
  const __CFString **v27;
  const __CFString **v28;
  BOOL v29;
  std::__shared_weak_count *v30;
  NSObject *v31;
  unint64_t *v32;
  unint64_t v33;
  _opaque_pthread_t *v34;
  mach_port_t v35;
  std::__shared_weak_count *v36;
  NSObject *v37;
  unint64_t *v38;
  unint64_t v39;
  _opaque_pthread_t *v40;
  mach_port_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  AMCP::Log::Scope_Registry *v45;
  AMCP::Log::Scope_Registry *v46;
  int v47;
  std::__shared_weak_count *v48;
  NSObject *v49;
  unint64_t *v50;
  unint64_t v51;
  _opaque_pthread_t *v52;
  mach_port_t v53;
  NSObject *v54;
  os_log_type_t v55;
  std::string *v56;
  uint64_t v57;
  const __CFString *v58;
  std::string *v59;
  std::string::size_type v60;
  uint64_t v61;
  const __CFString *v62;
  std::string *v63;
  std::string::size_type v64;
  _BOOL8 v65;
  int v66;
  std::__shared_weak_count *v67;
  NSObject *v68;
  unint64_t *v69;
  unint64_t v70;
  _opaque_pthread_t *v71;
  mach_port_t v72;
  _BYTE *v73;
  NSObject *v74;
  os_log_type_t v75;
  std::__shared_weak_count *v76;
  NSObject *v77;
  unint64_t *v78;
  unint64_t v79;
  _opaque_pthread_t *v80;
  mach_port_t v81;
  std::__shared_weak_count *v82;
  NSObject *v83;
  unint64_t *v84;
  unint64_t v85;
  _opaque_pthread_t *v86;
  mach_port_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  _BOOL4 v91;
  std::__shared_weak_count *v92;
  NSObject *v93;
  unint64_t *v94;
  unint64_t v95;
  _opaque_pthread_t *v96;
  mach_port_t v97;
  _BYTE *v98;
  std::__shared_weak_count *v99;
  NSObject *v100;
  unint64_t *v101;
  unint64_t v102;
  _opaque_pthread_t *v103;
  mach_port_t v104;
  _BYTE *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  AMCP::Log::Scope_Registry *v109;
  int v110;
  std::__shared_weak_count *v111;
  NSObject *v112;
  unint64_t *v113;
  unint64_t v114;
  _opaque_pthread_t *v115;
  mach_port_t v116;
  std::string *v117;
  NSObject *v118;
  os_log_type_t v119;
  std::__shared_weak_count *v120;
  NSObject *v121;
  unint64_t *v122;
  unint64_t v123;
  _opaque_pthread_t *v124;
  mach_port_t v125;
  std::string *v126;
  std::__shared_weak_count *v127;
  NSObject *v128;
  unint64_t *v129;
  unint64_t v130;
  _opaque_pthread_t *v131;
  mach_port_t v132;
  std::string *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  const __CFString **v137;
  const __CFString **v138;
  const __CFString **v139;
  const __CFString **v140;
  const __CFString **v141;
  AMCP::Log::Scope_Registry *v142;
  AMCP::Log::Scope_Registry *v144;
  int v145;
  std::__shared_weak_count *v146;
  NSObject *v147;
  unint64_t *v148;
  unint64_t v149;
  _opaque_pthread_t *v150;
  mach_port_t v151;
  NSObject *v152;
  os_log_type_t v153;
  std::__shared_weak_count *v154;
  NSObject *v155;
  unint64_t *v156;
  unint64_t v157;
  _opaque_pthread_t *v158;
  mach_port_t v159;
  std::__shared_weak_count *v160;
  NSObject *v161;
  unint64_t *v162;
  unint64_t v163;
  _opaque_pthread_t *v164;
  mach_port_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  char *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t *p_shared_owners;
  unint64_t v176;
  unint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  std::string::size_type v181;
  int v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  __int32 v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  unsigned int v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  unsigned int v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  unsigned int v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  std::string *v225;
  uint64_t v226;
  unint64_t v227;
  std::string *v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  void *v236;
  unint64_t v237;
  char *v238;
  uint64_t v239;
  unint64_t *v240;
  unint64_t v241;
  char *v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  char *v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  unint64_t *v251;
  unint64_t v252;
  char *v253;
  char *v254;
  char *v255;
  __int128 v256;
  int64x2_t v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  char *v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  unint64_t *v266;
  unint64_t v267;
  AMCP::Log::Scope_Registry *v268;
  int v269;
  std::__shared_weak_count *v270;
  NSObject *v271;
  unint64_t *v272;
  unint64_t v273;
  _opaque_pthread_t *v274;
  mach_port_t v275;
  NSObject *v276;
  os_log_type_t v277;
  std::__shared_weak_count *v278;
  NSObject *v279;
  unint64_t *v280;
  unint64_t v281;
  _opaque_pthread_t *v282;
  mach_port_t v283;
  std::__shared_weak_count *v284;
  NSObject *v285;
  unint64_t *v286;
  unint64_t v287;
  _opaque_pthread_t *v288;
  mach_port_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  _BOOL4 v293;
  const __CFString **v294;
  const __CFString **v295;
  const __CFString **v296;
  const __CFString **v297;
  const __CFString **v298;
  AMCP::Log::Scope_Registry *v299;
  AMCP::Log::Scope_Registry *v301;
  int v302;
  std::__shared_weak_count *v303;
  NSObject *v304;
  unint64_t *v305;
  unint64_t v306;
  _opaque_pthread_t *v307;
  mach_port_t v308;
  NSObject *v309;
  os_log_type_t v310;
  std::__shared_weak_count *v311;
  NSObject *v312;
  unint64_t *v313;
  unint64_t v314;
  _opaque_pthread_t *v315;
  mach_port_t v316;
  std::__shared_weak_count *v317;
  NSObject *v318;
  unint64_t *v319;
  unint64_t v320;
  _opaque_pthread_t *v321;
  mach_port_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  char *v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t *v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t *v335;
  unint64_t v336;
  unint64_t v337;
  uint64_t v338;
  int v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  int v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  unint64_t v358;
  std::__shared_weak_count *v359;
  unint64_t *v360;
  unint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  int v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  int v372;
  std::__shared_weak_count *v373;
  unint64_t *v374;
  unint64_t v375;
  int v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  void *v383;
  const char *v384;
  CFMutableDictionaryRef v385;
  void *v386;
  std::string *v387;
  uint64_t v388;
  NSObject *v389;
  CFTypeRef v390;
  __int128 v391;
  char *v392;
  uint64_t v393;
  uint64_t v394;
  std::__shared_weak_count *v395;
  unint64_t *v396;
  unint64_t v397;
  AMCP::Log::Scope_Registry *v398;
  unint64_t v399;
  char *v400;
  uint64_t v401;
  unint64_t *v402;
  unint64_t v403;
  char *v404;
  uint64_t v405;
  unint64_t v406;
  uint64_t v407;
  unint64_t v408;
  char *v409;
  uint64_t v410;
  char *v411;
  uint64_t v412;
  unint64_t *v413;
  unint64_t v414;
  char *v415;
  char *v416;
  char *v417;
  __int128 v418;
  int64x2_t v419;
  char *v420;
  std::__shared_weak_count *v421;
  unint64_t *v422;
  unint64_t v423;
  unint64_t *v424;
  unint64_t v425;
  AMCP::Log::Scope_Registry *v426;
  int v427;
  std::__shared_weak_count *v428;
  NSObject *v429;
  unint64_t *v430;
  unint64_t v431;
  _opaque_pthread_t *v432;
  mach_port_t v433;
  NSObject *v434;
  os_log_type_t v435;
  std::__shared_weak_count *v436;
  NSObject *v437;
  unint64_t *v438;
  unint64_t v439;
  _opaque_pthread_t *v440;
  mach_port_t v441;
  std::__shared_weak_count *v442;
  NSObject *v443;
  unint64_t *v444;
  unint64_t v445;
  _opaque_pthread_t *v446;
  mach_port_t v447;
  std::__shared_weak_count *v448;
  unint64_t *v449;
  unint64_t v450;
  _BOOL4 v451;
  const __CFString **v452;
  const __CFString **v453;
  const __CFString **v454;
  const __CFString **v455;
  const __CFString **v456;
  std::string::size_type v457;
  AMCP::Log::Scope_Registry *v459;
  int v460;
  std::__shared_weak_count *v461;
  NSObject *v462;
  unint64_t *v463;
  unint64_t v464;
  _opaque_pthread_t *v465;
  mach_port_t v466;
  NSObject *v467;
  os_log_type_t v468;
  std::__shared_weak_count *v469;
  NSObject *v470;
  unint64_t *v471;
  unint64_t v472;
  _opaque_pthread_t *v473;
  mach_port_t v474;
  std::__shared_weak_count *v475;
  NSObject *v476;
  unint64_t *v477;
  unint64_t v478;
  _opaque_pthread_t *v479;
  mach_port_t v480;
  std::__shared_weak_count *v481;
  unint64_t *v482;
  unint64_t v483;
  std::__shared_weak_count *v484;
  unint64_t *v485;
  unint64_t v486;
  char *v487;
  std::__shared_weak_count *v488;
  unint64_t *v489;
  unint64_t *v490;
  unint64_t v491;
  unint64_t v492;
  unint64_t *v493;
  unint64_t v494;
  unint64_t v495;
  uint64_t v496;
  int v497;
  std::__shared_weak_count *v498;
  unint64_t *v499;
  unint64_t v500;
  std::__shared_weak_count *v501;
  unint64_t *v502;
  unint64_t v503;
  std::__shared_weak_count *v504;
  unint64_t *v505;
  unint64_t v506;
  std::__shared_weak_count *v507;
  unint64_t *v508;
  unint64_t v509;
  std::__shared_weak_count *v510;
  unint64_t *v511;
  unint64_t v512;
  int v513;
  std::__shared_weak_count *v514;
  unint64_t *v515;
  unint64_t v516;
  std::__shared_weak_count *v517;
  unint64_t *v518;
  unint64_t v519;
  std::__shared_weak_count *v520;
  unint64_t *v521;
  unint64_t v522;
  std::__shared_weak_count *v523;
  unint64_t *v524;
  unint64_t v525;
  int v526;
  std::__shared_weak_count *v527;
  unint64_t *v528;
  unint64_t v529;
  int v530;
  std::__shared_weak_count *v531;
  unint64_t *v532;
  unint64_t v533;
  int v534;
  std::__shared_weak_count *v535;
  unint64_t *v536;
  unint64_t v537;
  std::__shared_weak_count *v538;
  unint64_t *v539;
  unint64_t v540;
  void *v541;
  const char *v542;
  CFMutableDictionaryRef v543;
  void *v544;
  std::string *v545;
  uint64_t v546;
  NSObject *v547;
  CFTypeRef v548;
  __int128 v549;
  char *v550;
  uint64_t v551;
  uint64_t v552;
  std::__shared_weak_count *v553;
  unint64_t *v554;
  unint64_t v555;
  AMCP::Log::Scope_Registry *v556;
  unint64_t v557;
  char *v558;
  uint64_t v559;
  unint64_t *v560;
  unint64_t v561;
  char *v562;
  uint64_t v563;
  unint64_t v564;
  uint64_t v565;
  unint64_t v566;
  char *v567;
  uint64_t v568;
  char *v569;
  uint64_t v570;
  unint64_t *v571;
  unint64_t v572;
  char *v573;
  char *v574;
  char *v575;
  __int128 v576;
  int64x2_t v577;
  char *v578;
  std::__shared_weak_count *v579;
  unint64_t *v580;
  unint64_t v581;
  unint64_t *v582;
  unint64_t v583;
  int v584;
  std::__shared_weak_count *v585;
  NSObject *v586;
  unint64_t *v587;
  unint64_t v588;
  _opaque_pthread_t *v589;
  mach_port_t v590;
  NSObject *v591;
  os_log_type_t v592;
  std::__shared_weak_count *v593;
  NSObject *v594;
  unint64_t *v595;
  unint64_t v596;
  _opaque_pthread_t *v597;
  mach_port_t v598;
  std::__shared_weak_count *v599;
  NSObject *v600;
  unint64_t *v601;
  unint64_t v602;
  _opaque_pthread_t *v603;
  mach_port_t v604;
  std::__shared_weak_count *v605;
  unint64_t *v606;
  unint64_t v607;
  AMCP::Log::Scope_Registry *v608;
  int v609;
  std::__shared_weak_count *v610;
  NSObject *v611;
  unint64_t *v612;
  unint64_t v613;
  _opaque_pthread_t *v614;
  mach_port_t v615;
  NSObject *v616;
  os_log_type_t v617;
  std::__shared_weak_count *v618;
  NSObject *v619;
  unint64_t *v620;
  unint64_t v621;
  _opaque_pthread_t *v622;
  mach_port_t v623;
  std::__shared_weak_count *v624;
  NSObject *v625;
  unint64_t *v626;
  unint64_t v627;
  _opaque_pthread_t *v628;
  mach_port_t v629;
  std::__shared_weak_count *v630;
  unint64_t *v631;
  unint64_t v632;
  std::__shared_weak_count *v633;
  uint64_t v634;
  unint64_t *v635;
  unint64_t v636;
  std::__shared_weak_count *v637;
  std::__shared_weak_count *v638;
  unint64_t *v639;
  std::string::size_type v640;
  unint64_t *v641;
  unint64_t v642;
  unint64_t v643;
  unint64_t v644;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v646;
  unint64_t *p_shared_weak_owners;
  unint64_t v648;
  unint64_t v649;
  unint64_t *v650;
  unint64_t v651;
  unint64_t v652;
  AMCP::Log::Scope_Registry *v653;
  unint64_t v654;
  char *v655;
  std::string::size_type v656;
  unint64_t *v657;
  unint64_t v658;
  char *v659;
  uint64_t v660;
  unint64_t v661;
  uint64_t v662;
  unint64_t v663;
  char *v664;
  uint64_t v665;
  char *v666;
  std::string::size_type v667;
  unint64_t *v668;
  unint64_t v669;
  char *v670;
  char *v671;
  char *v672;
  __int128 v673;
  int64x2_t v674;
  std::string *v675;
  std::__shared_weak_count *v676;
  unint64_t *v677;
  unint64_t v678;
  unint64_t *v679;
  unint64_t v680;
  AMCP::Log::Scope_Registry *v681;
  int v682;
  std::__shared_weak_count *v683;
  NSObject *v684;
  unint64_t *v685;
  unint64_t v686;
  _opaque_pthread_t *v687;
  mach_port_t v688;
  NSObject *v689;
  os_log_type_t v690;
  std::__shared_weak_count *v691;
  NSObject *v692;
  unint64_t *v693;
  unint64_t v694;
  _opaque_pthread_t *v695;
  mach_port_t v696;
  std::__shared_weak_count *v697;
  NSObject *v698;
  unint64_t *v699;
  unint64_t v700;
  _opaque_pthread_t *v701;
  mach_port_t v702;
  std::__shared_weak_count *v703;
  unint64_t *v704;
  unint64_t v705;
  _BOOL4 v706;
  const __CFString **v707;
  const __CFString **v708;
  const __CFString **v709;
  const __CFString **v710;
  const __CFString **v711;
  AMCP::Log::Scope_Registry *v712;
  AMCP::Log::Scope_Registry *v714;
  int v715;
  std::__shared_weak_count *v716;
  NSObject *v717;
  unint64_t *v718;
  unint64_t v719;
  _opaque_pthread_t *v720;
  mach_port_t v721;
  NSObject *v722;
  os_log_type_t v723;
  std::__shared_weak_count *v724;
  NSObject *v725;
  unint64_t *v726;
  unint64_t v727;
  _opaque_pthread_t *v728;
  mach_port_t v729;
  std::__shared_weak_count *v730;
  NSObject *v731;
  unint64_t *v732;
  unint64_t v733;
  _opaque_pthread_t *v734;
  mach_port_t v735;
  std::__shared_weak_count *v736;
  unint64_t *v737;
  unint64_t v738;
  __int128 v739;
  std::__shared_weak_count *v740;
  unint64_t *v741;
  unint64_t v742;
  char *v743;
  std::__shared_weak_count *v744;
  unint64_t *v745;
  unint64_t *v746;
  unint64_t v747;
  unint64_t v748;
  unint64_t *v749;
  unint64_t v750;
  unint64_t v751;
  uint64_t v752;
  int v753;
  std::__shared_weak_count *v754;
  unint64_t *v755;
  unint64_t v756;
  std::__shared_weak_count *v757;
  unint64_t *v758;
  unint64_t v759;
  std::__shared_weak_count *v760;
  unint64_t *v761;
  unint64_t v762;
  std::__shared_weak_count *v763;
  unint64_t *v764;
  unint64_t v765;
  std::__shared_weak_count *v766;
  unint64_t *v767;
  unint64_t v768;
  int v769;
  std::__shared_weak_count *v770;
  unint64_t *v771;
  unint64_t v772;
  std::__shared_weak_count *v773;
  unint64_t *v774;
  unint64_t v775;
  std::__shared_weak_count *v776;
  unint64_t *v777;
  unint64_t v778;
  std::__shared_weak_count *v779;
  unint64_t *v780;
  unint64_t v781;
  unsigned int v782;
  std::__shared_weak_count *v783;
  unint64_t *v784;
  unint64_t v785;
  unsigned int v786;
  std::__shared_weak_count *v787;
  unint64_t *v788;
  unint64_t v789;
  unsigned int v790;
  std::__shared_weak_count *v791;
  unint64_t *v792;
  unint64_t v793;
  uint64_t v794;
  void *v795;
  void **p_lpsrc;
  unint64_t v797;
  __int128 v798;
  _QWORD *v799;
  uint64_t v800;
  std::__shared_weak_count *v801;
  unint64_t *v802;
  unint64_t v803;
  uint64_t v804;
  void *v805;
  void **v806;
  unint64_t v807;
  __int128 v808;
  __n128 v809;
  _QWORD *v810;
  uint64_t v811;
  std::__shared_weak_count *v812;
  unint64_t *v813;
  unint64_t v814;
  std::__shared_weak_count *v815;
  unint64_t *v816;
  unint64_t v817;
  std::__shared_weak_count *v818;
  unint64_t *v819;
  unint64_t v820;
  void *v821;
  unint64_t v822;
  char *v823;
  uint64_t v824;
  unint64_t *v825;
  unint64_t v826;
  char *v827;
  uint64_t v828;
  unint64_t v829;
  uint64_t v830;
  unint64_t v831;
  char *v832;
  uint64_t v833;
  char *v834;
  uint64_t v835;
  unint64_t *v836;
  unint64_t v837;
  char *v838;
  char *v839;
  char *v840;
  __int128 v841;
  int64x2_t v842;
  std::string::size_type v843;
  std::__shared_weak_count *v844;
  unint64_t *v845;
  unint64_t v846;
  unint64_t *v847;
  unint64_t v848;
  AMCP::Log::Scope_Registry *v849;
  int v850;
  std::__shared_weak_count *v851;
  NSObject *v852;
  unint64_t *v853;
  unint64_t v854;
  _opaque_pthread_t *v855;
  mach_port_t v856;
  NSObject *v857;
  os_log_type_t v858;
  std::__shared_weak_count *v859;
  NSObject *v860;
  unint64_t *v861;
  unint64_t v862;
  _opaque_pthread_t *v863;
  mach_port_t v864;
  std::__shared_weak_count *v865;
  NSObject *v866;
  unint64_t *v867;
  unint64_t v868;
  _opaque_pthread_t *v869;
  mach_port_t v870;
  unint64_t *v871;
  std::string::size_type size;
  _QWORD *v873;
  _QWORD *v874;
  uint64_t v875;
  int64x2_t v876;
  std::string::size_type v877;
  std::runtime_error *exception;
  __int128 v879;
  __int128 v880;
  __int128 v881;
  BOOL v882;
  __int128 v883;
  const __CFString **v884;
  const __CFString **v885;
  uint64_t v886;
  int64x2_t v887;
  std::string::pointer data;
  CFTypeRef v889;
  uint64_t v890;
  int64x2_t v891;
  char *v892;
  _QWORD *v893;
  CFTypeRef v894[3];
  CFTypeRef v895;
  NSObject *v896;
  CFTypeRef v897[3];
  CFTypeRef v898;
  NSObject *v899;
  __int128 v900;
  void *lpsrc;
  std::__shared_weak_count *v902;
  __int128 v903;
  uint64_t v904;
  std::__shared_weak_count *v905;
  _BYTE __p[24];
  char *v907;
  _QWORD *v908;
  std::string cf[13];
  _BYTE v910[24];
  char *v911;
  _QWORD *v912;
  std::string v913;
  std::string *v914;
  _QWORD *v915;
  _BYTE v916[32];
  int v917;
  _BYTE v918[24];
  _BYTE *v919;
  uint64_t v920;

  v920 = *MEMORY[0x1E0C80C00];
  MainBundle = CFBundleGetMainBundle();
  v9 = (uint64_t)mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::BundleRef_Traits>::from_get(&v889, MainBundle);
  if (!v889)
  {
    v887 = 0uLL;
    data = 0;
    v884 = 0;
    v885 = 0;
    v886 = 0;
LABEL_12:
    if (&v887 != (int64x2_t *)a3)
      std::vector<applesauce::CF::StringRef>::__assign_with_size[abi:ne180100]<applesauce::CF::StringRef*,applesauce::CF::StringRef*>((uint64_t)&v887, *a3, a3[1], a3[1] - *a3);
    if (&v884 != (const __CFString ***)a4)
      std::vector<applesauce::CF::StringRef>::__assign_with_size[abi:ne180100]<applesauce::CF::StringRef*,applesauce::CF::StringRef*>((uint64_t)&v884, *a4, a4[1], a4[1] - *a4);
    goto LABEL_16;
  }
  mcp_applesauce::CF::BundleRef_proxy::get_bundle_id((applesauce::CF::StringRef *)cf, (__CFBundle *)v889);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v916, "com.apple.audio.coreaudiod");
  v11 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)cf[0].__r_.__value_.__l.__data_, (const __CFString **)v916);
  if (*(_QWORD *)v916)
    CFRelease(*(CFTypeRef *)v916);
  v9 = cf[0].__r_.__value_.__r.__words[0];
  if (cf[0].__r_.__value_.__r.__words[0])
    CFRelease(cf[0].__r_.__value_.__l.__data_);
  v887 = 0uLL;
  data = 0;
  v884 = 0;
  v885 = 0;
  v886 = 0;
  if (v11)
    goto LABEL_12;
  v9 = AMCP::Feature_Flags::access_run_new_hal(0, v10);
  if ((v9 & 1) != 0)
    goto LABEL_12;
  v9 = AMCP::Feature_Flags::access_allow_mcp_and_hal_coex(0, v12);
  if ((v9 & 1) != 0)
    goto LABEL_12;
  if (v887.i64[1] >= (unint64_t)data)
  {
    v258 = (v887.i64[1] - v887.i64[0]) >> 3;
    if ((unint64_t)(v258 + 1) >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v259 = (uint64_t)&data[-v887.i64[0]] >> 2;
    if (v259 <= v258 + 1)
      v259 = v258 + 1;
    if ((unint64_t)&data[-v887.i64[0]] >= 0x7FFFFFFFFFFFFFF8)
      v260 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v260 = v259;
    cf[1].__r_.__value_.__l.__size_ = (std::string::size_type)&data;
    if (v260)
      v260 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v260);
    else
      v261 = 0;
    cf[0].__r_.__value_.__r.__words[0] = v260;
    cf[0].__r_.__value_.__l.__size_ = v260 + 8 * v258;
    cf[0].__r_.__value_.__r.__words[2] = cf[0].__r_.__value_.__l.__size_;
    cf[1].__r_.__value_.__r.__words[0] = v260 + 8 * v261;
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf[0].__r_.__value_.__l.__size_, "com.apple.audio.Null-Driver");
    size = cf[0].__r_.__value_.__l.__size_;
    v13 = cf[0].__r_.__value_.__r.__words[2] + 8;
    cf[0].__r_.__value_.__r.__words[2] += 8;
    v873 = (_QWORD *)v887.i64[1];
    v874 = (_QWORD *)v887.i64[0];
    if (v887.i64[1] == v887.i64[0])
    {
      v876 = vdupq_n_s64(v887.u64[1]);
    }
    else
    {
      do
      {
        v875 = *--v873;
        *(_QWORD *)(size - 8) = v875;
        size -= 8;
        *v873 = 0;
      }
      while (v873 != v874);
      v876 = v887;
      v13 = cf[0].__r_.__value_.__r.__words[2];
    }
    v887.i64[0] = size;
    v887.i64[1] = v13;
    *(int64x2_t *)&cf[0].__r_.__value_.__r.__words[1] = v876;
    v877 = (std::string::size_type)data;
    data = cf[1].__r_.__value_.__l.__data_;
    cf[1].__r_.__value_.__r.__words[0] = v877;
    cf[0].__r_.__value_.__r.__words[0] = v876.i64[0];
    v9 = std::__split_buffer<applesauce::CF::StringRef>::~__split_buffer((uint64_t)cf);
  }
  else
  {
    v9 = (uint64_t)applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v887.i64[1], "com.apple.audio.Null-Driver");
    v13 = v887.i64[1] + 8;
  }
  v887.i64[1] = v13;
LABEL_16:
  if (v887.i64[0] == v887.i64[1])
    goto LABEL_26;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "*");
  v14 = v884;
  v15 = v885;
  if (v884 == v885)
  {
    v16 = 0;
  }
  else
  {
    while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v14, (const __CFString **)cf))
    {
      if (++v14 == v15)
      {
        v14 = v15;
        break;
      }
    }
    v16 = v14 != v885;
  }
  v9 = cf[0].__r_.__value_.__r.__words[0];
  if (cf[0].__r_.__value_.__r.__words[0])
    CFRelease(cf[0].__r_.__value_.__l.__data_);
  if (v16)
  {
LABEL_26:
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v916, "com.apple.coreaudio", "AMCP");
    v18 = *(_DWORD *)(*(_QWORD *)v916 + 16);
    switch(v18)
    {
      case 3:
        AMCP::Log::Scope_Registry::get(v17);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        v36 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
        v37 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_)
        {
          v38 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        if (!os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
          goto LABEL_56;
        v40 = pthread_self();
        v41 = pthread_mach_thread_np(v40);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v41;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 63;
        v25 = v37;
        v26 = OS_LOG_TYPE_INFO;
        break;
      case 2:
        AMCP::Log::Scope_Registry::get(v17);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        v30 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
        v31 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_)
        {
          v32 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          v34 = pthread_self();
          v35 = pthread_mach_thread_np(v34);
          LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v35;
          LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
          WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 63;
          _os_log_debug_impl(&dword_1B57BA000, v31, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Loading no drivers.", (uint8_t *)cf, 0x18u);
        }
        goto LABEL_56;
      case 1:
        AMCP::Log::Scope_Registry::get(v17);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        v19 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
        v20 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_)
        {
          v21 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
LABEL_56:
          v42 = *(std::__shared_weak_count **)&v916[8];
          if (!*(_QWORD *)&v916[8])
            goto LABEL_1243;
          v43 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
LABEL_59:
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
          goto LABEL_1243;
        }
        v23 = pthread_self();
        v24 = pthread_mach_thread_np(v23);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v24;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 63;
        v25 = v20;
        v26 = OS_LOG_TYPE_DEFAULT;
        break;
      default:
        goto LABEL_56;
    }
    _os_log_impl(&dword_1B57BA000, v25, v26, "%6u %32s:%-5d Loading no drivers.", (uint8_t *)cf, 0x18u);
    goto LABEL_56;
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "*");
  v28 = (const __CFString **)v887.i64[1];
  v27 = (const __CFString **)v887.i64[0];
  if (v887.i64[0] == v887.i64[1])
  {
    v29 = 0;
  }
  else
  {
    while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v27, (const __CFString **)cf))
    {
      if (++v27 == v28)
      {
        v27 = v28;
        break;
      }
    }
    v29 = v27 != (const __CFString **)v887.i64[1];
  }
  v45 = (AMCP::Log::Scope_Registry *)cf[0].__r_.__value_.__r.__words[0];
  if (cf[0].__r_.__value_.__r.__words[0])
    CFRelease(cf[0].__r_.__value_.__l.__data_);
  if (v29)
  {
    AMCP::Log::Scope_Registry::get(v45);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v916, "com.apple.coreaudio", "AMCP");
    v47 = *(_DWORD *)(*(_QWORD *)v916 + 16);
    switch(v47)
    {
      case 3:
        AMCP::Log::Scope_Registry::get(v46);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        v82 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
        v83 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_)
        {
          v84 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        if (!os_log_type_enabled(v83, OS_LOG_TYPE_INFO))
          goto LABEL_131;
        v86 = pthread_self();
        v87 = pthread_mach_thread_np(v86);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v87;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 67;
        v54 = v83;
        v55 = OS_LOG_TYPE_INFO;
        break;
      case 2:
        AMCP::Log::Scope_Registry::get(v46);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        v76 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
        v77 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_)
        {
          v78 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
        {
          v80 = pthread_self();
          v81 = pthread_mach_thread_np(v80);
          LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v81;
          LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
          WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 67;
          _os_log_debug_impl(&dword_1B57BA000, v77, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Loading all drivers...", (uint8_t *)cf, 0x18u);
        }
        goto LABEL_131;
      case 1:
        AMCP::Log::Scope_Registry::get(v46);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        v48 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
        v49 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_)
        {
          v50 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        if (!os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
        {
LABEL_131:
          v88 = *(std::__shared_weak_count **)&v916[8];
          if (*(_QWORD *)&v916[8])
          {
            v89 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
            do
              v90 = __ldaxr(v89);
            while (__stlxr(v90 - 1, v89));
            if (!v90)
            {
              ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
              std::__shared_weak_count::__release_weak(v88);
            }
          }
          v91 = 1;
          goto LABEL_209;
        }
        v52 = pthread_self();
        v53 = pthread_mach_thread_np(v52);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v53;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 67;
        v54 = v49;
        v55 = OS_LOG_TYPE_DEFAULT;
        break;
      default:
        goto LABEL_131;
    }
    _os_log_impl(&dword_1B57BA000, v54, v55, "%6u %32s:%-5d Loading all drivers...", (uint8_t *)cf, 0x18u);
    goto LABEL_131;
  }
  if (!*(_QWORD *)v887.i64[0])
  {
LABEL_1253:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v56 = (std::string *)applesauce::CF::convert_to<std::string,0>((uint64_t)v916, *(const __CFString **)v887.i64[0]);
  if (v887.i64[1] - v887.i64[0] >= 9uLL)
  {
    v57 = 1;
    do
    {
      std::string::append((std::string *)v916, ", ", 2uLL);
      v58 = *(const __CFString **)(v887.i64[0] + 8 * v57);
      if (!v58)
        goto LABEL_1253;
      applesauce::CF::convert_to<std::string,0>((uint64_t)cf, v58);
      if ((cf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v59 = cf;
      else
        v59 = (std::string *)cf[0].__r_.__value_.__r.__words[0];
      if ((cf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v60 = HIBYTE(cf[0].__r_.__value_.__r.__words[2]);
      else
        v60 = cf[0].__r_.__value_.__l.__size_;
      v56 = std::string::append((std::string *)v916, (const std::string::value_type *)v59, v60);
      if (SHIBYTE(cf[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(cf[0].__r_.__value_.__l.__data_);
    }
    while (++v57 < (unint64_t)((v887.i64[1] - v887.i64[0]) >> 3));
  }
  memset(&v913, 0, sizeof(v913));
  if (v884 != v885)
  {
    if (!*v884)
      goto LABEL_1253;
    v56 = (std::string *)applesauce::CF::convert_to<std::string,0>((uint64_t)cf, *v884);
    if (SHIBYTE(v913.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v913.__r_.__value_.__l.__data_);
    v913 = cf[0];
    if ((unint64_t)((char *)v885 - (char *)v884) >= 9)
    {
      v61 = 1;
      do
      {
        std::string::append(&v913, ", ", 2uLL);
        v62 = v884[v61];
        if (!v62)
          goto LABEL_1253;
        applesauce::CF::convert_to<std::string,0>((uint64_t)cf, v62);
        if ((cf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v63 = cf;
        else
          v63 = (std::string *)cf[0].__r_.__value_.__r.__words[0];
        if ((cf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v64 = HIBYTE(cf[0].__r_.__value_.__r.__words[2]);
        else
          v64 = cf[0].__r_.__value_.__l.__size_;
        v56 = std::string::append(&v913, (const std::string::value_type *)v63, v64);
        if (SHIBYTE(cf[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(cf[0].__r_.__value_.__l.__data_);
      }
      while (++v61 < (unint64_t)(v885 - v884));
    }
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v56);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v910, "com.apple.coreaudio", "AMCP");
  v66 = *(_DWORD *)(*(_QWORD *)v910 + 16);
  switch(v66)
  {
    case 3:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v65);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      v99 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
      v100 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_)
      {
        v101 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
      }
      v65 = os_log_type_enabled(v100, OS_LOG_TYPE_INFO);
      if (v65)
      {
        v103 = pthread_self();
        v104 = pthread_mach_thread_np(v103);
        v105 = v916;
        if (v916[23] < 0)
          v105 = *(_BYTE **)v916;
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v104;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 87;
        LOWORD(cf[1].__r_.__value_.__l.__data_) = 2080;
        *(std::string::size_type *)((char *)cf[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)v105;
        v74 = v100;
        v75 = OS_LOG_TYPE_INFO;
        goto LABEL_155;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v65);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      v92 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
      v93 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_)
      {
        v94 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      v65 = os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG);
      if (v65)
      {
        v96 = pthread_self();
        v97 = pthread_mach_thread_np(v96);
        v98 = v916;
        if (v916[23] < 0)
          v98 = *(_BYTE **)v916;
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v97;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 87;
        LOWORD(cf[1].__r_.__value_.__l.__data_) = 2080;
        *(std::string::size_type *)((char *)cf[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)v98;
        _os_log_debug_impl(&dword_1B57BA000, v93, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Loading drivers: %s...", (uint8_t *)cf, 0x22u);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v65);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      v67 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
      v68 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_)
      {
        v69 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v65 = os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT);
      if (v65)
      {
        v71 = pthread_self();
        v72 = pthread_mach_thread_np(v71);
        v73 = v916;
        if (v916[23] < 0)
          v73 = *(_BYTE **)v916;
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v72;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 87;
        LOWORD(cf[1].__r_.__value_.__l.__data_) = 2080;
        *(std::string::size_type *)((char *)cf[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)v73;
        v74 = v68;
        v75 = OS_LOG_TYPE_DEFAULT;
LABEL_155:
        _os_log_impl(&dword_1B57BA000, v74, v75, "%6u %32s:%-5d Loading drivers: %s...", (uint8_t *)cf, 0x22u);
      }
      break;
  }
  v106 = *(std::__shared_weak_count **)&v910[8];
  if (*(_QWORD *)&v910[8])
  {
    v107 = (unint64_t *)(*(_QWORD *)&v910[8] + 8);
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v65);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v910, "com.apple.coreaudio", "AMCP");
  v110 = *(_DWORD *)(*(_QWORD *)v910 + 16);
  switch(v110)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v109);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      v127 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
      v128 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_)
      {
        v129 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
        do
          v130 = __ldaxr(v129);
        while (__stlxr(v130 - 1, v129));
        if (!v130)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
      }
      if (!os_log_type_enabled(v128, OS_LOG_TYPE_INFO))
        break;
      v131 = pthread_self();
      v132 = pthread_mach_thread_np(v131);
      v133 = &v913;
      if ((v913.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v133 = (std::string *)v913.__r_.__value_.__r.__words[0];
      LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v132;
      LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
      WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 88;
      LOWORD(cf[1].__r_.__value_.__l.__data_) = 2080;
      *(std::string::size_type *)((char *)cf[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)v133;
      v118 = v128;
      v119 = OS_LOG_TYPE_INFO;
      goto LABEL_191;
    case 2:
      AMCP::Log::Scope_Registry::get(v109);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      v120 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
      v121 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_)
      {
        v122 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
        }
      }
      if (os_log_type_enabled(v121, OS_LOG_TYPE_DEBUG))
      {
        v124 = pthread_self();
        v125 = pthread_mach_thread_np(v124);
        v126 = &v913;
        if ((v913.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v126 = (std::string *)v913.__r_.__value_.__r.__words[0];
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v125;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 88;
        LOWORD(cf[1].__r_.__value_.__l.__data_) = 2080;
        *(std::string::size_type *)((char *)cf[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)v126;
        _os_log_debug_impl(&dword_1B57BA000, v121, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Not Loading drivers: %s...", (uint8_t *)cf, 0x22u);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v109);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      v111 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
      v112 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_)
      {
        v113 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
        if (!v114)
        {
          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
          std::__shared_weak_count::__release_weak(v111);
        }
      }
      if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
      {
        v115 = pthread_self();
        v116 = pthread_mach_thread_np(v115);
        v117 = &v913;
        if ((v913.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v117 = (std::string *)v913.__r_.__value_.__r.__words[0];
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v116;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 88;
        LOWORD(cf[1].__r_.__value_.__l.__data_) = 2080;
        *(std::string::size_type *)((char *)cf[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)v117;
        v118 = v112;
        v119 = OS_LOG_TYPE_DEFAULT;
LABEL_191:
        _os_log_impl(&dword_1B57BA000, v118, v119, "%6u %32s:%-5d Not Loading drivers: %s...", (uint8_t *)cf, 0x22u);
      }
      break;
  }
  v134 = *(std::__shared_weak_count **)&v910[8];
  if (*(_QWORD *)&v910[8])
  {
    v135 = (unint64_t *)(*(_QWORD *)&v910[8] + 8);
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  if (SHIBYTE(v913.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v913.__r_.__value_.__l.__data_);
  if ((v916[23] & 0x80000000) != 0)
    operator delete(*(void **)v916);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "com.apple.audio.Null-Driver");
  v138 = (const __CFString **)v887.i64[1];
  v137 = (const __CFString **)v887.i64[0];
  if (v887.i64[0] == v887.i64[1])
  {
    v91 = 0;
  }
  else
  {
    while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v137, (const __CFString **)cf))
    {
      if (++v137 == v138)
      {
        v137 = v138;
        break;
      }
    }
    v91 = v137 != (const __CFString **)v887.i64[1];
  }
  if (cf[0].__r_.__value_.__r.__words[0])
    CFRelease(cf[0].__r_.__value_.__l.__data_);
LABEL_209:
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "com.apple.audio.Null-Driver");
  v139 = v884;
  v140 = v885;
  if (v884 == v885)
  {
    v141 = v884;
  }
  else
  {
    while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v139, (const __CFString **)cf))
    {
      if (++v139 == v140)
      {
        v139 = v140;
        break;
      }
    }
    v141 = v139;
    v139 = v885;
  }
  v142 = (AMCP::Log::Scope_Registry *)cf[0].__r_.__value_.__r.__words[0];
  if (cf[0].__r_.__value_.__r.__words[0])
    CFRelease(cf[0].__r_.__value_.__l.__data_);
  if (v141 == v139 && v91)
  {
    v882 = v887.i64[1] - v887.i64[0] == 8;
    AMCP::Log::Scope_Registry::get(v142);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v916, "com.apple.coreaudio", "AMCP");
    v145 = *(_DWORD *)(*(_QWORD *)v916 + 16);
    switch(v145)
    {
      case 3:
        AMCP::Log::Scope_Registry::get(v144);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        v160 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
        v161 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_)
        {
          v162 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
          do
            v163 = __ldaxr(v162);
          while (__stlxr(v163 - 1, v162));
          if (!v163)
          {
            ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
            std::__shared_weak_count::__release_weak(v160);
          }
        }
        if (os_log_type_enabled(v161, OS_LOG_TYPE_INFO))
        {
          v164 = pthread_self();
          v165 = pthread_mach_thread_np(v164);
          LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v165;
          LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
          WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 102;
          v152 = v161;
          v153 = OS_LOG_TYPE_INFO;
          goto LABEL_247;
        }
        break;
      case 2:
        AMCP::Log::Scope_Registry::get(v144);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        v154 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
        v155 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_)
        {
          v156 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
          do
            v157 = __ldaxr(v156);
          while (__stlxr(v157 - 1, v156));
          if (!v157)
          {
            ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
            std::__shared_weak_count::__release_weak(v154);
          }
        }
        if (os_log_type_enabled(v155, OS_LOG_TYPE_DEBUG))
        {
          v158 = pthread_self();
          v159 = pthread_mach_thread_np(v158);
          LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v159;
          LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
          WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 102;
          _os_log_debug_impl(&dword_1B57BA000, v155, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Loading Null driver (com.apple.audio.Null-Driver)...", (uint8_t *)cf, 0x18u);
        }
        break;
      case 1:
        AMCP::Log::Scope_Registry::get(v144);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        v146 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
        v147 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_)
        {
          v148 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
          do
            v149 = __ldaxr(v148);
          while (__stlxr(v149 - 1, v148));
          if (!v149)
          {
            ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
            std::__shared_weak_count::__release_weak(v146);
          }
        }
        if (os_log_type_enabled(v147, OS_LOG_TYPE_DEFAULT))
        {
          v150 = pthread_self();
          v151 = pthread_mach_thread_np(v150);
          LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v151;
          LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
          WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 102;
          v152 = v147;
          v153 = OS_LOG_TYPE_DEFAULT;
LABEL_247:
          _os_log_impl(&dword_1B57BA000, v152, v153, "%6u %32s:%-5d Loading Null driver (com.apple.audio.Null-Driver)...", (uint8_t *)cf, 0x18u);
        }
        break;
    }
    v166 = *(std::__shared_weak_count **)&v916[8];
    if (*(_QWORD *)&v916[8])
    {
      v167 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
      do
        v168 = __ldaxr(v167);
      while (__stlxr(v168 - 1, v167));
      if (!v168)
      {
        ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
        std::__shared_weak_count::__release_weak(v166);
      }
    }
    v879 = *a2;
    v169 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
    if (v169)
    {
      v170 = (unint64_t *)(*((_QWORD *)a2 + 1) + 8);
      do
        v171 = __ldxr(v170);
      while (__stxr(v171 + 1, v170));
    }
    v172 = (char *)operator new(0xA8uLL);
    v173 = (std::__shared_weak_count *)v172;
    *((_QWORD *)v172 + 1) = 0;
    v174 = (unint64_t *)(v172 + 8);
    *((_QWORD *)v172 + 2) = 0;
    *(_QWORD *)v172 = &off_1E696FAE0;
    if (v169)
    {
      p_shared_owners = (unint64_t *)&v169->__shared_owners_;
      do
        v176 = __ldxr(p_shared_owners);
      while (__stxr(v176 + 1, p_shared_owners));
    }
    *(_OWORD *)(v172 + 56) = v879;
    *((_QWORD *)v172 + 3) = &off_1E6984398;
    *((_QWORD *)v172 + 4) = 0;
    *((_QWORD *)v172 + 5) = 0;
    *((_QWORD *)v172 + 6) = &unk_1E69843C0;
    *((_DWORD *)v172 + 18) = 0;
    *((_QWORD *)v172 + 10) = 850045863;
    *(_OWORD *)(v172 + 88) = 0u;
    *(_OWORD *)(v172 + 104) = 0u;
    *(_OWORD *)(v172 + 120) = 0u;
    *(_OWORD *)(v172 + 136) = 0u;
    *(_OWORD *)(v172 + 152) = 0u;
    *(_QWORD *)__p = v172 + 24;
    *(_QWORD *)&__p[8] = v172;
    do
      v177 = __ldxr(v174);
    while (__stxr(v177 + 1, v174));
    v178 = (unint64_t *)(v172 + 16);
    do
      v179 = __ldxr(v178);
    while (__stxr(v179 + 1, v178));
    *((_QWORD *)v172 + 4) = v172 + 24;
    *((_QWORD *)v172 + 5) = v172;
    do
      v180 = __ldaxr(v174);
    while (__stlxr(v180 - 1, v174));
    if (!v180)
    {
      (*(void (**)(char *))(*(_QWORD *)v172 + 16))(v172);
      std::__shared_weak_count::__release_weak(v173);
    }
    v181 = *(_QWORD *)__p;
    v182 = AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)__p + 32) + 16));
    *(_DWORD *)(v181 + 48) = v182;
    memset(v916, 0, sizeof(v916));
    v917 = 1065353216;
    LODWORD(v890) = v182;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (int *)&v890, 1.58366009e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v916, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
    v183 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
    if (cf[0].__r_.__value_.__l.__size_)
    {
      v184 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
      do
        v185 = __ldaxr(v184);
      while (__stlxr(v185 - 1, v184));
      if (!v185)
      {
        ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
        std::__shared_weak_count::__release_weak(v183);
      }
    }
    LODWORD(v890) = 1853189228;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (int *)&v890, 1.58366006e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v916, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
    v186 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
    if (cf[0].__r_.__value_.__l.__size_)
    {
      v187 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
      do
        v188 = __ldaxr(v187);
      while (__stlxr(v188 - 1, v187));
      if (!v188)
      {
        ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
        std::__shared_weak_count::__release_weak(v186);
      }
    }
    LODWORD(v890) = 1853189228;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (int *)&v890, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v916, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
    v189 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
    if (cf[0].__r_.__value_.__l.__size_)
    {
      v190 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
      do
        v191 = __ldaxr(v190);
      while (__stlxr(v191 - 1, v190));
      if (!v191)
      {
        ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
        std::__shared_weak_count::__release_weak(v189);
      }
    }
    LODWORD(v890) = 1;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (int *)&v890, 1.58366011e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v916, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
    v192 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
    if (cf[0].__r_.__value_.__l.__size_)
    {
      v193 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
      do
        v194 = __ldaxr(v193);
      while (__stlxr(v194 - 1, v193));
      if (!v194)
      {
        ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
        std::__shared_weak_count::__release_weak(v192);
      }
    }
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v913, "com.apple.audio.Null-Driver");
    v890 = 0x676C6F626F706C67;
    v891.i32[0] = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)cf, (uint64_t)&v890, v913.__r_.__value_.__l.__data_);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v916, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
    v195 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
    if (cf[0].__r_.__value_.__l.__size_)
    {
      v196 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
      do
        v197 = __ldaxr(v196);
      while (__stlxr(v197 - 1, v196));
      if (!v197)
      {
        ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
        std::__shared_weak_count::__release_weak(v195);
      }
    }
    if (v913.__r_.__value_.__r.__words[0])
      CFRelease(v913.__r_.__value_.__l.__data_);
    v198 = *(_DWORD *)(v181 + 48);
    v890 = *(_QWORD *)(*(_QWORD *)(v181 + 32) + 16);
    v891.i32[0] = v198;
    AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>((uint64_t *)cf, 0, (__int128 *)&v890, 1.58366011e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v916, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
    v199 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
    if (cf[0].__r_.__value_.__l.__size_)
    {
      v200 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
      do
        v201 = __ldaxr(v200);
      while (__stlxr(v201 - 1, v200));
      if (!v201)
      {
        ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
        std::__shared_weak_count::__release_weak(v199);
      }
    }
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v913, "Null Driver");
    v890 = 0x676C6F626C6E616DLL;
    v891.i32[0] = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)cf, (uint64_t)&v890, v913.__r_.__value_.__l.__data_);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v916, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
    v202 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
    if (cf[0].__r_.__value_.__l.__size_)
    {
      v203 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
      do
        v204 = __ldaxr(v203);
      while (__stlxr(v204 - 1, v203));
      if (!v204)
      {
        ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
        std::__shared_weak_count::__release_weak(v202);
      }
    }
    if (v913.__r_.__value_.__r.__words[0])
      CFRelease(v913.__r_.__value_.__l.__data_);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v913, "Apple Inc.");
    v890 = 0x676C6F626C6D616BLL;
    v891.i32[0] = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)cf, (uint64_t)&v890, v913.__r_.__value_.__l.__data_);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v916, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
    v205 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
    if (cf[0].__r_.__value_.__l.__size_)
    {
      v206 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
      do
        v207 = __ldaxr(v206);
      while (__stlxr(v207 - 1, v206));
      if (!v207)
      {
        ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
        std::__shared_weak_count::__release_weak(v205);
      }
    }
    if (v913.__r_.__value_.__r.__words[0])
      CFRelease(v913.__r_.__value_.__l.__data_);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v913, "com.apple.audio.Null-Driver");
    v890 = 0x676C6F6270696964;
    v891.i32[0] = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)cf, (uint64_t)&v890, v913.__r_.__value_.__l.__data_);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v916, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
    v208 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
    if (cf[0].__r_.__value_.__l.__size_)
    {
      v209 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
      do
        v210 = __ldaxr(v209);
      while (__stlxr(v210 - 1, v209));
      if (!v210)
      {
        ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
        std::__shared_weak_count::__release_weak(v208);
      }
    }
    if (v913.__r_.__value_.__r.__words[0])
      CFRelease(v913.__r_.__value_.__l.__data_);
    v211 = *(_DWORD *)(v181 + 48);
    v890 = *(_QWORD *)(*(_QWORD *)(v181 + 32) + 16);
    v891.i64[0] = v211 | 0x61626F7800000000;
    AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)cf, 0, (__int128 *)&v890, 1.58366006e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v916, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
    v212 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
    if (cf[0].__r_.__value_.__l.__size_)
    {
      v213 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
      do
        v214 = __ldaxr(v213);
      while (__stlxr(v214 - 1, v213));
      if (!v214)
      {
        ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
        std::__shared_weak_count::__release_weak(v212);
      }
    }
    v215 = *(_DWORD *)(v181 + 48);
    v890 = *(_QWORD *)(*(_QWORD *)(v181 + 32) + 16);
    v891.i64[0] = v215 | 0x61636C6B00000000;
    AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)cf, 0, (__int128 *)&v890, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v916, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
    v216 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
    if (cf[0].__r_.__value_.__l.__size_)
    {
      v217 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
      do
        v218 = __ldaxr(v217);
      while (__stlxr(v218 - 1, v217));
      if (!v218)
      {
        ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
        std::__shared_weak_count::__release_weak(v216);
      }
    }
    v219 = *(_DWORD *)(v181 + 48);
    v890 = *(_QWORD *)(*(_QWORD *)(v181 + 32) + 16);
    v891.i64[0] = v219 | 0x6164657600000000;
    AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)cf, 0, (__int128 *)&v890, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v916, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
    v220 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
    if (cf[0].__r_.__value_.__l.__size_)
    {
      v221 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
      do
        v222 = __ldaxr(v221);
      while (__stlxr(v222 - 1, v221));
      if (!v222)
      {
        ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
        std::__shared_weak_count::__release_weak(v220);
      }
    }
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v910, 0, 1.5836601e190);
    v223 = *(_QWORD *)v910;
    v224 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>>();
    v913.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E6984488;
    v913.__r_.__value_.__l.__size_ = v181;
    v914 = &v913;
    memset(cf, 0, 40);
    std::__function::__value_func<std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>::__value_func[abi:ne180100]((uint64_t)cf, (uint64_t)&v913);
    cf[1].__r_.__value_.__l.__size_ = (std::string::size_type)AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v223, v224, (AMCP *)cf);
    if (cf[1].__r_.__value_.__l.__size_)
      ((void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))cf[1].__r_.__value_.__l.__size_)(0, (uint64_t)cf, 0, 0);
    v225 = v914;
    if (v914 == &v913)
    {
      v226 = 4;
      v225 = &v913;
    }
    else
    {
      if (!v914)
        goto LABEL_342;
      v226 = 5;
    }
    (*(void (**)(void))(v225->__r_.__value_.__r.__words[0] + 8 * v226))();
LABEL_342:
    v227 = AMCP::Implementation::get_type_marker<std::function<void ()(std::vector<unsigned int> const&)>>();
    v913.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E6984518;
    v913.__r_.__value_.__l.__size_ = v181;
    v914 = &v913;
    memset(cf, 0, 40);
    std::__function::__value_func<void ()(std::vector<unsigned int> const&)>::__value_func[abi:ne180100]((uint64_t)cf, (uint64_t)&v913);
    cf[1].__r_.__value_.__l.__size_ = (std::string::size_type)AMCP::Implementation::In_Place_Storage<std::function<void ()(std::vector<unsigned int> const&)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v223, v227, (AMCP *)cf);
    if (cf[1].__r_.__value_.__l.__size_)
      ((void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))cf[1].__r_.__value_.__l.__size_)(0, (uint64_t)cf, 0, 0);
    v228 = v914;
    if (v914 == &v913)
    {
      v229 = 4;
      v228 = &v913;
    }
    else
    {
      if (!v914)
      {
LABEL_349:
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v916, (unsigned int *)(v223 + 40), v910);
        AMCP::Core::Broker::make_core((AMCP::Core::Core **)cf, *(std::__shared_mutex_base **)(*(_QWORD *)(v181 + 32) + 16), (uint64_t)v916, *(unsigned int *)(v181 + 48));
        v230 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
        if (cf[0].__r_.__value_.__l.__size_)
        {
          v231 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
          do
            v232 = __ldaxr(v231);
          while (__stlxr(v232 - 1, v231));
          if (!v232)
          {
            ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
            std::__shared_weak_count::__release_weak(v230);
          }
        }
        v233 = *(std::__shared_weak_count **)&v910[8];
        if (*(_QWORD *)&v910[8])
        {
          v234 = (unint64_t *)(*(_QWORD *)&v910[8] + 8);
          do
            v235 = __ldaxr(v234);
          while (__stlxr(v235 - 1, v234));
          if (!v235)
          {
            ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
            std::__shared_weak_count::__release_weak(v233);
          }
        }
        std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(*(_QWORD **)&v916[16]);
        v236 = *(void **)v916;
        *(_QWORD *)v916 = 0;
        if (v236)
          operator delete(v236);
        v237 = (unint64_t)a1[2];
        v238 = a1[1];
        if ((unint64_t)v238 >= v237)
        {
          v243 = (v238 - *a1) >> 4;
          v244 = v243 + 1;
          if ((unint64_t)(v243 + 1) >> 60)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v245 = v237 - (_QWORD)*a1;
          if (v245 >> 3 > v244)
            v244 = v245 >> 3;
          if ((unint64_t)v245 >= 0x7FFFFFFFFFFFFFF0)
            v246 = 0xFFFFFFFFFFFFFFFLL;
          else
            v246 = v244;
          v893 = a1 + 2;
          v247 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v246);
          v249 = &v247[16 * v243];
          v250 = *(_QWORD *)&__p[8];
          *(_OWORD *)v249 = *(_OWORD *)__p;
          if (v250)
          {
            v251 = (unint64_t *)(v250 + 8);
            do
              v252 = __ldxr(v251);
            while (__stxr(v252 + 1, v251));
          }
          v254 = *a1;
          v253 = a1[1];
          if (v253 == *a1)
          {
            v257 = vdupq_n_s64((unint64_t)v253);
            v255 = &v247[16 * v243];
          }
          else
          {
            v255 = &v247[16 * v243];
            do
            {
              v256 = *((_OWORD *)v253 - 1);
              v253 -= 16;
              *((_OWORD *)v255 - 1) = v256;
              v255 -= 16;
              *(_QWORD *)v253 = 0;
              *((_QWORD *)v253 + 1) = 0;
            }
            while (v253 != v254);
            v257 = *(int64x2_t *)a1;
          }
          v242 = v249 + 16;
          *a1 = v255;
          a1[1] = v249 + 16;
          v891 = v257;
          v262 = a1[2];
          a1[2] = &v247[16 * v248];
          v892 = v262;
          v890 = v257.i64[0];
          v236 = (void *)std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v890);
        }
        else
        {
          *(_QWORD *)v238 = *(_QWORD *)__p;
          v239 = *(_QWORD *)&__p[8];
          *((_QWORD *)v238 + 1) = *(_QWORD *)&__p[8];
          if (v239)
          {
            v240 = (unint64_t *)(v239 + 8);
            do
              v241 = __ldxr(v240);
            while (__stxr(v241 + 1, v240));
          }
          v242 = v238 + 16;
        }
        a1[1] = v242;
        v263 = *(std::__shared_weak_count **)&__p[8];
        if (*(_QWORD *)&__p[8])
        {
          v264 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
          do
            v265 = __ldaxr(v264);
          while (__stlxr(v265 - 1, v264));
          if (!v265)
          {
            ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
            std::__shared_weak_count::__release_weak(v263);
          }
        }
        if (v169)
        {
          v266 = (unint64_t *)&v169->__shared_owners_;
          do
            v267 = __ldaxr(v266);
          while (__stlxr(v267 - 1, v266));
          if (!v267)
          {
            ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
            std::__shared_weak_count::__release_weak(v169);
          }
        }
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v236);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v916, "com.apple.coreaudio", "AMCP");
        v269 = *(_DWORD *)(*(_QWORD *)v916 + 16);
        switch(v269)
        {
          case 3:
            AMCP::Log::Scope_Registry::get(v268);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
            v284 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
            v285 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
            if (cf[0].__r_.__value_.__l.__size_)
            {
              v286 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
              do
                v287 = __ldaxr(v286);
              while (__stlxr(v287 - 1, v286));
              if (!v287)
              {
                ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
                std::__shared_weak_count::__release_weak(v284);
              }
            }
            if (os_log_type_enabled(v285, OS_LOG_TYPE_INFO))
            {
              v288 = pthread_self();
              v289 = pthread_mach_thread_np(v288);
              LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
              HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v289;
              LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
              WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
              HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 104;
              v276 = v285;
              v277 = OS_LOG_TYPE_INFO;
              goto LABEL_423;
            }
            break;
          case 2:
            AMCP::Log::Scope_Registry::get(v268);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
            v278 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
            v279 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
            if (cf[0].__r_.__value_.__l.__size_)
            {
              v280 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
              do
                v281 = __ldaxr(v280);
              while (__stlxr(v281 - 1, v280));
              if (!v281)
              {
                ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
                std::__shared_weak_count::__release_weak(v278);
              }
            }
            if (os_log_type_enabled(v279, OS_LOG_TYPE_DEBUG))
            {
              v282 = pthread_self();
              v283 = pthread_mach_thread_np(v282);
              LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
              HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v283;
              LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
              WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
              HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 104;
              _os_log_debug_impl(&dword_1B57BA000, v279, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Done loading Null driver (com.apple.audio.Null-Driver).", (uint8_t *)cf, 0x18u);
            }
            break;
          case 1:
            AMCP::Log::Scope_Registry::get(v268);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
            v270 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
            v271 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
            if (cf[0].__r_.__value_.__l.__size_)
            {
              v272 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
              do
                v273 = __ldaxr(v272);
              while (__stlxr(v273 - 1, v272));
              if (!v273)
              {
                ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
                std::__shared_weak_count::__release_weak(v270);
              }
            }
            if (os_log_type_enabled(v271, OS_LOG_TYPE_DEFAULT))
            {
              v274 = pthread_self();
              v275 = pthread_mach_thread_np(v274);
              LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
              HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v275;
              LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
              WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
              HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 104;
              v276 = v271;
              v277 = OS_LOG_TYPE_DEFAULT;
LABEL_423:
              _os_log_impl(&dword_1B57BA000, v276, v277, "%6u %32s:%-5d Done loading Null driver (com.apple.audio.Null-Driver).", (uint8_t *)cf, 0x18u);
            }
            break;
        }
        v290 = *(std::__shared_weak_count **)&v916[8];
        if (!*(_QWORD *)&v916[8])
          goto LABEL_428;
        v291 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
        do
          v292 = __ldaxr(v291);
        while (__stlxr(v292 - 1, v291));
        if (!v292)
        {
          ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
          std::__shared_weak_count::__release_weak(v290);
          if (v29)
            goto LABEL_429;
        }
        else
        {
LABEL_428:
          if (v29)
            goto LABEL_429;
        }
        goto LABEL_431;
      }
      v229 = 5;
    }
    (*(void (**)(void))(v228->__r_.__value_.__r.__words[0] + 8 * v229))();
    goto LABEL_349;
  }
  v882 = 0;
  if (v29)
  {
LABEL_429:
    v293 = 1;
    goto LABEL_439;
  }
LABEL_431:
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "com.apple.iokit.IOAudio1");
  v295 = (const __CFString **)v887.i64[1];
  v294 = (const __CFString **)v887.i64[0];
  if (v887.i64[0] == v887.i64[1])
  {
    v293 = 0;
  }
  else
  {
    while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v294, (const __CFString **)cf))
    {
      if (++v294 == v295)
      {
        v294 = v295;
        break;
      }
    }
    v293 = v294 != (const __CFString **)v887.i64[1];
  }
  if (cf[0].__r_.__value_.__r.__words[0])
    CFRelease(cf[0].__r_.__value_.__l.__data_);
LABEL_439:
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "com.apple.iokit.IOAudio1");
  v296 = v884;
  v297 = v885;
  if (v884 == v885)
  {
    v298 = v884;
  }
  else
  {
    while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v296, (const __CFString **)cf))
    {
      if (++v296 == v297)
      {
        v296 = v297;
        break;
      }
    }
    v298 = v296;
    v296 = v885;
  }
  v299 = (AMCP::Log::Scope_Registry *)cf[0].__r_.__value_.__r.__words[0];
  if (cf[0].__r_.__value_.__r.__words[0])
    CFRelease(cf[0].__r_.__value_.__l.__data_);
  if (v298 != v296 || !v293)
    goto LABEL_658;
  AMCP::Log::Scope_Registry::get(v299);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v916, "com.apple.coreaudio", "AMCP");
  v302 = *(_DWORD *)(*(_QWORD *)v916 + 16);
  switch(v302)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v301);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      v317 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
      v318 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_)
      {
        v319 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
        do
          v320 = __ldaxr(v319);
        while (__stlxr(v320 - 1, v319));
        if (!v320)
        {
          ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
          std::__shared_weak_count::__release_weak(v317);
        }
      }
      if (os_log_type_enabled(v318, OS_LOG_TYPE_INFO))
      {
        v321 = pthread_self();
        v322 = pthread_mach_thread_np(v321);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v322;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 111;
        v309 = v318;
        v310 = OS_LOG_TYPE_INFO;
        goto LABEL_475;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v301);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      v311 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
      v312 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_)
      {
        v313 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
        do
          v314 = __ldaxr(v313);
        while (__stlxr(v314 - 1, v313));
        if (!v314)
        {
          ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
          std::__shared_weak_count::__release_weak(v311);
        }
      }
      if (os_log_type_enabled(v312, OS_LOG_TYPE_DEBUG))
      {
        v315 = pthread_self();
        v316 = pthread_mach_thread_np(v315);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v316;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 111;
        _os_log_debug_impl(&dword_1B57BA000, v312, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Loading IOAudio1 driver (com.apple.iokit.IOAudio1)...", (uint8_t *)cf, 0x18u);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v301);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      v303 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
      v304 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_)
      {
        v305 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
        do
          v306 = __ldaxr(v305);
        while (__stlxr(v306 - 1, v305));
        if (!v306)
        {
          ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
          std::__shared_weak_count::__release_weak(v303);
        }
      }
      if (os_log_type_enabled(v304, OS_LOG_TYPE_DEFAULT))
      {
        v307 = pthread_self();
        v308 = pthread_mach_thread_np(v307);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v308;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 111;
        v309 = v304;
        v310 = OS_LOG_TYPE_DEFAULT;
LABEL_475:
        _os_log_impl(&dword_1B57BA000, v309, v310, "%6u %32s:%-5d Loading IOAudio1 driver (com.apple.iokit.IOAudio1)...", (uint8_t *)cf, 0x18u);
      }
      break;
  }
  v323 = *(std::__shared_weak_count **)&v916[8];
  if (*(_QWORD *)&v916[8])
  {
    v324 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
    do
      v325 = __ldaxr(v324);
    while (__stlxr(v325 - 1, v324));
    if (!v325)
    {
      ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
      std::__shared_weak_count::__release_weak(v323);
    }
  }
  v880 = *a2;
  v326 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
  if (v326)
  {
    v327 = (unint64_t *)(*((_QWORD *)a2 + 1) + 8);
    do
      v328 = __ldxr(v327);
    while (__stxr(v328 + 1, v327));
  }
  v329 = (char *)operator new(0x70uLL);
  v330 = (std::__shared_weak_count *)v329;
  *((_QWORD *)v329 + 1) = 0;
  v331 = (unint64_t *)(v329 + 8);
  *((_QWORD *)v329 + 2) = 0;
  *(_QWORD *)v329 = &off_1E696FB30;
  if (v326)
  {
    v332 = (unint64_t *)&v326->__shared_owners_;
    do
      v333 = __ldxr(v332);
    while (__stxr(v333 + 1, v332));
  }
  *(_OWORD *)(v329 + 56) = v880;
  *((_QWORD *)v329 + 3) = &off_1E699F9D0;
  *((_QWORD *)v329 + 4) = 0;
  *((_QWORD *)v329 + 5) = 0;
  *((_QWORD *)v329 + 6) = &unk_1E699F9F8;
  *((_DWORD *)v329 + 18) = 0;
  *((_OWORD *)v329 + 5) = 0u;
  *((_OWORD *)v329 + 6) = 0u;
  *(_QWORD *)v910 = v329 + 24;
  *(_QWORD *)&v910[8] = v329;
  do
    v334 = __ldxr(v331);
  while (__stxr(v334 + 1, v331));
  v335 = (unint64_t *)(v329 + 16);
  do
    v336 = __ldxr(v335);
  while (__stxr(v336 + 1, v335));
  *((_QWORD *)v329 + 4) = v329 + 24;
  *((_QWORD *)v329 + 5) = v329;
  do
    v337 = __ldaxr(v331);
  while (__stlxr(v337 - 1, v331));
  if (!v337)
  {
    (*(void (**)(char *))(*(_QWORD *)v329 + 16))(v329);
    std::__shared_weak_count::__release_weak(v330);
  }
  v338 = *(_QWORD *)v910;
  v339 = AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)v910 + 32) + 16));
  *(_DWORD *)(v338 + 48) = v339;
  memset(cf, 0, 32);
  LODWORD(cf[1].__r_.__value_.__r.__words[1]) = 1065353216;
  *(_DWORD *)__p = v339;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v916, 0, (int *)__p, 1.58366009e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(_QWORD *)v916 + 40), v916);
  v340 = *(std::__shared_weak_count **)&v916[8];
  if (*(_QWORD *)&v916[8])
  {
    v341 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
    do
      v342 = __ldaxr(v341);
    while (__stlxr(v342 - 1, v341));
    if (!v342)
    {
      ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
      std::__shared_weak_count::__release_weak(v340);
    }
  }
  *(_DWORD *)__p = 1634757735;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v916, 0, (int *)__p, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(_QWORD *)v916 + 40), v916);
  v343 = *(std::__shared_weak_count **)&v916[8];
  if (*(_QWORD *)&v916[8])
  {
    v344 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
    do
      v345 = __ldaxr(v344);
    while (__stlxr(v345 - 1, v344));
    if (!v345)
    {
      ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
      std::__shared_weak_count::__release_weak(v343);
    }
  }
  *(_DWORD *)__p = 1634757735;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v916, 0, (int *)__p, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(_QWORD *)v916 + 40), v916);
  v346 = *(std::__shared_weak_count **)&v916[8];
  if (*(_QWORD *)&v916[8])
  {
    v347 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
    do
      v348 = __ldaxr(v347);
    while (__stlxr(v348 - 1, v347));
    if (!v348)
    {
      ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
      std::__shared_weak_count::__release_weak(v346);
    }
  }
  *(_DWORD *)__p = 1;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v916, 0, (int *)__p, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(_QWORD *)v916 + 40), v916);
  v349 = *(std::__shared_weak_count **)&v916[8];
  if (*(_QWORD *)&v916[8])
  {
    v350 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
    do
      v351 = __ldaxr(v350);
    while (__stlxr(v351 - 1, v350));
    if (!v351)
    {
      ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
      std::__shared_weak_count::__release_weak(v349);
    }
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v913, "com.apple.iokit.IOAudio1");
  strcpy(__p, "glpobolg");
  __p[9] = 0;
  *(_WORD *)&__p[10] = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v916, (uint64_t)__p, v913.__r_.__value_.__l.__data_);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(_QWORD *)v916 + 40), v916);
  v352 = *(std::__shared_weak_count **)&v916[8];
  if (*(_QWORD *)&v916[8])
  {
    v353 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
    do
      v354 = __ldaxr(v353);
    while (__stlxr(v354 - 1, v353));
    if (!v354)
    {
      ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
      std::__shared_weak_count::__release_weak(v352);
    }
  }
  if (v913.__r_.__value_.__r.__words[0])
    CFRelease(v913.__r_.__value_.__l.__data_);
  v355 = *(_DWORD *)(v338 + 48);
  *(_QWORD *)__p = *(_QWORD *)(*(_QWORD *)(v338 + 32) + 16);
  *(_DWORD *)&__p[8] = v355;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>((uint64_t *)v916, 0, (__int128 *)__p, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(_QWORD *)v916 + 40), v916);
  v356 = *(std::__shared_weak_count **)&v916[8];
  if (*(_QWORD *)&v916[8])
  {
    v357 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
    do
      v358 = __ldaxr(v357);
    while (__stlxr(v358 - 1, v357));
    if (!v358)
    {
      ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
      std::__shared_weak_count::__release_weak(v356);
    }
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v913, "IOAudio1 Driver");
  strcpy(__p, "manlbolg");
  __p[9] = 0;
  *(_WORD *)&__p[10] = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v916, (uint64_t)__p, v913.__r_.__value_.__l.__data_);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(_QWORD *)v916 + 40), v916);
  v359 = *(std::__shared_weak_count **)&v916[8];
  if (*(_QWORD *)&v916[8])
  {
    v360 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
    do
      v361 = __ldaxr(v360);
    while (__stlxr(v361 - 1, v360));
    if (!v361)
    {
      ((void (*)(std::__shared_weak_count *))v359->__on_zero_shared)(v359);
      std::__shared_weak_count::__release_weak(v359);
    }
  }
  if (v913.__r_.__value_.__r.__words[0])
    CFRelease(v913.__r_.__value_.__l.__data_);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v913, "Apple Inc.");
  strcpy(__p, "kamlbolg");
  __p[9] = 0;
  *(_WORD *)&__p[10] = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v916, (uint64_t)__p, v913.__r_.__value_.__l.__data_);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(_QWORD *)v916 + 40), v916);
  v362 = *(std::__shared_weak_count **)&v916[8];
  if (*(_QWORD *)&v916[8])
  {
    v363 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
    do
      v364 = __ldaxr(v363);
    while (__stlxr(v364 - 1, v363));
    if (!v364)
    {
      ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
      std::__shared_weak_count::__release_weak(v362);
    }
  }
  if (v913.__r_.__value_.__r.__words[0])
    CFRelease(v913.__r_.__value_.__l.__data_);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v913, "com.apple.iokit.IOAudio1");
  strcpy(__p, "diipbolg");
  __p[9] = 0;
  *(_WORD *)&__p[10] = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v916, (uint64_t)__p, v913.__r_.__value_.__l.__data_);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(_QWORD *)v916 + 40), v916);
  v365 = *(std::__shared_weak_count **)&v916[8];
  if (*(_QWORD *)&v916[8])
  {
    v366 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
    do
      v367 = __ldaxr(v366);
    while (__stlxr(v367 - 1, v366));
    if (!v367)
    {
      ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
      std::__shared_weak_count::__release_weak(v365);
    }
  }
  if (v913.__r_.__value_.__r.__words[0])
    CFRelease(v913.__r_.__value_.__l.__data_);
  v368 = *(_DWORD *)(v338 + 48);
  *(_QWORD *)__p = *(_QWORD *)(*(_QWORD *)(v338 + 32) + 16);
  *(_DWORD *)&__p[8] = v368;
  *(_DWORD *)&__p[12] = 1633841016;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)v916, 0, (__int128 *)__p, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(_QWORD *)v916 + 40), v916);
  v369 = *(std::__shared_weak_count **)&v916[8];
  if (*(_QWORD *)&v916[8])
  {
    v370 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
    do
      v371 = __ldaxr(v370);
    while (__stlxr(v371 - 1, v370));
    if (!v371)
    {
      ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
      std::__shared_weak_count::__release_weak(v369);
    }
  }
  v372 = *(_DWORD *)(v338 + 48);
  *(_QWORD *)__p = *(_QWORD *)(*(_QWORD *)(v338 + 32) + 16);
  *(_DWORD *)&__p[8] = v372;
  *(_DWORD *)&__p[12] = 1633905771;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)v916, 0, (__int128 *)__p, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(_QWORD *)v916 + 40), v916);
  v373 = *(std::__shared_weak_count **)&v916[8];
  if (*(_QWORD *)&v916[8])
  {
    v374 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
    do
      v375 = __ldaxr(v374);
    while (__stlxr(v375 - 1, v374));
    if (!v375)
    {
      ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
      std::__shared_weak_count::__release_weak(v373);
    }
  }
  v376 = *(_DWORD *)(v338 + 48);
  *(_QWORD *)__p = *(_QWORD *)(*(_QWORD *)(v338 + 32) + 16);
  *(_DWORD *)&__p[8] = v376;
  *(_DWORD *)&__p[12] = 1633969526;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)v916, 0, (__int128 *)__p, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(_QWORD *)v916 + 40), v916);
  v377 = *(std::__shared_weak_count **)&v916[8];
  if (*(_QWORD *)&v916[8])
  {
    v378 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
    do
      v379 = __ldaxr(v378);
    while (__stlxr(v379 - 1, v378));
    if (!v379)
    {
      ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
      std::__shared_weak_count::__release_weak(v377);
    }
  }
  AMCP::Core::Broker::make_core((AMCP::Core::Core **)v916, *(std::__shared_mutex_base **)(*(_QWORD *)(v338 + 32) + 16), (uint64_t)cf, *(unsigned int *)(v338 + 48));
  v380 = *(std::__shared_weak_count **)&v916[8];
  if (*(_QWORD *)&v916[8])
  {
    v381 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
    do
      v382 = __ldaxr(v381);
    while (__stlxr(v382 - 1, v381));
    if (!v382)
    {
      ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
      std::__shared_weak_count::__release_weak(v380);
    }
  }
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((_QWORD *)cf[0].__r_.__value_.__r.__words[2]);
  v383 = (void *)cf[0].__r_.__value_.__r.__words[0];
  cf[0].__r_.__value_.__r.__words[0] = 0;
  if (v383)
    operator delete(v383);
  std::string::basic_string[abi:ne180100]<0>(__p, "IOAudioEngine");
  if (__p[23] >= 0)
    v384 = __p;
  else
    v384 = *(const char **)__p;
  v385 = IOServiceMatching(v384);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)v894, v385);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)cf, *(dispatch_object_t *)(*(_QWORD *)(*(_QWORD *)(v338 + 32) + 32) + 352));
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v913, *(_QWORD *)(v338 + 8), *(std::__shared_weak_count **)(v338 + 16));
  if (v913.__r_.__value_.__r.__words[0]
  {
    *(_QWORD *)v916 = v386;
    *(_QWORD *)&v916[8] = v913.__r_.__value_.__l.__size_;
    v387 = &v913;
  }
  else
  {
    v387 = (std::string *)v916;
  }
  v387->__r_.__value_.__r.__words[0] = 0;
  v387->__r_.__value_.__l.__size_ = 0;
  v388 = operator new();
  v389 = cf[0].__r_.__value_.__r.__words[0];
  v896 = cf[0].__r_.__value_.__r.__words[0];
  cf[0].__r_.__value_.__r.__words[0] = 0;
  v390 = v894[0];
  if (v894[0])
    CFRetain(v894[0]);
  v894[2] = 0;
  v895 = v390;
  v391 = *(_OWORD *)v916;
  *(_OWORD *)v916 = 0uLL;
  *(_OWORD *)&__p[8] = v391;
  v894[1] = 0;
  *(_QWORD *)__p = &off_1E699FCF8;
  v907 = __p;
  applesauce::iokit::io_service_factory::io_service_factory(v388, &v896, (const __CFDictionary **)&v895, "IOServiceFirstPublish", (uint64_t)__p);
  v392 = v907;
  if (v907 == __p)
  {
    v393 = 4;
    v392 = __p;
  }
  else
  {
    if (!v907)
      goto LABEL_586;
    v393 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v392 + 8 * v393))();
LABEL_586:
  if (v895)
    CFRelease(v895);
  if (v389)
    dispatch_release(v389);
  v394 = *(_QWORD *)(v338 + 56);
  *(_QWORD *)(v338 + 56) = v388;
  if (v394)
    std::default_delete<applesauce::iokit::io_service_factory>::operator()[abi:ne180100](v394);
  v395 = (std::__shared_weak_count *)v913.__r_.__value_.__l.__size_;
  if (v913.__r_.__value_.__l.__size_)
  {
    v396 = (unint64_t *)(v913.__r_.__value_.__l.__size_ + 8);
    do
      v397 = __ldaxr(v396);
    while (__stlxr(v397 - 1, v396));
    if (!v397)
    {
      ((void (*)(std::__shared_weak_count *))v395->__on_zero_shared)(v395);
      std::__shared_weak_count::__release_weak(v395);
    }
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)cf);
  v398 = (AMCP::Log::Scope_Registry *)v894[0];
  if (v894[0])
    CFRelease(v894[0]);
  v399 = (unint64_t)a1[2];
  v400 = a1[1];
  if ((unint64_t)v400 >= v399)
  {
    v405 = (v400 - *a1) >> 4;
    v406 = v405 + 1;
    if ((unint64_t)(v405 + 1) >> 60)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v407 = v399 - (_QWORD)*a1;
    if (v407 >> 3 > v406)
      v406 = v407 >> 3;
    if ((unint64_t)v407 >= 0x7FFFFFFFFFFFFFF0)
      v408 = 0xFFFFFFFFFFFFFFFLL;
    else
      v408 = v406;
    v908 = a1 + 2;
    v409 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v408);
    v411 = &v409[16 * v405];
    v412 = *(_QWORD *)&v910[8];
    *(_OWORD *)v411 = *(_OWORD *)v910;
    if (v412)
    {
      v413 = (unint64_t *)(v412 + 8);
      do
        v414 = __ldxr(v413);
      while (__stxr(v414 + 1, v413));
    }
    v416 = *a1;
    v415 = a1[1];
    if (v415 == *a1)
    {
      v419 = vdupq_n_s64((unint64_t)v415);
      v417 = &v409[16 * v405];
    }
    else
    {
      v417 = &v409[16 * v405];
      do
      {
        v418 = *((_OWORD *)v415 - 1);
        v415 -= 16;
        *((_OWORD *)v417 - 1) = v418;
        v417 -= 16;
        *(_QWORD *)v415 = 0;
        *((_QWORD *)v415 + 1) = 0;
      }
      while (v415 != v416);
      v419 = *(int64x2_t *)a1;
    }
    v404 = v411 + 16;
    *a1 = v417;
    a1[1] = v411 + 16;
    *(int64x2_t *)&__p[8] = v419;
    v420 = a1[2];
    a1[2] = &v409[16 * v410];
    v907 = v420;
    *(_QWORD *)__p = v419.i64[0];
    v398 = (AMCP::Log::Scope_Registry *)std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)__p);
  }
  else
  {
    *(_QWORD *)v400 = *(_QWORD *)v910;
    v401 = *(_QWORD *)&v910[8];
    *((_QWORD *)v400 + 1) = *(_QWORD *)&v910[8];
    if (v401)
    {
      v402 = (unint64_t *)(v401 + 8);
      do
        v403 = __ldxr(v402);
      while (__stxr(v403 + 1, v402));
    }
    v404 = v400 + 16;
  }
  a1[1] = v404;
  v421 = *(std::__shared_weak_count **)&v910[8];
  if (*(_QWORD *)&v910[8])
  {
    v422 = (unint64_t *)(*(_QWORD *)&v910[8] + 8);
    do
      v423 = __ldaxr(v422);
    while (__stlxr(v423 - 1, v422));
    if (!v423)
    {
      ((void (*)(std::__shared_weak_count *))v421->__on_zero_shared)(v421);
      std::__shared_weak_count::__release_weak(v421);
    }
  }
  if (v326)
  {
    v424 = (unint64_t *)&v326->__shared_owners_;
    do
      v425 = __ldaxr(v424);
    while (__stlxr(v425 - 1, v424));
    if (!v425)
    {
      ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
      std::__shared_weak_count::__release_weak(v326);
    }
  }
  AMCP::Log::Scope_Registry::get(v398);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v916, "com.apple.coreaudio", "AMCP");
  v427 = *(_DWORD *)(*(_QWORD *)v916 + 16);
  switch(v427)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v426);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      v442 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
      v443 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_)
      {
        v444 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
        do
          v445 = __ldaxr(v444);
        while (__stlxr(v445 - 1, v444));
        if (!v445)
        {
          ((void (*)(std::__shared_weak_count *))v442->__on_zero_shared)(v442);
          std::__shared_weak_count::__release_weak(v442);
        }
      }
      if (os_log_type_enabled(v443, OS_LOG_TYPE_INFO))
      {
        v446 = pthread_self();
        v447 = pthread_mach_thread_np(v446);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v447;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 113;
        v434 = v443;
        v435 = OS_LOG_TYPE_INFO;
        goto LABEL_653;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v426);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      v436 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
      v437 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_)
      {
        v438 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
        do
          v439 = __ldaxr(v438);
        while (__stlxr(v439 - 1, v438));
        if (!v439)
        {
          ((void (*)(std::__shared_weak_count *))v436->__on_zero_shared)(v436);
          std::__shared_weak_count::__release_weak(v436);
        }
      }
      if (os_log_type_enabled(v437, OS_LOG_TYPE_DEBUG))
      {
        v440 = pthread_self();
        v441 = pthread_mach_thread_np(v440);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v441;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 113;
        _os_log_debug_impl(&dword_1B57BA000, v437, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Done loading IOAudio1 driver (com.apple.iokit.IOAudio1).", (uint8_t *)cf, 0x18u);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v426);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      v428 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
      v429 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_)
      {
        v430 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
        do
          v431 = __ldaxr(v430);
        while (__stlxr(v431 - 1, v430));
        if (!v431)
        {
          ((void (*)(std::__shared_weak_count *))v428->__on_zero_shared)(v428);
          std::__shared_weak_count::__release_weak(v428);
        }
      }
      if (os_log_type_enabled(v429, OS_LOG_TYPE_DEFAULT))
      {
        v432 = pthread_self();
        v433 = pthread_mach_thread_np(v432);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v433;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 113;
        v434 = v429;
        v435 = OS_LOG_TYPE_DEFAULT;
LABEL_653:
        _os_log_impl(&dword_1B57BA000, v434, v435, "%6u %32s:%-5d Done loading IOAudio1 driver (com.apple.iokit.IOAudio1).", (uint8_t *)cf, 0x18u);
      }
      break;
  }
  v448 = *(std::__shared_weak_count **)&v916[8];
  if (*(_QWORD *)&v916[8])
  {
    v449 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
    do
      v450 = __ldaxr(v449);
    while (__stlxr(v450 - 1, v449));
    if (!v450)
    {
      ((void (*)(std::__shared_weak_count *))v448->__on_zero_shared)(v448);
      std::__shared_weak_count::__release_weak(v448);
      if (v29)
        goto LABEL_659;
      goto LABEL_661;
    }
  }
LABEL_658:
  if (v29)
  {
LABEL_659:
    v451 = 1;
    goto LABEL_669;
  }
LABEL_661:
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "com.apple.iokit.IOAudio2");
  v453 = (const __CFString **)v887.i64[1];
  v452 = (const __CFString **)v887.i64[0];
  if (v887.i64[0] == v887.i64[1])
  {
    v451 = 0;
  }
  else
  {
    while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v452, (const __CFString **)cf))
    {
      if (++v452 == v453)
      {
        v452 = v453;
        break;
      }
    }
    v451 = v452 != (const __CFString **)v887.i64[1];
  }
  if (cf[0].__r_.__value_.__r.__words[0])
    CFRelease(cf[0].__r_.__value_.__l.__data_);
LABEL_669:
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "com.apple.iokit.IOAudio2");
  v454 = v884;
  v455 = v885;
  if (v884 == v885)
  {
    v456 = v884;
  }
  else
  {
    while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v454, (const __CFString **)cf))
    {
      if (++v454 == v455)
      {
        v454 = v455;
        break;
      }
    }
    v456 = v454;
    v454 = v885;
  }
  v457 = cf[0].__r_.__value_.__r.__words[0];
  if (cf[0].__r_.__value_.__r.__words[0])
    CFRelease(cf[0].__r_.__value_.__l.__data_);
  if (v456 == v454 && v451)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v457);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v916, "com.apple.coreaudio", "AMCP");
    v460 = *(_DWORD *)(*(_QWORD *)v916 + 16);
    switch(v460)
    {
      case 3:
        AMCP::Log::Scope_Registry::get(v459);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        v475 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
        v476 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_)
        {
          v477 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
          do
            v478 = __ldaxr(v477);
          while (__stlxr(v478 - 1, v477));
          if (!v478)
          {
            ((void (*)(std::__shared_weak_count *))v475->__on_zero_shared)(v475);
            std::__shared_weak_count::__release_weak(v475);
          }
        }
        if (os_log_type_enabled(v476, OS_LOG_TYPE_INFO))
        {
          v479 = pthread_self();
          v480 = pthread_mach_thread_np(v479);
          LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v480;
          LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
          WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 120;
          v467 = v476;
          v468 = OS_LOG_TYPE_INFO;
          goto LABEL_705;
        }
        break;
      case 2:
        AMCP::Log::Scope_Registry::get(v459);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        v469 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
        v470 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_)
        {
          v471 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
          do
            v472 = __ldaxr(v471);
          while (__stlxr(v472 - 1, v471));
          if (!v472)
          {
            ((void (*)(std::__shared_weak_count *))v469->__on_zero_shared)(v469);
            std::__shared_weak_count::__release_weak(v469);
          }
        }
        if (os_log_type_enabled(v470, OS_LOG_TYPE_DEBUG))
        {
          v473 = pthread_self();
          v474 = pthread_mach_thread_np(v473);
          LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v474;
          LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
          WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 120;
          _os_log_debug_impl(&dword_1B57BA000, v470, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Loading IOAudio2 driver (com.apple.iokit.IOAudio2)...", (uint8_t *)cf, 0x18u);
        }
        break;
      case 1:
        AMCP::Log::Scope_Registry::get(v459);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        v461 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
        v462 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_)
        {
          v463 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
          do
            v464 = __ldaxr(v463);
          while (__stlxr(v464 - 1, v463));
          if (!v464)
          {
            ((void (*)(std::__shared_weak_count *))v461->__on_zero_shared)(v461);
            std::__shared_weak_count::__release_weak(v461);
          }
        }
        if (os_log_type_enabled(v462, OS_LOG_TYPE_DEFAULT))
        {
          v465 = pthread_self();
          v466 = pthread_mach_thread_np(v465);
          LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v466;
          LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
          WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 120;
          v467 = v462;
          v468 = OS_LOG_TYPE_DEFAULT;
LABEL_705:
          _os_log_impl(&dword_1B57BA000, v467, v468, "%6u %32s:%-5d Loading IOAudio2 driver (com.apple.iokit.IOAudio2)...", (uint8_t *)cf, 0x18u);
        }
        break;
    }
    v481 = *(std::__shared_weak_count **)&v916[8];
    if (*(_QWORD *)&v916[8])
    {
      v482 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
      do
        v483 = __ldaxr(v482);
      while (__stlxr(v483 - 1, v482));
      if (!v483)
      {
        ((void (*)(std::__shared_weak_count *))v481->__on_zero_shared)(v481);
        std::__shared_weak_count::__release_weak(v481);
      }
    }
    v881 = *a2;
    v484 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
    if (v484)
    {
      v485 = (unint64_t *)(*((_QWORD *)a2 + 1) + 8);
      do
        v486 = __ldxr(v485);
      while (__stxr(v486 + 1, v485));
    }
    v487 = (char *)operator new(0x70uLL);
    v488 = (std::__shared_weak_count *)v487;
    *((_QWORD *)v487 + 1) = 0;
    v489 = (unint64_t *)(v487 + 8);
    *((_QWORD *)v487 + 2) = 0;
    *(_QWORD *)v487 = &off_1E696FB80;
    if (v484)
    {
      v490 = (unint64_t *)&v484->__shared_owners_;
      do
        v491 = __ldxr(v490);
      while (__stxr(v491 + 1, v490));
    }
    *(_OWORD *)(v487 + 56) = v881;
    *((_QWORD *)v487 + 3) = &off_1E696E6E8;
    *((_QWORD *)v487 + 4) = 0;
    *((_QWORD *)v487 + 5) = 0;
    *((_QWORD *)v487 + 6) = &unk_1E696E710;
    *((_DWORD *)v487 + 18) = 0;
    *((_OWORD *)v487 + 5) = 0u;
    *((_OWORD *)v487 + 6) = 0u;
    *(_QWORD *)v918 = v487 + 24;
    *(_QWORD *)&v918[8] = v487;
    do
      v492 = __ldxr(v489);
    while (__stxr(v492 + 1, v489));
    v493 = (unint64_t *)(v487 + 16);
    do
      v494 = __ldxr(v493);
    while (__stxr(v494 + 1, v493));
    *((_QWORD *)v487 + 4) = v487 + 24;
    *((_QWORD *)v487 + 5) = v487;
    do
      v495 = __ldaxr(v489);
    while (__stlxr(v495 - 1, v489));
    if (!v495)
    {
      (*(void (**)(char *))(*(_QWORD *)v487 + 16))(v487);
      std::__shared_weak_count::__release_weak(v488);
    }
    v496 = *(_QWORD *)v918;
    v497 = AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(*(_QWORD *)(*(_QWORD *)v918 + 32) + 16));
    *(_DWORD *)(v496 + 48) = v497;
    memset(cf, 0, 32);
    LODWORD(cf[1].__r_.__value_.__r.__words[1]) = 1065353216;
    *(_DWORD *)v910 = v497;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v916, 0, (int *)v910, 1.58366009e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(_QWORD *)v916 + 40), v916);
    v498 = *(std::__shared_weak_count **)&v916[8];
    if (*(_QWORD *)&v916[8])
    {
      v499 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
      do
        v500 = __ldaxr(v499);
      while (__stlxr(v500 - 1, v499));
      if (!v500)
      {
        ((void (*)(std::__shared_weak_count *))v498->__on_zero_shared)(v498);
        std::__shared_weak_count::__release_weak(v498);
      }
    }
    *(_DWORD *)v910 = 1634757735;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v916, 0, (int *)v910, 1.58366006e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(_QWORD *)v916 + 40), v916);
    v501 = *(std::__shared_weak_count **)&v916[8];
    if (*(_QWORD *)&v916[8])
    {
      v502 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
      do
        v503 = __ldaxr(v502);
      while (__stlxr(v503 - 1, v502));
      if (!v503)
      {
        ((void (*)(std::__shared_weak_count *))v501->__on_zero_shared)(v501);
        std::__shared_weak_count::__release_weak(v501);
      }
    }
    *(_DWORD *)v910 = 1634757735;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v916, 0, (int *)v910, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(_QWORD *)v916 + 40), v916);
    v504 = *(std::__shared_weak_count **)&v916[8];
    if (*(_QWORD *)&v916[8])
    {
      v505 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
      do
        v506 = __ldaxr(v505);
      while (__stlxr(v506 - 1, v505));
      if (!v506)
      {
        ((void (*)(std::__shared_weak_count *))v504->__on_zero_shared)(v504);
        std::__shared_weak_count::__release_weak(v504);
      }
    }
    *(_DWORD *)v910 = 1;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v916, 0, (int *)v910, 1.58366011e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(_QWORD *)v916 + 40), v916);
    v507 = *(std::__shared_weak_count **)&v916[8];
    if (*(_QWORD *)&v916[8])
    {
      v508 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
      do
        v509 = __ldaxr(v508);
      while (__stlxr(v509 - 1, v508));
      if (!v509)
      {
        ((void (*)(std::__shared_weak_count *))v507->__on_zero_shared)(v507);
        std::__shared_weak_count::__release_weak(v507);
      }
    }
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v913, "com.apple.iokit.IOAudio2");
    strcpy(v910, "glpobolg");
    v910[9] = 0;
    *(_WORD *)&v910[10] = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v916, (uint64_t)v910, v913.__r_.__value_.__l.__data_);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(_QWORD *)v916 + 40), v916);
    v510 = *(std::__shared_weak_count **)&v916[8];
    if (*(_QWORD *)&v916[8])
    {
      v511 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
      do
        v512 = __ldaxr(v511);
      while (__stlxr(v512 - 1, v511));
      if (!v512)
      {
        ((void (*)(std::__shared_weak_count *))v510->__on_zero_shared)(v510);
        std::__shared_weak_count::__release_weak(v510);
      }
    }
    if (v913.__r_.__value_.__r.__words[0])
      CFRelease(v913.__r_.__value_.__l.__data_);
    v513 = *(_DWORD *)(v496 + 48);
    *(_QWORD *)v910 = *(_QWORD *)(*(_QWORD *)(v496 + 32) + 16);
    *(_DWORD *)&v910[8] = v513;
    AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>((uint64_t *)v916, 0, (__int128 *)v910, 1.58366011e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(_QWORD *)v916 + 40), v916);
    v514 = *(std::__shared_weak_count **)&v916[8];
    if (*(_QWORD *)&v916[8])
    {
      v515 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
      do
        v516 = __ldaxr(v515);
      while (__stlxr(v516 - 1, v515));
      if (!v516)
      {
        ((void (*)(std::__shared_weak_count *))v514->__on_zero_shared)(v514);
        std::__shared_weak_count::__release_weak(v514);
      }
    }
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v913, "IOAudio2 Driver");
    strcpy(v910, "manlbolg");
    v910[9] = 0;
    *(_WORD *)&v910[10] = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v916, (uint64_t)v910, v913.__r_.__value_.__l.__data_);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(_QWORD *)v916 + 40), v916);
    v517 = *(std::__shared_weak_count **)&v916[8];
    if (*(_QWORD *)&v916[8])
    {
      v518 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
      do
        v519 = __ldaxr(v518);
      while (__stlxr(v519 - 1, v518));
      if (!v519)
      {
        ((void (*)(std::__shared_weak_count *))v517->__on_zero_shared)(v517);
        std::__shared_weak_count::__release_weak(v517);
      }
    }
    if (v913.__r_.__value_.__r.__words[0])
      CFRelease(v913.__r_.__value_.__l.__data_);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v913, "Apple Inc.");
    strcpy(v910, "kamlbolg");
    v910[9] = 0;
    *(_WORD *)&v910[10] = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v916, (uint64_t)v910, v913.__r_.__value_.__l.__data_);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(_QWORD *)v916 + 40), v916);
    v520 = *(std::__shared_weak_count **)&v916[8];
    if (*(_QWORD *)&v916[8])
    {
      v521 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
      do
        v522 = __ldaxr(v521);
      while (__stlxr(v522 - 1, v521));
      if (!v522)
      {
        ((void (*)(std::__shared_weak_count *))v520->__on_zero_shared)(v520);
        std::__shared_weak_count::__release_weak(v520);
      }
    }
    if (v913.__r_.__value_.__r.__words[0])
      CFRelease(v913.__r_.__value_.__l.__data_);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v913, "com.apple.iokit.IOAudio2");
    strcpy(v910, "diipbolg");
    v910[9] = 0;
    *(_WORD *)&v910[10] = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v916, (uint64_t)v910, v913.__r_.__value_.__l.__data_);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(_QWORD *)v916 + 40), v916);
    v523 = *(std::__shared_weak_count **)&v916[8];
    if (*(_QWORD *)&v916[8])
    {
      v524 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
      do
        v525 = __ldaxr(v524);
      while (__stlxr(v525 - 1, v524));
      if (!v525)
      {
        ((void (*)(std::__shared_weak_count *))v523->__on_zero_shared)(v523);
        std::__shared_weak_count::__release_weak(v523);
      }
    }
    if (v913.__r_.__value_.__r.__words[0])
      CFRelease(v913.__r_.__value_.__l.__data_);
    v526 = *(_DWORD *)(v496 + 48);
    *(_QWORD *)v910 = *(_QWORD *)(*(_QWORD *)(v496 + 32) + 16);
    *(_DWORD *)&v910[8] = v526;
    *(_DWORD *)&v910[12] = 1633841016;
    AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)v916, 0, (__int128 *)v910, 1.58366006e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(_QWORD *)v916 + 40), v916);
    v527 = *(std::__shared_weak_count **)&v916[8];
    if (*(_QWORD *)&v916[8])
    {
      v528 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
      do
        v529 = __ldaxr(v528);
      while (__stlxr(v529 - 1, v528));
      if (!v529)
      {
        ((void (*)(std::__shared_weak_count *))v527->__on_zero_shared)(v527);
        std::__shared_weak_count::__release_weak(v527);
      }
    }
    v530 = *(_DWORD *)(v496 + 48);
    *(_QWORD *)v910 = *(_QWORD *)(*(_QWORD *)(v496 + 32) + 16);
    *(_DWORD *)&v910[8] = v530;
    *(_DWORD *)&v910[12] = 1633905771;
    AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)v916, 0, (__int128 *)v910, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(_QWORD *)v916 + 40), v916);
    v531 = *(std::__shared_weak_count **)&v916[8];
    if (*(_QWORD *)&v916[8])
    {
      v532 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
      do
        v533 = __ldaxr(v532);
      while (__stlxr(v533 - 1, v532));
      if (!v533)
      {
        ((void (*)(std::__shared_weak_count *))v531->__on_zero_shared)(v531);
        std::__shared_weak_count::__release_weak(v531);
      }
    }
    v534 = *(_DWORD *)(v496 + 48);
    *(_QWORD *)v910 = *(_QWORD *)(*(_QWORD *)(v496 + 32) + 16);
    *(_DWORD *)&v910[8] = v534;
    *(_DWORD *)&v910[12] = 1633969526;
    AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)v916, 0, (__int128 *)v910, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(_QWORD *)v916 + 40), v916);
    v535 = *(std::__shared_weak_count **)&v916[8];
    if (*(_QWORD *)&v916[8])
    {
      v536 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
      do
        v537 = __ldaxr(v536);
      while (__stlxr(v537 - 1, v536));
      if (!v537)
      {
        ((void (*)(std::__shared_weak_count *))v535->__on_zero_shared)(v535);
        std::__shared_weak_count::__release_weak(v535);
      }
    }
    AMCP::Core::Broker::make_core((AMCP::Core::Core **)v916, *(std::__shared_mutex_base **)(*(_QWORD *)(v496 + 32) + 16), (uint64_t)cf, *(unsigned int *)(v496 + 48));
    v538 = *(std::__shared_weak_count **)&v916[8];
    if (*(_QWORD *)&v916[8])
    {
      v539 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
      do
        v540 = __ldaxr(v539);
      while (__stlxr(v540 - 1, v539));
      if (!v540)
      {
        ((void (*)(std::__shared_weak_count *))v538->__on_zero_shared)(v538);
        std::__shared_weak_count::__release_weak(v538);
      }
    }
    std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((_QWORD *)cf[0].__r_.__value_.__r.__words[2]);
    v541 = (void *)cf[0].__r_.__value_.__r.__words[0];
    cf[0].__r_.__value_.__r.__words[0] = 0;
    if (v541)
      operator delete(v541);
    std::string::basic_string[abi:ne180100]<0>(v910, "IOAudio2Device");
    if (v910[23] >= 0)
      v542 = v910;
    else
      v542 = *(const char **)v910;
    v543 = IOServiceMatching(v542);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)v897, v543);
    if ((v910[23] & 0x80000000) != 0)
      operator delete(*(void **)v910);
    AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)cf, *(dispatch_object_t *)(*(_QWORD *)(*(_QWORD *)(v496 + 32) + 32) + 352));
    std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v913, *(_QWORD *)(v496 + 8), *(std::__shared_weak_count **)(v496 + 16));
    if (v913.__r_.__value_.__r.__words[0]
    {
      *(_QWORD *)v916 = v544;
      *(_QWORD *)&v916[8] = v913.__r_.__value_.__l.__size_;
      v545 = &v913;
    }
    else
    {
      v545 = (std::string *)v916;
    }
    v545->__r_.__value_.__r.__words[0] = 0;
    v545->__r_.__value_.__l.__size_ = 0;
    v546 = operator new();
    v547 = cf[0].__r_.__value_.__r.__words[0];
    v899 = cf[0].__r_.__value_.__r.__words[0];
    cf[0].__r_.__value_.__r.__words[0] = 0;
    v548 = v897[0];
    if (v897[0])
      CFRetain(v897[0]);
    v897[2] = 0;
    v898 = v548;
    v549 = *(_OWORD *)v916;
    *(_OWORD *)v916 = 0uLL;
    *(_OWORD *)&v910[8] = v549;
    v897[1] = 0;
    *(_QWORD *)v910 = &off_1E696E778;
    v911 = v910;
    applesauce::iokit::io_service_factory::io_service_factory(v546, &v899, (const __CFDictionary **)&v898, "IOServiceFirstPublish", (uint64_t)v910);
    v550 = v911;
    if (v911 == v910)
    {
      v551 = 4;
      v550 = v910;
    }
    else
    {
      if (!v911)
        goto LABEL_816;
      v551 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v550 + 8 * v551))();
LABEL_816:
    if (v898)
      CFRelease(v898);
    if (v547)
      dispatch_release(v547);
    v552 = *(_QWORD *)(v496 + 56);
    *(_QWORD *)(v496 + 56) = v546;
    if (v552)
      std::default_delete<applesauce::iokit::io_service_factory>::operator()[abi:ne180100](v552);
    v553 = (std::__shared_weak_count *)v913.__r_.__value_.__l.__size_;
    if (v913.__r_.__value_.__l.__size_)
    {
      v554 = (unint64_t *)(v913.__r_.__value_.__l.__size_ + 8);
      do
        v555 = __ldaxr(v554);
      while (__stlxr(v555 - 1, v554));
      if (!v555)
      {
        ((void (*)(std::__shared_weak_count *))v553->__on_zero_shared)(v553);
        std::__shared_weak_count::__release_weak(v553);
      }
    }
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)cf);
    v556 = (AMCP::Log::Scope_Registry *)v897[0];
    if (v897[0])
      CFRelease(v897[0]);
    v557 = (unint64_t)a1[2];
    v558 = a1[1];
    if ((unint64_t)v558 >= v557)
    {
      v563 = (v558 - *a1) >> 4;
      v564 = v563 + 1;
      if ((unint64_t)(v563 + 1) >> 60)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v565 = v557 - (_QWORD)*a1;
      if (v565 >> 3 > v564)
        v564 = v565 >> 3;
      if ((unint64_t)v565 >= 0x7FFFFFFFFFFFFFF0)
        v566 = 0xFFFFFFFFFFFFFFFLL;
      else
        v566 = v564;
      v912 = a1 + 2;
      v567 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v566);
      v569 = &v567[16 * v563];
      v570 = *(_QWORD *)&v918[8];
      *(_OWORD *)v569 = *(_OWORD *)v918;
      if (v570)
      {
        v571 = (unint64_t *)(v570 + 8);
        do
          v572 = __ldxr(v571);
        while (__stxr(v572 + 1, v571));
      }
      v574 = *a1;
      v573 = a1[1];
      if (v573 == *a1)
      {
        v577 = vdupq_n_s64((unint64_t)v573);
        v575 = &v567[16 * v563];
      }
      else
      {
        v575 = &v567[16 * v563];
        do
        {
          v576 = *((_OWORD *)v573 - 1);
          v573 -= 16;
          *((_OWORD *)v575 - 1) = v576;
          v575 -= 16;
          *(_QWORD *)v573 = 0;
          *((_QWORD *)v573 + 1) = 0;
        }
        while (v573 != v574);
        v577 = *(int64x2_t *)a1;
      }
      v562 = v569 + 16;
      *a1 = v575;
      a1[1] = v569 + 16;
      *(int64x2_t *)&v910[8] = v577;
      v578 = a1[2];
      a1[2] = &v567[16 * v568];
      v911 = v578;
      *(_QWORD *)v910 = v577.i64[0];
      v556 = (AMCP::Log::Scope_Registry *)std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)v910);
    }
    else
    {
      *(_QWORD *)v558 = *(_QWORD *)v918;
      v559 = *(_QWORD *)&v918[8];
      *((_QWORD *)v558 + 1) = *(_QWORD *)&v918[8];
      if (v559)
      {
        v560 = (unint64_t *)(v559 + 8);
        do
          v561 = __ldxr(v560);
        while (__stxr(v561 + 1, v560));
      }
      v562 = v558 + 16;
    }
    a1[1] = v562;
    v579 = *(std::__shared_weak_count **)&v918[8];
    if (*(_QWORD *)&v918[8])
    {
      v580 = (unint64_t *)(*(_QWORD *)&v918[8] + 8);
      do
        v581 = __ldaxr(v580);
      while (__stlxr(v581 - 1, v580));
      if (!v581)
      {
        ((void (*)(std::__shared_weak_count *))v579->__on_zero_shared)(v579);
        std::__shared_weak_count::__release_weak(v579);
      }
    }
    if (v484)
    {
      v582 = (unint64_t *)&v484->__shared_owners_;
      do
        v583 = __ldaxr(v582);
      while (__stlxr(v583 - 1, v582));
      if (!v583)
      {
        ((void (*)(std::__shared_weak_count *))v484->__on_zero_shared)(v484);
        std::__shared_weak_count::__release_weak(v484);
      }
    }
    AMCP::Log::Scope_Registry::get(v556);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v916, "com.apple.coreaudio", "AMCP");
    v584 = *(_DWORD *)(*(_QWORD *)v916 + 16);
    switch(v584)
    {
      case 3:
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v457);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        v599 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
        v600 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_)
        {
          v601 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
          do
            v602 = __ldaxr(v601);
          while (__stlxr(v602 - 1, v601));
          if (!v602)
          {
            ((void (*)(std::__shared_weak_count *))v599->__on_zero_shared)(v599);
            std::__shared_weak_count::__release_weak(v599);
          }
        }
        v457 = os_log_type_enabled(v600, OS_LOG_TYPE_INFO);
        if (!(_DWORD)v457)
          goto LABEL_884;
        v603 = pthread_self();
        v604 = pthread_mach_thread_np(v603);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v604;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 122;
        v591 = v600;
        v592 = OS_LOG_TYPE_INFO;
        break;
      case 2:
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v457);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        v593 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
        v594 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_)
        {
          v595 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
          do
            v596 = __ldaxr(v595);
          while (__stlxr(v596 - 1, v595));
          if (!v596)
          {
            ((void (*)(std::__shared_weak_count *))v593->__on_zero_shared)(v593);
            std::__shared_weak_count::__release_weak(v593);
          }
        }
        v457 = os_log_type_enabled(v594, OS_LOG_TYPE_DEBUG);
        if ((_DWORD)v457)
        {
          v597 = pthread_self();
          v598 = pthread_mach_thread_np(v597);
          LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v598;
          LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
          WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 122;
          _os_log_debug_impl(&dword_1B57BA000, v594, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Done loading IOAudio2 driver (com.apple.iokit.IOAudio2).", (uint8_t *)cf, 0x18u);
        }
        goto LABEL_884;
      case 1:
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v457);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        v585 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
        v586 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_)
        {
          v587 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
          do
            v588 = __ldaxr(v587);
          while (__stlxr(v588 - 1, v587));
          if (!v588)
          {
            ((void (*)(std::__shared_weak_count *))v585->__on_zero_shared)(v585);
            std::__shared_weak_count::__release_weak(v585);
          }
        }
        v457 = os_log_type_enabled(v586, OS_LOG_TYPE_DEFAULT);
        if (!(_DWORD)v457)
        {
LABEL_884:
          v605 = *(std::__shared_weak_count **)&v916[8];
          if (*(_QWORD *)&v916[8])
          {
            v606 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
            do
              v607 = __ldaxr(v606);
            while (__stlxr(v607 - 1, v606));
            if (!v607)
            {
              ((void (*)(std::__shared_weak_count *))v605->__on_zero_shared)(v605);
              std::__shared_weak_count::__release_weak(v605);
            }
          }
          goto LABEL_889;
        }
        v589 = pthread_self();
        v590 = pthread_mach_thread_np(v589);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v590;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 122;
        v591 = v586;
        v592 = OS_LOG_TYPE_DEFAULT;
        break;
      default:
        goto LABEL_884;
    }
    _os_log_impl(&dword_1B57BA000, v591, v592, "%6u %32s:%-5d Done loading IOAudio2 driver (com.apple.iokit.IOAudio2).", (uint8_t *)cf, 0x18u);
    goto LABEL_884;
  }
LABEL_889:
  if (v882)
    goto LABEL_1005;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v457);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v916, "com.apple.coreaudio", "AMCP");
  v609 = *(_DWORD *)(*(_QWORD *)v916 + 16);
  switch(v609)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v608);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      v624 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
      v625 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_)
      {
        v626 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
        do
          v627 = __ldaxr(v626);
        while (__stlxr(v627 - 1, v626));
        if (!v627)
        {
          ((void (*)(std::__shared_weak_count *))v624->__on_zero_shared)(v624);
          std::__shared_weak_count::__release_weak(v624);
        }
      }
      if (os_log_type_enabled(v625, OS_LOG_TYPE_INFO))
      {
        v628 = pthread_self();
        v629 = pthread_mach_thread_np(v628);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v629;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 128;
        v616 = v625;
        v617 = OS_LOG_TYPE_INFO;
        goto LABEL_914;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v608);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      v618 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
      v619 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_)
      {
        v620 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
        do
          v621 = __ldaxr(v620);
        while (__stlxr(v621 - 1, v620));
        if (!v621)
        {
          ((void (*)(std::__shared_weak_count *))v618->__on_zero_shared)(v618);
          std::__shared_weak_count::__release_weak(v618);
        }
      }
      if (os_log_type_enabled(v619, OS_LOG_TYPE_DEBUG))
      {
        v622 = pthread_self();
        v623 = pthread_mach_thread_np(v622);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v623;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 128;
        _os_log_debug_impl(&dword_1B57BA000, v619, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Loading AudioServerPlugIns...", (uint8_t *)cf, 0x18u);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v608);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      v610 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
      v611 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_)
      {
        v612 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
        do
          v613 = __ldaxr(v612);
        while (__stlxr(v613 - 1, v612));
        if (!v613)
        {
          ((void (*)(std::__shared_weak_count *))v610->__on_zero_shared)(v610);
          std::__shared_weak_count::__release_weak(v610);
        }
      }
      if (os_log_type_enabled(v611, OS_LOG_TYPE_DEFAULT))
      {
        v614 = pthread_self();
        v615 = pthread_mach_thread_np(v614);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v615;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 128;
        v616 = v611;
        v617 = OS_LOG_TYPE_DEFAULT;
LABEL_914:
        _os_log_impl(&dword_1B57BA000, v616, v617, "%6u %32s:%-5d Loading AudioServerPlugIns...", (uint8_t *)cf, 0x18u);
      }
      break;
  }
  v630 = *(std::__shared_weak_count **)&v916[8];
  if (*(_QWORD *)&v916[8])
  {
    v631 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
    do
      v632 = __ldaxr(v631);
    while (__stlxr(v632 - 1, v631));
    if (!v632)
    {
      ((void (*)(std::__shared_weak_count *))v630->__on_zero_shared)(v630);
      std::__shared_weak_count::__release_weak(v630);
    }
  }
  v634 = *(_QWORD *)a2;
  v633 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
  if (v633)
  {
    v635 = (unint64_t *)&v633->__shared_owners_;
    do
      v636 = __ldxr(v635);
    while (__stxr(v636 + 1, v635));
  }
  v637 = (std::__shared_weak_count *)operator new(0x60uLL);
  v638 = v637;
  v637->__shared_owners_ = 0;
  v639 = (unint64_t *)&v637->__shared_owners_;
  v637->__shared_weak_owners_ = 0;
  v637->__vftable = (std::__shared_weak_count_vtbl *)&off_1E696FBD0;
  v640 = (std::string::size_type)&v637[1];
  if (v633)
  {
    v641 = (unint64_t *)&v633->__shared_owners_;
    do
      v642 = __ldxr(v641);
    while (__stxr(v642 + 1, v641));
    v637[1].__shared_owners_ = 0;
    v637[1].__shared_weak_owners_ = 0;
    v637[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E696FAA8;
    do
      v643 = __ldxr(v641);
    while (__stxr(v643 + 1, v641));
    v637[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E696FC20;
    v637[2].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E696FC48;
    v637[2].__shared_owners_ = v634;
    v637[2].__shared_weak_owners_ = (uint64_t)v633;
    v637[3].__vftable = 0;
    v637[3].__shared_owners_ = 0;
    v637[3].__shared_weak_owners_ = 0;
    do
      v644 = __ldaxr(v641);
    while (__stlxr(v644 - 1, v641));
    if (!v644)
    {
      ((void (*)(std::__shared_weak_count *))v633->__on_zero_shared)(v633);
      std::__shared_weak_count::__release_weak(v633);
    }
  }
  else
  {
    v637[2].__shared_owners_ = v634;
    v637[2].__shared_weak_owners_ = 0;
    v637[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E696FC20;
    v637[1].__shared_owners_ = 0;
    v637[1].__shared_weak_owners_ = 0;
    v637[2].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E696FC48;
    v637[3].__shared_owners_ = 0;
    v637[3].__shared_weak_owners_ = 0;
    v637[3].__vftable = 0;
  }
  cf[0].__r_.__value_.__r.__words[0] = v640;
  cf[0].__r_.__value_.__l.__size_ = (std::string::size_type)v638;
  shared_weak_owners = (std::__shared_weak_count *)v638[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_946;
    do
      v646 = __ldxr(v639);
    while (__stxr(v646 + 1, v639));
    p_shared_weak_owners = (unint64_t *)&v638->__shared_weak_owners_;
    do
      v648 = __ldxr(p_shared_weak_owners);
    while (__stxr(v648 + 1, p_shared_weak_owners));
    v638[1].__shared_owners_ = v640;
    v638[1].__shared_weak_owners_ = (uint64_t)v638;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v649 = __ldxr(v639);
    while (__stxr(v649 + 1, v639));
    v650 = (unint64_t *)&v638->__shared_weak_owners_;
    do
      v651 = __ldxr(v650);
    while (__stxr(v651 + 1, v650));
    v638[1].__shared_owners_ = v640;
    v638[1].__shared_weak_owners_ = (uint64_t)v638;
  }
  do
    v652 = __ldaxr(v639);
  while (__stlxr(v652 - 1, v639));
  if (!v652)
  {
    ((void (*)(std::__shared_weak_count *))v638->__on_zero_shared)(v638);
    std::__shared_weak_count::__release_weak(v638);
  }
LABEL_946:
  AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::start(cf[0].__r_.__value_.__l.__data_, (const __CFString ***)&v887, &v884);
  v654 = (unint64_t)a1[2];
  v655 = a1[1];
  if ((unint64_t)v655 >= v654)
  {
    v660 = (v655 - *a1) >> 4;
    v661 = v660 + 1;
    if ((unint64_t)(v660 + 1) >> 60)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v662 = v654 - (_QWORD)*a1;
    if (v662 >> 3 > v661)
      v661 = v662 >> 3;
    if ((unint64_t)v662 >= 0x7FFFFFFFFFFFFFF0)
      v663 = 0xFFFFFFFFFFFFFFFLL;
    else
      v663 = v661;
    v915 = a1 + 2;
    v664 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v663);
    v666 = &v664[16 * v660];
    v667 = cf[0].__r_.__value_.__l.__size_;
    *(_OWORD *)v666 = *(_OWORD *)&cf[0].__r_.__value_.__l.__data_;
    if (v667)
    {
      v668 = (unint64_t *)(v667 + 8);
      do
        v669 = __ldxr(v668);
      while (__stxr(v669 + 1, v668));
    }
    v671 = *a1;
    v670 = a1[1];
    if (v670 == *a1)
    {
      v674 = vdupq_n_s64((unint64_t)v670);
      v672 = &v664[16 * v660];
    }
    else
    {
      v672 = &v664[16 * v660];
      do
      {
        v673 = *((_OWORD *)v670 - 1);
        v670 -= 16;
        *((_OWORD *)v672 - 1) = v673;
        v672 -= 16;
        *(_QWORD *)v670 = 0;
        *((_QWORD *)v670 + 1) = 0;
      }
      while (v670 != v671);
      v674 = *(int64x2_t *)a1;
    }
    v659 = v666 + 16;
    *a1 = v672;
    a1[1] = v666 + 16;
    *(int64x2_t *)&v913.__r_.__value_.__r.__words[1] = v674;
    v675 = (std::string *)a1[2];
    a1[2] = &v664[16 * v665];
    v914 = v675;
    v913.__r_.__value_.__r.__words[0] = v674.i64[0];
    v653 = (AMCP::Log::Scope_Registry *)std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v913);
  }
  else
  {
    *(_QWORD *)v655 = cf[0].__r_.__value_.__r.__words[0];
    v656 = cf[0].__r_.__value_.__l.__size_;
    *((_QWORD *)v655 + 1) = cf[0].__r_.__value_.__l.__size_;
    if (v656)
    {
      v657 = (unint64_t *)(v656 + 8);
      do
        v658 = __ldxr(v657);
      while (__stxr(v658 + 1, v657));
    }
    v659 = v655 + 16;
  }
  a1[1] = v659;
  v676 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
  if (cf[0].__r_.__value_.__l.__size_)
  {
    v677 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
    do
      v678 = __ldaxr(v677);
    while (__stlxr(v678 - 1, v677));
    if (!v678)
    {
      ((void (*)(std::__shared_weak_count *))v676->__on_zero_shared)(v676);
      std::__shared_weak_count::__release_weak(v676);
    }
  }
  if (v633)
  {
    v679 = (unint64_t *)&v633->__shared_owners_;
    do
      v680 = __ldaxr(v679);
    while (__stlxr(v680 - 1, v679));
    if (!v680)
    {
      ((void (*)(std::__shared_weak_count *))v633->__on_zero_shared)(v633);
      std::__shared_weak_count::__release_weak(v633);
    }
  }
  AMCP::Log::Scope_Registry::get(v653);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v916, "com.apple.coreaudio", "AMCP");
  v682 = *(_DWORD *)(*(_QWORD *)v916 + 16);
  switch(v682)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v681);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      v697 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
      v698 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_)
      {
        v699 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
        do
          v700 = __ldaxr(v699);
        while (__stlxr(v700 - 1, v699));
        if (!v700)
        {
          ((void (*)(std::__shared_weak_count *))v697->__on_zero_shared)(v697);
          std::__shared_weak_count::__release_weak(v697);
        }
      }
      if (os_log_type_enabled(v698, OS_LOG_TYPE_INFO))
      {
        v701 = pthread_self();
        v702 = pthread_mach_thread_np(v701);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v702;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 130;
        v689 = v698;
        v690 = OS_LOG_TYPE_INFO;
        goto LABEL_1000;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v681);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      v691 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
      v692 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_)
      {
        v693 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
        do
          v694 = __ldaxr(v693);
        while (__stlxr(v694 - 1, v693));
        if (!v694)
        {
          ((void (*)(std::__shared_weak_count *))v691->__on_zero_shared)(v691);
          std::__shared_weak_count::__release_weak(v691);
        }
      }
      if (os_log_type_enabled(v692, OS_LOG_TYPE_DEBUG))
      {
        v695 = pthread_self();
        v696 = pthread_mach_thread_np(v695);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v696;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 130;
        _os_log_debug_impl(&dword_1B57BA000, v692, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Done loading AudioServerPlugIns.", (uint8_t *)cf, 0x18u);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v681);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      v683 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
      v684 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_)
      {
        v685 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
        do
          v686 = __ldaxr(v685);
        while (__stlxr(v686 - 1, v685));
        if (!v686)
        {
          ((void (*)(std::__shared_weak_count *))v683->__on_zero_shared)(v683);
          std::__shared_weak_count::__release_weak(v683);
        }
      }
      if (os_log_type_enabled(v684, OS_LOG_TYPE_DEFAULT))
      {
        v687 = pthread_self();
        v688 = pthread_mach_thread_np(v687);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v688;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 130;
        v689 = v684;
        v690 = OS_LOG_TYPE_DEFAULT;
LABEL_1000:
        _os_log_impl(&dword_1B57BA000, v689, v690, "%6u %32s:%-5d Done loading AudioServerPlugIns.", (uint8_t *)cf, 0x18u);
      }
      break;
  }
  v703 = *(std::__shared_weak_count **)&v916[8];
  if (*(_QWORD *)&v916[8])
  {
    v704 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
    do
      v705 = __ldaxr(v704);
    while (__stlxr(v705 - 1, v704));
    if (!v705)
    {
      ((void (*)(std::__shared_weak_count *))v703->__on_zero_shared)(v703);
      std::__shared_weak_count::__release_weak(v703);
      if (v29)
        goto LABEL_1006;
      goto LABEL_1008;
    }
  }
LABEL_1005:
  if (v29)
  {
LABEL_1006:
    v706 = 1;
    goto LABEL_1016;
  }
LABEL_1008:
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "com.apple.audio.Meta-Driver");
  v708 = (const __CFString **)v887.i64[1];
  v707 = (const __CFString **)v887.i64[0];
  if (v887.i64[0] == v887.i64[1])
  {
    v706 = 0;
  }
  else
  {
    while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v707, (const __CFString **)cf))
    {
      if (++v707 == v708)
      {
        v707 = v708;
        break;
      }
    }
    v706 = v707 != (const __CFString **)v887.i64[1];
  }
  if (cf[0].__r_.__value_.__r.__words[0])
    CFRelease(cf[0].__r_.__value_.__l.__data_);
LABEL_1016:
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "com.apple.audio.Meta-Driver");
  v709 = v884;
  v710 = v885;
  if (v884 == v885)
  {
    v711 = v884;
  }
  else
  {
    while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v709, (const __CFString **)cf))
    {
      if (++v709 == v710)
      {
        v709 = v710;
        break;
      }
    }
    v711 = v709;
    v709 = v885;
  }
  v712 = (AMCP::Log::Scope_Registry *)cf[0].__r_.__value_.__r.__words[0];
  if (cf[0].__r_.__value_.__r.__words[0])
    CFRelease(cf[0].__r_.__value_.__l.__data_);
  if (v711 == v709 && v706)
  {
    AMCP::Log::Scope_Registry::get(v712);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v916, "com.apple.coreaudio", "AMCP");
    v715 = *(_DWORD *)(*(_QWORD *)v916 + 16);
    switch(v715)
    {
      case 3:
        AMCP::Log::Scope_Registry::get(v714);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        v730 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
        v731 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_)
        {
          v732 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
          do
            v733 = __ldaxr(v732);
          while (__stlxr(v733 - 1, v732));
          if (!v733)
          {
            ((void (*)(std::__shared_weak_count *))v730->__on_zero_shared)(v730);
            std::__shared_weak_count::__release_weak(v730);
          }
        }
        if (os_log_type_enabled(v731, OS_LOG_TYPE_INFO))
        {
          v734 = pthread_self();
          v735 = pthread_mach_thread_np(v734);
          LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v735;
          LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
          WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 137;
          v722 = v731;
          v723 = OS_LOG_TYPE_INFO;
          goto LABEL_1052;
        }
        break;
      case 2:
        AMCP::Log::Scope_Registry::get(v714);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        v724 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
        v725 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_)
        {
          v726 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
          do
            v727 = __ldaxr(v726);
          while (__stlxr(v727 - 1, v726));
          if (!v727)
          {
            ((void (*)(std::__shared_weak_count *))v724->__on_zero_shared)(v724);
            std::__shared_weak_count::__release_weak(v724);
          }
        }
        if (os_log_type_enabled(v725, OS_LOG_TYPE_DEBUG))
        {
          v728 = pthread_self();
          v729 = pthread_mach_thread_np(v728);
          LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v729;
          LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
          WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 137;
          _os_log_debug_impl(&dword_1B57BA000, v725, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Loading Meta driver (com.apple.audio.Meta-Driver)...", (uint8_t *)cf, 0x18u);
        }
        break;
      case 1:
        AMCP::Log::Scope_Registry::get(v714);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        v716 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
        v717 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_)
        {
          v718 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
          do
            v719 = __ldaxr(v718);
          while (__stlxr(v719 - 1, v718));
          if (!v719)
          {
            ((void (*)(std::__shared_weak_count *))v716->__on_zero_shared)(v716);
            std::__shared_weak_count::__release_weak(v716);
          }
        }
        if (os_log_type_enabled(v717, OS_LOG_TYPE_DEFAULT))
        {
          v720 = pthread_self();
          v721 = pthread_mach_thread_np(v720);
          LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v721;
          LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
          WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 137;
          v722 = v717;
          v723 = OS_LOG_TYPE_DEFAULT;
LABEL_1052:
          _os_log_impl(&dword_1B57BA000, v722, v723, "%6u %32s:%-5d Loading Meta driver (com.apple.audio.Meta-Driver)...", (uint8_t *)cf, 0x18u);
        }
        break;
    }
    v736 = *(std::__shared_weak_count **)&v916[8];
    if (*(_QWORD *)&v916[8])
    {
      v737 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
      do
        v738 = __ldaxr(v737);
      while (__stlxr(v738 - 1, v737));
      if (!v738)
      {
        ((void (*)(std::__shared_weak_count *))v736->__on_zero_shared)(v736);
        std::__shared_weak_count::__release_weak(v736);
      }
    }
    v739 = *a2;
    v883 = v739;
    v740 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
    if (*((_QWORD *)&v739 + 1))
    {
      v741 = (unint64_t *)(*((_QWORD *)&v739 + 1) + 8);
      do
        v742 = __ldxr(v741);
      while (__stxr(v742 + 1, v741));
    }
    v743 = (char *)operator new(0x68uLL);
    v744 = (std::__shared_weak_count *)v743;
    *((_QWORD *)v743 + 1) = 0;
    v745 = (unint64_t *)(v743 + 8);
    *((_QWORD *)v743 + 2) = 0;
    *(_QWORD *)v743 = &off_1E696FD70;
    if (v740)
    {
      v746 = (unint64_t *)&v740->__shared_owners_;
      do
        v747 = __ldxr(v746);
      while (__stxr(v747 + 1, v746));
    }
    *(_OWORD *)(v743 + 56) = v883;
    *((_QWORD *)v743 + 3) = &off_1E6992598;
    *((_QWORD *)v743 + 4) = 0;
    *((_QWORD *)v743 + 5) = 0;
    *((_QWORD *)v743 + 6) = &unk_1E69925C0;
    *((_DWORD *)v743 + 18) = 0;
    *((_QWORD *)v743 + 11) = 0;
    *((_QWORD *)v743 + 12) = 0;
    *((_QWORD *)v743 + 10) = 0;
    *(_QWORD *)&v900 = v743 + 24;
    *((_QWORD *)&v900 + 1) = v743;
    do
      v748 = __ldxr(v745);
    while (__stxr(v748 + 1, v745));
    v749 = (unint64_t *)(v743 + 16);
    do
      v750 = __ldxr(v749);
    while (__stxr(v750 + 1, v749));
    *((_QWORD *)v743 + 4) = v743 + 24;
    *((_QWORD *)v743 + 5) = v743;
    do
      v751 = __ldaxr(v745);
    while (__stlxr(v751 - 1, v745));
    if (!v751)
    {
      (*(void (**)(char *))(*(_QWORD *)v743 + 16))(v743);
      std::__shared_weak_count::__release_weak(v744);
    }
    v752 = v900;
    v753 = AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(*(_QWORD *)(v900 + 32) + 16));
    *(_DWORD *)(v752 + 48) = v753;
    memset(v916, 0, sizeof(v916));
    v917 = 1065353216;
    LODWORD(v904) = v753;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (int *)&v904, 1.58366009e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v916, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
    v754 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
    if (cf[0].__r_.__value_.__l.__size_)
    {
      v755 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
      do
        v756 = __ldaxr(v755);
      while (__stlxr(v756 - 1, v755));
      if (!v756)
      {
        ((void (*)(std::__shared_weak_count *))v754->__on_zero_shared)(v754);
        std::__shared_weak_count::__release_weak(v754);
      }
    }
    LODWORD(v904) = 1835299446;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (int *)&v904, 1.58366006e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v916, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
    v757 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
    if (cf[0].__r_.__value_.__l.__size_)
    {
      v758 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
      do
        v759 = __ldaxr(v758);
      while (__stlxr(v759 - 1, v758));
      if (!v759)
      {
        ((void (*)(std::__shared_weak_count *))v757->__on_zero_shared)(v757);
        std::__shared_weak_count::__release_weak(v757);
      }
    }
    LODWORD(v904) = 1835299446;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (int *)&v904, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v916, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
    v760 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
    if (cf[0].__r_.__value_.__l.__size_)
    {
      v761 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
      do
        v762 = __ldaxr(v761);
      while (__stlxr(v762 - 1, v761));
      if (!v762)
      {
        ((void (*)(std::__shared_weak_count *))v760->__on_zero_shared)(v760);
        std::__shared_weak_count::__release_weak(v760);
      }
    }
    LODWORD(v904) = 1;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (int *)&v904, 1.58366011e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v916, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
    v763 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
    if (cf[0].__r_.__value_.__l.__size_)
    {
      v764 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
      do
        v765 = __ldaxr(v764);
      while (__stlxr(v765 - 1, v764));
      if (!v765)
      {
        ((void (*)(std::__shared_weak_count *))v763->__on_zero_shared)(v763);
        std::__shared_weak_count::__release_weak(v763);
      }
    }
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v918, "com.apple.audio.Meta-Driver");
    v904 = 0x676C6F626F706C67;
    LODWORD(v905) = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)cf, (uint64_t)&v904, *(CFTypeRef *)v918);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v916, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
    v766 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
    if (cf[0].__r_.__value_.__l.__size_)
    {
      v767 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
      do
        v768 = __ldaxr(v767);
      while (__stlxr(v768 - 1, v767));
      if (!v768)
      {
        ((void (*)(std::__shared_weak_count *))v766->__on_zero_shared)(v766);
        std::__shared_weak_count::__release_weak(v766);
      }
    }
    if (*(_QWORD *)v918)
      CFRelease(*(CFTypeRef *)v918);
    v769 = *(_DWORD *)(v752 + 48);
    cf[0].__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(v752 + 32) + 16);
    LODWORD(cf[0].__r_.__value_.__r.__words[1]) = v769;
    AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>((uint64_t *)v918, 0, (__int128 *)cf, 1.58366011e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v916, (unsigned int *)(*(_QWORD *)v918 + 40), v918);
    v770 = *(std::__shared_weak_count **)&v918[8];
    if (*(_QWORD *)&v918[8])
    {
      v771 = (unint64_t *)(*(_QWORD *)&v918[8] + 8);
      do
        v772 = __ldaxr(v771);
      while (__stlxr(v772 - 1, v771));
      if (!v772)
      {
        ((void (*)(std::__shared_weak_count *))v770->__on_zero_shared)(v770);
        std::__shared_weak_count::__release_weak(v770);
      }
    }
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v918, "Meta Driver");
    v904 = 0x676C6F626C6E616DLL;
    LODWORD(v905) = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)cf, (uint64_t)&v904, *(CFTypeRef *)v918);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v916, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
    v773 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
    if (cf[0].__r_.__value_.__l.__size_)
    {
      v774 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
      do
        v775 = __ldaxr(v774);
      while (__stlxr(v775 - 1, v774));
      if (!v775)
      {
        ((void (*)(std::__shared_weak_count *))v773->__on_zero_shared)(v773);
        std::__shared_weak_count::__release_weak(v773);
      }
    }
    if (*(_QWORD *)v918)
      CFRelease(*(CFTypeRef *)v918);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v918, "Apple Inc.");
    v904 = 0x676C6F626C6D616BLL;
    LODWORD(v905) = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)cf, (uint64_t)&v904, *(CFTypeRef *)v918);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v916, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
    v776 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
    if (cf[0].__r_.__value_.__l.__size_)
    {
      v777 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
      do
        v778 = __ldaxr(v777);
      while (__stlxr(v778 - 1, v777));
      if (!v778)
      {
        ((void (*)(std::__shared_weak_count *))v776->__on_zero_shared)(v776);
        std::__shared_weak_count::__release_weak(v776);
      }
    }
    if (*(_QWORD *)v918)
      CFRelease(*(CFTypeRef *)v918);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v918, "com.apple.audio.Meta-Driver");
    v904 = 0x676C6F6270696964;
    LODWORD(v905) = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)cf, (uint64_t)&v904, *(CFTypeRef *)v918);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v916, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
    v779 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
    if (cf[0].__r_.__value_.__l.__size_)
    {
      v780 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
      do
        v781 = __ldaxr(v780);
      while (__stlxr(v781 - 1, v780));
      if (!v781)
      {
        ((void (*)(std::__shared_weak_count *))v779->__on_zero_shared)(v779);
        std::__shared_weak_count::__release_weak(v779);
      }
    }
    if (*(_QWORD *)v918)
      CFRelease(*(CFTypeRef *)v918);
    v782 = *(_DWORD *)(v752 + 48);
    cf[0].__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(v752 + 32) + 16);
    cf[0].__r_.__value_.__l.__size_ = v782 | 0x61626F7800000000;
    AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)v918, 0, (__int128 *)cf, 1.58366006e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v916, (unsigned int *)(*(_QWORD *)v918 + 40), v918);
    v783 = *(std::__shared_weak_count **)&v918[8];
    if (*(_QWORD *)&v918[8])
    {
      v784 = (unint64_t *)(*(_QWORD *)&v918[8] + 8);
      do
        v785 = __ldaxr(v784);
      while (__stlxr(v785 - 1, v784));
      if (!v785)
      {
        ((void (*)(std::__shared_weak_count *))v783->__on_zero_shared)(v783);
        std::__shared_weak_count::__release_weak(v783);
      }
    }
    v786 = *(_DWORD *)(v752 + 48);
    cf[0].__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(v752 + 32) + 16);
    cf[0].__r_.__value_.__l.__size_ = v786 | 0x61636C6B00000000;
    AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)v918, 0, (__int128 *)cf, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v916, (unsigned int *)(*(_QWORD *)v918 + 40), v918);
    v787 = *(std::__shared_weak_count **)&v918[8];
    if (*(_QWORD *)&v918[8])
    {
      v788 = (unint64_t *)(*(_QWORD *)&v918[8] + 8);
      do
        v789 = __ldaxr(v788);
      while (__stlxr(v789 - 1, v788));
      if (!v789)
      {
        ((void (*)(std::__shared_weak_count *))v787->__on_zero_shared)(v787);
        std::__shared_weak_count::__release_weak(v787);
      }
    }
    v790 = *(_DWORD *)(v752 + 48);
    cf[0].__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(v752 + 32) + 16);
    cf[0].__r_.__value_.__l.__size_ = v790 | 0x6164657600000000;
    AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)v918, 0, (__int128 *)cf, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v916, (unsigned int *)(*(_QWORD *)v918 + 40), v918);
    v791 = *(std::__shared_weak_count **)&v918[8];
    if (*(_QWORD *)&v918[8])
    {
      v792 = (unint64_t *)(*(_QWORD *)&v918[8] + 8);
      do
        v793 = __ldaxr(v792);
      while (__stlxr(v793 - 1, v792));
      if (!v793)
      {
        ((void (*)(std::__shared_weak_count *))v791->__on_zero_shared)(v791);
        std::__shared_weak_count::__release_weak(v791);
      }
    }
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>(&v904, 0, 1.5836601e190);
    v794 = v904;
    std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&lpsrc, *(_QWORD *)(v752 + 8), *(std::__shared_weak_count **)(v752 + 16));
    if (lpsrc
    {
      *(_QWORD *)&v903 = v795;
      *((_QWORD *)&v903 + 1) = v902;
      p_lpsrc = &lpsrc;
    }
    else
    {
      p_lpsrc = (void **)&v903;
    }
    *p_lpsrc = 0;
    p_lpsrc[1] = 0;
    v797 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(Aggregate_Device_Description const&,int)>>();
    v798 = v903;
    v903 = 0uLL;
    *(_OWORD *)&v918[8] = v798;
    *(_QWORD *)v918 = &off_1E6992618;
    v919 = v918;
    memset(cf, 0, 40);
    std::__function::__value_func<unsigned int ()(Aggregate_Device_Description const&,int)>::__value_func[abi:ne180100]((uint64_t)cf, (uint64_t)v918);
    cf[1].__r_.__value_.__l.__size_ = (std::string::size_type)AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(Aggregate_Device_Description const&,int)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v794, v797, (AMCP *)cf);
    if (cf[1].__r_.__value_.__l.__size_)
      ((void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))cf[1].__r_.__value_.__l.__size_)(0, (uint64_t)cf, 0, 0);
    v799 = v919;
    if (v919 == v918)
    {
      v800 = 4;
      v799 = v918;
    }
    else
    {
      if (!v919)
      {
LABEL_1151:
        v801 = v902;
        if (v902)
        {
          v802 = (unint64_t *)&v902->__shared_owners_;
          do
            v803 = __ldaxr(v802);
          while (__stlxr(v803 - 1, v802));
          if (!v803)
          {
            ((void (*)(std::__shared_weak_count *))v801->__on_zero_shared)(v801);
            std::__shared_weak_count::__release_weak(v801);
          }
        }
        v804 = v904;
        std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&lpsrc, *(_QWORD *)(v752 + 8), *(std::__shared_weak_count **)(v752 + 16));
        if (lpsrc
        {
          *(_QWORD *)&v903 = v805;
          *((_QWORD *)&v903 + 1) = v902;
          v806 = &lpsrc;
        }
        else
        {
          v806 = (void **)&v903;
        }
        *v806 = 0;
        v806[1] = 0;
        v807 = AMCP::Implementation::get_type_marker<std::function<void ()>>();
        v808 = v903;
        v903 = 0uLL;
        *(_OWORD *)&v918[8] = v808;
        *(_QWORD *)v918 = &off_1E6992728;
        v919 = v918;
        memset(cf, 0, 40);
        std::__function::__value_func<void ()>::__value_func[abi:ne180100]((uint64_t)cf, (uint64_t)v918);
        cf[1].__r_.__value_.__l.__size_ = (std::string::size_type)AMCP::Implementation::In_Place_Storage<std::function<void ()>>::dispatch;
        std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v804, v807, (AMCP *)cf);
        if (cf[1].__r_.__value_.__l.__size_)
          v809.n128_f64[0] = ((double (*)(int, uint64_t, AMCP::Thing *, uint64_t *))cf[1].__r_.__value_.__l.__size_)(0, (uint64_t)cf, 0, 0);
        v810 = v919;
        if (v919 == v918)
        {
          v811 = 4;
          v810 = v918;
        }
        else
        {
          if (!v919)
          {
LABEL_1167:
            v812 = v902;
            if (v902)
            {
              v813 = (unint64_t *)&v902->__shared_owners_;
              do
                v814 = __ldaxr(v813);
              while (__stlxr(v814 - 1, v813));
              if (!v814)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v812->__on_zero_shared)(v812, v809);
                std::__shared_weak_count::__release_weak(v812);
              }
            }
            std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v916, (unsigned int *)(v904 + 40), &v904);
            AMCP::Core::Broker::make_core((AMCP::Core::Core **)cf, *(std::__shared_mutex_base **)(*(_QWORD *)(v752 + 32) + 16), (uint64_t)v916, *(unsigned int *)(v752 + 48));
            v815 = (std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_;
            if (cf[0].__r_.__value_.__l.__size_)
            {
              v816 = (unint64_t *)(cf[0].__r_.__value_.__l.__size_ + 8);
              do
                v817 = __ldaxr(v816);
              while (__stlxr(v817 - 1, v816));
              if (!v817)
              {
                ((void (*)(std::__shared_weak_count *))v815->__on_zero_shared)(v815);
                std::__shared_weak_count::__release_weak(v815);
              }
            }
            v818 = v905;
            if (v905)
            {
              v819 = (unint64_t *)&v905->__shared_owners_;
              do
                v820 = __ldaxr(v819);
              while (__stlxr(v820 - 1, v819));
              if (!v820)
              {
                ((void (*)(std::__shared_weak_count *))v818->__on_zero_shared)(v818);
                std::__shared_weak_count::__release_weak(v818);
              }
            }
            std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(*(_QWORD **)&v916[16]);
            v821 = *(void **)v916;
            *(_QWORD *)v916 = 0;
            if (v821)
              operator delete(v821);
            v822 = (unint64_t)a1[2];
            v823 = a1[1];
            if ((unint64_t)v823 >= v822)
            {
              v828 = (v823 - *a1) >> 4;
              v829 = v828 + 1;
              if ((unint64_t)(v828 + 1) >> 60)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v830 = v822 - (_QWORD)*a1;
              if (v830 >> 3 > v829)
                v829 = v830 >> 3;
              if ((unint64_t)v830 >= 0x7FFFFFFFFFFFFFF0)
                v831 = 0xFFFFFFFFFFFFFFFLL;
              else
                v831 = v829;
              cf[1].__r_.__value_.__l.__size_ = (std::string::size_type)(a1 + 2);
              v832 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v831);
              v834 = &v832[16 * v828];
              v835 = *((_QWORD *)&v900 + 1);
              *(_OWORD *)v834 = v900;
              if (v835)
              {
                v836 = (unint64_t *)(v835 + 8);
                do
                  v837 = __ldxr(v836);
                while (__stxr(v837 + 1, v836));
              }
              v839 = *a1;
              v838 = a1[1];
              if (v838 == *a1)
              {
                v842 = vdupq_n_s64((unint64_t)v838);
                v840 = &v832[16 * v828];
              }
              else
              {
                v840 = &v832[16 * v828];
                do
                {
                  v841 = *((_OWORD *)v838 - 1);
                  v838 -= 16;
                  *((_OWORD *)v840 - 1) = v841;
                  v840 -= 16;
                  *(_QWORD *)v838 = 0;
                  *((_QWORD *)v838 + 1) = 0;
                }
                while (v838 != v839);
                v842 = *(int64x2_t *)a1;
              }
              v827 = v834 + 16;
              *a1 = v840;
              a1[1] = v834 + 16;
              *(int64x2_t *)&cf[0].__r_.__value_.__r.__words[1] = v842;
              v843 = (std::string::size_type)a1[2];
              a1[2] = &v832[16 * v833];
              cf[1].__r_.__value_.__r.__words[0] = v843;
              cf[0].__r_.__value_.__r.__words[0] = v842.i64[0];
              v821 = (void *)std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)cf);
            }
            else
            {
              *(_QWORD *)v823 = v900;
              v824 = *((_QWORD *)&v900 + 1);
              *((_QWORD *)v823 + 1) = *((_QWORD *)&v900 + 1);
              if (v824)
              {
                v825 = (unint64_t *)(v824 + 8);
                do
                  v826 = __ldxr(v825);
                while (__stxr(v826 + 1, v825));
              }
              v827 = v823 + 16;
            }
            a1[1] = v827;
            v844 = (std::__shared_weak_count *)*((_QWORD *)&v900 + 1);
            if (*((_QWORD *)&v900 + 1))
            {
              v845 = (unint64_t *)(*((_QWORD *)&v900 + 1) + 8);
              do
                v846 = __ldaxr(v845);
              while (__stlxr(v846 - 1, v845));
              if (!v846)
              {
                ((void (*)(std::__shared_weak_count *))v844->__on_zero_shared)(v844);
                std::__shared_weak_count::__release_weak(v844);
              }
            }
            if (v740)
            {
              v847 = (unint64_t *)&v740->__shared_owners_;
              do
                v848 = __ldaxr(v847);
              while (__stlxr(v848 - 1, v847));
              if (!v848)
              {
                ((void (*)(std::__shared_weak_count *))v740->__on_zero_shared)(v740);
                std::__shared_weak_count::__release_weak(v740);
              }
            }
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v821);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v918, "com.apple.coreaudio", "AMCP");
            v850 = *(_DWORD *)(*(_QWORD *)v918 + 16);
            switch(v850)
            {
              case 3:
                AMCP::Log::Scope_Registry::get(v849);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v916, "com.apple.coreaudio", "AMCP");
                v865 = *(std::__shared_weak_count **)&v916[8];
                v866 = **(NSObject ***)v916;
                if (*(_QWORD *)&v916[8])
                {
                  v867 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
                  do
                    v868 = __ldaxr(v867);
                  while (__stlxr(v868 - 1, v867));
                  if (!v868)
                  {
                    ((void (*)(std::__shared_weak_count *))v865->__on_zero_shared)(v865);
                    std::__shared_weak_count::__release_weak(v865);
                  }
                }
                if (!os_log_type_enabled(v866, OS_LOG_TYPE_INFO))
                  goto LABEL_1239;
                v869 = pthread_self();
                v870 = pthread_mach_thread_np(v869);
                *(_DWORD *)v916 = 67109634;
                *(_DWORD *)&v916[4] = v870;
                *(_WORD *)&v916[8] = 2080;
                *(_QWORD *)&v916[10] = "Driver_Manager.cpp";
                *(_WORD *)&v916[18] = 1024;
                *(_DWORD *)&v916[20] = 139;
                v857 = v866;
                v858 = OS_LOG_TYPE_INFO;
                break;
              case 2:
                AMCP::Log::Scope_Registry::get(v849);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v916, "com.apple.coreaudio", "AMCP");
                v859 = *(std::__shared_weak_count **)&v916[8];
                v860 = **(NSObject ***)v916;
                if (*(_QWORD *)&v916[8])
                {
                  v861 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
                  do
                    v862 = __ldaxr(v861);
                  while (__stlxr(v862 - 1, v861));
                  if (!v862)
                  {
                    ((void (*)(std::__shared_weak_count *))v859->__on_zero_shared)(v859);
                    std::__shared_weak_count::__release_weak(v859);
                  }
                }
                if (os_log_type_enabled(v860, OS_LOG_TYPE_DEBUG))
                {
                  v863 = pthread_self();
                  v864 = pthread_mach_thread_np(v863);
                  *(_DWORD *)v916 = 67109634;
                  *(_DWORD *)&v916[4] = v864;
                  *(_WORD *)&v916[8] = 2080;
                  *(_QWORD *)&v916[10] = "Driver_Manager.cpp";
                  *(_WORD *)&v916[18] = 1024;
                  *(_DWORD *)&v916[20] = 139;
                  _os_log_debug_impl(&dword_1B57BA000, v860, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Done loading Meta driver (com.apple.audio.Meta-Driver).", v916, 0x18u);
                }
                goto LABEL_1239;
              case 1:
                AMCP::Log::Scope_Registry::get(v849);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v916, "com.apple.coreaudio", "AMCP");
                v851 = *(std::__shared_weak_count **)&v916[8];
                v852 = **(NSObject ***)v916;
                if (*(_QWORD *)&v916[8])
                {
                  v853 = (unint64_t *)(*(_QWORD *)&v916[8] + 8);
                  do
                    v854 = __ldaxr(v853);
                  while (__stlxr(v854 - 1, v853));
                  if (!v854)
                  {
                    ((void (*)(std::__shared_weak_count *))v851->__on_zero_shared)(v851);
                    std::__shared_weak_count::__release_weak(v851);
                  }
                }
                if (!os_log_type_enabled(v852, OS_LOG_TYPE_DEFAULT))
                {
LABEL_1239:
                  v42 = *(std::__shared_weak_count **)&v918[8];
                  if (!*(_QWORD *)&v918[8])
                    goto LABEL_1243;
                  v871 = (unint64_t *)(*(_QWORD *)&v918[8] + 8);
                  do
                    v44 = __ldaxr(v871);
                  while (__stlxr(v44 - 1, v871));
                  goto LABEL_59;
                }
                v855 = pthread_self();
                v856 = pthread_mach_thread_np(v855);
                *(_DWORD *)v916 = 67109634;
                *(_DWORD *)&v916[4] = v856;
                *(_WORD *)&v916[8] = 2080;
                *(_QWORD *)&v916[10] = "Driver_Manager.cpp";
                *(_WORD *)&v916[18] = 1024;
                *(_DWORD *)&v916[20] = 139;
                v857 = v852;
                v858 = OS_LOG_TYPE_DEFAULT;
                break;
              default:
                goto LABEL_1239;
            }
            _os_log_impl(&dword_1B57BA000, v857, v858, "%6u %32s:%-5d Done loading Meta driver (com.apple.audio.Meta-Driver).", v916, 0x18u);
            goto LABEL_1239;
          }
          v811 = 5;
        }
        (*(void (**)(__n128))(*v810 + 8 * v811))(v809);
        goto LABEL_1167;
      }
      v800 = 5;
    }
    (*(void (**)(void))(*v799 + 8 * v800))();
    goto LABEL_1151;
  }
LABEL_1243:
  *(_QWORD *)v916 = &v884;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)v916);
  *(_QWORD *)v916 = &v887;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)v916);
  if (v889)
    CFRelease(v889);
}

void sub_1B5889834(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a2)
  {
    std::__split_buffer<applesauce::CF::StringRef>::~__split_buffer((uint64_t)&a51);
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

_QWORD *mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::BundleRef_Traits>::from_get(_QWORD *result, CFTypeRef cf)
{
  _QWORD *v2;

  v2 = result;
  if (cf)
  {
    CFRetain(cf);
    return mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::BundleRef_Traits>::BasicRef(v2, cf);
  }
  else
  {
    *result = 0;
  }
  return result;
}

applesauce::CF::StringRef *mcp_applesauce::CF::BundleRef_proxy::get_bundle_id(applesauce::CF::StringRef *this, __CFBundle *a2)
{
  applesauce::CF::StringRef *v2;
  CFStringRef Identifier;
  CFStringRef v4;

  v2 = this;
  if (a2)
  {
    Identifier = CFBundleGetIdentifier(a2);
    v4 = Identifier;
    if (Identifier)
      CFRetain(Identifier);
    return applesauce::CF::StringRef::StringRef(v2, v4);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

void std::vector<applesauce::CF::StringRef>::__assign_with_size[abi:ne180100]<applesauce::CF::StringRef*,applesauce::CF::StringRef*>(uint64_t a1, const void **a2, const void **a3, unint64_t a4)
{
  const void **v6;
  uint64_t v8;
  const void **v9;
  const void **v10;
  const void **v11;
  const void *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  const void *v17;
  unint64_t v18;
  const void **v19;
  const void *v20;
  const void **v21;
  const void **i;
  const void *v23;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(const void ***)a1;
  if (a4 > (v8 - *(_QWORD *)a1) >> 3)
  {
    if (v9)
    {
      v10 = *(const void ***)(a1 + 8);
      v11 = *(const void ***)a1;
      if (v10 != v9)
      {
        do
        {
          v12 = *--v10;
          std::__destroy_at[abi:ne180100]<applesauce::CF::StringRef,0>(v12);
        }
        while (v10 != v9);
        v11 = *(const void ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 >> 61)
      goto LABEL_25;
    v13 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v13 = a4;
    v14 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v13;
    if (v14 >> 61)
LABEL_25:
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v14);
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v15;
    *(_QWORD *)(a1 + 16) = &v15[v16];
    while (v6 != a3)
    {
      v17 = *v6++;
      v15 = std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef&,applesauce::CF::StringRef*>(v15, v17)+ 1;
    }
    goto LABEL_21;
  }
  v18 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3;
  if (v18 < a4)
  {
    v19 = &a2[v18];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<applesauce::CF::StringRef *,applesauce::CF::StringRef *,applesauce::CF::StringRef *>(a2, v19, v9);
    v15 = *(_QWORD **)(a1 + 8);
    while (v19 != a3)
    {
      v20 = *v19++;
      v15 = std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef&,applesauce::CF::StringRef*>(v15, v20)+ 1;
    }
LABEL_21:
    *(_QWORD *)(a1 + 8) = v15;
    return;
  }
  v21 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<applesauce::CF::StringRef *,applesauce::CF::StringRef *,applesauce::CF::StringRef *>(a2, a3, v9);
  for (i = *(const void ***)(a1 + 8); i != v21; --i)
  {
    v23 = *(i - 1);
    std::__destroy_at[abi:ne180100]<applesauce::CF::StringRef,0>(v23);
  }
  *(_QWORD *)(a1 + 8) = v21;
}

void std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  const void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (const void *)*((_QWORD *)v4 - 1);
        v4 -= 8;
        std::__destroy_at[abi:ne180100]<applesauce::CF::StringRef,0>(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<applesauce::CF::StringRef,0>(const void *a1)
{
  if (a1)
    CFRelease(a1);
}

void std::__shared_ptr_emplace<AMCP::Meta::Driver>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E696FD70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Meta::Driver>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E696FD70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::Meta::Driver>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::start(const char *a1, const __CFString ***a2, const __CFString ***a3)
{
  const __CFString **v4;
  const __CFString **v5;
  const __CFString **v6;
  const __CFString **v7;
  _QWORD *v8;
  char *v9;
  CFURLRef v10;
  DIR *v11;
  int i;
  char *v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v19;
  BOOL v20;
  const void *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  int64x2_t v32;
  char *v33;
  char *v34;
  char *v35;
  const void *v36;
  CFURLRef *v37;
  CFURLRef *j;
  CFBundleRef v39;
  AMCP::Log::Scope_Registry *v40;
  _BOOL4 v41;
  const __CFString **v42;
  const __CFString **v43;
  const __CFString **v44;
  const __CFString **v45;
  const __CFString **v46;
  const __CFString **v47;
  applesauce::CF::DictionaryRef *info_dictionary;
  AMCP::Log::Scope_Registry *v50;
  AMCP::Log::Scope_Registry *v51;
  int v52;
  std::__shared_weak_count *v53;
  NSObject *v54;
  unint64_t *v55;
  unint64_t v56;
  _opaque_pthread_t *v57;
  mach_port_t v58;
  mach_port_t v59;
  std::runtime_error_vtbl *v60;
  NSObject *v61;
  os_log_type_t v62;
  AMCP::Log::Scope_Registry *v63;
  int v64;
  std::__shared_weak_count *v65;
  NSObject *v66;
  unint64_t *v67;
  unint64_t v68;
  _opaque_pthread_t *v69;
  mach_port_t v70;
  mach_port_t v71;
  std::runtime_error_vtbl *v72;
  NSObject *v73;
  os_log_type_t v74;
  std::__shared_weak_count *v75;
  NSObject *v76;
  unint64_t *v77;
  unint64_t v78;
  _opaque_pthread_t *v79;
  mach_port_t v80;
  mach_port_t v81;
  std::runtime_error_vtbl *v82;
  std::__shared_weak_count *v83;
  NSObject *v84;
  unint64_t *v85;
  unint64_t v86;
  _opaque_pthread_t *v87;
  mach_port_t v88;
  mach_port_t v89;
  std::runtime_error_vtbl *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  int d_seekoff_low;
  const __CFArray *d_ino;
  CFIndex Count;
  CFIndex v97;
  __uint64_t v98;
  CFIndex v99;
  int v100;
  int v101;
  std::__shared_weak_count *v102;
  NSObject *v103;
  unint64_t *v104;
  unint64_t v105;
  _opaque_pthread_t *v106;
  mach_port_t v107;
  mach_port_t v108;
  std::runtime_error_vtbl *v109;
  std::__shared_weak_count *v110;
  NSObject *v111;
  unint64_t *v112;
  unint64_t v113;
  _opaque_pthread_t *v114;
  mach_port_t v115;
  mach_port_t v116;
  std::runtime_error_vtbl *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  AMCP::Log::Scope_Registry *v121;
  AMCP::Log::Scope_Registry *v122;
  int v123;
  std::__shared_weak_count *v124;
  NSObject *v125;
  unint64_t *v126;
  unint64_t v127;
  _opaque_pthread_t *v128;
  mach_port_t v129;
  mach_port_t v130;
  std::runtime_error_vtbl *v131;
  NSObject *v132;
  os_log_type_t v133;
  std::__shared_weak_count *v134;
  NSObject *v135;
  unint64_t *v136;
  unint64_t v137;
  _opaque_pthread_t *v138;
  mach_port_t v139;
  mach_port_t v140;
  std::runtime_error_vtbl *v141;
  std::__shared_weak_count *v142;
  NSObject *v143;
  unint64_t *v144;
  unint64_t v145;
  _opaque_pthread_t *v146;
  mach_port_t v147;
  mach_port_t v148;
  std::runtime_error_vtbl *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t v153;
  std::runtime_error_vtbl *v154;
  AMCP::Log::Scope_Registry *v155;
  _BOOL8 v156;
  int v157;
  std::__shared_weak_count *v158;
  NSObject *v159;
  unint64_t *v160;
  unint64_t v161;
  _opaque_pthread_t *v162;
  mach_port_t v163;
  mach_port_t v164;
  std::runtime_error_vtbl *v165;
  const char *v166;
  NSObject *v167;
  os_log_type_t v168;
  std::__shared_weak_count *v169;
  NSObject *v170;
  unint64_t *v171;
  unint64_t v172;
  _opaque_pthread_t *v173;
  mach_port_t v174;
  mach_port_t v175;
  std::runtime_error_vtbl *v176;
  const char *v177;
  std::__shared_weak_count *v178;
  NSObject *v179;
  unint64_t *v180;
  unint64_t v181;
  _opaque_pthread_t *v182;
  mach_port_t v183;
  mach_port_t v184;
  std::runtime_error_vtbl *v185;
  const char *v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  AMCP::Log::Scope_Registry *v190;
  int v191;
  std::__shared_weak_count *v192;
  NSObject *v193;
  unint64_t *v194;
  unint64_t v195;
  _opaque_pthread_t *v196;
  mach_port_t v197;
  mach_port_t v198;
  std::runtime_error_vtbl *v199;
  NSObject *v200;
  os_log_type_t v201;
  AMCP::Log::Scope_Registry *v202;
  int v203;
  std::__shared_weak_count *v204;
  NSObject *v205;
  unint64_t *v206;
  unint64_t v207;
  _opaque_pthread_t *v208;
  mach_port_t v209;
  mach_port_t v210;
  std::runtime_error_vtbl *v211;
  NSObject *v212;
  os_log_type_t v213;
  std::__shared_weak_count *v214;
  NSObject *v215;
  unint64_t *v216;
  unint64_t v217;
  _opaque_pthread_t *v218;
  mach_port_t v219;
  mach_port_t v220;
  std::runtime_error_vtbl *v221;
  std::__shared_weak_count *v222;
  NSObject *v223;
  unint64_t *v224;
  unint64_t v225;
  _opaque_pthread_t *v226;
  mach_port_t v227;
  mach_port_t v228;
  std::runtime_error_vtbl *v229;
  std::__shared_weak_count *v230;
  NSObject *v231;
  unint64_t *v232;
  unint64_t v233;
  _opaque_pthread_t *v234;
  mach_port_t v235;
  mach_port_t v236;
  std::runtime_error_vtbl *v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  AMCP::Log::Scope_Registry *v241;
  AMCP::Log::Scope_Registry *v242;
  int v243;
  std::__shared_weak_count *v244;
  NSObject *v245;
  unint64_t *v246;
  unint64_t v247;
  _opaque_pthread_t *v248;
  mach_port_t v249;
  mach_port_t v250;
  std::runtime_error_vtbl *v251;
  NSObject *v252;
  os_log_type_t v253;
  std::__shared_weak_count *v254;
  NSObject *v255;
  unint64_t *v256;
  unint64_t v257;
  _opaque_pthread_t *v258;
  mach_port_t v259;
  mach_port_t v260;
  std::runtime_error_vtbl *v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  CFTypeRef v265;
  CFArrayRef v266;
  const __CFArray *v267;
  CFIndex v268;
  CFIndex v269;
  CFIndex v270;
  unint64_t v271;
  CFURLRef v272;
  uint64_t v273;
  NSObject *v274;
  CFTypeRef v275;
  std::runtime_error *v276;
  std::runtime_error *v277;
  uint64_t v278;
  _QWORD *v279;
  unint64_t v280;
  _QWORD *v281;
  _QWORD *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  _QWORD *v288;
  char *v289;
  _QWORD *v290;
  _QWORD *v291;
  _QWORD *v292;
  uint64_t v293;
  uint64_t v294;
  _QWORD *v295;
  std::__shared_weak_count *v296;
  NSObject *v297;
  unint64_t *v298;
  unint64_t v299;
  _opaque_pthread_t *v300;
  mach_port_t v301;
  mach_port_t v302;
  std::runtime_error_vtbl *v303;
  std::__shared_weak_count *v304;
  NSObject *v305;
  unint64_t *v306;
  unint64_t v307;
  _opaque_pthread_t *v308;
  mach_port_t v309;
  mach_port_t v310;
  std::runtime_error_vtbl *v311;
  unint64_t *v312;
  std::__shared_weak_count *d_seekoff;
  NSObject *v314;
  unint64_t *v315;
  unint64_t v316;
  _opaque_pthread_t *v317;
  mach_port_t v318;
  void *exception;
  int v320;
  std::__shared_weak_count *v321;
  NSObject *v322;
  unint64_t *v323;
  unint64_t v324;
  _opaque_pthread_t *v325;
  mach_port_t v326;
  void *v327;
  std::runtime_error *v328;
  std::runtime_error *v329;
  std::runtime_error *v330;
  std::runtime_error *v331;
  std::runtime_error *v332;
  std::runtime_error *v333;
  std::runtime_error *v334;
  std::runtime_error *v335;
  std::runtime_error *v336;
  std::runtime_error *v337;
  std::runtime_error *v338;
  std::runtime_error *v339;
  std::runtime_error *v340;
  std::runtime_error *v341;
  std::runtime_error *v342;
  std::runtime_error *v343;
  std::runtime_error *v344;
  std::runtime_error *v345;
  std::runtime_error *v346;
  std::runtime_error *v347;
  std::runtime_error *v348;
  std::runtime_error *v349;
  std::runtime_error *v350;
  std::runtime_error *v351;
  _BYTE mainPort[12];
  BOOL v355;
  BOOL v356;
  CFURLRef *v357;
  const char *v358;
  CFTypeRef v359;
  CFTypeRef v360;
  CFTypeRef v361[2];
  uint64_t v362;
  std::runtime_error v363;
  CFTypeRef v364;
  int64x2_t v365;
  char *v366;
  CFTypeRef v367;
  CFArrayRef theArray;
  io_iterator_t existing[2];
  void *__p[2];
  uint64_t v371;
  CFTypeRef v372;
  std::runtime_error v373;
  void *v374;
  std::runtime_error *v375;
  uint64_t v376;
  uint64_t v377;
  int v378;
  dirent cf;
  uint64_t v380;

  v380 = *MEMORY[0x1E0C80C00];
  if (*a2 == a2[1])
  {
    v356 = 1;
  }
  else
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "*");
    v4 = *a3;
    v5 = a3[1];
    if (*a3 == v5)
    {
      v356 = 0;
    }
    else
    {
      while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v4, (const __CFString **)&cf))
      {
        if (++v4 == v5)
        {
          v4 = v5;
          break;
        }
      }
      v356 = v4 != a3[1];
    }
    if (cf.d_ino)
      CFRelease((CFTypeRef)cf.d_ino);
    if (*a2 != a2[1])
    {
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "*");
      v6 = *a2;
      v7 = a2[1];
      if (*a2 == v7)
      {
        v355 = 0;
      }
      else
      {
        while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v6, (const __CFString **)&cf))
        {
          if (++v6 == v7)
          {
            v6 = v7;
            break;
          }
        }
        v355 = v6 != a2[1];
      }
      if (cf.d_ino)
        CFRelease((CFTypeRef)cf.d_ino);
      goto LABEL_21;
    }
  }
  v355 = 1;
LABEL_21:
  *(_DWORD *)&mainPort[8] = 0;
  *(_QWORD *)mainPort = *MEMORY[0x1E0CBBAA8];
  v358 = a1;
  do
  {
    v8 = operator new(0x18uLL);
    *(_OWORD *)v8 = xmmword_1E69841B0;
    v8[2] = "/Library/Apple/Audio/Plug-Ins/HAL";
    v9 = (char *)v8[*(_QWORD *)&mainPort[4]];
    v366 = 0;
    v365 = 0uLL;
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v9);
    v10 = CFURLCreateWithFileSystemPath(0, (CFStringRef)cf.d_ino, kCFURLPOSIXPathStyle, 1u);
    applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&v373, v10);
    if (cf.d_ino)
      CFRelease((CFTypeRef)cf.d_ino);
    if (!access(v9, 5))
    {
      v11 = opendir(v9);
      if (v11)
      {
        *(_QWORD *)existing = 0;
        bzero(&cf, 0x418uLL);
        for (i = readdir_r(v11, &cf, (dirent **)existing);
              !i && *(_QWORD *)existing;
              i = readdir_r(v11, &cf, (dirent **)existing))
        {
          v13 = (char *)(*(_QWORD *)existing + 21);
          v14 = *(unsigned __int8 *)(*(_QWORD *)existing + 21);
          if (*(_BYTE *)(*(_QWORD *)existing + 21))
          {
            v15 = 0;
            v16 = 0;
            do
            {
              v17 = *(_QWORD *)existing + v15;
              if (v14 == 46)
                v16 = *(_QWORD *)existing + v15 + 21;
              v14 = *(unsigned __int8 *)(v17 + 22);
              if (!*(_BYTE *)(v17 + 22))
                break;
              v20 = v15++ >= 0xFFF;
            }
            while (!v20);
            if (v16 && v16 != (_QWORD)v13)
            {
              v19 = 0;
              while (*(unsigned __int8 *)(v16 + v19) == aDriver[v19])
              {
                if (*(_BYTE *)(v16 + v19))
                  v20 = v19 >= 6;
                else
                  v20 = 1;
                ++v19;
                if (v20)
                {
                  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v363, v13);
                  v21 = (const void *)MEMORY[0x1B5E4F980](0, v363.__vftable, 0, 1, v373.__vftable);
                  applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)v361, v21);
                  if (v363.__vftable)
                    CFRelease(v363.__vftable);
                  if (v365.i64[1] >= (unint64_t)v366)
                  {
                    v23 = (v365.i64[1] - v365.i64[0]) >> 3;
                    if ((unint64_t)(v23 + 1) >> 61)
                      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                    v24 = (uint64_t)&v366[-v365.i64[0]] >> 2;
                    if (v24 <= v23 + 1)
                      v24 = v23 + 1;
                    if ((unint64_t)&v366[-v365.i64[0]] >= 0x7FFFFFFFFFFFFFF8)
                      v25 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v25 = v24;
                    if (v25)
                    {
                      if (v25 >> 61)
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      v26 = operator new(8 * v25);
                    }
                    else
                    {
                      v26 = 0;
                    }
                    v27 = std::construct_at[abi:ne180100]<applesauce::CF::URLRef,applesauce::CF::URLRef&,applesauce::CF::URLRef*>(&v26[v23], v361[0]);
                    v28 = (_QWORD *)v365.i64[1];
                    v29 = (_QWORD *)v365.i64[0];
                    if (v365.i64[1] == v365.i64[0])
                    {
                      v32 = vdupq_n_s64(v365.u64[1]);
                      v30 = v27;
                    }
                    else
                    {
                      v30 = v27;
                      do
                      {
                        v31 = *--v28;
                        *--v30 = v31;
                        *v28 = 0;
                      }
                      while (v28 != v29);
                      v32 = v365;
                    }
                    v33 = (char *)&v26[v25];
                    v22 = v27 + 1;
                    v365.i64[0] = (uint64_t)v30;
                    v365.i64[1] = (uint64_t)(v27 + 1);
                    v366 = v33;
                    v35 = (char *)v32.i64[1];
                    v34 = (char *)v32.i64[0];
                    while (v35 != v34)
                    {
                      v36 = (const void *)*((_QWORD *)v35 - 1);
                      v35 -= 8;
                      std::__destroy_at[abi:ne180100]<applesauce::CF::URLRef,0>(v36);
                    }
                    if (v34)
                      operator delete(v34);
                  }
                  else
                  {
                    v22 = std::construct_at[abi:ne180100]<applesauce::CF::URLRef,applesauce::CF::URLRef&,applesauce::CF::URLRef*>((_QWORD *)v365.i64[1], v361[0])+ 1;
                  }
                  v365.i64[1] = (uint64_t)v22;
                  if (v361[0])
                    CFRelease(v361[0]);
                  break;
                }
              }
            }
          }
        }
        closedir(v11);
      }
    }
    if (v373.__vftable)
      CFRelease(v373.__vftable);
    operator delete(v8);
    v37 = (CFURLRef *)v365.i64[1];
    v357 = (CFURLRef *)v365.i64[1];
    for (j = (CFURLRef *)v365.i64[0]; j != v37; ++j)
    {
      v39 = CFBundleCreate(0, *j);
      v40 = (AMCP::Log::Scope_Registry *)mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::BundleRef_Traits>::BasicRef(&v364, v39);
      if (!v364)
      {
        AMCP::Log::Scope_Registry::get(v40);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
        d_seekoff = (std::__shared_weak_count *)cf.d_seekoff;
        v314 = *(NSObject **)cf.d_ino;
        if (cf.d_seekoff)
        {
          v315 = (unint64_t *)(cf.d_seekoff + 8);
          do
            v316 = __ldaxr(v315);
          while (__stlxr(v316 - 1, v315));
          if (!v316)
          {
            ((void (*)(std::__shared_weak_count *))d_seekoff->__on_zero_shared)(d_seekoff);
            std::__shared_weak_count::__release_weak(d_seekoff);
          }
        }
        if (os_log_type_enabled(v314, OS_LOG_TYPE_ERROR))
        {
          v317 = pthread_self();
          v318 = pthread_mach_thread_np(v317);
          LODWORD(cf.d_ino) = 67109890;
          HIDWORD(cf.d_ino) = v318;
          LOWORD(cf.d_seekoff) = 2080;
          *(__uint64_t *)((char *)&cf.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
          cf.d_namlen = 1024;
          *(_DWORD *)&cf.d_type = 85;
          *(_WORD *)&cf.d_name[3] = 2080;
          *(_QWORD *)&cf.d_name[5] = "!plugin_bundle.is_valid()";
          _os_log_error_impl(&dword_1B57BA000, v314, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s no actual bundle for the given driver url", (uint8_t *)&cf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v372);
        exception = __cxa_allocate_exception(0x40uLL);
        std::runtime_error::runtime_error(&v363, "no actual bundle for the given driver url");
        std::runtime_error::runtime_error(&v373, &v363);
        v375 = 0;
        v376 = 0;
        v377 = 0;
        v378 = -1;
        v373.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v374 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&cf, (uint64_t)&v373);
        *(_QWORD *)&cf.d_name[11] = "void AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::start(const std::vector"
                                    "<CF::String> &, const std::vector<CF::String> &) [Helper = AMCP::ASP::Simple_Loader_Helper]";
        *(_QWORD *)&cf.d_name[19] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_Loader.h";
        *(_DWORD *)&cf.d_name[27] = 85;
        std::vector<void *>::vector(v361);
        v320 = backtrace((void **)v361[0], (unint64_t)((char *)v361[1] - (char *)v361[0]) >> 3);
        std::vector<void *>::resize((char **)v361, v320);
        *(_QWORD *)existing = off_1E69A20A0;
        *(_OWORD *)__p = *(_OWORD *)v361;
        v371 = v362;
        v361[0] = 0;
        v361[1] = 0;
        v362 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&cf, (uint64_t)existing);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)&cf);
      }
      mcp_applesauce::CF::BundleRef_proxy::get_bundle_id((applesauce::CF::StringRef *)&v360, (__CFBundle *)v364);
      if (v355)
      {
        v41 = 1;
      }
      else
      {
        v42 = *a2;
        v43 = a2[1];
        if (*a2 == v43)
        {
          v44 = *a2;
        }
        else
        {
          while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v42, (const __CFString **)&v360))
          {
            if (++v42 == v43)
            {
              v42 = v43;
              break;
            }
          }
          v44 = v42;
          v42 = a2[1];
        }
        v41 = v44 != v42;
      }
      if (v356)
        goto LABEL_492;
      v45 = *a3;
      v46 = a3[1];
      if (*a3 == v46)
      {
        v47 = *a3;
      }
      else
      {
        while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v45, (const __CFString **)&v360))
        {
          if (++v45 == v46)
          {
            v45 = v46;
            break;
          }
        }
        v47 = v45;
        v45 = a3[1];
      }
      if (v47 != v45 || !v41)
        goto LABEL_492;
      info_dictionary = mcp_applesauce::CF::BundleRef_proxy::get_info_dictionary((applesauce::CF::DictionaryRef *)&v359, (__CFBundle *)v364);
      if (!v364)
      {
        AMCP::Log::Scope_Registry::get(info_dictionary);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
        v321 = (std::__shared_weak_count *)cf.d_seekoff;
        v322 = *(NSObject **)cf.d_ino;
        if (cf.d_seekoff)
        {
          v323 = (unint64_t *)(cf.d_seekoff + 8);
          do
            v324 = __ldaxr(v323);
          while (__stlxr(v324 - 1, v323));
          if (!v324)
          {
            ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
            std::__shared_weak_count::__release_weak(v321);
          }
        }
        if (os_log_type_enabled(v322, OS_LOG_TYPE_ERROR))
        {
          v325 = pthread_self();
          v326 = pthread_mach_thread_np(v325);
          LODWORD(cf.d_ino) = 67109890;
          HIDWORD(cf.d_ino) = v326;
          LOWORD(cf.d_seekoff) = 2080;
          *(__uint64_t *)((char *)&cf.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
          cf.d_namlen = 1024;
          *(_DWORD *)&cf.d_type = 93;
          *(_WORD *)&cf.d_name[3] = 2080;
          *(_QWORD *)&cf.d_name[5] = "!plugin_bundle.is_valid()";
          _os_log_error_impl(&dword_1B57BA000, v322, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s couldn't get the info.plist for the driver", (uint8_t *)&cf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v372);
        v327 = __cxa_allocate_exception(0x40uLL);
        std::runtime_error::runtime_error(&v363, "couldn't get the info.plist for the driver");
        std::runtime_error::runtime_error(&v373, &v363);
        v375 = 0;
        v376 = 0;
        v377 = 0;
        v378 = -1;
        v373.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
        v374 = &unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&cf, (uint64_t)&v373);
        *(_QWORD *)&cf.d_name[11] = "void AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::start(const std::vector"
                                    "<CF::String> &, const std::vector<CF::String> &) [Helper = AMCP::ASP::Simple_Loader_Helper]";
        *(_QWORD *)&cf.d_name[19] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_Loader.h";
        *(_DWORD *)&cf.d_name[27] = 93;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v361);
        *(_QWORD *)existing = off_1E69A20A0;
        *(_OWORD *)__p = *(_OWORD *)v361;
        v371 = v362;
        v361[0] = 0;
        v361[1] = 0;
        v362 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&cf, (uint64_t)existing);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v327, (uint64_t)&cf);
      }
      if (!v359)
      {
        v328 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v328, "Could not construct");
        __cxa_throw(v328, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,__CFString const*>(v361, (CFDictionaryRef)v359, CFSTR("AudioServerPlugIn_LoadingConditions"));
      if (!LOBYTE(v361[1]))
      {
        AMCP::Log::Scope_Registry::get(v50);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)existing, "com.apple.coreaudio", "AMCP");
        v64 = *(_DWORD *)(*(_QWORD *)existing + 16);
        if (v64 == 1)
        {
          AMCP::Log::Scope_Registry::get(v63);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
          v110 = (std::__shared_weak_count *)cf.d_seekoff;
          v111 = *(NSObject **)cf.d_ino;
          if (cf.d_seekoff)
          {
            v112 = (unint64_t *)(cf.d_seekoff + 8);
            do
              v113 = __ldaxr(v112);
            while (__stlxr(v113 - 1, v112));
            if (!v113)
            {
              ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
              std::__shared_weak_count::__release_weak(v110);
            }
          }
          if (!os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
            goto LABEL_187;
          v114 = pthread_self();
          v115 = pthread_mach_thread_np(v114);
          if (!v360)
          {
            v341 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v341, "Could not construct");
            __cxa_throw(v341, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v116 = v115;
          applesauce::CF::convert_to<std::string,0>((uint64_t)&v373, (const __CFString *)v360);
          v117 = (std::runtime_error_vtbl *)&v373;
          if (SHIBYTE(v374) < 0)
            v117 = v373.__vftable;
          LODWORD(cf.d_ino) = 67109890;
          HIDWORD(cf.d_ino) = v116;
          LOWORD(cf.d_seekoff) = 2080;
          *(__uint64_t *)((char *)&cf.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
          cf.d_namlen = 1024;
          *(_DWORD *)&cf.d_type = 98;
          *(_WORD *)&cf.d_name[3] = 2080;
          *(_QWORD *)&cf.d_name[5] = v117;
          v73 = v111;
          v74 = OS_LOG_TYPE_DEFAULT;
LABEL_184:
          _os_log_impl(&dword_1B57BA000, v73, v74, "%6u %32s:%-5d Loading server plug-in %s...", (uint8_t *)&cf, 0x22u);
        }
        else
        {
          if (v64 != 2)
          {
            if (v64 == 3)
            {
              AMCP::Log::Scope_Registry::get(v63);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
              v65 = (std::__shared_weak_count *)cf.d_seekoff;
              v66 = *(NSObject **)cf.d_ino;
              if (cf.d_seekoff)
              {
                v67 = (unint64_t *)(cf.d_seekoff + 8);
                do
                  v68 = __ldaxr(v67);
                while (__stlxr(v68 - 1, v67));
                if (!v68)
                {
                  ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                  std::__shared_weak_count::__release_weak(v65);
                }
              }
              if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
              {
                v69 = pthread_self();
                v70 = pthread_mach_thread_np(v69);
                if (!v360)
                {
                  v340 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v340, "Could not construct");
                  __cxa_throw(v340, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                v71 = v70;
                applesauce::CF::convert_to<std::string,0>((uint64_t)&v373, (const __CFString *)v360);
                v72 = (std::runtime_error_vtbl *)&v373;
                if (SHIBYTE(v374) < 0)
                  v72 = v373.__vftable;
                LODWORD(cf.d_ino) = 67109890;
                HIDWORD(cf.d_ino) = v71;
                LOWORD(cf.d_seekoff) = 2080;
                *(__uint64_t *)((char *)&cf.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
                cf.d_namlen = 1024;
                *(_DWORD *)&cf.d_type = 98;
                *(_WORD *)&cf.d_name[3] = 2080;
                *(_QWORD *)&cf.d_name[5] = v72;
                v73 = v66;
                v74 = OS_LOG_TYPE_INFO;
                goto LABEL_184;
              }
            }
LABEL_187:
            v118 = (std::__shared_weak_count *)__p[0];
            if (__p[0])
            {
              v119 = (unint64_t *)((char *)__p[0] + 8);
              do
                v120 = __ldaxr(v119);
              while (__stlxr(v120 - 1, v119));
              if (!v120)
              {
                ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                std::__shared_weak_count::__release_weak(v118);
              }
            }
            AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::load_driver((uint64_t)v358, j);
            AMCP::Log::Scope_Registry::get(v121);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)existing, "com.apple.coreaudio", "AMCP");
            v123 = *(_DWORD *)(*(_QWORD *)existing + 16);
            if (v123 == 1)
            {
              AMCP::Log::Scope_Registry::get(v122);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
              v142 = (std::__shared_weak_count *)cf.d_seekoff;
              v143 = *(NSObject **)cf.d_ino;
              if (cf.d_seekoff)
              {
                v144 = (unint64_t *)(cf.d_seekoff + 8);
                do
                  v145 = __ldaxr(v144);
                while (__stlxr(v145 - 1, v144));
                if (!v145)
                {
                  ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                  std::__shared_weak_count::__release_weak(v142);
                }
              }
              if (!os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
                goto LABEL_228;
              v146 = pthread_self();
              v147 = pthread_mach_thread_np(v146);
              if (!v360)
              {
                v343 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v343, "Could not construct");
                __cxa_throw(v343, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              v148 = v147;
              applesauce::CF::convert_to<std::string,0>((uint64_t)&v373, (const __CFString *)v360);
              v149 = (std::runtime_error_vtbl *)&v373;
              if (SHIBYTE(v374) < 0)
                v149 = v373.__vftable;
              LODWORD(cf.d_ino) = 67109890;
              HIDWORD(cf.d_ino) = v148;
              LOWORD(cf.d_seekoff) = 2080;
              *(__uint64_t *)((char *)&cf.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
              cf.d_namlen = 1024;
              *(_DWORD *)&cf.d_type = 100;
              *(_WORD *)&cf.d_name[3] = 2080;
              *(_QWORD *)&cf.d_name[5] = v149;
              v132 = v143;
              v133 = OS_LOG_TYPE_DEFAULT;
LABEL_225:
              _os_log_impl(&dword_1B57BA000, v132, v133, "%6u %32s:%-5d Done loading server plug-in %s...", (uint8_t *)&cf, 0x22u);
            }
            else
            {
              if (v123 != 2)
              {
                if (v123 == 3)
                {
                  AMCP::Log::Scope_Registry::get(v122);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                  v124 = (std::__shared_weak_count *)cf.d_seekoff;
                  v125 = *(NSObject **)cf.d_ino;
                  if (cf.d_seekoff)
                  {
                    v126 = (unint64_t *)(cf.d_seekoff + 8);
                    do
                      v127 = __ldaxr(v126);
                    while (__stlxr(v127 - 1, v126));
                    if (!v127)
                    {
                      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                      std::__shared_weak_count::__release_weak(v124);
                    }
                  }
                  if (os_log_type_enabled(v125, OS_LOG_TYPE_INFO))
                  {
                    v128 = pthread_self();
                    v129 = pthread_mach_thread_np(v128);
                    if (!v360)
                    {
                      v342 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v342, "Could not construct");
                      __cxa_throw(v342, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                    }
                    v130 = v129;
                    applesauce::CF::convert_to<std::string,0>((uint64_t)&v373, (const __CFString *)v360);
                    v131 = (std::runtime_error_vtbl *)&v373;
                    if (SHIBYTE(v374) < 0)
                      v131 = v373.__vftable;
                    LODWORD(cf.d_ino) = 67109890;
                    HIDWORD(cf.d_ino) = v130;
                    LOWORD(cf.d_seekoff) = 2080;
                    *(__uint64_t *)((char *)&cf.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
                    cf.d_namlen = 1024;
                    *(_DWORD *)&cf.d_type = 100;
                    *(_WORD *)&cf.d_name[3] = 2080;
                    *(_QWORD *)&cf.d_name[5] = v131;
                    v132 = v125;
                    v133 = OS_LOG_TYPE_INFO;
                    goto LABEL_225;
                  }
                }
LABEL_228:
                v150 = (std::__shared_weak_count *)__p[0];
                if (!__p[0])
                  goto LABEL_490;
                v151 = (unint64_t *)((char *)__p[0] + 8);
                do
                  v152 = __ldaxr(v151);
                while (__stlxr(v152 - 1, v151));
LABEL_488:
                if (!v152)
                {
                  ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                  std::__shared_weak_count::__release_weak(v150);
                }
                goto LABEL_490;
              }
              AMCP::Log::Scope_Registry::get(v122);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
              v134 = (std::__shared_weak_count *)cf.d_seekoff;
              v135 = *(NSObject **)cf.d_ino;
              if (cf.d_seekoff)
              {
                v136 = (unint64_t *)(cf.d_seekoff + 8);
                do
                  v137 = __ldaxr(v136);
                while (__stlxr(v137 - 1, v136));
                if (!v137)
                {
                  ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                  std::__shared_weak_count::__release_weak(v134);
                }
              }
              if (!os_log_type_enabled(v135, OS_LOG_TYPE_DEBUG))
                goto LABEL_228;
              v138 = pthread_self();
              v139 = pthread_mach_thread_np(v138);
              if (!v360)
              {
                v332 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v332, "Could not construct");
                __cxa_throw(v332, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              v140 = v139;
              applesauce::CF::convert_to<std::string,0>((uint64_t)&v373, (const __CFString *)v360);
              v141 = (std::runtime_error_vtbl *)&v373;
              if (SHIBYTE(v374) < 0)
                v141 = v373.__vftable;
              LODWORD(cf.d_ino) = 67109890;
              HIDWORD(cf.d_ino) = v140;
              LOWORD(cf.d_seekoff) = 2080;
              *(__uint64_t *)((char *)&cf.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
              cf.d_namlen = 1024;
              *(_DWORD *)&cf.d_type = 100;
              *(_WORD *)&cf.d_name[3] = 2080;
              *(_QWORD *)&cf.d_name[5] = v141;
              _os_log_debug_impl(&dword_1B57BA000, v135, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Done loading server plug-in %s...", (uint8_t *)&cf, 0x22u);
            }
            if (SHIBYTE(v374) < 0)
              operator delete(v373.__vftable);
            goto LABEL_228;
          }
          AMCP::Log::Scope_Registry::get(v63);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
          v102 = (std::__shared_weak_count *)cf.d_seekoff;
          v103 = *(NSObject **)cf.d_ino;
          if (cf.d_seekoff)
          {
            v104 = (unint64_t *)(cf.d_seekoff + 8);
            do
              v105 = __ldaxr(v104);
            while (__stlxr(v105 - 1, v104));
            if (!v105)
            {
              ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
              std::__shared_weak_count::__release_weak(v102);
            }
          }
          if (!os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG))
            goto LABEL_187;
          v106 = pthread_self();
          v107 = pthread_mach_thread_np(v106);
          if (!v360)
          {
            v331 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v331, "Could not construct");
            __cxa_throw(v331, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v108 = v107;
          applesauce::CF::convert_to<std::string,0>((uint64_t)&v373, (const __CFString *)v360);
          v109 = (std::runtime_error_vtbl *)&v373;
          if (SHIBYTE(v374) < 0)
            v109 = v373.__vftable;
          LODWORD(cf.d_ino) = 67109890;
          HIDWORD(cf.d_ino) = v108;
          LOWORD(cf.d_seekoff) = 2080;
          *(__uint64_t *)((char *)&cf.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
          cf.d_namlen = 1024;
          *(_DWORD *)&cf.d_type = 98;
          *(_WORD *)&cf.d_name[3] = 2080;
          *(_QWORD *)&cf.d_name[5] = v109;
          _os_log_debug_impl(&dword_1B57BA000, v103, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Loading server plug-in %s...", (uint8_t *)&cf, 0x22u);
        }
        if (SHIBYTE(v374) < 0)
          operator delete(v373.__vftable);
        goto LABEL_187;
      }
      AMCP::Log::Scope_Registry::get(v50);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)existing, "com.apple.coreaudio", "AMCP");
      v52 = *(_DWORD *)(*(_QWORD *)existing + 16);
      switch(v52)
      {
        case 3:
          AMCP::Log::Scope_Registry::get(v51);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
          v83 = (std::__shared_weak_count *)cf.d_seekoff;
          v84 = *(NSObject **)cf.d_ino;
          if (cf.d_seekoff)
          {
            v85 = (unint64_t *)(cf.d_seekoff + 8);
            do
              v86 = __ldaxr(v85);
            while (__stlxr(v86 - 1, v85));
            if (!v86)
            {
              ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
              std::__shared_weak_count::__release_weak(v83);
            }
          }
          if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
          {
            v87 = pthread_self();
            v88 = pthread_mach_thread_np(v87);
            if (!v360)
            {
              v334 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v334, "Could not construct");
              __cxa_throw(v334, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v89 = v88;
            applesauce::CF::convert_to<std::string,0>((uint64_t)&v373, (const __CFString *)v360);
            v90 = (std::runtime_error_vtbl *)&v373;
            if (SHIBYTE(v374) < 0)
              v90 = v373.__vftable;
            LODWORD(cf.d_ino) = 67109890;
            HIDWORD(cf.d_ino) = v89;
            LOWORD(cf.d_seekoff) = 2080;
            *(__uint64_t *)((char *)&cf.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
            cf.d_namlen = 1024;
            *(_DWORD *)&cf.d_type = 104;
            *(_WORD *)&cf.d_name[3] = 2080;
            *(_QWORD *)&cf.d_name[5] = v90;
            v61 = v84;
            v62 = OS_LOG_TYPE_INFO;
LABEL_149:
            _os_log_impl(&dword_1B57BA000, v61, v62, "%6u %32s:%-5d Evaluating loading conditions for server plug-in %s...", (uint8_t *)&cf, 0x22u);
LABEL_150:
            if (SHIBYTE(v374) < 0)
              operator delete(v373.__vftable);
          }
          break;
        case 2:
          AMCP::Log::Scope_Registry::get(v51);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
          v75 = (std::__shared_weak_count *)cf.d_seekoff;
          v76 = *(NSObject **)cf.d_ino;
          if (cf.d_seekoff)
          {
            v77 = (unint64_t *)(cf.d_seekoff + 8);
            do
              v78 = __ldaxr(v77);
            while (__stlxr(v78 - 1, v77));
            if (!v78)
            {
              ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
              std::__shared_weak_count::__release_weak(v75);
            }
          }
          if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
          {
            v79 = pthread_self();
            v80 = pthread_mach_thread_np(v79);
            if (!v360)
            {
              v329 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v329, "Could not construct");
              __cxa_throw(v329, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v81 = v80;
            applesauce::CF::convert_to<std::string,0>((uint64_t)&v373, (const __CFString *)v360);
            v82 = (std::runtime_error_vtbl *)&v373;
            if (SHIBYTE(v374) < 0)
              v82 = v373.__vftable;
            LODWORD(cf.d_ino) = 67109890;
            HIDWORD(cf.d_ino) = v81;
            LOWORD(cf.d_seekoff) = 2080;
            *(__uint64_t *)((char *)&cf.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
            cf.d_namlen = 1024;
            *(_DWORD *)&cf.d_type = 104;
            *(_WORD *)&cf.d_name[3] = 2080;
            *(_QWORD *)&cf.d_name[5] = v82;
            _os_log_debug_impl(&dword_1B57BA000, v76, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Evaluating loading conditions for server plug-in %s...", (uint8_t *)&cf, 0x22u);
            goto LABEL_150;
          }
          break;
        case 1:
          AMCP::Log::Scope_Registry::get(v51);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
          v53 = (std::__shared_weak_count *)cf.d_seekoff;
          v54 = *(NSObject **)cf.d_ino;
          if (cf.d_seekoff)
          {
            v55 = (unint64_t *)(cf.d_seekoff + 8);
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
          }
          if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
          {
            v57 = pthread_self();
            v58 = pthread_mach_thread_np(v57);
            if (!v360)
            {
              v333 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v333, "Could not construct");
              __cxa_throw(v333, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v59 = v58;
            applesauce::CF::convert_to<std::string,0>((uint64_t)&v373, (const __CFString *)v360);
            v60 = (std::runtime_error_vtbl *)&v373;
            if (SHIBYTE(v374) < 0)
              v60 = v373.__vftable;
            LODWORD(cf.d_ino) = 67109890;
            HIDWORD(cf.d_ino) = v59;
            LOWORD(cf.d_seekoff) = 2080;
            *(__uint64_t *)((char *)&cf.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
            cf.d_namlen = 1024;
            *(_DWORD *)&cf.d_type = 104;
            *(_WORD *)&cf.d_name[3] = 2080;
            *(_QWORD *)&cf.d_name[5] = v60;
            v61 = v54;
            v62 = OS_LOG_TYPE_DEFAULT;
            goto LABEL_149;
          }
          break;
      }
      v91 = (std::__shared_weak_count *)__p[0];
      if (__p[0])
      {
        v92 = (unint64_t *)((char *)__p[0] + 8);
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
      if (!v361[0])
      {
        v350 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v350, "Could not construct");
        __cxa_throw(v350, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*>(&cf, (CFDictionaryRef)v361[0], CFSTR("IOService Matching"));
      d_seekoff_low = LOBYTE(cf.d_seekoff);
      if (!LOBYTE(cf.d_seekoff))
      {
        v100 = 0;
        v101 = 2;
        goto LABEL_243;
      }
      d_ino = (const __CFArray *)cf.d_ino;
      if (cf.d_ino)
      {
        Count = CFArrayGetCount((CFArrayRef)cf.d_ino);
        v97 = Count;
        v98 = cf.d_ino;
        if (cf.d_ino)
        {
          v99 = CFArrayGetCount((CFArrayRef)cf.d_ino);
          if (v97)
            goto LABEL_233;
        }
        else
        {
          v99 = 0;
          if (Count)
          {
LABEL_233:
            v153 = 0;
            while (d_ino != (const __CFArray *)v98 || v99 != v153)
            {
              applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v373, d_ino, v153);
              v154 = v373.__vftable;
              if (v373.__vftable)
                CFRetain(v373.__vftable);
              existing[0] = 0;
              IOServiceGetMatchingServices(*(mach_port_t *)mainPort, (CFDictionaryRef)v154, existing);
              if (existing[0])
              {
                IOObjectRelease(existing[0]);
                if (v373.__vftable)
                  CFRelease(v373.__vftable);
                v100 = 0;
                v101 = 0;
                goto LABEL_243;
              }
              if (v373.__vftable)
                CFRelease(v373.__vftable);
              if (v97 == ++v153)
                break;
            }
          }
        }
      }
      v100 = 1;
      v101 = 1;
LABEL_243:
      v155 = (AMCP::Log::Scope_Registry *)std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
      AMCP::Log::Scope_Registry::get(v155);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)existing, "com.apple.coreaudio", "AMCP");
      v157 = *(_DWORD *)(*(_QWORD *)existing + 16);
      switch(v157)
      {
        case 1:
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v156);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
          v178 = (std::__shared_weak_count *)cf.d_seekoff;
          v179 = *(NSObject **)cf.d_ino;
          if (cf.d_seekoff)
          {
            v180 = (unint64_t *)(cf.d_seekoff + 8);
            do
              v181 = __ldaxr(v180);
            while (__stlxr(v181 - 1, v180));
            if (!v181)
            {
              ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
              std::__shared_weak_count::__release_weak(v178);
            }
          }
          v156 = os_log_type_enabled(v179, OS_LOG_TYPE_DEFAULT);
          if (v156)
          {
            v182 = pthread_self();
            v183 = pthread_mach_thread_np(v182);
            if (!v360)
            {
              v336 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v336, "Could not construct");
              __cxa_throw(v336, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v184 = v183;
            applesauce::CF::convert_to<std::string,0>((uint64_t)&v373, (const __CFString *)v360);
            v185 = (std::runtime_error_vtbl *)&v373;
            if (SHIBYTE(v374) < 0)
              v185 = v373.__vftable;
            v186 = "satisfied";
            if (v100)
              v186 = "not satisfied";
            LODWORD(cf.d_ino) = 67110146;
            if (!d_seekoff_low)
              v186 = "not satisfiable";
            HIDWORD(cf.d_ino) = v184;
            LOWORD(cf.d_seekoff) = 2080;
            *(__uint64_t *)((char *)&cf.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
            cf.d_namlen = 1024;
            *(_DWORD *)&cf.d_type = 106;
            *(_WORD *)&cf.d_name[3] = 2080;
            *(_QWORD *)&cf.d_name[5] = v185;
            *(_WORD *)&cf.d_name[13] = 2080;
            *(_QWORD *)&cf.d_name[15] = v186;
            v167 = v179;
            v168 = OS_LOG_TYPE_DEFAULT;
LABEL_288:
            _os_log_impl(&dword_1B57BA000, v167, v168, "%6u %32s:%-5d Loading conditions for server plug-in %s %s...", (uint8_t *)&cf, 0x2Cu);
LABEL_289:
            if (SHIBYTE(v374) < 0)
              operator delete(v373.__vftable);
          }
          break;
        case 2:
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v156);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
          v169 = (std::__shared_weak_count *)cf.d_seekoff;
          v170 = *(NSObject **)cf.d_ino;
          if (cf.d_seekoff)
          {
            v171 = (unint64_t *)(cf.d_seekoff + 8);
            do
              v172 = __ldaxr(v171);
            while (__stlxr(v172 - 1, v171));
            if (!v172)
            {
              ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
              std::__shared_weak_count::__release_weak(v169);
            }
          }
          v156 = os_log_type_enabled(v170, OS_LOG_TYPE_DEBUG);
          if (v156)
          {
            v173 = pthread_self();
            v174 = pthread_mach_thread_np(v173);
            if (!v360)
            {
              v330 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v330, "Could not construct");
              __cxa_throw(v330, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v175 = v174;
            applesauce::CF::convert_to<std::string,0>((uint64_t)&v373, (const __CFString *)v360);
            v176 = (std::runtime_error_vtbl *)&v373;
            if (SHIBYTE(v374) < 0)
              v176 = v373.__vftable;
            v177 = "satisfied";
            if (v100)
              v177 = "not satisfied";
            LODWORD(cf.d_ino) = 67110146;
            if (!d_seekoff_low)
              v177 = "not satisfiable";
            HIDWORD(cf.d_ino) = v175;
            LOWORD(cf.d_seekoff) = 2080;
            *(__uint64_t *)((char *)&cf.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
            cf.d_namlen = 1024;
            *(_DWORD *)&cf.d_type = 106;
            *(_WORD *)&cf.d_name[3] = 2080;
            *(_QWORD *)&cf.d_name[5] = v176;
            *(_WORD *)&cf.d_name[13] = 2080;
            *(_QWORD *)&cf.d_name[15] = v177;
            _os_log_debug_impl(&dword_1B57BA000, v170, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Loading conditions for server plug-in %s %s...", (uint8_t *)&cf, 0x2Cu);
            goto LABEL_289;
          }
          break;
        case 3:
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v156);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
          v158 = (std::__shared_weak_count *)cf.d_seekoff;
          v159 = *(NSObject **)cf.d_ino;
          if (cf.d_seekoff)
          {
            v160 = (unint64_t *)(cf.d_seekoff + 8);
            do
              v161 = __ldaxr(v160);
            while (__stlxr(v161 - 1, v160));
            if (!v161)
            {
              ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
              std::__shared_weak_count::__release_weak(v158);
            }
          }
          v156 = os_log_type_enabled(v159, OS_LOG_TYPE_INFO);
          if (v156)
          {
            v162 = pthread_self();
            v163 = pthread_mach_thread_np(v162);
            if (!v360)
            {
              v335 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v335, "Could not construct");
              __cxa_throw(v335, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v164 = v163;
            applesauce::CF::convert_to<std::string,0>((uint64_t)&v373, (const __CFString *)v360);
            v165 = (std::runtime_error_vtbl *)&v373;
            if (SHIBYTE(v374) < 0)
              v165 = v373.__vftable;
            v166 = "satisfied";
            if (v100)
              v166 = "not satisfied";
            LODWORD(cf.d_ino) = 67110146;
            if (!d_seekoff_low)
              v166 = "not satisfiable";
            HIDWORD(cf.d_ino) = v164;
            LOWORD(cf.d_seekoff) = 2080;
            *(__uint64_t *)((char *)&cf.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
            cf.d_namlen = 1024;
            *(_DWORD *)&cf.d_type = 106;
            *(_WORD *)&cf.d_name[3] = 2080;
            *(_QWORD *)&cf.d_name[5] = v165;
            *(_WORD *)&cf.d_name[13] = 2080;
            *(_QWORD *)&cf.d_name[15] = v166;
            v167 = v159;
            v168 = OS_LOG_TYPE_INFO;
            goto LABEL_288;
          }
          break;
      }
      v187 = (std::__shared_weak_count *)__p[0];
      if (__p[0])
      {
        v188 = (unint64_t *)((char *)__p[0] + 8);
        do
          v189 = __ldaxr(v188);
        while (__stlxr(v189 - 1, v188));
        if (!v189)
        {
          ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
          std::__shared_weak_count::__release_weak(v187);
        }
      }
      if (v101 != 1)
      {
        if (v101)
          goto LABEL_490;
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v156);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)existing, "com.apple.coreaudio", "AMCP");
        v191 = *(_DWORD *)(*(_QWORD *)existing + 16);
        if (v191 == 1)
        {
          AMCP::Log::Scope_Registry::get(v190);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
          v230 = (std::__shared_weak_count *)cf.d_seekoff;
          v231 = *(NSObject **)cf.d_ino;
          if (cf.d_seekoff)
          {
            v232 = (unint64_t *)(cf.d_seekoff + 8);
            do
              v233 = __ldaxr(v232);
            while (__stlxr(v233 - 1, v232));
            if (!v233)
            {
              ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
              std::__shared_weak_count::__release_weak(v230);
            }
          }
          if (!os_log_type_enabled(v231, OS_LOG_TYPE_DEFAULT))
            goto LABEL_357;
          v234 = pthread_self();
          v235 = pthread_mach_thread_np(v234);
          if (!v360)
          {
            v346 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v346, "Could not construct");
            __cxa_throw(v346, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v236 = v235;
          applesauce::CF::convert_to<std::string,0>((uint64_t)&v373, (const __CFString *)v360);
          v237 = (std::runtime_error_vtbl *)&v373;
          if (SHIBYTE(v374) < 0)
            v237 = v373.__vftable;
          LODWORD(cf.d_ino) = 67109890;
          HIDWORD(cf.d_ino) = v236;
          LOWORD(cf.d_seekoff) = 2080;
          *(__uint64_t *)((char *)&cf.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
          cf.d_namlen = 1024;
          *(_DWORD *)&cf.d_type = 109;
          *(_WORD *)&cf.d_name[3] = 2080;
          *(_QWORD *)&cf.d_name[5] = v237;
          v200 = v231;
          v201 = OS_LOG_TYPE_DEFAULT;
LABEL_354:
          _os_log_impl(&dword_1B57BA000, v200, v201, "%6u %32s:%-5d Loading server plug-in %s...", (uint8_t *)&cf, 0x22u);
        }
        else
        {
          if (v191 != 2)
          {
            if (v191 == 3)
            {
              AMCP::Log::Scope_Registry::get(v190);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
              v192 = (std::__shared_weak_count *)cf.d_seekoff;
              v193 = *(NSObject **)cf.d_ino;
              if (cf.d_seekoff)
              {
                v194 = (unint64_t *)(cf.d_seekoff + 8);
                do
                  v195 = __ldaxr(v194);
                while (__stlxr(v195 - 1, v194));
                if (!v195)
                {
                  ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                  std::__shared_weak_count::__release_weak(v192);
                }
              }
              if (os_log_type_enabled(v193, OS_LOG_TYPE_INFO))
              {
                v196 = pthread_self();
                v197 = pthread_mach_thread_np(v196);
                if (!v360)
                {
                  v344 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v344, "Could not construct");
                  __cxa_throw(v344, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                v198 = v197;
                applesauce::CF::convert_to<std::string,0>((uint64_t)&v373, (const __CFString *)v360);
                v199 = (std::runtime_error_vtbl *)&v373;
                if (SHIBYTE(v374) < 0)
                  v199 = v373.__vftable;
                LODWORD(cf.d_ino) = 67109890;
                HIDWORD(cf.d_ino) = v198;
                LOWORD(cf.d_seekoff) = 2080;
                *(__uint64_t *)((char *)&cf.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
                cf.d_namlen = 1024;
                *(_DWORD *)&cf.d_type = 109;
                *(_WORD *)&cf.d_name[3] = 2080;
                *(_QWORD *)&cf.d_name[5] = v199;
                v200 = v193;
                v201 = OS_LOG_TYPE_INFO;
                goto LABEL_354;
              }
            }
LABEL_357:
            v238 = (std::__shared_weak_count *)__p[0];
            if (__p[0])
            {
              v239 = (unint64_t *)((char *)__p[0] + 8);
              do
                v240 = __ldaxr(v239);
              while (__stlxr(v240 - 1, v239));
              if (!v240)
              {
                ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
                std::__shared_weak_count::__release_weak(v238);
              }
            }
            AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::load_driver((uint64_t)v358, j);
            AMCP::Log::Scope_Registry::get(v241);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)existing, "com.apple.coreaudio", "AMCP");
            v243 = *(_DWORD *)(*(_QWORD *)existing + 16);
            if (v243 == 1)
            {
              AMCP::Log::Scope_Registry::get(v242);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
              v304 = (std::__shared_weak_count *)cf.d_seekoff;
              v305 = *(NSObject **)cf.d_ino;
              if (cf.d_seekoff)
              {
                v306 = (unint64_t *)(cf.d_seekoff + 8);
                do
                  v307 = __ldaxr(v306);
                while (__stlxr(v307 - 1, v306));
                if (!v307)
                {
                  ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
                  std::__shared_weak_count::__release_weak(v304);
                }
              }
              if (!os_log_type_enabled(v305, OS_LOG_TYPE_DEFAULT))
                goto LABEL_485;
              v308 = pthread_self();
              v309 = pthread_mach_thread_np(v308);
              if (!v360)
              {
                v349 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v349, "Could not construct");
                __cxa_throw(v349, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              v310 = v309;
              applesauce::CF::convert_to<std::string,0>((uint64_t)&v373, (const __CFString *)v360);
              v311 = (std::runtime_error_vtbl *)&v373;
              if (SHIBYTE(v374) < 0)
                v311 = v373.__vftable;
              LODWORD(cf.d_ino) = 67109890;
              HIDWORD(cf.d_ino) = v310;
              LOWORD(cf.d_seekoff) = 2080;
              *(__uint64_t *)((char *)&cf.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
              cf.d_namlen = 1024;
              *(_DWORD *)&cf.d_type = 111;
              *(_WORD *)&cf.d_name[3] = 2080;
              *(_QWORD *)&cf.d_name[5] = v311;
              v252 = v305;
              v253 = OS_LOG_TYPE_DEFAULT;
LABEL_482:
              _os_log_impl(&dword_1B57BA000, v252, v253, "%6u %32s:%-5d Done loading server plug-in %s...", (uint8_t *)&cf, 0x22u);
            }
            else
            {
              if (v243 != 2)
              {
                if (v243 == 3)
                {
                  AMCP::Log::Scope_Registry::get(v242);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                  v244 = (std::__shared_weak_count *)cf.d_seekoff;
                  v245 = *(NSObject **)cf.d_ino;
                  if (cf.d_seekoff)
                  {
                    v246 = (unint64_t *)(cf.d_seekoff + 8);
                    do
                      v247 = __ldaxr(v246);
                    while (__stlxr(v247 - 1, v246));
                    if (!v247)
                    {
                      ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
                      std::__shared_weak_count::__release_weak(v244);
                    }
                  }
                  if (os_log_type_enabled(v245, OS_LOG_TYPE_INFO))
                  {
                    v248 = pthread_self();
                    v249 = pthread_mach_thread_np(v248);
                    if (!v360)
                    {
                      v347 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v347, "Could not construct");
                      __cxa_throw(v347, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                    }
                    v250 = v249;
                    applesauce::CF::convert_to<std::string,0>((uint64_t)&v373, (const __CFString *)v360);
                    v251 = (std::runtime_error_vtbl *)&v373;
                    if (SHIBYTE(v374) < 0)
                      v251 = v373.__vftable;
                    LODWORD(cf.d_ino) = 67109890;
                    HIDWORD(cf.d_ino) = v250;
                    LOWORD(cf.d_seekoff) = 2080;
                    *(__uint64_t *)((char *)&cf.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
                    cf.d_namlen = 1024;
                    *(_DWORD *)&cf.d_type = 111;
                    *(_WORD *)&cf.d_name[3] = 2080;
                    *(_QWORD *)&cf.d_name[5] = v251;
                    v252 = v245;
                    v253 = OS_LOG_TYPE_INFO;
                    goto LABEL_482;
                  }
                }
LABEL_485:
                v150 = (std::__shared_weak_count *)__p[0];
                if (!__p[0])
                  goto LABEL_490;
                v312 = (unint64_t *)((char *)__p[0] + 8);
                do
                  v152 = __ldaxr(v312);
                while (__stlxr(v152 - 1, v312));
                goto LABEL_488;
              }
              AMCP::Log::Scope_Registry::get(v242);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
              v296 = (std::__shared_weak_count *)cf.d_seekoff;
              v297 = *(NSObject **)cf.d_ino;
              if (cf.d_seekoff)
              {
                v298 = (unint64_t *)(cf.d_seekoff + 8);
                do
                  v299 = __ldaxr(v298);
                while (__stlxr(v299 - 1, v298));
                if (!v299)
                {
                  ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
                  std::__shared_weak_count::__release_weak(v296);
                }
              }
              if (!os_log_type_enabled(v297, OS_LOG_TYPE_DEBUG))
                goto LABEL_485;
              v300 = pthread_self();
              v301 = pthread_mach_thread_np(v300);
              if (!v360)
              {
                v339 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v339, "Could not construct");
                __cxa_throw(v339, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              v302 = v301;
              applesauce::CF::convert_to<std::string,0>((uint64_t)&v373, (const __CFString *)v360);
              v303 = (std::runtime_error_vtbl *)&v373;
              if (SHIBYTE(v374) < 0)
                v303 = v373.__vftable;
              LODWORD(cf.d_ino) = 67109890;
              HIDWORD(cf.d_ino) = v302;
              LOWORD(cf.d_seekoff) = 2080;
              *(__uint64_t *)((char *)&cf.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
              cf.d_namlen = 1024;
              *(_DWORD *)&cf.d_type = 111;
              *(_WORD *)&cf.d_name[3] = 2080;
              *(_QWORD *)&cf.d_name[5] = v303;
              _os_log_debug_impl(&dword_1B57BA000, v297, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Done loading server plug-in %s...", (uint8_t *)&cf, 0x22u);
            }
            if (SHIBYTE(v374) < 0)
              operator delete(v373.__vftable);
            goto LABEL_485;
          }
          AMCP::Log::Scope_Registry::get(v190);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
          v214 = (std::__shared_weak_count *)cf.d_seekoff;
          v215 = *(NSObject **)cf.d_ino;
          if (cf.d_seekoff)
          {
            v216 = (unint64_t *)(cf.d_seekoff + 8);
            do
              v217 = __ldaxr(v216);
            while (__stlxr(v217 - 1, v216));
            if (!v217)
            {
              ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
              std::__shared_weak_count::__release_weak(v214);
            }
          }
          if (!os_log_type_enabled(v215, OS_LOG_TYPE_DEBUG))
            goto LABEL_357;
          v218 = pthread_self();
          v219 = pthread_mach_thread_np(v218);
          if (!v360)
          {
            v337 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v337, "Could not construct");
            __cxa_throw(v337, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v220 = v219;
          applesauce::CF::convert_to<std::string,0>((uint64_t)&v373, (const __CFString *)v360);
          v221 = (std::runtime_error_vtbl *)&v373;
          if (SHIBYTE(v374) < 0)
            v221 = v373.__vftable;
          LODWORD(cf.d_ino) = 67109890;
          HIDWORD(cf.d_ino) = v220;
          LOWORD(cf.d_seekoff) = 2080;
          *(__uint64_t *)((char *)&cf.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
          cf.d_namlen = 1024;
          *(_DWORD *)&cf.d_type = 109;
          *(_WORD *)&cf.d_name[3] = 2080;
          *(_QWORD *)&cf.d_name[5] = v221;
          _os_log_debug_impl(&dword_1B57BA000, v215, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Loading server plug-in %s...", (uint8_t *)&cf, 0x22u);
        }
        if (SHIBYTE(v374) < 0)
          operator delete(v373.__vftable);
        goto LABEL_357;
      }
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v156);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)existing, "com.apple.coreaudio", "AMCP");
      v203 = *(_DWORD *)(*(_QWORD *)existing + 16);
      switch(v203)
      {
        case 3:
          AMCP::Log::Scope_Registry::get(v202);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
          v254 = (std::__shared_weak_count *)cf.d_seekoff;
          v255 = *(NSObject **)cf.d_ino;
          if (cf.d_seekoff)
          {
            v256 = (unint64_t *)(cf.d_seekoff + 8);
            do
              v257 = __ldaxr(v256);
            while (__stlxr(v257 - 1, v256));
            if (!v257)
            {
              ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
              std::__shared_weak_count::__release_weak(v254);
            }
          }
          if (!os_log_type_enabled(v255, OS_LOG_TYPE_INFO))
            goto LABEL_388;
          v258 = pthread_self();
          v259 = pthread_mach_thread_np(v258);
          if (!v360)
          {
            v348 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v348, "Could not construct");
            __cxa_throw(v348, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v260 = v259;
          applesauce::CF::convert_to<std::string,0>((uint64_t)&v373, (const __CFString *)v360);
          v261 = (std::runtime_error_vtbl *)&v373;
          if (SHIBYTE(v374) < 0)
            v261 = v373.__vftable;
          LODWORD(cf.d_ino) = 67109890;
          HIDWORD(cf.d_ino) = v260;
          LOWORD(cf.d_seekoff) = 2080;
          *(__uint64_t *)((char *)&cf.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
          cf.d_namlen = 1024;
          *(_DWORD *)&cf.d_type = 115;
          *(_WORD *)&cf.d_name[3] = 2080;
          *(_QWORD *)&cf.d_name[5] = v261;
          v212 = v255;
          v213 = OS_LOG_TYPE_INFO;
          break;
        case 2:
          AMCP::Log::Scope_Registry::get(v202);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
          v222 = (std::__shared_weak_count *)cf.d_seekoff;
          v223 = *(NSObject **)cf.d_ino;
          if (cf.d_seekoff)
          {
            v224 = (unint64_t *)(cf.d_seekoff + 8);
            do
              v225 = __ldaxr(v224);
            while (__stlxr(v225 - 1, v224));
            if (!v225)
            {
              ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
              std::__shared_weak_count::__release_weak(v222);
            }
          }
          if (!os_log_type_enabled(v223, OS_LOG_TYPE_DEBUG))
            goto LABEL_388;
          v226 = pthread_self();
          v227 = pthread_mach_thread_np(v226);
          if (!v360)
          {
            v338 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v338, "Could not construct");
            __cxa_throw(v338, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v228 = v227;
          applesauce::CF::convert_to<std::string,0>((uint64_t)&v373, (const __CFString *)v360);
          v229 = (std::runtime_error_vtbl *)&v373;
          if (SHIBYTE(v374) < 0)
            v229 = v373.__vftable;
          LODWORD(cf.d_ino) = 67109890;
          HIDWORD(cf.d_ino) = v228;
          LOWORD(cf.d_seekoff) = 2080;
          *(__uint64_t *)((char *)&cf.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
          cf.d_namlen = 1024;
          *(_DWORD *)&cf.d_type = 115;
          *(_WORD *)&cf.d_name[3] = 2080;
          *(_QWORD *)&cf.d_name[5] = v229;
          _os_log_debug_impl(&dword_1B57BA000, v223, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Deferring loading server plug-in %s...", (uint8_t *)&cf, 0x22u);
          goto LABEL_386;
        case 1:
          AMCP::Log::Scope_Registry::get(v202);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
          v204 = (std::__shared_weak_count *)cf.d_seekoff;
          v205 = *(NSObject **)cf.d_ino;
          if (cf.d_seekoff)
          {
            v206 = (unint64_t *)(cf.d_seekoff + 8);
            do
              v207 = __ldaxr(v206);
            while (__stlxr(v207 - 1, v206));
            if (!v207)
            {
              ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
              std::__shared_weak_count::__release_weak(v204);
            }
          }
          if (!os_log_type_enabled(v205, OS_LOG_TYPE_DEFAULT))
            goto LABEL_388;
          v208 = pthread_self();
          v209 = pthread_mach_thread_np(v208);
          if (!v360)
          {
            v345 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v345, "Could not construct");
            __cxa_throw(v345, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v210 = v209;
          applesauce::CF::convert_to<std::string,0>((uint64_t)&v373, (const __CFString *)v360);
          v211 = (std::runtime_error_vtbl *)&v373;
          if (SHIBYTE(v374) < 0)
            v211 = v373.__vftable;
          LODWORD(cf.d_ino) = 67109890;
          HIDWORD(cf.d_ino) = v210;
          LOWORD(cf.d_seekoff) = 2080;
          *(__uint64_t *)((char *)&cf.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
          cf.d_namlen = 1024;
          *(_DWORD *)&cf.d_type = 115;
          *(_WORD *)&cf.d_name[3] = 2080;
          *(_QWORD *)&cf.d_name[5] = v211;
          v212 = v205;
          v213 = OS_LOG_TYPE_DEFAULT;
          break;
        default:
          goto LABEL_388;
      }
      _os_log_impl(&dword_1B57BA000, v212, v213, "%6u %32s:%-5d Deferring loading server plug-in %s...", (uint8_t *)&cf, 0x22u);
LABEL_386:
      if (SHIBYTE(v374) < 0)
        operator delete(v373.__vftable);
LABEL_388:
      v262 = (std::__shared_weak_count *)__p[0];
      if (__p[0])
      {
        v263 = (unint64_t *)((char *)__p[0] + 8);
        do
          v264 = __ldaxr(v263);
        while (__stlxr(v264 - 1, v263));
        if (!v264)
        {
          ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
          std::__shared_weak_count::__release_weak(v262);
        }
      }
      v265 = v360;
      if (v360)
        CFRetain(v360);
      if (!v361[0])
      {
        v351 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v351, "Could not construct");
        __cxa_throw(v351, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v266 = CFArrayCreate(0, 0, 0, MEMORY[0x1E0C9B380]);
      applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&cf, v266);
      applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&theArray, (const __CFDictionary *)v361[0], CFSTR("IOService Matching"), &cf);
      if (cf.d_ino)
        CFRelease((CFTypeRef)cf.d_ino);
      v267 = theArray;
      if (!theArray)
        goto LABEL_460;
      v268 = CFArrayGetCount(theArray);
      v269 = CFArrayGetCount(v267);
      if (!v268)
        goto LABEL_459;
      v270 = v269;
      v271 = 0;
      while (v271 != v270)
      {
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v367, v267, v271);
        AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&cf, *(dispatch_object_t *)(*(_QWORD *)(*((_QWORD *)v358 + 4) + 32) + 352));
        v272 = *j;
        if (*j)
          CFRetain(*j);
        if (v265)
          CFRetain(v265);
        v273 = operator new();
        v274 = cf.d_ino;
        v363.__vftable = (std::runtime_error_vtbl *)cf.d_ino;
        cf.d_ino = 0;
        v275 = v367;
        if (v367)
          CFRetain(v367);
        v372 = v275;
        *(_QWORD *)existing = v358;
        if (v272)
          CFRetain(v272);
        __p[0] = v272;
        if (v265)
          CFRetain(v265);
        __p[1] = (void *)v265;
        LODWORD(v371) = *(_DWORD *)&mainPort[4];
        v375 = 0;
        v276 = (std::runtime_error *)operator new(0x28uLL);
        v276->__vftable = (std::runtime_error_vtbl *)&off_1E696FCF0;
        v276->__imp_.__imp_ = v358;
        if (v272)
          CFRetain(v272);
        v276[1].__vftable = (std::runtime_error_vtbl *)v272;
        if (v265)
          CFRetain(v265);
        v276[1].__imp_.__imp_ = (const char *)v265;
        LODWORD(v276[2].__vftable) = *(_DWORD *)&mainPort[4];
        v375 = v276;
        applesauce::iokit::io_service_factory::io_service_factory(v273, (NSObject **)&v363, (const __CFDictionary **)&v372, "IOServiceFirstPublish", (uint64_t)&v373);
        v277 = v375;
        if (v375 == &v373)
        {
          v277 = &v373;
          v278 = 4;
        }
        else
        {
          if (!v375)
            goto LABEL_421;
          v278 = 5;
        }
        (*((void (**)(void))&v277->~runtime_error + v278))();
LABEL_421:
        if (v265)
          CFRelease(v265);
        if (v272)
          CFRelease(v272);
        if (v372)
          CFRelease(v372);
        if (v274)
          dispatch_release(v274);
        if (v265)
          CFRelease(v265);
        if (v272)
          CFRelease(v272);
        AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&cf);
        v279 = (_QWORD *)*((_QWORD *)v358 + 7);
        v280 = *((_QWORD *)v358 + 8);
        if ((unint64_t)v279 >= v280)
        {
          v283 = *((_QWORD *)v358 + 6);
          v284 = ((uint64_t)v279 - v283) >> 4;
          if ((unint64_t)(v284 + 1) >> 60)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v285 = v280 - v283;
          v286 = v285 >> 3;
          if (v285 >> 3 <= (unint64_t)(v284 + 1))
            v286 = v284 + 1;
          if ((unint64_t)v285 >= 0x7FFFFFFFFFFFFFF0)
            v287 = 0xFFFFFFFFFFFFFFFLL;
          else
            v287 = v286;
          if (v287)
          {
            if (v287 >> 60)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v288 = operator new(16 * v287);
          }
          else
          {
            v288 = 0;
          }
          v289 = (char *)&v288[2 * v287];
          v290 = std::__tuple_leaf<0ul,applesauce::CF::StringRef,false>::__tuple_leaf[abi:ne180100]<applesauce::CF::StringRef const&,void>(&v288[2 * v284], v265);
          v290[1] = v273;
          v282 = v290 + 2;
          v291 = (_QWORD *)*((_QWORD *)v358 + 6);
          v292 = (_QWORD *)*((_QWORD *)v358 + 7);
          if (v292 == v291)
          {
            *((_QWORD *)v358 + 6) = v290;
            *((_QWORD *)v358 + 7) = v282;
            *((_QWORD *)v358 + 8) = v289;
            if (!v292)
              goto LABEL_452;
          }
          else
          {
            do
            {
              v293 = *(v292 - 2);
              v292 -= 2;
              *(v290 - 2) = v293;
              v290 -= 2;
              v294 = v292[1];
              *v292 = 0;
              v292[1] = 0;
              v290[1] = v294;
            }
            while (v292 != v291);
            v295 = (_QWORD *)*((_QWORD *)v358 + 6);
            v292 = (_QWORD *)*((_QWORD *)v358 + 7);
            *((_QWORD *)v358 + 6) = v290;
            *((_QWORD *)v358 + 7) = v282;
            *((_QWORD *)v358 + 8) = v289;
            if (v292 != v295)
            {
              do
              {
                v292 -= 2;
                std::__destroy_at[abi:ne180100]<std::tuple<applesauce::CF::StringRef,std::unique_ptr<applesauce::iokit::io_service_factory>>,0>((uint64_t)v292);
              }
              while (v292 != v295);
              v292 = v295;
            }
            if (!v292)
              goto LABEL_452;
          }
          operator delete(v292);
        }
        else
        {
          v281 = std::__tuple_leaf<0ul,applesauce::CF::StringRef,false>::__tuple_leaf[abi:ne180100]<applesauce::CF::StringRef const&,void>(v279, v265);
          v281[1] = v273;
          v282 = v281 + 2;
        }
LABEL_452:
        *((_QWORD *)v358 + 7) = v282;
        if (v367)
          CFRelease(v367);
        if (++v271 == v268)
          break;
      }
      v267 = theArray;
      if (theArray)
LABEL_459:
        CFRelease(v267);
LABEL_460:
      if (v265)
        CFRelease(v265);
LABEL_490:
      std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v361);
      if (v359)
        CFRelease(v359);
LABEL_492:
      if (v360)
        CFRelease(v360);
      if (v364)
        CFRelease(v364);
      v37 = v357;
    }
    cf.d_ino = (__uint64_t)&v365;
    std::vector<applesauce::CF::URLRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
    ++*(_QWORD *)&mainPort[4];
  }
  while (*(_QWORD *)&mainPort[4] != 3);
}

void sub_1B588D52C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::vector<applesauce::CF::URLRef>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  const void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (const void *)*((_QWORD *)v4 - 1);
        v4 -= 8;
        std::__destroy_at[abi:ne180100]<applesauce::CF::URLRef,0>(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

applesauce::CF::DictionaryRef *mcp_applesauce::CF::BundleRef_proxy::get_info_dictionary(applesauce::CF::DictionaryRef *this, __CFBundle *a2)
{
  applesauce::CF::DictionaryRef *v2;
  CFDictionaryRef InfoDictionary;
  CFDictionaryRef v4;

  v2 = this;
  if (a2)
  {
    InfoDictionary = CFBundleGetInfoDictionary(a2);
    v4 = InfoDictionary;
    if (InfoDictionary)
      CFRetain(InfoDictionary);
    return applesauce::CF::DictionaryRef::DictionaryRef(v2, v4);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,__CFString const*>(_BYTE *a1, CFDictionaryRef theDict, const void *a3)
{
  const void *v4;
  const void *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<__CFString const*>(theDict, a3);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFDictionaryGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = v5;
  v7 = 1;
LABEL_6:
  a1[8] = v7;
}

void AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::load_driver(uint64_t a1, const applesauce::CF::URLRef **a2)
{
  __int128 v3;
  char **v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  CFDictionaryRef v15;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count **v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  char *v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  int64x2_t v41;
  char *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  int64x2_t v48;
  char *v49;
  _QWORD *v50;

  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(char ***)(*(_QWORD *)(a1 + 32) + 48);
  v46 = v3;
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (*((_QWORD *)&v3 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v3 + 1) + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (char *)operator new(0x138uLL);
  v9 = (std::__shared_weak_count *)v8;
  *((_QWORD *)v8 + 1) = 0;
  v10 = (unint64_t *)(v8 + 8);
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E696FCA0;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 56) = v46;
  *((_QWORD *)v8 + 3) = &off_1E6985DF0;
  *((_QWORD *)v8 + 4) = 0;
  *((_QWORD *)v8 + 5) = 0;
  *((_QWORD *)v8 + 6) = &unk_1E6985E18;
  *(_OWORD *)(v8 + 88) = 0u;
  *((_QWORD *)v8 + 13) = 0;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)(v8 + 112));
  v13 = (_QWORD *)operator new();
  *v13 = AMCP::ASP::Host_Interface::properties_changed;
  v13[1] = AMCP::ASP::Host_Interface::copy_from_storage;
  v14 = v9 + 1;
  v13[2] = AMCP::ASP::Host_Interface::write_to_storage;
  v13[3] = AMCP::ASP::Host_Interface::delete_from_storage;
  v13[4] = AMCP::ASP::Host_Interface::request_device_configuration_change;
  v13[5] = v9 + 1;
  v9[11].__shared_weak_owners_ = (uint64_t)v13;
  LODWORD(v9[12].__vftable) = 0;
  v15 = CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v9[12].__shared_owners_, v15);
  LODWORD(v9[12].__shared_weak_owners_) = 0;
  shared_weak_owners = (std::__shared_weak_count *)v9[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_20;
    do
      v17 = __ldxr(v10);
    while (__stxr(v17 + 1, v10));
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v19 = __ldxr(p_shared_weak_owners);
    while (__stxr(v19 + 1, p_shared_weak_owners));
    v9[1].__shared_owners_ = (uint64_t)v14;
    v9[1].__shared_weak_owners_ = (uint64_t)v9;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v20 = __ldxr(v10);
    while (__stxr(v20 + 1, v10));
    v21 = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    v9[1].__shared_owners_ = (uint64_t)v14;
    v9[1].__shared_weak_owners_ = (uint64_t)v9;
  }
  do
    v23 = __ldaxr(v10);
  while (__stlxr(v23 - 1, v10));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_20:
  AMCP::ASP::Driver::start((AMCP::ASP::Driver *)&v9[1], *a2);
  v24 = (unint64_t)v4[2];
  v25 = (std::__shared_weak_count **)v4[1];
  if ((unint64_t)v25 >= v24)
  {
    v28 = ((char *)v25 - *v4) >> 4;
    v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 60)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v30 = v24 - (_QWORD)*v4;
    if (v30 >> 3 > v29)
      v29 = v30 >> 3;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
      v31 = 0xFFFFFFFFFFFFFFFLL;
    else
      v31 = v29;
    v50 = v4 + 2;
    v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v31);
    *(_QWORD *)&v34 = v9 + 1;
    *((_QWORD *)&v34 + 1) = v9;
    v35 = &v32[16 * v28];
    *(_OWORD *)v35 = v34;
    do
      v36 = __ldxr(v10);
    while (__stxr(v36 + 1, v10));
    v38 = *v4;
    v37 = v4[1];
    if (v37 == *v4)
    {
      v41 = vdupq_n_s64((unint64_t)v37);
      v39 = &v32[16 * v28];
    }
    else
    {
      v39 = &v32[16 * v28];
      do
      {
        v40 = *((_OWORD *)v37 - 1);
        v37 -= 16;
        *((_OWORD *)v39 - 1) = v40;
        v39 -= 16;
        *(_QWORD *)v37 = 0;
        *((_QWORD *)v37 + 1) = 0;
      }
      while (v37 != v38);
      v41 = *(int64x2_t *)v4;
    }
    v27 = v35 + 16;
    *v4 = v39;
    v4[1] = v35 + 16;
    v48 = v41;
    v42 = v4[2];
    v4[2] = &v32[16 * v33];
    v49 = v42;
    v47 = v41.i64[0];
    std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v47);
  }
  else
  {
    *v25 = v14;
    v25[1] = v9;
    do
      v26 = __ldxr(v10);
    while (__stxr(v26 + 1, v10));
    v27 = (char *)(v25 + 2);
  }
  v4[1] = v27;
  do
    v43 = __ldaxr(v10);
  while (__stlxr(v43 - 1, v10));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (v5)
  {
    v44 = (unint64_t *)&v5->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1B588DB7C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::mutex *v4;
  std::__shared_weak_count *v6;
  void *v7;

  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 224));
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 176));
  std::mutex::~mutex(v4);
  boost::container::vector<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>,void>::~vector(v1 + 88);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v3);
  *(_QWORD *)(v1 + 48) = &off_1E697FC58;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
  v6 = *(std::__shared_weak_count **)(v1 + 40);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v7);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B588DB20);
}

uint64_t applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(_QWORD *a1, const __CFDictionary *a2, const void *a3, _QWORD *a4)
{
  CFTypeRef v6;
  CFTypeRef cf;
  char v9;

  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*>(&cf, a2, a3);
  if (v9)
  {
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a1 = v6;
  }
  else
  {
    *a1 = *a4;
    *a4 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

_QWORD *std::__tuple_leaf<0ul,applesauce::CF::StringRef,false>::__tuple_leaf[abi:ne180100]<applesauce::CF::StringRef const&,void>(_QWORD *a1, CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  *a1 = cf;
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::tuple<applesauce::CF::StringRef,std::unique_ptr<applesauce::iokit::io_service_factory>>,0>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    std::default_delete<applesauce::iokit::io_service_factory>::operator()[abi:ne180100](v2);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
}

uint64_t AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1}::~io_object_holder(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 8);
  if (v3)
    CFRelease(v3);
  return a1;
}

_QWORD *std::__function::__func<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1},std::allocator<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1}>,void ()(applesauce::iokit::io_object_holder)>::~__func(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  *a1 = &off_1E696FCF0;
  v2 = (const void *)a1[3];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[2];
  if (v3)
    CFRelease(v3);
  return a1;
}

void std::__function::__func<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1},std::allocator<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1}>,void ()(applesauce::iokit::io_object_holder)>::~__func(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  *a1 = &off_1E696FCF0;
  v2 = (const void *)a1[3];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[2];
  if (v3)
    CFRelease(v3);
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1},std::allocator<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1}>,void ()(applesauce::iokit::io_object_holder)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E696FCF0;
  std::__compressed_pair_elem<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1},0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1} const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1},std::allocator<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1}>,void ()(applesauce::iokit::io_object_holder)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E696FCF0;
  return std::__compressed_pair_elem<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1},0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1} const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1},std::allocator<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1}>,void ()(applesauce::iokit::io_object_holder)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1},std::allocator<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1}>,void ()(applesauce::iokit::io_object_holder)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1},std::allocator<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1}>,void ()(applesauce::iokit::io_object_holder)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1},std::allocator<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1}>,void ()(applesauce::iokit::io_object_holder)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1},std::allocator<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1}>,void ()(applesauce::iokit::io_object_holder)>::operator()(uint64_t a1, io_object_t *a2)
{
  io_object_t v3;
  uint64_t v4;
  _BOOL8 v5;
  int v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *v9;
  unint64_t v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  const __CFString *v13;
  mach_port_t v14;
  void **v15;
  NSObject *v16;
  os_log_type_t v17;
  std::__shared_weak_count *v18;
  NSObject *v19;
  unint64_t *v20;
  unint64_t v21;
  _opaque_pthread_t *v22;
  mach_port_t v23;
  const __CFString *v24;
  mach_port_t v25;
  void **v26;
  std::__shared_weak_count *v27;
  NSObject *v28;
  unint64_t *v29;
  unint64_t v30;
  _opaque_pthread_t *v31;
  mach_port_t v32;
  const __CFString *v33;
  mach_port_t v34;
  void **v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  AMCP::Log::Scope_Registry *v39;
  int v40;
  std::__shared_weak_count *v41;
  NSObject *v42;
  unint64_t *v43;
  unint64_t v44;
  _opaque_pthread_t *v45;
  mach_port_t v46;
  const __CFString *v47;
  mach_port_t v48;
  void **v49;
  NSObject *v50;
  os_log_type_t v51;
  std::__shared_weak_count *v52;
  NSObject *v53;
  unint64_t *v54;
  unint64_t v55;
  _opaque_pthread_t *v56;
  mach_port_t v57;
  const __CFString *v58;
  mach_port_t v59;
  void **v60;
  std::__shared_weak_count *v61;
  NSObject *v62;
  unint64_t *v63;
  unint64_t v64;
  _opaque_pthread_t *v65;
  mach_port_t v66;
  const __CFString *v67;
  mach_port_t v68;
  void **v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  AMCP::Log::Scope_Registry *v73;
  AMCP::Log::Scope_Registry *v74;
  int v75;
  std::__shared_weak_count *v76;
  NSObject *v77;
  unint64_t *v78;
  unint64_t v79;
  _opaque_pthread_t *v80;
  mach_port_t v81;
  const __CFString *v82;
  mach_port_t v83;
  void **v84;
  NSObject *v85;
  os_log_type_t v86;
  std::__shared_weak_count *v87;
  NSObject *v88;
  unint64_t *v89;
  unint64_t v90;
  _opaque_pthread_t *v91;
  mach_port_t v92;
  const __CFString *v93;
  mach_port_t v94;
  void **v95;
  std::__shared_weak_count *v96;
  NSObject *v97;
  unint64_t *v98;
  unint64_t v99;
  _opaque_pthread_t *v100;
  mach_port_t v101;
  const __CFString *v102;
  mach_port_t v103;
  void **v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  const __CFString **v110;
  uint64_t i;
  const __CFString *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  std::runtime_error *v116;
  std::runtime_error *v117;
  std::runtime_error *v118;
  std::runtime_error *exception;
  std::runtime_error *v120;
  std::runtime_error *v121;
  std::runtime_error *v122;
  std::runtime_error *v123;
  std::runtime_error *v124;
  void *__p[2];
  char v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  uint8_t buf[8];
  _BYTE v130[10];
  __int16 v131;
  int v132;
  __int16 v133;
  void **v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  *a2 = 0;
  v4 = *(_QWORD *)(a1 + 8);
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v127, "com.apple.coreaudio", "AMCP");
  v6 = *(_DWORD *)(v127 + 16);
  switch(v6)
  {
    case 3:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v27 = *(std::__shared_weak_count **)v130;
      v28 = **(NSObject ***)buf;
      if (*(_QWORD *)v130)
      {
        v29 = (unint64_t *)(*(_QWORD *)v130 + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v5 = os_log_type_enabled(v28, OS_LOG_TYPE_INFO);
      if (v5)
      {
        v31 = pthread_self();
        v32 = pthread_mach_thread_np(v31);
        v33 = *(const __CFString **)(a1 + 24);
        if (!v33)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v34 = v32;
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v33);
        if (v126 >= 0)
          v35 = __p;
        else
          v35 = (void **)__p[0];
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v34;
        *(_WORD *)v130 = 2080;
        *(_QWORD *)&v130[2] = "ASP_Loader.h";
        v131 = 1024;
        v132 = 149;
        v133 = 2080;
        v134 = v35;
        v16 = v28;
        v17 = OS_LOG_TYPE_INFO;
        goto LABEL_37;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v18 = *(std::__shared_weak_count **)v130;
      v19 = **(NSObject ***)buf;
      if (*(_QWORD *)v130)
      {
        v20 = (unint64_t *)(*(_QWORD *)v130 + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v5 = os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG);
      if (v5)
      {
        v22 = pthread_self();
        v23 = pthread_mach_thread_np(v22);
        v24 = *(const __CFString **)(a1 + 24);
        if (!v24)
        {
          v116 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v116, "Could not construct");
          __cxa_throw(v116, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v25 = v23;
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v24);
        if (v126 >= 0)
          v26 = __p;
        else
          v26 = (void **)__p[0];
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v25;
        *(_WORD *)v130 = 2080;
        *(_QWORD *)&v130[2] = "ASP_Loader.h";
        v131 = 1024;
        v132 = 149;
        v133 = 2080;
        v134 = v26;
        _os_log_debug_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Loading conditions for server plug-in %s finally satisfied...", buf, 0x22u);
        goto LABEL_38;
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v7 = *(std::__shared_weak_count **)v130;
      v8 = **(NSObject ***)buf;
      if (*(_QWORD *)v130)
      {
        v9 = (unint64_t *)(*(_QWORD *)v130 + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      if (v5)
      {
        v11 = pthread_self();
        v12 = pthread_mach_thread_np(v11);
        v13 = *(const __CFString **)(a1 + 24);
        if (!v13)
        {
          v120 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v120, "Could not construct");
          __cxa_throw(v120, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v14 = v12;
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v13);
        if (v126 >= 0)
          v15 = __p;
        else
          v15 = (void **)__p[0];
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v14;
        *(_WORD *)v130 = 2080;
        *(_QWORD *)&v130[2] = "ASP_Loader.h";
        v131 = 1024;
        v132 = 149;
        v133 = 2080;
        v134 = v15;
        v16 = v8;
        v17 = OS_LOG_TYPE_DEFAULT;
LABEL_37:
        _os_log_impl(&dword_1B57BA000, v16, v17, "%6u %32s:%-5d Loading conditions for server plug-in %s finally satisfied...", buf, 0x22u);
LABEL_38:
        if (v126 < 0)
          operator delete(__p[0]);
      }
      break;
  }
  v36 = v128;
  if (v128)
  {
    p_shared_owners = (unint64_t *)&v128->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v127, "com.apple.coreaudio", "AMCP");
  v40 = *(_DWORD *)(v127 + 16);
  switch(v40)
  {
    case 1:
      AMCP::Log::Scope_Registry::get(v39);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v61 = *(std::__shared_weak_count **)v130;
      v62 = **(NSObject ***)buf;
      if (*(_QWORD *)v130)
      {
        v63 = (unint64_t *)(*(_QWORD *)v130 + 8);
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
      {
        v65 = pthread_self();
        v66 = pthread_mach_thread_np(v65);
        v67 = *(const __CFString **)(a1 + 24);
        if (!v67)
        {
          v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v121, "Could not construct");
          __cxa_throw(v121, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v68 = v66;
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v67);
        if (v126 >= 0)
          v69 = __p;
        else
          v69 = (void **)__p[0];
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v68;
        *(_WORD *)v130 = 2080;
        *(_QWORD *)&v130[2] = "ASP_Loader.h";
        v131 = 1024;
        v132 = 150;
        v133 = 2080;
        v134 = v69;
        v50 = v62;
        v51 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_81;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v39);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v52 = *(std::__shared_weak_count **)v130;
      v53 = **(NSObject ***)buf;
      if (*(_QWORD *)v130)
      {
        v54 = (unint64_t *)(*(_QWORD *)v130 + 8);
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
      {
        v56 = pthread_self();
        v57 = pthread_mach_thread_np(v56);
        v58 = *(const __CFString **)(a1 + 24);
        if (!v58)
        {
          v117 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v117, "Could not construct");
          __cxa_throw(v117, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v59 = v57;
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v58);
        if (v126 >= 0)
          v60 = __p;
        else
          v60 = (void **)__p[0];
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v59;
        *(_WORD *)v130 = 2080;
        *(_QWORD *)&v130[2] = "ASP_Loader.h";
        v131 = 1024;
        v132 = 150;
        v133 = 2080;
        v134 = v60;
        _os_log_debug_impl(&dword_1B57BA000, v53, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Loading server plug-in %s...", buf, 0x22u);
        goto LABEL_82;
      }
      break;
    case 3:
      AMCP::Log::Scope_Registry::get(v39);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v41 = *(std::__shared_weak_count **)v130;
      v42 = **(NSObject ***)buf;
      if (*(_QWORD *)v130)
      {
        v43 = (unint64_t *)(*(_QWORD *)v130 + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      {
        v45 = pthread_self();
        v46 = pthread_mach_thread_np(v45);
        v47 = *(const __CFString **)(a1 + 24);
        if (!v47)
        {
          v122 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v122, "Could not construct");
          __cxa_throw(v122, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v48 = v46;
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v47);
        if (v126 >= 0)
          v49 = __p;
        else
          v49 = (void **)__p[0];
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v48;
        *(_WORD *)v130 = 2080;
        *(_QWORD *)&v130[2] = "ASP_Loader.h";
        v131 = 1024;
        v132 = 150;
        v133 = 2080;
        v134 = v49;
        v50 = v42;
        v51 = OS_LOG_TYPE_INFO;
LABEL_81:
        _os_log_impl(&dword_1B57BA000, v50, v51, "%6u %32s:%-5d Loading server plug-in %s...", buf, 0x22u);
LABEL_82:
        if (v126 < 0)
          operator delete(__p[0]);
      }
      break;
  }
  v70 = v128;
  if (v128)
  {
    v71 = (unint64_t *)&v128->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::load_driver(v4, (const applesauce::CF::URLRef **)(a1 + 16));
  AMCP::Log::Scope_Registry::get(v73);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v127, "com.apple.coreaudio", "AMCP");
  v75 = *(_DWORD *)(v127 + 16);
  switch(v75)
  {
    case 1:
      AMCP::Log::Scope_Registry::get(v74);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v96 = *(std::__shared_weak_count **)v130;
      v97 = **(NSObject ***)buf;
      if (*(_QWORD *)v130)
      {
        v98 = (unint64_t *)(*(_QWORD *)v130 + 8);
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
      if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
      {
        v100 = pthread_self();
        v101 = pthread_mach_thread_np(v100);
        v102 = *(const __CFString **)(a1 + 24);
        if (!v102)
        {
          v124 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v124, "Could not construct");
          __cxa_throw(v124, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v103 = v101;
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v102);
        if (v126 >= 0)
          v104 = __p;
        else
          v104 = (void **)__p[0];
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v103;
        *(_WORD *)v130 = 2080;
        *(_QWORD *)&v130[2] = "ASP_Loader.h";
        v131 = 1024;
        v132 = 152;
        v133 = 2080;
        v134 = v104;
        v85 = v97;
        v86 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_125;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v74);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v87 = *(std::__shared_weak_count **)v130;
      v88 = **(NSObject ***)buf;
      if (*(_QWORD *)v130)
      {
        v89 = (unint64_t *)(*(_QWORD *)v130 + 8);
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
      {
        v91 = pthread_self();
        v92 = pthread_mach_thread_np(v91);
        v93 = *(const __CFString **)(a1 + 24);
        if (!v93)
        {
          v118 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v118, "Could not construct");
          __cxa_throw(v118, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v94 = v92;
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v93);
        if (v126 >= 0)
          v95 = __p;
        else
          v95 = (void **)__p[0];
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v94;
        *(_WORD *)v130 = 2080;
        *(_QWORD *)&v130[2] = "ASP_Loader.h";
        v131 = 1024;
        v132 = 152;
        v133 = 2080;
        v134 = v95;
        _os_log_debug_impl(&dword_1B57BA000, v88, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Done loading server plug-in %s...", buf, 0x22u);
        goto LABEL_126;
      }
      break;
    case 3:
      AMCP::Log::Scope_Registry::get(v74);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v76 = *(std::__shared_weak_count **)v130;
      v77 = **(NSObject ***)buf;
      if (*(_QWORD *)v130)
      {
        v78 = (unint64_t *)(*(_QWORD *)v130 + 8);
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      if (os_log_type_enabled(v77, OS_LOG_TYPE_INFO))
      {
        v80 = pthread_self();
        v81 = pthread_mach_thread_np(v80);
        v82 = *(const __CFString **)(a1 + 24);
        if (!v82)
        {
          v123 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v123, "Could not construct");
          __cxa_throw(v123, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v83 = v81;
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v82);
        if (v126 >= 0)
          v84 = __p;
        else
          v84 = (void **)__p[0];
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v83;
        *(_WORD *)v130 = 2080;
        *(_QWORD *)&v130[2] = "ASP_Loader.h";
        v131 = 1024;
        v132 = 152;
        v133 = 2080;
        v134 = v84;
        v85 = v77;
        v86 = OS_LOG_TYPE_INFO;
LABEL_125:
        _os_log_impl(&dword_1B57BA000, v85, v86, "%6u %32s:%-5d Done loading server plug-in %s...", buf, 0x22u);
LABEL_126:
        if (v126 < 0)
          operator delete(__p[0]);
      }
      break;
  }
  v105 = v128;
  if (v128)
  {
    v106 = (unint64_t *)&v128->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = *(_QWORD *)(v4 + 48);
  v109 = *(_QWORD *)(v4 + 56);
  if (v108 != v109)
  {
    v110 = (const __CFString **)(a1 + 24);
    while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)v108, v110))
    {
      v108 += 16;
      if (v108 == v109)
      {
        v108 = v109;
        goto LABEL_146;
      }
    }
    if (v108 != v109)
    {
      for (i = v108 + 16; i != v109; i += 16)
      {
        if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)i, v110))
        {
          v112 = *(const __CFString **)v108;
          *(_QWORD *)v108 = *(_QWORD *)i;
          v113 = *(_QWORD *)(i + 8);
          *(_QWORD *)i = v112;
          *(_QWORD *)(i + 8) = 0;
          v114 = *(_QWORD *)(v108 + 8);
          *(_QWORD *)(v108 + 8) = v113;
          if (v114)
            std::default_delete<applesauce::iokit::io_service_factory>::operator()[abi:ne180100](v114);
          v108 += 16;
        }
      }
    }
  }
LABEL_146:
  v115 = *(_QWORD *)(v4 + 56);
  if (v108 != v115)
  {
    while (v115 != v108)
    {
      v115 -= 16;
      std::__destroy_at[abi:ne180100]<std::tuple<applesauce::CF::StringRef,std::unique_ptr<applesauce::iokit::io_service_factory>>,0>(v115);
    }
    *(_QWORD *)(v4 + 56) = v108;
  }
  if (v3)
    IOObjectRelease(v3);
}

void sub_1B588EC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  io_object_t v14;
  void *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;

  __cxa_free_exception(v15);
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  if (v14)
    IOObjectRelease(v14);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1},std::allocator<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1}>,void ()(applesauce::iokit::io_object_holder)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP10Loader_ImpINS0_20Simple_Loader_HelperEE12defer_driverERKN10applesauce2CF6URLRefENS5_9StringRefERKNS5_13DictionaryRefEjEUlNS4_5iokit16io_object_holderEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1},std::allocator<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1}>,void ()(applesauce::iokit::io_object_holder)>::target_type()
{
}

_QWORD *applesauce::CF::StringRef::operator->(_QWORD *result)
{
  std::runtime_error *exception;

  if (!*result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1B588EDFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__function::__alloc_func<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1},std::allocator<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1}>,void ()(applesauce::iokit::io_object_holder)>::destroy[abi:ne180100](uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 8);
  if (v3)
    CFRelease(v3);
}

uint64_t std::__compressed_pair_elem<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1},0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1} const&,0ul>(uint64_t a1, uint64_t a2)
{
  const void *v4;
  uint64_t v5;

  v4 = *(const void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (v4)
    CFRetain(v4);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
    CFRetain(*(CFTypeRef *)(a2 + 16));
  *(_QWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*>(_BYTE *a1, CFDictionaryRef theDict, const void *a3)
{
  const void *v4;
  const void *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<__CFString const*>(theDict, a3);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFArrayGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = v5;
  v7 = 1;
LABEL_6:
  a1[8] = v7;
}

void std::__shared_ptr_emplace<AMCP::ASP::Driver>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E696FCA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::ASP::Driver>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E696FCA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::ASP::Driver>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__destroy_at[abi:ne180100]<applesauce::CF::URLRef,0>(const void *a1)
{
  if (a1)
    CFRelease(a1);
}

void AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::~Loader_Imp(_QWORD *a1)
{
  AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::~Loader_Imp(a1);
  JUMPOUT(0x1B5E50688);
}

_QWORD *`non-virtual thunk to'AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::~Loader_Imp(uint64_t a1)
{
  return AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::~Loader_Imp((_QWORD *)(a1 - 24));
}

void `non-virtual thunk to'AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::~Loader_Imp(uint64_t a1)
{
  AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::~Loader_Imp((_QWORD *)(a1 - 24));
  JUMPOUT(0x1B5E50688);
}

_QWORD *AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::~Loader_Imp(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;

  *a1 = &off_1E696FC20;
  a1[3] = &unk_1E696FC48;
  v2 = a1[6];
  if (v2)
  {
    v3 = a1[7];
    v4 = (void *)a1[6];
    if (v3 != v2)
    {
      do
      {
        v3 -= 16;
        std::__destroy_at[abi:ne180100]<std::tuple<applesauce::CF::StringRef,std::unique_ptr<applesauce::iokit::io_service_factory>>,0>(v3);
      }
      while (v3 != v2);
      v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  a1[3] = &off_1E697FC58;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void std::__shared_ptr_emplace<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E696FBD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E696FBD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<AMCP::IOAudio2::Driver>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E696FB80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::IOAudio2::Driver>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E696FB80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::IOAudio2::Driver>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<AMCP::IOAudio1::Driver>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E696FB30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::IOAudio1::Driver>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E696FB30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::IOAudio1::Driver>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<AMCP::Null::Driver>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E696FAE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Null::Driver>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E696FAE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::Null::Driver>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

const void **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<applesauce::CF::StringRef *,applesauce::CF::StringRef *,applesauce::CF::StringRef *>(const void **a1, const void **a2, const void **a3)
{
  const void **v5;
  const void *v6;
  const void *v7;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *a3;
      v7 = *v5;
      *a3 = *v5;
      if (v7)
        CFRetain(v7);
      if (v6)
        CFRelease(v6);
      ++v5;
      ++a3;
    }
    while (v5 != a2);
  }
  return a3;
}

_QWORD *std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef&,applesauce::CF::StringRef*>(_QWORD *a1, CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  *a1 = cf;
  return a1;
}

uint64_t std::__split_buffer<applesauce::CF::StringRef>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  const void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(const void **)(i - 8);
    *(_QWORD *)(a1 + 16) = i - 8;
    std::__destroy_at[abi:ne180100]<applesauce::CF::StringRef,0>(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<HALS_PlugIn *>::reserve(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  v1 = *(_BYTE **)a1;
  if (*(_QWORD *)(a1 + 16) - *(_QWORD *)a1 <= 0x3FuLL)
  {
    v3 = *(_BYTE **)(a1 + 8);
    v4 = (char *)operator new(0x40uLL);
    v5 = &v4[(v3 - v1) & 0xFFFFFFFFFFFFFFF8];
    v6 = v5;
    if (v3 != v1)
    {
      v6 = &v4[(v3 - v1) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v7 = *((_QWORD *)v3 - 1);
        v3 -= 8;
        *((_QWORD *)v6 - 1) = v7;
        v6 -= 8;
      }
      while (v3 != v1);
    }
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v4 + 64;
    if (v1)
      operator delete(v1);
  }
}

const void **mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::BundleRef_Traits>::~BasicRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

_QWORD *std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(_QWORD *a1, CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  *a1 = cf;
  return a1;
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1)
{
  int v1;
  unint64_t v2;
  BOOL v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;

  v1 = *(char *)(a1 + 23);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = v1 < 0;
  if (v1 >= 0)
    v4 = (uint64_t *)a1;
  else
    v4 = *(uint64_t **)a1;
  if (!v3)
    v2 = *(unsigned __int8 *)(a1 + 23);
  if (v2 > 0x20)
  {
    if (v2 > 0x40)
    {
      v34 = 0x9DDFEA08EB382D69;
      v44 = *(uint64_t *)((char *)v4 + v2 - 48);
      v43 = *(uint64_t *)((char *)v4 + v2 - 40);
      v45 = *(uint64_t *)((char *)v4 + v2 - 24);
      v47 = *(uint64_t *)((char *)v4 + v2 - 64);
      v46 = *(uint64_t *)((char *)v4 + v2 - 56);
      v48 = *(uint64_t *)((char *)v4 + v2 - 16);
      v49 = *(uint64_t *)((char *)v4 + v2 - 8);
      v50 = v46 + v48;
      v51 = 0x9DDFEA08EB382D69
          * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))));
      v52 = 0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47));
      v53 = v47 + v2 + v46 + v44;
      v54 = v53 + v43;
      v55 = __ROR8__(v53, 44) + v47 + v2 + __ROR8__(v43 + v47 + v2 - 0x622015F714C7D297 * (v51 ^ (v51 >> 47)), 21);
      v56 = v46 + v48 + *(uint64_t *)((char *)v4 + v2 - 32) - 0x4B6D499041670D8DLL;
      v57 = v56 + v45 + v48;
      v58 = __ROR8__(v57, 44);
      v59 = v57 + v49;
      v60 = v58 + v56 + __ROR8__(v56 + v43 + v49, 21);
      v62 = *v4;
      v61 = v4 + 4;
      v63 = v62 - 0x4B6D499041670D8DLL * v43;
      v64 = -(uint64_t)((v2 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v65 = *(v61 - 3);
        v66 = v63 + v54 + v50 + v65;
        v67 = v61[2];
        v68 = v61[3];
        v69 = v61[1];
        v50 = v69 + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v55 + v67, 42);
        v70 = v52 + v59;
        v71 = *(v61 - 2);
        v72 = *(v61 - 1);
        v73 = *(v61 - 4) - 0x4B6D499041670D8DLL * v55;
        v74 = v73 + v59 + v72;
        v75 = v73 + v65 + v71;
        v54 = v75 + v72;
        v76 = __ROR8__(v75, 44) + v73;
        v77 = (0xB492B66FBE98F273 * __ROR8__(v66, 37)) ^ v60;
        v63 = 0xB492B66FBE98F273 * __ROR8__(v70, 33);
        v55 = v76 + __ROR8__(v74 + v77, 21);
        v78 = v63 + v60 + *v61;
        v59 = v78 + v69 + v67 + v68;
        v60 = __ROR8__(v78 + v69 + v67, 44) + v78 + __ROR8__(v50 + v71 + v78 + v68, 21);
        v61 += 8;
        v52 = v77;
        v64 += 64;
      }
      while (v64);
      v79 = 0x9DDFEA08EB382D69
          * (v59 ^ ((0x9DDFEA08EB382D69 * (v59 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69 * (v59 ^ v54)));
      v80 = v63
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) >> 47));
      v81 = 0x9DDFEA08EB382D69
          * (v80 ^ (v77 - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47)) - 0x622015F714C7D297 * (v79 ^ (v79 >> 47))));
      v35 = 0x9DDFEA08EB382D69 * (v80 ^ (v81 >> 47) ^ v81);
    }
    else
    {
      v9 = (char *)v4 + v2;
      v10 = *(uint64_t *)((char *)v4 + v2 - 16);
      v11 = *(uint64_t *)((char *)v4 + v2 - 8);
      v12 = v4[1];
      v13 = *v4 - 0x3C5A37A36834CED9 * (v10 + v2);
      v16 = v4 + 2;
      v14 = v4[2];
      v15 = v16[1];
      v17 = __ROR8__(v13 + v15, 52);
      v18 = __ROR8__(v13, 37);
      v19 = v13 + v12;
      v20 = __ROR8__(v19, 7);
      v21 = v19 + v14;
      v22 = v20 + v18;
      v23 = *((_QWORD *)v9 - 4) + v14;
      v24 = v11 + v15;
      v25 = __ROR8__(v24 + v23, 52);
      v26 = v22 + v17;
      v27 = __ROR8__(v23, 37);
      v28 = *((_QWORD *)v9 - 3) + v23;
      v29 = __ROR8__(v28, 7);
      v30 = v26 + __ROR8__(v21, 31);
      v31 = v28 + v10;
      v32 = v31 + v24;
      v33 = v21 + v15 + v27 + v29 + v25 + __ROR8__(v31, 31);
      v34 = 0x9AE16A3B2F90404FLL;
      v35 = v30
          - 0x3C5A37A36834CED9
          * ((0xC3A5C85C97CB3127 * (v32 + v30) - 0x651E95C4D06FBFB1 * v33) ^ ((0xC3A5C85C97CB3127 * (v32 + v30)
                                                                                 - 0x651E95C4D06FBFB1 * v33) >> 47));
    }
    return (v35 ^ (v35 >> 47)) * v34;
  }
  else
  {
    if (v2 > 0x10)
    {
      v36 = v4[1];
      v37 = 0xB492B66FBE98F273 * *v4;
      v38 = 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)v4 + v2 - 8);
      v39 = __ROR8__(v38, 30) + __ROR8__(v37 - v36, 43);
      v40 = v37 + v2 + __ROR8__(v36 ^ 0xC949D7C7509E6557, 20) - v38;
      v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v39 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)v4 + v2 - 16)));
      v42 = v40 ^ (v41 >> 47) ^ v41;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    if (v2 >= 9)
    {
      v5 = *v4;
      v6 = *(uint64_t *)((char *)v4 + v2 - 8);
      v7 = __ROR8__(v6 + v2, v2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) >> 47))) ^ v6;
    }
    if (v2 >= 4)
    {
      v82 = *(_DWORD *)v4;
      v83 = *(unsigned int *)((char *)v4 + v2 - 4);
      v84 = 0x9DDFEA08EB382D69 * ((v2 + (8 * v82)) ^ v83);
      v42 = v83 ^ (v84 >> 47) ^ v84;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    result = 0x9AE16A3B2F90404FLL;
    if (v2)
    {
      v85 = (0xC949D7C7509E6557 * (v2 + 4 * *((unsigned __int8 *)v4 + v2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)v4 | ((unint64_t)*((unsigned __int8 *)v4 + (v2 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v85 ^ (v85 >> 47));
    }
  }
  return result;
}

void std::__shared_ptr_emplace<HALS_UCRemotePlugIn>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E696FEE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HALS_UCRemotePlugIn>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E696FEE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<HALS_UCRemotePlugIn>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(_QWORD *a1, const __CFDictionary *a2, const void *a3, _QWORD *a4)
{
  CFTypeRef v6;
  CFTypeRef cf;
  char v9;

  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&cf, a2, a3);
  if (v9)
  {
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a1 = v6;
  }
  else
  {
    *a1 = *a4;
    *a4 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(_BYTE *a1, CFDictionaryRef theDict, const void *a3)
{
  const void *v4;
  const void *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<__CFString const*>(theDict, a3);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFNumberGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = v5;
  v7 = 1;
LABEL_6:
  a1[8] = v7;
}

void std::__function::__func<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_1,std::allocator<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_1>,int ()(NSXPCListenerEndpoint *,NSURL *,NSString *,int,BOOL,std::function<void ()(void)>)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_DWORD *std::__function::__func<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_1,std::allocator<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_1>,int ()(NSXPCListenerEndpoint *,NSURL *,NSString *,int,BOOL,std::function<void ()(void)>)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E696FE50;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_1,std::allocator<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_1>,int ()(NSXPCListenerEndpoint *,NSURL *,NSString *,int,BOOL,std::function<void ()(void)>)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E696FE50;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_1,std::allocator<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_1>,int ()(NSXPCListenerEndpoint *,NSURL *,NSString *,int,BOOL,std::function<void ()(void)>)>::operator()(uint64_t a1, void **a2, void **a3, void **a4, int *a5, unsigned __int8 *a6, uint64_t a7)
{
  void *v8;
  void *v9;
  void *v10;
  int v11;
  int v12;
  id v13;
  id v14;
  id v15;
  int v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  id v24;
  std::__shared_weak_count *v25;
  CFURLRef v26;
  id v27;
  uint64_t v28;
  HALB_CFPlugIn *v29;
  CFStringRef BundleID;
  CFStringRef v31;
  const void *shared_owners;
  const void *v33;
  std::__shared_weak_count *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  HALS_Object *v43;
  HALS_DeviceManager *v44;
  HALS_System *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::mutex *v51;
  void **v52;
  unint64_t v53;
  HALS_DeviceManager **v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  HALS_DeviceManager **v61;
  unint64_t v62;
  char *v63;
  char *v64;
  HALS_DeviceManager *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  void *shared_weak_owners;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t *p_shared_weak_owners;
  id v95;
  id v96;
  id v97;
  id v98;
  int v99;
  id cf;
  id v101;
  const __CFURL *relativeURL;
  std::__shared_weak_count *v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count *v106;
  uint64_t v107[2];
  _QWORD v108[3];
  _QWORD *v109;
  _QWORD v110[3];
  _QWORD *v111;
  _QWORD v112[3];
  _QWORD *v113;
  HALS_System *v114;
  std::__shared_weak_count *v115;
  _QWORD v116[3];
  _QWORD *v117;
  _QWORD v118[3];
  _QWORD *v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v8 = *a2;
  v9 = *a3;
  v10 = *a4;
  v11 = *a5;
  v12 = *a6;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v108, a7);
  v13 = v8;
  v14 = v9;
  v15 = v10;
  v16 = *(_DWORD *)(a1 + 8);
  v17 = (uint64_t)v109;
  v97 = v13;
  v98 = v15;
  if (!v109)
    goto LABEL_4;
  if (v109 != v108)
  {
    v17 = (*(uint64_t (**)(void))(*v109 + 16))();
LABEL_4:
    v111 = (_QWORD *)v17;
    goto LABEL_6;
  }
  v111 = v110;
  (*(void (**)(_QWORD *, _QWORD *))(v108[0] + 24))(v108, v110);
LABEL_6:
  v18 = v13;
  v19 = v14;
  v20 = v15;
  v21 = (uint64_t)v111;
  v95 = v18;
  v96 = v19;
  if (!v111)
  {
LABEL_9:
    v113 = (_QWORD *)v21;
    goto LABEL_11;
  }
  if (v111 != v110)
  {
    v21 = (*(uint64_t (**)(void))(*v111 + 16))();
    goto LABEL_9;
  }
  v113 = v112;
  (*(void (**)(_QWORD *, _QWORD *))(v110[0] + 24))(v110, v112);
LABEL_11:
  relativeURL = (const __CFURL *)v19;
  v101 = v18;
  cf = v20;
  v107[0] = 0;
  v107[1] = 0;
  HALS_System::GetInstance(&v114, 0, v107);
  v22 = (std::__shared_weak_count *)operator new(0x388uLL);
  v99 = v12;
  *(_OWORD *)&v22->__shared_owners_ = 0u;
  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
  v22->__vftable = (std::__shared_weak_count_vtbl *)&off_1E696FEE0;
  v24 = v101;
  v22[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E696B8C0;
  v25 = v22 + 1;
  LOBYTE(v22[1].__shared_owners_) = 0;
  v22[1].__shared_weak_owners_ = 0;
  v22[2].std::__shared_count = 0u;
  v26 = CFURLCopyAbsoluteURL(relativeURL);
  applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&v22[2].__shared_weak_owners_, v26);
  v22[3].std::__shared_count = 0u;
  v22[4].__shared_weak_owners_ = 0;
  v22[5].__vftable = 0;
  *(_OWORD *)&v22[3].__shared_weak_owners_ = 0u;
  LOWORD(v22[4].__shared_owners_) = 0;
  v22[5].__shared_owners_ = 0;
  v22[5].__shared_weak_owners_ = 850045863;
  v22[6].std::__shared_count = 0u;
  *(_OWORD *)&v22[6].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v22[7].__shared_owners_ = 0u;
  v22[8].std::__shared_count = 0u;
  *(_OWORD *)&v22[8].__shared_weak_owners_ = 0u;
  v22[9].__shared_owners_ = 850045863;
  *(_OWORD *)&v22[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v22[10].__shared_owners_ = 0u;
  v22[11].std::__shared_count = 0u;
  *(_OWORD *)&v22[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v22[12].__shared_owners_ = 0u;
  v22[13].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  *(_OWORD *)&v22[13].__shared_owners_ = 0u;
  v22[14].std::__shared_count = 0u;
  *(_OWORD *)&v22[14].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v22[15].__shared_owners_ = 0u;
  v22[16].__vftable = (std::__shared_weak_count_vtbl *)dispatch_semaphore_create(0);
  v27 = v24;
  v22[16].__shared_owners_ = (uint64_t)v27;
  p_shared_weak_owners = &v22[16].__shared_weak_owners_;
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((uint64_t)&v22[16].__shared_weak_owners_, "Remote PlugIn Change Queue");
  LOBYTE(v22[30].__vftable) = 0;
  *(_OWORD *)&v22[32].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v22[33].__shared_owners_ = 0u;
  *(_OWORD *)&v22[30].__shared_owners_ = 0u;
  v22[31].std::__shared_count = 0u;
  *(_OWORD *)&v22[31].__shared_weak_owners_ = 0u;
  LODWORD(v22[32].__shared_owners_) = 0;
  LODWORD(v22[34].__vftable) = 1065353216;
  *(_OWORD *)&v22[34].__shared_owners_ = 0u;
  v22[35].std::__shared_count = 0u;
  LODWORD(v22[35].__shared_weak_owners_) = 1065353216;
  v22[36].std::__shared_count = 0u;
  *(_OWORD *)&v22[36].__shared_weak_owners_ = 0u;
  LODWORD(v22[37].__shared_owners_) = 1065353216;
  if (v16 != v11)
    LOBYTE(v22[30].__vftable) = 1;
  if (v99)
  {
    v28 = operator new();
    *(_QWORD *)v28 = &off_1E6993858;
    v29 = CFPlugInCreate(0, relativeURL);
    *(_QWORD *)(v28 + 8) = v29;
    *(_BYTE *)(v28 + 16) = 1;
    BundleID = HALB_CFPlugIn::GetBundleID(v29);
    v31 = BundleID;
    if (BundleID)
      CFRetain(BundleID);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v118, v31);
    shared_owners = (const void *)v22[2].__shared_owners_;
    v22[2].__shared_owners_ = v118[0];
    v118[0] = shared_owners;
    if (shared_owners)
      CFRelease(shared_owners);
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
  if (cf)
  {
    if (!v22[2].__shared_owners_)
    {
      CFRetain(cf);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v118, cf);
      v33 = (const void *)v22[2].__shared_owners_;
      v22[2].__shared_owners_ = v118[0];
      v118[0] = v33;
      if (v33)
        CFRelease(v33);
    }
  }

  v105 = v22 + 1;
  v106 = v22;
  v34 = (std::__shared_weak_count *)v22[2].__vftable;
  if (v34)
  {
    if (v34->__shared_owners_ != -1)
      goto LABEL_36;
    do
      v35 = __ldxr(p_shared_owners);
    while (__stxr(v35 + 1, p_shared_owners));
    v36 = (unint64_t *)&v22->__shared_weak_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    v22[1].__shared_weak_owners_ = (uint64_t)v25;
    v22[2].__vftable = (std::__shared_weak_count_vtbl *)v22;
    std::__shared_weak_count::__release_weak(v34);
  }
  else
  {
    do
      v38 = __ldxr(p_shared_owners);
    while (__stxr(v38 + 1, p_shared_owners));
    v39 = (unint64_t *)&v22->__shared_weak_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
    v22[1].__shared_weak_owners_ = (uint64_t)v25;
    v22[2].__vftable = (std::__shared_weak_count_vtbl *)v22;
  }
  do
    v41 = __ldaxr(p_shared_owners);
  while (__stlxr(v41 - 1, p_shared_owners));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_36:
  v42 = operator new();
  v44 = (HALS_DeviceManager *)v42;
  v45 = v114;
  v103 = v105;
  v104 = v106;
  if (v106)
  {
    v46 = (unint64_t *)&v106->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  HALS_PlugIn::HALS_PlugIn(v42, v45, (uint64_t)&v103, 0, v43);
  v48 = v104;
  if (v104)
  {
    v49 = (unint64_t *)&v104->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = (std::mutex *)HALS_RemotePlugInRegistrar::sPlugInListMutex;
  std::mutex::lock((std::mutex *)HALS_RemotePlugInRegistrar::sPlugInListMutex);
  v52 = (void **)HALS_RemotePlugInRegistrar::sPlugInList;
  v54 = *(HALS_DeviceManager ***)(HALS_RemotePlugInRegistrar::sPlugInList + 8);
  v53 = *(_QWORD *)(HALS_RemotePlugInRegistrar::sPlugInList + 16);
  if ((unint64_t)v54 >= v53)
  {
    v56 = ((uint64_t)v54 - *(_QWORD *)HALS_RemotePlugInRegistrar::sPlugInList) >> 3;
    if ((unint64_t)(v56 + 1) >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v57 = v53 - *(_QWORD *)HALS_RemotePlugInRegistrar::sPlugInList;
    v58 = v57 >> 2;
    if (v57 >> 2 <= (unint64_t)(v56 + 1))
      v58 = v56 + 1;
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
      v59 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v59 = v58;
    if (v59)
      v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v59);
    else
      v60 = 0;
    v61 = (HALS_DeviceManager **)(v59 + 8 * v56);
    v62 = v59 + 8 * v60;
    *v61 = v44;
    v55 = v61 + 1;
    v64 = (char *)*v52;
    v63 = (char *)v52[1];
    if (v63 != *v52)
    {
      do
      {
        v65 = (HALS_DeviceManager *)*((_QWORD *)v63 - 1);
        v63 -= 8;
        *--v61 = v65;
      }
      while (v63 != v64);
      v63 = (char *)*v52;
    }
    *v52 = v61;
    v52[1] = v55;
    v52[2] = (void *)v62;
    if (v63)
      operator delete(v63);
  }
  else
  {
    *v54 = v44;
    v55 = v54 + 1;
  }
  v52[1] = v55;
  HALS_System::DeviceManagerCreated(v114, v44);
  v73 = v105;
  v74 = (uint64_t)v113;
  if (!v113)
    goto LABEL_63;
  if (v113 != v112)
  {
    v74 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v113 + 16))(v113, v66, v67, v68, v69, v70, v71, v72);
LABEL_63:
    v117 = (_QWORD *)v74;
    goto LABEL_65;
  }
  v117 = v116;
  (*(void (**)(_QWORD *, _QWORD *))(v112[0] + 24))(v112, v116);
LABEL_65:
  shared_weak_owners = (void *)v73[29].__shared_weak_owners_;
  if (!shared_weak_owners)
    goto LABEL_76;
  v76 = (uint64_t)v117;
  if (!v117)
    goto LABEL_69;
  if (v117 != v116)
  {
    v76 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v117 + 16))(v117, v66, v67, v68, v69, v70, v71, v72);
LABEL_69:
    v119 = (_QWORD *)v76;
    goto LABEL_71;
  }
  v119 = v118;
  (*(void (**)(_QWORD *, _QWORD *))(v116[0] + 24))(v116, v118);
LABEL_71:
  objc_msgSend(shared_weak_owners, "set_invalidation_handler:", v118, p_shared_weak_owners, v95, v96, v20, v97, v14, v98, v24);
  v77 = v119;
  if (v119 == v118)
  {
    v78 = 4;
    v77 = v118;
  }
  else
  {
    if (!v119)
      goto LABEL_76;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_76:
  v79 = v117;
  if (v117 == v116)
  {
    v80 = 4;
    v79 = v116;
    goto LABEL_80;
  }
  if (v117)
  {
    v80 = 5;
LABEL_80:
    (*(void (**)(void))(*v79 + 8 * v80))();
  }
  std::mutex::unlock(v51);
  v81 = v106;
  if (v106)
  {
    v82 = (unint64_t *)&v106->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v115;
  if (v115)
  {
    v85 = (unint64_t *)&v115->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }

  v87 = v113;
  if (v113 == v112)
  {
    v88 = 4;
    v87 = v112;
  }
  else
  {
    if (!v113)
      goto LABEL_96;
    v88 = 5;
  }
  (*(void (**)(void))(*v87 + 8 * v88))();
LABEL_96:

  v89 = v111;
  if (v111 == v110)
  {
    v90 = 4;
    v89 = v110;
  }
  else
  {
    if (!v111)
      goto LABEL_101;
    v90 = 5;
  }
  (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_101:

  v91 = v109;
  if (v109 == v108)
  {
    v92 = 4;
    v91 = v108;
    goto LABEL_105;
  }
  if (v109)
  {
    v92 = 5;
LABEL_105:
    (*(void (**)(void))(*v91 + 8 * v92))();
  }
  return 0;
}

void sub_1B58901B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, AMCP::Utility::Dispatch_Queue *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_1,std::allocator<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_1>,int ()(NSXPCListenerEndpoint *,NSURL *,NSString *,int,BOOL,std::function<void ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN26HALS_RemotePlugInRegistrar31CreateExtrinsicDriverEntryPointEvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_1,std::allocator<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_1>,int ()(NSXPCListenerEndpoint *,NSURL *,NSString *,int,BOOL,std::function<void ()(void)>)>::target_type()
{
}

void std::__function::__func<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0,std::allocator<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0>,void ()(NSString *)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0,std::allocator<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0>,void ()(NSString *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E696FDC0;
  return result;
}

void std::__function::__func<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0,std::allocator<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0>,void ()(NSString *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E696FDC0;
}

void std::__function::__func<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0,std::allocator<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0>,void ()(NSString *)>::operator()(uint64_t a1, id *a2)
{
  id v2;
  uint64_t v3;
  id v4;
  unsigned __int8 v5;
  NSObject *v6;
  _QWORD *v7;
  id v8;
  id *v9;

  v2 = *a2;
  v3 = HALS_RemotePlugInRegistrar::sHighPriorityConcurrentQueue;
  v4 = v2;
  v5 = atomic_load((unsigned __int8 *)(v3 + 32));
  if ((v5 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(v3 + 33));
  AMCP::Log::Scope::get_os_log_t(*(id *)v3);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  v7 = (_QWORD *)operator new();
  v8 = v4;
  *v7 = v8;
  v9 = 0;
  dispatch_async_f(v6, v7, (dispatch_function_t)applesauce::dispatch::v1::async<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0::operator() const(NSString *)::{lambda(void)#1} &>(NSObject  {objcproto17OS_dispatch_queue}*,HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0::operator() const(NSString *)::{lambda(void)#1} &)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0::operator() const(NSString *)::{lambda(void)#1},std::default_delete<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0::operator() const(NSString *)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&v9);

}

uint64_t std::__function::__func<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0,std::allocator<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0>,void ()(NSString *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN26HALS_RemotePlugInRegistrar31CreateExtrinsicDriverEntryPointEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0,std::allocator<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0>,void ()(NSString *)>::target_type()
{
}

id **applesauce::dispatch::v1::async<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0::operator() const(NSString *)::{lambda(void)#1} &>(NSObject  {objcproto17OS_dispatch_queue}*,HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0::operator() const(NSString *)::{lambda(void)#1} &)::{lambda(void *)#1}::__invoke(id *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v3;
  _opaque_pthread_t *v4;
  mach_port_t v5;
  id v6;
  void *v7;
  const __CFString *v8;
  void *p_p;
  AMCP::Log::Scope_Registry *v10;
  NSObject *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _opaque_pthread_t *v15;
  mach_port_t v16;
  NSObject *v17;
  const __CFString *v18;
  void *v19;
  AMCP::Log::Scope_Registry *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  HALS_DeviceManager **v24;
  HALS_DeviceManager **v25;
  HALS_DeviceManager **v26;
  HALS_ObjectMap **v27;
  unint64_t v28;
  HALS_ObjectMap **v29;
  HALS_DeviceManager *v30;
  const void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void *v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  void *v41;
  void *v42;
  _QWORD *i;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  HALS_ObjectMap **v50;
  HALS_DeviceManager *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  HALS_ObjectMap **v55;
  HALS_ObjectMap *v56;
  uint64_t v57;
  HALS_ObjectMap **v58;
  HALS_ObjectMap **v59;
  int64_t v60;
  HALS_Object *v61;
  NSObject *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  NSObject *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  _opaque_pthread_t *v70;
  mach_port_t v71;
  NSObject *v72;
  const __CFString *v73;
  void *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  _opaque_pthread_t *v79;
  mach_port_t v80;
  std::mutex *v81;
  NSObject *oslog;
  os_log_t osloga;
  id *v85;
  CFTypeRef v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  CFTypeRef cf;
  std::__shared_weak_count *v90;
  void *__p;
  std::__shared_weak_count *v92;
  char v93;
  uint8_t buf[8];
  __int128 v95;
  __int128 v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v85 = a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  oslog = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  v1 = (std::__shared_weak_count *)v95;
  if ((_QWORD)v95)
  {
    v2 = (unint64_t *)(v95 + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    v4 = pthread_self();
    v5 = pthread_mach_thread_np(v4);
    v6 = *a1;
    v7 = v6;
    if (v6)
      CFRetain(v6);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v7);

    v8 = CFCopyDescription(cf);
    applesauce::CF::details::CFString_get_value<true>((uint64_t)&__p, v8);
    if (v8)
      CFRelease(v8);
    p_p = &__p;
    if (v93 < 0)
      p_p = __p;
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v5;
    LOWORD(v95) = 2080;
    *(_QWORD *)((char *)&v95 + 2) = "HALS_RemotePlugInRegistrar.mm";
    WORD5(v95) = 1024;
    HIDWORD(v95) = 255;
    LOWORD(v96) = 2080;
    *(_QWORD *)((char *)&v96 + 2) = p_p;
    _os_log_impl(&dword_1B57BA000, oslog, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d Calling DestroyPlugInObject():  %s", buf, 0x22u);
    if (v93 < 0)
      operator delete(__p);
    if (cf)
      CFRelease(cf);
  }

  osloga = (os_log_t)*a1;
  if (osloga)
  {
    v81 = (std::mutex *)HALS_RemotePlugInRegistrar::sPlugInListMutex;
    std::mutex::lock((std::mutex *)HALS_RemotePlugInRegistrar::sPlugInListMutex);
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v11 = **(NSObject ***)buf;
    AMCP::Log::Scope::get_os_log_t(**(id **)buf);
    objc_claimAutoreleasedReturnValue();
    v12 = (std::__shared_weak_count *)v95;
    if ((_QWORD)v95)
    {
      v13 = (unint64_t *)(v95 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v15 = pthread_self();
      v16 = pthread_mach_thread_np(v15);
      v17 = osloga;
      CFRetain(v17);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v17);

      v18 = CFCopyDescription(cf);
      applesauce::CF::details::CFString_get_value<true>((uint64_t)&__p, v18);
      if (v18)
        CFRelease(v18);
      v19 = &__p;
      if (v93 < 0)
        v19 = __p;
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v16;
      LOWORD(v95) = 2080;
      *(_QWORD *)((char *)&v95 + 2) = "HALS_RemotePlugInRegistrar.mm";
      WORD5(v95) = 1024;
      HIDWORD(v95) = 671;
      LOWORD(v96) = 2080;
      *(_QWORD *)((char *)&v96 + 2) = v19;
      _os_log_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d HALS_RemotePlugInRegistrar::DestroyPlugInObject: + %s", buf, 0x22u);
      if (v93 < 0)
        operator delete(__p);
      if (cf)
        CFRelease(cf);
    }

    v87 = 0;
    v88 = 0;
    HALS_System::GetInstance(&cf, 0, &v87);
    v21 = v88;
    if (v88)
    {
      p_shared_owners = (unint64_t *)&v88->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v25 = *(HALS_DeviceManager ***)HALS_RemotePlugInRegistrar::sPlugInList;
    v24 = *(HALS_DeviceManager ***)(HALS_RemotePlugInRegistrar::sPlugInList + 8);
    if (*(HALS_DeviceManager ***)HALS_RemotePlugInRegistrar::sPlugInList == v24)
    {
      v26 = 0;
    }
    else
    {
      v26 = 0;
      v27 = 0;
      v28 = 0;
      do
      {
        v29 = v26;
        v30 = *v25;
        v31 = (const void *)*((_QWORD *)*v25 + 50);
        v32 = (std::__shared_weak_count *)*((_QWORD *)*v25 + 51);
        *(_QWORD *)buf = v31;
        *(_QWORD *)&v95 = v32;
        if (v32)
        {
          v33 = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
        if (v31
        {
          __p = v35;
          v92 = v32;
          v36 = buf;
        }
        else
        {
          v36 = &__p;
        }
        *v36 = 0;
        v36[1] = 0;
        v37 = (std::__shared_weak_count *)v95;
        v26 = v29;
        if ((_QWORD)v95)
        {
          v38 = (unint64_t *)(v95 + 8);
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        v40 = __p;
        (*(void (**)(void *))(*(_QWORD *)__p + 40))(__p);
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        v42 = v41;
        if (v41 && !objc_msgSend(v41, "compare:", osloga, v81))
        {
          for (i = (_QWORD *)v40[102]; i; i = (_QWORD *)*i)
            atomic_store(1u, (unsigned __int8 *)(i[3] + 65));
          v44 = (*(uint64_t (**)(HALS_DeviceManager *))(*(_QWORD *)v30 + 64))(v30);
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&v95 = 0x40000000;
          *((_QWORD *)&v95 + 1) = ___ZN11HALS_PlugIn25RemoveAllDevicesAndNotifyEv_block_invoke;
          *(_QWORD *)&v96 = &__block_descriptor_tmp_21;
          *((_QWORD *)&v96 + 1) = v30;
          v45 = atomic_load((unsigned __int8 *)(v44 + 32));
          if ((v45 & 1) != 0)
            atomic_store(1u, (unsigned __int8 *)(v44 + 33));
          dispatch_sync(*(dispatch_queue_t *)v44, buf);
          HALS_System::DeviceManagerDestroyed((HALS_System *)cf, v30);
          if ((unint64_t)v27 >= v28)
          {
            v46 = v27 - v29;
            v47 = v46 + 1;
            if ((unint64_t)(v46 + 1) >> 61)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v28 - (_QWORD)v29) >> 2 > v47)
              v47 = (uint64_t)(v28 - (_QWORD)v29) >> 2;
            if (v28 - (unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
              v48 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v48 = v47;
            if (v48)
              v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v48);
            else
              v49 = 0;
            v26 = (HALS_DeviceManager **)(v48 + 8 * v46);
            *v26 = v30;
            v50 = v26 + 1;
            while (v27 != v29)
            {
              v51 = *--v27;
              *--v26 = v51;
            }
            v28 = v48 + 8 * v49;
            if (v29)
              operator delete(v29);
            v27 = v50;
          }
          else
          {
            *v27++ = v30;
          }
        }

        v52 = v92;
        if (v92)
        {
          v53 = (unint64_t *)&v92->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        ++v25;
      }
      while (v25 != v24);
      if (v26 != v27)
      {
        v55 = v26;
        do
        {
          v56 = *v55;
          v57 = HALS_RemotePlugInRegistrar::sPlugInList;
          v59 = *(HALS_ObjectMap ***)HALS_RemotePlugInRegistrar::sPlugInList;
          v58 = *(HALS_ObjectMap ***)(HALS_RemotePlugInRegistrar::sPlugInList + 8);
          if (*(HALS_ObjectMap ***)HALS_RemotePlugInRegistrar::sPlugInList != v58)
          {
            while (*v59 != v56)
            {
              if (++v59 == v58)
              {
                v59 = *(HALS_ObjectMap ***)(HALS_RemotePlugInRegistrar::sPlugInList + 8);
                break;
              }
            }
          }
          if (v59 != v58)
          {
            v60 = (char *)v58 - (char *)(v59 + 1);
            if (v58 != v59 + 1)
              memmove(v59, v59 + 1, (char *)v58 - (char *)(v59 + 1));
            *(_QWORD *)(v57 + 8) = (char *)v59 + v60;
            (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v56 + 8))(v56);
            HALS_ObjectMap::ReleaseObject(v56, v61);
          }
          ++v55;
        }
        while (v55 != v27);
      }
    }
    AMCP::Log::Scope_Registry::get(v20);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v66 = **(NSObject ***)buf;
    AMCP::Log::Scope::get_os_log_t(**(id **)buf);
    objc_claimAutoreleasedReturnValue();
    v67 = (std::__shared_weak_count *)v95;
    if ((_QWORD)v95)
    {
      v68 = (unint64_t *)(v95 + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
    {
      v70 = pthread_self();
      v71 = pthread_mach_thread_np(v70);
      v72 = osloga;
      CFRetain(v72);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v86, v72);

      v73 = CFCopyDescription(v86);
      applesauce::CF::details::CFString_get_value<true>((uint64_t)&__p, v73);
      if (v73)
        CFRelease(v73);
      v74 = &__p;
      if (v93 < 0)
        v74 = __p;
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v71;
      LOWORD(v95) = 2080;
      *(_QWORD *)((char *)&v95 + 2) = "HALS_RemotePlugInRegistrar.mm";
      WORD5(v95) = 1024;
      HIDWORD(v95) = 691;
      LOWORD(v96) = 2080;
      *(_QWORD *)((char *)&v96 + 2) = v74;
      _os_log_impl(&dword_1B57BA000, v66, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d HALS_RemotePlugInRegistrar::DestroyPlugInObject: - %s", buf, 0x22u);
      if (v93 < 0)
        operator delete(__p);
      if (v86)
        CFRelease(v86);
    }

    if (v26)
      operator delete(v26);
    v75 = v90;
    if (v90)
    {
      v76 = (unint64_t *)&v90->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    std::mutex::unlock(v81);
  }
  else
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v62 = **(NSObject ***)buf;
    AMCP::Log::Scope::get_os_log_t(**(id **)buf);
    objc_claimAutoreleasedReturnValue();
    v63 = (std::__shared_weak_count *)v95;
    if ((_QWORD)v95)
    {
      v64 = (unint64_t *)(v95 + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      v79 = pthread_self();
      v80 = pthread_mach_thread_np(v79);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v80;
      LOWORD(v95) = 2080;
      *(_QWORD *)((char *)&v95 + 2) = "HALS_RemotePlugInRegistrar.mm";
      WORD5(v95) = 1024;
      HIDWORD(v95) = 666;
      _os_log_error_impl(&dword_1B57BA000, v62, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HALS_RemotePlugInRegistrar cannot remove a driver with no name.", buf, 0x18u);
    }

  }
  return std::unique_ptr<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0::operator() const(NSString *)::{lambda(void)#1},std::default_delete<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0::operator() const(NSString *)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&v85);
}

void sub_1B5891064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,CFTypeRef cf,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint8_t buf,uint64_t a31,__int16 a32,__int16 a33,int a34,__int16 a35,uint64_t a36)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

id **std::unique_ptr<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0::operator() const(NSString *)::{lambda(void)#1},std::default_delete<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0::operator() const(NSString *)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](id **a1)
{
  id *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {

    MEMORY[0x1B5E50688](v2, 0x80C40B8603338);
  }
  return a1;
}

uint64_t AudioObjectCreate(HALS_ObjectMap *a1, const BOOL *a2, uint64_t a3, _DWORD *a4)
{
  HALS_ObjectMap *v9;
  HALS_ObjectMap *v10;
  HALS_Object *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _DWORD *exception;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19[2];
  HALS_System *v20;
  std::__shared_weak_count *v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if ((AMCP::Feature_Flags::access_run_new_hal(0, a2) & 1) != 0)
    return 1970171760;
  if (!AllowHALClientsInThisProcess())
    return 560033144;
  if (!a4)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v23 = "HALS_Framework-ios-imp.cpp";
      v24 = 1024;
      v25 = 2387;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectCreate: nowhere to return the object ID", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v19[0] = 0;
  v19[1] = 0;
  HALS_System::GetInstance(&v20, 0, v19);
  if (!v20)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v23 = "HALS_Framework-ios-imp.cpp";
      v24 = 1024;
      v25 = 2391;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectCreate: no system object", buf, 0x12u);
    }
    v17 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v17 = &off_1E69A1B30;
    v17[2] = 1852797029;
  }
  v9 = HALS_System::CopyPlugInByReferenceID(v20, a1);
  v10 = v9;
  if (!v9)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v23 = "HALS_Framework-ios-imp.cpp";
      v24 = 1024;
      v25 = 2395;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectCreate: no plug-in with given reference ID", buf, 0x12u);
    }
    v18 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v18 = &off_1E69A1B30;
    v18[2] = 560947818;
  }
  *a4 = (*(uint64_t (**)(HALS_ObjectMap *, uint64_t, const BOOL *, _QWORD))(*(_QWORD *)v9 + 280))(v9, a3, a2, 0);
  HALS_ObjectMap::ReleaseObject(v10, v11);
  v12 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return 0;
}

void sub_1B5891740(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B5891758(void *a1, int a2, uint64_t a3, uint64_t a4, ...)
{
  _DWORD *v4;
  va_list va;

  va_start(va, a4);
  if (a2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
    __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      if (v4)
        *v4 = 0;
    }
    else if (v4)
    {
      *v4 = 0;
    }
    __cxa_end_catch();
    JUMPOUT(0x1B5891538);
  }
  JUMPOUT(0x1B5891748);
}

void sub_1B58917EC()
{
  JUMPOUT(0x1B5891748);
}

uint64_t AudioObjectsPublishedAndDied(HALS_ObjectMap *a1, const BOOL *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  HALS_ObjectMap *v13;
  HALS_ObjectMap *v14;
  HALS_Object *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  NSObject *v20;
  const char *v21;
  _DWORD *exception;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25[2];
  HALS_System *v26;
  std::__shared_weak_count *v27;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if ((AMCP::Feature_Flags::access_run_new_hal(0, a2) & 1) != 0)
    return 1970171760;
  if (!AllowHALClientsInThisProcess())
    return 560033144;
  if ((_DWORD)a3 && !a4)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_23;
    *(_DWORD *)buf = 136315394;
    v29 = "HALS_Framework-ios-imp.cpp";
    v30 = 1024;
    v31 = 2464;
    v20 = MEMORY[0x1E0C81028];
    v21 = "%25s:%-5d  AudioObjectCreate: the number of published objects doesn't match the array size";
    goto LABEL_22;
  }
  if ((_DWORD)a5 && !a6)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_23;
    *(_DWORD *)buf = 136315394;
    v29 = "HALS_Framework-ios-imp.cpp";
    v30 = 1024;
    v31 = 2465;
    v20 = MEMORY[0x1E0C81028];
    v21 = "%25s:%-5d  AudioObjectCreate: the number of dead objects doesn't match the array size";
LABEL_22:
    _os_log_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, v21, buf, 0x12u);
LABEL_23:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  v25[0] = 0;
  v25[1] = 0;
  HALS_System::GetInstance(&v26, 0, v25);
  if (!v26)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v29 = "HALS_Framework-ios-imp.cpp";
      v30 = 1024;
      v31 = 2469;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectCreate: no system object", buf, 0x12u);
    }
    v23 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v23 = &off_1E69A1B30;
    v23[2] = 1852797029;
  }
  v13 = HALS_System::CopyPlugInByReferenceID(v26, a1);
  v14 = v13;
  if (!v13)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v29 = "HALS_Framework-ios-imp.cpp";
      v30 = 1024;
      v31 = 2473;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectCreate: no plug-in with given reference ID", buf, 0x12u);
    }
    v24 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v24 = &off_1E69A1B30;
    v24[2] = 560947818;
  }
  (*(void (**)(HALS_ObjectMap *, const BOOL *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v13 + 288))(v13, a2, a3, a4, a5, a6, 0);
  HALS_ObjectMap::ReleaseObject(v14, v15);
  v16 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return 0;
}

void sub_1B5891B6C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B5891B84(void *a1, int a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  if (a2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B5891908);
  }
  JUMPOUT(0x1B5891B74);
}

void sub_1B5891C08()
{
  JUMPOUT(0x1B5891B74);
}

uint64_t AudioHardwareClaimAudioDeviceID(uint64_t a1, const BOOL *a2)
{
  AMCP::Feature_Flags::access_run_new_hal(0, a2);
  return 1970171760;
}

uint64_t AudioHardwareDevicesCreated(uint64_t a1, const BOOL *a2)
{
  AMCP::Feature_Flags::access_run_new_hal(0, a2);
  return 1970171760;
}

uint64_t AudioHardwareDevicesDied(uint64_t a1, const BOOL *a2)
{
  AMCP::Feature_Flags::access_run_new_hal(0, a2);
  return 1970171760;
}

uint64_t AudioHardwareDevicePropertyChanged(uint64_t a1, const BOOL *a2)
{
  AMCP::Feature_Flags::access_run_new_hal(0, a2);
  return 1970171760;
}

uint64_t AudioHardwareClaimAudioStreamID(uint64_t a1, const BOOL *a2)
{
  AMCP::Feature_Flags::access_run_new_hal(0, a2);
  return 1970171760;
}

uint64_t AudioHardwareStreamsCreated(uint64_t a1, const BOOL *a2)
{
  AMCP::Feature_Flags::access_run_new_hal(0, a2);
  return 1970171760;
}

uint64_t AudioHardwareStreamsDied(uint64_t a1, const BOOL *a2)
{
  AMCP::Feature_Flags::access_run_new_hal(0, a2);
  return 1970171760;
}

uint64_t AudioHardwareStreamPropertyChanged(uint64_t a1, const BOOL *a2)
{
  AMCP::Feature_Flags::access_run_new_hal(0, a2);
  return 1970171760;
}

void sub_1B5891E20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B5891FC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B5892178(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B58922E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  const void **v19;

  mcp_applesauce::CF::PropertyListRef::~PropertyListRef(v19);

  _Unwind_Resume(a1);
}

void sub_1B5892430(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B5892520(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B58927F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B5892BB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_32c101_ZTSKZ87__Core_Audio_Driver_Host_Proxy_driver_request_config_change_change_action_change_info__E4__13(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[2];
  a1[2] = result;
  return result;
}

__n128 __copy_helper_block_ea8_32c101_ZTSKZ87__Core_Audio_Driver_Host_Proxy_driver_request_config_change_change_action_change_info__E4__12(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[2];
  a1[2] = result;
  return result;
}

void sub_1B5892DD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c73_ZTSKZ59__Core_Audio_Driver_Host_Proxy_delete_from_driver_storage__E4__11(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

uint64_t __copy_helper_block_ea8_32c73_ZTSKZ59__Core_Audio_Driver_Host_Proxy_delete_from_driver_storage__E4__10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void sub_1B5892FEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c83_ZTSKZ70__Core_Audio_Driver_Host_Proxy_write_to_driver_storage_property_list__E3__9(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

uint64_t __copy_helper_block_ea8_32c83_ZTSKZ70__Core_Audio_Driver_Host_Proxy_write_to_driver_storage_property_list__E3__8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void sub_1B5893204(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_32c70_ZTSKZ57__Core_Audio_Driver_Host_Proxy_copy_from_driver_storage__E3__7(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t __copy_helper_block_ea8_32c70_ZTSKZ57__Core_Audio_Driver_Host_Proxy_copy_from_driver_storage__E3__6(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void sub_1B589342C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c87_ZTSKZ74__Core_Audio_Driver_Host_Proxy_driver_properties_changed_properties_data__E3__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

__n128 __copy_helper_block_ea8_32c87_ZTSKZ74__Core_Audio_Driver_Host_Proxy_driver_properties_changed_properties_data__E3__4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t Host_Interface::properties_changed(Host_Interface *this, const AudioServerPlugInHostInterface *a2, unsigned int a3, uint64_t a4, const AudioObjectPropertyAddress *a5)
{
  void *v7;
  uint64_t v8;

  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D58]), "initWithBytes:length:", a4, 12 * a3);
  v8 = objc_msgSend(*((id *)this + 5), "driver_properties_changed:properties_data:", a2, v7);

  return v8;
}

uint64_t Host_Interface::copy_from_storage(Host_Interface *this, CFTypeRef cf, const __CFString *a3, const void **a4)
{
  void *v6;
  CFTypeRef cfa;
  CFTypeRef v9;

  v6 = (void *)*((_QWORD *)this + 5);
  if (cf)
    CFRetain(cf);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cfa, cf);
  if (v6)
    objc_msgSend(v6, "copy_from_driver_storage:", &cfa);
  else
    v9 = 0;
  if (cfa)
    CFRelease(cfa);
  if (a3)
  {
    a3->isa = (void *)v9;
  }
  else if (v9)
  {
    CFRelease(v9);
  }
  return 0;
}

uint64_t Host_Interface::write_to_storage(Host_Interface *this, CFTypeRef cf, const __CFString *a3, const void *a4)
{
  void *v6;
  uint64_t v7;
  CFTypeRef cfa;
  CFTypeRef v10;

  v6 = (void *)*((_QWORD *)this + 5);
  if (cf)
    CFRetain(cf);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v10, cf);
  mcp_applesauce::CF::PropertyListRef::from_get((mcp_applesauce::CF::PropertyListRef *)&cfa, a3);
  v7 = objc_msgSend(v6, "write_to_driver_storage:property_list:", &v10, &cfa);
  if (cfa)
    CFRelease(cfa);
  if (v10)
    CFRelease(v10);
  return v7;
}

uint64_t Host_Interface::delete_from_storage(Host_Interface *this, CFTypeRef cf, const __CFString *a3)
{
  void *v4;
  uint64_t v5;
  CFTypeRef cfa;

  v4 = (void *)*((_QWORD *)this + 5);
  if (cf)
    CFRetain(cf);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cfa, cf);
  v5 = objc_msgSend(v4, "delete_from_driver_storage:", &cfa);
  if (cfa)
    CFRelease(cfa);
  return v5;
}

uint64_t Host_Interface::request_device_configuration_change(Host_Interface *this, const AudioServerPlugInHostInterface *a2, uint64_t a3, uint64_t a4, void *a5)
{
  return objc_msgSend(*((id *)this + 5), "driver_request_config_change:change_action:change_info:", a2, a3, a4);
}

void std::__shared_ptr_emplace<Host_Interface>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6970110;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Host_Interface>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6970110;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<Host_Interface>::__on_zero_shared(uint64_t a1)
{

}

void std::vector<std::pair<std::string const,HALS_IOEngineInfo const*>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0)
          operator delete(*(v4 - 4));
        v4 -= 4;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<HALB_CaptureFile>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<HALB_CaptureFile>>,0>(uint64_t a1)
{
  std::unique_ptr<HALB_CaptureFile>::reset[abi:ne180100]((ca::concurrent::details::service_thread ****)(a1 + 24), 0);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

ca::concurrent::details::service_thread ***std::unique_ptr<HALB_CaptureFile>::reset[abi:ne180100](ca::concurrent::details::service_thread ****a1, ca::concurrent::details::service_thread ***a2)
{
  ca::concurrent::details::service_thread ***result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    HALB_CaptureFile::~HALB_CaptureFile(result);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

BOOL HALS_DSPCaptureFiles::isDSPCaptureEnabled(HALS_DSPCaptureFiles *this)
{
  std::__shared_weak_count *v1;
  _BOOL8 v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v19 = 0;
  v20 = 0;
  HALS_System::GetInstance(&v21, 0, &v19);
  if (v21)
  {
    v15 = 0;
    v16 = 0;
    HALS_System::GetInstance(&v17, 0, &v15);
    v1 = v18;
    v2 = *(_BYTE *)(v17 + 1465) != 0;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
        std::__shared_weak_count::__release_weak(v1);
      }
    }
    v5 = v16;
    if (v16)
    {
      v6 = (unint64_t *)&v16->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else
  {
    v2 = 0;
  }
  v8 = v22;
  if (v22)
  {
    v9 = (unint64_t *)&v22->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v20;
  if (v20)
  {
    v12 = (unint64_t *)&v20->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v2;
}

void sub_1B5893980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v13 - 32);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void HALS_DSPCaptureFiles::CreateDSPCaptureFiles(HALS_IODSPInfo const&,std::optional<float>)::$_0::operator()(uint64_t a1, uint64_t **a2, int a3, uint64_t a4, _QWORD *a5)
{
  _BOOL4 v8;
  __int128 v9;
  _DWORD *v10;
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void **v15;
  void **v16;
  uint64_t v17;
  char *v18;
  uint64_t **v19;
  uint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  _OWORD v23[2];
  uint64_t v24;
  void **v25;
  _BOOL8 v26;
  void **v27;
  void **v28;
  unint64_t *v29;
  uint64_t (*v30[5])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v30[4] = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x1E0C80C00];
  v8 = a3 != 0;
  v9 = *(_OWORD *)(a4 + 72);
  v23[0] = *(_OWORD *)(a4 + 56);
  v23[1] = v9;
  v24 = *(_QWORD *)(a4 + 88);
  if (*(_BYTE *)(a1 + 4))
    *(double *)v23 = *(float *)a1;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  HALB_CaptureFile_NameBuilder::Add<(HALB_CaptureFile_NameBuilder_Label)0>(&v20, (uint64_t)a5);
  HALB_CaptureFile_NameBuilder::Add<(HALB_CaptureFile_NameBuilder_Label)3>(&v20, (unsigned int *)(a4 + 96));
  v10 = v21;
  if ((unint64_t)v21 >= v22)
  {
    v12 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v21 - v20) >> 3);
    if (v12 + 1 > 0x666666666666666)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v13 = 0x999999999999999ALL * ((uint64_t)(v22 - v20) >> 3);
    if (v13 <= v12 + 1)
      v13 = v12 + 1;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - v20) >> 3) >= 0x333333333333333)
      v14 = 0x666666666666666;
    else
      v14 = v13;
    v29 = &v22;
    v15 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v14);
    v16 = &v15[5 * v12];
    v25 = v15;
    v26 = (_BOOL8)v16;
    v28 = &v15[5 * v17];
    v30[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))std::__any_imp::_SmallHandler<HALB_CaptureFile_DSPState>::__handle[abi:ne180100];
    v30[1] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v8;
    *(_DWORD *)v16 = 6;
    v16[1] = std::__any_imp::_SmallHandler<HALB_CaptureFile_DSPState>::__handle[abi:ne180100];
    v16[2] = 0;
    *((_DWORD *)v16 + 4) = v8;
    std::any::reset[abi:ne180100](v30);
    v27 = v16 + 5;
    std::vector<HALB_CaptureFile_NameBuilder::ComponentBase>::__swap_out_circular_buffer(&v20, &v25);
    v11 = v21;
    std::__split_buffer<HALB_CaptureFile_NameBuilder::ComponentBase>::~__split_buffer((uint64_t)&v25);
  }
  else
  {
    v25 = (void **)std::__any_imp::_SmallHandler<HALB_CaptureFile_DSPState>::__handle[abi:ne180100];
    v26 = v8;
    *v21 = 6;
    *((_QWORD *)v10 + 1) = std::__any_imp::_SmallHandler<HALB_CaptureFile_DSPState>::__handle[abi:ne180100];
    *((_QWORD *)v10 + 2) = 0;
    v10[4] = v8;
    std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&v25);
    v11 = v10 + 10;
  }
  v21 = v11;
  v18 = (char *)operator new();
  HALB_CaptureFile::HALB_CaptureFile(v18, &v20, (uint64_t)v23, 1);
  v25 = (void **)v18;
  v19 = std::__tree<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, a5, (uint64_t)a5);
  std::unique_ptr<HALB_CaptureFile>::reset[abi:ne180100]((ca::concurrent::details::service_thread ****)v19 + 7, (ca::concurrent::details::service_thread ***)v18);
  v25 = (void **)&v20;
  std::vector<HALB_CaptureFile_NameBuilder::ComponentBase>::__destroy_vector::operator()[abi:ne180100](&v25);
}

void sub_1B5893BC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::unique_ptr<HALB_CaptureFile>::reset[abi:ne180100]((ca::concurrent::details::service_thread ****)va1, 0);
  *(_QWORD *)(v2 - 88) = va;
  std::vector<HALB_CaptureFile_NameBuilder::ComponentBase>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 88));
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::pair<std::string const,HALS_IOEngineInfo const*>>::~__split_buffer(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string const,HALS_IOEngineInfo const*>>,std::reverse_iterator<std::pair<std::string const,HALS_IOEngineInfo const*>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      v3 += 32;
    }
  }
  return a1;
}

uint64_t *HALB_CaptureFile_NameBuilder::Add<(HALB_CaptureFile_NameBuilder_Label)0>(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;

  v4 = a1 + 2;
  v5 = a1[2];
  v6 = a1[1];
  if (v6 >= v5)
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - *a1) >> 3);
    if (v8 + 1 > 0x666666666666666)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    v10 = 2 * v9;
    if (2 * v9 <= v8 + 1)
      v10 = v8 + 1;
    if (v9 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v10;
    v18 = v4;
    if (v11)
      v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v11);
    else
      v12 = 0;
    v14 = v11;
    v15 = v11 + 40 * v8;
    v17 = v11 + 40 * v12;
    std::construct_at[abi:ne180100]<HALB_CaptureFile_NameBuilder::ComponentBase,HALB_CaptureFile_NameBuilder_Label,std::string const&,HALB_CaptureFile_NameBuilder::ComponentBase*>(v15, 0, a2);
    v16 = v15 + 40;
    std::vector<HALB_CaptureFile_NameBuilder::ComponentBase>::__swap_out_circular_buffer(a1, &v14);
    v7 = a1[1];
    std::__split_buffer<HALB_CaptureFile_NameBuilder::ComponentBase>::~__split_buffer((uint64_t)&v14);
  }
  else
  {
    std::construct_at[abi:ne180100]<HALB_CaptureFile_NameBuilder::ComponentBase,HALB_CaptureFile_NameBuilder_Label,std::string const&,HALB_CaptureFile_NameBuilder::ComponentBase*>(a1[1], 0, a2);
    v7 = v6 + 40;
    a1[1] = v6 + 40;
  }
  a1[1] = v7;
  return a1;
}

void sub_1B5893DF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<HALB_CaptureFile_NameBuilder::ComponentBase>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *HALB_CaptureFile_NameBuilder::Add<(HALB_CaptureFile_NameBuilder_Label)3>(uint64_t *a1, unsigned int *a2)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(int);
  char *v14;
  uint64_t v15;
  unsigned int v16;
  void (*v18)(int);
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  uint64_t (*v23[5])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v23[4] = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x1E0C80C00];
  v4 = a1 + 2;
  v5 = a1[2];
  v6 = a1[1];
  if (v6 >= v5)
  {
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - *a1) >> 3);
    if (v9 + 1 > 0x666666666666666)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x333333333333333)
      v12 = 0x666666666666666;
    else
      v12 = v11;
    v22 = v4;
    v13 = (void (*)(int))std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v12);
    v14 = (char *)v13 + 40 * v9;
    v18 = v13;
    v19 = (unint64_t)v14;
    v21 = (char *)v13 + 40 * v15;
    v16 = *a2;
    v23[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))std::__any_imp::_SmallHandler<unsigned int>::__handle[abi:ne180100];
    v23[1] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v16;
    *(_DWORD *)v14 = 3;
    *((_QWORD *)v14 + 1) = std::__any_imp::_SmallHandler<unsigned int>::__handle[abi:ne180100];
    *((_QWORD *)v14 + 2) = 0;
    *((_DWORD *)v14 + 4) = v16;
    std::any::reset[abi:ne180100](v23);
    v20 = v14 + 40;
    std::vector<HALB_CaptureFile_NameBuilder::ComponentBase>::__swap_out_circular_buffer(a1, &v18);
    v8 = a1[1];
    std::__split_buffer<HALB_CaptureFile_NameBuilder::ComponentBase>::~__split_buffer((uint64_t)&v18);
  }
  else
  {
    v7 = *a2;
    v18 = std::__any_imp::_SmallHandler<unsigned int>::__handle[abi:ne180100];
    v19 = v7;
    *(_DWORD *)v6 = 3;
    *(_QWORD *)(v6 + 8) = std::__any_imp::_SmallHandler<unsigned int>::__handle[abi:ne180100];
    *(_QWORD *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 16) = v7;
    std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&v18);
    v8 = v6 + 40;
  }
  a1[1] = v8;
  return a1;
}

uint64_t **std::__tree<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD v16[2];
  char v17;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v10 = v5 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) == 0)
          break;
        v5 = *v7;
        v8 = v7;
        if (!*v7)
          goto LABEL_7;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2) & 0x80) == 0)
        return v7;
      v8 = v7 + 1;
      v5 = v7[1];
      if (!v5)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v11 = operator new(0x40uLL);
    v16[0] = v11;
    v16[1] = v6;
    v17 = 0;
    v12 = (std::string *)(v11 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v11[6] = *(_QWORD *)(a3 + 16);
    }
    v11[7] = 0;
    v17 = 1;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = v7;
    *v8 = v11;
    v13 = (uint64_t *)**a1;
    v14 = v11;
    if (v13)
    {
      *a1 = v13;
      v14 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,void *>>>>::reset[abi:ne180100]((uint64_t)v16);
  }
  return (uint64_t **)v11;
}

void sub_1B58940AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<HALB_CaptureFile_NameBuilder::ComponentBase>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 40;
        std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v4 - 4);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t (**std::any::reset[abi:ne180100](uint64_t (**result)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  if (*result)
    return (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*result)(0, result, 0, 0, 0);
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<HALB_CaptureFile>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__any_imp::_SmallHandler<HALB_CaptureFile_DSPState>::__handle[abi:ne180100](int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B58941E0()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

uint64_t *std::vector<HALB_CaptureFile_NameBuilder::ComponentBase>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v8 = *(_DWORD *)(v4 + v7 - 40);
      *(_QWORD *)(v6 + v7 - 32) = 0;
      v9 = v6 + v7 - 32;
      *(_DWORD *)(v9 - 8) = v8;
      *(_QWORD *)(v9 + 8) = 0;
      v10 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + v7 - 32);
      if (v10)
        result = (uint64_t *)v10(2, v4 + v7 - 32);
      v7 -= 40;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v11 = *v3;
  *v3 = v6;
  a2[1] = v11;
  v12 = v3[1];
  v3[1] = a2[2];
  a2[2] = v12;
  v13 = v3[2];
  v3[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<HALB_CaptureFile_NameBuilder::ComponentBase>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(i - 32));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__any_imp::_SmallHandler<unsigned int>::__handle[abi:ne180100](int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B58943AC()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

uint64_t std::construct_at[abi:ne180100]<HALB_CaptureFile_NameBuilder::ComponentBase,HALB_CaptureFile_NameBuilder_Label,std::string const&,HALB_CaptureFile_NameBuilder::ComponentBase*>(uint64_t a1, int a2, uint64_t a3)
{
  std::string *v5;
  void (*v7)(int);
  std::string v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8.__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v8 = *(std::string *)a3;
  v7 = std::__any_imp::_SmallHandler<std::string>::__handle[abi:ne180100];
  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = (std::string *)(a1 + 16);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v5, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)&v8.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)&v8.__r_.__value_.__l + 2);
  }
  *(_QWORD *)(a1 + 8) = std::__any_imp::_SmallHandler<std::string>::__handle[abi:ne180100];
  std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&v7);
  return a1;
}

void sub_1B5894510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))va);
  _Unwind_Resume(a1);
}

void std::__any_imp::_SmallHandler<std::string>::__handle[abi:ne180100](int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B5894564()
{
  uint64_t v0;
  uint64_t result;

  if (*(char *)(v0 + 31) < 0)
    operator delete(*(void **)(v0 + 8));
  result = 0;
  *(_QWORD *)v0 = 0;
  return result;
}

void HALS_DSPCaptureFiles::WriteBufferToCaptureFile(uint64_t a1, unsigned int a2, unsigned int *a3, _OWORD *a4, _OWORD *a5, uint64_t **a6)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  HALS_IOClock *v21;
  unsigned int *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char v26;
  _QWORD *v27;
  uint64_t **v28;
  double v31;
  unint64_t v32[2];
  _OWORD v33[4];
  _OWORD v34[5];

  v6 = a4[1];
  v34[0] = *a4;
  v34[1] = v6;
  v7 = a4[3];
  v34[2] = a4[2];
  v34[3] = v7;
  v8 = a5[1];
  v33[0] = *a5;
  v33[1] = v8;
  v9 = a5[3];
  v33[2] = a5[2];
  v33[3] = v9;
  if (a3)
  {
    v12 = *(_QWORD *)(a1 + 48);
    v13 = (*(_QWORD *)(a1 + 56) - v12) >> 5 >= (unint64_t)*a3 ? *a3 : (*(_QWORD *)(a1 + 56) - v12) >> 5;
    if (v13)
    {
      v14 = 0;
      v15 = a6 + 1;
      do
      {
        v16 = *(_QWORD *)(a1 + 48);
        if (v14 >= (*(_QWORD *)(a1 + 56) - v16) >> 5)
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        v17 = v16 + 32 * v14;
        v18 = *(_QWORD *)(v17 + 24);
        v19 = *(unsigned __int8 *)(v17 + 23);
        if ((v19 & 0x80u) != 0)
          v19 = *(_QWORD *)(v17 + 8);
        if (v19)
          v20 = v18 == 0;
        else
          v20 = 1;
        if (!v20)
        {
          if (*(_QWORD *)(v18 + 288))
          {
            if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v18 + 8) + 680))(*(_QWORD *)(v18 + 8)))
            {
              v21 = *(HALS_IOClock **)(v18 + 288);
              if (*((_DWORD *)v21 + 24))
              {
                v31 = 0.0;
                v32[0] = 0;
                v32[1] = 0;
                HALS_IOClock::GetRaw0Time(v21, &v31, v32);
                v22 = &a3[4 * v14];
                v23 = *((_QWORD *)v22 + 2);
                if (v23)
                {
                  if (v22[3])
                  {
                    v24 = (_QWORD *)*v15;
                    if (*v15)
                    {
                      v25 = v15;
                      do
                      {
                        v26 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v24 + 4, (_QWORD *)v17);
                        if (v26 >= 0)
                          v27 = v24;
                        else
                          v27 = v24 + 1;
                        if (v26 >= 0)
                          v25 = v24;
                        v24 = (_QWORD *)*v27;
                      }
                      while (*v27);
                      if (v25 != v15
                        && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v17, v25 + 4) & 0x80) == 0)
                      {
                        v28 = std::__tree<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a6, (_QWORD *)v17, v17);
                        HALB_CaptureFile::Write((unsigned int *)v28[7], (uint64_t)v34, (double *)v33, (uint64_t)&v31, a2, v23);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v14;
      }
      while (v14 != v13);
    }
  }
}

void ResamplerInitLocker::~ResamplerInitLocker(ResamplerInitLocker *this)
{
  pthread_mutex_unlock(&sInitLocker);
}

void HALS_IOUAControl::Activate(HALS_IOUAControl *this)
{
  HALS_Object *v2;

  HALS_IOUAControl::RefreshCache(this);
  if (!*((_DWORD *)this + 15))
    (*(void (**)(char *))(*((_QWORD *)this + 9) + 24))((char *)this + 72);
  HALS_Object::Activate(this, v2);
}

void HALS_IOUAControl::~HALS_IOUAControl(HALS_IOUAControl *this, HALS_Object *a2)
{
  uint64_t v3;

  HALS_IOUAObject::~HALS_IOUAObject((HALS_IOUAControl *)((char *)this + 72), a2);
  *(_QWORD *)this = off_1E6995A68;
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  HALS_Object::~HALS_Object(this);
}

{
  uint64_t v3;

  HALS_IOUAObject::~HALS_IOUAObject((HALS_IOUAControl *)((char *)this + 72), a2);
  *(_QWORD *)this = off_1E6995A68;
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  HALS_Object::~HALS_Object(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t HALS_IOUAControl::_Deactivate(uint64_t this)
{
  *(_DWORD *)(this + 8) = 0;
  return this;
}

uint64_t HALS_IOUAControl::HasProperty(HALS_IOUAControl *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  uint64_t mSelector;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _BOOL8 HasProperty;
  unint64_t *v13;
  unint64_t v14;

  mSelector = a3->mSelector;
  if ((_DWORD)mSelector == 1668641652)
    return *((_QWORD *)this + 13) != *((_QWORD *)this + 12);
  if ((_DWORD)mSelector == 1851878764 || (_DWORD)mSelector == 1819173229)
  {
    v7 = *((_QWORD *)this + 10);
    v8 = *(_QWORD *)(v7 + 792);
    v9 = *(std::__shared_weak_count **)(v7 + 800);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    HasProperty = HALS_IOUAUCDriver::GetHasProperty((HALS_IOUAUCDriver *)*(unsigned int *)(v8 + 4), a3, *((_DWORD *)this + 22));
    if (v9)
    {
      v13 = (unint64_t *)&v9->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    return HasProperty;
  }
  if (HALS_Control::HasProperty((uint64_t)this, a2, (int *)a3))
    return 1;
  return (*(uint64_t (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, mSelector);
}

void sub_1B5894A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOUAControl::IsPropertySettable(HALS_IOUAControl *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  const AudioObjectPropertyAddress *v8;
  HALS_Client *v9;

  if (a3->mSelector == 1668641652)
    return 0;
  if (HALS_Control::HasProperty((uint64_t)this, a2, (int *)a3))
    return HALS_Control::IsPropertySettable((uint64_t)this, a2, (int *)a3);
  return HALS_IOUAObject::IsPropertySettable((HALS_IOUAControl *)((char *)this + 72), a3, v8, v9);
}

uint64_t HALS_IOUAControl::GetPropertyDataSize(HALS_IOUAControl *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, const void *a5, HALS_Client *a6)
{
  AudioObjectPropertySelector mSelector;
  uint64_t PropertySize;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  const AudioObjectPropertyAddress *v20;
  uint64_t v21;
  const void *v22;
  HALS_Client *v23;

  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1935892840)
  {
    if (mSelector != 1935893353 && mSelector != 1935892841)
      goto LABEL_19;
LABEL_10:
    v12 = *((_QWORD *)this + 10);
    v13 = *(_QWORD *)(v12 + 792);
    v14 = *(std::__shared_weak_count **)(v12 + 800);
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v13 + 4), a3, *((_DWORD *)this + 22), a5, a4);
    if (v14)
    {
      v17 = (unint64_t *)&v14->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    return PropertySize;
  }
  if (mSelector == 1651272546)
    goto LABEL_10;
  if (mSelector == 1668641652)
    return 96;
LABEL_19:
  if (HALS_Control::HasProperty((uint64_t)this, a2, (int *)a3))
    return HALS_Control::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
  else
    return HALS_IOUAObject::GetPropertyDataSize((HALS_IOUAControl *)((char *)this + 72), a3, v20, v21, v22, v23);
}

void sub_1B5894C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void HALS_IOUAControl::GetPropertyData(HALS_IOUAControl *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, AudioObjectPropertyAddress *a5, char *a6, unsigned int a7, _DWORD *a8, HALS_Client *a9)
{
  signed int mSelector;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  void *v78;
  uint64_t v79;
  const void *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  unint64_t *v85;
  std::runtime_error *v86;
  std::runtime_error *exception;
  CFTypeRef cf;
  _BYTE buf[18];
  uint64_t v90;
  __int128 v91;

  v90 = *MEMORY[0x1E0C80C00];
  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1818457189)
  {
    if (mSelector <= 1818453105)
    {
      if (mSelector <= 1651272547)
      {
        if (mSelector != 1650685548)
        {
          v35 = 1651272546;
LABEL_58:
          if (mSelector != v35)
            goto LABEL_123;
          goto LABEL_59;
        }
        if (!a4)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_IOUAControl.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 216;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOUAControl::GetPropertyData: bad property data size for kAudioBooleanControlPropertyValue", buf, 0x12u);
          }
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "kAudioHardwareBadPropertySizeError");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        if (*((_DWORD *)this + 5) != 1702259059)
        {
          v81 = *((_QWORD *)this + 10);
          v82 = *(_QWORD *)(v81 + 792);
          v30 = *(std::__shared_weak_count **)(v81 + 800);
          cf = (CFTypeRef)a4;
          *(_QWORD *)buf = v82;
          *(_QWORD *)&buf[8] = v30;
          if (v30)
          {
            p_shared_owners = (unint64_t *)&v30->__shared_owners_;
            do
              v84 = __ldxr(p_shared_owners);
            while (__stxr(v84 + 1, p_shared_owners));
          }
          HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v82 + 4), a3, *((_DWORD *)this + 22), a8, a7, a6, (unint64_t *)&cf);
          if (!v30)
            goto LABEL_86;
          v85 = (unint64_t *)&v30->__shared_owners_;
          do
            v34 = __ldaxr(v85);
          while (__stlxr(v34 - 1, v85));
          goto LABEL_84;
        }
        *(_DWORD *)a6 = HALS_ReferenceStreamControlPropertyHandler::GetReferenceStreamControlPropertyData(*(HALS_ReferenceStreamControlPropertyHandler **)(*((_QWORD *)this + 8) + 8), a9);
        v26 = 4;
      }
      else
      {
        if (mSelector == 1651272548)
          goto LABEL_59;
        if (mSelector == 1668049771)
        {
          v68 = *((_QWORD *)this + 10);
          v69 = *(_QWORD *)(v68 + 792);
          v30 = *(std::__shared_weak_count **)(v68 + 800);
          cf = (CFTypeRef)a4;
          *(_QWORD *)buf = v69;
          *(_QWORD *)&buf[8] = v30;
          if (v30)
          {
            v70 = (unint64_t *)&v30->__shared_owners_;
            do
              v71 = __ldxr(v70);
            while (__stxr(v71 + 1, v70));
          }
          HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v69 + 4), a3, *((_DWORD *)this + 22), a8, a7, a6, (unint64_t *)&cf);
          if (!v30)
            goto LABEL_86;
          v72 = (unint64_t *)&v30->__shared_owners_;
          do
            v34 = __ldaxr(v72);
          while (__stlxr(v34 - 1, v72));
          goto LABEL_84;
        }
        if (mSelector != 1668641652)
          goto LABEL_123;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 2) >= a4 / 0xCuLL)
          v19 = a4 / 0xCuLL;
        else
          v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 2);
        if (v19)
        {
          v20 = 0;
          v21 = 0;
          do
          {
            v22 = *((_QWORD *)this + 12);
            if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 13) - v22) >> 2) > v21)
            {
              v23 = &a6[v20];
              v24 = (uint64_t *)(v22 + v20);
              v25 = *v24;
              *((_DWORD *)v23 + 2) = *((_DWORD *)v24 + 2);
              *(_QWORD *)v23 = v25;
            }
            ++v21;
            v20 += 12;
          }
          while (12 * v19 != v20);
        }
        v26 = 12 * v19;
      }
      a5->mSelector = v26;
      return;
    }
    if (mSelector <= 1818453109)
    {
      if (mSelector == 1818453106)
        goto LABEL_78;
      if (mSelector != 1818453107)
        goto LABEL_123;
      if (a4 >= 4 && a7 >= 4)
        *(_DWORD *)a6 = *a8;
      v48 = *((_QWORD *)this + 10);
      v49 = *(_QWORD *)(v48 + 792);
      v30 = *(std::__shared_weak_count **)(v48 + 800);
      cf = (CFTypeRef)a4;
      *(_QWORD *)buf = v49;
      *(_QWORD *)&buf[8] = v30;
      if (v30)
      {
        v50 = (unint64_t *)&v30->__shared_owners_;
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
      }
      HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v49 + 4), a3, *((_DWORD *)this + 22), a8, a7, a6, (unint64_t *)&cf);
      if (!v30)
        goto LABEL_86;
      v52 = (unint64_t *)&v30->__shared_owners_;
      do
        v34 = __ldaxr(v52);
      while (__stlxr(v34 - 1, v52));
    }
    else
    {
      if (mSelector == 1818453110)
        goto LABEL_78;
      if (mSelector != 1818456932)
      {
        v18 = 1818456950;
LABEL_38:
        if (mSelector != v18)
        {
LABEL_123:
          if (HALS_Control::HasProperty((uint64_t)this, a2, (int *)a3))
            HALS_Control::GetPropertyData((uint64_t)this, a2, a3, a4, &a5->mSelector, (uint64_t *)a6, a7, a8, a9);
          else
            HALS_IOUAObject::GetPropertyData((HALS_IOUAControl *)((char *)this + 72), &a3->mSelector, a5, (AMCP::Log::Scope_Registry **)a6, a8, v78, v79, v80, a9);
          return;
        }
        goto LABEL_78;
      }
      if (a4 >= 4 && a7 >= 4)
        *(_DWORD *)a6 = *a8;
      v73 = *((_QWORD *)this + 10);
      v74 = *(_QWORD *)(v73 + 792);
      v30 = *(std::__shared_weak_count **)(v73 + 800);
      cf = (CFTypeRef)a4;
      *(_QWORD *)buf = v74;
      *(_QWORD *)&buf[8] = v30;
      if (v30)
      {
        v75 = (unint64_t *)&v30->__shared_owners_;
        do
          v76 = __ldxr(v75);
        while (__stxr(v76 + 1, v75));
      }
      HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v74 + 4), a3, *((_DWORD *)this + 22), a8, a7, a6, (unint64_t *)&cf);
      if (!v30)
        goto LABEL_86;
      v77 = (unint64_t *)&v30->__shared_owners_;
      do
        v34 = __ldaxr(v77);
      while (__stlxr(v34 - 1, v77));
    }
    goto LABEL_84;
  }
  if (mSelector <= 1935893352)
  {
    if (mSelector > 1851878763)
    {
      if (mSelector == 1851878764 || mSelector == 1852400499)
        goto LABEL_45;
      if (mSelector != 1935892841)
        goto LABEL_123;
      v28 = *((_QWORD *)this + 10);
      v29 = *(_QWORD *)(v28 + 792);
      v30 = *(std::__shared_weak_count **)(v28 + 800);
      cf = (CFTypeRef)a4;
      *(_QWORD *)buf = v29;
      *(_QWORD *)&buf[8] = v30;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v29 + 4), a3, *((_DWORD *)this + 22), a8, a7, a6, (unint64_t *)&cf);
      if (v30)
      {
        v33 = (unint64_t *)&v30->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        goto LABEL_84;
      }
LABEL_86:
      a5->mSelector = cf;
      return;
    }
    if (mSelector != 1818457190)
    {
      if (mSelector != 1819173229)
        goto LABEL_123;
      goto LABEL_45;
    }
    v63 = *((_QWORD *)this + 10);
    v64 = *(_QWORD *)(v63 + 792);
    v30 = *(std::__shared_weak_count **)(v63 + 800);
    cf = (CFTypeRef)a4;
    *(_QWORD *)buf = v64;
    *(_QWORD *)&buf[8] = v30;
    if (v30)
    {
      v65 = (unint64_t *)&v30->__shared_owners_;
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
    }
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v64 + 4), a3, *((_DWORD *)this + 22), a8, a7, a6, (unint64_t *)&cf);
    if (!v30)
      goto LABEL_86;
    v67 = (unint64_t *)&v30->__shared_owners_;
    do
      v34 = __ldaxr(v67);
    while (__stlxr(v34 - 1, v67));
LABEL_84:
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
    goto LABEL_86;
  }
  if (mSelector > 1935962741)
  {
    if (mSelector != 1935962742)
    {
      if (mSelector != 1936745315)
      {
        v35 = 1936745334;
        goto LABEL_58;
      }
LABEL_59:
      v43 = *((_QWORD *)this + 10);
      v44 = *(_QWORD *)(v43 + 792);
      v30 = *(std::__shared_weak_count **)(v43 + 800);
      cf = (CFTypeRef)a4;
      *(_QWORD *)buf = v44;
      *(_QWORD *)&buf[8] = v30;
      if (v30)
      {
        v45 = (unint64_t *)&v30->__shared_owners_;
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v44 + 4), a3, *((_DWORD *)this + 22), a8, a7, a6, (unint64_t *)&cf);
      if (!v30)
        goto LABEL_86;
      v47 = (unint64_t *)&v30->__shared_owners_;
      do
        v34 = __ldaxr(v47);
      while (__stlxr(v34 - 1, v47));
      goto LABEL_84;
    }
LABEL_78:
    v53 = *((_QWORD *)this + 10);
    v54 = *(_QWORD *)(v53 + 792);
    v30 = *(std::__shared_weak_count **)(v53 + 800);
    cf = (CFTypeRef)a4;
    *(_QWORD *)buf = v54;
    *(_QWORD *)&buf[8] = v30;
    if (v30)
    {
      v55 = (unint64_t *)&v30->__shared_owners_;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v54 + 4), a3, *((_DWORD *)this + 22), a8, a7, a6, (unint64_t *)&cf);
    if (!v30)
      goto LABEL_86;
    v57 = (unint64_t *)&v30->__shared_owners_;
    do
      v34 = __ldaxr(v57);
    while (__stlxr(v34 - 1, v57));
    goto LABEL_84;
  }
  if (mSelector == 1935893353)
  {
    v58 = *((_QWORD *)this + 10);
    v59 = *(_QWORD *)(v58 + 792);
    v30 = *(std::__shared_weak_count **)(v58 + 800);
    cf = (CFTypeRef)a4;
    *(_QWORD *)buf = v59;
    *(_QWORD *)&buf[8] = v30;
    if (v30)
    {
      v60 = (unint64_t *)&v30->__shared_owners_;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v59 + 4), a3, *((_DWORD *)this + 22), a8, a7, a6, (unint64_t *)&cf);
    if (!v30)
      goto LABEL_86;
    v62 = (unint64_t *)&v30->__shared_owners_;
    do
      v34 = __ldaxr(v62);
    while (__stlxr(v34 - 1, v62));
    goto LABEL_84;
  }
  if (mSelector != 1935894894)
  {
    v18 = 1935962738;
    goto LABEL_38;
  }
LABEL_45:
  if (a4 <= 7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_IOUAControl.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 151;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInControl::GetPropertyData: bad property data size for kAudioObjectPropertyName", buf, 0x12u);
    }
    v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v86, "kAudioHardwareBadPropertySizeError");
    __cxa_throw(v86, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v36 = *((_QWORD *)this + 10);
  v37 = *(_QWORD *)(v36 + 792);
  v38 = *(std::__shared_weak_count **)(v36 + 800);
  *(_QWORD *)buf = v37;
  *(_QWORD *)&buf[8] = v38;
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  *(_QWORD *)&v91 = *((unsigned int *)this + 22);
  *((_QWORD *)&v91 + 1) = *(_QWORD *)&a3->mSelector;
  HALS_IOUAUCDriver::get_string_property((HALS_IOUAUCDriver *)&cf, v37, v91, (void *)a3->mElement, a8, a7);
  if (v38)
  {
    v41 = (unint64_t *)&v38->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  *(_QWORD *)a6 = CFRetain(cf);
  a5->mSelector = 8;
  if (cf)
    CFRelease(cf);
}

void sub_1B589560C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void HALS_IOUAControl::SetPropertyData(HALS_IOUAControl *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, const AudioObjectPropertyAddress *a5, uint64_t a6, void *a7, HALS_Client *a8)
{
  size_t v16;
  signed int mSelector;
  uint64_t v18;
  HALS_IOUAUCDriver *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  HALS_IOUAUCDriver *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  HALS_IOUAUCDriver *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  HALS_IOUAUCDriver *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  AudioObjectPropertySelector v40;
  HALS_ObjectMap *v41;
  HALS_Object *v42;
  uint64_t v43;
  HALS_IOUAUCDriver *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  HALS_IOUAUCDriver *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  HALS_IOUAUCDriver *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  unint64_t *v57;
  const void *v58;
  uint64_t v59;
  const void *v60;
  HALS_Client *v61;
  uint64_t v62;
  HALS_IOUAUCDriver *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::runtime_error *exception;
  _BYTE v70[18];
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v16 = a4;
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1818457189)
  {
    if (mSelector > 1935962741)
    {
      if (mSelector == 1936745334)
      {
        v53 = *((_QWORD *)this + 10);
        v54 = *(HALS_IOUAUCDriver **)(v53 + 792);
        v20 = *(std::__shared_weak_count **)(v53 + 800);
        *(_QWORD *)v70 = v54;
        *(_QWORD *)&v70[8] = v20;
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v56 = __ldxr(p_shared_owners);
          while (__stxr(v56 + 1, p_shared_owners));
        }
        HALS_IOUAUCDriver::SetPropertyData(v54, a3, *((_DWORD *)this + 22), a7, a6, a5, a4);
        if (v20)
        {
          v57 = (unint64_t *)&v20->__shared_owners_;
          do
            v24 = __ldaxr(v57);
          while (__stlxr(v24 - 1, v57));
          goto LABEL_63;
        }
        return;
      }
      if (mSelector == 1935962742)
      {
        v35 = *((_QWORD *)this + 10);
        v36 = *(HALS_IOUAUCDriver **)(v35 + 792);
        v20 = *(std::__shared_weak_count **)(v35 + 800);
        *(_QWORD *)v70 = v36;
        *(_QWORD *)&v70[8] = v20;
        if (v20)
        {
          v37 = (unint64_t *)&v20->__shared_owners_;
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
        }
        HALS_IOUAUCDriver::SetPropertyData(v36, a3, *((_DWORD *)this + 22), a7, a6, a5, a4);
        if (v20)
        {
          v39 = (unint64_t *)&v20->__shared_owners_;
          do
            v24 = __ldaxr(v39);
          while (__stlxr(v24 - 1, v39));
          goto LABEL_63;
        }
        return;
      }
    }
    else
    {
      if (mSelector == 1818457190)
      {
        v43 = *((_QWORD *)this + 10);
        v44 = *(HALS_IOUAUCDriver **)(v43 + 792);
        v20 = *(std::__shared_weak_count **)(v43 + 800);
        *(_QWORD *)v70 = v44;
        *(_QWORD *)&v70[8] = v20;
        if (v20)
        {
          v45 = (unint64_t *)&v20->__shared_owners_;
          do
            v46 = __ldxr(v45);
          while (__stxr(v46 + 1, v45));
        }
        HALS_IOUAUCDriver::SetPropertyData(v44, a3, *((_DWORD *)this + 22), a7, a6, a5, a4);
        if (v20)
        {
          v47 = (unint64_t *)&v20->__shared_owners_;
          do
            v24 = __ldaxr(v47);
          while (__stlxr(v24 - 1, v47));
          goto LABEL_63;
        }
        return;
      }
      if (mSelector == 1935893353)
      {
        v25 = *((_QWORD *)this + 10);
        v26 = *(HALS_IOUAUCDriver **)(v25 + 792);
        v20 = *(std::__shared_weak_count **)(v25 + 800);
        *(_QWORD *)v70 = v26;
        *(_QWORD *)&v70[8] = v20;
        if (v20)
        {
          v27 = (unint64_t *)&v20->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        HALS_IOUAUCDriver::SetPropertyData(v26, a3, *((_DWORD *)this + 22), a7, a6, a5, a4);
        if (v20)
        {
          v29 = (unint64_t *)&v20->__shared_owners_;
          do
            v24 = __ldaxr(v29);
          while (__stlxr(v24 - 1, v29));
          goto LABEL_63;
        }
        return;
      }
    }
    goto LABEL_65;
  }
  if (mSelector <= 1818453109)
  {
    if (mSelector == 1650685548)
    {
      if (!(_DWORD)a4)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v70 = 136315394;
          *(_QWORD *)&v70[4] = "HALS_IOUAControl.cpp";
          *(_WORD *)&v70[12] = 1024;
          *(_DWORD *)&v70[14] = 303;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOUAControl::SetPropertyData: bad property data size for kAudioBooleanControlPropertyValue", v70, 0x12u);
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "kAudioHardwareBadPropertySizeError");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v40 = a5->mSelector;
      v41 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 14));
      if (*((_DWORD *)this + 5) == 1702259059)
      {
        HALS_ReferenceStreamControlPropertyHandler::SetReferenceStreamControlPropertyData(*(HALS_ReferenceStreamControlPropertyHandler **)(*((_QWORD *)this + 8) + 8), a8, v40 != 0);
      }
      else
      {
        v62 = *((_QWORD *)this + 10);
        v63 = *(HALS_IOUAUCDriver **)(v62 + 792);
        v64 = *(std::__shared_weak_count **)(v62 + 800);
        *(_QWORD *)v70 = v63;
        *(_QWORD *)&v70[8] = v64;
        if (v64)
        {
          v65 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldxr(v65);
          while (__stxr(v66 + 1, v65));
        }
        HALS_IOUAUCDriver::SetPropertyData(v63, a3, *((_DWORD *)this + 22), a7, a6, a5, v16);
        if (v64)
        {
          v67 = (unint64_t *)&v64->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
      }
      HALS_ObjectMap::ReleaseObject(v41, v42);
      return;
    }
    if (mSelector == 1651272546)
    {
      v18 = *((_QWORD *)this + 10);
      v19 = *(HALS_IOUAUCDriver **)(v18 + 792);
      v20 = *(std::__shared_weak_count **)(v18 + 800);
      *(_QWORD *)v70 = v19;
      *(_QWORD *)&v70[8] = v20;
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      HALS_IOUAUCDriver::SetPropertyData(v19, a3, *((_DWORD *)this + 22), a7, a6, a5, a4);
      if (v20)
      {
        v23 = (unint64_t *)&v20->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
LABEL_63:
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
        return;
      }
      return;
    }
LABEL_65:
    if (HALS_Control::HasProperty((uint64_t)this, a2, (int *)a3))
      HALS_Control::SetPropertyData((uint64_t)this, a2, (int *)a3, a4, (uint64_t)a5, a6, (uint64_t)a7, (uint64_t)a8);
    else
      HALS_IOUAObject::SetPropertyData((HALS_IOUAControl *)((char *)this + 72), &a3->mSelector, a5, (CFTypeRef *)a7, v58, v59, v60, v61);
    return;
  }
  if (mSelector == 1818453110)
  {
    v48 = *((_QWORD *)this + 10);
    v49 = *(HALS_IOUAUCDriver **)(v48 + 792);
    v20 = *(std::__shared_weak_count **)(v48 + 800);
    *(_QWORD *)v70 = v49;
    *(_QWORD *)&v70[8] = v20;
    if (v20)
    {
      v50 = (unint64_t *)&v20->__shared_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    HALS_IOUAUCDriver::SetPropertyData(v49, a3, *((_DWORD *)this + 22), a7, a6, a5, a4);
    if (v20)
    {
      v52 = (unint64_t *)&v20->__shared_owners_;
      do
        v24 = __ldaxr(v52);
      while (__stlxr(v24 - 1, v52));
      goto LABEL_63;
    }
    return;
  }
  if (mSelector != 1818456950)
    goto LABEL_65;
  v30 = *((_QWORD *)this + 10);
  v31 = *(HALS_IOUAUCDriver **)(v30 + 792);
  v20 = *(std::__shared_weak_count **)(v30 + 800);
  *(_QWORD *)v70 = v31;
  *(_QWORD *)&v70[8] = v20;
  if (v20)
  {
    v32 = (unint64_t *)&v20->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  HALS_IOUAUCDriver::SetPropertyData(v31, a3, *((_DWORD *)this + 22), a7, a6, a5, a4);
  if (v20)
  {
    v34 = (unint64_t *)&v20->__shared_owners_;
    do
      v24 = __ldaxr(v34);
    while (__stlxr(v24 - 1, v34));
    goto LABEL_63;
  }
}

void sub_1B5895C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HALS_ObjectMap *v9;
  HALS_Object *v11;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  HALS_ObjectMap::ReleaseObject(v9, v11);
  _Unwind_Resume(a1);
}

void HALS_IOUAControl::SetHardwareReferenceStreamControlValue(HALS_IOUAControl *this, HALS_Client *a2, int a3)
{
  uint64_t v4;
  HALS_IOUAUCDriver *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;

  v11 = a3;
  v4 = *((_QWORD *)this + 10);
  v5 = *(HALS_IOUAUCDriver **)(v4 + 792);
  v6 = *(std::__shared_weak_count **)(v4 + 800);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  HALS_IOUAUCDriver::SetPropertyData(v5, (const AudioObjectPropertyAddress *)"lvcbbolg", *((_DWORD *)this + 22), 0, 0, &v11, 4uLL);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1B5895DB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL HALS_IOUAControl::GetHardwareReferenceStreamControlValue(HALS_IOUAControl *this, const HALS_Client *a2)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  int outputStruct;
  unint64_t v11;

  v11 = 4;
  outputStruct = 0;
  v2 = *((_QWORD *)this + 10);
  v3 = *(_QWORD *)(v2 + 792);
  v4 = *(std::__shared_weak_count **)(v2 + 800);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v3 + 4), (const AudioObjectPropertyAddress *)"lvcbbolg", *((_DWORD *)this + 22), 0, 0, &outputStruct, &v11);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return outputStruct != 0;
}

void sub_1B5895E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'HALS_IOUAControl::~HALS_IOUAControl(HALS_IOUAControl *this, HALS_Object *a2)
{
  HALS_Object *v3;
  uint64_t v4;

  HALS_IOUAObject::~HALS_IOUAObject(this, a2);
  *((_QWORD *)this - 9) = off_1E6995A68;
  v3 = (HALS_IOUAControl *)((char *)this - 72);
  v4 = *((_QWORD *)v3 + 8);
  *((_QWORD *)v3 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  HALS_Object::~HALS_Object(v3);
}

{
  HALS_IOUAControl::~HALS_IOUAControl((HALS_IOUAControl *)((char *)this - 72), a2);
}

BOOL HALS_IOUAControl::RefreshCache(HALS_IOUAControl *this)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  HALB_Mutex *v35;
  _BOOL8 v36;
  _QWORD v38[6];
  int v39;
  int v40;
  int v41;
  int v42;
  unint64_t v43;
  int outputStruct;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 15) == 1)
  {
    v2 = 0;
    v3 = 1869968496;
    v4 = 1650685548;
    v5 = 1702259059;
  }
  else
  {
    v6 = *((_DWORD *)this + 22);
    v7 = *((_QWORD *)this + 10);
    v8 = *(_QWORD *)(v7 + 792);
    v9 = *(std::__shared_weak_count **)(v7 + 800);
    v45 = v8;
    v46 = (uint64_t *)v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    outputStruct = 0;
    v43 = 4;
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v8 + 4), (const AudioObjectPropertyAddress *)"salcbolg", v6, 0, 0, &outputStruct, &v43);
    v5 = outputStruct;
    if (v9)
    {
      v12 = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v14 = *((_QWORD *)this + 10);
    v15 = *(_QWORD *)(v14 + 792);
    v16 = *(std::__shared_weak_count **)(v14 + 800);
    v45 = v15;
    v46 = (uint64_t *)v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    outputStruct = 0;
    v43 = 4;
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v15 + 4), (const AudioObjectPropertyAddress *)"slcbbolg", v6, 0, 0, &outputStruct, &v43);
    v4 = outputStruct;
    if (v16)
    {
      v19 = (unint64_t *)&v16->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v21 = *((_QWORD *)this + 10);
    v22 = *(_QWORD *)(v21 + 792);
    v23 = *(std::__shared_weak_count **)(v21 + 800);
    v45 = v22;
    v46 = (uint64_t *)v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    outputStruct = 0;
    v43 = 4;
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v22 + 4), (const AudioObjectPropertyAddress *)"pcscbolg", v6, 0, 0, &outputStruct, &v43);
    v3 = outputStruct;
    if (v23)
    {
      v26 = (unint64_t *)&v23->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v28 = *((_QWORD *)this + 10);
    v29 = *(_QWORD *)(v28 + 792);
    v30 = *(std::__shared_weak_count **)(v28 + 800);
    v45 = v29;
    v46 = (uint64_t *)v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    outputStruct = 0;
    v43 = 4;
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v29 + 4), (const AudioObjectPropertyAddress *)"mlecbolg", v6, 0, 0, &outputStruct, &v43);
    v2 = outputStruct;
    if (v30)
    {
      v33 = (unint64_t *)&v30->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
  v45 = 0;
  v46 = &v45;
  v47 = 0x2000000000;
  v48 = 0;
  v38[0] = MEMORY[0x1E0C809B0];
  v38[1] = 0x40000000;
  v38[2] = ___ZN16HALS_IOUAControl12RefreshCacheEv_block_invoke;
  v38[3] = &unk_1E69702B0;
  v38[4] = &v45;
  v38[5] = this;
  v39 = v5;
  v40 = v4;
  v41 = v3;
  v42 = v2;
  v35 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAControl *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v35, (uint64_t)v38);
  v36 = *((_BYTE *)v46 + 24) != 0;
  _Block_object_dispose(&v45, 8);
  return v36;
}

void sub_1B5896238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, NSObject **buf, __int128 a20,__int16 a21,int a22)
{
  AMCP::Log::Scope_Registry *v23;
  NSObject *v24;
  _opaque_pthread_t *v25;
  mach_port_t v26;

  if (a2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    v23 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v23);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v24 = *buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      v25 = pthread_self();
      v26 = pthread_mach_thread_np(v25);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v26;
      LOWORD(a20) = 2080;
      *(_QWORD *)((char *)&a20 + 2) = "HALS_IOUAControl.cpp";
      WORD5(a20) = 1024;
      HIDWORD(a20) = 383;
      _os_log_debug_impl(&dword_1B57BA000, v24, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Caught exception refreshing the control", (uint8_t *)&buf, 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B5896200);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN16HALS_IOUAControl12RefreshCacheEv_block_invoke(uint64_t result)
{
  _DWORD *v1;
  int v2;
  int v3;
  int v4;
  int v5;

  v1 = *(_DWORD **)(result + 40);
  v2 = *(_DWORD *)(result + 48);
  if (v1[5] != v2)
  {
    v1[5] = v2;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  }
  v3 = *(_DWORD *)(result + 52);
  if (v1[6] != v3)
  {
    v1[6] = v3;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  }
  v4 = *(_DWORD *)(result + 56);
  if (v1[12] != v4)
  {
    v1[12] = v4;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  }
  v5 = *(_DWORD *)(result + 60);
  if (v1[13] != v5)
  {
    v1[13] = v5;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

HALS_Object *HALS_IOUAControl::HALS_IOUAControl(HALS_Object *a1, HALS_IOUADriver *a2, uint64_t a3, int a4, int a5, int a6, HALS_Object *a7, int a8, int a9)
{
  HALS_Object *v12;

  v12 = HALS_Control::HALS_Control(a1, a3, a5, a6, a7, a8, a9);
  HALS_IOUAObject::HALS_IOUAObject((HALS_Object *)((char *)v12 + 72), a2, a4);
  *(_QWORD *)a1 = off_1E6970190;
  *((_QWORD *)a1 + 9) = &unk_1E6970288;
  return a1;
}

void sub_1B5896450(_Unwind_Exception *a1)
{
  HALS_Object *v1;
  uint64_t v3;

  *(_QWORD *)v1 = off_1E6995A68;
  v3 = *((_QWORD *)v1 + 8);
  *((_QWORD *)v1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  HALS_Object::~HALS_Object(v1);
  _Unwind_Resume(a1);
}

void HALS_DeviceState::InitializeStandardPropertiesToCapture(HALS_DeviceState *this)
{
  CAPropertyAddressList *v1;
  const AudioObjectPropertyAddress *v2;
  const AudioObjectPropertyAddress *v3;
  const AudioObjectPropertyAddress *v4;
  const AudioObjectPropertyAddress *v5;
  const AudioObjectPropertyAddress *v6;
  const AudioObjectPropertyAddress *v7;
  const AudioObjectPropertyAddress *v8;
  const AudioObjectPropertyAddress *v9;
  const AudioObjectPropertyAddress *v10;
  const AudioObjectPropertyAddress *v11;
  const AudioObjectPropertyAddress *v12;
  const AudioObjectPropertyAddress *v13;
  const AudioObjectPropertyAddress *v14;
  const AudioObjectPropertyAddress *v15;
  const AudioObjectPropertyAddress *v16;
  const AudioObjectPropertyAddress *v17;
  const AudioObjectPropertyAddress *v18;
  CAPropertyAddressList *v19;
  const AudioObjectPropertyAddress *v20;
  const AudioObjectPropertyAddress *v21;
  const AudioObjectPropertyAddress *v22;
  const AudioObjectPropertyAddress *v23;
  const AudioObjectPropertyAddress *v24;
  const AudioObjectPropertyAddress *v25;
  const AudioObjectPropertyAddress *v26;
  AudioObjectPropertyAddress v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = (CAPropertyAddressList *)operator new();
  *(_OWORD *)v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  HALS_DeviceState::sStandardDevicePropertiesToCapture = (uint64_t)v1;
  *(_QWORD *)&v27.mSelector = 0x676C6F626C6E616DLL;
  v27.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem(v1, &v27, v2);
  *(_QWORD *)&v27.mSelector = 0x676C6F626C6D6F64;
  v27.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, &v27, v3);
  *(_QWORD *)&v27.mSelector = 0x676C6F627472616ELL;
  v27.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, &v27, v4);
  *(_QWORD *)&v27.mSelector = 0x676C6F62636C6B64;
  v27.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, &v27, v5);
  *(_QWORD *)&v27.mSelector = 0x696E70746C746E63;
  v27.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, &v27, v6);
  *(_QWORD *)&v27.mSelector = 0x6F7574706C746E63;
  v27.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, &v27, v7);
  *(_QWORD *)&v27.mSelector = 0x696E707473616674;
  v27.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, &v27, v8);
  *(_QWORD *)&v27.mSelector = 0x6F75747073616674;
  v27.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, &v27, v9);
  *(_QWORD *)&v27.mSelector = 0x676C6F626E737274;
  v27.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, &v27, v10);
  *(_QWORD *)&v27.mSelector = 0x676C6F626E737223;
  v27.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, &v27, v11);
  *(_QWORD *)&v27.mSelector = 0x676C6F626869646ELL;
  v27.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, &v27, v12);
  *(_QWORD *)&v27.mSelector = 0x676C6F6272696E67;
  v27.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, &v27, v13);
  *(_QWORD *)&v27.mSelector = 0x676C6F62636C6F6BLL;
  v27.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, &v27, v14);
  *(_QWORD *)&v27.mSelector = 0x676C6F6263737462;
  v27.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, &v27, v15);
  *(_QWORD *)&v27.mSelector = 0x696E7074736C6179;
  v27.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, &v27, v16);
  *(_QWORD *)&v27.mSelector = 0x6F757470736C6179;
  v27.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, &v27, v17);
  *(_QWORD *)&v27.mSelector = 0x676C6F6264727465;
  v27.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, &v27, v18);
  v19 = (CAPropertyAddressList *)operator new();
  *(_OWORD *)v19 = 0u;
  *((_OWORD *)v19 + 1) = 0u;
  HALS_DeviceState::sStandardStreamPropertiesToCapture = (uint64_t)v19;
  *(_QWORD *)&v27.mSelector = 0x676C6F627465726DLL;
  v27.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem(v19, &v27, v20);
  *(_QWORD *)&v27.mSelector = 0x676C6F627363686ELL;
  v27.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture, &v27, v21);
  *(_QWORD *)&v27.mSelector = 0x676C6F626C746E63;
  v27.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture, &v27, v22);
  *(_QWORD *)&v27.mSelector = 0x676C6F6273666D74;
  v27.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture, &v27, v23);
  *(_QWORD *)&v27.mSelector = 0x676C6F6273666D61;
  v27.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture, &v27, v24);
  *(_QWORD *)&v27.mSelector = 0x676C6F6270667420;
  v27.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture, &v27, v25);
  *(_QWORD *)&v27.mSelector = 0x676C6F6270667461;
  v27.mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture, &v27, v26);
  if (!HALS_DeviceState::sStandardDevicePropertiesToCapture
    && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v27.mSelector = 136315394;
    *(_QWORD *)&v27.mScope = "HALS_DeviceState.cpp";
    v28 = 1024;
    v29 = 615;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALC_ProxyObjectMap::InitializePropertiesToCapture: there is no object list", (uint8_t *)&v27, 0x12u);
  }
}

void sub_1B589682C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    HALS_DeviceState::sStandardDevicePropertiesToCapture = 0;
    __cxa_end_catch();
    JUMPOUT(0x1B5896790);
  }
  _Unwind_Resume(a1);
}

void std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = *((_QWORD *)v4 - 2);
        if (v6)
          MEMORY[0x1B5E50664](v6, 0x1000C8077774924);
        v7 = *((_QWORD *)v4 - 4);
        if (v7)
          MEMORY[0x1B5E50664](v7, 0x1000C8077774924);
        v4 -= 48;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*a1);
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(a1[1]);
    HALS_DeviceState::Value::~Value((HALS_DeviceState::Value *)(a1 + 6));
    operator delete(a1);
  }
}

void HALS_DeviceState::Value::~Value(HALS_DeviceState::Value *this)
{
  void *v2;

  OS::CF::UntypedObject::~UntypedObject((HALS_DeviceState::Value *)((char *)this + 88));
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

void HALS_DeviceState::HALS_DeviceState(HALS_DeviceState *this)
{
  *(_DWORD *)this = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  pthread_once(&HALS_DeviceState::sPropertiesToCaptureInitialized, (void (*)(void))HALS_DeviceState::InitializeStandardPropertiesToCapture);
}

void sub_1B58969C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD **v2;
  va_list va;

  va_start(va, a2);
  std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*v2);
  _Unwind_Resume(a1);
}

void HALS_DeviceState::~HALS_DeviceState(HALS_DeviceState *this)
{
  void **v2;

  v2 = (void **)((char *)this + 32);
  std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*((_QWORD **)this + 2));
}

void HALS_DeviceState::Capture(HALS_DeviceState *this, HALS_Device *a2, const CAPropertyAddressList *a3, const CAPropertyAddressList *a4)
{
  _QWORD *v7;
  BOOL *v8;
  uint64_t v9;
  unint64_t v10;
  const CAPropertyAddressList *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  char *v16;
  uint64_t v17;
  BOOL *v18;
  int PropertyDataType;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  HALS_Object *v32;
  BOOL *v33;
  HALS_ObjectMap **v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  HALB_Info **v39;
  int v40;
  HALB_Info *v41;
  int v42;
  int v43;
  HALS_ObjectMap *v44;
  uint64_t v45;
  uint64_t v46;
  HALS_ObjectMap *v47;
  uint64_t v48;
  HALS_ObjectMap *v49;
  uint64_t v50;
  const void *v51;
  HALS_ObjectMap *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  HALS_ObjectMap *v57;
  uint64_t v58;
  char v59;
  char *v61;
  uint64_t **v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  const void *v71;
  int v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  void (**v78)(OS::CF::UntypedObject *__hidden);
  const void *v79;
  uint64_t v80;
  int v81;
  char *v82;
  char *v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  int v92;
  const void *v93;
  uint8_t buf[4];
  const char *v95;
  _DWORD v96[27];
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)this = *((_DWORD *)a2 + 4);
  v7 = (_QWORD *)((char *)this + 16);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*((_QWORD **)this + 2));
  *((_QWORD *)this + 1) = v7;
  *v7 = 0;
  v62 = (uint64_t **)((char *)this + 8);
  *((_QWORD *)this + 3) = 0;
  v9 = *(_QWORD *)a3;
  v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a3 + 1) - *(_QWORD *)a3) >> 2);
  if ((_DWORD)v10)
  {
    v11 = a3;
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      LODWORD(v83) = 0;
      v82 = 0;
      if (v10 > v13)
      {
        v17 = v9 + v12;
        v14 = *(_DWORD *)(v17 + 8);
        v16 = *(char **)v17;
        v82 = *(char **)v17;
        LODWORD(v83) = v14;
        v15 = HIDWORD(v82);
      }
      if (((_DWORD)v16 == 707406378 || v15 == 707406378 || v14 == -1)
        && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v95 = "HALS_DeviceState.cpp";
        LOWORD(v96[0]) = 1024;
        *(_DWORD *)((char *)v96 + 2) = 72;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceState::Capture: properties with a wildcard are not supported", buf, 0x12u);
        v16 = (char *)v82;
      }
      if (HALB_Info::GetPropertyQualifierDataType((HALB_Info *)v16, 0, v8)
        && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v95 = "HALS_DeviceState.cpp";
        LOWORD(v96[0]) = 1024;
        *(_DWORD *)((char *)v96 + 2) = 73;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceState::Capture: properties with a qualifier are not supported", buf, 0x12u);
        v16 = (char *)v82;
      }
      if (HALB_Info::IsAVTProperty((HALB_Info *)v16)
        && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v95 = "HALS_DeviceState.cpp";
        LOWORD(v96[0]) = 1024;
        *(_DWORD *)((char *)v96 + 2) = 74;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceState::Capture: properties that use an AVT are not supported", buf, 0x12u);
        v16 = (char *)v82;
      }
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v73 = 0u;
      v78 = &off_1E69A0E58;
      v79 = 0;
      PropertyDataType = HALB_Info::GetPropertyDataType((HALB_Info *)v16, 0, v18);
      v72 = PropertyDataType;
      if (PropertyDataType <= 1718367025)
      {
        if (PropertyDataType != 1634951780)
        {
          if (PropertyDataType == 1667658612 || PropertyDataType == 1668641388)
          {
LABEL_30:
            if ((*(unsigned int (**)(HALS_Device *, _QWORD, char **, _QWORD))(*(_QWORD *)a2 + 88))(a2, *((unsigned int *)a2 + 4), &v82, 0))
            {
              v22 = *((unsigned int *)a2 + 4);
              v71 = 0;
              v70 = 0;
              (*(void (**)(HALS_Device *, uint64_t, char **, uint64_t, int *, const void **, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 112))(a2, v22, &v82, 8, &v70, &v71, 0, 0, 0);
              v23 = v79;
              v79 = v71;
              if (v23)
                CFRelease(v23);
              goto LABEL_46;
            }
            goto LABEL_47;
          }
LABEL_37:
          if ((*(unsigned int (**)(HALS_Device *, _QWORD, char **, _QWORD))(*(_QWORD *)a2 + 88))(a2, *((unsigned int *)a2 + 4), &v82, 0))
          {
            v72 = 1918990199;
            *(_DWORD *)buf = 0;
            v26 = (*(uint64_t (**)(HALS_Device *, _QWORD, char **, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 104))(a2, *((unsigned int *)a2 + 4), &v82, 0, 0, 0);
            v27 = v26;
            *(_DWORD *)buf = v26;
            v28 = v73;
            if ((unint64_t)v26 <= *((_QWORD *)&v73 + 1) - (_QWORD)v73)
            {
              if ((unint64_t)v26 < *((_QWORD *)&v73 + 1) - (_QWORD)v73)
                *((_QWORD *)&v73 + 1) = v73 + v26;
            }
            else
            {
              std::vector<unsigned char>::__append((unint64_t *)&v73, v26 - (*((_QWORD *)&v73 + 1) - v73));
              v27 = *(unsigned int *)buf;
              v28 = v73;
            }
            (*(void (**)(HALS_Device *, _QWORD, char **, uint64_t, uint8_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 112))(a2, *((unsigned int *)a2 + 4), &v82, v27, buf, v28, 0, 0, 0);
            if ((unint64_t)*(unsigned int *)buf <= *((_QWORD *)&v73 + 1) - (_QWORD)v73)
            {
              if ((unint64_t)*(unsigned int *)buf < *((_QWORD *)&v73 + 1) - (_QWORD)v73)
                *((_QWORD *)&v73 + 1) = v73 + *(unsigned int *)buf;
            }
            else
            {
              std::vector<unsigned char>::__append((unint64_t *)&v73, *(unsigned int *)buf - (*((_QWORD *)&v73 + 1) - v73));
            }
            goto LABEL_46;
          }
          goto LABEL_47;
        }
        if ((*(unsigned int (**)(HALS_Device *, _QWORD, char **, _QWORD))(*(_QWORD *)a2 + 88))(a2, *((unsigned int *)a2 + 4), &v82, 0))
        {
          v25 = *((unsigned int *)a2 + 4);
          v69 = 0;
          (*(void (**)(HALS_Device *, uint64_t, char **, uint64_t, int *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 112))(a2, v25, &v82, 40, &v69, (char *)&v75 + 8, 0, 0, 0);
          goto LABEL_46;
        }
      }
      else if (PropertyDataType > 1886155635)
      {
        if (PropertyDataType == 1886155636)
          goto LABEL_30;
        if (PropertyDataType != 1969828658)
          goto LABEL_37;
        if ((*(unsigned int (**)(HALS_Device *, _QWORD, char **, _QWORD))(*(_QWORD *)a2 + 88))(a2, *((unsigned int *)a2 + 4), &v82, 0))
        {
          v21 = *((unsigned int *)a2 + 4);
          v63 = 0;
          v64 = 0;
          (*(void (**)(HALS_Device *, uint64_t, char **, uint64_t, int *, int *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 112))(a2, v21, &v82, 4, &v63, &v64, 0, 0, 0);
          DWORD2(v74) = v64;
          goto LABEL_46;
        }
      }
      else if (PropertyDataType == 1718367026)
      {
        if ((*(unsigned int (**)(HALS_Device *, _QWORD, char **, _QWORD))(*(_QWORD *)a2 + 88))(a2, *((unsigned int *)a2 + 4), &v82, 0))
        {
          v24 = *((unsigned int *)a2 + 4);
          v65 = 0;
          v66 = 0;
          (*(void (**)(HALS_Device *, uint64_t, char **, uint64_t, int *, int *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 112))(a2, v24, &v82, 4, &v65, &v66, 0, 0, 0);
          HIDWORD(v74) = v66;
          goto LABEL_46;
        }
      }
      else
      {
        if (PropertyDataType != 1718367796)
          goto LABEL_37;
        if ((*(unsigned int (**)(HALS_Device *, _QWORD, char **, _QWORD))(*(_QWORD *)a2 + 88))(a2, *((unsigned int *)a2 + 4), &v82, 0))
        {
          v20 = *((unsigned int *)a2 + 4);
          v68 = 0;
          v67 = 0;
          (*(void (**)(HALS_Device *, uint64_t, char **, uint64_t, int *, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 112))(a2, v20, &v82, 8, &v67, &v68, 0, 0, 0);
          *(_QWORD *)&v75 = v68;
LABEL_46:
          *(_DWORD *)buf = *((_DWORD *)a2 + 4);
          v95 = v82;
          v96[0] = (_DWORD)v83;
          HALS_DeviceState::Value::Value((HALS_DeviceState::Value *)&v96[1], (const HALS_DeviceState::Value *)&v72);
          std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::__emplace_unique_key_args<HALS_DeviceState::Key,std::pair<HALS_DeviceState::Key const,HALS_DeviceState::Value>>(v62, buf, (uint64_t)buf);
          HALS_DeviceState::Value::~Value((HALS_DeviceState::Value *)&v96[1]);
        }
      }
LABEL_47:
      HALS_DeviceState::Value::~Value((HALS_DeviceState::Value *)&v72);
      ++v13;
      v9 = *(_QWORD *)v11;
      v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v11 + 1) - *(_QWORD *)v11) >> 2);
      v12 += 12;
    }
    while (v13 < v10);
  }
  v29 = 0;
  v30 = 1;
  do
  {
    v31 = v30;
    v82 = 0;
    v83 = 0;
    v84 = 0;
    HALS_Device::CopyStreamList((uint64_t)a2, v29 & 1, &v82);
    v34 = (HALS_ObjectMap **)v82;
    v61 = v83;
    if (v82 == v83)
      goto LABEL_92;
    v59 = v31;
    do
    {
      v35 = *(_QWORD *)a4;
      v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a4 + 1) - *(_QWORD *)a4) >> 2);
      if ((_DWORD)v36)
      {
        v37 = 0;
        v38 = 0;
        do
        {
          v80 = 0x676C6F6200000000;
          v81 = 0;
          if (v36 <= v38)
          {
            v40 = 0;
            v41 = 0;
            v42 = 1735159650;
          }
          else
          {
            v39 = (HALB_Info **)(v35 + v37);
            v40 = *(_DWORD *)(v35 + v37 + 8);
            v41 = *v39;
            v80 = (uint64_t)*v39;
            v81 = v40;
            v42 = HIDWORD(v80);
          }
          if ((_DWORD)v41 == 707406378 || v42 == 707406378 || v40 == -1)
            goto LABEL_89;
          v76 = 0u;
          v77 = 0u;
          v74 = 0u;
          v75 = 0u;
          v73 = 0u;
          v78 = &off_1E69A0E58;
          v79 = 0;
          v43 = HALB_Info::GetPropertyDataType(v41, 0, v33);
          v72 = v43;
          if (v43 <= 1718367025)
          {
            if (v43 != 1634951780)
            {
              if (v43 == 1667658612 || v43 == 1668641388)
              {
LABEL_73:
                if ((*(unsigned int (**)(HALS_ObjectMap *, _QWORD, uint64_t *, _QWORD))(*(_QWORD *)*v34 + 88))(*v34, *((unsigned int *)*v34 + 4), &v80, 0))
                {
                  v49 = *v34;
                  v50 = *((unsigned int *)*v34 + 4);
                  v93 = 0;
                  v92 = 0;
                  (*(void (**)(HALS_ObjectMap *, uint64_t, uint64_t *, uint64_t, int *, const void **, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v49 + 112))(v49, v50, &v80, 8, &v92, &v93, 0, 0, 0);
                  v51 = v79;
                  v79 = v93;
                  if (v51)
                    CFRelease(v51);
                  goto LABEL_87;
                }
                goto LABEL_88;
              }
              goto LABEL_78;
            }
            if ((*(unsigned int (**)(HALS_ObjectMap *, _QWORD, uint64_t *, _QWORD))(*(_QWORD *)*v34 + 88))(*v34, *((unsigned int *)*v34 + 4), &v80, 0))
            {
              v52 = *v34;
              v53 = *((unsigned int *)*v34 + 4);
              v91 = 0;
              (*(void (**)(HALS_ObjectMap *, uint64_t, uint64_t *, uint64_t, int *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v52 + 112))(v52, v53, &v80, 40, &v91, (char *)&v75 + 8, 0, 0, 0);
              goto LABEL_87;
            }
          }
          else if (v43 > 1886155635)
          {
            if (v43 == 1886155636)
              goto LABEL_73;
            if (v43 != 1969828658)
              goto LABEL_78;
            if ((*(unsigned int (**)(HALS_ObjectMap *, _QWORD, uint64_t *, _QWORD))(*(_QWORD *)*v34 + 88))(*v34, *((unsigned int *)*v34 + 4), &v80, 0))
            {
              v47 = *v34;
              v48 = *((unsigned int *)*v34 + 4);
              v86 = 0;
              v85 = 0;
              (*(void (**)(HALS_ObjectMap *, uint64_t, uint64_t *, uint64_t, int *, int *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v47 + 112))(v47, v48, &v80, 4, &v85, &v86, 0, 0, 0);
              DWORD2(v74) = v86;
              goto LABEL_87;
            }
          }
          else
          {
            if (v43 != 1718367026)
            {
              if (v43 == 1718367796)
              {
                if ((*(unsigned int (**)(HALS_ObjectMap *, _QWORD, uint64_t *, _QWORD))(*(_QWORD *)*v34 + 88))(*v34, *((unsigned int *)*v34 + 4), &v80, 0))
                {
                  v44 = *v34;
                  v45 = *((unsigned int *)*v34 + 4);
                  v90 = 0;
                  v89 = 0;
                  (*(void (**)(HALS_ObjectMap *, uint64_t, uint64_t *, uint64_t, int *, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v44 + 112))(v44, v45, &v80, 8, &v89, &v90, 0, 0, 0);
                  v46 = v90;
                  goto LABEL_83;
                }
                goto LABEL_88;
              }
LABEL_78:
              if ((*(unsigned int (**)(HALS_ObjectMap *, _QWORD, uint64_t *, _QWORD))(*(_QWORD *)*v34 + 88))(*v34, *((unsigned int *)*v34 + 4), &v80, 0))
              {
                v72 = 1918990199;
                *(_DWORD *)buf = 0;
                v54 = (*(uint64_t (**)(HALS_ObjectMap *, _QWORD, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*v34 + 104))(*v34, *((unsigned int *)*v34 + 4), &v80, 0, 0, 0);
                v55 = v54;
                *(_DWORD *)buf = v54;
                v56 = v73;
                if ((unint64_t)v54 <= *((_QWORD *)&v73 + 1) - (_QWORD)v73)
                {
                  if ((unint64_t)v54 < *((_QWORD *)&v73 + 1) - (_QWORD)v73)
                    *((_QWORD *)&v73 + 1) = v73 + v54;
                }
                else
                {
                  std::vector<unsigned char>::__append((unint64_t *)&v73, v54 - (*((_QWORD *)&v73 + 1) - v73));
                  v55 = *(unsigned int *)buf;
                  v56 = v73;
                }
                (*(void (**)(HALS_ObjectMap *, _QWORD, uint64_t *, uint64_t, uint8_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*v34 + 112))(*v34, *((unsigned int *)*v34 + 4), &v80, v55, buf, v56, 0, 0, 0);
                goto LABEL_87;
              }
              goto LABEL_88;
            }
            if ((*(unsigned int (**)(HALS_ObjectMap *, _QWORD, uint64_t *, _QWORD))(*(_QWORD *)*v34 + 88))(*v34, *((unsigned int *)*v34 + 4), &v80, 0))
            {
              v57 = *v34;
              v58 = *((unsigned int *)*v34 + 4);
              v88 = 0;
              v87 = 0;
              (*(void (**)(HALS_ObjectMap *, uint64_t, uint64_t *, uint64_t, int *, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v57 + 112))(v57, v58, &v80, 8, &v87, &v88, 0, 0, 0);
              v46 = v88;
LABEL_83:
              *(_QWORD *)&v75 = v46;
LABEL_87:
              *(_DWORD *)buf = *((_DWORD *)*v34 + 4);
              v95 = (const char *)v80;
              v96[0] = v81;
              HALS_DeviceState::Value::Value((HALS_DeviceState::Value *)&v96[1], (const HALS_DeviceState::Value *)&v72);
              std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::__emplace_unique_key_args<HALS_DeviceState::Key,std::pair<HALS_DeviceState::Key const,HALS_DeviceState::Value>>(v62, buf, (uint64_t)buf);
              HALS_DeviceState::Value::~Value((HALS_DeviceState::Value *)&v96[1]);
            }
          }
LABEL_88:
          HALS_DeviceState::Value::~Value((HALS_DeviceState::Value *)&v72);
LABEL_89:
          ++v38;
          v35 = *(_QWORD *)a4;
          v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a4 + 1) - *(_QWORD *)a4) >> 2);
          v37 += 12;
        }
        while (v38 < v36);
      }
      HALS_ObjectMap::ReleaseObject(*v34++, v32);
    }
    while (v34 != (HALS_ObjectMap **)v61);
    v34 = (HALS_ObjectMap **)v82;
    v31 = v59;
LABEL_92:
    if (v34)
    {
      v83 = (char *)v34;
      operator delete(v34);
    }
    v30 = 0;
    v29 = 1;
  }
  while ((v31 & 1) != 0);
}

void sub_1B589766C(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B5897670);
  __clang_call_terminate(a1);
}

void sub_1B589767C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  HALS_DeviceState::Value::~Value((HALS_DeviceState::Value *)va);
  JUMPOUT(0x1B58976C0);
}

void sub_1B58976A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  _Unwind_Exception *v4;

  v3 = *(void **)(v1 + 120);
  if (v3)
  {
    *(_QWORD *)(v1 + 128) = v3;
    v4 = a1;
    operator delete(v3);
    a1 = v4;
  }
  _Unwind_Resume(a1);
}

void sub_1B58976C8(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B58976D0);
  __clang_call_terminate(a1);
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

HALS_DeviceState::Value *HALS_DeviceState::Value::Value(HALS_DeviceState::Value *this, const HALS_DeviceState::Value *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(_DWORD *)this = *(_DWORD *)a2;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)this + 1, *((const void **)a2 + 1), *((_QWORD *)a2 + 2), *((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1));
  v4 = *((_OWORD *)a2 + 2);
  v5 = *((_OWORD *)a2 + 3);
  v6 = *((_OWORD *)a2 + 4);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_OWORD *)this + 3) = v5;
  *((_OWORD *)this + 4) = v6;
  *((_OWORD *)this + 2) = v4;
  OS::CF::UntypedObject::UntypedObject((HALS_DeviceState::Value *)((char *)this + 88), *((CFTypeRef *)a2 + 12));
  return this;
}

uint64_t *std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::__emplace_unique_key_args<HALS_DeviceState::Key,std::pair<HALS_DeviceState::Key const,HALS_DeviceState::Value>>(uint64_t **a1, _DWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  _DWORD *v8;
  uint64_t **v9;
  uint64_t *result;
  char *v11;
  int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v5;
        v8 = v5 + 4;
        if (!operator<(a2, (_DWORD *)v5 + 8))
          break;
        v5 = *v6;
        v9 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      result = (uint64_t *)operator<(v8, a2);
      if (!(_DWORD)result)
        break;
      v9 = v6 + 1;
      v5 = v6[1];
      if (!v5)
        goto LABEL_9;
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_9:
    v11 = (char *)operator new(0x98uLL);
    *((_DWORD *)v11 + 8) = *(_DWORD *)a3;
    *(_QWORD *)(v11 + 36) = *(_QWORD *)(a3 + 4);
    v12 = *(_DWORD *)(a3 + 16);
    *((_DWORD *)v11 + 11) = *(_DWORD *)(a3 + 12);
    *((_DWORD *)v11 + 12) = v12;
    *(_OWORD *)(v11 + 56) = *(_OWORD *)(a3 + 24);
    *((_QWORD *)v11 + 9) = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    v13 = *(_OWORD *)(a3 + 48);
    v14 = *(_OWORD *)(a3 + 80);
    v15 = *(_QWORD *)(a3 + 96);
    *((_OWORD *)v11 + 6) = *(_OWORD *)(a3 + 64);
    *((_OWORD *)v11 + 7) = v14;
    *((_OWORD *)v11 + 5) = v13;
    *((_QWORD *)v11 + 16) = v15;
    *((_QWORD *)v11 + 17) = &off_1E69A0E58;
    *((_QWORD *)v11 + 18) = *(_QWORD *)(a3 + 112);
    *(_QWORD *)(a3 + 112) = 0;
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = v6;
    *v9 = (uint64_t *)v11;
    v16 = (uint64_t *)**a1;
    if (v16)
    {
      *a1 = v16;
      v17 = *v9;
    }
    else
    {
      v17 = (uint64_t *)v11;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v17);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return result;
}

BOOL operator<(_DWORD *a1, _DWORD *a2)
{
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;

  if (*a1 < *a2)
    return 1;
  if (*a1 != *a2)
    return 0;
  v3 = a1[2];
  v4 = a2[2];
  v5 = v3 >= v4;
  if (v3 == v4)
  {
    v6 = a1[1];
    v7 = a2[1];
    v5 = v6 >= v7;
    if (v6 == v7)
      v5 = a1[3] >= a2[3];
  }
  return !v5;
}

void HALS_DeviceState::Compare(HALS_DeviceState *this, const HALS_DeviceState *a2, const AudioObjectPropertyAddress *a3, CAPropertyAddressList **a4, CAPropertyAddressListVector *a5)
{
  char *v5;
  char *v6;
  const AudioObjectPropertyAddress *v8;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _BOOL4 v13;
  uint64_t *v14;
  int v15;
  const void *v16;
  const void *v17;
  uint64_t v18;
  AudioObjectPropertyAddress *p_p;
  CAPropertyAddressList *v20;
  CAPropertyAddressList *v21;
  CAPropertyAddressList *v22;
  uint64_t v23;
  int v24;
  char *v25;
  char *v26;
  BOOL v27;
  __int128 __p;
  uint64_t v29;
  uint64_t v30;

  v5 = (char *)*((_QWORD *)this + 1);
  v6 = (char *)this + 16;
  if (v5 != (char *)this + 16)
  {
    v8 = a3;
    v10 = (_QWORD *)((char *)a2 + 16);
    while (1)
    {
      v11 = *v10;
      if (!*v10)
        goto LABEL_39;
      v12 = v10;
      do
      {
        v13 = operator<((_DWORD *)(v11 + 32), (_DWORD *)v5 + 8);
        v14 = (uint64_t *)(v11 + 8);
        if (!v13)
        {
          v14 = (uint64_t *)v11;
          v12 = (_QWORD *)v11;
        }
        v11 = *v14;
      }
      while (*v14);
      if (v12 == v10
        || operator<((_DWORD *)v5 + 8, (_DWORD *)v12 + 8)
        || (v15 = *((_DWORD *)v5 + 12), v15 != *((_DWORD *)v12 + 12)))
      {
LABEL_39:
        v18 = *((unsigned int *)v5 + 8);
        if ((_DWORD)v18 == *(_DWORD *)this)
        {
          p_p = (AudioObjectPropertyAddress *)(v5 + 36);
          v20 = (CAPropertyAddressList *)v8;
LABEL_41:
          CAPropertyAddressList::AppendUniqueItem(v20, p_p, a3);
        }
        else
        {
          v21 = *a4;
          do
          {
            if (v21 == a4[1])
            {
              __p = 0uLL;
              v29 = 0;
              v30 = v18;
              CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&__p, (AudioObjectPropertyAddress *)v5 + 3, a3);
              CAPropertyAddressListVector::AppendItem((CAPropertyAddressListVector *)a4, (uint64_t **)&__p);
              if ((_QWORD)__p)
                operator delete((void *)__p);
              goto LABEL_51;
            }
            v22 = v21;
            v23 = *((_QWORD *)v21 + 3);
            v21 = (CAPropertyAddressList *)((char *)v21 + 32);
          }
          while (v23 != v18);
          CAPropertyAddressList::AppendUniqueItem(v22, (AudioObjectPropertyAddress *)v5 + 3, a3);
          v24 = *((_DWORD *)v5 + 9);
          if (v24 == 1936092532)
          {
            LODWORD(__p) = 1936092532;
            *(_QWORD *)((char *)&__p + 4) = *((_QWORD *)v5 + 5);
            CAPropertyAddressList::AppendUniqueItem(v22, (AudioObjectPropertyAddress *)&__p, a3);
            v24 = *((_DWORD *)v5 + 9);
          }
          if (v24 == 1936092513)
          {
            LODWORD(__p) = 1936092451;
            *(_QWORD *)((char *)&__p + 4) = *((_QWORD *)v5 + 5);
            p_p = (AudioObjectPropertyAddress *)&__p;
            v20 = v22;
            goto LABEL_41;
          }
        }
        goto LABEL_51;
      }
      if (v15 > 1718367025)
        break;
      if (v15 != 1634951780)
      {
        if (v15 == 1667658612 || v15 == 1668641388)
        {
LABEL_25:
          if (!CFEqual(*((CFTypeRef *)v5 + 18), (CFTypeRef)v12[18]))
            goto LABEL_39;
          goto LABEL_51;
        }
LABEL_37:
        v16 = (const void *)*((_QWORD *)v5 + 7);
        a3 = (const AudioObjectPropertyAddress *)(*((_QWORD *)v5 + 8) - (_QWORD)v16);
        v17 = (const void *)v12[7];
        if (a3 != (const AudioObjectPropertyAddress *)(v12[8] - (_QWORD)v17) || memcmp(v16, v17, (size_t)a3))
          goto LABEL_39;
        goto LABEL_51;
      }
      if (*((double *)v5 + 12) != *((double *)v12 + 12)
        || *((_DWORD *)v5 + 26) != *((_DWORD *)v12 + 26)
        || *((_DWORD *)v5 + 28) != *((_DWORD *)v12 + 28)
        || *((_DWORD *)v5 + 29) != *((_DWORD *)v12 + 29)
        || *((_DWORD *)v5 + 31) != *((_DWORD *)v12 + 31)
        || *((_DWORD *)v5 + 32) != *((_DWORD *)v12 + 32)
        || !CA::Implementation::EquivalentFormatFlags((CA::Implementation *)(v5 + 96), (const AudioStreamBasicDescription *)(v12 + 12), (const AudioStreamBasicDescription *)1, 0))
      {
        goto LABEL_39;
      }
LABEL_51:
      v25 = (char *)*((_QWORD *)v5 + 1);
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = *(char **)v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (char *)*((_QWORD *)v5 + 2);
          v27 = *(_QWORD *)v26 == (_QWORD)v5;
          v5 = v26;
        }
        while (!v27);
      }
      v5 = v26;
      if (v26 == v6)
        return;
    }
    if (v15 > 1886155635)
    {
      if (v15 == 1886155636)
        goto LABEL_25;
      if (v15 == 1969828658)
      {
        if (*((_DWORD *)v5 + 20) != *((_DWORD *)v12 + 20))
          goto LABEL_39;
        goto LABEL_51;
      }
    }
    else
    {
      if (v15 == 1718367026)
      {
        if (*((float *)v5 + 21) != *((float *)v12 + 21))
          goto LABEL_39;
        goto LABEL_51;
      }
      if (v15 == 1718367796)
      {
        if (*((double *)v5 + 11) != *((double *)v12 + 11))
          goto LABEL_39;
        goto LABEL_51;
      }
    }
    goto LABEL_37;
  }
}

void sub_1B5897D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B58980C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  _QWORD *v22;
  std::thread *v23;
  std::condition_variable *v24;
  std::mutex *v25;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;

  std::mutex::~mutex(v25);
  std::condition_variable::~condition_variable(v24);
  std::thread::~thread(v23);
  v27 = *(_QWORD **)(v21 + 32);
  if (v27 == v22)
  {
    v28 = 4;
  }
  else
  {
    if (!v27)
      goto LABEL_6;
    v28 = 5;
    v22 = *(_QWORD **)(v21 + 32);
  }
  (*(void (**)(_QWORD *))(*v22 + 8 * v28))(v22);
LABEL_6:
  v29 = a17;
  if (a17 == &a14)
  {
    v30 = 4;
    v29 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_11:
  MEMORY[0x1B5E50688](v21, 0x10A1C408C901D7ELL);
  _Unwind_Resume(a1);
}

void sub_1B58983CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1B5898758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B5898D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  DSP_Host_Types::DSPPropertyInfoArray::~DSPPropertyInfoArray((DSP_Host_Types::DSPPropertyInfoArray *)&a12);
  _Unwind_Resume(a1);
}

void sub_1B5898FC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B589929C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B58994DC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<DSP_Host_Types::DSPPropertyInfo,std::allocator<DSP_Host_Types::DSPPropertyInfo>,char const(&)[1],void>(_QWORD *a1, char *a2)
{
  _QWORD *v4;
  CFTypeRef cf[2];
  char v6;

  v4 = operator new(0x158uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E6994F10;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, a2);
  v4[3] = off_1E6994DE0;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::__optional_destruct_base[abi:ne180100]<applesauce::CF::StringRef const&>((uint64_t)(v4 + 4), cf[0]);
  if (cf[0])
    CFRelease(cf[0]);
  v4[3] = &off_1E69949E0;
  std::string::basic_string[abi:ne180100]<0>(cf, "property selector");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v4 + 6, (const UInt8 *)cf);
  v4[6] = &off_1E699E950;
  *((_BYTE *)v4 + 64) = 0;
  *((_BYTE *)v4 + 68) = 0;
  if (v6 < 0)
    operator delete((void *)cf[0]);
  std::string::basic_string[abi:ne180100]<0>(cf, "property scope");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v4 + 9, (const UInt8 *)cf);
  v4[9] = &off_1E699E950;
  *((_BYTE *)v4 + 88) = 0;
  *((_BYTE *)v4 + 92) = 0;
  if (v6 < 0)
    operator delete((void *)cf[0]);
  std::string::basic_string[abi:ne180100]<0>(cf, "property is invariant");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v4 + 12, (const UInt8 *)cf);
  v4[12] = &off_1E699D180;
  *((_WORD *)v4 + 56) = 0;
  if (v6 < 0)
    operator delete((void *)cf[0]);
  std::string::basic_string[abi:ne180100]<0>(cf, "property is settable");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v4 + 15, (const UInt8 *)cf);
  v4[15] = &off_1E699D180;
  *((_WORD *)v4 + 68) = 0;
  if (v6 < 0)
    operator delete((void *)cf[0]);
  std::string::basic_string[abi:ne180100]<0>(cf, "property data type");
  DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::CustomPropertyDataType,DSP_Host_Types::StringLookup_CustomPropertyDataType,unsigned int>::StringifiedKvp((uint64_t)(v4 + 18), (const UInt8 *)cf);
  if (v6 < 0)
    operator delete((void *)cf[0]);
  std::string::basic_string[abi:ne180100]<0>(cf, "property qualifier data type");
  DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::CustomPropertyDataType,DSP_Host_Types::StringLookup_CustomPropertyDataType,unsigned int>::StringifiedKvp((uint64_t)(v4 + 29), (const UInt8 *)cf);
  if (v6 < 0)
    operator delete((void *)cf[0]);
  v4[40] = 0;
  v4[41] = 0;
  v4[42] = 0;
  DSP_Host_Types::DSPPropertyInfo::init_set((DSP_Host_Types::DSPPropertyInfo *)(v4 + 3));
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_1B5899744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void **v16;
  _QWORD *v17;
  DSP_Dictionariable::DictionariableKvp *v18;
  DSP_Dictionariable::DictionariableKvp *v19;
  DSP_Dictionariable::DictionariableKvp *v20;
  DSP_Dictionariable::DictionariableKvp *v21;
  DSP_Dictionariable::DictionariableKvp *v22;
  DSP_Dictionariable::DictionariableKvp *v23;
  void *v25;
  void *v26;

  v25 = *v16;
  if (*v16)
  {
    v15[13].__shared_weak_owners_ = (uint64_t)v25;
    operator delete(v25);
  }
  DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::CustomPropertyDataType,DSP_Host_Types::StringLookup_CustomPropertyDataType,unsigned int>::~StringifiedKvp(v23);
  DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::CustomPropertyDataType,DSP_Host_Types::StringLookup_CustomPropertyDataType,unsigned int>::~StringifiedKvp(v22);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v21);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v20);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v19);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v18);
  *v17 = off_1E6994DE0;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100](a9);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v26);
  _Unwind_Resume(a1);
}

void sub_1B58997F0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  JUMPOUT(0x1B58997B0);
}

void sub_1B5899808()
{
  JUMPOUT(0x1B58997B0);
}

void sub_1B5899810(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  JUMPOUT(0x1B58997B8);
}

void sub_1B5899828()
{
  JUMPOUT(0x1B58997B8);
}

void sub_1B5899830(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  JUMPOUT(0x1B58997C0);
}

void sub_1B5899848()
{
  JUMPOUT(0x1B58997C0);
}

void sub_1B5899850(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  JUMPOUT(0x1B58997C8);
}

void sub_1B5899868()
{
  JUMPOUT(0x1B58997C8);
}

void sub_1B5899870()
{
  JUMPOUT(0x1B58997DCLL);
}

void DSP_Host_Types::DSPPropertyInfoArray::~DSPPropertyInfoArray(DSP_Host_Types::DSPPropertyInfoArray *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E699E778;
  v2 = (void **)((char *)this + 24);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(_QWORD *)this = off_1E699E7B8;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E699E778;
  v2 = (void **)((char *)this + 24);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(_QWORD *)this = off_1E699E7B8;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1B5E50688);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::DSPPropertyInfoArray>::description(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const __CFString *v4;
  const __CFString *v5;
  CFIndex Length;
  CFIndex v7;
  CFTypeRef v8;
  std::vector<char>::value_type __x;
  std::vector<char> cf;

  cf.__begin_ = (std::vector<char>::pointer)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, std::vector<char> *))(*(_QWORD *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v8, cf.__begin_);
  if (cf.__begin_)
    CFRelease(cf.__begin_);
  v4 = CFCopyDescription(v8);
  v5 = v4;
  if (v4)
  {
    Length = CFStringGetLength(v4);
    v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    __x = 0;
    std::vector<char>::vector(&cf, v7, &__x);
    LODWORD(v7) = CFStringGetCString(v5, cf.__begin_, v7, 0x8000100u);
    CFRelease(v5);
    if ((_DWORD)v7)
      std::string::basic_string[abi:ne180100]<0>(a2, cf.__begin_);
    else
      std::string::basic_string[abi:ne180100]<0>(a2, "<error>");
    if (cf.__begin_)
    {
      cf.__end_ = cf.__begin_;
      operator delete(cf.__begin_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<empty>");
  }
  if (v8)
    CFRelease(v8);
}

void sub_1B5899A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)&__p);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::DSPPropertyInfoArray>::add_to(uint64_t a1, __CFArray **a2)
{
  CFTypeRef v4;
  CFTypeRef cf;

  cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v4, cf);
  if (cf)
    CFRelease(cf);
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, v4);
  if (v4)
    CFRelease(v4);
}

void sub_1B5899AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::CustomPropertyDataType,DSP_Host_Types::StringLookup_CustomPropertyDataType,unsigned int>::StringifiedKvp(uint64_t a1, const UInt8 *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[3];
  _QWORD *v13;
  _QWORD v14[4];

  v14[3] = *MEMORY[0x1E0C80C00];
  v3 = DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)a1, a2);
  *((_BYTE *)v3 + 16) = 0;
  *((_BYTE *)v3 + 20) = 0;
  *v3 = &off_1E6994D88;
  v4 = v3 + 3;
  v3[6] = 0;
  v3[10] = 0;
  if ((v5 & 1) == 0
  {
    qword_1EDB885B8 = (uint64_t)"uninitialized";
    dword_1EDB885C0 = 1;
    qword_1EDB885C8 = (uint64_t)"None";
    dword_1EDB885D0 = 2;
    qword_1EDB885D8 = (uint64_t)"String";
    dword_1EDB885E0 = 3;
    qword_1EDB885E8 = (uint64_t)"Boolean";
    dword_1EDB885F0 = 4;
    qword_1EDB885F8 = (uint64_t)"Float32";
    dword_1EDB88600 = 5;
    DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::kThisLookup[0] = 0;
    qword_1EDB88608 = (uint64_t)"UInt32";
    dword_1EDB88610 = 6;
    qword_1EDB88618 = (uint64_t)"Int32";
    dword_1EDB88620 = 7;
    qword_1EDB88628 = (uint64_t)"Dictionary";
  }
  v6 = v12;
  v12[0] = &off_1E699CDE8;
  v13 = v12;
  if (v4 == v12)
  {
    v7 = 4;
  }
  else
  {
    if (*(_QWORD **)(a1 + 48) == v4)
    {
      std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0>,DSP_Host_Types::CustomPropertyDataType ()(char const*)>::__clone((uint64_t)v12, v14);
      v13 = 0;
      (*(void (**)(_QWORD *, _QWORD *))(*v4 + 24))(v4, v12);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48));
      *(_QWORD *)(a1 + 48) = 0;
      v13 = v12;
      (*(void (**)(_QWORD *, _QWORD *))(v14[0] + 24))(v14, v4);
      (*(void (**)(_QWORD *))(v14[0] + 32))(v14);
      *(_QWORD *)(a1 + 48) = v4;
      v6 = v13;
    }
    else
    {
      std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0>,DSP_Host_Types::CustomPropertyDataType ()(char const*)>::__clone((uint64_t)v12, v4);
      v6 = *(_QWORD **)(a1 + 48);
      v13 = v6;
      *(_QWORD *)(a1 + 48) = v4;
    }
    if (v6 == v12)
    {
      v7 = 4;
      v6 = v12;
    }
    else
    {
      if (!v6)
        goto LABEL_12;
      v7 = 5;
    }
  }
  (*(void (**)(_QWORD *))(*v6 + 8 * v7))(v6);
LABEL_12:
  v8 = a1 + 56;
  v9 = v12;
  v12[0] = &off_1E699CE78;
  v13 = v12;
  if ((_QWORD *)(a1 + 56) == v12)
  {
    v10 = 4;
LABEL_21:
    (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
    return a1;
  }
  if (*(_QWORD *)(a1 + 80) == v8)
  {
    std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1>,char const* ()(DSP_Host_Types::CustomPropertyDataType)>::__clone((uint64_t)v12, v14);
    v13 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 24))(a1 + 56, v12);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 32))(*(_QWORD *)(a1 + 80));
    *(_QWORD *)(a1 + 80) = 0;
    v13 = v12;
    (*(void (**)(_QWORD *, uint64_t))(v14[0] + 24))(v14, a1 + 56);
    (*(void (**)(_QWORD *))(v14[0] + 32))(v14);
    *(_QWORD *)(a1 + 80) = v8;
    v9 = v13;
  }
  else
  {
    std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1>,char const* ()(DSP_Host_Types::CustomPropertyDataType)>::__clone((uint64_t)v12, (_QWORD *)(a1 + 56));
    v9 = *(_QWORD **)(a1 + 80);
    v13 = v9;
    *(_QWORD *)(a1 + 80) = v8;
  }
  if (v9 == v12)
  {
    v10 = 4;
    v9 = v12;
    goto LABEL_21;
  }
  if (v9)
  {
    v10 = 5;
    goto LABEL_21;
  }
  return a1;
}

void sub_1B5899E1C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::CustomPropertyDataType,DSP_Host_Types::StringLookup_CustomPropertyDataType,unsigned int>::~StringifiedKvp(DSP_Dictionariable::DictionariableKvp *this)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E6994D88;
  v2 = (char *)this + 24;
  v3 = (char *)this + 56;
  v4 = (char *)*((_QWORD *)this + 10);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  v6 = (char *)*((_QWORD *)this + 6);
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(this);
}

{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E6994D88;
  v2 = (char *)this + 24;
  v3 = (char *)this + 56;
  v4 = (char *)*((_QWORD *)this + 10);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  v6 = (char *)*((_QWORD *)this + 6);
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
    {
LABEL_11:
      DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(this);
      JUMPOUT(0x1B5E50688);
    }
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  goto LABEL_11;
}

void DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::CustomPropertyDataType,DSP_Host_Types::StringLookup_CustomPropertyDataType,unsigned int>::add_to(uint64_t a1, __CFDictionary **a2)
{
  uint64_t v3;
  char *v5;
  unsigned __int8 v6;
  CFIndex v7;
  void **v8;
  CFStringRef v9;
  std::runtime_error *exception;
  void *__p[2];
  unsigned __int8 v12;
  int v13;

  if (*(_BYTE *)(a1 + 20))
  {
    v13 = *(_DWORD *)(a1 + 16);
    v3 = *(_QWORD *)(a1 + 80);
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    v5 = (char *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v3 + 48))(v3, &v13);
    std::string::basic_string[abi:ne180100]<0>(__p, v5);
    v6 = v12;
    if ((v12 & 0x80u) == 0)
      v7 = v12;
    else
      v7 = (CFIndex)__p[1];
    if (v7)
    {
      if ((v12 & 0x80u) == 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      v9 = CFStringCreateWithBytes(0, (const UInt8 *)v8, v7, 0x8000100u, 0);
      if (!v9)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(*a2, *(const void **)(a1 + 8), v9);
      CFRelease(v9);
      v6 = v12;
    }
    if ((v6 & 0x80) != 0)
      operator delete(__p[0]);
  }
}

void sub_1B589A060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::CustomPropertyDataType,DSP_Host_Types::StringLookup_CustomPropertyDataType,unsigned int>::load_from(uint64_t a1, CFDictionaryRef *a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  char v9;
  _QWORD v10[3];
  void **v11;

  if (*(_BYTE *)(a1 + 20))
    *(_BYTE *)(a1 + 20) = 0;
  v10[0] = &off_1E699E9F8;
  v10[1] = 0;
  v10[2] = a2;
  if (applesauce::CF::details::has_key<__CFString const*&>(*a2, *(const void **)(a1 + 8)))
  {
    applesauce::CF::details::find_at_key<std::string,__CFString const*&>((uint64_t)__p, *a2, *(const void **)(a1 + 8));
    if (v9 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    v11 = v4;
    v5 = *(_QWORD *)(a1 + 48);
    if (!v5)
      std::__throw_bad_function_call[abi:ne180100]();
    *(_DWORD *)(a1 + 16) = (*(uint64_t (**)(uint64_t, void ***))(*(_QWORD *)v5 + 48))(v5, &v11);
    *(_BYTE *)(a1 + 20) = 1;
    if (v9 < 0)
      operator delete(__p[0]);
    v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v10);
  return v6;
}

void mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1)
    CFDictionaryAddValue(a1, a2, a3);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::DSPPropertyInfo>::description(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const __CFString *v4;
  const __CFString *v5;
  CFIndex Length;
  CFIndex v7;
  CFTypeRef v8;
  std::vector<char>::value_type __x;
  std::vector<char> cf;

  cf.__begin_ = (std::vector<char>::pointer)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, std::vector<char> *))(*(_QWORD *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v8, cf.__begin_);
  if (cf.__begin_)
    CFRelease(cf.__begin_);
  v4 = CFCopyDescription(v8);
  v5 = v4;
  if (v4)
  {
    Length = CFStringGetLength(v4);
    v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    __x = 0;
    std::vector<char>::vector(&cf, v7, &__x);
    LODWORD(v7) = CFStringGetCString(v5, cf.__begin_, v7, 0x8000100u);
    CFRelease(v5);
    if ((_DWORD)v7)
      std::string::basic_string[abi:ne180100]<0>(a2, cf.__begin_);
    else
      std::string::basic_string[abi:ne180100]<0>(a2, "<error>");
    if (cf.__begin_)
    {
      cf.__end_ = cf.__begin_;
      operator delete(cf.__begin_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<empty>");
  }
  if (v8)
    CFRelease(v8);
}

void sub_1B589A30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)&__p);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::DSPPropertyInfo>::add_to(uint64_t a1, __CFArray **a2)
{
  CFTypeRef v4;
  CFTypeRef cf;

  cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v4, cf);
  if (cf)
    CFRelease(cf);
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, v4);
  if (v4)
    CFRelease(v4);
}

void sub_1B589A3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<DSP_Host_Types::DSPPropertyInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6994F10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DSP_Host_Types::DSPPropertyInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6994F10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<DSP_Host_Types::DSPPropertyInfo>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t DSP_TemplatedProperty<1684500589u,1768845428u,float>::DSP_TemplatedProperty(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  std::thread *v7;
  std::__thread_struct *v8;
  uint64_t *v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  std::thread v14;
  uint64_t *v15[2];
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E69703E8;
  v6 = (_QWORD *)(a1 + 8);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 8, a2);
  *(_QWORD *)(a1 + 40) = 0;
  v7 = (std::thread *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 1018212795;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 850045863;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0x696E70746467706DLL;
  *(_DWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 172) = a3;
  *(_OWORD *)(a1 + 176) = xmmword_1B5D68B50;
  *(_QWORD *)(a1 + 176) = std::chrono::steady_clock::now().__d_.__rep_ - 1000000 * *(_QWORD *)(a1 + 184);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
  if (!*(_QWORD *)(a1 + 32) && v17)
  {
    std::function<void ()(unsigned int,unsigned int)>::operator=(v6, (uint64_t)v16);
    v8 = (std::__thread_struct *)operator new();
    std::__thread_struct::__thread_struct(v8);
    v9 = (uint64_t *)operator new();
    v15[0] = v9;
    v15[1] = 0;
    *v9 = (uint64_t)v8;
    v9[1] = a1;
    v10 = pthread_create(&v14.__t_, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,DSP_TemplatedProperty<1684500589u,1768845428u,float>::setNotifyCallback(std::function<void ()(unsigned int,unsigned int)>)::{lambda(void)#1}>>, v9);
    if (v10)
    {
      std::__throw_system_error(v10, "thread constructor failed");
      __break(1u);
    }
    else
    {
      v15[0] = 0;
      std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,DSP_TemplatedProperty<1684500589u,1768845428u,float>::setNotifyCallback(std::function<void ()(unsigned int,unsigned int)>)::{lambda(void)#1}>>::reset[abi:ne180100](v15);
      if (!v7->__t_)
      {
        v7->__t_ = v14.__t_;
        v14.__t_ = 0;
        std::thread::~thread(&v14);
        goto LABEL_6;
      }
    }
    std::terminate();
  }
LABEL_6:
  v11 = v17;
  if (v17 == v16)
  {
    v12 = 4;
    v11 = v16;
    goto LABEL_10;
  }
  if (v17)
  {
    v12 = 5;
LABEL_10:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  return a1;
}

void sub_1B589A640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  _QWORD *v16;
  std::thread *v17;
  std::condition_variable *v18;
  std::mutex *v19;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](&a11);
  v21 = a15;
  if (a15 == &a12)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  std::mutex::~mutex(v19);
  std::condition_variable::~condition_variable(v18);
  std::thread::~thread(v17);
  v23 = *(_QWORD **)(v15 + 32);
  if (v23 == v16)
  {
    v24 = 4;
  }
  else
  {
    if (!v23)
      goto LABEL_11;
    v24 = 5;
    v16 = *(_QWORD **)(v15 + 32);
  }
  (*(void (**)(_QWORD *))(*v16 + 8 * v24))(v16);
LABEL_11:
  _Unwind_Resume(a1);
}

_QWORD *std::function<void ()(unsigned int,unsigned int)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v8, a2);
  if (v8 != a1)
  {
    v3 = v9;
    v4 = (_QWORD *)a1[3];
    if (v9 == v8)
    {
      if (v4 == a1)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v8[0] + 24))(v8, v10);
        (*(void (**)(_QWORD *))(*v9 + 32))(v9);
        v9 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a1[3] + 24))(a1[3], v8);
        (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        v9 = v8;
        (*(void (**)(_QWORD *, _QWORD *))(v10[0] + 24))(v10, a1);
        (*(void (**)(_QWORD *))(v10[0] + 32))(v10);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v8[0] + 24))(v8, a1);
        (*(void (**)(_QWORD *))(*v9 + 32))(v9);
        v9 = (_QWORD *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v4 == a1)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v8);
      (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
      a1[3] = v9;
      v9 = v8;
    }
    else
    {
      v9 = (_QWORD *)a1[3];
      a1[3] = v3;
    }
  }
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_14;
  }
  if (v9)
  {
    v6 = 5;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_1B589A8C0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,DSP_TemplatedProperty<1684500589u,1768845428u,float>::setNotifyCallback(std::function<void ()(unsigned int,unsigned int)>)::{lambda(void)#1}>>(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t v4;
  std::chrono::steady_clock::time_point v5;
  std::chrono::system_clock::time_point v6;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v7;
  std::chrono::steady_clock::time_point v8;
  unsigned int v9;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v10;
  BOOL v11;
  BOOL v12;
  int v13;
  unsigned int v14;
  uint64_t *v16;
  std::unique_lock<std::mutex> __lk;

  v16 = a1;
  v2 = std::__thread_local_data();
  v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = a1[1];
  do
  {
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v4 + 96);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v4 + 96));
    v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v6.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    v7.__d_.__rep_ = 100000000;
    if (v6.__d_.__rep_)
    {
      if (v6.__d_.__rep_ < 1)
      {
        if ((unint64_t)v6.__d_.__rep_ >= 0xFFDF3B645A1CAC09)
          v7.__d_.__rep_ = 1000 * v6.__d_.__rep_ + 100000000;
        else
          v7.__d_.__rep_ = 0x8000000005F5E100;
      }
      else if ((unint64_t)v6.__d_.__rep_ < 0x20C49BA5E1CD58)
      {
        v7.__d_.__rep_ = 1000 * v6.__d_.__rep_ + 100000000;
      }
      else
      {
        v7.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
      }
    }
    std::condition_variable::__do_timed_wait((std::condition_variable *)(v4 + 48), &__lk, v7);
    v8.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v9 = atomic_load((unsigned int *)(v4 + 160));
    v10 = v8.__d_.__rep_ - v5.__d_.__rep_;
    if (v9 == 1802071148)
    {
      v12 = 0;
      v11 = 0;
    }
    else
    {
      v12 = __OFSUB__(v10, 100000000);
      v11 = v10 - 100000000 < 0;
    }
    if (v11 != v12)
    {
      v13 = atomic_load((unsigned int *)(v4 + 160));
      std::function<void ()(unsigned int,unsigned int)>::operator()(*(_QWORD *)(v4 + 32), v13, *(_DWORD *)(v4 + 164));
    }
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    if (v9 == 1802071148)
      break;
    v14 = atomic_load((unsigned int *)(v4 + 160));
  }
  while (v14 != 1802071148);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,DSP_TemplatedProperty<1684500589u,1768845428u,float>::setNotifyCallback(std::function<void ()(unsigned int,unsigned int)>)::{lambda(void)#1}>>::reset[abi:ne180100](&v16);
  return 0;
}

void sub_1B589AA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, std::mutex *a11, char a12)
{
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,DSP_TemplatedProperty<1684500589u,1768845428u,float>::setNotifyCallback(std::function<void ()(unsigned int,unsigned int)>)::{lambda(void)#1}>>::reset[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,DSP_TemplatedProperty<1684500589u,1768845428u,float>::setNotifyCallback(std::function<void ()(unsigned int,unsigned int)>)::{lambda(void)#1}>>::reset[abi:ne180100](uint64_t **result)
{
  uint64_t *v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v1);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

uint64_t std::function<void ()(unsigned int,unsigned int)>::operator()(uint64_t a1, int a2, int a3)
{
  int v4;
  int v5;

  v5 = a2;
  v4 = a3;
  if (!a1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *, int *))(*(_QWORD *)a1 + 48))(a1, &v5, &v4);
}

void DSP_TemplatedProperty<1684500589u,1768845428u,float>::~DSP_TemplatedProperty(uint64_t a1)
{
  DSP_TemplatedProperty<1684500589u,1768845428u,float>::~DSP_TemplatedProperty(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t DSP_TemplatedProperty<1684500589u,1768845428u,float>::~DSP_TemplatedProperty(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_1E69703E8;
  if (*(_QWORD *)(a1 + 32))
  {
    atomic_store(0x6B696C6Cu, (unsigned int *)(a1 + 160));
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 48));
    std::thread::join((std::thread *)(a1 + 40));
  }
  std::mutex::~mutex((std::mutex *)(a1 + 96));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 48));
  std::thread::~thread((std::thread *)(a1 + 40));
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
    goto LABEL_7;
  }
  if (v2)
  {
    v3 = 5;
LABEL_7:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t DSP_TemplatedProperty<1685278561u,1768845428u,__CFDictionary const*>::~DSP_TemplatedProperty(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_1E69703C8;
  if (*(_QWORD *)(a1 + 32))
  {
    atomic_store(0x6B696C6Cu, (unsigned int *)(a1 + 160));
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 48));
    std::thread::join((std::thread *)(a1 + 40));
  }
  std::mutex::~mutex((std::mutex *)(a1 + 96));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 48));
  std::thread::~thread((std::thread *)(a1 + 40));
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
    goto LABEL_7;
  }
  if (v2)
  {
    v3 = 5;
LABEL_7:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void DSP_TemplatedProperty<1685278561u,1768845428u,__CFDictionary const*>::~DSP_TemplatedProperty(uint64_t a1)
{
  DSP_TemplatedProperty<1685278561u,1768845428u,__CFDictionary const*>::~DSP_TemplatedProperty(a1);
  JUMPOUT(0x1B5E50688);
}

void mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::DictionaryRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1)
    CFDictionaryAddValue(a1, a2, a3);
}

void DSP_DictionaryRefProperty<1685278561u,1768845428u>::~DSP_DictionaryRefProperty(_QWORD *a1)
{
  DSP_DictionaryRefProperty<1685278561u,1768845428u>::~DSP_DictionaryRefProperty(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t DSP_DictionaryRefProperty<1685278561u,1768845428u>::~DSP_DictionaryRefProperty(_QWORD *a1)
{
  unint64_t *v2;
  const void *v3;

  *a1 = &off_1E69703A8;
  v2 = a1 + 21;
  do
    v3 = (const void *)__ldaxr(v2);
  while (__stlxr(0, v2));
  if (v3)
    CFRelease(v3);
  return DSP_TemplatedProperty<1685278561u,1768845428u,__CFDictionary const*>::~DSP_TemplatedProperty((uint64_t)a1);
}

void DSP_TemplatedProperty<1983997011u,1768845428u,unsigned int>::setNotifyCallback(_QWORD *a1, uint64_t a2)
{
  std::__thread_struct *v3;
  uint64_t *v4;
  int v5;
  pthread_t v6;
  uint64_t *v7[2];

  if (!a1[4] && *(_QWORD *)(a2 + 24))
  {
    std::function<void ()(unsigned int,unsigned int)>::operator=(a1 + 1, a2);
    v3 = (std::__thread_struct *)operator new();
    std::__thread_struct::__thread_struct(v3);
    v4 = (uint64_t *)operator new();
    v7[0] = v4;
    v7[1] = 0;
    *v4 = (uint64_t)v3;
    v4[1] = (uint64_t)a1;
    v5 = pthread_create(&v6, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,DSP_TemplatedProperty<1983997011u,1768845428u,unsigned int>::setNotifyCallback(std::function<void ()(unsigned int,unsigned int)>)::{lambda(void)#1}>>, v4);
    if (v5)
    {
      std::__throw_system_error(v5, "thread constructor failed");
      __break(1u);
    }
    else
    {
      v7[0] = 0;
      std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,DSP_TemplatedProperty<1684500589u,1768845428u,float>::setNotifyCallback(std::function<void ()(unsigned int,unsigned int)>)::{lambda(void)#1}>>::reset[abi:ne180100](v7);
      if (!a1[5])
      {
        a1[5] = v6;
        v6 = 0;
        std::thread::~thread((std::thread *)&v6);
        return;
      }
    }
    std::terminate();
  }
}

void sub_1B589ADFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,DSP_TemplatedProperty<1983997011u,1768845428u,unsigned int>::setNotifyCallback(std::function<void ()(unsigned int,unsigned int)>)::{lambda(void)#1}>>(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t v4;
  std::chrono::steady_clock::time_point v5;
  std::chrono::system_clock::time_point v6;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v7;
  std::chrono::steady_clock::time_point v8;
  unsigned int v9;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v10;
  BOOL v11;
  BOOL v12;
  int v13;
  unsigned int v14;
  uint64_t *v16;
  std::unique_lock<std::mutex> __lk;

  v16 = a1;
  v2 = std::__thread_local_data();
  v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = a1[1];
  do
  {
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v4 + 96);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v4 + 96));
    v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v6.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    v7.__d_.__rep_ = 100000000;
    if (v6.__d_.__rep_)
    {
      if (v6.__d_.__rep_ < 1)
      {
        if ((unint64_t)v6.__d_.__rep_ >= 0xFFDF3B645A1CAC09)
          v7.__d_.__rep_ = 1000 * v6.__d_.__rep_ + 100000000;
        else
          v7.__d_.__rep_ = 0x8000000005F5E100;
      }
      else if ((unint64_t)v6.__d_.__rep_ < 0x20C49BA5E1CD58)
      {
        v7.__d_.__rep_ = 1000 * v6.__d_.__rep_ + 100000000;
      }
      else
      {
        v7.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
      }
    }
    std::condition_variable::__do_timed_wait((std::condition_variable *)(v4 + 48), &__lk, v7);
    v8.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v9 = atomic_load((unsigned int *)(v4 + 160));
    v10 = v8.__d_.__rep_ - v5.__d_.__rep_;
    if (v9 == 1802071148)
    {
      v12 = 0;
      v11 = 0;
    }
    else
    {
      v12 = __OFSUB__(v10, 100000000);
      v11 = v10 - 100000000 < 0;
    }
    if (v11 != v12)
    {
      v13 = atomic_load((unsigned int *)(v4 + 160));
      std::function<void ()(unsigned int,unsigned int)>::operator()(*(_QWORD *)(v4 + 32), v13, *(_DWORD *)(v4 + 164));
    }
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    if (v9 == 1802071148)
      break;
    v14 = atomic_load((unsigned int *)(v4 + 160));
  }
  while (v14 != 1802071148);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,DSP_TemplatedProperty<1684500589u,1768845428u,float>::setNotifyCallback(std::function<void ()(unsigned int,unsigned int)>)::{lambda(void)#1}>>::reset[abi:ne180100](&v16);
  return 0;
}

void sub_1B589AFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, std::mutex *a11, char a12)
{
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,DSP_TemplatedProperty<1684500589u,1768845428u,float>::setNotifyCallback(std::function<void ()(unsigned int,unsigned int)>)::{lambda(void)#1}>>::reset[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void DSP_TemplatedProperty<1983997011u,1768845428u,unsigned int>::~DSP_TemplatedProperty(uint64_t a1)
{
  DSP_TemplatedProperty<1983997011u,1768845428u,unsigned int>::~DSP_TemplatedProperty(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t DSP_TemplatedProperty<1983997011u,1768845428u,unsigned int>::~DSP_TemplatedProperty(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_1E6970388;
  if (*(_QWORD *)(a1 + 32))
  {
    atomic_store(0x6B696C6Cu, (unsigned int *)(a1 + 160));
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 48));
    std::thread::join((std::thread *)(a1 + 40));
  }
  std::mutex::~mutex((std::mutex *)(a1 + 96));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 48));
  std::thread::~thread((std::thread *)(a1 + 40));
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
    goto LABEL_7;
  }
  if (v2)
  {
    v3 = 5;
LABEL_7:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void AMCP::IO_Clock::~IO_Clock(AMCP::IO_Clock *this)
{
  AMCP::IO_Clock::~IO_Clock(this);
  JUMPOUT(0x1B5E50688);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E6970408;
  v2 = (char *)this + 32;
  v3 = (char *)*((_QWORD *)this + 7);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

uint64_t AMCP::IO_Clock::IO_Clock(uint64_t a1, uint64_t a2, int a3, double a4)
{
  uint64_t v8;
  AMCP::Time_Stamp_Historian *v9;
  void **v10;
  void **v11;
  double v12;
  char *v13;
  __int128 *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  __int128 *v19;
  int64_t v20;
  __int128 *v21;
  int64_t v22;
  uint64_t v23;
  __int128 *v24;
  __int128 *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  std::__shared_weak_count *v33;
  NSObject *v34;
  unint64_t *v35;
  unint64_t v36;
  _opaque_pthread_t *v37;
  mach_port_t v38;
  std::logic_error *exception;
  uint64_t v40;
  int v41;
  uint64_t v42;
  std::logic_error v43;
  __int128 v44;
  uint64_t v45;
  uint64_t (**v46)();
  __int128 v47;
  uint64_t v48;
  std::string v49;
  std::logic_error v50;
  std::logic_error v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  char v57;
  uint8_t buf[8];
  _BYTE v59[10];
  __int16 v60;
  int v61;
  _BYTE v62[24];
  int v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E6970408;
  *(_BYTE *)(a1 + 8) = 0;
  v8 = operator new();
  v9 = (AMCP::Time_Stamp_Historian *)v8;
  *(_QWORD *)v8 = off_1E699AE48;
  *(double *)(v8 + 8) = a4;
  *(_DWORD *)(v8 + 16) = a3;
  *(_BYTE *)(v8 + 20) = 1;
  *(_DWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = -1;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_BYTE *)(v8 + 56) = 1;
  v10 = (void **)(v8 + 64);
  *(_OWORD *)(v8 + 112) = 0u;
  v11 = (void **)(v8 + 112);
  *(_OWORD *)(v8 + 128) = 0u;
  *(_QWORD *)(v8 + 144) = 0;
  *(_OWORD *)(v8 + 60) = 0u;
  *(_OWORD *)(v8 + 76) = 0u;
  *(_OWORD *)(v8 + 92) = 0u;
  if (a4 == 0.0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v33 = *(std::__shared_weak_count **)v59;
    v34 = **(NSObject ***)buf;
    if (*(_QWORD *)v59)
    {
      v35 = (unint64_t *)(*(_QWORD *)v59 + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      v37 = pthread_self();
      v38 = pthread_mach_thread_np(v37);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v38;
      *(_WORD *)v59 = 2080;
      *(_QWORD *)&v59[2] = "Time_Stamp_Historian.cpp";
      v60 = 1024;
      v61 = 40;
      *(_WORD *)v62 = 2080;
      *(_QWORD *)&v62[2] = "not (nominal_sample_rate != 0)";
      _os_log_error_impl(&dword_1B57BA000, v34, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Nominal sample rate cannot be zero", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v57);
    exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Nominal sample rate cannot be zero", (uint64_t)&v49);
    std::logic_error::logic_error(&v50, &v49);
    v40 = MEMORY[0x1E0DE5018];
    v50.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v51, &v50);
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v56 = -1;
    v51.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v52 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v51);
    *(_QWORD *)&v62[8] = "AMCP::Time_Stamp_Historian::Time_Stamp_Historian(float64_t, uint32_t, BOOL, BOOL)";
    *(_QWORD *)&v62[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Clock/Time_Stamp_Historian.cpp";
    v63 = 40;
    std::vector<void *>::vector(&v44);
    v41 = backtrace((void **)v44, (*((_QWORD *)&v44 + 1) - (_QWORD)v44) >> 3);
    std::vector<void *>::resize((char **)&v44, v41);
    v47 = v44;
    v48 = v45;
    v44 = 0uLL;
    v45 = 0;
    v46 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v46);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::logic_error::logic_error(exception, (const std::logic_error *)buf);
    exception->__vftable = (std::logic_error_vtbl *)(v40 + 16);
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
    v42 = *(_QWORD *)v62;
    exception[1].__imp_.__imp_ = *(const char **)v62;
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
    v43 = *(std::logic_error *)&v62[8];
    LODWORD(exception[3].__vftable) = v63;
    exception[2] = v43;
    exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
    exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
  }
  v12 = 24000000.0 / a4;
  *(double *)(v8 + 40) = v12;
  v13 = (char *)operator new(0x48uLL);
  boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::destroy(v10);
  *((_QWORD *)v9 + 11) = v13;
  *((_QWORD *)v9 + 12) = 0;
  *((_QWORD *)v9 + 8) = v13;
  *((_QWORD *)v9 + 9) = v13 + 72;
  *((_QWORD *)v9 + 10) = v13;
  v14 = (__int128 *)*((_QWORD *)v9 + 14);
  v15 = *((_QWORD *)v9 + 15);
  if (v15 - (_QWORD)v14 != 48)
  {
    v16 = (char *)operator new(0x30uLL);
    v17 = v16;
    v18 = *((_QWORD *)v9 + 18);
    if (v18)
      v19 = (__int128 *)*((_QWORD *)v9 + 16);
    else
      v19 = 0;
    v20 = 2;
    if (v18 < 2)
      v20 = *((_QWORD *)v9 + 18);
    v21 = v19;
    if (v20)
    {
      v22 = v20 + 0x5555555555555555 * ((v15 - (uint64_t)v14) >> 3);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v15 - (uint64_t)v19) >> 3)) > v20)
        v22 = v20;
      v21 = (__int128 *)((char *)v19 + 24 * v22);
      if (v21 == *((__int128 **)v9 + 17))
        v21 = 0;
    }
    if (v19 == v21)
    {
      v23 = 0;
    }
    else
    {
      v23 = 0;
      v24 = (__int128 *)*((_QWORD *)v9 + 15);
      v25 = (__int128 *)*((_QWORD *)v9 + 17);
      v26 = v16;
      do
      {
        v27 = *v19;
        *((_QWORD *)v26 + 2) = *((_QWORD *)v19 + 2);
        *(_OWORD *)v26 = v27;
        v26 += 24;
        v19 = (__int128 *)((char *)v19 + 24);
        if (v19 == v24)
          v19 = v14;
        if (v19 == v25)
          v19 = 0;
        ++v23;
      }
      while (v19 != v21);
    }
    boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::destroy(v11);
    *((_QWORD *)v9 + 14) = v17;
    *((_QWORD *)v9 + 15) = v17 + 48;
    if (v23 == 2)
      v28 = 0;
    else
      v28 = v23;
    *((_QWORD *)v9 + 16) = v17;
    *((_QWORD *)v9 + 17) = &v17[24 * v28];
    *((_QWORD *)v9 + 18) = v23;
  }
  AMCP::Time_Stamp_Historian::clear_time_stamp_buffer(v9);
  AMCP::Time_Stamp_Historian::clear_time_stamp_deltas(v9);
  *(_QWORD *)v9 = &off_1E697F720;
  *(_QWORD *)(a1 + 16) = v9;
  v29 = operator new();
  *(double *)(v29 + 8) = v12;
  *(_QWORD *)v29 = &off_1E699EBA8;
  *(_QWORD *)(v29 + 16) = 0;
  *(_DWORD *)(v29 + 24) = 0;
  *(_QWORD *)(a1 + 24) = v29;
  v30 = (_QWORD *)(a2 + 24);
  v31 = *(_QWORD *)(a2 + 24);
  if (v31)
  {
    if (v31 == a2)
    {
      *(_QWORD *)(a1 + 56) = a1 + 32;
      (*(void (**)(_QWORD))(*(_QWORD *)*v30 + 24))(*v30);
      goto LABEL_32;
    }
    *(_QWORD *)(a1 + 56) = v31;
  }
  else
  {
    v30 = (_QWORD *)(a1 + 56);
  }
  *v30 = 0;
LABEL_32:
  *(double *)(a1 + 64) = v12;
  *(double *)(a1 + 72) = 1.0 / v12;
  *(_DWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  return a1;
}

void sub_1B589B6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  void **v39;
  void **v40;

  boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::destroy(v40);
  boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::destroy(v39);
  MEMORY[0x1B5E50688](v38, 0x10A1C40D17D5D67);
  _Unwind_Resume(a1);
}

BOOL AMCP::IO_Clock::has_time(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  _BOOL8 v3;

  v2 = this + 20;
  os_unfair_lock_lock(this + 20);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)&this[4]._os_unfair_lock_opaque + 16))(*(_QWORD *)&this[4]._os_unfair_lock_opaque))
    v3 = LOBYTE(this[38]._os_unfair_lock_opaque) != 0;
  else
    v3 = 0;
  os_unfair_lock_unlock(v2);
  return v3;
}

void sub_1B589B878(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t AMCP::IO_Clock::convert_sample_to_host_time(os_unfair_lock_s *this, double a2)
{
  os_unfair_lock_s *v4;
  AMCP::Log::Scope_Registry *v5;
  double v6;
  unint64_t v7;
  NSObject *v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  void *exception;
  __int128 v13;
  uint64_t v14;
  uint64_t (**v15)();
  __int128 v16;
  uint64_t v17;
  std::string v18;
  std::logic_error v19;
  std::logic_error v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint8_t buf[8];
  __int16 v28;
  char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  _BYTE v33[14];
  const char *v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = this + 20;
  os_unfair_lock_lock(this + 20);
  v5 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)&this[4]._os_unfair_lock_opaque
                                                                      + 16))(*(_QWORD *)&this[4]._os_unfair_lock_opaque);
  if (!(_DWORD)v5 || !LOBYTE(this[38]._os_unfair_lock_opaque))
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v11;
      v28 = 2080;
      v29 = "IO_Clock.cpp";
      v30 = 1024;
      v31 = 69;
      v32 = 2080;
      *(_QWORD *)v33 = "not (has_time_internal())";
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s convert_sample_to_host_time, clock does not have time", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"convert_sample_to_host_time, clock does not have time", (uint64_t)&v18);
    std::logic_error::logic_error(&v19, &v18);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v20, &v19);
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v21 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(_QWORD *)&v33[6] = "uint64_t AMCP::IO_Clock::convert_sample_to_host_time(float64_t) const";
    v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Clock/IO_Clock.cpp";
    v35 = 69;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    v16 = v13;
    v17 = v14;
    v13 = 0uLL;
    v14 = 0;
    v15 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v15);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v6 = *(double *)&this[22]._os_unfair_lock_opaque;
  if (v6 <= a2)
  {
    if (v6 < a2)
      v7 = *(_QWORD *)&this[24]._os_unfair_lock_opaque
         + (unint64_t)((a2 - v6) * *(double *)&this[16]._os_unfair_lock_opaque);
    else
      v7 = *(_QWORD *)&this[24]._os_unfair_lock_opaque;
  }
  else
  {
    v7 = *(_QWORD *)&this[24]._os_unfair_lock_opaque
       - (unint64_t)((v6 - a2) * *(double *)&this[16]._os_unfair_lock_opaque);
  }
  os_unfair_lock_unlock(v4);
  return v7;
}

void sub_1B589BB14(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

double AMCP::IO_Clock::convert_host_to_sample_time_internal(AMCP::IO_Clock *this, unint64_t a2)
{
  AMCP::Log::Scope_Registry *v4;
  unint64_t v5;
  double v6;
  NSObject *v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  void *exception;
  __int128 v12;
  uint64_t v13;
  uint64_t (**v14)();
  __int128 v15;
  uint64_t v16;
  std::string v17;
  std::logic_error v18;
  std::logic_error v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint8_t buf[8];
  __int16 v27;
  char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  _BYTE v32[14];
  const char *v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
  if (!(_DWORD)v4 || !*((_BYTE *)this + 152))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v8 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = pthread_self();
      v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v10;
      v27 = 2080;
      v28 = "IO_Clock.cpp";
      v29 = 1024;
      v30 = 190;
      v31 = 2080;
      *(_QWORD *)v32 = "not (has_time_internal())";
      _os_log_error_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s convert_host_to_sample_time, clock does not have time", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"convert_host_to_sample_time, clock does not have time", (uint64_t)&v17);
    std::logic_error::logic_error(&v18, &v17);
    v18.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v19, &v18);
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = -1;
    v19.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v20 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(_QWORD *)&v32[6] = "float64_t AMCP::IO_Clock::convert_host_to_sample_time_internal(uint64_t) const";
    v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Clock/IO_Clock.cpp";
    v34 = 190;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    v15 = v12;
    v16 = v13;
    v12 = 0uLL;
    v13 = 0;
    v14 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v14);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v5 = *((_QWORD *)this + 12);
  if (v5 <= a2)
  {
    if (v5 >= a2)
      v6 = *((double *)this + 11);
    else
      v6 = *((double *)this + 11) + *((double *)this + 9) * (double)(a2 - v5);
  }
  else
  {
    v6 = *((double *)this + 11) - *((double *)this + 9) * (double)(v5 - a2);
  }
  return floor(v6);
}

void sub_1B589BD88(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMCP::IO_Clock::get_current_time(AMCP::IO_Clock *this, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;

  v4 = (os_unfair_lock_s *)(a2 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 80));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 16))(*(_QWORD *)(a2 + 16))
    && *(_BYTE *)(a2 + 152))
  {
    v5 = mach_absolute_time();
    *((_QWORD *)this + 7) = 0;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
    *((_DWORD *)this + 14) = 7;
    *((_QWORD *)this + 1) = v5;
    *(double *)this = AMCP::IO_Clock::convert_host_to_sample_time_internal((AMCP::IO_Clock *)a2, v5);
    *((double *)this + 2) = *(double *)(a2 + 64) / *(double *)(*(_QWORD *)(a2 + 16) + 40);
  }
  else
  {
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0x3FF0000000000000;
    *((_QWORD *)this + 7) = 7;
  }
  os_unfair_lock_unlock(v4);
}

void AMCP::IO_Clock::get_current_zts(AMCP::IO_Clock *this, uint64_t a2)
{
  os_unfair_lock_s *v4;
  __int128 v5;
  __int128 v6;

  v4 = (os_unfair_lock_s *)(a2 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 80));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 16))(*(_QWORD *)(a2 + 16))
    && *(_BYTE *)(a2 + 152))
  {
    v5 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)this = *(_OWORD *)(a2 + 88);
    *((_OWORD *)this + 1) = v5;
    v6 = *(_OWORD *)(a2 + 136);
    *((_OWORD *)this + 2) = *(_OWORD *)(a2 + 120);
    *((_OWORD *)this + 3) = v6;
  }
  else
  {
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  os_unfair_lock_unlock(v4);
}

BOOL AMCP::IO_Clock::reset_time(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  int os_unfair_lock_opaque_low;
  AMCP::Time_Stamp_Historian *v4;

  v2 = this + 20;
  os_unfair_lock_lock(this + 20);
  os_unfair_lock_opaque_low = LOBYTE(this[38]._os_unfair_lock_opaque);
  if (LOBYTE(this[38]._os_unfair_lock_opaque))
  {
    v4 = *(AMCP::Time_Stamp_Historian **)&this[4]._os_unfair_lock_opaque;
    AMCP::Time_Stamp_Historian::clear_time_stamp_buffer(v4);
    AMCP::Time_Stamp_Historian::clear_time_stamp_deltas(v4);
    if (LOBYTE(this[38]._os_unfair_lock_opaque))
      LOBYTE(this[38]._os_unfair_lock_opaque) = 0;
  }
  os_unfair_lock_unlock(v2);
  return os_unfair_lock_opaque_low != 0;
}

uint64_t AMCP::IO_Clock::update_time(AMCP::IO_Clock *this)
{
  uint64_t v2;
  AMCP::Log::Scope_Registry *v3;
  uint64_t v5;
  double *v6;
  int v7;
  AMCP::Time_Stamp_Historian *v8;
  __int128 v9;
  __n128 v10;
  __int128 v11;
  AMCP::Time_Stamp_Historian *v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  double v19;
  AMCP::Log::Scope_Registry *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  unint64_t v27;
  double v29;
  NSObject *v31;
  _opaque_pthread_t *v33;
  mach_port_t v34;
  void *exception;
  NSObject *v36;
  _opaque_pthread_t *v37;
  mach_port_t v38;
  void *v39;
  std::logic_error *v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t (**v49)();
  __int128 v50;
  uint64_t v51;
  std::string v52;
  std::logic_error v53;
  std::logic_error v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  char v60;
  uint8_t buf[8];
  __int16 v62;
  char *v63;
  __int16 v64;
  int v65;
  __int16 v66;
  _BYTE v67[28];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 7);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v2 + 48))(&v43);
  os_unfair_lock_lock((os_unfair_lock_t)this + 20);
  if ((BYTE8(v46) & 3) != 0 && *((_QWORD *)&v43 + 1) == 0)
  {
    if (*((_QWORD *)this + 12))
    {
      v5 = 0;
      *((_BYTE *)this + 8) = 1;
      goto LABEL_83;
    }
  }
  else if ((BYTE8(v46) & 3) == 0)
  {
LABEL_82:
    v5 = 0;
    goto LABEL_83;
  }
  v6 = (double *)((char *)this + 88);
  v7 = *((unsigned __int8 *)this + 152);
  if (*((_BYTE *)this + 152)
    && DWORD2(v46) == *((_DWORD *)this + 36)
    && ((BYTE8(v46) & 1) == 0 || *(double *)&v43 == *v6)
    && ((BYTE8(v46) & 2) == 0 || *((_QWORD *)&v43 + 1) == *((_QWORD *)this + 12))
    && ((BYTE8(v46) & 4) == 0 || *(double *)&v44 == *((double *)this + 13))
    && ((BYTE8(v46) & 8) == 0 || *((_QWORD *)&v44 + 1) == *((_QWORD *)this + 14))
    && ((BYTE8(v46) & 0x10) == 0
     || __PAIR64__(WORD1(v45), (unsigned __int16)v45) == __PAIR64__(*((unsigned __int16 *)this + 61), *((unsigned __int16 *)this + 60))&& *(_QWORD *)((char *)&v45 + 4) == *(_QWORD *)((char *)this + 124)&& __PAIR64__((unsigned __int16)v46, HIDWORD(v45)) == __PAIR64__(*((unsigned __int16 *)this + 68), *((_DWORD *)this + 33))&& __PAIR64__(WORD2(v46), WORD1(v46)) == __PAIR64__(*((unsigned __int16 *)this + 70), *((unsigned __int16 *)this + 69))&& WORD3(v46) == *((unsigned __int16 *)this + 71)))
  {
    goto LABEL_82;
  }
  if (*((_BYTE *)this + 8))
  {
    v8 = (AMCP::Time_Stamp_Historian *)*((_QWORD *)this + 2);
    AMCP::Time_Stamp_Historian::clear_time_stamp_buffer(v8);
    AMCP::Time_Stamp_Historian::clear_time_stamp_deltas(v8);
    *((_BYTE *)this + 8) = 0;
    v7 = *((unsigned __int8 *)this + 152);
  }
  v9 = v44;
  *(_OWORD *)v6 = v43;
  *(_OWORD *)((char *)this + 104) = v9;
  v10.n128_u64[1] = *((_QWORD *)&v45 + 1);
  v11 = v46;
  *(_OWORD *)((char *)this + 120) = v45;
  *(_OWORD *)((char *)this + 136) = v11;
  if (!v7)
    *((_BYTE *)this + 152) = 1;
  v10.n128_u64[0] = v43;
  v41 = v43;
  v42 = 0;
  v12 = (AMCP::Time_Stamp_Historian *)*((_QWORD *)this + 2);
  if (*(double *)&v43 != 0.0 || *((_QWORD *)&v43 + 1))
  {
    v13 = *((_QWORD *)v12 + 11);
    if (v13 == *((_QWORD *)v12 + 8))
      v13 = *((_QWORD *)v12 + 9);
    if (*(double *)&v43 == *(double *)(v13 - 24) && *(_OWORD *)(v13 - 16) == *((unint64_t *)&v43 + 1))
    {
      AMCP::Log::Scope_Registry::get(v3);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v31 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        v33 = pthread_self();
        v34 = pthread_mach_thread_np(v33);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v34;
        v62 = 2080;
        v63 = "Time_Stamp_Historian.cpp";
        v64 = 1024;
        v65 = 275;
        v66 = 2080;
        *(_QWORD *)v67 = "not (not(new_time_stamp == m_time_stamp_buffer.back()))";
        _os_log_error_impl(&dword_1B57BA000, v31, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s time stamp is a repeat", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v60);
      exception = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"time stamp is a repeat", (uint64_t)&v52);
      std::logic_error::logic_error(&v53, &v52);
      v53.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v54, &v53);
      v56 = 0;
      v57 = 0;
      v58 = 0;
      v59 = -1;
      v54.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v55 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v54);
      *(_QWORD *)&v67[6] = "BOOL AMCP::Time_Stamp_Historian::update(const Zero_Time_Stamp &)";
      *(_QWORD *)&v67[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Clock/Time_Stamp_Historian.cpp";
      *(_DWORD *)&v67[22] = 275;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v47);
      v50 = v47;
      v51 = v48;
      v47 = 0uLL;
      v48 = 0;
      v49 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v49);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
    }
    if ((*(unsigned int (**)(_QWORD, __n128))(*(_QWORD *)v12 + 32))(*((_QWORD *)this + 2), v10))
    {
      *((_QWORD *)v12 + 4) = v42;
    }
    else if (v42 != *((_QWORD *)v12 + 4))
    {
      goto LABEL_62;
    }
    os_unfair_lock_lock((os_unfair_lock_t)v12 + 15);
    v14 = *((_QWORD *)v12 + 11);
    if (v14 == *((_QWORD *)v12 + 8))
      v14 = *((_QWORD *)v12 + 9);
    v15 = *(double *)&v41 < *(double *)(v14 - 24) || *((_QWORD *)&v41 + 1) < *(_QWORD *)(v14 - 16);
    os_unfair_lock_unlock((os_unfair_lock_t)v12 + 15);
    if (!*((_BYTE *)v12 + 56) || v15)
    {
      if (*((_BYTE *)v12 + 56))
        v16 = 1;
      else
        v16 = v15;
      if (v16 != 1)
        goto LABEL_63;
    }
    else
    {
      if ((*(unsigned int (**)(AMCP::Time_Stamp_Historian *))(*(_QWORD *)v12 + 24))(v12))
        (*(void (**)(AMCP::Time_Stamp_Historian *))(*(_QWORD *)v12 + 56))(v12);
      if (*((_BYTE *)v12 + 20)
        && (*(unsigned int (**)(AMCP::Time_Stamp_Historian *))(*(_QWORD *)v12 + 24))(v12)
        && *((_QWORD *)&v41 + 1) > mach_absolute_time() + 24000)
      {
        kdebug_trace();
        os_unfair_lock_lock((os_unfair_lock_t)v12 + 15);
        os_unfair_lock_unlock((os_unfair_lock_t)v12 + 15);
      }
      else
      {
        if (((*(uint64_t (**)(AMCP::Time_Stamp_Historian *))(*(_QWORD *)v12 + 32))(v12) & 1) != 0)
          goto LABEL_63;
        os_unfair_lock_lock((os_unfair_lock_t)v12 + 15);
        v18 = *((_QWORD *)v12 + 11);
        if (v18 == *((_QWORD *)v12 + 8))
          v18 = *((_QWORD *)v12 + 9);
        LODWORD(v17) = *((_DWORD *)v12 + 4);
        v19 = *(double *)(v18 - 24) + (double)v17;
        os_unfair_lock_unlock((os_unfair_lock_t)v12 + 15);
        if (*(double *)&v41 == v19)
          goto LABEL_63;
      }
    }
LABEL_62:
    kdebug_trace();
    AMCP::Time_Stamp_Historian::clear_time_stamp_buffer(v12);
    AMCP::Time_Stamp_Historian::clear_time_stamp_deltas(v12);
LABEL_63:
    kdebug_trace();
    kdebug_trace();
    (*(void (**)(AMCP::Time_Stamp_Historian *, __int128 *))(*(_QWORD *)v12 + 48))(v12, &v41);
    v12 = (AMCP::Time_Stamp_Historian *)*((_QWORD *)this + 2);
  }
  v20 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(AMCP::Time_Stamp_Historian *, __n128))(*(_QWORD *)v12 + 16))(v12, v10);
  if ((_DWORD)v20 && *((_BYTE *)this + 152))
  {
    v21 = *((_QWORD *)this + 2);
    if (!*(_QWORD *)(v21 + 144))
    {
      v40 = std::logic_error::logic_error((std::logic_error *)buf, "circular_buffer");
      *(_QWORD *)buf = MEMORY[0x1E0DE5028] + 16;
      boost::throw_exception<std::out_of_range>(v40);
    }
    v23 = *(_QWORD *)(v21 + 120);
    v22 = *(_QWORD *)(v21 + 128);
    if (v23 - v22 <= 0)
      v24 = 0x5555555555555555 * ((v23 - *(_QWORD *)(v21 + 112)) >> 3);
    else
      v24 = 0;
    v25 = v22 + 24 * v24;
    v26 = *(double *)v25;
    v27 = *(_QWORD *)(v25 + 8);
    if (v26 == 0.0 && v27 == 0)
    {
      AMCP::Log::Scope_Registry::get(v20);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v36 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        v37 = pthread_self();
        v38 = pthread_mach_thread_np(v37);
        *(_DWORD *)buf = 67110402;
        *(_DWORD *)&buf[4] = v38;
        v62 = 2080;
        v63 = "IO_Clock.cpp";
        v64 = 1024;
        v65 = 223;
        v66 = 2080;
        *(_QWORD *)v67 = "not (newest_delta.is_non_zero())";
        *(_WORD *)&v67[8] = 2048;
        *(_QWORD *)&v67[10] = *((_QWORD *)&v41 + 1);
        *(_WORD *)&v67[18] = 2048;
        *(_QWORD *)&v67[20] = v41;
        _os_log_error_impl(&dword_1B57BA000, v36, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s obtained a zero timestamp delta, after processing new zts host %llu sample %f", buf, 0x36u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v60);
      v39 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"obtained a zero timestamp delta, after processing new zts host %llu sample %f", (uint64_t)&v52, *((_QWORD *)&v41 + 1), (_QWORD)v41);
      std::logic_error::logic_error(&v53, &v52);
      v53.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v54, &v53);
      v56 = 0;
      v57 = 0;
      v58 = 0;
      v59 = -1;
      v54.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v55 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v54);
      *(_QWORD *)&v67[6] = "BOOL AMCP::IO_Clock::process_new_time_stamp_internal(const Zero_Time_Stamp &)";
      *(_QWORD *)&v67[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Clock/IO_Clock.cpp";
      *(_DWORD *)&v67[22] = 223;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v47);
      v50 = v47;
      v51 = v48;
      v47 = 0uLL;
      v48 = 0;
      v49 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v49);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v39, (uint64_t)buf);
    }
    if (*(_DWORD *)(v21 + 24) == 1)
      v29 = *(double *)(v21 + 40);
    else
      v29 = (*(double (**)(_QWORD, double))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3), (double)v27 / v26);
    *((double *)this + 8) = v29;
    *((double *)this + 9) = 1.0 / v29;
  }
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2)) & 1) == 0)
  {
    if (*((_BYTE *)this + 152))
      *((_BYTE *)this + 152) = 0;
    goto LABEL_82;
  }
  v5 = 1;
LABEL_83:
  os_unfair_lock_unlock((os_unfair_lock_t)this + 20);
  return v5;
}

void sub_1B589C9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void boost::throw_exception<std::out_of_range>(const std::logic_error *a1)
{
  char *exception;

  exception = (char *)__cxa_allocate_exception(0x40uLL);
  *(_QWORD *)exception = &unk_1E69A1F88;
  std::logic_error::logic_error((std::logic_error *)(exception + 8), a1);
  *((_QWORD *)exception + 5) = 0;
  *((_QWORD *)exception + 6) = 0;
  *((_DWORD *)exception + 14) = -1;
  *(_QWORD *)exception = &off_1E699AEF0;
  *((_QWORD *)exception + 1) = &unk_1E699AF20;
  *((_QWORD *)exception + 3) = &unk_1E699AF48;
  *((_QWORD *)exception + 4) = 0;
}

uint64_t boost::wrapexcept<std::out_of_range>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  MEMORY[0x1B5E50100](a1 + 8);
  return a1;
}

uint64_t boost::wrapexcept<std::out_of_range>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E69A1F88;
  std::logic_error::logic_error((std::logic_error *)(v2 + 8), (const std::logic_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = MEMORY[0x1E0DE5028] + 16;
  *(_QWORD *)(v2 + 24) = &unk_1E69A2000;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &off_1E699AEF0;
  *(_QWORD *)(v2 + 8) = &unk_1E699AF20;
  *(_QWORD *)(v2 + 24) = &unk_1E699AF48;
  boost::exception_detail::copy_boost_exception(v2 + 24, a1 + 24);
  return v2;
}

void boost::wrapexcept<std::out_of_range>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::out_of_range>::wrapexcept((uint64_t)exception, a1);
}

void sub_1B589CD74(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::out_of_range>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  MEMORY[0x1B5E50100](a1 + 8);
  JUMPOUT(0x1B5E50688);
}

void `non-virtual thunk to'boost::wrapexcept<std::out_of_range>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  JUMPOUT(0x1B5E50100);
}

{
  *(_QWORD *)(a1 + 16) = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  MEMORY[0x1B5E50100](a1);
  JUMPOUT(0x1B5E50688);
}

void `non-virtual thunk to'boost::wrapexcept<std::out_of_range>::~wrapexcept(_QWORD *a1)
{
  *a1 = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  JUMPOUT(0x1B5E50100);
}

{
  *a1 = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  MEMORY[0x1B5E50100](a1 - 2);
  JUMPOUT(0x1B5E50688);
}

uint64_t boost::wrapexcept<std::out_of_range>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E69A1F88;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE5028] + 16;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_1E69A2000;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &off_1E699AEF0;
  *(_QWORD *)(a1 + 8) = &unk_1E699AF20;
  *(_QWORD *)(a1 + 24) = &unk_1E699AF48;
  return a1;
}

void std::__shared_ptr_emplace<AMCP::DAL::Mixing_Ring_Buffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6970438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::DAL::Mixing_Ring_Buffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6970438;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::DAL::Mixing_Ring_Buffer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::pair<std::string,AMCP::Thing>::pair[abi:ne180100]<char const* const&,std::string const&,0>(_QWORD *a1, char *a2, __int128 *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  __int128 v7;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  *(_OWORD *)(v5 + 3) = 0u;
  v6 = v5 + 3;
  v6[4] = 0;
  *((_OWORD *)v6 + 1) = 0u;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    v6[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)v6 = v7;
  }
  a1[7] = AMCP::Implementation::In_Place_Storage<std::string>::dispatch;
  return a1;
}

void sub_1B589D048(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unint64_t AMCP::DAL::DAL_Settings::DAL_Settings(unint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  std::pmr *default_resource;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  void (*v20)(uint64_t, uint64_t);
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v30;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  default_resource = (std::pmr *)std::pmr::get_default_resource((std::pmr *)a1);
  *(_QWORD *)(a1 + 16) = default_resource;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = std::pmr::get_default_resource(default_resource);
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 1065353216;
  v6 = a2[1];
  if (v6)
  {
    v7 = *a2;
    v8 = *a2 + (v6 << 6);
    do
    {
      v9 = std::__string_hash<char>::operator()[abi:ne180100](v7);
      v10 = v9;
      v11 = *(_QWORD *)(a1 + 8);
      if (v11)
      {
        v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
        v12.i16[0] = vaddlv_u8(v12);
        v13 = v12.u32[0];
        if (v12.u32[0] > 1uLL)
        {
          v2 = v9;
          if (v9 >= v11)
            v2 = v9 % v11;
        }
        else
        {
          v2 = (v11 - 1) & v9;
        }
        v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v2);
        if (v14)
        {
          for (i = *v14; i; i = *(unsigned __int8 **)i)
          {
            v16 = *((_QWORD *)i + 1);
            if (v16 == v10)
            {
              if (std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(i + 16, (unsigned __int8 *)v7))
                goto LABEL_46;
            }
            else
            {
              if (v13 > 1)
              {
                if (v16 >= v11)
                  v16 %= v11;
              }
              else
              {
                v16 &= v11 - 1;
              }
              if (v16 != v2)
                break;
            }
          }
        }
      }
      v17 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 80, 8);
      v18 = v17;
      v30 = v17;
      *(_QWORD *)v17 = 0;
      *(_QWORD *)(v17 + 8) = v10;
      if (*(char *)(v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v17 + 16), *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
      }
      else
      {
        v19 = *(_OWORD *)v7;
        *(_QWORD *)(v17 + 32) = *(_QWORD *)(v7 + 16);
        *(_OWORD *)(v17 + 16) = v19;
      }
      *(_OWORD *)(v18 + 40) = 0u;
      *(_QWORD *)(v18 + 72) = 0;
      *(_OWORD *)(v18 + 56) = 0u;
      v20 = *(void (**)(uint64_t, uint64_t))(v7 + 56);
      if (v20)
        v20(1, v7 + 24);
      v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
      v22 = *(float *)(a1 + 48);
      if (!v11 || (float)(v22 * (float)v11) < v21)
      {
        v23 = (v11 & (v11 - 1)) != 0;
        if (v11 < 3)
          v23 = 1;
        v24 = v23 | (2 * v11);
        v25 = vcvtps_u32_f32(v21 / v22);
        if (v24 <= v25)
          v26 = v25;
        else
          v26 = v24;
        std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__rehash<true>(a1, v26);
        v11 = *(_QWORD *)(a1 + 8);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v10 >= v11)
            v2 = v10 % v11;
          else
            v2 = v10;
        }
        else
        {
          v2 = (v11 - 1) & v10;
        }
      }
      v27 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v2);
      if (v27)
      {
        *(_QWORD *)v30 = *v27;
      }
      else
      {
        *(_QWORD *)v30 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v30;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = a1 + 24;
        if (!*(_QWORD *)v30)
          goto LABEL_45;
        v28 = *(_QWORD *)(*(_QWORD *)v30 + 8);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v28 >= v11)
            v28 %= v11;
        }
        else
        {
          v28 &= v11 - 1;
        }
        v27 = (uint64_t *)(*(_QWORD *)a1 + 8 * v28);
      }
      *v27 = v30;
LABEL_45:
      ++*(_QWORD *)(a1 + 40);
LABEL_46:
      v7 += 64;
    }
    while (v7 != v8);
  }
  return a1;
}

void sub_1B589D348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _BYTE *a10)
{
  uint64_t v10;
  uint64_t v11;

  std::__hash_node_destructor<std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *>>>::operator()[abi:ne180100](a10, v11);
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table(v10);
  _Unwind_Resume(a1);
}

AMCP::DAL::DALSupport *std::allocate_shared[abi:ne180100]<AMCP::DAL::File,std::allocator<AMCP::DAL::File>,CA::StreamDescription const&,AMCP::DAL::DAL_Settings &,void>(AMCP::DAL::DALSupport **a1, unsigned int a2, uint64_t a3)
{
  _QWORD *v6;
  AMCP::DAL::DALSupport *result;

  v6 = operator new(0x28uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E6995E78;
  result = AMCP::DAL::File::File((AMCP::DAL::DALSupport *)(v6 + 3), a2, a3);
  *a1 = result;
  a1[1] = (AMCP::DAL::DALSupport *)v6;
  return result;
}

void sub_1B589D3FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,AMCP::Thing>::~pair(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD);

  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 56);
  if (v2)
    v2(0, a1 + 24, 0, 0);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 24));
  v2 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    std::__bucket_list_deallocator<std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *> *> *>>::operator()[abi:ne180100](*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), v2);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__deallocate_node(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;

  v3 = result;
  while (a2)
  {
    v4 = (_QWORD *)*a2;
    std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *>>::destroy[abi:ne180100]<std::pair<std::string const,AMCP::Thing>>((uint64_t)(a2 + 2));
    result = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(v3 + 32) + 24))(*(_QWORD *)(v3 + 32), a2, 80, 8);
    a2 = v4;
  }
  return result;
}

uint64_t std::__bucket_list_deallocator<std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *> *> *>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, a3, 8 * a1, 8);
}

void std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *>>::destroy[abi:ne180100]<std::pair<std::string const,AMCP::Thing>>(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD);

  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 56);
  if (v2)
    v2(0, a1 + 24, 0, 0);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__shared_ptr_emplace<AMCP::DAL::File>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6995E78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::DAL::File>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6995E78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<AMCP::DAL::File>::__on_zero_shared(uint64_t a1)
{
  AMCP::DAL::File::~File((std::__shared_weak_count **)(a1 + 24));
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__rehash<true>(unint64_t result, size_t __n)
{
  unint64_t v2;
  unint64_t v3;
  int8x8_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;

  v2 = result;
  if (__n == 1)
  {
    v3 = 2;
  }
  else
  {
    v3 = __n;
    if ((__n & (__n - 1)) != 0)
    {
      result = std::__next_prime(__n);
      v3 = result;
    }
  }
  v4 = *(int8x8_t *)(v2 + 8);
  if (v3 <= *(_QWORD *)&v4)
  {
    if (v3 >= *(_QWORD *)&v4)
      return result;
    result = vcvtps_u32_f32((float)*(unint64_t *)(v2 + 40) / *(float *)(v2 + 48));
    if (*(_QWORD *)&v4 < 3uLL || (v10 = (uint8x8_t)vcnt_s8(v4), v10.i16[0] = vaddlv_u8(v10), v10.u32[0] > 1uLL))
    {
      result = std::__next_prime(result);
    }
    else
    {
      v11 = 1 << -(char)__clz(result - 1);
      if (result >= 2)
        result = v11;
    }
    if (v3 <= result)
      v3 = result;
    if (v3 >= *(_QWORD *)&v4)
      return result;
    if (!v3)
    {
      v14 = *(_QWORD *)v2;
      *(_QWORD *)v2 = 0;
      if (v14)
        result = std::__bucket_list_deallocator<std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *> *> *>>::operator()[abi:ne180100](*(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), v14);
      *(_QWORD *)(v2 + 8) = 0;
      return result;
    }
  }
  if (v3 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v2 + 16) + 16))(*(_QWORD *)(v2 + 16), 8 * v3, 8);
  v5 = *(_QWORD *)v2;
  *(_QWORD *)v2 = result;
  if (v5)
    result = std::__bucket_list_deallocator<std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *> *> *>>::operator()[abi:ne180100](*(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), v5);
  v6 = 0;
  *(_QWORD *)(v2 + 8) = v3;
  do
    *(_QWORD *)(*(_QWORD *)v2 + 8 * v6++) = 0;
  while (v3 != v6);
  v7 = *(_QWORD **)(v2 + 24);
  if (v7)
  {
    v8 = v7[1];
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      if (v8 >= v3)
        v8 %= v3;
    }
    else
    {
      v8 &= v3 - 1;
    }
    *(_QWORD *)(*(_QWORD *)v2 + 8 * v8) = v2 + 24;
    v12 = (_QWORD *)*v7;
    if (*v7)
    {
      do
      {
        v13 = v12[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v13 >= v3)
            v13 %= v3;
        }
        else
        {
          v13 &= v3 - 1;
        }
        if (v13 != v8)
        {
          if (!*(_QWORD *)(*(_QWORD *)v2 + 8 * v13))
          {
            *(_QWORD *)(*(_QWORD *)v2 + 8 * v13) = v7;
            goto LABEL_31;
          }
          *v7 = *v12;
          *v12 = **(_QWORD **)(*(_QWORD *)v2 + 8 * v13);
          **(_QWORD **)(*(_QWORD *)v2 + 8 * v13) = v12;
          v12 = v7;
        }
        v13 = v8;
LABEL_31:
        v7 = v12;
        v12 = (_QWORD *)*v12;
        v8 = v13;
      }
      while (v12);
    }
  }
  return result;
}

void std::__hash_node_destructor<std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *>>>::operator()[abi:ne180100](_BYTE *a1, uint64_t a2)
{
  if (a1[8])
    std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *>>::destroy[abi:ne180100]<std::pair<std::string const,AMCP::Thing>>(a2 + 16);
  if (a2)
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(***(_QWORD ***)a1 + 24))(**(_QWORD **)a1, a2, 80, 8);
}

void std::shared_ptr<AMCP::DAL::File>::reset[abi:ne180100](_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t AMCP::DAL::Ring_Buffer_Base::get_length_in_frames(AMCP::DAL::Ring_Buffer_Base *this, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = *(_QWORD *)(a2 + 88);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  else
    v5 = 0;
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_DWORD *)this = 2;
  *((_QWORD *)this + 1) = v5;
  *((_QWORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 24) = v6;
  return result;
}

BOOL caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::intersection(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  AMCP::DAL::DAL_Time *v3;
  AMCP::DAL::DAL_Time *v6;
  _BOOL8 result;
  AMCP::DAL::DAL_Time *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  v3 = (AMCP::DAL::DAL_Time *)a3;
  v6 = (AMCP::DAL::DAL_Time *)(a3 + 5);
  result = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a3, (AMCP::DAL::DAL_Time *)(a3 + 5));
  if (!result)
  {
    *(_OWORD *)a1 = *(_OWORD *)v3;
    v15 = *((_QWORD *)v3 + 3);
    *(_QWORD *)(a1 + 16) = *((_QWORD *)v3 + 2);
    *(_QWORD *)(a1 + 24) = v15;
    v16 = *((_QWORD *)v3 + 4);
    *(_QWORD *)(a1 + 32) = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v6;
    v19 = *((_QWORD *)v6 + 2);
    v20 = *((_QWORD *)v3 + 8);
    v14 = *((_QWORD *)v3 + 9);
    goto LABEL_20;
  }
  result = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a2, (AMCP::DAL::DAL_Time *)(a2 + 5));
  if (!result)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v21 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v21;
    v22 = a2[4];
    *(_QWORD *)(a1 + 32) = v22;
    if (v22)
    {
      v23 = (unint64_t *)(v22 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    v19 = a2[7];
    v20 = a2[8];
    v14 = a2[9];
LABEL_20:
    *(_QWORD *)(a1 + 56) = v19;
    *(_QWORD *)(a1 + 64) = v20;
    goto LABEL_21;
  }
  if (AMCP::DAL::DAL_Time::operator<(v3, (AMCP::DAL::DAL_Time *)a2))
    v3 = (AMCP::DAL::DAL_Time *)a2;
  result = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a2 + 5), v6);
  if (result)
    v8 = (AMCP::DAL::DAL_Time *)(a2 + 5);
  else
    v8 = v6;
  *(_OWORD *)a1 = *(_OWORD *)v3;
  v9 = *((_QWORD *)v3 + 3);
  *(_QWORD *)(a1 + 16) = *((_QWORD *)v3 + 2);
  *(_QWORD *)(a1 + 24) = v9;
  v10 = *((_QWORD *)v3 + 4);
  *(_QWORD *)(a1 + 32) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)v8;
  v13 = *((_QWORD *)v8 + 3);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)v8 + 2);
  *(_QWORD *)(a1 + 64) = v13;
  v14 = *((_QWORD *)v8 + 4);
LABEL_21:
  *(_QWORD *)(a1 + 72) = v14;
  if (v14)
  {
    v25 = (unint64_t *)(v14 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  return result;
}

caulk::rt_safe_memory_resource *std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100](caulk::rt_safe_memory_resource *result)
{
  caulk::rt_safe_memory_resource **v1;
  caulk::rt_safe_memory_resource *v2;
  caulk::rt_safe_memory_resource ***v3;
  caulk::rt_safe_memory_resource *v4;
  caulk::rt_safe_memory_resource *v5;
  caulk::rt_safe_memory_resource **v6;

  v1 = *(caulk::rt_safe_memory_resource ***)result;
  v2 = **(caulk::rt_safe_memory_resource ***)result;
  if (v2)
  {
    v3 = (caulk::rt_safe_memory_resource ***)result;
    v4 = v1[1];
    v5 = **(caulk::rt_safe_memory_resource ***)result;
    v6 = v1;
    if (v4 != v2)
    {
      do
      {
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v4 - 16);
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v4 - 56);
        v4 = (caulk::rt_safe_memory_resource *)((char *)v4 - 96);
      }
      while (v4 != v2);
      v6 = *v3;
      v5 = **v3;
    }
    v1[1] = v2;
    return std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::deallocate[abi:ne180100](v5, 0xAAAAAAAAAAAAAAABLL * ((v6[2] - v5) >> 5));
  }
  return result;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  caulk::rt_safe_memory_resource *v2;

  if (a2 < 0x2AAAAAAAAAAAAABLL)
  {
    v2 = result;
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
    if (*MEMORY[0x1E0DDB4F0])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
  }
  __break(1u);
  return result;
}

caulk::rt_safe_memory_resource *std::vector<AMCP::DAL::Writable_Range::Direct_Write_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range::Direct_Write_Range>>::__destroy_vector::operator()[abi:ne180100](caulk::rt_safe_memory_resource *result)
{
  caulk::rt_safe_memory_resource **v1;
  caulk::rt_safe_memory_resource *v2;
  caulk::rt_safe_memory_resource ***v3;
  caulk::rt_safe_memory_resource *v4;
  caulk::rt_safe_memory_resource *v5;
  caulk::rt_safe_memory_resource **v6;

  v1 = *(caulk::rt_safe_memory_resource ***)result;
  v2 = **(caulk::rt_safe_memory_resource ***)result;
  if (v2)
  {
    v3 = (caulk::rt_safe_memory_resource ***)result;
    v4 = v1[1];
    v5 = **(caulk::rt_safe_memory_resource ***)result;
    v6 = v1;
    if (v4 != v2)
    {
      do
      {
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v4 - 16);
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v4 - 32);
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v4 - 72);
        v4 = (caulk::rt_safe_memory_resource *)((char *)v4 - 112);
      }
      while (v4 != v2);
      v6 = *v3;
      v5 = **v3;
    }
    v1[1] = v2;
    return std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Writable_Range::Direct_Write_Range>>::deallocate[abi:ne180100](v5, 0x6DB6DB6DB6DB6DB7 * ((v6[2] - v5) >> 4));
  }
  return result;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Writable_Range::Direct_Write_Range>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  caulk::rt_safe_memory_resource *v2;

  if (a2 < 0x24924924924924ALL)
  {
    v2 = result;
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0];
    if (*MEMORY[0x1E0DDB4F0])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
  }
  __break(1u);
  return result;
}

void AMCP::DAL::PCM_File_Reader::~PCM_File_Reader(AMCP::DAL::PCM_File_Reader *this)
{
  AMCP::DAL::PCM_File_Reader::~PCM_File_Reader(this);
  JUMPOUT(0x1B5E50688);
}

{
  OpaqueExtAudioFile *v2;

  *(_QWORD *)this = &off_1E6970488;
  v2 = (OpaqueExtAudioFile *)*((_QWORD *)this + 6);
  if (v2)
  {
    ExtAudioFileDispose(v2);
    *((_QWORD *)this + 6) = 0;
  }
  *(_QWORD *)this = off_1E69A1340;
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
}

caulk::rt_safe_memory_resource *AMCP::DAL::PCM_File_Reader::read_data@<X0>(ExtAudioFileRef *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unsigned int v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  double v22;
  double v23;
  UInt32 v24;
  AMCP::Log::Scope_Registry *v25;
  UInt32 v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  UInt32 v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  NSObject *v98;
  _opaque_pthread_t *v99;
  mach_port_t v100;
  void *v101;
  NSObject *v102;
  _opaque_pthread_t *v103;
  mach_port_t v104;
  void *v105;
  NSObject *v106;
  _opaque_pthread_t *v107;
  mach_port_t v108;
  void *v109;
  NSObject *v110;
  _opaque_pthread_t *v111;
  mach_port_t v112;
  void *exception;
  uint64_t v114;
  __int128 v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  std::string v120;
  __int128 v121;
  _BYTE v122[24];
  uint64_t v123;
  std::__shared_weak_count *v124;
  __int128 v125;
  uint64_t v126;
  std::logic_error v127;
  _BYTE v128[24];
  __int128 v129;
  uint64_t v130;
  int v131;
  char v132;
  UInt32 ioNumberFrames;
  uint64_t v134;
  uint64_t v135;
  _QWORD v136[2];
  _BYTE __p[40];
  __int128 v138;
  std::__shared_weak_count *v139;
  __int128 v140;
  std::string ioData;
  __int128 v142;
  _BYTE buf[40];
  __int128 v144;
  __int128 v145;
  std::__shared_weak_count *v146;
  __int128 v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  uint64_t v150;

  v150 = *MEMORY[0x1E0C80C00];
  if (!a1[6])
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v110 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR))
    {
      v111 = pthread_self();
      v112 = pthread_mach_thread_np(v111);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v112;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "PCM_File_Reader.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 88;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "not (m_audio_File != nullptr)";
      _os_log_error_impl(&dword_1B57BA000, v110, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_File_Reader::Read: m_audio_File is null", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v134);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"PCM_File_Reader::Read: m_audio_File is null", (uint64_t)&ioData);
    std::logic_error::logic_error((std::logic_error *)&v120, &ioData);
    v120.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE5018] + 16;
    std::logic_error::logic_error((std::logic_error *)__p, (const std::logic_error *)&v120);
    *(_QWORD *)&__p[24] = 0;
    *(_QWORD *)&__p[32] = 0;
    *(_QWORD *)&v138 = 0;
    DWORD2(v138) = -1;
    *(_QWORD *)__p = off_1E69A1208;
    *(_QWORD *)&__p[16] = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)__p);
    *(_QWORD *)&buf[32] = "virtual File_Read_Result AMCP::DAL::PCM_File_Reader::read_data(const DAL_Settings &, const Wri"
                          "table_Range &) const";
    *(_QWORD *)&v144 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Reader.cpp";
    DWORD2(v144) = 88;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v122);
    *(_OWORD *)&v128[8] = *(_OWORD *)v122;
    *(_QWORD *)v128 = off_1E69A20A0;
    *(_QWORD *)&v129 = *(_QWORD *)&v122[16];
    memset(v122, 0, sizeof(v122));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v128);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  AMCP::DAL::Writable_Range::get_direct_write_ranges((AMCP::DAL::Writable_Range *)&v134, a2);
  v5 = v134;
  v114 = v135;
  if (v134 == v135)
    goto LABEL_91;
  v6 = 0;
  do
  {
    v7 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)buf = *(_OWORD *)v5;
    v8 = *(_QWORD *)(v5 + 40);
    *(_QWORD *)&buf[32] = *(_QWORD *)(v5 + 32);
    *(_OWORD *)&buf[16] = v7;
    v9 = *(_QWORD *)(v5 + 48);
    *(_QWORD *)&v144 = v8;
    *((_QWORD *)&v144 + 1) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = *(_OWORD *)(v5 + 56);
    v13 = *(_QWORD *)(v5 + 80);
    v146 = *(std::__shared_weak_count **)(v5 + 72);
    v145 = v12;
    v14 = *(_QWORD *)(v5 + 88);
    *(_QWORD *)&v147 = v13;
    *((_QWORD *)&v147 + 1) = v14;
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v17 = *(_QWORD *)(v5 + 96);
    v18 = *(std::__shared_weak_count **)(v5 + 104);
    v148 = v17;
    v149 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
      v17 = v148;
      v21 = v149;
    }
    else
    {
      v21 = 0;
    }
    v23 = *(double *)buf;
    v22 = *(double *)&buf[8];
    AMCP::DAL::Writable_Range::Direct_Write_Range::get_audio_buffer_list((AMCP::DAL::Writable_Range::Direct_Write_Range *)&ioData, v17, v21);
    v24 = vcvtmd_s64_f64(v22 - v23);
    ioNumberFrames = v24;
    v25 = (AMCP::Log::Scope_Registry *)ExtAudioFileRead(a1[6], &ioNumberFrames, (AudioBufferList *)ioData.__r_.__value_.__l.__data_);
    if ((_DWORD)v25)
    {
      AMCP::Log::Scope_Registry::get(v25);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
      v98 = **(NSObject ***)__p;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
      {
        v99 = pthread_self();
        v100 = pthread_mach_thread_np(v99);
        *(_DWORD *)__p = 67109890;
        *(_DWORD *)&__p[4] = v100;
        *(_WORD *)&__p[8] = 2080;
        *(_QWORD *)&__p[10] = "PCM_File_Reader.cpp";
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&__p[20] = 98;
        *(_WORD *)&__p[24] = 2080;
        *(_QWORD *)&__p[26] = "not (the_error == noErr)";
        _os_log_error_impl(&dword_1B57BA000, v98, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_File_Reader::PCM_File_Reader: reading the data failed", __p, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v132);
      v101 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"PCM_File_Reader::PCM_File_Reader: reading the data failed", (uint64_t)&v120, &v121, &v129);
      std::logic_error::logic_error(&v127, &v120);
      v127.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error((std::logic_error *)v128, &v127);
      v129 = 0uLL;
      v130 = 0;
      v131 = -1;
      *(_QWORD *)v128 = off_1E69A1208;
      *(_QWORD *)&v128[16] = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)v128);
      *(_QWORD *)&__p[32] = "virtual File_Read_Result AMCP::DAL::PCM_File_Reader::read_data(const DAL_Settings &, const W"
                            "ritable_Range &) const";
      *(_QWORD *)&v138 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Reader.cpp";
      DWORD2(v138) = 98;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v125);
      *(_QWORD *)v122 = off_1E69A20A0;
      *(_OWORD *)&v122[8] = v125;
      v123 = v126;
      v125 = 0uLL;
      v126 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)v122);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v101, (uint64_t)__p);
    }
    v26 = ioNumberFrames;
    if (ioNumberFrames > v24)
    {
      AMCP::Log::Scope_Registry::get(v25);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
      v102 = **(NSObject ***)__p;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
      {
        v103 = pthread_self();
        v104 = pthread_mach_thread_np(v103);
        *(_DWORD *)__p = 67109890;
        *(_DWORD *)&__p[4] = v104;
        *(_WORD *)&__p[8] = 2080;
        *(_QWORD *)&__p[10] = "PCM_File_Reader.cpp";
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&__p[20] = 99;
        *(_WORD *)&__p[24] = 2080;
        *(_QWORD *)&__p[26] = "not (the_frames_read <= the_frames_to_read)";
        _os_log_error_impl(&dword_1B57BA000, v102, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", __p, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v132);
      v105 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v120, &v121, &v129);
      std::logic_error::logic_error(&v127, &v120);
      v127.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error((std::logic_error *)v128, &v127);
      v129 = 0uLL;
      v130 = 0;
      v131 = -1;
      *(_QWORD *)v128 = off_1E69A1208;
      *(_QWORD *)&v128[16] = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)v128);
      *(_QWORD *)&__p[32] = "virtual File_Read_Result AMCP::DAL::PCM_File_Reader::read_data(const DAL_Settings &, const W"
                            "ritable_Range &) const";
      *(_QWORD *)&v138 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Reader.cpp";
      DWORD2(v138) = 99;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v125);
      *(_QWORD *)v122 = off_1E69A20A0;
      *(_OWORD *)&v122[8] = v125;
      v123 = v126;
      v125 = 0uLL;
      v126 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)v122);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v105, (uint64_t)__p);
    }
    if (!ioNumberFrames)
    {
      AMCP::Log::Scope_Registry::get(v25);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
      v106 = **(NSObject ***)__p;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
      {
        v107 = pthread_self();
        v108 = pthread_mach_thread_np(v107);
        *(_DWORD *)__p = 67109890;
        *(_DWORD *)&__p[4] = v108;
        *(_WORD *)&__p[8] = 2080;
        *(_QWORD *)&__p[10] = "PCM_File_Reader.cpp";
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&__p[20] = 100;
        *(_WORD *)&__p[24] = 2080;
        *(_QWORD *)&__p[26] = "not (the_frames_read > 0)";
        _os_log_error_impl(&dword_1B57BA000, v106, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", __p, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v132);
      v109 = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v120, &v121, &v129);
      std::logic_error::logic_error(&v127, &v120);
      v127.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error((std::logic_error *)v128, &v127);
      v129 = 0uLL;
      v130 = 0;
      v131 = -1;
      *(_QWORD *)v128 = off_1E69A1208;
      *(_QWORD *)&v128[16] = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)v128);
      *(_QWORD *)&__p[32] = "virtual File_Read_Result AMCP::DAL::PCM_File_Reader::read_data(const DAL_Settings &, const W"
                            "ritable_Range &) const";
      *(_QWORD *)&v138 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Reader.cpp";
      DWORD2(v138) = 100;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v125);
      *(_QWORD *)v122 = off_1E69A20A0;
      *(_OWORD *)&v122[8] = v125;
      v123 = v126;
      v125 = 0uLL;
      v126 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)v122);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v109, (uint64_t)__p);
    }
    if (ioNumberFrames != v24)
    {
      *(_OWORD *)v128 = *(_OWORD *)&buf[16];
      v27 = v144;
      *(_QWORD *)&v128[16] = *(_QWORD *)&buf[32];
      v129 = v144;
      if (*((_QWORD *)&v144 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
        v119 = v27;
        do
          v30 = __ldxr(v28);
        while (__stxr(v30 + 1, v28));
      }
      else
      {
        v119 = (unint64_t)v144;
      }
      LODWORD(v120.__r_.__value_.__l.__data_) = 2;
      *(_OWORD *)&v120.__r_.__value_.__r.__words[1] = COERCE_UNSIGNED_INT64((double)v26);
      v121 = v119;
      v119 = 0uLL;
      boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)v122, (uint64_t)v128, (uint64_t)&v120);
      AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)__p, (const AMCP::DAL::DAL_Time *)v128, (const AMCP::DAL::DAL_Time *)v122);
      *(_OWORD *)&buf[16] = *(_OWORD *)__p;
      *(_QWORD *)&buf[32] = *(_QWORD *)&__p[16];
      v31 = *(_OWORD *)&__p[24];
      *(_QWORD *)&__p[24] = 0;
      *(_QWORD *)&__p[32] = 0;
      v32 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
      v144 = v31;
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v145 = v138;
      v146 = v139;
      v35 = v140;
      v140 = 0uLL;
      v36 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
      v147 = v35;
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v39 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
      if (*((_QWORD *)&v140 + 1))
      {
        v40 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = *(std::__shared_weak_count **)&__p[32];
      if (*(_QWORD *)&__p[32])
      {
        v43 = (unint64_t *)(*(_QWORD *)&__p[32] + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v45 = v124;
      if (v124)
      {
        v46 = (unint64_t *)&v124->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
      if (*((_QWORD *)&v121 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
      if (*((_QWORD *)&v119 + 1))
      {
        v52 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
      if (*((_QWORD *)&v129 + 1))
      {
        v55 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v117, "file_reader_node");
    v57 = v117;
    v136[0] = v118;
    *(_QWORD *)((char *)v136 + 7) = *(_QWORD *)((char *)&v118 + 7);
    v58 = HIBYTE(v118);
    v117 = 0;
    v118 = 0uLL;
    *(_DWORD *)__p = 0;
    *(_QWORD *)&__p[8] = v57;
    *(_QWORD *)&__p[16] = v136[0];
    *(_QWORD *)&__p[23] = *(_QWORD *)((char *)v136 + 7);
    __p[31] = v58;
    v136[0] = 0;
    *(_QWORD *)((char *)v136 + 7) = 0;
    *(_QWORD *)&__p[32] = 0;
    LODWORD(v138) = 0;
    AMCP::DAL::Writable_Range::commit_direct_write(*(_QWORD *)(a2 + 80), (uint64_t)__p, (uint64_t)buf);
    v59 = ioNumberFrames;
    if ((__p[31] & 0x80000000) != 0)
      operator delete(*(void **)&__p[8]);
    std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100]((uint64_t *)&ioData);
    v60 = v149;
    if (v149)
    {
      v61 = (unint64_t *)&v149->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v63 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
    if (*((_QWORD *)&v147 + 1))
    {
      v64 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v66 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
    if (*((_QWORD *)&v144 + 1))
    {
      v67 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    v6 += v59;
    v5 += 112;
  }
  while (v5 != v114);
  if (!v6)
  {
LABEL_91:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 80) = 0;
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v69 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)&__p[16] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)&__p[24] = v69;
    v70 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)&__p[32] = v70;
    if (v70)
    {
      v71 = (unint64_t *)(v70 + 8);
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
      *(_QWORD *)&v116 = v69;
      *((_QWORD *)&v116 + 1) = v70;
      do
        v73 = __ldxr(v71);
      while (__stxr(v73 + 1, v71));
    }
    else
    {
      v116 = v69;
    }
    LODWORD(ioData.__r_.__value_.__l.__data_) = 2;
    *(double *)&ioData.__r_.__value_.__l.__size_ = (double)v6;
    ioData.__r_.__value_.__r.__words[2] = 0;
    v142 = v116;
    boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)v128, (uint64_t)__p, (uint64_t)&ioData);
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)buf, (const AMCP::DAL::DAL_Time *)__p, (const AMCP::DAL::DAL_Time *)v128);
    v75 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
    if (*((_QWORD *)&v129 + 1))
    {
      v76 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    v78 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
    if (*((_QWORD *)&v142 + 1))
    {
      v79 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    *(_OWORD *)a3 = *(_OWORD *)buf;
    v81 = *(_QWORD *)&buf[24];
    *(_QWORD *)(a3 + 16) = *(_QWORD *)&buf[16];
    *(_QWORD *)(a3 + 24) = v81;
    v82 = *(_QWORD *)&buf[32];
    *(_QWORD *)(a3 + 32) = *(_QWORD *)&buf[32];
    if (v82)
    {
      v83 = (unint64_t *)(v82 + 8);
      do
        v84 = __ldxr(v83);
      while (__stxr(v84 + 1, v83));
    }
    *(_OWORD *)(a3 + 40) = v144;
    v85 = *((_QWORD *)&v145 + 1);
    *(_QWORD *)(a3 + 56) = v145;
    *(_QWORD *)(a3 + 64) = v85;
    v86 = v146;
    *(_QWORD *)(a3 + 72) = v146;
    if (v86)
    {
      v87 = (unint64_t *)&v86->__shared_owners_;
      do
        v88 = __ldxr(v87);
      while (__stxr(v88 + 1, v87));
      v89 = v146;
      *(_BYTE *)(a3 + 80) = 1;
      if (v89)
      {
        v90 = (unint64_t *)&v89->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
    }
    else
    {
      *(_BYTE *)(a3 + 80) = 1;
    }
    v92 = *(std::__shared_weak_count **)&buf[32];
    if (*(_QWORD *)&buf[32])
    {
      v93 = (unint64_t *)(*(_QWORD *)&buf[32] + 8);
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    v95 = *(std::__shared_weak_count **)&__p[32];
    if (*(_QWORD *)&__p[32])
    {
      v96 = (unint64_t *)(*(_QWORD *)&__p[32] + 8);
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
  }
  *(_QWORD *)buf = &v134;
  return std::vector<AMCP::DAL::Writable_Range::Direct_Write_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range::Direct_Write_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)buf);
}

void sub_1B589EB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a68;
  uint64_t v68;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;

  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100]((uint64_t *)&a68);
  v70 = *(std::__shared_weak_count **)(v68 - 136);
  if (v70)
  {
    p_shared_owners = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldaxr(p_shared_owners);
    while (__stlxr(v72 - 1, p_shared_owners));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = *(std::__shared_weak_count **)(v68 - 152);
  if (v73)
  {
    v74 = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = *(std::__shared_weak_count **)(v68 - 192);
  if (v76)
  {
    v77 = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  *(_QWORD *)(v68 - 240) = &a52;
  std::vector<AMCP::DAL::Writable_Range::Direct_Write_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range::Direct_Write_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)(v68 - 240));
  _Unwind_Resume(a1);
}

OpaqueExtAudioFile *AMCP::DAL::PCM_File_Reader::close(AMCP::DAL::PCM_File_Reader *this)
{
  OpaqueExtAudioFile *result;

  result = (OpaqueExtAudioFile *)*((_QWORD *)this + 6);
  if (result)
  {
    result = (OpaqueExtAudioFile *)ExtAudioFileDispose(result);
    *((_QWORD *)this + 6) = 0;
  }
  return result;
}

__n128 AMCP::DAL::PCM_File_Handler::get_format@<Q0>(AMCP::DAL::PCM_File_Handler *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)((char *)this + 8);
  v3 = *(_OWORD *)((char *)this + 24);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 5);
  return result;
}

void AMCP::DAL::PCM_File_Handler::get_name(AMCP::DAL::PCM_File_Handler *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 7), *((_QWORD *)this + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 56);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 9);
  }
}

AMCP::DAL::DAL_Time *boost::operators_impl::operator+(AMCP::DAL::DAL_Time *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *((_QWORD *)a1 + 2) = *(_QWORD *)(a2 + 16);
  *((_QWORD *)a1 + 3) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *((_QWORD *)a1 + 4) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return AMCP::DAL::DAL_Time::operator+=(a1, a3);
}

void sub_1B589F0AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100](a1, 0);
  v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t *std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v4 = v2;
    v3 = result[4];
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v4);
  }
  return result;
}

__n128 AMCP::DAL::DAL_Settings::at_or<std::string>(std::string *a1, _QWORD *a2, unsigned __int8 *a3, __n128 *a4)
{
  unsigned __int8 *v6;
  __n128 result;

  v6 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, a3);
  if (v6)
  {
    AMCP::Thing::convert_to<std::string>(a1, (uint64_t)(v6 + 40));
  }
  else
  {
    result = *a4;
    *(__n128 *)&a1->__r_.__value_.__l.__data_ = *a4;
    a1->__r_.__value_.__r.__words[2] = a4[1].n128_u64[0];
    a4->n128_u64[1] = 0;
    a4[1].n128_u64[0] = 0;
    a4->n128_u64[0] = 0;
  }
  return result;
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  std::runtime_error *v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)(a1 + 72) = &unk_1E69A1F88;
  v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
  v4[1] = *(std::runtime_error *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 32) = &unk_1E69A2000;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)a1 = &off_1E69A1258;
  *(_QWORD *)(a1 + 32) = &unk_1E69A1290;
  *(_QWORD *)(a1 + 72) = &unk_1E69A12C8;
  boost::exception_detail::copy_boost_exception(a1 + 32, a2 + 32);
  return a1;
}

{
  std::runtime_error *v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)(a1 + 72) = &unk_1E69A1F88;
  v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
  v4[1] = *(std::runtime_error *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = &unk_1E69A2000;
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)a1 = &off_1E69A1258;
  *(_QWORD *)(a1 + 32) = &unk_1E69A1290;
  *(_QWORD *)(a1 + 72) = &unk_1E69A12C8;
  return a1;
}

void sub_1B589F2DC(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)(boost::exception_detail::error_info_container_impl *__hidden, const char *);
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  void *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;

  v4 = operator new();
  *(_QWORD *)v4 = off_1E69A20A0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  boost::shared_ptr<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::shared_ptr<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>(&v14, v4);
  v5 = *(_QWORD *)(a1 + 40);
  if (!v5)
  {
    v5 = operator new();
    v6 = &off_1E69A2168;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = &off_1E69A2168;
    *(_QWORD *)(v5 + 8) = v5 + 16;
    *(_QWORD *)(v5 + 40) = 0;
    *(_QWORD *)(v5 + 48) = 0;
    *(_DWORD *)(v5 + 56) = 0;
    v7 = *(_QWORD *)(a1 + 40);
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
      v6 = *(uint64_t (***)(boost::exception_detail::error_info_container_impl *__hidden, const char *))v5;
    }
    *(_QWORD *)(a1 + 40) = v5;
    ((void (*)(uint64_t))v6[3])(v5);
  }
  v12 = v14;
  v13 = v15;
  if (v15)
  {
    v8 = v15 + 2;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v5 + 16))(v5, &v12, &v11);
  boost::detail::shared_count::~shared_count(&v13);
  boost::detail::shared_count::~shared_count(&v15);
  return a1;
}

void sub_1B589F450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, unsigned int *a14)
{
  unsigned int **v14;

  boost::detail::shared_count::~shared_count(v14);
  boost::detail::shared_count::~shared_count(&a14);
  _Unwind_Resume(a1);
}

void sub_1B589F510(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::~clone_impl(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  *(_QWORD *)(a1 + 32) = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone(uint64_t a1)
{
  uint64_t v2;
  std::runtime_error *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &unk_1E69A1F88;
  v3 = std::runtime_error::runtime_error((std::runtime_error *)v2, (const std::runtime_error *)a1);
  v3->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
  v3[1] = *(std::runtime_error *)(a1 + 16);
  v3[2].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
  v4 = (uint64_t)&v3[2];
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 40) = v5;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_DWORD *)(v2 + 64) = *(_DWORD *)(a1 + 64);
  *(_QWORD *)v2 = &off_1E69A1258;
  *(_QWORD *)(v2 + 32) = &unk_1E69A1290;
  *(_QWORD *)(v2 + 72) = &unk_1E69A12C8;
  boost::exception_detail::copy_boost_exception(v4, a1 + 32);
  return v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
}

void sub_1B589F684(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  MEMORY[0x1B5E50688]();
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x50uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_1B589F6FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::~clone_impl(_QWORD *a1)
{
  std::runtime_error *v1;

  v1 = (std::runtime_error *)(a1 - 4);
  *a1 = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error(v1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::~clone_impl(a1 - 32);
}

uint64_t `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::~clone_impl(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 40);
  *((_QWORD *)v1 + 4) = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 5);
  std::runtime_error::~runtime_error((std::runtime_error *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::~clone_impl((uint64_t)a1 + *(_QWORD *)(*a1 - 40));
}

void boost::exception_detail::error_info_injector<std::system_error>::~error_info_injector(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  *(_QWORD *)(a1 + 32) = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x1B5E50688);
}

void `non-virtual thunk to'boost::exception_detail::error_info_injector<std::system_error>::~error_info_injector(_QWORD *a1)
{
  std::runtime_error *v1;

  v1 = (std::runtime_error *)(a1 - 4);
  *a1 = &unk_1E69A2000;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error(v1);
}

void `non-virtual thunk to'boost::exception_detail::error_info_injector<std::system_error>::~error_info_injector(uint64_t a1)
{
  boost::exception_detail::error_info_injector<std::system_error>::~error_info_injector(a1 - 32);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(unsigned __int8 **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v6 == v12)
    {
      if (std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(i + 16, a2))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

void ADS::SliderControl::~SliderControl(ADS::SliderControl *this)
{
  *(_QWORD *)this = off_1E69937F0;
  *((_QWORD *)this + 7) = &off_1E69985F8;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 80));
  ADS::BaseObject::~BaseObject(this);
}

{
  *(_QWORD *)this = off_1E69937F0;
  *((_QWORD *)this + 7) = &off_1E69985F8;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 80));
  ADS::BaseObject::~BaseObject(this);
  JUMPOUT(0x1B5E50688);
}

BOOL ADS::SliderControl::HasProperty(ADS::SliderControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  AudioObjectPropertySelector mSelector;
  BOOL v5;
  int v6;

  mSelector = a4->mSelector;
  if ((int)a4->mSelector > 1935962737)
  {
    v5 = mSelector == 1935962738;
    v6 = 1935962742;
  }
  else
  {
    v5 = mSelector == 1667591277;
    v6 = 1668506480;
  }
  return v5 || mSelector == v6 || ADS::BaseObject::HasProperty(this, a2, a3, a4);
}

uint64_t ADS::SliderControl::IsPropertySettable(ADS::SliderControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  AudioObjectPropertySelector mSelector;

  mSelector = a4->mSelector;
  if ((int)a4->mSelector > 1935962737)
  {
    if (mSelector == 1935962738 || mSelector == 1935962742)
      return 1;
  }
  else if (mSelector == 1667591277 || mSelector == 1668506480)
  {
    return 0;
  }
  return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
}

uint64_t ADS::SliderControl::GetPropertyDataSize(ADS::SliderControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6)
{
  AudioObjectPropertySelector mSelector;
  uint64_t v7;

  mSelector = a4->mSelector;
  v7 = 4;
  if ((int)a4->mSelector <= 1935962737)
  {
    if (mSelector != 1667591277 && mSelector != 1668506480)
      return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
    return v7;
  }
  if (mSelector == 1935962742)
    return v7;
  if (mSelector == 1935962738)
    return 8;
  return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
}

void ADS::SliderControl::GetPropertyData(ADS::SliderControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6, unsigned int a7, unsigned int *a8, char *a9)
{
  _DWORD *v10;
  int v11;
  _DWORD *v12;
  int v13;
  _DWORD *v14;
  _DWORD *exception;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a4->mSelector == 1935962738)
  {
    if (a7 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v16 = 136315394;
        v17 = "ADS_SliderControl.cpp";
        v18 = 1024;
        v19 = 108;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SliderControl::GetPropertyData: not enough space for the return value of kAudioSliderControlPropertyRange", (uint8_t *)&v16, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 561211770;
    }
    v12 = (_DWORD *)((char *)this + 56);
    v13 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 7) + 16))((char *)this + 56);
    *(_DWORD *)a9 = v12[23];
    *((_DWORD *)a9 + 1) = v12[24];
    *a8 = 8;
    if (v13)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 24))(v12);
  }
  else if (a4->mSelector == 1935962742)
  {
    if (a7 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v16 = 136315394;
        v17 = "ADS_SliderControl.cpp";
        v18 = 1024;
        v19 = 99;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SliderControl::GetPropertyData: not enough space for the return value of kAudioSliderControlPropertyValue", (uint8_t *)&v16, 0x12u);
      }
      v14 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v14 = &off_1E69A1B30;
      v14[2] = 561211770;
    }
    v10 = (_DWORD *)((char *)this + 56);
    v11 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 7) + 16))((char *)this + 56);
    *(_DWORD *)a9 = v10[22];
    *a8 = 4;
    if (v11)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 24))(v10);
  }
  else
  {
    ADS::Control::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, a9);
  }
}

void sub_1B589FD98(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ADS::SliderControl::SetPropertyData(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, _DWORD *a8, _DWORD *a9, unint64_t *a10, unsigned __int8 a11)
{
  _DWORD *v12;
  int v13;
  int v14;
  _DWORD *v15;
  unint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  int v19;
  int v20;
  _DWORD *v21;
  unint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  _DWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  _DWORD *v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  _DWORD *v44;
  _DWORD *exception;
  int v46;
  const char *v47;
  __int16 v48;
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a4 == 1935962738)
  {
    if ((_DWORD)a7 != 8)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v46 = 136315394;
        v47 = "ADS_SliderControl.cpp";
        v48 = 1024;
        v49 = 142;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SliderControl::GetPropertyData: wrong size for the data for kAudioSliderControlPropertyRange", (uint8_t *)&v46, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 561211770;
    }
    v18 = (_DWORD *)(a1 + 56);
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 16))(a1 + 56);
    v18[23] = *a8;
    v18[24] = a8[1];
    *a9 = 1;
    v20 = *(v18 - 1);
    v21 = (_DWORD *)a10[1];
    v22 = a10[2];
    if ((unint64_t)v21 >= v22)
    {
      v30 = 0x1555555555555555;
      v31 = (_DWORD *)*a10;
      v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v21 - *a10) >> 2);
      v33 = v32 + 1;
      if (v32 + 1 > 0x1555555555555555)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (_QWORD)v31) >> 2);
      if (2 * v34 > v33)
        v33 = 2 * v34;
      if (v34 < 0xAAAAAAAAAAAAAAALL)
        v30 = v33;
      if (v30)
      {
        v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v30);
        v31 = (_DWORD *)*a10;
        v21 = (_DWORD *)a10[1];
      }
      else
      {
        v35 = 0;
      }
      v40 = (_DWORD *)(v30 + 12 * v32);
      v41 = v30 + 12 * v35;
      *v40 = 1935962738;
      v40[1] = v20;
      v40[2] = 0;
      v23 = v40 + 3;
      if (v21 != v31)
      {
        do
        {
          v42 = *(_QWORD *)(v21 - 3);
          v21 -= 3;
          v43 = v21[2];
          *(_QWORD *)(v40 - 3) = v42;
          v40 -= 3;
          v40[2] = v43;
        }
        while (v21 != v31);
        v31 = (_DWORD *)*a10;
      }
      *a10 = (unint64_t)v40;
      a10[1] = (unint64_t)v23;
      a10[2] = v41;
      if (v31)
        operator delete(v31);
    }
    else
    {
      *v21 = 1935962738;
      v21[1] = v20;
      v21[2] = 0;
      v23 = v21 + 3;
    }
    a10[1] = (unint64_t)v23;
    if (v19)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 24))(v18);
  }
  else if (*(_DWORD *)a4 == 1935962742)
  {
    if ((_DWORD)a7 != 4)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v46 = 136315394;
        v47 = "ADS_SliderControl.cpp";
        v48 = 1024;
        v49 = 128;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SliderControl::GetPropertyData: wrong size for the data for kAudioSliderControlPropertyValue", (uint8_t *)&v46, 0x12u);
      }
      v44 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v44 = &off_1E69A1B30;
      v44[2] = 561211770;
    }
    v12 = (_DWORD *)(a1 + 56);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 16))(a1 + 56);
    v12[22] = *a8;
    *a9 = 1;
    v14 = *(v12 - 1);
    v15 = (_DWORD *)a10[1];
    v16 = a10[2];
    if ((unint64_t)v15 >= v16)
    {
      v24 = 0x1555555555555555;
      v25 = (_DWORD *)*a10;
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v15 - *a10) >> 2);
      v27 = v26 + 1;
      if (v26 + 1 > 0x1555555555555555)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (_QWORD)v25) >> 2);
      if (2 * v28 > v27)
        v27 = 2 * v28;
      if (v28 < 0xAAAAAAAAAAAAAAALL)
        v24 = v27;
      if (v24)
      {
        v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v24);
        v25 = (_DWORD *)*a10;
        v15 = (_DWORD *)a10[1];
      }
      else
      {
        v29 = 0;
      }
      v36 = (_DWORD *)(v24 + 12 * v26);
      v37 = v24 + 12 * v29;
      *v36 = 1935962742;
      v36[1] = v14;
      v36[2] = 0;
      v17 = v36 + 3;
      if (v15 != v25)
      {
        do
        {
          v38 = *(_QWORD *)(v15 - 3);
          v15 -= 3;
          v39 = v15[2];
          *(_QWORD *)(v36 - 3) = v38;
          v36 -= 3;
          v36[2] = v39;
        }
        while (v15 != v25);
        v25 = (_DWORD *)*a10;
      }
      *a10 = (unint64_t)v36;
      a10[1] = (unint64_t)v17;
      a10[2] = v37;
      if (v25)
        operator delete(v25);
    }
    else
    {
      *v15 = 1935962742;
      v15[1] = v14;
      v15[2] = 0;
      v17 = v15 + 3;
    }
    a10[1] = (unint64_t)v17;
    if (v13)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 24))(v12);
  }
  else
  {
    ADS::BaseObject::SetPropertyData(a1, a2, a3, a4, a5, a6, a7, (uint64_t)a8, a9, a10, a11);
  }
}

void sub_1B58A0238(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

semaphore_t *ca::sync::semaphore::semaphore(semaphore_t *semaphore)
{
  const char *v2;

  *semaphore = 0;
  *((_BYTE *)semaphore + 4) = 0;
  v2 = (const char *)semaphore_create(*MEMORY[0x1E0C83DA0], semaphore, 0, 0);
  ca::mach::throw_if_mach_error((uint64_t)"semaphore_create", v2);
  *((_BYTE *)semaphore + 4) = 1;
  *((_QWORD *)semaphore + 1) = 0;
  return semaphore;
}

void ca::sync::semaphore::~semaphore(ca::sync::semaphore *this)
{
  signed int v1;

  v1 = atomic_load((unsigned int *)this + 2);
  if (v1 < *((_DWORD *)this + 3))
    __assert_rtn("~semaphore", "semaphore.cpp", 22, "mCounter >= mOriginalCounter");
  if (*((_BYTE *)this + 4))
  {
    if (*(_DWORD *)this)
      semaphore_destroy(*MEMORY[0x1E0C83DA0], *(_DWORD *)this);
  }
}

void AMCP::Meta::Device::~Device(std::condition_variable *this)
{
  AMCP::Meta::Device::~Device(this);
  JUMPOUT(0x1B5E50688);
}

{
  std::mutex *v2;
  const void *v3;
  const void *sig;
  void *v5;
  const void *v6;
  std::__shared_weak_count *v7;
  void **v8;

  this->__cv_.__sig = (uint64_t)&off_1E6970570;
  v2 = (std::mutex *)&this[3].__cv_.__opaque[24];
  std::condition_variable::~condition_variable(this + 6);
  std::condition_variable::~condition_variable(this + 5);
  std::mutex::~mutex(v2);
  v8 = (void **)&this[2].__cv_.__opaque[32];
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)&this[2].__cv_.__opaque[8];
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v3 = *(const void **)this[2].__cv_.__opaque;
  if (v3)
    CFRelease(v3);
  sig = (const void *)this[2].__cv_.__sig;
  if (sig)
    CFRelease(sig);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&this[1].__cv_.__opaque[24]);
  v5 = *(void **)this[1].__cv_.__opaque;
  if (v5)
  {
    *(_QWORD *)&this[1].__cv_.__opaque[8] = v5;
    operator delete(v5);
  }
  v6 = (const void *)this[1].__cv_.__sig;
  if (v6)
    CFRelease(v6);
  v7 = *(std::__shared_weak_count **)&this->__cv_.__opaque[24];
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  this->__cv_.__sig = (uint64_t)&off_1E697FC58;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this->__cv_.__opaque);
}

void AMCP::Meta::Device::update_cached_properties_from_composition(AMCP::Meta::Device *this)
{
  uint64_t v2;
  __CFArray *Mutable;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  const __CFArray *v12;
  CFIndex v13;
  unint64_t i;
  const __CFString *v15;
  char v16;
  CFTypeRef v17;
  unint64_t v18;
  int v19;
  void **v20;
  uint64_t v21;
  CFTypeRef *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  BOOL v28;
  BOOL v29;
  const void *v30;
  std::runtime_error *v31;
  std::runtime_error *exception;
  void *__p[2];
  unsigned __int8 v34;
  CFTypeRef v35;
  CFTypeRef v36;
  CFTypeRef v37;
  CFTypeRef v38;
  CFTypeRef v39;
  CFTypeRef cf;

  v2 = *((_QWORD *)this + 10);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  while (v4 != v5)
  {
    Audio_Sub_Device_Description::Audio_Sub_Device_Description((uint64_t)&v37, v4);
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::StringRef>(Mutable, v37);
    if (cf)
      CFRelease(cf);
    if (v39)
      CFRelease(v39);
    if (v38)
      CFRelease(v38);
    if (v37)
      CFRelease(v37);
    v4 += 56;
  }
  mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)&v37, Mutable);
  if (Mutable)
    CFRelease(Mutable);
  v6 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v37;
  v37 = v6;
  if (v6)
    CFRelease(v6);
  Aggregate_Device_Description::get_master_subdevice_uid(&v37, *(const void **)(*((_QWORD *)this + 10) + 40));
  if (v37)
  {
    CFRelease(v37);
    Aggregate_Device_Description::get_master_subdevice_uid(&v37, *(const void **)(*((_QWORD *)this + 10) + 40));
    v7 = (const void *)*((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = v37;
    v37 = v7;
    if (!v7)
      goto LABEL_21;
  }
  else
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v37, "");
    v7 = (const void *)*((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = v37;
    v37 = v7;
    if (!v7)
      goto LABEL_21;
  }
  CFRelease(v7);
LABEL_21:
  Aggregate_Device_Description::get_clock_device_uid(&v37, *(const void **)(*((_QWORD *)this + 10) + 48));
  if (v37)
  {
    CFRelease(v37);
    Aggregate_Device_Description::get_clock_device_uid(&v37, *(const void **)(*((_QWORD *)this + 10) + 48));
    v8 = (const void *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = v37;
    v37 = v8;
    if (!v8)
      goto LABEL_26;
  }
  else
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v37, "");
    v8 = (const void *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = v37;
    v37 = v8;
    if (!v8)
      goto LABEL_26;
  }
  CFRelease(v8);
LABEL_26:
  if (!*((_QWORD *)this + 12))
    return;
  v9 = (const __CFArray *)*((_QWORD *)this + 6);
  if (v9)
  {
    Count = CFArrayGetCount(*((CFArrayRef *)this + 6));
    v11 = Count;
    v12 = (const __CFArray *)*((_QWORD *)this + 6);
    if (v12)
    {
      v13 = CFArrayGetCount(*((CFArrayRef *)this + 6));
      if (!v11)
        goto LABEL_70;
    }
    else
    {
      v13 = 0;
      if (!Count)
        goto LABEL_70;
    }
    for (i = 0; i != v11; ++i)
    {
      if (v9 == v12 && i == v13)
        break;
      applesauce::CF::details::at_to<applesauce::CF::TypeRef>(&v36, v9, i);
      applesauce::CF::TypeRef::operator applesauce::CF::StringRef((applesauce::CF::StringRef *)&v35, &v36);
      v15 = (const __CFString *)*((_QWORD *)this + 12);
      if (!v15)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::convert_to<std::string,0>((uint64_t)&v37, v15);
      if (!v35)
      {
        v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v31, "Could not construct");
        __cxa_throw(v31, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)v35);
      v16 = HIBYTE(v39);
      if (SHIBYTE(v39) >= 0)
        v17 = (CFTypeRef)HIBYTE(v39);
      else
        v17 = v38;
      v18 = v34;
      v19 = (char)v34;
      if ((v34 & 0x80u) != 0)
        v18 = (unint64_t)__p[1];
      if (v17 == (CFTypeRef)v18)
      {
        if ((v34 & 0x80u) == 0)
          v20 = __p;
        else
          v20 = (void **)__p[0];
        if (SHIBYTE(v39) < 0)
        {
          v29 = memcmp(v37, v20, (size_t)v38) == 0;
          if (v19 < 0)
            goto LABEL_64;
        }
        else if (HIBYTE(v39))
        {
          v21 = HIBYTE(v39) - 1;
          v22 = &v37;
          do
          {
            v24 = *(unsigned __int8 *)v22;
            v22 = (CFTypeRef *)((char *)v22 + 1);
            v23 = v24;
            v26 = *(unsigned __int8 *)v20;
            v20 = (void **)((char *)v20 + 1);
            v25 = v26;
            v28 = v21-- != 0;
            v29 = v23 == v25;
          }
          while (v23 == v25 && v28);
          if ((char)v34 < 0)
          {
LABEL_64:
            operator delete(__p[0]);
            if ((HIBYTE(v39) & 0x80) == 0)
              goto LABEL_56;
            goto LABEL_65;
          }
        }
        else
        {
          v29 = 1;
          if ((char)v34 < 0)
            goto LABEL_64;
        }
      }
      else
      {
        v29 = 0;
        if ((char)v34 < 0)
          goto LABEL_64;
      }
      if ((v16 & 0x80) == 0)
        goto LABEL_56;
LABEL_65:
      operator delete((void *)v37);
LABEL_56:
      if (v35)
        CFRelease(v35);
      if (v36)
        CFRelease(v36);
      if (v29)
        return;
    }
  }
LABEL_70:
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v37, "");
  v30 = (const void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v37;
  v37 = v30;
  if (v30)
    CFRelease(v30);
}

void sub_1B58A0878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, const void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  applesauce::CF::StringRef::~StringRef(&a12);
  applesauce::CF::TypeRef::~TypeRef(&a13);
  _Unwind_Resume(a1);
}

_QWORD *Aggregate_Device_Description::get_master_subdevice_uid(_QWORD *this, const void *a2)
{
  _QWORD *v3;

  v3 = this;
  if (a2)
    this = CFRetain(a2);
  *v3 = a2;
  return this;
}

_QWORD *Aggregate_Device_Description::get_clock_device_uid(_QWORD *this, const void *a2)
{
  _QWORD *v3;

  v3 = this;
  if (a2)
    this = CFRetain(a2);
  *v3 = a2;
  return this;
}

CFTypeRef applesauce::CF::details::at_to<applesauce::CF::TypeRef>(_QWORD *a1, CFArrayRef theArray, unint64_t a3)
{
  const void *ValueAtIndex;
  const void *v7;
  CFTypeRef result;
  std::runtime_error *exception;

  if (CFArrayGetCount(theArray) <= a3
    || (ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3), (v7 = ValueAtIndex) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  result = CFRetain(ValueAtIndex);
  *a1 = v7;
  return result;
}

void sub_1B58A09E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

applesauce::CF::StringRef *applesauce::CF::TypeRef::operator applesauce::CF::StringRef(applesauce::CF::StringRef *a1, CFTypeRef *a2)
{
  CFTypeID v4;
  CFTypeRef v5;
  std::runtime_error *exception;

  if (*a2)
  {
    v4 = CFGetTypeID(*a2);
    if (v4 != CFStringGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::construct_error(exception);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v5 = *a2;
    if (v5)
      CFRetain(v5);
  }
  else
  {
    v5 = 0;
  }
  return applesauce::CF::StringRef::StringRef(a1, v5);
}

void sub_1B58A0A8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<Audio_Sub_Device_Description>::__init_with_size[abi:ne180100]<Audio_Sub_Device_Description*,Audio_Sub_Device_Description*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    if (a4 >= 0x492492492492493)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v6 = result;
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(a4);
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[7 * v7];
    while (a2 != a3)
    {
      v8 = Audio_Sub_Device_Description::Audio_Sub_Device_Description((uint64_t)result, a2);
      a2 += 56;
      result = (_QWORD *)(v8 + 56);
    }
    v6[1] = result;
  }
  return result;
}

void sub_1B58A0B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<Audio_Sub_Device_Description>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t Audio_Sub_Device_Description::Audio_Sub_Device_Description(uint64_t a1, uint64_t a2)
{
  CFTypeRef v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v4 = *(CFTypeRef *)a2;
  if (*(_QWORD *)a2)
    CFRetain(*(CFTypeRef *)a2);
  *(_QWORD *)a1 = v4;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5)
    CFRetain(*(CFTypeRef *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
    CFRetain(*(CFTypeRef *)(a2 + 16));
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  if (v7)
    CFRetain(*(CFTypeRef *)(a2 + 24));
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v8;
  return a1;
}

void std::vector<Audio_Sub_Device_Description>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        Audio_Sub_Device_Description::~Audio_Sub_Device_Description((Audio_Sub_Device_Description *)(v4 - 56));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Audio_Sub_Device_Description::~Audio_Sub_Device_Description(Audio_Sub_Device_Description *this)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)*((_QWORD *)this + 3);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 2);
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
    CFRelease(v4);
  if (*(_QWORD *)this)
    CFRelease(*(CFTypeRef *)this);
}

void std::__shared_ptr_emplace<Aggregate_Device_Description>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69705D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Aggregate_Device_Description>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69705D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<Aggregate_Device_Description>::__on_zero_shared(uint64_t a1)
{
  Aggregate_Device_Description::~Aggregate_Device_Description((Aggregate_Device_Description *)(a1 + 24));
}

void Aggregate_Device_Description::~Aggregate_Device_Description(Aggregate_Device_Description *this)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  void **v7;

  v2 = (const void *)*((_QWORD *)this + 8);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 7);
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 6);
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 5);
  if (v5)
    CFRelease(v5);
  v7 = (void **)((char *)this + 16);
  std::vector<Audio_Sub_Device_Description>::__destroy_vector::operator()[abi:ne180100](&v7);
  v6 = (const void *)*((_QWORD *)this + 1);
  if (v6)
    CFRelease(v6);
  if (*(_QWORD *)this)
    CFRelease(*(CFTypeRef *)this);
}

void AMCP::Meta::Device::update_subdevices(AMCP::Meta::Device *this)
{
  uint64_t v2;
  void **p_p;
  uint64_t v4;
  const __CFString *v5;
  uint64_t v6;
  _BOOL4 v7;
  unsigned int *master_subdevice_uid;
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer v10;
  uint64_t v11;
  _BOOL4 v12;
  char v13;
  unsigned int *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  NSObject *v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned int *v22;
  char v23;
  uint64_t v24;
  std::vector<unsigned int> *v25;
  char v26;
  std::vector<unsigned int>::pointer v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  const void *v31;
  void *v32;
  std::__shared_weak_count *v33;
  NSObject *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t i;
  const void *v41;
  unsigned int *v42;
  unsigned int *v43;
  void *v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  void *v49;
  std::__shared_weak_count *v50;
  NSObject *v51;
  unint64_t *v52;
  unint64_t v53;
  unsigned int *v54;
  double v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  void *v59;
  std::vector<unsigned int>::pointer v60;
  _BOOL4 v61;
  void *v62;
  unsigned int v63;
  _DWORD *v64;
  AMCP::Meta::Stream **v65;
  AMCP::Meta::Stream **v66;
  unsigned int *v67;
  unsigned int *v68;
  AMCP::Core::Core *v69;
  void *v70;
  AMCP::Core::Core *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::vector<unsigned int>::pointer v75;
  std::vector<unsigned int>::pointer v76;
  uint64_t j;
  uint64_t v78;
  uint64_t k;
  uint64_t v80;
  unsigned int *v81;
  std::vector<unsigned int>::pointer v82;
  int v83;
  AMCP::Meta::Stream **v84;
  AMCP::Meta::Stream **v85;
  AMCP::Meta::Stream *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  __int128 v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::vector<unsigned int>::pointer v105;
  std::vector<unsigned int>::pointer v106;
  int v107;
  int v108;
  AMCP::Meta::Stream **v109;
  AMCP::Meta::Stream **v110;
  AMCP::Meta::Stream *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  __int128 v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *p_shared_owners;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  NSObject *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *end;
  unint64_t *v135;
  unint64_t v136;
  _opaque_pthread_t *v137;
  mach_port_t v138;
  const __CFString *v139;
  mach_port_t v140;
  std::vector<unsigned int>::pointer v141;
  AMCP::Meta::Stream *v142;
  unint64_t *v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  __int128 v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t *v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  _opaque_pthread_t *v162;
  mach_port_t v163;
  std::vector<unsigned int>::pointer v164;
  std::vector<unsigned int>::pointer v165;
  _opaque_pthread_t *v166;
  mach_port_t v167;
  const __CFString *v168;
  mach_port_t v169;
  std::vector<unsigned int>::pointer v170;
  _opaque_pthread_t *v171;
  mach_port_t v172;
  const __CFString *v173;
  mach_port_t v174;
  std::vector<unsigned int>::pointer v175;
  std::runtime_error *exception;
  std::runtime_error *v177;
  std::runtime_error *v178;
  std::runtime_error *v179;
  std::runtime_error *v180;
  std::runtime_error *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  AMCP::Core::Core *v185[3];
  __int128 cf;
  std::vector<unsigned int> v187;
  void *__p;
  _BYTE v189[10];
  __int16 v190;
  int v191;
  _QWORD v192[2];
  std::vector<unsigned int> v193;
  uint64_t v194;

  v194 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 8) = *((_QWORD *)this + 7);
  v2 = *((_QWORD *)this + 10);
  __p = &off_1E6971448;
  *(_QWORD *)v189 = this;
  v192[0] = &__p;
  Aggregate_Device_Description::for_each_subdevice(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), (uint64_t)&__p);
  p_p = (void **)v192[0];
  if ((void **)v192[0] == &__p)
  {
    v4 = 4;
    p_p = &__p;
  }
  else
  {
    if (!v192[0])
      goto LABEL_6;
    v4 = 5;
  }
  (*((void (**)(void))*p_p + v4))();
LABEL_6:
  v5 = (const __CFString *)*((_QWORD *)this + 12);
  if (v5)
  {
    applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, v5);
    v6 = *(_QWORD *)v189;
    if (v191 >= 0)
      v6 = HIBYTE(v191);
    v7 = v6 != 0;
    if (SHIBYTE(v191) < 0)
      operator delete(__p);
  }
  else
  {
    v7 = 0;
  }
  master_subdevice_uid = (unsigned int *)Aggregate_Device_Description::get_master_subdevice_uid(&v187, *(const void **)(*((_QWORD *)this + 10) + 40));
  begin = v187.__begin_;
  if (!v187.__begin_)
  {
    v12 = 0;
LABEL_26:
    if (!v7 && !v12)
    {
      v14 = (unsigned int *)*((_QWORD *)this + 7);
      if (v14 != *((unsigned int **)this + 8))
      {
        master_subdevice_uid = (unsigned int *)AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&__p, *(std::__shared_mutex_base **)(*((_QWORD *)this + 1) + 16), *v14);
        if (__p)
        {
          AMCP::Core::Core::get_simple_required_property<1969841184u>(&v187, (AMCP::Core::Core *)__p);
          master_subdevice_uid = (unsigned int *)*((_QWORD *)this + 12);
          *((_QWORD *)this + 12) = v187.__begin_;
          v187.__begin_ = master_subdevice_uid;
          if (master_subdevice_uid)
            CFRelease(master_subdevice_uid);
        }
        v15 = *(std::__shared_weak_count **)v189;
        if (*(_QWORD *)v189)
        {
          v16 = (unint64_t *)(*(_QWORD *)v189 + 8);
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
      }
    }
    goto LABEL_36;
  }
  Aggregate_Device_Description::get_master_subdevice_uid(&v193, *(const void **)(*((_QWORD *)this + 10) + 40));
  v10 = v193.__begin_;
  if (!v193.__begin_)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, (const __CFString *)v193.__begin_);
  if (v191 >= 0)
    v11 = HIBYTE(v191);
  else
    v11 = *(_QWORD *)v189;
  v12 = v11 != 0;
  if (SHIBYTE(v191) < 0)
    operator delete(__p);
  CFRelease(v10);
  CFRelease(begin);
  if (v11)
    v13 = v7;
  else
    v13 = 1;
  if ((v13 & 1) != 0)
    goto LABEL_26;
  Aggregate_Device_Description::get_master_subdevice_uid(&__p, *(const void **)(*((_QWORD *)this + 10) + 40));
  master_subdevice_uid = (unsigned int *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = __p;
  __p = master_subdevice_uid;
  if (master_subdevice_uid)
    CFRelease(master_subdevice_uid);
LABEL_36:
  if (*((_QWORD *)this + 13))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)master_subdevice_uid);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    v18 = *(std::__shared_weak_count **)v189;
    v19 = *(NSObject **)__p;
    if (*(_QWORD *)v189)
    {
      v20 = (unint64_t *)(*(_QWORD *)v189 + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      v137 = pthread_self();
      v138 = pthread_mach_thread_np(v137);
      v139 = (const __CFString *)*((_QWORD *)this + 13);
      if (!v139)
      {
        v177 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        applesauce::CF::construct_error(v177);
        __cxa_throw(v177, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v140 = v138;
      applesauce::CF::convert_to<std::string,0>((uint64_t)&v187, v139);
      if (SHIBYTE(v187.__end_cap_.__value_) >= 0)
        v141 = (std::vector<unsigned int>::pointer)&v187;
      else
        v141 = v187.__begin_;
      LODWORD(__p) = 67109890;
      HIDWORD(__p) = v140;
      *(_WORD *)v189 = 2080;
      *(_QWORD *)&v189[2] = "Meta_Device_Core.cpp";
      v190 = 1024;
      v191 = 454;
      LOWORD(v192[0]) = 2080;
      *(_QWORD *)((char *)v192 + 2) = v141;
      _os_log_debug_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Pick clock device. Previous clock was: %s", (uint8_t *)&__p, 0x22u);
      if (SHIBYTE(v187.__end_cap_.__value_) < 0)
        operator delete(v187.__begin_);
    }
  }
  Aggregate_Device_Description::get_clock_device_uid(&v193, *(const void **)(*((_QWORD *)this + 10) + 48));
  v22 = (unsigned int *)*((_QWORD *)this + 12);
  if (v22)
    CFRetain(*((CFTypeRef *)this + 12));
  v23 = 0;
  v193.__end_ = v22;
  v24 = 1;
  v25 = &v193;
  while (1)
  {
    v26 = v23;
    v27 = v25->__begin_;
    if (v25->__begin_)
      break;
LABEL_56:
    v25 = (std::vector<unsigned int> *)((char *)&v193 + 8 * v24);
    v23 = 1;
    v24 = 2;
    if ((v26 & 1) != 0)
      goto LABEL_74;
  }
  CFRetain(v25->__begin_);
  *(_QWORD *)&cf = v27;
  AMCP::Meta::Device::get_device_core(v185, *(std::__shared_mutex_base **)(*((_QWORD *)this + 1) + 16), (uint64_t)&cf);
  if ((_QWORD)cf)
    CFRelease((CFTypeRef)cf);
  if (!v185[0] || AMCP::Core::Core::get_simple_required_property<1668047219u>(v185[0]) == 1633773415)
  {
    v28 = (std::__shared_weak_count *)v185[1];
    if (v185[1])
    {
      v29 = (unint64_t *)((char *)v185[1] + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    goto LABEL_56;
  }
  v31 = (const void *)*((_QWORD *)this + 13);
  v32 = v25->__begin_;
  *((_QWORD *)this + 13) = v25->__begin_;
  if (v32)
    v32 = (void *)CFRetain(v32);
  if (v31)
    CFRelease(v31);
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v32);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
  v33 = *(std::__shared_weak_count **)v189;
  v34 = *(NSObject **)__p;
  if (*(_QWORD *)v189)
  {
    v35 = (unint64_t *)(*(_QWORD *)v189 + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
  {
    v166 = pthread_self();
    v167 = pthread_mach_thread_np(v166);
    v168 = (const __CFString *)*((_QWORD *)this + 13);
    if (!v168)
    {
      v180 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v180, "Could not construct");
      __cxa_throw(v180, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v169 = v167;
    applesauce::CF::convert_to<std::string,0>((uint64_t)&v187, v168);
    if (SHIBYTE(v187.__end_cap_.__value_) >= 0)
      v170 = (std::vector<unsigned int>::pointer)&v187;
    else
      v170 = v187.__begin_;
    LODWORD(__p) = 67109890;
    HIDWORD(__p) = v169;
    *(_WORD *)v189 = 2080;
    *(_QWORD *)&v189[2] = "Meta_Device_Core.cpp";
    v190 = 1024;
    v191 = 468;
    LOWORD(v192[0]) = 2080;
    *(_QWORD *)((char *)v192 + 2) = v170;
    _os_log_debug_impl(&dword_1B57BA000, v34, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d New clock: %s", (uint8_t *)&__p, 0x22u);
    if (SHIBYTE(v187.__end_cap_.__value_) < 0)
      operator delete(v187.__begin_);
  }
  v37 = (std::__shared_weak_count *)v185[1];
  if (v185[1])
  {
    v38 = (unint64_t *)((char *)v185[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v23 = 0;
LABEL_74:
  for (i = 8; i != -8; i -= 8)
  {
    v41 = *(std::vector<unsigned int>::pointer *)((char *)&v193.__begin_ + i);
    if (v41)
      CFRelease(v41);
  }
  if ((v23 & 1) != 0)
  {
    v42 = (unsigned int *)*((_QWORD *)this + 7);
    v43 = (unsigned int *)*((_QWORD *)this + 8);
    while (v42 != v43)
    {
      AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v193, *(std::__shared_mutex_base **)(*((_QWORD *)this + 1) + 16), *v42);
      if (v193.__begin_)
      {
        AMCP::Core::Core::get_simple_required_property<1969841184u>(&__p, (AMCP::Core::Core *)v193.__begin_);
        v44 = (void *)*((_QWORD *)this + 13);
        v45 = __p;
        *((_QWORD *)this + 13) = __p;
        __p = v44;
        if (v44)
        {
          CFRelease(v44);
          v45 = (void *)*((_QWORD *)this + 13);
        }
        if (v45)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v44);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
          v130 = *(std::__shared_weak_count **)v189;
          v131 = *(NSObject **)__p;
          if (*(_QWORD *)v189)
          {
            v132 = (unint64_t *)(*(_QWORD *)v189 + 8);
            do
              v133 = __ldaxr(v132);
            while (__stlxr(v133 - 1, v132));
            if (!v133)
            {
              ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
              std::__shared_weak_count::__release_weak(v130);
            }
          }
          if (os_log_type_enabled(v131, OS_LOG_TYPE_DEBUG))
          {
            v171 = pthread_self();
            v172 = pthread_mach_thread_np(v171);
            v173 = (const __CFString *)*((_QWORD *)this + 13);
            if (!v173)
            {
              v181 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v181, "Could not construct");
              __cxa_throw(v181, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            v174 = v172;
            applesauce::CF::convert_to<std::string,0>((uint64_t)&v187, v173);
            if (SHIBYTE(v187.__end_cap_.__value_) >= 0)
              v175 = (std::vector<unsigned int>::pointer)&v187;
            else
              v175 = v187.__begin_;
            LODWORD(__p) = 67109890;
            HIDWORD(__p) = v174;
            *(_WORD *)v189 = 2080;
            *(_QWORD *)&v189[2] = "Meta_Device_Core.cpp";
            v190 = 1024;
            v191 = 483;
            LOWORD(v192[0]) = 2080;
            *(_QWORD *)((char *)v192 + 2) = v175;
            _os_log_debug_impl(&dword_1B57BA000, v131, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d New clock: %s", (uint8_t *)&__p, 0x22u);
            if (SHIBYTE(v187.__end_cap_.__value_) < 0)
              operator delete(v187.__begin_);
          }
          end = (std::__shared_weak_count *)v193.__end_;
          if (v193.__end_)
          {
            v135 = (unint64_t *)(v193.__end_ + 2);
            do
              v136 = __ldaxr(v135);
            while (__stlxr(v136 - 1, v135));
            if (!v136)
            {
              ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
              std::__shared_weak_count::__release_weak(end);
            }
          }
          goto LABEL_99;
        }
      }
      v46 = (std::__shared_weak_count *)v193.__end_;
      if (v193.__end_)
      {
        v47 = (unint64_t *)(v193.__end_ + 2);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      ++v42;
    }
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&__p, "");
    v49 = (void *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = __p;
    __p = v49;
    if (v49)
      CFRelease(v49);
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v49);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    v50 = *(std::__shared_weak_count **)v189;
    v51 = *(NSObject **)__p;
    if (*(_QWORD *)v189)
    {
      v52 = (unint64_t *)(*(_QWORD *)v189 + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
    {
      v162 = pthread_self();
      v163 = pthread_mach_thread_np(v162);
      Aggregate_Device_Description::get_uid(&v193, **((const void ***)this + 10));
      v164 = v193.__begin_;
      if (!v193.__begin_)
      {
        v179 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v179, "Could not construct");
        __cxa_throw(v179, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::convert_to<std::string,0>((uint64_t)&v187, (const __CFString *)v193.__begin_);
      if (SHIBYTE(v187.__end_cap_.__value_) >= 0)
        v165 = (std::vector<unsigned int>::pointer)&v187;
      else
        v165 = v187.__begin_;
      LODWORD(__p) = 67109890;
      HIDWORD(__p) = v163;
      *(_WORD *)v189 = 2080;
      *(_QWORD *)&v189[2] = "Meta_Device_Core.cpp";
      v190 = 1024;
      v191 = 490;
      LOWORD(v192[0]) = 2080;
      *(_QWORD *)((char *)v192 + 2) = v165;
      _os_log_debug_impl(&dword_1B57BA000, v51, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d No viable clock device available for aggregate: %s", (uint8_t *)&__p, 0x22u);
      if (SHIBYTE(v187.__end_cap_.__value_) < 0)
        operator delete(v187.__begin_);
      CFRelease(v164);
    }
  }
LABEL_99:
  v54 = (unsigned int *)*((_QWORD *)this + 13);
  if (v54)
    CFRetain(*((CFTypeRef *)this + 13));
  v193.__begin_ = v54;
  AMCP::Meta::Device::get_device_core(&__p, *(std::__shared_mutex_base **)(*((_QWORD *)this + 1) + 16), (uint64_t)&v193);
  if (v193.__begin_)
    CFRelease(v193.__begin_);
  if (__p)
  {
    v187.__begin_ = (std::vector<unsigned int>::pointer)0x676C6F626E737274;
    LODWORD(v187.__end_) = 0;
    v55 = AMCP::Core::Core::call_operation_function<double>((AMCP::Address *)__p, (unsigned int *)&v187);
    if (v55 != *((double *)this + 20))
      *((double *)this + 20) = v55;
  }
  v56 = *(std::__shared_weak_count **)v189;
  if (*(_QWORD *)v189)
  {
    v57 = (unint64_t *)(*(_QWORD *)v189 + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (*((_QWORD *)this + 7) == *((_QWORD *)this + 8))
  {
    v78 = *((_QWORD *)this + 14);
    for (j = *((_QWORD *)this + 15); j != v78; j = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](j - 16))
      ;
    *((_QWORD *)this + 15) = v78;
    v80 = *((_QWORD *)this + 17);
    for (k = *((_QWORD *)this + 18); k != v80; k = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](k - 16))
      ;
    *((_QWORD *)this + 18) = v80;
    return;
  }
  Aggregate_Device_Description::is_stacked(&__p, *(const void **)(*((_QWORD *)this + 10) + 64));
  v59 = __p;
  if (!__p)
    goto LABEL_121;
  Aggregate_Device_Description::is_stacked(&v187, *(const void **)(*((_QWORD *)this + 10) + 64));
  v60 = v187.__begin_;
  if (!v187.__begin_)
  {
    v178 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v178, "Could not construct");
    __cxa_throw(v178, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v61 = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)v187.__begin_);
  CFRelease(v60);
  CFRelease(v59);
  if (!v61)
  {
LABEL_121:
    memset(&v187, 0, sizeof(v187));
    memset(&v193, 0, sizeof(v193));
    v67 = (unsigned int *)*((_QWORD *)this + 7);
    v68 = (unsigned int *)*((_QWORD *)this + 8);
    if (v67 == v68)
    {
      v76 = 0;
      v75 = 0;
    }
    else
    {
      do
      {
        AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&cf, *(std::__shared_mutex_base **)(*((_QWORD *)this + 1) + 16), *v67);
        v69 = (AMCP::Core::Core *)cf;
        AMCP::Core::Core::get_simple_required_property<1937009955u>(&__p, (AMCP::Core::Core *)cf, 1768845428);
        v70 = __p;
        std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(&v187, v187.__end_, (char *)__p, *(char **)v189, (uint64_t)(*(_QWORD *)v189 - (_QWORD)__p) >> 2);
        AMCP::Core::Core::get_simple_required_property<1937009955u>(v185, v69, 1869968496);
        v71 = v185[0];
        std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(&v193, v193.__end_, (char *)v185[0], (char *)v185[1], (v185[1] - v185[0]) >> 2);
        if (v71)
          operator delete(v71);
        if (v70)
          operator delete(v70);
        v72 = (std::__shared_weak_count *)*((_QWORD *)&cf + 1);
        if (*((_QWORD *)&cf + 1))
        {
          v73 = (unint64_t *)(*((_QWORD *)&cf + 1) + 8);
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        ++v67;
      }
      while (v67 != v68);
      v75 = v187.__begin_;
      v76 = v187.__end_;
    }
    AMCP::Meta::Device::remove_meta_streams_if_not_found((uint64_t *)this + 17, v75, (uint64_t)v76);
    AMCP::Meta::Device::remove_meta_streams_if_not_found((uint64_t *)this + 14, v193.__begin_, (uint64_t)v193.__end_);
    v81 = v187.__begin_;
    v82 = v187.__end_;
    if (v187.__begin_ == v187.__end_)
    {
LABEL_177:
      v105 = v193.__begin_;
      v106 = v193.__end_;
      if (v193.__begin_ != v193.__end_)
      {
        v107 = 1;
        do
        {
          v108 = *v105;
          AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)v185, *(std::__shared_mutex_base **)(*((_QWORD *)this + 1) + 16), *v105);
          if (v185[0])
          {
            AMCP::Core::Core::get_simple_required_property<1718444404u>((uint64_t)&__p, v185[0]);
            v109 = (AMCP::Meta::Stream **)*((_QWORD *)this + 14);
            v110 = (AMCP::Meta::Stream **)*((_QWORD *)this + 15);
            while (1)
            {
              if (v109 == v110)
                goto LABEL_193;
              if (*((_DWORD *)*v109 + 8) == v108)
                break;
              v109 += 2;
            }
            if (v109 == v110)
            {
LABEL_193:
              v118 = *(_OWORD *)((char *)this + 8);
              v183 = *((_QWORD *)this + 1);
              v119 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
              if (*((_QWORD *)&v118 + 1))
              {
                v120 = (unint64_t *)(*((_QWORD *)&v118 + 1) + 8);
                do
                  v121 = __ldxr(v120);
                while (__stxr(v121 + 1, v120));
              }
              v122 = (std::__shared_weak_count *)operator new(0x48uLL);
              v122->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v122->__shared_owners_;
              v122->__shared_weak_owners_ = 0;
              v122->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69714D8;
              AMCP::Meta::Stream::Stream((uint64_t)&v122[1], v183, (uint64_t)v119, *((_DWORD *)this + 10), v108, v107, 0);
              if (v119)
              {
                v124 = (unint64_t *)&v119->__shared_owners_;
                do
                  v125 = __ldaxr(v124);
                while (__stlxr(v125 - 1, v124));
                if (!v125)
                {
                  ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                  std::__shared_weak_count::__release_weak(v119);
                }
              }
              *(_QWORD *)&cf = v122 + 1;
              *((_QWORD *)&cf + 1) = v122;
              std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((char **)this + 14, &cf);
              do
                v126 = __ldaxr(p_shared_owners);
              while (__stlxr(v126 - 1, p_shared_owners));
              if (!v126)
              {
                ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                v117 = v122;
                goto LABEL_205;
              }
            }
            else
            {
              v111 = *v109;
              v112 = (std::__shared_weak_count *)v109[1];
              if (v112)
              {
                v113 = (unint64_t *)&v112->__shared_owners_;
                do
                  v114 = __ldxr(v113);
                while (__stxr(v114 + 1, v113));
              }
              *((_DWORD *)v111 + 9) = v107;
              AMCP::Meta::Stream::update_core(v111);
              if (v112)
              {
                v115 = (unint64_t *)&v112->__shared_owners_;
                do
                  v116 = __ldaxr(v115);
                while (__stlxr(v116 - 1, v115));
                if (!v116)
                {
                  ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                  v117 = v112;
LABEL_205:
                  std::__shared_weak_count::__release_weak(v117);
                }
              }
            }
            v107 += HIDWORD(v192[0]);
          }
          v127 = (std::__shared_weak_count *)v185[1];
          if (v185[1])
          {
            v128 = (unint64_t *)((char *)v185[1] + 8);
            do
              v129 = __ldaxr(v128);
            while (__stlxr(v129 - 1, v128));
            if (!v129)
            {
              ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
              std::__shared_weak_count::__release_weak(v127);
            }
          }
          ++v105;
        }
        while (v105 != v106);
        v105 = v193.__begin_;
      }
      if (v105)
      {
        v193.__end_ = v105;
        operator delete(v105);
      }
      if (v187.__begin_)
      {
        v187.__end_ = v187.__begin_;
        operator delete(v187.__begin_);
      }
      return;
    }
    v83 = 1;
    while (1)
    {
      AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)v185, *(std::__shared_mutex_base **)(*((_QWORD *)this + 1) + 16), *v81);
      if (!v185[0])
        goto LABEL_171;
      AMCP::Core::Core::get_simple_required_property<1718444404u>((uint64_t)&__p, v185[0]);
      v84 = (AMCP::Meta::Stream **)*((_QWORD *)this + 17);
      v85 = (AMCP::Meta::Stream **)*((_QWORD *)this + 18);
      if (v84 == v85)
        goto LABEL_157;
      while (*((_DWORD *)*v84 + 8) != *v81)
      {
        v84 += 2;
        if (v84 == v85)
          goto LABEL_157;
      }
      if (v84 == v85)
      {
LABEL_157:
        v93 = *(_OWORD *)((char *)this + 8);
        v182 = *((_QWORD *)this + 1);
        v94 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
        if (*((_QWORD *)&v93 + 1))
        {
          v95 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
          do
            v96 = __ldxr(v95);
          while (__stxr(v96 + 1, v95));
        }
        v97 = (std::__shared_weak_count *)operator new(0x48uLL);
        v97->__shared_owners_ = 0;
        v98 = (unint64_t *)&v97->__shared_owners_;
        v97->__shared_weak_owners_ = 0;
        v97->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69714D8;
        AMCP::Meta::Stream::Stream((uint64_t)&v97[1], v182, (uint64_t)v94, *((_DWORD *)this + 10), *v81, v83, 1);
        if (v94)
        {
          v99 = (unint64_t *)&v94->__shared_owners_;
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
          }
        }
        *(_QWORD *)&cf = v97 + 1;
        *((_QWORD *)&cf + 1) = v97;
        std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((char **)this + 17, &cf);
        do
          v101 = __ldaxr(v98);
        while (__stlxr(v101 - 1, v98));
        if (v101)
          goto LABEL_170;
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        v92 = v97;
      }
      else
      {
        v86 = *v84;
        v87 = (std::__shared_weak_count *)v84[1];
        if (v87)
        {
          v88 = (unint64_t *)&v87->__shared_owners_;
          do
            v89 = __ldxr(v88);
          while (__stxr(v89 + 1, v88));
        }
        *((_DWORD *)v86 + 9) = v83;
        AMCP::Meta::Stream::update_core(v86);
        if (!v87)
          goto LABEL_170;
        v90 = (unint64_t *)&v87->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (v91)
          goto LABEL_170;
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        v92 = v87;
      }
      std::__shared_weak_count::__release_weak(v92);
LABEL_170:
      v83 += HIDWORD(v192[0]);
LABEL_171:
      v102 = (std::__shared_weak_count *)v185[1];
      if (v185[1])
      {
        v103 = (unint64_t *)((char *)v185[1] + 8);
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
      }
      if (++v81 == v82)
        goto LABEL_177;
    }
  }
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v187, *(std::__shared_mutex_base **)(*((_QWORD *)this + 1) + 16), **((_DWORD **)this + 7));
  AMCP::Core::Core::get_simple_required_property<1937009955u>(&__p, (AMCP::Core::Core *)v187.__begin_, 1869968496);
  v62 = __p;
  if (__p != *(void **)v189)
  {
    v63 = *(_DWORD *)__p;
    v64 = operator new(4uLL);
    *v64 = v63;
    AMCP::Meta::Device::remove_meta_streams_if_not_found((uint64_t *)this + 14, v64, (uint64_t)(v64 + 1));
    operator delete(v64);
    AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v193, *(std::__shared_mutex_base **)(*((_QWORD *)this + 1) + 16), v63);
    if (v193.__begin_)
    {
      v65 = (AMCP::Meta::Stream **)*((_QWORD *)this + 14);
      v66 = (AMCP::Meta::Stream **)*((_QWORD *)this + 15);
      while (1)
      {
        if (v65 == v66)
          goto LABEL_244;
        if (*((_DWORD *)*v65 + 8) == v63)
          break;
        v65 += 2;
      }
      if (v65 == v66)
      {
LABEL_244:
        v148 = *(_OWORD *)((char *)this + 8);
        v184 = *((_QWORD *)this + 1);
        v149 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
        if (*((_QWORD *)&v148 + 1))
        {
          v150 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
          do
            v151 = __ldxr(v150);
          while (__stxr(v151 + 1, v150));
        }
        v143 = (unint64_t *)operator new(0x48uLL);
        v143[1] = 0;
        v152 = v143 + 1;
        v143[2] = 0;
        *v143 = (unint64_t)&off_1E69714D8;
        AMCP::Meta::Stream::Stream((uint64_t)(v143 + 3), v184, (uint64_t)v149, *((_DWORD *)this + 10), v63, 1, 0);
        if (v149)
        {
          v153 = (unint64_t *)&v149->__shared_owners_;
          do
            v154 = __ldaxr(v153);
          while (__stlxr(v154 - 1, v153));
          if (!v154)
          {
            ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
            std::__shared_weak_count::__release_weak(v149);
          }
        }
        v185[0] = (AMCP::Core::Core *)(v143 + 3);
        v185[1] = (AMCP::Core::Core *)v143;
        std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((char **)this + 14, (__int128 *)v185);
        do
          v155 = __ldaxr(v152);
        while (__stlxr(v155 - 1, v152));
        if (!v155)
          goto LABEL_255;
      }
      else
      {
        v142 = *v65;
        v143 = (unint64_t *)v65[1];
        if (v143)
        {
          v144 = v143 + 1;
          do
            v145 = __ldxr(v144);
          while (__stxr(v145 + 1, v144));
        }
        AMCP::Meta::Stream::update_core(v142);
        if (v143)
        {
          v146 = v143 + 1;
          do
            v147 = __ldaxr(v146);
          while (__stlxr(v147 - 1, v146));
          if (!v147)
          {
LABEL_255:
            (*(void (**)(unint64_t *))(*v143 + 16))(v143);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v143);
          }
        }
      }
    }
    v156 = (std::__shared_weak_count *)v193.__end_;
    if (v193.__end_)
    {
      v157 = (unint64_t *)(v193.__end_ + 2);
      do
        v158 = __ldaxr(v157);
      while (__stlxr(v158 - 1, v157));
      if (!v158)
      {
        ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
        std::__shared_weak_count::__release_weak(v156);
      }
    }
    v62 = __p;
  }
  if (v62)
    operator delete(v62);
  v159 = (std::__shared_weak_count *)v187.__end_;
  if (v187.__end_)
  {
    v160 = (unint64_t *)(v187.__end_ + 2);
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
}

void sub_1B58A2050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef a13, uint64_t a14, void *a15, std::__shared_weak_count *a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,CFTypeRef cf,std::__shared_weak_count *a24)
{
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;

  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (a24)
  {
    v28 = (unint64_t *)&a24->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))a24->__on_zero_shared)(a24);
      std::__shared_weak_count::__release_weak(a24);
    }
  }
  if (__p)
    operator delete(__p);
  if (a16)
  {
    v30 = (unint64_t *)&a16->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *Aggregate_Device_Description::is_stacked(_QWORD *this, const void *a2)
{
  _QWORD *v3;

  v3 = this;
  if (a2)
    this = CFRetain(a2);
  *v3 = a2;
  return this;
}

void AMCP::Meta::Device::remove_meta_streams_if_not_found(uint64_t *a1, const void *a2, uint64_t a3)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  __int128 *v9;
  _DWORD *v10;
  __int128 *v11;
  _DWORD *v12;
  uint64_t v13;
  void *__p;
  _DWORD *v15;
  uint64_t v16;

  v5 = *a1;
  v4 = (__int128 *)a1[1];
  v15 = 0;
  v16 = 0;
  __p = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, a2, a3, (a3 - (uint64_t)a2) >> 2);
  if ((__int128 *)v5 == v4)
    goto LABEL_21;
  v6 = (uint64_t)v4;
  v7 = __p;
  v8 = v15;
  v9 = (__int128 *)v5;
  while (__p != v15)
  {
    v10 = __p;
    while (*v10 != *(_DWORD *)(*(_QWORD *)v9 + 32))
    {
      if (++v10 == v15)
      {
        v5 = (uint64_t)v9;
        goto LABEL_10;
      }
    }
    if (++v9 == v4)
      goto LABEL_22;
  }
LABEL_10:
  if ((__int128 *)v5 != v4)
  {
    v11 = (__int128 *)(v5 + 16);
    if ((__int128 *)(v5 + 16) != v4)
    {
      v6 = v5;
      do
      {
        if (v7 != v8)
        {
          v12 = v7;
          while (*v12 != *(_DWORD *)(*(_QWORD *)v11 + 32))
          {
            if (++v12 == v8)
              goto LABEL_19;
          }
          std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v6, v11);
          v6 += 16;
        }
LABEL_19:
        ++v11;
      }
      while (v11 != v4);
      goto LABEL_22;
    }
LABEL_21:
    v6 = v5;
  }
LABEL_22:
  v13 = a1[1];
  if (v6 != v13)
  {
    while (v13 != v6)
    {
      v13 -= 16;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v13);
    }
    a1[1] = v6;
  }
  if (__p)
    operator delete(__p);
}

void std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(std::vector<unsigned int> *a1, unsigned int *__dst, char *__src, char *a4, uint64_t a5)
{
  unsigned int *v6;
  std::allocator<unsigned int> *p_end_cap;
  unsigned int *value;
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::pointer begin;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  std::vector<unsigned int>::pointer v22;
  char *v23;
  std::vector<unsigned int>::pointer v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  std::__split_buffer<unsigned int> __v;

  if (a5 < 1)
    return;
  v6 = (unsigned int *)__src;
  p_end_cap = (std::allocator<unsigned int> *)&a1->__end_cap_;
  value = a1->__end_cap_.__value_;
  end = a1->__end_;
  if (a5 > value - end)
  {
    begin = a1->__begin_;
    v13 = a5 + end - a1->__begin_;
    if (v13 >> 62)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v14 = __dst - begin;
    v15 = (char *)value - (char *)begin;
    if (v15 >> 1 > v13)
      v13 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v13;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v16)
      v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v16);
    else
      v17 = 0;
    v27 = (unsigned int *)(v16 + 4 * v14);
    __v.__first_ = (std::__split_buffer<unsigned int>::pointer)v16;
    __v.__begin_ = v27;
    __v.__end_cap_.__value_ = (unsigned int *)(v16 + 4 * v17);
    v28 = 4 * a5;
    v29 = &v27[a5];
    do
    {
      v30 = *v6++;
      *v27++ = v30;
      v28 -= 4;
    }
    while (v28);
    __v.__end_ = v29;
    std::vector<unsigned int>::__swap_out_circular_buffer(a1, &__v, __dst);
    if (__v.__first_)
      operator delete(__v.__first_);
    return;
  }
  v18 = (char *)end - (char *)__dst;
  v19 = end - __dst;
  if (v19 >= a5)
  {
    v20 = &__src[4 * a5];
    v22 = a1->__end_;
LABEL_17:
    v23 = (char *)&__dst[a5];
    v24 = &v22[-a5];
    v25 = v22;
    if (v24 < end)
    {
      v25 = v22;
      do
      {
        v26 = *v24++;
        *v25++ = v26;
      }
      while (v24 < end);
    }
    a1->__end_ = v25;
    if (v22 != (std::vector<unsigned int>::pointer)v23)
      memmove(&v22[-(((char *)v22 - v23) >> 2)], __dst, (char *)v22 - v23);
    if (v20 != (char *)v6)
      memmove(__dst, v6, v20 - (char *)v6);
    return;
  }
  v20 = &__src[4 * v19];
  v21 = a4 - v20;
  if (a4 != v20)
    memmove(a1->__end_, &__src[4 * v19], a4 - v20);
  v22 = (std::vector<unsigned int>::pointer)((char *)end + v21);
  a1->__end_ = (std::vector<unsigned int>::pointer)((char *)end + v21);
  if (v18 >= 1)
    goto LABEL_17;
}

__n128 AMCP::Core::Core::get_simple_required_property<1718444404u>(uint64_t a1, AMCP::Core::Core *this)
{
  char v2;
  AMCP::Log::Scope_Registry *has_property;
  _QWORD *v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __n128 result;
  __int128 v14;
  NSObject *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  uint64_t v18;
  int v19;
  _BYTE __p[17];
  _BYTE v21[23];
  _QWORD *v22;
  std::__shared_weak_count *v23;
  _BYTE buf[44];
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __n128 v29;
  _BYTE v30[23];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v18 = 0x676C6F62666D6174;
  v19 = 0;
  has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::has_property(this, (const AMCP::Address *)&v18);
  if (!(_DWORD)has_property)
    goto LABEL_17;
  has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v22, (int8x8_t *)this, (unsigned int *)&v18);
  v6 = v22;
  if (!v22)
    goto LABEL_9;
  v7 = AMCP::Implementation::get_type_marker<std::function<CA::StreamDescription ()(void)>>();
  if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v7))
  {
    has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Operation::call_function<CA::StreamDescription>((uint64_t)buf, v6);
    v8 = 0;
    v2 = buf[0];
    v29 = *(__n128 *)&buf[1];
    *(_OWORD *)v30 = *(_OWORD *)&buf[17];
    *(_QWORD *)&v30[15] = *(_QWORD *)&buf[32];
    goto LABEL_10;
  }
  v9 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  has_property = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v9);
  if (!has_property)
  {
LABEL_9:
    v8 = 1;
    goto LABEL_10;
  }
  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)buf, v6);
  has_property = (AMCP::Log::Scope_Registry *)AMCP::Thing::convert_to<CA::StreamDescription>((uint64_t)__p, (uint64_t)buf);
  v2 = __p[0];
  v29 = *(__n128 *)&__p[1];
  *(_OWORD *)v30 = *(_OWORD *)v21;
  *(_QWORD *)&v30[15] = *(_QWORD *)&v21[15];
  if (*(_QWORD *)&buf[32])
    has_property = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(_QWORD, _BYTE *, _QWORD, _QWORD))&buf[32])(0, buf, 0, 0);
  v8 = 0;
LABEL_10:
  v10 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if ((v8 & 1) != 0)
  {
LABEL_17:
    AMCP::Log::Scope_Registry::get(has_property);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v15 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      v21[6] = 4;
      strcpy(__p, "fmat");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v17;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Core.h";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 391;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "optional_value.operator BOOL() == true";
      *(_WORD *)&buf[34] = 2080;
      *(_QWORD *)&buf[36] = __p;
      v25 = 1024;
      v26 = 1735159650;
      v27 = 1024;
      v28 = 0;
      _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if ((v21[6] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    abort();
  }
  *(_BYTE *)a1 = v2;
  result = v29;
  v14 = *(_OWORD *)v30;
  *(__n128 *)(a1 + 1) = v29;
  *(_OWORD *)(a1 + 17) = v14;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)&v30[15];
  return result;
}

void sub_1B58A2CA8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  void *v24;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v10 = *a1;
    v11 = (v5 - *a1) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v13 = v4 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v15 = (char *)operator new(16 * v14);
    v16 = &v15[16 * v11];
    v17 = *a2;
    *(_OWORD *)v16 = *a2;
    if (*((_QWORD *)&v17 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v10 = *a1;
      v5 = a1[1];
    }
    if (v5 == v10)
    {
      v22 = vdupq_n_s64((unint64_t)v5);
      v20 = &v15[16 * v11];
    }
    else
    {
      v20 = &v15[16 * v11];
      do
      {
        v21 = *((_OWORD *)v5 - 1);
        v5 -= 16;
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 16;
        *(_QWORD *)v5 = 0;
        *((_QWORD *)v5 + 1) = 0;
      }
      while (v5 != v10);
      v22 = *(int64x2_t *)a1;
    }
    v9 = v16 + 16;
    *a1 = v20;
    a1[1] = v16 + 16;
    a1[2] = &v15[16 * v14];
    v23 = v22.i64[1];
    v24 = (void *)v22.i64[0];
    while ((void *)v23 != v24)
      v23 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v23 - 16);
    if (v24)
      operator delete(v24);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *(_QWORD *)v5 = *(_QWORD *)a2;
    *((_QWORD *)v5 + 1) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v5 + 16;
  }
  a1[1] = v9;
}

void std::__shared_ptr_emplace<AMCP::Meta::Stream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69714D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Meta::Stream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69714D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::Meta::Stream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t AMCP::Core::Operation::call_function<CA::StreamDescription>(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  AMCP::Log::Scope_Registry *v4;
  AMCP::Log::Scope_Registry *v5;
  uint64_t v6;
  NSObject *v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  void *v11;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *exception;
  __int128 v16;
  uint64_t v17;
  uint64_t (**v18)();
  __int128 v19;
  uint64_t v20;
  std::string v21;
  std::runtime_error v22;
  std::runtime_error v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  uint8_t buf[8];
  __int16 v31;
  char *v32;
  __int16 v33;
  int v34;
  const char *v35;
  const char *v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = AMCP::Implementation::get_type_marker<std::function<CA::StreamDescription ()(void)>>();
  v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a2, v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v14;
      v31 = 2080;
      v32 = "Operation.h";
      v33 = 1024;
      v34 = 154;
      _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v24 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    v35 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = CA::StreamDescription"
          ", Argument_Types = <>]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v37 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v5 = v4;
  if (!*((_QWORD *)v4 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<CA::StreamDescription ()(void)>>(),
        (v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v8 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = pthread_self();
      v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v10;
      v31 = 2080;
      v32 = "Operation.h";
      v33 = 1024;
      v34 = 161;
      _os_log_error_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    v11 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v24 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    v35 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = CA::StreamDescription"
          ", Argument_Types = <>]";
    v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v37 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v11, (uint64_t)buf);
  }
  v6 = *((_QWORD *)v4 + 3);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
}

void sub_1B58A323C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<CA::StreamDescription ()(void)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[264];
}

std::vector<unsigned int>::pointer std::vector<unsigned int>::__swap_out_circular_buffer(std::vector<unsigned int> *this, std::__split_buffer<unsigned int> *__v, std::vector<unsigned int>::pointer __p)
{
  unsigned int *begin;
  std::vector<unsigned int>::pointer v6;
  unsigned int *v7;
  std::vector<unsigned int>::pointer v8;
  unsigned int v9;
  unsigned int *end;
  std::__split_buffer<unsigned int>::pointer v11;
  int64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *value;

  begin = __v->__begin_;
  v6 = this->__begin_;
  v7 = begin;
  if (this->__begin_ != __p)
  {
    v8 = __p;
    v7 = __v->__begin_;
    do
    {
      v9 = *--v8;
      *--v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  end = this->__end_;
  v11 = __v->__end_;
  v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)v11 + v12);
  v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

_QWORD *AMCP::Meta::Device::get_device_core(_QWORD *a1, std::__shared_mutex_base *a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E69713C8;
  v5[1] = a3;
  v6 = v5;
  AMCP::Core::Broker::fetch_first_core_if (a1, a2, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

double AMCP::Core::Core::call_operation_function<double>(AMCP::Address *a1, unsigned int *a2)
{
  double v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v10;
  NSObject *v11;
  unint64_t *v12;
  unint64_t v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  void *exception;
  NSObject *v17;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t (**v22)();
  __int128 v23;
  uint64_t v24;
  std::string v25;
  std::runtime_error v26;
  std::runtime_error v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  uint8_t buf[8];
  _BYTE v37[10];
  __int16 v38;
  int v39;
  __int16 v40;
  _BYTE v41[14];
  const char *v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (*a2 == 707406378 || a2[1] == 707406378 || a2[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v17 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = pthread_self();
      v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v19;
      *(_WORD *)v37 = 2080;
      *(_QWORD *)&v37[2] = "Core.h";
      v38 = 1024;
      v39 = 198;
      v40 = 2080;
      *(_QWORD *)v41 = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v34, (int8x8_t *)a1, a2);
  if (!v34)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v10 = *(std::__shared_weak_count **)v37;
    v11 = **(NSObject ***)buf;
    if (*(_QWORD *)v37)
    {
      v12 = (unint64_t *)(*(_QWORD *)v37 + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v14 = pthread_self();
      v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v15;
      *(_WORD *)v37 = 2080;
      *(_QWORD *)&v37[2] = "Core.h";
      v38 = 1024;
      v39 = 202;
      _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v33);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v25);
    std::runtime_error::runtime_error(&v26, &v25);
    std::runtime_error::runtime_error(&v27, &v26);
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = -1;
    v27.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v28 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v27);
    *(_QWORD *)&v41[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = double, Argument_Types = <>]";
    v42 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    v43 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v20);
    v23 = v20;
    v24 = v21;
    v20 = 0uLL;
    v21 = 0;
    v22 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v22);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  AMCP::Core::Operation::call_function<double>(v34);
  v5 = v4;
  v6 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1B58A38BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  v27 = *(std::__shared_weak_count **)(v25 - 136);
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::Meta::Device::get_device_core(applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Meta::Device::get_device_core(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Meta::Device::get_device_core(applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Meta::Device::get_device_core(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69713C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::get_device_core(applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Meta::Device::get_device_core(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69713C8;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<AMCP::Meta::Device::get_device_core(applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Meta::Device::get_device_core(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  unsigned int simple_required;
  _BOOL8 v5;
  CFTypeRef cf;

  simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
  if (!AMCP::is_base_of((AMCP *)0x61646576, simple_required))
    return 0;
  AMCP::Core::Core::get_simple_required_property<1969841184u>(&cf, *a2);
  v5 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(**(const __CFString ***)(a1 + 8), (const __CFString **)&cf) == kCFCompareEqualTo;
  if (cf)
    CFRelease(cf);
  return v5;
}

uint64_t std::__function::__func<AMCP::Meta::Device::get_device_core(applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Meta::Device::get_device_core(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device15get_device_coreEN10applesauce2CF9StringRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Device::get_device_core(applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Meta::Device::get_device_core(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

_QWORD *Aggregate_Device_Description::get_uid(_QWORD *this, const void *a2)
{
  _QWORD *v3;

  v3 = this;
  if (a2)
    this = CFRetain(a2);
  *v3 = a2;
  return this;
}

uint64_t Aggregate_Device_Description::for_each_subdevice(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(_QWORD *)(a3 + 24);
      if (!v6)
        std::__throw_bad_function_call[abi:ne180100]();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, v5);
      v5 += 56;
    }
    while (v5 != a2);
  }
  return result;
}

void std::__function::__func<AMCP::Meta::Device::assemble_active_subdevice_list(void)::$_0,std::allocator<AMCP::Meta::Device::assemble_active_subdevice_list(void)::$_0>,void ()(Audio_Sub_Device_Description &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Meta::Device::assemble_active_subdevice_list(void)::$_0,std::allocator<AMCP::Meta::Device::assemble_active_subdevice_list(void)::$_0>,void ()(Audio_Sub_Device_Description &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6971448;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::assemble_active_subdevice_list(void)::$_0,std::allocator<AMCP::Meta::Device::assemble_active_subdevice_list(void)::$_0>,void ()(Audio_Sub_Device_Description &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6971448;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::Meta::Device::assemble_active_subdevice_list(void)::$_0,std::allocator<AMCP::Meta::Device::assemble_active_subdevice_list(void)::$_0>,void ()(Audio_Sub_Device_Description &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  CFTypeRef v4;
  AMCP::Core::Core *v5;
  int v6;
  unint64_t v7;
  char *v8;
  _DWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  int v19;
  const void *v20;
  const void *v21;
  unsigned int *v22;
  unsigned int *v23;
  int v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  CFNumberRef v28;
  const void *v29;
  unsigned int *v30;
  unsigned int *v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  CFNumberRef v36;
  const void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::runtime_error *exception;
  std::runtime_error *v42;
  uint64_t v43;
  int v44;
  int v45;
  AMCP::Core::Core *v46;
  std::__shared_weak_count *v47;
  void *__p;
  unsigned int *v49;
  void *v50;
  unsigned int *v51;
  const void *v52;
  char v53;
  CFTypeRef v54;
  AMCP::Core::Core *v55;
  std::__shared_weak_count *v56;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = *(CFTypeRef *)a2;
  if (*(_QWORD *)a2)
    CFRetain(*(CFTypeRef *)a2);
  v54 = v4;
  AMCP::Meta::Device::get_device_core(&v55, *(std::__shared_mutex_base **)(v3[1] + 16), (uint64_t)&v54);
  if (v54)
    CFRelease(v54);
  v5 = v55;
  if (v55)
  {
    if (AMCP::Core::Core::get_simple_required_property<1668047219u>(v55) != 1633773415)
    {
      v6 = *(_DWORD *)v5;
      v8 = (char *)v3[8];
      v7 = v3[9];
      if ((unint64_t)v8 >= v7)
      {
        v10 = (char *)v3[7];
        v11 = (v8 - v10) >> 2;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v13 = v7 - (_QWORD)v10;
        if (v13 >> 1 > v12)
          v12 = v13 >> 1;
        v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL;
        v15 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v14)
          v15 = v12;
        if (v15)
        {
          v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v15);
          v10 = (char *)v3[7];
          v8 = (char *)v3[8];
        }
        else
        {
          v16 = 0;
        }
        v17 = (_DWORD *)(v15 + 4 * v11);
        v18 = v15 + 4 * v16;
        *v17 = v6;
        v9 = v17 + 1;
        while (v8 != v10)
        {
          v19 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *--v17 = v19;
        }
        v3[7] = v17;
        v3[8] = v9;
        v3[9] = v18;
        if (v10)
          operator delete(v10);
      }
      else
      {
        *(_DWORD *)v8 = v6;
        v9 = v8 + 4;
      }
      v3[8] = v9;
    }
    v43 = 0x676C6F626C6E616DLL;
    v44 = 0;
    AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(&v52, v5, (const AMCP::Address *)&v43);
    if (v53)
    {
      v20 = *(const void **)(a2 + 8);
      v21 = v52;
      *(_QWORD *)(a2 + 8) = v52;
      if (v21)
        CFRetain(v21);
      if (v20)
        CFRelease(v20);
    }
    AMCP::Core::Core::get_simple_required_property<1937009955u>(&v50, v5, 1768845428);
    AMCP::Core::Core::get_simple_required_property<1937009955u>(&__p, v5, 1869968496);
    v22 = (unsigned int *)v50;
    v23 = v51;
    if (v50 == v51)
    {
      v24 = 0;
    }
    else
    {
      v24 = 0;
      do
      {
        AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v46, *(std::__shared_mutex_base **)(v3[1] + 16), *v22);
        if (v46)
        {
          AMCP::Core::Core::get_simple_required_property<1718444404u>((uint64_t)&v43, v46);
          v24 += v45;
        }
        v25 = v47;
        if (v47)
        {
          p_shared_owners = (unint64_t *)&v47->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        ++v22;
      }
      while (v22 != v23);
    }
    LODWORD(v43) = v24;
    v28 = CFNumberCreate(0, kCFNumberIntType, &v43);
    if (!v28)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v29 = *(const void **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v28;
    if (v29)
      CFRelease(v29);
    v30 = (unsigned int *)__p;
    v31 = v49;
    if (__p == v49)
    {
      v32 = 0;
    }
    else
    {
      v32 = 0;
      do
      {
        AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v46, *(std::__shared_mutex_base **)(v3[1] + 16), *v30);
        if (v46)
        {
          AMCP::Core::Core::get_simple_required_property<1718444404u>((uint64_t)&v43, v46);
          v32 += v45;
        }
        v33 = v47;
        if (v47)
        {
          v34 = (unint64_t *)&v47->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        ++v30;
      }
      while (v30 != v31);
    }
    LODWORD(v43) = v32;
    v36 = CFNumberCreate(0, kCFNumberIntType, &v43);
    if (!v36)
    {
      v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v42, "Could not construct");
      __cxa_throw(v42, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v37 = *(const void **)(a2 + 24);
    *(_QWORD *)(a2 + 24) = v36;
    if (v37)
      CFRelease(v37);
    if (__p)
      operator delete(__p);
    if (v50)
      operator delete(v50);
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v52);
  }
  v38 = v56;
  if (v56)
  {
    v39 = (unint64_t *)&v56->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_1B58A3FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19)
{
  uint64_t v19;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;

  v21 = *(std::__shared_weak_count **)(v19 - 56);
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Meta::Device::assemble_active_subdevice_list(void)::$_0,std::allocator<AMCP::Meta::Device::assemble_active_subdevice_list(void)::$_0>,void ()(Audio_Sub_Device_Description &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device30assemble_active_subdevice_listEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Device::assemble_active_subdevice_list(void)::$_0,std::allocator<AMCP::Meta::Device::assemble_active_subdevice_list(void)::$_0>,void ()(Audio_Sub_Device_Description &)>::target_type()
{
}

uint64_t AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>(uint64_t *a1, int a2, char *a3, double a4)
{
  uint64_t v6;
  unint64_t v7;
  char v8;
  __n128 v9;
  uint64_t (***v10)();
  uint64_t v11;
  _OWORD v13[2];
  double (*v14)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t (**v15)();
  char v16;
  uint64_t (***v17)();
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, a2, a4);
  v6 = *a1;
  v7 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  v8 = *a3;
  v14 = 0;
  v15 = &off_1E69991A0;
  v16 = v8;
  v17 = &v15;
  memset(v13, 0, sizeof(v13));
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)&v15);
  v14 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v13);
  if (v14)
    v9.n128_f64[0] = v14(0, (uint64_t)v13, 0, 0);
  v10 = v17;
  if (v17 == &v15)
  {
    v11 = 4;
    v10 = &v15;
    goto LABEL_7;
  }
  if (v17)
  {
    v11 = 5;
LABEL_7:
    ((void (*)(__n128))(*v10)[v11])(v9);
  }
  return AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(v6);
}

void sub_1B58A41FC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Core::Operation_Utilities::make_typed_property<int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1}>(uint64_t *a1, int a2, int *a3, double a4)
{
  uint64_t v6;
  unint64_t v7;
  int v8;
  __n128 v9;
  uint64_t (***v10)();
  uint64_t v11;
  _OWORD v13[2];
  double (*v14)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t (**v15)();
  int v16;
  uint64_t (***v17)();
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, a2, a4);
  v6 = *a1;
  v7 = AMCP::Implementation::get_type_marker<std::function<int ()(void)>>();
  v8 = *a3;
  v14 = 0;
  v15 = &off_1E698AD50;
  v16 = v8;
  v17 = &v15;
  memset(v13, 0, sizeof(v13));
  std::__function::__value_func<int ()(void)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)&v15);
  v14 = AMCP::Implementation::In_Place_Storage<std::function<int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v13);
  if (v14)
    v9.n128_f64[0] = v14(0, (uint64_t)v13, 0, 0);
  v10 = v17;
  if (v17 == &v15)
  {
    v11 = 4;
    v10 = &v15;
    goto LABEL_7;
  }
  if (v17)
  {
    v11 = 5;
LABEL_7:
    ((void (*)(__n128))(*v10)[v11])(v9);
  }
  return AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(v6);
}

void sub_1B58A4334(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMCP::Meta::Device::update_core_common(uint64_t a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  CFTypeRef v11;
  unint64_t v12;
  __int128 v13;
  uint64_t (***v14)();
  uint64_t v15;
  CFTypeRef v16;
  unint64_t v17;
  __int128 v18;
  uint64_t (***v19)();
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  CFTypeRef v30;
  unint64_t v31;
  __int128 v32;
  uint64_t (***v33)();
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  int v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  int v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  CFTypeRef v53;
  unint64_t v54;
  __int128 v55;
  uint64_t (***v56)();
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  CFTypeRef v64;
  unint64_t v65;
  __int128 v66;
  uint64_t (***v67)();
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  __int128 v77;
  uint64_t (***v78)();
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t (**v82)();
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  __int128 *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  __int128 v90;
  uint64_t (***v91)();
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t (**v95)();
  unint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  __int128 *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  CFTypeRef v110;
  unint64_t v111;
  __int128 v112;
  uint64_t (***v113)();
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  CFTypeRef v121;
  unint64_t v122;
  __int128 v123;
  uint64_t (***v124)();
  uint64_t v125;
  CFTypeRef v126;
  unint64_t v127;
  __int128 v128;
  uint64_t (***v129)();
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  CFTypeRef v140;
  unint64_t v141;
  __int128 v142;
  uint64_t (***v143)();
  uint64_t v144;
  CFTypeRef v145;
  unint64_t v146;
  __int128 v147;
  uint64_t (***v148)();
  uint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  CFTypeRef v159;
  unint64_t v160;
  __int128 v161;
  uint64_t (***v162)();
  uint64_t v163;
  CFTypeRef v164;
  unint64_t v165;
  __int128 v166;
  uint64_t (***v167)();
  uint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  const __CFBoolean *v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  CFTypeRef v182;
  unint64_t v183;
  __int128 v184;
  __n128 v185;
  uint64_t (***v186)();
  uint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  CFTypeRef v194;
  unint64_t v195;
  __int128 v196;
  __n128 v197;
  uint64_t (***v198)();
  uint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  CFTypeRef v206;
  unint64_t v207;
  __int128 v208;
  __n128 v209;
  uint64_t (***v210)();
  uint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  __int128 v218;
  __int128 v219;
  uint64_t v220[3];
  CFTypeRef v221;
  _BYTE v222[48];
  int v223;
  CFTypeRef cf[2];
  __int128 v225;
  void (*v226)(int, uint64_t, AMCP::Thing *, uint64_t *);
  uint64_t (**v227)();
  _BYTE v228[24];
  int v229;
  uint64_t v230;
  int v231;
  __int128 v232;
  __int128 *v233;
  uint64_t v234;

  v234 = *MEMORY[0x1E0C80C00];
  Aggregate_Device_Description::get_name(v222, *(const void **)(*(_QWORD *)(a1 + 80) + 8));
  v4 = *(const void **)v222;
  if (*(_QWORD *)v222)
  {
    Aggregate_Device_Description::get_name(&v221, *(const void **)(*(_QWORD *)(a1 + 80) + 8));
    CFRelease(v4);
  }
  else
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v221, "Meta Device");
  }
  v227 = (uint64_t (**)())0x676C6F626C6E616DLL;
  *(_DWORD *)v228 = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v222, (uint64_t)&v227, v221);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)v222 + 40), v222);
  v5 = *(std::__shared_weak_count **)&v222[8];
  if (*(_QWORD *)&v222[8])
  {
    v6 = (unint64_t *)(*(_QWORD *)&v222[8] + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  Aggregate_Device_Description::get_uid(cf, **(const void ***)(a1 + 80));
  v227 = (uint64_t (**)())0x676C6F6275696420;
  *(_DWORD *)v228 = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v222, (uint64_t)&v227, cf[0]);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)v222 + 40), v222);
  v8 = *(std::__shared_weak_count **)&v222[8];
  if (*(_QWORD *)&v222[8])
  {
    v9 = (unint64_t *)(*(_QWORD *)&v222[8] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (cf[0])
    CFRelease(cf[0]);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v232, *(_QWORD *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(v220, *(_QWORD *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 1.5836601e190);
  v11 = cf[0];
  v12 = AMCP::Implementation::get_type_marker<std::function<double ()(void)>>();
  v13 = v232;
  v232 = 0uLL;
  *(_OWORD *)v228 = v13;
  v227 = &off_1E6970628;
  *(_QWORD *)&v228[16] = &v227;
  memset(v222, 0, 40);
  std::__function::__value_func<double ()(void)>::__value_func[abi:ne180100]((uint64_t)v222, (uint64_t)&v227);
  *(_QWORD *)&v222[32] = AMCP::Implementation::In_Place_Storage<std::function<double ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v11, v12, (AMCP *)v222);
  if (*(_QWORD *)&v222[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v222[32])(0, (uint64_t)v222, 0, 0);
  v14 = *(uint64_t (****)())&v228[16];
  if (*(uint64_t (****)())&v228[16] == &v227)
  {
    v15 = 4;
    v14 = &v227;
  }
  else
  {
    if (!*(_QWORD *)&v228[16])
      goto LABEL_23;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_23:
  AMCP::Core::Operation_Utilities::add_generic_property_getter<double>((uint64_t)cf[0]);
  v16 = cf[0];
  v17 = AMCP::Implementation::get_type_marker<std::function<void ()(double const&)>>();
  v18 = *(_OWORD *)v220;
  *(_OWORD *)v220 = 0uLL;
  *(_OWORD *)v228 = v18;
  v227 = &off_1E69706A8;
  *(_QWORD *)&v228[16] = &v227;
  memset(v222, 0, 40);
  std::__function::__value_func<void ()(double const&)>::__value_func[abi:ne180100]((uint64_t)v222, (uint64_t)&v227);
  *(_QWORD *)&v222[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(double const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v16, v17, (AMCP *)v222);
  if (*(_QWORD *)&v222[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v222[32])(0, (uint64_t)v222, 0, 0);
  v19 = *(uint64_t (****)())&v228[16];
  if (*(uint64_t (****)())&v228[16] == &v227)
  {
    v20 = 4;
    v19 = &v227;
    goto LABEL_29;
  }
  if (*(_QWORD *)&v228[16])
  {
    v20 = 5;
LABEL_29:
    (*v19)[v20]();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<double>((uint64_t)cf[0]);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
  v21 = (std::__shared_weak_count *)cf[1];
  if (cf[1])
  {
    v22 = (unint64_t *)((char *)cf[1] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (std::__shared_weak_count *)v220[1];
  if (v220[1])
  {
    v25 = (unint64_t *)(v220[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
  if (*((_QWORD *)&v232 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v232, *(_QWORD *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 1.5836601e190);
  v30 = cf[0];
  v31 = AMCP::Implementation::get_type_marker<std::function<CA::ValueRangeList ()(void)>>();
  v32 = v232;
  v232 = 0uLL;
  *(_OWORD *)v228 = v32;
  v227 = &off_1E6970828;
  *(_QWORD *)&v228[16] = &v227;
  memset(v222, 0, 40);
  std::__function::__value_func<CA::ValueRangeList ()(void)>::__value_func[abi:ne180100]((uint64_t)v222, (uint64_t)&v227);
  *(_QWORD *)&v222[32] = AMCP::Implementation::In_Place_Storage<std::function<CA::ValueRangeList ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v30, v31, (AMCP *)v222);
  if (*(_QWORD *)&v222[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v222[32])(0, (uint64_t)v222, 0, 0);
  v33 = *(uint64_t (****)())&v228[16];
  if (*(uint64_t (****)())&v228[16] == &v227)
  {
    v34 = 4;
    v33 = &v227;
    goto LABEL_51;
  }
  if (*(_QWORD *)&v228[16])
  {
    v34 = 5;
LABEL_51:
    (*v33)[v34]();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>((uint64_t)cf[0]);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
  v35 = (std::__shared_weak_count *)cf[1];
  if (cf[1])
  {
    v36 = (unint64_t *)((char *)cf[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
  if (*((_QWORD *)&v232 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = *(_DWORD *)(a1 + 40);
  *(_QWORD *)v222 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  *(_DWORD *)&v222[8] = v41;
  *(_DWORD *)&v222[12] = 1634956402;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)&v227, 0, (__int128 *)v222, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)v227 + 10, &v227);
  v42 = *(std::__shared_weak_count **)v228;
  if (*(_QWORD *)v228)
  {
    v43 = (unint64_t *)(*(_QWORD *)v228 + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = *(_DWORD *)(a1 + 40);
  *(_QWORD *)v222 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  *(_DWORD *)&v222[8] = v45;
  *(_OWORD *)&v222[12] = xmmword_1B5D68B60;
  *(_OWORD *)&v222[28] = xmmword_1B5D68B70;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>((uint64_t *)&v227, 0, (uint64_t *)v222, 7.28117508e199);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)v227 + 10, &v227);
  v46 = *(std::__shared_weak_count **)v228;
  if (*(_QWORD *)v228)
  {
    v47 = (unint64_t *)(*(_QWORD *)v228 + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = *(_DWORD *)(a1 + 40);
  *(_QWORD *)v222 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  *(_DWORD *)&v222[8] = v49;
  *(_OWORD *)&v222[12] = xmmword_1B5D68B60;
  *(_OWORD *)&v222[28] = xmmword_1B5D68B80;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>((uint64_t *)&v227, 0, (uint64_t *)v222, 8.13208706e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)v227 + 10, &v227);
  v50 = *(std::__shared_weak_count **)v228;
  if (*(_QWORD *)v228)
  {
    v51 = (unint64_t *)(*(_QWORD *)v228 + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v232, *(_QWORD *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 7.28117508e199);
  v53 = cf[0];
  v54 = AMCP::Implementation::get_type_marker<std::function<CA::ChannelLayout ()(void)>>();
  v55 = v232;
  v232 = 0uLL;
  *(_OWORD *)v228 = v55;
  v227 = &off_1E69708A8;
  *(_QWORD *)&v228[16] = &v227;
  memset(v222, 0, 40);
  std::__function::__value_func<CA::ChannelLayout ()(void)>::__value_func[abi:ne180100]((uint64_t)v222, (uint64_t)&v227);
  *(_QWORD *)&v222[32] = AMCP::Implementation::In_Place_Storage<std::function<CA::ChannelLayout ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v53, v54, (AMCP *)v222);
  if (*(_QWORD *)&v222[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v222[32])(0, (uint64_t)v222, 0, 0);
  v56 = *(uint64_t (****)())&v228[16];
  if (*(uint64_t (****)())&v228[16] == &v227)
  {
    v57 = 4;
    v56 = &v227;
    goto LABEL_83;
  }
  if (*(_QWORD *)&v228[16])
  {
    v57 = 5;
LABEL_83:
    (*v56)[v57]();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>((uint64_t)cf[0]);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
  v58 = (std::__shared_weak_count *)cf[1];
  if (cf[1])
  {
    v59 = (unint64_t *)((char *)cf[1] + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
  if (*((_QWORD *)&v232 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v232, *(_QWORD *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 8.13208706e228);
  v64 = cf[0];
  v65 = AMCP::Implementation::get_type_marker<std::function<CA::ChannelLayout ()(void)>>();
  v66 = v232;
  v232 = 0uLL;
  *(_OWORD *)v228 = v66;
  v227 = &off_1E6970928;
  *(_QWORD *)&v228[16] = &v227;
  memset(v222, 0, 40);
  std::__function::__value_func<CA::ChannelLayout ()(void)>::__value_func[abi:ne180100]((uint64_t)v222, (uint64_t)&v227);
  *(_QWORD *)&v222[32] = AMCP::Implementation::In_Place_Storage<std::function<CA::ChannelLayout ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v64, v65, (AMCP *)v222);
  if (*(_QWORD *)&v222[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v222[32])(0, (uint64_t)v222, 0, 0);
  v67 = *(uint64_t (****)())&v228[16];
  if (*(uint64_t (****)())&v228[16] == &v227)
  {
    v68 = 4;
    v67 = &v227;
    goto LABEL_100;
  }
  if (*(_QWORD *)&v228[16])
  {
    v68 = 5;
LABEL_100:
    (*v67)[v68]();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>((uint64_t)cf[0]);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
  v69 = (std::__shared_weak_count *)cf[1];
  if (cf[1])
  {
    v70 = (unint64_t *)((char *)cf[1] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
  if (*((_QWORD *)&v232 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v219, *(_QWORD *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v218, *(_QWORD *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(v220, 0, 1.58366008e190);
  v75 = v220[0];
  v76 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::ArrayRef ()(void)>>();
  v77 = v219;
  v219 = 0uLL;
  *(_OWORD *)v228 = v77;
  v227 = &off_1E69709A8;
  *(_QWORD *)&v228[16] = &v227;
  memset(v222, 0, 40);
  std::__function::__value_func<applesauce::CF::ArrayRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v222, (uint64_t)&v227);
  *(_QWORD *)&v222[32] = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::ArrayRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v75, v76, (AMCP *)v222);
  if (*(_QWORD *)&v222[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v222[32])(0, (uint64_t)v222, 0, 0);
  v78 = *(uint64_t (****)())&v228[16];
  if (*(uint64_t (****)())&v228[16] == &v227)
  {
    v79 = 4;
    v78 = &v227;
  }
  else
  {
    if (!*(_QWORD *)&v228[16])
      goto LABEL_118;
    v79 = 5;
  }
  (*v78)[v79]();
LABEL_118:
  v80 = v220[0];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v227, v220[0]);
  v230 = *(_QWORD *)(v80 + 40);
  v231 = *(_DWORD *)(v80 + 48);
  v81 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v82 = v227;
  v83 = *(_QWORD *)v228;
  v227 = 0;
  *(_QWORD *)v228 = 0;
  *(_QWORD *)v222 = v82;
  *(_QWORD *)&v222[8] = v83;
  *(_OWORD *)&v222[16] = *(_OWORD *)&v228[8];
  *(_DWORD *)&v222[32] = v229;
  if (*(_QWORD *)&v228[16])
  {
    v84 = *(_QWORD *)(*(_QWORD *)&v228[8] + 8);
    if ((v83 & (v83 - 1)) != 0)
    {
      if (v84 >= v83)
        v84 %= v83;
    }
    else
    {
      v84 &= v83 - 1;
    }
    v82[v84] = (uint64_t (*)())&v222[16];
    *(_OWORD *)&v228[8] = 0uLL;
  }
  *(_QWORD *)&v222[40] = v230;
  v223 = v231;
  v233 = 0;
  v85 = operator new(0x40uLL);
  *v85 = &off_1E6970A38;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v85 + 1), (uint64_t *)v222);
  v85[6] = *(_QWORD *)&v222[40];
  *((_DWORD *)v85 + 14) = v223;
  v233 = (__int128 *)v85;
  *(_OWORD *)cf = 0u;
  v225 = 0u;
  v226 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)cf, (uint64_t)&v232);
  v226 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v80, v81, (AMCP *)cf);
  if (v226)
    v226(0, (uint64_t)cf, 0, 0);
  v86 = v233;
  if (v233 == &v232)
  {
    v87 = 4;
    v86 = &v232;
  }
  else
  {
    if (!v233)
      goto LABEL_131;
    v87 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v86 + 8 * v87))();
LABEL_131:
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v222);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v227);
  v88 = v220[0];
  v89 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::ArrayRef const&)>>();
  v90 = v218;
  v218 = 0uLL;
  *(_OWORD *)v228 = v90;
  v227 = &off_1E6970AB8;
  *(_QWORD *)&v228[16] = &v227;
  memset(v222, 0, 40);
  std::__function::__value_func<void ()(applesauce::CF::ArrayRef const&)>::__value_func[abi:ne180100]((uint64_t)v222, (uint64_t)&v227);
  *(_QWORD *)&v222[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::ArrayRef const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v88, v89, (AMCP *)v222);
  if (*(_QWORD *)&v222[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v222[32])(0, (uint64_t)v222, 0, 0);
  v91 = *(uint64_t (****)())&v228[16];
  if (*(uint64_t (****)())&v228[16] == &v227)
  {
    v92 = 4;
    v91 = &v227;
  }
  else
  {
    if (!*(_QWORD *)&v228[16])
      goto LABEL_138;
    v92 = 5;
  }
  (*v91)[v92]();
LABEL_138:
  v93 = v220[0];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v227, v220[0]);
  v230 = *(_QWORD *)(v93 + 40);
  v231 = *(_DWORD *)(v93 + 48);
  v94 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  v95 = v227;
  v96 = *(_QWORD *)v228;
  v227 = 0;
  *(_QWORD *)v228 = 0;
  *(_QWORD *)v222 = v95;
  *(_QWORD *)&v222[8] = v96;
  *(_OWORD *)&v222[16] = *(_OWORD *)&v228[8];
  *(_DWORD *)&v222[32] = v229;
  if (*(_QWORD *)&v228[16])
  {
    v97 = *(_QWORD *)(*(_QWORD *)&v228[8] + 8);
    if ((v96 & (v96 - 1)) != 0)
    {
      if (v97 >= v96)
        v97 %= v96;
    }
    else
    {
      v97 &= v96 - 1;
    }
    v95[v97] = (uint64_t (*)())&v222[16];
    *(_OWORD *)&v228[8] = 0uLL;
  }
  *(_QWORD *)&v222[40] = v230;
  v223 = v231;
  v233 = 0;
  v98 = operator new(0x40uLL);
  *v98 = &off_1E6970BC8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v98 + 1), (uint64_t *)v222);
  v98[6] = *(_QWORD *)&v222[40];
  *((_DWORD *)v98 + 14) = v223;
  v233 = (__int128 *)v98;
  *(_OWORD *)cf = 0u;
  v225 = 0u;
  v226 = 0;
  std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)cf, (uint64_t)&v232);
  v226 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v93, v94, (AMCP *)cf);
  if (v226)
    v226(0, (uint64_t)cf, 0, 0);
  v99 = v233;
  if (v233 == &v232)
  {
    v100 = 4;
    v99 = &v232;
    goto LABEL_150;
  }
  if (v233)
  {
    v100 = 5;
LABEL_150:
    (*(void (**)(void))(*(_QWORD *)v99 + 8 * v100))();
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v222);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v227);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v220[0] + 40), v220);
  v101 = (std::__shared_weak_count *)v220[1];
  if (v220[1])
  {
    v102 = (unint64_t *)(v220[1] + 8);
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = (std::__shared_weak_count *)*((_QWORD *)&v218 + 1);
  if (*((_QWORD *)&v218 + 1))
  {
    v105 = (unint64_t *)(*((_QWORD *)&v218 + 1) + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
  if (*((_QWORD *)&v219 + 1))
  {
    v108 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v232, *(_QWORD *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 1.58366006e190);
  v110 = cf[0];
  v111 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
  v112 = v232;
  v232 = 0uLL;
  *(_OWORD *)v228 = v112;
  v227 = &off_1E6970C48;
  *(_QWORD *)&v228[16] = &v227;
  memset(v222, 0, 40);
  std::__function::__value_func<std::vector<unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)v222, (uint64_t)&v227);
  *(_QWORD *)&v222[32] = AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v110, v111, (AMCP *)v222);
  if (*(_QWORD *)&v222[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v222[32])(0, (uint64_t)v222, 0, 0);
  v113 = *(uint64_t (****)())&v228[16];
  if (*(uint64_t (****)())&v228[16] == &v227)
  {
    v114 = 4;
    v113 = &v227;
    goto LABEL_172;
  }
  if (*(_QWORD *)&v228[16])
  {
    v114 = 5;
LABEL_172:
    (*v113)[v114]();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>((uint64_t)cf[0]);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
  v115 = (std::__shared_weak_count *)cf[1];
  if (cf[1])
  {
    v116 = (unint64_t *)((char *)cf[1] + 8);
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
  if (*((_QWORD *)&v232 + 1))
  {
    v119 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v232, *(_QWORD *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(v220, *(_QWORD *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 1.58366006e190);
  v121 = cf[0];
  v122 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::DictionaryRef ()(void)>>();
  v123 = v232;
  v232 = 0uLL;
  *(_OWORD *)v228 = v123;
  v227 = &off_1E6970CC8;
  *(_QWORD *)&v228[16] = &v227;
  memset(v222, 0, 40);
  std::__function::__value_func<applesauce::CF::DictionaryRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v222, (uint64_t)&v227);
  *(_QWORD *)&v222[32] = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::DictionaryRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v121, v122, (AMCP *)v222);
  if (*(_QWORD *)&v222[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v222[32])(0, (uint64_t)v222, 0, 0);
  v124 = *(uint64_t (****)())&v228[16];
  if (*(uint64_t (****)())&v228[16] == &v227)
  {
    v125 = 4;
    v124 = &v227;
  }
  else
  {
    if (!*(_QWORD *)&v228[16])
      goto LABEL_190;
    v125 = 5;
  }
  (*v124)[v125]();
LABEL_190:
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>((uint64_t)cf[0]);
  v126 = cf[0];
  v127 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::DictionaryRef const&)>>();
  v128 = *(_OWORD *)v220;
  *(_OWORD *)v220 = 0uLL;
  *(_OWORD *)v228 = v128;
  v227 = &off_1E6970D48;
  *(_QWORD *)&v228[16] = &v227;
  memset(v222, 0, 40);
  std::__function::__value_func<void ()(applesauce::CF::DictionaryRef const&)>::__value_func[abi:ne180100]((uint64_t)v222, (uint64_t)&v227);
  *(_QWORD *)&v222[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::DictionaryRef const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v126, v127, (AMCP *)v222);
  if (*(_QWORD *)&v222[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v222[32])(0, (uint64_t)v222, 0, 0);
  v129 = *(uint64_t (****)())&v228[16];
  if (*(uint64_t (****)())&v228[16] == &v227)
  {
    v130 = 4;
    v129 = &v227;
    goto LABEL_196;
  }
  if (*(_QWORD *)&v228[16])
  {
    v130 = 5;
LABEL_196:
    (*v129)[v130]();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>((uint64_t)cf[0]);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
  v131 = (std::__shared_weak_count *)cf[1];
  if (cf[1])
  {
    v132 = (unint64_t *)((char *)cf[1] + 8);
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = (std::__shared_weak_count *)v220[1];
  if (v220[1])
  {
    v135 = (unint64_t *)(v220[1] + 8);
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
  if (*((_QWORD *)&v232 + 1))
  {
    v138 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v232, *(_QWORD *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(v220, *(_QWORD *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 1.58366006e190);
  v140 = cf[0];
  v141 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  v142 = v232;
  v232 = 0uLL;
  *(_OWORD *)v228 = v142;
  v227 = &off_1E6970E48;
  *(_QWORD *)&v228[16] = &v227;
  memset(v222, 0, 40);
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v222, (uint64_t)&v227);
  *(_QWORD *)&v222[32] = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v140, v141, (AMCP *)v222);
  if (*(_QWORD *)&v222[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v222[32])(0, (uint64_t)v222, 0, 0);
  v143 = *(uint64_t (****)())&v228[16];
  if (*(uint64_t (****)())&v228[16] == &v227)
  {
    v144 = 4;
    v143 = &v227;
  }
  else
  {
    if (!*(_QWORD *)&v228[16])
      goto LABEL_219;
    v144 = 5;
  }
  (*v143)[v144]();
LABEL_219:
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>((uint64_t)cf[0]);
  v145 = cf[0];
  v146 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::StringRef const&)>>();
  v147 = *(_OWORD *)v220;
  *(_OWORD *)v220 = 0uLL;
  *(_OWORD *)v228 = v147;
  v227 = &off_1E6970EC8;
  *(_QWORD *)&v228[16] = &v227;
  memset(v222, 0, 40);
  std::__function::__value_func<void ()(applesauce::CF::StringRef const&)>::__value_func[abi:ne180100]((uint64_t)v222, (uint64_t)&v227);
  *(_QWORD *)&v222[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::StringRef const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v145, v146, (AMCP *)v222);
  if (*(_QWORD *)&v222[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v222[32])(0, (uint64_t)v222, 0, 0);
  v148 = *(uint64_t (****)())&v228[16];
  if (*(uint64_t (****)())&v228[16] == &v227)
  {
    v149 = 4;
    v148 = &v227;
    goto LABEL_225;
  }
  if (*(_QWORD *)&v228[16])
  {
    v149 = 5;
LABEL_225:
    (*v148)[v149]();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>((uint64_t)cf[0]);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
  v150 = (std::__shared_weak_count *)cf[1];
  if (cf[1])
  {
    v151 = (unint64_t *)((char *)cf[1] + 8);
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = (std::__shared_weak_count *)v220[1];
  if (v220[1])
  {
    v154 = (unint64_t *)(v220[1] + 8);
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
  if (*((_QWORD *)&v232 + 1))
  {
    v157 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v232, *(_QWORD *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(v220, *(_QWORD *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 1.58366006e190);
  v159 = cf[0];
  v160 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  v161 = v232;
  v232 = 0uLL;
  *(_OWORD *)v228 = v161;
  v227 = &off_1E6970FC8;
  *(_QWORD *)&v228[16] = &v227;
  memset(v222, 0, 40);
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v222, (uint64_t)&v227);
  *(_QWORD *)&v222[32] = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v159, v160, (AMCP *)v222);
  if (*(_QWORD *)&v222[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v222[32])(0, (uint64_t)v222, 0, 0);
  v162 = *(uint64_t (****)())&v228[16];
  if (*(uint64_t (****)())&v228[16] == &v227)
  {
    v163 = 4;
    v162 = &v227;
  }
  else
  {
    if (!*(_QWORD *)&v228[16])
      goto LABEL_248;
    v163 = 5;
  }
  (*v162)[v163]();
LABEL_248:
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>((uint64_t)cf[0]);
  v164 = cf[0];
  v165 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::StringRef const&)>>();
  v166 = *(_OWORD *)v220;
  *(_OWORD *)v220 = 0uLL;
  *(_OWORD *)v228 = v166;
  v227 = &off_1E6971048;
  *(_QWORD *)&v228[16] = &v227;
  memset(v222, 0, 40);
  std::__function::__value_func<void ()(applesauce::CF::StringRef const&)>::__value_func[abi:ne180100]((uint64_t)v222, (uint64_t)&v227);
  *(_QWORD *)&v222[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::StringRef const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v164, v165, (AMCP *)v222);
  if (*(_QWORD *)&v222[32])
    (*(void (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v222[32])(0, (uint64_t)v222, 0, 0);
  v167 = *(uint64_t (****)())&v228[16];
  if (*(uint64_t (****)())&v228[16] == &v227)
  {
    v168 = 4;
    v167 = &v227;
    goto LABEL_254;
  }
  if (*(_QWORD *)&v228[16])
  {
    v168 = 5;
LABEL_254:
    (*v167)[v168]();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>((uint64_t)cf[0]);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
  v169 = (std::__shared_weak_count *)cf[1];
  if (cf[1])
  {
    v170 = (unint64_t *)((char *)cf[1] + 8);
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  v172 = (std::__shared_weak_count *)v220[1];
  if (v220[1])
  {
    v173 = (unint64_t *)(v220[1] + 8);
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  v175 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
  if (*((_QWORD *)&v232 + 1))
  {
    v176 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  v178 = *(const __CFBoolean **)(*(_QWORD *)(a1 + 80) + 56);
  if (v178)
    LOBYTE(v178) = applesauce::CF::convert_to<BOOL,0>(v178);
  LOBYTE(v227) = (_BYTE)v178;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)v222, 0, (char *)&v227, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(_QWORD *)v222 + 40), v222);
  v179 = *(std::__shared_weak_count **)&v222[8];
  if (*(_QWORD *)&v222[8])
  {
    v180 = (unint64_t *)(*(_QWORD *)&v222[8] + 8);
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
  AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(*(_QWORD *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32), a2, 1768845428);
  AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(*(_QWORD *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32), a2, 1869968496);
  AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(*(_QWORD *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32), a2, 1768845428);
  AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(*(_QWORD *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32), a2, 1869968496);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v232, *(_QWORD *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 7.28117486e199);
  v182 = cf[0];
  v183 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  v184 = v232;
  v232 = 0uLL;
  *(_OWORD *)v228 = v184;
  v227 = &off_1E6971248;
  *(_QWORD *)&v228[16] = &v227;
  memset(v222, 0, 40);
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v222, (uint64_t)&v227);
  *(_QWORD *)&v222[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v182, v183, (AMCP *)v222);
  if (*(_QWORD *)&v222[32])
    v185.n128_f64[0] = (*(double (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v222[32])(0, (uint64_t)v222, 0, 0);
  v186 = *(uint64_t (****)())&v228[16];
  if (*(uint64_t (****)())&v228[16] == &v227)
  {
    v187 = 4;
    v186 = &v227;
    goto LABEL_283;
  }
  if (*(_QWORD *)&v228[16])
  {
    v187 = 5;
LABEL_283:
    ((void (*)(__n128))(*v186)[v187])(v185);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>((uint64_t)cf[0]);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
  v188 = (std::__shared_weak_count *)cf[1];
  if (cf[1])
  {
    v189 = (unint64_t *)((char *)cf[1] + 8);
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  v191 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
  if (*((_QWORD *)&v232 + 1))
  {
    v192 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v232, *(_QWORD *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 8.13208672e228);
  v194 = cf[0];
  v195 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  v196 = v232;
  v232 = 0uLL;
  *(_OWORD *)v228 = v196;
  v227 = &off_1E69712C8;
  *(_QWORD *)&v228[16] = &v227;
  memset(v222, 0, 40);
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v222, (uint64_t)&v227);
  *(_QWORD *)&v222[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v194, v195, (AMCP *)v222);
  if (*(_QWORD *)&v222[32])
    v197.n128_f64[0] = (*(double (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v222[32])(0, (uint64_t)v222, 0, 0);
  v198 = *(uint64_t (****)())&v228[16];
  if (*(uint64_t (****)())&v228[16] == &v227)
  {
    v199 = 4;
    v198 = &v227;
    goto LABEL_300;
  }
  if (*(_QWORD *)&v228[16])
  {
    v199 = 5;
LABEL_300:
    ((void (*)(__n128))(*v198)[v199])(v197);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>((uint64_t)cf[0]);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
  v200 = (std::__shared_weak_count *)cf[1];
  if (cf[1])
  {
    v201 = (unint64_t *)((char *)cf[1] + 8);
    do
      v202 = __ldaxr(v201);
    while (__stlxr(v202 - 1, v201));
    if (!v202)
    {
      ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
      std::__shared_weak_count::__release_weak(v200);
    }
  }
  v203 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
  if (*((_QWORD *)&v232 + 1))
  {
    v204 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v203);
    }
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v232, *(_QWORD *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 8.13208706e228);
  v206 = cf[0];
  v207 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  v208 = v232;
  v232 = 0uLL;
  *(_OWORD *)v228 = v208;
  v227 = &off_1E6971348;
  *(_QWORD *)&v228[16] = &v227;
  memset(v222, 0, 40);
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v222, (uint64_t)&v227);
  *(_QWORD *)&v222[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v206, v207, (AMCP *)v222);
  if (*(_QWORD *)&v222[32])
    v209.n128_f64[0] = (*(double (**)(int, uint64_t, AMCP::Thing *, uint64_t *))&v222[32])(0, (uint64_t)v222, 0, 0);
  v210 = *(uint64_t (****)())&v228[16];
  if (*(uint64_t (****)())&v228[16] == &v227)
  {
    v211 = 4;
    v210 = &v227;
    goto LABEL_317;
  }
  if (*(_QWORD *)&v228[16])
  {
    v211 = 5;
LABEL_317:
    ((void (*)(__n128))(*v210)[v211])(v209);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>((uint64_t)v206);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)cf[0] + 10, cf);
  v212 = (std::__shared_weak_count *)cf[1];
  if (cf[1])
  {
    v213 = (unint64_t *)((char *)cf[1] + 8);
    do
      v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }
  v215 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
  if (*((_QWORD *)&v232 + 1))
  {
    v216 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
    do
      v217 = __ldaxr(v216);
    while (__stlxr(v217 - 1, v216));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
    }
  }
  if (v221)
    CFRelease(v221);
}

void sub_1B58A5EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

_QWORD *Aggregate_Device_Description::get_name(_QWORD *this, const void *a2)
{
  _QWORD *v3;

  v3 = this;
  if (a2)
    this = CFRetain(a2);
  *v3 = a2;
  return this;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(double const&)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[262];
}

uint64_t std::__function::__value_func<void ()(double const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(double const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(double const&)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(double const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(double const&)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<void ()(double const&)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(double const&)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E698C9A0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B58A6574(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<CA::ValueRangeList ()(void)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[270];
}

uint64_t std::__function::__value_func<CA::ValueRangeList ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<CA::ValueRangeList ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<CA::ValueRangeList ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<CA::ValueRangeList ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<CA::ValueRangeList ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<CA::ValueRangeList ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<CA::ValueRangeList ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E698CE18;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B58A6984(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>(uint64_t *a1, int a2, uint64_t *a3, double a4)
{
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  _OWORD v15[2];
  void (*v16)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, a2, a4);
  v6 = *a1;
  v7 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
  v13 = *(_OWORD *)((char *)a3 + 28);
  v14 = *(_OWORD *)((char *)a3 + 12);
  v18 = 0;
  v8 = (char *)operator new(0x38uLL);
  v9 = *a3;
  *(_QWORD *)v8 = &off_1E699BE38;
  *((_QWORD *)v8 + 1) = v9;
  *((_DWORD *)v8 + 4) = *((_DWORD *)a3 + 2);
  *(_OWORD *)(v8 + 20) = v14;
  *(_OWORD *)(v8 + 36) = v13;
  v18 = v8;
  memset(v15, 0, sizeof(v15));
  v16 = 0;
  std::__function::__value_func<std::vector<unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v17);
  v16 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v15);
  if (v16)
    v16(0, (uint64_t)v15, 0, 0);
  v10 = v18;
  if (v18 == v17)
  {
    v11 = 4;
    v10 = v17;
    goto LABEL_7;
  }
  if (v18)
  {
    v11 = 5;
LABEL_7:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(v6);
}

void sub_1B58A6AD4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t std::__function::__value_func<CA::ChannelLayout ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<CA::ChannelLayout ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<CA::ChannelLayout ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<CA::ChannelLayout ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<CA::ChannelLayout ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<CA::ChannelLayout ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<CA::ChannelLayout ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E698CB08;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B58A6E94(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<applesauce::CF::ArrayRef ()(void)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[239];
}

uint64_t std::__function::__value_func<applesauce::CF::ArrayRef ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::ArrayRef ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::ArrayRef ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<applesauce::CF::ArrayRef ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::ArrayRef ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::ArrayRef ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<applesauce::CF::ArrayRef ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::ArrayRef const&)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[241];
}

uint64_t std::__function::__value_func<void ()(applesauce::CF::ArrayRef const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::ArrayRef const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::ArrayRef const&)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(applesauce::CF::ArrayRef const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::ArrayRef const&)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::ArrayRef const&)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::ArrayRef const&)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<std::function<applesauce::CF::DictionaryRef ()(void)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[274];
}

uint64_t std::__function::__value_func<applesauce::CF::DictionaryRef ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::DictionaryRef ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::DictionaryRef ()(void)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<applesauce::CF::DictionaryRef ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::DictionaryRef ()(void)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::DictionaryRef ()(void)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<applesauce::CF::DictionaryRef ()(void)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E698D080;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B58A772C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::DictionaryRef const&)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[276];
}

uint64_t std::__function::__value_func<void ()(applesauce::CF::DictionaryRef const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::DictionaryRef const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::DictionaryRef const&)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(applesauce::CF::DictionaryRef const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::DictionaryRef const&)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::DictionaryRef const&)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::DictionaryRef const&)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E698D280;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B58A7B3C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::StringRef const&)>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const std::type_info *v4;

  v1 = &unk_1EF130000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EF130000;
    if (v3)
    {
      v1 = (_QWORD *)&unk_1EF130000;
    }
  }
  return v1[255];
}

uint64_t std::__function::__value_func<void ()(applesauce::CF::StringRef const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::StringRef const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::StringRef const&)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(applesauce::CF::StringRef const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::StringRef const&)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::StringRef const&)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::StringRef const&)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20[2];
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  void (*v26)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v13, a1);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(a1 + 48);
  v2 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  v3 = v13;
  v4 = v14;
  v13 = 0;
  v14 = 0;
  v20[0] = v3;
  v20[1] = v4;
  v21[0] = v15;
  v21[1] = v16;
  v22 = v17;
  if (v16)
  {
    v5 = *(_QWORD *)(v15 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4)
        v5 %= v4;
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(_QWORD *)(v3 + 8 * v5) = v21;
    v15 = 0;
    v16 = 0;
  }
  v23 = v18;
  v24 = v19;
  v28 = 0;
  v6 = operator new(0x40uLL);
  *v6 = &off_1E6986BB8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v20);
  v6[6] = v23;
  *((_DWORD *)v6 + 14) = v24;
  v28 = v6;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v27);
  v26 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v25);
  if (v26)
    v26(0, (uint64_t)v25, 0, 0);
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_13;
  }
  if (v28)
  {
    v11 = 5;
LABEL_13:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v7, v8, v9);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v13);
}

void sub_1B58A7F4C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(uint64_t a1, std::__shared_weak_count *this, uint64_t a3, int a4)
{
  double v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  _OWORD v24[2];
  void (*v25)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v20, a1, this);
  v21 = a4;
  LODWORD(v6) = vdup_n_s32(0x6C746E63u).u32[0];
  HIDWORD(v6) = a4;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v22, 0, v6);
  v7 = v22;
  v8 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  v19 = v20;
  v20 = 0uLL;
  v9 = v21;
  v27 = 0;
  v10 = (char *)operator new(0x20uLL);
  *(_QWORD *)v10 = &off_1E6971148;
  *(_OWORD *)(v10 + 8) = v19;
  *((_DWORD *)v10 + 6) = v9;
  v27 = v10;
  memset(v24, 0, sizeof(v24));
  v25 = 0;
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)v24, (uint64_t)v26);
  v25 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v7, v8, (AMCP *)v24);
  if (v25)
    v25(0, (uint64_t)v24, 0, 0);
  v11 = v27;
  if (v27 == v26)
  {
    v12 = 4;
    v11 = v26;
    goto LABEL_7;
  }
  if (v27)
  {
    v12 = 5;
LABEL_7:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v7);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v22 + 40), &v22);
  v13 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1B58A8140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(uint64_t a1, std::__shared_weak_count *this, uint64_t a3, int a4)
{
  double v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  _OWORD v24[2];
  void (*v25)(int, uint64_t, AMCP::Thing *, uint64_t *);
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v20, a1, this);
  v21 = a4;
  LODWORD(v6) = vdup_n_s32(0x73616674u).u32[0];
  HIDWORD(v6) = a4;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v22, 0, v6);
  v7 = v22;
  v8 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  v19 = v20;
  v20 = 0uLL;
  v9 = v21;
  v27 = 0;
  v10 = (char *)operator new(0x20uLL);
  *(_QWORD *)v10 = &off_1E69711C8;
  *(_OWORD *)(v10 + 8) = v19;
  *((_DWORD *)v10 + 6) = v9;
  v27 = v10;
  memset(v24, 0, sizeof(v24));
  v25 = 0;
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)v24, (uint64_t)v26);
  v25 = (void (*)(int, uint64_t, AMCP::Thing *, uint64_t *))AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v7, v8, (AMCP *)v24);
  if (v25)
    v25(0, (uint64_t)v24, 0, 0);
  v11 = v27;
  if (v27 == v26)
  {
    v12 = 4;
    v11 = v26;
    goto LABEL_7;
  }
  if (v27)
  {
    v12 = 5;
LABEL_7:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v7);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v22 + 40), &v22);
  v13 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1B58A8364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16>,BOOL ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6971348;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16>,BOOL ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6971348;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6971348;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16>,BOOL ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6971348;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16>,BOOL ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16>,BOOL ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 112) != *(_QWORD *)(*(_QWORD *)(a1 + 8) + 120);
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE4$_16"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16>,BOOL ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69712C8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69712C8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E69712C8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E69712C8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 112) != *(_QWORD *)(*(_QWORD *)(a1 + 8) + 120);
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE4$_15"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14>,BOOL ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6971248;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14>,BOOL ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6971248;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6971248;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14>,BOOL ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6971248;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14>,BOOL ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14>,BOOL ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 136) != *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE4$_14"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14>,BOOL ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69711C8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69711C8;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E69711C8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_1E69711C8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

uint64_t std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  unsigned int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned int v10[3];
  CFTypeRef cf;
  AMCP::Address *v12;
  std::__shared_weak_count *v13;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(const void **)(v2 + 104);
  if (v3)
    CFRetain(*(CFTypeRef *)(v2 + 104));
  cf = v3;
  AMCP::Meta::Device::get_device_core(&v12, *(std::__shared_mutex_base **)(*(_QWORD *)(v2 + 8) + 16), (uint64_t)&cf);
  if (cf)
    CFRelease(cf);
  if (v12)
  {
    v4 = *(_DWORD *)(a1 + 24);
    v10[0] = 1935763060;
    v10[1] = v4;
    v10[2] = 0;
    v5 = AMCP::Core::Core::call_operation_function<unsigned int>(v12, v10);
  }
  else
  {
    v5 = 0;
  }
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1B58A8A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, uint64_t a13, std::__shared_weak_count *a14)
{
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device35make_clock_device_delegate_propertyILj1935763060EEEvRNS_4Core13Operation_SetEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::target_type()
{
}

uint64_t AMCP::Core::Core::call_operation_function<unsigned int>(AMCP::Address *a1, unsigned int *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v9;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *exception;
  NSObject *v16;
  _opaque_pthread_t *v17;
  mach_port_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t (**v21)();
  __int128 v22;
  uint64_t v23;
  std::string v24;
  std::runtime_error v25;
  std::runtime_error v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  uint8_t buf[8];
  _BYTE v36[10];
  __int16 v37;
  int v38;
  __int16 v39;
  _BYTE v40[14];
  const char *v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (*a2 == 707406378 || a2[1] == 707406378 || a2[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v16 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = pthread_self();
      v18 = pthread_mach_thread_np(v17);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v18;
      *(_WORD *)v36 = 2080;
      *(_QWORD *)&v36[2] = "Core.h";
      v37 = 1024;
      v38 = 198;
      v39 = 2080;
      *(_QWORD *)v40 = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1B57BA000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v33, (int8x8_t *)a1, a2);
  if (!v33)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = *(std::__shared_weak_count **)v36;
    v10 = **(NSObject ***)buf;
    if (*(_QWORD *)v36)
    {
      v11 = (unint64_t *)(*(_QWORD *)v36 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v14;
      *(_WORD *)v36 = 2080;
      *(_QWORD *)&v36[2] = "Core.h";
      v37 = 1024;
      v38 = 202;
      _os_log_error_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v24);
    std::runtime_error::runtime_error(&v25, &v24);
    std::runtime_error::runtime_error(&v26, &v25);
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = -1;
    v26.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v27 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v26);
    *(_QWORD *)&v40[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = unsigned int, Argument_Types = <>]";
    v41 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    v42 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
    v22 = v19;
    v23 = v20;
    v19 = 0uLL;
    v20 = 0;
    v21 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v21);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v4 = AMCP::Core::Operation::call_function<unsigned int>(v33);
  v5 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

