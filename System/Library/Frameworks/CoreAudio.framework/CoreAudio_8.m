void sub_1B5B6838C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,uint64_t a41)
{
  _DWORD *v43;

  if (a2)
  {
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a30);
    HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&a15);
    v43 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a10 + 48) + 8) + 24) = v43[2];
    else
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a10 + 48) + 8) + 24) = 2003329396;
    __cxa_end_catch();
    JUMPOUT(0x1B5B68278);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B5B68728()
{
  JUMPOUT(0x1B5B6862CLL);
}

OS::CF::UntypedObject *__copy_helper_block_e8_64c24_ZTSN2OS2CF10DictionaryE(uint64_t a1, uint64_t a2)
{
  OS::CF::UntypedObject *result;

  result = OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)(a1 + 64), *(CFTypeRef *)(a2 + 72));
  *(_QWORD *)(a1 + 64) = &off_1E69A0DE0;
  return result;
}

void __destroy_helper_block_e8_64c24_ZTSN2OS2CF10DictionaryE(uint64_t a1)
{
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 64));
}

void HALS_IOContext_Legacy_Impl::AssessIOBufferSize(HALS_IOContext_Legacy_Impl *this, CAPropertyAddressList *a2)
{
  uint64_t v4;
  unsigned int v5;
  const AudioObjectPropertyAddress *v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  const AudioObjectPropertyAddress *v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  unsigned int DevicesDesiredIOBufferFrameSize;
  const AudioObjectPropertyAddress *v18;
  unsigned int v19;
  AudioObjectPropertyAddress v20;
  _QWORD v21[3];
  _QWORD *v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 3);
  v5 = *(_DWORD *)(v4 + 72);
  if (!v5)
    v5 = *(_DWORD *)(v4 + 16);
  *((_QWORD *)a2 + 3) = v5;
  v23[0] = &off_1E6991230;
  v23[1] = HALS_IOContext_Legacy_Impl::AssessIOBufferSize_InputHelper;
  v24 = v23;
  v7 = HALS_IOContextDescription::ApplyToInput((uint64_t)this + 1496, (uint64_t)v23);
  v8 = v24;
  if (v24 == v23)
  {
    v9 = 4;
    v8 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_8;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_8:
  if (v7)
  {
LABEL_15:
    if (!*((_BYTE *)this + 1324) || *((_DWORD *)this + 330) != v7)
    {
      *((_BYTE *)this + 1324) = 1;
      *((_DWORD *)this + 330) = v7;
      *(_QWORD *)&v20.mSelector = 0x676C6F6266737A23;
      v20.mElement = 0;
      CAPropertyAddressList::AppendUniqueItem(a2, &v20, v6);
      *(_QWORD *)&v20.mSelector = 0x676C6F626673697ALL;
      v20.mElement = 0;
      CAPropertyAddressList::AppendUniqueItem(a2, &v20, v12);
    }
    goto LABEL_18;
  }
  v21[0] = &off_1E69912D0;
  v21[1] = HALS_IOContext_Legacy_Impl::AssessIOBufferSize_OutputHelper;
  v22 = v21;
  v7 = HALS_IOContextDescription::ApplyToOutput<>((uint64_t)this + 1496, (uint64_t)v21);
  v10 = v22;
  if (v22 == v21)
  {
    v11 = 4;
    v10 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_14;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_14:
  if (v7)
    goto LABEL_15;
  if (*((_BYTE *)this + 1324))
  {
    *((_BYTE *)this + 1324) = 0;
    *(_QWORD *)&v20.mSelector = 0x676C6F6266737A23;
    v20.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem(a2, &v20, v6);
  }
LABEL_18:
  if (!*((_BYTE *)this + 1324))
  {
    v13 = *((_QWORD *)this + 190);
    v14 = 13.23;
    if (v13 && *(_QWORD *)(v13 + 8))
      v14 = *(double *)(v13 + 768) * 0.0003;
    HALS_IOContextDescription::CalculateMaximumIOBufferFrameSize((HALS_IOContext_Legacy_Impl *)((char *)this + 1496));
    v16 = v15;
    DevicesDesiredIOBufferFrameSize = HALS_IOContext_Legacy_Impl::_GetDevicesDesiredIOBufferFrameSize(this, (HALS_IOEngineInfo *)*((unsigned int *)this + 330));
    v19 = vcvtpd_u64_f64(v14);
    if (DevicesDesiredIOBufferFrameSize > v19)
      v19 = DevicesDesiredIOBufferFrameSize;
    if (v19 >= v16)
      v19 = v16;
    if (*((_DWORD *)this + 330) != v19)
    {
      *((_DWORD *)this + 330) = v19;
      *(_QWORD *)&v20.mSelector = 0x676C6F626673697ALL;
      v20.mElement = 0;
      CAPropertyAddressList::AppendUniqueItem(a2, &v20, v18);
    }
  }
}

void sub_1B5B689C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContext_Legacy_Impl::AssessIOBufferSize_InputHelper(HALS_IOContext_Legacy_Impl *this, uint64_t a2, HALS_IOStreamInfo *a3)
{
  uint64_t v4;
  BOOL v5;
  uint64_t result;
  unsigned int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  if (!*(_DWORD *)(a2 + 108)
    || ((v4 = *(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 120) != v4) ? (v5 = v4 == 0) : (v5 = 1), v5))
  {
    v4 = a2 + 408;
  }
  result = *(_QWORD *)(*(_QWORD *)v4 + 8);
  if (result)
  {
    v7 = *(_DWORD *)(a2 + 12);
    if (v7 >= (*(unsigned int (**)(uint64_t, _QWORD, HALS_IOStreamInfo *))(*(_QWORD *)result + 400))(result, *(unsigned __int8 *)(a2 + 8), a3))return 0;
    if (*(_DWORD *)(a2 + 108))
    {
      HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v10, (uint64_t *)(a2 + 112));
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 384);
      v10 = *(_OWORD *)(a2 + 368);
      v11 = v8;
      v12 = *(_QWORD *)(a2 + 400);
    }
    if (DWORD2(v10) == 1819304813)
    {
      return 0;
    }
    else
    {
      if (*(_DWORD *)(a2 + 108))
      {
        HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v10, (uint64_t *)(a2 + 112));
      }
      else
      {
        v9 = *(_OWORD *)(a2 + 384);
        v10 = *(_OWORD *)(a2 + 368);
        v11 = v9;
        v12 = *(_QWORD *)(a2 + 400);
      }
      return DWORD1(v11);
    }
  }
  return result;
}

void sub_1B5B68AF4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5B68AB0);
}

uint64_t HALS_IOContext_Legacy_Impl::AssessIOBufferSize_OutputHelper(HALS_IOContext_Legacy_Impl *this, unsigned int a2, HALS_IOStackDescription *a3, unsigned int a4, uint64_t a5, HALS_IOStreamInfo *a6)
{
  uint64_t v7;
  BOOL v8;
  uint64_t result;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  if (!*(_DWORD *)(a5 + 108)
    || ((v7 = *(_QWORD *)(a5 + 112), *(_QWORD *)(a5 + 120) != v7) ? (v8 = v7 == 0) : (v8 = 1), v8))
  {
    v7 = a5 + 408;
  }
  result = *(_QWORD *)(*(_QWORD *)v7 + 8);
  if (result)
  {
    v10 = *(_DWORD *)(a5 + 12);
    if (v10 >= (*(unsigned int (**)(uint64_t, _QWORD, HALS_IOStackDescription *))(*(_QWORD *)result + 400))(result, *(unsigned __int8 *)(a5 + 8), a3))return 0;
    if (*(_DWORD *)(a5 + 108))
    {
      HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v13, (uint64_t *)(a5 + 112));
    }
    else
    {
      v11 = *(_OWORD *)(a5 + 384);
      v13 = *(_OWORD *)(a5 + 368);
      v14 = v11;
      v15 = *(_QWORD *)(a5 + 400);
    }
    if (DWORD2(v13) == 1819304813)
    {
      return 0;
    }
    else
    {
      if (*(_DWORD *)(a5 + 108))
      {
        HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v13, (uint64_t *)(a5 + 112));
      }
      else
      {
        v12 = *(_OWORD *)(a5 + 384);
        v13 = *(_OWORD *)(a5 + 368);
        v14 = v12;
        v15 = *(_QWORD *)(a5 + 400);
      }
      return DWORD1(v14);
    }
  }
  return result;
}

void sub_1B5B68BD8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5B68B94);
}

void std::__function::__func<int (*)(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &),std::allocator<int (*)(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<int (*)(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &),std::allocator<int (*)(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69912D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<int (*)(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &),std::allocator<int (*)(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69912D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<int (*)(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &),std::allocator<int (*)(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::operator()(uint64_t a1, unsigned int *a2, uint64_t a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, uint64_t))(a1 + 8))(*a2, a3, *a4, *a5, a6);
}

uint64_t std::__function::__func<int (*)(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &),std::allocator<int (*)(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"PFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<int (*)(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &),std::allocator<int (*)(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::target_type()
{
}

void std::__function::__func<int (*)(unsigned int,HALS_IOStreamInfo &),std::allocator<int (*)(unsigned int,HALS_IOStreamInfo &)>,int ()(unsigned int,HALS_IOStreamInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<int (*)(unsigned int,HALS_IOStreamInfo &),std::allocator<int (*)(unsigned int,HALS_IOStreamInfo &)>,int ()(unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6991230;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<int (*)(unsigned int,HALS_IOStreamInfo &),std::allocator<int (*)(unsigned int,HALS_IOStreamInfo &)>,int ()(unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6991230;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<int (*)(unsigned int,HALS_IOStreamInfo &),std::allocator<int (*)(unsigned int,HALS_IOStreamInfo &)>,int ()(unsigned int,HALS_IOStreamInfo &)>::operator()(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 8))(*a2, a3);
}

uint64_t std::__function::__func<int (*)(unsigned int,HALS_IOStreamInfo &),std::allocator<int (*)(unsigned int,HALS_IOStreamInfo &)>,int ()(unsigned int,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"PFijR17HALS_IOStreamInfoE"))
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<int (*)(unsigned int,HALS_IOStreamInfo &),std::allocator<int (*)(unsigned int,HALS_IOStreamInfo &)>,int ()(unsigned int,HALS_IOStreamInfo &)>::target_type()
{
}

uint64_t ___ZN26HALS_IOContext_Legacy_Impl18EnableCaptureFilesE17AudioCapturerMode_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 584))(v3, *(unsigned int *)(a1 + 32));
  return 0;
}

void std::__function::__func<int({block_pointer})(HALS_IOEngineInfo &),std::allocator<int({block_pointer})(HALS_IOEngineInfo &)>,int ()(HALS_IOEngineInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__function::__func<int({block_pointer})(HALS_IOEngineInfo &),std::allocator<int({block_pointer})(HALS_IOEngineInfo &)>,int ()(HALS_IOEngineInfo &)>::__clone()
{
  return 0;
}

void *std::__function::__func<int({block_pointer})(HALS_IOEngineInfo &),std::allocator<int({block_pointer})(HALS_IOEngineInfo &)>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *result;

  *a2 = &off_1E69968C8;
  result = *(void **)(a1 + 8);
  if (result)
    result = _Block_copy(result);
  a2[1] = result;
  return result;
}

void std::__function::__func<int({block_pointer})(HALS_IOEngineInfo &),std::allocator<int({block_pointer})(HALS_IOEngineInfo &)>,int ()(HALS_IOEngineInfo &)>::destroy(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  *(_QWORD *)(a1 + 8) = 0;
}

uint64_t std::__function::__func<int({block_pointer})(HALS_IOEngineInfo &),std::allocator<int({block_pointer})(HALS_IOEngineInfo &)>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<int({block_pointer})(HALS_IOEngineInfo &),std::allocator<int({block_pointer})(HALS_IOEngineInfo &)>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"U13block_pointerFiR17HALS_IOEngineInfoE"))
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<int({block_pointer})(HALS_IOEngineInfo &),std::allocator<int({block_pointer})(HALS_IOEngineInfo &)>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

uint64_t (***HALS_IOContext_Legacy_Impl::ReleasePowerAssertions(HALS_IOContext_Legacy_Impl *this))()
{
  char v1;
  uint64_t (***result)();
  uint64_t v3;
  uint64_t (**v4)();
  char v5;
  uint64_t (***v6)();
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = *((_BYTE *)this + 1712);
  v4 = &off_1E698FD18;
  v5 = v1;
  v6 = &v4;
  HALS_IOContext_Legacy_Impl::DoPowerAssertionTask(this, &v4);
  result = v6;
  if (v6 == &v4)
  {
    v3 = 4;
    result = &v4;
  }
  else
  {
    if (!v6)
      return result;
    v3 = 5;
  }
  return (uint64_t (***)())(*result)[v3]();
}

void sub_1B5B68F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *HALS_IOContext_Legacy_Impl::TakePowerAssertions(HALS_IOContext_Legacy_Impl *this)
{
  unint64_t v1;
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = *((unsigned int *)this + 378) | ((unint64_t)*((unsigned __int8 *)this + 1712) << 32);
  v4[0] = &off_1E698FC98;
  v4[1] = v1;
  v5 = v4;
  HALS_IOContext_Legacy_Impl::DoPowerAssertionTask(this, v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1B5B68FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::TakePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::TakePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOContext_Legacy_Impl::TakePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::TakePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E698FC98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::TakePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::TakePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E698FC98;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::TakePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::TakePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::chrono::system_clock::time_point **v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  HALS_ObjectMap *v8;
  char *v9;
  std::chrono::system_clock::time_point *v10;
  void **v11;
  CFStringRef v12;
  IOPMAssertionID *v13;
  void **v14;
  CFStringRef v15;
  int v16;
  HALS_Object *v17;
  unint64_t *v18;
  unint64_t v19;
  void *__p[2];
  char v21;
  _QWORD v22[2];
  _QWORD v23[2];

  v4 = *(std::chrono::system_clock::time_point ***)a2;
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 8));
  v8 = (HALS_ObjectMap *)v7;
  if (v7)
  {
    v9 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 216))(v7);
    std::string::basic_string[abi:ne180100]<0>(__p, v9);
    v10 = *v4;
    if (v21 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    v12 = CFStringCreateWithFormat(0, 0, CFSTR("com.apple.audio.%s.context.preventuseridlesleep"), v11);
    v23[0] = &off_1E69A0F60;
    v23[1] = v12;
    HALB_PowerAssertion::Rename((IOPMAssertionID *)v10, (uint64_t)v23);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v23);
    v13 = (IOPMAssertionID *)v4[1];
    v14 = __p;
    if (v21 < 0)
      v14 = (void **)__p[0];
    v15 = CFStringCreateWithFormat(0, 0, CFSTR("com.apple.audio.%s.context.preventuseridledisplaysleep"), v14);
    v22[0] = &off_1E69A0F60;
    v22[1] = v15;
    HALB_PowerAssertion::Rename(v13, (uint64_t)v22);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v22);
    if (v21 < 0)
      operator delete(__p[0]);
  }
  v16 = *(unsigned __int8 *)(a1 + 12);
  HALB_PowerAssertion::Take(*v4);
  if (v16)
    HALB_PowerAssertion::Take(v4[1]);
  HALS_ObjectMap::ReleaseObject(v8, v17);
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1B5B69210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  std::__shared_weak_count *v18;
  HALS_ObjectMap *v19;
  HALS_Object *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;

  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a16);
  if (a15 < 0)
    operator delete(__p);
  HALS_ObjectMap::ReleaseObject(v19, v21);
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::TakePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::TakePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl19TakePowerAssertionsEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::TakePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::TakePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::target_type()
{
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::ReleasePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::ReleasePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_BYTE *std::__function::__func<HALS_IOContext_Legacy_Impl::ReleasePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::ReleasePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E698FD18;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::ReleasePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::ReleasePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E698FD18;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::ReleasePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::ReleasePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  const std::chrono::system_clock::time_point **v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(const std::chrono::system_clock::time_point ***)a2;
  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = *(unsigned __int8 *)(a1 + 8);
  HALB_PowerAssertion::Release(*v3);
  if (v6)
    HALB_PowerAssertion::Release(v3[1]);
  if (v2)
  {
    v7 = (unint64_t *)&v2->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1B5B693E8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::ReleasePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::ReleasePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl22ReleasePowerAssertionsEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::ReleasePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::ReleasePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::target_type()
{
}

void HALS_IOContext_Legacy_Impl::StopIOThread(HALS_IOContext_Legacy_Impl *this)
{
  HALS_ObjectMap *v2;
  uint64_t v3;
  _opaque_pthread_t *v4;
  HALS_PlatformBehaviors *TapInfo;
  uint64_t *platform_behaviors;
  HALS_PlatformBehaviors *v7;
  uint64_t *v8;
  HALS_Object *v9;
  char *v10;
  int v11;
  HALS_ObjectMap *v12;
  HALB_Mutex *v13;
  int v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**(unsigned int **)(*((_QWORD *)this + 3)
                                                                                                  + 64));
  v12 = v2;
  v10 = (char *)this + 312;
  v11 = HALB_Mutex::Lock((HALS_IOContext_Legacy_Impl *)((char *)this + 328));
  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 80);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 120))(v3);
  v13 = (HALS_IOContext_Legacy_Impl *)((char *)this + 328);
  v14 = HALB_Mutex::Lock((HALS_IOContext_Legacy_Impl *)((char *)this + 328));
  v4 = (_opaque_pthread_t *)*((_QWORD *)this + 50);
  if (v4 != pthread_self() && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v16 = "HALB_IOThread.cpp";
    v17 = 1024;
    v18 = 313;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOThread::_Stop: this thread ought to lock the lock", buf, 0x12u);
  }
  HALB_Guard::NotifyAll((pthread_cond_t *)((char *)this + 328));
  *((_BYTE *)this + 484) = 1;
  if (!HALB_IOThread::IsCurrentThread((HALS_IOContext_Legacy_Impl *)((char *)this + 312), 1))
    HALB_IOThread::_WaitForState((HALS_IOContext_Legacy_Impl *)((char *)this + 312), 1735552612);
  HALB_Guard::Locker::~Locker(&v13);
  HALS_IOContext_Legacy_Impl::CreateMicrophoneInfo((uint64_t)this, (uint64_t *)&v12);
  TapInfo = (HALS_PlatformBehaviors *)HALS_IOContext_Legacy_Impl::CreateTapInfo((uint64_t)this);
  platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(TapInfo);
  v7 = (HALS_PlatformBehaviors *)(*(uint64_t (**)(uint64_t *))(*platform_behaviors + 64))(platform_behaviors);
  v8 = HALS_PlatformBehaviors::get_platform_behaviors(v7);
  (*(void (**)(uint64_t *))(*v8 + 64))(v8);
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v10);
  HALS_ObjectMap::ReleaseObject(v2, v9);
}

void sub_1B5B69618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void HALS_IOContext_Legacy_Impl::ChangeFromPlayingToPrewarming(uint64_t a1, int a2, int a3)
{
  _opaque_pthread_t **v6;
  int v7;
  AMCP::Log::Scope_Registry *v8;
  int v9;
  caulk::concurrent::messenger *v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  int *v13;
  char *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  AMCP::Log::Scope_Registry *v22;
  caulk::concurrent::messenger *v23;
  _opaque_pthread_t *v24;
  mach_port_t v25;
  int *v26;
  char *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _DWORD *v32;
  int v33;
  _DWORD *v34;
  _DWORD *exception;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  _BYTE buf[18];
  __int16 v42;
  int v43;
  __int16 v44;
  char *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v6 = (_opaque_pthread_t **)(a1 + 312);
  v7 = HALB_IOThread::WaitForState((HALB_IOThread *)(a1 + 312), 1735354734);
  if (HALB_IOThread::IsCurrentThread((HALB_IOThread *)v6, 1))
  {
    v8 = HALS_IOThread::ClearAllSyscallMasks(v6);
    if ((_DWORD)v8)
    {
      v9 = (int)v8;
      AMCP::Log::Scope_Registry::get(v8);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v10 = *(caulk::concurrent::messenger **)(*(_QWORD *)buf + 8);
      v11 = pthread_self();
      v12 = pthread_mach_thread_np(v11);
      v13 = __error();
      v14 = strerror(*v13);
      v15 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
      *(_DWORD *)(v15 + 16) = 0;
      *(_BYTE *)(v15 + 20) = 16;
      *(_DWORD *)(v15 + 24) = v12;
      *(_QWORD *)(v15 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
      *(_DWORD *)(v15 + 40) = 580;
      *(_DWORD *)(v15 + 44) = v9;
      *(_QWORD *)(v15 + 48) = v14;
      *(_QWORD *)v15 = &off_1E698F990;
      *(_QWORD *)(v15 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v10, (caulk::concurrent::message *)v15);
      v16 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v17 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
  }
  v19 = HALS_IOContext_Legacy_Impl::ChangeEngineState_Off(a1, a2, a3);
  v20 = v19;
  if (v7 && v7 != 89)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 591;
      v42 = 1024;
      v43 = v7;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::ChangeFromPlayingToPrewarming: got a kernel error while waiting for the thread to be running, Error: 0x%X", buf, 0x18u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v7;
  }
  v21 = *(_DWORD *)(a1 + 1056);
  if (v21)
  {
    v36 = HIBYTE(*(_DWORD *)(a1 + 1056));
    v37 = BYTE2(v21);
    v38 = BYTE1(v21);
    v39 = v21;
    v40 = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 593;
      v42 = 1024;
      v43 = v21;
      v44 = 2080;
      v45 = &v36;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::ChangeFromPlayingToPrewarming returned a thread error waiting for IO thread to run, Error: %d (%s)", buf, 0x22u);
    }
    v32 = __cxa_allocate_exception(0x10uLL);
    v33 = *(_DWORD *)(a1 + 1056);
    *(_QWORD *)v32 = &off_1E69A1B30;
    v32[2] = v33;
  }
  if (v19)
  {
    v36 = HIBYTE(v19);
    v37 = BYTE2(v19);
    v38 = BYTE1(v19);
    v39 = v19;
    v40 = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 595;
      v42 = 1024;
      v43 = v20;
      v44 = 2080;
      v45 = &v36;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::ChangeFromPlayingToPrewarming: got an error from ChangeEngineState_Off, possibly indicating a driver failure, Error: %d (%s)", buf, 0x22u);
    }
    v34 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v34 = &off_1E69A1B30;
    v34[2] = v20;
  }
  if (!HALS_IOContext::GetAudioCaptureMode(*(HALS_IOContext **)(a1 + 24))
    && HALB_IOThread::IsCurrentThread((HALB_IOThread *)v6, 1))
  {
    v22 = HALS_IOThread::EnableRTSafeSyscallMasks(v6);
    if ((_DWORD)v22)
    {
      AMCP::Log::Scope_Registry::get(v22);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v23 = *(caulk::concurrent::messenger **)(*(_QWORD *)buf + 8);
      v24 = pthread_self();
      v25 = pthread_mach_thread_np(v24);
      v26 = __error();
      v27 = strerror(*v26);
      v28 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
      *(_DWORD *)(v28 + 16) = 0;
      *(_BYTE *)(v28 + 20) = 16;
      *(_DWORD *)(v28 + 24) = v25;
      *(_QWORD *)(v28 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
      *(_DWORD *)(v28 + 40) = 607;
      *(_DWORD *)(v28 + 44) = v7;
      *(_QWORD *)(v28 + 48) = v27;
      *(_QWORD *)v28 = &off_1E698F9E8;
      *(_QWORD *)(v28 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v23, (caulk::concurrent::message *)v28);
      v29 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v30 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }
  }
}

void sub_1B5B69B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOContext_Legacy_Impl::ChangeEngineState_Off(uint64_t a1, int a2, int a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE v10[12];
  __int16 v11;
  int v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 1060) = a2;
  v5 = operator new(0x20uLL);
  *v5 = &off_1E698FB70;
  v5[1] = HALS_IOContext_Legacy_Impl::StopHardware_Helper;
  v5[2] = a1;
  *((_DWORD *)v5 + 6) = a3;
  v14 = v5;
  *(_QWORD *)v10 = &off_1E69928C8;
  v6 = HALS_IOContext_Legacy_Impl::engine_apply<FilterIfEngineOnlyNeedsReferenceStream>(a1, (uint64_t)v13, (uint64_t)v10);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  if ((_DWORD)v6 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v10 = 136315394;
    *(_QWORD *)&v10[4] = "HALS_IOContext_Legacy_Impl.cpp";
    v11 = 1024;
    v12 = 1046;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::ChangeEngineState_Off: Unexpected error when changing engine prewarming state", v10, 0x12u);
  }
  return v6;
}

void sub_1B5B69CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::ChangeFromPlayingToPrewarming(HALS_IOPrewarmManager::PlayRequest,HALS_IOPrewarmManager::EngineState)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::ChangeFromPlayingToPrewarming(HALS_IOPrewarmManager::PlayRequest,HALS_IOPrewarmManager::EngineState)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 2080;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Failed to set the RT safe syscall masks: %d - %s", buf, 0x28u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::ChangeFromPlayingToPrewarming(HALS_IOPrewarmManager::PlayRequest,HALS_IOPrewarmManager::EngineState)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::ChangeFromPlayingToPrewarming(HALS_IOPrewarmManager::PlayRequest,HALS_IOPrewarmManager::EngineState)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

uint64_t HALS_IOContext_Legacy_Impl::StopHardware_Helper(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 696))(v3, *(_QWORD *)(a1 + 24));
  return 0;
}

void sub_1B5B69F18(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315394;
      *(_QWORD *)((char *)&a9 + 4) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 3412;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::StopHardware_Helper: Caught exception trying to stop hardware", (uint8_t *)&a9, 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B5B69EECLL);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_IOContext_Legacy_Impl::engine_apply<FilterIfEngineOnlyNeedsReferenceStream>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void (**v17)(FilterEngineInfoWithoutEngine *__hidden);
  _QWORD v18[2];
  _QWORD *v19[2];
  _BYTE v20[24];
  _BYTE *v21;
  _QWORD v22[3];
  _QWORD *v23;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v20, a2);
  v17 = &off_1E6992878;
  v22[0] = &off_1E698FA40;
  v22[1] = v20;
  v23 = v22;
  v25 = v24;
  std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::__clone((uint64_t)v22, v24);
  v5 = *(_QWORD **)(a1 + 1528);
  v6 = *(_QWORD **)(a1 + 1536);
  if (v5 == v6)
  {
LABEL_11:
    v9 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 1;
    while (1)
    {
      if ((v8 & 1) != 0)
        v7 = 0;
      else
        v7 = (_QWORD *)((char *)v7 + 1);
      v19[0] = v5;
      v19[1] = v7;
      if ((((uint64_t (*)(uint64_t, _QWORD **))v17[2])((uint64_t)&v17, v19) & 1) == 0
        && ((*(uint64_t (**)(uint64_t, _QWORD **))(*(_QWORD *)a3 + 16))(a3, v19) & 1) == 0)
      {
        v18[0] = v5;
        v18[1] = v7;
        if (!v25)
          std::__throw_bad_function_call[abi:ne180100]();
        v9 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v25 + 48))(v25, v18);
        if ((_DWORD)v9)
          break;
      }
      v8 = 0;
      if (++v5 == v6)
        goto LABEL_11;
    }
  }
  v10 = v25;
  if (v25 == v24)
  {
    v11 = 4;
    v10 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_17;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_17:
  v12 = v23;
  if (v23 == v22)
  {
    v13 = 4;
    v12 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_22;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_22:
  v14 = v21;
  if (v21 == v20)
  {
    v15 = 4;
    v14 = v20;
    goto LABEL_26;
  }
  if (v21)
  {
    v15 = 5;
LABEL_26:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  return v9;
}

void sub_1B5B6A158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  _Unwind_Resume(exception_object);
}

void std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E698FA40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E698FA40;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::operator()(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a2;
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a2 + 16))(**a2);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
    if (!v5)
      std::__throw_bad_function_call[abi:ne180100]();
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 48))(v5, *v3);
  }
  return result;
}

uint64_t std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN21HALS_IOEngineInfoList12engine_applyIJ29FilterEngineInfoWithoutEngine38FilterIfEngineOnlyNeedsReferenceStreamEEEiNSt3__18functionIFiR17HALS_IOEngineInfoEEEDpRKT_EUlRN15VisitableVectorINS3_10unique_ptrIS5_NS3_14default_deleteIS5_EEEEE13ItemWithIndexEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::target_type()
{
}

void std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,HALS_IOPrewarmManager::EngineState),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,HALS_IOPrewarmManager::EngineState&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,HALS_IOPrewarmManager::EngineState),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,HALS_IOPrewarmManager::EngineState&>>,int ()(HALS_IOEngineInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,HALS_IOPrewarmManager::EngineState),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,HALS_IOPrewarmManager::EngineState&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,HALS_IOPrewarmManager::EngineState),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,HALS_IOPrewarmManager::EngineState&>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E698FB70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,HALS_IOPrewarmManager::EngineState),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,HALS_IOPrewarmManager::EngineState&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,HALS_IOPrewarmManager::EngineState),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,HALS_IOPrewarmManager::EngineState&>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E698FB70;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,HALS_IOPrewarmManager::EngineState),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,HALS_IOPrewarmManager::EngineState&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,HALS_IOPrewarmManager::EngineState),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,HALS_IOPrewarmManager::EngineState&>>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), a2, *(unsigned int *)(a1 + 24));
}

uint64_t std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,HALS_IOPrewarmManager::EngineState),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,HALS_IOPrewarmManager::EngineState&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,HALS_IOPrewarmManager::EngineState),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,HALS_IOPrewarmManager::EngineState&>>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__16__bindIRFiP26HALS_IOContext_Legacy_ImplR17HALS_IOEngineInfoN21HALS_IOPrewarmManager11EngineStateEEJS2_RKNS_12placeholders4__phILi1EEERS6_EEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,HALS_IOPrewarmManager::EngineState),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,HALS_IOPrewarmManager::EngineState&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,HALS_IOPrewarmManager::EngineState),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,HALS_IOPrewarmManager::EngineState&>>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::ChangeFromPlayingToPrewarming(HALS_IOPrewarmManager::PlayRequest,HALS_IOPrewarmManager::EngineState)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::ChangeFromPlayingToPrewarming(HALS_IOPrewarmManager::PlayRequest,HALS_IOPrewarmManager::EngineState)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 2080;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Failed to clear the syscall masks: %d - %s", buf, 0x28u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::ChangeFromPlayingToPrewarming(HALS_IOPrewarmManager::PlayRequest,HALS_IOPrewarmManager::EngineState)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::ChangeFromPlayingToPrewarming(HALS_IOPrewarmManager::PlayRequest,HALS_IOPrewarmManager::EngineState)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(HALS_IOContext_Legacy_Impl*)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(HALS_IOContext_Legacy_Impl*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E698F900;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(HALS_IOContext_Legacy_Impl*)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E698F900;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(HALS_IOContext_Legacy_Impl*)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  HALS_IOContext_Legacy_Impl::ChangeFromPlayingToPrewarming(*a2, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  *(_BYTE *)(v2 + 1468) = 1;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(HALS_IOContext_Legacy_Impl*)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl28Server_Internal_StopIOProcIDEPFijPK14AudioTimeStampPK15AudioBufferListS2_PS3_S2_PvEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(HALS_IOContext_Legacy_Impl*)>::target_type()
{
}

void HALS_IOContext_Legacy_Impl::StartIOThread(HALS_IOContext_Legacy_Impl *this, uint64_t a2)
{
  HALS_ObjectMap *v4;
  HALS_IOThread *v5;
  AMCP::Log::Scope_Registry *HasBeenDeactivated;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  __int128 v10;
  __int128 v11;
  int RealtimePriorityThreadParameters;
  char v13;
  _opaque_pthread_t *v14;
  unsigned int v15;
  int v17;
  _DWORD *v18;
  int v19;
  int v20;
  BOOL v21;
  AMCP::Log::Scope_Registry *v22;
  int v23;
  HALS_PlatformBehaviors *TapInfo;
  uint64_t *platform_behaviors;
  HALS_PlatformBehaviors *v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  HALS_Object *v35;
  NSObject *v36;
  _opaque_pthread_t *v37;
  mach_port_t v38;
  void *exception;
  NSObject *v40;
  const char *v41;
  _DWORD *v42;
  int v43;
  _DWORD *v44;
  NSObject *v45;
  AMCP::Log::Scope_Registry *v46;
  os_signpost_id_t v47;
  _DWORD *v48;
  _DWORD *v49;
  int v50;
  _DWORD *v51;
  _BOOL8 v52;
  AMCP::Log::Scope_Registry *v53;
  std::__shared_weak_count *v54;
  NSObject *v55;
  unint64_t *v56;
  unint64_t v57;
  os_signpost_id_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  void *v62;
  __int128 v63;
  uint64_t v64;
  unint64_t v65;
  __int128 v66;
  uint64_t v67;
  void (**v68)(CAException *__hidden);
  int v69;
  _BYTE v70[24];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  char v75;
  uint64_t v76;
  int v77;
  HALS_ObjectMap *v78;
  _OWORD buf[4];
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v4 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**(unsigned int **)(*(_QWORD *)(a2 + 24)
                                                                                                  + 64));
  v78 = v4;
  v5 = (HALS_IOThread *)(a2 + 312);
  v76 = a2 + 312;
  v77 = HALB_Mutex::Lock((HALB_Mutex *)(a2 + 328));
  HasBeenDeactivated = (AMCP::Log::Scope_Registry *)HALS_IOThread::HasBeenDeactivated((HALS_IOThread *)(a2 + 312));
  if ((_DWORD)HasBeenDeactivated)
  {
    AMCP::Log::Scope_Registry::get(HasBeenDeactivated);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v36 = **(NSObject ***)&buf[0];
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      v37 = pthread_self();
      v38 = pthread_mach_thread_np(v37);
      LODWORD(buf[0]) = 67109890;
      DWORD1(buf[0]) = v38;
      WORD4(buf[0]) = 2080;
      *(_QWORD *)((char *)buf + 10) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD1(buf[1]) = 1024;
      DWORD1(buf[1]) = 632;
      WORD4(buf[1]) = 2080;
      *(_QWORD *)((char *)&buf[1] + 10) = "mIOThread.HasBeenDeactivated() == true";
      _os_log_error_impl(&dword_1B57BA000, v36, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Cannot start IO Thread since it has been deactivated", (uint8_t *)buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v75);
    exception = __cxa_allocate_exception(0x40uLL);
    v68 = &off_1E69A1B30;
    v69 = 1852797029;
    *(_DWORD *)&v70[8] = 1852797029;
    v72 = 0;
    v73 = 0;
    v74 = -1;
    *(_QWORD *)v70 = &off_1E699E510;
    *(_QWORD *)&v70[16] = &unk_1E699E538;
    v71 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v70);
    *(_QWORD *)&buf[2] = "StartIOResult HALS_IOContext_Legacy_Impl::StartIOThread(mach_port_t, mach_port_t, mach_port_t)";
    *((_QWORD *)&buf[2] + 1) = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOContext_Legacy_Impl.cpp";
    LODWORD(buf[3]) = 632;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v63);
    v66 = v63;
    v67 = v64;
    v63 = 0uLL;
    v64 = 0;
    v65 = (unint64_t)off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>((uint64_t)buf, (uint64_t)&v65);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  *(_BYTE *)(a2 + 304) = 0;
  if (*(_DWORD *)(a2 + 1296))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 136315394;
      *(_QWORD *)((char *)buf + 4) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD6(buf[0]) = 1024;
      *(_DWORD *)((char *)buf + 14) = 713;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContext_Legacy_Impl::StartIOThread: mIODisableCount != 0. IO thread need not be started.", (uint8_t *)buf, 0x12u);
    }
    *(_BYTE *)this = 0;
LABEL_6:
    *(_QWORD *)((char *)this + 12) = 0;
    *(_QWORD *)((char *)this + 4) = 0;
    *((_DWORD *)this + 5) = 0;
    goto LABEL_60;
  }
  if (!*(_QWORD *)(a2 + 1480) && !*(_QWORD *)(a2 + 1472))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 136315394;
      *(_QWORD *)((char *)buf + 4) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD6(buf[0]) = 1024;
      *(_DWORD *)((char *)buf + 14) = 650;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContext_Legacy_Impl::StartIOThread: Stop interrupted resume - IO thread need not be started.", (uint8_t *)buf, 0x12u);
    }
    *(_BYTE *)this = 1;
    goto LABEL_6;
  }
  v7 = *(_QWORD *)(a2 + 1520);
  if (!v7)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_72;
    LODWORD(buf[0]) = 136315394;
    *(_QWORD *)((char *)buf + 4) = "HALS_IOContext_Legacy_Impl.cpp";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 655;
    v40 = MEMORY[0x1E0C81028];
    v41 = "%25s:%-5d  HALS_IOContext_Legacy_Impl::StartIOThread: no master engine info";
    goto LABEL_71;
  }
  if (!*(_QWORD *)(v7 + 8))
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_72;
    LODWORD(buf[0]) = 136315394;
    *(_QWORD *)((char *)buf + 4) = "HALS_IOContext_Legacy_Impl.cpp";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 656;
    v40 = MEMORY[0x1E0C81028];
    v41 = "%25s:%-5d  HALS_IOContext_Legacy_Impl::StartIOThread: no master engine";
LABEL_71:
    _os_log_impl(&dword_1B57BA000, v40, OS_LOG_TYPE_ERROR, v41, (uint8_t *)buf, 0x12u);
LABEL_72:
    v42 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v42 = &off_1E69A1B30;
    v42[2] = 1852797029;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 80);
  if (v8)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 24))(v8, 0);
  v9 = *(_DWORD *)(a2 + 1320);
  memset((char *)buf + 4, 0, 56);
  v10 = buf[1];
  *(_OWORD *)(a2 + 44) = buf[0];
  memset(&v70[4], 0, 18);
  *(_DWORD *)(a2 + 40) = v9;
  *(_OWORD *)(a2 + 60) = v10;
  *(_OWORD *)(a2 + 76) = buf[2];
  *(_OWORD *)(a2 + 88) = *(_OWORD *)((char *)&buf[2] + 12);
  *(_DWORD *)(a2 + 104) = 7;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 140) = 0u;
  *(_OWORD *)(a2 + 124) = 0u;
  *(_OWORD *)(a2 + 108) = 0u;
  *(_DWORD *)(a2 + 168) = 3;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 204) = 0u;
  *(_OWORD *)(a2 + 188) = 0u;
  *(_OWORD *)(a2 + 172) = 0u;
  *(_QWORD *)(a2 + 232) = 3;
  *(_DWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a2 + 256) = 0x100000000;
  *(_DWORD *)(a2 + 264) = 0;
  v11 = *(_OWORD *)v70;
  *(_QWORD *)(a2 + 282) = *(_QWORD *)&v70[14];
  *(_OWORD *)(a2 + 268) = v11;
  LOBYTE(v63) = 0;
  v65 = 0;
  RealtimePriorityThreadParameters = HALS_IOContext_Legacy_Impl::GetRealtimePriorityThreadParameters((HALS_IOContext_Legacy_Impl *)a2, v9, &v65, (BOOL *)&v63);
  if (RealtimePriorityThreadParameters)
  {
    v43 = RealtimePriorityThreadParameters;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 136315650;
      *(_QWORD *)((char *)buf + 4) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD6(buf[0]) = 1024;
      *(_DWORD *)((char *)buf + 14) = 675;
      WORD1(buf[1]) = 1024;
      DWORD1(buf[1]) = v43;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::GetRealtimePriorityThreadParameters: got an error from calculating the thread parameters, Error: 0x%X", (uint8_t *)buf, 0x18u);
    }
    v44 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v44 = &off_1E69A1B30;
    v44[2] = v43;
  }
  *(_DWORD *)(a2 + 1056) = 0;
  v13 = v63;
  *(_QWORD *)(a2 + 648) = v65;
  *(_BYTE *)(a2 + 656) = v13;
  std::string::operator=((std::string *)(a2 + 696), (const std::string *)(a2 + 1944));
  if (g_static_start_options == 1 && *(_DWORD *)(a2 + 1380))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 136315394;
      *(_QWORD *)((char *)buf + 4) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD6(buf[0]) = 1024;
      *(_DWORD *)((char *)buf + 14) = 685;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Throwing exception in response to test configuration", (uint8_t *)buf, 0x12u);
    }
    v51 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v51 = &off_1E69A1B30;
    v51[2] = 1852797029;
  }
  *(_QWORD *)v70 = a2 + 328;
  *(_DWORD *)&v70[8] = HALB_Mutex::Lock((HALB_Mutex *)(a2 + 328));
  v14 = *(_opaque_pthread_t **)(a2 + 400);
  if (v14 != pthread_self() && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf[0]) = 136315394;
    *(_QWORD *)((char *)buf + 4) = "HALB_IOThread.cpp";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 247;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOThread::_Start: this thread ought to lock the lock", (uint8_t *)buf, 0x12u);
  }
  if (*(_BYTE *)(a2 + 485))
  {
    v20 = 58;
LABEL_77:
    HALB_Guard::Locker::~Locker((HALB_Mutex **)v70);
    goto LABEL_78;
  }
  if (*(_QWORD *)(a2 + 320) && *(_BYTE *)(a2 + 484))
    HALB_IOThread::_WaitForState((HALB_IOThread *)(a2 + 312), 1735552612);
  *(_BYTE *)(a2 + 484) = 0;
  if (*(_DWORD *)(a2 + 488))
  {
    v15 = 0;
    *(_DWORD *)(a2 + 472) = 2002872692;
    while (!*(_BYTE *)(a2 + 484))
    {
      if (!*(_DWORD *)(a2 + 488) || v15 > 0x13)
        break;
      v17 = HALB_Guard::WaitFor((HALB_Guard *)(a2 + 328), 0x5F5E100uLL);
      ++v15;
      if (*(_DWORD *)(a2 + 488) && v17 && v17 != 60)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf[0]) = 136315394;
          *(_QWORD *)((char *)buf + 4) = "HALB_IOThread.cpp";
          WORD6(buf[0]) = 1024;
          *(_DWORD *)((char *)buf + 14) = 286;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOThread::_Start: wait failed while waiting for IO to become enabled", (uint8_t *)buf, 0x12u);
        }
        v18 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v18 = &off_1E69A1B30;
        v18[2] = 1852797029;
      }
    }
    if (!*(_BYTE *)(a2 + 484) && *(_DWORD *)(a2 + 488))
    {
      v52 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
      if (v52)
      {
        LODWORD(buf[0]) = 136315394;
        *(_QWORD *)((char *)buf + 4) = "HALB_IOThread.cpp";
        WORD6(buf[0]) = 1024;
        *(_DWORD *)((char *)buf + 14) = 290;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALB_IOThread::_Start: IO is still disabled after waiting", (uint8_t *)buf, 0x12u);
      }
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v52);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v54 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
      v55 = **(NSObject ***)&buf[0];
      if (*((_QWORD *)&buf[0] + 1))
      {
        v56 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      AMCP::Log::Scope_Registry::get(v53);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v58 = os_signpost_id_make_with_pointer(**(os_log_t **)&buf[0], (const void *)(a2 + 312));
      v59 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
      if (*((_QWORD *)&buf[0] + 1))
      {
        v60 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      if (v58 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v55))
      {
        LOWORD(buf[0]) = 0;
        _os_signpost_emit_with_name_impl(&dword_1B57BA000, v55, OS_SIGNPOST_EVENT, v58, "Error", "HALB_IOThread::_Start: IO is still disabled after waiting", (uint8_t *)buf, 2u);
      }
      *(_DWORD *)(a2 + 472) = 1735552612;
      HALB_Guard::NotifyAll((pthread_cond_t *)(a2 + 328));
      v20 = 35;
      goto LABEL_77;
    }
  }
  if (*(_BYTE *)(a2 + 484)
    || ((v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(a2 + 312), v20 = v19, v19 != 37)
      ? (v21 = v19 == 0)
      : (v21 = 1),
        v21))
  {
    v20 = HALB_IOThread::_WaitForState((HALB_IOThread *)(a2 + 312), 1735354734);
  }
  HALB_Guard::Locker::~Locker((HALB_Mutex **)v70);
  if (v20 && v20 != 89)
  {
LABEL_78:
    AMCP::Log::Scope_Registry::get(v22);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v45 = **(NSObject ***)&buf[0];
    v46 = (AMCP::Log::Scope_Registry *)std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    AMCP::Log::Scope_Registry::get(v46);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v47 = os_signpost_id_make_with_pointer(**(os_log_t **)&buf[0], (const void *)a2);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (v47 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v45))
    {
      LODWORD(buf[0]) = 67109120;
      DWORD1(buf[0]) = v20;
      _os_signpost_emit_with_name_impl(&dword_1B57BA000, v45, OS_SIGNPOST_EVENT, v47, "Error", "HALS_IOContext_Legacy_Impl::StartIOThread: got an error from starting the IO thread, Error: 0x%X", (uint8_t *)buf, 8u);
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 136315650;
      *(_QWORD *)((char *)buf + 4) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD6(buf[0]) = 1024;
      *(_DWORD *)((char *)buf + 14) = 695;
      WORD1(buf[1]) = 1024;
      DWORD1(buf[1]) = v20;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::StartIOThread: got an error from starting the IO thread, Error: 0x%X", (uint8_t *)buf, 0x18u);
    }
    v48 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v48 = &off_1E69A1B30;
    v48[2] = v20;
  }
  v23 = *(_DWORD *)(a2 + 1056);
  if (v23)
  {
    v70[0] = HIBYTE(*(_DWORD *)(a2 + 1056));
    v70[1] = BYTE2(v23);
    v70[2] = BYTE1(v23);
    v70[3] = v23;
    v70[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 136315906;
      *(_QWORD *)((char *)buf + 4) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD6(buf[0]) = 1024;
      *(_DWORD *)((char *)buf + 14) = 697;
      WORD1(buf[1]) = 1024;
      DWORD1(buf[1]) = v23;
      WORD4(buf[1]) = 2080;
      *(_QWORD *)((char *)&buf[1] + 10) = v70;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::StartIOThread: the IO thread failed to start, Error: %d (%s)", (uint8_t *)buf, 0x22u);
    }
    v49 = __cxa_allocate_exception(0x10uLL);
    v50 = *(_DWORD *)(a2 + 1056);
    *(_QWORD *)v49 = &off_1E69A1B30;
    v49[2] = v50;
  }
  HALS_IOContext_Legacy_Impl::CreateMicrophoneInfo(a2, (uint64_t *)&v78);
  TapInfo = (HALS_PlatformBehaviors *)HALS_IOContext_Legacy_Impl::CreateTapInfo(a2);
  platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(TapInfo);
  v26 = (HALS_PlatformBehaviors *)(*(uint64_t (**)(uint64_t *))(*platform_behaviors + 64))(platform_behaviors);
  v27 = HALS_PlatformBehaviors::get_platform_behaviors(v26);
  (*(void (**)(uint64_t *))(*v27 + 64))(v27);
  v28 = *(_QWORD *)(a2 + 1704);
  if (!v28 || !*(_QWORD *)(v28 + 8))
  {
LABEL_54:
    v29 = 0;
    goto LABEL_55;
  }
  v29 = *(_DWORD *)(v28 + 60);
  if (v29)
  {
    if (*(_QWORD *)(v28 + 16))
    {
      v30 = mach_port_mod_refs(*MEMORY[0x1E0C83DA0], *(_DWORD *)(v28 + 60), 0, 1);
      if ((_DWORD)v30)
      {
        v62 = __cxa_allocate_exception(0x20uLL);
        *(_QWORD *)&buf[0] = &off_1E6993B48;
        MEMORY[0x1B5E5022C](v62, v30, buf, "failed to add the send right");
        __cxa_throw(v62, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
      }
      v31 = *(unsigned int *)(v28 + 16);
      goto LABEL_56;
    }
    goto LABEL_54;
  }
LABEL_55:
  v31 = 0;
LABEL_56:
  v32 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 80);
  if (v32)
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 96))(v32);
  else
    v33 = 0;
  v34 = HALS_IOThread::CopyWorkgroupIntervalPort(v5);
  *(_BYTE *)this = 1;
  *((_DWORD *)this + 1) = v33;
  *((_DWORD *)this + 2) = v34;
  *((_DWORD *)this + 3) = v29;
  *((_QWORD *)this + 2) = v31;
LABEL_60:
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v76);
  HALS_ObjectMap::ReleaseObject(v4, v35);
}

void sub_1B5B6B41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, std::exception a16, uint64_t a17, std::exception a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  HALS_ObjectMap *v29;
  HALS_Object *v31;

  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&a29);
  HALS_ObjectMap::ReleaseObject(v29, v31);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOContext_Legacy_Impl::ChangeEngineState_On(uint64_t a1, int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _BYTE v6[12];
  __int16 v7;
  int v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 1060) = a2;
  v9[0] = &off_1E698FAC0;
  v9[1] = HALS_IOContext_Legacy_Impl::StartHardware_Helper;
  v9[2] = a1;
  v10 = v9;
  *(_QWORD *)v6 = &off_1E69928C8;
  v2 = HALS_IOContext_Legacy_Impl::engine_apply<FilterIfEngineOnlyNeedsReferenceStream>(a1, (uint64_t)v9, (uint64_t)v6);
  v3 = v10;
  if (v10 == v9)
  {
    v4 = 4;
    v3 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  if ((_DWORD)v2 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v6 = 136315394;
    *(_QWORD *)&v6[4] = "HALS_IOContext_Legacy_Impl.cpp";
    v7 = 1024;
    v8 = 1036;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::ChangeEngineState_On: Unexpected error when changing engine prewarming state", v6, 0x12u);
  }
  return v2;
}

void sub_1B5B6B684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContext_Legacy_Impl::IsAnyEngineMixing_Helper(HALS_IOContext_Legacy_Impl *this, BOOL *a2, HALS_IOEngineInfo *a3)
{
  if (*(_BYTE *)this)
    return 1;
  if ((*(unsigned int (**)(BOOL *))(*(_QWORD *)a2 + 16))(a2))
    *(_BYTE *)this = (*(uint64_t (**)(BOOL *))(*(_QWORD *)a2 + 312))(a2);
  return *(unsigned __int8 *)this;
}

void sub_1B5B6B74C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315394;
      *(_QWORD *)((char *)&a9 + 4) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 5908;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::IsAnyEngineMixing_Helper: Caught exception trying to stop hardware", (uint8_t *)&a9, 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B5B6B71CLL);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<std::__bind<int (&)(BOOL &,HALS_IOEngineInfo &),std::reference_wrapper<BOOL>,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(BOOL &,HALS_IOEngineInfo &),std::reference_wrapper<BOOL>,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<std::__bind<int (&)(BOOL &,HALS_IOEngineInfo &),std::reference_wrapper<BOOL>,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(BOOL &,HALS_IOEngineInfo &),std::reference_wrapper<BOOL>,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E698F850;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<int (&)(BOOL &,HALS_IOEngineInfo &),std::reference_wrapper<BOOL>,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(BOOL &,HALS_IOEngineInfo &),std::reference_wrapper<BOOL>,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E698F850;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<int (&)(BOOL &,HALS_IOEngineInfo &),std::reference_wrapper<BOOL>,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(BOOL &,HALS_IOEngineInfo &),std::reference_wrapper<BOOL>,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t std::__function::__func<std::__bind<int (&)(BOOL &,HALS_IOEngineInfo &),std::reference_wrapper<BOOL>,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(BOOL &,HALS_IOEngineInfo &),std::reference_wrapper<BOOL>,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__16__bindIRFiRbR17HALS_IOEngineInfoEJNS_17reference_wrapperIbEERKNS_12placeholders4__phILi1EEEEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<int (&)(BOOL &,HALS_IOEngineInfo &),std::reference_wrapper<BOOL>,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(BOOL &,HALS_IOEngineInfo &),std::reference_wrapper<BOOL>,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

uint64_t HALS_IOContext_Legacy_Impl::StartHardware_Helper(HALS_IOContext_Legacy_Impl *this, HALS_IOContext_Legacy_Impl *a2, HALS_IOEngineInfo *a3)
{
  uint64_t result;

  result = *((_QWORD *)a2 + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, HALS_IOEngineInfo *))(*(_QWORD *)result + 688))(result, *((_QWORD *)this + 3), a3);
  return result;
}

void sub_1B5B6B8E4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315394;
      *(_QWORD *)((char *)&a9 + 4) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 3394;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::StartHardware_Helper: Caught exception trying to start hardware", (uint8_t *)&a9, 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B5B6B8BCLL);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E698FAC0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E698FAC0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__16__bindIRFiP26HALS_IOContext_Legacy_ImplR17HALS_IOEngineInfoEJS2_RKNS_12placeholders4__phILi1EEEEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

uint64_t HALS_IOContext_Legacy_Impl::GetRealtimePriorityThreadParameters(HALS_IOContext_Legacy_Impl *this, unsigned int a2, unint64_t *a3, BOOL *a4)
{
  uint64_t v4;
  uint64_t result;
  _DWORD *exception;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 190);
  if (!v4 || !*(_QWORD *)(v4 + 8))
    return 4;
  if (!a2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v8 = 136315394;
      v9 = "HALS_IOContext_Legacy_Impl.cpp";
      v10 = 1024;
      v11 = 2670;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ConfigureThreadForRealtimePriority - inIOBufferFrameSize must be nonzero", (uint8_t *)&v8, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  result = 0;
  *a3 = (unint64_t)(*(double *)(*(_QWORD *)(v4 + 288)
                                     + 40 * *(unsigned int *)(*(_QWORD *)(v4 + 288) + 192)
                                     + 200)
                         * (double)a2);
  *a4 = *((_DWORD *)this + 346) == 1;
  return result;
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::SaveAnchorTime(unsigned long long,unsigned int)::$_0,std::tuple<unsigned int,char const*,int,unsigned long long>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::SaveAnchorTime(unsigned long long,unsigned int)::$_0,std::tuple<unsigned int,char const*,int,unsigned long long>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  caulk::concurrent::message *v12;
  uint8_t buf[8];
  _BYTE v14[10];
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v14;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v14)
  {
    v4 = (unint64_t *)(*(_QWORD *)v14 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v14 = 2080;
    *(_QWORD *)&v14[2] = v8;
    v15 = 1024;
    v16 = v9;
    v17 = 2048;
    v18 = v10;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d HALS_IOContext_Legacy_Impl::SaveAnchorTime:  %llu", buf, 0x22u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::SaveAnchorTime(unsigned long long,unsigned int)::$_0,std::tuple<unsigned int,char const*,int,unsigned long long>>::rt_cleanup::~rt_cleanup(&v12);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::SaveAnchorTime(unsigned long long,unsigned int)::$_0,std::tuple<unsigned int,char const*,int,unsigned long long>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void HALS_IOContext_Legacy_Impl::IOWorkLoop_SleepUntilWakeTime(HALS_IOContext_Legacy_Impl *this, unint64_t a2)
{
  unint64_t v4;
  HALB_Mutex *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  double v10;
  unint64_t v11;
  BOOL v12;

  v12 = 0;
  v4 = __udivti3();
  v5 = (HALS_IOContext_Legacy_Impl *)((char *)this + 328);
  HALB_Guard::WaitUntil((HALS_IOContext_Legacy_Impl *)((char *)this + 328), v4, &v12);
  v6 = mach_absolute_time();
  if (v12)
  {
    v8 = v6;
    if ((HALB_IOThread::HasBeenStopped((HALS_IOContext_Legacy_Impl *)((char *)this + 312)) & 1) == 0
      && (double)v8 - (double)a2 < 0.0)
    {
      HALB_Guard::WaitUntil((HALS_IOContext_Legacy_Impl *)((char *)this + 328), v4, &v12);
    }
  }
  else
  {
    v9 = *((_QWORD *)this + 190);
    v10 = 44100.0;
    if (v9 && *(_QWORD *)(v9 + 8) && (v10 = *(double *)(v9 + 768), v10 <= 0.0))
    {
      LODWORD(v11) = 100;
    }
    else
    {
      LODWORD(v7) = *((_DWORD *)this + 330);
      v11 = (unint64_t)((double)v7 / v10 * 0.05 * 1000.0 * 1000.0);
    }
    HALB_Mutex::Unlock(v5);
    usleep(v11);
    HALB_Mutex::Lock(v5);
  }
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,HALS_IOContext_Legacy_Impl::WaitForTapStart(void)::$_0>>(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v1;
  const void *v2;
  HALS_Object *v3;
  HALS_ObjectMap *v4;
  int v5;
  int v6;
  uint64_t v7;
  HALS_Object *v8;
  HALS_ObjectMap *v9;
  uint64_t *v11;
  char __str[312];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v1 = std::__thread_local_data();
  v2 = (const void *)*v11;
  *v11 = 0;
  pthread_setspecific(v1->__key_, v2);
  v4 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)v11 + 2));
  if (v4)
  {
    kdebug_trace();
    v5 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)v4 + 12) + 720))(*((_QWORD **)v4 + 12));
    snprintf(__str, 0x12CuLL, "Tap wait thread: %u", v5);
    pthread_setname_np(__str);
    v6 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)v4 + 12) + 424))(*((_QWORD **)v4 + 12));
    kdebug_trace();
    if (v6)
      (*(void (**)(_QWORD *))(**((_QWORD **)v4 + 12) + 440))(*((_QWORD **)v4 + 12));
  }
  HALS_ObjectMap::ReleaseObject(v4, v3);
  v7 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)v11 + 2));
  v9 = (HALS_ObjectMap *)v7;
  if (v7)
    (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 96) + 448))(*(_QWORD *)(v7 + 96));
  HALS_ObjectMap::ReleaseObject(v9, v8);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,HALS_IOContext_Legacy_Impl::WaitForTapStart(void)::$_0>>::~unique_ptr[abi:ne180100](&v11);
  return 0;
}

void sub_1B5B6BF88(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, __int16 buf, char a12, uint8_t a13, uint64_t a14, __int16 a15, __int16 a16, int a17)
{
  HALS_ObjectMap *v17;

  HALS_ObjectMap::ReleaseObject(v17, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,HALS_IOContext_Legacy_Impl::WaitForTapStart(void)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,HALS_IOContext_Legacy_Impl::WaitForTapStart(void)::$_0>>::~unique_ptr[abi:ne180100](uint64_t **a1)
{
  uint64_t *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v2);
    MEMORY[0x1B5E50688](v2, 0x1020C403A5D3213);
  }
  return a1;
}

size_t ___ZNK26HALS_IOContext_Legacy_Impl8LogStateEP7__sFILEj_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  size_t result;

  v2 = a1[7];
  result = strlcpy(*(char **)(*(_QWORD *)(a1[4] + 8) + 24), (const char *)(v2 + 492), 0x80uLL);
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = *(_BYTE *)(v2 + 1300);
  *(_DWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = **(_DWORD **)(*(_QWORD *)(v2 + 24) + 64);
  return result;
}

uint64_t ___ZN26HALS_IOContext_Legacy_Impl29UpdateIssueReportersOnEnginesEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 608))(v2);
  return 0;
}

void ___ZN26HALS_IOContext_Legacy_Impl18AssessIOBufferSizeEv_block_invoke(uint64_t a1)
{
  HALS_IOContext_Legacy_Impl::AssessIOBufferSize(*(HALS_IOContext_Legacy_Impl **)(a1 + 40), (CAPropertyAddressList *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1B5B6C1D0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_IOContext_Legacy_Impl::ResetEngineState_Off(HALS_IOContext_Legacy_Impl *a1, int **a2)
{
  int *v4;
  int *v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = a2[1];
  if (*a2 == v5)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    v9 = 136315394;
    v10 = "HALS_IOContext_Legacy_Impl.cpp";
    v11 = 1024;
    v12 = 984;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::ResetEngineState_Off: Unexpected state for prewarming", (uint8_t *)&v9, 0x12u);
    v4 = *a2;
    v5 = a2[1];
  }
  if (v4 != v5)
  {
    v8 = *(v5 - 1);
    v6 = v5 - 1;
    v7 = v8;
    a2[1] = v6;
    while (v4 != v6)
      HALS_IOContext_Legacy_Impl::ChangeEngineState_Off((uint64_t)a1, *v4++, 0);
    *((_DWORD *)a1 + 265) = v7;
  }
LABEL_9:
  HALS_IOContext_Legacy_Impl::StopIOThread(a1);
}

uint64_t ___ZN26HALS_IOContext_Legacy_Impl10DeviceDiedEPK10__CFString_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = HALS_IOContextDescription::GetEngineInfoForDeviceUID((HALS_IOContextDescription *)(*(_QWORD *)(a1 + 40) + 1496), *(CFStringRef *)(a1 + 48));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result != 0;
  return result;
}

void ___ZN26HALS_IOContext_Legacy_Impl10DeviceDiedEPK10__CFString_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  HALS_IOContextDescription *v3;
  uint64_t v4;
  int v5;

  v2 = *(_QWORD *)(a1 + 32);
  v4 = v2 + 312;
  v5 = HALB_Mutex::Lock((HALB_Mutex *)(v2 + 328));
  v3 = (HALS_IOContextDescription *)(v2 + 1496);
  if (HALS_IOContextDescription::GetEngineInfoForDeviceUID(v3, *(CFStringRef *)(a1 + 40)))
    HALS_IOContextDescription::DeviceDied(v3, *(const __CFString **)(a1 + 40));
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v4);
}

void sub_1B5B6C394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&a9);
  _Unwind_Resume(a1);
}

void ___ZN26HALS_IOContext_Legacy_Impl13DeviceArrivedEP11HALS_Device_block_invoke(uint64_t a1)
{
  uint64_t v2;
  CFStringRef v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (CFStringRef)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 208))(*(_QWORD *)(a1 + 48));
  v4 = 1;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = HALS_IOContextDescription::GetEngineInfoForDeviceUID((HALS_IOContextDescription *)(v2 + 1496), v3) != 0;
  CACFString::~CACFString((CACFString *)&v3);
}

void sub_1B5B6C410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CACFString::~CACFString((CACFString *)&a9);
  _Unwind_Resume(a1);
}

void ___ZN26HALS_IOContext_Legacy_Impl13DeviceArrivedEP11HALS_Device_block_invoke_2(uint64_t a1)
{
  _DWORD *v2;
  HALS_IODevice *v3;
  uint64_t EngineInfoForDeviceUID;
  uint64_t v5;
  HALS_ObjectMap *v6;
  HALS_ObjectMap *v7;
  HALS_Object *v8;
  HALS_Object *v9;
  HALS_Object *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  HALS_Object *v14;
  HALS_ObjectMap *v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  CFStringRef theString1;
  char v20;
  CFStringRef v21;
  char v22;
  void *__p[2];
  char v24;

  v2 = *(_DWORD **)(a1 + 32);
  theString1 = (CFStringRef)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 208))(*(_QWORD *)(a1 + 40));
  v20 = 1;
  v17 = v2 + 78;
  v18 = HALB_Mutex::Lock((HALB_Mutex *)(v2 + 82));
  if (HALS_IOContextDescription::GetEngineInfoForDeviceUID((HALS_IOContextDescription *)(v2 + 374), theString1))
  {
    v3 = *(HALS_IODevice **)(a1 + 40);
    v21 = (CFStringRef)(*(uint64_t (**)(HALS_IODevice *))(*(_QWORD *)v3 + 208))(v3);
    v22 = 1;
    EngineInfoForDeviceUID = HALS_IOContextDescription::GetEngineInfoForDeviceUID((HALS_IOContextDescription *)(v2 + 374), v21);
    if (EngineInfoForDeviceUID)
    {
      v5 = HALS_IODevice::CopyIOEngine(v3);
      v6 = (HALS_ObjectMap *)v5;
      if (v5)
      {
        v7 = *(HALS_ObjectMap **)(EngineInfoForDeviceUID + 8);
        *(_QWORD *)(EngineInfoForDeviceUID + 8) = v5;
        *(_BYTE *)(EngineInfoForDeviceUID + 860) = 0;
        *(_BYTE *)(EngineInfoForDeviceUID + 749) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 848))(v5);
        HALS_ObjectMap::RetainObject(*(HALS_ObjectMap **)(EngineInfoForDeviceUID + 8), v8);
        HALS_ObjectMap::ReleaseObject(v7, v9);
        HALS_ObjectMap::ReleaseObject(v6, v10);
        LODWORD(v7) = *(_DWORD *)(*(_QWORD *)(EngineInfoForDeviceUID + 8) + 16);
        v11 = operator new();
        v12 = v2[484];
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)(EngineInfoForDeviceUID + 32));
        HALS_IOClock::HALS_IOClock(v11, v12, (int)v7, (__int128 *)__p);
        if (v24 < 0)
          operator delete(__p[0]);
        v13 = *(_QWORD *)(EngineInfoForDeviceUID + 288);
        *(_QWORD *)(EngineInfoForDeviceUID + 288) = v11;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        HALS_IOContextDescription::PickMasterEngine((HALS_IOContextDescription *)(v2 + 374));
        v15 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)v2[484]);
        if (v15)
        {
          v16 = *(_QWORD *)(EngineInfoForDeviceUID + 8);
          if (v16)
          {
            if (!*(_BYTE *)(EngineInfoForDeviceUID + 860))
            {
              (*(void (**)(uint64_t, HALS_ObjectMap *))(*(_QWORD *)v16 + 200))(v16, v15);
              *(_BYTE *)(EngineInfoForDeviceUID + 860) = 1;
            }
          }
        }
        HALS_ObjectMap::ReleaseObject(v15, v14);
      }
    }
    CACFString::~CACFString((CACFString *)&v21);
  }
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v17);
  CACFString::~CACFString((CACFString *)&theString1);
}

void sub_1B5B6C5E8(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  HALS_ObjectMap *v21;

  HALS_ObjectMap::ReleaseObject(v21, a2);
  CACFString::~CACFString((CACFString *)&a14);
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&a10);
  CACFString::~CACFString((CACFString *)&a12);
  _Unwind_Resume(a1);
}

uint64_t ___ZN26HALS_IOContext_Legacy_Impl15ClockDeviceDiedEPK10__CFString_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = HALS_IOContextDescription::HasClockDevice(*(HALS_IOContextDescription **)(*(_QWORD *)(a1 + 40) + 1504), *(const __CFString **)(a1 + 48));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void ___ZN26HALS_IOContext_Legacy_Impl15ClockDeviceDiedEPK10__CFString_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 + 312;
  v4 = HALB_Mutex::Lock((HALB_Mutex *)(v2 + 328));
  HALS_IOContextDescription::DeviceDied((HALS_IOContextDescription *)(v2 + 1496), *(const __CFString **)(a1 + 40));
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v3);
}

void sub_1B5B6C700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZN26HALS_IOContext_Legacy_Impl18ClockDeviceArrivedEPK10__CFString_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = HALS_IOContextDescription::HasClockDevice(*(HALS_IOContextDescription **)(*(_QWORD *)(a1 + 40) + 1504), *(const __CFString **)(a1 + 48));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void ___ZN26HALS_IOContext_Legacy_Impl18ClockDeviceArrivedEPK10__CFString_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = v1 + 312;
  v3 = HALB_Mutex::Lock((HALB_Mutex *)(v1 + 328));
  HALS_IOContextDescription::PickMasterEngine((HALS_IOContextDescription *)(v1 + 1496));
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v2);
}

void sub_1B5B6C790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZN26HALS_IOContext_Legacy_Impl24SetProcessInputMuteStateEb_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 32) = *(_BYTE *)(result + 40);
  return result;
}

void ___ZN26HALS_IOContext_Legacy_Impl10DeactivateEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, HALS_MutationChangeSynchronizer *a7)
{
  uint64_t v7;

  v7 = *(_QWORD *)(a1 + 40);
  HALS_IOContextHostedDSP::Remove(*(HALS_IOContextHostedDSP **)(v7 + 2080), (HALS_IOContextDescription *)(v7 + 1496), *(_DWORD *)(v7 + 1320), **(_DWORD **)(*(_QWORD *)(v7 + 24) + 64), *(_DWORD *)(*(_QWORD *)(v7 + 24) + 16), (HALS_MutationChangeSynchronizer *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a7);
}

void ___ZN10applesauce8dispatch2v19sync_implIRZN26HALS_IOContext_Legacy_Impl10DeactivateEvE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = **(_QWORD **)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 1368);
  *(_OWORD *)(v1 + 1360) = 0u;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void std::default_delete<HALS_IOContextHostedDSP>::operator()[abi:ne180100](void **a1)
{
  void **v2;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v2 = a1;
  std::vector<HALS_IOContextHostedDSP::HostedDSPList::ExtendedInstanceInfo>::__destroy_vector::operator()[abi:ne180100](&v2);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__hash_table<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::__unordered_map_hasher<HALS_MultiTap *,std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::hash<HALS_MultiTap *>,std::equal_to<HALS_MultiTap *>,true>,std::__unordered_map_equal<HALS_MultiTap *,std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::equal_to<HALS_MultiTap *>,std::hash<HALS_MultiTap *>,true>,std::allocator<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<HALS_MultiTap * const,HALS_IOContext_Legacy_Impl::ActiveTap>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::vector<HALS_IOContextHostedDSP::HostedDSPList::ExtendedInstanceInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;
  uint64_t *v6;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 3;
        std::unique_ptr<HALS_IOContextHostedDSP::DSPStreamInstance>::reset[abi:ne180100](v4 - 1, 0);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::unique_ptr<HALS_IOContextHostedDSP::DSPStreamInstance>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  __int128 v30;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v30 = 0uLL;
    std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v2 + 1992, &v30);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = *(std::__shared_weak_count **)(v2 + 2000);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    *(_QWORD *)(v2 + 1312) = &off_1E699D0D8;
    *(_QWORD *)&v30 = v2 + 1968;
    std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
    DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)(v2 + 1384));
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)(v2 + 1360));
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)(v2 + 1336));
    *(_QWORD *)(v2 + 1312) = off_1E699D128;
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100](v2 + 1320);
    v9 = *(void **)(v2 + 1280);
    if (v9)
    {
      *(_QWORD *)(v2 + 1288) = v9;
      operator delete(v9);
    }
    *(_QWORD *)&v30 = v2 + 1256;
    std::vector<MutationItinerary::Device>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
    std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(*(_QWORD **)(v2 + 1240));
    *(_QWORD *)(v2 + 544) = &off_1E699D0D8;
    *(_QWORD *)&v30 = v2 + 1200;
    std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
    DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)(v2 + 616));
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)(v2 + 592));
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)(v2 + 568));
    *(_QWORD *)(v2 + 544) = off_1E699D128;
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100](v2 + 552);
    v10 = *(_QWORD **)(v2 + 536);
    if (v10 == (_QWORD *)(v2 + 512))
    {
      v11 = 4;
      v10 = (_QWORD *)(v2 + 512);
    }
    else
    {
      if (!v10)
        goto LABEL_20;
      v11 = 5;
    }
    (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_20:
    v12 = *(_QWORD **)(v2 + 504);
    if (v12 == (_QWORD *)(v2 + 480))
    {
      v13 = 4;
      v12 = (_QWORD *)(v2 + 480);
    }
    else
    {
      if (!v12)
        goto LABEL_25;
      v13 = 5;
    }
    (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_25:
    v14 = *(_QWORD **)(v2 + 472);
    if (v14 == (_QWORD *)(v2 + 448))
    {
      v15 = 4;
      v14 = (_QWORD *)(v2 + 448);
    }
    else
    {
      if (!v14)
        goto LABEL_30;
      v15 = 5;
    }
    (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_30:
    v16 = *(_QWORD **)(v2 + 440);
    if (v16 == (_QWORD *)(v2 + 416))
    {
      v17 = 4;
      v16 = (_QWORD *)(v2 + 416);
    }
    else
    {
      if (!v16)
        goto LABEL_35;
      v17 = 5;
    }
    (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_35:
    v18 = *(_QWORD **)(v2 + 408);
    if (v18 == (_QWORD *)(v2 + 384))
    {
      v19 = 4;
      v18 = (_QWORD *)(v2 + 384);
    }
    else
    {
      if (!v18)
        goto LABEL_40;
      v19 = 5;
    }
    (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_40:
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2 + 368);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2 + 352);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2 + 336);
    std::unique_ptr<HALS_DSPCaptureFiles>::reset[abi:ne180100]((uint64_t *)(v2 + 328), 0);
    v20 = *(_QWORD **)(v2 + 304);
    if (v20 == (_QWORD *)(v2 + 280))
    {
      v21 = 4;
      v20 = (_QWORD *)(v2 + 280);
    }
    else
    {
      if (!v20)
        goto LABEL_45;
      v21 = 5;
    }
    (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_45:
    v22 = *(_QWORD **)(v2 + 272);
    if (v22 == (_QWORD *)(v2 + 248))
    {
      v23 = 4;
      v22 = (_QWORD *)(v2 + 248);
    }
    else
    {
      if (!v22)
        goto LABEL_50;
      v23 = 5;
    }
    (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_50:
    v24 = *(_QWORD **)(v2 + 240);
    if (v24 == (_QWORD *)(v2 + 216))
    {
      v25 = 4;
      v24 = (_QWORD *)(v2 + 216);
    }
    else
    {
      if (!v24)
        goto LABEL_55;
      v25 = 5;
    }
    (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_55:
    v26 = *(_QWORD **)(v2 + 208);
    if (v26 == (_QWORD *)(v2 + 184))
    {
      v27 = 4;
      v26 = (_QWORD *)(v2 + 184);
    }
    else
    {
      if (!v26)
        goto LABEL_60;
      v27 = 5;
    }
    (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_60:
    v28 = *(_QWORD **)(v2 + 176);
    if (v28 == (_QWORD *)(v2 + 152))
    {
      v29 = 4;
      v28 = (_QWORD *)(v2 + 152);
    }
    else
    {
      if (!v28)
      {
LABEL_65:
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2 + 136);
        *(_QWORD *)(v2 + 88) = off_1E6994AA8;
        *(_QWORD *)(v2 + 16) = off_1E6994770;
        if (*(_BYTE *)(v2 + 128) && *(char *)(v2 + 127) < 0)
          operator delete(*(void **)(v2 + 104));
        DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)(v2 + 88));
        *(_QWORD *)(v2 + 40) = off_1E6994AA8;
        if (*(_BYTE *)(v2 + 80) && *(char *)(v2 + 79) < 0)
          operator delete(*(void **)(v2 + 56));
        DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)(v2 + 40));
        *(_QWORD *)(v2 + 16) = off_1E6994C88;
        std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100](v2 + 24);
        JUMPOUT(0x1B5E50688);
      }
      v29 = 5;
    }
    (*(void (**)(void))(*v28 + 8 * v29))();
    goto LABEL_65;
  }
  return result;
}

uint64_t ___ZN26HALS_IOContext_Legacy_Impl18SetVolumeForEngineEP13HALS_IOEnginebf_block_invoke(uint64_t result)
{
  uint64_t v1;
  float v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;

  v1 = *(_QWORD *)(result + 32);
  v2 = *(float *)(result + 48);
  v3 = *(uint64_t **)(v1 + 1528);
  v4 = *(uint64_t **)(v1 + 1536);
  if (v3 != v4)
  {
    while (*(_QWORD *)(*v3 + 8) != *(_QWORD *)(result + 40))
    {
      if (++v3 == v4)
        return result;
    }
  }
  if (v3 != v4)
  {
    v5 = *v3;
    if (v5)
    {
      if (*(_QWORD *)(v5 + 8))
      {
        v6 = 0;
        v7 = v5 + 24 * *(unsigned __int8 *)(result + 52);
        v8 = *(_QWORD *)(v7 + 704);
        v9 = *(_QWORD *)(v7 + 696);
        v10 = v8 - v9;
        if (v2 < 0.0)
          v2 = 0.0;
        if (v2 > 1.0)
          v2 = 1.0;
        v11 = (v10 >> 3);
        while (v11 != v6)
        {
          v12 = *(_QWORD *)(*(_QWORD *)(v9 + 8 * v6) + 112);
          if (v12)
          {
            v13 = round(*(double *)(v5 + 768) * 0.05);
            *(_QWORD *)(v12 + 32) = 0;
            if (v13 < 1.0)
              v13 = 1.0;
            v14 = floor(v13);
            *(double *)(v12 + 40) = v14;
            *(float *)&v14 = (float)(v2 - *(float *)(v12 + 20)) / v14;
            *(float *)(v12 + 24) = v2;
            *(_DWORD *)(v12 + 28) = LODWORD(v14);
          }
          ++v6;
        }
      }
    }
  }
  return result;
}

uint64_t ___ZN26HALS_IOContext_Legacy_Impl19RampVolumeForEngineEP13HALS_IOEnginebfdd_block_invoke(uint64_t result)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  double v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  float v16;

  v1 = *(_QWORD *)(result + 32);
  v2 = *(float *)(result + 64);
  v3 = *(_QWORD *)(result + 48);
  v4 = *(double *)(result + 56);
  v5 = *(uint64_t **)(v1 + 1528);
  v6 = *(uint64_t **)(v1 + 1536);
  if (v5 != v6)
  {
    while (*(_QWORD *)(*v5 + 8) != *(_QWORD *)(result + 40))
    {
      if (++v5 == v6)
        return result;
    }
  }
  if (v5 != v6)
  {
    v7 = *v5;
    if (*v5)
    {
      v8 = 0;
      v9 = v7 + 24 * *(unsigned __int8 *)(result + 68);
      v10 = *(_QWORD *)(v9 + 704);
      v11 = *(_QWORD *)(v9 + 696);
      v12 = v10 - v11;
      if (v4 < 1.0)
        v4 = 1.0;
      v13 = floor(v4);
      if (v2 < 0.0)
        v2 = 0.0;
      if (v2 > 1.0)
        v2 = 1.0;
      v14 = (v12 >> 3);
      while (v14 != v8)
      {
        v15 = *(_QWORD *)(*(_QWORD *)(v11 + 8 * v8) + 112);
        if (v15)
        {
          *(_QWORD *)(v15 + 32) = v3;
          *(double *)(v15 + 40) = v13;
          v16 = (float)(v2 - *(float *)(v15 + 20)) / v13;
          *(float *)(v15 + 24) = v2;
          *(float *)(v15 + 28) = v16;
        }
        ++v8;
      }
    }
  }
  return result;
}

uint64_t HALS_IOContext_Legacy_Impl::IOWorkLoop_CalculateOverloadTime(uint64_t result, unsigned int a2, AudioTimeStamp *a3, double a4)
{
  uint64_t v4;
  AudioTimeStamp v5;

  memset(&v5.mHostTime, 0, 48);
  *(_QWORD *)&v5.mFlags = 1;
  v4 = *(_QWORD *)(result + 1520);
  if (v4)
  {
    v5.mSampleTime = *(double *)(v4 + 360)
                   + (double)*(uint64_t *)(result + 1312)
                   + (float)(*(float *)(result + 1328) * (float)a2)
                   + a4;
    if (*(_QWORD *)(v4 + 8))
      return HALS_IOClock::TranslateTime(*(_QWORD *)(v4 + 288), &v5, a3);
  }
  return result;
}

_QWORD *HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines(HALS_IOContext_Legacy_Impl *this, AudioTimeStamp *a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  void (**v5)(FilterIfEngineOnlyNeedsReferenceStream *__hidden);
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned int *)(*((_QWORD *)this + 3) + 16);
  v6[0] = &off_1E6991370;
  v6[1] = a2;
  v6[2] = v2;
  v7 = v6;
  v5 = &off_1E69928C8;
  HALS_IOContext_Legacy_Impl::engine_apply<FilterIfEngineOnlyNeedsReferenceStream>((uint64_t)this, (uint64_t)v6, (uint64_t)&v5);
  result = v7;
  if (v7 == v6)
  {
    v4 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_1B5B6D180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContext_Legacy_Impl::PerformIO(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t *a6)
{
  unint64_t *v11;
  int v12;
  int v13;
  int active;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  __int128 *v20;
  __int128 *v21;
  __int128 *v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  unsigned int v26;
  BOOL v27;
  unint64_t v28;
  unsigned int v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _OWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  __n128 v45;
  UInt64 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  char v50;
  AudioTimeStamp *mWordClockTime;
  uint64_t v52;
  AudioStreamBasicDescription *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  std::__shared_weak_count *mHostTime;
  int v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  unsigned int v78;
  int v79;
  int OutputStackDescriptionForChannel;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  float *v91;
  float *v92;
  int v93;
  float v94;
  float *v95;
  float *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  float v100;
  uint64_t v101;
  int v102;
  __int128 v103;
  __int128 v104;
  AudioTimeStamp *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  BOOL v117;
  __int128 v119;
  __int128 v120;
  HALS_IOContextDescription *v121;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unsigned int v125[2];
  unsigned int v126[2];
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  _QWORD v136[3];
  _QWORD *v137;
  _QWORD v138[3];
  _QWORD *v139;
  _QWORD v140[3];
  _QWORD *v141;
  _QWORD v142[3];
  _QWORD *v143;
  _QWORD v144[3];
  _QWORD *v145;
  AudioTimeStamp v146;
  _QWORD v147[3];
  _QWORD *v148;
  _QWORD v149[3];
  _QWORD *v150;
  _QWORD v151[3];
  _QWORD *v152;
  _QWORD v153[3];
  _QWORD *v154;
  _QWORD v155[2];
  int v156;
  int v157;
  _QWORD *v158;
  AudioStreamBasicDescription v159;
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  v11 = *(unint64_t **)(a1 + 1520);
  *a6 = 0;
  v12 = std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,true,BOOL,std::__identity,0>(*(int8x8_t **)(a1 + 1624), 0, *(_QWORD *)(a1 + 1624) + 8 * (*(_QWORD *)(a1 + 1632) >> 6), *(_QWORD *)(a1 + 1632) & 0x3F, 1);
  v13 = std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,true,BOOL,std::__identity,0>(*(int8x8_t **)(a1 + 1600), 0, *(_QWORD *)(a1 + 1600) + 8 * (*(_QWORD *)(a1 + 1608) >> 6), *(_QWORD *)(a1 + 1608) & 0x3F, 1);
  v155[0] = &off_1E6990AF0;
  v155[1] = a1;
  v156 = a4;
  v157 = a3;
  v158 = v155;
  *(_QWORD *)&v146.mSampleTime = &off_1E6992908;
  active = HALS_IOContext_Legacy_Impl::engine_apply<FilterClocklessReferenceStreamOnlyEngines>(a1, (uint64_t)v155, (uint64_t)&v146);
  v15 = v158;
  if (v158 == v155)
  {
    v16 = 4;
    v15 = v155;
    goto LABEL_5;
  }
  if (v158)
  {
    v16 = 5;
LABEL_5:
    (*(void (**)(void))(*v15 + 8 * v16))();
  }
  v17 = 1;
  if (active || !v11)
    goto LABEL_176;
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 64);
  v19 = *(unsigned __int8 *)(v18 + 40);
  if (*(_BYTE *)(v18 + 40))
  {
    v20 = (__int128 *)(a1 + 1104);
    *(_QWORD *)(a1 + 1104) = bswap64(*(_QWORD *)a2);
    *(_QWORD *)(a1 + 1112) = bswap64(*(_QWORD *)(a2 + 8));
    *(_QWORD *)(a1 + 1120) = bswap64(*(_QWORD *)(a2 + 16));
    *(_DWORD *)(a1 + 1160) = bswap32(*(_DWORD *)(a2 + 56));
    v21 = (__int128 *)(a1 + 1168);
    *(_QWORD *)(a1 + 1168) = bswap64(v11[64]);
    *(_QWORD *)(a1 + 1176) = bswap64(v11[65]);
    *(_QWORD *)(a1 + 1184) = bswap64(*(_QWORD *)(a2 + 16));
    *(_DWORD *)(a1 + 1224) = bswap32(*(_DWORD *)(a2 + 56));
    v22 = (__int128 *)(a1 + 1232);
    *(_QWORD *)(a1 + 1232) = bswap64(v11[72]);
    v23 = bswap64(v11[73]);
  }
  else
  {
    v20 = (__int128 *)(a1 + 1104);
    *(_QWORD *)(a1 + 1104) = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 1112) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 1120) = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 1160) = *(_DWORD *)(a2 + 56);
    v21 = (__int128 *)(a1 + 1168);
    *(_QWORD *)(a1 + 1168) = v11[64];
    *(_QWORD *)(a1 + 1176) = v11[65];
    *(_QWORD *)(a1 + 1184) = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 1224) = *(_DWORD *)(a2 + 56);
    v22 = (__int128 *)(a1 + 1232);
    *(_QWORD *)(a1 + 1232) = v11[72];
    v23 = v11[73];
  }
  v24 = v12 == 0;
  *(_QWORD *)(a1 + 1240) = v23;
  v25 = bswap64(*(_QWORD *)(a2 + 16));
  v26 = bswap32(*(_DWORD *)(a2 + 56));
  v27 = v19 == 0;
  if (v19)
    v28 = v25;
  else
    v28 = *(_QWORD *)(a2 + 16);
  if (v27)
    v29 = *(_DWORD *)(a2 + 56);
  else
    v29 = v26;
  *(_QWORD *)(a1 + 1248) = v28;
  *(_DWORD *)(a1 + 1288) = v29;
  v30 = *(_OWORD **)(a1 + 1096);
  v31 = *v20;
  v32 = v20[1];
  v33 = v20[3];
  v30[8] = v20[2];
  v30[9] = v33;
  v30[6] = v31;
  v30[7] = v32;
  v34 = *(_OWORD **)(a1 + 1096);
  v35 = *v21;
  v36 = v21[1];
  v37 = v21[3];
  v34[12] = v21[2];
  v34[13] = v37;
  v34[10] = v35;
  v34[11] = v36;
  v38 = *(_OWORD **)(a1 + 1096);
  v39 = *v22;
  v40 = v22[1];
  v41 = v22[3];
  v38[16] = v22[2];
  v38[17] = v41;
  v38[14] = v39;
  v38[15] = v40;
  OSMemoryBarrier();
  v121 = (HALS_IOContextDescription *)(a1 + 1496);
  if (v24 || !*(_BYTE *)(a1 + 1376) && !*(_BYTE *)(a1 + 1377))
    goto LABEL_73;
  v42 = (a3 << 32) | *(unsigned int *)(*(_QWORD *)(a1 + 24) + 16);
  v153[0] = &off_1E6990B70;
  v153[1] = HALS_IOPerformer::begin_reading;
  v153[2] = v42;
  v154 = v153;
  *(_QWORD *)&v146.mSampleTime = &off_1E6992908;
  active = HALS_IOContext_Legacy_Impl::engine_apply<FilterClocklessReferenceStreamOnlyEngines>(a1, (uint64_t)v153, (uint64_t)&v146);
  v43 = v154;
  if (v154 == v153)
  {
    v44 = 4;
    v43 = v153;
  }
  else
  {
    if (!v154)
      goto LABEL_25;
    v44 = 5;
  }
  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_25:
  if (active)
    goto LABEL_176;
  v151[0] = &off_1E6990C08;
  v151[1] = a1;
  v151[2] = a3;
  v152 = v151;
  *(_QWORD *)v126 = &off_1E6996540;
  v127 = a1 + 1496;
  *(_QWORD *)v125 = &off_1E698F788;
  *(_QWORD *)&v159.mBytesPerFrame = &v159;
  v45 = std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_1,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_1>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone((uint64_t)v151, (uint64_t)&v159);
  v46 = *(_QWORD *)&v159.mBytesPerFrame;
  if (!*(_QWORD *)&v159.mBytesPerFrame)
    goto LABEL_29;
  if (*(AudioStreamBasicDescription **)&v159.mBytesPerFrame != &v159)
  {
    v46 = (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)&v159.mBytesPerFrame + 16))(*(_QWORD *)&v159.mBytesPerFrame, v45);
LABEL_29:
    v146.mWordClockTime = v46;
    goto LABEL_31;
  }
  v146.mWordClockTime = (UInt64)&v146;
  (*(void (**)(AudioStreamBasicDescription *, AudioTimeStamp *, __n128))(*(_QWORD *)&v159.mSampleRate + 24))(&v159, &v146, v45);
LABEL_31:
  v47 = *(_QWORD *)(a1 + 1552);
  v48 = *(_QWORD *)(a1 + 1560);
  if (v47 == v48)
  {
LABEL_41:
    active = 0;
  }
  else
  {
    v49 = 0;
    v50 = 1;
    while (1)
    {
      if ((v50 & 1) != 0)
        v49 = 0;
      else
        v49 = (uint64_t *)((char *)v49 + 1);
      v132 = v47;
      v133 = v49;
      if (((*(uint64_t (**)(unsigned int *, uint64_t *, __n128))(*(_QWORD *)v126 + 16))(v126, &v132, v45) & 1) == 0
        && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v125 + 16))((uint64_t)v125, (uint64_t)&v132) & 1) == 0)
      {
        v128 = v47;
        v129 = v49;
        if (!v146.mWordClockTime)
          std::__throw_bad_function_call[abi:ne180100]();
        active = (*(uint64_t (**)(UInt64, uint64_t *))(*(_QWORD *)v146.mWordClockTime + 48))(v146.mWordClockTime, &v128);
        if (active)
          break;
      }
      v50 = 0;
      v47 += 424;
      if (v47 == v48)
        goto LABEL_41;
    }
  }
  mWordClockTime = (AudioTimeStamp *)v146.mWordClockTime;
  if ((AudioTimeStamp *)v146.mWordClockTime == &v146)
  {
    v52 = 4;
    mWordClockTime = &v146;
  }
  else
  {
    if (!v146.mWordClockTime)
      goto LABEL_47;
    v52 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)&mWordClockTime->mSampleTime + 8 * v52))();
LABEL_47:
  v53 = *(AudioStreamBasicDescription **)&v159.mBytesPerFrame;
  if (*(AudioStreamBasicDescription **)&v159.mBytesPerFrame == &v159)
  {
    v54 = 4;
    v53 = &v159;
  }
  else
  {
    if (!*(_QWORD *)&v159.mBytesPerFrame)
      goto LABEL_52;
    v54 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)&v53->mSampleRate + 8 * v54))();
LABEL_52:
  v55 = v152;
  if (v152 == v151)
  {
    v56 = 4;
    v55 = v151;
  }
  else
  {
    if (!v152)
      goto LABEL_57;
    v56 = 5;
  }
  (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_57:
  if (active)
  {
LABEL_70:
    v17 = 1;
    goto LABEL_176;
  }
  v57 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 16);
  v149[0] = &off_1E6990C88;
  v149[1] = HALS_IOPerformer::end_reading;
  v149[2] = v57;
  v150 = v149;
  *(_QWORD *)&v146.mSampleTime = &off_1E6992908;
  active = HALS_IOContext_Legacy_Impl::engine_apply<FilterClocklessReferenceStreamOnlyEngines>(a1, (uint64_t)v149, (uint64_t)&v146);
  v58 = v150;
  if (v150 == v149)
  {
    v59 = 4;
    v58 = v149;
  }
  else
  {
    if (!v150)
      goto LABEL_63;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_63:
  if (active)
    goto LABEL_70;
  v147[0] = &off_1E6990D38;
  v147[1] = a1;
  v147[2] = a3;
  v148 = v147;
  *(_QWORD *)&v146.mSampleTime = &off_1E698F788;
  active = HALS_IOContextDescription::ApplyToInput<HALS_IOStreamGroup::FilterClocklessReferenceStreamOnlyEngines>((uint64_t)v121, (uint64_t)v147, (uint64_t)&v146);
  v60 = v148;
  if (v148 == v147)
  {
    v61 = 4;
    v60 = v147;
    goto LABEL_68;
  }
  if (v148)
  {
    v61 = 5;
LABEL_68:
    (*(void (**)(void))(*v60 + 8 * v61))();
  }
  if (active)
    goto LABEL_70;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 64) + 40))
    HALS_IOContextDescription::EndianSwapSharedBuffers(v121, 1, a3);
LABEL_73:
  v62 = mach_absolute_time();
  if (HALS_IOContext::CallClientIOProc(*(HALS_IOContext **)(a1 + 24), *(_DWORD *)(a1 + 1304), a3, *(unsigned __int8 *)(a1 + 1337)) == 1)*(_BYTE *)(a1 + 289) = 1;
  v63 = v13 != 0;
  v64 = mach_absolute_time();
  v65 = __udivti3();
  if (v64 >= v62)
    v66 = v65;
  else
    v66 = -v65;
  *a6 = v66;
  v67 = !v63;
  if (a5)
    v67 = 1;
  if ((v67 & 1) != 0)
  {
    v17 = 1;
    goto LABEL_84;
  }
  if ((HALB_IOThread::HasBeenStopped((HALB_IOThread *)(a1 + 312)) & 1) != 0)
  {
    HALS_IOContextDescription::ClearSharedBuffers(v121, 0, *(_DWORD *)(a1 + 1320));
    v17 = 0;
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 64) + 40))
      HALS_IOContextDescription::EndianSwapSharedBuffers(v121, 0, a3);
    v17 = 1;
  }
  v123 = 0;
  v124 = 0;
  HALS_System::GetInstance(&v146, 0, &v123);
  mHostTime = (std::__shared_weak_count *)v146.mHostTime;
  v72 = *(unsigned __int8 *)(*(_QWORD *)&v146.mSampleTime + 1224);
  if (v146.mHostTime)
  {
    v73 = (unint64_t *)(v146.mHostTime + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))mHostTime->__on_zero_shared)(mHostTime);
      std::__shared_weak_count::__release_weak(mHostTime);
    }
  }
  v75 = v124;
  if (v124)
  {
    p_shared_owners = (unint64_t *)&v124->__shared_owners_;
    do
      v77 = __ldaxr(p_shared_owners);
    while (__stlxr(v77 - 1, p_shared_owners));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (v72)
  {
    v78 = *(_DWORD *)(a1 + 1968) - 1;
    v79 = *(_DWORD *)(a1 + 1972);
    LODWORD(v132) = 0;
    v134 = 0;
    v135 = 0;
    v133 = 0;
    v126[0] = 0;
    memset(&v146, 0, 40);
    OutputStackDescriptionForChannel = HALS_IOContextDescription::GetOutputStackDescriptionForChannel(v121, v78, (HALS_IOStackDescription *)&v132, v126);
    if (OutputStackDescriptionForChannel)
      HALS_IOStackDescription::GetFormat((HALS_IOStackDescription *)&v132, (AudioStreamBasicDescription *)&v146);
    if (v134 == v133)
    {
      v81 = 0;
    }
    else if (-1944890851 * ((unint64_t)(v133[1] - *v133) >> 3))
    {
      v81 = *v133;
    }
    else
    {
      v81 = 0;
    }
    LODWORD(v128) = 0;
    v130 = 0;
    v131 = 0;
    v129 = 0;
    v125[0] = 0;
    memset(&v159, 0, sizeof(v159));
    v82 = HALS_IOContextDescription::GetOutputStackDescriptionForChannel(v121, v79 - 1, (HALS_IOStackDescription *)&v128, v125);
    if (v82)
      HALS_IOStackDescription::GetFormat((HALS_IOStackDescription *)&v128, &v159);
    if (v130 == v129)
    {
      v83 = 0;
    }
    else
    {
      v83 = *v129;
      if (!(-1944890851 * ((unint64_t)(v129[1] - *v129) >> 3)))
        v83 = 0;
    }
    if (LODWORD(v146.mHostTime) == 1819304813)
      v84 = OutputStackDescriptionForChannel;
    else
      v84 = 0;
    if (v84 == 1)
    {
      v85 = *(_QWORD *)(v81 + 56);
      if (v85)
      {
        v86 = v159.mFormatID == 1819304813 ? v82 : 0;
        if (v86 == 1)
        {
          v87 = *(_QWORD *)(v83 + 56);
          if (v87)
          {
            if (!*(_DWORD *)(v81 + 108) || (v88 = *(uint64_t **)(v81 + 112), *(uint64_t **)(v81 + 120) == v88) || !v88)
              v88 = (uint64_t *)(v81 + 408);
            v89 = *v88;
            if (!*(_DWORD *)(v83 + 108) || (v90 = *(_QWORD *)(v83 + 112), *(_QWORD *)(v83 + 120) == v90) || !v90)
              v90 = v83 + 408;
            v91 = (float *)(v85 + *(unsigned int *)(v89 + 308));
            v92 = (float *)(v87 + *(unsigned int *)(*(_QWORD *)v90 + 308));
            if (v91 == v92 && HIDWORD(v146.mWordClockTime) == 2)
            {
              if ((_DWORD)a3)
              {
                v93 = a3;
                do
                {
                  v94 = (float)(*v91 + v91[1]) * 0.5;
                  *v91 = v94;
                  v91[1] = v94;
                  v91 += 2;
                  --v93;
                }
                while (v93);
              }
            }
            else if ((_DWORD)a3)
            {
              v95 = &v92[v125[0]];
              v96 = &v91[v126[0]];
              v97 = 4 * v159.mChannelsPerFrame;
              v98 = 4 * HIDWORD(v146.mWordClockTime);
              v99 = a3;
              do
              {
                v100 = (float)(*v96 + *v95) * 0.5;
                *v96 = v100;
                *v95 = v100;
                v95 = (float *)((char *)v95 + v97);
                v96 = (float *)((char *)v96 + v98);
                --v99;
              }
              while (v99);
            }
          }
        }
      }
    }
    *(_QWORD *)&v159.mSampleRate = &v129;
    std::vector<HALS_IOStreamGroup>::__destroy_vector::operator()[abi:ne180100]((void ***)&v159);
    *(_QWORD *)&v146.mSampleTime = &v133;
    std::vector<HALS_IOStreamGroup>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
  }
  v101 = mach_absolute_time();
  v102 = *(unsigned __int8 *)(a1 + 1378);
  if (*(_BYTE *)(a1 + 1378))
  {
    v103 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&v146.mSampleTime = *(_OWORD *)a2;
    *(_OWORD *)&v146.mRateScalar = v103;
    v104 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v146.mSMPTETime.mSubframes = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v146.mSMPTETime.mHours = v104;
    HALS_IOContext_Legacy_Impl::ProcessOutputForTaps(a1, a3, &v146);
  }
  v144[0] = &off_1E6990DB8;
  v144[1] = a1;
  v144[2] = a3;
  v145 = v144;
  *(_QWORD *)&v146.mSampleTime = &off_1E698F688;
  v146.mHostTime = (UInt64)v144;
  v146.mWordClockTime = (UInt64)&v146;
  *(_QWORD *)&v159.mSampleRate = &off_1E6996590;
  *(_QWORD *)&v159.mFormatID = a1 + 1496;
  active = HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>((uint64_t)v121, (uint64_t)&v146, (uint64_t)&v159);
  v105 = (AudioTimeStamp *)v146.mWordClockTime;
  if ((AudioTimeStamp *)v146.mWordClockTime == &v146)
  {
    v106 = 4;
    v105 = &v146;
  }
  else
  {
    if (!v146.mWordClockTime)
      goto LABEL_152;
    v106 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)&v105->mSampleTime + 8 * v106))();
LABEL_152:
  v107 = v145;
  if (v145 == v144)
  {
    v108 = 4;
    v107 = v144;
  }
  else
  {
    if (!v145)
      goto LABEL_157;
    v108 = 5;
  }
  (*(void (**)(void))(*v107 + 8 * v108))();
LABEL_157:
  if (active)
    goto LABEL_176;
  v109 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 16);
  v142[0] = &off_1E6990C88;
  v142[1] = HALS_IOPerformer::begin_writing;
  v142[2] = v109;
  v143 = v142;
  *(_QWORD *)&v146.mSampleTime = &off_1E6992908;
  active = HALS_IOContext_Legacy_Impl::engine_apply<FilterClocklessReferenceStreamOnlyEngines>(a1, (uint64_t)v142, (uint64_t)&v146);
  v110 = v143;
  if (v143 == v142)
  {
    v111 = 4;
    v110 = v142;
  }
  else
  {
    if (!v143)
      goto LABEL_163;
    v111 = 5;
  }
  (*(void (**)(void))(*v110 + 8 * v111))();
LABEL_163:
  if (active)
    goto LABEL_176;
  v140[0] = &off_1E6990E38;
  v140[1] = a1;
  v140[2] = a3;
  v141 = v140;
  active = HALS_IOContextDescription::ApplyToActiveOutput_ButSkipClocklessReferenceStreamOnlyEngines((uint64_t)v121, (uint64_t)v140);
  v112 = v141;
  if (v141 == v140)
  {
    v113 = 4;
    v112 = v140;
  }
  else
  {
    if (!v141)
      goto LABEL_169;
    v113 = 5;
  }
  (*(void (**)(void))(*v112 + 8 * v113))();
LABEL_169:
  if (active)
    goto LABEL_176;
  v114 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 16);
  v138[0] = &off_1E6990C88;
  v138[1] = HALS_IOPerformer::end_writing;
  v138[2] = v114;
  v139 = v138;
  *(_QWORD *)&v146.mSampleTime = &off_1E6992908;
  active = HALS_IOContext_Legacy_Impl::engine_apply<FilterClocklessReferenceStreamOnlyEngines>(a1, (uint64_t)v138, (uint64_t)&v146);
  v115 = v139;
  if (v139 == v138)
  {
    v116 = 4;
    v115 = v138;
    goto LABEL_174;
  }
  if (v139)
  {
    v116 = 5;
LABEL_174:
    (*(void (**)(void))(*v115 + 8 * v116))();
  }
  if (active)
    goto LABEL_176;
  if (!v102)
  {
    v119 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&v146.mSampleTime = *(_OWORD *)a2;
    *(_OWORD *)&v146.mRateScalar = v119;
    v120 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v146.mSMPTETime.mSubframes = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v146.mSMPTETime.mHours = v120;
    HALS_IOContext_Legacy_Impl::ProcessOutputForTaps(a1, a3, &v146);
  }
  *(double *)(a1 + 1456) = (double)(uint64_t)(mach_absolute_time() - v101) * 0.0000000416666667;
LABEL_84:
  v68 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 16);
  v136[0] = &off_1E6990C88;
  v136[1] = HALS_IOPerformer::end_io_cycle;
  v136[2] = v68;
  v137 = v136;
  *(_QWORD *)&v146.mSampleTime = &off_1E69928C8;
  active = HALS_IOContext_Legacy_Impl::engine_apply<FilterIfEngineOnlyNeedsReferenceStream>(a1, (uint64_t)v136, (uint64_t)&v146);
  v69 = v137;
  if (v137 == v136)
  {
    v70 = 4;
    v69 = v136;
  }
  else
  {
    if (!v137)
      goto LABEL_176;
    v70 = 5;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_176:
  if (v11)
    v117 = active == 0;
  else
    v117 = 0;
  if (v117)
    return v17;
  else
    return 0;
}

void sub_1B5B6DE40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char *a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  char *v60;
  char *v62;
  uint64_t v63;

  v62 = a32;
  if (a32 == v60)
  {
    v63 = 4;
    v62 = &a29;
  }
  else
  {
    if (!a32)
      goto LABEL_6;
    v63 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v62 + 8 * v63))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContext_Legacy_Impl::ConfigureThreadForRealtimePriority(_opaque_pthread_t **this, unsigned int a2)
{
  uint64_t result;
  BOOL v4;
  unint64_t v5;

  v5 = 0;
  v4 = 0;
  result = HALS_IOContext_Legacy_Impl::GetRealtimePriorityThreadParameters((HALS_IOContext_Legacy_Impl *)this, a2, &v5, &v4);
  if (!(_DWORD)result)
  {
    HALB_IOThread::ConfigureThreadForRealtimePriority(this + 39, (_opaque_pthread_t *)v5, v4);
    return 0;
  }
  return result;
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoop_HandleBufferSizeChanged(CAAudioTimeStamp &,unsigned int,unsigned int,long long &)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoop_HandleBufferSizeChanged(CAAudioTimeStamp &,unsigned int,unsigned int,long long &)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 2080;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Failed to update realtime priority parameters with code: %d - %s", buf, 0x28u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoop_HandleBufferSizeChanged(CAAudioTimeStamp &,unsigned int,unsigned int,long long &)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoop_HandleBufferSizeChanged(CAAudioTimeStamp &,unsigned int,unsigned int,long long &)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

uint64_t HALS_IOContext_Legacy_Impl::engine_apply<FilterClocklessReferenceStreamOnlyEngines>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void (**v17)(FilterEngineInfoWithoutEngine *__hidden);
  _QWORD v18[2];
  _QWORD *v19[2];
  _BYTE v20[24];
  _BYTE *v21;
  _QWORD v22[3];
  _QWORD *v23;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v20, a2);
  v17 = &off_1E6992878;
  v22[0] = &off_1E6990A70;
  v22[1] = v20;
  v23 = v22;
  v25 = v24;
  std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::__clone((uint64_t)v22, v24);
  v5 = *(_QWORD **)(a1 + 1528);
  v6 = *(_QWORD **)(a1 + 1536);
  if (v5 == v6)
  {
LABEL_11:
    v9 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 1;
    while (1)
    {
      if ((v8 & 1) != 0)
        v7 = 0;
      else
        v7 = (_QWORD *)((char *)v7 + 1);
      v19[0] = v5;
      v19[1] = v7;
      if ((((uint64_t (*)(uint64_t, _QWORD **))v17[2])((uint64_t)&v17, v19) & 1) == 0
        && ((*(uint64_t (**)(uint64_t, _QWORD **))(*(_QWORD *)a3 + 16))(a3, v19) & 1) == 0)
      {
        v18[0] = v5;
        v18[1] = v7;
        if (!v25)
          std::__throw_bad_function_call[abi:ne180100]();
        v9 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v25 + 48))(v25, v18);
        if ((_DWORD)v9)
          break;
      }
      v8 = 0;
      if (++v5 == v6)
        goto LABEL_11;
    }
  }
  v10 = v25;
  if (v25 == v24)
  {
    v11 = 4;
    v10 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_17;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_17:
  v12 = v23;
  if (v23 == v22)
  {
    v13 = 4;
    v12 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_22;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_22:
  v14 = v21;
  if (v21 == v20)
  {
    v15 = 4;
    v14 = v20;
    goto LABEL_26;
  }
  if (v21)
  {
    v15 = 5;
LABEL_26:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  return v9;
}

void sub_1B5B6E428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContextDescription::ApplyToInput<HALS_IOStreamGroup::FilterClocklessReferenceStreamOnlyEngines>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[3];
  _QWORD *v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v18, a2);
  v5 = (uint64_t)v19;
  if (!v19)
    goto LABEL_4;
  if (v19 != v18)
  {
    v5 = (*(uint64_t (**)(void))(*v19 + 16))();
LABEL_4:
    v21 = (_BYTE *)v5;
    goto LABEL_6;
  }
  v21 = v20;
  (*(void (**)(_QWORD *, _BYTE *))(v18[0] + 24))(v18, v20);
LABEL_6:
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  if (v6 == v7)
  {
LABEL_15:
    v10 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
    while (1)
    {
      if ((v9 & 1) != 0)
        v8 = 0;
      else
        ++v8;
      v17[0] = v6;
      v17[1] = v8;
      if (((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a3 + 16))(a3, v17) & 1) == 0)
      {
        v16[0] = v6;
        v16[1] = v8;
        if (!v21)
          std::__throw_bad_function_call[abi:ne180100]();
        v10 = (*(uint64_t (**)(_BYTE *, _QWORD *))(*(_QWORD *)v21 + 48))(v21, v16);
        if ((_DWORD)v10)
          break;
      }
      v9 = 0;
      v6 += 424;
      if (v6 == v7)
        goto LABEL_15;
    }
  }
  v11 = v21;
  if (v21 == v20)
  {
    v12 = 4;
    v11 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_21;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_21:
  v13 = v19;
  if (v19 == v18)
  {
    v14 = 4;
    v13 = v18;
    goto LABEL_25;
  }
  if (v19)
  {
    v14 = 5;
LABEL_25:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return v10;
}

void sub_1B5B6E65C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  char *v22;
  uint64_t v23;

  v22 = a17;
  if (a17 == &a14)
  {
    v23 = 4;
    v22 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContext_Legacy_Impl::ProcessOutputForTaps(uint64_t result, unsigned int a2, const AudioTimeStamp *a3)
{
  uint64_t *v3;
  unsigned int v4;
  uint64_t v5;
  HALS_IOContextDescription *v6;
  unsigned __int8 v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  _BOOL4 v21;
  uint64_t v22;
  vDSP_Length v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  std::logic_error_vtbl *v29;
  const char *v30;
  caulk::rt_safe_memory_resource *v31;
  uint64_t v32;
  unint64_t v33;
  size_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _DWORD *v48;
  unsigned int *v49;
  uint64_t *v50;
  float *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  const float *v63;
  unint64_t v64;
  char *v65;
  std::logic_error_vtbl *v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  const float *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  OpaqueAudioConverter *v75;
  uint64_t v76;
  int v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  double v81;
  double v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  unint64_t v90;
  _BOOL4 v91;
  char v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  AMCP::Log::Scope_Registry *v100;
  unsigned int v101;
  caulk::concurrent::messenger *v102;
  _opaque_pthread_t *v103;
  mach_port_t v104;
  unsigned int v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  double v111;
  uint64_t *v112;
  uint64_t *v113;
  std::logic_error_vtbl *v114;
  double *v115;
  double v116;
  double v117;
  int v118;
  uint64_t *v119;
  uint64_t v120;
  unsigned int *v121;
  uint64_t v122;
  uint64_t v123;
  int64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *p_shared_owners;
  unint64_t v133;
  caulk::concurrent::messenger *v134;
  _opaque_pthread_t *v135;
  mach_port_t v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  NSObject *v141;
  _opaque_pthread_t *v142;
  mach_port_t v143;
  void *v144;
  NSObject *v145;
  _opaque_pthread_t *v146;
  mach_port_t v147;
  std::logic_error *exception;
  int64_t v149;
  uint64_t *v151;
  uint64_t v152;
  unsigned int v153;
  int v154;
  HALS_IOContextDescription *v155;
  uint64_t v156;
  void *__dst;
  vDSP_Length v158;
  __int128 v159;
  uint64_t (*v160)();
  vDSP_Length __N;
  vDSP_Stride v162;
  __int128 v163;
  uint64_t v164;
  uint64_t (**v165)();
  __int128 v166;
  uint64_t v167;
  std::string v168;
  std::logic_error v169;
  std::logic_error v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  char v176;
  unsigned int v177;
  unsigned int v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  uint64_t v181;
  BOOL v182;
  uint64_t (***__B)();
  __int128 v184;
  __int128 v185;
  const char *v186;
  int v187;
  std::__shared_weak_count *v188;
  uint64_t v189;

  v189 = *MEMORY[0x1E0C80C00];
  v3 = *(uint64_t **)(result + 1992);
  if (v3)
  {
    v4 = a2;
    v5 = result;
    v6 = (HALS_IOContextDescription *)(result + 1496);
    v149 = a2;
    __asm { FMOV            V10.2S, #1.0 }
    v155 = (HALS_IOContextDescription *)(result + 1496);
    while (!*((_BYTE *)v3 + 40))
    {
LABEL_156:
      v3 = (uint64_t *)*v3;
      if (!v3)
        return result;
    }
    v12 = atomic_load((unsigned __int8 *)v3 + 41);
    if ((v12 & 1) == 0 && *((_BYTE *)v3 + 40))
    {
      HALS_MultiTap::writer_anchor_time((HALS_MultiTap *)v3[3], *(_DWORD *)(*(_QWORD *)(v5 + 24) + 16), a3);
      atomic_store(1u, (unsigned __int8 *)v3 + 41);
    }
    v13 = (_DWORD *)v3[6];
    v14 = *v13;
    if (v14 != (unint64_t)(v3[7] - (_QWORD)v13 - 8) >> 4)
      goto LABEL_164;
    if ((_DWORD)v14)
    {
      v15 = 0;
      v16 = 0;
      while (1)
      {
        HALS_IOContextDescription::GetStreamInfoAtIndex(v6, 0, v16, (uint64_t)&__B);
        v13 = (_DWORD *)v3[6];
        v17 = &v13[v15];
        v13[v15 + 2] = HIDWORD(v186);
        v18 = (_DWORD)v186 * v4;
        if ((_DWORD)v185 != 1819304813)
          v18 = DWORD2(v185);
        v17[3] = v18;
        *((_QWORD *)v17 + 2) = HALS_IOContextDescription::GetIOBufferForStreamAtIndex(v6, 0, v16);
        v19 = *v13;
        if (v19 != (unint64_t)(v3[7] - (_QWORD)v13 - 8) >> 4)
          break;
        ++v16;
        v15 += 4;
        if (v16 >= v19)
          goto LABEL_14;
      }
LABEL_164:
      __assert_rtn("GetNumberBuffers", "CoreAudioBaseTypes.hpp", 1096, "GetAudioBufferList().mNumberBuffers == (mStorage.size() - kHeaderSize) / sizeof(AudioBuffer)");
    }
LABEL_14:
    v20 = *(_DWORD *)(*(_QWORD *)(v5 + 24) + 16);
    v156 = v3[3];
    v181 = v156 + 152;
    v21 = std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)(v156 + 152));
    v182 = v21;
    v6 = v155;
    if (!v21)
    {
LABEL_155:
      result = std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v181);
      goto LABEL_156;
    }
    HALS_MultiTap::fetch_writer_state((HALS_MultiTap *)&v179, v156, v20);
    v22 = v179;
    if (!v179 || (__dst = *(void **)(v179 + 144)) == 0 || !*(_QWORD *)(v179 + 152))
    {
LABEL_150:
      v131 = v180;
      if (v180)
      {
        p_shared_owners = (unint64_t *)&v180->__shared_owners_;
        do
          v133 = __ldaxr(p_shared_owners);
        while (__stlxr(v133 - 1, p_shared_owners));
        if (!v133)
        {
          ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
          std::__shared_weak_count::__release_weak(v131);
        }
      }
      goto LABEL_155;
    }
    v23 = v149;
    if (v149 >= *(_QWORD *)(v179 + 136))
      v23 = *(_QWORD *)(v179 + 136);
    v24 = v156;
    __N = v23;
    bzero(__dst, v23 * *(unsigned int *)(v156 + 48));
    if (*(_DWORD *)(v22 + 40) == 2 && *(_QWORD *)(v22 + 120) == 1)
    {
      memcpy(__dst, *(const void **)&v13[4 * *(_QWORD *)(v22 + 112) + 4], v13[4 * *(_QWORD *)(v22 + 112) + 3]);
    }
    else
    {
      v26 = *(_DWORD *)(v156 + 48);
      v162 = *(unsigned int *)(v156 + 52);
      v27 = *v13;
      v170.__vftable = 0;
      v170.__imp_.__imp_ = 0;
      v171 = 0;
      __B = (uint64_t (***)())&v170;
      LOBYTE(v184) = 0;
      if (!*MEMORY[0x1E0DDB4F0])
LABEL_178:
        __break(1u);
      v28 = (16 * v27) | 8;
      v29 = (std::logic_error_vtbl *)caulk::rt_safe_memory_resource::rt_allocate((caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0]);
      v154 = v26 * __N;
      v30 = (char *)v29 + v28;
      v170.__vftable = v29;
      v171 = (char *)v29 + v28;
      do
      {
        LOBYTE(v29->~logic_error) = 0;
        v29 = (std::logic_error_vtbl *)((char *)v29 + 1);
        --v28;
      }
      while (v28);
      v170.__imp_.__imp_ = v30;
      LODWORD(v170.~logic_error) = v27;
      v165 = 0;
      v166 = 0uLL;
      v31 = (caulk::rt_safe_memory_resource *)*v13;
      if ((_DWORD)v31)
      {
        *((_QWORD *)&v185 + 1) = (char *)&v166 + 8;
        __B = (uint64_t (***)())std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>(v31);
        *(_QWORD *)&v184 = __B;
        *((_QWORD *)&v184 + 1) = __B;
        *(_QWORD *)&v185 = &__B[3 * v32];
        std::vector<caulk::rt_vector<float>,caulk::rt_allocator<caulk::rt_vector<float>>>::__swap_out_circular_buffer(&v165, &__B);
        std::__split_buffer<caulk::rt_vector<float>,caulk::rt_allocator<caulk::rt_vector<float>> &>::~__split_buffer((uint64_t)&__B);
        v158 = __N * v162;
        if (*v13)
        {
          v33 = 0;
          v34 = 4 * __N * v162;
          do
          {
            if (v158)
            {
              if (v158 >> 62)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              if (!*MEMORY[0x1E0DDB4F0])
                goto LABEL_178;
              v35 = (char *)caulk::rt_safe_memory_resource::rt_allocate((caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0]);
              v36 = &v35[4 * v158];
              bzero(v35, v34);
              *(_QWORD *)&v37 = v35;
              *((_QWORD *)&v37 + 1) = &v35[v34];
            }
            else
            {
              v36 = 0;
              v37 = 0uLL;
            }
            v159 = v37;
            v38 = v166;
            if ((unint64_t)v166 >= *((_QWORD *)&v166 + 1))
            {
              v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v166 - (_QWORD)v165) >> 3);
              v41 = v40 + 1;
              if (v40 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v166 + 1) - (_QWORD)v165) >> 3) > v41)
                v41 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v166 + 1) - (_QWORD)v165) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v166 + 1) - (_QWORD)v165) >> 3) >= 0x555555555555555)
                v42 = 0xAAAAAAAAAAAAAAALL;
              else
                v42 = v41;
              *((_QWORD *)&v185 + 1) = (char *)&v166 + 8;
              if (v42)
                v42 = (uint64_t)std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>((caulk::rt_safe_memory_resource *)v42);
              else
                v43 = 0;
              v44 = (char *)(v42 + 24 * v40);
              __B = (uint64_t (***)())v42;
              *(_QWORD *)&v184 = v44;
              *(_QWORD *)&v185 = v42 + 24 * v43;
              *(_OWORD *)v44 = v159;
              *((_QWORD *)v44 + 2) = v36;
              *((_QWORD *)&v184 + 1) = v44 + 24;
              std::vector<caulk::rt_vector<float>,caulk::rt_allocator<caulk::rt_vector<float>>>::__swap_out_circular_buffer(&v165, &__B);
              v39 = v166;
              std::__split_buffer<caulk::rt_vector<float>,caulk::rt_allocator<caulk::rt_vector<float>> &>::~__split_buffer((uint64_t)&__B);
            }
            else
            {
              *(_OWORD *)v166 = v37;
              *(_QWORD *)(v38 + 16) = v36;
              v39 = v38 + 24;
            }
            *(_QWORD *)&v166 = v39;
            v45 = *v13;
            ++v33;
          }
          while (v33 < v45);
          if ((_DWORD)v45)
          {
            v46 = 0;
            v153 = v4;
            v151 = v3;
            v152 = v5;
            do
            {
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v166 - (_QWORD)v165) >> 3) <= v46)
                std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
              v160 = v165[3 * v46];
              if ((_DWORD)v162)
              {
                v47 = 0;
                v48 = &v13[4 * v46];
                v49 = v48 + 2;
                v50 = (uint64_t *)(v48 + 4);
                do
                {
                  v51 = (float *)((char *)v160 + 4 * v47);
                  v52 = *v49;
                  if (!(_DWORD)v52)
                    goto LABEL_65;
                  v53 = 0;
                  v54 = 0;
                  v55 = 0;
                  v56 = 0;
                  do
                  {
                    v57 = *(_QWORD *)(v22 + 48);
                    if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v22 + 56) - v57) >> 4) <= v46)
                      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
                    v59 = (uint64_t *)(v57 + 80 * v46 + 56);
                    v58 = *v59;
                    if (0xAAAAAAAAAAAAAAABLL * ((v59[1] - *v59) >> 3) > v55)
                    {
                      v60 = (uint64_t *)(v58 + v54);
                      v61 = *v60;
                      if (v47 < (v60[1] - *v60) >> 2)
                      {
                        v62 = *v50;
                        LODWORD(__B) = 0;
                        LODWORD(__B) = *(_DWORD *)(v61 + 4 * v47);
                        if (*(float *)&__B != 0.0)
                        {
                          v63 = (const float *)(v62 + v53);
                          if ((v56 & 1) != 0)
                            vDSP_vsma(v63, v52, (const float *)&__B, v51, v162, v51, v162, __N);
                          else
                            vDSP_vsmul(v63, v52, (const float *)&__B, v51, v162, __N);
                          v56 = 1;
                        }
                        v52 = *v49;
                      }
                    }
                    ++v55;
                    v54 += 24;
                    v53 += 4;
                  }
                  while (v55 < v52);
                  if ((v56 & 1) == 0)
                  {
LABEL_65:
                    LODWORD(__B) = 0;
                    vDSP_vfill((const float *)&__B, v51, v162, __N);
                  }
                  ++v47;
                }
                while (v47 != v162);
              }
              v64 = LODWORD(v170.~logic_error);
              if (v64 != (unint64_t)(v170.__imp_.__imp_ - (const char *)v170.__vftable - 8) >> 4)
                __assert_rtn("GetNumberBuffers", "HALS_MultiChannelMixer.cpp", 41, "GetAudioBufferList().mNumberBuffers == (mStorage.size() - kHeaderSize) / sizeof(AudioBuffer)");
              if (v46 >= v64)
              {
                exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(exception, "accessing a RealTimeSafeBufferList with an out-of-range index");
                exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
                __cxa_throw(exception, (struct type_info *)off_1E696A668, (void (*)(void *))MEMORY[0x1E0DE42E0]);
              }
              v65 = (char *)v170.__vftable + 16 * v46;
              v4 = v153;
              *((_DWORD *)v65 + 2) = v162;
              *((_DWORD *)v65 + 3) = v154;
              *((_QWORD *)v65 + 2) = v160;
              ++v46;
              v3 = v151;
              v5 = v152;
            }
            while (v46 < *v13);
          }
        }
      }
      else
      {
        v158 = __N * v162;
      }
      v66 = v170.__vftable;
      if (LODWORD(v170.~logic_error))
      {
        v67 = 0;
        v68 = 0;
        v69 = 16;
        do
        {
          v70 = *(const float **)((char *)&v66->~logic_error + v69);
          LODWORD(__B) = 1065353216;
          if ((v68 & 1) != 0)
            vDSP_vsma(v70, 1, (const float *)&__B, (const float *)__dst, 1, (float *)__dst, 1, v158);
          else
            vDSP_vsmul(v70, 1, (const float *)&__B, (float *)__dst, 1, v158);
          ++v67;
          v69 += 16;
          v68 = 1;
        }
        while (v67 < LODWORD(v66->~logic_error));
      }
      else
      {
        LODWORD(__B) = 0;
        vDSP_vfill((const float *)&__B, (float *)__dst, 1, __N);
      }
      __B = &v165;
      std::vector<caulk::rt_vector<float>,caulk::rt_allocator<caulk::rt_vector<float>>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&__B);
      if (v170.__vftable)
      {
        v170.__imp_.__imp_ = (const char *)v170.__vftable;
        std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](v170.__vftable);
      }
      v24 = v156;
    }
    LODWORD(v25) = *(_DWORD *)(v24 + 68);
    v71 = (uint64_t)(*(double *)(v22 + 216) + (double)v25 + (double)*(uint64_t *)(v22 + 280));
    if (*(_QWORD *)(v22 + 160) == v71)
    {
LABEL_117:
      *(_QWORD *)(v22 + 160) = __N + v71;
      v178 = __N;
      v99 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v22 + 128) + 16))(*(_QWORD *)(v22 + 128), 0);
      v100 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v22 + 128)
                                                                                              + 16))(*(_QWORD *)(v22 + 128), 1, v99);
      if (!(_DWORD)v100)
      {
        v178 = 0;
        AMCP::Log::Scope_Registry::get(v100);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__B, "com.apple.coreaudio", "AMCP");
        v134 = (caulk::concurrent::messenger *)__B[1];
        v135 = pthread_self();
        v136 = pthread_mach_thread_np(v135);
        v137 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
        *(_DWORD *)(v137 + 16) = 0;
        *(_BYTE *)(v137 + 20) = 16;
        *(_DWORD *)(v137 + 24) = v136;
        *(_QWORD *)(v137 + 32) = "HALS_MultiTap.cpp";
        *(_DWORD *)(v137 + 40) = 734;
        *(_QWORD *)v137 = &off_1E699B478;
        *(_QWORD *)(v137 + 8) = 0;
        v100 = (AMCP::Log::Scope_Registry *)caulk::concurrent::messenger::enqueue(v134, (caulk::concurrent::message *)v137);
        v138 = (std::__shared_weak_count *)v184;
        if ((_QWORD)v184)
        {
          v139 = (unint64_t *)(v184 + 8);
          do
            v140 = __ldaxr(v139);
          while (__stlxr(v140 - 1, v139));
          if (!v140)
          {
            ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
            std::__shared_weak_count::__release_weak(v138);
          }
        }
      }
      if (v99 >= 0x2000)
        v101 = 0x2000;
      else
        v101 = v99;
      v177 = v101;
      if (v99 > 0x2000)
      {
        AMCP::Log::Scope_Registry::get(v100);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__B, "com.apple.coreaudio", "AMCP");
        v102 = (caulk::concurrent::messenger *)__B[1];
        v103 = pthread_self();
        v104 = pthread_mach_thread_np(v103);
        v105 = v177;
        v106 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
        *(_DWORD *)(v106 + 16) = 0;
        *(_BYTE *)(v106 + 20) = 16;
        *(_DWORD *)(v106 + 24) = v104;
        *(_QWORD *)(v106 + 32) = "HALS_MultiTap.cpp";
        *(_DWORD *)(v106 + 40) = 740;
        *(_DWORD *)(v106 + 44) = v99;
        *(_DWORD *)(v106 + 48) = v105;
        *(_QWORD *)v106 = &off_1E699B4D0;
        *(_QWORD *)(v106 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v102, (caulk::concurrent::message *)v106);
        v107 = (std::__shared_weak_count *)v184;
        if ((_QWORD)v184)
        {
          v108 = (unint64_t *)(v184 + 8);
          do
            v109 = __ldaxr(v108);
          while (__stlxr(v109 - 1, v108));
          if (!v109)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
      }
      v110 = v179;
      v111 = (double)v71;
      v112 = (uint64_t *)(v179 + 144);
      v113 = (uint64_t *)(v179 + 152);
      HALS_IOProcessor::Process(*(HALS_IOProcessor **)(v179 + 128), (double)v71, *(unsigned __int8 **)(v179 + 144), &v178, *(unsigned __int8 **)(v179 + 152), &v177, 0, 0);
      v114 = *(std::logic_error_vtbl **)(v110 + 168);
      v115 = *(double **)(v110 + 128);
      if (!v114)
      {
        v116 = v115[8];
        if (v116 == 0.0)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v115);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__B, "com.apple.coreaudio", "AMCP");
          v141 = *__B;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__B);
          if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR))
          {
            v142 = pthread_self();
            v143 = pthread_mach_thread_np(v142);
            LODWORD(__B) = 67109890;
            HIDWORD(__B) = v143;
            LOWORD(v184) = 2080;
            *(_QWORD *)((char *)&v184 + 2) = "HALS_MultiTap.cpp";
            WORD5(v184) = 1024;
            HIDWORD(v184) = 749;
            LOWORD(v185) = 2080;
            *(_QWORD *)((char *)&v185 + 2) = "not (writer_state_ptr->m_processor_ptr->GetLocalFormat().mSampleRate != 0)";
            _os_log_error_impl(&dword_1B57BA000, v141, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid sample rate", (uint8_t *)&__B, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v176);
          v144 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Invalid sample rate", (uint64_t)&v168);
          std::logic_error::logic_error(&v169, &v168);
          v169.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error(&v170, &v169);
          v172 = 0;
          v173 = 0;
          v174 = 0;
          v175 = -1;
          v170.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
          v171 = (char *)&unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__B, (uint64_t)&v170);
          *((_QWORD *)&v185 + 1) = "void HALS_MultiTap::write(AudioObjectID, int64_t, const AudioBufferList *, const AudioTimeStamp *)";
          v186 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_MultiTap.cpp";
          v187 = 749;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v163);
          v165 = off_1E69A20A0;
          v166 = v163;
          v167 = v164;
          v163 = 0uLL;
          v164 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&__B, (uint64_t)&v165);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v144, (uint64_t)&__B);
LABEL_173:
        }
        v117 = v115[3];
        if (v117 == 0.0)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v115);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__B, "com.apple.coreaudio", "AMCP");
          v145 = *__B;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__B);
          if (os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
          {
            v146 = pthread_self();
            v147 = pthread_mach_thread_np(v146);
            LODWORD(__B) = 67109890;
            HIDWORD(__B) = v147;
            LOWORD(v184) = 2080;
            *(_QWORD *)((char *)&v184 + 2) = "HALS_MultiTap.cpp";
            WORD5(v184) = 1024;
            HIDWORD(v184) = 750;
            LOWORD(v185) = 2080;
            *(_QWORD *)((char *)&v185 + 2) = "not (writer_state_ptr->m_processor_ptr->GetSharedFormat().mSampleRate != 0)";
            _os_log_error_impl(&dword_1B57BA000, v145, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid sample rate", (uint8_t *)&__B, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v176);
          v144 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Invalid sample rate", (uint64_t)&v168);
          std::logic_error::logic_error(&v169, &v168);
          v169.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error(&v170, &v169);
          v172 = 0;
          v173 = 0;
          v174 = 0;
          v175 = -1;
          v170.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
          v171 = (char *)&unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__B, (uint64_t)&v170);
          *((_QWORD *)&v185 + 1) = "void HALS_MultiTap::write(AudioObjectID, int64_t, const AudioBufferList *, const AudioTimeStamp *)";
          v186 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_MultiTap.cpp";
          v187 = 750;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v163);
          v165 = off_1E69A20A0;
          v166 = v163;
          v167 = v164;
          v163 = 0uLL;
          v164 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&__B, (uint64_t)&v165);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v144, (uint64_t)&__B);
          goto LABEL_173;
        }
        v114 = (std::logic_error_vtbl *)vcvtmd_s64_f64(v116 / v117 * v111);
        *(_QWORD *)(v110 + 168) = v114;
      }
      v118 = HALS_IOProcessor::NeedsLocalBuffer((HALS_IOProcessor *)v115);
      if (v118)
        v119 = v113;
      else
        v119 = v112;
      v120 = *v119;
      v121 = &v178;
      if (v118)
        v121 = &v177;
      v122 = *v121;
      os_unfair_lock_lock((os_unfair_lock_t)(v156 + 408));
      v170.__vftable = v114;
      v123 = *(_QWORD *)(v156 + 520);
      LODWORD(__B) = 0;
      v184 = 0u;
      v185 = 0u;
      LODWORD(v186) = 0;
      write_to_dal_buffer(v120, v122, (uint64_t *)&v170, v156 + 24, v123, (uint64_t **)(v156 + 528), (uint64_t *)(v156 + 536), (uint64_t)&__B);
      if (SBYTE7(v185) < 0)
        operator delete((void *)v184);
      os_unfair_lock_unlock((os_unfair_lock_t)(v156 + 408));
      *(_QWORD *)(v110 + 168) += v122;
      (*(void (**)(uint64_t (****__return_ptr)()))(**(_QWORD **)(v156 + 520) + 72))(&__B);
      v124 = vcvtmd_s64_f64(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v186));
      if (*(_QWORD *)(v156 + 424) < v124)
        *(_QWORD *)(v156 + 424) = v124;
      v125 = v188;
      if (v188)
      {
        v126 = (unint64_t *)&v188->__shared_owners_;
        do
          v127 = __ldaxr(v126);
        while (__stlxr(v127 - 1, v126));
        if (!v127)
        {
          ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
          std::__shared_weak_count::__release_weak(v125);
        }
      }
      v128 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
      v6 = v155;
      if (*((_QWORD *)&v185 + 1))
      {
        v129 = (unint64_t *)(*((_QWORD *)&v185 + 1) + 8);
        do
          v130 = __ldaxr(v129);
        while (__stlxr(v130 - 1, v129));
        if (!v130)
        {
          ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
          std::__shared_weak_count::__release_weak(v128);
        }
      }
      goto LABEL_150;
    }
    v72 = *(_QWORD **)(v22 + 128);
    v73 = v72[14];
    if (v73)
    {
      *(_QWORD *)(v73 + 20) = _D10;
      *(_QWORD *)(v73 + 36) = 0;
      *(_QWORD *)(v73 + 28) = 0;
      *(_DWORD *)(v73 + 44) = 0;
    }
    v74 = v72[15];
    if (v74)
    {
      v75 = *(OpaqueAudioConverter **)(v74 + 8);
      if (v75)
        AudioConverterReset(v75);
    }
    v76 = v72[16];
    if (!v76)
    {
LABEL_116:
      *(_QWORD *)(v22 + 168) = 0;
      goto LABEL_117;
    }
    v77 = *(_DWORD *)(v76 + 24);
    if (v77 != 2)
    {
      if (v77 == 1)
      {
        v97 = *(uint64_t **)(v76 + 56);
        v96 = *(uint64_t **)(v76 + 64);
        while (v97 != v96)
        {
          v98 = *v97++;
          *(_QWORD *)(v98 + 16) = *(_QWORD *)(v98 + 8);
        }
      }
      else if (!v77)
      {
        v78 = *(uint64_t **)(v76 + 32);
        v79 = *(uint64_t **)(v76 + 40);
        while (v78 != v79)
        {
          v80 = *v78;
          bzero(*(void **)(*v78 + 72), 4 * *(unsigned int *)(*v78 + 68));
          bzero(*(void **)(v80 + 80), 4 * *(unsigned int *)(v80 + 68));
          *(_DWORD *)(v80 + 64) = 0;
          *(_QWORD *)(v80 + 152) = 0;
          *(_DWORD *)(v80 + 96) = 0;
          *(_BYTE *)(v80 + 124) = 0;
          Resampler2::SetPrimeMethod(v80, *(_DWORD *)(v80 + 112));
          v81 = 0.0;
          if (!*(_BYTE *)(v80 + 256))
          {
            v82 = 1.0;
            if (*(_DWORD *)(v80 + 108) != 1818848869)
              v82 = (double)(*(_DWORD *)(*(_QWORD *)(v80 + 48) + 12) >> 1);
            v81 = -1.0 - (*(double *)(v80 + 152) + v82);
          }
          *(double *)(v80 + 128) = v81;
          *(_QWORD *)(v80 + 264) = 0;
          ++v78;
        }
      }
      goto LABEL_116;
    }
    v83 = *(uint64_t **)(v76 + 80);
    v84 = *(uint64_t **)(v76 + 88);
    while (1)
    {
      if (v83 == v84)
        goto LABEL_116;
      v85 = *v83;
      *(_DWORD *)(v85 + 72) = 0;
      *(_DWORD *)(v85 + 88) = 1;
      if (*(_BYTE *)(v85 + 93))
      {
        v86 = *(void **)(v85 + 160);
        v87 = *(_QWORD *)(v85 + 168) - (_QWORD)v86;
        if (v87 >= 1)
          bzero(v86, ((((unint64_t)v87 >> 6) - ((unint64_t)v87 > 0x3F)) << 6) + 64);
        v88 = *(void **)(v85 + 184);
        v89 = *(_QWORD *)(v85 + 192) - (_QWORD)v88;
        if (v89 >= 1)
        {
          v90 = (unint64_t)v89 >> 6;
          v91 = (unint64_t)v89 > 0x3F;
          v92 = 6;
LABEL_111:
          bzero(v88, (v90 - v91 + 1) << v92);
        }
      }
      else
      {
        v93 = *(void **)(v85 + 112);
        v94 = *(_QWORD *)(v85 + 120) - (_QWORD)v93;
        if (v94 >= 1)
          bzero(v93, 32 * (((unint64_t)v94 >> 5) - ((unint64_t)v94 > 0x1F)) + 32);
        v88 = *(void **)(v85 + 136);
        v95 = *(_QWORD *)(v85 + 144) - (_QWORD)v88;
        if (v95 >= 1)
        {
          v90 = (unint64_t)v95 >> 5;
          v91 = (unint64_t)v95 > 0x1F;
          v92 = 5;
          goto LABEL_111;
        }
      }
      ++v83;
    }
  }
  return result;
}

void sub_1B5B6F794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__int128 a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39)
{
  if (a2)
  {
    a32 = &a28;
    std::vector<caulk::rt_vector<float>,caulk::rt_allocator<caulk::rt_vector<float>>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&a32);
    if (a37)
    {
      a38 = (uint64_t)a37;
      std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](a37);
    }
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v21[2];
  _QWORD v22[2];
  _BYTE v23[24];
  _BYTE *v24;
  _BYTE v25[24];
  _BYTE *v26;
  _QWORD v27[3];
  _QWORD *v28;
  _BYTE v29[24];
  _BYTE *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v27, a2);
  v5 = (uint64_t)v28;
  if (!v28)
    goto LABEL_4;
  if (v28 != v27)
  {
    v5 = (*(uint64_t (**)(void))(*v28 + 16))();
LABEL_4:
    v24 = (_BYTE *)v5;
    goto LABEL_6;
  }
  v24 = v23;
  (*(void (**)(_QWORD *, _BYTE *))(v27[0] + 24))(v27, v23);
LABEL_6:
  v26 = 0;
  v6 = operator new(0x28uLL);
  *(_QWORD *)v6 = &off_1E6993C28;
  std::__function::__value_func<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::__value_func[abi:ne180100]((uint64_t)(v6 + 8), (uint64_t)v23);
  v26 = v6;
  v7 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v6 + 16))(v6);
  v30 = v7;
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  if (v8 == v9)
  {
    v12 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    while (1)
    {
      if ((v11 & 1) != 0)
        v10 = 0;
      else
        ++v10;
      v22[0] = v8;
      v22[1] = v10;
      if (((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a3 + 16))(a3, v22) & 1) == 0)
      {
        v21[0] = v8;
        v21[1] = v10;
        if (!v30)
          std::__throw_bad_function_call[abi:ne180100]();
        v12 = (*(uint64_t (**)(_BYTE *, _QWORD *))(*(_QWORD *)v30 + 48))(v30, v21);
        if ((_DWORD)v12)
          break;
      }
      v11 = 0;
      v8 += 32;
      if (v8 == v9)
      {
        v12 = 0;
        break;
      }
    }
    v7 = v30;
  }
  if (v7 == v29)
  {
    v13 = 4;
    v7 = v29;
  }
  else
  {
    if (!v7)
      goto LABEL_23;
    v13 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v13))();
LABEL_23:
  v14 = v26;
  if (v26 == v25)
  {
    v15 = 4;
    v14 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_28;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_28:
  v16 = v24;
  if (v24 == v23)
  {
    v17 = 4;
    v16 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_33;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_33:
  v18 = v28;
  if (v28 == v27)
  {
    v19 = 4;
    v18 = v27;
    goto LABEL_37;
  }
  if (v28)
  {
    v19 = 5;
LABEL_37:
    (*(void (**)(void))(*v18 + 8 * v19))();
  }
  return v12;
}

void sub_1B5B6FA98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v26;
  uint64_t v27;

  v26 = a25;
  if (a25 == &a22)
  {
    v27 = 4;
    v26 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContextDescription::ApplyToActiveOutput_ButSkipClocklessReferenceStreamOnlyEngines(uint64_t a1, uint64_t a2)
{
  uint64_t active;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7[0] = &off_1E698F688;
  v7[1] = a2;
  v8 = v7;
  v6[0] = &off_1E6996590;
  v6[1] = a1;
  active = HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(a1, (uint64_t)v7, (uint64_t)v6);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return active;
}

void sub_1B5B6FC34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_4,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_4>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_4,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_4>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6990E38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_4,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_4>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6990E38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_4,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_4>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  uint64_t v7;
  uint64_t v9;
  _QWORD v10[2];

  v7 = *(_QWORD *)(a1 + 8);
  v10[0] = &off_1E698EDE0;
  v10[1] = v7;
  if (a6[416])
    return (*(uint64_t (**)(_BYTE *, _QWORD *, _QWORD))(*(_QWORD *)a6 + 16))(a6, v10, *(unsigned int *)(a1 + 16));
  v9 = IOContextViewForIOPerformer::owner_object_id((IOContextViewForIOPerformer *)v10);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a6 + 24))(a6, v9);
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_4,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_4>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl9PerformIOERK14AudioTimeStampjij14IORunningStateRxE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_4,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_4>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::target_type()
{
}

_QWORD *std::__function::__func<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1},std::allocator<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}>,int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6993C28;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1},std::allocator<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}>,int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6993C28;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1},std::allocator<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}>,int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6993C28;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B5B6FE9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1},std::allocator<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}>,int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6993C28;
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1},std::allocator<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}>,int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1},std::allocator<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}>,int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1},std::allocator<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}>,int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v14[2];
  int v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 8;
  v4 = *(uint64_t **)(*(_QWORD *)a2 + 8);
  v3 = (uint64_t *)(*(_QWORD *)a2 + 8);
  if (*(uint64_t **)(*(_QWORD *)a2 + 16) == v4
    || ((v5 = *v4,
         -1944890851 * ((unint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 8) - v5) >> 3))
      ? (v6 = v5 == 0)
      : (v6 = 1),
        v6))
  {
    v7 = 0;
  }
  else
  {
    if (!*(_DWORD *)(v5 + 108)
      || ((v8 = *(_QWORD *)(v5 + 112), *(_QWORD *)(v5 + 120) != v8) ? (v9 = v8 == 0) : (v9 = 1), v9))
    {
      v8 = v5 + 408;
    }
    v7 = *(_DWORD *)(*(_QWORD *)v8 + 308);
  }
  v14[0] = a2;
  v14[1] = v2;
  v15 = v7;
  v16[0] = &off_1E6993C98;
  v16[1] = v14;
  v17 = v16;
  v10 = VisitableVector<HALS_IOStreamGroup>::apply<>(v3, v16);
  v11 = v17;
  if (v17 == v16)
  {
    v12 = 4;
    v11 = v16;
    goto LABEL_20;
  }
  if (v17)
  {
    v12 = 5;
LABEL_20:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  return v10;
}

void sub_1B5B7005C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1},std::allocator<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}>,int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN25HALS_IOContextDescription13ApplyToOutputIJNS_17ActiveOutputsOnlyEEEEiNSt3__18functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_EUlRN15VisitableVectorIS4_E13ItemWithIndexEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1},std::allocator<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}>,int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::target_type()
{
}

void std::__function::__func<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}::operator() const(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)::{lambda(VisitableVector<HALS_IOStreamGroup>::ItemWithIndex &)#1},std::allocator<std::allocator>,int ()(int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}::operator() const(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)::{lambda(VisitableVector<HALS_IOStreamGroup>::ItemWithIndex &)#1})>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}::operator() const(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)::{lambda(VisitableVector<HALS_IOStreamGroup>::ItemWithIndex &)#1},std::allocator<std::allocator>,int ()(int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}::operator() const(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)::{lambda(VisitableVector<HALS_IOStreamGroup>::ItemWithIndex &)#1})>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6993C98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}::operator() const(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)::{lambda(VisitableVector<HALS_IOStreamGroup>::ItemWithIndex &)#1},std::allocator<std::allocator>,int ()(int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}::operator() const(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)::{lambda(VisitableVector<HALS_IOStreamGroup>::ItemWithIndex &)#1})>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6993C98;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}::operator() const(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)::{lambda(VisitableVector<HALS_IOStreamGroup>::ItemWithIndex &)#1},std::allocator<std::allocator>,int ()(int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}::operator() const(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)::{lambda(VisitableVector<HALS_IOStreamGroup>::ItemWithIndex &)#1})>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  __int128 *v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(__int128 **)(a1 + 8);
  v9 = *v3;
  v10 = *((_QWORD *)v3 + 2);
  v4 = (char *)operator new(0x20uLL);
  *(_QWORD *)v4 = &off_1E6993D08;
  *(_OWORD *)(v4 + 8) = v9;
  *((_QWORD *)v4 + 3) = v10;
  v12 = v4;
  v5 = VisitableVector<HALS_IOStreamInfo>::apply<>(v2, (uint64_t)v11);
  v6 = v12;
  if (v12 == v11)
  {
    v7 = 4;
    v6 = v11;
    goto LABEL_5;
  }
  if (v12)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return v5;
}

void sub_1B5B70210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}::operator() const(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)::{lambda(VisitableVector<HALS_IOStreamGroup>::ItemWithIndex &)#1},std::allocator<std::allocator>,int ()(int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}::operator() const(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)::{lambda(VisitableVector<HALS_IOStreamGroup>::ItemWithIndex &)#1})>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN25HALS_IOContextDescription13ApplyToOutputIJNS_17ActiveOutputsOnlyEEEEiNSt3__18functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_ENKUlRN15VisitableVectorIS4_E13ItemWithIndexEE_clESH_EUlRNSE_I18HALS_IOStreamGroupE13ItemWithIndexEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}::operator() const(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)::{lambda(VisitableVector<HALS_IOStreamGroup>::ItemWithIndex &)#1},std::allocator<std::allocator>,int ()(int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}::operator() const(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)::{lambda(VisitableVector<HALS_IOStreamGroup>::ItemWithIndex &)#1})>::target_type()
{
}

void std::__function::__func<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}::operator() const(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)::{lambda(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)#1},std::allocator<std::allocator>,int ()(int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}::operator() const(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)::{lambda(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)#1})>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}::operator() const(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)::{lambda(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)#1},std::allocator<std::allocator>,int ()(int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}::operator() const(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)::{lambda(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)#1})>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E6993D08;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}::operator() const(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)::{lambda(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)#1},std::allocator<std::allocator>,int ()(int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}::operator() const(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)::{lambda(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)#1})>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6993D08;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}::operator() const(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)::{lambda(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)#1},std::allocator<std::allocator>,int ()(int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}::operator() const(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)::{lambda(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)#1})>::operator()(uint64_t a1, uint64_t a2)
{
  return std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::operator()(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8), **(_QWORD **)(a1 + 8), *(_DWORD *)(a1 + 24), *(_DWORD *)(a2 + 8));
}

uint64_t std::__function::__func<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}::operator() const(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)::{lambda(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)#1},std::allocator<std::allocator>,int ()(int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}::operator() const(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)::{lambda(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)#1})>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN25HALS_IOContextDescription13ApplyToOutputIJNS_17ActiveOutputsOnlyEEEEiNSt3__18functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_ENKUlRN15VisitableVectorIS4_E13ItemWithIndexEE_clESH_EUlRNSE_IS6_E13ItemWithIndexEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}::operator() const(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)::{lambda(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)#1},std::allocator<std::allocator>,int ()(int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}::operator() const(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)::{lambda(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)#1})>::target_type()
{
}

void _ZNSt3__110__function6__funcIZN25HALS_IOContextDescription62ApplyToActiveOutput_ButSkipClocklessReferenceStreamOnlyEnginesENS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEEUljRT_jjRT0_E_NS_9allocatorISE_EES8_ED0Ev()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *_ZNKSt3__110__function6__funcIZN25HALS_IOContextDescription62ApplyToActiveOutput_ButSkipClocklessReferenceStreamOnlyEnginesENS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEEUljRT_jjRT0_E_NS_9allocatorISE_EES8_E7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E698F688;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN25HALS_IOContextDescription62ApplyToActiveOutput_ButSkipClocklessReferenceStreamOnlyEnginesENS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEEUljRT_jjRT0_E_NS_9allocatorISE_EES8_E7__cloneEPNS0_6__baseIS8_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E698F688;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN25HALS_IOContextDescription62ApplyToActiveOutput_ButSkipClocklessReferenceStreamOnlyEnginesENS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEEUljRT_jjRT0_E_NS_9allocatorISE_EES8_EclEOjS5_SI_SI_S7_(uint64_t a1, int *a2, uint64_t a3, int *a4, int *a5, uint64_t a6)
{
  int v8;
  int v9;
  int v10;
  _QWORD *v11;
  _QWORD *v13;

  v8 = *a2;
  v9 = *a4;
  v10 = *a5;
  if (!*(_DWORD *)(a6 + 108))
  {
    if (!*(_QWORD *)(a6 + 408))
      return 0;
LABEL_17:
    v13 = (_QWORD *)(a6 + 408);
    goto LABEL_18;
  }
  v11 = *(_QWORD **)(a6 + 112);
  if (*(_QWORD **)(a6 + 120) == v11 || v11 == 0)
  {
    if (!*(_QWORD *)(a6 + 408))
      return 0;
  }
  else if (!*v11)
  {
    return 0;
  }
  v13 = *(_QWORD **)(a6 + 112);
  if (*(_QWORD **)(a6 + 120) == v13 || v13 == 0)
    goto LABEL_17;
LABEL_18:
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v13 + 320))(*v13))
    return std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::operator()(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), v8, a3, v9, v10);
  return 0;
}

uint64_t _ZNKSt3__110__function6__funcIZN25HALS_IOContextDescription62ApplyToActiveOutput_ButSkipClocklessReferenceStreamOnlyEnginesENS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEEUljRT_jjRT0_E_NS_9allocatorISE_EES8_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN25HALS_IOContextDescription62ApplyToActiveOutput_ButSkipClocklessReferenceStreamOnlyEnginesENSt3__18functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEEUljRT_jjRT0_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN25HALS_IOContextDescription62ApplyToActiveOutput_ButSkipClocklessReferenceStreamOnlyEnginesENS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEEUljRT_jjRT0_E_NS_9allocatorISE_EES8_E11target_typeEv()
{
  return &_ZTIZN25HALS_IOContextDescription62ApplyToActiveOutput_ButSkipClocklessReferenceStreamOnlyEnginesENSt3__18functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEEUljRT_jjRT0_E_;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_3,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_3>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_3,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_3>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6990DB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_3,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_3>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6990DB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_3,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_3>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned int v22;
  void (**v23)(IOContextViewForIOPerformer *__hidden);
  __int128 v24;
  __int128 v25;
  unsigned int v26;
  _opaque_pthread_t *v27;
  mach_port_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;
  caulk::concurrent::messenger *v34;
  _QWORD v35[2];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;

  v7 = *a4;
  v8 = *(_QWORD *)(a1 + 8);
  v35[0] = &off_1E698EDE0;
  v35[1] = v8;
  v9 = *(unsigned int *)(a1 + 16);
  if (*(_BYTE *)(a6 + 416))
  {
    HostedDSP_StreamProcessor::StreamProcessInfo::StreamProcessInfo((uint64_t)&v36, 1869968496, (uint64_t)v35, a6, v9);
    return HostedDSP_StreamProcessor::PerformIO_ProcessStream((uint64_t)&v36);
  }
  else
  {
    v11 = *(_DWORD *)(a6 + 108);
    if (!v11 || ((v12 = *(_QWORD *)(a6 + 112), *(_QWORD *)(a6 + 120) != v12) ? (v13 = v12 == 0) : (v13 = 1), v13))
      v12 = a6 + 408;
    v14 = *(_QWORD *)v12;
    if (*(_QWORD *)(*(_QWORD *)v12 + 8))
    {
      v15 = *(unsigned int *)(v14 + 308);
      if (*(_QWORD *)(a6 + 96))
      {
        v40 = *(_DWORD *)(a1 + 16);
        v16 = *(_DWORD *)(v14 + 4 * *(unsigned __int8 *)(a6 + 8) + 672);
        v39 = v16;
        v17 = *(_QWORD *)(a6 + 32);
        v18 = *(_QWORD *)(a6 + 40);
        if (v17)
          v19 = (unsigned __int8 *)(v17 + v15);
        else
          v19 = 0;
        if (v18)
          v20 = (unsigned __int8 *)(v18 + v15);
        else
          v20 = 0;
        v21 = 24;
        if ((unint64_t)v19 | (unint64_t)v20)
          v21 = 48;
        v22 = *(_DWORD *)(a6 + v21);
        if (v11)
        {
          HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v36, (uint64_t *)(a6 + 112));
        }
        else
        {
          v24 = *(_OWORD *)(a6 + 384);
          v36 = *(_OWORD *)(a6 + 368);
          v37 = v24;
          v38 = *(_QWORD *)(a6 + 400);
        }
        if (v16 * DWORD2(v37) > v22)
        {
          if (*(_DWORD *)(a6 + 108))
          {
            HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v36, (uint64_t *)(a6 + 112));
          }
          else
          {
            v25 = *(_OWORD *)(a6 + 384);
            v36 = *(_OWORD *)(a6 + 368);
            v37 = v25;
            v38 = *(_QWORD *)(a6 + 400);
          }
          v26 = v22 / DWORD2(v37);
          v39 = v26;
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v36, "com.apple.coreaudio", "AMCP");
          v34 = *(caulk::concurrent::messenger **)(v36 + 8);
          v27 = pthread_self();
          v28 = pthread_mach_thread_np(v27);
          v29 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
          *(_DWORD *)(v29 + 16) = 0;
          *(_BYTE *)(v29 + 20) = 16;
          *(_DWORD *)(v29 + 24) = v28;
          *(_QWORD *)(v29 + 32) = "HALS_IOPerformer.cpp";
          *(_DWORD *)(v29 + 40) = 303;
          *(_DWORD *)(v29 + 44) = v16;
          *(_DWORD *)(v29 + 48) = v26;
          *(_QWORD *)v29 = &off_1E697CC28;
          *(_QWORD *)(v29 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v34, (caulk::concurrent::message *)v29);
          v30 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
          if (*((_QWORD *)&v36 + 1))
          {
            v31 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
        }
        HALS_IOProcessor::Process(*(HALS_IOProcessor **)(a6 + 96), *(double *)(v14 + 576), (unsigned __int8 *)(*(_QWORD *)(a6 + 56) + v7), &v40, (unsigned __int8 *)(*(_QWORD *)(a6 + 16) + v15), &v39, v19, v20);
        v23 = (void (**)(IOContextViewForIOPerformer *__hidden))v35[0];
      }
      else
      {
        v23 = &off_1E698EDE0;
      }
      if ((((uint64_t (*)(_QWORD *, _QWORD))v23[19])(v35, 0) & 1) != 0)
      {
        if (*(_DWORD *)(a6 + 108))
        {
          HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v36, (uint64_t *)(a6 + 112));
        }
        else
        {
          v33 = *(_OWORD *)(a6 + 384);
          v36 = *(_OWORD *)(a6 + 368);
          v37 = v33;
          v38 = *(_QWORD *)(a6 + 400);
        }
        bzero((void *)(*(_QWORD *)(a6 + 56) + v15), (DWORD2(v37) * v9));
      }
      return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v14 + 112))(v14, v35, *(unsigned int *)(a6 + 12), *(_QWORD *)(a6 + 56) + v15, v9);
    }
    else
    {
      return 0;
    }
  }
}

void sub_1B5B70858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_3,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_3>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl9PerformIOERK14AudioTimeStampjij14IORunningStateRxE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_3,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_3>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::target_type()
{
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_2,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_2>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_2,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_2>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6990D38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_2,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_2>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6990D38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_2,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_2>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  HALS_IOProcessor *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  _QWORD v16[2];
  unsigned int v17;
  unsigned int v18[8];

  v2 = *(_QWORD *)(a1 + 8);
  v16[0] = &off_1E698EDE0;
  v16[1] = v2;
  v3 = *a2;
  v4 = *(unsigned int *)(a1 + 16);
  if (*(_BYTE *)(*a2 + 416))
  {
    HostedDSP_StreamProcessor::StreamProcessInfo::StreamProcessInfo((uint64_t)v18, 1768845428, (uint64_t)v16, v3, v4);
    return HostedDSP_StreamProcessor::PerformIO_ProcessStream((uint64_t)v18);
  }
  else
  {
    if (!*(_DWORD *)(v3 + 108)
      || ((v6 = *(_QWORD **)(v3 + 112), *(_QWORD **)(v3 + 120) != v6) ? (v7 = v6 == 0) : (v7 = 1), v7))
    {
      v6 = (_QWORD *)(v3 + 408);
    }
    v8 = *v6;
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v6 + 16))(*v6))
    {
      v9 = *(unsigned int *)(v8 + 308);
      v5 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v8 + 104))(v8, v16, *(unsigned int *)(v3 + 12), *(_QWORD *)(v3 + 56) + v9, v4);
      v10 = *(HALS_IOProcessor **)(v3 + 96);
      if (v10)
      {
        v18[0] = v4;
        v17 = *(_DWORD *)(v8 + 4 * *(unsigned __int8 *)(v3 + 8) + 672);
        v11 = *(_QWORD *)(v3 + 32);
        v12 = *(_QWORD *)(v3 + 40);
        if (v11)
          v13 = (unsigned __int8 *)(v11 + v9);
        else
          v13 = 0;
        if (v12)
          v14 = (unsigned __int8 *)(v12 + v9);
        else
          v14 = 0;
        HALS_IOProcessor::Process(v10, *(double *)(v8 + 512), (unsigned __int8 *)(*(_QWORD *)(v3 + 56) + v9), v18, (unsigned __int8 *)(*(_QWORD *)(v3 + 16) + v9), &v17, v13, v14);
      }
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_2,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_2>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl9PerformIOERK14AudioTimeStampjij14IORunningStateRxE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_2,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_2>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target_type()
{
}

void std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &),unsigned int,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &),unsigned int,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &),unsigned int,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &),unsigned int,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6990C88;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &),unsigned int,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &),unsigned int,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6990C88;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &),unsigned int,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &),unsigned int,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(unsigned int *)(a1 + 16));
}

uint64_t std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &),unsigned int,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &),unsigned int,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__16__bindIRFijR17HALS_IOEngineInfoEJjRKNS_12placeholders4__phILi1EEEEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &),unsigned int,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &),unsigned int,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_1,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_1>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_1,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_1>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6990C08;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_1,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_1>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6990C08;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_1,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_1>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;

  v2 = *(_QWORD *)(a1 + 8);
  v28[0] = &off_1E698EDE0;
  v28[1] = v2;
  v3 = *(unsigned int *)(a1 + 16);
  v4 = *a2;
  if (!*(_BYTE *)(*a2 + 416))
  {
    if (*(_BYTE *)(v4 + 364) && HALS_IOPerformer::can_read_from_stream(v28, *a2))
    {
      if (!*(_BYTE *)(v4 + 364))
        std::__throw_bad_optional_access[abi:ne180100]();
      if (!*(_DWORD *)(v4 + 108)
        || ((v18 = *(_QWORD **)(v4 + 112), *(_QWORD **)(v4 + 120) != v18) ? (v19 = v18 == 0) : (v19 = 1), v19))
      {
        v18 = (_QWORD *)(v4 + 408);
      }
      return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)*v18 + 120))(*v18, *(unsigned int *)(v4 + 12), v3, *(unsigned int *)(v4 + 360));
    }
    else
    {
      if (!HALS_IOPerformer::can_read_from_stream(v28, v4))
        return 0;
      if (!*(_DWORD *)(v4 + 108)
        || ((v21 = *(_QWORD *)(v4 + 112), *(_QWORD *)(v4 + 120) != v21) ? (v22 = v21 == 0) : (v22 = 1), v22))
      {
        v21 = v4 + 408;
      }
      v23 = *(_QWORD *)v21;
      v24 = *(_DWORD *)(v4 + 24);
      v25 = *(unsigned int *)(*(_QWORD *)v21 + 676);
      v29 = *(_QWORD *)(v4 + 16);
      LODWORD(v30) = 0;
      HIDWORD(v30) = v24;
      LODWORD(v31) = v25;
      v26 = (*(uint64_t (**)(_QWORD *))(v28[0] + 80))(v28);
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *))(*(_QWORD *)v23 + 80))(v23, v26, *(unsigned int *)(v4 + 12), v25, &v29);
    }
  }
  HostedDSP_StreamProcessor::StreamProcessInfo::StreamProcessInfo((uint64_t)&v29, 1768845428, (uint64_t)v28, v4, v3);
  if ((_DWORD)v29 != 1768845428)
    return 0;
  v5 = *(unsigned int **)(v31 + 112);
  v6 = *(unsigned int **)(v31 + 120);
  if (v5 == v6)
    return 0;
  v7 = 0;
  do
  {
    v8 = *(_QWORD *)(*(_QWORD *)v5 + 8);
    if (v8)
    {
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 320))(v8);
      v10 = v5[25];
      if (v9 && v10 <= 3)
      {
        v12 = v5[6];
        v13 = *(_QWORD *)v5;
        v14 = *(_DWORD *)(*(_QWORD *)v5 + 676);
        v32 = *((_QWORD *)v5 + 2);
        v33 = 0;
        v34 = v12;
        v35 = v14;
        if (v10 - 1 > 1
          || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 8) + 680))(*(_QWORD *)(v13 + 8)) & 1) != 0)
        {
          if (*((_BYTE *)v5 + 124))
          {
            v15 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)v5 + 8)
                                                                                    + 752))(*(_QWORD *)(*(_QWORD *)v5 + 8), v5[24], v35, *(_QWORD *)v5, v5[30]);
          }
          else
          {
            v16 = *(_QWORD *)(*(_QWORD *)v5 + 8);
            v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 80))(v30);
            v15 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)v16 + 744))(v16, v17, v5[24], v35, *(_QWORD *)v5, &v32);
          }
          v7 = v15;
        }
        else if (v32 && v34 > v33)
        {
          bzero((void *)(v32 + v33), v34 - v33);
        }
      }
    }
    v5 += 32;
  }
  while (v5 != v6);
  return v7;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_1,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_1>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl9PerformIOERK14AudioTimeStampjij14IORunningStateRxE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_1,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_1>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target_type()
{
}

void std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,unsigned int),unsigned int,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,unsigned int),unsigned int,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,unsigned int),unsigned int,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,unsigned int),unsigned int,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6990B70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,unsigned int),unsigned int,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,unsigned int),unsigned int,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6990B70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,unsigned int),unsigned int,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,unsigned int),unsigned int,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(a1 + 8))(*(unsigned int *)(a1 + 16), a2, *(unsigned int *)(a1 + 20));
}

uint64_t std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,unsigned int),unsigned int,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,unsigned int),unsigned int,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__16__bindIRFijR17HALS_IOEngineInfojEJjRKNS_12placeholders4__phILi1EEERjEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,unsigned int),unsigned int,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,unsigned int),unsigned int,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

void std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6990A70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6990A70;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::operator()(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a2;
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a2 + 16))(**a2);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
    if (!v5)
      std::__throw_bad_function_call[abi:ne180100]();
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 48))(v5, *v3);
  }
  return result;
}

uint64_t std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN21HALS_IOEngineInfoList12engine_applyIJ29FilterEngineInfoWithoutEngine41FilterClocklessReferenceStreamOnlyEnginesEEEiNSt3__18functionIFiR17HALS_IOEngineInfoEEEDpRKT_EUlRN15VisitableVectorINS3_10unique_ptrIS5_NS3_14default_deleteIS5_EEEEE13ItemWithIndexEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::target_type()
{
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_0>,int ()(HALS_IOEngineInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6990AF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6990AF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_0>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  v3 = *(_QWORD *)(a1 + 8);
  v14[0] = &off_1E698EDE0;
  v14[1] = v3;
  v4 = *(_DWORD *)(a1 + 16);
  v5 = *(unsigned int *)(a1 + 20);
  v6 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 184))(a2, 0);
  v7 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
  {
    HALS_IOPerformer::update_io_parameters((uint64_t)v14, (uint64_t *)a2, v5, v4, 0);
    v8 = (*(uint64_t (**)(_QWORD *))(v14[0] + 48))(v14);
    v9 = (*(double (**)(_QWORD *))(v14[0] + 16))(v14);
    v10 = ((__n128 (*)(_QWORD *))*(_QWORD *)(v14[0] + 40))(v14).n128_f32[0];
    (*(void (**)(uint64_t, uint64_t, double, double))(*(_QWORD *)a2 + 128))(a2, v8, v9, v10);
    v11 = (*(uint64_t (**)(_QWORD *))(v14[0] + 80))(v14);
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11);
    if (!v6)
    {
      v12 = (*(uint64_t (**)(_QWORD *))(v14[0] + 80))(v14);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 304))(a2, v12, *(unsigned int *)(a2 + 680));
    }
  }
  return v7;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_0>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl9PerformIOERK14AudioTimeStampjij14IORunningStateRxE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_0>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines(AudioTimeStamp &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines(AudioTimeStamp &)::$_0>,int ()(HALS_IOEngineInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines(AudioTimeStamp &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines(AudioTimeStamp &)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6991370;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines(AudioTimeStamp &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines(AudioTimeStamp &)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6991370;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines(AudioTimeStamp &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines(AudioTimeStamp &)::$_0>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  BOOL v7;
  __int128 v8;
  __int128 v9;
  AudioTimeStamp v11;
  AudioTimeStamp v12;

  v3 = *(_OWORD **)(a1 + 8);
  v4 = v3[1];
  *(_OWORD *)&v12.mSampleTime = *v3;
  *(_OWORD *)&v12.mRateScalar = v4;
  v5 = v3[3];
  *(_OWORD *)&v12.mSMPTETime.mSubframes = v3[2];
  *(_OWORD *)&v12.mSMPTETime.mHours = v5;
  v6 = *(_QWORD *)(a2 + 288);
  if (*(_DWORD *)(v6 + 96))
    v7 = v12.mHostTime == 0;
  else
    v7 = 1;
  if (v7)
  {
    *(_OWORD *)(a2 + 824) = 0u;
    *(_OWORD *)(a2 + 840) = 0u;
    *(_OWORD *)(a2 + 792) = 0u;
    *(_OWORD *)(a2 + 808) = 0u;
  }
  else
  {
    v12.mFlags = 2;
    v11.mFlags = 1;
    HALS_IOClock::TranslateTime(v6, &v12, &v11);
    v12.mSampleTime = v11.mSampleTime;
    v12.mFlags = 2;
    v11.mFlags = 2;
    HALS_IOClock::TranslateTime(*(_QWORD *)(a2 + 288), &v12, &v11);
    v8 = *(_OWORD *)&v11.mRateScalar;
    *(_OWORD *)(a2 + 792) = *(_OWORD *)&v11.mSampleTime;
    *(_OWORD *)(a2 + 808) = v8;
    v9 = *(_OWORD *)&v11.mSMPTETime.mHours;
    *(_OWORD *)(a2 + 824) = *(_OWORD *)&v11.mSMPTETime.mSubframes;
    *(_OWORD *)(a2 + 840) = v9;
  }
  return 0;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines(AudioTimeStamp &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines(AudioTimeStamp &)::$_0>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl25_SetOverloadTimeOnEnginesER14AudioTimeStampE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines(AudioTimeStamp &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines(AudioTimeStamp &)::$_0>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

uint64_t HALS_IOContext_Legacy_Impl::IOWorkLoop_CalculateWakeTime(uint64_t result, unsigned int a2, AudioTimeStamp *a3)
{
  uint64_t v3;
  AudioTimeStamp v4;

  memset(&v4.mHostTime, 0, 48);
  *(_QWORD *)&v4.mFlags = 1;
  v3 = *(_QWORD *)(result + 1520);
  if (v3)
  {
    v4.mSampleTime = *(double *)(v3 + 360) + (double)*(uint64_t *)(result + 1312) + (double)a2 + -1.0;
    if (*(_QWORD *)(v3 + 8))
      return HALS_IOClock::TranslateTime(*(_QWORD *)(v3 + 288), &v4, a3);
  }
  return result;
}

uint64_t HALS_IOContext_Legacy_Impl::IOWorkLoop_HandleOverload(uint64_t a1, AudioTimeStamp *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  _opaque_pthread_t **v8;
  AMCP::Log::Scope_Registry *v9;
  int v10;
  caulk::concurrent::messenger *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  int *v14;
  char *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  void (*v21)(uint64_t);
  uint64_t (***v22)();
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int8x16_t *v27;
  float64x2_t v28;
  int8x16_t v29;
  int32x2_t v30;
  int64x2_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  HALS_IOClock *v39;
  uint64_t v40;
  AMCP::Log::Scope_Registry *v42;
  int v43;
  caulk::concurrent::messenger *v44;
  _opaque_pthread_t *v45;
  mach_port_t v46;
  int *v47;
  char *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  HALB_Mutex *v53;
  int v54;
  int v55;
  uint64_t v56;
  void (**v57)(FilterClocklessReferenceStreamOnlyEngines *__hidden);
  void (***v58)(FilterClocklessReferenceStreamOnlyEngines *__hidden);
  uint64_t v59;
  char v60;
  uint8_t buf[4];
  const char *v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  uint64_t (**v67)();
  uint64_t v68;
  void (*v69)(uint64_t);
  uint64_t (***v70)();
  void (***v71)(FilterClocklessReferenceStreamOnlyEngines *__hidden);
  uint64_t v72;
  AudioTimeStamp *v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v8 = (_opaque_pthread_t **)(a1 + 312);
  v9 = HALS_IOThread::ClearAllSyscallMasks((_opaque_pthread_t **)(a1 + 312));
  if ((_DWORD)v9)
  {
    v10 = (int)v9;
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v67, "com.apple.coreaudio", "AMCP");
    v11 = (caulk::concurrent::messenger *)v67[1];
    v12 = pthread_self();
    v13 = pthread_mach_thread_np(v12);
    v14 = __error();
    v15 = strerror(*v14);
    v16 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
    *(_DWORD *)(v16 + 16) = 0;
    *(_BYTE *)(v16 + 20) = 16;
    *(_DWORD *)(v16 + 24) = v13;
    *(_QWORD *)(v16 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
    *(_DWORD *)(v16 + 40) = 1512;
    *(_DWORD *)(v16 + 44) = v10;
    *(_QWORD *)(v16 + 48) = v15;
    *(_QWORD *)v16 = &off_1E698FE88;
    *(_QWORD *)(v16 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v11, (caulk::concurrent::message *)v16);
    v17 = (std::__shared_weak_count *)v68;
    if (v68)
    {
      v18 = (unint64_t *)(v68 + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  v20 = *(unsigned __int8 *)(a1 + 1468);
  *(_BYTE *)(a1 + 1468) = 0;
  if (!v20)
  {
    kdebug_trace();
    kdebug_trace();
    kdebug_trace();
  }
  if (!*(_BYTE *)(a1 + 1469)
    || std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,true,BOOL,std::__identity,0>(*(int8x8_t **)(a1 + 1600), 0, *(_QWORD *)(a1 + 1600) + 8 * (*(_QWORD *)(a1 + 1608) >> 6), *(_QWORD *)(a1 + 1608) & 0x3F, 1))
  {
    goto LABEL_11;
  }
  v57 = 0;
  v58 = &v57;
  v59 = 0x2000000000;
  v60 = 0;
  v67 = (uint64_t (**)())MEMORY[0x1E0C809B0];
  v68 = 0x40000000;
  v69 = ___ZNK26HALS_IOContext_Legacy_Impl28CanHandleOverloadWithCatchupER16CAAudioTimeStamp_block_invoke;
  v70 = (uint64_t (***)())&unk_1E698EF40;
  v72 = a1;
  v73 = a2;
  v71 = &v57;
  v53 = (HALB_Mutex *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24));
  HALB_CommandGate::ExecuteCommand(v53, (uint64_t)&v67);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v54 = *((unsigned __int8 *)v58 + 24);
    *(_DWORD *)buf = 136315650;
    v62 = "HALS_IOContext_Legacy_Impl.cpp";
    v63 = 1024;
    v64 = 4104;
    v65 = 1024;
    v66 = v54;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Can handle overload: %d", buf, 0x18u);
  }
  v55 = *((unsigned __int8 *)v58 + 24);
  _Block_object_dispose(&v57, 8);
  if (!v55)
  {
LABEL_11:
    if (!v20)
    {
      v67 = (uint64_t (**)())v8;
      LODWORD(v68) = HALB_Mutex::Unlock((HALB_Mutex *)(a1 + 328));
      HALS_IOContext::SignalOverloadToClient(*(std::__shared_weak_count ***)(a1 + 24));
      HALB_IOThread::Unlocker::~Unlocker((HALB_IOThread::Unlocker *)&v67);
    }
    v21 = (void (*)(uint64_t))*(unsigned int *)(*(_QWORD *)(a1 + 24) + 16);
    v67 = &off_1E6990C88;
    v68 = (uint64_t)HALS_IOContext_Legacy_Impl::ResetTimeForOverload_Helper;
    v69 = v21;
    v70 = &v67;
    v57 = &off_1E6992908;
    HALS_IOContext_Legacy_Impl::engine_apply<FilterClocklessReferenceStreamOnlyEngines>(a1, (uint64_t)&v67, (uint64_t)&v57);
    v22 = v70;
    if (v70 == &v67)
    {
      v23 = 4;
      v22 = &v67;
    }
    else
    {
      if (!v70)
      {
LABEL_18:
        HALS_IOContext_Legacy_Impl::UpdateTime((HALS_IOContext_Legacy_Impl *)a1);
        HALS_IOContext_Legacy_Impl::AnchorTime((HALS_IOContext_Legacy_Impl *)a1);
        *(_QWORD *)(a1 + 1312) = 0;
        HALS_IOContext_Legacy_Impl::AnchorIO((HALS_IOContext_Legacy_Impl *)a1, a5);
        v24 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 64) + 40);
        v25 = *(_QWORD *)(*(_QWORD *)(a1 + 1520) + 288);
        v26 = v25 + 200;
        v27 = *(int8x16_t **)(a1 + 1096);
        v28 = (float64x2_t)vdupq_n_s64(0x4176E36000000000uLL);
        v29 = (int8x16_t)vdivq_f64(vmulq_f64(*(float64x2_t *)(v25 + 200 + 40 * *(unsigned int *)(v25 + 192)), v28), v28);
        v30 = vdup_n_s32(*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 64) + 40) == 0);
        v31.i64[0] = v30.u32[0];
        v31.i64[1] = v30.u32[1];
        *v27 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v31, 0x3FuLL)), v29, vrev64q_s8(v29));
        v32 = *(_QWORD *)(v25 + 200 + 40 * *(unsigned int *)(v25 + 192) + 16);
        if (v24)
        {
          v32 = bswap64(v32);
          v33 = bswap64(*(_QWORD *)(v26 + 40 * *(unsigned int *)(v25 + 192) + 24));
          v34 = bswap64(*(_QWORD *)(v26 + 40 * *(unsigned int *)(v25 + 192) + 32));
          v35 = 50331648;
        }
        else
        {
          v33 = *(_QWORD *)(v26 + 40 * *(unsigned int *)(v25 + 192) + 24);
          v34 = *(_QWORD *)(v26 + 40 * *(unsigned int *)(v25 + 192) + 32);
          v35 = 3;
        }
        v27[1].i64[0] = v32;
        v27[2].i64[0] = v33;
        v27[2].i64[1] = v34;
        v27[5].i32[2] = v35;
        v36 = bswap32(a5);
        if (v24)
          v37 = v36;
        else
          v37 = a5;
        v27[1].i32[2] = v37;
        OSMemoryBarrier();
        v38 = *(_QWORD *)(a1 + 1520);
        if (v38)
        {
          if (*(_QWORD *)(v38 + 8))
          {
            v39 = *(HALS_IOClock **)(v38 + 288);
            if (v39)
              HALS_IOClock::GetCurrentTime(v39, a2);
          }
        }
        v40 = 1;
        goto LABEL_29;
      }
      v23 = 5;
    }
    (*v22)[v23]();
    goto LABEL_18;
  }
  *(_DWORD *)(a1 + 1384) = 3;
  v56 = *(_QWORD *)(a1 + 1416);
  if (v56)
  {
    LODWORD(v67) = 3;
    (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v56 + 48))(v56, &v67);
  }
  kdebug_trace();
  v40 = 0;
LABEL_29:
  if (!HALS_IOContext::GetAudioCaptureMode(*(HALS_IOContext **)(a1 + 24)))
  {
    v42 = HALS_IOThread::EnableRTSafeSyscallMasks(v8);
    v43 = (int)v42;
    if ((_DWORD)v42)
    {
      AMCP::Log::Scope_Registry::get(v42);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v67, "com.apple.coreaudio", "AMCP");
      v44 = (caulk::concurrent::messenger *)v67[1];
      v45 = pthread_self();
      v46 = pthread_mach_thread_np(v45);
      v47 = __error();
      v48 = strerror(*v47);
      v49 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
      *(_DWORD *)(v49 + 16) = 0;
      *(_BYTE *)(v49 + 20) = 16;
      *(_DWORD *)(v49 + 24) = v46;
      *(_QWORD *)(v49 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
      *(_DWORD *)(v49 + 40) = 1573;
      *(_DWORD *)(v49 + 44) = v43;
      *(_QWORD *)(v49 + 48) = v48;
      *(_QWORD *)v49 = &off_1E698FEE0;
      *(_QWORD *)(v49 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v44, (caulk::concurrent::message *)v49);
      v50 = (std::__shared_weak_count *)v68;
      if (v68)
      {
        v51 = (unint64_t *)(v68 + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
    }
  }
  return v40;
}

void sub_1B5B71A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  HALB_IOThread::Unlocker::~Unlocker((HALB_IOThread::Unlocker *)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOContext_Legacy_Impl::Engine_HandleOverload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;

  if (!*(_DWORD *)(a6 + 108)
    || ((v8 = *(uint64_t **)(a6 + 112), *(uint64_t **)(a6 + 120) != v8) ? (v9 = v8 == 0) : (v9 = 1), v9))
  {
    v8 = (uint64_t *)(a6 + 408);
  }
  v10 = *v8;
  v11 = *(_QWORD *)(*v8 + 8);
  if (v11 && *(_BYTE *)(v10 + 751))
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 816))(v11, *(unsigned int *)(*(_QWORD *)(a1 + 24) + 16), a5, a7, a8);
  return 0;
}

void std::__function::__func<std::__bind<int (*)(void *,unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &,unsigned int,HALS_IOContextReporter::EngineMetrics &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,unsigned int &,HALS_IOContextReporter::EngineMetrics &>,std::allocator<std::__bind<int (*)(void *,unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &,unsigned int,HALS_IOContextReporter::EngineMetrics &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,unsigned int &,HALS_IOContextReporter::EngineMetrics &>>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<std::__bind<int (*)(void *,unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &,unsigned int,HALS_IOContextReporter::EngineMetrics &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,unsigned int &,HALS_IOContextReporter::EngineMetrics &>,std::allocator<std::__bind<int (*)(void *,unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &,unsigned int,HALS_IOContextReporter::EngineMetrics &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,unsigned int &,HALS_IOContextReporter::EngineMetrics &>>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E698FDF0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<int (*)(void *,unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &,unsigned int,HALS_IOContextReporter::EngineMetrics &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,unsigned int &,HALS_IOContextReporter::EngineMetrics &>,std::allocator<std::__bind<int (*)(void *,unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &,unsigned int,HALS_IOContextReporter::EngineMetrics &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,unsigned int &,HALS_IOContextReporter::EngineMetrics &>>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E698FDF0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<int (*)(void *,unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &,unsigned int,HALS_IOContextReporter::EngineMetrics &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,unsigned int &,HALS_IOContextReporter::EngineMetrics &>,std::allocator<std::__bind<int (*)(void *,unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &,unsigned int,HALS_IOContextReporter::EngineMetrics &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,unsigned int &,HALS_IOContextReporter::EngineMetrics &>>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::operator()(uint64_t a1, unsigned int *a2, uint64_t a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 16), *a2, a3, *a4, *a5, a6, *(unsigned int *)(a1 + 24), a1 + 32);
}

uint64_t std::__function::__func<std::__bind<int (*)(void *,unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &,unsigned int,HALS_IOContextReporter::EngineMetrics &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,unsigned int &,HALS_IOContextReporter::EngineMetrics &>,std::allocator<std::__bind<int (*)(void *,unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &,unsigned int,HALS_IOContextReporter::EngineMetrics &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,unsigned int &,HALS_IOContextReporter::EngineMetrics &>>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__16__bindIPFiPvjR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfojRN22HALS_IOContextReporter13EngineMetricsEEJP26HALS_IOContext_Legacy_ImplRKNS_12placeholders4__phILi1EEERKNSE_ILi2EEERKNSE_ILi3EEERKNSE_ILi4EEERKNSE_ILi5EEERjS8_EEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<int (*)(void *,unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &,unsigned int,HALS_IOContextReporter::EngineMetrics &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,unsigned int &,HALS_IOContextReporter::EngineMetrics &>,std::allocator<std::__bind<int (*)(void *,unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &,unsigned int,HALS_IOContextReporter::EngineMetrics &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,unsigned int &,HALS_IOContextReporter::EngineMetrics &>>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::target_type()
{
}

uint64_t HALS_IOContext_Legacy_Impl::UpdateTime(HALS_IOContext_Legacy_Impl *this)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void (**v6)(FilterInactiveReferenceStreamOnlyEngines *__hidden);
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = *(unsigned int *)(*((_QWORD *)this + 3) + 16) | ((unint64_t)*((unsigned __int8 *)this + 1300) << 32);
  v7[0] = &off_1E69918C8;
  v7[1] = HALS_IOContext_Legacy_Impl::UpdateTime_Helper;
  v7[2] = v1;
  v8 = v7;
  v6 = &off_1E6992948;
  v2 = HALS_IOContext_Legacy_Impl::engine_apply<FilterInactiveReferenceStreamOnlyEngines>((uint64_t)this, (uint64_t)v7, (uint64_t)&v6);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_1B5B71D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void HALS_IOContext_Legacy_Impl::AnchorTime(HALS_IOContext_Legacy_Impl *this)
{
  uint64_t v1;
  double v3;
  double *v4;
  uint64_t v5;
  double Raw0Time;
  double v7;
  double mSampleTime;
  int v9;
  NSObject *v10;
  const BOOL *v11;
  double v12;
  double v13;
  _QWORD *v14;
  _QWORD *mWordClockTime;
  uint64_t v16;
  unsigned __int8 *i;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  AMCP::Log::Scope_Registry *v22;
  caulk::concurrent::messenger *v23;
  _opaque_pthread_t *v24;
  mach_port_t v25;
  Float64 v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  double v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t v38;
  AudioTimeStamp v39;
  AudioTimeStamp v40;
  AudioTimeStamp v41;
  AudioTimeStamp buf;
  double v43[3];
  double *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 190);
  if (!v1 || !*(_QWORD *)(v1 + 8))
    return;
  if (*((_DWORD *)this + 346) != 1)
  {
    v40.mFlags = 7;
    HALS_IOClock::GetCurrentTime(*(HALS_IOClock **)(v1 + 288), &v40);
    v43[0] = 0.0;
    v36 = 0;
    Raw0Time = HALS_IOClock::GetRaw0Time(*(HALS_IOClock **)(v1 + 288), v43, &v36);
    LODWORD(Raw0Time) = *(_DWORD *)(v1 + 316);
    v7 = (double)*(unint64_t *)&Raw0Time;
    mSampleTime = v40.mSampleTime;
    if (v40.mSampleTime - v43[0] < v7)
    {
      mSampleTime = v43[0] + v7;
      v40.mSampleTime = v43[0] + v7;
    }
    v9 = 0;
    v10 = MEMORY[0x1E0C81028];
    while (1)
    {
      v12 = HALS_IOContext_Legacy_Impl::CalculateEarliestAnchorSampleTimeBasedOnCommittedPosition(this);
      v13 = v12;
      if (mSampleTime < v12)
      {
        v40.mSampleTime = v12;
        mSampleTime = v12;
      }
      if ((AMCP::Feature_Flags::use_mcp_coloring_mixer(0, v11) & 1) == 0)
      {
        mSampleTime = (*(double (**)(_QWORD, _QWORD, _QWORD, double))(**(_QWORD **)(v1 + 8) + 624))(*(_QWORD *)(v1 + 8), (*(_DWORD *)(v1 + 340) + *(_DWORD *)(v1 + 324)), (*(_DWORD *)(v1 + 336) + *(_DWORD *)(v1 + 320)), mSampleTime);
        v40.mSampleTime = mSampleTime;
      }
      v40.mFlags = 1;
      v39.mFlags = 7;
      HALS_IOClock::TranslateTime(*(_QWORD *)(v1 + 288), &v40, &v39);
      v14 = operator new(0x28uLL);
      *v14 = &off_1E6991A38;
      v14[1] = HALS_IOContext_Legacy_Impl::AnchorTime_Helper;
      v14[2] = this;
      v14[3] = &v39;
      v14[4] = v1;
      v41.mWordClockTime = (UInt64)v14;
      *(_QWORD *)&buf.mSampleTime = &off_1E6992908;
      HALS_IOContext_Legacy_Impl::engine_apply<FilterClocklessReferenceStreamOnlyEngines>((uint64_t)this, (uint64_t)&v41, (uint64_t)&buf);
      mWordClockTime = (_QWORD *)v41.mWordClockTime;
      if ((AudioTimeStamp *)v41.mWordClockTime == &v41)
        break;
      if (v41.mWordClockTime)
      {
        v16 = 5;
LABEL_18:
        (*(void (**)(void))(*mWordClockTime + 8 * v16))();
      }
      for (i = (unsigned __int8 *)*((_QWORD *)this + 249); i; i = *(unsigned __int8 **)i)
      {
        if (i[40])
        {
          HALS_MultiTap::writer_anchor_time(*((HALS_MultiTap **)i + 3), *(_DWORD *)(*((_QWORD *)this + 3) + 16), &v39);
          atomic_store(1u, i + 41);
        }
      }
      v18 = HALS_IOContext_Legacy_Impl::CalculateEarliestAnchorSampleTimeBasedOnCommittedPosition(this);
      if (v18 != v13)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.mSampleTime) = 136316418;
          *(_QWORD *)((char *)&buf.mSampleTime + 4) = "HALS_IOContext_Legacy_Impl.cpp";
          WORD2(buf.mHostTime) = 1024;
          *(_DWORD *)((char *)&buf.mHostTime + 6) = 3944;
          WORD1(buf.mRateScalar) = 2048;
          *(double *)((char *)&buf.mRateScalar + 4) = v18;
          WORD2(buf.mWordClockTime) = 2048;
          *(double *)((char *)&buf.mWordClockTime + 6) = v13;
          HIWORD(buf.mSMPTETime.mCounter) = 2048;
          *(double *)&buf.mSMPTETime.mType = v18 - v13;
          buf.mSMPTETime.mHours = 1024;
          *(_DWORD *)&buf.mSMPTETime.mMinutes = v9;
          _os_log_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Retrying anchor for new context earliestAnchorSampleTimeRetry = %f, earliestAnchorSampleTime= %f, diff = %f retryCount = %d", (uint8_t *)&buf, 0x36u);
        }
        if (++v9 != 5)
          continue;
      }
      return;
    }
    mWordClockTime = &v41;
    v16 = 4;
    goto LABEL_18;
  }
  v40.mFlags = 2;
  v40.mHostTime = *((_QWORD *)this + 178);
  v39.mFlags = 7;
  HALS_IOClock::TranslateTime(*(_QWORD *)(v1 + 288), &v40, &v39);
  v40 = v39;
  v3 = (double)(*(_DWORD *)(v1 + 324) + *(_DWORD *)(v1 + 316) + *(_DWORD *)(v1 + 340));
  v40.mFlags = 1;
  v40.mSampleTime = v39.mSampleTime + v3;
  HALS_IOClock::TranslateTime(*(_QWORD *)(v1 + 288), &v40, &v39);
  v38 = 0;
  *(_QWORD *)&v43[0] = &off_1E6991960;
  *(_QWORD *)&v43[1] = &v38;
  v44 = v43;
  HALS_IOContext_Legacy_Impl::engine_apply<>((uint64_t)this, (uint64_t)v43);
  v4 = v44;
  if (v44 == v43)
  {
    v5 = 4;
    v4 = v43;
    goto LABEL_29;
  }
  if (v44)
  {
    v5 = 5;
LABEL_29:
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
  }
  buf.mFlags = 7;
  HALS_IOClock::GetCurrentTime(*(HALS_IOClock **)(v1 + 288), &buf);
  v19 = v39.mSampleTime;
  v20 = *(_QWORD *)(v1 + 288);
  v21 = buf.mSampleTime - (double)v38 / *(double *)(v20 + 112);
  if (v39.mSampleTime < v21)
  {
    v41.mHostTime = v39.mHostTime;
    *(_OWORD *)&v41.mRateScalar = *(_OWORD *)&v39.mRateScalar;
    *(_OWORD *)&v41.mSMPTETime.mSubframes = *(_OWORD *)&v39.mSMPTETime.mSubframes;
    *(_OWORD *)&v41.mSMPTETime.mHours = *(_OWORD *)&v39.mSMPTETime.mHours;
    v41.mFlags = 1;
    v41.mSampleTime = v21 + v3;
    v39.mFlags = 7;
    v22 = (AMCP::Log::Scope_Registry *)HALS_IOClock::TranslateTime(v20, &v41, &v39);
    AMCP::Log::Scope_Registry::get(v22);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v36, "com.apple.coreaudio", "AMCP");
    v23 = *(caulk::concurrent::messenger **)(v36 + 8);
    v24 = pthread_self();
    v25 = pthread_mach_thread_np(v24);
    v26 = v39.mSampleTime;
    v27 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
    *(_DWORD *)(v27 + 16) = 0;
    *(_BYTE *)(v27 + 20) = 0;
    *(_DWORD *)(v27 + 24) = v25;
    *(_QWORD *)(v27 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
    *(_DWORD *)(v27 + 40) = 3851;
    *(Float64 *)(v27 + 48) = v26;
    *(_QWORD *)v27 = &off_1E69919E0;
    *(_QWORD *)(v27 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v23, (caulk::concurrent::message *)v27);
    v28 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v19 = v39.mSampleTime;
  }
  v31 = *((double *)this + 146);
  if (v19 < v31)
    v31 = v19;
  *((double *)this + 146) = v31;
  *(double *)(*((_QWORD *)this + 137) + 160) = v31;
  *((_DWORD *)this + 346) = 2;
  v32 = *((_QWORD *)this + 177);
  if (v32)
  {
    LODWORD(v41.mSampleTime) = 2;
    (*(void (**)(uint64_t, AudioTimeStamp *))(*(_QWORD *)v32 + 48))(v32, &v41);
  }
  kdebug_trace();
  v33 = operator new(0x28uLL);
  *v33 = &off_1E6991A38;
  v33[1] = HALS_IOContext_Legacy_Impl::AnchorTime_Helper;
  v33[2] = this;
  v33[3] = &v39;
  v33[4] = v1;
  v41.mWordClockTime = (UInt64)v33;
  v36 = (unint64_t)&off_1E69928C8;
  HALS_IOContext_Legacy_Impl::engine_apply<FilterIfEngineOnlyNeedsReferenceStream>((uint64_t)this, (uint64_t)&v41, (uint64_t)&v36);
  v34 = (_QWORD *)v41.mWordClockTime;
  if ((AudioTimeStamp *)v41.mWordClockTime == &v41)
  {
    v35 = 4;
    v34 = &v41;
  }
  else
  {
    if (!v41.mWordClockTime)
      return;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
}

void sub_1B5B72308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char *a34)
{
  char *v34;
  char *v36;
  uint64_t v37;

  v36 = a34;
  if (a34 == v34)
  {
    v37 = 4;
    v36 = &a31;
  }
  else
  {
    if (!a34)
      goto LABEL_6;
    v37 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v36 + 8 * v37))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *HALS_IOContext_Legacy_Impl::AnchorIO(HALS_IOContext_Legacy_Impl *this, int a2)
{
  _QWORD *v4;
  _QWORD *result;
  uint64_t v6;
  void (**v7)(FilterClocklessReferenceStreamOnlyEngines *__hidden);
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = operator new(0x20uLL);
  *v4 = &off_1E6990110;
  v4[1] = HALS_IOContext_Legacy_Impl::IOWorkLoop_Engine_AnchorIO;
  v4[2] = this;
  *((_DWORD *)v4 + 6) = a2;
  v9 = v4;
  v7 = &off_1E6992908;
  HALS_IOContext_Legacy_Impl::engine_apply<FilterClocklessReferenceStreamOnlyEngines>((uint64_t)this, (uint64_t)v8, (uint64_t)&v7);
  result = v9;
  if (v9 == v8)
  {
    v6 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_1B5B72488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoop_HandleOverload(CAAudioTimeStamp &,CAAudioTimeStamp const&,CAAudioTimeStamp const&,CAAudioTimeStamp const&,unsigned int,double)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoop_HandleOverload(CAAudioTimeStamp &,CAAudioTimeStamp const&,CAAudioTimeStamp const&,CAAudioTimeStamp const&,unsigned int,double)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 2080;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Failed to set the RT safe syscall masks: %d - %s", buf, 0x28u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoop_HandleOverload(CAAudioTimeStamp &,CAAudioTimeStamp const&,CAAudioTimeStamp const&,CAAudioTimeStamp const&,unsigned int,double)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoop_HandleOverload(CAAudioTimeStamp &,CAAudioTimeStamp const&,CAAudioTimeStamp const&,CAAudioTimeStamp const&,unsigned int,double)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

uint64_t HALS_IOContext_Legacy_Impl::IOWorkLoop_Engine_AnchorIO(HALS_IOContext_Legacy_Impl *this, HALS_IOContext_Legacy_Impl *a2, HALS_IOEngineInfo *a3)
{
  _QWORD v4[2];

  if (*((_QWORD *)a2 + 1))
  {
    v4[0] = &off_1E698EDE0;
    v4[1] = this;
    HALS_IOPerformer::update_io_parameters((uint64_t)v4, (uint64_t *)a2, (uint64_t)a3, 0, 1);
  }
  return 0;
}

void std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,unsigned int),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,unsigned int),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,unsigned int),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,unsigned int),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E6990110;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,unsigned int),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,unsigned int),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6990110;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,unsigned int),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,unsigned int),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), a2, *(unsigned int *)(a1 + 24));
}

uint64_t std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,unsigned int),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,unsigned int),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__16__bindIRFiP26HALS_IOContext_Legacy_ImplR17HALS_IOEngineInfojEJS2_RKNS_12placeholders4__phILi1EEERjEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,unsigned int),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,unsigned int),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

Float64 HALS_IOContext_Legacy_Impl::CalculateEarliestAnchorSampleTimeBasedOnCommittedPosition(HALS_IOContext_Legacy_Impl *this)
{
  _QWORD *mWordClockTime;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  Float64 result;
  uint64_t v7;
  AudioTimeStamp v8;
  UInt64 v9;
  AudioTimeStamp v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v11[0] = &off_1E6991588;
  v11[1] = &v9;
  v11[2] = this;
  v12 = v11;
  v9 = 0;
  *(_QWORD *)&v10.mSampleTime = &off_1E698F688;
  v10.mHostTime = (UInt64)v11;
  v10.mWordClockTime = (UInt64)&v10;
  *(_QWORD *)&v8.mSampleTime = &off_1E6996590;
  v8.mHostTime = (UInt64)this + 1496;
  HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>((uint64_t)this + 1496, (uint64_t)&v10, (uint64_t)&v8);
  mWordClockTime = (_QWORD *)v10.mWordClockTime;
  if ((AudioTimeStamp *)v10.mWordClockTime == &v10)
  {
    v3 = 4;
    mWordClockTime = &v10;
  }
  else
  {
    if (!v10.mWordClockTime)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*mWordClockTime + 8 * v3))();
LABEL_6:
  v4 = v12;
  if (v12 == v11)
  {
    v5 = 4;
    v4 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  if (!v9)
    return 0.0;
  v10.mSampleTime = 0.0;
  memset(&v10.mRateScalar, 0, 48);
  memset(&v8, 0, sizeof(v8));
  v10.mFlags = 2;
  v10.mHostTime = v9;
  v8.mFlags = 1;
  result = 0.0;
  v7 = *((_QWORD *)this + 190);
  if (v7)
  {
    if (*(_QWORD *)(v7 + 8))
    {
      HALS_IOClock::TranslateTime(*(_QWORD *)(v7 + 288), &v10, &v8);
      return v8.mSampleTime;
    }
  }
  return result;
}

void sub_1B5B728E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContext_Legacy_Impl::AnchorTime_Helper(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  AudioTimeStamp v16;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 && (v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8)) != 0 && *(_DWORD *)(v4 + 16) != *(_DWORD *)(v3 + 16))
  {
    v10 = *(_OWORD **)(a1 + 8);
    v11 = v10[1];
    *(_OWORD *)&v16.mSampleTime = *v10;
    *(_OWORD *)&v16.mRateScalar = v11;
    v12 = v10[3];
    *(_OWORD *)&v16.mSMPTETime.mSubframes = v10[2];
    *(_OWORD *)&v16.mSMPTETime.mHours = v12;
    v16.mFlags = 2;
    v13 = (_OWORD *)(a2 + 360);
    *(_DWORD *)(a2 + 416) = 7;
    if (*(_BYTE *)(a2 + 748) && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 328))(a2) & 1) == 0)
    {
      v14 = *(_OWORD *)&v16.mRateScalar;
      *v13 = *(_OWORD *)&v16.mSampleTime;
      *(_OWORD *)(a2 + 376) = v14;
      v15 = *(_OWORD *)&v16.mSMPTETime.mHours;
      *(_OWORD *)(a2 + 392) = *(_OWORD *)&v16.mSMPTETime.mSubframes;
      *(_OWORD *)(a2 + 408) = v15;
    }
    else
    {
      HALS_IOClock::TranslateTime(*(_QWORD *)(a2 + 288), &v16, (AudioTimeStamp *)(a2 + 360));
    }
  }
  else
  {
    v5 = *(__int128 **)(a1 + 8);
    v6 = *v5;
    v7 = v5[1];
    v8 = v5[3];
    *(_OWORD *)(a2 + 392) = v5[2];
    *(_OWORD *)(a2 + 408) = v8;
    *(_OWORD *)(a2 + 360) = v6;
    *(_OWORD *)(a2 + 376) = v7;
  }
  return 0;
}

void std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E6991A38;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6991A38;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a1 + 16);
}

uint64_t std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__16__bindIRFiRN26HALS_IOContext_Legacy_Impl25AnchorTime_Helper_ContextER17HALS_IOEngineInfoEJS3_RKNS_12placeholders4__phILi1EEEEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::CalculateEarliestAnchorSampleTimeBasedOnCommittedPosition(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::CalculateEarliestAnchorSampleTimeBasedOnCommittedPosition(void)::$_0>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::CalculateEarliestAnchorSampleTimeBasedOnCommittedPosition(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::CalculateEarliestAnchorSampleTimeBasedOnCommittedPosition(void)::$_0>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6991588;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::CalculateEarliestAnchorSampleTimeBasedOnCommittedPosition(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::CalculateEarliestAnchorSampleTimeBasedOnCommittedPosition(void)::$_0>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6991588;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::CalculateEarliestAnchorSampleTimeBasedOnCommittedPosition(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::CalculateEarliestAnchorSampleTimeBasedOnCommittedPosition(void)::$_0>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  const BOOL *v12;
  double sample_time;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *mHostTime;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  double v38;
  double v39;
  UInt64 *v40;
  UInt64 v41;
  AudioTimeStamp v43;
  AudioTimeStamp v44;
  __int128 v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;

  if (!*(_DWORD *)(a6 + 108)
    || ((v7 = *(uint64_t **)(a6 + 112), *(uint64_t **)(a6 + 120) != v7) ? (v8 = v7 == 0) : (v8 = 1), v8))
  {
    v7 = (uint64_t *)(a6 + 408);
  }
  v9 = *v7;
  v10 = *(_QWORD *)(*v7 + 8);
  if (v10)
  {
    v11 = (*(double (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 840))(v10, *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 16), *(unsigned int *)(a6 + 12));
    if (AMCP::Feature_Flags::use_mcp_coloring_mixer(0, v12))
    {
      (*(void (**)(AudioTimeStamp *__return_ptr))(**(_QWORD **)(v9 + 8) + 872))(&v43);
      v46 = 0;
      v47 = 0;
      HALS_System::GetInstance(&v48, 0, &v46);
      v14 = *(_QWORD *)(v48 + 1336);
      v15 = *(std::__shared_weak_count **)(v48 + 1344);
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      mHostTime = (std::__shared_weak_count *)v43.mHostTime;
      v45 = *(_OWORD *)&v43.mSampleTime;
      if (v43.mHostTime)
      {
        v19 = (unint64_t *)(v43.mHostTime + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      AMCP::Graph::Synchronized_Mixer_Manager::get_anchor_time(&v44, v14, &v45);
      if (mHostTime)
      {
        v21 = (unint64_t *)&mHostTime->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))mHostTime->__on_zero_shared)(mHostTime);
          std::__shared_weak_count::__release_weak(mHostTime);
        }
      }
      if (v15)
      {
        v23 = (unint64_t *)&v15->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v25 = v49;
      if (v49)
      {
        v26 = (unint64_t *)&v49->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v28 = v47;
      if (v47)
      {
        v29 = (unint64_t *)&v47->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v44);
      v11 = sample_time;
      v31 = *(std::__shared_weak_count **)&v44.mSMPTETime.mSubframes;
      if (*(_QWORD *)&v44.mSMPTETime.mSubframes)
      {
        v32 = (unint64_t *)(*(_QWORD *)&v44.mSMPTETime.mSubframes + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = (std::__shared_weak_count *)v43.mHostTime;
      if (v43.mHostTime)
      {
        v35 = (unint64_t *)(v43.mHostTime + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
    }
    if (v11 > 0.0)
    {
      LODWORD(sample_time) = *(_DWORD *)(v9 + 312);
      *(double *)&v37 = (double)*(int *)(v9 + 320);
      v38 = v11 - (double)*(unint64_t *)&sample_time - *(double *)&v37;
      LODWORD(v37) = *(_DWORD *)(v9 + 336);
      v39 = v38
          - (double)v37
          - roundf(*(float *)(*(_QWORD *)(a1 + 16) + 1328) * (float)*(unsigned int *)(*(_QWORD *)(a1 + 16) + 1320));
      *(_QWORD *)&v44.mFlags = 0;
      if (v39 < 0.0)
        v39 = 0.0;
      memset(&v44.mHostTime, 0, 48);
      memset(&v43, 0, sizeof(v43));
      v44.mSampleTime = v39;
      v44.mFlags = 1;
      v43.mFlags = 2;
      HALS_IOClock::TranslateTime(*(_QWORD *)(v9 + 288), &v44, &v43);
      v40 = *(UInt64 **)(a1 + 8);
      v41 = *v40;
      if (*v40 <= v43.mHostTime)
        v41 = v43.mHostTime;
      *v40 = v41;
    }
  }
  return 0;
}

void sub_1B5B72E74(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5B72E58);
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::CalculateEarliestAnchorSampleTimeBasedOnCommittedPosition(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::CalculateEarliestAnchorSampleTimeBasedOnCommittedPosition(void)::$_0>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl57CalculateEarliestAnchorSampleTimeBasedOnCommittedPositionEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::CalculateEarliestAnchorSampleTimeBasedOnCommittedPosition(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::CalculateEarliestAnchorSampleTimeBasedOnCommittedPosition(void)::$_0>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::target_type()
{
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_1,std::tuple<unsigned int,char const*,int,double>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_1,std::tuple<unsigned int,char const*,int,double>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  caulk::concurrent::message *v12;
  uint8_t buf[8];
  _BYTE v14[10];
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v14;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v14)
  {
    v4 = (unint64_t *)(*(_QWORD *)v14 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v14 = 2080;
    *(_QWORD *)&v14[2] = v8;
    v15 = 1024;
    v16 = v9;
    v17 = 2048;
    v18 = v10;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Pinning anchor time to Sample: %0.f", buf, 0x22u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_1,std::tuple<unsigned int,char const*,int,double>>::rt_cleanup::~rt_cleanup(&v12);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_1,std::tuple<unsigned int,char const*,int,double>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_0>,int ()(HALS_IOEngineInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6991960;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6991960;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_0>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  HALS_IODevice *v5;
  unint64_t v6;
  unint64_t *v7;

  *(_BYTE *)(a2 + 424) = 1;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    v5 = (HALS_IODevice *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 320))(v3);
    v6 = (unint64_t)(*(double *)(*(_QWORD *)(a2 + 288) + 112) * (double)GetAvailableCatchupSamplesForDevice(v5));
    v7 = *(unint64_t **)(a1 + 8);
    if (*v7 > v6)
      v6 = *v7;
    *v7 = v6;
  }
  return 0;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_0>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl24AnchorTimeForCatchupModeEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_0>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

uint64_t GetAvailableCatchupSamplesForDevice(HALS_IODevice *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v1 = (uint64_t)a1;
  v13 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = (*(uint64_t (**)(HALS_IODevice *))(*(_QWORD *)a1 + 408))(a1);
    v3 = *(_QWORD *)v1;
    if (v2)
    {
      v1 = (*(unsigned int (**)(uint64_t))(v3 + 416))(v1);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v7 = 136315650;
        v8 = "HALS_IOContext_Legacy_Impl.cpp";
        v9 = 1024;
        v10 = 5268;
        v11 = 2048;
        v12 = v1;
        v4 = MEMORY[0x1E0C81028];
        v5 = "%25s:%-5d  \tUsing past data: %lld";
LABEL_7:
        _os_log_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v7, 0x1Cu);
      }
    }
    else
    {
      v1 = (uint64_t)(float)((float)(*(unsigned int (**)(uint64_t))(v3 + 296))(v1) * 0.5);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v7 = 136315650;
        v8 = "HALS_IOContext_Legacy_Impl.cpp";
        v9 = 1024;
        v10 = 5276;
        v11 = 2048;
        v12 = v1;
        v4 = MEMORY[0x1E0C81028];
        v5 = "%25s:%-5d  Using ring buffer: %lld";
        goto LABEL_7;
      }
    }
  }
  return v1;
}

uint64_t HALS_IOContext_Legacy_Impl::UpdateTime_Helper(HALS_IOContext_Legacy_Impl *this, uint64_t a2, HALS_IOEngineInfo *a3)
{
  uint64_t result;
  std::__shared_weak_count *mHostTime;
  Float64 mSampleTime;
  unint64_t *v8;
  unint64_t v9;
  Float64 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  UInt64 v25;
  double v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  Float64 v30;
  __int128 v31;
  Float64 v32;
  AudioTimeStamp v33;
  AudioTimeStamp v34;

  result = *(_QWORD *)(a2 + 8);
  if (!result)
    return result;
  v31 = 0uLL;
  v32 = 0.0;
  (*(void (**)(uint64_t, HALS_IOContext_Legacy_Impl *, __int128 *, char *, Float64 *))(*(_QWORD *)result
                                                                                               + 616))(result, this, &v31, (char *)&v31 + 8, &v32);
  (*(void (**)(AudioTimeStamp *__return_ptr))(**(_QWORD **)(a2 + 8) + 872))(&v34);
  mSampleTime = v34.mSampleTime;
  mHostTime = (std::__shared_weak_count *)v34.mHostTime;
  if (!v34.mHostTime)
    goto LABEL_6;
  v8 = (unint64_t *)(v34.mHostTime + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))mHostTime->__on_zero_shared)(mHostTime);
    std::__shared_weak_count::__release_weak(mHostTime);
    if (mSampleTime != 0.0)
      goto LABEL_7;
  }
  else
  {
LABEL_6:
    if (mSampleTime != 0.0)
    {
LABEL_7:
      (*(void (**)(AudioTimeStamp *__return_ptr))(**(_QWORD **)(a2 + 8) + 872))(&v33);
      v10 = v33.mSampleTime;
      v11 = *(_QWORD *)(*(_QWORD *)&v33.mSampleTime + 56);
      v12 = *(_DWORD *)(v11 + 96);
      *(_OWORD *)&v34.mSampleTime = v31;
      v34.mRateScalar = v32;
      HALS_IOClock::Update(v11, (uint64_t)&v34);
      v13 = *(_QWORD *)(*(_QWORD *)&v10 + 56);
      if (v12)
        v14 = 1;
      else
        v14 = *(_DWORD *)(v13 + 96) == 0;
      if (!v14)
      {
        v15 = *(_QWORD *)(v13 + 40 * *(unsigned int *)(v13 + 192) + 224);
        if (!*(_BYTE *)(*(_QWORD *)&v10 + 16))
          *(_BYTE *)(*(_QWORD *)&v10 + 16) = 1;
        *(_QWORD *)(*(_QWORD *)&v10 + 8) = v15;
      }
      v16 = (std::__shared_weak_count *)v33.mHostTime;
      if (v33.mHostTime)
      {
        v17 = (unint64_t *)(v33.mHostTime + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
  }
  v19 = *(_QWORD *)(a2 + 288);
  v29 = v31;
  v30 = v32;
  v20 = HALS_IOClock::Update(v19, (uint64_t)&v29);
  if ((_DWORD)v20)
  {
    (*(void (**)(_QWORD, HALS_IOContext_Legacy_Impl *, uint64_t))(**(_QWORD **)(a2 + 8) + 632))(*(_QWORD *)(a2 + 8), this, v20);
    return 1;
  }
  else
  {
    v21 = (_OWORD *)(a2 + 792);
    v22 = *(_OWORD *)(a2 + 808);
    *(_OWORD *)&v34.mSampleTime = *(_OWORD *)(a2 + 792);
    *(_OWORD *)&v34.mRateScalar = v22;
    v23 = *(_OWORD *)(a2 + 840);
    *(_OWORD *)&v34.mSMPTETime.mSubframes = *(_OWORD *)(a2 + 824);
    *(_OWORD *)&v34.mSMPTETime.mHours = v23;
    v24 = *(_QWORD *)(a2 + 288);
    if (*(_DWORD *)(v24 + 96) && (v25 = v34.mHostTime) != 0)
    {
      v26 = *(double *)(v24 + 112) - *(double *)(v24 + 40 * *(unsigned int *)(v24 + 192) + 200);
      if (v26 > 0.0)
      {
        v34.mHostTime = (unint64_t)(v26 + (double)v34.mHostTime);
        v33.mHostTime = (unint64_t)(v26 + (double)v25);
        v34.mFlags = 2;
        v33.mFlags = 1;
        HALS_IOClock::TranslateTime(v24, &v34, &v33);
        v27 = *(_OWORD *)&v33.mRateScalar;
        *v21 = *(_OWORD *)&v33.mSampleTime;
        *(_OWORD *)(a2 + 808) = v27;
        v28 = *(_OWORD *)&v33.mSMPTETime.mHours;
        *(_OWORD *)(a2 + 824) = *(_OWORD *)&v33.mSMPTETime.mSubframes;
        *(_OWORD *)(a2 + 840) = v28;
      }
    }
    else
    {
      *(_QWORD *)(a2 + 840) = 0;
      *(_OWORD *)(a2 + 808) = 0u;
      *(_OWORD *)(a2 + 824) = 0u;
      *v21 = 0u;
      *(_QWORD *)(a2 + 848) = 3;
    }
    return 0;
  }
}

void sub_1B5B7369C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOContext_Legacy_Impl::engine_apply<FilterInactiveReferenceStreamOnlyEngines>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void (**v17)(FilterEngineInfoWithoutEngine *__hidden);
  _QWORD v18[2];
  _QWORD *v19[2];
  _BYTE v20[24];
  _BYTE *v21;
  _QWORD v22[3];
  _QWORD *v23;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v20, a2);
  v17 = &off_1E6992878;
  v22[0] = &off_1E6991848;
  v22[1] = v20;
  v23 = v22;
  v25 = v24;
  std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::__clone((uint64_t)v22, v24);
  v5 = *(_QWORD **)(a1 + 1528);
  v6 = *(_QWORD **)(a1 + 1536);
  if (v5 == v6)
  {
LABEL_11:
    v9 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 1;
    while (1)
    {
      if ((v8 & 1) != 0)
        v7 = 0;
      else
        v7 = (_QWORD *)((char *)v7 + 1);
      v19[0] = v5;
      v19[1] = v7;
      if ((((uint64_t (*)(uint64_t, _QWORD **))v17[2])((uint64_t)&v17, v19) & 1) == 0
        && ((*(uint64_t (**)(uint64_t, _QWORD **))(*(_QWORD *)a3 + 16))(a3, v19) & 1) == 0)
      {
        v18[0] = v5;
        v18[1] = v7;
        if (!v25)
          std::__throw_bad_function_call[abi:ne180100]();
        v9 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v25 + 48))(v25, v18);
        if ((_DWORD)v9)
          break;
      }
      v8 = 0;
      if (++v5 == v6)
        goto LABEL_11;
    }
  }
  v10 = v25;
  if (v25 == v24)
  {
    v11 = 4;
    v10 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_17;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_17:
  v12 = v23;
  if (v23 == v22)
  {
    v13 = 4;
    v12 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_22;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_22:
  v14 = v21;
  if (v21 == v20)
  {
    v15 = 4;
    v14 = v20;
    goto LABEL_26;
  }
  if (v21)
  {
    v15 = 5;
LABEL_26:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  return v9;
}

void sub_1B5B73878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  _Unwind_Resume(exception_object);
}

void std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6991848;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6991848;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::operator()(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a2;
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a2 + 16))(**a2);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
    if (!v5)
      std::__throw_bad_function_call[abi:ne180100]();
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 48))(v5, *v3);
  }
  return result;
}

uint64_t std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN21HALS_IOEngineInfoList12engine_applyIJ29FilterEngineInfoWithoutEngine40FilterInactiveReferenceStreamOnlyEnginesEEEiNSt3__18functionIFiR17HALS_IOEngineInfoEEEDpRKT_EUlRN15VisitableVectorINS3_10unique_ptrIS5_NS3_14default_deleteIS5_EEEEE13ItemWithIndexEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::target_type()
{
}

void std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,BOOL),unsigned int,std::placeholders::__ph<1> const&,BOOL volatile&>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,BOOL),unsigned int,std::placeholders::__ph<1> const&,BOOL volatile&>>,int ()(HALS_IOEngineInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,BOOL),unsigned int,std::placeholders::__ph<1> const&,BOOL volatile&>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,BOOL),unsigned int,std::placeholders::__ph<1> const&,BOOL volatile&>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E69918C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,BOOL),unsigned int,std::placeholders::__ph<1> const&,BOOL volatile&>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,BOOL),unsigned int,std::placeholders::__ph<1> const&,BOOL volatile&>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E69918C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,BOOL),unsigned int,std::placeholders::__ph<1> const&,BOOL volatile&>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,BOOL),unsigned int,std::placeholders::__ph<1> const&,BOOL volatile&>>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(a1 + 8))(*(unsigned int *)(a1 + 16), a2, *(unsigned __int8 *)(a1 + 20));
}

uint64_t std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,BOOL),unsigned int,std::placeholders::__ph<1> const&,BOOL volatile&>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,BOOL),unsigned int,std::placeholders::__ph<1> const&,BOOL volatile&>>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__16__bindIRFijR17HALS_IOEngineInfobEJjRKNS_12placeholders4__phILi1EEERVbEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,BOOL),unsigned int,std::placeholders::__ph<1> const&,BOOL volatile&>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,BOOL),unsigned int,std::placeholders::__ph<1> const&,BOOL volatile&>>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

uint64_t HALS_IOContext_Legacy_Impl::ResetTimeForOverload_Helper(HALS_IOContext_Legacy_Impl *this, uint64_t a2, HALS_IOEngineInfo *a3)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v10 = 0.0;
    v11 = 0;
    v12 = 0;
    (*(void (**)(uint64_t, HALS_IOContext_Legacy_Impl *, double *, uint64_t *, uint64_t *))(*(_QWORD *)v4 + 616))(v4, this, &v10, &v11, &v12);
    v9 = 0.0;
    HALS_IOClock::GetRaw0Time(*(HALS_IOClock **)(a2 + 288), &v9, &v8);
    LODWORD(v6) = *(_DWORD *)(a2 + 776);
    if (v10 > v9 + (double)v6)
      (*(void (**)(_QWORD, HALS_IOContext_Legacy_Impl *, uint64_t, double))(**(_QWORD **)(a2 + 8) + 632))(*(_QWORD *)(a2 + 8), this, 4, v10);
  }
  return 0;
}

void ___ZNK26HALS_IOContext_Legacy_Impl28CanHandleOverloadWithCatchupER16CAAudioTimeStamp_block_invoke(uint64_t a1)
{
  uint64_t v2;
  HALS_IODevice *v3;
  double v4;
  double v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  double v11;
  __int16 v12;
  double v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  v3 = (HALS_IODevice *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 1520) + 8) + 320))(*(_QWORD *)(*(_QWORD *)(v2 + 1520) + 8));
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v6 = 136315394;
    v7 = "HALS_IOContext_Legacy_Impl.cpp";
    v8 = 1024;
    v9 = 4089;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Handling overload with catchup mode: ", (uint8_t *)&v6, 0x12u);
  }
  v4 = **(double **)(a1 + 48) - (double)GetAvailableCatchupSamplesForDevice(v3);
  v5 = *(double *)(v2 + 1168);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v6 = 136315906;
    v7 = "HALS_IOContext_Legacy_Impl.cpp";
    v8 = 1024;
    v9 = 4096;
    v10 = 2048;
    v11 = v4;
    v12 = 2048;
    v13 = v5;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  \tFound oldest valid sample: %.0f, nextReadSample: %.0f", (uint8_t *)&v6, 0x26u);
  }
  if (v5 > v4)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoop_HandleOverload(CAAudioTimeStamp &,CAAudioTimeStamp const&,CAAudioTimeStamp const&,CAAudioTimeStamp const&,unsigned int,double)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoop_HandleOverload(CAAudioTimeStamp &,CAAudioTimeStamp const&,CAAudioTimeStamp const&,CAAudioTimeStamp const&,unsigned int,double)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 2080;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Failed to clear the syscall masks: %d - %s", buf, 0x28u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoop_HandleOverload(CAAudioTimeStamp &,CAAudioTimeStamp const&,CAAudioTimeStamp const&,CAAudioTimeStamp const&,unsigned int,double)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoop_HandleOverload(CAAudioTimeStamp &,CAAudioTimeStamp const&,CAAudioTimeStamp const&,CAAudioTimeStamp const&,unsigned int,double)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void HALS_IOContext_Legacy_Impl::IOWorkLoop_ReportClientTimeout(uint64_t a1, unsigned int *a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  double v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  unint64_t v59;
  std::string __p;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  unint64_t v76;
  std::string v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _BYTE v84[80];
  __uint64_t v85[3];

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 216);
  v9 = *(_QWORD *)(v8 + 32);
  v10 = *(_QWORD *)(v8 + 96);
  if (v9 <= v10)
    v11 = v10;
  else
    v11 = v9;
  v12 = *((_QWORD *)a2 + 2);
  v13 = __udivti3();
  if (v12 >= v11)
    v14 = v13;
  else
    v14 = -v13;
  v16 = a4;
  v15 = a4 == 0;
  if (a4)
    v17 = 2;
  else
    v17 = 1;
  v18 = *(_QWORD *)(a1 + 568);
  v49 = *(_OWORD *)(a1 + 592);
  v50 = *(_OWORD *)(a1 + 576);
  if (v15)
    v19 = 1.0;
  else
    v19 = (double)(a3 * (unint64_t)*a2);
  v85[0] = 0;
  pthread_threadid_np(0, v85);
  LOBYTE(v72) = v17;
  v20 = *(_QWORD *)(a1 + 24);
  DWORD1(v72) = *(_DWORD *)(v20 + 16);
  DWORD2(v72) = *(_DWORD *)(a1 + 1304);
  if (*(_QWORD *)(a1 + 1480))
    v21 = 0;
  else
    v21 = *(_QWORD *)(a1 + 1472) != 0;
  BYTE12(v72) = v21;
  *(_WORD *)((char *)&v72 + 13) = 0;
  HIBYTE(v72) = 0;
  *(double *)&v73 = v19;
  v22 = *(_QWORD *)(v20 + 80);
  if (v22)
  {
    v23 = *((double *)a2 + 17);
    v24 = (*(double (**)(uint64_t, double))(*(_QWORD *)v22 + 136))(v22, *((double *)a2 + 9) - v23);
    v25 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 80);
    *((double *)&v73 + 1) = v23 + (double)(uint64_t)(v24 * 24000000.0);
    v26 = (unint64_t *)(a2 + 36);
    v27 = (unint64_t *)(a2 + 20);
    if (v25)
    {
      v28 = *v26;
      v29 = (double)(v28
                   + (uint64_t)((*(double (**)(uint64_t, double))(*(_QWORD *)v25 + 136))(v25, (double)(*v27 - *v26))* 24000000.0));
      goto LABEL_21;
    }
  }
  else
  {
    *((_QWORD *)&v73 + 1) = 0;
    v26 = (unint64_t *)(a2 + 36);
    v27 = (unint64_t *)(a2 + 20);
  }
  v29 = 0.0;
LABEL_21:
  *(double *)&v74 = v29;
  DWORD2(v74) = *a2;
  v30 = *((_QWORD *)a2 + 18);
  *(_QWORD *)&v75 = v85[0];
  *((_QWORD *)&v75 + 1) = v30;
  v31 = *((_QWORD *)a2 + 10);
  v76 = v31;
  if (*(char *)(a1 + 2079) < 0)
  {
    std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)(a1 + 2056), *(_QWORD *)(a1 + 2064));
    v30 = *v26;
    v31 = *v27;
  }
  else
  {
    v77 = *(std::string *)(a1 + 2056);
  }
  v32 = __udivti3();
  v33 = *(_QWORD *)(a1 + 1520);
  *(_QWORD *)&v78 = *(_QWORD *)(v33 + 768);
  v34 = *(_QWORD *)(a1 + 24);
  DWORD2(v78) = *(_DWORD *)(*(_QWORD *)(v34 + 64) + 4);
  if (v31 >= v30)
    v35 = v32;
  else
    v35 = -v32;
  v36 = *((_QWORD *)a2 + 30);
  *(_QWORD *)&v79 = *((_QWORD *)a2 + 29);
  *((_QWORD *)&v79 + 1) = v35;
  *(_QWORD *)&v80 = v36;
  *((_QWORD *)&v80 + 1) = v14;
  v37 = *(_QWORD *)(v33 + 360);
  *(double *)&v81 = *(float *)(a1 + 1328);
  *((_QWORD *)&v81 + 1) = v37;
  v82 = *(unint64_t *)(a1 + 1312);
  v83 = *(_OWORD *)(v34 + 200);
  *(_QWORD *)v84 = v18;
  *(_OWORD *)&v84[8] = v50;
  *(_OWORD *)&v84[24] = v49;
  memset(&v84[40], 0, 40);
  v38 = *(_QWORD *)(v34 + 216);
  v57 = v74;
  v58 = v75;
  v59 = v76;
  v55 = v72;
  v56 = v73;
  v39 = SHIBYTE(v77.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
  else
    __p = v77;
  v69 = *(_OWORD *)&v84[32];
  v70 = *(_OWORD *)&v84[48];
  v71 = *(_OWORD *)&v84[64];
  v65 = v82;
  v66 = v83;
  v67 = *(_OWORD *)v84;
  v68 = *(_OWORD *)&v84[16];
  v61 = v78;
  v62 = v79;
  v63 = v80;
  v64 = v81;
  v51 = *(_OWORD *)(a2 + 2);
  v52 = *(_OWORD *)(a2 + 6);
  v53 = *(_OWORD *)(a2 + 10);
  v54 = *(_OWORD *)(a2 + 14);
  *(_BYTE *)(v38 + 1) = 1;
  if (v16)
  {
    *(_OWORD *)(v38 + 88) = v51;
    *(_OWORD *)(v38 + 104) = v52;
    *(_OWORD *)(v38 + 120) = v53;
    *(_OWORD *)(v38 + 136) = v54;
  }
  v40 = *(_QWORD *)(v38 + 8);
  *(_OWORD *)v40 = v55;
  *(_QWORD *)(v40 + 64) = v59;
  *(_OWORD *)(v40 + 32) = v57;
  *(_OWORD *)(v40 + 48) = v58;
  *(_OWORD *)(v40 + 16) = v56;
  std::string::operator=((std::string *)(v40 + 72), &__p);
  v41 = v61;
  v42 = v63;
  *(_OWORD *)(v40 + 112) = v62;
  *(_OWORD *)(v40 + 128) = v42;
  *(_OWORD *)(v40 + 96) = v41;
  v43 = v64;
  v44 = v65;
  v45 = v67;
  *(_OWORD *)(v40 + 176) = v66;
  *(_OWORD *)(v40 + 192) = v45;
  *(_OWORD *)(v40 + 144) = v43;
  *(_OWORD *)(v40 + 160) = v44;
  v46 = v68;
  v47 = v69;
  v48 = v71;
  *(_OWORD *)(v40 + 240) = v70;
  *(_OWORD *)(v40 + 256) = v48;
  *(_OWORD *)(v40 + 208) = v46;
  *(_OWORD *)(v40 + 224) = v47;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v39 & 0x80000000) == 0)
      return;
LABEL_36:
    operator delete(v77.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v39 < 0)
    goto LABEL_36;
}

void sub_1B5B742D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;

  operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(HALS_IOContext_Legacy_Impl *this)
{
  _QWORD *result;
  uint64_t v2;
  void (**v3)(FilterIfEngineOnlyNeedsReferenceStream *__hidden);
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v5 = v4;
  v3 = &off_1E69928C8;
  v4[0] = &off_1E6991C38;
  HALS_IOContext_Legacy_Impl::engine_apply<FilterIfEngineOnlyNeedsReferenceStream>((uint64_t)this, (uint64_t)v4, (uint64_t)&v3);
  result = v5;
  if (v5 == v4)
  {
    v2 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v2 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v2))();
}

void sub_1B5B743A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(void)::$_0>,int ()(HALS_IOEngineInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(void)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6991C38;
  return result;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(void)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6991C38;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(void)::$_0>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 864))(v2);
  return 0;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(void)::$_0>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl46NotifyWaitingTapsThatThisReaderHasFullyStartedEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(void)::$_0>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

uint64_t HALS_IOContext_Legacy_Impl::IsTimeRunning(HALS_IOContext_Legacy_Impl *this, unsigned int a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void (**v17)(FilterIfEngineOnlyNeedsReferenceStream *__hidden);
  void (**v18)(FilterEngineInfoWithoutEngine *__hidden);
  _QWORD v19[2];
  _QWORD *v20[2];
  _QWORD v21[3];
  _QWORD *v22;
  _BYTE v23[24];
  _BYTE *v24;
  _QWORD v25[3];
  _QWORD *v26;
  _QWORD v27[3];
  _QWORD *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v21[0] = &off_1E6991698;
  v21[1] = HALS_IOContext_Legacy_Impl::IsTimeRunning_Helper;
  v21[2] = a2;
  v22 = v21;
  v17 = &off_1E69928C8;
  v24 = v23;
  std::__function::__func<std::__bind<int (&)(HALS_IOEngineInfo const&,unsigned int),std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(HALS_IOEngineInfo const&,unsigned int),std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo const&)>::__clone((uint64_t)v21, (uint64_t)v23);
  v18 = &off_1E6992878;
  v25[0] = &off_1E6991608;
  v25[1] = v23;
  v26 = v25;
  v28 = v27;
  std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(std::function<int ()(HALS_IOEngineInfo const&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ConstItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(std::function<int ()(HALS_IOEngineInfo const&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ConstItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ConstItemWithIndex &)>::__clone((uint64_t)v25, v27);
  v3 = (_QWORD *)*((_QWORD *)this + 191);
  v4 = (_QWORD *)*((_QWORD *)this + 192);
  if (v3 == v4)
  {
LABEL_11:
    v7 = 1;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    while (1)
    {
      if ((v6 & 1) != 0)
        v5 = 0;
      else
        v5 = (_QWORD *)((char *)v5 + 1);
      v20[0] = v3;
      v20[1] = v5;
      if ((((uint64_t (*)(uint64_t, _QWORD **))v18[2])((uint64_t)&v18, v20) & 1) == 0
        && (((uint64_t (*)(uint64_t, _QWORD **))v17[2])((uint64_t)&v17, v20) & 1) == 0)
      {
        v19[0] = v3;
        v19[1] = v5;
        if (!v28)
          std::__throw_bad_function_call[abi:ne180100]();
        if ((*(unsigned int (**)(_QWORD *, _QWORD *))(*v28 + 48))(v28, v19))
          break;
      }
      v6 = 0;
      if (++v3 == v4)
        goto LABEL_11;
    }
    v7 = 0;
  }
  v8 = v28;
  if (v28 == v27)
  {
    v9 = 4;
    v8 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_17;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
  v10 = v26;
  if (v26 == v25)
  {
    v11 = 4;
    v10 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_22;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_22:
  v12 = v24;
  if (v24 == v23)
  {
    v13 = 4;
    v12 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_27;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_27:
  v14 = v22;
  if (v22 == v21)
  {
    v15 = 4;
    v14 = v21;
    goto LABEL_31;
  }
  if (v22)
  {
    v15 = 5;
LABEL_31:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  return v7;
}

void sub_1B5B746C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v25 = *(_QWORD **)(v23 - 48);
  if (v25 == (_QWORD *)(v23 - 72))
  {
    v26 = 4;
    v25 = (_QWORD *)(v23 - 72);
  }
  else
  {
    if (!v25)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_6:
  v27 = *(_QWORD **)(v23 - 80);
  if (v27 == (_QWORD *)(v23 - 104))
  {
    v28 = 4;
    v27 = (_QWORD *)(v23 - 104);
  }
  else
  {
    if (!v27)
      goto LABEL_11;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_11:
  v29 = a23;
  if (a23 == &a20)
  {
    v30 = 4;
    v29 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_16;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_16:
  v31 = a19;
  if (a19 == &a16)
  {
    v32 = 4;
    v31 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_21;
    v32 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
LABEL_21:
  _Unwind_Resume(exception_object);
}

void HALS_IOContext_Legacy_Impl::StartTapOutput(HALS_IOContext_Legacy_Impl *this)
{
  unsigned __int8 *i;
  unsigned __int8 v3;
  _QWORD *v4;
  uint64_t *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  HALS_Object *v9;
  HALS_ObjectMap *v10;
  BOOL v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  HALS_ObjectMap *v16;
  uint64_t v17;
  HALS_ObjectMap *v18;
  HALS_Object *v19;
  uint64_t *j;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  int v25;
  __int128 v26;
  __int128 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 250))
  {
    for (i = (unsigned __int8 *)*((_QWORD *)this + 249); i; i = *(unsigned __int8 **)i)
    {
      v3 = atomic_load(i + 42);
      if ((v3 & 1) == 0)
        HALS_IOContext_Legacy_Impl::StartTapOutput((uint64_t)this, (uint64_t)(i + 24));
    }
    if (!*((_BYTE *)this + 1714))
    {
      v23 = 0u;
      v24 = 0u;
      v25 = 1065353216;
      v4 = (_QWORD *)((char *)this + 1992);
      while (1)
      {
        v4 = (_QWORD *)*v4;
        if (!v4)
          break;
        v5 = *(uint64_t **)(v4[3] + 488);
        if (v5)
        {
          v6 = *(_DWORD *)(*((_QWORD *)this + 3) + 16);
          do
          {
            v7 = *((_DWORD *)v5 + 4);
            if (v7 != v6)
            {
              v8 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)v5 + 4));
              v10 = (HALS_ObjectMap *)v8;
              if (v8)
              {
                if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v8 + 96) + 416))(*(_QWORD *)(v8 + 96)))
                  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)&v23, v7, v7);
              }
              HALS_ObjectMap::ReleaseObject(v10, v9);
            }
            v5 = (uint64_t *)*v5;
          }
          while (v5);
        }
      }
      if (*((_QWORD *)this + 250))
        v11 = *((_QWORD *)&v24 + 1) == 0;
      else
        v11 = 1;
      if (!v11)
      {
        v12 = 0;
        while ((HALB_IOThread::HasBeenStopped((HALS_IOContext_Legacy_Impl *)((char *)this + 312)) & 1) == 0)
        {
          kdebug_trace();
          v13 = (_QWORD *)((char *)this + 1992);
          while (1)
          {
            v13 = (_QWORD *)*v13;
            if (!v13)
              break;
            v14 = v13[3];
            v26 = 0u;
            v27 = 0u;
            v28 = 1065353216;
            v15 = *(uint64_t **)(v14 + 488);
            if (v15)
            {
              do
              {
                v16 = (HALS_ObjectMap *)*((unsigned int *)v15 + 4);
                if (std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(&v23, *((_DWORD *)v15 + 4)))
                {
                  v17 = HALS_ObjectMap::CopyObjectByObjectID(v16);
                  v18 = (HALS_ObjectMap *)v17;
                  if (!v17
                    || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 96) + 152))(*(_QWORD *)(v17 + 96)) & 1) != 0
                    || ((*(uint64_t (**)(_QWORD *))(**((_QWORD **)v18 + 12) + 176))(*((_QWORD **)v18 + 12)) & 1) != 0)
                  {
                    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)&v26, v16, (int)v16);
                  }
                  HALS_ObjectMap::ReleaseObject(v18, v19);
                }
                v15 = (uint64_t *)*v15;
              }
              while (v15);
              for (j = (uint64_t *)v27; j; j = (uint64_t *)*j)
              {
                v21 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(&v23, *((_DWORD *)j + 4));
                if (v21)
                  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(&v23, v21);
              }
            }
            std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)&v26);
          }
          v22 = mach_absolute_time();
          HALS_IOContext_Legacy_Impl::IOWorkLoop_SleepUntilWakeTime(this, v22 + 239999);
          if (*((_QWORD *)this + 250))
          {
            v12 = 1;
            if (*((_QWORD *)&v24 + 1))
              continue;
          }
          goto LABEL_43;
        }
        if ((v12 & 1) == 0)
          goto LABEL_44;
LABEL_43:
        kdebug_trace();
      }
LABEL_44:
      std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)&v23);
    }
  }
}

void sub_1B5B74A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, NSObject **buf, __int128 a16, uint64_t a17, __int16 a18, int a19)
{
  uint64_t v19;
  AMCP::Log::Scope_Registry *v21;
  NSObject *v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  int v25;

  if (!a2)
    _Unwind_Resume(exception_object);
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)&a9);
  v21 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
  AMCP::Log::Scope_Registry::get(v21);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
  v22 = *buf;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    v23 = pthread_self();
    v24 = pthread_mach_thread_np(v23);
    v25 = *(_DWORD *)(*(_QWORD *)(v19 + 24) + 16);
    LODWORD(buf) = 67109890;
    HIDWORD(buf) = v24;
    LOWORD(a16) = 2080;
    *(_QWORD *)((char *)&a16 + 2) = "HALS_IOContext_Legacy_Impl.cpp";
    WORD5(a16) = 1024;
    HIDWORD(a16) = 5357;
    LOWORD(a17) = 1024;
    *(_DWORD *)((char *)&a17 + 2) = v25;
    _os_log_error_impl(&dword_1B57BA000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception during MaybeWaitForTapReadersToStart() for context: %d:", (uint8_t *)&buf, 0x1Eu);
  }
  __cxa_end_catch();
  JUMPOUT(0x1B5B749F8);
}

void sub_1B5B74B70()
{
  JUMPOUT(0x1B5B74A70);
}

void sub_1B5B74B78()
{
  __cxa_end_catch();
  JUMPOUT(0x1B5B74A70);
}

void HALS_IOContext_Legacy_Impl::SendIsRunningNotifications(HALS_Object **this)
{
  uint64_t *platform_behaviors;
  HALS_Object *v3;
  HALS_NotificationManager *v4;
  uint64_t v5;
  HALS_Object *v6;
  HALS_ObjectMap *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors((HALS_PlatformBehaviors *)this);
  if ((*(unsigned int (**)(uint64_t *))(*platform_behaviors + 16))(platform_behaviors))
  {
    v8 = *(_OWORD *)"niogbolg";
    v9 = 1735159650;
    HALB_Mutex::Unlock((HALB_Mutex *)(this + 41));
    v3 = this[3];
    v4 = (HALS_NotificationManager *)*((unsigned int *)v3 + 18);
    if (!(_DWORD)v4)
      v4 = (HALS_NotificationManager *)*((unsigned int *)v3 + 4);
    HALS_Object::PropertiesChanged_Sync(v3, v4, **((unsigned int **)v3 + 8), 2u, (const AudioObjectPropertyAddress *)&v8);
    HALB_Mutex::Lock((HALB_Mutex *)(this + 41));
  }
  else
  {
    DWORD2(v8) = 0;
    *(_QWORD *)&v8 = *(_QWORD *)"enogbolg";
    v5 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 378));
    v7 = (HALS_ObjectMap *)v5;
    if (v5 && *(_DWORD *)(v5 + 20) == 1633773415)
      HALS_Object::PropertiesChanged(this[3], (HALS_NotificationManager *)*((unsigned int *)this + 378), **((unsigned int **)this[3] + 8), 1, (const AudioObjectPropertyAddress *)&v8);
    HALS_ObjectMap::ReleaseObject(v7, v6);
  }
}

void sub_1B5B74CA0(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>(caulk::concurrent::messenger *a1, _BYTE *a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;

  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = &off_1E698FFE8;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 20) = *a2;
  v7 = *a3;
  *(_QWORD *)(v6 + 40) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)v6 = &off_1E698FF90;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

uint64_t caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>(caulk::concurrent::messenger *a1, _BYTE *a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;

  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = &off_1E6990068;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 20) = *a2;
  v7 = *a3;
  *(_QWORD *)(v6 + 40) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)v6 = &off_1E6990010;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

unsigned int _CalculateOverloadThresholdSampleAdjustment(double a1, unsigned int result, unsigned int a3)
{
  double v3;
  double v4;
  double v5;
  double v6;

  if (a3 == result)
  {
    v3 = 0.25;
    v4 = 0.125;
    v5 = 0.0625;
    if (a3 >= 0x201)
      v5 = 0.0;
    if (a3 >= 0x101)
      v4 = v5;
    if (a3 >= 0x81)
      v3 = v4;
    v6 = 2.0;
    if (a1 >= 32000.0)
    {
      v6 = 1.0;
      if (a1 >= 64000.0)
      {
        v6 = 0.25;
        if (a1 < 128000.0)
          v6 = 0.5;
      }
    }
    return vcvtmd_u64_f64(v3 * (double)a3 * v6);
  }
  else if (a3 > result)
  {
    return a3;
  }
  return result;
}

uint64_t caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_3,std::tuple<unsigned int,char const*,int,int,char *>>(caulk::concurrent::messenger *a1, _BYTE *a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;

  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = &off_1E69900E8;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 20) = *a2;
  v7 = *a3;
  *(_OWORD *)(v6 + 40) = a3[1];
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)v6 = &off_1E6990090;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

uint64_t HALS_IOContext_Legacy_Impl::IOWorkLoop_Engine_BeginIO(HALS_IOContext_Legacy_Impl *this, HALS_IOContext_Legacy_Impl *a2, HALS_IOEngineInfo *a3)
{
  _QWORD v6[2];

  if (!*((_QWORD *)a2 + 1))
    return 0;
  v6[0] = &off_1E698EDE0;
  v6[1] = this;
  HALS_IOPerformer::update_io_parameters((uint64_t)v6, (uint64_t *)a2, (uint64_t)a3, 0, 1);
  return (*(uint64_t (**)(_QWORD, _QWORD, HALS_IOContext_Legacy_Impl *))(**((_QWORD **)a2 + 1) + 704))(*((_QWORD *)a2 + 1), *(unsigned int *)(*((_QWORD *)this + 3) + 16), a2);
}

void HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(uint64_t a1, unsigned int *a2)
{
  HALS_IOClock *CurrentTime;
  uint64_t v5;
  unsigned int v6;
  AudioTimeStamp *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  caulk::concurrent::messenger *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *mHostTime;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  HALS_IOClock *v26;
  AMCP::Log::Scope_Registry *v27;
  int v28;
  caulk::concurrent::messenger *v29;
  _opaque_pthread_t *v30;
  mach_port_t v31;
  int *v32;
  char *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  unsigned int v45;
  uint64_t v46;
  double v47;
  double mSampleTime;
  uint64_t v49;
  __n128 v50;
  uint64_t mWordClockTime;
  HALB_IOThread *v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  char v56;
  int v57;
  unsigned int v58;
  double v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  AudioTimeStamp *v65;
  uint64_t v66;
  BOOL v67;
  _QWORD *v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  double v72;
  double v73;
  UInt64 v74;
  UInt64 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t **v80;
  std::__shared_weak_count *v81;
  unint64_t *p_shared_owners;
  unint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  int v97;
  AMCP::Log::Scope_Registry *v98;
  uint64_t v99;
  char v100;
  unint64_t *v101;
  unint64_t v102;
  AMCP::Log::Scope_Registry *v103;
  uint64_t v104;
  caulk::concurrent::messenger *v105;
  _opaque_pthread_t *v106;
  mach_port_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  caulk::concurrent::messenger *v114;
  _opaque_pthread_t *v115;
  mach_port_t v116;
  int v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  double *v129;
  uint64_t v130;
  double v131;
  uint64_t v132;
  int v133;
  float v134;
  uint64_t v135;
  int v136;
  double v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  int v159;
  _QWORD *v160;
  _QWORD *v161;
  std::string::size_type v162;
  char v163;
  double v164;
  AudioTimeStamp *p_block;
  uint64_t v166;
  double v167;
  AudioTimeStamp *v168;
  uint64_t v169;
  double v170;
  __int128 *v171;
  uint64_t v172;
  double v173;
  uint64_t v174;
  AMCP::Log::Scope_Registry *v175;
  int v176;
  caulk::concurrent::messenger *v177;
  _opaque_pthread_t *v178;
  mach_port_t v179;
  int *v180;
  char *v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  unint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  std::string::size_type v189;
  char v190;
  AudioTimeStamp *v191;
  uint64_t v192;
  double v193;
  AudioTimeStamp *v194;
  uint64_t v195;
  __int128 *v196;
  uint64_t v197;
  AMCP::Log::Scope_Registry *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  caulk::concurrent::messenger *v202;
  _opaque_pthread_t *v203;
  mach_port_t v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  Float64 v216;
  UInt64 v217;
  unint64_t *v218;
  unint64_t v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unsigned __int8 v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  _DWORD *exception;
  uint64_t **v228;
  uint64_t v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  int v233;
  BOOL v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  HALB_IOThread *v238;
  unsigned int *v239;
  AudioTimeStamp *v240;
  AudioTimeStamp *v241;
  uint64_t v242[2];
  AudioTimeStamp v243;
  std::string v244;
  double v245;
  std::__shared_weak_count *v246;
  __uint64_t v247;
  _QWORD v248[3];
  AMCP::Log::Scope_Registry *v249;
  _QWORD *v250;
  std::string::size_type v251;
  _QWORD **v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  AudioTimeStamp v257;
  Float64 v258;
  std::string v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  AudioTimeStamp block;
  Float64 mRateScalar;
  std::string v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  _OWORD v280[5];
  uint64_t v281;

  v281 = *MEMORY[0x1E0C80C00];
  v238 = (HALB_IOThread *)(a1 + 312);
  if (HALB_IOThread::HasBeenStopped((HALB_IOThread *)(a1 + 312)))
  {
    *((_BYTE *)a2 + 249) = 1;
    return;
  }
  CurrentTime = *(HALS_IOClock **)(a1 + 1088);
  if (!CurrentTime)
    goto LABEL_10;
  *(_QWORD *)&block.mSampleTime = a1;
  (*(void (**)(HALS_IOClock *, AudioTimeStamp *))(*(_QWORD *)CurrentTime + 48))(CurrentTime, &block);
  CurrentTime = *(HALS_IOClock **)(a1 + 1088);
  *(_QWORD *)(a1 + 1088) = 0;
  if (CurrentTime == (HALS_IOClock *)(a1 + 1064))
  {
    v5 = 4;
    CurrentTime = (HALS_IOClock *)(a1 + 1064);
    goto LABEL_9;
  }
  if (CurrentTime)
  {
    v5 = 5;
LABEL_9:
    CurrentTime = (HALS_IOClock *)(*(uint64_t (**)(void))(*(_QWORD *)CurrentTime + 8 * v5))();
  }
LABEL_10:
  if (*(_QWORD *)(a1 + 1312) <= (uint64_t)(2 * *(_DWORD *)(a1 + 1320)))
    v6 = *a2;
  else
    v6 = *(_DWORD *)(a1 + 1320);
  a2[54] = v6;
  v7 = (AudioTimeStamp *)(a2 + 2);
  v8 = *(_QWORD *)(a1 + 1520);
  if (v8)
  {
    if (*(_QWORD *)(v8 + 8))
    {
      CurrentTime = *(HALS_IOClock **)(v8 + 288);
      if (CurrentTime)
      {
        CurrentTime = (HALS_IOClock *)HALS_IOClock::GetCurrentTime(CurrentTime, (AudioTimeStamp *)(a2 + 2));
        v6 = a2[54];
      }
    }
  }
  v9 = *a2;
  v240 = (AudioTimeStamp *)(a2 + 2);
  if (*a2 != v6)
  {
    v10 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 16);
    AMCP::Log::Scope_Registry::get(CurrentTime);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&block, "com.apple.coreaudio", "AMCP");
    v11 = *(caulk::concurrent::messenger **)(*(_QWORD *)&block.mSampleTime + 8);
    v12 = pthread_self();
    v13 = pthread_mach_thread_np(v12);
    v14 = (_QWORD *)MEMORY[0x1E0DDB688];
    v15 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
    *(_DWORD *)(v15 + 16) = 0;
    *(_BYTE *)(v15 + 20) = 0;
    *(_DWORD *)(v15 + 24) = v13;
    *(_QWORD *)(v15 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
    *(_DWORD *)(v15 + 40) = 2050;
    *(_DWORD *)(v15 + 44) = v10;
    *(_DWORD *)(v15 + 48) = v9;
    *(_DWORD *)(v15 + 52) = v6;
    *(_QWORD *)v15 = &off_1E6990458;
    *(_QWORD *)(v15 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v11, (caulk::concurrent::message *)v15);
    mHostTime = (std::__shared_weak_count *)block.mHostTime;
    if (block.mHostTime)
    {
      v17 = (unint64_t *)(block.mHostTime + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))mHostTime->__on_zero_shared)(mHostTime);
        std::__shared_weak_count::__release_weak(mHostTime);
      }
    }
    v19 = a2[54];
    v20 = *a2;
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 96) + 704))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 96));
    kdebug_trace();
    ++*(_DWORD *)(a1 + 1304);
    kdebug_trace();
    *(_QWORD *)(a1 + 1312) += v20;
    *(_QWORD *)(a1 + 1312) += (int)v20 - (int)v19;
    v21 = bswap32(v19);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 64) + 40))
      v22 = v21;
    else
      v22 = v19;
    *(_DWORD *)(*(_QWORD *)(a1 + 1096) + 24) = v22;
    OSMemoryBarrier();
    memset(&block, 0, sizeof(block));
    block.mFlags = 3;
    HALS_IOContext_Legacy_Impl::IOWorkLoop_CalculateOverloadTime(a1, v19, &block, -1.0);
    HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines((HALS_IOContext_Legacy_Impl *)a1, &block);
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 80);
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 72))(v23);
    v24 = HALS_IOContext_Legacy_Impl::PerformIO(a1, (uint64_t)v240, v19, (int)v20 - (int)v19, *(_DWORD *)(a1 + 1384), (uint64_t *)a2 + 29);
    v25 = *(_QWORD *)(a1 + 1520);
    if (v25)
    {
      if (*(_QWORD *)(v25 + 8))
      {
        v26 = *(HALS_IOClock **)(v25 + 288);
        if (v26)
          HALS_IOClock::GetCurrentTime(v26, v240);
      }
    }
    v27 = (AMCP::Log::Scope_Registry *)HALS_IOContext_Legacy_Impl::ConfigureThreadForRealtimePriority((_opaque_pthread_t **)a1, v19);
    v28 = (int)v27;
    if ((_DWORD)v27)
    {
      AMCP::Log::Scope_Registry::get(v27);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v257, "com.apple.coreaudio", "AMCP");
      v29 = *(caulk::concurrent::messenger **)(*(_QWORD *)&v257.mSampleTime + 8);
      v30 = pthread_self();
      v31 = pthread_mach_thread_np(v30);
      v32 = __error();
      v33 = strerror(*v32);
      v34 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v14 + 16))(*v14, 56, 8);
      *(_DWORD *)(v34 + 16) = 0;
      *(_BYTE *)(v34 + 20) = 16;
      *(_DWORD *)(v34 + 24) = v31;
      *(_QWORD *)(v34 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
      *(_DWORD *)(v34 + 40) = 1278;
      *(_DWORD *)(v34 + 44) = v28;
      *(_QWORD *)(v34 + 48) = v33;
      *(_QWORD *)v34 = &off_1E698FD98;
      *(_QWORD *)(v34 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v29, (caulk::concurrent::message *)v34);
      v35 = (std::__shared_weak_count *)v257.mHostTime;
      if (v257.mHostTime)
      {
        v36 = (unint64_t *)(v257.mHostTime + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
    }
    a2[55] = v24;
    v38 = *(_QWORD *)(a1 + 1520);
    v39 = *a2;
    v6 = a2[54];
    if (v6 == *a2)
    {
      v40 = *(double *)(v38 + 768);
      v41 = 0.25;
      v7 = (AudioTimeStamp *)(a2 + 2);
      if (v39 >= 0x81)
      {
        v41 = 0.125;
        v42 = 0.0625;
        if (v39 >= 0x201)
          v42 = 0.0;
        if (v39 >= 0x101)
          v41 = v42;
      }
      v43 = 2.0;
      if (v40 >= 32000.0)
      {
        v43 = 1.0;
        if (v40 >= 64000.0)
        {
          v43 = 0.25;
          if (v40 < 128000.0)
            v43 = 0.5;
        }
      }
      v39 = vcvtmd_u64_f64(v41 * (double)v39 * v43);
    }
    else
    {
      if (v6 > v39)
        v39 = a2[54];
      v7 = (AudioTimeStamp *)(a2 + 2);
    }
    a2[50] = v39;
    *a2 = v6;
    if (*(_QWORD *)(v38 + 8))
      v44 = *(double *)(*(_QWORD *)(v38 + 288) + 112);
    else
      v44 = 544.217687;
    *((double *)a2 + 26) = v44 * (double)v6;
  }
  v45 = *(_DWORD *)(a1 + 1384);
  a2[56] = v45;
  if ((v45 & 0xFFFFFFFE) == 2)
  {
    v46 = *(_QWORD *)(a1 + 1520);
    if (!v46)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        LODWORD(block.mSampleTime) = 136315394;
        *(_QWORD *)((char *)&block.mSampleTime + 4) = "HALS_IOContext_Legacy_Impl.cpp";
        WORD2(block.mHostTime) = 1024;
        *(_DWORD *)((char *)&block.mHostTime + 6) = 2095;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOWorkLoop: no master engine info for catch up mode", (uint8_t *)&block, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 1852797029;
    }
    v47 = *(double *)(a1 + 1168);
    mSampleTime = v7->mSampleTime;
    v49 = *(_QWORD *)(v46 + 768);
    v245 = 0.0;
    *(_QWORD *)&v253 = &off_1E6991508;
    *((_QWORD *)&v253 + 1) = &v245;
    *(_QWORD *)&v254 = v49;
    *((_QWORD *)&v254 + 1) = &v253;
    *(_QWORD *)&v243.mSampleTime = &off_1E6996540;
    v243.mHostTime = a1 + 1496;
    v247 = (__uint64_t)&off_1E698F788;
    v257.mWordClockTime = (UInt64)&v257;
    v50 = std::__function::__func<HALS_IOContext_Legacy_Impl::GetLargestInputSafetyOffsetInHostSamples(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::GetLargestInputSafetyOffsetInHostSamples(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ConstItemWithIndex &)>::__clone((uint64_t)&v253, (uint64_t)&v257);
    mWordClockTime = v257.mWordClockTime;
    if (v257.mWordClockTime)
    {
      if ((AudioTimeStamp *)v257.mWordClockTime == &v257)
      {
        block.mWordClockTime = (UInt64)&block;
        (*(void (**)(AudioTimeStamp *, AudioTimeStamp *, __n128))(*(_QWORD *)&v257.mSampleTime + 24))(&v257, &block, v50);
LABEL_201:
        v160 = *(_QWORD **)(a1 + 1552);
        v161 = *(_QWORD **)(a1 + 1560);
        if (v160 != v161)
        {
          v162 = 0;
          v163 = 1;
          do
          {
            if ((v163 & 1) != 0)
              v162 = 0;
            else
              ++v162;
            v250 = v160;
            v251 = v162;
            if (((*(uint64_t (**)(AudioTimeStamp *, _QWORD **, __n128))(*(_QWORD *)&v243.mSampleTime + 16))(&v243, &v250, v50) & 1) == 0&& ((*(uint64_t (**)(uint64_t, uint64_t))(v247 + 16))((uint64_t)&v247, (uint64_t)&v250) & 1) == 0)
            {
              v244.__r_.__value_.__r.__words[0] = (std::string::size_type)v160;
              v244.__r_.__value_.__l.__size_ = v162;
              if (!block.mWordClockTime)
                std::__throw_bad_function_call[abi:ne180100]();
              if ((*(unsigned int (**)(UInt64, std::string *))(*(_QWORD *)block.mWordClockTime + 48))(block.mWordClockTime, &v244))
              {
                break;
              }
            }
            v163 = 0;
            v160 += 53;
          }
          while (v160 != v161);
        }
        v164 = (double)v6;
        p_block = (AudioTimeStamp *)block.mWordClockTime;
        if ((AudioTimeStamp *)block.mWordClockTime == &block)
        {
          v166 = 4;
          p_block = &block;
        }
        else
        {
          if (!block.mWordClockTime)
            goto LABEL_216;
          v166 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)&p_block->mSampleTime + 8 * v166))();
LABEL_216:
        v167 = v47 + v164;
        v168 = (AudioTimeStamp *)v257.mWordClockTime;
        if ((AudioTimeStamp *)v257.mWordClockTime == &v257)
        {
          v169 = 4;
          v168 = &v257;
        }
        else
        {
          if (!v257.mWordClockTime)
            goto LABEL_221;
          v169 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)&v168->mSampleTime + 8 * v169))();
LABEL_221:
        v170 = v167 + v164;
        v171 = (__int128 *)*((_QWORD *)&v254 + 1);
        if (*((__int128 **)&v254 + 1) == &v253)
        {
          v172 = 4;
          v171 = &v253;
        }
        else
        {
          if (!*((_QWORD *)&v254 + 1))
            goto LABEL_226;
          v172 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v171 + 8 * v172))();
LABEL_226:
        v173 = mSampleTime - v245;
        if (v170 <= v173)
        {
LABEL_277:
          v56 = 0;
          goto LABEL_278;
        }
        *(_DWORD *)(a1 + 1384) = 4;
        v174 = *(_QWORD *)(a1 + 1416);
        if (v174)
        {
          LODWORD(block.mSampleTime) = 4;
          (*(void (**)(uint64_t, AudioTimeStamp *))(*(_QWORD *)v174 + 48))(v174, &block);
        }
        kdebug_trace();
        v175 = (AMCP::Log::Scope_Registry *)HALS_IOContext_Legacy_Impl::ConfigureThreadForRealtimePriority((_opaque_pthread_t **)a1, a2[54]);
        v176 = (int)v175;
        if ((_DWORD)v175)
        {
          AMCP::Log::Scope_Registry::get(v175);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&block, "com.apple.coreaudio", "AMCP");
          v177 = *(caulk::concurrent::messenger **)(*(_QWORD *)&block.mSampleTime + 8);
          v178 = pthread_self();
          v179 = pthread_mach_thread_np(v178);
          v180 = __error();
          v181 = strerror(*v180);
          v182 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
          *(_DWORD *)(v182 + 16) = 0;
          *(_BYTE *)(v182 + 20) = 16;
          *(_DWORD *)(v182 + 24) = v179;
          *(_QWORD *)(v182 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
          *(_DWORD *)(v182 + 40) = 2115;
          *(_DWORD *)(v182 + 44) = v176;
          *(_QWORD *)(v182 + 48) = v181;
          *(_QWORD *)v182 = &off_1E69904B0;
          *(_QWORD *)(v182 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v177, (caulk::concurrent::message *)v182);
          v183 = (std::__shared_weak_count *)block.mHostTime;
          if (block.mHostTime)
          {
            v184 = (unint64_t *)(block.mHostTime + 8);
            do
              v185 = __ldaxr(v184);
            while (__stlxr(v185 - 1, v184));
            if (!v185)
            {
              ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
              std::__shared_weak_count::__release_weak(v183);
            }
          }
        }
        HALS_IOContext_Legacy_Impl::IOWorkLoop_CalculateWakeTime(a1, *a2, (AudioTimeStamp *)(a2 + 18));
        v186 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 16) | ((unint64_t)*(unsigned int *)(a1 + 1320) << 32);
        v248[0] = &off_1E6990588;
        v248[1] = v186;
        v249 = (AMCP::Log::Scope_Registry *)v248;
        v245 = COERCE_DOUBLE(&off_1E6992878);
        *((_QWORD *)&v254 + 1) = &v253;
        std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2>,int ()(HALS_IOEngineInfo &)>::__clone((uint64_t)v248, &v253);
        *(_QWORD *)&v243.mSampleTime = &off_1E6992878;
        *(_QWORD *)&v257.mSampleTime = &off_1E6990508;
        v257.mHostTime = (UInt64)&v253;
        v257.mWordClockTime = (UInt64)&v257;
        block.mWordClockTime = (UInt64)&block;
        std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::__clone((uint64_t)&v257, &block);
        v187 = *(_QWORD **)(a1 + 1528);
        v188 = *(_QWORD **)(a1 + 1536);
        if (v187 != v188)
        {
          v189 = 0;
          v190 = 1;
          do
          {
            if ((v190 & 1) != 0)
              v189 = 0;
            else
              ++v189;
            v250 = v187;
            v251 = v189;
            if (((*(uint64_t (**)(uint64_t, _QWORD **))(*(_QWORD *)&v243.mSampleTime + 16))((uint64_t)&v243, &v250) & 1) == 0&& ((*(uint64_t (**)(uint64_t, _QWORD **))(*(_QWORD *)&v245 + 16))((uint64_t)&v245, &v250) & 1) == 0)
            {
              v244.__r_.__value_.__r.__words[0] = (std::string::size_type)v187;
              v244.__r_.__value_.__l.__size_ = v189;
              if (!block.mWordClockTime)
                std::__throw_bad_function_call[abi:ne180100]();
              if ((*(unsigned int (**)(UInt64, std::string *))(*(_QWORD *)block.mWordClockTime + 48))(block.mWordClockTime, &v244))
              {
                break;
              }
            }
            v190 = 0;
            ++v187;
          }
          while (v187 != v188);
        }
        v191 = (AudioTimeStamp *)block.mWordClockTime;
        if ((AudioTimeStamp *)block.mWordClockTime == &block)
        {
          v192 = 4;
          v191 = &block;
        }
        else
        {
          if (!block.mWordClockTime)
            goto LABEL_255;
          v192 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)&v191->mSampleTime + 8 * v192))();
LABEL_255:
        v194 = (AudioTimeStamp *)v257.mWordClockTime;
        if ((AudioTimeStamp *)v257.mWordClockTime == &v257)
        {
          v195 = 4;
          v194 = &v257;
        }
        else
        {
          if (!v257.mWordClockTime)
            goto LABEL_260;
          v195 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)&v194->mSampleTime + 8 * v195))();
LABEL_260:
        v196 = (__int128 *)*((_QWORD *)&v254 + 1);
        if (*((__int128 **)&v254 + 1) == &v253)
        {
          v197 = 4;
          v196 = &v253;
        }
        else
        {
          if (!*((_QWORD *)&v254 + 1))
            goto LABEL_265;
          v197 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v196 + 8 * v197))();
LABEL_265:
        v198 = v249;
        if (v249 == (AMCP::Log::Scope_Registry *)v248)
        {
          v199 = 4;
          v198 = (AMCP::Log::Scope_Registry *)v248;
        }
        else
        {
          if (!v249)
          {
LABEL_270:
            v200 = *((_QWORD *)a2 + 9);
            v201 = *((_QWORD *)a2 + 10);
            AMCP::Log::Scope_Registry::get(v198);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&block, "com.apple.coreaudio", "AMCP");
            v202 = *(caulk::concurrent::messenger **)(*(_QWORD *)&block.mSampleTime + 8);
            v203 = pthread_self();
            v204 = pthread_mach_thread_np(v203);
            v205 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 88, 8);
            *(_DWORD *)(v205 + 16) = 0;
            *(_BYTE *)(v205 + 20) = 0;
            *(_DWORD *)(v205 + 24) = v204;
            *(_QWORD *)(v205 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
            *(_DWORD *)(v205 + 40) = 2130;
            *(double *)(v205 + 48) = v170;
            *(double *)(v205 + 56) = v173;
            *(_QWORD *)(v205 + 64) = v200;
            *(_QWORD *)(v205 + 72) = 0;
            *(_QWORD *)(v205 + 80) = v201;
            *(_QWORD *)v205 = &off_1E6990608;
            *(_QWORD *)(v205 + 8) = 0;
            caulk::concurrent::messenger::enqueue(v202, (caulk::concurrent::message *)v205);
            v206 = (std::__shared_weak_count *)block.mHostTime;
            if (block.mHostTime)
            {
              v207 = (unint64_t *)(block.mHostTime + 8);
              do
                v208 = __ldaxr(v207);
              while (__stlxr(v208 - 1, v207));
              if (!v208)
              {
                ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                std::__shared_weak_count::__release_weak(v206);
              }
            }
            v209 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 216) + 8);
            if (*(_BYTE *)(v209 + 13))
            {
              v56 = 0;
              *(_WORD *)(v209 + 13) = 257;
              goto LABEL_278;
            }
            goto LABEL_277;
          }
          v199 = 5;
        }
        v198 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(void))(*(_QWORD *)v198 + 8 * v199))();
        goto LABEL_270;
      }
      mWordClockTime = (*(uint64_t (**)(__n128))(*(_QWORD *)v257.mWordClockTime + 16))(v50);
    }
    block.mWordClockTime = mWordClockTime;
    goto LABEL_201;
  }
  v239 = a2;
  if (*(_BYTE *)(a1 + 2032))
  {
    v52 = v238;
    if (*(_QWORD *)(a1 + 2040) == *(_DWORD *)(a1 + 1304))
      HALS_IOContext_Legacy_Impl::IOWorkLoop_ReportClientTimeout(a1, a2, 0, 0);
  }
  else
  {
    v53 = *(unsigned int *)(a1 + 1304);
    v54 = *(_QWORD *)(a1 + 2048);
    v52 = v238;
    if (v54 && v54 == v53)
    {
      HALS_IOContext_Legacy_Impl::IOWorkLoop_ReportClientTimeout(a1, a2, v53 - *(_QWORD *)(a1 + 2040), 1u);
      *(_BYTE *)(a1 + 2032) = 0;
      *(_QWORD *)(a1 + 2040) = 0;
      *(_QWORD *)(a1 + 2048) = 0;
    }
  }
  v55 = 0;
  v56 = 0;
  v241 = (AudioTimeStamp *)(a2 + 18);
  memset(&v243, 0, sizeof(v243));
  v243.mFlags = 3;
  v57 = a2[55];
  v58 = *a2;
  v237 = *((_QWORD *)a2 + 29);
  v229 = *((_QWORD *)a2 + 30);
  v59 = (double)a2[50];
  while (1)
  {
    HALS_IOContext_Legacy_Impl::IOWorkLoop_CalculateWakeTime(a1, v58, v241);
    HALS_IOContext_Legacy_Impl::IOWorkLoop_CalculateOverloadTime(a1, v58, &v243, v59);
    HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines((HALS_IOContext_Legacy_Impl *)a1, &v243);
    if (v57)
      break;
    if ((HALB_IOThread::HasBeenStopped(v52) & 1) == 0)
      goto LABEL_76;
    v57 = 0;
    v55 = 1;
LABEL_96:
    v70 = (HALB_IOThread::HasBeenStopped(v52) ^ 1) & v55;
    v55 = 1;
    if ((v70 & 1) == 0)
      goto LABEL_250;
  }
  if (v57 == 2)
    goto LABEL_96;
  v60 = v7->mSampleTime;
  v61 = v243.mSampleTime;
  v55 = v7->mSampleTime >= v243.mSampleTime;
  if ((HALB_IOThread::HasBeenStopped(v52) & 1) != 0)
    goto LABEL_96;
  if (v60 < v61)
    goto LABEL_249;
LABEL_76:
  v62 = *(_QWORD *)(a1 + 1520);
  if (v62)
    v63 = *(_QWORD *)(v62 + 360);
  else
    v63 = 0;
  if (*(_BYTE *)(a1 + 1468))
  {
    if ((HALS_IOContext_Legacy_Impl::IOWorkLoop_HandleOverload(a1, v7, (uint64_t)&v243, (uint64_t)v241, v58) & 1) == 0)
      goto LABEL_248;
    goto LABEL_81;
  }
  if (*(_QWORD *)(a1 + 1480))
    v67 = 0;
  else
    v67 = *(_QWORD *)(a1 + 1472) != 0;
  v71 = *(_QWORD *)(a1 + 24);
  v232 = *(_OWORD *)(v71 + 200);
  v233 = *(_DWORD *)(v71 + 16);
  v72 = v7->mSampleTime;
  v73 = v243.mSampleTime;
  v74 = *((_QWORD *)a2 + 18);
  v75 = v243.mHostTime;
  v76 = __udivti3();
  if (v75 >= v74)
    v77 = v76;
  else
    v77 = -v76;
  v78 = *(_QWORD *)(a1 + 568);
  v230 = *(_OWORD *)(a1 + 592);
  v231 = *(_OWORD *)(a1 + 576);
  v79 = *(_QWORD *)(a1 + 2080);
  v236 = v77;
  v234 = v67;
  if (!v79)
  {
    v100 = 0;
    goto LABEL_177;
  }
  v80 = *(uint64_t ***)(v79 + 24);
  v81 = *(std::__shared_weak_count **)(v79 + 32);
  *(_QWORD *)&v257.mSampleTime = v80;
  v257.mHostTime = (UInt64)v81;
  if (v81)
  {
    p_shared_owners = (unint64_t *)&v81->__shared_owners_;
    do
      v83 = __ldxr(p_shared_owners);
    while (__stxr(v83 + 1, p_shared_owners));
  }
  if (!v80)
  {
    v97 = 0;
    v86 = 0;
    if (!v81)
      goto LABEL_171;
    goto LABEL_133;
  }
  v84 = *v80;
  v85 = v80[1];
  if (*v80 == v85)
  {
    v97 = 0;
    v86 = 0;
    goto LABEL_132;
  }
  v228 = v80;
  v86 = 0;
  do
  {
    v87 = *v84;
    v88 = (std::__shared_weak_count *)v84[1];
    if (v88)
    {
      v89 = (unint64_t *)&v88->__shared_owners_;
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    v91 = *(_QWORD *)(v87 + 24);
    v92 = *(_QWORD *)(v87 + 32);
    v93 = __udivti3();
    if (v92 >= v91)
      v94 = v93;
    else
      v94 = -v93;
    if (v88)
    {
      v95 = (unint64_t *)&v88->__shared_owners_;
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    v86 += v94;
    v84 += 2;
  }
  while (v84 != v85);
  v97 = 0;
  if (v236 < 1 || v86 < 1)
  {
LABEL_132:
    if (!v81)
      goto LABEL_171;
    goto LABEL_133;
  }
  v253 = 0uLL;
  v247 = 0;
  if (v86 >= (unint64_t)v236)
  {
    *(_QWORD *)&block.mSampleTime = &off_1E6994538;
    block.mHostTime = (UInt64)&v253;
    *(_QWORD *)&block.mRateScalar = &v247;
    block.mWordClockTime = (UInt64)&block;
    HALB_RealtimeDuration_Collection::enumSubDurations(v228, (uint64_t)&block);
    v103 = (AMCP::Log::Scope_Registry *)block.mWordClockTime;
    if ((AudioTimeStamp *)block.mWordClockTime == &block)
    {
      v103 = (AMCP::Log::Scope_Registry *)&block;
      v104 = 4;
    }
    else
    {
      if (!block.mWordClockTime)
        goto LABEL_143;
      v104 = 5;
    }
    v103 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(void))(*(_QWORD *)v103 + 8 * v104))();
LABEL_143:
    AMCP::Log::Scope_Registry::get(v103);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v245, "com.apple.coreaudio", "AMCP");
    v105 = *(caulk::concurrent::messenger **)(*(_QWORD *)&v245 + 8);
    v106 = pthread_self();
    v107 = pthread_mach_thread_np(v106);
    if ((_QWORD)v253)
    {
      v108 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v253 + 16))(v253);
      if ((_QWORD)v253)
      {
        v109 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v253 + 24))(v253);
        goto LABEL_148;
      }
    }
    else
    {
      v108 = 0;
    }
    v109 = 0;
LABEL_148:
    v110 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 72, 8);
    *(_DWORD *)(v110 + 16) = 0;
    *(_BYTE *)(v110 + 20) = 16;
    *(_DWORD *)(v110 + 24) = v107;
    *(_QWORD *)(v110 + 32) = "HALS_IOContextHostedDSP.cpp";
    *(_DWORD *)(v110 + 40) = 1541;
    *(_DWORD *)(v110 + 44) = v108;
    *(_QWORD *)(v110 + 48) = v109;
    *(_QWORD *)(v110 + 56) = v236;
    *(_QWORD *)(v110 + 64) = v86;
    *(_QWORD *)v110 = &off_1E69945C8;
    *(_QWORD *)(v110 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v105, (caulk::concurrent::message *)v110);
    v111 = v246;
    if (v246)
    {
      v112 = (unint64_t *)&v246->__shared_owners_;
      do
        v113 = __ldaxr(v112);
      while (__stlxr(v113 - 1, v112));
      if (!v113)
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
    }
    v97 = 3;
    goto LABEL_165;
  }
  if ((double)v86 / (double)v236 <= 0.9)
  {
    v97 = 1;
  }
  else
  {
    *(_QWORD *)&block.mSampleTime = &off_1E6994538;
    block.mHostTime = (UInt64)&v253;
    *(_QWORD *)&block.mRateScalar = &v247;
    block.mWordClockTime = (UInt64)&block;
    HALB_RealtimeDuration_Collection::enumSubDurations(v228, (uint64_t)&block);
    v98 = (AMCP::Log::Scope_Registry *)block.mWordClockTime;
    if ((AudioTimeStamp *)block.mWordClockTime == &block)
    {
      v98 = (AMCP::Log::Scope_Registry *)&block;
      v99 = 4;
LABEL_155:
      v98 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(void))(*(_QWORD *)v98 + 8 * v99))();
    }
    else if (block.mWordClockTime)
    {
      v99 = 5;
      goto LABEL_155;
    }
    AMCP::Log::Scope_Registry::get(v98);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v245, "com.apple.coreaudio", "AMCP");
    v114 = *(caulk::concurrent::messenger **)(*(_QWORD *)&v245 + 8);
    v115 = pthread_self();
    v116 = pthread_mach_thread_np(v115);
    if ((_QWORD)v253)
      v117 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v253 + 16))(v253);
    else
      v117 = 0;
    v118 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 72, 8);
    *(_DWORD *)(v118 + 16) = 0;
    *(_BYTE *)(v118 + 20) = 2;
    *(_DWORD *)(v118 + 24) = v116;
    *(_QWORD *)(v118 + 32) = "HALS_IOContextHostedDSP.cpp";
    *(_DWORD *)(v118 + 40) = 1554;
    *(_DWORD *)(v118 + 44) = v117;
    *(_DWORD *)(v118 + 48) = 90;
    *(_QWORD *)(v118 + 56) = v236;
    *(_QWORD *)(v118 + 64) = v86;
    *(_QWORD *)v118 = &off_1E6994620;
    *(_QWORD *)(v118 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v114, (caulk::concurrent::message *)v118);
    v119 = v246;
    if (v246)
    {
      v120 = (unint64_t *)&v246->__shared_owners_;
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }
    v97 = 2;
  }
LABEL_165:
  v122 = (std::__shared_weak_count *)*((_QWORD *)&v253 + 1);
  if (*((_QWORD *)&v253 + 1))
  {
    v123 = (unint64_t *)(*((_QWORD *)&v253 + 1) + 8);
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v81 = (std::__shared_weak_count *)v257.mHostTime;
  if (v257.mHostTime)
  {
LABEL_133:
    v101 = (unint64_t *)&v81->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
LABEL_171:
  if (v237 >= v86)
    v125 = v86;
  else
    v125 = 0;
  v237 -= v125;
  if (v97 == 3)
  {
    a2 = v239;
    kdebug_trace();
    v100 = 1;
  }
  else
  {
    v100 = 0;
    a2 = v239;
  }
LABEL_177:
  v126 = *(_QWORD *)(a1 + 24);
  v127 = *(_QWORD *)(v126 + 216);
  v128 = *(_DWORD *)(a1 + 1304);
  if (*(char *)(a1 + 2079) < 0)
  {
    std::string::__init_copy_ctor_external(&v244, *(const std::string::value_type **)(a1 + 2056), *(_QWORD *)(a1 + 2064));
    v126 = *(_QWORD *)(a1 + 24);
  }
  else
  {
    v244 = *(std::string *)(a1 + 2056);
  }
  v129 = (double *)a2;
  v130 = *((_QWORD *)a2 + 18);
  v131 = v129[10];
  v132 = *(_QWORD *)(*(_QWORD *)(a1 + 1520) + 768);
  v133 = *(_DWORD *)(*(_QWORD *)(v126 + 64) + 4);
  v134 = *(float *)(a1 + 1328);
  v135 = *(_QWORD *)(a1 + 1312);
  v247 = 0;
  pthread_threadid_np(0, &v247);
  LOBYTE(block.mSampleTime) = 0;
  HIDWORD(block.mSampleTime) = v233;
  LODWORD(block.mHostTime) = v128;
  BYTE4(block.mHostTime) = v234;
  *(_WORD *)((char *)&block.mHostTime + 5) = 0;
  HIBYTE(block.mHostTime) = v100;
  block.mRateScalar = v72 - v73;
  block.mWordClockTime = *(_QWORD *)&v243.mSampleTime;
  *(double *)&block.mSMPTETime.mSubframes = (double)v243.mHostTime;
  block.mSMPTETime.mType = v58;
  *(_QWORD *)&block.mSMPTETime.mHours = v247;
  *(_QWORD *)&block.mFlags = v130;
  mRateScalar = v131;
  v136 = SHIBYTE(v244.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v273, v244.__r_.__value_.__l.__data_, v244.__r_.__value_.__l.__size_);
  else
    v273 = v244;
  v235 = v136;
  v137 = v134;
  v138 = *(_QWORD *)(v127 + 32);
  v139 = *((_QWORD *)v239 + 2);
  v140 = __udivti3();
  *(_QWORD *)&v274 = v132;
  DWORD2(v274) = v133;
  *(_QWORD *)&v275 = v237;
  *((_QWORD *)&v275 + 1) = v236;
  if (v139 >= v138)
    v141 = v140;
  else
    v141 = -v140;
  *(_QWORD *)&v276 = v229;
  *((_QWORD *)&v276 + 1) = v141;
  *(double *)&v277 = v137;
  *((_QWORD *)&v277 + 1) = v63;
  v278 = v135;
  v279 = v232;
  *(_QWORD *)&v280[0] = v78;
  *(_OWORD *)((char *)v280 + 8) = v231;
  *(_OWORD *)((char *)&v280[1] + 8) = v230;
  *(_OWORD *)((char *)&v280[2] + 8) = 0u;
  *(_OWORD *)((char *)&v280[3] + 8) = 0u;
  *((_QWORD *)&v280[4] + 1) = 0;
  v257 = block;
  v258 = mRateScalar;
  v142 = SHIBYTE(v273.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
  {
    v52 = v238;
    std::string::__init_copy_ctor_external(&v259, v273.__r_.__value_.__l.__data_, v273.__r_.__value_.__l.__size_);
  }
  else
  {
    v259 = v273;
    v52 = v238;
  }
  v264 = v278;
  v265 = v279;
  v269 = v280[3];
  v270 = v280[4];
  v266 = v280[0];
  v267 = v280[1];
  v268 = v280[2];
  v260 = v274;
  v261 = v275;
  v262 = v276;
  v263 = v277;
  v144 = *(_OWORD *)&v240->mRateScalar;
  v253 = *(_OWORD *)&v240->mSampleTime;
  v143 = v253;
  v254 = v144;
  v146 = *(_OWORD *)&v240->mSMPTETime.mHours;
  v255 = *(_OWORD *)&v240->mSMPTETime.mSubframes;
  v145 = v255;
  v256 = v146;
  *(_BYTE *)v127 = 1;
  *(_OWORD *)(v127 + 24) = v143;
  *(_OWORD *)(v127 + 40) = v144;
  *(_OWORD *)(v127 + 56) = v145;
  *(_OWORD *)(v127 + 72) = v146;
  v147 = *(_QWORD *)(v127 + 8);
  v148 = *(_OWORD *)&v257.mRateScalar;
  v149 = *(_OWORD *)&v257.mSMPTETime.mSubframes;
  v150 = *(_OWORD *)&v257.mSMPTETime.mHours;
  *(Float64 *)(v147 + 64) = v258;
  *(_OWORD *)(v147 + 32) = v149;
  *(_OWORD *)(v147 + 48) = v150;
  *(_OWORD *)(v147 + 16) = v148;
  *(_OWORD *)v147 = *(_OWORD *)&v257.mSampleTime;
  std::string::operator=((std::string *)(v147 + 72), &v259);
  v151 = v260;
  v152 = v262;
  *(_OWORD *)(v147 + 112) = v261;
  *(_OWORD *)(v147 + 128) = v152;
  *(_OWORD *)(v147 + 96) = v151;
  v153 = v263;
  v154 = v264;
  v155 = v266;
  *(_OWORD *)(v147 + 176) = v265;
  *(_OWORD *)(v147 + 192) = v155;
  *(_OWORD *)(v147 + 144) = v153;
  *(_OWORD *)(v147 + 160) = v154;
  v156 = v267;
  v157 = v268;
  v158 = v270;
  *(_OWORD *)(v147 + 240) = v269;
  *(_OWORD *)(v147 + 256) = v158;
  *(_OWORD *)(v147 + 208) = v156;
  *(_OWORD *)(v147 + 224) = v157;
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  a2 = v239;
  v7 = v240;
  if (v142 < 0)
  {
    operator delete(v273.__r_.__value_.__l.__data_);
    if (v235 < 0)
      goto LABEL_199;
  }
  else
  {
    if ((v235 & 0x80000000) == 0)
      goto LABEL_193;
LABEL_199:
    operator delete(v244.__r_.__value_.__l.__data_);
  }
LABEL_193:
  v159 = HALS_IOContext_Legacy_Impl::IOWorkLoop_HandleOverload(a1, v240, (uint64_t)&v243, (uint64_t)v241, v58);
  if (*(_DWORD *)(a1 + 1384) == 3)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 216) + 8) + 13) = 1;
    if ((v159 & 1) == 0)
      goto LABEL_248;
LABEL_81:
    v64 = operator new(0x38uLL);
    *v64 = &off_1E698FDF0;
    v64[1] = HALS_IOContext_Legacy_Impl::Engine_HandleOverload;
    v64[2] = a1;
    *((_DWORD *)v64 + 6) = v58;
    v64[5] = 0;
    v64[6] = 0;
    v64[4] = 0;
    v252 = (_QWORD **)v64;
    *(_QWORD *)&block.mSampleTime = &off_1E698F688;
    block.mHostTime = (UInt64)&v250;
    block.mWordClockTime = (UInt64)&block;
    *(_QWORD *)&v257.mSampleTime = &off_1E6996590;
    v257.mHostTime = a1 + 1496;
    HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(a1 + 1496, (uint64_t)&block, (uint64_t)&v257);
    v65 = (AudioTimeStamp *)block.mWordClockTime;
    if ((AudioTimeStamp *)block.mWordClockTime == &block)
    {
      v65 = &block;
      v66 = 4;
LABEL_87:
      (*(void (**)(void))(*(_QWORD *)&v65->mSampleTime + 8 * v66))();
    }
    else if (block.mWordClockTime)
    {
      v66 = 5;
      goto LABEL_87;
    }
    v68 = v252;
    if (v252 == &v250)
    {
      v68 = &v250;
      v69 = 4;
LABEL_92:
      (*(void (**)(void))(*v68 + 8 * v69))();
    }
    else if (v252)
    {
      v69 = 5;
      goto LABEL_92;
    }
    if (!*(_DWORD *)(a1 + 1304))
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 216) + 8) + 168) = 0;
    v57 = 1;
    v55 = 1;
    v56 = 1;
    goto LABEL_96;
  }
  if (v159)
    goto LABEL_81;
LABEL_248:
  v56 = 0;
LABEL_249:
  HALB_IOThread::HasBeenStopped(v52);
LABEL_250:
  v193 = (double)*((unint64_t *)a2 + 2);
  if (v193 + 24000000.0 < (double)*((unint64_t *)a2 + 10))
    *((_QWORD *)a2 + 10) = (unint64_t)(*((double *)a2 + 26) + v193);
LABEL_278:
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 96) + 704))(*(_QWORD *)(*(_QWORD *)(a1 + 24)
                                                                                                  + 96));
  kdebug_trace();
  if ((v56 & 1) != 0)
  {
    *(_DWORD *)(a1 + 1304) = 0;
    v242[0] = 0;
    v242[1] = 0;
    HALS_System::GetInstance(&v253, 0, v242);
    v210 = v253;
    if ((_QWORD)v253)
    {
      if (*(_BYTE *)(v253 + 1496))
      {
        if (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 225))
        {
          v211 = mach_absolute_time();
          if (*(_BYTE *)(v210 + 1496))
          {
            v212 = *(uint64_t **)(v210 + 1480);
            if (v212)
            {
              v213 = v211;
              std::string::basic_string[abi:ne180100]<0>(&v257, "HAL-Generated Dump");
              v214 = *v212;
              *(_QWORD *)&block.mSampleTime = MEMORY[0x1E0C809B0];
              block.mHostTime = 3321888768;
              *(_QWORD *)&block.mRateScalar = ___ZN13HALB_Tailspin17DumpTailspinAsyncEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
              block.mWordClockTime = (UInt64)&__block_descriptor_72_ea8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e5_v8__0l;
              *(_QWORD *)&block.mSMPTETime.mSubframes = v212;
              *(_QWORD *)&block.mSMPTETime.mType = v213;
              if (SHIBYTE(v257.mRateScalar) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&block.mSMPTETime.mHours, *(const std::string::value_type **)&v257.mSampleTime, v257.mHostTime);
              }
              else
              {
                *(_OWORD *)&block.mSMPTETime.mHours = *(_OWORD *)&v257.mSampleTime;
                mRateScalar = v257.mRateScalar;
              }
              v223 = atomic_load((unsigned __int8 *)(v214 + 32));
              if ((v223 & 1) != 0)
                atomic_store(1u, (unsigned __int8 *)(v214 + 33));
              dispatch_async(*(dispatch_queue_t *)v214, &block);
              if (SHIBYTE(mRateScalar) < 0)
                operator delete(*(void **)&block.mSMPTETime.mHours);
              if (SHIBYTE(v257.mRateScalar) < 0)
                operator delete(*(void **)&v257.mSampleTime);
            }
          }
        }
      }
    }
    v224 = (std::__shared_weak_count *)*((_QWORD *)&v253 + 1);
    if (*((_QWORD *)&v253 + 1))
    {
      v225 = (unint64_t *)(*((_QWORD *)&v253 + 1) + 8);
      do
        v226 = __ldaxr(v225);
      while (__stlxr(v226 - 1, v225));
      if (!v226)
      {
        ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
        v222 = v224;
LABEL_308:
        std::__shared_weak_count::__release_weak(v222);
      }
    }
  }
  else
  {
    v215 = *(_QWORD *)(a1 + 24);
    v216 = *(double *)(v215 + 80);
    v217 = *(_QWORD *)(v215 + 88);
    block.mSampleTime = v216;
    block.mHostTime = v217;
    if (v217)
    {
      v218 = (unint64_t *)(v217 + 8);
      do
        v219 = __ldxr(v218);
      while (__stxr(v219 + 1, v218));
    }
    if (v216 != 0.0)
      (*(void (**)(Float64, double))(**(_QWORD **)&v216 + 64))(COERCE_FLOAT64(*(_QWORD *)&v216), *(double *)(a1 + 1456));
    if (v217)
    {
      v220 = (unint64_t *)(v217 + 8);
      do
        v221 = __ldaxr(v220);
      while (__stlxr(v221 - 1, v220));
      if (!v221)
      {
        (*(void (**)(UInt64))(*(_QWORD *)v217 + 16))(v217);
        v222 = (std::__shared_weak_count *)v217;
        goto LABEL_308;
      }
    }
  }
}

void sub_1B5B768A8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,HALB_IOThread *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,__int128 a36,int a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  char a71;
  uint64_t v71;
  AMCP::Log::Scope_Registry *v73;
  caulk::concurrent::messenger *v74;
  _opaque_pthread_t *v75;
  mach_port_t v76;
  char HasBeenStopped;

  if (a2)
  {
    if (a71 < 0)
      operator delete(a67);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a59);
    v73 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(a1);
    AMCP::Log::Scope_Registry::get(v73);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a48, "com.apple.coreaudio", "AMCP");
    v74 = *(caulk::concurrent::messenger **)(a48 + 8);
    a33 = 16;
    v75 = pthread_self();
    v76 = pthread_mach_thread_np(v75);
    HasBeenStopped = HALB_IOThread::HasBeenStopped(a25);
    LODWORD(a36) = v76;
    *((_QWORD *)&a36 + 1) = "HALS_IOContext_Legacy_Impl.cpp";
    a37 = 2160;
    a38 = HasBeenStopped;
    a39 = *(_BYTE *)(v71 + 249);
    caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>(v74, &a33, &a36);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a48);
    *(_BYTE *)(v71 + 249) = 1;
    __cxa_end_catch();
    JUMPOUT(0x1B5B74FC4);
  }
  _Unwind_Resume(a1);
}

void sub_1B5B76CE4()
{
  JUMPOUT(0x1B5B769A4);
}

void sub_1B5B76CEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
  __cxa_end_catch();
  JUMPOUT(0x1B5B769A4);
}

uint64_t caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,int,char *>>(caulk::concurrent::messenger *a1, _BYTE *a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;

  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = &off_1E6990200;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 20) = *a2;
  v7 = *a3;
  *(_OWORD *)(v6 + 40) = a3[1];
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)v6 = &off_1E69901A8;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

uint64_t caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_5,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>(caulk::concurrent::messenger *a1, _BYTE *a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;

  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = &off_1E6990280;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 20) = *a2;
  v7 = *a3;
  *(_QWORD *)(v6 + 40) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)v6 = &off_1E6990228;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

uint64_t caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_6,std::tuple<unsigned int,char const*,int,BOOL>>(caulk::concurrent::messenger *a1, _BYTE *a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;

  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = &off_1E6990300;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 20) = *a2;
  v7 = *a3;
  *(_QWORD *)(v6 + 40) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)v6 = &off_1E69902A8;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_6,std::tuple<unsigned int,char const*,int,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_6,std::tuple<unsigned int,char const*,int,BOOL>>::perform(caulk::concurrent::message *a1)
{
  caulk::concurrent::message *v2;

  v2 = a1;
  caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_6,std::tuple<unsigned int,char const*,int,BOOL>>::perform((uint64_t)a1);
  return caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_6,std::tuple<unsigned int,char const*,int,BOOL>>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_1B5B76EF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_6,std::tuple<unsigned int,char const*,int,BOOL>>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_6,std::tuple<unsigned int,char const*,int,BOOL>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  NSObject **v11;
  _BYTE v12[10];
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v11, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v12;
  v3 = *v11;
  if (*(_QWORD *)v12)
  {
    v4 = (unint64_t *)(*(_QWORD *)v12 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(unsigned __int8 *)(a1 + 44);
    LODWORD(v11) = 67109890;
    HIDWORD(v11) = v7;
    *(_WORD *)v12 = 2080;
    *(_QWORD *)&v12[2] = v8;
    v13 = 1024;
    v14 = v9;
    v15 = 1024;
    v16 = v10;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Completed HALS_IOContext_Legacy_Impl::IOWorkLoopInit - %d", (uint8_t *)&v11, 0x1Eu);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_6,std::tuple<unsigned int,char const*,int,BOOL>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_6,std::tuple<unsigned int,char const*,int,BOOL>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_5,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_5,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(caulk::concurrent::message *a1)
{
  caulk::concurrent::message *v2;

  v2 = a1;
  caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_5,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform((uint64_t)a1);
  return caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_5,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_1B5B77104(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_5,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_5,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  NSObject **v12;
  _BYTE v13[10];
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v13;
  v3 = *v12;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(unsigned __int8 *)(a1 + 44);
    v11 = *(unsigned __int8 *)(a1 + 45);
    LODWORD(v12) = 67110146;
    HIDWORD(v12) = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    v16 = 1024;
    v17 = v10;
    v18 = 1024;
    v19 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d An Exception was thrown during Init - thread hasBeenStopped: %d and shouldExit: %d", (uint8_t *)&v12, 0x24u);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_5,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_5,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,int,char *>>::perform(caulk::concurrent::message *a1)
{
  caulk::concurrent::message *v2;

  v2 = a1;
  caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,int,char *>>::perform((uint64_t)a1);
  return caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_1B5B77320(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  NSObject **v12;
  _BYTE v13[10];
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v13;
  v3 = *v12;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_QWORD *)(a1 + 48);
    LODWORD(v12) = 67110146;
    HIDWORD(v12) = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    v16 = 1024;
    v17 = v10;
    v18 = 2080;
    v19 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Failed to set the RT safe syscall masks: %d - %s", (uint8_t *)&v12, 0x28u);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,int,char *>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>(caulk::concurrent::messenger *a1, _BYTE *a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;

  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = &off_1E69906B8;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 20) = *a2;
  v7 = *a3;
  *(_QWORD *)(v6 + 40) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)v6 = &off_1E6990660;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(caulk::concurrent::message *a1)
{
  caulk::concurrent::message *v2;

  v2 = a1;
  caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform((uint64_t)a1);
  return caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_1B5B775C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  NSObject **v12;
  _BYTE v13[10];
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v13;
  v3 = *v12;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(unsigned __int8 *)(a1 + 44);
    v11 = *(unsigned __int8 *)(a1 + 45);
    LODWORD(v12) = 67110146;
    HIDWORD(v12) = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    v16 = 1024;
    v17 = v10;
    v18 = 1024;
    v19 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d An Exception was thrown during SyncTimeline - thread hasBeenStopped: %d and shouldExit: %d", (uint8_t *)&v12, 0x24u);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_3,std::tuple<unsigned int,char const*,int,double,double,double,long long,unsigned long long>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_3,std::tuple<unsigned int,char const*,int,double,double,double,long long,unsigned long long>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  caulk::concurrent::message *v16;
  uint8_t buf[8];
  _BYTE v18[10];
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v16 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v18;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v18)
  {
    v4 = (unint64_t *)(*(_QWORD *)v18 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 56);
    v12 = *(_QWORD *)(a1 + 64);
    v13 = *(_QWORD *)(a1 + 72);
    v14 = *(_QWORD *)(a1 + 80);
    *(_DWORD *)buf = 67110914;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v18 = 2080;
    *(_QWORD *)&v18[2] = v8;
    v19 = 1024;
    v20 = v9;
    v21 = 2048;
    v22 = v10;
    v23 = 2048;
    v24 = v11;
    v25 = 2048;
    v26 = v12;
    v27 = 2048;
    v28 = v13;
    v29 = 2048;
    v30 = v14;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Switching to realtime - end of next buffer: %0.f  last valid: %0.f  wakeTime: %0.f  next buffer host: %llu  wake host: %llu", buf, 0x4Au);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_3,std::tuple<unsigned int,char const*,int,double,double,double,long long,unsigned long long>>::rt_cleanup::~rt_cleanup(&v16);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_3,std::tuple<unsigned int,char const*,int,double,double,double,long long,unsigned long long>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 88, 8);
  return a1;
}

void std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6990508;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6990508;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::operator()(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a2;
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a2 + 16))(**a2);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
    if (!v5)
      std::__throw_bad_function_call[abi:ne180100]();
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 48))(v5, *v3);
  }
  return result;
}

uint64_t std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN21HALS_IOEngineInfoList12engine_applyIJ29FilterEngineInfoWithoutEngineS1_EEEiNSt3__18functionIFiR17HALS_IOEngineInfoEEEDpRKT_EUlRN15VisitableVectorINS2_10unique_ptrIS4_NS2_14default_deleteIS4_EEEEE13ItemWithIndexEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine>(std::function<int ()(HALS_IOEngineInfo &)>,FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::target_type()
{
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2>,int ()(HALS_IOEngineInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6990588;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E6990588;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 424) = 0;
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 392))(*(_QWORD *)(a2 + 8), *(unsigned int *)(a1 + 8), a2);
  return 0;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl22IOWorkLoopSyncTimelineERNS_17IOWorkLoopContextEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 2080;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Failed to update realtime priority parameters with code: %d - %s", buf, 0x28u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::GetLargestInputSafetyOffsetInHostSamples(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::GetLargestInputSafetyOffsetInHostSamples(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ConstItemWithIndex &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::GetLargestInputSafetyOffsetInHostSamples(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::GetLargestInputSafetyOffsetInHostSamples(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ConstItemWithIndex &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6991508;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::GetLargestInputSafetyOffsetInHostSamples(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::GetLargestInputSafetyOffsetInHostSamples(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ConstItemWithIndex &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6991508;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::GetLargestInputSafetyOffsetInHostSamples(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::GetLargestInputSafetyOffsetInHostSamples(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ConstItemWithIndex &)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  BOOL v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double *v9;

  v2 = *a2;
  if (!*(_DWORD *)(*a2 + 108)
    || ((v3 = *(uint64_t **)(v2 + 112), *(uint64_t **)(v2 + 120) != v3) ? (v4 = v3 == 0) : (v4 = 1), v4))
  {
    v3 = (uint64_t *)(v2 + 408);
  }
  v5 = *v3;
  if (*(_QWORD *)(*v3 + 8))
  {
    v6 = *(double *)(a1 + 16);
    v7 = *(double *)(v5 + 768) / v6;
    LODWORD(v6) = *(_DWORD *)(v5 + 316);
    v8 = v7 * (double)*(unint64_t *)&v6;
    v9 = *(double **)(a1 + 8);
    if (*v9 >= v8)
      v8 = *v9;
    *v9 = v8;
  }
  return 0;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::GetLargestInputSafetyOffsetInHostSamples(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::GetLargestInputSafetyOffsetInHostSamples(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ConstItemWithIndex &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK26HALS_IOContext_Legacy_Impl40GetLargestInputSafetyOffsetInHostSamplesEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::GetLargestInputSafetyOffsetInHostSamples(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::GetLargestInputSafetyOffsetInHostSamples(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ConstItemWithIndex &)>::target_type()
{
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  caulk::concurrent::message *v14;
  uint8_t buf[8];
  _BYTE v16[10];
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v14 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v16;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v16)
  {
    v4 = (unint64_t *)(*(_QWORD *)v16 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_DWORD *)(a1 + 48);
    v12 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)buf = 67110402;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v16 = 2080;
    *(_QWORD *)&v16[2] = v8;
    v17 = 1024;
    v18 = v9;
    v19 = 1024;
    v20 = v10;
    v21 = 1024;
    v22 = v11;
    v23 = 1024;
    v24 = v12;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d ioc (%u) - handle buffer frame size change, old %u new %u", buf, 0x2Au);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(&v14);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int,unsigned int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_3,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_3,std::tuple<unsigned int,char const*,int,int,char *>>::perform(caulk::concurrent::message *a1)
{
  caulk::concurrent::message *v2;

  v2 = a1;
  caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_3,std::tuple<unsigned int,char const*,int,int,char *>>::perform((uint64_t)a1);
  return caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_3,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_1B5B78030(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_3,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_3,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  NSObject **v12;
  _BYTE v13[10];
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v13;
  v3 = *v12;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_QWORD *)(a1 + 48);
    LODWORD(v12) = 67110146;
    HIDWORD(v12) = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    v16 = 1024;
    v17 = v10;
    v18 = 2080;
    v19 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Failed to change thread to realtime priority with code: %d - %s", (uint8_t *)&v12, 0x28u);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_3,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_3,std::tuple<unsigned int,char const*,int,int,char *>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(caulk::concurrent::message *a1)
{
  caulk::concurrent::message *v2;

  v2 = a1;
  caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform((uint64_t)a1);
  return caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_1B5B78248(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  NSObject **v12;
  _BYTE v13[10];
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v13;
  v3 = *v12;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(unsigned __int8 *)(a1 + 44);
    v11 = *(unsigned __int8 *)(a1 + 45);
    LODWORD(v12) = 67110146;
    HIDWORD(v12) = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    v16 = 1024;
    v17 = v10;
    v18 = 1024;
    v19 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d WaitForClientToBeginTransport failed - thread hasBeenStopped: %d and shouldExit: %d", (uint8_t *)&v12, 0x24u);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(caulk::concurrent::message *a1)
{
  caulk::concurrent::message *v2;

  v2 = a1;
  caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform((uint64_t)a1);
  return caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_1B5B78464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  NSObject **v12;
  _BYTE v13[10];
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v13;
  v3 = *v12;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(unsigned __int8 *)(a1 + 44);
    v11 = *(unsigned __int8 *)(a1 + 45);
    LODWORD(v12) = 67110146;
    HIDWORD(v12) = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    v16 = 1024;
    v17 = v10;
    v18 = 1024;
    v19 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d During init we were told to stop - thread hasBeenStopped: %d and shouldExit: %d", (uint8_t *)&v12, 0x24u);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(unsigned __int8 *)(a1 + 44);
    v11 = *(unsigned __int8 *)(a1 + 45);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d During init we were told to exit - thread hasBeenStopped: %d and shouldExit: %d", buf, 0x24u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

BOOL HALS_IOContext_Legacy_Impl::IsTimeRunning_Helper(HALS_IOContext_Legacy_Impl *this, const HALS_IOEngineInfo *a2)
{
  int v3;
  _BOOL8 result;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 1))
    return 0;
  v3 = *(_DWORD *)(*((_QWORD *)this + 36) + 96);
  result = v3 == 0;
  if ((_DWORD)a2 == 1 && !v3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v5 = 136315650;
      v6 = "HALS_IOContext_Legacy_Impl.cpp";
      v7 = 1024;
      v8 = 3464;
      v9 = 2082;
      v10 = (char *)this + 32;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContext_Legacy_Impl::IsTimeRunning_Helper: Device %{public}s is not running.", (uint8_t *)&v5, 0x1Cu);
    }
    return 1;
  }
  return result;
}

void std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(std::function<int ()(HALS_IOEngineInfo const&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ConstItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(std::function<int ()(HALS_IOEngineInfo const&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ConstItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ConstItemWithIndex &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(std::function<int ()(HALS_IOEngineInfo const&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ConstItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(std::function<int ()(HALS_IOEngineInfo const&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ConstItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ConstItemWithIndex &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6991608;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(std::function<int ()(HALS_IOEngineInfo const&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ConstItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(std::function<int ()(HALS_IOEngineInfo const&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ConstItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ConstItemWithIndex &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6991608;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(std::function<int ()(HALS_IOEngineInfo const&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ConstItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(std::function<int ()(HALS_IOEngineInfo const&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ConstItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ConstItemWithIndex &)>::operator()(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a2;
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a2 + 16))(**a2);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
    if (!v5)
      std::__throw_bad_function_call[abi:ne180100]();
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 48))(v5, *v3);
  }
  return result;
}

uint64_t std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(std::function<int ()(HALS_IOEngineInfo const&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ConstItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(std::function<int ()(HALS_IOEngineInfo const&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ConstItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ConstItemWithIndex &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK21HALS_IOEngineInfoList12engine_applyIJ29FilterEngineInfoWithoutEngine38FilterIfEngineOnlyNeedsReferenceStreamEEEiNSt3__18functionIFiRK17HALS_IOEngineInfoEEEDpRKT_EUlRN15VisitableVectorINS3_10unique_ptrIS5_NS3_14default_deleteIS5_EEEEE18ConstItemWithIndexEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(std::function<int ()(HALS_IOEngineInfo const&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ConstItemWithIndex &)#1},std::allocator<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(std::function<int ()(HALS_IOEngineInfo const&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ConstItemWithIndex &)#1}>,int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ConstItemWithIndex &)>::target_type()
{
}

void std::__function::__func<std::__bind<int (&)(HALS_IOEngineInfo const&,unsigned int),std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(HALS_IOEngineInfo const&,unsigned int),std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<std::__bind<int (&)(HALS_IOEngineInfo const&,unsigned int),std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(HALS_IOEngineInfo const&,unsigned int),std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6991698;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<int (&)(HALS_IOEngineInfo const&,unsigned int),std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(HALS_IOEngineInfo const&,unsigned int),std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6991698;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<int (&)(HALS_IOEngineInfo const&,unsigned int),std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(HALS_IOEngineInfo const&,unsigned int),std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 8))(a2, *(unsigned int *)(a1 + 16));
}

uint64_t std::__function::__func<std::__bind<int (&)(HALS_IOEngineInfo const&,unsigned int),std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(HALS_IOEngineInfo const&,unsigned int),std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__16__bindIRFiRK17HALS_IOEngineInfojEJRKNS_12placeholders4__phILi1EEERjEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<int (&)(HALS_IOEngineInfo const&,unsigned int),std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(HALS_IOEngineInfo const&,unsigned int),std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo const&)>::target_type()
{
}

uint64_t HALS_IOContext_Legacy_Impl::ResetTime_Helper(HALS_IOContext_Legacy_Impl *this, uint64_t a2, HALS_IOEngineInfo *a3)
{
  uint64_t v3;
  HALS_IOClock *v5;
  double v6;
  int v7;
  int v8;
  char v9;
  int v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  double v16;
  int v17;
  int v18;
  int v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    v5 = *(HALS_IOClock **)(a2 + 288);
    v6 = *(double *)(a2 + 768);
    v7 = *(_DWORD *)(a2 + 776);
    v8 = *(_DWORD *)(a2 + 780);
    v9 = *(_BYTE *)(a2 + 784);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 376))(v3);
    HALS_IOClock::Reset(v5, v6, v7, v8, v9, v10);
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a2 + 8) + 872))(&v25);
    v12 = v25;
    v11 = v26;
    if (!v26)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (!v12)
        return 0;
    }
    else
    {
LABEL_6:
      if (!v12)
        return 0;
    }
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a2 + 8) + 872))(&v25);
    v15 = v25;
    v16 = *(double *)(a2 + 768);
    v17 = *(_DWORD *)(a2 + 776);
    v18 = *(_DWORD *)(a2 + 780);
    v19 = *(unsigned __int8 *)(a2 + 784);
    v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 376))(*(_QWORD *)(a2 + 8));
    HALS_IOClock::Reset(*(HALS_IOClock **)(v15 + 56), v16, v17, v18, v19 != 0, v20);
    v21 = v26;
    if (v26)
    {
      v22 = (unint64_t *)&v26->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  return 0;
}

void sub_1B5B78C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::_ResetOverloadTimeOnEngines(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::_ResetOverloadTimeOnEngines(void)::$_0>,int ()(HALS_IOEngineInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOContext_Legacy_Impl::_ResetOverloadTimeOnEngines(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::_ResetOverloadTimeOnEngines(void)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E69913F0;
  return result;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::_ResetOverloadTimeOnEngines(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::_ResetOverloadTimeOnEngines(void)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69913F0;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::_ResetOverloadTimeOnEngines(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::_ResetOverloadTimeOnEngines(void)::$_0>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 824) = 0u;
  *(_OWORD *)(a2 + 840) = 0u;
  *(_OWORD *)(a2 + 792) = 0u;
  *(_OWORD *)(a2 + 808) = 0u;
  return 0;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::_ResetOverloadTimeOnEngines(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::_ResetOverloadTimeOnEngines(void)::$_0>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl27_ResetOverloadTimeOnEnginesEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::_ResetOverloadTimeOnEngines(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::_ResetOverloadTimeOnEngines(void)::$_0>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::RegisterIOThread(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::RegisterIOThread(void)::$_0>,int ()(HALS_IOEngineInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::RegisterIOThread(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::RegisterIOThread(void)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6990EB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::RegisterIOThread(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::RegisterIOThread(void)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6990EB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::RegisterIOThread(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::RegisterIOThread(void)::$_0>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (!v2)
    return 0;
  if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 320))(*(_QWORD *)(a2 + 8)))
    v5 = *(unsigned int *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 320))(v2) + 44);
  else
    v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, double))(*(_QWORD *)v2 + 640))(v2, v5, *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 8), **(unsigned int **)(a1 + 16), *(double *)(a2 + 768));
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::RegisterIOThread(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::RegisterIOThread(void)::$_0>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl16RegisterIOThreadEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::RegisterIOThread(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::RegisterIOThread(void)::$_0>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::StartHardware(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::StartHardware(void)::$_0>,int ()(HALS_IOEngineInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::StartHardware(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::StartHardware(void)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E69910B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::StartHardware(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::StartHardware(void)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E69910B8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::StartHardware(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::StartHardware(void)::$_0>,int ()(HALS_IOEngineInfo &)>::operator()(_QWORD *a1, HALS_IOContext_Legacy_Impl *a2)
{
  HALS_IOContext_Legacy_Impl *v4;
  std::chrono::steady_clock::time_point v5;
  HALS_IOEngineInfo *v6;
  uint64_t started;
  std::chrono::steady_clock::time_point v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t **v28;
  uint64_t *i;
  unint64_t v30;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v31;
  _QWORD *v32;
  float v33;
  float v34;
  _BOOL8 v35;
  unint64_t v36;
  unint64_t v37;
  size_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;

  v4 = (HALS_IOContext_Legacy_Impl *)a1[3];
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  started = HALS_IOContext_Legacy_Impl::StartHardware_Helper(v4, a2, v6);
  v8.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v9 = *((_QWORD *)a2 + 1);
  if (v9 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 320))(v9))
  {
    v10 = *(unsigned int *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 1) + 320))(*((_QWORD *)a2 + 1)) + 16);
    v11 = a1[1];
    v13 = *(_DWORD **)(v11 + 8);
    v12 = *(_QWORD *)(v11 + 16);
    if ((unint64_t)v13 >= v12)
    {
      v15 = *(_DWORD **)v11;
      v16 = ((uint64_t)v13 - *(_QWORD *)v11) >> 2;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 1 > v17)
        v17 = v18 >> 1;
      v19 = (unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL;
      v20 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v19)
        v20 = v17;
      if (v20)
      {
        v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v20);
        v15 = *(_DWORD **)v11;
        v13 = *(_DWORD **)(v11 + 8);
      }
      else
      {
        v21 = 0;
      }
      v22 = (_DWORD *)(v20 + 4 * v16);
      v23 = v20 + 4 * v21;
      *v22 = v10;
      v14 = (unint64_t)(v22 + 1);
      while (v13 != v15)
      {
        v24 = *--v13;
        *--v22 = v24;
      }
      *(_QWORD *)v11 = v22;
      *(_QWORD *)(v11 + 8) = v14;
      *(_QWORD *)(v11 + 16) = v23;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *v13 = v10;
      v14 = (unint64_t)(v13 + 1);
    }
    *(_QWORD *)(v11 + 8) = v14;
    v25 = a1[2];
    v26 = *(_QWORD *)(v25 + 8);
    if (v26)
    {
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
      v27.i16[0] = vaddlv_u8(v27);
      if (v27.u32[0] > 1uLL)
      {
        v14 = v10;
        if (v26 <= v10)
          v14 = v10 % v26;
      }
      else
      {
        v14 = ((_DWORD)v26 - 1) & v10;
      }
      v28 = *(uint64_t ***)(*(_QWORD *)v25 + 8 * v14);
      if (v28)
      {
        for (i = *v28; i; i = (uint64_t *)*i)
        {
          v30 = i[1];
          if (v30 == v10)
          {
            if (*((_DWORD *)i + 4) == (_DWORD)v10)
              return started;
          }
          else
          {
            if (v27.u32[0] > 1uLL)
            {
              if (v30 >= v26)
                v30 %= v26;
            }
            else
            {
              v30 &= v26 - 1;
            }
            if (v30 != v14)
              break;
          }
        }
      }
    }
    v31 = (v8.__d_.__rep_ - v5.__d_.__rep_) / 1000;
    v32 = operator new(0x20uLL);
    *v32 = 0;
    v32[1] = v10;
    *((_DWORD *)v32 + 4) = v10;
    v32[3] = v31;
    v33 = (float)(unint64_t)(*(_QWORD *)(v25 + 24) + 1);
    v34 = *(float *)(v25 + 32);
    if (!v26 || (float)(v34 * (float)v26) < v33)
    {
      v35 = 1;
      if (v26 >= 3)
        v35 = (v26 & (v26 - 1)) != 0;
      v36 = v35 | (2 * v26);
      v37 = vcvtps_u32_f32(v33 / v34);
      if (v36 <= v37)
        v38 = v37;
      else
        v38 = v36;
      std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(v25, v38);
      v26 = *(_QWORD *)(v25 + 8);
      if ((v26 & (v26 - 1)) != 0)
      {
        if (v26 <= v10)
          v14 = v10 % v26;
        else
          v14 = v10;
      }
      else
      {
        v14 = ((_DWORD)v26 - 1) & v10;
      }
    }
    v39 = *(_QWORD *)v25;
    v40 = *(_QWORD **)(*(_QWORD *)v25 + 8 * v14);
    if (v40)
    {
      *v32 = *v40;
    }
    else
    {
      *v32 = *(_QWORD *)(v25 + 16);
      *(_QWORD *)(v25 + 16) = v32;
      *(_QWORD *)(v39 + 8 * v14) = v25 + 16;
      if (!*v32)
      {
LABEL_56:
        ++*(_QWORD *)(v25 + 24);
        return started;
      }
      v41 = *(_QWORD *)(*v32 + 8);
      if ((v26 & (v26 - 1)) != 0)
      {
        if (v41 >= v26)
          v41 %= v26;
      }
      else
      {
        v41 &= v26 - 1;
      }
      v40 = (_QWORD *)(*(_QWORD *)v25 + 8 * v41);
    }
    *v40 = v32;
    goto LABEL_56;
  }
  return started;
}

void sub_1B5B791BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::StartHardware(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::StartHardware(void)::$_0>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl13StartHardwareEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::StartHardware(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::StartHardware(void)::$_0>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

_QWORD *HALS_IOContext_Legacy_Impl::get_devices_that_are_not_reference_stream_only(HALS_IOContext_Legacy_Impl *this, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *result;
  uint64_t v6;
  void (**v7)(FilterIfEngineOnlyNeedsReferenceStream *__hidden);
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  v4 = operator new(0x20uLL);
  *v4 = &off_1E6991758;
  v4[1] = HALS_IOContext_Legacy_Impl::CountActiveHardware_Helper;
  v4[2] = this;
  v4[3] = (char *)this + 24;
  v9 = v4;
  v7 = &off_1E69928C8;
  HALS_IOContext_Legacy_Impl::engine_apply<FilterIfEngineOnlyNeedsReferenceStream>(a2, (uint64_t)v8, (uint64_t)&v7);
  result = v9;
  if (v9 == v8)
  {
    v6 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_1B5B792F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  std::pair<std::vector<unsigned int>,std::vector<unsigned int>>::~pair(v13);
  _Unwind_Resume(a1);
}

_DWORD *HALS_IOContext_Legacy_Impl::CountActiveHardware_Helper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *result;
  int v7;
  int v8;
  unint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  unint64_t v32;
  int v33;

  result = *(_DWORD **)(a1 + 8);
  if (result)
  {
    result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 320))(result);
    if (result)
    {
      v7 = result[4];
      if (v7)
      {
        v8 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 400))(*(_QWORD *)(a1 + 8), 1);
        if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 400))(*(_QWORD *)(a1 + 8), 0))
        {
          v10 = *(_DWORD **)(a3 + 8);
          v9 = *(_QWORD *)(a3 + 16);
          if ((unint64_t)v10 >= v9)
          {
            v12 = *(_DWORD **)a3;
            v13 = ((uint64_t)v10 - *(_QWORD *)a3) >> 2;
            v14 = v13 + 1;
            if ((unint64_t)(v13 + 1) >> 62)
              goto LABEL_40;
            v15 = v9 - (_QWORD)v12;
            if (v15 >> 1 > v14)
              v14 = v15 >> 1;
            v16 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL;
            v17 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v16)
              v17 = v14;
            if (v17)
            {
              v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v17);
              v12 = *(_DWORD **)a3;
              v10 = *(_DWORD **)(a3 + 8);
            }
            else
            {
              v18 = 0;
            }
            v19 = (_DWORD *)(v17 + 4 * v13);
            v20 = v17 + 4 * v18;
            *v19 = v7;
            v11 = v19 + 1;
            while (v10 != v12)
            {
              v21 = *--v10;
              *--v19 = v21;
            }
            *(_QWORD *)a3 = v19;
            *(_QWORD *)(a3 + 8) = v11;
            *(_QWORD *)(a3 + 16) = v20;
            if (v12)
              operator delete(v12);
          }
          else
          {
            *v10 = v7;
            v11 = v10 + 1;
          }
          *(_QWORD *)(a3 + 8) = v11;
        }
        if (v8)
        {
          v23 = *(_DWORD **)(a2 + 8);
          v22 = *(_QWORD *)(a2 + 16);
          if ((unint64_t)v23 < v22)
          {
            *v23 = v7;
            v24 = v23 + 1;
LABEL_38:
            result = 0;
            *(_QWORD *)(a2 + 8) = v24;
            return result;
          }
          v25 = *(_DWORD **)a2;
          v26 = ((uint64_t)v23 - *(_QWORD *)a2) >> 2;
          v27 = v26 + 1;
          if (!((unint64_t)(v26 + 1) >> 62))
          {
            v28 = v22 - (_QWORD)v25;
            if (v28 >> 1 > v27)
              v27 = v28 >> 1;
            v16 = (unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL;
            v29 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v16)
              v29 = v27;
            if (v29)
            {
              v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v29);
              v25 = *(_DWORD **)a2;
              v23 = *(_DWORD **)(a2 + 8);
            }
            else
            {
              v30 = 0;
            }
            v31 = (_DWORD *)(v29 + 4 * v26);
            v32 = v29 + 4 * v30;
            *v31 = v7;
            v24 = v31 + 1;
            while (v23 != v25)
            {
              v33 = *--v23;
              *--v31 = v33;
            }
            *(_QWORD *)a2 = v31;
            *(_QWORD *)(a2 + 8) = v24;
            *(_QWORD *)(a2 + 16) = v32;
            if (v25)
              operator delete(v25);
            goto LABEL_38;
          }
LABEL_40:
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
      }
      return 0;
    }
  }
  return result;
}

void sub_1B5B79554(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315394;
      *(_QWORD *)((char *)&a9 + 4) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 3449;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::CountActiveHardware_Helper: Caught exception trying to collect engine info.", (uint8_t *)&a9, 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B5B79518);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<std::__bind<int (&)(HALS_IOEngineInfo &,std::vector<unsigned int> &,std::vector<unsigned int> &),std::placeholders::__ph<1> const&,std::reference_wrapper<std::vector<unsigned int>>,std::reference_wrapper<std::vector<unsigned int>>>,std::allocator<std::__bind<int (&)(HALS_IOEngineInfo &,std::vector<unsigned int> &,std::vector<unsigned int> &),std::placeholders::__ph<1> const&,std::reference_wrapper<std::vector<unsigned int>>,std::reference_wrapper<std::vector<unsigned int>>>>,int ()(HALS_IOEngineInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<std::__bind<int (&)(HALS_IOEngineInfo &,std::vector<unsigned int> &,std::vector<unsigned int> &),std::placeholders::__ph<1> const&,std::reference_wrapper<std::vector<unsigned int>>,std::reference_wrapper<std::vector<unsigned int>>>,std::allocator<std::__bind<int (&)(HALS_IOEngineInfo &,std::vector<unsigned int> &,std::vector<unsigned int> &),std::placeholders::__ph<1> const&,std::reference_wrapper<std::vector<unsigned int>>,std::reference_wrapper<std::vector<unsigned int>>>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E6991758;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<int (&)(HALS_IOEngineInfo &,std::vector<unsigned int> &,std::vector<unsigned int> &),std::placeholders::__ph<1> const&,std::reference_wrapper<std::vector<unsigned int>>,std::reference_wrapper<std::vector<unsigned int>>>,std::allocator<std::__bind<int (&)(HALS_IOEngineInfo &,std::vector<unsigned int> &,std::vector<unsigned int> &),std::placeholders::__ph<1> const&,std::reference_wrapper<std::vector<unsigned int>>,std::reference_wrapper<std::vector<unsigned int>>>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6991758;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<int (&)(HALS_IOEngineInfo &,std::vector<unsigned int> &,std::vector<unsigned int> &),std::placeholders::__ph<1> const&,std::reference_wrapper<std::vector<unsigned int>>,std::reference_wrapper<std::vector<unsigned int>>>,std::allocator<std::__bind<int (&)(HALS_IOEngineInfo &,std::vector<unsigned int> &,std::vector<unsigned int> &),std::placeholders::__ph<1> const&,std::reference_wrapper<std::vector<unsigned int>>,std::reference_wrapper<std::vector<unsigned int>>>>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 8))(a2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t std::__function::__func<std::__bind<int (&)(HALS_IOEngineInfo &,std::vector<unsigned int> &,std::vector<unsigned int> &),std::placeholders::__ph<1> const&,std::reference_wrapper<std::vector<unsigned int>>,std::reference_wrapper<std::vector<unsigned int>>>,std::allocator<std::__bind<int (&)(HALS_IOEngineInfo &,std::vector<unsigned int> &,std::vector<unsigned int> &),std::placeholders::__ph<1> const&,std::reference_wrapper<std::vector<unsigned int>>,std::reference_wrapper<std::vector<unsigned int>>>>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__16__bindIRFiR17HALS_IOEngineInfoRNS_6vectorIjNS_9allocatorIjEEEES7_EJRKNS_12placeholders4__phILi1EEENS_17reference_wrapperIS6_EESG_EEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<int (&)(HALS_IOEngineInfo &,std::vector<unsigned int> &,std::vector<unsigned int> &),std::placeholders::__ph<1> const&,std::reference_wrapper<std::vector<unsigned int>>,std::reference_wrapper<std::vector<unsigned int>>>,std::allocator<std::__bind<int (&)(HALS_IOEngineInfo &,std::vector<unsigned int> &,std::vector<unsigned int> &),std::placeholders::__ph<1> const&,std::reference_wrapper<std::vector<unsigned int>>,std::reference_wrapper<std::vector<unsigned int>>>>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

_QWORD *HALS_IOContextDescription::ApplyToInput<HALS_IOContextDescription::ActiveInputsOnly>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[2];
  _QWORD v16[3];
  _QWORD *v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
  v5 = (uint64_t)v17;
  if (!v17)
    goto LABEL_4;
  if (v17 != v16)
  {
    v5 = (*(uint64_t (**)(void))(*v17 + 16))();
LABEL_4:
    v19 = (_BYTE *)v5;
    goto LABEL_6;
  }
  v19 = v18;
  (*(void (**)(_QWORD *, _BYTE *))(v16[0] + 24))(v16, v18);
LABEL_6:
  v7 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  if (v7 != v6)
  {
    v8 = 0;
    v9 = 1;
    do
    {
      if ((v9 & 1) != 0)
        v8 = 0;
      else
        ++v8;
      v15[0] = v7;
      v15[1] = v8;
      if (((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a3 + 16))(a3, v15) & 1) == 0)
      {
        v14[0] = v7;
        v14[1] = v8;
        if (!v19)
          std::__throw_bad_function_call[abi:ne180100]();
        if ((*(unsigned int (**)(_BYTE *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, v14))
          break;
      }
      v9 = 0;
      v7 += 424;
    }
    while (v7 != v6);
  }
  v10 = v19;
  if (v19 == v18)
  {
    v11 = 4;
    v10 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_20;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_20:
  result = v17;
  if (v17 == v16)
  {
    v13 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v13 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

void sub_1B5B79834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  char *v22;
  uint64_t v23;

  v22 = a17;
  if (a17 == &a14)
  {
    v23 = 4;
    v22 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::SetupForIsolatedIO(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::SetupForIsolatedIO(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_DWORD *std::__function::__func<HALS_IOContext_Legacy_Impl::SetupForIsolatedIO(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::SetupForIsolatedIO(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E6990FB8;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::SetupForIsolatedIO(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::SetupForIsolatedIO(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E6990FB8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::SetupForIsolatedIO(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::SetupForIsolatedIO(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::operator()(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t *v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)a2;
  if (!*(_DWORD *)(*(_QWORD *)a2 + 108)
    || ((v3 = *(uint64_t **)(v2 + 112), *(uint64_t **)(v2 + 120) != v3) ? (v4 = v3 == 0) : (v4 = 1), v4))
  {
    v3 = (uint64_t *)(v2 + 408);
  }
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 8);
  if (v6 && *(_BYTE *)(v5 + 750) && *(_BYTE *)(v2 + 364))
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v6 + 760))(v6, a2[2], *(unsigned int *)(a1 + 8), *(unsigned int *)(v2 + 360));
  return 0;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::SetupForIsolatedIO(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::SetupForIsolatedIO(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl18SetupForIsolatedIOEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::SetupForIsolatedIO(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::SetupForIsolatedIO(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target_type()
{
}

uint64_t HALS_IOContext_Legacy_Impl::IOWorkLoop_Engine_EndIO(HALS_IOContext_Legacy_Impl *this, HALS_IOContext_Legacy_Impl *a2, HALS_IOEngineInfo *a3)
{
  uint64_t result;

  result = *((_QWORD *)a2 + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, HALS_IOContext_Legacy_Impl *))(*(_QWORD *)result + 712))(result, *(unsigned int *)(*((_QWORD *)this + 3) + 16), a2);
  return result;
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_3,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_3,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  caulk::concurrent::message *v11;
  uint8_t buf[8];
  _BYTE v13[10];
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v13;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Completed HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit", buf, 0x18u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_3,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(&v11);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_3,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::TeardownForIsolatedIO(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::TeardownForIsolatedIO(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOContext_Legacy_Impl::TeardownForIsolatedIO(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::TeardownForIsolatedIO(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E6991038;
  return result;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::TeardownForIsolatedIO(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::TeardownForIsolatedIO(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6991038;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::TeardownForIsolatedIO(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::TeardownForIsolatedIO(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::operator()(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t *v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)a2;
  if (!*(_DWORD *)(*(_QWORD *)a2 + 108)
    || ((v3 = *(uint64_t **)(v2 + 112), *(uint64_t **)(v2 + 120) != v3) ? (v4 = v3 == 0) : (v4 = 1), v4))
  {
    v3 = (uint64_t *)(v2 + 408);
  }
  v5 = *v3;
  v6 = *(_QWORD *)(v5 + 8);
  if (v6 && *(_BYTE *)(v5 + 750) && *(_BYTE *)(v2 + 364))
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 768))(v6, a2[2], *(unsigned int *)(v2 + 360));
  return 0;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::TeardownForIsolatedIO(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::TeardownForIsolatedIO(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl21TeardownForIsolatedIOEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::TeardownForIsolatedIO(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::TeardownForIsolatedIO(void)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target_type()
{
}

uint64_t std::function<int ()(HALS_IOEngineInfo &)>::function<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x30uLL);
  *v4 = &off_1E6991138;
  v4[2] = 0;
  v4[3] = 0;
  v4[1] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v4 + 1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v4[4] = *(_QWORD *)(a2 + 24);
  *((_DWORD *)v4 + 10) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

void sub_1B5B79D10(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,std::allocator<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>>,int ()(HALS_IOEngineInfo &)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E6991138;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,std::allocator<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>>,int ()(HALS_IOEngineInfo &)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E6991138;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,std::allocator<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x30uLL);
  *v2 = &off_1E6991138;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v2 + 1, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2);
  v2[4] = *(_QWORD *)(a1 + 32);
  *((_DWORD *)v2 + 10) = *(_DWORD *)(a1 + 40);
  return v2;
}

void sub_1B5B79E0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,std::allocator<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  *(_QWORD *)a2 = &off_1E6991138;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  result = std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(a2 + 8), *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 40);
  return result;
}

void std::__function::__func<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,std::allocator<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>>,int ()(HALS_IOEngineInfo &)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,std::allocator<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>>,int ()(HALS_IOEngineInfo &)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t std::__function::__func<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,std::allocator<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  __int32 *v6;
  __int32 *v7;
  uint64_t v8;
  __int32 *v9;
  __int32 *v10;

  v4 = *(_DWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 320))(v5))
  {
    v6 = *(__int32 **)(a1 + 8);
    v7 = *(__int32 **)(a1 + 16);
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 320))(*(_QWORD *)(a2 + 8));
    v9 = wmemchr(v6, *(_DWORD *)(v8 + 16), v7 - v6);
    v10 = v9 ? v9 : v7;
    if (v10 == *(__int32 **)(a1 + 16))
      return 0;
  }
  if ((v4 - 1) < 3)
  {
    if (!*(_BYTE *)(a2 + 751))
      return 0;
    if (*(_BYTE *)(a2 + 760))
    {
      if (*(_BYTE *)(a2 + 761))
      {
        if (v4 != 1)
          return 0;
      }
      else if (v4 != 2)
      {
        return 0;
      }
    }
    else if (v4 != 3)
    {
      return 0;
    }
    goto LABEL_21;
  }
  if ((v4 - 4) >= 2)
  {
    if (v4 != 6 || *(unsigned __int8 *)(a2 + 750) | *(unsigned __int8 *)(a2 + 751))
      return 0;
LABEL_21:
    HALS_IOContext_Legacy_Impl::StopHardware_Helper(*(_QWORD *)(a1 + 32), a2);
    return 0;
  }
  if (*(_BYTE *)(a2 + 750) && !*(_BYTE *)(a2 + 751))
  {
    if (*(_BYTE *)(a2 + 760))
    {
      if (v4 != 4)
        return 0;
    }
    else if (v4 != 5)
    {
      return 0;
    }
    goto LABEL_21;
  }
  return 0;
}

uint64_t std::__function::__func<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,std::allocator<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__16__bindIRZN26HALS_IOContext_Legacy_Impl12StopHardwareERKNS_6vectorIjNS_9allocatorIjEEEEE3$_0JRKNS_12placeholders4__phILi1EEE17eStopWhichDevicesEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,std::allocator<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::UnregisterIOThread(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UnregisterIOThread(void)::$_0>,int ()(HALS_IOEngineInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_DWORD *std::__function::__func<HALS_IOContext_Legacy_Impl::UnregisterIOThread(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UnregisterIOThread(void)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E6990F38;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::UnregisterIOThread(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UnregisterIOThread(void)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E6990F38;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::UnregisterIOThread(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UnregisterIOThread(void)::$_0>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a2 + 8);
  if (!v2)
    return 0;
  if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 320))(*(_QWORD *)(a2 + 8)))
    v4 = *(unsigned int *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 320))(v2) + 44);
  else
    v4 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 648))(v2, v4, *(unsigned int *)(a1 + 8));
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::UnregisterIOThread(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UnregisterIOThread(void)::$_0>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl18UnregisterIOThreadEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::UnregisterIOThread(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UnregisterIOThread(void)::$_0>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZN25HALS_IOContextDescription56ApplyToOutput_ButSkipClocklessReferenceStreamOnlyEnginesENS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEEUljRT_jjRT0_E_NS_9allocatorISE_EES8_ED0Ev()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *_ZNKSt3__110__function6__funcIZN25HALS_IOContextDescription56ApplyToOutput_ButSkipClocklessReferenceStreamOnlyEnginesENS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEEUljRT_jjRT0_E_NS_9allocatorISE_EES8_E7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E698F708;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN25HALS_IOContextDescription56ApplyToOutput_ButSkipClocklessReferenceStreamOnlyEnginesENS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEEUljRT_jjRT0_E_NS_9allocatorISE_EES8_E7__cloneEPNS0_6__baseIS8_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E698F708;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN25HALS_IOContextDescription56ApplyToOutput_ButSkipClocklessReferenceStreamOnlyEnginesENS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEEUljRT_jjRT0_E_NS_9allocatorISE_EES8_EclEOjS5_SI_SI_S7_(uint64_t a1, int *a2, uint64_t a3, int *a4, int *a5, uint64_t a6)
{
  int v8;
  int v9;
  int v10;
  _QWORD *v11;
  _QWORD *v13;

  v8 = *a2;
  v9 = *a4;
  v10 = *a5;
  if (!*(_DWORD *)(a6 + 108))
  {
    if (!*(_QWORD *)(a6 + 408))
      return 0;
LABEL_17:
    v13 = (_QWORD *)(a6 + 408);
    goto LABEL_18;
  }
  v11 = *(_QWORD **)(a6 + 112);
  if (*(_QWORD **)(a6 + 120) == v11 || v11 == 0)
  {
    if (!*(_QWORD *)(a6 + 408))
      return 0;
  }
  else if (!*v11)
  {
    return 0;
  }
  v13 = *(_QWORD **)(a6 + 112);
  if (*(_QWORD **)(a6 + 120) == v13 || v13 == 0)
    goto LABEL_17;
LABEL_18:
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v13 + 320))(*v13))
    return std::function<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::operator()(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), v8, a3, v9, v10);
  return 0;
}

uint64_t _ZNKSt3__110__function6__funcIZN25HALS_IOContextDescription56ApplyToOutput_ButSkipClocklessReferenceStreamOnlyEnginesENS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEEUljRT_jjRT0_E_NS_9allocatorISE_EES8_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN25HALS_IOContextDescription56ApplyToOutput_ButSkipClocklessReferenceStreamOnlyEnginesENSt3__18functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEEUljRT_jjRT0_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN25HALS_IOContextDescription56ApplyToOutput_ButSkipClocklessReferenceStreamOnlyEnginesENS_8functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEEUljRT_jjRT0_E_NS_9allocatorISE_EES8_E11target_typeEv()
{
  return &_ZTIZN25HALS_IOContextDescription56ApplyToOutput_ButSkipClocklessReferenceStreamOnlyEnginesENSt3__18functionIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEEUljRT_jjRT0_E_;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6990380;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6990380;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v14;
  int v15;
  int v16;
  int v17;

  if (!*(_DWORD *)(a6 + 108)
    || ((v7 = *(uint64_t **)(a6 + 112), *(uint64_t **)(a6 + 120) != v7) ? (v8 = v7 == 0) : (v8 = 1), v8))
  {
    v7 = (uint64_t *)(a6 + 408);
  }
  v9 = *v7;
  if (!*(_QWORD *)(*v7 + 8) || !*(_BYTE *)(v9 + 751))
    return 0;
  v10 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 16);
  v11 = *(_DWORD *)(a6 + 24);
  v12 = *(_DWORD *)(v9 + 672);
  v14 = *(_QWORD *)(a6 + 16);
  v15 = 0;
  v16 = v11;
  v17 = v12;
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v9 + 96))(v9, v10, *(unsigned int *)(a6 + 12));
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl16IOWorkLoopDeinitERNS_17IOWorkLoopContextEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::target_type()
{
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 2080;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Failed to clear the syscall masks: %d - %s", buf, 0x28u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

uint64_t caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>(caulk::concurrent::messenger *a1, _BYTE *a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;

  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = &off_1E69907B8;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 20) = *a2;
  v7 = *a3;
  *(_QWORD *)(v6 + 40) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)v6 = &off_1E6990760;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(caulk::concurrent::message *a1)
{
  caulk::concurrent::message *v2;

  v2 = a1;
  caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform((uint64_t)a1);
  return caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_1B5B7A6B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  NSObject **v12;
  _BYTE v13[10];
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v13;
  v3 = *v12;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(unsigned __int8 *)(a1 + 44);
    v11 = *(unsigned __int8 *)(a1 + 45);
    LODWORD(v12) = 67110146;
    HIDWORD(v12) = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    v16 = 1024;
    v17 = v10;
    v18 = 1024;
    v19 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d An exception was thrown while trying to sleep - thread hasBeenStopped: %d and shouldExit: %d", (uint8_t *)&v12, 0x24u);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  const void *v1;
  _QWORD *v2;

  v1 = (const void *)(a1 + 8);
  v2 = operator new(0x110uLL);
  *v2 = &off_1E69906E0;
  memcpy(v2 + 1, v1, 0x108uLL);
  return v2;
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E69906E0;
  return memcpy(a2 + 1, (const void *)(a1 + 8), 0x108uLL);
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  HALS_IOContext_Legacy_Impl::IOWorkLoop_SleepUntilWakeTime(*(HALS_IOContext_Legacy_Impl **)(a1 + 8), *(_QWORD *)(a1 + 96));
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl15IOWorkLoopSleepERNS_17IOWorkLoopContextEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0>,void ()(void)>::target_type()
{
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopPerformIO(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopPerformIO(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 2080;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Failed to update realtime priority parameters with code: %d - %s", buf, 0x28u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopPerformIO(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopPerformIO(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::tuple<unsigned int,char const*,int,int,char *>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopPerformIO(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopPerformIO(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  caulk::concurrent::message *v11;
  uint8_t buf[8];
  _BYTE v13[10];
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v13;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d HALS_IOContext_Legacy_Impl::IOWorkLoopPerformIO: Re-anchoring IO timeline. Forced re-anchor", buf, 0x18u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopPerformIO(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(&v11);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopPerformIO(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

uint64_t HALS_IOContext_Legacy_Impl::ResetTimeline_Helper(HALS_IOContext_Legacy_Impl *this, uint64_t a2, HALS_IOEngineInfo *a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
    (*(void (**)(uint64_t, HALS_IOContext_Legacy_Impl *, uint64_t))(*(_QWORD *)v4 + 632))(v4, this, 8);
  return 0;
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopPerformIO(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopPerformIO(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(unsigned __int8 *)(a1 + 44);
    v11 = *(unsigned __int8 *)(a1 + 45);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Exitted PerformIO early - thread hasBeenStopped: %d and shouldExit: %d", buf, 0x24u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopPerformIO(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopPerformIO(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

BOOL HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(UInt64 a1, unsigned int *a2, uint64_t *a3, UInt64 *a4)
{
  HALB_IOThread *v8;
  uint64_t HasBeenStopped;
  caulk::concurrent::messenger *v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  char v13;
  char v14;
  uint64_t v15;
  std::__shared_weak_count *mHostTime;
  unint64_t *v17;
  unint64_t v18;
  _BOOL8 result;
  uint64_t v20;
  int v21;
  HALS_ObjectMap *v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  NSObject *v26;
  const char *v27;
  uint32_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  HALS_Object *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  int v39;
  AudioTimeStamp *mWordClockTime;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  __int128 *v45;
  uint64_t v46;
  uint64_t v47;
  std::chrono::steady_clock::time_point v48;
  UInt64 v49;
  __int128 *v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  unint64_t v55;
  double v56;
  unint64_t v57;
  unint64_t v58;
  AudioTimeStamp *v59;
  uint64_t v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  AudioTimeStamp *v71;
  uint64_t v72;
  uint64_t (***v73)();
  uint64_t v74;
  Float64 v75;
  AudioTimeStamp *v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  char IsTimeRunning;
  char v81;
  AMCP::Log::Scope_Registry *v82;
  caulk::concurrent::messenger *v83;
  _opaque_pthread_t *v84;
  mach_port_t v85;
  char v86;
  char v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  _OWORD *v92;
  BOOL v93;
  uint64_t v94;
  int8x16_t *v95;
  float64x2_t v96;
  int8x16_t v97;
  int32x2_t v98;
  int64x2_t v99;
  unint64_t v100;
  unsigned int v101;
  unint64_t v102;
  unsigned int v103;
  int v104;
  AMCP::Log::Scope_Registry *v105;
  caulk::concurrent::messenger *v106;
  _opaque_pthread_t *v107;
  mach_port_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  int v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  caulk::concurrent::messenger *v121;
  _opaque_pthread_t *v122;
  mach_port_t v123;
  char v124;
  char v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  HALS_IOClock *v131;
  Float64 v132;
  AudioTimeStamp *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *i;
  uint64_t v137;
  unsigned int v138;
  _BOOL4 v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  double v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t *v147;
  int v148;
  __int128 *v149;
  uint64_t v150;
  int v151;
  uint64_t *v152;
  int v153;
  __int128 *v154;
  uint64_t v155;
  AMCP::Log::Scope_Registry *v156;
  uint64_t v157;
  unsigned int v158;
  double v159;
  uint64_t v160;
  uint64_t *v161;
  int v162;
  __int128 *v163;
  uint64_t v164;
  NSObject *v165;
  caulk::concurrent::messenger *v166;
  _opaque_pthread_t *v167;
  mach_port_t v168;
  char v169;
  uint64_t v170;
  uint64_t *v171;
  int v172;
  __int128 *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  int v177;
  __int128 *v178;
  uint64_t v179;
  AMCP::Log::Scope_Registry *v180;
  int v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  int8x16_t *v186;
  float64x2_t v187;
  int8x16_t v188;
  int32x2_t v189;
  int64x2_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  int v194;
  unsigned int v195;
  unsigned int v196;
  uint64_t v197;
  unsigned int v198;
  _QWORD *v199;
  _QWORD *v200;
  uint64_t v201;
  AMCP::Log::Scope_Registry *v202;
  int v203;
  caulk::concurrent::messenger *v204;
  _opaque_pthread_t *v205;
  mach_port_t v206;
  int *v207;
  char *v208;
  caulk::concurrent::messenger *v209;
  _opaque_pthread_t *v210;
  uint64_t v211;
  _BOOL4 v212;
  caulk::concurrent::messenger *v213;
  _opaque_pthread_t *v214;
  mach_port_t v215;
  char v216;
  char v217;
  uint64_t v218;
  unint64_t *v219;
  uint64_t v220;
  uint64_t *v221;
  int v222;
  __int128 *v223;
  uint64_t v224;
  int AudioCaptureMode;
  uint64_t IOStatus;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  HALS_Object *v230;
  HALS_ObjectMap *v231;
  HALB_Mutex *v232;
  _QWORD *v233;
  _QWORD *v234;
  uint64_t v235;
  uint64_t v236;
  float v237;
  float v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  __int128 v247;
  _DWORD *v248;
  caulk::concurrent::messenger *v249;
  _opaque_pthread_t *v250;
  mach_port_t v251;
  int *v252;
  char *v253;
  _DWORD *exception;
  dispatch_object_t object;
  NSObject *objecta;
  int v257;
  uint64_t v258;
  uint64_t v259;
  std::__shared_weak_count *v260;
  _OWORD v261[2];
  int v262;
  void *__p[2];
  __int128 v264;
  uint64_t v265;
  _BYTE v266[24];
  _BYTE *v267;
  __int128 v268;
  __int128 v269;
  SMPTETime v270;
  _BYTE v271[48];
  __int128 v272;
  __int128 v273;
  SMPTETime v274;
  _BYTE v275[40];
  _BYTE v276[24];
  _BYTE *v277;
  uint64_t (**v278)();
  uint64_t p_buf;
  void (*v280)(uint64_t);
  uint64_t (***v281)();
  uint64_t v282;
  AudioTimeStamp *v283;
  UInt64 *p_mWordClockTime;
  AudioTimeStamp buf;
  __int128 v286;
  uint64_t v287;

  v287 = *MEMORY[0x1E0C80C00];
  v8 = (HALB_IOThread *)(a1 + 312);
  HasBeenStopped = HALB_IOThread::HasBeenStopped((HALB_IOThread *)(a1 + 312));
  if ((HasBeenStopped & 1) != 0 || *((_BYTE *)a2 + 249))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)HasBeenStopped);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v10 = *(caulk::concurrent::messenger **)(*(_QWORD *)&buf.mSampleTime + 8);
    v11 = pthread_self();
    v12 = pthread_mach_thread_np(v11);
    v13 = HALB_IOThread::HasBeenStopped(v8);
    v14 = *((_BYTE *)a2 + 249);
    v15 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
    *(_DWORD *)(v15 + 16) = 0;
    *(_BYTE *)(v15 + 20) = 0;
    *(_DWORD *)(v15 + 24) = v12;
    *(_QWORD *)(v15 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
    *(_DWORD *)(v15 + 40) = 2321;
    *(_BYTE *)(v15 + 44) = v13;
    *(_BYTE *)(v15 + 45) = v14;
    *(_QWORD *)v15 = &off_1E69908E8;
    *(_QWORD *)(v15 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v10, (caulk::concurrent::message *)v15);
    mHostTime = (std::__shared_weak_count *)buf.mHostTime;
    if (buf.mHostTime)
    {
      v17 = (unint64_t *)(buf.mHostTime + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))mHostTime->__on_zero_shared)(mHostTime);
        std::__shared_weak_count::__release_weak(mHostTime);
      }
    }
    result = 0;
    *((_BYTE *)a2 + 249) = 1;
    return result;
  }
  if (!*((_BYTE *)a2 + 248))
  {
    v20 = *(_QWORD *)(a1 + 24);
    v258 = *(unsigned int *)(v20 + 152);
    v21 = *(_DWORD *)(v20 + 16);
    v22 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 1512));
    v23 = *(_QWORD *)(a1 + 1520);
    v24 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
    if (v22 && v23)
    {
      if (!v24)
        goto LABEL_20;
      v25 = (*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)v22 + 216))(v22);
      LODWORD(buf.mSampleTime) = 136316162;
      *(_QWORD *)((char *)&buf.mSampleTime + 4) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD2(buf.mHostTime) = 1024;
      *(_DWORD *)((char *)&buf.mHostTime + 6) = 1653;
      WORD1(buf.mRateScalar) = 1024;
      HIDWORD(buf.mRateScalar) = v21;
      LOWORD(buf.mWordClockTime) = 2082;
      *(UInt64 *)((char *)&buf.mWordClockTime + 2) = v23 + 32;
      buf.mSMPTETime.mSubframeDivisor = 2082;
      *(_QWORD *)&buf.mSMPTETime.mCounter = v25;
      v26 = MEMORY[0x1E0C81028];
      v27 = "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOWorkLoopInit: %u %{public}s (%{public}s): starting";
      v28 = 44;
    }
    else
    {
      if (!v24)
        goto LABEL_20;
      LODWORD(buf.mSampleTime) = 136315650;
      *(_QWORD *)((char *)&buf.mSampleTime + 4) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD2(buf.mHostTime) = 1024;
      *(_DWORD *)((char *)&buf.mHostTime + 6) = 1657;
      WORD1(buf.mRateScalar) = 1024;
      HIDWORD(buf.mRateScalar) = v21;
      v26 = MEMORY[0x1E0C81028];
      v27 = "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOWorkLoopInit: %u: starting";
      v28 = 24;
    }
    _os_log_impl(&dword_1B57BA000, v26, OS_LOG_TYPE_DEFAULT, v27, (uint8_t *)&buf, v28);
LABEL_20:
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 200))(*(_QWORD *)(a1 + 24));
    kdebug_trace();
    v29 = *(std::__shared_weak_count **)(a1 + 16);
    if (v29)
    {
      p_shared_weak_owners = (unint64_t *)&v29->__shared_weak_owners_;
      do
        v31 = __ldxr(p_shared_weak_owners);
      while (__stxr(v31 + 1, p_shared_weak_owners));
    }
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 64) + 44))
      HALS_IOContext_Legacy_Impl::TakePowerAssertions((HALS_IOContext_Legacy_Impl *)a1);
    v259 = 0;
    v260 = 0;
    HALS_System::GetInstance(&buf, 0, &v259);
    HALS_System::SetIOContextIsRunning(*(HALS_System **)&buf.mSampleTime, v21, 1);
    v33 = (std::__shared_weak_count *)buf.mHostTime;
    if (buf.mHostTime)
    {
      v34 = (unint64_t *)(buf.mHostTime + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = v260;
    if (v260)
    {
      p_shared_owners = (unint64_t *)&v260->__shared_owners_;
      do
        v38 = __ldaxr(p_shared_owners);
      while (__stlxr(v38 - 1, p_shared_owners));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    if (v29)
      std::__shared_weak_count::__release_weak(v29);
    HALS_ObjectMap::ReleaseObject(v22, v32);
    *(_BYTE *)(a1 + 1301) = 0;
    v39 = *(_DWORD *)(a1 + 40);
    *(_QWORD *)&buf.mSampleTime = &off_1E6990FB8;
    LODWORD(buf.mHostTime) = v39;
    buf.mWordClockTime = (UInt64)&buf;
    *(_QWORD *)&v272 = &off_1E6996540;
    *((_QWORD *)&v272 + 1) = a1 + 1496;
    HALS_IOContextDescription::ApplyToInput<HALS_IOContextDescription::ActiveInputsOnly>(a1 + 1496, (uint64_t)&buf, (uint64_t)&v272);
    mWordClockTime = (AudioTimeStamp *)buf.mWordClockTime;
    if ((AudioTimeStamp *)buf.mWordClockTime == &buf)
    {
      v41 = 4;
      mWordClockTime = &buf;
    }
    else
    {
      if (!buf.mWordClockTime)
        goto LABEL_42;
      v41 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)&mWordClockTime->mSampleTime + 8 * v41))();
LABEL_42:
    if (*(_QWORD *)(a1 + 1096))
      goto LABEL_43;
    kdebug_trace();
    v47 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 192);
    *(_QWORD *)v47 = mach_absolute_time();
    *(_BYTE *)(v47 + 8) = 1;
    v48.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(_OWORD *)__p = 0u;
    v264 = 0u;
    HALS_IOContext_Legacy_Impl::AssessIOBufferSize((HALS_IOContext_Legacy_Impl *)a1, (CAPropertyAddressList *)__p);
    HALS_IOContextDescription::CalculateEngineSynchOffsets((_QWORD *)(a1 + 1496));
    v49 = *(_QWORD *)(a1 + 1520);
    *(_QWORD *)&buf.mSampleTime = &off_1E697F2E0;
    buf.mHostTime = v49;
    *(int32x2_t *)&buf.mRateScalar = vrev64_s32(*(int32x2_t *)(a1 + 1936));
    *(_QWORD *)&v268 = &off_1E6996B38;
    *((_QWORD *)&v268 + 1) = &buf;
    *((_QWORD *)&v269 + 1) = &v268;
    v44 = HALS_IOContextDescription::ApplyToInput<>(a1 + 1496, (uint64_t)&v268);
    v50 = (__int128 *)*((_QWORD *)&v269 + 1);
    if (*((__int128 **)&v269 + 1) == &v268)
    {
      v51 = 4;
      v50 = &v268;
    }
    else
    {
      if (!*((_QWORD *)&v269 + 1))
        goto LABEL_74;
      v51 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
LABEL_74:
    if (v44)
      goto LABEL_230;
    v278 = &off_1E6996BB8;
    p_buf = (uint64_t)&buf;
    v281 = &v278;
    v44 = HALS_IOContextDescription::ApplyToOutput<>(a1 + 1496, (uint64_t)&v278);
    v73 = v281;
    if (v281 == &v278)
    {
      v74 = 4;
      v73 = &v278;
    }
    else
    {
      if (!v281)
        goto LABEL_156;
      v74 = 5;
    }
    (*v73)[v74]();
LABEL_156:
    if (v44)
      goto LABEL_230;
    object = (dispatch_object_t)v48.__d_.__rep_;
    HALS_IOContext_Legacy_Impl::StartTapOutput((HALS_IOContext_Legacy_Impl *)a1);
    v257 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 64) + 48);
    HALS_IOContextDescription::CalculateMaximumIOBufferFrameSize((HALS_IOContextDescription *)(a1 + 1496));
    v144 = v143;
    v145 = *(_QWORD *)(a1 + 1520);
    v146 = *(_QWORD **)(a1 + 1736);
    v146[2] = v146[1];
    v146[5] = v146[4];
    v147 = *(uint64_t **)(a1 + 1720);
    *(_QWORD *)&v268 = &off_1E69792F0;
    *((_QWORD *)&v268 + 1) = v144;
    *(_QWORD *)&v269 = v145;
    *((_QWORD *)&v269 + 1) = &v268;
    v148 = VisitableVector<HALS_IOStreamInfo>::apply<>(v147, (uint64_t)&v268);
    v149 = (__int128 *)*((_QWORD *)&v269 + 1);
    if (*((__int128 **)&v269 + 1) == &v268)
    {
      v150 = 4;
      v149 = &v268;
    }
    else
    {
      if (!*((_QWORD *)&v269 + 1))
        goto LABEL_168;
      v150 = 5;
    }
    (*(void (**)(__int128 *))(*(_QWORD *)v149 + 8 * v150))(v149);
LABEL_168:
    if (v148)
    {
      v44 = 1;
      goto LABEL_230;
    }
    v152 = *(uint64_t **)(a1 + 1728);
    *(_QWORD *)&v268 = &off_1E6979370;
    *((_QWORD *)&v268 + 1) = v144;
    *(_QWORD *)&v269 = v145;
    *((_QWORD *)&v269 + 1) = &v268;
    v153 = HALS_IOStreamGrid::apply_to_streams(v152, (uint64_t)&v268);
    v154 = (__int128 *)*((_QWORD *)&v269 + 1);
    if (*((__int128 **)&v269 + 1) == &v268)
    {
      v155 = 4;
      v154 = &v268;
    }
    else
    {
      if (!*((_QWORD *)&v269 + 1))
        goto LABEL_183;
      v155 = 5;
    }
    (*(void (**)(__int128 *))(*(_QWORD *)v154 + 8 * v155))(v154);
LABEL_183:
    if (v153)
      goto LABEL_229;
    v160 = *(_QWORD *)(a1 + 1736);
    v161 = *(uint64_t **)(a1 + 1720);
    *(_QWORD *)&v268 = &off_1E6979400;
    *((_QWORD *)&v268 + 1) = v160;
    *((_QWORD *)&v269 + 1) = &v268;
    v162 = VisitableVector<HALS_IOStreamInfo>::apply<>(v161, (uint64_t)&v268);
    v163 = (__int128 *)*((_QWORD *)&v269 + 1);
    if (*((__int128 **)&v269 + 1) == &v268)
    {
      v164 = 4;
      v163 = &v268;
    }
    else
    {
      if (!*((_QWORD *)&v269 + 1))
        goto LABEL_194;
      v164 = 5;
    }
    (*(void (**)(__int128 *))(*(_QWORD *)v163 + 8 * v164))(v163);
LABEL_194:
    if (v162)
      goto LABEL_229;
    v170 = *(_QWORD *)(a1 + 1736);
    v171 = *(uint64_t **)(a1 + 1728);
    *(_QWORD *)&v268 = &off_1E6979480;
    *((_QWORD *)&v268 + 1) = v170;
    *((_QWORD *)&v269 + 1) = &v268;
    v172 = HALS_IOStreamGrid::apply_to_streams(v171, (uint64_t)&v268);
    v173 = (__int128 *)*((_QWORD *)&v269 + 1);
    if (*((__int128 **)&v269 + 1) == &v268)
    {
      v174 = 4;
      v173 = &v268;
    }
    else
    {
      if (!*((_QWORD *)&v269 + 1))
        goto LABEL_203;
      v174 = 5;
    }
    (*(void (**)(__int128 *))(*(_QWORD *)v173 + 8 * v174))(v173);
LABEL_203:
    if (!v172)
    {
      HALB_IOBufferManager_Server::Allocate(*(HALB_IOBufferManager_Server **)(a1 + 1736), v257 != 0);
      v175 = *(_QWORD *)(a1 + 1736);
      v176 = *(uint64_t **)(a1 + 1720);
      *(_QWORD *)&v268 = &off_1E6979500;
      *((_QWORD *)&v268 + 1) = v175;
      *((_QWORD *)&v269 + 1) = &v268;
      v177 = VisitableVector<HALS_IOStreamInfo>::apply<>(v176, (uint64_t)&v268);
      v178 = (__int128 *)*((_QWORD *)&v269 + 1);
      if (*((__int128 **)&v269 + 1) == &v268)
      {
        v179 = 4;
        v178 = &v268;
      }
      else
      {
        if (!*((_QWORD *)&v269 + 1))
          goto LABEL_228;
        v179 = 5;
      }
      (*(void (**)(__int128 *))(*(_QWORD *)v178 + 8 * v179))(v178);
LABEL_228:
      if (v177)
        goto LABEL_229;
      v220 = *(_QWORD *)(a1 + 1736);
      v221 = *(uint64_t **)(a1 + 1728);
      *(_QWORD *)&v268 = &off_1E6979580;
      *((_QWORD *)&v268 + 1) = v220;
      *((_QWORD *)&v269 + 1) = &v268;
      v222 = HALS_IOStreamGrid::apply_to_streams(v221, (uint64_t)&v268);
      v223 = (__int128 *)*((_QWORD *)&v269 + 1);
      if (*((__int128 **)&v269 + 1) == &v268)
      {
        v224 = 4;
        v223 = &v268;
      }
      else
      {
        if (!*((_QWORD *)&v269 + 1))
          goto LABEL_251;
        v224 = 5;
      }
      (*(void (**)(__int128 *))(*(_QWORD *)v223 + 8 * v224))(v223);
LABEL_251:
      v44 = v222 != 0;
      if (v222)
        goto LABEL_230;
      AudioCaptureMode = HALS_IOContext::GetAudioCaptureMode(*(HALS_IOContext **)(a1 + 24));
      HALS_IOContext_Legacy_Impl::EnableCaptureFiles(a1, AudioCaptureMode);
      HALS_IOContextDescription::RegisterBuffers((HALS_IOContextDescription *)(a1 + 1496));
      IOStatus = HALB_IOBufferManager_Server::GetIOStatus((HALB_IOBufferManager_Server *)(a1 + 1648));
      *(_QWORD *)(a1 + 1096) = IOStatus;
      v227 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 80);
      if (v227)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v227 + 40))(v227, IOStatus);
        v228 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 80);
        if (v228)
          (*(void (**)(uint64_t))(*(_QWORD *)v228 + 104))(v228);
      }
      HALS_IOContext_Legacy_Impl::get_devices_that_are_not_reference_stream_only((HALS_IOContext_Legacy_Impl *)&buf, a1);
      v229 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**(unsigned int **)(*(_QWORD *)(a1 + 24) + 64));
      v231 = (HALS_ObjectMap *)v229;
      if (v229)
      {
        v278 = (uint64_t (**)())MEMORY[0x1E0C809B0];
        p_buf = 0x40000000;
        v280 = ___ZN11HALS_Client23DevicesStartedByContextERKNSt3__16vectorIjNS0_9allocatorIjEEEES6__block_invoke;
        v281 = (uint64_t (***)())&__block_descriptor_tmp_23_2067;
        v282 = v229;
        v283 = &buf;
        p_mWordClockTime = &buf.mWordClockTime;
        v232 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v229 + 56))(v229);
        HALB_CommandGate::ExecuteCommand(v232, (uint64_t)&v278);
      }
      HALS_ObjectMap::ReleaseObject(v231, v230);
      if (buf.mWordClockTime)
      {
        *(_QWORD *)&buf.mSMPTETime.mSubframes = buf.mWordClockTime;
        operator delete((void *)buf.mWordClockTime);
      }
      if (*(_QWORD *)&buf.mSampleTime)
      {
        buf.mHostTime = *(_QWORD *)&buf.mSampleTime;
        operator delete(*(void **)&buf.mSampleTime);
      }
      memset(v261, 0, sizeof(v261));
      v262 = 1065353216;
      v277 = 0;
      v233 = operator new(0x20uLL);
      *v233 = &off_1E69910B8;
      v233[1] = a1 + 1432;
      v233[2] = v261;
      v233[3] = a1;
      v277 = v233;
      *(_QWORD *)&buf.mSampleTime = &off_1E69928C8;
      v44 = HALS_IOContext_Legacy_Impl::engine_apply<FilterIfEngineOnlyNeedsReferenceStream>(a1, (uint64_t)v276, (uint64_t)&buf);
      v234 = v277;
      if (v277 == v276)
      {
        v235 = 4;
        v234 = v276;
      }
      else
      {
        if (!v277)
          goto LABEL_266;
        v235 = 5;
      }
      (*(void (**)(_QWORD *))(*v234 + 8 * v235))(v234);
LABEL_266:
      *(_QWORD *)&v272 = __PAIR64__(*(_DWORD *)(*(_QWORD *)(a1 + 24) + 16), **(_DWORD **)(*(_QWORD *)(a1 + 24) + 64));
      DWORD2(v272) = *(_DWORD *)(a1 + 1512);
      HIDWORD(v272) = *(_DWORD *)(a1 + 1320);
      *(_QWORD *)&v273 = HALS_IOContext_Legacy_Impl::GetActualSampleRate((HALS_IOContext_Legacy_Impl *)a1);
      v236 = *(_QWORD *)(a1 + 1520);
      v237 = 1.0;
      v238 = 1.0;
      if (v236)
      {
        v239 = *(_QWORD *)(v236 + 8);
        if (v239)
        {
          v240 = **(unsigned int **)(*(_QWORD *)(a1 + 24) + 64);
          v241 = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v239 + 320))(v239, 1.0);
          v238 = 1.0;
          if (v241)
            v238 = (*(float (**)(uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)v241 + 248))(v241, v240, 1, 1.0);
        }
      }
      *((float *)&v273 + 2) = v238;
      v242 = *(_QWORD *)(a1 + 1520);
      if (v242)
      {
        v243 = *(_QWORD *)(v242 + 8);
        if (v243)
        {
          v244 = **(unsigned int **)(*(_QWORD *)(a1 + 24) + 64);
          v245 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v243 + 320))(v243);
          if (v245)
            v237 = (*(float (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v245 + 248))(v245, v244, 0);
        }
      }
      *((float *)&v273 + 3) = v237;
      LOBYTE(v274.mSubframes) = v44 == 0;
      *(_QWORD *)&v274.mType = object;
      *(std::chrono::steady_clock::time_point *)&v274.mHours = std::chrono::steady_clock::now();
      std::unordered_map<unsigned int,std::chrono::duration<long long,std::ratio<1l,1000000l>>>::unordered_map((uint64_t)v275, (uint64_t)v261);
      v268 = v272;
      v269 = v273;
      v270 = v274;
      std::unordered_map<unsigned int,std::chrono::duration<long long,std::ratio<1l,1000000l>>>::unordered_map((uint64_t)v271, (uint64_t)v275);
      if (!g_static_start_options)
      {
        *(_OWORD *)&buf.mSampleTime = v268;
        *(_OWORD *)&buf.mRateScalar = v269;
        buf.mSMPTETime = v270;
        std::unordered_map<unsigned int,std::chrono::duration<long long,std::ratio<1l,1000000l>>>::unordered_map((uint64_t)&buf.mFlags, (uint64_t)v271);
        objecta = dispatch_get_global_queue(0, 0);
        if (objecta)
          dispatch_retain(objecta);
        v246 = (char *)operator new();
        v247 = *(_OWORD *)&buf.mRateScalar;
        *(_OWORD *)v246 = *(_OWORD *)&buf.mSampleTime;
        *((_OWORD *)v246 + 1) = v247;
        *(SMPTETime *)(v246 + 32) = buf.mSMPTETime;
        std::unordered_map<unsigned int,std::chrono::duration<long long,std::ratio<1l,1000000l>>>::unordered_map((uint64_t)(v246 + 56), (uint64_t)&buf.mFlags);
        v265 = 0;
        dispatch_async_f(objecta, v246, (dispatch_function_t)applesauce::dispatch::v1::async<HALS_IOContextReporter::ReportStartHardware(HALS_IOContextReporter::StartHardwareData)::$_0 &>(dispatch_queue_s *,HALS_IOContextReporter::ReportStartHardware(HALS_IOContextReporter::StartHardwareData)::$_0 &)::{lambda(void *)#1}::__invoke);
        std::unique_ptr<HALS_IOContextReporter::ReportStartHardware(HALS_IOContextReporter::StartHardwareData)::$_0,std::default_delete<HALS_IOContextReporter::ReportStartHardware(HALS_IOContextReporter::StartHardwareData)::$_0>>::~unique_ptr[abi:ne180100](&v265);
        if (objecta)
          dispatch_release(objecta);
        std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)&buf.mFlags);
      }
      std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)v271);
      std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)v275);
      std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)v261);
LABEL_230:
      if (__p[0])
        operator delete(__p[0]);
      kdebug_trace();
      v211 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 192);
      v212 = *(_BYTE *)(v211 + 8) == 0;
      *(_QWORD *)(v211 + 16) = mach_absolute_time();
      *(_BYTE *)(v211 + 24) = 1;
      if (v212)
      {
        *(_QWORD *)v211 = *(_QWORD *)(v211 + 16);
        *(_BYTE *)(v211 + 8) = *(_BYTE *)(v211 + 24);
      }
      if (v44)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.mSampleTime) = 136315394;
          *(_QWORD *)((char *)&buf.mSampleTime + 4) = "HALS_IOContext_Legacy_Impl.cpp";
          WORD2(buf.mHostTime) = 1024;
          *(_DWORD *)((char *)&buf.mHostTime + 6) = 1697;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOWorkLoop: failed to start the hardware", (uint8_t *)&buf, 0x12u);
        }
        goto LABEL_237;
      }
LABEL_43:
      v42 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 16);
      LODWORD(buf.mSampleTime) = HALS_IOThread::CopyWorkgroupIntervalPort(v8);
      WORD2(buf.mSampleTime) = 1;
      buf.mHostTime = 850045863;
      memset(&buf.mRateScalar, 0, 48);
      v286 = 0u;
      v43 = *(unsigned int *)(a1 + 1320) | (unint64_t)(v42 << 32);
      *(_QWORD *)&v272 = &off_1E6990EB8;
      *((_QWORD *)&v272 + 1) = v43;
      *(_QWORD *)&v273 = &buf;
      *((_QWORD *)&v273 + 1) = &v272;
      v44 = HALS_IOContext_Legacy_Impl::engine_apply<>(a1, (uint64_t)&v272);
      v45 = (__int128 *)*((_QWORD *)&v273 + 1);
      if (*((__int128 **)&v273 + 1) == &v272)
      {
        v46 = 4;
        v45 = &v272;
      }
      else
      {
        if (!*((_QWORD *)&v273 + 1))
          goto LABEL_61;
        v46 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v45 + 8 * v46))();
LABEL_61:
      AMCP::Utility::Mach_Port::~Mach_Port((AMCP::Utility::Mach_Port *)&buf);
      if (v44)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.mSampleTime) = 136315394;
          *(_QWORD *)((char *)&buf.mSampleTime + 4) = "HALS_IOContext_Legacy_Impl.cpp";
          WORD2(buf.mHostTime) = 1024;
          *(_DWORD *)((char *)&buf.mHostTime + 6) = 1708;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOWorkLoop: failed to register io thread", (uint8_t *)&buf, 0x12u);
        }
LABEL_237:
        *(_DWORD *)(a1 + 1056) = v44;
        *((_BYTE *)a2 + 249) = 1;
        *(_DWORD *)(a1 + 1488) = HALS_IOPrewarmManager::Stop((_QWORD *)(a1 + 1472), *(_DWORD *)(a1 + 1060));
        HasBeenStopped = (uint64_t)HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted((HALS_IOContext_Legacy_Impl *)a1);
        goto LABEL_238;
      }
      kdebug_trace();
      *(_QWORD *)&buf.mSampleTime = &off_1E69913F0;
      buf.mWordClockTime = (UInt64)&buf;
      *(_QWORD *)&v272 = &off_1E69928C8;
      HALS_IOContext_Legacy_Impl::engine_apply<FilterIfEngineOnlyNeedsReferenceStream>(a1, (uint64_t)&buf, (uint64_t)&v272);
      v59 = (AudioTimeStamp *)buf.mWordClockTime;
      if ((AudioTimeStamp *)buf.mWordClockTime == &buf)
      {
        v60 = 4;
        v59 = &buf;
      }
      else
      {
        if (!buf.mWordClockTime)
          goto LABEL_80;
        v60 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)&v59->mSampleTime + 8 * v60))();
LABEL_80:
      *(_QWORD *)&v75 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 16);
      *(_QWORD *)&buf.mSampleTime = &off_1E6990C88;
      buf.mHostTime = (UInt64)HALS_IOContext_Legacy_Impl::ResetTime_Helper;
      buf.mRateScalar = v75;
      buf.mWordClockTime = (UInt64)&buf;
      *(_QWORD *)&v272 = &off_1E6992948;
      HALS_IOContext_Legacy_Impl::engine_apply<FilterInactiveReferenceStreamOnlyEngines>(a1, (uint64_t)&buf, (uint64_t)&v272);
      v76 = (AudioTimeStamp *)buf.mWordClockTime;
      if ((AudioTimeStamp *)buf.mWordClockTime == &buf)
      {
        v77 = 4;
        v76 = &buf;
      }
      else
      {
        if (!buf.mWordClockTime)
        {
LABEL_85:
          HALS_IOContext_Legacy_Impl::UpdateTime((HALS_IOContext_Legacy_Impl *)a1);
          v78 = 0;
          v79 = v258 / 0x9C4;
          while ((HALB_IOThread::HasBeenStopped(v8) & 1) == 0)
          {
            IsTimeRunning = HALS_IOContext_Legacy_Impl::IsTimeRunning((HALS_IOContext_Legacy_Impl *)a1, 0);
            v81 = v78 >= v79 ? 1 : IsTimeRunning;
            if ((v81 & 1) != 0)
              break;
            HALB_Mutex::Unlock((HALB_Mutex *)(a1 + 328));
            usleep(0x9C4u);
            HasBeenStopped = HALB_Mutex::Lock((HALB_Mutex *)(a1 + 328));
            if (*(_BYTE *)(a1 + 304))
              goto LABEL_191;
            HALS_IOContext_Legacy_Impl::UpdateTime((HALS_IOContext_Legacy_Impl *)a1);
            ++v78;
          }
          kdebug_trace();
          v82 = (AMCP::Log::Scope_Registry *)HALB_IOThread::HasBeenStopped(v8);
          if ((_DWORD)v82)
          {
            AMCP::Log::Scope_Registry::get(v82);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
            v83 = *(caulk::concurrent::messenger **)(*(_QWORD *)&buf.mSampleTime + 8);
            v84 = pthread_self();
            v85 = pthread_mach_thread_np(v84);
            v86 = HALB_IOThread::HasBeenStopped(v8);
            v87 = *((_BYTE *)a2 + 249);
            v88 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
            *(_DWORD *)(v88 + 16) = 0;
            *(_BYTE *)(v88 + 20) = 0;
            *(_DWORD *)(v88 + 24) = v85;
            *(_QWORD *)(v88 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
            *(_DWORD *)(v88 + 40) = 1749;
            *(_BYTE *)(v88 + 44) = v86;
            *(_BYTE *)(v88 + 45) = v87;
            *(_QWORD *)v88 = &off_1E698FF38;
            *(_QWORD *)(v88 + 8) = 0;
            HasBeenStopped = caulk::concurrent::messenger::enqueue(v83, (caulk::concurrent::message *)v88);
            v89 = (std::__shared_weak_count *)buf.mHostTime;
            if (buf.mHostTime)
            {
              v90 = (unint64_t *)(buf.mHostTime + 8);
              do
                v91 = __ldaxr(v90);
              while (__stlxr(v91 - 1, v90));
              if (!v91)
              {
                ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                std::__shared_weak_count::__release_weak(v89);
              }
            }
            goto LABEL_191;
          }
          if (*(_QWORD *)(a1 + 1520))
          {
            if (v78 >= v79)
            {
              HALS_IOContext_Legacy_Impl::IsTimeRunning((HALS_IOContext_Legacy_Impl *)a1, 1u);
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
              {
                v151 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 16);
                LODWORD(buf.mSampleTime) = 136316162;
                *(_QWORD *)((char *)&buf.mSampleTime + 4) = "HALS_IOContext_Legacy_Impl.cpp";
                WORD2(buf.mHostTime) = 1024;
                *(_DWORD *)((char *)&buf.mHostTime + 6) = 1767;
                WORD1(buf.mRateScalar) = 2048;
                *(_QWORD *)((char *)&buf.mRateScalar + 4) = v258;
                WORD2(buf.mWordClockTime) = 1024;
                *(_DWORD *)((char *)&buf.mWordClockTime + 6) = v151;
                buf.mSMPTETime.mSubframeDivisor = 2080;
                *(_QWORD *)&buf.mSMPTETime.mCounter = a1 + 492;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOWorkLoop: could not establish a timeline after waiting %lu microseconds for context %d %s\n", (uint8_t *)&buf, 0x2Cu);
              }
              *(_DWORD *)(a1 + 1056) = 1937010544;
              *((_BYTE *)a2 + 249) = 1;
              *(_DWORD *)(a1 + 1488) = HALS_IOPrewarmManager::Stop((_QWORD *)(a1 + 1472), *(_DWORD *)(a1 + 1060));
              HasBeenStopped = (uint64_t)HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted((HALS_IOContext_Legacy_Impl *)a1);
LABEL_238:
              if (!*((_BYTE *)a2 + 249))
              {
                *((_BYTE *)a2 + 248) = 1;
                goto LABEL_10;
              }
LABEL_239:
              AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)HasBeenStopped);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
              v213 = *(caulk::concurrent::messenger **)(*(_QWORD *)&buf.mSampleTime + 8);
              v214 = pthread_self();
              v215 = pthread_mach_thread_np(v214);
              v216 = HALB_IOThread::HasBeenStopped(v8);
              v217 = *((_BYTE *)a2 + 249);
              v218 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
              *(_DWORD *)(v218 + 16) = 0;
              *(_BYTE *)(v218 + 20) = 16;
              *(_DWORD *)(v218 + 24) = v215;
              *(_QWORD *)(v218 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
              *(_DWORD *)(v218 + 40) = 2332;
              *(_BYTE *)(v218 + 44) = v216;
              *(_BYTE *)(v218 + 45) = v217;
              *(_QWORD *)v218 = &off_1E6990940;
              *(_QWORD *)(v218 + 8) = 0;
              caulk::concurrent::messenger::enqueue(v213, (caulk::concurrent::message *)v218);
              v127 = (std::__shared_weak_count *)buf.mHostTime;
              if (buf.mHostTime)
              {
                v219 = (unint64_t *)(buf.mHostTime + 8);
                do
                  v129 = __ldaxr(v219);
                while (__stlxr(v129 - 1, v219));
LABEL_242:
                if (!v129)
                {
                  ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                  std::__shared_weak_count::__release_weak(v127);
                }
              }
              return 0;
            }
            v92 = *(_OWORD **)(a1 + 1096);
            if (v92)
            {
              v92[17] = 0u;
              v92[18] = 0u;
              v92[15] = 0u;
              v92[16] = 0u;
              v92[13] = 0u;
              v92[14] = 0u;
              v92[11] = 0u;
              v92[12] = 0u;
              v92[9] = 0u;
              v92[10] = 0u;
              v92[7] = 0u;
              v92[8] = 0u;
              v92[5] = 0u;
              v92[6] = 0u;
              v92[3] = 0u;
              v92[4] = 0u;
              v92[1] = 0u;
              v92[2] = 0u;
              *v92 = 0u;
              v93 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 64) + 40) == 0;
              v94 = *(_QWORD *)(*(_QWORD *)(a1 + 1520) + 288);
              v95 = *(int8x16_t **)(a1 + 1096);
              v96 = (float64x2_t)vdupq_n_s64(0x4176E36000000000uLL);
              v97 = (int8x16_t)vdivq_f64(vmulq_f64(*(float64x2_t *)(v94 + 200 + 40 * *(unsigned int *)(v94 + 192)), v96), v96);
              v98 = vdup_n_s32(*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 64) + 40) == 0);
              v99.i64[0] = v98.u32[0];
              v99.i64[1] = v98.u32[1];
              *v95 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v99, 0x3FuLL)), v97, vrev64q_s8(v97));
              v100 = *(_QWORD *)(v94 + 200 + 40 * *(unsigned int *)(v94 + 192) + 16);
              v101 = *a2;
              v102 = bswap64(v100);
              v103 = bswap32(*a2);
              if (v93)
              {
                v104 = 3;
              }
              else
              {
                v100 = v102;
                v104 = 50331648;
              }
              if (!v93)
                v101 = v103;
              v95[1].i64[0] = v100;
              v95[1].i32[2] = v101;
              v95[9].i32[2] = v104;
              v95[13].i32[2] = v104;
              v95[17].i32[2] = v104;
              OSMemoryBarrier();
              *(_BYTE *)(a1 + 1300) = 1;
              HALS_IOContext_Legacy_Impl::StartTapOutput((HALS_IOContext_Legacy_Impl *)a1);
              HALB_IOThread::PostStateChange(v8, 1735354734);
              HALS_IOContext_Legacy_Impl::SendIsRunningNotifications((HALS_Object **)a1);
              v105 = (AMCP::Log::Scope_Registry *)HALB_IOThread::HasBeenStopped(v8);
              if ((_DWORD)v105)
              {
                AMCP::Log::Scope_Registry::get(v105);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v272, "com.apple.coreaudio", "AMCP");
                v106 = *(caulk::concurrent::messenger **)(v272 + 8);
                LOBYTE(v261[0]) = 0;
                v107 = pthread_self();
                v108 = pthread_mach_thread_np(v107);
                v109 = HALB_IOThread::HasBeenStopped(v8);
                LODWORD(buf.mSampleTime) = v108;
                buf.mHostTime = (UInt64)"HALS_IOContext_Legacy_Impl.cpp";
                LODWORD(buf.mRateScalar) = 1809;
                BYTE4(buf.mRateScalar) = v109;
                BYTE5(buf.mRateScalar) = *((_BYTE *)a2 + 249);
                caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>(v106, v261, (__int128 *)&buf);
LABEL_190:
                HasBeenStopped = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v272);
                goto LABEL_191;
              }
              if (*(_QWORD *)(a1 + 1520))
              {
                v156 = (AMCP::Log::Scope_Registry *)HALS_IOContext::WaitForClientToBeginTransport(*(HALS_IOContext **)(a1 + 24));
                if ((v156 & 1) == 0)
                {
                  AMCP::Log::Scope_Registry::get(v156);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v272, "com.apple.coreaudio", "AMCP");
                  v166 = *(caulk::concurrent::messenger **)(v272 + 8);
                  LOBYTE(v261[0]) = 16;
                  v167 = pthread_self();
                  v168 = pthread_mach_thread_np(v167);
                  v169 = HALB_IOThread::HasBeenStopped(v8);
                  LODWORD(buf.mSampleTime) = v168;
                  buf.mHostTime = (UInt64)"HALS_IOContext_Legacy_Impl.cpp";
                  LODWORD(buf.mRateScalar) = 1825;
                  BYTE4(buf.mRateScalar) = v169;
                  BYTE5(buf.mRateScalar) = *((_BYTE *)a2 + 249);
                  caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>(v166, v261, (__int128 *)&buf);
                  goto LABEL_190;
                }
                if (*(_QWORD *)(a1 + 1520))
                {
                  HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted((HALS_IOContext_Legacy_Impl *)a1);
                  v157 = *(_QWORD *)(a1 + 1520);
                  v158 = *a2;
                  a2[50] = _CalculateOverloadThresholdSampleAdjustment(*(double *)(v157 + 768), *a2, a2[54]);
                  if (*(_QWORD *)(v157 + 8))
                    v159 = *(double *)(*(_QWORD *)(v157 + 288) + 112);
                  else
                    v159 = 544.217687;
                  *((double *)a2 + 26) = v159 * (double)v158;
                  v180 = (AMCP::Log::Scope_Registry *)HALS_IOContext_Legacy_Impl::ConfigureThreadForRealtimePriority((_opaque_pthread_t **)a1, v158);
                  v181 = (int)v180;
                  if ((_DWORD)v180)
                  {
                    AMCP::Log::Scope_Registry::get(v180);
                    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v272, "com.apple.coreaudio", "AMCP");
                    v249 = *(caulk::concurrent::messenger **)(v272 + 8);
                    LOBYTE(v261[0]) = 16;
                    v250 = pthread_self();
                    v251 = pthread_mach_thread_np(v250);
                    v252 = __error();
                    v253 = strerror(*v252);
                    LODWORD(buf.mSampleTime) = v251;
                    buf.mHostTime = (UInt64)"HALS_IOContext_Legacy_Impl.cpp";
                    LODWORD(buf.mRateScalar) = 1852;
                    HIDWORD(buf.mRateScalar) = v181;
                    buf.mWordClockTime = (UInt64)v253;
                    caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_3,std::tuple<unsigned int,char const*,int,int,char *>>(v249, v261, (__int128 *)&buf);
                    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v272);
                    exception = __cxa_allocate_exception(0x10uLL);
                    *(_QWORD *)exception = &off_1E69A1B30;
                    exception[2] = 1852797029;
                  }
                  OSMemoryBarrier();
                  *(_DWORD *)(a1 + 1304) = 0;
                  *(_QWORD *)(a1 + 1312) = 0;
                  HALS_IOContext_Legacy_Impl::AnchorTime((HALS_IOContext_Legacy_Impl *)a1);
                  v182 = *(_QWORD *)(a1 + 24);
                  v183 = *(unsigned __int8 *)(*(_QWORD *)(v182 + 64) + 40);
                  v184 = *(_QWORD *)(*(_QWORD *)(a1 + 1520) + 288);
                  v185 = v184 + 200;
                  v186 = *(int8x16_t **)(a1 + 1096);
                  v187 = (float64x2_t)vdupq_n_s64(0x4176E36000000000uLL);
                  v188 = (int8x16_t)vdivq_f64(vmulq_f64(*(float64x2_t *)(v184 + 200 + 40 * *(unsigned int *)(v184 + 192)), v187), v187);
                  v189 = vdup_n_s32(*(_BYTE *)(*(_QWORD *)(v182 + 64) + 40) == 0);
                  v190.i64[0] = v189.u32[0];
                  v190.i64[1] = v189.u32[1];
                  *v186 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v190, 0x3FuLL)), v188, vrev64q_s8(v188));
                  v191 = *(_QWORD *)(v184 + 200 + 40 * *(unsigned int *)(v184 + 192) + 16);
                  if (v183)
                  {
                    v191 = bswap64(v191);
                    v192 = bswap64(*(_QWORD *)(v185 + 40 * *(unsigned int *)(v184 + 192) + 24));
                    v193 = bswap64(*(_QWORD *)(v185 + 40 * *(unsigned int *)(v184 + 192) + 32));
                    v194 = 50331648;
                  }
                  else
                  {
                    v192 = *(_QWORD *)(v185 + 40 * *(unsigned int *)(v184 + 192) + 24);
                    v193 = *(_QWORD *)(v185 + 40 * *(unsigned int *)(v184 + 192) + 32);
                    v194 = 3;
                  }
                  v186[1].i64[0] = v191;
                  v186[2].i64[0] = v192;
                  v186[2].i64[1] = v193;
                  v186[5].i32[2] = v194;
                  v195 = bswap32(*a2);
                  if (v183)
                    v196 = v195;
                  else
                    v196 = *a2;
                  v186[1].i32[2] = v196;
                  v197 = *(_QWORD *)(v182 + 80);
                  if (v197)
                    (*(void (**)(uint64_t, double))(*(_QWORD *)v197 + 48))(v197, *(float *)(a1 + 1328));
                  HALS_IOContext_Legacy_Impl::GetCurrentTime((HALS_IOClock *)a1, (AudioTimeStamp *)(a2 + 34));
                  HALS_IOContextDescription::UpdateInputStreamVisibility((_QWORD *)(a1 + 1496));
                  v198 = *a2;
                  v267 = 0;
                  v199 = operator new(0x20uLL);
                  *v199 = &off_1E6990110;
                  v199[1] = HALS_IOContext_Legacy_Impl::IOWorkLoop_Engine_BeginIO;
                  v199[2] = a1;
                  *((_DWORD *)v199 + 6) = v198;
                  v267 = v199;
                  *(_QWORD *)&buf.mSampleTime = &off_1E69928C8;
                  HALS_IOContext_Legacy_Impl::engine_apply<FilterIfEngineOnlyNeedsReferenceStream>(a1, (uint64_t)v266, (uint64_t)&buf);
                  v200 = v267;
                  if (v267 == v266)
                  {
                    v201 = 4;
                    v200 = v266;
                  }
                  else
                  {
                    if (!v267)
                      goto LABEL_222;
                    v201 = 5;
                  }
                  (*(void (**)(void))(*v200 + 8 * v201))();
LABEL_222:
                  kdebug_trace();
                  HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(a1, a2);
                  v202 = (AMCP::Log::Scope_Registry *)HALS_IOContext::GetAudioCaptureMode(*(HALS_IOContext **)(a1 + 24));
                  if (!(_DWORD)v202)
                  {
                    v202 = HALS_IOThread::EnableRTSafeSyscallMasks((_opaque_pthread_t **)v8);
                    v203 = (int)v202;
                    if ((_DWORD)v202)
                    {
                      AMCP::Log::Scope_Registry::get(v202);
                      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v272, "com.apple.coreaudio", "AMCP");
                      v204 = *(caulk::concurrent::messenger **)(v272 + 8);
                      LOBYTE(v261[0]) = 16;
                      v205 = pthread_self();
                      v206 = pthread_mach_thread_np(v205);
                      v207 = __error();
                      v208 = strerror(*v207);
                      LODWORD(buf.mSampleTime) = v206;
                      buf.mHostTime = (UInt64)"HALS_IOContext_Legacy_Impl.cpp";
                      LODWORD(buf.mRateScalar) = 1899;
                      HIDWORD(buf.mRateScalar) = v203;
                      buf.mWordClockTime = (UInt64)v208;
                      caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,int,char *>>(v204, v261, (__int128 *)&buf);
                      v202 = (AMCP::Log::Scope_Registry *)std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v272);
                    }
                  }
                  AMCP::Log::Scope_Registry::get(v202);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v272, "com.apple.coreaudio", "AMCP");
                  v209 = *(caulk::concurrent::messenger **)(v272 + 8);
                  LOBYTE(v261[0]) = 2;
                  v210 = pthread_self();
                  LODWORD(buf.mSampleTime) = pthread_mach_thread_np(v210);
                  buf.mHostTime = (UInt64)"HALS_IOContext_Legacy_Impl.cpp";
                  LODWORD(buf.mRateScalar) = 1908;
                  BYTE4(buf.mRateScalar) = *((_BYTE *)a2 + 249);
                  caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_6,std::tuple<unsigned int,char const*,int,BOOL>>(v209, v261, (__int128 *)&buf);
                  HasBeenStopped = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v272);
                  goto LABEL_238;
                }
                *(_DWORD *)(a1 + 1056) = 1852797029;
                HasBeenStopped = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
                if (!(_DWORD)HasBeenStopped)
                  goto LABEL_191;
                LODWORD(buf.mSampleTime) = 136315394;
                *(_QWORD *)((char *)&buf.mSampleTime + 4) = "HALS_IOContext_Legacy_Impl.cpp";
                WORD2(buf.mHostTime) = 1024;
                *(_DWORD *)((char *)&buf.mHostTime + 6) = 1834;
                v165 = MEMORY[0x1E0C81028];
              }
              else
              {
                *(_DWORD *)(a1 + 1056) = 1852797029;
                HasBeenStopped = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
                if (!(_DWORD)HasBeenStopped)
                {
LABEL_191:
                  *((_BYTE *)a2 + 249) = 1;
                  goto LABEL_239;
                }
                LODWORD(buf.mSampleTime) = 136315394;
                *(_QWORD *)((char *)&buf.mSampleTime + 4) = "HALS_IOContext_Legacy_Impl.cpp";
                WORD2(buf.mHostTime) = 1024;
                *(_DWORD *)((char *)&buf.mHostTime + 6) = 1818;
                v165 = MEMORY[0x1E0C81028];
              }
              _os_log_impl(&dword_1B57BA000, v165, OS_LOG_TYPE_ERROR, "%25s:%-5d  After we unlock the lock, we need to check that we still have a master device", (uint8_t *)&buf, 0x12u);
              goto LABEL_191;
            }
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf.mSampleTime) = 136315394;
              *(_QWORD *)((char *)&buf.mSampleTime + 4) = "HALS_IOContext_Legacy_Impl.cpp";
              WORD2(buf.mHostTime) = 1024;
              *(_DWORD *)((char *)&buf.mHostTime + 6) = 1781;
              _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOWorkLoop: Failure to allocate status block\n", (uint8_t *)&buf, 0x12u);
            }
          }
          else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf.mSampleTime) = 136315394;
            *(_QWORD *)((char *)&buf.mSampleTime + 4) = "HALS_IOContext_Legacy_Impl.cpp";
            WORD2(buf.mHostTime) = 1024;
            *(_DWORD *)((char *)&buf.mHostTime + 6) = 1757;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  After we unlock the lock, we need to check that we still have a master device", (uint8_t *)&buf, 0x12u);
          }
          *(_DWORD *)(a1 + 1056) = 1852797029;
          *((_BYTE *)a2 + 249) = 1;
          *(_DWORD *)(a1 + 1488) = HALS_IOPrewarmManager::Stop((_QWORD *)(a1 + 1472), *(_DWORD *)(a1 + 1060));
          HasBeenStopped = (uint64_t)HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted((HALS_IOContext_Legacy_Impl *)a1);
          goto LABEL_238;
        }
        v77 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)&v76->mSampleTime + 8 * v77))();
      goto LABEL_85;
    }
LABEL_229:
    v44 = 1;
    goto LABEL_230;
  }
LABEL_10:
  if ((*(_DWORD *)(a1 + 1384) & 0xFFFFFFFE) == 2)
    goto LABEL_126;
  *(_OWORD *)(a2 + 34) = *(_OWORD *)(a2 + 18);
  *(_OWORD *)(a2 + 38) = *(_OWORD *)(a2 + 22);
  *(_OWORD *)(a2 + 42) = *(_OWORD *)(a2 + 26);
  *(_OWORD *)(a2 + 46) = *(_OWORD *)(a2 + 30);
  if (*(_DWORD *)(a1 + 1304))
  {
    HALS_IOContext_Legacy_Impl::IOWorkLoop_SleepUntilWakeTime((HALS_IOContext_Legacy_Impl *)a1, *((_QWORD *)a2 + 10));
  }
  else
  {
    v52 = *(_QWORD *)(a1 + 1520);
    v53 = 44100.0;
    if (!v52 || !*(_QWORD *)(v52 + 8) || (v53 = *(double *)(v52 + 768), v53 > 0.0))
    {
      v54 = mach_absolute_time();
      LODWORD(v55) = *a2;
      v56 = (double)v55 / v53 * 24000000.0;
      v57 = *((_QWORD *)a2 + 10);
      v58 = v57 >= (uint64_t)v56 ? v57 - (uint64_t)v56 : 0;
      if (v58 > v54)
        HALS_IOContext_Legacy_Impl::IOWorkLoop_SleepUntilWakeTime((HALS_IOContext_Legacy_Impl *)a1, v58);
    }
    if ((HALB_IOThread::HasBeenStopped(v8) & 1) == 0)
    {
      v61 = (char *)operator new(0x110uLL);
      *(_QWORD *)v61 = &off_1E69906E0;
      *((_QWORD *)v61 + 1) = a1;
      v62 = *((_OWORD *)a2 + 13);
      *((_OWORD *)v61 + 13) = *((_OWORD *)a2 + 12);
      *((_OWORD *)v61 + 14) = v62;
      *((_OWORD *)v61 + 15) = *((_OWORD *)a2 + 14);
      *(_OWORD *)(v61 + 250) = *(_OWORD *)((char *)a2 + 234);
      v63 = *((_OWORD *)a2 + 9);
      *((_OWORD *)v61 + 9) = *((_OWORD *)a2 + 8);
      *((_OWORD *)v61 + 10) = v63;
      v64 = *((_OWORD *)a2 + 11);
      *((_OWORD *)v61 + 11) = *((_OWORD *)a2 + 10);
      *((_OWORD *)v61 + 12) = v64;
      v65 = *((_OWORD *)a2 + 5);
      *((_OWORD *)v61 + 5) = *((_OWORD *)a2 + 4);
      *((_OWORD *)v61 + 6) = v65;
      v66 = *((_OWORD *)a2 + 7);
      *((_OWORD *)v61 + 7) = *((_OWORD *)a2 + 6);
      *((_OWORD *)v61 + 8) = v66;
      v67 = *((_OWORD *)a2 + 1);
      *((_OWORD *)v61 + 1) = *(_OWORD *)a2;
      *((_OWORD *)v61 + 2) = v67;
      v68 = *((_OWORD *)a2 + 3);
      *((_OWORD *)v61 + 3) = *((_OWORD *)a2 + 2);
      *((_OWORD *)v61 + 4) = v68;
      buf.mWordClockTime = (UInt64)v61;
      v69 = *((_QWORD *)a2 + 10);
      v70 = mach_absolute_time();
      HALS_IOThread::WorkgroupStart((caulk::mach::os_workgroup_interval_managed **)v8, v70, v69);
      if (!buf.mWordClockTime)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(UInt64))(*(_QWORD *)buf.mWordClockTime + 48))(buf.mWordClockTime);
      HALS_IOThread::WorkgroupFinish(v8);
      v71 = (AudioTimeStamp *)buf.mWordClockTime;
      if ((AudioTimeStamp *)buf.mWordClockTime == &buf)
      {
        v72 = 4;
        v71 = &buf;
      }
      else
      {
        if (!buf.mWordClockTime)
          goto LABEL_111;
        v72 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)&v71->mSampleTime + 8 * v72))();
      goto LABEL_111;
    }
    *((_BYTE *)a2 + 249) = 1;
  }
LABEL_111:
  v110 = *((_QWORD *)a2 + 10);
  v111 = mach_absolute_time();
  v112 = __udivti3();
  if (v111 >= v110)
    v113 = v112;
  else
    v113 = -v112;
  *((_QWORD *)a2 + 30) = v113;
  v272 = 0uLL;
  HALS_System::GetInstance(&buf, 0, (uint64_t *)&v272);
  v114 = (std::__shared_weak_count *)buf.mHostTime;
  v115 = *(unsigned __int8 *)(*(_QWORD *)&buf.mSampleTime + 1472);
  if (buf.mHostTime)
  {
    v116 = (unint64_t *)(buf.mHostTime + 8);
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v118 = (std::__shared_weak_count *)*((_QWORD *)&v272 + 1);
  if (*((_QWORD *)&v272 + 1))
  {
    v119 = (unint64_t *)(*((_QWORD *)&v272 + 1) + 8);
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  if (v115)
    HasBeenStopped = kdebug_trace();
LABEL_126:
  if (!*(_QWORD *)(a1 + 1520))
  {
    *(_DWORD *)(a1 + 1056) = 1852797029;
    v248 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v248 = &off_1E69A1B30;
    v248[2] = 1852797029;
  }
  if (*((_BYTE *)a2 + 249))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)HasBeenStopped);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v121 = *(caulk::concurrent::messenger **)(*(_QWORD *)&buf.mSampleTime + 8);
    v122 = pthread_self();
    v123 = pthread_mach_thread_np(v122);
    v124 = HALB_IOThread::HasBeenStopped(v8);
    v125 = *((_BYTE *)a2 + 249);
    v126 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
    *(_DWORD *)(v126 + 16) = 0;
    *(_BYTE *)(v126 + 20) = 16;
    *(_DWORD *)(v126 + 24) = v123;
    *(_QWORD *)(v126 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
    *(_DWORD *)(v126 + 40) = 2343;
    *(_BYTE *)(v126 + 44) = v124;
    *(_BYTE *)(v126 + 45) = v125;
    *(_QWORD *)v126 = &off_1E6990998;
    *(_QWORD *)(v126 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v121, (caulk::concurrent::message *)v126);
    v127 = (std::__shared_weak_count *)buf.mHostTime;
    if (buf.mHostTime)
    {
      v128 = (unint64_t *)(buf.mHostTime + 8);
      do
        v129 = __ldaxr(v128);
      while (__stlxr(v129 - 1, v128));
      goto LABEL_242;
    }
    return 0;
  }
  v130 = *(_QWORD *)(a1 + 1520);
  if (v130)
  {
    if (*(_QWORD *)(v130 + 8))
    {
      v131 = *(HALS_IOClock **)(v130 + 288);
      if (v131)
        HALS_IOClock::GetCurrentTime(v131, (AudioTimeStamp *)(a2 + 2));
    }
  }
  *(_QWORD *)&v132 = *a2;
  *(_QWORD *)&buf.mSampleTime = &off_1E6991AE8;
  buf.mHostTime = a1;
  buf.mRateScalar = v132;
  buf.mWordClockTime = (UInt64)&buf;
  HALS_IOContext_Legacy_Impl::engine_apply<>(a1, (uint64_t)&buf);
  v133 = (AudioTimeStamp *)buf.mWordClockTime;
  if ((AudioTimeStamp *)buf.mWordClockTime == &buf)
  {
    v134 = 4;
    v133 = &buf;
    goto LABEL_140;
  }
  if (buf.mWordClockTime)
  {
    v134 = 5;
LABEL_140:
    (*(void (**)(void))(*(_QWORD *)&v133->mSampleTime + 8 * v134))();
  }
  ++*(_DWORD *)(a1 + 1304);
  v135 = *a2;
  *(_QWORD *)(a1 + 1312) += v135;
  for (i = *(uint64_t **)(a1 + 1992); i; i = (uint64_t *)*i)
  {
    if (*((_BYTE *)i + 40))
    {
      v137 = i[3];
      v138 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 16);
      *(_QWORD *)&buf.mSampleTime = v137 + 152;
      v139 = std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)(v137 + 152));
      LOBYTE(buf.mHostTime) = v139;
      if (v139)
      {
        HALS_MultiTap::fetch_writer_state((HALS_MultiTap *)&v272, v137, v138);
        if ((_QWORD)v272)
          *(_QWORD *)(v272 + 280) += v135;
        v140 = (std::__shared_weak_count *)*((_QWORD *)&v272 + 1);
        if (*((_QWORD *)&v272 + 1))
        {
          v141 = (unint64_t *)(*((_QWORD *)&v272 + 1) + 8);
          do
            v142 = __ldaxr(v141);
          while (__stlxr(v142 - 1, v141));
          if (!v142)
          {
            ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
            std::__shared_weak_count::__release_weak(v140);
          }
        }
      }
      std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&buf);
    }
  }
  memset(&buf, 0, sizeof(buf));
  buf.mFlags = 3;
  HALS_IOContext_Legacy_Impl::IOWorkLoop_CalculateOverloadTime(a1, *a2, &buf, -1.0);
  *a3 = mach_absolute_time();
  *a4 = buf.mHostTime;
  return *((_BYTE *)a2 + 249) == 0;
}

void sub_1B5B7CDC0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_3,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>(caulk::concurrent::messenger *a1, _BYTE *a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;

  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = &off_1E6990A48;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 20) = *a2;
  v7 = *a3;
  *(_QWORD *)(v6 + 40) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)v6 = &off_1E69909F0;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_3,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_3,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(caulk::concurrent::message *a1)
{
  caulk::concurrent::message *v2;

  v2 = a1;
  caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_3,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform((uint64_t)a1);
  return caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_3,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_1B5B7D568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_3,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_3,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  NSObject **v12;
  _BYTE v13[10];
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v13;
  v3 = *v12;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(unsigned __int8 *)(a1 + 44);
    v11 = *(unsigned __int8 *)(a1 + 45);
    LODWORD(v12) = 67110146;
    HIDWORD(v12) = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    v16 = 1024;
    v17 = v10;
    v18 = 1024;
    v19 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d And error was thrown when getting timestamp - thread hasBeenStopped: %d and shouldExit: %d", (uint8_t *)&v12, 0x24u);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_3,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_3,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::UpdateSoftwareReferenceStreamOnlyEngineState(unsigned int)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdateSoftwareReferenceStreamOnlyEngineState(unsigned int)::$_0>,int ()(HALS_IOEngineInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::UpdateSoftwareReferenceStreamOnlyEngineState(unsigned int)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdateSoftwareReferenceStreamOnlyEngineState(unsigned int)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6991AE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::UpdateSoftwareReferenceStreamOnlyEngineState(unsigned int)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdateSoftwareReferenceStreamOnlyEngineState(unsigned int)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6991AE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::UpdateSoftwareReferenceStreamOnlyEngineState(unsigned int)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdateSoftwareReferenceStreamOnlyEngineState(unsigned int)::$_0>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  HALS_IOClock *v8;
  double v9;
  int v10;
  int v11;
  char v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unsigned int *v21;
  HALS_IOClock *v23;
  double v24;
  int v25;
  int v26;
  char v27;
  int v28;
  __int128 v30;
  Float64 mRateScalar;
  AudioTimeStamp v32;
  AudioTimeStamp v33;
  AudioTimeStamp v34;

  if (*(_BYTE *)(a2 + 748))
  {
    v4 = *(_QWORD *)(a1 + 8);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 320))(a2))
    {
      v5 = atomic_load((unsigned int *)(v4 + 1464));
      if (v5 == 2)
      {
        memset(&v34, 0, sizeof(v34));
        v34.mFlags = 3;
        HALS_IOClock::GetCurrentTime(*(HALS_IOClock **)(a2 + 288), &v34);
        LODWORD(v6) = *(_DWORD *)(a1 + 16);
        if (*(double *)(a2 + 512) > v34.mSampleTime + (double)v6)
          atomic_store(0, (unsigned int *)(v4 + 1464));
      }
    }
    v7 = atomic_load((unsigned int *)(v4 + 1464));
    if (!v7 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 328))(a2))
    {
      v8 = *(HALS_IOClock **)(a2 + 288);
      v9 = *(double *)(a2 + 768);
      v10 = *(_DWORD *)(a2 + 776);
      v11 = *(_DWORD *)(a2 + 780);
      v12 = *(_BYTE *)(a2 + 784);
      v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 376))(*(_QWORD *)(a2 + 8));
      HALS_IOClock::Reset(v8, v9, v10, v11, v12, v13);
      memset(&v34, 0, 24);
      (*(void (**)(_QWORD, _QWORD, AudioTimeStamp *, UInt64 *, Float64 *))(**(_QWORD **)(a2 + 8) + 616))(*(_QWORD *)(a2 + 8), *(unsigned int *)(*(_QWORD *)(v4 + 24) + 16), &v34, &v34.mHostTime, &v34.mRateScalar);
      v14 = *(_QWORD *)(a2 + 288);
      v30 = *(_OWORD *)&v34.mSampleTime;
      mRateScalar = v34.mRateScalar;
      HALS_IOClock::Update(v14, (uint64_t)&v30);
      *(_OWORD *)(a2 + 432) = 0u;
      *(_OWORD *)(a2 + 448) = 0u;
      *(_OWORD *)(a2 + 464) = 0u;
      *(_OWORD *)(a2 + 480) = 0u;
      *(_OWORD *)(a2 + 496) = 0u;
      *(_OWORD *)(a2 + 512) = 0u;
      *(_OWORD *)(a2 + 528) = 0u;
      *(_OWORD *)(a2 + 544) = 0u;
      *(_OWORD *)(a2 + 560) = 0u;
      *(_OWORD *)(a2 + 576) = 0u;
      *(_OWORD *)(a2 + 592) = 0u;
      *(_OWORD *)(a2 + 608) = 0u;
      *(_OWORD *)(a2 + 624) = 0u;
      *(_OWORD *)(a2 + 640) = 0u;
      atomic_store(1u, (unsigned int *)(v4 + 1464));
    }
    v15 = atomic_load((unsigned int *)(v4 + 1464));
    if (v15 == 1 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 320))(a2))
    {
      v16 = *(_QWORD *)(v4 + 1520);
      v17 = *(_OWORD *)(v16 + 376);
      *(_OWORD *)&v34.mSampleTime = *(_OWORD *)(v16 + 360);
      *(_OWORD *)&v34.mRateScalar = v17;
      v18 = *(_OWORD *)(v16 + 408);
      *(_OWORD *)&v34.mSMPTETime.mSubframes = *(_OWORD *)(v16 + 392);
      *(_OWORD *)&v34.mSMPTETime.mHours = v18;
      v34.mSampleTime = v34.mSampleTime + (double)*(uint64_t *)(v16 + 664);
      v34.mFlags = 1;
      memset(&v33, 0, sizeof(v33));
      v33.mFlags = 2;
      HALS_IOClock::TranslateTime(*(_QWORD *)(v16 + 288), &v34, &v33);
      v32.mSampleTime = 0.0;
      memset(&v32.mRateScalar, 0, 48);
      v32.mHostTime = v33.mHostTime;
      v32.mFlags = 1;
      v33.mFlags = 2;
      HALS_IOClock::TranslateTime(*(_QWORD *)(a2 + 288), &v33, &v32);
      v19 = *(_OWORD *)&v32.mRateScalar;
      *(_OWORD *)(a2 + 360) = *(_OWORD *)&v32.mSampleTime;
      *(_OWORD *)(a2 + 376) = v19;
      v20 = *(_OWORD *)&v32.mSMPTETime.mHours;
      *(_OWORD *)(a2 + 392) = *(_OWORD *)&v32.mSMPTETime.mSubframes;
      *(_OWORD *)(a2 + 408) = v20;
      *(_QWORD *)(a2 + 664) = 0;
      atomic_store(2u, (unsigned int *)(v4 + 1464));
    }
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 328))(a2) & 1) == 0)
    {
      v21 = (unsigned int *)(v4 + 1464);
      if (atomic_load(v21))
      {
        v23 = *(HALS_IOClock **)(a2 + 288);
        v24 = *(double *)(a2 + 768);
        v25 = *(_DWORD *)(a2 + 776);
        v26 = *(_DWORD *)(a2 + 780);
        v27 = *(_BYTE *)(a2 + 784);
        v28 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 376))(*(_QWORD *)(a2 + 8));
        HALS_IOClock::Reset(v23, v24, v25, v26, v27, v28);
        atomic_store(0, v21);
      }
    }
  }
  return 0;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::UpdateSoftwareReferenceStreamOnlyEngineState(unsigned int)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdateSoftwareReferenceStreamOnlyEngineState(unsigned int)::$_0>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl44UpdateSoftwareReferenceStreamOnlyEngineStateEjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::UpdateSoftwareReferenceStreamOnlyEngineState(unsigned int)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdateSoftwareReferenceStreamOnlyEngineState(unsigned int)::$_0>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_2,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_2,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(unsigned __int8 *)(a1 + 44);
    v11 = *(unsigned __int8 *)(a1 + 45);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Sleep failed - thread hasBeenStopped: %d and shouldExit: %d", buf, 0x24u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_2,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_2,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(unsigned __int8 *)(a1 + 44);
    v11 = *(unsigned __int8 *)(a1 + 45);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Initialize failed - thread hasBeenStopped: %d and shouldExit: %d", buf, 0x24u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_0,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_0,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v15;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(unsigned __int8 *)(a1 + 44);
    v11 = *(unsigned __int8 *)(a1 + 45);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Exitted GetInterval early - thread hasBeenStopped: %d and shouldExit: %d", buf, 0x24u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_0,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_0,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

uint64_t ___ZN26HALS_IOContext_Legacy_ImplC2EP14HALS_IOContextN4AMCP11Power_StateENSt3__110shared_ptrINS2_7Utility14Dispatch_QueueEEE_block_invoke(uint64_t a1, uint64_t *a2, UInt64 *a3)
{
  UInt64 v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 1520);
  if (!v6)
  {
    result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    v8 = 136315394;
    v9 = "HALS_IOContext_Legacy_Impl.cpp";
    v10 = 1024;
    v11 = 2398;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOThreadEntryTop: there is no master engine info", (uint8_t *)&v8, 0x12u);
    v6 = *(_QWORD *)(v5 + 1520);
    if (!v6)
      return 0;
  }
  if (*(_QWORD *)(v6 + 8))
    goto LABEL_3;
  result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
  if (!(_DWORD)result)
    return result;
  v8 = 136315394;
  v9 = "HALS_IOContext_Legacy_Impl.cpp";
  v10 = 1024;
  v11 = 2401;
  _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOThreadEntryTop: there is no master engine", (uint8_t *)&v8, 0x12u);
  if (!*(_QWORD *)(*(_QWORD *)(v5 + 1520) + 8))
    return 0;
LABEL_3:
  if (HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(v5, (unsigned int *)(v5 + 40), a2, a3))
  {
    if ((*(_DWORD *)(v5 + 1384) & 0xFFFFFFFE) == 2)
      return 2;
    else
      return 1;
  }
  else
  {
    result = 0;
    *(_BYTE *)(v5 + 289) = 1;
  }
  return result;
}

void sub_1B5B7E168(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  uint64_t v9;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(a9) = 136315394;
      *(_QWORD *)((char *)&a9 + 4) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 2425;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOThreadEntryTop: terminating due to exception", (uint8_t *)&a9, 0x12u);
    }
    *(_BYTE *)(v9 + 1300) = 0;
    __cxa_end_catch();
    JUMPOUT(0x1B5B7E138);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN26HALS_IOContext_Legacy_ImplC2EP14HALS_IOContextN4AMCP11Power_StateENSt3__110shared_ptrINS2_7Utility14Dispatch_QueueEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  AMCP::Log::Scope_Registry *HasBeenStopped;
  caulk::concurrent::messenger *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  char v14;
  char v15;
  uint64_t v16;
  std::__shared_weak_count *mHostTime;
  unint64_t *v18;
  unint64_t v19;
  AMCP::Log::Scope_Registry *v20;
  const BOOL *v21;
  int v22;
  caulk::concurrent::messenger *v23;
  _opaque_pthread_t *v24;
  mach_port_t v25;
  int *v26;
  char *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  AudioTimeStamp *mWordClockTime;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  AMCP::Log::Scope_Registry *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  int v45;
  AudioTimeStamp *p_buf;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  HALS_Object *v64;
  HALS_ObjectMap *v65;
  HALB_Mutex *v66;
  uint64_t v67;
  unsigned __int8 *j;
  unsigned __int8 v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  HALS_ObjectMap *v93;
  uint64_t v94;
  _BOOL4 v95;
  HALS_Object *v96;
  uint64_t v97;
  int v98;
  NSObject *v99;
  const char *v100;
  uint32_t v101;
  int v102;
  AMCP::Log::Scope_Registry *v103;
  caulk::concurrent::messenger *v104;
  _opaque_pthread_t *v105;
  mach_port_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  caulk::concurrent::messenger *v112;
  _opaque_pthread_t *v113;
  mach_port_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t *i;
  uint64_t v120;
  unsigned int v121;
  _BOOL4 v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  HALS_IOClock *v127;
  uint64_t v128;
  AMCP::Log::Scope_Registry *v129;
  int v130;
  caulk::concurrent::messenger *v131;
  _opaque_pthread_t *v132;
  mach_port_t v133;
  int *v134;
  char *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  int8x16_t *v143;
  float64x2_t v144;
  int8x16_t v145;
  int32x2_t v146;
  int64x2_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  uint64_t v156;
  unint64_t *p_shared_owners;
  unint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  AudioTimeStamp v161;
  uint64_t v162;
  void *v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  void *v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  void *v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  void *v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  void *v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  void *__p;
  std::__shared_weak_count *v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  void (**v193)(FilterIfEngineOnlyNeedsReferenceStream *__hidden);
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  AudioTimeStamp buf;
  _QWORD v199[3];
  AMCP::Log::Scope_Registry *v200;
  _BYTE v201[18];
  __int16 v202;
  int v203;
  _BYTE v204[20];
  __int16 v205;
  int v206;
  _QWORD v207[3];
  _QWORD *v208;
  _QWORD v209[3];
  _QWORD *v210;
  _BYTE v211[24];
  _BYTE *v212;
  _BYTE v213[24];
  _BYTE *v214;
  _BYTE v215[24];
  _BYTE *v216;
  _BYTE v217[24];
  _BYTE *v218;
  _BYTE v219[24];
  _BYTE *v220;
  _BYTE v221[24];
  _BYTE *v222;
  _QWORD v223[3];
  _QWORD *v224;
  uint64_t v225;

  v225 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 1520);
  if (!v2)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_25;
    LODWORD(buf.mSampleTime) = 136315394;
    *(_QWORD *)((char *)&buf.mSampleTime + 4) = "HALS_IOContext_Legacy_Impl.cpp";
    WORD2(buf.mHostTime) = 1024;
    *(_DWORD *)((char *)&buf.mHostTime + 6) = 2436;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOThreadEntryBottom: there is no master engine info", (uint8_t *)&buf, 0x12u);
    v2 = *(_QWORD *)(v1 + 1520);
    if (!v2)
      goto LABEL_25;
  }
  if (!*(_QWORD *)(v2 + 8))
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_25;
    LODWORD(buf.mSampleTime) = 136315394;
    *(_QWORD *)((char *)&buf.mSampleTime + 4) = "HALS_IOContext_Legacy_Impl.cpp";
    WORD2(buf.mHostTime) = 1024;
    *(_DWORD *)((char *)&buf.mHostTime + 6) = 2439;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOThreadEntryBottom: there is no master engine", (uint8_t *)&buf, 0x12u);
    if (!*(_QWORD *)(*(_QWORD *)(v1 + 1520) + 8))
      goto LABEL_25;
  }
  v3 = *(_DWORD *)(v1 + 1384);
  if (v3 == 3)
  {
    v4 = (unsigned int *)(v1 + 40);
  }
  else
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 216);
    if (*(_BYTE *)v5 || *(_BYTE *)(v5 + 1))
    {
      v6 = *(_OWORD *)(v1 + 616);
      v7 = *(_OWORD *)(v1 + 632);
      v8 = *(_QWORD *)(v5 + 8);
      *(_QWORD *)(v8 + 232) = *(_QWORD *)(v1 + 608);
      *(_OWORD *)(v8 + 240) = v6;
      *(_OWORD *)(v8 + 256) = v7;
      HALS_IOContext::OverloadReporter::SendAnyPendingOverloadReports((HALS_IOContext::OverloadReporter *)v5);
      v3 = *(_DWORD *)(v1 + 1384);
    }
    v4 = (unsigned int *)(v1 + 40);
    if (v3 == 4)
    {
      *(_DWORD *)(v1 + 1384) = 0;
      *(_DWORD *)(v1 + 264) = 0;
      v9 = *(_QWORD *)(v1 + 1416);
      if (v9)
      {
        LODWORD(v161.mSampleTime) = 0;
        (*(void (**)(uint64_t, AudioTimeStamp *))(*(_QWORD *)v9 + 48))(v9, &v161);
      }
    }
  }
  HasBeenStopped = (AMCP::Log::Scope_Registry *)HALB_IOThread::HasBeenStopped((HALB_IOThread *)(v1 + 312));
  if ((HasBeenStopped & 1) != 0 || *(_BYTE *)(v1 + 289))
  {
    AMCP::Log::Scope_Registry::get(HasBeenStopped);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v11 = *(caulk::concurrent::messenger **)(*(_QWORD *)&buf.mSampleTime + 8);
    v12 = pthread_self();
    v13 = pthread_mach_thread_np(v12);
    v14 = HALB_IOThread::HasBeenStopped((HALB_IOThread *)(v1 + 312));
    v15 = *(_BYTE *)(v1 + 289);
    v16 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
    *(_DWORD *)(v16 + 16) = 0;
    *(_BYTE *)(v16 + 20) = 0;
    *(_DWORD *)(v16 + 24) = v13;
    *(_QWORD *)(v16 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
    *(_DWORD *)(v16 + 40) = 2236;
    *(_BYTE *)(v16 + 44) = v14;
    *(_BYTE *)(v16 + 45) = v15;
    *(_QWORD *)v16 = &off_1E69907E0;
    *(_QWORD *)(v16 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v11, (caulk::concurrent::message *)v16);
    mHostTime = (std::__shared_weak_count *)buf.mHostTime;
    if (buf.mHostTime)
    {
      v18 = (unint64_t *)(buf.mHostTime + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))mHostTime->__on_zero_shared)(mHostTime);
        std::__shared_weak_count::__release_weak(mHostTime);
      }
    }
    *(_BYTE *)(v1 + 289) = 1;
    goto LABEL_25;
  }
  kdebug_trace();
  if ((HALS_IOContext_Legacy_Impl::UpdateTime((HALS_IOContext_Legacy_Impl *)v1) || *(_BYTE *)(v1 + 1301))
    && *(_DWORD *)(v1 + 1384) != 3)
  {
    v34 = (_QWORD *)MEMORY[0x1E0DDB688];
    if (!*(_BYTE *)(v1 + 1301))
    {
LABEL_187:
      kdebug_trace();
      HALS_IOContext_Legacy_Impl::AnchorTime((HALS_IOContext_Legacy_Impl *)v1);
      *(_QWORD *)(v1 + 1312) = 0;
      for (i = *(uint64_t **)(v1 + 1992); i; i = (uint64_t *)*i)
      {
        if (*((_BYTE *)i + 40))
        {
          v120 = i[3];
          v121 = *(_DWORD *)(*(_QWORD *)(v1 + 24) + 16);
          *(_QWORD *)&buf.mSampleTime = v120 + 152;
          v122 = std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)(v120 + 152));
          LOBYTE(buf.mHostTime) = v122;
          if (v122)
          {
            HALS_MultiTap::fetch_writer_state((HALS_MultiTap *)v201, v120, v121);
            if (*(_QWORD *)v201)
              *(_QWORD *)(*(_QWORD *)v201 + 280) = 0;
            v123 = *(std::__shared_weak_count **)&v201[8];
            if (*(_QWORD *)&v201[8])
            {
              v124 = (unint64_t *)(*(_QWORD *)&v201[8] + 8);
              do
                v125 = __ldaxr(v124);
              while (__stlxr(v125 - 1, v124));
              if (!v125)
              {
                ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                std::__shared_weak_count::__release_weak(v123);
              }
            }
          }
          std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&buf);
        }
      }
      HALS_IOContext_Legacy_Impl::AnchorIO((HALS_IOContext_Legacy_Impl *)v1, 0);
      v126 = *(_QWORD *)(v1 + 1520);
      if (v126)
      {
        if (*(_QWORD *)(v126 + 8))
        {
          v127 = *(HALS_IOClock **)(v126 + 288);
          if (v127)
            HALS_IOClock::GetCurrentTime(v127, (AudioTimeStamp *)(v1 + 48));
        }
      }
      *(_DWORD *)(v1 + 1384) = 4;
      v128 = *(_QWORD *)(v1 + 1416);
      if (v128)
      {
        LODWORD(v199[0]) = 4;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v128 + 48))(v128, v199);
      }
      v129 = (AMCP::Log::Scope_Registry *)HALS_IOContext_Legacy_Impl::ConfigureThreadForRealtimePriority((_opaque_pthread_t **)v1, *(_DWORD *)(v1 + 256));
      v130 = (int)v129;
      if ((_DWORD)v129)
      {
        AMCP::Log::Scope_Registry::get(v129);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
        v131 = *(caulk::concurrent::messenger **)(*(_QWORD *)&buf.mSampleTime + 8);
        v132 = pthread_self();
        v133 = pthread_mach_thread_np(v132);
        v134 = __error();
        v135 = strerror(*v134);
        v136 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v34 + 16))(*v34, 56, 8);
        *(_DWORD *)(v136 + 16) = 0;
        *(_BYTE *)(v136 + 20) = 16;
        *(_DWORD *)(v136 + 24) = v133;
        *(_QWORD *)(v136 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
        *(_DWORD *)(v136 + 40) = 2281;
        *(_DWORD *)(v136 + 44) = v130;
        *(_QWORD *)(v136 + 48) = v135;
        *(_QWORD *)v136 = &off_1E6990890;
        *(_QWORD *)(v136 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v131, (caulk::concurrent::message *)v136);
        v137 = (std::__shared_weak_count *)buf.mHostTime;
        if (buf.mHostTime)
        {
          v138 = (unint64_t *)(buf.mHostTime + 8);
          do
            v139 = __ldaxr(v138);
          while (__stlxr(v139 - 1, v138));
          if (!v139)
          {
            ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
            std::__shared_weak_count::__release_weak(v137);
          }
        }
      }
      atomic_store(0, (unsigned int *)(v1 + 1464));
      goto LABEL_212;
    }
    v35 = *(unsigned int *)(*(_QWORD *)(v1 + 24) + 16);
    v199[0] = &off_1E6990C88;
    v199[1] = HALS_IOContext_Legacy_Impl::ResetTimeline_Helper;
    v199[2] = v35;
    v200 = (AMCP::Log::Scope_Registry *)v199;
    *(_QWORD *)&buf.mSampleTime = &off_1E6992948;
    HALS_IOContext_Legacy_Impl::engine_apply<FilterInactiveReferenceStreamOnlyEngines>(v1, (uint64_t)v199, (uint64_t)&buf);
    v36 = v200;
    if (v200 == (AMCP::Log::Scope_Registry *)v199)
    {
      v37 = 4;
      v36 = (AMCP::Log::Scope_Registry *)v199;
    }
    else
    {
      if (!v200)
      {
LABEL_182:
        *(_BYTE *)(v1 + 1301) = 0;
        AMCP::Log::Scope_Registry::get(v36);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
        v112 = *(caulk::concurrent::messenger **)(*(_QWORD *)&buf.mSampleTime + 8);
        v113 = pthread_self();
        v114 = pthread_mach_thread_np(v113);
        v115 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v34 + 16))(*v34, 48, 8);
        *(_DWORD *)(v115 + 16) = 0;
        *(_BYTE *)(v115 + 20) = 0;
        *(_DWORD *)(v115 + 24) = v114;
        *(_QWORD *)(v115 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
        *(_DWORD *)(v115 + 40) = 2252;
        *(_QWORD *)v115 = &off_1E6990838;
        *(_QWORD *)(v115 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v112, (caulk::concurrent::message *)v115);
        v116 = (std::__shared_weak_count *)buf.mHostTime;
        if (buf.mHostTime)
        {
          v117 = (unint64_t *)(buf.mHostTime + 8);
          do
            v118 = __ldaxr(v117);
          while (__stlxr(v118 - 1, v117));
          if (!v118)
          {
            ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
            std::__shared_weak_count::__release_weak(v116);
          }
        }
        goto LABEL_187;
      }
      v37 = 5;
    }
    v36 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(void))(*(_QWORD *)v36 + 8 * v37))();
    goto LABEL_182;
  }
LABEL_212:
  v140 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 64) + 40);
  v141 = *(_QWORD *)(*(_QWORD *)(v1 + 1520) + 288);
  v142 = v141 + 200;
  v143 = *(int8x16_t **)(v1 + 1096);
  v144 = (float64x2_t)vdupq_n_s64(0x4176E36000000000uLL);
  v145 = (int8x16_t)vdivq_f64(vmulq_f64(*(float64x2_t *)(v141 + 200 + 40 * *(unsigned int *)(v141 + 192)), v144), v144);
  v146 = vdup_n_s32(*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 64) + 40) == 0);
  v147.i64[0] = v146.u32[0];
  v147.i64[1] = v146.u32[1];
  *v143 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v147, 0x3FuLL)), v145, vrev64q_s8(v145));
  v148 = *(_QWORD *)(v141 + 200 + 40 * *(unsigned int *)(v141 + 192) + 16);
  if (v140)
  {
    v148 = bswap64(v148);
    v149 = bswap64(*(_QWORD *)(v142 + 40 * *(unsigned int *)(v141 + 192) + 24));
    v150 = bswap64(*(_QWORD *)(v142 + 40 * *(unsigned int *)(v141 + 192) + 32));
    v151 = 50331648;
  }
  else
  {
    v149 = *(_QWORD *)(v142 + 40 * *(unsigned int *)(v141 + 192) + 24);
    v150 = *(_QWORD *)(v142 + 40 * *(unsigned int *)(v141 + 192) + 32);
    v151 = 3;
  }
  v143[1].i64[0] = v148;
  v143[2].i64[0] = v149;
  v143[2].i64[1] = v150;
  v143[5].i32[2] = v151;
  v152 = bswap32(*v4);
  if (v140)
    v153 = v152;
  else
    v153 = *v4;
  v143[1].i32[2] = v153;
  OSMemoryBarrier();
  v154 = *(_QWORD *)(v1 + 24);
  v156 = *(_QWORD *)(v154 + 80);
  v155 = *(std::__shared_weak_count **)(v154 + 88);
  if (v155)
  {
    p_shared_owners = (unint64_t *)&v155->__shared_owners_;
    do
      v158 = __ldxr(p_shared_owners);
    while (__stxr(v158 + 1, p_shared_owners));
  }
  if (v156)
  {
    memset(&buf, 0, sizeof(buf));
    buf.mFlags = 3;
    HALS_IOContext_Legacy_Impl::IOWorkLoop_CalculateOverloadTime(v1, *(_DWORD *)(v1 + 40), &buf, -1.0);
    v161 = buf;
    (*(void (**)(uint64_t, AudioTimeStamp *))(*(_QWORD *)v156 + 56))(v156, &v161);
  }
  if (v155)
  {
    v159 = (unint64_t *)&v155->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  *(_DWORD *)(v1 + 260) = HALS_IOContext_Legacy_Impl::PerformIO(v1, v1 + 48, *(unsigned int *)(v1 + 40), 0, *(_DWORD *)(v1 + 264), (uint64_t *)(v1 + 272));
  if (!*(_BYTE *)(v1 + 289))
    HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(v1, v4);
LABEL_25:
  if (!*(_BYTE *)(v1 + 289) && !HALB_IOThread::HasBeenStopped((HALB_IOThread *)(v1 + 312)))
    return *(unsigned __int8 *)(v1 + 289);
  v20 = HALS_IOThread::ClearAllSyscallMasks((_opaque_pthread_t **)(v1 + 312));
  v22 = (int)v20;
  if ((_DWORD)v20)
  {
    AMCP::Log::Scope_Registry::get(v20);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v23 = *(caulk::concurrent::messenger **)(*(_QWORD *)&buf.mSampleTime + 8);
    v24 = pthread_self();
    v25 = pthread_mach_thread_np(v24);
    v26 = __error();
    v27 = strerror(*v26);
    v28 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 56, 8);
    *(_DWORD *)(v28 + 16) = 0;
    *(_BYTE *)(v28 + 20) = 16;
    *(_DWORD *)(v28 + 24) = v25;
    *(_QWORD *)(v28 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
    *(_DWORD *)(v28 + 40) = 1917;
    *(_DWORD *)(v28 + 44) = v22;
    *(_QWORD *)(v28 + 48) = v27;
    *(_QWORD *)v28 = &off_1E6990328;
    *(_QWORD *)(v28 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v23, (caulk::concurrent::message *)v28);
    v29 = (std::__shared_weak_count *)buf.mHostTime;
    if (buf.mHostTime)
    {
      v30 = (unint64_t *)(buf.mHostTime + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  if (*(_BYTE *)(v1 + 288))
  {
    if ((AMCP::Feature_Flags::use_mcp_coloring_mixer(0, v21) & 1) != 0)
      goto LABEL_52;
    v209[0] = &off_1E6990380;
    v209[1] = v1;
    v210 = v209;
    *(_QWORD *)&buf.mSampleTime = &off_1E698F708;
    buf.mHostTime = (UInt64)v209;
    buf.mWordClockTime = (UInt64)&buf;
    HALS_IOContextDescription::ApplyToOutput<>(v1 + 1496, (uint64_t)&buf);
    mWordClockTime = (AudioTimeStamp *)buf.mWordClockTime;
    if ((AudioTimeStamp *)buf.mWordClockTime == &buf)
    {
      v33 = 4;
      mWordClockTime = &buf;
    }
    else
    {
      if (!buf.mWordClockTime)
      {
LABEL_47:
        v38 = v210;
        if (v210 == v209)
        {
          v39 = 4;
          v38 = v209;
          goto LABEL_51;
        }
        if (v210)
        {
          v39 = 5;
LABEL_51:
          (*(void (**)(void))(*v38 + 8 * v39))();
        }
LABEL_52:
        *(_BYTE *)(v1 + 1300) = 0;
        HALS_IOContext::OverloadReporter::SendAnyPendingOverloadReports(*(HALS_IOContext::OverloadReporter **)(*(_QWORD *)(v1 + 24) + 216));
        (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v1 + 24) + 96) + 704))(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 96));
        kdebug_trace();
        goto LABEL_53;
      }
      v33 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)&mWordClockTime->mSampleTime + 8 * v33))();
    goto LABEL_47;
  }
LABEL_53:
  HALB_IOThread::ConfigureThreadForNormalPriority((_opaque_pthread_t **)(v1 + 312));
  v40 = *(_QWORD *)(v1 + 1088);
  if (!v40)
    goto LABEL_59;
  v162 = v1;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v40 + 48))(v40, &v162);
  v41 = *(_QWORD **)(v1 + 1088);
  *(_QWORD *)(v1 + 1088) = 0;
  if (v41 == (_QWORD *)(v1 + 1064))
  {
    v42 = 4;
    v41 = (_QWORD *)(v1 + 1064);
  }
  else
  {
    if (!v41)
      goto LABEL_59;
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_59:
  *(_BYTE *)(v1 + 1300) = 0;
  atomic_store(0, (unsigned int *)(v1 + 1464));
  v207[0] = &off_1E698FAC0;
  v207[1] = HALS_IOContext_Legacy_Impl::IOWorkLoop_Engine_EndIO;
  v207[2] = v1;
  v208 = v207;
  HALS_IOContext_Legacy_Impl::engine_apply<>(v1, (uint64_t)v207);
  v43 = v208;
  if (v208 == v207)
  {
    v44 = 4;
    v43 = v207;
  }
  else
  {
    if (!v208)
      goto LABEL_64;
    v44 = 5;
  }
  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_64:
  HALB_IOThread::PostStateChange((HALB_IOThread *)(v1 + 312), 1718185577);
  v45 = *(_DWORD *)(*(_QWORD *)(v1 + 24) + 16);
  *(_QWORD *)&buf.mSampleTime = &off_1E6990F38;
  LODWORD(buf.mHostTime) = v45;
  buf.mWordClockTime = (UInt64)&buf;
  HALS_IOContext_Legacy_Impl::engine_apply<>(v1, (uint64_t)&buf);
  p_buf = (AudioTimeStamp *)buf.mWordClockTime;
  if ((AudioTimeStamp *)buf.mWordClockTime == &buf)
  {
    v47 = 4;
    p_buf = &buf;
  }
  else
  {
    if (!buf.mWordClockTime)
      goto LABEL_69;
    v47 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)&p_buf->mSampleTime + 8 * v47))();
LABEL_69:
  kdebug_trace();
  v194 = 0;
  v195 = 0;
  v196 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v194, *(const void **)(v1 + 1432), *(_QWORD *)(v1 + 1440), (uint64_t)(*(_QWORD *)(v1 + 1440) - *(_QWORD *)(v1 + 1432)) >> 2);
  v197 = v1;
  v193 = &off_1E69928C8;
  v189 = 0;
  v190 = 0;
  __p = 0;
  v48 = v194;
  v49 = v195;
  v50 = (v195 - (uint64_t)v194) >> 2;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v194, v195, v50);
  v191 = v1;
  v192 = 1;
  std::function<int ()(HALS_IOEngineInfo &)>::function<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,void>((uint64_t)v221, (uint64_t)&__p);
  HALS_IOContext_Legacy_Impl::engine_apply<FilterIfEngineOnlyNeedsReferenceStream>(v1, (uint64_t)v221, (uint64_t)&v193);
  v51 = v222;
  if (v222 == v221)
  {
    v52 = 4;
    v51 = v221;
  }
  else
  {
    if (!v222)
      goto LABEL_74;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_74:
  if (__p)
  {
    v189 = (std::__shared_weak_count *)__p;
    operator delete(__p);
  }
  v183 = 0;
  v184 = 0;
  v185 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v183, v48, v49, v50);
  v186 = v1;
  v187 = 2;
  std::function<int ()(HALS_IOEngineInfo &)>::function<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,void>((uint64_t)v219, (uint64_t)&v183);
  HALS_IOContext_Legacy_Impl::engine_apply<FilterIfEngineOnlyNeedsReferenceStream>(v1, (uint64_t)v219, (uint64_t)&v193);
  v53 = v220;
  if (v220 == v219)
  {
    v54 = 4;
    v53 = v219;
  }
  else
  {
    if (!v220)
      goto LABEL_81;
    v54 = 5;
  }
  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_81:
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  v178 = 0;
  v179 = 0;
  v180 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v178, v48, v49, v50);
  v181 = v1;
  v182 = 3;
  std::function<int ()(HALS_IOEngineInfo &)>::function<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,void>((uint64_t)v217, (uint64_t)&v178);
  HALS_IOContext_Legacy_Impl::engine_apply<FilterIfEngineOnlyNeedsReferenceStream>(v1, (uint64_t)v217, (uint64_t)&v193);
  v55 = v218;
  if (v218 == v217)
  {
    v56 = 4;
    v55 = v217;
  }
  else
  {
    if (!v218)
      goto LABEL_88;
    v56 = 5;
  }
  (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_88:
  if (v178)
  {
    v179 = v178;
    operator delete(v178);
  }
  v173 = 0;
  v174 = 0;
  v175 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v173, v48, v49, v50);
  v176 = v1;
  v177 = 4;
  std::function<int ()(HALS_IOEngineInfo &)>::function<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,void>((uint64_t)v215, (uint64_t)&v173);
  HALS_IOContext_Legacy_Impl::engine_apply<FilterIfEngineOnlyNeedsReferenceStream>(v1, (uint64_t)v215, (uint64_t)&v193);
  v57 = v216;
  if (v216 == v215)
  {
    v58 = 4;
    v57 = v215;
  }
  else
  {
    if (!v216)
      goto LABEL_95;
    v58 = 5;
  }
  (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_95:
  if (v173)
  {
    v174 = v173;
    operator delete(v173);
  }
  v168 = 0;
  v169 = 0;
  v170 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v168, v48, v49, v50);
  v171 = v1;
  v172 = 5;
  std::function<int ()(HALS_IOEngineInfo &)>::function<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,void>((uint64_t)v213, (uint64_t)&v168);
  HALS_IOContext_Legacy_Impl::engine_apply<FilterIfEngineOnlyNeedsReferenceStream>(v1, (uint64_t)v213, (uint64_t)&v193);
  v59 = v214;
  if (v214 == v213)
  {
    v60 = 4;
    v59 = v213;
  }
  else
  {
    if (!v214)
      goto LABEL_102;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_102:
  if (v168)
  {
    v169 = v168;
    operator delete(v168);
  }
  v163 = 0;
  v164 = 0;
  v165 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v163, v48, v49, v50);
  v166 = v1;
  v167 = 6;
  std::function<int ()(HALS_IOEngineInfo &)>::function<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,void>((uint64_t)v211, (uint64_t)&v163);
  HALS_IOContext_Legacy_Impl::engine_apply<FilterIfEngineOnlyNeedsReferenceStream>(v1, (uint64_t)v211, (uint64_t)&v193);
  v61 = v212;
  if (v212 == v211)
  {
    v62 = 4;
    v61 = v211;
  }
  else
  {
    if (!v212)
      goto LABEL_109;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_109:
  if (v163)
  {
    v164 = v163;
    operator delete(v163);
  }
  HALS_IOContext_Legacy_Impl::get_devices_that_are_not_reference_stream_only((HALS_IOContext_Legacy_Impl *)v201, v1);
  v63 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**(unsigned int **)(*(_QWORD *)(v1 + 24) + 64));
  v65 = (HALS_ObjectMap *)v63;
  if (v63)
  {
    *(_QWORD *)&buf.mSampleTime = MEMORY[0x1E0C809B0];
    buf.mHostTime = 0x40000000;
    *(_QWORD *)&buf.mRateScalar = ___ZN11HALS_Client23DevicesStoppedByContextERKNSt3__16vectorIjNS0_9allocatorIjEEEES6__block_invoke;
    buf.mWordClockTime = (UInt64)&__block_descriptor_tmp_24_2068;
    *(_QWORD *)&buf.mSMPTETime.mSubframes = v63;
    *(_QWORD *)&buf.mSMPTETime.mType = v201;
    *(_QWORD *)&buf.mSMPTETime.mHours = v204;
    v66 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 56))(v63);
    HALB_CommandGate::ExecuteCommand(v66, (uint64_t)&buf);
  }
  HALS_ObjectMap::ReleaseObject(v65, v64);
  if (*(_QWORD *)v204)
  {
    *(_QWORD *)&v204[8] = *(_QWORD *)v204;
    operator delete(*(void **)v204);
  }
  if (*(_QWORD *)v201)
  {
    *(_QWORD *)&v201[8] = *(_QWORD *)v201;
    operator delete(*(void **)v201);
  }
  v67 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 80);
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 128))(v67);
  for (j = *(unsigned __int8 **)(v1 + 1992); j; j = *(unsigned __int8 **)j)
  {
    if (j[40])
    {
      v69 = atomic_load(j + 42);
      if ((v69 & 1) != 0)
      {
        HALS_MultiTap::writer_stop(*((HALS_MultiTap **)j + 3), *(_DWORD *)(*(_QWORD *)(v1 + 24) + 16));
        atomic_store(0, j + 42);
        atomic_store(0, j + 41);
      }
    }
  }
  *(_QWORD *)v201 = &off_1E6996C48;
  *(_QWORD *)&v201[8] = HALS_IOProcessorFactory::free_input_processor;
  *(_QWORD *)v204 = v201;
  HALS_IOContextDescription::ApplyToInput(v1 + 1496, (uint64_t)v201);
  v70 = *(_QWORD **)v204;
  if (*(_BYTE **)v204 == v201)
  {
    v71 = 4;
    v70 = v201;
  }
  else
  {
    if (!*(_QWORD *)v204)
      goto LABEL_129;
    v71 = 5;
  }
  (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_129:
  v223[0] = &off_1E6996D08;
  v223[1] = HALS_IOProcessorFactory::free_output_processor;
  v224 = v223;
  HALS_IOContextDescription::ApplyToOutput<>(v1 + 1496, (uint64_t)v223);
  v72 = v224;
  if (v224 == v223)
  {
    v73 = 4;
    v72 = v223;
  }
  else
  {
    if (!v224)
      goto LABEL_134;
    v73 = 5;
  }
  (*(void (**)(void))(*v72 + 8 * v73))();
LABEL_134:
  HALS_IOContextDescription::UnregisterBuffers((HALS_IOContextDescription *)(v1 + 1496));
  v74 = *(uint64_t **)(v1 + 1720);
  *(_QWORD *)v201 = &off_1E6979800;
  *(_QWORD *)v204 = v201;
  VisitableVector<HALS_IOStreamInfo>::apply<>(v74, (uint64_t)v201);
  v75 = *(_QWORD **)v204;
  if (*(_BYTE **)v204 == v201)
  {
    v76 = 4;
    v75 = v201;
  }
  else
  {
    if (!*(_QWORD *)v204)
      goto LABEL_139;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_139:
  v77 = *(uint64_t **)(v1 + 1728);
  v223[0] = &off_1E6979880;
  v224 = v223;
  HALS_IOStreamGrid::apply_to_streams(v77, (uint64_t)v223);
  v78 = v224;
  if (v224 == v223)
  {
    v79 = 4;
    v78 = v223;
  }
  else
  {
    if (!v224)
      goto LABEL_144;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_144:
  v80 = *(_QWORD *)(v1 + 1704);
  if (v80)
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
  *(_QWORD *)(v1 + 1704) = 0;
  *(_QWORD *)(v1 + 1096) = 0;
  if (v194)
    operator delete(v194);
  *(_QWORD *)v201 = &off_1E6991038;
  *(_QWORD *)v204 = v201;
  __p = &off_1E6996540;
  v189 = (std::__shared_weak_count *)(v1 + 1496);
  HALS_IOContextDescription::ApplyToInput<HALS_IOContextDescription::ActiveInputsOnly>(v1 + 1496, (uint64_t)v201, (uint64_t)&__p);
  v81 = *(_QWORD **)v204;
  if (*(_BYTE **)v204 == v201)
  {
    v82 = 4;
    v81 = v201;
  }
  else
  {
    if (!*(_QWORD *)v204)
      goto LABEL_153;
    v82 = 5;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_153:
  *(_QWORD *)(v1 + 1440) = *(_QWORD *)(v1 + 1432);
  kdebug_trace();
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v83 = *(_DWORD *)(*(_QWORD *)(v1 + 24) + 16);
    v84 = *(_QWORD *)(v1 + 1312);
    *(_DWORD *)v201 = 136315906;
    *(_QWORD *)&v201[4] = "HALS_IOContext_Legacy_Impl.cpp";
    *(_WORD *)&v201[12] = 1024;
    *(_DWORD *)&v201[14] = 1984;
    v202 = 1024;
    v203 = v83;
    *(_WORD *)v204 = 2048;
    *(_QWORD *)&v204[2] = v84;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  IO Stopped Context %u after %lld frames.", v201, 0x22u);
  }
  HALS_IOContext_Legacy_Impl::SendIsRunningNotifications((HALS_Object **)v1);
  v85 = *(_QWORD *)(v1 + 24);
  v86 = *(_DWORD *)(v85 + 16);
  if (!*(_BYTE *)(*(_QWORD *)(v85 + 64) + 44))
    HALS_IOContext_Legacy_Impl::ReleasePowerAssertions((HALS_IOContext_Legacy_Impl *)v1);
  __p = 0;
  v189 = 0;
  HALS_System::GetInstance(v201, 0, (uint64_t *)&__p);
  HALS_System::SetIOContextIsRunning(*(HALS_System **)v201, v86, 0);
  v87 = *(std::__shared_weak_count **)&v201[8];
  if (*(_QWORD *)&v201[8])
  {
    v88 = (unint64_t *)(*(_QWORD *)&v201[8] + 8);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = v189;
  if (v189)
  {
    v91 = (unint64_t *)&v189->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  kdebug_trace();
  v93 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v1 + 1512));
  v94 = *(_QWORD *)(v1 + 1520);
  v95 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
  if (v93 && v94)
  {
    if (v95)
    {
      v97 = (*(uint64_t (**)(HALS_ObjectMap *))(*(_QWORD *)v93 + 216))(v93);
      v98 = *(_DWORD *)(v1 + 1056);
      *(_DWORD *)v201 = 136316418;
      *(_QWORD *)&v201[4] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&v201[12] = 1024;
      *(_DWORD *)&v201[14] = 2008;
      v202 = 1024;
      v203 = v86;
      *(_WORD *)v204 = 2082;
      *(_QWORD *)&v204[2] = v94 + 32;
      *(_WORD *)&v204[10] = 2082;
      *(_QWORD *)&v204[12] = v97;
      v205 = 1024;
      v206 = v98;
      v99 = MEMORY[0x1E0C81028];
      v100 = "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit: %u %{public}s (%{public}s): stopping with error %d";
      v101 = 50;
LABEL_173:
      _os_log_impl(&dword_1B57BA000, v99, OS_LOG_TYPE_DEFAULT, v100, v201, v101);
    }
  }
  else if (v95)
  {
    v102 = *(_DWORD *)(v1 + 1056);
    *(_DWORD *)v201 = 136315906;
    *(_QWORD *)&v201[4] = "HALS_IOContext_Legacy_Impl.cpp";
    *(_WORD *)&v201[12] = 1024;
    *(_DWORD *)&v201[14] = 2012;
    v202 = 1024;
    v203 = v86;
    *(_WORD *)v204 = 1024;
    *(_DWORD *)&v204[2] = v102;
    v99 = MEMORY[0x1E0C81028];
    v100 = "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit: %u: stopping with error %d";
    v101 = 30;
    goto LABEL_173;
  }
  HALS_ObjectMap::ReleaseObject(v93, v96);
  AMCP::Log::Scope_Registry::get(v103);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v201, "com.apple.coreaudio", "AMCP");
  v104 = *(caulk::concurrent::messenger **)(*(_QWORD *)v201 + 8);
  v105 = pthread_self();
  v106 = pthread_mach_thread_np(v105);
  v107 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
  *(_DWORD *)(v107 + 16) = 0;
  *(_BYTE *)(v107 + 20) = 2;
  *(_DWORD *)(v107 + 24) = v106;
  *(_QWORD *)(v107 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
  *(_DWORD *)(v107 + 40) = 2017;
  *(_QWORD *)v107 = &off_1E6990400;
  *(_QWORD *)(v107 + 8) = 0;
  caulk::concurrent::messenger::enqueue(v104, (caulk::concurrent::message *)v107);
  v108 = *(std::__shared_weak_count **)&v201[8];
  if (*(_QWORD *)&v201[8])
  {
    v109 = (unint64_t *)(*(_QWORD *)&v201[8] + 8);
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  return *(unsigned __int8 *)(v1 + 289);
}

void sub_1B5B7F6C8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t buf,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t v64;
  _QWORD *v66;
  uint64_t v67;

  if (!a2)
    _Unwind_Resume(a1);
  v66 = (_QWORD *)a64;
  if ((char *)a64 == &a61)
  {
    v67 = 4;
    v66 = &a61;
  }
  else
  {
    if (!a64)
    {
LABEL_7:
      __cxa_begin_catch(a1);
      *(_BYTE *)(v64 + 289) = 1;
      __cxa_end_catch();
      JUMPOUT(0x1B5B7F6ACLL);
    }
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
  goto LABEL_7;
}

void sub_1B5B7F92C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  if (a2)
  {
    std::pair<std::vector<unsigned int>,std::vector<unsigned int>>::~pair((uint64_t)&a65);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B5B7EC68);
  }
  JUMPOUT(0x1B5B7F8BCLL);
}

void sub_1B5B7F938(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B5B7F8BCLL);
  JUMPOUT(0x1B5B7FBBCLL);
}

void sub_1B5B7F944(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49)
{
  unint64_t *v49;
  uint64_t v50;

  if (!a2)
    JUMPOUT(0x1B5B7F8BCLL);
  v49 = (unint64_t *)STACK[0x250];
  if ((unint64_t *)STACK[0x250] == &STACK[0x238])
  {
    v50 = 4;
    v49 = &STACK[0x238];
  }
  else
  {
    if (!v49)
      goto LABEL_7;
    v50 = 5;
  }
  (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_7:
  if (__p)
    operator delete(__p);
  if (a49)
    operator delete(a49);
  JUMPOUT(0x1B5B7FCDCLL);
}

void sub_1B5B7FB40(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,char *a56)
{
  char *v56;
  uint64_t v57;

  if (!a2)
    JUMPOUT(0x1B5B7F8BCLL);
  v56 = a56;
  if (a56 == &a53)
  {
    v57 = 4;
    v56 = &a53;
  }
  else
  {
    if (!a56)
      goto LABEL_8;
    v57 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v56 + 8 * v57))();
LABEL_8:
  JUMPOUT(0x1B5B7FCDCLL);
}

void sub_1B5B7FB64(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;

  if (a2)
  {
    if ((char *)STACK[0x210] != &a72)
      JUMPOUT(0x1B5B7FB7CLL);
    JUMPOUT(0x1B5B7FB90);
  }
  JUMPOUT(0x1B5B7F8BCLL);
}

void sub_1B5B7FBA4(uint64_t a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  if ((_DWORD)a2)
  {
    HALS_ObjectMap::ReleaseObject(v2, a2);
    JUMPOUT(0x1B5B7FBB4);
  }
  JUMPOUT(0x1B5B7F8BCLL);
}

void sub_1B5B7FBD4(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1B5B7FBDCLL);
  JUMPOUT(0x1B5B7F8BCLL);
}

void sub_1B5B7FBEC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,std::__shared_weak_count *a54)
{
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;

  if (a2)
  {
    v57 = a54;
    if (a54)
    {
      p_shared_owners = (unint64_t *)&a54->__shared_owners_;
      do
        v59 = __ldaxr(p_shared_owners);
      while (__stlxr(v59 - 1, p_shared_owners));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      a53 = 136315394;
      *(_QWORD *)(v55 + 4) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD2(a54) = 1024;
      *(_DWORD *)(v55 + 14) = 2458;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOThreadEntryBottom: terminating due to exception", (uint8_t *)&a53, 0x12u);
    }
    *(_BYTE *)(v54 + 1300) = 0;
    *(_BYTE *)(v54 + 289) = 1;
    __cxa_end_catch();
    JUMPOUT(0x1B5B7E498);
  }
  JUMPOUT(0x1B5B7F8BCLL);
}

void sub_1B5B7FCAC(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1B5B7FCCCLL);
  JUMPOUT(0x1B5B7F8BCLL);
}

void sub_1B5B7FCC0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  if (a2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B5B7F1FCLL);
  }
  JUMPOUT(0x1B5B7F8BCLL);
}

void sub_1B5B7FCD4(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1B5B7FCDCLL);
  JUMPOUT(0x1B5B7F8BCLL);
}

IOPMAssertionID **std::default_delete<HALS_IOContext_PowerAssertions>::operator()[abi:ne180100](IOPMAssertionID **result)
{
  IOPMAssertionID **v1;

  if (result)
  {
    v1 = result;
    std::unique_ptr<HALB_PowerAssertion>::reset[abi:ne180100](result + 1, 0);
    std::unique_ptr<HALB_PowerAssertion>::reset[abi:ne180100](v1, 0);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

void std::__shared_ptr_pointer<HALS_IOContext_PowerAssertions  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

IOPMAssertionID **std::__shared_ptr_pointer<HALS_IOContext_PowerAssertions  *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<HALS_IOContext_PowerAssertions>::operator()[abi:ne180100](*(IOPMAssertionID ***)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<HALS_IOContext_PowerAssertions  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__114default_deleteI30HALS_IOContext_PowerAssertionsEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

__CFString *AMCP::HAL::pack_property_data(int a1, unsigned int a2, CFStringRef *a3)
{
  __CFString *result;
  void *v4;
  unint64_t v5;
  __CFString *v6;
  CFIndex Length;
  uint64_t v8;
  uint64_t v9;
  CFStringRef v10;
  const __CFString *v11;
  CFIndex v12;
  __int16 v13;
  void *__p;
  _BYTE *v15;
  CFRange v16;
  CFRange v17;

  switch(a1)
  {
    case 1:
    case 5:
    case 18:
      v4 = (void *)MEMORY[0x1E0C99D58];
      v5 = a2;
      goto LABEL_16;
    case 2:
    case 3:
    case 7:
    case 10:
      if (a2 < 4)
        goto LABEL_3;
      v4 = (void *)MEMORY[0x1E0C99D58];
      v5 = 4;
      goto LABEL_16;
    case 4:
    case 11:
      v4 = (void *)MEMORY[0x1E0C99D58];
      v5 = a2 & 0xFFFFFFFC;
      goto LABEL_16;
    case 6:
      v6 = (__CFString *)*a3;
      if (!*a3)
        goto LABEL_18;
      Length = CFStringGetLength(*a3);
      v13 = 0;
      std::vector<unsigned short>::vector(&__p, Length, &v13);
      v16.length = (v15 - (_BYTE *)__p) >> 1;
      v16.location = 0;
      CFStringGetCharacters(v6, v16, (UniChar *)__p);
      objc_msgSend(MEMORY[0x1E0C99D58], "dataWithBytes:length:", __p, v15 - (_BYTE *)__p);
      v8 = objc_claimAutoreleasedReturnValue();
      goto LABEL_26;
    case 8:
      if (a2 < 8)
        goto LABEL_3;
      v4 = (void *)MEMORY[0x1E0C99D58];
      v5 = 8;
      goto LABEL_16;
    case 9:
    case 17:
      v4 = (void *)MEMORY[0x1E0C99D58];
      v5 = a2 & 0xFFFFFFF8;
      goto LABEL_16;
    case 12:
      if (a2 < 0x28)
        goto LABEL_3;
      v4 = (void *)MEMORY[0x1E0C99D58];
      v5 = 40;
LABEL_16:
      objc_msgSend(v4, "dataWithBytes:length:", a3, v5);
      v9 = objc_claimAutoreleasedReturnValue();
      goto LABEL_17;
    case 13:
      v4 = (void *)MEMORY[0x1E0C99D58];
      v5 = 40 * (a2 / 0x28uLL);
      goto LABEL_16;
    case 14:
      v4 = (void *)MEMORY[0x1E0C99D58];
      v5 = 56 * (a2 / 0x38uLL);
      goto LABEL_16;
    case 15:
      if (a2 < 8)
        goto LABEL_3;
      v10 = *a3;
      if (!v10)
        goto LABEL_3;
      objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v10, 100, 0, 0);
      v9 = objc_claimAutoreleasedReturnValue();
LABEL_17:
      v6 = (__CFString *)v9;
      goto LABEL_18;
    case 16:
      if (a2 < 8 || !*a3)
        goto LABEL_3;
      v11 = CFURLGetString((CFURLRef)*a3);
      v12 = CFStringGetLength(v11);
      v13 = 0;
      std::vector<unsigned short>::vector(&__p, v12, &v13);
      v17.length = (v15 - (_BYTE *)__p) >> 1;
      v17.location = 0;
      CFStringGetCharacters(v11, v17, (UniChar *)__p);
      objc_msgSend(MEMORY[0x1E0C99D58], "dataWithBytes:length:", __p, v15 - (_BYTE *)__p);
      v8 = objc_claimAutoreleasedReturnValue();
LABEL_26:
      v6 = (__CFString *)v8;
      if (__p)
      {
        v15 = __p;
        operator delete(__p);
      }
LABEL_18:
      result = v6;
      break;
    default:
LABEL_3:
      result = (__CFString *)0;
      break;
  }
  return result;
}

uint64_t AMCP::HAL::unpack_property_data(void *a1, int a2, unsigned int *a3, _QWORD *a4)
{
  uint64_t v7;
  id v8;
  void *v9;
  size_t v10;
  id v11;
  id v12;
  unint64_t v13;
  unsigned int v14;
  id v15;
  id v16;
  unsigned int v17;
  unsigned int v18;
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  unsigned int v24;
  unsigned int v25;
  id v26;
  id v27;
  unsigned int v28;
  unsigned int v29;
  id v30;
  unsigned int v31;
  unsigned int v32;
  id v33;
  id v34;
  CFStringRef v35;
  unsigned int v36;
  unsigned int v37;
  CFStringRef URLString;

  v7 = 2003329396;
  v8 = a1;
  v9 = v8;
  v10 = *a3;
  switch(a2)
  {
    case 1:
    case 5:
    case 18:
      v11 = v8;
      v12 = v11;
      if (!v11)
        goto LABEL_74;
      if (!a4)
      {
        v7 = 0;
        *a3 = objc_msgSend(v11, "length");
        goto LABEL_74;
      }
      v13 = *a3;
      if (objc_msgSend(v11, "length") > v13)
        goto LABEL_59;
      v14 = objc_msgSend(v12, "length");
      *a3 = v14;
      objc_msgSend(v12, "getBytes:length:", a4, v14);
      goto LABEL_71;
    case 2:
      v15 = v8;
      v12 = v15;
      if (!v15)
        goto LABEL_74;
      if (!a4)
        goto LABEL_60;
      if (*a3 >= 4)
        goto LABEL_26;
      goto LABEL_59;
    case 3:
    case 10:
      v15 = v8;
      v12 = v15;
      if (!v15)
        goto LABEL_74;
      if (!a4)
        goto LABEL_60;
      if (*a3 >= 4)
        goto LABEL_26;
      goto LABEL_59;
    case 4:
    case 11:
      v16 = v8;
      v12 = v16;
      if (!a4)
      {
        v7 = 0;
        v36 = objc_msgSend(v16, "length") & 0xFFFFFFFC;
        goto LABEL_73;
      }
      if (*a3 - 1 < 3)
        goto LABEL_59;
      v17 = objc_msgSend(v16, "length");
      v18 = *a3;
      if (*a3 >= v17)
        v18 = v17;
      *a3 = v18 & 0xFFFFFFFC;
      objc_msgSend(v12, "getBytes:length:", a4);
      goto LABEL_71;
    case 6:
      v19 = v8;
      v12 = v19;
      if (!v19)
        goto LABEL_74;
      if (!a4)
        goto LABEL_61;
      if (*a3 < 8)
        goto LABEL_59;
      *a3 = 8;
      v20 = objc_retainAutorelease(v19);
      v21 = (uint64_t)CFStringCreateWithCharacters(0, (const UniChar *)objc_msgSend(v20, "bytes"), (unint64_t)objc_msgSend(v20, "length") >> 1);
LABEL_52:
      v7 = 0;
      *a4 = v21;
      goto LABEL_74;
    case 7:
      v15 = v8;
      v12 = v15;
      if (!v15)
        goto LABEL_74;
      if (!a4)
      {
LABEL_60:
        v7 = 0;
        v36 = 4;
        goto LABEL_73;
      }
      if (*a3 < 4)
        goto LABEL_59;
LABEL_26:
      *a3 = 4;
      objc_msgSend(v15, "getBytes:length:", a4, 4);
      goto LABEL_71;
    case 8:
      v22 = v8;
      v12 = v22;
      if (!v22)
        goto LABEL_74;
      if (!a4)
      {
LABEL_61:
        v7 = 0;
        v36 = 8;
        goto LABEL_73;
      }
      if (*a3 < 8)
        goto LABEL_59;
      *a3 = 8;
      objc_msgSend(v22, "getBytes:length:", a4, 8);
      goto LABEL_71;
    case 9:
      v23 = v8;
      v12 = v23;
      if (!a4)
        goto LABEL_67;
      if (*a3 - 1 < 7)
        goto LABEL_59;
      v24 = objc_msgSend(v23, "length");
      v25 = *a3;
      if (*a3 >= v24)
        v25 = v24;
      goto LABEL_70;
    case 12:
      v26 = v8;
      v12 = v26;
      if (!v26)
        goto LABEL_74;
      if (!a4)
      {
        v7 = 0;
        v36 = 40;
        goto LABEL_73;
      }
      if (*a3 < 0x28)
        goto LABEL_59;
      *a3 = 40;
      objc_msgSend(v26, "getBytes:length:", a4, 40);
      goto LABEL_71;
    case 13:
      v27 = v8;
      v12 = v27;
      if (!a4)
      {
        v7 = 0;
        v36 = 40 * ((objc_msgSend(v27, "length") & 0xFFFFFFF8) / 0x28);
        goto LABEL_73;
      }
      if (*a3 - 1 < 0x27)
        goto LABEL_59;
      v28 = objc_msgSend(v27, "length");
      v29 = *a3;
      if (*a3 >= v28)
        v29 = v28;
      *a3 = 40 * (v29 / 0x28);
      objc_msgSend(v12, "getBytes:length:", a4);
      goto LABEL_71;
    case 14:
      v30 = v8;
      v12 = v30;
      if (!a4)
      {
        v7 = 0;
        v36 = 56 * (objc_msgSend(v30, "length") / 0x38);
        goto LABEL_73;
      }
      if (*a3 - 1 < 0x37)
        goto LABEL_59;
      v31 = objc_msgSend(v30, "length");
      v32 = *a3;
      if (*a3 >= v31)
        v32 = v31;
      *a3 = 56 * (v32 / 0x38);
      objc_msgSend(v12, "getBytes:length:", a4);
      goto LABEL_71;
    case 15:
      v12 = v8;
      if (a4 && *a3 < 8)
        goto LABEL_59;
      *a3 = 8;
      objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", v12, 0, 0, 0);
      v21 = objc_claimAutoreleasedReturnValue();
      goto LABEL_52;
    case 16:
      v33 = v8;
      v12 = v33;
      if (!a4)
        goto LABEL_61;
      if (*a3 != 8)
        goto LABEL_59;
      *a3 = 8;
      v34 = objc_retainAutorelease(v33);
      v35 = CFStringCreateWithCharacters(0, (const UniChar *)objc_msgSend(v34, "bytes"), (unint64_t)objc_msgSend(v34, "length") >> 1);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&URLString, v35);
      *a4 = CFURLCreateWithString(0, URLString, 0);
      if (URLString)
        CFRelease(URLString);
      goto LABEL_71;
    case 17:
      v23 = v8;
      v12 = v23;
      if (a4)
      {
        if (*a3 - 1 >= 7)
        {
          v37 = objc_msgSend(v23, "length");
          v25 = *a3;
          if (*a3 >= v37)
            v25 = v37;
LABEL_70:
          *a3 = v25 & 0xFFFFFFF8;
          objc_msgSend(v12, "getBytes:length:", a4);
LABEL_71:
          v7 = 0;
        }
        else
        {
LABEL_59:
          v7 = 561211770;
        }
      }
      else
      {
LABEL_67:
        v7 = 0;
        v36 = objc_msgSend(v23, "length") & 0xFFFFFFF8;
LABEL_73:
        *a3 = v36;
      }
LABEL_74:

      if ((_DWORD)v7)
      {
LABEL_75:
        bzero(a4, v10);
        *a3 = 0;
      }

      return v7;
    default:
      goto LABEL_75;
  }
}

void sub_1B5B8054C(void *a1)
{
  void *v1;

  __clang_call_terminate(a1);
}

uint64_t HALS_ClockDevice::GetCommandGate(HALS_ClockDevice *this)
{
  return *((_QWORD *)this + 10);
}

{
  return *((_QWORD *)this + 10);
}

uint64_t HALS_ClockDevice::GetMIGDispatchQueue(HALS_ClockDevice *this)
{
  return *((_QWORD *)this + 11);
}

{
  return *((_QWORD *)this + 11);
}

uint64_t HALS_ClockDevice::HasProperty(uint64_t a1, uint64_t a2, int *a3)
{
  int v3;
  uint64_t result;
  int v5;

  v3 = *a3;
  result = 1;
  if (*a3 <= 1819569762)
  {
    if (v3 <= 1668575851)
    {
      if (v3 != 1650682995 && v3 != 1668047219 && v3 != 1668049764)
        return 0;
      return result;
    }
    if (v3 > 1735354733)
    {
      if (v3 == 1735354734)
        return result;
      v5 = 1818850926;
    }
    else
    {
      if (v3 == 1668575852)
        return result;
      v5 = 1668639076;
    }
  }
  else if (v3 > 1870098019)
  {
    if (v3 > 1953653101)
    {
      if (v3 == 1953653102)
        return result;
      v5 = 1969841184;
    }
    else
    {
      if (v3 == 1870098020)
        return result;
      v5 = 1937007734;
    }
  }
  else if (v3 > 1853059699)
  {
    if (v3 == 1853059700)
      return result;
    v5 = 1869638759;
  }
  else
  {
    if (v3 == 1819569763)
      return result;
    v5 = 1853059619;
  }
  if (v3 != v5)
    return 0;
  return result;
}

uint64_t HALS_ClockDevice::IsPropertySettable(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v4;
  BOOL v6;
  int v7;

  result = 0;
  v4 = *a3;
  if (*a3 <= 1819569762)
  {
    if (v4 > 1735354733)
    {
      v6 = v4 == 1735354734;
      v7 = 1818850926;
    }
    else
    {
      v6 = v4 == 1668049764;
      v7 = 1668639076;
    }
  }
  else
  {
    if (v4 > 1853059699)
    {
      if (v4 != 1969841184 && v4 != 1953653102)
      {
        if (v4 == 1853059700)
          return 1;
        return HALS_Object::IsPropertySettable(0, a2, a3);
      }
      return result;
    }
    v6 = v4 == 1819569763;
    v7 = 1853059619;
  }
  if (!v6 && v4 != v7)
    return HALS_Object::IsPropertySettable(0, a2, a3);
  return result;
}

uint64_t HALS_ClockDevice::GetPropertyDataSize(uint64_t a1, uint64_t a2, int *a3)
{
  int v3;
  uint64_t result;
  int v5;
  int v7;

  v3 = *a3;
  result = 8;
  if (*a3 > 1819569762)
  {
    if (v3 > 1853059699)
    {
      if (v3 != 1853059700 && v3 != 1969841184)
      {
        v5 = 1953653102;
LABEL_19:
        if (v3 == v5)
          return 4;
        return HALS_Object::GetPropertyDataSize(8, a2, a3);
      }
      return result;
    }
    if (v3 == 1819569763)
      return 4;
    v7 = 1853059619;
LABEL_17:
    if (v3 == v7)
      return 0;
    return HALS_Object::GetPropertyDataSize(8, a2, a3);
  }
  if (v3 <= 1668639075)
  {
    if (v3 == 1668049764)
      return 4;
    v7 = 1668575852;
    goto LABEL_17;
  }
  if (v3 != 1668639076)
  {
    if (v3 != 1735354734)
    {
      v5 = 1818850926;
      goto LABEL_19;
    }
    return 4;
  }
  return result;
}

CFDictionaryRef HALS_ClockDevice::GetPropertyData(CFDictionaryRef this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, uint64_t *a6, unsigned int a7, const void *a8, HALS_Client *a9)
{
  signed int mSelector;
  int v12;
  unsigned int v13;
  NSObject *v14;
  const char *v15;
  _DWORD *exception;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1819569762)
  {
    if (mSelector > 1853059699)
    {
      if (mSelector == 1853059700)
      {
        if (a4 <= 7)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_46;
          v17 = 136315394;
          v18 = "HALS_ClockDevice.cpp";
          v19 = 1024;
          v20 = 346;
          v14 = MEMORY[0x1E0C81028];
          v15 = "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioClockDevicePropertyNominalSampleRate";
          goto LABEL_45;
        }
        *a6 = 0;
        goto LABEL_22;
      }
      if (mSelector == 1953653102)
      {
        if (a4 <= 3)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_46;
          v17 = 136315394;
          v18 = "HALS_ClockDevice.cpp";
          v19 = 1024;
          v20 = 283;
          v14 = MEMORY[0x1E0C81028];
          v15 = "%25s:%-5d  HALS_ClockDevice::GetPropertyData: bad property data size for kAudioClockDevicePropertyTransportType";
          goto LABEL_45;
        }
        goto LABEL_33;
      }
      if (mSelector != 1969841184)
        return (CFDictionaryRef)HALS_Object::GetPropertyData((uint64_t)this, a2, (int *)a3, a4, (int *)a5, a6);
LABEL_12:
      if (a4 <= 7)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_46;
        v17 = 136315394;
        v18 = "HALS_ClockDevice.cpp";
        v19 = 1024;
        v20 = 274;
        v14 = MEMORY[0x1E0C81028];
        v15 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioClockDevicePropertyDeviceUID";
        goto LABEL_45;
      }
      this = PropertyListDeepImmutableCopy(*((const __CFString **)this + 12));
      *a6 = (uint64_t)this;
LABEL_22:
      v13 = 8;
LABEL_35:
      *a5 = v13;
      return this;
    }
    if (mSelector != 1819569763)
    {
      v12 = 1853059619;
LABEL_18:
      if (mSelector == v12)
      {
        *a5 = 0;
        return this;
      }
      return (CFDictionaryRef)HALS_Object::GetPropertyData((uint64_t)this, a2, (int *)a3, a4, (int *)a5, a6);
    }
    if (a4 <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_46;
      v17 = 136315394;
      v18 = "HALS_ClockDevice.cpp";
      v19 = 1024;
      v20 = 319;
      v14 = MEMORY[0x1E0C81028];
      v15 = "%25s:%-5d  HALS_ClockDevice::GetPropertyData: bad property data size for kAudioClockDevicePropertyLatency";
      goto LABEL_45;
    }
LABEL_33:
    *(_DWORD *)a6 = 0;
    goto LABEL_34;
  }
  if (mSelector <= 1668639075)
  {
    if (mSelector != 1668049764)
    {
      v12 = 1668575852;
      goto LABEL_18;
    }
    if (a4 <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_46;
      v17 = 136315394;
      v18 = "HALS_ClockDevice.cpp";
      v19 = 1024;
      v20 = 292;
      v14 = MEMORY[0x1E0C81028];
      v15 = "%25s:%-5d  HALS_ClockDevice::GetPropertyData: bad property data size for kAudioClockDevicePropertyClockDomain";
      goto LABEL_45;
    }
    goto LABEL_33;
  }
  switch(mSelector)
  {
    case 1668639076:
      goto LABEL_12;
    case 1735354734:
      if (a4 <= 3)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_46;
        v17 = 136315394;
        v18 = "HALS_ClockDevice.cpp";
        v19 = 1024;
        v20 = 310;
        v14 = MEMORY[0x1E0C81028];
        v15 = "%25s:%-5d  HALS_ClockDevice::GetPropertyData: bad property data size for kAudioClockDevicePropertyDeviceIsRunning";
        goto LABEL_45;
      }
      goto LABEL_33;
    case 1818850926:
      if (a4 > 3)
      {
        *(_DWORD *)a6 = 1;
LABEL_34:
        v13 = 4;
        goto LABEL_35;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
LABEL_46:
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69A1B30;
        exception[2] = 561211770;
      }
      v17 = 136315394;
      v18 = "HALS_ClockDevice.cpp";
      v19 = 1024;
      v20 = 301;
      v14 = MEMORY[0x1E0C81028];
      v15 = "%25s:%-5d  HALS_ClockDevice::GetPropertyData: bad property data size for kAudioClockDevicePropertyDeviceIsAlive";
LABEL_45:
      _os_log_impl(&dword_1B57BA000, v14, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&v17, 0x12u);
      goto LABEL_46;
  }
  return (CFDictionaryRef)HALS_Object::GetPropertyData((uint64_t)this, a2, (int *)a3, a4, (int *)a5, a6);
}

void HALS_ClockDevice::HALS_ClockDevice(HALS_ClockDevice *this, HALS_DeviceManager *a2, const __CFString *a3, uint64_t a4, HALS_Object *a5)
{
  uint64_t v7;
  unsigned int *v8;
  HALB_Mutex **v9;
  CFStringRef *v10;
  int v11;
  uint64_t v12;
  __CFString *v13;
  unsigned int *v14;
  int v15;
  char *v16;
  size_t v17;
  HALB_Mutex *v18;
  uint64_t v19;
  _DWORD *exception;
  char v22[4];
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  HALS_Object::HALS_Object(this, 1633905771, 0, (uint64_t)a2, a5);
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 48) = v7 + 56;
  *(_BYTE *)(v7 + 72) = 0;
  *(_QWORD *)v7 = off_1E6991CB8;
  *(_QWORD *)(v7 + 80) = 0;
  v9 = (HALB_Mutex **)(v7 + 80);
  *(_QWORD *)(v7 + 96) = a3;
  v10 = (CFStringRef *)(v7 + 96);
  *(_QWORD *)(v7 + 88) = 0;
  *(_BYTE *)(v7 + 104) = 1;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 128) = 0u;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  *(_OWORD *)(v7 + 176) = 0u;
  *(_OWORD *)(v7 + 192) = 0u;
  *(_OWORD *)(v7 + 208) = 0u;
  *(_OWORD *)(v7 + 224) = 0u;
  *(_OWORD *)(v7 + 240) = 0u;
  *(_OWORD *)(v7 + 256) = 0u;
  *(_OWORD *)(v7 + 272) = 0u;
  *(_OWORD *)(v7 + 288) = 0u;
  *(_OWORD *)(v7 + 304) = 0u;
  *(_OWORD *)(v7 + 320) = 0u;
  *(_OWORD *)(v7 + 336) = 0u;
  *(_OWORD *)(v7 + 352) = 0u;
  if (!a3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v24 = "HALS_ClockDevice.cpp";
      v25 = 1024;
      v26 = 39;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_ClockDevice::HALS_ClockDevice: all clock devices have to have a UID", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 1852797029;
  }
  *(_DWORD *)buf = 256;
  CACFString::GetCString(a3, (__CFString *)(v7 + 112), (char *)buf, v8);
  if (*v10)
    v11 = CFStringGetLength(*v10) + 1;
  else
    v11 = 1;
  *(_DWORD *)v22 = v11;
  MEMORY[0x1E0C80A78]();
  v13 = (__CFString *)&v22[-((v12 + 15) & 0x1FFFFFFF0) - 4];
  CACFString::GetCString(*v10, v13, v22, v14);
  v15 = *(_DWORD *)v22;
  v16 = (char *)operator new[]();
  v17 = (v15 + 29);
  snprintf(v16, v17, "com.apple.audio.clock.%s", (const char *)v13);
  v18 = (HALB_Mutex *)operator new();
  HALB_Mutex::HALB_Mutex(v18);
  *v9 = v18;
  snprintf(v16, v17, "com.apple.audio.clock.%s.event", (const char *)v13);
  v19 = operator new();
  *((_QWORD *)this + 11) = AMCP::Utility::Dispatch_Queue::Dispatch_Queue(v19, v16);
  MEMORY[0x1B5E50664](v16, 0x1000C8077774924);
}

void sub_1B5B81010(_Unwind_Exception *a1)
{
  HALS_IODevice *v1;
  CACFString *v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x1B5E50688](v4, 0x10A0C40CF3E2C79);
  MEMORY[0x1B5E50664](v3, 0x1000C8077774924);
  CACFString::~CACFString(v2);
  HALS_IODevice::~HALS_IODevice(v1);
  _Unwind_Resume(a1);
}

void HALS_IODevice::~HALS_IODevice(HALS_IODevice *this)
{
  *(_QWORD *)this = off_1E699F680;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)this + 7));
  HALS_Object::~HALS_Object(this);
}

void HALS_ClockDevice::~HALS_ClockDevice(HALS_ClockDevice *this)
{
  HALB_Mutex *v2;
  AMCP::Utility::Dispatch_Queue *v3;

  *(_QWORD *)this = off_1E6991CB8;
  v2 = (HALB_Mutex *)*((_QWORD *)this + 10);
  if (v2)
  {
    HALB_Mutex::~HALB_Mutex(v2);
    MEMORY[0x1B5E50688]();
  }
  v3 = (AMCP::Utility::Dispatch_Queue *)*((_QWORD *)this + 11);
  if (v3)
  {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v3);
    MEMORY[0x1B5E50688]();
  }
  CACFString::~CACFString((HALS_ClockDevice *)((char *)this + 96));
  *(_QWORD *)this = off_1E699F680;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((_QWORD **)this + 7));
  HALS_Object::~HALS_Object(this);
}

_QWORD *std::__function::__func<HALS_IOStreamGroupList::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOStreamGroupList::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStreamGroup>::ItemWithIndex &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6991EA8;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<HALS_IOStreamGroupList::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOStreamGroupList::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStreamGroup>::ItemWithIndex &)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6991EA8;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOStreamGroupList::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOStreamGroupList::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStreamGroup>::ItemWithIndex &)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_1E6991EA8;
  v2[1] = v3;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_1B5B81240(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<HALS_IOStreamGroupList::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOStreamGroupList::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStreamGroup>::ItemWithIndex &)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_1E6991EA8;
  a2[1] = v2;
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(a2 + 2), a1 + 16);
}

_QWORD *std::__function::__func<HALS_IOStreamGroupList::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOStreamGroupList::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStreamGroup>::ItemWithIndex &)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<HALS_IOStreamGroupList::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOStreamGroupList::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStreamGroup>::ItemWithIndex &)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<HALS_IOStreamGroupList::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOStreamGroupList::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStreamGroup>::ItemWithIndex &)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE v10[24];
  _BYTE *v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v10, a1 + 16);
  v12[0] = &off_1E6974808;
  v12[1] = v10;
  v12[2] = v3;
  v13 = v12;
  v4 = VisitableVector<HALS_IOStreamInfo>::apply<>(v2, (uint64_t)v12);
  v5 = v13;
  if (v13 == v12)
  {
    v6 = 4;
    v5 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_10;
  }
  if (v11)
  {
    v8 = 5;
LABEL_10:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v4;
}

void sub_1B5B813E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<HALS_IOStreamGroupList::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOStreamGroupList::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStreamGroup>::ItemWithIndex &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN22HALS_IOStreamGroupList16apply_to_streamsEmNSt3__18functionIFimR17HALS_IOStreamInfoEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOStreamGroupList::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0,std::allocator<HALS_IOStreamGroupList::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0>,int ()(VisitableVector<HALS_IOStreamGroup>::ItemWithIndex &)>::target_type()
{
}

BOOL HALS_Stream::GetStreamIsActive(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v1 = a1[4];
  v3 = 0x676C6F6273616374;
  v4 = 0;
  v5 = 0;
  (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 112))(a1, v1, &v3, 4, &v5, (char *)&v5 + 4, 0, 0, 0);
  return HIDWORD(v5) != 0;
}

void std::default_delete<FormatConverter>::operator()[abi:ne180100](AudioConverterRef *a1)
{
  AudioConverterDispose(*a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<HALS_IOStreamDSP>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6991F28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HALS_IOStreamDSP>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6991F28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<HALS_IOStreamDSP>::__on_zero_shared(uint64_t *a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = (uint64_t)v2;
    operator delete(v2);
  }
  if (a1[21])
  {
    std::vector<std::vector<std::byte>>::__clear[abi:ne180100](a1 + 21);
    operator delete((void *)a1[21]);
  }
  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::~unique_ptr[abi:ne180100](a1 + 16);
  v3 = (void *)a1[12];
  if (v3)
  {
    a1[13] = (uint64_t)v3;
    operator delete(v3);
  }
  v4 = (void *)a1[9];
  if (v4)
  {
    a1[10] = (uint64_t)v4;
    operator delete(v4);
  }
  v5 = a1[6];
  if (v5)
  {
    std::vector<HALS_IOStreamDSP::InputChannelData>::__base_destruct_at_end[abi:ne180100](a1 + 6, v5);
    operator delete((void *)a1[6]);
  }
  v6 = a1[5];
  a1[5] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (std::__shared_weak_count *)a1[4];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void HALS_IOEngine2_StreamInfo::CreateCaptureFile(uint64_t a1, int a2)
{
  __int128 v4;
  uint64_t v5;
  ca::concurrent::details::service_thread ****v6;
  __int128 v7;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  _DWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void **v16;
  void **v17;
  uint64_t v18;
  char *v19;
  unsigned int v20;
  unsigned int v21;
  void *__p[2];
  char v23;
  uint64_t v24;
  _DWORD *v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  void **v30;
  void **v31;
  void **v32;
  void **v33;
  unint64_t *v34;
  uint64_t (*v35[5])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v35[4] = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x1E0C80C00];
  v4 = *(_OWORD *)(a1 + 136);
  v27 = *(_OWORD *)(a1 + 120);
  v28 = v4;
  v29 = *(_QWORD *)(a1 + 152);
  if (*(_DWORD *)(a1 + 24) == 1)
  {
    v6 = (ca::concurrent::details::service_thread ****)(a1 + 200);
    v5 = *(_QWORD *)(a1 + 200);
    v7 = *(_OWORD *)(a1 + 56);
    v27 = *(_OWORD *)(a1 + 40);
    v28 = v7;
    v29 = *(_QWORD *)(a1 + 72);
    if (v5 || DWORD2(v27) != 1819304813)
      return;
    v8 = 1;
  }
  else
  {
    v6 = (ca::concurrent::details::service_thread ****)(a1 + 200);
    if (*(_QWORD *)(a1 + 200) || DWORD2(v27) != 1819304813)
      return;
    v8 = 2 * *(unsigned __int8 *)(a1 + 21);
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v9 = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 320))();
  v10 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 216))(v9);
  std::string::basic_string[abi:ne180100]<0>(__p, v10);
  HALB_CaptureFile_NameBuilder::Add<(HALB_CaptureFile_NameBuilder_Label)0>(&v24, (uint64_t)__p);
  v21 = *(_DWORD *)(a1 + 8);
  HALB_CaptureFile_NameBuilder::Add<(HALB_CaptureFile_NameBuilder_Label)4>(&v24, &v21);
  v20 = *(_DWORD *)(a1 + 12);
  HALB_CaptureFile_NameBuilder::Add<(HALB_CaptureFile_NameBuilder_Label)3>(&v24, &v20);
  v11 = v25;
  if ((unint64_t)v25 >= v26)
  {
    v13 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v25 - v24) >> 3);
    if (v13 + 1 > 0x666666666666666)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v14 = 0x999999999999999ALL * ((uint64_t)(v26 - v24) >> 3);
    if (v14 <= v13 + 1)
      v14 = v13 + 1;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v26 - v24) >> 3) >= 0x333333333333333)
      v15 = 0x666666666666666;
    else
      v15 = v14;
    v34 = &v26;
    v16 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v15);
    v17 = &v16[5 * v13];
    v30 = v16;
    v31 = v17;
    v33 = &v16[5 * v18];
    v35[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))std::__any_imp::_SmallHandler<HALB_CaptureFile_ReferenceStreamState>::__handle[abi:ne180100];
    v35[1] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v8;
    *(_DWORD *)v17 = 5;
    v17[1] = std::__any_imp::_SmallHandler<HALB_CaptureFile_ReferenceStreamState>::__handle[abi:ne180100];
    v17[2] = 0;
    *((_DWORD *)v17 + 4) = v8;
    std::any::reset[abi:ne180100](v35);
    v32 = v17 + 5;
    std::vector<HALB_CaptureFile_NameBuilder::ComponentBase>::__swap_out_circular_buffer(&v24, &v30);
    v12 = v25;
    std::__split_buffer<HALB_CaptureFile_NameBuilder::ComponentBase>::~__split_buffer((uint64_t)&v30);
  }
  else
  {
    v30 = (void **)std::__any_imp::_SmallHandler<HALB_CaptureFile_ReferenceStreamState>::__handle[abi:ne180100];
    v31 = (void **)v8;
    *v25 = 5;
    *((_QWORD *)v11 + 1) = std::__any_imp::_SmallHandler<HALB_CaptureFile_ReferenceStreamState>::__handle[abi:ne180100];
    *((_QWORD *)v11 + 2) = 0;
    v11[4] = v8;
    std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&v30);
    v12 = v11 + 10;
  }
  v25 = v12;
  LODWORD(v30) = *(unsigned __int8 *)(a1 + 20);
  HALB_CaptureFile_NameBuilder::Add<(HALB_CaptureFile_NameBuilder_Label)2>(&v24, (unsigned int *)&v30);
  if (v23 < 0)
    operator delete(__p[0]);
  v19 = (char *)operator new();
  HALB_CaptureFile::HALB_CaptureFile(v19, &v24, (uint64_t)&v27, a2);
  std::unique_ptr<HALB_CaptureFile>::reset[abi:ne180100](v6, (ca::concurrent::details::service_thread ***)v19);
  v30 = (void **)&v24;
  std::vector<HALB_CaptureFile_NameBuilder::ComponentBase>::__destroy_vector::operator()[abi:ne180100](&v30);
}

void sub_1B5B8191C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  uint64_t v17;
  uint64_t v18;

  MEMORY[0x1B5E50688](v17, 0x1020C40C1DD3C34);
  *(_QWORD *)(v18 - 104) = &a17;
  std::vector<HALB_CaptureFile_NameBuilder::ComponentBase>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 104));
  _Unwind_Resume(a1);
}

uint64_t *HALB_CaptureFile_NameBuilder::Add<(HALB_CaptureFile_NameBuilder_Label)4>(uint64_t *a1, unsigned int *a2)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(int);
  char *v14;
  uint64_t v15;
  unsigned int v16;
  void (*v18)(int);
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  uint64_t (*v23[5])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v23[4] = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x1E0C80C00];
  v4 = a1 + 2;
  v5 = a1[2];
  v6 = a1[1];
  if (v6 >= v5)
  {
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - *a1) >> 3);
    if (v9 + 1 > 0x666666666666666)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x333333333333333)
      v12 = 0x666666666666666;
    else
      v12 = v11;
    v22 = v4;
    v13 = (void (*)(int))std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v12);
    v14 = (char *)v13 + 40 * v9;
    v18 = v13;
    v19 = (unint64_t)v14;
    v21 = (char *)v13 + 40 * v15;
    v16 = *a2;
    v23[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))std::__any_imp::_SmallHandler<unsigned int>::__handle[abi:ne180100];
    v23[1] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v16;
    *(_DWORD *)v14 = 4;
    *((_QWORD *)v14 + 1) = std::__any_imp::_SmallHandler<unsigned int>::__handle[abi:ne180100];
    *((_QWORD *)v14 + 2) = 0;
    *((_DWORD *)v14 + 4) = v16;
    std::any::reset[abi:ne180100](v23);
    v20 = v14 + 40;
    std::vector<HALB_CaptureFile_NameBuilder::ComponentBase>::__swap_out_circular_buffer(a1, &v18);
    v8 = a1[1];
    std::__split_buffer<HALB_CaptureFile_NameBuilder::ComponentBase>::~__split_buffer((uint64_t)&v18);
  }
  else
  {
    v7 = *a2;
    v18 = std::__any_imp::_SmallHandler<unsigned int>::__handle[abi:ne180100];
    v19 = v7;
    *(_DWORD *)v6 = 4;
    *(_QWORD *)(v6 + 8) = std::__any_imp::_SmallHandler<unsigned int>::__handle[abi:ne180100];
    *(_QWORD *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 16) = v7;
    std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&v18);
    v8 = v6 + 40;
  }
  a1[1] = v8;
  return a1;
}

uint64_t *HALB_CaptureFile_NameBuilder::Add<(HALB_CaptureFile_NameBuilder_Label)2>(uint64_t *a1, unsigned int *a2)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(int);
  char *v14;
  uint64_t v15;
  unsigned int v16;
  void (*v18)(int);
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  uint64_t (*v23[5])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v23[4] = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x1E0C80C00];
  v4 = a1 + 2;
  v5 = a1[2];
  v6 = a1[1];
  if (v6 >= v5)
  {
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - *a1) >> 3);
    if (v9 + 1 > 0x666666666666666)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x333333333333333)
      v12 = 0x666666666666666;
    else
      v12 = v11;
    v22 = v4;
    v13 = (void (*)(int))std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v12);
    v14 = (char *)v13 + 40 * v9;
    v18 = v13;
    v19 = (unint64_t)v14;
    v21 = (char *)v13 + 40 * v15;
    v16 = *a2;
    v23[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))std::__any_imp::_SmallHandler<AMCP::Direction>::__handle[abi:ne180100];
    v23[1] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v16;
    *(_DWORD *)v14 = 2;
    *((_QWORD *)v14 + 1) = std::__any_imp::_SmallHandler<AMCP::Direction>::__handle[abi:ne180100];
    *((_QWORD *)v14 + 2) = 0;
    *((_DWORD *)v14 + 4) = v16;
    std::any::reset[abi:ne180100](v23);
    v20 = v14 + 40;
    std::vector<HALB_CaptureFile_NameBuilder::ComponentBase>::__swap_out_circular_buffer(a1, &v18);
    v8 = a1[1];
    std::__split_buffer<HALB_CaptureFile_NameBuilder::ComponentBase>::~__split_buffer((uint64_t)&v18);
  }
  else
  {
    v7 = *a2;
    v18 = std::__any_imp::_SmallHandler<AMCP::Direction>::__handle[abi:ne180100];
    v19 = v7;
    *(_DWORD *)v6 = 2;
    *(_QWORD *)(v6 + 8) = std::__any_imp::_SmallHandler<AMCP::Direction>::__handle[abi:ne180100];
    *(_QWORD *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 16) = v7;
    std::any::reset[abi:ne180100]((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&v18);
    v8 = v6 + 40;
  }
  a1[1] = v8;
  return a1;
}

void std::__any_imp::_SmallHandler<AMCP::Direction>::__handle[abi:ne180100](int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B5B81C8C()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

void std::__any_imp::_SmallHandler<HALB_CaptureFile_ReferenceStreamState>::__handle[abi:ne180100](int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B5B81D44()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

uint64_t *std::vector<float,HALB_IOBufferManager_Server::Allocator<float>>::shrink_to_fit(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  vm_address_t Buffer;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];

  v1 = *result;
  v2 = result[1];
  v3 = v2 - *result;
  v4 = v3 >> 2;
  if (v3 >> 2 < (unint64_t)((result[2] - *result) >> 2))
  {
    v5 = result;
    v12[4] = result + 2;
    if (v2 == v1)
    {
      v8 = 4 * v4;
    }
    else
    {
      Buffer = HALB_IOBufferManager_Server::AllocateBuffer(v3 & 0xFFFFFFFC);
      v7 = *v5;
      v1 = v5[1];
      v8 = Buffer + 4 * v4;
      if (v1 != *v5)
      {
        v9 = 0;
        do
        {
          *(_DWORD *)(v8 + v9 - 4) = *(_DWORD *)(v1 + v9 - 4);
          v9 -= 4;
        }
        while (v1 + v9 != v7);
        v10 = v8 + v9;
        goto LABEL_9;
      }
    }
    v7 = v1;
    v10 = v8;
LABEL_9:
    *v5 = v10;
    v5[1] = v8;
    v11 = v5[2];
    v5[2] = v8;
    v12[2] = v1;
    v12[3] = v11;
    v12[0] = v7;
    v12[1] = v7;
    return (uint64_t *)std::__split_buffer<float,HALB_IOBufferManager_Server::Allocator<float> &>::~__split_buffer((uint64_t)v12);
  }
  return result;
}

void sub_1B5B81E84(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5B81E74);
}

AudioConverterRef *FormatConverter::FormatConverter(AudioConverterRef *a1, const AudioStreamBasicDescription *a2, const AudioStreamBasicDescription *a3)
{
  OSStatus v4;
  OSStatus v6;
  _DWORD *exception;
  _BYTE v8[5];
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  OSStatus v14;
  __int16 v15;
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  v4 = AudioConverterNew(a2, a3, a1);
  if (v4)
  {
    v8[0] = HIBYTE(v4);
    v8[1] = BYTE2(v4);
    v8[2] = BYTE1(v4);
    v6 = v4;
    v8[3] = v4;
    v8[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v10 = "HALS_IOEngine2_StreamInfo.cpp";
      v11 = 1024;
      v12 = 425;
      v13 = 1024;
      v14 = v6;
      v15 = 2080;
      v16 = v8;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOEngine2_StreamInfo::StartIO: couldn't create the format converter, Error: %d (%s)", buf, 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v6;
  }
  return a1;
}

uint64_t std::__split_buffer<float,HALB_IOBufferManager_Server::Allocator<float> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  HALB_IOBufferManager_Server *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  v4 = *(HALB_IOBufferManager_Server **)a1;
  if (*(_QWORD *)a1)
    HALB_IOBufferManager_Server::FreeBuffer(v4, (*(_DWORD *)(a1 + 24) - (_DWORD)v4) & 0xFFFFFFFC);
  return a1;
}

void std::__function::__func<HALS_IOEngine2_StreamInfo::synchronized_mixer_init(void)::$_0,std::allocator<HALS_IOEngine2_StreamInfo::synchronized_mixer_init(void)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOEngine2_StreamInfo::synchronized_mixer_init(void)::$_0,std::allocator<HALS_IOEngine2_StreamInfo::synchronized_mixer_init(void)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6991F78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOEngine2_StreamInfo::synchronized_mixer_init(void)::$_0,std::allocator<HALS_IOEngine2_StreamInfo::synchronized_mixer_init(void)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6991F78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<HALS_IOEngine2_StreamInfo::synchronized_mixer_init(void)::$_0,std::allocator<HALS_IOEngine2_StreamInfo::synchronized_mixer_init(void)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::operator()(uint64_t a1, unsigned int *a2, AMCP::DAL::DAL_Time *this)
{
  AMCP::DAL::DAL_Time *v6;
  double sample_time;
  uint64_t v8;
  unint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  float *v13;
  unsigned int v14;
  float *v15;
  AMCP::Log::Scope_Registry *v16;
  unsigned int v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  HALS_IOEngine2_StreamInfo *v25;
  HALS_IOEngine2 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  NSObject *v37;
  unint64_t *v38;
  unint64_t v39;
  _opaque_pthread_t *v40;
  mach_port_t v41;
  std::logic_error *exception;
  uint64_t v43;
  int v44;
  uint64_t v45;
  std::logic_error v46;
  unsigned int *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t (**v50)();
  __int128 v51;
  uint64_t v52;
  std::string v53;
  std::logic_error v54;
  std::logic_error v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint8_t buf[8];
  _BYTE v69[10];
  __int16 v70;
  int v71;
  _BYTE v72[24];
  int v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v6 = (AMCP::DAL::DAL_Time *)((char *)this + 40);
  if (!AMCP::DAL::DAL_Time::operator<(this, (AMCP::DAL::DAL_Time *)((char *)this + 40)))
    return;
  sample_time = AMCP::DAL::DAL_Time::get_sample_time(this);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = vcvtmd_s64_f64(sample_time);
  v10 = AMCP::DAL::DAL_Time::get_sample_time(this);
  v11 = AMCP::DAL::DAL_Time::get_sample_time(v6);
  HALS_IOEngine2_StreamInfo::GetPointersForMixBuffer((uint64_t)&v62, v8, v9, vcvtmd_s64_f64(v11 - v10));
  v12 = v64;
  if (v62)
    v13 = (float *)(v62 + v63);
  else
    v13 = 0;
  v14 = v67;
  if (v65)
    v15 = (float *)(v65 + v66);
  else
    v15 = 0;
  AMCP::DAL::DAL_Time::operator-((uint64_t)buf, v6, this);
  v47 = a2;
  if ((buf[0] & 2) == 0)
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)buf);
  v17 = vcvtmd_s64_f64(*(double *)v69);
  v18 = *(std::__shared_weak_count **)&v72[8];
  if (!*(_QWORD *)&v72[8])
    goto LABEL_14;
  v19 = (unint64_t *)(*(_QWORD *)&v72[8] + 8);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (v13)
      goto LABEL_15;
  }
  else
  {
LABEL_14:
    if (v13)
    {
LABEL_15:
      if (v17 < v12)
      {
        AMCP::Log::Scope_Registry::get(v16);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v36 = *(std::__shared_weak_count **)v69;
        v37 = **(NSObject ***)buf;
        if (*(_QWORD *)v69)
        {
          v38 = (unint64_t *)(*(_QWORD *)v69 + 8);
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          v40 = pthread_self();
          v41 = pthread_mach_thread_np(v40);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v41;
          *(_WORD *)v69 = 2080;
          *(_QWORD *)&v69[2] = "HALS_IOEngine2_StreamInfo.cpp";
          v70 = 1024;
          v71 = 291;
          *(_WORD *)v72 = 2080;
          *(_QWORD *)&v72[2] = "not (write_size >= the1stMixBufferFrameSize)";
          _os_log_error_impl(&dword_1B57BA000, v37, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v61);
        exception = (std::logic_error *)__cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v53);
        std::logic_error::logic_error(&v54, &v53);
        v43 = MEMORY[0x1E0DE5018];
        v54.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error(&v55, &v54);
        v57 = 0;
        v58 = 0;
        v59 = 0;
        v60 = -1;
        v55.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
        v56 = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v55);
        *(_QWORD *)&v72[8] = "auto HALS_IOEngine2_StreamInfo::synchronized_mixer_init()::(anonymous class)::operator()(co"
                             "nst AMCP::DAL::Source_ID &, const AMCP::DAL::Readable_Range &) const";
        *(_QWORD *)&v72[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOEngine2_StreamInfo.cpp";
        v73 = 291;
        std::vector<void *>::vector(&v48);
        v44 = backtrace((void **)v48, (*((_QWORD *)&v48 + 1) - (_QWORD)v48) >> 3);
        std::vector<void *>::resize((char **)&v48, v44);
        v51 = v48;
        v52 = v49;
        v48 = 0uLL;
        v49 = 0;
        v50 = off_1E69A20A0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v50);
        exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::logic_error::logic_error(exception, (const std::logic_error *)buf);
        exception->__vftable = (std::logic_error_vtbl *)(v43 + 16);
        exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A2000;
        v45 = *(_QWORD *)v72;
        exception[1].__imp_.__imp_ = *(const char **)v72;
        if (v45)
          (*(void (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45);
        v46 = *(std::logic_error *)&v72[8];
        LODWORD(exception[3].__vftable) = v73;
        exception[2] = v46;
        exception->__vftable = (std::logic_error_vtbl *)off_1E69A1168;
        exception[1].__vftable = (std::logic_error_vtbl *)&unk_1E69A11A0;
        exception[3].__imp_.__imp_ = (const char *)&unk_1E69A11D8;
      }
      HALS_IOEngine2_StreamInfo::read_from_synchronized_mixer(*(HALS_IOEngine2_StreamInfo **)(a1 + 16), v9, v12, v13);
      v17 -= v12;
      sample_time = sample_time + (double)v12;
    }
  }
  if (v15)
  {
    if (v14 >= v17)
      v21 = v17;
    else
      v21 = v14;
    HALS_IOEngine2_StreamInfo::read_from_synchronized_mixer(*(HALS_IOEngine2_StreamInfo **)(a1 + 16), vcvtmd_s64_f64(sample_time), v21, v15);
  }
  v22 = *(_QWORD *)(a1 + 16);
  v23 = vcvtmd_s64_f64(AMCP::DAL::DAL_Time::get_sample_time(v6));
  if (*(_QWORD *)(v22 + 464) <= v23)
    *(_QWORD *)(v22 + 464) = v23;
  v24 = *v47;
  v26 = *(HALS_IOEngine2 **)(a1 + 8);
  v25 = *(HALS_IOEngine2_StreamInfo **)(a1 + 16);
  v27 = vcvtmd_s64_f64(AMCP::DAL::DAL_Time::get_sample_time(this));
  v28 = vcvtmd_s64_f64(AMCP::DAL::DAL_Time::get_sample_time(v6));
  v29 = *(_QWORD *)(a1 + 8);
  v30 = *(_QWORD *)(v29 + 1080);
  v31 = *(std::__shared_weak_count **)(v29 + 1088);
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldxr(p_shared_owners);
    while (__stxr(v33 + 1, p_shared_owners));
  }
  HALS_IOEngine2::_ColoringMixer_EmitRange(v26, v24, v25, v27, v28, *(HALS_IOClock **)(v30 + 56), (const AudioServerPlugInIOCycleInfo *)(*(_QWORD *)(a1 + 16) + 232), *(_DWORD *)(*(_QWORD *)(a1 + 16) + 456));
  if (v31)
  {
    v34 = (unint64_t *)&v31->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_1B5B82570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  v38 = *(std::__shared_weak_count **)(v36 - 160);
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<HALS_IOEngine2_StreamInfo::synchronized_mixer_init(void)::$_0,std::allocator<HALS_IOEngine2_StreamInfo::synchronized_mixer_init(void)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN25HALS_IOEngine2_StreamInfo23synchronized_mixer_initEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOEngine2_StreamInfo::synchronized_mixer_init(void)::$_0,std::allocator<HALS_IOEngine2_StreamInfo::synchronized_mixer_init(void)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::target_type()
{
}

uint64_t HALS_IOEngine2_StreamInfo::GetPointersForMixBuffer(uint64_t this, uint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  BOOL v18;

  v4 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v4)
    v5 = v4 >= a4;
  else
    v5 = 0;
  if (v5
    && ((v6 = *(_QWORD *)(a2 + 472), (*(_BYTE *)(a2 + 52) & 0x20) != 0) ? (v7 = 1) : (v7 = *(unsigned int *)(a2 + 68)),
        ((*(_QWORD *)(a2 + 480) - v6) >> 2) / v7 >= a4))
  {
    v14 = a3 % v4;
    v15 = *(_DWORD *)(a2 + 64);
    v16 = a3 % v4 + a4;
    v10 = v4 - a3 % v4;
    v17 = a3 % v4 - v4 + a4;
    v18 = v16 > v4;
    if (v16 <= v4)
      v11 = 0;
    else
      v11 = a3 % v4 - v4 + a4;
    if (v18)
      v12 = v17 * v15;
    else
      v12 = 0;
    if (v18)
      v13 = *(_QWORD *)(a2 + 472);
    else
      v13 = 0;
    if (v18)
    {
      v8 = v10 * v15;
    }
    else
    {
      v10 = a4;
      v8 = v15 * a4;
    }
    v9 = v15 * v14;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v6 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
  }
  *(_QWORD *)this = v6;
  *(_DWORD *)(this + 8) = v9;
  *(_DWORD *)(this + 12) = v8;
  *(_DWORD *)(this + 16) = v10;
  *(_QWORD *)(this + 24) = v13;
  *(_DWORD *)(this + 32) = 0;
  *(_DWORD *)(this + 36) = v12;
  *(_DWORD *)(this + 40) = v11;
  return this;
}

void HALS_IOEngine2_StreamInfo::read_from_synchronized_mixer(HALS_IOEngine2_StreamInfo *this, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14[2];
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v5 = *((_QWORD *)this + 26);
  v6 = *(_QWORD *)(v5 + 88);
  if (v6)
  {
    v7 = *(_OWORD *)(v6 + 24);
    v15 = *(_OWORD *)(v6 + 8);
    v16 = v7;
    v17 = *(_QWORD *)(v6 + 40);
  }
  else
  {
    v17 = 0;
    v15 = 0u;
    v16 = 0u;
  }
  v8 = *(_QWORD *)(*(_QWORD *)this + 1080);
  v9 = *(std::__shared_weak_count **)(*(_QWORD *)this + 1088);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v14[0] = v8;
  v14[1] = (uint64_t)v9;
  read_from_dal_buffer(a3, a2, (uint64_t)&v15, v5, (uint64_t **)this + 28, v14, a4);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

uint64_t HALS_IOEngine2_StreamInfo::ApplyDSP(uint64_t result, __int128 *a2, int a3, _QWORD *a4, uint64_t a5, _DWORD *a6)
{
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  _DWORD *v10;
  _DWORD *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v18;
  int v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int **v28;
  _DWORD *v29;
  _DWORD *v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  unint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  double *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  std::__shared_weak_count *v60;
  NSObject *v61;
  unint64_t *v62;
  unint64_t v63;
  _opaque_pthread_t *v64;
  mach_port_t v65;
  std::__shared_weak_count *v66;
  NSObject *v67;
  unint64_t *v68;
  unint64_t v69;
  _opaque_pthread_t *v70;
  mach_port_t v71;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint8_t buf[8];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)result && *(_BYTE *)(*(_QWORD *)result + 762))
  {
    v7 = (_QWORD *)result;
    v8 = a2[1];
    v73 = *a2;
    v74 = v8;
    v9 = a2[3];
    v75 = a2[2];
    v76 = v9;
    v11 = (_DWORD *)*a4;
    v10 = (_DWORD *)a4[1];
    v12 = (int64_t)v10 - *a4;
    v13 = *(_QWORD *)(result + 24);
    v14 = *(_QWORD *)(result + 32);
    v15 = 0x2E8BA2E8BA2E8BA3 * ((v14 - v13) >> 3);
    if (v12 >> 4 != v15)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v60 = (std::__shared_weak_count *)v78;
      v61 = **(NSObject ***)buf;
      if ((_QWORD)v78)
      {
        v62 = (unint64_t *)(v78 + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      {
        v64 = pthread_self();
        v65 = pthread_mach_thread_np(v64);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v65;
        LOWORD(v78) = 2080;
        *(_QWORD *)((char *)&v78 + 2) = "HALS_IOStreamDSP.cpp";
        WORD5(v78) = 1024;
        HIDWORD(v78) = 509;
        LOWORD(v79) = 2080;
        *(_QWORD *)((char *)&v79 + 2) = "inputStreams.size() == mInputChannelData.size()";
        _os_log_error_impl(&dword_1B57BA000, v61, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
      }
      abort();
    }
    v18 = v11[1];
    v19 = *(_DWORD *)(result + 96);
    if (v10 == v11)
    {
      v20 = 0;
      v21 = 0;
    }
    else
    {
      if (v12 < 0)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v12 >> 4);
      result = (uint64_t)memmove(v20, v11, v12);
      v21 = &v20[16 * (v12 >> 4)];
      v13 = v7[3];
      v14 = v7[4];
      v15 = 0x2E8BA2E8BA2E8BA3 * ((v14 - v13) >> 3);
    }
    v22 = (v21 - v20) >> 4;
    if (v22 != v15)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v66 = (std::__shared_weak_count *)v78;
      v67 = **(NSObject ***)buf;
      if ((_QWORD)v78)
      {
        v68 = (unint64_t *)(v78 + 8);
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
      {
        v70 = pthread_self();
        v71 = pthread_mach_thread_np(v70);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v71;
        LOWORD(v78) = 2080;
        *(_QWORD *)((char *)&v78 + 2) = "HALS_IOStreamDSP.cpp";
        WORD5(v78) = 1024;
        HIDWORD(v78) = 467;
        LOWORD(v79) = 2080;
        *(_QWORD *)((char *)&v79 + 2) = "inputStreams.size() == mInputChannelData.size()";
        _os_log_error_impl(&dword_1B57BA000, v67, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
      }
      abort();
    }
    if (v14 != v13)
    {
      v23 = 0;
      if (v22 <= 1)
        v24 = 1;
      else
        v24 = v22;
      do
      {
        v25 = 0;
        v26 = 0;
        v27 = v13 + 88 * v23;
        v30 = *(_DWORD **)(v27 + 40);
        v28 = (unsigned int **)(v27 + 40);
        v29 = v30;
        *v30 = 1;
        v31 = &v20[16 * v23];
        v32 = *(_DWORD *)v31;
        v33 = 4 * *(_DWORD *)v31 * *((_DWORD *)v31 + 1);
        v34 = *((_QWORD *)v31 + 1);
        do
        {
          v35 = &v29[v25];
          v35[2] = v32;
          v35[3] = v33;
          *((_QWORD *)v35 + 2) = v34;
          ++v26;
          v29 = *v28;
          v25 += 4;
        }
        while (v26 < **v28);
        ++v23;
      }
      while (v23 != v24);
    }
    v36 = 0;
    v37 = 0;
    v38 = (_DWORD *)v7[13];
    *v38 = 1;
    do
    {
      v39 = &v38[v36];
      v39[2] = v19;
      v39[3] = 4 * v19 * v18;
      *((_QWORD *)v39 + 2) = a5;
      ++v37;
      v38 = (_DWORD *)v7[13];
      v36 += 4;
    }
    while (v37 < *v38);
    if (v20)
      operator delete(v20);
    *a6 = 0;
    v41 = v7[9];
    v40 = v7[10];
    v42 = (v40 - v41) / 80;
    if (v40 != v41)
    {
      v43 = 0;
      if (v42 <= 1)
        v44 = 1;
      else
        v44 = (v40 - v41) / 80;
      v45 = 40;
      v46 = 4;
      v47 = v7[9];
      do
      {
        v48 = v7[3];
        v49 = v47 + v43;
        *(_DWORD *)v49 = *(_DWORD *)(*a4 + v46);
        *(_DWORD *)(v49 + 4) = 0;
        v50 = v73;
        v51 = v74;
        v52 = v75;
        *(_OWORD *)(v49 + 56) = v76;
        *(_OWORD *)(v49 + 40) = v52;
        *(_OWORD *)(v49 + 24) = v51;
        *(_OWORD *)(v49 + 8) = v50;
        v47 = v7[9];
        *(_QWORD *)(v47 + v43 + 72) = *(_QWORD *)(v48 + v45);
        v43 += 80;
        v45 += 88;
        v46 += 16;
        --v44;
      }
      while (v44);
    }
    v53 = *(_DWORD *)(*a4 + 4);
    v78 = v73;
    v79 = v74;
    v80 = v75;
    *(_DWORD *)buf = v53;
    *(_DWORD *)&buf[4] = 0;
    v81 = v76;
    v82 = v7[13];
    if (v40 != v41)
    {
      v54 = 0;
      v55 = 0;
      if (a3)
        v56 = 0;
      else
        v56 = (double *)&v73;
      if (v42 <= 1)
        v57 = 1;
      else
        v57 = (v40 - v41) / 80;
      do
      {
        v58 = v7[3] + v55;
        v59 = *(unsigned int **)(v58 + 80);
        if (v59)
          HALB_CaptureFile::Write(v59, 0, v56, 0, *(unsigned int *)(v7[9] + v54), *(_QWORD *)(*(_QWORD *)(v58 + 40) + 16));
        v55 += 88;
        v54 += 80;
        --v57;
      }
      while (v57);
    }
    DSPGraph::Graph::preflight();
    result = DSPGraph::Graph::processMultiple();
    *a6 = *(unsigned int *)(v7[13] + 12) / (4 * (unint64_t)*(unsigned int *)(v7[13] + 8));
  }
  return result;
}

void sub_1B5B82DFC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,int a21,__int128 buf,__int16 a23,__int16 a24,int a25,uint64_t a26,int *a27,__int128 a28,int a29,int a30)
{
  _DWORD *v31;
  _DWORD *v32;
  int v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;

  if (a2)
  {
    v31 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      v32 = v31;
      v33 = v31[2];
      a21 = v33;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v34 = v32 + 18;
        if (*((char *)v32 + 95) < 0)
          v34 = (_QWORD *)*v34;
        v35 = v32 + 4;
        if (*((char *)v32 + 39) < 0)
          v35 = (_QWORD *)*v35;
        v36 = v32[10];
        LODWORD(buf) = 136316930;
        *(_QWORD *)((char *)&buf + 4) = "HALS_IOStreamDSP.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 555;
        a24 = 1024;
        a25 = v33;
        a26 = 0x820000000040410;
        a27 = &a21;
        LOWORD(a28) = 2080;
        *(_QWORD *)((char *)&a28 + 2) = v34;
        WORD5(a28) = 2080;
        *(_QWORD *)((char *)&a28 + 12) = v35;
        LOWORD(a30) = 1024;
        *(int *)((char *)&a30 + 2) = v36;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  DSPGraph::Exception exception caught in HALS_IOStreamDSP::Apply() : %d %4.4s %s in %s:%i", (uint8_t *)&buf, 0x42u);
      }
    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 136315394;
      *(_QWORD *)((char *)&buf + 4) = "HALS_IOStreamDSP.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 559;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Unknown exception caught in HALS_IOStreamDSP::Apply()", (uint8_t *)&buf, 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B5B82BECLL);
  }
  _Unwind_Resume(a1);
}

void HALS_IOEngine2_StreamInfo::end_cycle(AMCP::DAL::Synchronized_Mixer **this, const BOOL *a2)
{
  if (!*((_BYTE *)this + 20))
  {
    if (AMCP::Feature_Flags::use_mcp_coloring_mixer(0, a2))
      AMCP::DAL::Synchronized_Mixer::reuse(this[26]);
  }
}

void HALS_IOEngine2_StreamInfo::write_to_synchronized_mixer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14[2];
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v15 = a3;
  v6 = *(_QWORD *)(a1 + 208);
  v7 = *(_QWORD *)(v6 + 88);
  if (v7)
  {
    v16 = *(_OWORD *)(v7 + 8);
    v17 = *(_OWORD *)(v7 + 24);
    v18 = *(_QWORD *)(v7 + 40);
  }
  else
  {
    v18 = 0;
    v16 = 0u;
    v17 = 0u;
  }
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 1080);
  v9 = *(std::__shared_weak_count **)(*(_QWORD *)a1 + 1088);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v14[0] = v8;
  v14[1] = (uint64_t)v9;
  write_to_dal_buffer(a5, a4, &v15, (uint64_t)&v16, v6, (uint64_t **)(a1 + 224), v14, a2);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1B5B83118(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, __int128 buf)
{
  if (a2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 136315394;
      *(_QWORD *)((char *)&buf + 4) = "HALS_IOEngine2_StreamInfo.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 375;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Mixer Write failed due to exception failure", (uint8_t *)&buf, 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B5B830ECLL);
  }
  _Unwind_Resume(a1);
}

void HALS_IOA2Engine2::~HALS_IOA2Engine2(HALS_IOA2Engine2 *this)
{
  HALS_IOEngine2::~HALS_IOEngine2(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t HALS_IOA2Engine2::GetZeroTimeStamp(HALS_IOA2Engine2 *this, unsigned int a2, double *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = *(unint64_t **)(*((_QWORD *)this + 139) + 1856);
  if (!v5)
    return 1937010544;
  v6 = v5[2];
  v7 = v5[1];
  result = 0;
  *a3 = (double)*v5;
  *a4 = v7;
  *a5 = v6;
  return result;
}

void HALS_IOA2Engine2::TimelineWasReset(HALS_IOA2Engine2 *this, int a2, int a3)
{
  uint64_t v4;
  HALB_Mutex *v5;
  HALB_Mutex *v6;
  _QWORD v7[5];
  _QWORD v8[5];
  int v9;
  int v10;

  v4 = MEMORY[0x1E0C809B0];
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = ___ZN14HALS_IOEngine216TimelineWasResetEjj_block_invoke;
  v8[3] = &__block_descriptor_tmp_74_9491;
  v8[4] = this;
  v9 = a3;
  v10 = a2;
  v5 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Engine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v8);
  v7[0] = v4;
  v7[1] = 0x40000000;
  v7[2] = ___ZN16HALS_IOA2Engine216TimelineWasResetEjj_block_invoke;
  v7[3] = &__block_descriptor_tmp_9912;
  v7[4] = this;
  v6 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Engine2 *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v7);
}

uint64_t HALS_IOA2Engine2::_TellHardwareToStart(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  mach_port_t v9;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 1112) + 1808) + 48))(*(_QWORD *)(a1 + 1112) + 1808))
    return HALS_IOA2UCDevice::StartIOWithFlags((HALS_IOA2UCDevice *)(*(_QWORD *)(a1 + 1112) + 1808), a3 == 1);
  if (!a4)
    return 0;
  v7 = 1937010544;
  v8 = *(_QWORD *)(a1 + 1112);
  v9 = *(_DWORD *)(v8 + 1820);
  if (!v9
    || !*(_BYTE *)(v8 + 1842)
    || (v7 = IOConnectCallMethod(v9, 0, 0, 0, 0, 0, 0, 0, 0, 0), (_DWORD)v7))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v12 = "HALS_IOA2UCDevice.cpp";
      v13 = 1024;
      v14 = 1260;
      v15 = 1024;
      v16 = v7;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::StartIO: got an error when telling the hardware to start, Error: 0x%X", buf, 0x18u);
    }
  }
  return v7;
}

void HALS_IOA2Engine2::_TellHardwareToStop(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  HALS_IOA2UCDevice *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  HALB_Mutex *v12;
  kern_return_t v13;
  mach_port_t v14;
  _BYTE buf[24];
  void *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 1112) + 1808) + 48))(*(_QWORD *)(a1 + 1112) + 1808);
  if (a3 == 1)
  {
    if (v6)
    {
      v7 = (HALS_IOA2UCDevice *)(*(_QWORD *)(a1 + 1112) + 1808);
      v8 = 1;
LABEL_6:
      HALS_IOA2UCDevice::StopIOWithFlags(v7, v8);
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 1112);
    if (v6)
    {
      v7 = (HALS_IOA2UCDevice *)(v9 + 1808);
      v8 = 0;
      goto LABEL_6;
    }
    v13 = 1937010544;
    v14 = *(_DWORD *)(v9 + 1820);
    if ((!v14
       || !*(_BYTE *)(v9 + 1842)
       || (v13 = IOConnectCallMethod(v14, 1u, 0, 0, 0, 0, 0, 0, 0, 0)) != 0)
      && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "HALS_IOA2UCDevice.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1280;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v13;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::StopIO: got an error when telling the hardware to stop, Error: 0x%X", buf, 0x18u);
    }
  }
  v10 = atomic_load((unsigned int *)(a1 + 1072));
  if (a3 != 2 && v10 == 2)
  {
    if (*(_QWORD *)(a1 + 768))
    {
      v11 = *(_DWORD *)(a2 + 16);
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = ___ZN14HALS_IOEngine239ClearOutputStreamsUsedOnlyByThisContextEj_block_invoke;
      v16 = &__block_descriptor_tmp_20_9546;
      v17 = a1;
      v18 = v11;
      v12 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
      HALB_CommandGate::ExecuteCommand(v12, (uint64_t)buf);
    }
  }
}

uint64_t HALS_IOA2Engine2::_FirstIOThreadStarted(HALS_IOA2Engine2 *this, unsigned int a2, const HALS_IOEngineInfo *a3)
{
  const __CFDictionary **v4;
  const __CFDictionary **v5;
  uint64_t v6;
  BOOL v8;
  BOOL v9;

  v4 = (const __CFDictionary **)(*((_QWORD *)this + 139) + 1808);
  v8 = 0;
  HALB_UCObject::CopyProperty_BOOL(v4, CFSTR("wants input trap"), &v8);
  *((_BYTE *)this + 1120) = v8;
  v5 = (const __CFDictionary **)(*((_QWORD *)this + 139) + 1808);
  v9 = 0;
  HALB_UCObject::CopyProperty_BOOL(v5, CFSTR("wants output trap"), &v9);
  *((_BYTE *)this + 1121) = v9;
  v6 = *(_QWORD *)(*((_QWORD *)this + 139) + 1856);
  if (v6)
  {
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 32) = 0;
  }
  return 0;
}

uint64_t HALS_IOA2Engine2::_BeginReading(HALS_IOA2Engine2 *this, unsigned int a2, unsigned int a3, const HALS_IOEngineInfo *a4)
{
  if (*((_BYTE *)this + 1120))
    HALS_IOA2UCDevice::DoIO((HALS_IOA2UCDevice *)(*((_QWORD *)this + 139) + 1808));
  return 0;
}

void HALS_IOA2Engine2::_ReadFromStream_Read(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t *a6)
{
  uint64_t v6;
  char *v10;
  double v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  double v18;

  v6 = *a6;
  if (*a6)
  {
    v10 = (char *)(v6 + *((unsigned int *)a6 + 2));
    v11 = *(double *)(a4 + 80);
    if (v11 >= 0.0)
    {
      v12 = *(char **)(a3 + 168);
      v13 = *(unsigned int *)(*(_QWORD *)(a1 + 768) + 16);
      if (*(_DWORD *)(a3 + 128) == 1667326771)
        v14 = 4;
      else
        v14 = *(unsigned int *)(a3 + 144);
      v15 = (unint64_t)v11 % v13;
      if (v15 + a5 <= v13)
        v16 = a5;
      else
        v16 = v13 - v15;
      memcpy(v10, &v12[v15 * v14], v16 * v14);
      if (a5 != v16)
        memcpy(&v10[v16 * v14], v12, (a5 - v16) * v14);
    }
    else
    {
      bzero((void *)(v6 + *((unsigned int *)a6 + 2)), a5);
    }
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 1112) + 1856);
    if (v17)
    {
      v18 = *(double *)(a4 + 80) + (double)a5;
      if (v18 > (double)*(unint64_t *)(v17 + 24))
        *(_QWORD *)(v17 + 24) = (unint64_t)v18;
    }
  }
}

uint64_t HALS_IOA2Engine2::_EndWriting(HALS_IOA2Engine2 *this, unsigned int a2, unsigned int a3, const HALS_IOEngineInfo *a4)
{
  uint64_t v4;
  uint64_t v5;
  double v6;

  v4 = *((_QWORD *)this + 139);
  v5 = *(_QWORD *)(v4 + 1856);
  if (v5)
  {
    v6 = *((double *)a4 + 72) + (double)a3;
    if (v6 > (double)*(unint64_t *)(v5 + 32))
      *(_QWORD *)(v5 + 32) = (unint64_t)v6;
  }
  if (*((_BYTE *)this + 1121))
    HALS_IOA2UCDevice::DoIO((HALS_IOA2UCDevice *)(v4 + 1808));
  return 0;
}

uint64_t HALS_IOA2Engine2::_WriteToStream_Write(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  uint64_t result;
  char *v8;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  double v18;

  result = 560947818;
  if (*(_QWORD *)a6)
  {
    v8 = *(char **)(a3 + 168);
    if (v8)
    {
      v11 = *(_QWORD *)a6 + *(unsigned int *)(a6 + 8);
      v12 = *(unsigned int *)(*(_QWORD *)(a1 + 768) + 16);
      if (*(_DWORD *)(a3 + 128) == 1667326771)
        v13 = 4;
      else
        v13 = *(unsigned int *)(a3 + 144);
      v14 = (unint64_t)*(double *)(a4 + 144) % v12;
      v15 = a5;
      if (v14 + a5 <= v12)
        v16 = a5;
      else
        v16 = v12 - v14;
      memcpy(&v8[v14 * v13], (const void *)(*(_QWORD *)a6 + *(unsigned int *)(a6 + 8)), v16 * v13);
      if (v15 != v16)
        memcpy(v8, (const void *)(v11 + v16 * v13), (v15 - v16) * v13);
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 1112) + 1856);
      if (v17 && (v18 = *(double *)(a4 + 144) + (double)a5, v18 > (double)*(unint64_t *)(v17 + 32)))
      {
        result = 0;
        *(_QWORD *)(v17 + 32) = (unint64_t)v18;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t ___ZN16HALS_IOA2Engine216TimelineWasResetEjj_block_invoke(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 1112) + 1856);
  if (v1)
  {
    *(_QWORD *)(v1 + 24) = 0;
    *(_QWORD *)(v1 + 32) = 0;
  }
  return result;
}

void AMCP::Meta::Driver::~Driver(AMCP::Meta::Driver *this)
{
  AMCP::Meta::Driver::~Driver(this);
  JUMPOUT(0x1B5E50688);
}

{
  void *v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)this = &off_1E6992598;
  *((_QWORD *)this + 3) = &unk_1E69925C0;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    v3 = *((_QWORD *)this + 8);
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v3 - 16);
      while ((void *)v3 != v2);
      v4 = (void *)*((_QWORD *)this + 7);
    }
    *((_QWORD *)this + 8) = v2;
    operator delete(v4);
  }
  *((_QWORD *)this + 3) = &off_1E697FC58;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

std::__shared_mutex_base *AMCP::Meta::Driver::shutdown(AMCP::Meta::Driver *this)
{
  AMCP::Log::Scope_Registry *v2;
  int v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  unint64_t *v6;
  unint64_t v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  NSObject *v10;
  os_log_type_t v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  std::__shared_weak_count *v18;
  NSObject *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t i;
  uint64_t v26;
  _opaque_pthread_t *v28;
  mach_port_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint8_t buf[8];
  _BYTE v33[10];
  __int16 v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v30, "com.apple.coreaudio", "AMCP");
  v3 = *(_DWORD *)(v30 + 16);
  switch(v3)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v12 = *(std::__shared_weak_count **)v33;
      v13 = **(NSObject ***)buf;
      if (*(_QWORD *)v33)
      {
        v14 = (unint64_t *)(*(_QWORD *)v33 + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        v16 = pthread_self();
        v17 = pthread_mach_thread_np(v16);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v17;
        *(_WORD *)v33 = 2080;
        *(_QWORD *)&v33[2] = "Meta_Driver_Core.cpp";
        v34 = 1024;
        v35 = 33;
        v10 = v13;
        v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v18 = *(std::__shared_weak_count **)v33;
      v19 = **(NSObject ***)buf;
      if (*(_QWORD *)v33)
      {
        v20 = (unint64_t *)(*(_QWORD *)v33 + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        v28 = pthread_self();
        v29 = pthread_mach_thread_np(v28);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v29;
        *(_WORD *)v33 = 2080;
        *(_QWORD *)&v33[2] = "Meta_Driver_Core.cpp";
        v34 = 1024;
        v35 = 33;
        _os_log_debug_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Tearing down Meta Driver", buf, 0x18u);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v4 = *(std::__shared_weak_count **)v33;
      v5 = **(NSObject ***)buf;
      if (*(_QWORD *)v33)
      {
        v6 = (unint64_t *)(*(_QWORD *)v33 + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v8 = pthread_self();
        v9 = pthread_mach_thread_np(v8);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v9;
        *(_WORD *)v33 = 2080;
        *(_QWORD *)&v33[2] = "Meta_Driver_Core.cpp";
        v34 = 1024;
        v35 = 33;
        v10 = v5;
        v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_1B57BA000, v10, v11, "%6u %32s:%-5d Tearing down Meta Driver", buf, 0x18u);
      }
      break;
  }
  v22 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v26 = *((_QWORD *)this + 7);
  for (i = *((_QWORD *)this + 8); i != v26; i = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](i - 16))
    ;
  *((_QWORD *)this + 8) = v26;
  return AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*((_QWORD *)this + 4) + 16), *((_DWORD *)this + 12));
}

void sub_1B5B83D3C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void `non-virtual thunk to'AMCP::Meta::Driver::~Driver(AMCP::Meta::Driver *this)
{
  AMCP::Meta::Driver::~Driver((AMCP::Meta::Driver *)((char *)this - 24));
}

{
  AMCP::Meta::Driver::~Driver((AMCP::Meta::Driver *)((char *)this - 24));
  JUMPOUT(0x1B5E50688);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<unsigned int ()(Aggregate_Device_Description const&,int)>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[63];
}

uint64_t std::__function::__value_func<unsigned int ()(Aggregate_Device_Description const&,int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(Aggregate_Device_Description const&,int)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  void (*v14)(_QWORD, _OWORD *, _QWORD, _QWORD);

  result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      v9 = *(_QWORD *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((_QWORD *)a3 + 3) = a3;
          (*(void (**)(_QWORD, AMCP::Thing *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a3);
        }
        else
        {
          *((_QWORD *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        }
      }
      result = 0;
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(Aggregate_Device_Description const&,int)>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<unsigned int ()(Aggregate_Device_Description const&,int)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(Aggregate_Device_Description const&,int)>>::dispatch;
LABEL_6:
      v10 = *(_QWORD **)(a2 + 24);
      if (v10 == (_QWORD *)a2)
      {
        v11 = 4;
        v10 = (_QWORD *)a2;
      }
      else
      {
        if (!v10)
          goto LABEL_18;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_18:
      result = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      v12 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(Aggregate_Device_Description const&,int)>>();
      result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<unsigned int ()(Aggregate_Device_Description const&,int)>>())
        return a2;
      else
        return 0;
    case 6:
      v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14)
        v14(0, v13, 0, 0);
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(unsigned int)>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  const std::type_info *v4;

  v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
  if ((v0 & 1) == 0)
  {
    v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    if (v3)
    {
      v1 = &AMCP::Implementation::get_type_marker<AMCP::Node_Type>(void)::s_type_marker;
    }
  }
  return v1[65];
}

double AMCP::Implementation::In_Place_Storage<std::function<void ()(unsigned int)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  double result;
  _QWORD *v7;
  uint64_t v8;
  _OWORD v9[2];
  void (*v10)(_QWORD, _OWORD *, _QWORD, _QWORD);

  switch(a1)
  {
    case 0:
      goto LABEL_4;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((_QWORD *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()>>::dispatch;
LABEL_4:
      v7 = *(_QWORD **)(a2 + 24);
      if (v7 == (_QWORD *)a2)
      {
        v8 = 4;
        v7 = (_QWORD *)a2;
      }
      else
      {
        if (!v7)
          goto LABEL_14;
        v8 = 5;
      }
      (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_14:
      *(_QWORD *)(a2 + 32) = 0;
      result = 0.0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      *a4 = AMCP::Implementation::get_type_marker<std::function<void ()>>();
      return result;
    case 4:
      AMCP::Implementation::get_type_marker<std::function<void ()>>();
      return result;
    case 6:
      v10 = 0;
      memset(v9, 0, sizeof(v9));
      AMCP::swap((AMCP::Thing *)v9, a3, a3);
      if (v10)
        v10(0, v9, 0, 0);
      return result;
    default:
      return result;
  }
}

_QWORD *std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1,std::allocator<AMCP::Meta::Driver::build_core(void)::$_1>,void ()(unsigned int)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6992728;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1,std::allocator<AMCP::Meta::Driver::build_core(void)::$_1>,void ()(unsigned int)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6992728;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1,std::allocator<AMCP::Meta::Driver::build_core(void)::$_1>,void ()(unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6992728;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1,std::allocator<AMCP::Meta::Driver::build_core(void)::$_1>,void ()(unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6992728;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1,std::allocator<AMCP::Meta::Driver::build_core(void)::$_1>,void ()(unsigned int)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1,std::allocator<AMCP::Meta::Driver::build_core(void)::$_1>,void ()(unsigned int)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1,std::allocator<AMCP::Meta::Driver::build_core(void)::$_1>,void ()(unsigned int)>::operator()(uint64_t a1, int *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11[4];
  __int128 v12;
  uint64_t v13[2];
  int v14;
  int v15;
  int v16;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v16 = *a2;
  v3 = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = &off_1E69A0170;
  v13[1] = (uint64_t)v3;
  *((_BYTE *)v3 + 24) = 0;
  v13[0] = (uint64_t)(v3 + 3);
  v14 = 0;
  v15 = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 32);
  v6 = *(_DWORD *)(v4 + 48);
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)v11, v13);
  *(_QWORD *)&v12 = a1 + 8;
  *((_QWORD *)&v12 + 1) = &v16;
  v18 = 0;
  v7 = (char *)operator new(0x38uLL);
  *(_QWORD *)v7 = &off_1E6992798;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v7 + 8), v11);
  *(_OWORD *)(v7 + 40) = v12;
  v18 = v7;
  AMCP::Core::Conductor::enqueue_config_change(v5, v6, v6, 16, (uint64_t)v17);
  v8 = v18;
  if (v18 == v17)
  {
    v9 = 4;
    v8 = v17;
    goto LABEL_5;
  }
  if (v18)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v11);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v13);
}

void sub_1B5B84458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v18;
  uint64_t v19;

  v18 = *(_QWORD **)(v16 - 48);
  if (v18 == v15)
  {
    v19 = 4;
    v18 = (_QWORD *)(v16 - 72);
  }
  else
  {
    if (!v18)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_6:
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1,std::allocator<AMCP::Meta::Driver::build_core(void)::$_1>,void ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Driver10build_coreEvE3$_1"))
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1,std::allocator<AMCP::Meta::Driver::build_core(void)::$_1>,void ()(unsigned int)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6992798;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6992798;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t *v2;
  char *v3;

  v2 = (uint64_t *)(a1 + 8);
  v3 = (char *)operator new(0x38uLL);
  *(_QWORD *)v3 = &off_1E6992798;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v3 + 8), v2);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a1 + 40);
  return v3;
}

void sub_1B5B845C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6992798;
  AMCP::Utility::Expiration_Check::Expiration_Check(a2 + 8, (uint64_t *)(a1 + 8));
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 8);
}

void std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  _BOOL8 is_valid;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  AMCP::Log::Scope_Registry *v22;
  uint64_t v23;
  AMCP::Log::Scope_Registry *v24;
  int v25;
  std::__shared_weak_count *v26;
  NSObject *v27;
  unint64_t *v28;
  unint64_t v29;
  _opaque_pthread_t *v30;
  mach_port_t v31;
  int v32;
  NSObject *v33;
  os_log_type_t v34;
  std::__shared_weak_count *v35;
  NSObject *v36;
  unint64_t *v37;
  unint64_t v38;
  _opaque_pthread_t *v39;
  mach_port_t v40;
  int v41;
  std::__shared_weak_count *v42;
  NSObject *v43;
  unint64_t *v44;
  unint64_t v45;
  _opaque_pthread_t *v46;
  mach_port_t v47;
  int v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  NSObject *v59;
  unint64_t *v60;
  unint64_t v61;
  _opaque_pthread_t *v62;
  mach_port_t v63;
  void **v64;
  std::__shared_weak_count *v65;
  uint8_t buf[8];
  _BYTE v67[10];
  __int16 v68;
  int v69;
  __int16 v70;
  const char *v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  is_valid = AMCP::Utility::Expiration_Check::is_valid((AMCP::Utility::Expiration_Check *)(a1 + 8));
  if (!is_valid)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_valid);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v58 = *(std::__shared_weak_count **)v67;
    v59 = **(NSObject ***)buf;
    if (*(_QWORD *)v67)
    {
      v60 = (unint64_t *)(*(_QWORD *)v67 + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
    {
      v62 = pthread_self();
      v63 = pthread_mach_thread_np(v62);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v63;
      *(_WORD *)v67 = 2080;
      *(_QWORD *)&v67[2] = "Meta_Driver_Core.cpp";
      v68 = 1024;
      v69 = 107;
      v70 = 2080;
      v71 = "expiration_check.is_valid()";
      _os_log_error_impl(&dword_1B57BA000, v59, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s caller has gone out of scope", buf, 0x22u);
    }
    abort();
  }
  v3 = **(_QWORD **)(a1 + 40);
  v5 = *(_QWORD **)(v3 + 56);
  v4 = *(_QWORD **)(v3 + 64);
  if (v5 != v4)
  {
    while (*(_DWORD *)(*v5 + 40) != **(_DWORD **)(a1 + 48))
    {
      v5 += 2;
      if (v5 == v4)
        return;
    }
    if (v5 != v4)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*v5 + 8) + 32);
      v7 = *(_QWORD *)(*v5 + 168);
      *(_QWORD *)buf = v6 + 1352;
      v67[0] = 1;
      std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v6 + 1352));
      if (!*(_BYTE *)(v6 + 1520))
        goto LABEL_29;
      v8 = *(_QWORD *)(v6 + 1528);
      v9 = *(_QWORD *)(v6 + 1536);
      while (1)
      {
        if (v8 == v9)
          goto LABEL_29;
        v10 = *(_QWORD **)(v8 + 16);
        if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::find(*(_QWORD **)(v8 + 8), v10, v7))
        {
          break;
        }
        v8 += 40;
      }
      v12 = v11;
      if (v11 + 5 != v10)
      {
        do
        {
          v13 = v12 + 5;
          std::__memberwise_forward_assign[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,0ul,1ul>(v12, v12 + 5);
          v14 = v12 + 10;
          v12 += 5;
        }
        while (v14 != v10);
        v10 = *(_QWORD **)(v8 + 16);
        v12 = v13;
      }
      while (1)
      {
        if (v10 == v12)
        {
          *(_QWORD *)(v8 + 16) = v12;
          if (*(_QWORD **)(v8 + 8) == v12)
          {
            v17 = v8 + 40;
            v18 = *(_QWORD *)(v6 + 1536);
            if (v8 + 40 != v18)
            {
              do
              {
                v8 = v17;
                *(_DWORD *)(v17 - 40) = *(_DWORD *)v17;
                v19 = *(_OWORD *)(v17 - 32);
                *(_OWORD *)(v17 - 32) = *(_OWORD *)(v17 + 8);
                *(_OWORD *)(v17 + 8) = v19;
                v20 = *(_QWORD *)(v17 - 16);
                *(_QWORD *)(v8 - 16) = *(_QWORD *)(v8 + 24);
                *(_QWORD *)(v8 + 24) = v20;
                v17 = v8 + 40;
              }
              while (v8 + 40 != v18);
              v17 = *(_QWORD *)(v6 + 1536);
            }
            if (v17 != v8)
            {
              do
              {
                v21 = v17 - 40;
                v64 = (void **)(v17 - 32);
                std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&v64);
                v17 = v21;
              }
              while (v21 != v8);
            }
            *(_QWORD *)(v6 + 1536) = v8;
          }
LABEL_29:
          v22 = (AMCP::Log::Scope_Registry *)std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)buf);
          v23 = *v5;
          AMCP::Log::Scope_Registry::get(v22);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v64, "com.apple.coreaudio", "AMCP");
          v25 = *((_DWORD *)v64 + 4);
          switch(v25)
          {
            case 3:
              AMCP::Log::Scope_Registry::get(v24);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
              v42 = *(std::__shared_weak_count **)v67;
              v43 = **(NSObject ***)buf;
              if (*(_QWORD *)v67)
              {
                v44 = (unint64_t *)(*(_QWORD *)v67 + 8);
                do
                  v45 = __ldaxr(v44);
                while (__stlxr(v45 - 1, v44));
                if (!v45)
                {
                  ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                  std::__shared_weak_count::__release_weak(v42);
                }
              }
              if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
              {
                v46 = pthread_self();
                v47 = pthread_mach_thread_np(v46);
                v48 = *(_DWORD *)(v23 + 40);
                *(_DWORD *)buf = 67109890;
                *(_DWORD *)&buf[4] = v47;
                *(_WORD *)v67 = 2080;
                *(_QWORD *)&v67[2] = "Meta_Device_Core.cpp";
                v68 = 1024;
                v69 = 56;
                v70 = 1024;
                LODWORD(v71) = v48;
                v33 = v43;
                v34 = OS_LOG_TYPE_INFO;
LABEL_53:
                _os_log_impl(&dword_1B57BA000, v33, v34, "%6u %32s:%-5d Tearing down Device with object id %u", buf, 0x1Eu);
              }
              break;
            case 2:
              AMCP::Log::Scope_Registry::get(v24);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
              v35 = *(std::__shared_weak_count **)v67;
              v36 = **(NSObject ***)buf;
              if (*(_QWORD *)v67)
              {
                v37 = (unint64_t *)(*(_QWORD *)v67 + 8);
                do
                  v38 = __ldaxr(v37);
                while (__stlxr(v38 - 1, v37));
                if (!v38)
                {
                  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                  std::__shared_weak_count::__release_weak(v35);
                }
              }
              if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
              {
                v39 = pthread_self();
                v40 = pthread_mach_thread_np(v39);
                v41 = *(_DWORD *)(v23 + 40);
                *(_DWORD *)buf = 67109890;
                *(_DWORD *)&buf[4] = v40;
                *(_WORD *)v67 = 2080;
                *(_QWORD *)&v67[2] = "Meta_Device_Core.cpp";
                v68 = 1024;
                v69 = 56;
                v70 = 1024;
                LODWORD(v71) = v41;
                _os_log_debug_impl(&dword_1B57BA000, v36, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Tearing down Device with object id %u", buf, 0x1Eu);
              }
              break;
            case 1:
              AMCP::Log::Scope_Registry::get(v24);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
              v26 = *(std::__shared_weak_count **)v67;
              v27 = **(NSObject ***)buf;
              if (*(_QWORD *)v67)
              {
                v28 = (unint64_t *)(*(_QWORD *)v67 + 8);
                do
                  v29 = __ldaxr(v28);
                while (__stlxr(v29 - 1, v28));
                if (!v29)
                {
                  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                  std::__shared_weak_count::__release_weak(v26);
                }
              }
              if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
              {
                v30 = pthread_self();
                v31 = pthread_mach_thread_np(v30);
                v32 = *(_DWORD *)(v23 + 40);
                *(_DWORD *)buf = 67109890;
                *(_DWORD *)&buf[4] = v31;
                *(_WORD *)v67 = 2080;
                *(_QWORD *)&v67[2] = "Meta_Device_Core.cpp";
                v68 = 1024;
                v69 = 56;
                v70 = 1024;
                LODWORD(v71) = v32;
                v33 = v27;
                v34 = OS_LOG_TYPE_DEFAULT;
                goto LABEL_53;
              }
              break;
          }
          v49 = v65;
          if (v65)
          {
            p_shared_owners = (unint64_t *)&v65->__shared_owners_;
            do
              v51 = __ldaxr(p_shared_owners);
            while (__stlxr(v51 - 1, p_shared_owners));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
          AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*(_QWORD *)(v23 + 8) + 16), *(_DWORD *)(v23 + 40));
          v52 = (uint64_t)(v5 + 2);
          v53 = *(_QWORD **)(v3 + 64);
          if (v5 + 2 != v53)
          {
            do
            {
              v54 = *(_OWORD *)v52;
              *(_QWORD *)v52 = 0;
              *(_QWORD *)(v52 + 8) = 0;
              v55 = (std::__shared_weak_count *)v5[1];
              *(_OWORD *)v5 = v54;
              if (v55)
              {
                v56 = (unint64_t *)&v55->__shared_owners_;
                do
                  v57 = __ldaxr(v56);
                while (__stlxr(v57 - 1, v56));
                if (!v57)
                {
                  ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                  std::__shared_weak_count::__release_weak(v55);
                }
              }
              v52 += 16;
              v5 += 2;
            }
            while ((_QWORD *)v52 != v53);
            v52 = *(_QWORD *)(v3 + 64);
          }
          while ((_QWORD *)v52 != v5)
          {
            v52 -= 16;
            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v52);
          }
          *(_QWORD *)(v3 + 64) = v5;
          return;
        }
        v15 = (_QWORD *)*(v10 - 1);
        if (v10 - 4 == v15)
        {
          v15 = v10 - 4;
          v16 = 4;
        }
        else
        {
          if (!v15)
            goto LABEL_20;
          v16 = 5;
        }
        (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_20:
        v10 -= 5;
      }
    }
  }
}

void sub_1B5B84CD0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN4AMCP4Meta6Driver10build_coreEvENK3$_1clEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0,std::allocator<AMCP::Meta::Driver::build_core(void)::$_0>,unsigned int ()(Aggregate_Device_Description const&,int)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6992618;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0,std::allocator<AMCP::Meta::Driver::build_core(void)::$_0>,unsigned int ()(Aggregate_Device_Description const&,int)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6992618;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0,std::allocator<AMCP::Meta::Driver::build_core(void)::$_0>,unsigned int ()(Aggregate_Device_Description const&,int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6992618;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0,std::allocator<AMCP::Meta::Driver::build_core(void)::$_0>,unsigned int ()(Aggregate_Device_Description const&,int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6992618;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0,std::allocator<AMCP::Meta::Driver::build_core(void)::$_0>,unsigned int ()(Aggregate_Device_Description const&,int)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0,std::allocator<AMCP::Meta::Driver::build_core(void)::$_0>,unsigned int ()(Aggregate_Device_Description const&,int)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0,std::allocator<AMCP::Meta::Driver::build_core(void)::$_0>,unsigned int ()(Aggregate_Device_Description const&,int)>::operator()(uint64_t a1, uint64_t a2, int *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  char *v9;
  __int128 v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15[4];
  __int128 v16;
  __int128 v17;
  uint64_t v18[2];
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v22 = *a3;
  v21 = 0;
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a1 + 8);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_1E69A0170;
  v18[1] = (uint64_t)v5;
  *((_BYTE *)v5 + 24) = 0;
  v18[0] = (uint64_t)(v5 + 3);
  v19 = 0;
  v20 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 32);
  v8 = *(_DWORD *)(v6 + 48);
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)v15, v18);
  *(_QWORD *)&v16 = a1 + 8;
  *((_QWORD *)&v16 + 1) = a2;
  *(_QWORD *)&v17 = &v22;
  *((_QWORD *)&v17 + 1) = &v21;
  v24 = 0;
  v9 = (char *)operator new(0x48uLL);
  *(_QWORD *)v9 = &off_1E6992698;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v9 + 8), v15);
  v10 = v17;
  *(_OWORD *)(v9 + 40) = v16;
  *(_OWORD *)(v9 + 56) = v10;
  v24 = v9;
  AMCP::Core::Conductor::enqueue_config_change(v7, v8, v8, 16, (uint64_t)v23);
  v11 = v24;
  if (v24 == v23)
  {
    v12 = 4;
    v11 = v23;
    goto LABEL_5;
  }
  if (v24)
  {
    v12 = 5;
LABEL_5:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v15);
  v13 = v21;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v18);
  return v13;
}

void sub_1B5B84FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;

  v20 = *(_QWORD **)(v18 - 64);
  if (v20 == v17)
  {
    v21 = 4;
    v20 = (_QWORD *)(v18 - 88);
  }
  else
  {
    if (!v20)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_6:
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0,std::allocator<AMCP::Meta::Driver::build_core(void)::$_0>,unsigned int ()(Aggregate_Device_Description const&,int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Driver10build_coreEvE3$_0"))
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0,std::allocator<AMCP::Meta::Driver::build_core(void)::$_0>,unsigned int ()(Aggregate_Device_Description const&,int)>::target_type()
{
}

_QWORD *std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6992698;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6992698;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

char *std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t *v2;
  char *v3;

  v2 = (uint64_t *)(a1 + 8);
  v3 = (char *)operator new(0x48uLL);
  *(_QWORD *)v3 = &off_1E6992698;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v3 + 8), v2);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a1 + 56);
  return v3;
}

void sub_1B5B85124(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6992698;
  AMCP::Utility::Expiration_Check::Expiration_Check(a2 + 8, (uint64_t *)(a1 + 8));
  result = *(__n128 *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 8);
}

void std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  _BOOL8 is_valid;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  CFTypeRef v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *shared_owners;
  unint64_t v30;
  unint64_t *p_shared_weak_owners;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  AMCP::Log::Scope_Registry *v39;
  AMCP::Log::Scope_Registry *v40;
  int v41;
  std::__shared_weak_count *v42;
  NSObject *v43;
  unint64_t *v44;
  unint64_t v45;
  _opaque_pthread_t *v46;
  mach_port_t v47;
  const __CFString *v48;
  void **v49;
  int v50;
  std::__shared_weak_count *v51;
  NSObject *v52;
  unint64_t *v53;
  unint64_t v54;
  _opaque_pthread_t *v55;
  mach_port_t v56;
  void **v57;
  int v58;
  std::__shared_weak_count *v59;
  NSObject *v60;
  unint64_t *v61;
  unint64_t v62;
  _opaque_pthread_t *v63;
  mach_port_t v64;
  void **v65;
  int v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  int v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  const __CFString *v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  _BYTE *v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  int v125;
  _DWORD *v126;
  unint64_t v127;
  BOOL v128;
  _DWORD *v129;
  unint64_t v130;
  __int128 *v131;
  unint64_t v132;
  _DWORD *v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  _DWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  int v150;
  int64_t v151;
  _DWORD *v152;
  uint64_t v153;
  unint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  _QWORD *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  _QWORD *v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  __int128 v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  _QWORD *v185;
  unint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  char *v193;
  char *v194;
  char *v195;
  __int128 v196;
  int64x2_t v197;
  _OWORD *v198;
  uint64_t v199;
  void *v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  NSObject *v207;
  unint64_t *v208;
  unint64_t v209;
  _opaque_pthread_t *v210;
  mach_port_t v211;
  std::runtime_error *v212;
  std::runtime_error *v213;
  std::runtime_error *exception;
  uint64_t v215;
  int v216;
  uint64_t v217;
  std::__shared_weak_count *v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  __int128 v221;
  _QWORD *v222;
  uint64_t v223;
  __int128 v224;
  _QWORD *v225;
  __int16 v226;
  uint64_t v227;
  char v228;
  _QWORD *v229;
  _QWORD *v230;
  void *__p[2];
  __int128 v232;
  uint64_t v233;
  _QWORD v234[3];
  _QWORD *v235;
  const __CFString *v236;
  _BYTE v237[24];
  _BYTE *v238;
  _BYTE buf[40];
  uint64_t v240;

  v240 = *MEMORY[0x1E0C80C00];
  is_valid = AMCP::Utility::Expiration_Check::is_valid((AMCP::Utility::Expiration_Check *)(a1 + 8));
  if (!is_valid)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_valid);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v206 = *(std::__shared_weak_count **)&buf[8];
    v207 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v208 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v209 = __ldaxr(v208);
      while (__stlxr(v209 - 1, v208));
      if (!v209)
      {
        ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
        std::__shared_weak_count::__release_weak(v206);
      }
    }
    if (os_log_type_enabled(v207, OS_LOG_TYPE_ERROR))
    {
      v210 = pthread_self();
      v211 = pthread_mach_thread_np(v210);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v211;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Meta_Driver_Core.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 91;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "expiration_check.is_valid()";
      _os_log_error_impl(&dword_1B57BA000, v207, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s caller has gone out of scope", buf, 0x22u);
    }
    abort();
  }
  v3 = *(_QWORD *)(a1 + 48);
  v4 = **(_QWORD **)(a1 + 40);
  v216 = **(_DWORD **)(a1 + 56);
  v5 = *(unint64_t **)(v4 + 40);
  __p[0] = *(void **)(v4 + 32);
  __p[1] = v5;
  if (v5)
  {
    v6 = v5 + 1;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (char *)operator new(0x170uLL);
  v9 = (std::__shared_weak_count *)v8;
  *(_OWORD *)(v8 + 8) = 0u;
  v10 = (unint64_t *)(v8 + 8);
  *(_QWORD *)v8 = &off_1E6992828;
  v11 = (uint64_t)(v8 + 24);
  v12 = *(_OWORD *)__p;
  *(_OWORD *)buf = *(_OWORD *)__p;
  *(_OWORD *)__p = 0u;
  v13 = *(_DWORD *)(v4 + 48);
  if (*((_QWORD *)&v12 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_OWORD *)(v8 + 136) = 0uLL;
  *((_QWORD *)v8 + 4) = v12;
  *((_QWORD *)v8 + 6) = 0;
  *((_QWORD *)v8 + 7) = 0;
  *((_QWORD *)v8 + 5) = *((_QWORD *)&v12 + 1);
  *((_QWORD *)v8 + 3) = &off_1E6970570;
  *((_DWORD *)v8 + 16) = 0;
  *((_DWORD *)v8 + 17) = v13;
  *(_OWORD *)(v8 + 72) = 0uLL;
  *(_OWORD *)(v8 + 104) = 0uLL;
  *((_QWORD *)v8 + 24) = 0;
  *(_OWORD *)(v8 + 88) = 0uLL;
  *(_OWORD *)(v8 + 120) = 0uLL;
  *(_OWORD *)(v8 + 152) = 0uLL;
  *(_OWORD *)(v8 + 168) = 0uLL;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)(v8 + 200));
  v215 = a1;
  v16 = operator new(0x60uLL);
  v16[1] = 0;
  v16[2] = 0;
  *v16 = &off_1E69705D8;
  v17 = *(CFTypeRef *)v3;
  if (*(_QWORD *)v3)
    CFRetain(*(CFTypeRef *)v3);
  v16[3] = v17;
  v18 = *(_QWORD *)(v3 + 8);
  if (v18)
    CFRetain(*(CFTypeRef *)(v3 + 8));
  v16[5] = 0;
  v16[4] = v18;
  v16[6] = 0;
  v16[7] = 0;
  std::vector<Audio_Sub_Device_Description>::__init_with_size[abi:ne180100]<Audio_Sub_Device_Description*,Audio_Sub_Device_Description*>(v16 + 5, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v3 + 24) - *(_QWORD *)(v3 + 16)) >> 3));
  v19 = *(_QWORD *)(v3 + 40);
  if (v19)
    CFRetain(*(CFTypeRef *)(v3 + 40));
  v16[8] = v19;
  v20 = *(_QWORD *)(v3 + 48);
  if (v20)
    CFRetain(*(CFTypeRef *)(v3 + 48));
  v16[9] = v20;
  v21 = *(_QWORD *)(v3 + 56);
  if (v21)
    CFRetain(*(CFTypeRef *)(v3 + 56));
  v16[10] = v21;
  v22 = *(_QWORD *)(v3 + 64);
  if (v22)
    CFRetain(*(CFTypeRef *)(v3 + 64));
  v16[11] = v22;
  *(_QWORD *)&v23 = v16 + 3;
  *((_QWORD *)&v23 + 1) = v16;
  shared_weak_owners = (std::__shared_weak_count *)v9[4].__shared_weak_owners_;
  *(_OWORD *)&v9[4].__shared_owners_ = v23;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  AMCP::Meta::Device::update_cached_properties_from_composition((AMCP::Meta::Device *)v11);
  if (*(_QWORD *)&buf[8])
  {
    v27 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&buf[8] + 16))(*(_QWORD *)&buf[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  v217 = v11;
  v218 = v9;
  shared_owners = (std::__shared_weak_count *)v9[2].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      goto LABEL_43;
    do
      v30 = __ldxr(v10);
    while (__stxr(v30 + 1, v10));
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v32 = __ldxr(p_shared_weak_owners);
    while (__stxr(v32 + 1, p_shared_weak_owners));
    v9[2].__vftable = (std::__shared_weak_count_vtbl *)v11;
    v9[2].__shared_owners_ = (uint64_t)v9;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v33 = __ldxr(v10);
    while (__stxr(v33 + 1, v10));
    v34 = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    v9[2].__vftable = (std::__shared_weak_count_vtbl *)v11;
    v9[2].__shared_owners_ = (uint64_t)v9;
  }
  do
    v36 = __ldaxr(v10);
  while (__stlxr(v36 - 1, v10));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_43:
  if (__p[1])
  {
    v37 = (unint64_t *)((char *)__p[1] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      (*(void (**)(void *))(*(_QWORD *)__p[1] + 16))(__p[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[1]);
    }
  }
  v39 = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(*(_QWORD *)(v11 + 8)
                                                                                                 + 16));
  *(_DWORD *)(v11 + 40) = (_DWORD)v39;
  AMCP::Log::Scope_Registry::get(v39);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v223, "com.apple.coreaudio", "AMCP");
  v41 = *(_DWORD *)(v223 + 16);
  switch(v41)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v40);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v59 = *(std::__shared_weak_count **)&buf[8];
      v60 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v61 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
      {
        v63 = pthread_self();
        v64 = pthread_mach_thread_np(v63);
        Aggregate_Device_Description::get_uid(&v236, **(const void ***)(v11 + 80));
        v48 = v236;
        if (!v236)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v236);
        if ((SBYTE7(v232) & 0x80u) == 0)
          v65 = __p;
        else
          v65 = (void **)__p[0];
        v66 = *(_DWORD *)(v11 + 40);
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v64;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "Meta_Device_Core.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 81;
        *(_WORD *)&buf[24] = 2080;
        *(_QWORD *)&buf[26] = v65;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = v66;
        _os_log_impl(&dword_1B57BA000, v60, OS_LOG_TYPE_INFO, "%6u %32s:%-5d Creating device '%s' with object id %u", buf, 0x28u);
        if (SBYTE7(v232) < 0)
          operator delete(__p[0]);
        goto LABEL_89;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v40);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v51 = *(std::__shared_weak_count **)&buf[8];
      v52 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v53 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
      {
        v55 = pthread_self();
        v56 = pthread_mach_thread_np(v55);
        Aggregate_Device_Description::get_uid(&v236, **(const void ***)(v11 + 80));
        v48 = v236;
        if (!v236)
        {
          v212 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v212, "Could not construct");
          __cxa_throw(v212, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v236);
        if ((SBYTE7(v232) & 0x80u) == 0)
          v57 = __p;
        else
          v57 = (void **)__p[0];
        v58 = *(_DWORD *)(v11 + 40);
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v56;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "Meta_Device_Core.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 81;
        *(_WORD *)&buf[24] = 2080;
        *(_QWORD *)&buf[26] = v57;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = v58;
        _os_log_debug_impl(&dword_1B57BA000, v52, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Creating device '%s' with object id %u", buf, 0x28u);
        if (SBYTE7(v232) < 0)
          operator delete(__p[0]);
        goto LABEL_89;
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v40);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v42 = *(std::__shared_weak_count **)&buf[8];
      v43 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v44 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        v46 = pthread_self();
        v47 = pthread_mach_thread_np(v46);
        Aggregate_Device_Description::get_uid(&v236, **(const void ***)(v11 + 80));
        v48 = v236;
        if (!v236)
        {
          v213 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v213, "Could not construct");
          __cxa_throw(v213, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v236);
        if ((SBYTE7(v232) & 0x80u) == 0)
          v49 = __p;
        else
          v49 = (void **)__p[0];
        v50 = *(_DWORD *)(v11 + 40);
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v47;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "Meta_Device_Core.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 81;
        *(_WORD *)&buf[24] = 2080;
        *(_QWORD *)&buf[26] = v49;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = v50;
        _os_log_impl(&dword_1B57BA000, v43, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d Creating device '%s' with object id %u", buf, 0x28u);
        if (SBYTE7(v232) < 0)
          operator delete(__p[0]);
LABEL_89:
        CFRelease(v48);
      }
      break;
  }
  v67 = (std::__shared_weak_count *)v224;
  if ((_QWORD)v224)
  {
    v68 = (unint64_t *)(v224 + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  memset(buf, 0, 32);
  *(_DWORD *)&buf[32] = 1065353216;
  LODWORD(v223) = *(_DWORD *)(v11 + 40);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (int *)&v223, 1.58366009e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)__p[0] + 10, __p);
  v70 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v71 = (unint64_t *)((char *)__p[1] + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  LODWORD(v223) = 1633773415;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (int *)&v223, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)__p[0] + 10, __p);
  v73 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v74 = (unint64_t *)((char *)__p[1] + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  LODWORD(v223) = 1633773415;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (int *)&v223, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)__p[0] + 10, __p);
  v76 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v77 = (unint64_t *)((char *)__p[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  LODWORD(v223) = *(_DWORD *)(v11 + 44);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (int *)&v223, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)__p[0] + 10, __p);
  v79 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v80 = (unint64_t *)((char *)__p[1] + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v236, "com.apple.audio.Meta-Driver");
  v223 = 0x676C6F626F706C67;
  LODWORD(v224) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)__p, (uint64_t)&v223, v236);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)__p[0] + 10, __p);
  v82 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v83 = (unint64_t *)((char *)__p[1] + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  if (v236)
    CFRelease(v236);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v236, "Apple Inc.");
  v223 = 0x676C6F626C6D616BLL;
  LODWORD(v224) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)__p, (uint64_t)&v223, v236);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)__p[0] + 10, __p);
  v85 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v86 = (unint64_t *)((char *)__p[1] + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  if (v236)
    CFRelease(v236);
  LOBYTE(v223) = 0;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (char *)&v223, 1.58366008e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)__p[0] + 10, __p);
  v88 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v89 = (unint64_t *)((char *)__p[1] + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  LODWORD(v223) = 1735554416;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (int *)&v223, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)__p[0] + 10, __p);
  v91 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v92 = (unint64_t *)((char *)__p[1] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  LODWORD(v223) = v216;
  AMCP::Core::Operation_Utilities::make_typed_property<int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (int *)&v223, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)__p[0] + 10, __p);
  v94 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v95 = (unint64_t *)((char *)__p[1] + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = *(_DWORD *)(v11 + 40);
  __p[0] = *(void **)(*(_QWORD *)(v11 + 8) + 16);
  LODWORD(__p[1]) = v97;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>(&v223, 0, (__int128 *)__p, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)(v223 + 40), &v223);
  v98 = (std::__shared_weak_count *)v224;
  if ((_QWORD)v224)
  {
    v99 = (unint64_t *)(v224 + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  AMCP::Meta::Device::update_core_common(v11, (uint64_t)buf);
  AMCP::Core::Broker::make_core((AMCP::Core::Core **)__p, *(std::__shared_mutex_base **)(*(_QWORD *)(v11 + 8) + 16), (uint64_t)buf, *(unsigned int *)(v11 + 40));
  v101 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v102 = (unint64_t *)((char *)__p[1] + 8);
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(*(_QWORD **)&buf[16]);
  v104 = *(void **)buf;
  *(_QWORD *)buf = 0;
  if (v104)
    operator delete(v104);
  AMCP::Meta::Device::update_subdevices((AMCP::Meta::Device *)v11);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v219, *(_QWORD *)(v11 + 24), *(std::__shared_weak_count **)(v11 + 32));
  v105 = *(_QWORD *)(*(_QWORD *)(v11 + 8) + 32);
  v107 = v219;
  v106 = v220;
  if (v220)
  {
    v108 = (unint64_t *)&v220->__shared_owners_;
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 1, v108));
  }
  v234[0] = &off_1E69715A8;
  v234[1] = v107;
  v234[2] = v106;
  v235 = v234;
  v227 = v105 + 1352;
  v228 = 1;
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v105 + 1352));
  if (!*(_BYTE *)(v105 + 1520))
  {
    v110 = 0;
    goto LABEL_229;
  }
  do
    v110 = (const __CFString *)__ldaxr(&AMCP::Observer::Implementation::get_next_token(void)::s_next_token);
  while (__stlxr((unint64_t)&v110->isa + 1, &AMCP::Observer::Implementation::get_next_token(void)::s_next_token));
  if (!AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(*(_DWORD **)(v105 + 1528), *(_DWORD **)(v105 + 1536), *(_DWORD *)(v105 + 1560)))
  {
    v236 = v110;
    v113 = v237;
    v115 = (uint64_t)v235;
    if (v235)
    {
      if (v235 == v234)
      {
        v238 = v237;
        (*(void (**)(_QWORD *, _BYTE *))(v234[0] + 24))(v234, v237);
LABEL_177:
        v221 = 0uLL;
        v222 = 0;
        __p[0] = &v221;
        LOBYTE(__p[1]) = 0;
        v122 = operator new(0x28uLL);
        *(_QWORD *)&v221 = v122;
        *((_QWORD *)&v221 + 1) = v122;
        v222 = v122 + 5;
        v229 = v122;
        v230 = v122;
        *(_QWORD *)buf = &v222;
        *(_QWORD *)&buf[8] = &v229;
        *(_QWORD *)&buf[16] = &v230;
        buf[24] = 0;
        *v122 = v236;
        std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v122 + 1), (uint64_t)v237);
        v230 += 5;
        v123 = v230;
        buf[24] = 1;
        std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)buf);
        v124 = v222;
        *((_QWORD *)&v221 + 1) = v123;
        v222 = 0;
        LODWORD(v223) = *(_DWORD *)(v105 + 1560);
        v125 = v223;
        v224 = v221;
        v221 = 0uLL;
        v225 = v124;
        v126 = *(_DWORD **)(v105 + 1528);
        v127 = *(_QWORD *)(v105 + 1536);
        v128 = AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(v126, (_DWORD *)v127, v223);
        v130 = (unint64_t)v129;
        if (v128)
        {
          *v129 = v125;
          v131 = &v224;
        }
        else
        {
          v132 = *(_QWORD *)(v105 + 1544);
          if (v127 >= v132)
          {
            v138 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v127 - (_QWORD)v126) >> 3) + 1;
            if (v138 > 0x666666666666666)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v139 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v132 - (_QWORD)v126) >> 3);
            if (2 * v139 > v138)
              v138 = 2 * v139;
            if (v139 >= 0x333333333333333)
              v140 = 0x666666666666666;
            else
              v140 = v138;
            v233 = v105 + 1544;
            if (v140)
              v140 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v140);
            else
              v141 = 0;
            v151 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v130 - (_QWORD)v126) >> 3);
            v152 = (_DWORD *)(v140 + 8 * ((uint64_t)(v130 - (_QWORD)v126) >> 3));
            __p[0] = (void *)v140;
            __p[1] = v152;
            *(_QWORD *)&v232 = v152;
            *((_QWORD *)&v232 + 1) = v140 + 40 * v141;
            if (v151 == v141)
            {
              if ((uint64_t)(v130 - (_QWORD)v126) < 1)
              {
                if ((_DWORD *)v130 == v126)
                  v154 = 1;
                else
                  v154 = 0x999999999999999ALL * ((uint64_t)(v130 - (_QWORD)v126) >> 3);
                *(_QWORD *)&buf[32] = v233;
                v155 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v154);
                v156 = &v155[40 * (v154 >> 2)];
                *(_QWORD *)buf = v155;
                *(_QWORD *)&buf[8] = v156;
                *(_QWORD *)&buf[16] = v156;
                *(_QWORD *)&buf[24] = &v155[40 * v157];
                v158 = __p[1];
                if ((void *)v232 != __p[1])
                {
                  v159 = &v156[v232 - (unint64_t)__p[1]];
                  do
                  {
                    *(_DWORD *)v156 = *(_DWORD *)v158;
                    *((_QWORD *)v156 + 2) = 0;
                    *((_QWORD *)v156 + 3) = 0;
                    *((_QWORD *)v156 + 1) = 0;
                    *((_QWORD *)v156 + 1) = v158[1];
                    v158[1] = 0;
                    v160 = *((_QWORD *)v156 + 2);
                    *((_QWORD *)v156 + 2) = v158[2];
                    v158[2] = v160;
                    v161 = *((_QWORD *)v156 + 3);
                    *((_QWORD *)v156 + 3) = v158[3];
                    v158[3] = v161;
                    v156 += 40;
                    v158 += 5;
                  }
                  while (v156 != v159);
                  v156 = v159;
                }
                *(_QWORD *)&buf[16] = v156;
                v162 = *(_OWORD *)__p;
                v163 = v232;
                *(_OWORD *)__p = *(_OWORD *)buf;
                v232 = *(_OWORD *)&buf[16];
                *(_OWORD *)buf = v162;
                *(_OWORD *)&buf[16] = v163;
                std::__split_buffer<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>>>>::~__split_buffer((uint64_t)buf);
                v152 = (_DWORD *)v232;
              }
              else
              {
                if (v151 >= -1)
                  v153 = v151 + 1;
                else
                  v153 = v151 + 2;
                v152 -= 10 * (v153 >> 1);
                __p[1] = v152;
                *(_QWORD *)&v232 = v152;
              }
            }
            *v152 = v223;
            *((_QWORD *)v152 + 2) = 0;
            *((_QWORD *)v152 + 3) = 0;
            *((_QWORD *)v152 + 1) = 0;
            std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>::__init_with_size[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*>((_QWORD *)v152 + 1, (_QWORD *)v224, *((_QWORD **)&v224 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v224 + 1) - v224) >> 3));
            *((_WORD *)v152 + 16) = v226;
            v164 = __p[1];
            v165 = v232 + 40;
            *(_QWORD *)&v232 = v232 + 40;
            v166 = *(_QWORD **)(v105 + 1528);
            if ((_QWORD *)v130 != v166)
            {
              v167 = (_QWORD *)v130;
              do
              {
                v168 = *((_DWORD *)v167 - 10);
                v167 -= 5;
                *((_DWORD *)v164 - 10) = v168;
                v164 -= 5;
                v164[2] = 0;
                v164[3] = 0;
                v164[1] = 0;
                v164[1] = v167[1];
                v167[1] = 0;
                v169 = v164[2];
                v164[2] = v167[2];
                v167[2] = v169;
                v170 = v164[3];
                v164[3] = v167[3];
                v167[3] = v170;
              }
              while (v167 != v166);
              v165 = v232;
            }
            __p[1] = v164;
            v171 = *(_QWORD *)(v105 + 1536);
            if (v130 != v171)
            {
              do
              {
                *(_DWORD *)v165 = *(_DWORD *)v130;
                *(_QWORD *)(v165 + 16) = 0;
                *(_QWORD *)(v165 + 24) = 0;
                *(_QWORD *)(v165 + 8) = 0;
                *(_QWORD *)(v165 + 8) = *(_QWORD *)(v130 + 8);
                *(_QWORD *)(v130 + 8) = 0;
                v172 = *(_QWORD *)(v165 + 16);
                *(_QWORD *)(v165 + 16) = *(_QWORD *)(v130 + 16);
                *(_QWORD *)(v130 + 16) = v172;
                v173 = *(_QWORD *)(v165 + 24);
                *(_QWORD *)(v165 + 24) = *(_QWORD *)(v130 + 24);
                *(_QWORD *)(v130 + 24) = v173;
                v165 += 40;
                v130 += 40;
              }
              while (v130 != v171);
              v164 = __p[1];
            }
            v174 = *(void **)(v105 + 1528);
            *(_QWORD *)(v105 + 1528) = v164;
            __p[1] = v174;
            *(_QWORD *)&v232 = v165;
            v175 = *(_OWORD *)(v105 + 1536);
            *(_QWORD *)(v105 + 1536) = v165;
            v176 = __p[1];
            *(_QWORD *)(v105 + 1544) = *((_QWORD *)&v232 + 1);
            v232 = v175;
            __p[0] = v176;
            std::__split_buffer<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>>>>::~__split_buffer((uint64_t)__p);
            goto LABEL_223;
          }
          if (v129 == (_DWORD *)v127)
          {
            *(_DWORD *)v127 = v125;
            *(_QWORD *)(v127 + 16) = 0;
            *(_QWORD *)(v127 + 24) = 0;
            *(_QWORD *)(v127 + 8) = 0;
            std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>::__init_with_size[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*>((_QWORD *)(v127 + 8), (_QWORD *)v224, *((_QWORD **)&v224 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v224 + 1) - v224) >> 3));
            *(_WORD *)(v127 + 32) = v226;
            *(_QWORD *)(v105 + 1536) = v127 + 40;
            goto LABEL_223;
          }
          v133 = v129 + 10;
          v134 = v127 - 40;
          v135 = v127;
          while (v134 < v127)
          {
            *(_DWORD *)v135 = *(_DWORD *)v134;
            *(_QWORD *)(v135 + 16) = 0;
            *(_QWORD *)(v135 + 24) = 0;
            *(_QWORD *)(v135 + 8) = 0;
            *(_QWORD *)(v135 + 8) = *(_QWORD *)(v134 + 8);
            *(_QWORD *)(v134 + 8) = 0;
            v136 = *(_QWORD *)(v135 + 16);
            *(_QWORD *)(v135 + 16) = *(_QWORD *)(v134 + 16);
            *(_QWORD *)(v134 + 16) = v136;
            v137 = *(_QWORD *)(v135 + 24);
            *(_QWORD *)(v135 + 24) = *(_QWORD *)(v134 + 24);
            *(_QWORD *)(v134 + 24) = v137;
            v135 += 40;
            v134 += 40;
          }
          *(_QWORD *)(v105 + 1536) = v135;
          if ((_DWORD *)v127 != v133)
          {
            v142 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v127 - (_QWORD)v133) >> 3);
            v143 = (_QWORD *)(v127 - 16);
            v144 = 10 * v142;
            do
            {
              v145 = &v129[v144];
              *((_DWORD *)v143 - 6) = v129[v144 - 10];
              v146 = *(v143 - 2);
              *(v143 - 2) = *(_QWORD *)&v129[v144 - 8];
              *((_QWORD *)v145 - 4) = v146;
              v147 = *(v143 - 1);
              *(v143 - 1) = *(_QWORD *)&v129[v144 - 6];
              *((_QWORD *)v145 - 3) = v147;
              v148 = *v143;
              *v143 = *(_QWORD *)&v129[v144 - 4];
              v143 -= 5;
              *((_QWORD *)v145 - 2) = v148;
              v144 -= 10;
            }
            while (v144 * 4);
          }
          v149 = &v223;
          if (v130 <= (unint64_t)&v223)
            v149 = &v223 + 5 * (*(_QWORD *)(v105 + 1536) > (unint64_t)&v223);
          v150 = *(_DWORD *)v149;
          v131 = (__int128 *)(v149 + 1);
          *(_DWORD *)v130 = v150;
        }
        AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>>::operator=(v130 + 8, (uint64_t)v131);
LABEL_223:
        *(_QWORD *)buf = &v224;
        std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        *(_QWORD *)buf = &v221;
        std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        v121 = v238;
        goto LABEL_224;
      }
      v115 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v235 + 16))(v235, v111);
    }
    v238 = (_BYTE *)v115;
    goto LABEL_177;
  }
  v112 = v111;
  *(_QWORD *)buf = v110;
  v113 = &buf[8];
  v114 = (uint64_t)v235;
  if (v235)
  {
    if (v235 == v234)
    {
      *(_QWORD *)&buf[32] = &buf[8];
      (*(void (**)(_QWORD *, _BYTE *))(v234[0] + 24))(v234, &buf[8]);
      goto LABEL_172;
    }
    v114 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v235 + 16))(v235, v111);
  }
  *(_QWORD *)&buf[32] = v114;
LABEL_172:
  v116 = *(_QWORD **)(v112 + 8);
  v117 = *(_QWORD **)(v112 + 16);
  v118 = (_QWORD *)(v112 + 8);
  v119 = *(_QWORD *)buf;
  if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::find(v116, v117, *(unint64_t *)buf))
  {
    *v120 = v119;
    std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::operator=(v120 + 1, (uint64_t)&buf[8]);
  }
  else
  {
    std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>::insert(v118, v120, buf);
  }
  v121 = *(_BYTE **)&buf[32];
LABEL_224:
  if (v121 == v113)
  {
    v177 = 4;
  }
  else
  {
    if (!v121)
      goto LABEL_229;
    v177 = 5;
    v113 = v121;
  }
  (*(void (**)(_BYTE *))(*(_QWORD *)v113 + 8 * v177))(v113);
LABEL_229:
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v227);
  *(_QWORD *)(v217 + 168) = v110;
  v179 = v235;
  if (v235 == v234)
  {
    v181 = 4;
    v179 = v234;
    v180 = v215;
    goto LABEL_233;
  }
  v180 = v215;
  if (v235)
  {
    v181 = 5;
LABEL_233:
    (*(void (**)(_QWORD *, uint64_t))(*v179 + 8 * v181))(v179, v178);
  }
  v182 = v220;
  if (v220)
  {
    v183 = (unint64_t *)&v220->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  v185 = **(_QWORD ***)(v180 + 40);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(buf, *(_QWORD *)(v217 + 24), *(std::__shared_weak_count **)(v217 + 32));
  v187 = (char *)v185[8];
  v186 = v185[9];
  if ((unint64_t)v187 >= v186)
  {
    v188 = (char *)v185[7];
    v189 = (v187 - v188) >> 4;
    v190 = v189 + 1;
    if ((unint64_t)(v189 + 1) >> 60)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v191 = v186 - (_QWORD)v188;
    if (v191 >> 3 > v190)
      v190 = v191 >> 3;
    if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFF0)
      v192 = 0xFFFFFFFFFFFFFFFLL;
    else
      v192 = v190;
    if (v192 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v193 = (char *)operator new(16 * v192);
    v194 = &v193[16 * v189];
    *(_OWORD *)v194 = *(_OWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    if (v187 == v188)
    {
      v197 = vdupq_n_s64((unint64_t)v187);
      v195 = &v193[16 * v189];
    }
    else
    {
      v195 = &v193[16 * v189];
      do
      {
        v196 = *((_OWORD *)v187 - 1);
        v187 -= 16;
        *((_OWORD *)v195 - 1) = v196;
        v195 -= 16;
        *(_QWORD *)v187 = 0;
        *((_QWORD *)v187 + 1) = 0;
      }
      while (v187 != v188);
      v197 = *(int64x2_t *)(v185 + 7);
    }
    v198 = v194 + 16;
    v185[7] = v195;
    v185[8] = v194 + 16;
    v185[9] = &v193[16 * v192];
    v199 = v197.i64[1];
    v200 = (void *)v197.i64[0];
    while ((void *)v199 != v200)
      v199 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v199 - 16);
    if (v200)
      operator delete(v200);
    v201 = *(std::__shared_weak_count **)&buf[8];
    v185[8] = v198;
    if (v201)
    {
      v202 = (unint64_t *)&v201->__shared_owners_;
      do
        v203 = __ldaxr(v202);
      while (__stlxr(v203 - 1, v202));
      if (!v203)
      {
        ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
        std::__shared_weak_count::__release_weak(v201);
      }
    }
  }
  else
  {
    *(_OWORD *)v187 = *(_OWORD *)buf;
    v185[8] = v187 + 16;
  }
  **(_DWORD **)(v180 + 64) = *(_DWORD *)(v217 + 40);
  if (v218)
  {
    v204 = (unint64_t *)&v218->__shared_owners_;
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
      std::__shared_weak_count::__release_weak(v218);
    }
  }
}

void sub_1B5B8687C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN4AMCP4Meta6Driver10build_coreEvENK3$_0clERK28Aggregate_Device_DescriptioniEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void std::__shared_ptr_emplace<AMCP::Meta::Device>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6992828;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Meta::Device>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6992828;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::Meta::Device>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void FilterEngineInfoWithoutEngine::~FilterEngineInfoWithoutEngine(FilterEngineInfoWithoutEngine *this)
{
  JUMPOUT(0x1B5E50688);
}

uint64_t FilterEngineInfoWithoutEngine::should_exclude(uint64_t a1, _QWORD **a2)
{
  return (*(unsigned int (**)(_QWORD))(*(_QWORD *)**a2 + 16))(**a2) ^ 1;
}

void FilterIfEngineOnlyNeedsReferenceStream::~FilterIfEngineOnlyNeedsReferenceStream(FilterIfEngineOnlyNeedsReferenceStream *this)
{
  JUMPOUT(0x1B5E50688);
}

uint64_t FilterIfEngineOnlyNeedsReferenceStream::should_exclude(uint64_t a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a2 + 136))(**a2);
}

void FilterClocklessReferenceStreamOnlyEngines::~FilterClocklessReferenceStreamOnlyEngines(FilterClocklessReferenceStreamOnlyEngines *this)
{
  JUMPOUT(0x1B5E50688);
}

uint64_t FilterClocklessReferenceStreamOnlyEngines::should_exclude(uint64_t a1, _QWORD **a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a2 + 136))(**a2);
  if ((_DWORD)result)
    return (*(unsigned int (**)(_QWORD))(*(_QWORD *)**a2 + 320))(**a2) ^ 1;
  return result;
}

void FilterInactiveReferenceStreamOnlyEngines::~FilterInactiveReferenceStreamOnlyEngines(FilterInactiveReferenceStreamOnlyEngines *this)
{
  JUMPOUT(0x1B5E50688);
}

uint64_t FilterInactiveReferenceStreamOnlyEngines::should_exclude(uint64_t a1, _QWORD **a2)
{
  _BYTE *v2;

  v2 = (_BYTE *)**a2;
  if (v2[748])
    return (*(unsigned int (**)(_BYTE *))(*(_QWORD *)v2 + 328))(v2) ^ 1;
  else
    return 0;
}

void AMCP::IOContext::~IOContext(AMCP::IOContext *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

AMCP::IOContext *AMCP::IOContext::IOContext(AMCP::IOContext *this, AMCP::System_Context *a2, unsigned int a3)
{
  AMCP::Node *v4;
  uint64_t v5;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  NSObject **v10;
  __int16 v11;
  char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = AMCP::Node::Node(this, a2, a3);
  *(_QWORD *)v4 = &off_1E6992988;
  v5 = AMCP::Object::constructed_correct_class(v4, (AMCP *)0x696F636E);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    v7 = *v10;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v10);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      v11 = 2080;
      v12 = "IOContext.cpp";
      v13 = 1024;
      v14 = 27;
      v15 = 2080;
      v16 = "constructed_correct_class(k_class_id_iocontext_node)";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return this;
}

void sub_1B5B8718C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  *v1 = &off_1E696F358;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

AMCP::Object *AMCP::IOContext::IOContext(AMCP::Object *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  NSObject *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  CFTypeRef cf;
  uint8_t buf[8];
  __int16 v11;
  char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  cf = *a3;
  *a3 = 0;
  AMCP::Node::Node((uint64_t)a1, a2, (uint64_t)&cf);
  if (cf)
    CFRelease(cf);
  *(_QWORD *)a1 = &off_1E6992988;
  v4 = AMCP::Object::constructed_correct_class(a1, (AMCP *)0x696F636E);
  if ((v4 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = pthread_self();
      v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v8;
      v11 = 2080;
      v12 = "IOContext.cpp";
      v13 = 1024;
      v14 = 34;
      v15 = 2080;
      v16 = "constructed_correct_class(k_class_id_iocontext_node)";
      _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", buf, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1B5B87300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _QWORD *v10;
  std::__shared_weak_count *v12;

  *v10 = &off_1E696F358;
  v12 = (std::__shared_weak_count *)v10[3];
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::IOContext::start_running(AMCP::IOContext *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Address *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  int v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Address *)*((_QWORD *)this + 2);
  if (v5)
  {
    v10 = 0x676C6F6273747274;
    v11 = 0;
    v6 = AMCP::Core::Core::call_operation_function<BOOL>(v5, (unsigned int *)&v10);
  }
  else
  {
    v6 = 0;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v6;
}

uint64_t AMCP::IOContext::stop_running(AMCP::IOContext *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Address *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  int v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Address *)*((_QWORD *)this + 2);
  if (v5)
  {
    v10 = 0x676C6F6273746F70;
    v11 = 0;
    v6 = AMCP::Core::Core::call_operation_function<BOOL>(v5, (unsigned int *)&v10);
  }
  else
  {
    v6 = 0;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v6;
}

uint64_t AMCP::IOContext::start_prewarming(AMCP::IOContext *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Address *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  int v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Address *)*((_QWORD *)this + 2);
  if (v5)
  {
    v10 = 0x676C6F6273747077;
    v11 = 0;
    v6 = AMCP::Core::Core::call_operation_function<BOOL>(v5, (unsigned int *)&v10);
  }
  else
  {
    v6 = 0;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v6;
}

uint64_t AMCP::IOContext::stop_prewarming(AMCP::IOContext *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Address *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  int v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Address *)*((_QWORD *)this + 2);
  if (v5)
  {
    v10 = 0x676C6F6273707077;
    v11 = 0;
    v6 = AMCP::Core::Core::call_operation_function<BOOL>(v5, (unsigned int *)&v10);
  }
  else
  {
    v6 = 0;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v6;
}

AMCP::Core::Core *AMCP::IOContext::get_transport_state(AMCP::IOContext *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  AMCP::Log::Scope_Registry *has_property;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v18;
  _opaque_pthread_t *v19;
  mach_port_t v20;
  void *__p;
  std::__shared_weak_count *v22;
  char v23;
  uint64_t v24;
  int v25;
  uint8_t buf[8];
  __int16 v27;
  char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  _BYTE v32[18];
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
  {
    v24 = 0x676C6F6274727374;
    v25 = 0;
    has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::has_property(v5, (const AMCP::Address *)&v24);
    if (!(_DWORD)has_property)
      goto LABEL_27;
    has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&__p, (int8x8_t *)v5, (unsigned int *)&v24);
    v7 = __p;
    if (__p)
    {
      v8 = AMCP::Implementation::get_type_marker<std::function<AMCP::Transport_State ()(void)>>();
      if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, v8))
      {
        has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Operation::call_function<AMCP::Transport_State>(v7);
        LODWORD(v7) = (_DWORD)has_property;
LABEL_8:
        v9 = 0;
        v10 = v7 & 0xFFFFFF00;
LABEL_15:
        v12 = v22;
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        if ((v9 & 1) == 0)
        {
          v5 = (AMCP::Core::Core *)(v10 | v7);
          goto LABEL_22;
        }
LABEL_27:
        AMCP::Log::Scope_Registry::get(has_property);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v18 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          v19 = pthread_self();
          v20 = pthread_mach_thread_np(v19);
          v23 = 4;
          strcpy((char *)&__p, "trst");
          *(_DWORD *)buf = 67110658;
          *(_DWORD *)&buf[4] = v20;
          v27 = 2080;
          v28 = "Core.h";
          v29 = 1024;
          v30 = 391;
          v31 = 2080;
          *(_QWORD *)v32 = "optional_value.operator BOOL() == true";
          *(_WORD *)&v32[8] = 2080;
          *(_QWORD *)&v32[10] = &__p;
          v33 = 1024;
          v34 = 1735159650;
          v35 = 1024;
          v36 = 0;
          _os_log_error_impl(&dword_1B57BA000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v23 < 0)
            operator delete(__p);
        }
        abort();
      }
      v11 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
      has_property = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, v11);
      if (has_property)
      {
        AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)buf, v7);
        has_property = (AMCP::Log::Scope_Registry *)AMCP::Thing::convert_to<AMCP::Transport_State>((uint64_t)buf);
        LODWORD(v7) = (_DWORD)has_property;
        if (*(_QWORD *)&v32[6])
          has_property = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(_QWORD, uint8_t *, _QWORD, _QWORD))&v32[6])(0, buf, 0, 0);
        goto LABEL_8;
      }
      LOBYTE(v7) = 0;
    }
    v10 = 0;
    v9 = 1;
    goto LABEL_15;
  }
LABEL_22:
  v15 = (unint64_t *)&v4->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v5;
}

void sub_1B5B8791C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::IOContext::start_at_time(AMCP::IOContext *this, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Address *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  int v13;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = (AMCP::Address *)*((_QWORD *)this + 2);
  if (v7)
  {
    v12 = 0x676C6F6273746174;
    v13 = 0;
    v8 = AMCP::Core::Core::call_operation_function<BOOL,unsigned long long>(v7, (unsigned int *)&v12, a2);
  }
  else
  {
    v8 = 0;
  }
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v8;
}

unint64_t AMCP::IOContext::get_buffer_frame_size(AMCP::IOContext *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  unint64_t simple_required;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
    simple_required = AMCP::Core::Core::get_simple_required_property<1718839674u>(v5);
  else
    simple_required = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return simple_required;
}

uint64_t AMCP::IOContext::set_buffer_frame_size(AMCP::IOContext *this, int a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  int8x8_t *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v11;

  v11 = a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v4 = std::__shared_weak_count::lock(v3);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = (int8x8_t *)*((_QWORD *)this + 2);
  if (v6)
    v7 = AMCP::Core::Core::set_simple_property_value<1718839674u>(v6, &v11);
  else
    v7 = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v7;
}

unint64_t AMCP::IOContext::get_min_and_max_buffer_frame_size(AMCP::IOContext *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  AMCP::Log::Scope_Registry *simple_required;
  unsigned int v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v2 && (v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    v4 = v3;
    v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v5)
    {
      simple_required = AMCP::Core::Core::get_simple_required_property<1718843939u>(v5);
      v7 = simple_required;
      v8 = (unint64_t)simple_required >> 32;
    }
    else
    {
      v8 = 4096;
      v7 = 16;
    }
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v7 = 16;
    v8 = 4096;
  }
  return v7 | (unint64_t)(v8 << 32);
}

float AMCP::IOContext::get_io_cycle_usage(AMCP::IOContext *this)
{
  std::__shared_weak_count *v2;
  float simple_required;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  AMCP::Core::Core *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  simple_required = 1.0;
  if (v2)
  {
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
      if (v6)
        simple_required = AMCP::Core::Core::get_simple_required_property<1852012899u>(v6);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  return simple_required;
}

uint64_t AMCP::IOContext::set_io_cycle_usage(AMCP::IOContext *this, float a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  float v18;
  uint64_t v19;
  int v20;
  _OWORD v21[2];
  void (*v22)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  _QWORD *v23;
  std::__shared_weak_count *v24;

  v18 = a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    v19 = 0x676C6F626E637963;
    v20 = 0;
    if (!AMCP::Core::Core::is_property_settable((int8x8_t *)v7, (const AMCP::Address *)&v19))
    {
LABEL_20:
      v7 = 0;
      goto LABEL_22;
    }
    AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v23, (int8x8_t *)v7, (unsigned int *)&v19);
    v8 = v23;
    if (v23)
    {
      v9 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
      if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
      {
        AMCP::Core::Operation::call_function<void,float const&>(v8, (uint64_t)&v18);
LABEL_8:
        v10 = 0;
LABEL_14:
        v12 = v24;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        if ((v10 & 1) == 0)
        {
          v7 = 1;
          goto LABEL_22;
        }
        goto LABEL_20;
      }
      v11 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
      if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v11))
      {
        memset(v21, 0, sizeof(v21));
        *(float *)v21 = a2;
        v22 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<float>::dispatch;
        AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v21);
        if (v22)
          v22(0, (uint64_t)v21, 0, 0);
        goto LABEL_8;
      }
    }
    v10 = 1;
    goto LABEL_14;
  }
LABEL_22:
  v15 = (unint64_t *)&v6->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v7;
}

void sub_1B5B87DC0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v5 - 64);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5B87D64);
}

double AMCP::IOContext::get_actual_sample_rate(AMCP::IOContext *this)
{
  std::__shared_weak_count *v2;
  double v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  AMCP::Core::Core *v6;
  AMCP::Log::Scope_Registry *v7;
  char v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *__p[2];
  char v16;
  _BYTE buf[10];
  char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  void **v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v3 = 48000.0;
  if (v2)
  {
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
      if (v6)
      {
        strcpy(buf, "trsabolg");
        buf[9] = 0;
        LOWORD(v18) = 0;
        v7 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<double,std::enable_if<true,void>>(v6, (const AMCP::Address *)buf);
        if (!v8)
        {
          AMCP::Log::Scope_Registry::get(v7);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v12 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            v13 = pthread_self();
            v14 = pthread_mach_thread_np(v13);
            v16 = 4;
            strcpy((char *)__p, "asrt");
            *(_DWORD *)buf = 67110658;
            *(_DWORD *)&buf[4] = v14;
            *(_WORD *)&buf[8] = 2080;
            v18 = "Core.h";
            v19 = 1024;
            v20 = 391;
            v21 = 2080;
            v22 = "optional_value.operator BOOL() == true";
            v23 = 2080;
            v24 = __p;
            v25 = 1024;
            v26 = 1735159650;
            v27 = 1024;
            v28 = 0;
            _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
            if (v16 < 0)
              operator delete(__p[0]);
          }
          abort();
        }
        v3 = *(double *)&v7;
      }
      else
      {
        v3 = 48000.0;
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  return v3;
}

void sub_1B5B87FDC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

unint64_t AMCP::IOContext::get_latency(AMCP::IOContext *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  unint64_t simple_required;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
    simple_required = AMCP::Core::Core::get_simple_required_property<1819569763u>(v5, 1735159650);
  else
    simple_required = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return simple_required;
}

unint64_t AMCP::IOContext::get_tail_time(AMCP::IOContext *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *__p[2];
  char v15;
  _BYTE buf[10];
  char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void **v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
  {
    strcpy(buf, "liatbolg");
    buf[9] = 0;
    LOWORD(v17) = 0;
    v6 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if (!HIDWORD(v6))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v11 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = pthread_self();
        v13 = pthread_mach_thread_np(v12);
        v15 = 4;
        strcpy((char *)__p, "tail");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&buf[4] = v13;
        *(_WORD *)&buf[8] = 2080;
        v17 = "Core.h";
        v18 = 1024;
        v19 = 391;
        v20 = 2080;
        v21 = "optional_value.operator BOOL() == true";
        v22 = 2080;
        v23 = __p;
        v24 = 1024;
        v25 = 1735159650;
        v26 = 1024;
        v27 = 0;
        _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v15 < 0)
          operator delete(__p[0]);
      }
      abort();
    }
    v7 = v6;
  }
  else
  {
    v7 = 0;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v7;
}

void sub_1B5B88248(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMCP::IOContext::get_os_workgroup_handle(AMCP::IOContext *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
    {
      AMCP::Core::Core::get_simple_required_property<2003267184u>(a2, v7);
    }
    else
    {
      *(_QWORD *)(a2 + 56) = 0;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 8) = 0u;
      *(_QWORD *)a2 = MEMORY[0x1E0DDB768] + 16;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 56) = 0;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_QWORD *)a2 = MEMORY[0x1E0DDB768] + 16;
  }
}

uint64_t AMCP::IOContext::set_os_workgroup_handle(AMCP::IOContext *this, const caulk::mach::os_workgroup_interval_managed *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v23;
  int v24;
  _QWORD v25[4];
  uint64_t (*v26)(uint64_t, uint64_t, AMCP::Thing *, uint64_t *);
  _QWORD *v27;
  std::__shared_weak_count *v28;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = (int8x8_t *)*((_QWORD *)this + 2);
  if (!v7)
    goto LABEL_20;
  v23 = 0x676C6F6277676E70;
  v24 = 0;
  if (!AMCP::Core::Core::is_property_settable(v7, (const AMCP::Address *)&v23))
    goto LABEL_20;
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v27, v7, (unsigned int *)&v23);
  v8 = v27;
  if (!v27)
    goto LABEL_13;
  v9 = AMCP::Implementation::get_type_marker<std::function<void ()(caulk::mach::os_workgroup_interval_managed const&)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
  {
    v12 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v12))
    {
      memset(&v25[1], 0, 24);
      v26 = AMCP::Implementation::Outboard_Storage<caulk::mach::os_workgroup_interval_managed>::dispatch;
      v13 = operator new();
      v15 = caulk::mach::details::retain_os_object(*((caulk::mach::details **)a2 + 1), v14);
      v16 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(v13 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(v13 + 32) = v16;
      *(_OWORD *)(v13 + 41) = *(_OWORD *)((char *)a2 + 41);
      *(_QWORD *)v13 = MEMORY[0x1E0DDB768] + 16;
      *(_QWORD *)(v13 + 8) = v15;
      *(_BYTE *)(v13 + 57) = *((_BYTE *)a2 + 57);
      v25[0] = v13;
      AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v25);
      if (v26)
        v26(0, (uint64_t)v25, 0, 0);
      goto LABEL_8;
    }
LABEL_13:
    v10 = 1;
    goto LABEL_14;
  }
  AMCP::Core::Operation::call_function<void,caulk::mach::os_workgroup_interval_managed const&>(v8, (uint64_t)a2);
LABEL_8:
  v10 = 0;
LABEL_14:
  v17 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if ((v10 & 1) == 0)
  {
    v11 = 1;
    goto LABEL_21;
  }
LABEL_20:
  v11 = 0;
LABEL_21:
  v20 = (unint64_t *)&v6->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v11;
}

void sub_1B5B88504(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v4 - 48);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5B884ACLL);
}

uint64_t AMCP::IOContext::handle_overload_with_catchup_mode(AMCP::IOContext *this, char a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  _QWORD *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  char v21;
  _OWORD v22[2];
  void (*v23)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  _QWORD *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  int v27;

  v21 = a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = (int8x8_t *)*((_QWORD *)this + 2);
  if (v7)
  {
    v26 = 0x676C6F62686F636DLL;
    v27 = 0;
    if (AMCP::Core::Core::is_property_settable(v7, (const AMCP::Address *)&v26))
    {
      AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v24, v7, (unsigned int *)&v26);
      v8 = v24;
      if (v24)
      {
        v9 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
        {
          AMCP::Core::Operation::call_function<void,BOOL const&>(v8, (uint64_t)&v21);
LABEL_8:
          v10 = v25;
          if (v25)
          {
            p_shared_owners = (unint64_t *)&v25->__shared_owners_;
            do
              v12 = __ldaxr(p_shared_owners);
            while (__stlxr(v12 - 1, p_shared_owners));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          v13 = 1;
          goto LABEL_24;
        }
        v14 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v14))
        {
          memset(v22, 0, sizeof(v22));
          LOBYTE(v22[0]) = a2;
          v23 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
          AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v22);
          if (v23)
            v23(0, (uint64_t)v22, 0, 0);
          goto LABEL_8;
        }
      }
      v15 = v25;
      if (v25)
      {
        v16 = (unint64_t *)&v25->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
  }
  v13 = 0;
LABEL_24:
  v18 = (unint64_t *)&v6->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v13;
}

void sub_1B5B886FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(_QWORD, char *, _QWORD, _QWORD), uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  if (a15)
    a15(0, &a11, 0, 0);
  v19 = a18;
  if (a18)
  {
    p_shared_owners = (unint64_t *)&a18->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5B886ACLL);
}

uint64_t AMCP::IOContext::will_handle_overload_with_catchup_mode(AMCP::IOContext *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  AMCP::Log::Scope_Registry *v6;
  _BOOL4 v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  void *__p[2];
  char v19;
  _BYTE buf[18];
  __int16 v21;
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  void **v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v2 && (v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    v4 = v3;
    v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v5)
    {
      strcpy(buf, "mcohbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
      if ((unsigned __int16)v6 <= 0xFFu)
      {
        AMCP::Log::Scope_Registry::get(v6);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v11 = **(NSObject ***)buf;
        if (*(_QWORD *)&buf[8])
        {
          v12 = *(std::__shared_weak_count **)&buf[8];
          v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            v15 = v12;
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          v16 = pthread_self();
          v17 = pthread_mach_thread_np(v16);
          v19 = 4;
          strcpy((char *)__p, "hocm");
          *(_DWORD *)buf = 67110658;
          *(_DWORD *)&buf[4] = v17;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "Core.h";
          v21 = 1024;
          v22 = 391;
          v23 = 2080;
          v24 = "optional_value.operator BOOL() == true";
          v25 = 2080;
          v26 = __p;
          v27 = 1024;
          v28 = 1735159650;
          v29 = 1024;
          v30 = 0;
          _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v19 < 0)
            operator delete(__p[0]);
        }
        abort();
      }
      v7 = v6 != 0;
    }
    else
    {
      v7 = 0;
    }
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v7 = 0;
  }
  return v7 | 0x100u;
}

void sub_1B5B8898C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::IOContext::set_should_resume_after_config_change(AMCP::IOContext *this, char a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int8x8_t *v7;
  _QWORD *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  char v21;
  _OWORD v22[2];
  void (*v23)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  _QWORD *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  int v27;

  v21 = a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = (int8x8_t *)*((_QWORD *)this + 2);
  if (v7)
  {
    v26 = 0x676C6F62696F7372;
    v27 = 0;
    if (AMCP::Core::Core::is_property_settable(v7, (const AMCP::Address *)&v26))
    {
      AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v24, v7, (unsigned int *)&v26);
      v8 = v24;
      if (v24)
      {
        v9 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
        {
          AMCP::Core::Operation::call_function<void,BOOL const&>(v8, (uint64_t)&v21);
LABEL_8:
          v10 = v25;
          if (v25)
          {
            p_shared_owners = (unint64_t *)&v25->__shared_owners_;
            do
              v12 = __ldaxr(p_shared_owners);
            while (__stlxr(v12 - 1, p_shared_owners));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          v13 = 1;
          goto LABEL_24;
        }
        v14 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v14))
        {
          memset(v22, 0, sizeof(v22));
          LOBYTE(v22[0]) = a2;
          v23 = (void (*)(_BOOL8, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
          AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v22);
          if (v23)
            v23(0, (uint64_t)v22, 0, 0);
          goto LABEL_8;
        }
      }
      v15 = v25;
      if (v25)
      {
        v16 = (unint64_t *)&v25->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
  }
  v13 = 0;
LABEL_24:
  v18 = (unint64_t *)&v6->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v13;
}

void sub_1B5B88B64(void *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5B88B14);
}

BOOL AMCP::IOContext::get_should_resume_after_config_change(AMCP::IOContext *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  AMCP::Log::Scope_Registry *v6;
  _BOOL8 v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *__p[2];
  char v15;
  _BYTE buf[10];
  char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void **v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
  if (v5)
  {
    strcpy(buf, "rsoibolg");
    buf[9] = 0;
    LOWORD(v17) = 0;
    v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if ((unsigned __int16)v6 <= 0xFFu)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v11 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = pthread_self();
        v13 = pthread_mach_thread_np(v12);
        v15 = 4;
        strcpy((char *)__p, "iosr");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&buf[4] = v13;
        *(_WORD *)&buf[8] = 2080;
        v17 = "Core.h";
        v18 = 1024;
        v19 = 391;
        v20 = 2080;
        v21 = "optional_value.operator BOOL() == true";
        v22 = 2080;
        v23 = __p;
        v24 = 1024;
        v25 = 1735159650;
        v26 = 1024;
        v27 = 0;
        _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v15 < 0)
          operator delete(__p[0]);
      }
      abort();
    }
    v7 = v6 != 0;
  }
  else
  {
    v7 = 0;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v7;
}

void sub_1B5B88D78(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::IOContext::can_play_during_notification_wake(AMCP::IOContext *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  AMCP::Log::Scope_Registry *v6;
  _BOOL4 v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  void *__p[2];
  char v19;
  _BYTE buf[18];
  __int16 v21;
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  void **v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v2 && (v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    v4 = v3;
    v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v5)
    {
      strcpy(buf, "wndpbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
      if ((unsigned __int16)v6 <= 0xFFu)
      {
        AMCP::Log::Scope_Registry::get(v6);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v11 = **(NSObject ***)buf;
        if (*(_QWORD *)&buf[8])
        {
          v12 = *(std::__shared_weak_count **)&buf[8];
          v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            v15 = v12;
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          v16 = pthread_self();
          v17 = pthread_mach_thread_np(v16);
          v19 = 4;
          strcpy((char *)__p, "pdnw");
          *(_DWORD *)buf = 67110658;
          *(_DWORD *)&buf[4] = v17;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "Core.h";
          v21 = 1024;
          v22 = 391;
          v23 = 2080;
          v24 = "optional_value.operator BOOL() == true";
          v25 = 2080;
          v26 = __p;
          v27 = 1024;
          v28 = 1735159650;
          v29 = 1024;
          v30 = 0;
          _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v19 < 0)
            operator delete(__p[0]);
        }
        abort();
      }
      v7 = v6 != 0;
    }
    else
    {
      v7 = 0;
    }
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v7 = 0;
  }
  return v7 | 0x100u;
}

void sub_1B5B88F94(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::IOContext::set_can_play_during_notification_wake(AMCP::IOContext *this, char a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  int8x8_t *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v11;

  v11 = a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v4 = std::__shared_weak_count::lock(v3);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = (int8x8_t *)*((_QWORD *)this + 2);
  if (v6)
    v7 = AMCP::Core::Core::set_simple_property_value<1885630071u>(v6, &v11);
  else
    v7 = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v7;
}

uint64_t AMCP::IOContext::can_play_during_dark_wake(AMCP::IOContext *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  AMCP::Log::Scope_Registry *v6;
  _BOOL4 v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  void *__p[2];
  char v19;
  _BYTE buf[18];
  __int16 v21;
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  void **v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v2 && (v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    v4 = v3;
    v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v5)
    {
      strcpy(buf, "wddpbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
      if ((unsigned __int16)v6 <= 0xFFu)
      {
        AMCP::Log::Scope_Registry::get(v6);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v11 = **(NSObject ***)buf;
        if (*(_QWORD *)&buf[8])
        {
          v12 = *(std::__shared_weak_count **)&buf[8];
          v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            v15 = v12;
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          v16 = pthread_self();
          v17 = pthread_mach_thread_np(v16);
          v19 = 4;
          strcpy((char *)__p, "pddw");
          *(_DWORD *)buf = 67110658;
          *(_DWORD *)&buf[4] = v17;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "Core.h";
          v21 = 1024;
          v22 = 391;
          v23 = 2080;
          v24 = "optional_value.operator BOOL() == true";
          v25 = 2080;
          v26 = __p;
          v27 = 1024;
          v28 = 1735159650;
          v29 = 1024;
          v30 = 0;
          _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v19 < 0)
            operator delete(__p[0]);
        }
        abort();
      }
      v7 = v6 != 0;
    }
    else
    {
      v7 = 0;
    }
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v7 = 0;
  }
  return v7 | 0x100u;
}

void sub_1B5B89244(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::IOContext::set_can_play_during_dark_wake(AMCP::IOContext *this, char a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  int8x8_t *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v11;

  v11 = a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v4 = std::__shared_weak_count::lock(v3);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = (int8x8_t *)*((_QWORD *)this + 2);
  if (v6)
    v7 = AMCP::Core::Core::set_simple_property_value<1885627511u>(v6, &v11);
  else
    v7 = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v7;
}

uint64_t AMCP::IOContext::sleeping_is_allowed(AMCP::IOContext *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  AMCP::Core::Core *v5;
  AMCP::Log::Scope_Registry *v6;
  _BOOL4 v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  void *__p[2];
  char v19;
  _BYTE buf[18];
  __int16 v21;
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  void **v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v2 && (v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    v4 = v3;
    v5 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v5)
    {
      strcpy(buf, "ailsbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
      if ((unsigned __int16)v6 <= 0xFFu)
      {
        AMCP::Log::Scope_Registry::get(v6);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v11 = **(NSObject ***)buf;
        if (*(_QWORD *)&buf[8])
        {
          v12 = *(std::__shared_weak_count **)&buf[8];
          v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            v15 = v12;
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          v16 = pthread_self();
          v17 = pthread_mach_thread_np(v16);
          v19 = 4;
          strcpy((char *)__p, "slia");
          *(_DWORD *)buf = 67110658;
          *(_DWORD *)&buf[4] = v17;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "Core.h";
          v21 = 1024;
          v22 = 391;
          v23 = 2080;
          v24 = "optional_value.operator BOOL() == true";
          v25 = 2080;
          v26 = __p;
          v27 = 1024;
          v28 = 1735159650;
          v29 = 1024;
          v30 = 0;
          _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v19 < 0)
            operator delete(__p[0]);
        }
        abort();
      }
      v7 = v6 != 0;
    }
    else
    {
      v7 = 0;
    }
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v7 = 0;
  }
  return v7 | 0x100u;
}

void sub_1B5B894F4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::IOContext::set_sleeping_is_allowed(AMCP::IOContext *this, char a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  int8x8_t *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v11;

  v11 = a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v4 = std::__shared_weak_count::lock(v3);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = (int8x8_t *)*((_QWORD *)this + 2);
  if (v6)
    v7 = AMCP::Core::Core::set_simple_property_value<1936484705u>(v6, &v11);
  else
    v7 = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v7;
}

void HALB_CaptureFile::TimeStampMessage::~TimeStampMessage(HALB_CaptureFile::TimeStampMessage *this)
{
  JUMPOUT(0x1B5E50688);
}

void HALB_CaptureFile::TimeStampMessage::perform(HALB_CaptureFile::TimeStampMessage *this)
{
  uint64_t v1;
  int v3;
  _OWORD *v4;
  char *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  FILE *v17;
  std::__shared_weak_count_vtbl *v18;
  void (__cdecl *on_zero_shared)(std::__shared_count *__hidden);
  const void *(__cdecl *get_deleter)(const std::__shared_weak_count *__hidden, const std::type_info *);
  void (__cdecl *v21)(std::__shared_count *__hidden);
  void (__cdecl *v22)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count_vtbl *v23;
  uint64_t i;
  void (__cdecl *v25)(std::__shared_weak_count *__hidden);
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  std::__shared_weak_count *v42;
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  std::__shared_weak_count *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 12);
  if ((*(_DWORD *)(v1 + 2152) - 2) >= 3)
  {
    v3 = *((_DWORD *)this + 4);
    switch(v3)
    {
      case 2:
        v12 = *(std::__shared_weak_count_vtbl **)(v1 + 2096);
        v13 = *(_QWORD *)(v1 + 2104);
        if (v12 != (std::__shared_weak_count_vtbl *)v13)
        {
          v14 = (std::__shared_weak_count *)operator new(0x30uLL);
          v14->__shared_owners_ = 0;
          v14->__shared_weak_owners_ = 0;
          v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6992D60;
          v14[1].__vftable = v12;
          *(_QWORD *)(v1 + 2096) = 0;
          v14[1].__shared_owners_ = v13;
          *(_QWORD *)(v1 + 2104) = 0;
          v14[1].__shared_weak_owners_ = *(_QWORD *)(v1 + 2112);
          *(_QWORD *)(v1 + 2112) = 0;
          v15 = (std::__shared_weak_count *)operator new(0x818uLL);
          v15->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          v15->__shared_weak_owners_ = 0;
          v15->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6992DB0;
          bzero(&v15[1], 0x800uLL);
          memcpy(&v15[1], (const void *)(*((_QWORD *)this + 12) + 48), 0x800uLL);
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            v44 = "HALB_CaptureFile.cpp";
            v45 = 1024;
            v46 = 495;
            v47 = 2080;
            v48 = v15 + 1;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALB_CaptureFile::WriteTimeStampFile: writing time stamps to %s", buf, 0x1Cu);
          }
          v17 = fopen((const char *)&v15[1], "w");
          if (v17)
          {
            v42 = v15;
            v18 = v14[1].__vftable;
            on_zero_shared = v18->__on_zero_shared;
            get_deleter = v18->__get_deleter;
            v22 = v18[1].~__shared_weak_count_0;
            v21 = v18[1].__on_zero_shared;
            fwrite("Current Sample Time\tCurrent Host Time\tIO Sample Time\tIO Host Time\tIO Frame Size\tIO Sample Diff\tIO Host Diff\tRate Scalar\tZTS Sample\tZTS Host\tZTS Sample Diff\tZTS Host Diff\tZTS Host/Frame\n", 0xB9uLL, 1uLL, v17);
            v23 = v14[1].__vftable;
            for (i = v14[1].__shared_owners_;
                  v23 != (std::__shared_weak_count_vtbl *)i;
                  v23 = (std::__shared_weak_count_vtbl *)((char *)v23 + 72))
            {
              fprintf(v17, "%llu\t%llu\t%llu\t%llu\t%llu\t%llu\t%llu\t%0.5f", v23->~__shared_weak_count, v23->~__shared_weak_count_0, v23->__on_zero_shared, v23->__get_deleter, v23->__on_zero_shared_weak, (char *)v23->__on_zero_shared - (char *)on_zero_shared, (char *)v23->__get_deleter - (char *)get_deleter, *(double *)&v23[1].~__shared_weak_count);
              v25 = v23[1].~__shared_weak_count_0;
              if (v25 == v22)
                fputc(10, v17);
              else
                fprintf(v17, "\t%llu\t%llu\t%llu\t%llu\t%0.5f\n", v25, v23[1].__on_zero_shared, (char *)v25 - (char *)v22, (char *)v23[1].__on_zero_shared - (char *)v21, (double)(unint64_t)((char *)v23[1].__on_zero_shared - (char *)v21)/ (double)(unint64_t)((char *)v25 - (char *)v22));
              on_zero_shared = v23->__on_zero_shared;
              get_deleter = v23->__get_deleter;
              v22 = v23[1].~__shared_weak_count_0;
              v21 = v23[1].__on_zero_shared;
            }
            fclose(v17);
            v15 = v42;
          }
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
          if (v14)
          {
            v27 = (unint64_t *)&v14->__shared_owners_;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
        }
        break;
      case 1:
        v11 = *(_QWORD *)(v1 + 2104);
        if (*(_QWORD *)(v1 + 2096) != v11)
          *(_QWORD *)(v11 - 40) += *((_QWORD *)this + 7);
        break;
      case 0:
        v4 = (_OWORD *)((char *)this + 24);
        v5 = *(char **)(v1 + 2104);
        v6 = *(_QWORD *)(v1 + 2112);
        if ((unint64_t)v5 >= v6)
        {
          v29 = *(char **)(v1 + 2096);
          v30 = 0x8E38E38E38E38E39 * ((v5 - v29) >> 3) + 1;
          if (v30 > 0x38E38E38E38E38ELL)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v31 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - (_QWORD)v29) >> 3);
          if (2 * v31 > v30)
            v30 = 2 * v31;
          if (v31 >= 0x1C71C71C71C71C7)
            v32 = 0x38E38E38E38E38ELL;
          else
            v32 = v30;
          if (v32)
          {
            if (v32 > 0x38E38E38E38E38ELL)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v33 = (char *)operator new(72 * v32);
          }
          else
          {
            v33 = 0;
          }
          v34 = &v33[8 * ((v5 - v29) >> 3)];
          v35 = *(_OWORD *)((char *)this + 72);
          *((_OWORD *)v34 + 2) = *(_OWORD *)((char *)this + 56);
          *((_OWORD *)v34 + 3) = v35;
          *((_QWORD *)v34 + 8) = *((_QWORD *)this + 11);
          v36 = *(_OWORD *)((char *)this + 40);
          *(_OWORD *)v34 = *v4;
          *((_OWORD *)v34 + 1) = v36;
          v10 = v34 + 72;
          if (v5 != v29)
          {
            do
            {
              *(_OWORD *)(v34 - 72) = *(_OWORD *)(v5 - 72);
              v37 = *(_OWORD *)(v5 - 56);
              v38 = *(_OWORD *)(v5 - 40);
              v39 = *(_OWORD *)(v5 - 24);
              *((_QWORD *)v34 - 1) = *((_QWORD *)v5 - 1);
              *(_OWORD *)(v34 - 24) = v39;
              *(_OWORD *)(v34 - 40) = v38;
              *(_OWORD *)(v34 - 56) = v37;
              v34 -= 72;
              v5 -= 72;
            }
            while (v5 != v29);
            v5 = *(char **)(v1 + 2096);
          }
          *(_QWORD *)(v1 + 2096) = v34;
          *(_QWORD *)(v1 + 2104) = v10;
          *(_QWORD *)(v1 + 2112) = &v33[72 * v32];
          if (v5)
            operator delete(v5);
        }
        else
        {
          *(_OWORD *)v5 = *v4;
          v7 = *(_OWORD *)((char *)this + 40);
          v8 = *(_OWORD *)((char *)this + 56);
          v9 = *(_OWORD *)((char *)this + 72);
          *((_QWORD *)v5 + 8) = *((_QWORD *)this + 11);
          *((_OWORD *)v5 + 2) = v8;
          *((_OWORD *)v5 + 3) = v9;
          *((_OWORD *)v5 + 1) = v7;
          v10 = v5 + 72;
        }
        *(_QWORD *)(v1 + 2104) = v10;
        break;
    }
    v40 = *(_QWORD *)(*((_QWORD *)this + 12) + 2120);
    v41 = atomic_load((unsigned __int8 *)(v40 + 16));
    if ((v41 & 1) == 0)
    {
      HALB_AsyncMessageQueue<HALB_CaptureFile::TimeStampMessage,void>::~HALB_AsyncMessageQueue(v40);
      JUMPOUT(0x1B5E50688);
    }
    OSAtomicEnqueue(*(OSQueueHead **)(v40 + 8), this, 0x68uLL);
  }
}

void sub_1B5B89AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B5B898A8);
  }
  _Unwind_Resume(exception_object);
}

void HALB_AsyncMessageQueue<HALB_CaptureFile::TimeStampMessage,void>::~HALB_AsyncMessageQueue(uint64_t a1)
{
  void *i;
  uint64_t v3;

  atomic_store(0, (unsigned __int8 *)(a1 + 16));
  ca::concurrent::details::service_thread::drain(*(ca::concurrent::details::service_thread **)a1);
  for (i = OSAtomicDequeue(*(OSQueueHead **)(a1 + 8), 0x68uLL); i; i = OSAtomicDequeue(*(OSQueueHead **)(a1 + 8), 0x68uLL))(*(void (**)(void *))(*(_QWORD *)i + 8))(i);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    MEMORY[0x1B5E50688](v3, 0x1080C40FC6463CFLL);
  ca::concurrent::messenger::~messenger((ca::concurrent::details::service_thread **)a1);
}

void std::__shared_ptr_emplace<std::array<char,2048ul>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6992DB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::array<char,2048ul>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6992DB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<std::vector<HALB_CaptureFile::TimeStampData>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6992D60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<HALB_CaptureFile::TimeStampData>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6992D60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<std::vector<HALB_CaptureFile::TimeStampData>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t std::unique_ptr<HALB_AsyncMessageQueue<HALB_CaptureFile::TimeStampMessage,void>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    HALB_AsyncMessageQueue<HALB_CaptureFile::TimeStampMessage,void>::~HALB_AsyncMessageQueue(result);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

void caulk::concurrent::details::rt_message_call<HALB_CaptureFile::HALB_CaptureFile(HALB_CaptureFile_NameBuilder const&,AudioStreamBasicDescription const&,AudioCapturerMode)::$_1,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALB_CaptureFile::HALB_CaptureFile(HALB_CaptureFile_NameBuilder const&,AudioStreamBasicDescription const&,AudioCapturerMode)::$_1,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  caulk::concurrent::message *v11;
  uint8_t buf[8];
  _BYTE v13[10];
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v13;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d Failed to allocate audio capturer.", buf, 0x18u);
  }
  return caulk::concurrent::details::rt_message_call<HALB_CaptureFile::HALB_CaptureFile(HALB_CaptureFile_NameBuilder const&,AudioStreamBasicDescription const&,AudioCapturerMode)::$_1,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(&v11);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALB_CaptureFile::HALB_CaptureFile(HALB_CaptureFile_NameBuilder const&,AudioStreamBasicDescription const&,AudioCapturerMode)::$_1,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void std::__shared_ptr_pointer<AudioCapturerIfc *,std::shared_ptr<AudioCapturerIfc>::__shared_ptr_default_delete<AudioCapturerIfc,AudioCapturerIfc>,std::allocator<AudioCapturerIfc>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_pointer<AudioCapturerIfc *,std::shared_ptr<AudioCapturerIfc>::__shared_ptr_default_delete<AudioCapturerIfc,AudioCapturerIfc>,std::allocator<AudioCapturerIfc>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<AudioCapturerIfc *,std::shared_ptr<AudioCapturerIfc>::__shared_ptr_default_delete<AudioCapturerIfc,AudioCapturerIfc>,std::allocator<AudioCapturerIfc>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI16AudioCapturerIfcE27__shared_ptr_default_deleteIS1_S1_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

char *HALB_CaptureFile::HALB_CaptureFile(char *a1, uint64_t *a2, uint64_t a3, int a4)
{
  __int128 v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  std::string *p_dst;
  std::string::size_type size;
  std::string::size_type v13;
  std::string *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  std::string *v18;
  AMCP::Log::Scope_Registry *v19;
  std::string *v20;
  AMCP::Log::Scope_Registry *v21;
  _QWORD *v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  caulk::concurrent::messenger *v28;
  _opaque_pthread_t *v29;
  mach_port_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  OSQueueHead *v47;
  char *v48;
  CFAbsoluteTime Current;
  CATimeUtilities *v51;
  unint64_t v52;
  double v53;
  std::string *v54;
  std::string *v55;
  std::string *v56;
  AMCP::Log::Scope_Registry *v57;
  std::__shared_weak_count *v58;
  NSObject *v59;
  unint64_t *v60;
  unint64_t v61;
  os_signpost_id_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::string *v66;
  std::string __dst;
  std::string v69;
  std::string v70;
  char v71;
  char v72;
  char v73;
  void *__p;
  char v75;
  _QWORD v76[52];

  v76[51] = *MEMORY[0x1E0C80C00];
  v7 = *(_OWORD *)(a3 + 16);
  v8 = *(_QWORD *)(a3 + 32);
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *((_OWORD *)a1 + 1) = v7;
  *((_QWORD *)a1 + 4) = v8;
  *((_QWORD *)a1 + 5) = 0;
  v9 = (uint64_t *)(a1 + 2120);
  v10 = a1 + 2136;
  *((_OWORD *)a1 + 131) = 0u;
  *((_OWORD *)a1 + 132) = 0u;
  *((_OWORD *)a1 + 133) = 0u;
  *((_QWORD *)a1 + 268) = 0;
  *((_DWORD *)a1 + 538) = a4;
  std::string::basic_string[abi:ne180100]<0>(&v69, "HAL_");
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v70);
  HALB_CaptureFile_NameBuilder::FindAndBuild(*a2, a2[1], 0, &v70);
  HALB_CaptureFile_NameBuilder::FindAndBuild(*a2, a2[1], 1, &v70);
  HALB_CaptureFile_NameBuilder::FindAndBuild(*a2, a2[1], 2, &v70);
  HALB_CaptureFile_NameBuilder::FindAndBuild(*a2, a2[1], 5, &v70);
  HALB_CaptureFile_NameBuilder::FindAndBuild(*a2, a2[1], 6, &v70);
  HALB_CaptureFile_NameBuilder::FindAndBuild(*a2, a2[1], 4, &v70);
  HALB_CaptureFile_NameBuilder::FindAndBuild(*a2, a2[1], 3, &v70);
  HALB_CaptureFile_NameBuilder::FindAndBuild(*a2, a2[1], 7, &v70);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(&__dst, (uint64_t)&v70.__r_.__value_.__l.__size_);
  v70.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F60];
  *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + *(_QWORD *)(v70.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v70.__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
  if (v75 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E50598](v76);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    size = __dst.__r_.__value_.__l.__size_;
  std::string::append(&v69, (const std::string::value_type *)p_dst, size);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v13 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  v14 = &v69;
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    v13 = v69.__r_.__value_.__l.__size_;
    v14 = (std::string *)v69.__r_.__value_.__r.__words[0];
  }
  for (; v13; --v13)
  {
    v15 = v14->__r_.__value_.__s.__data_[0];
    if (v15 == 47 || v15 == 32)
      v14->__r_.__value_.__s.__data_[0] = 95;
    v14 = (std::string *)((char *)v14 + 1);
  }
  v16 = *((_DWORD *)a1 + 538) - 2;
  if (v16 > 2)
    v17 = 270609;
  else
    v17 = qword_1B5D54328[v16];
  v18 = &v70;
  get_audio_capture_folder(&v70);
  if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v18 = (std::string *)v70.__r_.__value_.__r.__words[0];
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &v69;
  else
    v20 = (std::string *)v69.__r_.__value_.__r.__words[0];
  if (NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once != -1)
    dispatch_once(&NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once, &__block_literal_global_9968);
  if (NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction)
  {
    v19 = (AMCP::Log::Scope_Registry *)NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction(v17, v18, v20, 1667327590, 0, a3);
    v21 = v19;
  }
  else
  {
    v21 = 0;
  }
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v70.__r_.__value_.__l.__data_);
    if (v21)
    {
LABEL_33:
      v22 = (_QWORD *)operator new();
      *v22 = &off_1E6992CB8;
      v22[1] = 0;
      v22[2] = 0;
      v22[3] = v21;
      *(_QWORD *)&v23 = v21;
      *((_QWORD *)&v23 + 1) = v22;
      v24 = (std::__shared_weak_count *)*((_QWORD *)a1 + 268);
      *(_OWORD *)v10 = v23;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if ((*((_DWORD *)a1 + 538) - 2) > 2)
      {
        v35 = (_BYTE *)*((_QWORD *)a1 + 262);
        if (0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)a1 + 264) - (_QWORD)v35) >> 3) <= 0xC7)
        {
          v36 = (_BYTE *)*((_QWORD *)a1 + 263);
          v37 = (char *)operator new(0x3840uLL);
          v38 = &v37[72 * ((v36 - v35) / 72)];
          v39 = v38;
          if (v36 != v35)
          {
            v40 = &v37[72 * ((v36 - v35) / 72)];
            do
            {
              *(_OWORD *)(v40 - 72) = *(_OWORD *)(v36 - 72);
              v41 = *(_OWORD *)(v36 - 56);
              v42 = *(_OWORD *)(v36 - 40);
              v43 = *(_OWORD *)(v36 - 24);
              v39 = v40 - 72;
              *((_QWORD *)v40 - 1) = *((_QWORD *)v36 - 1);
              *(_OWORD *)(v40 - 24) = v43;
              *(_OWORD *)(v40 - 40) = v42;
              *(_OWORD *)(v40 - 56) = v41;
              v36 -= 72;
              v40 -= 72;
            }
            while (v36 != v35);
          }
          *((_QWORD *)a1 + 262) = v39;
          *((_QWORD *)a1 + 263) = v38;
          *((_QWORD *)a1 + 264) = v37 + 14400;
          if (v35)
            operator delete(v35);
        }
        std::string::basic_string[abi:ne180100]<0>(&__dst, "Audio HAL Data Capture Spool");
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v70, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          v70 = __dst;
        v71 = 1;
        v72 = 0;
        v73 = 0;
        v44 = operator new();
        ca::concurrent::messenger::messenger((uint64_t *)v44, (__int128 *)&v70);
        v45 = (_QWORD *)operator new();
        *v45 = 0;
        v45[1] = 0;
        *(_QWORD *)(v44 + 8) = v45;
        v46 = -256;
        *(_BYTE *)(v44 + 16) = 0;
        do
        {
          v47 = *(OSQueueHead **)(v44 + 8);
          v48 = (char *)operator new();
          *(_QWORD *)v48 = &off_1E6992C38;
          *((_QWORD *)v48 + 1) = 0;
          *((_DWORD *)v48 + 4) = 0;
          *(_OWORD *)(v48 + 24) = 0u;
          *(_OWORD *)(v48 + 40) = 0u;
          *(_OWORD *)(v48 + 56) = 0u;
          *(_OWORD *)(v48 + 72) = 0u;
          *((_QWORD *)v48 + 11) = 0;
          *((_QWORD *)v48 + 12) = a1;
          *((_QWORD *)v48 + 13) = 0;
          OSAtomicEnqueue(v47, v48, 0x68uLL);
        }
        while (!__CFADD__(v46++, 1));
        atomic_store(1u, (unsigned __int8 *)(v44 + 16));
        std::unique_ptr<HALB_AsyncMessageQueue<HALB_CaptureFile::TimeStampMessage,void>>::reset[abi:ne180100](v9, v44);
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v70.__r_.__value_.__l.__data_);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        v70.__r_.__value_.__s.__data_[0] = 0;
        Current = CFAbsoluteTimeGetCurrent();
        v52 = CATimeUtilities::GregorianDateFromAbsoluteTime(v51, Current);
        snprintf((char *)&v70, 0x200uLL, "%04d%02d%02d.%02d%02d%02d", v52, (int)(v52 >> 8) >> 24, (int)(v52 >> 16) >> 24, (int)(v52 >> 24) >> 24, SHIDWORD(v52) >> 24, llround(v53));
        std::string::basic_string[abi:ne180100]<0>(&__dst, (char *)&v70);
        get_audio_capture_folder(&v70);
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v54 = &v70;
        else
          v54 = (std::string *)v70.__r_.__value_.__r.__words[0];
        v55 = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v55 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        v56 = &v69;
        if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v56 = (std::string *)v69.__r_.__value_.__r.__words[0];
        v27 = snprintf(a1 + 48, 0x800uLL, "%s%s%s%s%s", (const char *)v54, (const char *)v55, "_", (const char *)v56, ".txt");
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v70.__r_.__value_.__l.__data_);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
      }
      else
      {
        v27 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v10 + 64))(*v10, 0);
      }
      goto LABEL_73;
    }
  }
  else if (v21)
  {
    goto LABEL_33;
  }
  AMCP::Log::Scope_Registry::get(v19);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v70, "com.apple.coreaudio", "AMCP");
  v28 = *(caulk::concurrent::messenger **)(v70.__r_.__value_.__r.__words[0] + 8);
  v29 = pthread_self();
  v30 = pthread_mach_thread_np(v29);
  v31 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
  *(_DWORD *)(v31 + 16) = 0;
  *(_BYTE *)(v31 + 20) = 16;
  *(_DWORD *)(v31 + 24) = v30;
  *(_QWORD *)(v31 + 32) = "HALB_CaptureFile.cpp";
  *(_DWORD *)(v31 + 40) = 221;
  *(_QWORD *)v31 = &off_1E6992D08;
  *(_QWORD *)(v31 + 8) = 0;
  v27 = caulk::concurrent::messenger::enqueue(v28, (caulk::concurrent::message *)v31);
  v32 = (std::__shared_weak_count *)v70.__r_.__value_.__l.__size_;
  if (v70.__r_.__value_.__l.__size_)
  {
    v33 = (unint64_t *)(v70.__r_.__value_.__l.__size_ + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
LABEL_73:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v27);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v70, "com.apple.coreaudio", "AMCP");
  v58 = (std::__shared_weak_count *)v70.__r_.__value_.__l.__size_;
  v59 = *(NSObject **)v70.__r_.__value_.__l.__data_;
  if (v70.__r_.__value_.__l.__size_)
  {
    v60 = (unint64_t *)(v70.__r_.__value_.__l.__size_ + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  AMCP::Log::Scope_Registry::get(v57);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v70, "com.apple.coreaudio", "AMCP");
  v62 = os_signpost_id_make_with_pointer(*(os_log_t *)v70.__r_.__value_.__l.__data_, a1);
  v63 = (std::__shared_weak_count *)v70.__r_.__value_.__l.__size_;
  if (v70.__r_.__value_.__l.__size_)
  {
    v64 = (unint64_t *)(v70.__r_.__value_.__l.__size_ + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (v62 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v59))
  {
    v66 = &v69;
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v66 = (std::string *)v69.__r_.__value_.__r.__words[0];
    LODWORD(v70.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + 4) = (std::string::size_type)v66;
    _os_signpost_emit_with_name_impl(&dword_1B57BA000, v59, OS_SIGNPOST_INTERVAL_BEGIN, v62, "AudioHAL Capture", "%{public}s", (uint8_t *)&v70, 0xCu);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1B5B8A758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  void *v48;

  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v46);
  std::unique_ptr<HALB_AsyncMessageQueue<HALB_CaptureFile::TimeStampMessage,void>>::reset[abi:ne180100](v45, 0);
  v48 = *(void **)(v44 + 2096);
  if (v48)
  {
    *(_QWORD *)(v44 + 2104) = v48;
    operator delete(v48);
  }
  _Unwind_Resume(a1);
}

void HALB_CaptureFile::~HALB_CaptureFile(ca::concurrent::details::service_thread ***this)
{
  AMCP::Log::Scope_Registry *v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  os_signpost_id_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  ca::concurrent::details::service_thread **v11;
  void *v12;
  ca::concurrent::details::service_thread **v13;
  unsigned __int8 v14;
  ca::concurrent::details::service_thread *v15;
  unint64_t v16;
  unint64_t v17;
  ca::concurrent::details::service_thread **v18;
  os_log_t *v19;
  std::__shared_weak_count *v20;

  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v19, "com.apple.coreaudio", "AMCP");
  v3 = v20;
  v4 = *v19;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  AMCP::Log::Scope_Registry::get(v2);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v19, "com.apple.coreaudio", "AMCP");
  v7 = os_signpost_id_make_with_pointer(*v19, this);
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    LOWORD(v19) = 0;
    _os_signpost_emit_with_name_impl(&dword_1B57BA000, v4, OS_SIGNPOST_INTERVAL_END, v7, "AudioHAL Capture", (const char *)&unk_1B5D95CC1, (uint8_t *)&v19, 2u);
  }
  if ((*((_DWORD *)this + 538) - 2) >= 3)
  {
    v11 = this[265];
    if (v11)
    {
      v12 = OSAtomicDequeue((OSQueueHead *)v11[1], 0x68uLL);
      if (v12)
      {
        *((_DWORD *)v12 + 4) = 2;
        v13 = this[265];
        v14 = atomic_load((unsigned __int8 *)v13 + 16);
        if ((v14 & 1) != 0)
        {
          v15 = *v13;
LABEL_20:
          v16 = *(_QWORD *)v15;
          atomic_store(*(_QWORD *)v15, (unint64_t *)v12 + 1);
          do
          {
            v17 = __ldaxr((unint64_t *)v15);
            if (v17 != v16)
            {
              __clrex();
              goto LABEL_20;
            }
          }
          while (__stlxr((unint64_t)v12, (unint64_t *)v15));
          ca::sync::semaphore::signal((unsigned int *)v15 + 36);
        }
        else
        {
          (*(void (**)(void *))(*(_QWORD *)v12 + 8))(v12);
        }
      }
      ca::concurrent::details::service_thread::drain(*this[265]);
    }
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(this + 267));
  std::unique_ptr<HALB_AsyncMessageQueue<HALB_CaptureFile::TimeStampMessage,void>>::reset[abi:ne180100]((uint64_t *)this + 265, 0);
  v18 = this[262];
  if (v18)
  {
    this[263] = v18;
    operator delete(v18);
  }
}

void sub_1B5B8AB10(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5B8AAD4);
}

unsigned int *HALB_CaptureFile::Write(unsigned int *result, uint64_t a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  double *v14;
  double v15;
  double v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  std::vector<char>::size_type v21;
  unint64_t *v22;
  unint64_t v23;
  double *v24;
  _DWORD *exception;
  _DWORD v26[4];
  uint64_t v27;
  std::vector<char> v28;
  uint8_t buf[4];
  const char *v30;
  _BYTE v31[12];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)result + 267);
  if (v6)
  {
    v8 = (uint64_t)result;
    v10 = result[6];
    v9 = result[7];
    v26[0] = 1;
    v26[2] = v9;
    v26[3] = v10 * a5;
    v27 = a6;
    if (!a6)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v30 = "HALB_CaptureFile.cpp";
        *(_WORD *)v31 = 1024;
        *(_DWORD *)&v31[2] = 331;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  data buffer is NULL", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(4uLL);
      *exception = 1852797029;
    }
    v14 = (double *)(result + 532);
    if (a3)
    {
      v15 = *((double *)result + 266);
      if (v15 != 0.0 && *a3 > v15)
      {
        v16 = fmin(*a3 - v15, 220500.0);
        v17 = (std::__shared_weak_count *)*((_QWORD *)result + 268);
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldxr(p_shared_owners);
          while (__stxr(v19 + 1, p_shared_owners));
          v10 = result[6];
          v9 = result[7];
        }
        v20 = v16;
        *(_DWORD *)buf = 1;
        v21 = v10 * v20;
        HIDWORD(v30) = v9;
        *(_DWORD *)v31 = v21;
        if ((_DWORD)v21)
        {
          std::vector<char>::vector(&v28, v21);
          *(_QWORD *)&v31[4] = v28.__begin_;
          (*(void (**)(uint64_t, uint64_t, uint8_t *, _QWORD, uint64_t))(*(_QWORD *)v6 + 96))(v6, v20, buf, 0, (uint64_t)*v14);
          if (v28.__begin_)
          {
            v28.__end_ = v28.__begin_;
            operator delete(v28.__begin_);
          }
        }
        if (v17)
        {
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
      }
    }
    (*(void (**)(_QWORD, uint64_t, _DWORD *, _QWORD, uint64_t))(**(_QWORD **)(v8 + 2136) + 96))(*(_QWORD *)(v8 + 2136), a5, v26, 0, (uint64_t)*(double *)(v8 + 2128));
    if (a3)
      v24 = a3;
    else
      v24 = (double *)(v8 + 2128);
    *(double *)(v8 + 2128) = *v24 + (double)a5;
    return HALB_CaptureFile::WriteTimestamps(v8, a2, (uint64_t)a3, a4, a5);
  }
  return result;
}

void sub_1B5B8AD88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (a2)
  {
    if (__p)
    {
      a15 = (uint64_t)__p;
      operator delete(__p);
    }
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B5B8ACC0);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *HALB_CaptureFile::WriteTimestamps(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *result;
  unsigned int v7;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  result = *(unsigned int **)(a1 + 2136);
  if (!result)
    return result;
  v7 = a5;
  v10 = 0.0;
  if (a2)
  {
    v11 = *(double *)a2;
    v12 = *(_QWORD *)(a2 + 8);
    if (a4)
    {
LABEL_4:
      v10 = *(double *)a4;
      v13 = *(_QWORD *)(a4 + 8);
      v14 = *(_QWORD *)(a4 + 16);
      goto LABEL_7;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0.0;
    if (a4)
      goto LABEL_4;
  }
  v13 = 0;
  v14 = 0;
LABEL_7:
  if ((*(_DWORD *)(a1 + 2152) - 2) > 2)
  {
    v15 = *(_QWORD *)(a1 + 2120);
    if (v15)
    {
      result = (unsigned int *)OSAtomicDequeue(*(OSQueueHead **)(v15 + 8), 0x68uLL);
      if (result)
      {
        if (a3)
        {
          result[4] = 0;
          *((_QWORD *)result + 3) = (unint64_t)v11;
          *((_QWORD *)result + 4) = v12;
          v16 = *(_QWORD *)(a3 + 8);
          *((_QWORD *)result + 5) = (unint64_t)*(double *)a3;
          *((_QWORD *)result + 6) = v16;
          *((_QWORD *)result + 7) = v7;
          *((_QWORD *)result + 8) = *(_QWORD *)(a3 + 16);
          *((_QWORD *)result + 9) = (unint64_t)v10;
          *((_QWORD *)result + 10) = v13;
          *((_QWORD *)result + 11) = v14;
        }
        else
        {
          if (a2)
            return result;
          result[4] = 1;
          *((_QWORD *)result + 7) = v7;
        }
        v17 = *(unsigned __int8 **)(a1 + 2120);
        v18 = atomic_load(v17 + 16);
        if ((v18 & 1) != 0)
        {
          v19 = *(_QWORD *)v17;
LABEL_17:
          v20 = *(_QWORD *)v19;
          atomic_store(*(_QWORD *)v19, (unint64_t *)result + 1);
          do
          {
            v21 = __ldaxr((unint64_t *)v19);
            if (v21 != v20)
            {
              __clrex();
              goto LABEL_17;
            }
          }
          while (__stlxr((unint64_t)result, (unint64_t *)v19));
          return ca::sync::semaphore::signal((unsigned int *)(v19 + 144));
        }
        else
        {
          return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        }
      }
    }
  }
  else if (a3)
  {
    return (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, double, uint64_t, uint64_t, _BYTE))(*(_QWORD *)result + 128))(result, v12, (uint64_t)v11, a5, (uint64_t)*(double *)a3, *(_QWORD *)(a3 + 8), a5, (uint64_t)v10, *(double *)(a3 + 16), v13, v14, 0);
  }
  return result;
}

void sub_1B5B8AF98(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_IOUADevice::Activate(HALS_IOUADevice *this)
{
  HALS_IOEngine2 *v2;
  uint64_t v3;
  uint64_t v4;
  HALS_Object *v5;
  HALS_IOEngine2 *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unsigned int v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t device_timestamp_buffer_id;
  unint64_t *v16;
  uint64_t device_client_status_buffer_id;
  unint64_t *v18;
  uint64_t device_io_status_buffer_id;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  HALS_IOUADevice::UpdateStreams(this, &v23);
  HALS_IOUADevice::UpdateControls(this);
  v2 = (HALS_IOEngine2 *)operator new();
  v6 = v2;
  v7 = *((_QWORD *)this + 164);
  v8 = *(_QWORD *)(v7 + 792);
  v9 = *(std::__shared_weak_count **)(v7 + 800);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  HALS_IOEngine2::HALS_IOEngine2(v2, this, v3, v4, v5);
  *(_QWORD *)v6 = off_1E697A778;
  v12 = *((_DWORD *)this + 330);
  *((_DWORD *)v6 + 278) = v12;
  *((_QWORD *)v6 + 140) = v8;
  *((_QWORD *)v6 + 141) = v9;
  if (v9)
  {
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *((_QWORD *)v6 + 150) = 0;
  *((_QWORD *)v6 + 149) = 0;
  *((_OWORD *)v6 + 71) = 0u;
  *((_OWORD *)v6 + 72) = 0u;
  *((_OWORD *)v6 + 73) = 0u;
  *((_QWORD *)v6 + 148) = (char *)v6 + 1192;
  device_timestamp_buffer_id = HALS_IOUAUCDriver::get_device_timestamp_buffer_id((HALS_IOUAUCDriver *)*(unsigned int *)(v8 + 4), v12);
  *((_QWORD *)v6 + 142) = device_timestamp_buffer_id;
  *((_QWORD *)v6 + 143) = HALS_IOUAUCDriver::map_memory((HALS_IOUAUCDriver *)*(unsigned int *)(v8 + 4), device_timestamp_buffer_id, &v26, v16);
  device_client_status_buffer_id = HALS_IOUAUCDriver::get_device_client_status_buffer_id((HALS_IOUAUCDriver *)*(unsigned int *)(v8 + 4), *((_DWORD *)v6 + 278));
  *((_QWORD *)v6 + 144) = device_client_status_buffer_id;
  *((_QWORD *)v6 + 145) = HALS_IOUAUCDriver::map_memory((HALS_IOUAUCDriver *)*(unsigned int *)(v8 + 4), device_client_status_buffer_id, &v25, v18);
  device_io_status_buffer_id = HALS_IOUAUCDriver::get_device_io_status_buffer_id((HALS_IOUAUCDriver *)*(unsigned int *)(v8 + 4), *((_DWORD *)v6 + 278));
  *((_QWORD *)v6 + 146) = device_io_status_buffer_id;
  *((_QWORD *)v6 + 147) = HALS_IOUAUCDriver::map_memory((HALS_IOUAUCDriver *)*(unsigned int *)(v8 + 4), device_io_status_buffer_id, &v24, v20);
  *((_QWORD *)this + 178) = v6;
  if (v9)
  {
    v21 = (unint64_t *)&v9->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  (***((void (****)(_QWORD))this + 178))(*((_QWORD *)this + 178));
  (*(void (**)(char *))(*((_QWORD *)this + 163) + 24))((char *)this + 1304);
  HALS_Device::Activate((const __CFString **)this);
}

void sub_1B5B8B16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HALS_IOEngine2 *v9;

  std::__tree<std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>>>::destroy(*((_QWORD **)v9 + 149));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v9 + 1120);
  HALS_IOEngine2::~HALS_IOEngine2(v9);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1B5E50688](v9, 0x10E1C404CC6C7EDLL);
  _Unwind_Resume(a1);
}

void HALS_IOUADevice::~HALS_IOUADevice(HALS_IOUADevice *this)
{
  HALS_IOUADevice::~HALS_IOUADevice(this);
  JUMPOUT(0x1B5E50688);
}

{
  uint64_t v2;
  HALS_Object *v3;
  HALS_Object *v4;
  void *v5;
  uint64_t i;
  void *v7;

  *(_QWORD *)this = off_1E6992E10;
  *((_QWORD *)this + 163) = &unk_1E69931D8;
  v2 = *((_QWORD *)this + 178);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    HALS_ObjectMap::ObjectIsDead(*((HALS_ObjectMap **)this + 178), v3);
    *((_QWORD *)this + 178) = 0;
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_IOUADevice *)((char *)this + 1432));
  v5 = (void *)*((_QWORD *)this + 175);
  if (v5)
  {
    *((_QWORD *)this + 176) = v5;
    operator delete(v5);
  }
  for (i = 0; i != -48; i -= 24)
  {
    v7 = *(void **)((char *)this + i + 1376);
    if (v7)
    {
      *(_QWORD *)((char *)this + i + 1384) = v7;
      operator delete(v7);
    }
  }
  HALS_IOUAObject::~HALS_IOUAObject((HALS_IOUADevice *)((char *)this + 1304), v4);
  HALS_Device::~HALS_Device(this);
}

uint64_t HALS_IOUADevice::_Deactivate(HALS_IOUADevice *this)
{
  uint64_t v2;
  char v3;
  char v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  HALS_ObjectMap *v11;
  HALS_Object *v12;
  HALS_ObjectMap **v13;
  HALS_ObjectMap **v14;
  HALS_ObjectMap *v15;
  HALS_Object *v16;

  v2 = 0;
  v3 = 1;
  do
  {
    v4 = v3;
    v5 = (char *)this + 24 * v2;
    v6 = v5 + 1360;
    v7 = *((_QWORD *)v5 + 170);
    if (v7 != *((_QWORD *)v5 + 169))
    {
      v8 = 0;
      v9 = (uint64_t *)(v5 + 1352);
      v10 = 1;
      v7 = *((_QWORD *)v5 + 169);
      do
      {
        v11 = *(HALS_ObjectMap **)(v7 + 8 * v8);
        (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v11 + 8))(v11);
        HALS_ObjectMap::ObjectIsDead(v11, v12);
        v8 = v10;
        v7 = *v9;
        ++v10;
      }
      while (v8 < (*v6 - *v9) >> 3);
    }
    v3 = 0;
    *v6 = v7;
    v2 = 1;
  }
  while ((v4 & 1) != 0);
  v13 = (HALS_ObjectMap **)*((_QWORD *)this + 175);
  v14 = (HALS_ObjectMap **)*((_QWORD *)this + 176);
  if (v13 != v14)
  {
    do
    {
      (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)*v13 + 8))(*v13);
      v15 = *v13++;
      HALS_ObjectMap::ObjectIsDead(v15, v16);
    }
    while (v13 != v14);
    v13 = (HALS_ObjectMap **)*((_QWORD *)this + 175);
  }
  *((_QWORD *)this + 176) = v13;
  return HALS_Device::_Deactivate(this);
}

uint64_t HALS_IOUADevice::HasProperty(HALS_IOUADevice *this, const BOOL *a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4)
{
  signed int mSelector;
  int v7;
  _BOOL8 HasProperty;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1818850161)
  {
    HasProperty = 1;
    if (mSelector > 1735356004)
    {
      if (mSelector > 1768777572)
      {
        if (mSelector > 1818455661)
        {
          if (mSelector != 1818455662)
          {
            v7 = 1818850145;
            goto LABEL_51;
          }
        }
        else if (mSelector != 1768777573)
        {
          v7 = 1818452846;
          goto LABEL_51;
        }
LABEL_52:
        v9 = *((_QWORD *)this + 164);
        v10 = *(_QWORD *)(v9 + 792);
        v11 = *(std::__shared_weak_count **)(v9 + 800);
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldxr(p_shared_owners);
          while (__stxr(v13 + 1, p_shared_owners));
        }
        HasProperty = HALS_IOUAUCDriver::GetHasProperty((HALS_IOUAUCDriver *)*(unsigned int *)(v10 + 4), a3, *((_DWORD *)this + 330));
        if (v11)
        {
          v14 = (unint64_t *)&v11->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        return HasProperty;
      }
      if (mSelector > 1751737453)
      {
        if (mSelector != 1751737454)
        {
          v7 = 1768124270;
          goto LABEL_51;
        }
        goto LABEL_52;
      }
      if (mSelector != 1735356005)
      {
        v7 = 1751412337;
        goto LABEL_51;
      }
    }
    else
    {
      if (mSelector <= 1668639075)
      {
        if (mSelector > 1668050794)
        {
          if (mSelector != 1668050795)
          {
            v7 = 1668510818;
            goto LABEL_51;
          }
        }
        else if (mSelector != 1634429294)
        {
          v7 = 1668049764;
          goto LABEL_51;
        }
        goto LABEL_52;
      }
      if (mSelector > 1684434035)
      {
        if (mSelector == 1684434036)
          goto LABEL_52;
        if (mSelector != 1735354734)
          goto LABEL_61;
      }
      else
      {
        if (mSelector == 1668639076)
          goto LABEL_52;
        if (mSelector != 1668641652)
          goto LABEL_61;
        return *((_QWORD *)this + 167) != *((_QWORD *)this + 166);
      }
    }
    return HasProperty;
  }
  if (mSelector <= 1853059699)
  {
    if (mSelector > 1819569762)
    {
      if (mSelector > 1851878763)
      {
        if (mSelector != 1851878764)
        {
          v7 = 1853059619;
          goto LABEL_51;
        }
      }
      else if (mSelector != 1819569763)
      {
        v7 = 1836411236;
        goto LABEL_51;
      }
    }
    else if (mSelector > 1819111267)
    {
      if (mSelector != 1819111268)
      {
        v7 = 1819173229;
        goto LABEL_51;
      }
    }
    else if (mSelector != 1818850162)
    {
      v7 = 1819107691;
      goto LABEL_51;
    }
    goto LABEL_52;
  }
  if (mSelector <= 1936092275)
  {
    if (mSelector > 1920168546)
    {
      if (mSelector != 1920168547)
      {
        v7 = 1935763060;
        goto LABEL_51;
      }
    }
    else if (mSelector != 1853059700)
    {
      v7 = 1919512167;
      goto LABEL_51;
    }
    goto LABEL_52;
  }
  if (mSelector <= 1937009954)
  {
    if (mSelector != 1936092276)
    {
      v7 = 1936879204;
      goto LABEL_51;
    }
    goto LABEL_52;
  }
  if (mSelector == 1937009955 || mSelector == 1969841184)
    goto LABEL_52;
  v7 = 1953653102;
LABEL_51:
  if (mSelector == v7)
    goto LABEL_52;
LABEL_61:
  if ((HALS_Device::HasProperty((HALS_Device ***)this, a2, a3, a4) & 1) != 0)
    return 1;
  return (*(uint64_t (**)(char *, _QWORD))(*((_QWORD *)this + 163) + 16))((char *)this + 1304, a3->mSelector);
}

void sub_1B5B8B6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOUADevice::IsPropertySettable(HALS_IOUADevice *this, const BOOL *a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4)
{
  signed int mSelector;
  int v8;
  _BOOL8 IsPropertySettable;
  BOOL v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  const BOOL *v21;
  const AudioObjectPropertyAddress *v22;
  HALS_Client *v23;

  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1819107690)
  {
    IsPropertySettable = 0;
    if (mSelector > 1735356004)
    {
      if (mSelector > 1768124269)
      {
        if (mSelector > 1818850144)
        {
          if (mSelector == 1818850145)
            goto LABEL_51;
          v8 = 1818850162;
        }
        else
        {
          if (mSelector == 1768124270)
            goto LABEL_51;
          v8 = 1768777573;
        }
        goto LABEL_50;
      }
      if (mSelector != 1735356005)
      {
        if (mSelector == 1751412337)
          goto LABEL_51;
        v8 = 1751737454;
        goto LABEL_50;
      }
    }
    else
    {
      if (mSelector <= 1668510817)
      {
        v10 = mSelector == 1634429294 || mSelector == 1668049764;
        v11 = 1668050795;
        goto LABEL_31;
      }
      if (mSelector <= 1668641651)
      {
        if (mSelector == 1668510818)
          goto LABEL_51;
        v8 = 1668639076;
        goto LABEL_50;
      }
      if (mSelector != 1668641652 && mSelector != 1735354734)
        goto LABEL_60;
    }
    return IsPropertySettable;
  }
  if (mSelector <= 1853059699)
  {
    if (mSelector > 1819569762)
    {
      if (mSelector > 1851878763)
      {
        if (mSelector == 1851878764)
          goto LABEL_51;
        v8 = 1853059619;
      }
      else
      {
        if (mSelector == 1819569763)
          goto LABEL_51;
        v8 = 1836411236;
      }
      goto LABEL_50;
    }
    v10 = mSelector == 1819107691 || mSelector == 1819111268;
    v11 = 1819173229;
LABEL_31:
    if (v10 || mSelector == v11)
      goto LABEL_51;
    goto LABEL_60;
  }
  if (mSelector > 1936092275)
  {
    if (mSelector > 1953653101)
    {
      if (mSelector == 1969841184)
        goto LABEL_51;
      v8 = 1953653102;
    }
    else
    {
      if (mSelector == 1936092276)
        goto LABEL_51;
      v8 = 1937009955;
    }
  }
  else
  {
    if (mSelector <= 1920168546)
    {
      if (mSelector != 1853059700)
      {
        v8 = 1919512167;
        goto LABEL_50;
      }
LABEL_51:
      v13 = *((_QWORD *)this + 164);
      v14 = *(_QWORD *)(v13 + 792);
      v15 = *(std::__shared_weak_count **)(v13 + 800);
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      IsPropertySettable = HALS_IOUAUCDriver::GetIsPropertySettable((HALS_IOUAUCDriver *)*(unsigned int *)(v14 + 4), a3, *((_DWORD *)this + 330));
      if (v15)
      {
        v18 = (unint64_t *)&v15->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      return IsPropertySettable;
    }
    if (mSelector == 1920168547)
      goto LABEL_51;
    v8 = 1935763060;
  }
LABEL_50:
  if (mSelector == v8)
    goto LABEL_51;
LABEL_60:
  if (HALS_Device::HasProperty((HALS_Device ***)this, a2, a3, a4))
    return HALS_Device::IsPropertySettable(this, v21, a3, a4);
  else
    return HALS_IOUAObject::IsPropertySettable((HALS_IOUADevice *)((char *)this + 1304), a3, v22, v23);
}

void sub_1B5B8BA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOUADevice::GetPropertyDataSize(HALS_IOUADevice *this, const BOOL *a2, AudioObjectPropertyAddress *a3, uint64_t a4, void *a5, AudioObjectPropertyAddress *a6)
{
  signed int mSelector;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int NumberStreams;
  unsigned int *v23;
  HALS_Stream *v24;
  uint64_t v25;
  unsigned int v26;
  const BOOL *v27;
  const AudioObjectPropertyAddress *v28;
  uint64_t v29;
  const void *v30;
  HALS_Client *v31;
  AudioStreamRangedDescription *v33;
  unint64_t v34;
  uint64_t v35;
  double *p_mMinimum;
  void *v37;
  void *v38;
  int v39;
  HALS_Object *v40;
  uint64_t v41;
  unsigned int *v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  _BOOL4 HasProperty;
  uint64_t v47;
  unsigned int *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  int PropertySize;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *__p;
  std::__shared_weak_count *v57;
  uint64_t v58;
  unsigned int v59;

  mSelector = a3->mSelector;
  v12 = 8;
  if ((int)a3->mSelector > 1818850161)
  {
    if (mSelector > 1853059618)
    {
      if (mSelector <= 1935763059)
      {
        if (mSelector <= 1919512166)
        {
          if (mSelector == 1853059619)
          {
            NumberStreams = HALS_IODevice::GetNumberStreams(this, 0);
            if (NumberStreams || HALS_IODevice::GetNumberStreams(this, 1))
            {
              v23 = (unsigned int *)HALS_IODevice::CopyStreamByIndex(this, NumberStreams == 0, 0);
              v24 = (HALS_Stream *)v23;
              if (v23)
              {
                v25 = v23[4];
                __p = (void *)0x676C6F6270667461;
                LODWORD(v57) = 0;
                v26 = (*(unsigned int (**)(unsigned int *, uint64_t, void **, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v23 + 104))(v23, v25, &__p, 0, 0, 0)/ 0x38;
              }
              else
              {
                v26 = 0;
              }
              v59 = v26;
              v33 = (AudioStreamRangedDescription *)operator new[]();
              if (v24)
              {
                HALS_Stream::GetAvailablePhysicalFormats(v24, v26, &v59, v33);
                v34 = v59;
                v26 = v59;
              }
              else
              {
                v34 = v26;
              }
              __p = 0;
              v57 = 0;
              v58 = 0;
              v53 = 0;
              v54 = 0;
              v55 = 0;
              std::vector<CAAudioValueRange>::reserve(&__p, v34);
              v35 = v26;
              std::vector<CAAudioValueRange>::reserve((void **)&v53, v26);
              if (v26)
              {
                p_mMinimum = &v33->mSampleRateRange.mMinimum;
                do
                {
                  CAAudioValueRange_ComputeUnion(p_mMinimum, (double **)&__p, (char **)&v53);
                  v37 = (void *)v53;
                  std::vector<CAAudioValueRange>::__assign_with_size[abi:ne180100]<CAAudioValueRange*,CAAudioValueRange*>(&__p, (char *)v53, v54, (uint64_t)&v54[-v53] >> 4);
                  p_mMinimum += 7;
                  --v35;
                }
                while (v35);
              }
              else
              {
                v37 = (void *)v53;
              }
              v38 = __p;
              v39 = (_DWORD)v57 - (_DWORD)__p;
              if (v37)
                operator delete(v37);
              v12 = v39 & 0xFFFFFFF0;
              if (v38)
                operator delete(v38);
              MEMORY[0x1B5E50664](v33, 0x1000C8021716A34);
              HALS_ObjectMap::ReleaseObject(v24, v40);
            }
            else
            {
              v53 = 0x676C6F626E737223;
              LODWORD(v54) = 0;
              v41 = *((_QWORD *)this + 164);
              v42 = *(unsigned int **)(v41 + 792);
              v43 = *(std::__shared_weak_count **)(v41 + 800);
              __p = v42;
              v57 = v43;
              if (v43)
              {
                p_shared_owners = (unint64_t *)&v43->__shared_owners_;
                do
                  v45 = __ldxr(p_shared_owners);
                while (__stxr(v45 + 1, p_shared_owners));
              }
              HasProperty = HALS_IOUAUCDriver::GetHasProperty((HALS_IOUAUCDriver *)v42[1], (const AudioObjectPropertyAddress *)&v53, *((_DWORD *)this + 330));
              std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
              if (HasProperty)
              {
                v47 = *((_QWORD *)this + 164);
                v48 = *(unsigned int **)(v47 + 792);
                v49 = *(std::__shared_weak_count **)(v47 + 800);
                __p = v48;
                v57 = v49;
                if (v49)
                {
                  v50 = (unint64_t *)&v49->__shared_owners_;
                  do
                    v51 = __ldxr(v50);
                  while (__stxr(v51 + 1, v50));
                }
                PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)v48[1], (const AudioObjectPropertyAddress *)&v53, *((_DWORD *)this + 330), a5, a4);
                std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
                return (2 * PropertySize) & 0xFFFFFFF0;
              }
              else
              {
                return 16;
              }
            }
            return v12;
          }
          v13 = 1853059700;
          goto LABEL_44;
        }
        if (mSelector != 1919512167)
        {
          v13 = 1920168547;
          goto LABEL_44;
        }
LABEL_45:
        v15 = *((_QWORD *)this + 164);
        v16 = *(unsigned int **)(v15 + 792);
        v17 = *(std::__shared_weak_count **)(v15 + 800);
        __p = v16;
        v57 = v17;
        if (v17)
        {
          v18 = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        v12 = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)v16[1], a3, *((_DWORD *)this + 330), a5, a4);
        if (v17)
        {
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        return v12;
      }
      if (mSelector <= 1953653101)
      {
        if (mSelector != 1935763060)
        {
          v13 = 1936092276;
          goto LABEL_44;
        }
        goto LABEL_45;
      }
      if (mSelector != 1969841184)
      {
        v13 = 1953653102;
        goto LABEL_44;
      }
      return v12;
    }
    if (mSelector <= 1819173228)
    {
      if (mSelector == 1818850162)
        goto LABEL_45;
      if (mSelector == 1819107691)
        return v12;
      v14 = 1819111268;
    }
    else
    {
      if (mSelector <= 1836411235)
      {
        if (mSelector != 1819173229)
        {
          v13 = 1819569763;
          goto LABEL_44;
        }
        return v12;
      }
      if (mSelector == 1836411236)
        return v12;
      v14 = 1851878764;
    }
LABEL_40:
    if (mSelector != v14)
      goto LABEL_59;
    return v12;
  }
  if (mSelector > 1735354733)
  {
    if (mSelector > 1751737453)
    {
      if (mSelector > 1768777572)
      {
        if (mSelector != 1768777573)
        {
          v13 = 1818850145;
          goto LABEL_44;
        }
      }
      else if (mSelector != 1751737454)
      {
        v13 = 1768124270;
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    if (mSelector != 1735354734 && mSelector != 1735356005)
    {
      v13 = 1751412337;
      goto LABEL_44;
    }
    return 4;
  }
  if (mSelector > 1668510817)
  {
    if (mSelector > 1668641651)
    {
      if (mSelector != 1668641652)
      {
        v13 = 1684434036;
        goto LABEL_44;
      }
      return (*((_DWORD *)this + 334) - *((_DWORD *)this + 332)) & 0xFFFFFFFC;
    }
    if (mSelector == 1668510818)
      goto LABEL_45;
    v14 = 1668639076;
    goto LABEL_40;
  }
  if (mSelector == 1634429294 || mSelector == 1668049764)
    goto LABEL_45;
  v13 = 1668050795;
LABEL_44:
  if (mSelector == v13)
    goto LABEL_45;
LABEL_59:
  if (HALS_Device::HasProperty((HALS_Device ***)this, a2, a3, a6))
    return HALS_Device::GetPropertyDataSize((HALS_Device ***)this, v27, a3, a4, (int *)a5, a6);
  else
    return HALS_IOUAObject::GetPropertyDataSize((HALS_IOUADevice *)((char *)this + 1304), a3, v28, v29, v30, v31);
}

void sub_1B5B8C02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void HALS_IOUADevice::GetPropertyData(HALS_IOUADevice *this, const BOOL *a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4, AudioObjectPropertyAddress *a5, unsigned int *a6, void *a7, int *a8, HALS_Client *a9)
{
  unint64_t v9;
  uint64_t v17;
  const BOOL *v18;
  signed int mSelector;
  AudioObjectPropertyScope mScope;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  char v32;
  double v33;
  AudioObjectPropertyScope v34;
  unsigned int v35;
  int v36;
  AMCP::Log::Scope_Registry *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  _QWORD *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::runtime_error_vtbl *v50;
  unint64_t v51;
  _DWORD *v52;
  std::runtime_error *v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::runtime_error_vtbl *v68;
  int NumberStreams;
  unsigned int *v70;
  HALS_Stream *v71;
  uint64_t v72;
  unsigned int v73;
  AudioObjectPropertyScope v74;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  int StreamDSPLatency;
  uint64_t DSPLatencyForClient;
  unsigned int v84;
  AudioObjectPropertyScope v85;
  unsigned int TotalNumberChannelsForClient;
  int v87;
  AMCP::Log::Scope_Registry *v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *p_shared_owners;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  const __CFArray *v100;
  unint64_t v101;
  uint64_t v102;
  std::runtime_error *v103;
  void *v104;
  uint64_t v105;
  const void *v106;
  std::__shared_weak_count *imp;
  AudioObjectPropertyScope v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  const __CFString *v114;
  AudioChannelLayout *v115;
  AudioStreamRangedDescription *v116;
  unint64_t v117;
  double *p_mMinimum;
  void *v119;
  void *v120;
  uint64_t v121;
  size_t v122;
  HALS_Object *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  _BOOL4 HasProperty;
  uint64_t v130;
  uint64_t v131;
  const double *v132;
  const __CFArray *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  float64x2_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  std::runtime_error_vtbl *v147;
  NSObject *v148;
  _opaque_pthread_t *v149;
  mach_port_t v150;
  void *v151;
  NSObject *v152;
  _opaque_pthread_t *v153;
  mach_port_t v154;
  void *v155;
  std::runtime_error *v156;
  std::runtime_error *v157;
  _DWORD *exception;
  int64x2_t v159;
  AudioObjectPropertyAddress *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  __int128 v163;
  uint64_t v164;
  unint64_t outputStruct;
  __int128 v166;
  uint64_t v167;
  std::runtime_error v168;
  std::runtime_error v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  char v175;
  uint8_t buf[24];
  __int16 v177;
  _BYTE v178[14];
  const char *v179;
  int v180;
  uint64_t v181;
  __int128 v182;
  __int128 v183;

  v160 = a5;
  v181 = *MEMORY[0x1E0C80C00];
  v17 = (*(uint64_t (**)(HALS_IOUADevice *, HALS_Client *))(*(_QWORD *)this + 696))(this, a9);
  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1818850161)
  {
    if (mSelector > 1735356004)
    {
      if (mSelector > 1768777572)
      {
        if (mSelector > 1818455661)
        {
          if (mSelector == 1818455662)
            goto LABEL_88;
          v22 = 1818850145;
          goto LABEL_76;
        }
        if (mSelector == 1768777573)
          goto LABEL_77;
        v21 = 1818452846;
LABEL_87:
        if (mSelector == v21)
          goto LABEL_88;
LABEL_138:
        if (HALS_Device::HasProperty((HALS_Device ***)this, v18, a3, (AudioObjectPropertyAddress *)a9))
          HALS_Device::GetPropertyData(this, a2, a3, a4, &v160->mSelector, a6, a7, a8, a9);
        else
          HALS_IOUAObject::GetPropertyData((HALS_IOUADevice *)((char *)this + 1304), &a3->mSelector, v160, (AMCP::Log::Scope_Registry **)a6, (unsigned int *)a8, v104, v105, v106, a9);
        return;
      }
      if (mSelector > 1751737453)
      {
        if (mSelector == 1751737454)
          goto LABEL_77;
        v22 = 1768124270;
        goto LABEL_76;
      }
      if (mSelector != 1735356005)
      {
        v22 = 1751412337;
        goto LABEL_76;
      }
    }
    else
    {
      if (mSelector <= 1668639075)
      {
        if (mSelector > 1668050794)
        {
          if (mSelector == 1668050795)
            goto LABEL_77;
          v22 = 1668510818;
        }
        else
        {
          if (mSelector == 1634429294)
            goto LABEL_77;
          v22 = 1668049764;
        }
        goto LABEL_76;
      }
      if (mSelector <= 1684434035)
      {
        if (mSelector == 1668639076)
          goto LABEL_88;
        if (mSelector != 1668641652)
          goto LABEL_138;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 167) - *((_QWORD *)this + 166)) >> 2) >= a4 / 0xCuLL)
          v23 = a4 / 0xCuLL;
        else
          v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 167) - *((_QWORD *)this + 166)) >> 2);
        if (v23)
        {
          v24 = 0;
          v25 = 0;
          do
          {
            v26 = *((_QWORD *)this + 166);
            if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 167) - v26) >> 2) > v25)
            {
              v27 = &a6[v24];
              v28 = (uint64_t *)(v26 + v24 * 4);
              v29 = *v28;
              v27[2] = *((_DWORD *)v28 + 2);
              *(_QWORD *)v27 = v29;
            }
            ++v25;
            v24 += 3;
          }
          while (3 * v23 != v24);
        }
        v30 = 12 * v23;
LABEL_73:
        v160->mSelector = v30;
        return;
      }
      if (mSelector == 1684434036)
        goto LABEL_77;
      if (mSelector != 1735354734)
        goto LABEL_138;
    }
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_IOUADevice.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 423;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOUADevice::GetPropertyData: bad property data size for kAudioDevicePropertyDeviceIsRunning", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 561211770;
    }
    *a6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 178) + 672))(*((_QWORD *)this + 178));
    v30 = 4;
    goto LABEL_73;
  }
  mScope = a3->mScope;
  if (mSelector > 1853059699)
  {
    if (mSelector > 1936092275)
    {
      if (mSelector > 1936879203)
      {
        if (mSelector != 1936879204)
        {
          if (mSelector != 1953653102)
          {
            v21 = 1969841184;
            goto LABEL_87;
          }
          goto LABEL_77;
        }
        v85 = a3->mScope;
        TotalNumberChannelsForClient = HALS_Device::GetTotalNumberChannelsForClient(this, mScope == 1768845428, a9);
        v87 = caulk::numeric::exceptional_mul<unsigned int>(TotalNumberChannelsForClient);
        v88 = (AMCP::Log::Scope_Registry *)caulk::numeric::exceptional_add<unsigned int>(v87);
        if (v88 > a4)
        {
          AMCP::Log::Scope_Registry::get(v88);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v152 = **(NSObject ***)buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (os_log_type_enabled(v152, OS_LOG_TYPE_ERROR))
          {
            v153 = pthread_self();
            v154 = pthread_mach_thread_np(v153);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v154;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "HALS_IOUADevice.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 581;
            v177 = 2080;
            *(_QWORD *)v178 = "inDataSize < theSize";
            _os_log_error_impl(&dword_1B57BA000, v152, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s bad property data size for kAudioDevicePropertyDefaultChannelLayout", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v175);
          v155 = __cxa_allocate_exception(0x40uLL);
          std::runtime_error::runtime_error(&v168, "kAudioHardwareBadPropertySizeError");
          std::runtime_error::runtime_error(&v169, &v168);
          v171 = 0;
          v172 = 0;
          v173 = 0;
          v174 = -1;
          v169.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
          v170 = &unk_1E69A1FE0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v169);
          *(_QWORD *)&v178[6] = "virtual void HALS_IOUADevice::GetPropertyData(AudioObjectID, const AudioObjectPropertyAd"
                                "dress &, UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
          v179 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUADevice.cpp";
          v180 = 581;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v163);
          outputStruct = (unint64_t)off_1E69A20A0;
          v166 = v163;
          v167 = v164;
          v163 = 0uLL;
          v164 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&outputStruct);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v155, (uint64_t)buf);
        }
        v89 = v88;
        v90 = (*(uint64_t (**)(HALS_IOUADevice *, BOOL, HALS_Client *))(*(_QWORD *)this + 600))(this, v85 == 1768845428, a9);
        *(_QWORD *)a6 = 0;
        a6[2] = v90;
        if (v90)
        {
          v91 = v90;
          v92 = a6 + 4;
          do
          {
            *((_DWORD *)v92 - 1) = -1;
            *v92 = 0;
            v92[1] = 0;
            v92 = (_QWORD *)((char *)v92 + 20);
            --v91;
          }
          while (v91);
        }
        v160->mSelector = v89;
        v93 = *((_QWORD *)this + 164);
        v94 = *(_QWORD *)(v93 + 792);
        v95 = *(std::__shared_weak_count **)(v93 + 800);
        *(_QWORD *)buf = v94;
        *(_QWORD *)&buf[8] = v95;
        if (v95)
        {
          p_shared_owners = (unint64_t *)&v95->__shared_owners_;
          do
            v97 = __ldxr(p_shared_owners);
          while (__stxr(v97 + 1, p_shared_owners));
        }
        *(_QWORD *)&v183 = *((unsigned int *)this + 330);
        *((_QWORD *)&v183 + 1) = *(_QWORD *)&a3->mSelector;
        HALS_IOUAUCDriver::get_array_property((HALS_IOUAUCDriver *)&outputStruct, v94, v183, (void *)a3->mElement, a8, a7);
        if (v95)
        {
          v98 = (unint64_t *)&v95->__shared_owners_;
          do
            v99 = __ldaxr(v98);
          while (__stlxr(v99 - 1, v98));
          if (!v99)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
        v100 = (const __CFArray *)outputStruct;
        if (!outputStruct)
        {
LABEL_137:
          v103 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v103, "Could not construct");
          __cxa_throw(v103, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v101 = 0;
        v102 = 3;
        while (v101 < CFArrayGetCount(v100) && v101 < a6[2])
        {
          if (!outputStruct)
          {
            v157 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v157, "Could not construct");
            __cxa_throw(v157, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          a6[v102] = applesauce::CF::details::at_to<unsigned int>((const __CFArray *)outputStruct, v101++);
          v100 = (const __CFArray *)outputStruct;
          v102 += 5;
          if (!outputStruct)
            goto LABEL_137;
        }
        v162 = 0;
        v161 = 0;
        HALS_System::GetInstance(&v169, 0, &v161);
        *(_QWORD *)buf = HALS_SettingsManager::ReadSetting((HALS_SettingsManager *)v169.__vftable[58].what, *((const __CFString **)this + 14));
        *(_WORD *)&buf[8] = 1;
        imp = (std::__shared_weak_count *)v169.__imp_.__imp_;
        v108 = v85;
        if (v169.__imp_.__imp_)
        {
          v109 = (unint64_t *)(v169.__imp_.__imp_ + 8);
          do
            v110 = __ldaxr(v109);
          while (__stlxr(v110 - 1, v109));
          if (!v110)
          {
            ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
            std::__shared_weak_count::__release_weak(imp);
            v108 = v85;
          }
        }
        v111 = v162;
        if (v162)
        {
          v112 = (unint64_t *)&v162->__shared_owners_;
          do
            v113 = __ldaxr(v112);
          while (__stlxr(v113 - 1, v112));
          if (!v113)
          {
            ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
            std::__shared_weak_count::__release_weak(v111);
            v108 = v85;
          }
        }
        v169.__vftable = 0;
        LOWORD(v169.__imp_.__imp_) = 1;
        if (v108 == 1768845428)
        {
          v114 = CFSTR("input.surround");
        }
        else
        {
          if (a3->mScope != 1869968496)
          {
LABEL_159:
            CACFDictionary::~CACFDictionary((CACFDictionary *)&v169);
            CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
            if (outputStruct)
              CFRelease((CFTypeRef)outputStruct);
            return;
          }
          v114 = CFSTR("output.surround");
        }
        CACFDictionary::GetCACFDictionary((const __CFDictionary **)buf, v114, (CACFDictionary *)&v169);
        if (v169.__vftable)
          HALS_Device::ConstructLayoutFromDictionary((HALS_Device *)&v169, (const CACFDictionary *)a6, v115);
        goto LABEL_159;
      }
      if (mSelector != 1936092276)
      {
        if (mSelector == 1936876644)
        {
          v34 = a3->mScope;
          v35 = HALS_Device::GetTotalNumberChannelsForClient(this, mScope == 1768845428, a9);
          v36 = caulk::numeric::exceptional_mul<unsigned int>(v35);
          v37 = (AMCP::Log::Scope_Registry *)caulk::numeric::exceptional_add<unsigned int>(v36);
          if (v37 > a4)
          {
            AMCP::Log::Scope_Registry::get(v37);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            v148 = **(NSObject ***)buf;
            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
            if (os_log_type_enabled(v148, OS_LOG_TYPE_ERROR))
            {
              v149 = pthread_self();
              v150 = pthread_mach_thread_np(v149);
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)&buf[4] = v150;
              *(_WORD *)&buf[8] = 2080;
              *(_QWORD *)&buf[10] = "HALS_IOUADevice.cpp";
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 558;
              v177 = 2080;
              *(_QWORD *)v178 = "inDataSize < theSize";
              _os_log_error_impl(&dword_1B57BA000, v148, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyDefaultChannelLayout", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v175);
            v151 = __cxa_allocate_exception(0x40uLL);
            std::runtime_error::runtime_error(&v168, "kAudioHardwareBadPropertySizeError");
            std::runtime_error::runtime_error(&v169, &v168);
            v171 = 0;
            v172 = 0;
            v173 = 0;
            v174 = -1;
            v169.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
            v170 = &unk_1E69A1FE0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v169);
            *(_QWORD *)&v178[6] = "virtual void HALS_IOUADevice::GetPropertyData(AudioObjectID, const AudioObjectProperty"
                                  "Address &, UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
            v179 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUADevice.cpp";
            v180 = 558;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v163);
            outputStruct = (unint64_t)off_1E69A20A0;
            v166 = v163;
            v167 = v164;
            v163 = 0uLL;
            v164 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&outputStruct);
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v151, (uint64_t)buf);
          }
          v38 = v37;
          v39 = (*(uint64_t (**)(HALS_IOUADevice *, BOOL, HALS_Client *))(*(_QWORD *)this + 600))(this, v34 == 1768845428, a9);
          *(_QWORD *)a6 = 0;
          a6[2] = v39;
          if (v39)
          {
            v40 = v39;
            v41 = a6 + 4;
            do
            {
              *((_DWORD *)v41 - 1) = -1;
              *v41 = 0;
              v41[1] = 0;
              v41 = (_QWORD *)((char *)v41 + 20);
              --v40;
            }
            while (v40);
          }
          v160->mSelector = v38;
          *((_QWORD *)&v42 + 1) = ((unint64_t)a3->mScope << 32) | 0x73726E64;
          v43 = *((_QWORD *)this + 164);
          v44 = *(_QWORD *)(v43 + 792);
          v45 = *(std::__shared_weak_count **)(v43 + 800);
          *(_QWORD *)buf = v44;
          *(_QWORD *)&buf[8] = v45;
          if (v45)
          {
            v46 = (unint64_t *)&v45->__shared_owners_;
            do
              v47 = __ldxr(v46);
            while (__stxr(v47 + 1, v46));
          }
          *(_QWORD *)&v42 = *((unsigned int *)this + 330);
          HALS_IOUAUCDriver::get_array_property((HALS_IOUAUCDriver *)&v169, v44, v42, (void *)0x676C6F62, a8, a7);
          if (v45)
          {
            v48 = (unint64_t *)&v45->__shared_owners_;
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          v50 = v169.__vftable;
          if (!v169.__vftable)
          {
LABEL_64:
            v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v53, "Could not construct");
            __cxa_throw(v53, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v51 = 0;
          v52 = a6 + 3;
          while (v51 < CFArrayGetCount((CFArrayRef)v50) && v51 < a6[2])
          {
            if (!v169.__vftable)
            {
              v156 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v156, "Could not construct");
              __cxa_throw(v156, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            *v52 = applesauce::CF::details::at_to<unsigned int>((const __CFArray *)v169.__vftable, v51);
            v52 += 5;
            ++v51;
            v50 = v169.__vftable;
            if (!v169.__vftable)
              goto LABEL_64;
          }
          v68 = v169.__vftable;
          if (v169.__vftable)
            goto LABEL_97;
          return;
        }
        goto LABEL_138;
      }
LABEL_77:
      v169.__vftable = (std::runtime_error_vtbl *)a4;
      v54 = *((_QWORD *)this + 164);
      v55 = *(_QWORD *)(v54 + 792);
      v56 = *(std::__shared_weak_count **)(v54 + 800);
      *(_QWORD *)buf = v55;
      *(_QWORD *)&buf[8] = v56;
      if (v56)
      {
        v57 = (unint64_t *)&v56->__shared_owners_;
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v55 + 4), a3, *((_DWORD *)this + 330), a8, a7, a6, (unint64_t *)&v169);
      if (v56)
      {
        v59 = (unint64_t *)&v56->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
LABEL_163:
      v160->mSelector = (AudioObjectPropertySelector)v169.__vftable;
      return;
    }
    if (mSelector > 1920168546)
    {
      if (mSelector == 1920168547)
        goto LABEL_77;
      v22 = 1935763060;
    }
    else
    {
      if (mSelector == 1853059700)
        goto LABEL_77;
      v22 = 1919512167;
    }
LABEL_76:
    if (mSelector != v22)
      goto LABEL_138;
    goto LABEL_77;
  }
  if (mSelector <= 1819569762)
  {
    if (mSelector > 1819111267)
    {
      if (mSelector == 1819111268)
        goto LABEL_88;
      v21 = 1819173229;
    }
    else
    {
      if (mSelector == 1818850162)
        goto LABEL_77;
      v21 = 1819107691;
    }
    goto LABEL_87;
  }
  v31 = v17;
  v32 = (char)v18;
  v33 = *(double *)&v17;
  if (mSelector <= 1851878763)
  {
    if (mSelector == 1819569763)
    {
      v74 = a3->mScope;
      LODWORD(outputStruct) = 0;
      v169.__vftable = (std::runtime_error_vtbl *)a4;
      v75 = *((_QWORD *)this + 164);
      v76 = *(_QWORD *)(v75 + 792);
      v77 = *(std::__shared_weak_count **)(v75 + 800);
      *(_QWORD *)buf = v76;
      *(_QWORD *)&buf[8] = v77;
      if (v77)
      {
        v78 = (unint64_t *)&v77->__shared_owners_;
        do
          v79 = __ldxr(v78);
        while (__stxr(v79 + 1, v78));
      }
      HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v76 + 4), a3, *((_DWORD *)this + 330), a8, a7, &outputStruct, (unint64_t *)&v169);
      if (v77)
      {
        v80 = (unint64_t *)&v77->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      if ((*(unsigned int (**)(HALS_IOUADevice *))(*(_QWORD *)this + 440))(this))
      {
        StreamDSPLatency = HALS_Device::GetStreamDSPLatency(this, (const BOOL *)(v74 == 1768845428));
        LODWORD(outputStruct) = outputStruct + StreamDSPLatency;
      }
      if (v32)
      {
        LODWORD(v9) = outputStruct;
        LODWORD(outputStruct) = (v33
                                             / (*(double (**)(HALS_IOUADevice *))(*(_QWORD *)this + 264))(this)
                                             * (double)v9);
      }
      if (a9)
      {
        DSPLatencyForClient = HALS_Device::GetDSPLatencyForClient(this, v74 == 1768845428, a9);
        v84 = outputStruct;
        if ((DSPLatencyForClient & 0xFF00000000) != 0)
          v84 = outputStruct + DSPLatencyForClient;
      }
      else
      {
        v84 = outputStruct;
      }
      *a6 = v84;
      goto LABEL_163;
    }
    v21 = 1836411236;
    goto LABEL_87;
  }
  if (mSelector != 1851878764)
  {
    if (mSelector != 1853059619)
      goto LABEL_138;
    NumberStreams = HALS_IODevice::GetNumberStreams(this, 0);
    if (NumberStreams || HALS_IODevice::GetNumberStreams(this, 1))
    {
      v70 = (unsigned int *)HALS_IODevice::CopyStreamByIndex(this, NumberStreams == 0, 0);
      v71 = (HALS_Stream *)v70;
      if (v70)
      {
        v72 = v70[4];
        strcpy((char *)buf, "atfpbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        v73 = (*(unsigned int (**)(unsigned int *, uint64_t, uint8_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v70 + 104))(v70, v72, buf, 0, 0, 0)/ 0x38;
      }
      else
      {
        v73 = 0;
      }
      LODWORD(outputStruct) = v73;
      v116 = (AudioStreamRangedDescription *)operator new[]();
      if (v71)
      {
        HALS_Stream::GetAvailablePhysicalFormats(v71, v73, (unsigned int *)&outputStruct, v116);
        v117 = outputStruct;
        v73 = outputStruct;
      }
      else
      {
        v117 = v73;
      }
      memset(buf, 0, sizeof(buf));
      v169.__vftable = 0;
      v169.__imp_.__imp_ = 0;
      v170 = 0;
      std::vector<CAAudioValueRange>::reserve((void **)buf, v117);
      std::vector<CAAudioValueRange>::reserve((void **)&v169.__vftable, v117);
      if (v73)
      {
        v159 = vdupq_n_s64(v31);
        if (v117 <= 1)
          v117 = 1;
        p_mMinimum = &v116->mSampleRateRange.mMinimum;
        do
        {
          if (v32)
          {
            *((_QWORD *)p_mMinimum - 5) = v31;
            *(int64x2_t *)p_mMinimum = v159;
          }
          CAAudioValueRange_ComputeUnion(p_mMinimum, (double **)buf, (char **)&v169);
          std::vector<CAAudioValueRange>::__assign_with_size[abi:ne180100]<CAAudioValueRange*,CAAudioValueRange*>(buf, (char *)v169.__vftable, (char *)v169.__imp_.__imp_, (v169.__imp_.__imp_ - (const char *)v169.__vftable) >> 4);
          p_mMinimum += 7;
          --v117;
        }
        while (v117);
      }
      v120 = *(void **)buf;
      v119 = *(void **)&buf[8];
      v121 = (*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 4;
      if (a4 >> 4 < v121)
        LODWORD(v121) = a4 >> 4;
      v122 = (16 * v121);
      v160->mSelector = v122;
      if (v119 == v120)
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      memcpy(a6, v120, v122);
      if (v169.__vftable)
        operator delete(v169.__vftable);
      if (v120)
        operator delete(v120);
      MEMORY[0x1B5E50664](v116, 0x1000C8021716A34);
      HALS_ObjectMap::ReleaseObject(v71, v123);
      return;
    }
    v169.__vftable = (std::runtime_error_vtbl *)0x676C6F626E737223;
    LODWORD(v169.__imp_.__imp_) = 0;
    v124 = *((_QWORD *)this + 164);
    v125 = *(_QWORD *)(v124 + 792);
    v126 = *(_QWORD *)(v124 + 800);
    *(_QWORD *)buf = v125;
    *(_QWORD *)&buf[8] = v126;
    if (v126)
    {
      v127 = (unint64_t *)(v126 + 8);
      do
        v128 = __ldxr(v127);
      while (__stxr(v128 + 1, v127));
    }
    HasProperty = HALS_IOUAUCDriver::GetHasProperty((HALS_IOUAUCDriver *)*(unsigned int *)(v125 + 4), (const AudioObjectPropertyAddress *)&v169, *((_DWORD *)this + 330));
    v130 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (HasProperty)
    {
      MEMORY[0x1E0C80A78](v130);
      v132 = (const double *)((char *)v159.i64 - v131);
      outputStruct = (unint64_t)v133;
      v134 = *((_QWORD *)this + 164);
      v135 = *(_QWORD *)(v134 + 792);
      v136 = *(_QWORD *)(v134 + 800);
      *(_QWORD *)buf = v135;
      *(_QWORD *)&buf[8] = v136;
      if (v136)
      {
        v137 = (unint64_t *)(v136 + 8);
        do
          v138 = __ldxr(v137);
        while (__stxr(v138 + 1, v137));
      }
      HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v135 + 4), (const AudioObjectPropertyAddress *)&v169, *((_DWORD *)this + 330), a8, a7, (char *)&v159 - v131, &outputStruct);
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      v139 = outputStruct >> 3;
      if (outputStruct >= 8)
      {
        if (v139 <= 1)
          v140 = 1;
        else
          v140 = outputStruct >> 3;
        do
        {
          v141 = vld1q_dup_f64(v132++);
          *(float64x2_t *)a6 = v141;
          a6 += 4;
          --v140;
        }
        while (v140);
      }
      v160->mSelector = 16 * v139;
      return;
    }
    *(_QWORD *)&v163 = 8;
    v168.__vftable = 0;
    outputStruct = 0x676C6F626E737274;
    LODWORD(v166) = 0;
    v142 = *((_QWORD *)this + 164);
    v143 = *(_QWORD *)(v142 + 792);
    v144 = *(_QWORD *)(v142 + 800);
    *(_QWORD *)buf = v143;
    *(_QWORD *)&buf[8] = v144;
    if (v144)
    {
      v145 = (unint64_t *)(v144 + 8);
      do
        v146 = __ldxr(v145);
      while (__stxr(v146 + 1, v145));
    }
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v143 + 4), (const AudioObjectPropertyAddress *)&outputStruct, *((_DWORD *)this + 330), 0, 0, &v168, (unint64_t *)&v163);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (a4 < 0x10)
    {
      v30 = 0;
    }
    else
    {
      v147 = v168.__vftable;
      if (v32)
        *(double *)&v147 = v33;
      *(double *)a6 = *(double *)&v147;
      *((double *)a6 + 1) = *(double *)&v147;
      v30 = 16;
    }
    goto LABEL_73;
  }
LABEL_88:
  v61 = *((_QWORD *)this + 164);
  v62 = *(_QWORD *)(v61 + 792);
  v63 = *(std::__shared_weak_count **)(v61 + 800);
  *(_QWORD *)buf = v62;
  *(_QWORD *)&buf[8] = v63;
  if (v63)
  {
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  *(_QWORD *)&v182 = *((unsigned int *)this + 330);
  *((_QWORD *)&v182 + 1) = *(_QWORD *)&a3->mSelector;
  HALS_IOUAUCDriver::get_string_property((HALS_IOUAUCDriver *)&v169, v62, v182, (void *)a3->mElement, a8, a7);
  if (v63)
  {
    v66 = (unint64_t *)&v63->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  *(_QWORD *)a6 = CFRetain(v169.__vftable);
  v160->mSelector = 8;
  v68 = v169.__vftable;
  if (v169.__vftable)
LABEL_97:
    CFRelease(v68);
}

void sub_1B5B8D500(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1 - 192);
  _Unwind_Resume(a1);
}

void HALS_IOUADevice::SetPropertyData(HALS_IOUADevice *this, const AudioObjectPropertyAddress *a2, AudioObjectPropertyAddress *a3, unsigned int a4, AudioObjectPropertyAddress *a5, unsigned int a6, void *a7, AudioObjectPropertyAddress *a8)
{
  uint64_t v14;
  HALS_IOUAUCDriver *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  const void *v23;
  uint64_t v24;
  const void *v25;
  HALS_Client *v26;
  NSObject *v27;
  _opaque_pthread_t *v28;
  mach_port_t v29;
  void *exception;
  __int128 v31;
  uint64_t v32;
  uint64_t (**v33)();
  __int128 v34;
  uint64_t v35;
  std::runtime_error v36;
  std::runtime_error v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  uint8_t buf[8];
  _BYTE v45[10];
  __int16 v46;
  int v47;
  __int16 v48;
  _BYTE v49[14];
  const char *v50;
  int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (a3->mSelector == 1853059700)
  {
    if (a4 <= 7)
    {
      AMCP::Log::Scope_Registry::get(this);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v27 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        v28 = pthread_self();
        v29 = pthread_mach_thread_np(v28);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v29;
        *(_WORD *)v45 = 2080;
        *(_QWORD *)&v45[2] = "HALS_IOUADevice.cpp";
        v46 = 1024;
        v47 = 649;
        v48 = 2080;
        *(_QWORD *)v49 = "inDataSize < SizeOf32(Float64)";
        _os_log_error_impl(&dword_1B57BA000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s bad property data size for kAudioDevicePropertyNominalSampleRate", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v43);
      exception = __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v36, "kAudioHardwareBadPropertySizeError");
      std::runtime_error::runtime_error(&v37, &v36);
      v39 = 0;
      v40 = 0;
      v41 = 0;
      v42 = -1;
      v37.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v38 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v37);
      *(_QWORD *)&v49[6] = "virtual void HALS_IOUADevice::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddress"
                           " &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
      v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUADevice.cpp";
      v51 = 649;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v31);
      v33 = off_1E69A20A0;
      v34 = v31;
      v35 = v32;
      v31 = 0uLL;
      v32 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v33);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
    }
    v14 = *((_QWORD *)this + 164);
    v15 = *(HALS_IOUAUCDriver **)(v14 + 792);
    v16 = *(std::__shared_weak_count **)(v14 + 800);
    *(_QWORD *)buf = v15;
    *(_QWORD *)v45 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    HALS_IOUAUCDriver::SetPropertyData(v15, a3, *((_DWORD *)this + 330), a7, a6, a5, a4);
    if (v16)
    {
      v19 = (unint64_t *)&v16->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else if (HALS_Device::HasProperty((HALS_Device ***)this, (const BOOL *)a2, a3, a8))
  {
    HALS_Device::SetPropertyData(this, a2, a3, a4, a5, a6, (int *)a7, (HALS_Client *)a8);
  }
  else
  {
    HALS_IOUAObject::SetPropertyData((HALS_IOUADevice *)((char *)this + 1304), &a3->mSelector, a5, (CFTypeRef *)a7, v23, v24, v25, v26);
  }
}

void sub_1B5B8DB48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,uint64_t a29,uint64_t a30)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void HALS_IOUADevice::FlushAllQueues(HALS_IOUADevice *this)
{
  AMCP::Utility::Dispatch_Queue::flush_all_work((HALS_IOUADevice *)((char *)this + 664));
  AMCP::Utility::Dispatch_Queue::flush_all_work((HALS_IOUADevice *)((char *)this + 984));
  AMCP::Utility::Dispatch_Queue::flush_all_work((HALS_IOUADevice *)((char *)this + 1432));
}

uint64_t HALS_IOUADevice::DoAnyQueuesHaveWorkAfterFlush(HALS_IOUADevice *this)
{
  unsigned __int8 v1;
  unsigned __int8 v2;
  unsigned __int8 v4;

  v1 = atomic_load((unsigned __int8 *)this + 697);
  if ((v1 & 1) == 0)
  {
    v2 = atomic_load((unsigned __int8 *)this + 1017);
    if ((v2 & 1) == 0)
      return 0;
  }
  v4 = atomic_load((unsigned __int8 *)this + 1465);
  return v4 & 1;
}

void HALS_IOUADevice::create_mcp_engine(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t HALS_IOUADevice::GetClockAlgorithm(HALS_IOUADevice *this)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  int v5;

  v5 = 0;
  v4 = *(_QWORD *)"kolcbolg";
  v2 = 4;
  v3 = 0;
  (*(void (**)(HALS_IOUADevice *, _QWORD, uint64_t *, uint64_t, int *, unsigned int *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, *((unsigned int *)this + 330), &v4, 4, &v2, &v3, 0, 0, 0);
  return v3;
}

BOOL HALS_IOUADevice::IsClockStable(HALS_IOUADevice *this)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;

  v5 = 0;
  v4 = *(_QWORD *)"btscbolg";
  v2 = 4;
  v3 = 0;
  (*(void (**)(HALS_IOUADevice *, _QWORD, uint64_t *, uint64_t, int *, int *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, *((unsigned int *)this + 330), &v4, 4, &v2, &v3, 0, 0, 0);
  return v3 != 0;
}

uint64_t HALS_IOUADevice::_GetNumberStreams(HALS_IOUADevice *this, unsigned int a2)
{
  return (*((_QWORD *)this + 3 * a2 + 170) - *((_QWORD *)this + 3 * a2 + 169)) >> 3;
}

HALS_ObjectMap *HALS_IOUADevice::_CopyStreamByIndex(HALS_IOUADevice *this, HALS_Object *a2, unsigned int a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  HALS_ObjectMap *v6;

  v3 = (char *)this + 24 * a2;
  v4 = *((_QWORD *)v3 + 170);
  v5 = *((_QWORD *)v3 + 169);
  if (a3 >= (unint64_t)((v4 - v5) >> 3))
    v6 = 0;
  else
    v6 = *(HALS_ObjectMap **)(v5 + 8 * a3);
  HALS_ObjectMap::RetainObject(v6, a2);
  return v6;
}

HALS_ObjectMap *HALS_IOUADevice::_CopyIOEngine(HALS_ObjectMap **this, HALS_Object *a2)
{
  HALS_ObjectMap::RetainObject(this[178], a2);
  return this[178];
}

CFTypeRef HALS_IOUADevice::_CopyDefaultElementName(HALS_IOUADevice *this, AudioObjectPropertyScope a2, AudioObjectPropertyElement a3)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BOOL4 HasProperty;
  _BOOL4 v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  CFTypeRef v20;
  CFTypeRef cf;
  AudioObjectPropertyAddress v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  __int128 v27;

  v26 = *MEMORY[0x1E0C80C00];
  v23.mSelector = 1818454126;
  v23.mScope = a2;
  v23.mElement = a3;
  v4 = *((_QWORD *)this + 164);
  v5 = *(_QWORD *)(v4 + 792);
  v6 = *(std::__shared_weak_count **)(v4 + 800);
  v24 = v5;
  v25 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  HasProperty = HALS_IOUAUCDriver::GetHasProperty((HALS_IOUAUCDriver *)*(unsigned int *)(v5 + 4), &v23, *((_DWORD *)this + 330));
  v10 = HasProperty;
  if (v6)
  {
    v11 = (unint64_t *)&v6->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v10)
        goto LABEL_9;
      return 0;
    }
  }
  if (!HasProperty)
    return 0;
LABEL_9:
  v13 = *((_QWORD *)this + 164);
  v14 = *(_QWORD *)(v13 + 792);
  v15 = *(std::__shared_weak_count **)(v13 + 800);
  v24 = v14;
  v25 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_QWORD *)&v27 = *((unsigned int *)this + 330);
  *((_QWORD *)&v27 + 1) = *(_QWORD *)&v23.mSelector;
  HALS_IOUAUCDriver::get_string_property((HALS_IOUAUCDriver *)&cf, v14, v27, (void *)v23.mElement, 0, 0);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v20 = CFRetain(cf);
  if (cf)
    CFRelease(cf);
  return v20;
}

void sub_1B5B8DF74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint8_t buf, int a14, __int16 a15, __int16 a16, uint64_t a17, __int16 a18, int a19)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOUADevice::_GetTotalNumberChannels(HALS_IOUADevice *this, unsigned int a2)
{
  char *v2;
  unsigned int **v3;
  uint64_t v4;
  unsigned int ***v5;
  unsigned int *v6;
  uint64_t v7;
  _BYTE v9[28];
  int v10;
  uint64_t v11;
  int v12;
  int v13;

  v2 = (char *)this + 24 * a2;
  v3 = (unsigned int **)*((_QWORD *)v2 + 169);
  if (v3 == *((unsigned int ***)v2 + 170))
    return 0;
  LODWORD(v4) = 0;
  v5 = (unsigned int ***)(v2 + 1360);
  do
  {
    v6 = *v3++;
    v7 = v6[4];
    v11 = 0x676C6F6270667420;
    v12 = 0;
    v13 = 0;
    (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, int *, _BYTE *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v6 + 112))(v6, v7, &v11, 40, &v13, v9, 0, 0, 0);
    v4 = (v10 + v4);
  }
  while (v3 != *v5);
  return v4;
}

void HALS_IOUADevice::_CopyStreamList(uint64_t a1, unsigned int a2, void **a3)
{
  uint64_t v4;
  HALS_Object *v5;
  HALS_ObjectMap **v6;
  HALS_ObjectMap **i;
  HALS_ObjectMap *v8;
  unint64_t v9;
  HALS_ObjectMap **v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  HALS_ObjectMap **v16;
  char *v17;
  char *v18;
  HALS_ObjectMap *v19;

  a3[1] = *a3;
  v4 = a1 + 24 * a2;
  std::vector<void const*>::reserve(a3, (uint64_t)(*(_QWORD *)(v4 + 1360) - *(_QWORD *)(v4 + 1352)) >> 3);
  v6 = *(HALS_ObjectMap ***)(v4 + 1352);
  for (i = *(HALS_ObjectMap ***)(v4 + 1360); v6 != i; ++v6)
  {
    HALS_ObjectMap::RetainObject(*v6, v5);
    v8 = *v6;
    v10 = (HALS_ObjectMap **)a3[1];
    v9 = (unint64_t)a3[2];
    if ((unint64_t)v10 >= v9)
    {
      v12 = ((char *)v10 - (_BYTE *)*a3) >> 3;
      if ((unint64_t)(v12 + 1) >> 61)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v13 = v9 - (_QWORD)*a3;
      v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1))
        v14 = v12 + 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
        v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v15);
      else
        v5 = 0;
      v16 = (HALS_ObjectMap **)(v15 + 8 * v12);
      *v16 = v8;
      v11 = (char *)(v16 + 1);
      v18 = (char *)*a3;
      v17 = (char *)a3[1];
      if (v17 != *a3)
      {
        do
        {
          v19 = (HALS_ObjectMap *)*((_QWORD *)v17 - 1);
          v17 -= 8;
          *--v16 = v19;
        }
        while (v17 != v18);
        v17 = (char *)*a3;
      }
      *a3 = v16;
      a3[1] = v11;
      a3[2] = (void *)(v15 + 8 * (_QWORD)v5);
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v10 = v8;
      v11 = (char *)(v10 + 1);
    }
    a3[1] = v11;
  }
}

void HALS_IOUADevice::_CopyControls(HALS_IOUADevice *this, HALS_Device::BasicControlList *a2)
{
  HALS_ObjectMap **v2;
  HALS_ObjectMap **v3;
  HALS_Device::BasicControlList *v4;
  HALS_ObjectMap *v5;
  unint64_t v6;
  HALS_ObjectMap **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  HALS_ObjectMap **v13;
  char *v14;
  char *v15;
  HALS_ObjectMap *v16;

  v2 = (HALS_ObjectMap **)*((_QWORD *)this + 175);
  v3 = (HALS_ObjectMap **)*((_QWORD *)this + 176);
  if (v2 != v3)
  {
    v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, a2);
      v5 = *v2;
      v7 = (HALS_ObjectMap **)*((_QWORD *)v4 + 1);
      v6 = *((_QWORD *)v4 + 2);
      if ((unint64_t)v7 >= v6)
      {
        v9 = ((uint64_t)v7 - *(_QWORD *)v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v10 = v6 - *(_QWORD *)v4;
        v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1))
          v11 = v9 + 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
          v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        else
          a2 = 0;
        v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        *v13 = v5;
        v8 = v13 + 1;
        v15 = *(char **)v4;
        v14 = (char *)*((_QWORD *)v4 + 1);
        if (v14 != *(char **)v4)
        {
          do
          {
            v16 = (HALS_ObjectMap *)*((_QWORD *)v14 - 1);
            v14 -= 8;
            *--v13 = v16;
          }
          while (v14 != v15);
          v14 = *(char **)v4;
        }
        *(_QWORD *)v4 = v13;
        *((_QWORD *)v4 + 1) = v8;
        *((_QWORD *)v4 + 2) = v12 + 8 * (_QWORD)a2;
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v7 = v5;
        v8 = v7 + 1;
      }
      *((_QWORD *)v4 + 1) = v8;
      ++v2;
    }
    while (v2 != v3);
  }
}

uint64_t HALS_IOUADevice::_GetNumberControls(HALS_IOUADevice *this)
{
  return (*((_QWORD *)this + 176) - *((_QWORD *)this + 175)) >> 3;
}

HALS_ObjectMap *HALS_IOUADevice::_CopyControlByIndex(HALS_IOUADevice *this, HALS_Object *a2)
{
  uint64_t v2;
  HALS_ObjectMap *v3;

  v2 = *((_QWORD *)this + 175);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 176) - v2) >> 3))
    v3 = 0;
  else
    v3 = *(HALS_ObjectMap **)(v2 + 8 * a2);
  HALS_ObjectMap::RetainObject(v3, a2);
  return v3;
}

HALS_ObjectMap *HALS_IOUADevice::_CopyControlByDescription(HALS_IOUADevice *this, HALS_Object *a2, int a3, int a4)
{
  HALS_ObjectMap **v4;
  HALS_ObjectMap **v5;
  HALS_ObjectMap *v6;
  HALS_ObjectMap *v7;

  v4 = (HALS_ObjectMap **)*((_QWORD *)this + 175);
  v5 = (HALS_ObjectMap **)*((_QWORD *)this + 176);
  if (v4 != v5)
  {
    while (1)
    {
      v6 = *v4;
      if (*v4)
      {
        if (*((_DWORD *)v6 + 5) == (_DWORD)a2 && *((_DWORD *)v6 + 12) == a3 && *((_DWORD *)v6 + 13) == a4)
          break;
      }
      if (++v4 == v5)
        return 0;
    }
  }
  if (v4 == v5)
    return 0;
  v7 = *v4;
  HALS_ObjectMap::RetainObject(*v4, a2);
  return v7;
}

uint64_t HALS_IOUADevice::_SetDSPForClient(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  char v5;

  v4 = xmmword_1B5D68DD0;
  v5 = 0;
  if (a3)
    LODWORD(a3) = *(_DWORD *)(a3 + 16);
  return HALS_IOUADevice::HandleConfigurationChangeRequest(a1, &v4, a3);
}

uint64_t HALS_IOUADevice::PerformNonDriverConfigChange(HALS_IOUADevice *this, BOOL a2, int a3)
{
  __int128 v4;
  char v5;

  v4 = 0uLL;
  v5 = 0;
  return HALS_IOUADevice::HandleConfigurationChangeRequest((uint64_t)this, &v4, a3);
}

void `non-virtual thunk to'HALS_IOUADevice::~HALS_IOUADevice(HALS_IOUADevice *this)
{
  HALS_IOUADevice::~HALS_IOUADevice((HALS_IOUADevice *)((char *)this - 1304));
}

{
  HALS_IOUADevice::~HALS_IOUADevice((HALS_IOUADevice *)((char *)this - 1304));
  JUMPOUT(0x1B5E50688);
}

uint64_t HALS_IOUADevice::HandleConfigurationChangeRequest(uint64_t a1, __int128 *a2, int a3)
{
  unsigned __int8 v3;
  uint64_t v4;
  _QWORD v6[6];
  __int128 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZN15HALS_IOUADevice32HandleConfigurationChangeRequestENS_19ConfigChangePayloadEbj_block_invoke;
  v6[3] = &unk_1E6993260;
  v7 = *a2;
  v8 = *((_QWORD *)a2 + 2);
  v6[4] = &v10;
  v6[5] = a1;
  v9 = a3;
  v3 = atomic_load((unsigned __int8 *)(a1 + 1464));
  if ((v3 & 1) != 0)
    atomic_store(1u, (unsigned __int8 *)(a1 + 1465));
  dispatch_async(*(dispatch_queue_t *)(a1 + 1432), v6);
  v4 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v4;
}

uint64_t ___ZN15HALS_IOUADevice32HandleConfigurationChangeRequestENS_19ConfigChangePayloadEbj_block_invoke(uint64_t a1)
{
  unsigned int *v1;
  const AudioObjectPropertyAddress *v2;
  HALS_NotificationManager *v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  AMCP::Log::Scope_Registry *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  NSObject *v28;
  const char *v29;
  uint64_t v30;
  HALS_IOUADevice *v31;
  char v32;
  NSObject *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  const char *v38;
  unsigned int *v39;
  double v40;
  int16x8_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int16x8_t v45;
  char *v46;
  char *v47;
  double v48;
  NSObject *v49;
  const char *v50;
  uint32_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  int16x8_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  double v62;
  int16x8_t v63;
  NSObject *v64;
  const char *v65;
  uint32_t v66;
  _BYTE *v67;
  uint64_t v68;
  _BOOL4 updated;
  CAPropertyAddressListVector *v70;
  const AudioObjectPropertyAddress *v71;
  _BOOL4 v72;
  _BOOL4 v73;
  CAPropertyAddressList *v74;
  uint64_t v75;
  uint64_t v76;
  const AudioObjectPropertyAddress *v77;
  uint64_t v78;
  const AudioObjectPropertyAddress *v79;
  const AudioObjectPropertyAddress *v80;
  const AudioObjectPropertyAddress *v81;
  const AudioObjectPropertyAddress *v82;
  const AudioObjectPropertyAddress *v83;
  const AudioObjectPropertyAddress *v84;
  const AudioObjectPropertyAddress *v85;
  const AudioObjectPropertyAddress *v86;
  const AudioObjectPropertyAddress *v87;
  const AudioObjectPropertyAddress *v88;
  const AudioObjectPropertyAddress *v89;
  unsigned int *v90;
  unsigned int *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  _opaque_pthread_t *v100;
  mach_port_t v101;
  int v102;
  char v104;
  HALS_Device *v105;
  _QWORD *v106;
  uint64_t *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  BOOL v110[2];
  _BYTE v111[16];
  _QWORD *v112;
  uint64_t v113;
  void *v114;
  void *v115;
  uint64_t v116;
  CFTypeRef cf;
  uint64_t v118;
  std::__shared_weak_count *v119;
  void *v120;
  unsigned int *v121;
  uint64_t v122;
  CAPropertyAddressList *v123;
  CAPropertyAddressList *v124;
  uint64_t v125;
  void *v126[2];
  __int128 v127;
  _OWORD v128[2];
  uint64_t v129;
  char *v130;
  char *v131;
  _OWORD v132[2];
  uint64_t v133;
  void *__p;
  char *v135;
  AudioStreamBasicDescription v136;
  _BYTE v137[40];
  unsigned int v138;
  __int16 v139;
  _BYTE *v140;
  __int16 v141;
  uint64_t v142;
  __int16 v143;
  _BYTE *v144;
  _BYTE v145[18];
  __int16 v146;
  char *v147;
  __int16 v148;
  const char *v149;
  __int16 v150;
  unsigned int v151;
  __int16 v152;
  _BYTE *v153;
  __int16 v154;
  uint64_t v155;
  __int16 v156;
  _BYTE *v157;
  _BYTE v158[18];
  __int16 v159;
  char *v160;
  __int16 v161;
  const char *v162;
  __int16 v163;
  unsigned int v164;
  __int16 v165;
  _BYTE *v166;
  _BYTE buf[30];
  _QWORD v168[32];

  v168[29] = *MEMORY[0x1E0C80C00];
  v1 = *(unsigned int **)(a1 + 40);
  kdebug_trace();
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "HALS_IOUADevice.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1273;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v1 + 39;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUADevice::HandleConfigurationChangeRequest: %s  --->", buf, 0x1Cu);
  }
  *(_OWORD *)v126 = 0u;
  v127 = 0u;
  v124 = 0;
  v125 = 0;
  v123 = 0;
  v105 = (HALS_Device *)v1;
  v3 = (HALS_NotificationManager *)v1[4];
  strcpy(buf, "bgfcbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  HALS_NotificationManager::PropertiesChanged_Sync(v3, 0, 1u, (const AudioObjectPropertyAddress *)buf, v2);
  v120 = 0;
  v121 = 0;
  v122 = 0;
  v118 = 0;
  v119 = 0;
  HALS_System::GetInstance(buf, 0, &v118);
  v4 = *(_QWORD *)buf;
  v5 = (const void *)(*(uint64_t (**)(HALS_Device *))(*(_QWORD *)v105 + 200))(v105);
  v6 = v5;
  if (v5)
    CFRetain(v5);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v6);
  HALS_System::GetRawDeviceListUsingClockDevice(v4, (uint64_t)&v120, &cf);
  if (cf)
    CFRelease(cf);
  v7 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v8 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v119;
  if (v119)
  {
    p_shared_owners = (unint64_t *)&v119->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v114 = 0;
  v115 = 0;
  v116 = 0;
  v13 = *((_QWORD *)v105 + 178);
  if (v13)
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 216))(v13, &v114);
  HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)v111);
  HALS_DeviceState::Capture((HALS_DeviceState *)v111, v105, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
  v14 = *(unsigned __int8 *)(a1 + 64);
  v15 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
  if (v14)
  {
    if (v15)
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "HALS_IOUADevice.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1306;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = (char *)v105 + 156;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUADevice::HandleConfigurationChangeRequest: %s  --- calling driver", buf, 0x1Cu);
    }
    kdebug_trace();
    v16 = *((_QWORD *)v105 + 164);
    v17 = *(_QWORD *)(v16 + 792);
    v18 = *(std::__shared_weak_count **)(v16 + 800);
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v21 = (AMCP::Log::Scope_Registry *)HALS_IOUAUCDriver::perform_config_change((HALS_IOUAUCDriver *)*(unsigned int *)(v17 + 4), *((_DWORD *)v105 + 330), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (_DWORD)v21;
    if (v18)
    {
      v22 = (unint64_t *)&v18->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    {
      AMCP::Log::Scope_Registry::get(v21);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v24 = *(std::__shared_weak_count **)&buf[8];
      v25 = **(NSObject ***)buf;
      if (*(_QWORD *)&buf[8])
      {
        v26 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        v100 = pthread_self();
        v101 = pthread_mach_thread_np(v100);
        v102 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v101;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = "HALS_IOUADevice.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 1314;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = v102;
        _os_log_error_impl(&dword_1B57BA000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception performing config change %u", buf, 0x1Eu);
      }
    }
    kdebug_trace();
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_43;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "HALS_IOUADevice.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1319;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = (char *)v105 + 156;
    v28 = MEMORY[0x1E0C81028];
    v29 = "%25s:%-5d  HALS_IOUADevice::HandleConfigurationChangeRequest: %s  --- driver returned";
    goto LABEL_42;
  }
  if (v15)
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "HALS_IOUADevice.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1325;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = (char *)v105 + 156;
    v28 = MEMORY[0x1E0C81028];
    v29 = "%25s:%-5d  HALS_IOUADevice::HandleConfigurationChangeRequest: %s  --- skipping driver config change";
LABEL_42:
    _os_log_impl(&dword_1B57BA000, v28, OS_LOG_TYPE_DEFAULT, v29, buf, 0x1Cu);
  }
LABEL_43:
  *(_WORD *)v110 = 0;
  HALS_IOUADevice::UpdateStreams(v105, v110);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "HALS_IOUADevice.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1335;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = (char *)v105 + 156;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUADevice::HandleConfigurationChangeRequest: %s  --- log stream formats", buf, 0x1Cu);
  }
  v30 = 0;
  v31 = v105;
  v32 = 1;
  v33 = MEMORY[0x1E0C81028];
  do
  {
    v104 = v32;
    v34 = (char *)v31 + 24 * v30;
    v35 = *((_QWORD *)v34 + 169);
    if (*((_QWORD *)v34 + 170) != v35)
    {
      v36 = 0;
      v37 = 0;
      v106 = v34 + 1360;
      v107 = (uint64_t *)(v34 + 1352);
      if ((v104 & 1) != 0)
        v38 = "Output";
      else
        v38 = "Input";
      while (1)
      {
        v39 = *(unsigned int **)(v35 + 8 * v36);
        memset(&v136, 0, sizeof(v136));
        HALS_Stream::GetCurrentVirtualFormat((HALS_Stream *)v39, &v136);
        CAStreamBasicDescription::AsString((CAStreamBasicDescription *)&v136, buf, 0x100uLL, v40, v41);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v158 = 136316418;
          *(_QWORD *)&v158[4] = "HALS_IOUADevice.cpp";
          *(_WORD *)&v158[12] = 1024;
          *(_DWORD *)&v158[14] = 1205;
          v159 = 2080;
          v160 = (char *)v105 + 156;
          v161 = 2080;
          v162 = v38;
          v163 = 1024;
          v164 = v37;
          v165 = 2080;
          v166 = buf;
          _os_log_impl(&dword_1B57BA000, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUADevice::_LogStreamFormats: %s %s Stream %d Current Virtual Format: %s", v158, 0x36u);
        }
        v42 = v39[4];
        strcpy(v145, "amfsbolg");
        v145[9] = 0;
        *(_WORD *)&v145[10] = 0;
        v43 = (*(unsigned int (**)(unsigned int *, uint64_t, _BYTE *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v39 + 104))(v39, v42, v145, 0, 0, 0)/ 0x38uLL;
        std::vector<AudioStreamRangedDescription>::vector(&__p, v43);
        v44 = v39[4];
        strcpy(v145, "amfsbolg");
        v145[9] = 0;
        *(_WORD *)&v145[10] = 0;
        *(_DWORD *)v137 = 0;
        (*(void (**)(unsigned int *, uint64_t, _BYTE *, _QWORD, _BYTE *, void *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v39 + 112))(v39, v44, v145, (56 * v43), v137, __p, 0, 0, 0);
        std::vector<AudioStreamRangedDescription>::resize((char **)&__p, *(unsigned int *)v137 / 0x38uLL);
        v46 = (char *)__p;
        v47 = v135;
        while (v46 != v47)
        {
          *(_OWORD *)v137 = *(_OWORD *)v46;
          *(_OWORD *)&v137[16] = *((_OWORD *)v46 + 1);
          *(_QWORD *)&v137[32] = *((_QWORD *)v46 + 4);
          v48 = *((double *)v46 + 5);
          v45.i64[0] = *((_QWORD *)v46 + 6);
          if (v48 == *(double *)v45.i64)
          {
            *(_QWORD *)v137 = *((_QWORD *)v46 + 5);
            CAStreamBasicDescription::AsString((CAStreamBasicDescription *)v137, v158, 0x100uLL, v48, v45);
            if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
              goto LABEL_60;
            *(_DWORD *)v145 = 136316418;
            *(_QWORD *)&v145[4] = "HALS_IOUADevice.cpp";
            *(_WORD *)&v145[12] = 1024;
            *(_DWORD *)&v145[14] = 1221;
            v146 = 2080;
            v147 = (char *)v105 + 156;
            v148 = 2080;
            v149 = v38;
            v150 = 1024;
            v151 = v37;
            v152 = 2080;
            v153 = v158;
            v49 = v33;
            v50 = "%25s:%-5d  HALS_IOUADevice::_LogStreamFormats: %s %s Stream %d Avail Virtual Format: %s";
            v51 = 54;
          }
          else
          {
            CAStreamBasicDescription::AsString((CAStreamBasicDescription *)v137, v158, 0x100uLL, v48, v45);
            if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
              goto LABEL_60;
            v52 = (_BYTE *)*((_QWORD *)v46 + 5);
            v53 = *((_QWORD *)v46 + 6);
            *(_DWORD *)v145 = 136316930;
            *(_QWORD *)&v145[4] = "HALS_IOUADevice.cpp";
            *(_WORD *)&v145[12] = 1024;
            *(_DWORD *)&v145[14] = 1226;
            v146 = 2080;
            v147 = (char *)v105 + 156;
            v148 = 2080;
            v149 = v38;
            v150 = 1024;
            v151 = v37;
            v152 = 2048;
            v153 = v52;
            v154 = 2048;
            v155 = v53;
            v156 = 2080;
            v157 = v158;
            v49 = v33;
            v50 = "%25s:%-5d  HALS_IOUADevice::_LogStreamFormats: %s %s Stream %d Avail Virtual Format: [%.0f-%.0f] %s";
            v51 = 74;
          }
          _os_log_impl(&dword_1B57BA000, v49, OS_LOG_TYPE_DEFAULT, v50, v145, v51);
LABEL_60:
          v46 += 56;
        }
        v133 = 0;
        memset(v132, 0, sizeof(v132));
        v54 = v39[4];
        strcpy(v145, " tfpbolg");
        v145[9] = 0;
        *(_WORD *)&v145[10] = 0;
        *(_DWORD *)v137 = 0;
        v55 = (*(double (**)(unsigned int *, uint64_t, _BYTE *, uint64_t, _BYTE *, _OWORD *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v39 + 112))(v39, v54, v145, 40, v137, v132, 0, 0, 0);
        CAStreamBasicDescription::AsString((CAStreamBasicDescription *)v132, v158, 0x100uLL, v55, v56);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v145 = 136316418;
          *(_QWORD *)&v145[4] = "HALS_IOUADevice.cpp";
          *(_WORD *)&v145[12] = 1024;
          *(_DWORD *)&v145[14] = 1236;
          v146 = 2080;
          v147 = (char *)v105 + 156;
          v148 = 2080;
          v149 = v38;
          v150 = 1024;
          v151 = v37;
          v152 = 2080;
          v153 = v158;
          _os_log_impl(&dword_1B57BA000, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUADevice::_LogStreamFormats: %s %s Stream %d Current Physical Format: %s", v145, 0x36u);
        }
        v57 = v39[4];
        strcpy(v145, "atfpbolg");
        v145[9] = 0;
        *(_WORD *)&v145[10] = 0;
        v58 = (*(unsigned int (**)(unsigned int *, uint64_t, _BYTE *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v39 + 104))(v39, v57, v145, 0, 0, 0)/ 0x38uLL;
        std::vector<AudioStreamRangedDescription>::vector(&v130, v58);
        v59 = v39[4];
        strcpy(v145, "atfpbolg");
        v145[9] = 0;
        *(_WORD *)&v145[10] = 0;
        *(_DWORD *)v137 = 0;
        (*(void (**)(unsigned int *, uint64_t, _BYTE *, _QWORD, _BYTE *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v39 + 112))(v39, v59, v145, (56 * v58), v137, v130, 0, 0, 0);
        std::vector<AudioStreamRangedDescription>::resize(&v130, *(unsigned int *)v137 / 0x38uLL);
        v61 = v130;
        v60 = v131;
        if (v130 != v131)
          break;
LABEL_72:
        if (v61)
        {
          v131 = v61;
          operator delete(v61);
        }
        v31 = v105;
        if (__p)
        {
          v135 = (char *)__p;
          operator delete(__p);
        }
        v35 = *v107;
        v36 = ++v37;
        if (v37 >= (unint64_t)((*v106 - *v107) >> 3))
          goto LABEL_77;
      }
      while (1)
      {
        v63 = *((int16x8_t *)v61 + 1);
        v128[0] = *(_OWORD *)v61;
        v128[1] = v63;
        v129 = *((_QWORD *)v61 + 4);
        v62 = *((double *)v61 + 5);
        v63.i64[0] = *((_QWORD *)v61 + 6);
        if (v62 == *(double *)v63.i64)
        {
          *(_QWORD *)&v128[0] = *((_QWORD *)v61 + 5);
          CAStreamBasicDescription::AsString((CAStreamBasicDescription *)v128, v145, 0x100uLL, v62, v63);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v137 = 136316418;
            *(_QWORD *)&v137[4] = "HALS_IOUADevice.cpp";
            *(_WORD *)&v137[12] = 1024;
            *(_DWORD *)&v137[14] = 1252;
            *(_WORD *)&v137[18] = 2080;
            *(_QWORD *)&v137[20] = (char *)v105 + 156;
            *(_WORD *)&v137[28] = 2080;
            *(_QWORD *)&v137[30] = v38;
            *(_WORD *)&v137[38] = 1024;
            v138 = v37;
            v139 = 2080;
            v140 = v145;
            v64 = v33;
            v65 = "%25s:%-5d  HALS_IOUADevice::_LogStreamFormats: %s %s Stream %d Avail Physical Format: %s";
            v66 = 54;
LABEL_69:
            _os_log_impl(&dword_1B57BA000, v64, OS_LOG_TYPE_DEFAULT, v65, v137, v66);
          }
        }
        else
        {
          CAStreamBasicDescription::AsString((CAStreamBasicDescription *)v128, v145, 0x100uLL, v62, v63);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          {
            v67 = (_BYTE *)*((_QWORD *)v61 + 5);
            v68 = *((_QWORD *)v61 + 6);
            *(_DWORD *)v137 = 136316930;
            *(_QWORD *)&v137[4] = "HALS_IOUADevice.cpp";
            *(_WORD *)&v137[12] = 1024;
            *(_DWORD *)&v137[14] = 1257;
            *(_WORD *)&v137[18] = 2080;
            *(_QWORD *)&v137[20] = (char *)v105 + 156;
            *(_WORD *)&v137[28] = 2080;
            *(_QWORD *)&v137[30] = v38;
            *(_WORD *)&v137[38] = 1024;
            v138 = v37;
            v139 = 2048;
            v140 = v67;
            v141 = 2048;
            v142 = v68;
            v143 = 2080;
            v144 = v145;
            v64 = v33;
            v65 = "%25s:%-5d  HALS_IOUADevice::_LogStreamFormats: %s %s Stream %d Avail Physical Format: [%.0f-%.0f] %s";
            v66 = 74;
            goto LABEL_69;
          }
        }
        v61 += 56;
        if (v61 == v60)
        {
          v61 = v130;
          goto LABEL_72;
        }
      }
    }
LABEL_77:
    v32 = 0;
    v30 = 1;
  }
  while ((v104 & 1) != 0);
  updated = HALS_IOUADevice::UpdateControls(v31);
  HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)buf);
  HALS_DeviceState::Capture((HALS_DeviceState *)buf, v31, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
  HALS_DeviceState::Compare((HALS_DeviceState *)v111, (const HALS_DeviceState *)buf, (const AudioObjectPropertyAddress *)v126, &v123, v70);
  *(_QWORD *)v145 = 0x676C6F6200000000;
  v72 = v110[1];
  v73 = v110[0];
  if (v110[1] || v110[0])
  {
    *(_DWORD *)v145 = 1937009955;
    *(_DWORD *)&v145[8] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v126, (AudioObjectPropertyAddress *)v145, v71);
    if (v72)
    {
      strcpy(v145, "#mtstpni");
      v145[9] = 0;
      *(_WORD *)&v145[10] = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v126, (AudioObjectPropertyAddress *)v145, v71);
    }
    if (v73)
    {
      strcpy(v145, "#mtsptuo");
      v145[9] = 0;
      *(_WORD *)&v145[10] = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v126, (AudioObjectPropertyAddress *)v145, v71);
    }
  }
  if (updated)
  {
    strcpy(v145, "lrtcbolg");
    v145[9] = 0;
    *(_WORD *)&v145[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v126, (AudioObjectPropertyAddress *)v145, v71);
  }
  if (v126[0] == v126[1])
  {
    v74 = v123;
    while (v74 != v124)
    {
      v75 = *(_QWORD *)v74;
      v76 = *((_QWORD *)v74 + 1);
      v74 = (CAPropertyAddressList *)((char *)v74 + 32);
      if (v75 != v76)
        goto LABEL_89;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v158 = 136315650;
      *(_QWORD *)&v158[4] = "HALS_IOUADevice.cpp";
      *(_WORD *)&v158[12] = 1024;
      *(_DWORD *)&v158[14] = 1398;
      v159 = 2080;
      v160 = (char *)v105 + 156;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUADevice::HandleConfigurationChangeRequest: %s  but nothing changed", v158, 0x1Cu);
    }
  }
  else
  {
LABEL_89:
    strcpy(v145, "ffidbolg");
    v145[9] = 0;
    *(_WORD *)&v145[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v126, (AudioObjectPropertyAddress *)v145, v71);
  }
  strcpy(v158, "egfcbolg");
  v158[9] = 0;
  *(_WORD *)&v158[10] = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v126, (AudioObjectPropertyAddress *)v158, v77);
  *(_QWORD *)v158 = v168;
  std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)v158);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*(_QWORD **)&buf[16]);
  *(_QWORD *)buf = &v113;
  std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(v112);
  v78 = *((_QWORD *)v105 + 178);
  if (v78)
    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 928))(v78);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v158 = 136315650;
    *(_QWORD *)&v158[4] = "HALS_IOUADevice.cpp";
    *(_WORD *)&v158[12] = 1024;
    *(_DWORD *)&v158[14] = 1418;
    v159 = 2080;
    v160 = (char *)v105 + 156;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUADevice::HandleConfigurationChangeRequest: %s  --- sending notifications", v158, 0x1Cu);
  }
  if (!*(_BYTE *)(a1 + 64) && *(_QWORD *)(a1 + 48) == 4444)
  {
    strcpy(v158, "tsivbolg");
    v158[9] = 0;
    *(_WORD *)&v158[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v126, (AudioObjectPropertyAddress *)v158, v79);
    strcpy(v158, "TaPsbolg");
    v158[9] = 0;
    *(_WORD *)&v158[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v126, (AudioObjectPropertyAddress *)v158, v80);
    strcpy(v158, "CaPsbolg");
    v158[9] = 0;
    *(_WORD *)&v158[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v126, (AudioObjectPropertyAddress *)v158, v81);
    strcpy(v158, "tcoibolg");
    v158[9] = 0;
    *(_WORD *)&v158[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v126, (AudioObjectPropertyAddress *)v158, v82);
    strcpy(v158, "seddbolg");
    v158[9] = 0;
    *(_WORD *)&v158[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v126, (AudioObjectPropertyAddress *)v158, v83);
    strcpy(v158, "sedcbolg");
    v158[9] = 0;
    *(_WORD *)&v158[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v126, (AudioObjectPropertyAddress *)v158, v84);
    strcpy(v158, "tmfsbolg");
    v158[9] = 0;
    *(_WORD *)&v158[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v126, (AudioObjectPropertyAddress *)v158, v85);
    strcpy(v158, "#mtsbolg");
    v158[9] = 0;
    *(_WORD *)&v158[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v126, (AudioObjectPropertyAddress *)v158, v86);
    strcpy(v158, "amfsbolg");
    v158[9] = 0;
    *(_WORD *)&v158[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v126, (AudioObjectPropertyAddress *)v158, v87);
    strcpy(v158, " tfpbolg");
    v158[9] = 0;
    *(_WORD *)&v158[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v126, (AudioObjectPropertyAddress *)v158, v88);
    strcpy(v158, "ffidbolg");
    v158[9] = 0;
    *(_WORD *)&v158[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v126, (AudioObjectPropertyAddress *)v158, v89);
  }
  kdebug_trace();
  HALS_NotificationManager::GroupPropertiesChanged(1, *((_DWORD *)v105 + 4), *(_DWORD *)(a1 + 72), (uint64_t)v126, (uint64_t *)&v123, (uint64_t)&v114);
  v90 = (unsigned int *)v120;
  v91 = v121;
  while (v90 != v91)
    HALS_NotificationManager::GroupPropertiesChanged(1, *v90++, *(_DWORD *)(a1 + 72), (uint64_t)v126, (uint64_t *)&v123, (uint64_t)&v114);
  kdebug_trace();
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v158 = 136315650;
    *(_QWORD *)&v158[4] = "HALS_IOUADevice.cpp";
    *(_WORD *)&v158[12] = 1024;
    *(_DWORD *)&v158[14] = 1447;
    v159 = 2080;
    v160 = (char *)v105 + 156;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUADevice::HandleConfigurationChangeRequest: %s  --- restarting IO", v158, 0x1Cu);
  }
  v92 = *((_QWORD *)v105 + 178);
  if (v92)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v92 + 232))(v92);
    (*(void (**)(_QWORD, void **))(**((_QWORD **)v105 + 178) + 224))(*((_QWORD *)v105 + 178), &v114);
  }
  v108 = 0;
  v109 = 0;
  HALS_System::GetInstance(v158, 0, &v108);
  HALS_System::CheckForDefaultDeviceChanges(*(HALS_System **)v158);
  v93 = *(std::__shared_weak_count **)&v158[8];
  if (*(_QWORD *)&v158[8])
  {
    v94 = (unint64_t *)(*(_QWORD *)&v158[8] + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v109;
  if (v109)
  {
    v97 = (unint64_t *)&v109->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  if (v114)
  {
    v115 = v114;
    operator delete(v114);
  }
  if (v120)
    operator delete(v120);
  *(_QWORD *)v158 = &v123;
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)v158);
  if (v126[0])
    operator delete(v126[0]);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v158 = 136315650;
    *(_QWORD *)&v158[4] = "HALS_IOUADevice.cpp";
    *(_WORD *)&v158[12] = 1024;
    *(_DWORD *)&v158[14] = 1467;
    v159 = 2080;
    v160 = (char *)v105 + 156;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUADevice::HandleConfigurationChangeRequest: %s  <---", v158, 0x1Cu);
  }
  return kdebug_trace();
}

void sub_1B5B8F930(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  void *v42;
  AMCP::Log::Scope_Registry *v43;
  NSObject *v44;
  _opaque_pthread_t *v45;
  mach_port_t v46;

  if (a2)
  {
    if (__p)
      operator delete(__p);
    if (a35)
      operator delete(a35);
    v42 = (void *)a41;
    STACK[0x320] = (unint64_t)&a38;
    std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x320]);
    if (v42)
      operator delete(v42);
    v43 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(a1);
    AMCP::Log::Scope_Registry::get(v43);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&STACK[0x320], "com.apple.coreaudio", "AMCP");
    v44 = *(NSObject **)STACK[0x320];
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x320]);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      v45 = pthread_self();
      v46 = pthread_mach_thread_np(v45);
      LODWORD(STACK[0x320]) = 67109634;
      LODWORD(STACK[0x324]) = v46;
      LOWORD(STACK[0x328]) = 2080;
      STACK[0x32A] = (unint64_t)"HALS_IOUADevice.cpp";
      LOWORD(STACK[0x332]) = 1024;
      LODWORD(STACK[0x334]) = 1464;
      _os_log_error_impl(&dword_1B57BA000, v44, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception handling config change!", (uint8_t *)&STACK[0x320], 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B5B8F760);
  }
  _Unwind_Resume(a1);
}

void HALS_IOUADevice::UpdateStreams(HALS_IOUADevice *this, BOOL *a2)
{
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer v5;
  HALB_Mutex *v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  HALS_IOUAStream **v12;
  HALS_IOUAStream **v13;
  HALS_ObjectMap *v14;
  HALS_Object *v15;
  HALS_IOUAStream **v16;
  HALS_IOUAStream **v17;
  HALS_ObjectMap *v18;
  HALS_Object *v19;
  _QWORD v20[10];
  void *v21;
  void *v22;
  uint64_t v23;
  std::vector<unsigned int>::pointer v24;
  void *__p;
  void *v26;
  uint64_t v27;
  std::vector<unsigned int>::pointer v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  __n128 (*v32)(_QWORD *, uint64_t);
  void (*v33)(uint64_t);
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  uint64_t (*v41)();
  __int16 v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  __n128 (*v46)(_QWORD *, uint64_t);
  void (*v47)(uint64_t);
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  __n128 (*v54)(_QWORD *, uint64_t);
  void (*v55)(uint64_t);
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  __n128 (*v62)(_QWORD *, uint64_t);
  void (*v63)(uint64_t);
  void *v64;
  void *v65;
  uint64_t v66;
  std::vector<unsigned int> v67;
  std::vector<unsigned int> v68;

  *(_WORD *)a2 = 0;
  HALS_IOUADevice::get_stream_list(&v68, (uint64_t)this, 0);
  HALS_IOUADevice::get_stream_list(&v67, (uint64_t)this, 1);
  begin = v67.__begin_;
  v59 = 0;
  v60 = &v59;
  v61 = 0x4002000000;
  v62 = __Block_byref_object_copy__13;
  v63 = __Block_byref_object_dispose__14;
  v65 = 0;
  v66 = 0;
  v64 = 0;
  v51 = 0;
  v52 = &v51;
  v53 = 0x4002000000;
  v54 = __Block_byref_object_copy__13;
  v55 = __Block_byref_object_dispose__14;
  v57 = 0;
  v58 = 0;
  v56 = 0;
  v43 = 0;
  v44 = &v43;
  v45 = 0x4002000000;
  v46 = __Block_byref_object_copy__13;
  v47 = __Block_byref_object_dispose__14;
  v49 = 0;
  v50 = 0;
  v48 = 0;
  v37 = 0;
  v38 = &v37;
  v39 = 0x3002000000;
  v40 = __Block_byref_object_copy__15_10032;
  v41 = __Block_byref_object_dispose__16_10033;
  v42 = 0;
  v29 = 0;
  v30 = &v29;
  v31 = 0x4002000000;
  v32 = __Block_byref_object_copy__13;
  v33 = __Block_byref_object_dispose__14;
  v35 = 0;
  v36 = 0;
  v34 = 0;
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 1174405120;
  v20[2] = ___ZN15HALS_IOUADevice13UpdateStreamsEPb_block_invoke;
  v20[3] = &unk_1E6993228;
  v20[9] = this;
  v21 = 0;
  v5 = v68.__begin_;
  v22 = 0;
  v23 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v21, v68.__begin_, (uint64_t)v68.__end_, v68.__end_ - v68.__begin_);
  v24 = v5;
  __p = 0;
  v26 = 0;
  v27 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v67.__begin_, (uint64_t)v67.__end_, v67.__end_ - v67.__begin_);
  v20[4] = &v59;
  v20[5] = &v51;
  v20[6] = &v37;
  v20[7] = &v43;
  v28 = begin;
  v20[8] = &v29;
  v6 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUADevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v20);
  v7 = v38;
  *a2 = *((_BYTE *)v38 + 40);
  a2[1] = *((_BYTE *)v7 + 41);
  v8 = (_QWORD *)v60[5];
  v9 = (_QWORD *)v60[6];
  while (v8 != v9)
  {
    (**(void (***)(_QWORD))*v8)(*v8);
    ++v8;
  }
  v10 = (_QWORD *)v52[5];
  v11 = (_QWORD *)v52[6];
  while (v10 != v11)
  {
    (**(void (***)(_QWORD))*v10)(*v10);
    ++v10;
  }
  v12 = (HALS_IOUAStream **)v44[5];
  v13 = (HALS_IOUAStream **)v44[6];
  while (v12 != v13)
  {
    v14 = *v12;
    HALS_IOUAStream::SynchronizeWithHardware(*v12);
    HALS_ObjectMap::ReleaseObject(v14, v15);
    ++v12;
  }
  v16 = (HALS_IOUAStream **)v30[5];
  v17 = (HALS_IOUAStream **)v30[6];
  while (v16 != v17)
  {
    v18 = *v16;
    HALS_IOUAStream::SynchronizeWithHardware(*v16);
    HALS_ObjectMap::ReleaseObject(v18, v19);
    ++v16;
  }
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  _Block_object_dispose(&v29, 8);
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  _Block_object_dispose(&v37, 8);
  _Block_object_dispose(&v43, 8);
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  _Block_object_dispose(&v51, 8);
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
  _Block_object_dispose(&v59, 8);
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  if (v67.__begin_)
  {
    v67.__end_ = v67.__begin_;
    operator delete(v67.__begin_);
  }
  if (v68.__begin_)
  {
    v68.__end_ = v68.__begin_;
    operator delete(v68.__begin_);
  }
}

void sub_1B5B8FED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47)
{
  uint64_t v47;
  void *v49;
  void *v50;
  void *v51;
  void *v52;

  if (__p)
    operator delete(__p);
  _Block_object_dispose(&a27, 8);
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a41, 8);
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  _Block_object_dispose((const void *)(v47 - 224), 8);
  v49 = *(void **)(v47 - 184);
  if (v49)
  {
    *(_QWORD *)(v47 - 176) = v49;
    operator delete(v49);
  }
  _Block_object_dispose((const void *)(v47 - 160), 8);
  v50 = *(void **)(v47 - 120);
  if (v50)
  {
    *(_QWORD *)(v47 - 112) = v50;
    operator delete(v50);
  }
  v51 = *(void **)(v47 - 96);
  if (v51)
  {
    *(_QWORD *)(v47 - 88) = v51;
    operator delete(v51);
  }
  v52 = *(void **)(v47 - 72);
  if (v52)
  {
    *(_QWORD *)(v47 - 64) = v52;
    operator delete(v52);
  }
  _Unwind_Resume(a1);
}

BOOL HALS_IOUADevice::UpdateControls(HALS_IOUADevice *this)
{
  HALB_Mutex *v1;
  _QWORD *v2;
  _QWORD *v3;
  HALS_IOUAControl **v4;
  HALS_IOUAControl **i;
  HALS_ObjectMap *v6;
  HALS_Object *v7;
  int v8;
  _QWORD v10[8];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __n128 (*v14)(_QWORD *, uint64_t);
  void (*v15)(uint64_t);
  void *__p;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  __n128 (*v22)(_QWORD *, uint64_t);
  void (*v23)(uint64_t);
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char v30;

  v27 = 0;
  v28 = &v27;
  v29 = 0x2000000000;
  v30 = 0;
  v19 = 0;
  v20 = &v19;
  v21 = 0x4002000000;
  v22 = __Block_byref_object_copy__10020;
  v23 = __Block_byref_object_dispose__10021;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v11 = 0;
  v12 = &v11;
  v13 = 0x4002000000;
  v14 = __Block_byref_object_copy__10020;
  v15 = __Block_byref_object_dispose__10021;
  v17 = 0;
  v18 = 0;
  __p = 0;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = ___ZN15HALS_IOUADevice14UpdateControlsEv_block_invoke;
  v10[3] = &unk_1E6993200;
  v10[4] = &v27;
  v10[5] = &v19;
  v10[6] = &v11;
  v10[7] = this;
  v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUADevice *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v10);
  v2 = (_QWORD *)v20[5];
  v3 = (_QWORD *)v20[6];
  while (v2 != v3)
  {
    (**(void (***)(_QWORD))*v2)(*v2);
    ++v2;
  }
  v4 = (HALS_IOUAControl **)v12[5];
  for (i = (HALS_IOUAControl **)v12[6]; v4 != i; ++v4)
  {
    v6 = *v4;
    if (HALS_IOUAControl::RefreshCache(*v4))
      *((_BYTE *)v28 + 24) = 1;
    HALS_ObjectMap::ReleaseObject(v6, v7);
  }
  v8 = *((unsigned __int8 *)v28 + 24);
  _Block_object_dispose(&v11, 8);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v19, 8);
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  _Block_object_dispose(&v27, 8);
  return v8 != 0;
}

void sub_1B5B90160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  uint64_t v31;

  _Block_object_dispose(&a17, 8);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a25, 8);
  if (a30)
  {
    a31 = (uint64_t)a30;
    operator delete(a30);
  }
  _Block_object_dispose((const void *)(v31 - 80), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__10020(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__10021(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN15HALS_IOUADevice14UpdateControlsEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t PropertySize;
  unint64_t *v9;
  unint64_t v10;
  std::vector<unsigned int>::pointer v11;
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::pointer begin;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  HALS_Object *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  int v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  HALS_Object *v69;
  unint64_t v70;
  HALS_Object **v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  HALS_Object **v79;
  char *v80;
  char *v81;
  HALS_Object *v82;
  HALS_Object *v85;
  unint64_t v86;
  HALS_Object **v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  HALS_Object **v95;
  unint64_t v96;
  char *v97;
  char *v98;
  HALS_Object *v99;
  HALS_ObjectMap **v100;
  HALS_ObjectMap **v101;
  HALS_ObjectMap *v102;
  char v103;
  HALS_Object *v104;
  HALS_ObjectMap **v105;
  HALS_ObjectMap *v106;
  HALS_Object *v107;
  char **v108;
  HALS_ObjectMap **v109;
  HALS_ObjectMap **v110;
  HALS_ObjectMap *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  HALS_ObjectMap **v118;
  char *v119;
  char *v120;
  HALS_ObjectMap *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  HALS_ObjectMap **v125;
  HALS_ObjectMap **v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  std::vector<unsigned int> v130;
  unint64_t v131;
  int outputStruct;
  unint64_t v133;
  int v134;
  unint64_t v135;
  unsigned int v136;
  unint64_t v137;
  int v138;
  uint8_t buf[8];
  std::__shared_weak_count *v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(v2 + 1312);
  v4 = *(_QWORD *)(v3 + 792);
  v5 = *(std::__shared_weak_count **)(v3 + 800);
  *(_QWORD *)buf = v4;
  v140 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v4 + 4), (const AudioObjectPropertyAddress *)"lrtcbolg", *(_DWORD *)(v2 + 1320), 0, 0);
  if (v5)
  {
    v9 = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (PropertySize >= 4)
  {
    std::vector<unsigned int>::vector(&v130, PropertySize >> 2);
    begin = v130.__begin_;
    v137 = (char *)v130.__end_ - (char *)v130.__begin_;
    v14 = *(_QWORD *)(v2 + 1312);
    v15 = *(_QWORD *)(v14 + 792);
    v16 = *(std::__shared_weak_count **)(v14 + 800);
    *(_QWORD *)buf = v15;
    v140 = v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v15 + 4), (const AudioObjectPropertyAddress *)"lrtcbolg", *(_DWORD *)(v2 + 1320), 0, 0, begin, &v137);
    if (v16)
    {
      v19 = (unint64_t *)&v16->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v11 = v130.__begin_;
    end = v130.__end_;
  }
  else
  {
    v11 = 0;
    end = 0;
    memset(&v130, 0, sizeof(v130));
  }
  v21 = (char *)end - (char *)v11;
  v22 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
  v23 = *(uint64_t **)(v2 + 1400);
  v24 = *(uint64_t **)(v2 + 1408);
  v127 = a1;
  v25 = 0;
  while (v23 != v24)
  {
    v27 = *v23++;
    v26 = v27;
    *(_BYTE *)(v27 + 13) = 0;
    if (*(_DWORD *)(v27 + 60) == 1)
      v25 = v26;
  }
  if ((v21 & 0x3FFFFFFFCLL) != 0)
  {
    v28 = 0;
    v29 = (v21 >> 2);
    v128 = v29;
    v129 = v22;
    do
    {
      v30 = *(_QWORD *)(v2 + 1400);
      v31 = *(_QWORD *)(v2 + 1408);
      if (v30 != v31)
      {
        while (!*(_QWORD *)v30 || *(_DWORD *)(*(_QWORD *)v30 + 88) != v11[v28])
        {
          v30 += 8;
          if (v30 == v31)
            goto LABEL_33;
        }
      }
      if (v30 == v31)
      {
LABEL_33:
        v32 = v11[v28];
        if (v32)
        {
          v33 = *(_QWORD *)(v2 + 1312);
          v34 = *(_QWORD *)(v33 + 792);
          v35 = *(std::__shared_weak_count **)(v33 + 800);
          *(_QWORD *)buf = v34;
          v140 = v35;
          if (v35)
          {
            v36 = (unint64_t *)&v35->__shared_owners_;
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
          }
          outputStruct = 0;
          v131 = 4;
          HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v34 + 4), (const AudioObjectPropertyAddress *)"salcbolg", v32, 0, 0, &outputStruct, &v131);
          v38 = outputStruct;
          v39 = v140;
          if (v140)
          {
            v40 = (unint64_t *)&v140->__shared_owners_;
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          v42 = *(_QWORD *)(v2 + 1312);
          v43 = *(_QWORD *)(v42 + 792);
          v44 = *(std::__shared_weak_count **)(v42 + 800);
          *(_QWORD *)buf = v43;
          v140 = v44;
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
          }
          v134 = 0;
          v133 = 4;
          HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v43 + 4), (const AudioObjectPropertyAddress *)"slcbbolg", v32, 0, 0, &v134, &v133);
          v47 = v134;
          v48 = v140;
          if (v140)
          {
            v49 = (unint64_t *)&v140->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          v51 = *(_QWORD *)(v2 + 1312);
          v52 = *(_QWORD *)(v51 + 792);
          v53 = *(std::__shared_weak_count **)(v51 + 800);
          *(_QWORD *)buf = v52;
          v140 = v53;
          if (v53)
          {
            v54 = (unint64_t *)&v53->__shared_owners_;
            do
              v55 = __ldxr(v54);
            while (__stxr(v55 + 1, v54));
          }
          v136 = 0;
          v135 = 4;
          HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v52 + 4), (const AudioObjectPropertyAddress *)"pcscbolg", v32, 0, 0, &v136, &v135);
          v56 = (HALS_Object *)v136;
          v57 = v140;
          if (v140)
          {
            v58 = (unint64_t *)&v140->__shared_owners_;
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
          v60 = *(_QWORD *)(v2 + 1312);
          v61 = *(_QWORD *)(v60 + 792);
          v62 = *(std::__shared_weak_count **)(v60 + 800);
          *(_QWORD *)buf = v61;
          v140 = v62;
          if (v62)
          {
            v63 = (unint64_t *)&v62->__shared_owners_;
            do
              v64 = __ldxr(v63);
            while (__stxr(v64 + 1, v63));
          }
          v138 = 0;
          v137 = 4;
          HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v61 + 4), (const AudioObjectPropertyAddress *)"mlecbolg", v32, 0, 0, &v138, &v137);
          v65 = v138;
          v66 = v140;
          if (v140)
          {
            v67 = (unint64_t *)&v140->__shared_owners_;
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
          v69 = (HALS_Object *)operator new();
          HALS_IOUAControl::HALS_IOUAControl(v69, *(HALS_IOUADriver **)(v2 + 1312), v2, v32, v38, v47, v56, v65, 0);
          v22 = v129;
          v71 = (HALS_Object **)v129[6];
          v70 = v129[7];
          if ((unint64_t)v71 >= v70)
          {
            v73 = v129[5];
            v74 = ((uint64_t)v71 - v73) >> 3;
            if ((unint64_t)(v74 + 1) >> 61)
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            v75 = v70 - v73;
            v76 = v75 >> 2;
            if (v75 >> 2 <= (unint64_t)(v74 + 1))
              v76 = v74 + 1;
            if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
              v77 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v77 = v76;
            if (v77)
            {
              v77 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v77);
              v22 = v129;
            }
            else
            {
              v78 = 0;
            }
            v79 = (HALS_Object **)(v77 + 8 * v74);
            *v79 = v69;
            v72 = v79 + 1;
            v81 = (char *)v22[5];
            v80 = (char *)v22[6];
            if (v80 == v81)
            {
              v29 = v128;
            }
            else
            {
              v29 = v128;
              do
              {
                v82 = (HALS_Object *)*((_QWORD *)v80 - 1);
                v80 -= 8;
                *--v79 = v82;
              }
              while (v80 != v81);
              v80 = (char *)v22[5];
            }
            v22[5] = v79;
            v22[6] = v72;
            v22[7] = v77 + 8 * v78;
            if (v80)
              operator delete(v80);
          }
          else
          {
            *v71 = v69;
            v72 = v71 + 1;
            v29 = v128;
          }
          v22[6] = v72;
        }
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)v30 + 13) = 1;
      }
      ++v28;
    }
    while (v28 != v29);
  }
  if (*(_QWORD *)(v2 + 1360) != *(_QWORD *)(v2 + 1352))
  {
    if ((*(_QWORD *)(v2 + 448) & 0xFF00000000) == 0 || *(_QWORD *)(v2 + 448) != 1 || v25 == 0)
    {
      v85 = (HALS_Object *)operator new();
      HALS_IOUAControl::HALS_IOUAControl(v85, *(HALS_IOUADriver **)(v2 + 1312), v2, 0, 1702259059, 1650685548, 0, 0, 1);
      v87 = (HALS_Object **)v22[6];
      v86 = v22[7];
      if ((unint64_t)v87 >= v86)
      {
        v89 = v22[5];
        v90 = ((uint64_t)v87 - v89) >> 3;
        if ((unint64_t)(v90 + 1) >> 61)
LABEL_163:
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v91 = v86 - v89;
        v92 = v91 >> 2;
        if (v91 >> 2 <= (unint64_t)(v90 + 1))
          v92 = v90 + 1;
        if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
          v93 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v93 = v92;
        if (v93)
          v93 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v93);
        else
          v94 = 0;
        v95 = (HALS_Object **)(v93 + 8 * v90);
        v96 = v93 + 8 * v94;
        *v95 = v85;
        v88 = v95 + 1;
        v98 = (char *)v22[5];
        v97 = (char *)v22[6];
        if (v97 != v98)
        {
          do
          {
            v99 = (HALS_Object *)*((_QWORD *)v97 - 1);
            v97 -= 8;
            *--v95 = v99;
          }
          while (v97 != v98);
          v97 = (char *)v22[5];
        }
        v22[5] = v95;
        v22[6] = v88;
        v22[7] = v96;
        if (v97)
          operator delete(v97);
      }
      else
      {
        *v87 = v85;
        v88 = v87 + 1;
      }
      v22[6] = v88;
    }
    else
    {
      *(_BYTE *)(v25 + 13) = 1;
    }
  }
  v100 = *(HALS_ObjectMap ***)(v2 + 1400);
  v101 = *(HALS_ObjectMap ***)(v2 + 1408);
  if (v100 == v101)
  {
    v103 = 0;
  }
  else
  {
    while (1)
    {
      v102 = *v100;
      if (*v100)
      {
        if (!*((_BYTE *)v102 + 13))
          break;
      }
      if (++v100 == v101)
      {
        v103 = 0;
        v100 = *(HALS_ObjectMap ***)(v2 + 1408);
        goto LABEL_128;
      }
    }
    (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v102 + 8))(v102);
    HALS_ObjectMap::ObjectIsDead(*v100, v104);
    v103 = 1;
    if (v100 != v101)
    {
      v105 = v100 + 1;
      if (v100 + 1 != v101)
      {
        do
        {
          v106 = *v105;
          if (*v105 && !*((_BYTE *)v106 + 13))
          {
            (*(void (**)(HALS_ObjectMap *))(*(_QWORD *)v106 + 8))(v106);
            HALS_ObjectMap::ObjectIsDead(*v105, v107);
          }
          else
          {
            *v100++ = v106;
          }
          ++v105;
        }
        while (v105 != v101);
        v103 = 1;
      }
    }
  }
LABEL_128:
  v108 = (char **)(v2 + 1400);
  if (v100 != *(HALS_ObjectMap ***)(v2 + 1408))
    *(_QWORD *)(v2 + 1408) = v100;
  v110 = (HALS_ObjectMap **)v22[5];
  v109 = (HALS_ObjectMap **)v22[6];
  if (v109 != v110)
  {
    do
    {
      v111 = *v110;
      v112 = *(_QWORD *)(v2 + 1416);
      if ((unint64_t)v100 >= v112)
      {
        v113 = ((char *)v100 - *v108) >> 3;
        if ((unint64_t)(v113 + 1) >> 61)
          goto LABEL_163;
        v114 = v112 - (_QWORD)*v108;
        v115 = v114 >> 2;
        if (v114 >> 2 <= (unint64_t)(v113 + 1))
          v115 = v113 + 1;
        if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8)
          v116 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v116 = v115;
        if (v116)
          v116 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v116);
        else
          v117 = 0;
        v118 = (HALS_ObjectMap **)(v116 + 8 * v113);
        *v118 = v111;
        v100 = v118 + 1;
        v119 = *(char **)(v2 + 1408);
        v120 = *(char **)(v2 + 1400);
        if (v119 != v120)
        {
          do
          {
            v121 = (HALS_ObjectMap *)*((_QWORD *)v119 - 1);
            v119 -= 8;
            *--v118 = v121;
          }
          while (v119 != v120);
          v119 = *v108;
        }
        *(_QWORD *)(v2 + 1400) = v118;
        *(_QWORD *)(v2 + 1408) = v100;
        *(_QWORD *)(v2 + 1416) = v116 + 8 * v117;
        if (v119)
          operator delete(v119);
      }
      else
      {
        *v100++ = v111;
      }
      *(_QWORD *)(v2 + 1408) = v100;
      ++v110;
    }
    while (v110 != v109);
    v103 = 1;
  }
  v122 = *v108;
  if (*v108 != (char *)v100)
  {
    v123 = *v108;
    while (*(_DWORD *)(*(_QWORD *)v123 + 20) != 1702259059)
    {
      v123 += 8;
      if (v123 == (char *)v100)
        goto LABEL_155;
    }
    *(_DWORD *)(v2 + 448) = *(_DWORD *)(*(_QWORD *)v123 + 60);
    *(_BYTE *)(v2 + 452) = 1;
  }
LABEL_155:
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v127 + 32) + 8) + 24) = v103;
  v124 = *(_QWORD *)(*(_QWORD *)(v127 + 48) + 8);
  if (v108 != (char **)(v124 + 40))
    std::vector<HALS_IOUAControl *>::__assign_with_size[abi:ne180100]<HALS_IOUAControl **,HALS_IOUAControl **>((_QWORD *)(v124 + 40), v122, (char *)v100, ((char *)v100 - v122) >> 3);
  v125 = *(HALS_ObjectMap ***)(v124 + 40);
  v126 = *(HALS_ObjectMap ***)(v124 + 48);
  while (v125 != v126)
    HALS_ObjectMap::RetainObject(*v125++, (HALS_Object *)v122);
  if (v130.__begin_)
  {
    v130.__end_ = v130.__begin_;
    operator delete(v130.__begin_);
  }
}

void sub_1B5B90C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  __cxa_end_catch();
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void HALS_IOUADevice::get_stream_list(std::vector<unsigned int> *this, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t PropertySize;
  unint64_t *v11;
  unint64_t v12;
  std::vector<unsigned int>::pointer begin;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  AudioObjectPropertyAddress v24;

  v24.mElement = 0;
  *(_QWORD *)&v24.mSelector = *(_QWORD *)"#mtsptuo";
  if (a3)
    v24.mScope = 1768845428;
  v5 = *(_QWORD *)(a2 + 1312);
  v6 = *(_QWORD *)(v5 + 792);
  v7 = *(std::__shared_weak_count **)(v5 + 800);
  v22 = v6;
  v23 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v6 + 4), &v24, *(_DWORD *)(a2 + 1320), 0, 0);
  if (v7)
  {
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (PropertySize > 3)
  {
    std::vector<unsigned int>::vector(this, PropertySize >> 2);
    begin = this->__begin_;
    v21 = (char *)this->__end_ - (char *)this->__begin_;
    v14 = *(_QWORD *)(a2 + 1312);
    v15 = *(_QWORD *)(v14 + 792);
    v16 = *(std::__shared_weak_count **)(v14 + 800);
    v22 = v15;
    v23 = v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      begin = this->__begin_;
    }
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v15 + 4), &v24, *(_DWORD *)(a2 + 1320), 0, 0, begin, &v21);
    if (v16)
    {
      v19 = (unint64_t *)&v16->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

void sub_1B5B90E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  v5 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)(v3 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__13(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t __Block_byref_object_copy__15_10032(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 40) = *(_WORD *)(a2 + 40);
  return result;
}

void ___ZN15HALS_IOUADevice13UpdateStreamsEPb_block_invoke(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL IsEnabledForAnyClientOrContext;
  uint64_t v22;
  char *v23;
  char *v24;
  _DWORD *v25;
  void ***v26;
  uint64_t i;
  char *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  void **v33;
  int v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v47;
  HALS_IOUADriver *v48;
  int v49;
  HALS_Object *v50;
  unint64_t v51;
  uint64_t *v52;
  _QWORD *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  const void **v71;
  uint64_t v72;
  uint64_t v73;
  HALS_ObjectMap *v74;
  HALS_Object *v75;
  uint64_t v76;
  _BYTE *v77;
  int64_t v78;
  uint64_t v79;
  char v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD **v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  int8x16_t *v107;
  unint64_t v108;
  uint64_t v109;
  BOOL v110;
  void ***__p;
  char *v113;
  uint64_t *v114;
  uint64_t *v115;
  void ***v116;
  void **v117;
  BOOL v118;
  uint64_t v119;
  char v120;

  v1 = 0;
  v2 = a1[9];
  v3 = (a1[11] - a1[10]) >> 2;
  v4 = a1[13];
  v5 = (a1[15] - a1[14]) >> 2;
  v6 = a1[17];
  v7 = *(_QWORD *)(a1[4] + 8);
  v8 = *(_QWORD *)(a1[5] + 8);
  v9 = *(_QWORD *)(v8 + 40);
  v10 = *(_QWORD *)(a1[6] + 8);
  v119 = v10 + 40;
  v114 = (uint64_t *)(v7 + 40);
  v115 = (uint64_t *)(v8 + 40);
  *(_QWORD *)(v7 + 48) = *(_QWORD *)(v7 + 40);
  *(_QWORD *)(v8 + 48) = v9;
  v11 = 1;
  do
  {
    v12 = v11;
    v13 = v2 + 24 * v1;
    v14 = *(_QWORD *)(v13 + 1360);
    v15 = *(uint64_t **)(v13 + 1352);
    v16 = v14 - (_QWORD)v15;
    if (((v14 - (_QWORD)v15) & 0x7FFFFFFF8) != 0)
    {
      v17 = v16 >> 3;
      v18 = ((unint64_t)v16 >> 3);
      do
      {
        if (!v17)
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        v19 = *v15++;
        *(_BYTE *)(v19 + 13) = 0;
        --v17;
        --v18;
      }
      while (v18);
    }
    v11 = 0;
    *(_BYTE *)(v119 + v1) = 0;
    v1 = 1;
  }
  while ((v12 & 1) != 0);
  v20 = *(_QWORD *)(v2 + 448);
  IsEnabledForAnyClientOrContext = HALS_ReferenceStreamStateManager::ReferenceStreamIsEnabledForAnyClientOrContext(*(std::__shared_mutex_base **)(v2 + 440));
  v22 = v10 + 41;
  v23 = (char *)operator new(0x50uLL);
  v24 = v23;
  v113 = v23 + 80;
  *(_DWORD *)v23 = 0;
  *((_DWORD *)v23 + 1) = v3;
  *((_QWORD *)v23 + 1) = v4;
  *((_QWORD *)v23 + 2) = 0;
  *((_QWORD *)v23 + 3) = v114;
  *((_QWORD *)v23 + 4) = v119;
  *((_DWORD *)v23 + 10) = 1;
  *((_DWORD *)v23 + 11) = v5;
  *((_QWORD *)v23 + 6) = v6;
  *((_QWORD *)v23 + 7) = 1;
  *((_QWORD *)v23 + 8) = v115;
  *((_QWORD *)v23 + 9) = v22;
  if ((v20 & 0xFF00000000) != 0 && v20 == 1)
  {
    if (IsEnabledForAnyClientOrContext)
    {
      v25 = operator new(0xA0uLL);
      v26 = (void ***)v25;
      v25[20] = 0;
      v25[21] = v3;
      *((_QWORD *)v25 + 11) = v4;
      *((_QWORD *)v25 + 12) = 0x100000001;
      *((_QWORD *)v25 + 13) = v115;
      *((_QWORD *)v25 + 14) = v22;
      v113 = (char *)(v25 + 30);
      for (i = 10; i != -10; i -= 10)
      {
        v28 = (char *)&v25[i];
        v29 = *(_OWORD *)&v24[i * 4 + 16];
        *(_OWORD *)v28 = *(_OWORD *)&v24[i * 4];
        *((_OWORD *)v28 + 1) = v29;
        *((_QWORD *)v28 + 4) = *(_QWORD *)&v24[i * 4 + 32];
      }
      operator delete(v24);
    }
    else
    {
      v26 = (void ***)v23;
    }
  }
  else
  {
    v26 = (void ***)v23;
  }
  __p = v26;
  do
  {
    v116 = v26;
    v30 = *((unsigned int *)v26 + 1);
    if ((_DWORD)v30)
    {
      v31 = 0;
      v32 = v26[1];
      v33 = v26[3];
      v117 = v116[4];
      v34 = *((_DWORD *)v116 + 5);
      v118 = *((_DWORD *)v116 + 4) != 0;
      do
      {
        v35 = 0;
        v36 = 1;
        while (1)
        {
          v37 = v36;
          v38 = v2 + 24 * v35;
          v39 = *(_QWORD *)(v38 + 1360);
          v40 = *(_QWORD *)(v38 + 1352);
          v41 = v39 - v40;
          if (v41)
            break;
LABEL_24:
          v36 = 0;
          v35 = 1;
          if ((v37 & 1) == 0)
          {
            v47 = operator new();
            v48 = *(HALS_IOUADriver **)(v2 + 1312);
            v49 = *((_DWORD *)v32 + v31);
            HALS_Object::HALS_Object((HALS_Object *)v47, 1634956402, 1634956402, v2, v50);
            *(_QWORD *)v47 = off_1E6995F68;
            *(_DWORD *)(v47 + 48) = *(_DWORD *)(v2 + 16);
            *(_BYTE *)(v47 + 52) = v118;
            *(_DWORD *)(v47 + 56) = v34;
            HALS_IOUAObject::HALS_IOUAObject((HALS_IOUAObject *)(v47 + 64), v48, v49);
            *(_QWORD *)v47 = off_1E696D9D0;
            *(_QWORD *)(v47 + 64) = &unk_1E696DAC8;
            *(_BYTE *)(v47 + 112) = 1;
            *(_QWORD *)(v47 + 120) = &off_1E69749F0;
            *(_OWORD *)(v47 + 128) = 0u;
            *(_OWORD *)(v47 + 144) = 0u;
            *(_OWORD *)(v47 + 160) = 0u;
            *(_DWORD *)(v47 + 176) = *(_DWORD *)(v2 + 1320);
            *(_QWORD *)(v47 + 188) = 0;
            *(_QWORD *)(v47 + 180) = 0;
            *(_DWORD *)(v47 + 44) = v49;
            v52 = (uint64_t *)v33[1];
            v51 = (unint64_t)v33[2];
            if ((unint64_t)v52 >= v51)
            {
              v55 = ((char *)v52 - (_BYTE *)*v33) >> 3;
              if ((unint64_t)(v55 + 1) >> 61)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v56 = v51 - (_QWORD)*v33;
              v57 = v56 >> 2;
              if (v56 >> 2 <= (unint64_t)(v55 + 1))
                v57 = v55 + 1;
              if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
                v58 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v58 = v57;
              if (v58)
                v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v58);
              else
                v59 = 0;
              v60 = (uint64_t *)(v58 + 8 * v55);
              *v60 = v47;
              v53 = v60 + 1;
              v62 = (char *)*v33;
              v61 = (char *)v33[1];
              if (v61 != *v33)
              {
                do
                {
                  v63 = *((_QWORD *)v61 - 1);
                  v61 -= 8;
                  *--v60 = v63;
                }
                while (v61 != v62);
                v61 = (char *)*v33;
              }
              *v33 = v60;
              v33[1] = v53;
              v33[2] = (void *)(v58 + 8 * v59);
              if (v61)
                operator delete(v61);
            }
            else
            {
              *v52 = v47;
              v53 = v52 + 1;
            }
            v33[1] = v53;
            v54 = v117;
            goto LABEL_28;
          }
        }
        v42 = 0;
        v43 = v41 >> 3;
        v44 = 1;
        while (1)
        {
          v45 = *(_QWORD *)(v40 + 8 * v42);
          if (*(_DWORD *)(v45 + 80) == *((_DWORD *)v32 + v31) && *(_DWORD *)(v45 + 56) == v34)
            break;
          v42 = v44;
          if (v43 <= v44++)
            goto LABEL_24;
        }
        v54 = (_BYTE *)(v45 + 13);
LABEL_28:
        *v54 = 1;
        ++v31;
      }
      while (v31 != v30);
    }
    v26 = v116 + 5;
  }
  while (v116 + 5 != (void ***)v113);
  v64 = 0;
  v65 = 1;
  do
  {
    v66 = v65;
    v67 = v2 + 24 * v64;
    v68 = *(_QWORD *)(v67 + 1360);
    v69 = v68 - *(_QWORD *)(v67 + 1352);
    if ((v69 & 0x7FFFFFFF8) != 0)
    {
      v70 = (_QWORD *)(v67 + 1352);
      v71 = (const void **)(v67 + 1360);
      v72 = (v69 >> 3);
      do
      {
        v73 = v72 - 1;
        if (v72 - 1 >= (unint64_t)((v68 - *v70) >> 3))
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        v74 = *(HALS_ObjectMap **)(*v70 + 8 * v73);
        if (!*((_BYTE *)v74 + 13))
        {
          (*(void (**)(_QWORD))(*(_QWORD *)v74 + 8))(*(_QWORD *)(*v70 + 8 * v73));
          HALS_ObjectMap::ObjectIsDead(v74, v75);
          v76 = *v70 + 8 * v73;
          v77 = (_BYTE *)(*v70 + 8 * v72);
          v78 = (_BYTE *)*v71 - v77;
          if (*v71 != v77)
            memmove((void *)(*v70 + 8 * v73), v77, (_BYTE *)*v71 - v77);
          v68 = v76 + v78;
          *v71 = (const void *)(v76 + v78);
          *(_BYTE *)(v119 + v64) = 1;
        }
        v72 = v73;
      }
      while (v73);
    }
    v65 = 0;
    v64 = 1;
  }
  while ((v66 & 1) != 0);
  v79 = 0;
  v80 = 1;
  do
  {
    v120 = v80;
    if ((v80 & 1) != 0)
      v81 = v114;
    else
      v81 = v115;
    v82 = *v81;
    v83 = v81[1] - *v81;
    if ((v83 & 0x7FFFFFFF8) != 0)
    {
      v84 = 0;
      v85 = v83 >> 3;
      v86 = v2 + 24 * v79;
      v87 = (_QWORD *)(v86 + 1352);
      v88 = (_QWORD **)(v86 + 1360);
      v89 = (_QWORD *)(v86 + 1368);
      do
      {
        if (v85 <= v84)
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        v90 = *(_QWORD *)(v82 + 8 * v84);
        v91 = *v88;
        if ((unint64_t)*v88 >= *v89)
        {
          v93 = ((uint64_t)v91 - *v87) >> 3;
          if ((unint64_t)(v93 + 1) >> 61)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v94 = *v89 - *v87;
          v95 = v94 >> 2;
          if (v94 >> 2 <= (unint64_t)(v93 + 1))
            v95 = v93 + 1;
          if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
            v96 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v96 = v95;
          if (v96)
            v96 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v96);
          else
            v97 = 0;
          v98 = (_QWORD *)(v96 + 8 * v93);
          *v98 = v90;
          v92 = v98 + 1;
          v99 = *v88;
          v100 = (_QWORD *)*v87;
          if (*v88 != (_QWORD *)*v87)
          {
            do
            {
              v101 = *--v99;
              *--v98 = v101;
            }
            while (v99 != v100);
            v99 = (_QWORD *)*v87;
          }
          *v87 = v98;
          *v88 = v92;
          *v89 = v96 + 8 * v97;
          if (v99)
            operator delete(v99);
        }
        else
        {
          *v91 = v90;
          v92 = v91 + 1;
        }
        *v88 = v92;
        ++v84;
        v82 = *v81;
        v85 = (v81[1] - *v81) >> 3;
      }
      while (v84 < v85);
    }
    v80 = 0;
    v79 = 1;
  }
  while ((v120 & 1) != 0);
  v102 = 0;
  v103 = 1;
  do
  {
    v104 = v103;
    v105 = v2 + 24 * v102;
    v106 = *(_QWORD *)(v105 + 1352);
    v107 = *(int8x16_t **)(v105 + 1360);
    v108 = 126 - 2 * __clz(((uint64_t)v107->i64 - v106) >> 3);
    if (v107 == (int8x16_t *)v106)
      v109 = 0;
    else
      v109 = v108;
    std::__introsort<std::_ClassicAlgPolicy,HALS_IOUADevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_IOUAStream *> &,std::vector<HALS_IOUAStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_IOUAStream **,false>(v106, v107, v109, 1);
    v103 = 0;
    v102 = 1;
  }
  while ((v104 & 1) != 0);
  v110 = *(_QWORD *)(v2 + 1360) == *(_QWORD *)(v2 + 1352) && *(_QWORD *)(v2 + 1384) != *(_QWORD *)(v2 + 1376);
  *(_BYTE *)(v2 + 432) = v110;
  operator delete(__p);
  HALS_IOUADevice::_CopyStreamList(v2, 0, *(_QWORD *)(a1[7] + 8) + 40);
  HALS_IOUADevice::_CopyStreamList(v2, (HALS_Object *)1, *(_QWORD *)(a1[8] + 8) + 40);
}

void sub_1B5B91650(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  operator delete(__p);
  JUMPOUT(0x1B5B9167CLL);
}

_QWORD *__copy_helper_block_e8_80c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE112c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(_QWORD *a1, uint64_t a2)
{
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1 + 10, *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
  a1[14] = 0;
  a1[15] = 0;
  a1[16] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1 + 14, *(const void **)(a2 + 112), *(_QWORD *)(a2 + 120), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 2);
}

void sub_1B5B916EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 88) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_80c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE112c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
}

void HALS_IOUADevice::_CopyStreamList(uint64_t a1, HALS_Object *a2, uint64_t a3)
{
  const void **v4;
  HALS_ObjectMap **v5;
  char *v6;
  char *v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  HALS_ObjectMap **v13;
  char *v14;
  unint64_t v15;
  char *v16;
  HALS_ObjectMap **v17;
  char *v18;
  HALS_ObjectMap *v19;

  v4 = (const void **)(a1 + 24 * a2 + 1352);
  v5 = *(HALS_ObjectMap ***)a3;
  if (v4 == (const void **)a3)
  {
    v13 = *(HALS_ObjectMap ***)(a3 + 8);
    goto LABEL_24;
  }
  v6 = (char *)*v4;
  v7 = *(char **)(a1 + 24 * a2 + 1360);
  v8 = v7 - (_BYTE *)*v4;
  v9 = v8 >> 3;
  v10 = *(_QWORD *)(a3 + 16);
  if (v8 >> 3 <= (unint64_t)((v10 - (uint64_t)v5) >> 3))
  {
    v14 = *(char **)(a3 + 8);
    v15 = (v14 - (char *)v5) >> 3;
    if (v15 < v9)
    {
      v16 = &v6[8 * v15];
      if (v14 != (char *)v5)
      {
        memmove(v5, v6, v14 - (char *)v5);
        v5 = *(HALS_ObjectMap ***)(a3 + 8);
      }
      v8 = v7 - v16;
      if (v7 == v16)
        goto LABEL_22;
      v17 = v5;
      v18 = v16;
      goto LABEL_21;
    }
  }
  else
  {
    if (v5)
    {
      *(_QWORD *)(a3 + 8) = v5;
      operator delete(v5);
      v10 = 0;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    if (v8 < 0)
      goto LABEL_26;
    v11 = v10 >> 2;
    if (v10 >> 2 <= v9)
      v11 = v8 >> 3;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v11;
    if (v12 >> 61)
LABEL_26:
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v5 = (HALS_ObjectMap **)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
    *(_QWORD *)a3 = v5;
    *(_QWORD *)(a3 + 8) = v5;
    *(_QWORD *)(a3 + 16) = &v5[(_QWORD)a2];
  }
  if (v7 != v6)
  {
    v17 = v5;
    v18 = v6;
LABEL_21:
    memmove(v17, v18, v8);
  }
LABEL_22:
  v13 = (HALS_ObjectMap **)((char *)v5 + v8);
  *(_QWORD *)(a3 + 8) = v13;
  v5 = *(HALS_ObjectMap ***)a3;
LABEL_24:
  while (v5 != v13)
  {
    v19 = *v5++;
    HALS_ObjectMap::RetainObject(v19, a2);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,HALS_IOUADevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_IOUAStream *> &,std::vector<HALS_IOUAStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_IOUAStream **,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  int8x16_t *v5;
  int8x16_t *v6;
  uint64_t *v7;
  int8x16_t *i;
  int8x16_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  unsigned int v22;
  unsigned int v23;
  int8x16_t *v24;
  uint64_t *j;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  unsigned int v40;
  BOOL v41;
  BOOL v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  int8x16_t *v49;
  uint64_t *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  int8x16_t *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  BOOL v61;
  unsigned int v62;
  uint64_t v63;
  int8x16_t *v64;
  uint64_t *v65;
  uint64_t v66;
  BOOL v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  int8x16_t *v78;
  BOOL v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  BOOL v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unsigned int v92;
  int64_t v93;
  int64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  unsigned int v99;
  uint64_t *v100;
  uint64_t v101;
  BOOL v102;
  unsigned int v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  unsigned int v109;
  BOOL v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v121;
  uint64_t *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  unsigned int v128;
  uint64_t v129;
  uint64_t *v130;
  unsigned int v132;
  uint64_t *v134;
  uint64_t v135;
  BOOL v136;
  unsigned int v137;
  int8x16_t *v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  unsigned int v142;
  int64_t v143;
  int64_t v145;
  int8x16_t *v147;

  v5 = (int8x16_t *)result;
LABEL_2:
  v6 = a2;
  v7 = &a2[-1].i64[1];
  i = v5;
  while (2)
  {
    v9 = i;
    v10 = (char *)v6 - (char *)i;
    v11 = v10 >> 3;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = *v7;
        v60 = v9->i64[0];
        if (*v7)
          v61 = v60 == 0;
        else
          v61 = 1;
        if (!v61)
        {
          v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 200))(v60);
          if (v62 < result)
          {
            v63 = v9->i64[0];
            v9->i64[0] = *v7;
            *v7 = v63;
          }
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v9->i64, &v9->i64[1], v7);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v9->i64, &v9->i64[1], v9[1].i64, v7);
      case 5:
        v64 = v9 + 1;
        v65 = &v9[1].i64[1];
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v9->i64, &v9->i64[1], v9[1].i64, &v9[1].i64[1]);
        result = *v7;
        v66 = v9[1].i64[1];
        if (*v7)
          v67 = v66 == 0;
        else
          v67 = 1;
        if (!v67)
        {
          v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 200))(v66);
          if (v68 < result)
          {
            v69 = *v65;
            *v65 = *v7;
            *v7 = v69;
            result = *v65;
            if (*v65)
            {
              v70 = v64->i64[0];
              if (v64->i64[0])
              {
                v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 200))(v70);
                if (v71 < result)
                {
                  v72 = v64->i64[0];
                  result = *v65;
                  v64->i64[0] = *v65;
                  *v65 = v72;
                  if (result)
                  {
                    v73 = v9->i64[1];
                    if (v73)
                    {
                      v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
                      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 200))(v73);
                      if (v74 < result)
                      {
                        v75 = v9->i64[1];
                        result = v9[1].i64[0];
                        v9->i64[1] = result;
                        v9[1].i64[0] = v75;
                        if (result)
                        {
                          v76 = v9->i64[0];
                          if (v9->i64[0])
                          {
                            v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
                            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 200))(v76);
                            if (v77 < result)
                              *v9 = vextq_s8(*v9, *v9, 8uLL);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result;
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if (v9 == v6)
              return result;
            v93 = (unint64_t)(v11 - 2) >> 1;
            v145 = v93;
            v147 = v9;
            while (1)
            {
              v94 = v93;
              if (v145 >= v93)
              {
                v95 = (2 * v93) | 1;
                v96 = &v9->i64[v95];
                if (2 * v93 + 2 < v11)
                {
                  v97 = v96[1];
                  if (*v96 && v97 != 0)
                  {
                    v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v96 + 200))(*v96);
                    if (v99 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)v97 + 200))(v97))
                    {
                      ++v96;
                      v95 = 2 * v94 + 2;
                    }
                  }
                }
                v9 = v147;
                v100 = &v147->i64[v94];
                result = *v96;
                v101 = *v100;
                if (*v96)
                  v102 = v101 == 0;
                else
                  v102 = 1;
                if (v102)
                {
                  v143 = v94;
                  goto LABEL_157;
                }
                v103 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 200))(v101);
                if (v103 >= result)
                {
                  v143 = v94;
                  v101 = *v100;
                  while (1)
                  {
LABEL_157:
                    v104 = v100;
                    v100 = v96;
                    *v104 = *v96;
                    if (v145 < v95)
                      break;
                    v105 = (2 * v95) | 1;
                    v96 = &v9->i64[v105];
                    v106 = 2 * v95 + 2;
                    if (v106 >= v11)
                    {
                      v95 = (2 * v95) | 1;
                    }
                    else
                    {
                      v107 = v96[1];
                      if (*v96)
                        v108 = v107 == 0;
                      else
                        v108 = 1;
                      v95 = (2 * v95) | 1;
                      if (!v108)
                      {
                        v109 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v96 + 200))(*v96);
                        if (v109 >= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v107 + 200))(v107))
                        {
                          v95 = v105;
                        }
                        else
                        {
                          ++v96;
                          v95 = v106;
                        }
                      }
                    }
                    result = *v96;
                    v110 = !*v96 || v101 == 0;
                    v9 = v147;
                    if (!v110)
                    {
                      v111 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
                      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 200))(v101);
                      if (v111 < result)
                        break;
                    }
                  }
                  *v100 = v101;
                  v94 = v143;
                }
              }
              v93 = v94 - 1;
              if (!v94)
              {
                v112 = (unint64_t)v10 >> 3;
                do
                {
                  v113 = 0;
                  v114 = v9->i64[0];
                  v115 = (uint64_t *)v9;
                  do
                  {
                    v116 = v115;
                    v115 += v113 + 1;
                    v117 = 2 * v113;
                    v113 = (2 * v113) | 1;
                    v118 = v117 + 2;
                    if (v117 + 2 < v112)
                    {
                      v119 = v115[1];
                      result = *v115;
                      if (*v115 && v119 != 0)
                      {
                        v121 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
                        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v119 + 200))(v119);
                        if (v121 < result)
                        {
                          ++v115;
                          v113 = v118;
                        }
                      }
                    }
                    *v116 = *v115;
                  }
                  while (v113 <= (uint64_t)((unint64_t)(v112 - 2) >> 1));
                  v122 = &a2[-1].i64[1];
                  v21 = v115 == (uint64_t *)&a2[-1].u64[1];
                  a2 = (int8x16_t *)((char *)a2 - 8);
                  if (v21)
                  {
                    *v115 = v114;
                    v9 = v147;
                  }
                  else
                  {
                    *v115 = *v122;
                    *v122 = v114;
                    v9 = v147;
                    v123 = (char *)v115 - (char *)v147 + 8;
                    if (v123 >= 9)
                    {
                      v124 = (((unint64_t)v123 >> 3) - 2) >> 1;
                      v125 = &v147->i64[v124];
                      result = *v125;
                      v126 = *v115;
                      if (*v125 && v126 != 0)
                      {
                        v128 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
                        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v126 + 200))(v126);
                        if (v128 < result)
                        {
                          v129 = *v115;
                          do
                          {
                            v130 = v115;
                            v115 = v125;
                            *v130 = *v125;
                            if (!v124)
                              break;
                            v124 = (v124 - 1) >> 1;
                            v125 = &v147->i64[v124];
                            result = *v125;
                            if (!*v125 || v129 == 0)
                              break;
                            v132 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
                            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v129 + 200))(v129);
                          }
                          while (v132 < result);
                          *v115 = v129;
                        }
                      }
                    }
                  }
                }
                while (v112-- > 2);
                return result;
              }
            }
          }
          v12 = (uint64_t *)v9;
          v13 = (unint64_t)v11 >> 1;
          v14 = &v12[(unint64_t)v11 >> 1];
          if ((unint64_t)v10 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v14, v12, v7);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v12, v14, v7);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v12 + 1, v14 - 1, a2[-1].i64);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v12 + 2, &v12[v13 + 1], &a2[-2].i64[1]);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v14 - 1, v14, &v12[v13 + 1]);
            v15 = *v12;
            *v12 = *v14;
            *v14 = v15;
          }
          v5 = (int8x16_t *)v12;
          --a3;
          if ((a4 & 1) == 0)
          {
            result = *(v12 - 1);
            v16 = *v12;
            if (result && v16)
            {
              v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 200))(v16);
              if (v17 < result)
                goto LABEL_13;
              v16 = *v12;
            }
            if (v16
              && (v43 = *v7) != 0
              && (v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 200))(v16),
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 200))(v43),
                  v44 < result))
            {
              for (i = (int8x16_t *)(v12 + 1); ; i = (int8x16_t *)((char *)i + 8))
              {
                v45 = i->i64[0];
                if (i->i64[0])
                {
                  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 200))(v16);
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 200))(v45);
                  if (v46 < result)
                    break;
                }
              }
            }
            else
            {
              for (i = (int8x16_t *)(v12 + 1); i < v6; i = (int8x16_t *)((char *)i + 8))
              {
                if (v16)
                {
                  v47 = i->i64[0];
                  if (i->i64[0])
                  {
                    v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 200))(v16);
                    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 200))(v47);
                    if (v48 < result)
                      break;
                  }
                }
              }
            }
            v49 = v6;
            if (i < v6)
            {
              v50 = &a2[-1].i64[1];
              do
              {
                v49 = (int8x16_t *)v50;
                if (!v16)
                  break;
                v51 = *v50;
                if (!*v50)
                  break;
                v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 200))(v16);
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 200))(v51);
                v50 = &v49[-1].i64[1];
              }
              while (v52 < result);
            }
            while (i < v49)
            {
              v53 = i->i64[0];
              i->i64[0] = v49->i64[0];
              i = (int8x16_t *)((char *)i + 8);
              v49->i64[0] = v53;
              if (!v16)
                goto LABEL_80;
              while (1)
              {
                v54 = i->i64[0];
                if (i->i64[0])
                {
                  v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 200))(v16);
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 200))(v54);
                  if (v55 < result)
                    break;
                }
                do
LABEL_80:
                  i = (int8x16_t *)((char *)i + 8);
                while (!v16);
              }
              v56 = (int8x16_t *)((char *)v49 - 8);
              do
              {
                v49 = v56;
                v57 = v56->i64[0];
                if (!v56->i64[0])
                  break;
                v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 200))(v16);
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 200))(v57);
                v56 = (int8x16_t *)((char *)v49 - 8);
              }
              while (v58 < result);
            }
            v59 = &i[-1].i64[1];
            if (&i[-1].u64[1] != (unint64_t *)v5)
              v5->i64[0] = *v59;
            a4 = 0;
            *v59 = v16;
            continue;
          }
LABEL_13:
          v18 = v12 + 1;
          v19 = *v12;
          do
          {
            v20 = (unint64_t)v18;
            if (*v18)
              v21 = v19 == 0;
            else
              v21 = 1;
            if (v21)
              break;
            v22 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v18 + 200))(*v18);
            v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 200))(v19);
            v18 = (_QWORD *)(v20 + 8);
          }
          while (v22 < v23);
          v24 = (int8x16_t *)(v20 - 8);
          j = &a2[-1].i64[1];
          if ((uint64_t *)(v20 - 8) == v12)
          {
            for (j = &a2[-1].i64[1]; v20 < (unint64_t)(j + 1); --j)
            {
              if (*j)
                v28 = v19 == 0;
              else
                v28 = 1;
              if (!v28)
              {
                v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*j + 200))(*j);
                if (v29 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 200))(v19))
                  goto LABEL_35;
              }
            }
            ++j;
          }
          else
          {
            while (1)
            {
              if (*j && v19 != 0)
              {
                v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*j + 200))(*j);
                if (v27 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 200))(v19))
                  break;
              }
              --j;
            }
          }
LABEL_35:
          if (v20 < (unint64_t)j)
          {
            v30 = (uint64_t *)v20;
            v31 = j;
            do
            {
              v32 = *v30;
              *v30 = *v31;
              *v31 = v32;
              v33 = v30 + 1;
              do
              {
                v30 = v33;
                if (*v33)
                  v34 = v19 == 0;
                else
                  v34 = 1;
                if (v34)
                  break;
                v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v33 + 200))(*v33);
                v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 200))(v19);
                v33 = v30 + 1;
              }
              while (v35 < v36);
              v24 = (int8x16_t *)(v30 - 1);
              while (1)
              {
                v38 = *--v31;
                v37 = v38;
                if (v38)
                  v39 = v19 == 0;
                else
                  v39 = 1;
                if (!v39)
                {
                  v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 200))(v37);
                  if (v40 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 200))(v19))
                    break;
                }
              }
            }
            while (v30 < v31);
          }
          if (v24 != v5)
            v5->i64[0] = v24->i64[0];
          v24->i64[0] = v19;
          v41 = v20 >= (unint64_t)j;
          v6 = a2;
          if (!v41)
            goto LABEL_56;
          v42 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HALS_IOUADevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_IOUAStream *> &,std::vector<HALS_IOUAStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_IOUAStream **>(v5, v24);
          i = (int8x16_t *)&v24->u64[1];
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HALS_IOUADevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_IOUAStream *> &,std::vector<HALS_IOUAStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_IOUAStream **>((int8x16_t *)&v24->u64[1], a2);
          if (!(_DWORD)result)
          {
            if (v42)
              continue;
LABEL_56:
            result = std::__introsort<std::_ClassicAlgPolicy,HALS_IOUADevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_IOUAStream *> &,std::vector<HALS_IOUAStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_IOUAStream **,false>(v5, v24, a3, a4 & 1);
            a4 = 0;
            i = (int8x16_t *)&v24->u64[1];
            continue;
          }
          a2 = v24;
          if (v42)
            return result;
          goto LABEL_2;
        }
        v78 = (int8x16_t *)&v9->u64[1];
        v80 = v9 == v6 || v78 == v6;
        if ((a4 & 1) != 0)
        {
          if (v80)
            return result;
          v81 = 0;
          v82 = (uint64_t *)v9;
          while (1)
          {
            v83 = v82;
            v82 = (uint64_t *)v78;
            v84 = *v83;
            result = v83[1];
            if (result)
              v85 = v84 == 0;
            else
              v85 = 1;
            if (!v85)
            {
              v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 200))(v84);
              if (v86 < result)
              {
                v87 = *v82;
                v88 = v81;
                while (1)
                {
                  v89 = v88;
                  v90 = (uint64_t *)((char *)v9->i64 + v88);
                  v90[1] = *v90;
                  if (!v89)
                    break;
                  if (!v87)
                    goto LABEL_136;
                  v91 = *(v90 - 1);
                  if (!v91)
                    goto LABEL_136;
                  --v83;
                  v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v87 + 200))(v87);
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v91 + 200))(v91);
                  v88 = v89 - 8;
                  if (v92 >= result)
                  {
                    v83 = (uint64_t *)((char *)v9->i64 + v89);
                    goto LABEL_136;
                  }
                }
                v83 = (uint64_t *)v9;
LABEL_136:
                *v83 = v87;
              }
            }
            v78 = (int8x16_t *)(v82 + 1);
            v81 += 8;
            if (v82 + 1 == (uint64_t *)a2)
              return result;
          }
        }
        if (!v80)
        {
          do
          {
            v134 = (uint64_t *)v9;
            v9 = v78;
            v135 = *v134;
            result = v134[1];
            if (result)
              v136 = v135 == 0;
            else
              v136 = 1;
            if (!v136)
            {
              v137 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 200))(v135);
              if (v137 < result)
              {
                v138 = v9;
                v139 = v9->i64[0];
                do
                {
                  v140 = v134;
                  v134[1] = *v134;
                  if (!v139)
                    break;
                  --v134;
                  v141 = *(v140 - 1);
                  if (!v141)
                    break;
                  v142 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v139 + 200))(v139);
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v141 + 200))(v141);
                }
                while (v142 < result);
                *v140 = v139;
                v9 = v138;
              }
            }
            v78 = (int8x16_t *)&v9->u64[1];
          }
          while (&v9->u64[1] != (unint64_t *)a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HALS_IOUADevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_IOUAStream *> &,std::vector<HALS_IOUAStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_IOUAStream **>(int8x16_t *a1, int8x16_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  uint64_t v10;
  int8x16_t *v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t *v25;
  int8x16_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2[-1].i64[1];
      v7 = a1->i64[0];
      if (v6)
        v8 = v7 == 0;
      else
        v8 = 1;
      if (!v8)
      {
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 200))(v6);
        if (v9 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 200))(v7))
        {
          v10 = a1->i64[0];
          a1->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v10;
        }
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(a1->i64, &a1->i64[1], a1[1].i64, &a2[-1].i64[1]);
      return 1;
    case 5:
      v25 = &a1->i64[1];
      v26 = a1 + 1;
      v27 = &a1[1].i64[1];
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1]);
      v28 = a2[-1].i64[1];
      result = 1;
      if (!v28)
        return result;
      v29 = a1[1].i64[1];
      if (!v29)
        return result;
      v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 200))(a2[-1].i64[1]);
      if (v30 >= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 200))(v29))
        return 1;
      v31 = *v27;
      *v27 = a2[-1].i64[1];
      a2[-1].i64[1] = v31;
      result = 1;
      if (!*v27)
        return result;
      v32 = v26->i64[0];
      if (!v26->i64[0])
        return result;
      v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v27 + 200))(*v27);
      if (v33 >= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v32 + 200))(v32))
        return 1;
      v34 = v26->i64[0];
      v35 = *v27;
      v26->i64[0] = *v27;
      *v27 = v34;
      result = 1;
      if (!v35)
        return result;
      v36 = *v25;
      if (!*v25)
        return result;
      v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 200))(v35);
      if (v37 >= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 200))(v36))
        return 1;
      v39 = a1->i64[1];
      v38 = a1[1].i64[0];
      a1->i64[1] = v38;
      a1[1].i64[0] = v39;
      result = 1;
      if (!v38)
        return result;
      v40 = a1->i64[0];
      if (!a1->i64[0])
        return result;
      v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 200))(v38);
      if (v41 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)v40 + 200))(v40))
        *a1 = vextq_s8(*a1, *a1, 8uLL);
      return 1;
    default:
      v11 = a1 + 1;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(a1->i64, &a1->i64[1], a1[1].i64);
      v12 = &a1[1].i64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2)
        return 1;
      v13 = 0;
      v14 = 16;
      break;
  }
  while (1)
  {
    v15 = v11->i64[0];
    if (*v12 && v15 != 0)
    {
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v12 + 200))(*v12);
      if (v17 < (*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 200))(v15))
      {
        v18 = *v12;
        v19 = v14;
        while (1)
        {
          v20 = v19;
          v21 = (uint64_t *)((char *)a1->i64 + v19);
          v21[1] = *v21;
          if (!v20)
            break;
          if (!v18)
            goto LABEL_22;
          v22 = *(v21 - 1);
          if (!v22)
            goto LABEL_22;
          v11 = (int8x16_t *)((char *)v11 - 8);
          v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 200))(v18);
          v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 200))(v22);
          v19 = v20 - 8;
          if (v23 >= v24)
          {
            v11 = (int8x16_t *)((char *)a1 + v20);
            goto LABEL_22;
          }
        }
        v11 = a1;
LABEL_22:
        v11->i64[0] = v18;
        if (++v13 == 8)
          return v12 + 1 == (uint64_t *)a2;
      }
    }
    v11 = (int8x16_t *)v12;
    v14 += 8;
    if (++v12 == (uint64_t *)a2)
      return 1;
  }
}

unint64_t applesauce::CF::details::at_to<unsigned int>(const __CFArray *a1, unint64_t a2)
{
  const __CFNumber *ValueAtIndex;
  std::runtime_error *exception;

  if (CFArrayGetCount(a1) <= a2 || (ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, a2)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return applesauce::CF::convert_to<unsigned int,0>(ValueAtIndex);
}

void sub_1B5B92860(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const __CFArray *CACFArray::GetCFType(CFArrayRef *this, unsigned int a2, const void **a3)
{
  const __CFArray *result;
  const void *ValueAtIndex;

  result = *this;
  if (result)
  {
    if (CFArrayGetCount(result) <= a2)
    {
      return 0;
    }
    else
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*this, a2);
      *a3 = ValueAtIndex;
      return (const __CFArray *)(ValueAtIndex != 0);
    }
  }
  return result;
}

uint64_t CACFArray::GetUInt32(CFArrayRef *this, unsigned int a2, unsigned int *a3)
{
  unsigned int CFType;
  uint64_t result;
  const __CFNumber *v6;
  CFTypeID v7;
  CFTypeRef cf;

  cf = 0;
  CFType = CACFArray::GetCFType(this, a2, &cf);
  result = 0;
  if (CFType)
  {
    v6 = (const __CFNumber *)cf;
    if (cf)
    {
      v7 = CFGetTypeID(cf);
      if (v7 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v6, kCFNumberSInt32Type, a3);
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t CACFArray::GetDictionary(CFArrayRef *this, unsigned int a2, const __CFDictionary **a3)
{
  unsigned int CFType;
  uint64_t result;
  const __CFDictionary *v6;
  CFTypeID v7;
  CFTypeRef cf;

  cf = 0;
  CFType = CACFArray::GetCFType(this, a2, &cf);
  result = 0;
  if (CFType)
  {
    v6 = (const __CFDictionary *)cf;
    if (cf)
    {
      v7 = CFGetTypeID(cf);
      if (v7 == CFDictionaryGetTypeID())
      {
        *a3 = v6;
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t CACFArray::GetCACFDictionary(CFArrayRef *this, unsigned int a2, CACFDictionary *a3)
{
  uint64_t result;
  CFTypeRef v7;
  CFTypeID v8;
  CFTypeRef cf;

  CACFDictionary::operator=((uint64_t)a3, 0);
  cf = 0;
  result = (uint64_t)CACFArray::GetCFType(this, a2, &cf);
  if ((_DWORD)result)
  {
    v7 = cf;
    if (cf)
    {
      v8 = CFGetTypeID(cf);
      result = CFDictionaryGetTypeID();
      if (v8 == result)
        return CACFDictionary::operator=((uint64_t)a3, v7);
    }
  }
  return result;
}

void AMCP::Null::Engine::~Engine(AMCP::Null::Engine *this)
{
  AMCP::Null::Engine::~Engine(this);
  JUMPOUT(0x1B5E50688);
}

{
  uint64_t v2;
  const void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  const void *v8;
  std::__shared_weak_count *v9;

  *(_QWORD *)this = &off_1E69932C8;
  AMCP::Null::Engine::set_transport_state((uint64_t)this, 0);
  std::unique_ptr<AMCP::Tone_Generator_Buffer>::reset[abi:ne180100]((uint64_t *)this + 93, 0);
  v2 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v2)
    std::default_delete<AMCP::Null::Null_Engine_Reflector>::operator()[abi:ne180100](v2);
  v3 = (const void *)*((_QWORD *)this + 90);
  if (v3)
    CFRelease(v3);
  AMCP::IO_Clock::~IO_Clock((AMCP::Null::Engine *)((char *)this + 560));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Null::Engine *)((char *)this + 240));
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 224);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 208);
  v4 = (void *)*((_QWORD *)this + 22);
  if (v4)
    operator delete(v4);
  v5 = (void *)*((_QWORD *)this + 18);
  if (v5)
    operator delete(v5);
  v6 = (void *)*((_QWORD *)this + 12);
  if (v6)
  {
    *((_QWORD *)this + 13) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 9);
  if (v7)
  {
    *((_QWORD *)this + 10) = v7;
    operator delete(v7);
  }
  v8 = (const void *)*((_QWORD *)this + 3);
  if (v8)
    CFRelease(v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

_QWORD *AMCP::Null::Engine::get_device_uid@<X0>(const void **this@<X0>, _QWORD *a2@<X8>)
{
  return AMCP::Core::Implementation::Simple_Engine_Data::get_device_uid(a2, this[3]);
}

double AMCP::Null::Engine::get_sample_rate(AMCP::Null::Engine *this)
{
  return *((double *)this + 4);
}

uint64_t AMCP::Null::Engine::get_max_io_buffer_frame_size(AMCP::Null::Engine *this)
{
  return (3 * *((_DWORD *)this + 10)) >> 3;
}

uint64_t AMCP::Null::Engine::get_suggested_ring_buffer_frame_size(AMCP::Null::Engine *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t AMCP::Null::Engine::get_clock_domain(AMCP::Null::Engine *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t AMCP::Null::Engine::supports_prewarming(AMCP::Null::Engine *this)
{
  return *((unsigned __int8 *)this + 48);
}

BOOL AMCP::Null::Engine::has_input_streams(AMCP::Null::Engine *this)
{
  return *((_QWORD *)this + 9) != *((_QWORD *)this + 10);
}

BOOL AMCP::Null::Engine::has_output_streams(AMCP::Null::Engine *this)
{
  return *((_QWORD *)this + 12) != *((_QWORD *)this + 13);
}

uint64_t AMCP::Null::Engine::get_input_safety_offset(AMCP::Null::Engine *this)
{
  return *((unsigned int *)this + 13);
}

uint64_t AMCP::Null::Engine::get_output_safety_offset(AMCP::Null::Engine *this)
{
  return *((unsigned int *)this + 14);
}

uint64_t AMCP::Null::Engine::get_input_latency(AMCP::Null::Engine *this)
{
  return *((unsigned int *)this + 15);
}

uint64_t AMCP::Null::Engine::get_output_latency(AMCP::Null::Engine *this)
{
  return *((unsigned int *)this + 16);
}

void AMCP::Null::Engine::get_input_format_list(AMCP::Null::Engine *this@<X0>, AMCP::Core::Implementation::Simple_Engine_Data *a2@<X8>)
{
  AMCP::Core::Implementation::Simple_Engine_Data::get_input_format_list(a2, *((_QWORD *)this + 9), *((_QWORD *)this + 10));
}

void AMCP::Null::Engine::get_output_format_list(AMCP::Null::Engine *this@<X0>, AMCP::Core::Implementation::Simple_Engine_Data *a2@<X8>)
{
  AMCP::Core::Implementation::Simple_Engine_Data::get_output_format_list(a2, *((_QWORD *)this + 12), *((_QWORD *)this + 13));
}

__n128 AMCP::Null::Engine::get_stream_format@<Q0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;

  v4 = a1 + 72;
  v5 = 72;
  if (!a2)
  {
    v5 = 96;
    v4 = a1 + 96;
  }
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(v4 + 8);
  while (1)
  {
    if (v6 == v7)
    {
      *(_QWORD *)(a4 + 32) = 0;
      result.n128_u64[0] = 0;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      return result;
    }
    if (*(_DWORD *)v6 == a3)
      break;
    v6 += 56;
  }
  result = *(__n128 *)(v6 + 16);
  v9 = *(_OWORD *)(v6 + 32);
  *(__n128 *)a4 = result;
  *(_OWORD *)(a4 + 16) = v9;
  *(_QWORD *)(a4 + 32) = *(_QWORD *)(v6 + 48);
  return result;
}

uint64_t AMCP::Null::Engine::get_transport_state(AMCP::Null::Engine *this)
{
  return atomic_load((unsigned int *)this + 34);
}

uint64_t AMCP::Null::Engine::set_transport_state(uint64_t a1, signed int a2)
{
  int v4;
  int v5;
  BOOL v6;
  CFComparisonResult v8;
  AMCP::Log::Scope_Registry *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void (*v14)(_QWORD, void **, _QWORD, _QWORD);
  std::__shared_weak_count *imp;
  unint64_t *v16;
  unint64_t v17;
  uint64_t result;
  std::__shared_weak_count *v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  std::runtime_error *exception;
  int v26;
  uint64_t v27;
  std::runtime_error v28;
  int v29;
  __int128 v30;
  void *v31;
  void *__p[4];
  std::string v33;
  std::runtime_error v34;
  CFTypeRef v35;
  std::runtime_error v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD v41[2];
  CFTypeRef cf;
  _BYTE v43[10];
  __int16 v44;
  int v45;
  _QWORD v46[5];
  uint64_t v47[3];
  __int128 v48;
  __int128 v49;
  BOOL (*v50)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  uint64_t v51[3];
  __int128 v52;
  __int128 v53;
  BOOL (*v54)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  uint64_t v55[3];
  __int128 v56;
  void *v57;
  uint64_t v58;
  BOOL (*v59)(_BOOL8, uint64_t, uint64_t, uint64_t *);
  uint64_t v60[8];
  _QWORD v61[10];

  v61[9] = *MEMORY[0x1E0C80C00];
  v4 = atomic_load((unsigned int *)(a1 + 136));
  v5 = MEMORY[0x1B5E5064C]();
  v29 = v5;
  if (v4)
    v6 = 1;
  else
    v6 = a2 < 1;
  if (v6)
  {
    if (v4 >= 1 && a2 == 0)
      AMCP::Null::Engine::stop((AMCP::Null::Engine *)a1);
  }
  else
  {
    kdebug_trace();
    AMCP::Core::Implementation::Simple_Engine_IO_State::take_power_assertions((uint64_t *)(a1 + 120));
    AMCP::IO_Clock::reset_time((os_unfair_lock_s *)(a1 + 560));
    kdebug_trace();
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "fail_to_start");
    v8 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)(a1 + 720), (const __CFString **)&cf);
    v9 = (AMCP::Log::Scope_Registry *)cf;
    if (cf)
      CFRelease(cf);
    if (v8 == kCFCompareEqualTo)
    {
      AMCP::Log::Scope_Registry::get(v9);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
      v19 = *(std::__shared_weak_count **)v43;
      v20 = *(NSObject **)cf;
      if (*(_QWORD *)v43)
      {
        v21 = (unint64_t *)(*(_QWORD *)v43 + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v23 = pthread_self();
        v24 = pthread_mach_thread_np(v23);
        LODWORD(cf) = 67109634;
        HIDWORD(cf) = v24;
        *(_WORD *)v43 = 2080;
        *(_QWORD *)&v43[2] = "Null_Engine.cpp";
        v44 = 1024;
        v45 = 398;
        _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: couldn't start the hardware", (uint8_t *)&cf, 0x18u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v35);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"couldn't start the hardware", (uint64_t)&v33);
      std::runtime_error::runtime_error(&v34, &v33);
      std::runtime_error::runtime_error(&v36, &v34);
      v38 = 0;
      v39 = 0;
      v40 = 0;
      v41[0] = -1;
      v36.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v37 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&cf, (uint64_t)&v36);
      v46[1] = "void AMCP::Null::Engine::start()";
      v46[2] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Engine.cpp";
      LODWORD(v46[3]) = 398;
      std::vector<void *>::vector(&v30);
      v26 = backtrace((void **)v30, (*((_QWORD *)&v30 + 1) - (_QWORD)v30) >> 3);
      std::vector<void *>::resize((char **)&v30, v26);
      *(_OWORD *)&__p[1] = v30;
      __p[3] = v31;
      v30 = 0uLL;
      v31 = 0;
      __p[0] = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&cf, (uint64_t)__p);
      exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::runtime_error::runtime_error(exception, (const std::runtime_error *)&cf);
      exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
      v27 = v46[0];
      exception[1].__imp_.__imp_ = (const char *)v46[0];
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
      v28 = *(std::runtime_error *)&v46[1];
      LODWORD(exception[3].__vftable) = v46[3];
      exception[2] = v28;
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
      exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
      exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
    }
    v10 = *(_QWORD *)(a1 + 736);
    if (v10 && *(_BYTE *)(v10 + 24))
    {
      v11 = *(_QWORD *)(v10 + 48);
      std::string::basic_string[abi:ne180100]<0>(&v33, "Null_Engine_Reflector - stream 0");
      std::string::basic_string[abi:ne180100]<0>(&cf, "write");
      memset(v46, 0, 32);
      LOBYTE(v46[0]) = 1;
      v46[4] = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
      std::string::basic_string[abi:ne180100]<0>(v47, "create unique name");
      v48 = 0u;
      v49 = 0u;
      LOBYTE(v48) = 1;
      v50 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
      std::string::basic_string[abi:ne180100]<0>(v51, "write time stamps");
      v52 = 0u;
      v53 = 0u;
      LOBYTE(v52) = 1;
      v54 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
      get_audio_capture_folder(__p);
      std::string::basic_string[abi:ne180100]<0>(v55, "file location");
      v56 = *(_OWORD *)__p;
      v57 = __p[2];
      v58 = 0;
      memset(__p, 0, 24);
      v59 = AMCP::Implementation::In_Place_Storage<std::string>::dispatch;
      std::pair<std::string,AMCP::Thing>::pair[abi:ne180100]<char const* const&,std::string const&,0>(v60, "name", (__int128 *)&v33);
      asbd_to_dictionary((const CA::StreamDescription *)&v35, (uint64_t *)v11);
      std::string::basic_string[abi:ne180100]<0>(v61, "asbd");
      memset(&v61[4], 0, 24);
      v61[3] = v35;
      v35 = 0;
      v61[7] = AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
      *(_QWORD *)&v30 = &cf;
      *((_QWORD *)&v30 + 1) = 6;
      AMCP::DAL::DAL_Settings::DAL_Settings((unint64_t)&v36, (uint64_t *)&v30);
      v12 = 96;
      do
      {
        v13 = (void **)&v43[v12 * 4 - 8];
        v14 = *(void (**)(_QWORD, void **, _QWORD, _QWORD))&v41[v12];
        if (v14)
          v14(0, v13 - 5, 0, 0);
        if (*((char *)v13 - 41) < 0)
          operator delete(*(v13 - 8));
        v12 -= 16;
      }
      while (v12 * 4);
      if (v35)
        CFRelease(v35);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      std::allocate_shared[abi:ne180100]<AMCP::DAL::File,std::allocator<AMCP::DAL::File>,CA::StreamDescription const&,AMCP::DAL::DAL_Settings &,void>((AMCP::DAL::DALSupport **)&v34, *(_DWORD *)(v11 + 8), (uint64_t)&v36);
      std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table((uint64_t)&v36);
      std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v10 + 32, (__int128 *)&v34);
      imp = (std::__shared_weak_count *)v34.__imp_.__imp_;
      if (v34.__imp_.__imp_)
      {
        v16 = (unint64_t *)(v34.__imp_.__imp_ + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
          std::__shared_weak_count::__release_weak(imp);
        }
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      v5 = v29;
    }
  }
  atomic_store(a2, (unsigned int *)(a1 + 136));
  result = MEMORY[0x1B5E5064C]();
  if ((int)result > v5)
  {
    atomic_store(0, (unsigned int *)(a1 + 136));
    return AMCP::Null::Engine::stop((AMCP::Null::Engine *)a1);
  }
  return result;
}

void sub_1B5B93144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,std::runtime_error a27,CFTypeRef cf,std::runtime_error a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,std::runtime_error a35,uint64_t a36,uint64_t a37)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AMCP::Null::Engine::get_input_stream_active_list(os_unfair_lock_s *this@<X0>, AMCP::Core::Implementation::Simple_Engine_IO_State *a2@<X8>)
{
  AMCP::Core::Implementation::Simple_Engine_IO_State::get_input_stream_active_list(a2, this + 30);
}

void AMCP::Null::Engine::set_input_stream_active_list(uint64_t a1, uint64_t a2)
{
  void *__p;

  AMCP::Core::Implementation::Simple_Engine_IO_State::set_input_stream_active_list(&__p, a1 + 120, a2);
  if (__p)
    operator delete(__p);
}

void AMCP::Null::Engine::get_output_stream_active_list(os_unfair_lock_s *this@<X0>, AMCP::Core::Implementation::Simple_Engine_IO_State *a2@<X8>)
{
  AMCP::Core::Implementation::Simple_Engine_IO_State::get_output_stream_active_list(a2, this + 30);
}

void AMCP::Null::Engine::set_output_stream_active_list(uint64_t a1, uint64_t a2)
{
  void *__p;

  AMCP::Core::Implementation::Simple_Engine_IO_State::set_output_stream_active_list(&__p, a1 + 120, a2);
  if (__p)
    operator delete(__p);
}

BOOL AMCP::Null::Engine::supports_past_data(AMCP::Null::Engine *this)
{
  return *((_DWORD *)this + 182) != 0;
}

uint64_t AMCP::Null::Engine::is_past_data_enabled(AMCP::Null::Engine *this)
{
  return (*(uint64_t (**)(AMCP::Null::Engine *))(*(_QWORD *)this + 184))(this);
}

uint64_t AMCP::Null::Engine::set_past_data_enabled(AMCP::Null::Engine *this)
{
  return 1;
}

uint64_t AMCP::Null::Engine::available_past_data(AMCP::Null::Engine *this)
{
  return *((unsigned int *)this + 182);
}

uint64_t AMCP::Null::Engine::maximum_past_data(AMCP::Null::Engine *this)
{
  return (10 * *((_DWORD *)this + 10));
}

uint64_t AMCP::Null::Engine::begin_io_thread(AMCP::Null::Engine *this)
{
  return 1;
}

uint64_t AMCP::Null::Engine::end_io_thread(AMCP::Null::Engine *this)
{
  return 1;
}

uint64_t AMCP::Null::Engine::begin_io_cycle(AMCP::Null::Engine *this)
{
  return 1;
}

uint64_t AMCP::Null::Engine::end_io_cycle(AMCP::Null::Engine *this)
{
  return 1;
}

uint64_t AMCP::Null::Engine::begin_reading(AMCP::Null::Engine *this, double a2)
{
  return 1;
}

void AMCP::Null::Engine::read_data_from_stream(AMCP::Log::Scope_Registry *a1, double a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, _QWORD *a8)
{
  uint64_t *v10;
  uint64_t v11;
  _DWORD *v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  double v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _DWORD *v24;
  unsigned int v25;
  double v26;
  unsigned int v27;
  __int128 v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  double v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  double v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  double *v58;
  uint64_t v59;
  int v60;
  double v61;
  double v62;
  const void *v63;
  const void *v64;
  size_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int *v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  double v89;
  AMCP::Log::Scope_Registry *v90;
  double v91;
  double v92;
  double v93;
  AMCP::Log::Scope_Registry *v94;
  AMCP::Log::Scope_Registry *v95;
  _QWORD *v96;
  double v97;
  double v98;
  double v99;
  double v100;
  BOOL v101;
  double v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  int v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  AMCP::Log::Scope_Registry *v123;
  double length_in_frames;
  double v125;
  double v126;
  double v127;
  double v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  int v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  AMCP::Log::Scope_Registry *v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  double v158;
  float v159;
  uint64_t v160;
  long double v161;
  int v162;
  float v163;
  float v164;
  float v165;
  float v166;
  double v167;
  double v168;
  uint64_t v169;
  unint64_t v170;
  caulk::concurrent::messenger *v171;
  _opaque_pthread_t *v172;
  mach_port_t v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  _BOOL8 v191;
  BOOL v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  double *v211;
  int v212;
  double v213;
  double v214;
  const void *v215;
  const void *v216;
  size_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  uint64_t v221;
  int v222;
  double v223;
  double v224;
  const void *v225;
  const void *v226;
  size_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  double v246;
  double v247;
  const void *v248;
  const void *v249;
  size_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  unint64_t *v275;
  unint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  unint64_t *v280;
  std::__shared_weak_count *v281;
  NSObject *v282;
  unint64_t *v283;
  unint64_t v284;
  _opaque_pthread_t *v285;
  mach_port_t v286;
  void *exception;
  std::__shared_weak_count *v288;
  NSObject *v289;
  unint64_t *v290;
  unint64_t v291;
  _opaque_pthread_t *v292;
  mach_port_t v293;
  void *v294;
  int v295;
  std::__shared_weak_count *v296;
  NSObject *v297;
  unint64_t *v298;
  unint64_t v299;
  _opaque_pthread_t *v300;
  mach_port_t v301;
  void *v302;
  int v303;
  NSObject *v304;
  _opaque_pthread_t *v305;
  mach_port_t v306;
  void *v307;
  NSObject *v308;
  _opaque_pthread_t *v309;
  mach_port_t v310;
  NSObject *v311;
  _opaque_pthread_t *v312;
  mach_port_t v313;
  void *v314;
  void **v315;
  std::__shared_weak_count *v316;
  AMCP::Log::Scope_Registry *v317;
  unint64_t v318;
  unint64_t v319;
  int v320;
  int v321;
  _QWORD *v322;
  _QWORD *v323;
  uint64_t v324;
  double *v325;
  double *v326;
  uint64_t v327;
  __int128 v328;
  uint64_t v329;
  __int128 v330;
  __int128 v331;
  uint64_t v332;
  uint64_t v333;
  std::__shared_weak_count *v334;
  _QWORD v335[4];
  std::__shared_weak_count *v336;
  uint64_t v337;
  std::__shared_weak_count *v338;
  AMCP::DAL::DAL_Time_Range *v339;
  AMCP::Log::Scope_Registry *v340;
  double v341;
  uint64_t v342;
  __int128 v343;
  __int128 v344;
  uint64_t v345;
  __int128 v346;
  __int128 v347;
  std::string v348;
  uint64_t v349;
  _BYTE v350[32];
  std::__shared_weak_count *v351;
  uint64_t v352;
  int v353;
  __int128 v354;
  uint64_t v355;
  __int128 v356;
  __int128 v357;
  uint64_t v358;
  uint64_t v359;
  std::__shared_weak_count *v360;
  __int128 v361;
  uint64_t v362;
  std::string v363;
  std::logic_error v364;
  char v365;
  _BYTE v366[24];
  __int128 v367;
  const char *v368;
  int v369;
  _BYTE buf[24];
  __int128 v371;
  __int128 v372;
  uint64_t v373;
  uint64_t v374;
  std::__shared_weak_count *v375;
  _BYTE v376[24];
  __int128 v377;
  __int128 v378;
  uint64_t v379;
  uint64_t v380;
  std::__shared_weak_count *v381;
  const AMCP::DAL::DAL_Time_Range *v382;
  uint64_t v383;

  v383 = *MEMORY[0x1E0C80C00];
  v10 = (uint64_t *)*((_QWORD *)a1 + 92);
  if (v10)
  {
    v11 = *v10;
    if (a5 >= (unint64_t)((*(_QWORD *)(*((_QWORD *)a1 + 92) + 8) - v11) >> 4))
    {
      AMCP::Log::Scope_Registry::get(a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v376, "com.apple.coreaudio", "AMCP");
      v308 = **(NSObject ***)v376;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v376);
      if (os_log_type_enabled(v308, OS_LOG_TYPE_ERROR))
      {
        v309 = pthread_self();
        v310 = pthread_mach_thread_np(v309);
        *(_DWORD *)v376 = 67109890;
        *(_DWORD *)&v376[4] = v310;
        *(_WORD *)&v376[8] = 2080;
        *(_QWORD *)&v376[10] = "Null_Engine_Reflector.cpp";
        *(_WORD *)&v376[18] = 1024;
        *(_DWORD *)&v376[20] = 65;
        LOWORD(v377) = 2080;
        *(_QWORD *)((char *)&v377 + 2) = "in_stream_index < m_stream_buffers.size()";
        _os_log_error_impl(&dword_1B57BA000, v308, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", v376, 0x22u);
      }
      abort();
    }
    v12 = (_DWORD *)*a8;
    v13 = *(_OWORD *)(v11 + 16 * a5);
    *(_OWORD *)v350 = v13;
    if (*((_QWORD *)&v13 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)v376, v13);
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v377 + 1);
    v344 = v377;
    if (*((_QWORD *)&v377 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v377 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v21 = *(_QWORD *)(*(_QWORD *)v350 + 88);
    if (v21)
    {
      LODWORD(v21) = *(_DWORD *)(v21 + 32);
      v16 = (double)(a6 / v21) + a2;
    }
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v344 + 1);
    v36 = *v12 / v21;
    if (*((_QWORD *)&v344 + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v344 + 1) + 8);
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    LODWORD(v328) = 2;
    *((double *)&v328 + 1) = v16;
    v329 = 0;
    v330 = v344;
    v39 = v16 + (double)v36;
    if (*((_QWORD *)&v344 + 1))
    {
      v40 = (unint64_t *)(*((_QWORD *)&v344 + 1) + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    *(_DWORD *)v366 = 2;
    *(double *)&v366[8] = v39;
    *(_QWORD *)&v366[16] = 0;
    v367 = v344;
    v327 = v344;
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)v350 + 72))(v335);
    *(_OWORD *)v376 = v328;
    *(_QWORD *)&v376[16] = v329;
    *(_QWORD *)&v377 = v327;
    *((_QWORD *)&v377 + 1) = v35;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v43 = __ldxr(p_shared_owners);
      while (__stxr(v43 + 1, p_shared_owners));
      v378 = *(_OWORD *)v366;
      v379 = *(_QWORD *)&v366[16];
      v380 = v327;
      v381 = v35;
      v44 = (unint64_t *)&v35->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    else
    {
      v378 = *(_OWORD *)v366;
      v379 = *(_QWORD *)&v366[16];
      v380 = v327;
      v381 = 0;
    }
    caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::intersection((uint64_t)&v354, v335, v376);
    v46 = v381;
    if (v381)
    {
      v47 = (unint64_t *)&v381->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v49 = (std::__shared_weak_count *)*((_QWORD *)&v377 + 1);
    if (*((_QWORD *)&v377 + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&v377 + 1) + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v354, (AMCP::DAL::DAL_Time *)&v357))
    {
      AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)buf, (const AMCP::DAL::DAL_Time *)&v354, (const AMCP::DAL::DAL_Time *)&v357);
      AMCP::DAL::create_readable_range((AMCP::DAL *)v376, (const AMCP::DAL::DAL_Time_Range *)buf, *(AMCP::DAL::Ring_Buffer_Base **)v350);
      v52 = v375;
      if (v375)
      {
        v53 = (unint64_t *)&v375->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v55 = (std::__shared_weak_count *)*((_QWORD *)&v371 + 1);
      if (*((_QWORD *)&v371 + 1))
      {
        v56 = (unint64_t *)(*((_QWORD *)&v371 + 1) + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      AMCP::DAL::DAL_Timed_Segment::translate_range((double **)buf, v382, (uint64_t)v376);
      v58 = *(double **)buf;
      v59 = *(_QWORD *)(*(_QWORD *)v350 + 88);
      if (v59)
        v60 = *(_DWORD *)(v59 + 32);
      else
        v60 = 0;
      v62 = **(double **)buf;
      v61 = *(double *)(*(_QWORD *)buf + 8);
      (*(void (**)(AMCP::Log::Scope_Registry **__return_ptr))(*(_QWORD *)v382 + 56))(&v340);
      AMCP::DAL::PCM_Data_Handler::get_other_data_bytes(v340, *v58, v58[1]);
      v64 = v63;
      v65 = v60 * vcvtmd_s64_f64(v61 - v62);
      v66 = *(std::__shared_weak_count **)&v341;
      if (v341 != 0.0)
      {
        v67 = (unint64_t *)(*(_QWORD *)&v341 + 8);
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      memcpy(*((void **)v12 + 1), v64, v65);
      v69 = *(_QWORD *)buf;
      if (*(_QWORD *)&buf[8] - *(_QWORD *)buf == 192)
      {
        v70 = *(_QWORD *)(*(_QWORD *)v350 + 88);
        if (v70)
          v71 = *(_DWORD *)(v70 + 32);
        else
          v71 = 0;
        v247 = *(double *)(*(_QWORD *)buf + 96);
        v246 = *(double *)(*(_QWORD *)buf + 104);
        (*(void (**)(AMCP::Log::Scope_Registry **__return_ptr))(*(_QWORD *)v382 + 56))(&v340);
        AMCP::DAL::PCM_Data_Handler::get_other_data_bytes(v340, *(double *)(v69 + 96), *(double *)(v69 + 104));
        v249 = v248;
        v250 = v71 * vcvtmd_s64_f64(v246 - v247);
        v251 = *(std::__shared_weak_count **)&v341;
        if (v341 != 0.0)
        {
          v252 = (unint64_t *)(*(_QWORD *)&v341 + 8);
          do
            v253 = __ldaxr(v252);
          while (__stlxr(v253 - 1, v252));
          if (!v253)
          {
            ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
            std::__shared_weak_count::__release_weak(v251);
          }
        }
        memcpy((void *)(*((_QWORD *)v12 + 1) + (int)v65), v249, v250);
      }
      v340 = (AMCP::Log::Scope_Registry *)buf;
      std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v340);
      v254 = v381;
      if (v381)
      {
        v255 = (unint64_t *)&v381->__shared_owners_;
        do
          v256 = __ldaxr(v255);
        while (__stlxr(v256 - 1, v255));
        if (!v256)
        {
          ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
          std::__shared_weak_count::__release_weak(v254);
        }
      }
      v257 = (std::__shared_weak_count *)*((_QWORD *)&v377 + 1);
      if (*((_QWORD *)&v377 + 1))
      {
        v258 = (unint64_t *)(*((_QWORD *)&v377 + 1) + 8);
        do
          v259 = __ldaxr(v258);
        while (__stlxr(v259 - 1, v258));
        if (!v259)
        {
          ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
          std::__shared_weak_count::__release_weak(v257);
        }
      }
    }
    v260 = v360;
    if (v360)
    {
      v261 = (unint64_t *)&v360->__shared_owners_;
      do
        v262 = __ldaxr(v261);
      while (__stlxr(v262 - 1, v261));
      if (!v262)
      {
        ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
        std::__shared_weak_count::__release_weak(v260);
      }
    }
    v263 = (std::__shared_weak_count *)*((_QWORD *)&v356 + 1);
    if (*((_QWORD *)&v356 + 1))
    {
      v264 = (unint64_t *)(*((_QWORD *)&v356 + 1) + 8);
      do
        v265 = __ldaxr(v264);
      while (__stlxr(v265 - 1, v264));
      if (!v265)
      {
        ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
        std::__shared_weak_count::__release_weak(v263);
      }
    }
    v266 = v338;
    if (v338)
    {
      v267 = (unint64_t *)&v338->__shared_owners_;
      do
        v268 = __ldaxr(v267);
      while (__stlxr(v268 - 1, v267));
      if (!v268)
      {
        ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
        std::__shared_weak_count::__release_weak(v266);
      }
    }
    v269 = v336;
    if (v336)
    {
      v270 = (unint64_t *)&v336->__shared_owners_;
      do
        v271 = __ldaxr(v270);
      while (__stlxr(v271 - 1, v270));
      if (!v271)
      {
        ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
        std::__shared_weak_count::__release_weak(v269);
      }
    }
    v272 = (std::__shared_weak_count *)*((_QWORD *)&v367 + 1);
    if (*((_QWORD *)&v367 + 1))
    {
      v273 = (unint64_t *)(*((_QWORD *)&v367 + 1) + 8);
      do
        v274 = __ldaxr(v273);
      while (__stlxr(v274 - 1, v273));
      if (!v274)
      {
        ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
        std::__shared_weak_count::__release_weak(v272);
      }
    }
    if (*((_QWORD *)&v330 + 1))
    {
      v275 = (unint64_t *)(*((_QWORD *)&v330 + 1) + 8);
      do
        v276 = __ldaxr(v275);
      while (__stlxr(v276 - 1, v275));
      if (!v276)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v330 + 1) + 16))(*((_QWORD *)&v330 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v330 + 1));
      }
    }
    v277 = (std::__shared_weak_count *)*((_QWORD *)&v344 + 1);
    if (*((_QWORD *)&v344 + 1))
    {
      v278 = (unint64_t *)(*((_QWORD *)&v344 + 1) + 8);
      do
        v279 = __ldaxr(v278);
      while (__stlxr(v279 - 1, v278));
      if (!v279)
      {
        ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
        std::__shared_weak_count::__release_weak(v277);
      }
    }
    v243 = *(std::__shared_weak_count **)&v350[8];
    if (*(_QWORD *)&v350[8])
    {
      v280 = (unint64_t *)(*(_QWORD *)&v350[8] + 8);
      do
        v245 = __ldaxr(v280);
      while (__stlxr(v245 - 1, v280));
LABEL_356:
      if (!v245)
      {
        ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
        std::__shared_weak_count::__release_weak(v243);
      }
      return;
    }
    return;
  }
  v23 = *((_QWORD *)a1 + 93);
  if (!v23)
    return;
  v24 = (_DWORD *)*a8;
  AMCP::DAL::DAL_Buffer::get_timebase((AMCP::DAL::DAL_Buffer *)&v347, *(_QWORD *)(v23 + 24));
  v25 = *(_DWORD *)(*((_QWORD *)a1 + 93) + 56);
  v26 = (double)(a6 / v25) + a2;
  v27 = *v24 / v25;
  v28 = v347;
  v29 = *((_QWORD *)&v347 + 1);
  v315 = (void **)v24;
  if (*((_QWORD *)&v347 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v347 + 1) + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
    LODWORD(v344) = 2;
    *((double *)&v344 + 1) = v26;
    v345 = 0;
    v346 = v28;
    v32 = v26 + (double)v27;
    v33 = (unint64_t *)(v29 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  else
  {
    LODWORD(v344) = 2;
    *((double *)&v344 + 1) = v26;
    v345 = 0;
    v346 = (unint64_t)v347;
    v32 = v26 + (double)v27;
  }
  LODWORD(v340) = 2;
  v341 = v32;
  v342 = 0;
  v343 = v28;
  v317 = a1;
  v72 = (int *)*((_QWORD *)a1 + 93);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v328, (const AMCP::DAL::DAL_Time *)&v344, (const AMCP::DAL::DAL_Time *)&v340);
  AMCP::DAL::Fixed_Buffer::set_range(*((_QWORD *)v72 + 3), &v328);
  v73 = *((_QWORD *)v72 + 3);
  v354 = v328;
  v355 = v329;
  v356 = v330;
  if (*((_QWORD *)&v330 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v330 + 1) + 8);
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
  }
  v357 = v331;
  v358 = v332;
  v359 = v333;
  v360 = v334;
  if (v334)
  {
    v76 = (unint64_t *)&v334->__shared_owners_;
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
  }
  AMCP::DAL::Fixed_Buffer::create_writable_range(v73, (uint64_t)&v354, (uint64_t)v376);
  v78 = v360;
  if (v360)
  {
    v79 = (unint64_t *)&v360->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = (std::__shared_weak_count *)*((_QWORD *)&v356 + 1);
  if (*((_QWORD *)&v356 + 1))
  {
    v82 = (unint64_t *)(*((_QWORD *)&v356 + 1) + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = *((_QWORD *)v72 + 3);
  v86 = *(_QWORD *)(v84 + 88);
  v85 = *(std::__shared_weak_count **)(v84 + 96);
  if (v85)
  {
    v87 = (unint64_t *)&v85->__shared_owners_;
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 1, v87));
  }
  v316 = v85;
  if (v86)
    v89 = *(double *)(v86 + 8);
  else
    v89 = 0.0;
  AMCP::DAL::DAL_Timed_Segment::translate_range((double **)&v361, v382, (uint64_t)v376);
  v325 = (double *)*((_QWORD *)&v361 + 1);
  v326 = (double *)v361;
  if ((_QWORD)v361 != *((_QWORD *)&v361 + 1))
  {
    v91 = 0.0;
    v324 = v86;
    while (1)
    {
      if (!v86)
      {
LABEL_359:
        AMCP::Log::Scope_Registry::get(v90);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v281 = *(std::__shared_weak_count **)&buf[8];
        v282 = **(NSObject ***)buf;
        if (*(_QWORD *)&buf[8])
        {
          v283 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v284 = __ldaxr(v283);
          while (__stlxr(v284 - 1, v283));
          if (!v284)
          {
            ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
            std::__shared_weak_count::__release_weak(v281);
          }
        }
        if (os_log_type_enabled(v282, OS_LOG_TYPE_ERROR))
        {
          v285 = pthread_self();
          v286 = pthread_mach_thread_np(v285);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v286;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = "Tone_Generator.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 77;
          LOWORD(v371) = 2080;
          *(_QWORD *)((char *)&v371 + 2) = "not (false)";
          _os_log_error_impl(&dword_1B57BA000, v282, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Format not supported by Tone_Generator", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v365);
        exception = __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Format not supported by Tone_Generator", (uint64_t)&v348, &v346);
        std::logic_error::logic_error(&v364, &v348);
        v364.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error((std::logic_error *)v366, &v364);
        v367 = 0uLL;
        v368 = 0;
        v369 = -1;
        *(_QWORD *)v366 = off_1E69A1208;
        *(_QWORD *)&v366[16] = &unk_1E69A1230;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v366);
        *((_QWORD *)&v371 + 1) = "std::unique_ptr<DAL::Sample_Format_Handler> AMCP::Tone_Generator::create_handler(const "
                                 "DAL::Container &, DAL::Sample_Time_Range) const";
        *(_QWORD *)&v372 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Tone_Generator.cpp";
        DWORD2(v372) = 77;
        applesauce::backtrace::snapshot_N<64>::snapshot_N(&v363.__r_.__value_.__l.__data_);
        *(std::string *)&v350[8] = v363;
        *(_QWORD *)v350 = off_1E69A20A0;
        memset(&v363, 0, sizeof(v363));
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v350);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
      }
      v93 = *v326;
      v92 = v326[1];
      if ((*(_BYTE *)(v86 + 20) & 1) != 0 || *(_DWORD *)(v86 + 40) != 16)
      {
        if ((*(_BYTE *)(v86 + 20) & 1) != 0 || *(_DWORD *)(v86 + 40) != 32)
        {
          if ((*(_BYTE *)(v86 + 20) & 1) == 0 || *(_DWORD *)(v86 + 40) != 32)
            goto LABEL_359;
          v149 = (AMCP::Log::Scope_Registry *)operator new();
          v95 = v149;
          *(_QWORD *)v149 = &off_1E697A680;
          v150 = (unint64_t *)((char *)v149 + 8);
          if ((*(_BYTE *)(v86 + 20) & 1) == 0)
          {
            AMCP::Log::Scope_Registry::get(v149);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            v304 = **(NSObject ***)buf;
            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
            if (os_log_type_enabled(v304, OS_LOG_TYPE_ERROR))
            {
              v305 = pthread_self();
              v306 = pthread_mach_thread_np(v305);
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)&buf[4] = v306;
              *(_WORD *)&buf[8] = 2080;
              *(_QWORD *)&buf[10] = "Sample_Format_Handler.h";
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 85;
              LOWORD(v371) = 2080;
              *(_QWORD *)((char *)&v371 + 2) = "not (other.get_format().mFormatFlags & kAudioFormatFlagIsFloat)";
              _os_log_error_impl(&dword_1B57BA000, v304, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v365);
            v307 = __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"", (uint64_t)&v348, &v346);
            std::logic_error::logic_error(&v364, &v348);
            v364.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
            std::logic_error::logic_error((std::logic_error *)v366, &v364);
            v367 = 0uLL;
            v368 = 0;
            v369 = -1;
            *(_QWORD *)v366 = off_1E69A1208;
            *(_QWORD *)&v366[16] = &unk_1E69A1230;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v366);
            *((_QWORD *)&v371 + 1) = "DAL::Sample_Group<float> AMCP::DAL::get_sample_data(const DAL::Container &, DAL::Sa"
                                     "mple_Time_Range)";
            *(_QWORD *)&v372 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
            DWORD2(v372) = 85;
            applesauce::backtrace::snapshot_N<64>::snapshot_N(&v363.__r_.__value_.__l.__data_);
            *(std::string *)&v350[8] = v363;
            *(_QWORD *)v350 = off_1E69A20A0;
            memset(&v363, 0, sizeof(v363));
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v350);
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v307, (uint64_t)buf);
          }
          AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>(v86);
          AMCP::DAL::PCM_Data_Handler::get_other_data<float>(v150, (AMCP::DAL::PCM_Data_Handler *)v86, v93, v92);
          goto LABEL_175;
        }
        v123 = (AMCP::Log::Scope_Registry *)operator new();
        v95 = v123;
        *(_QWORD *)v123 = &off_1E697A618;
        v96 = (_QWORD *)((char *)v123 + 8);
        if ((*(_BYTE *)(v86 + 20) & 1) != 0 || *(_DWORD *)(v86 + 40) != 32)
        {
          AMCP::Log::Scope_Registry::get(v123);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v296 = *(std::__shared_weak_count **)&buf[8];
          v297 = **(NSObject ***)buf;
          if (*(_QWORD *)&buf[8])
          {
            v298 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v299 = __ldaxr(v298);
            while (__stlxr(v299 - 1, v298));
            if (!v299)
            {
              ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
              std::__shared_weak_count::__release_weak(v296);
            }
          }
          if (os_log_type_enabled(v297, OS_LOG_TYPE_ERROR))
          {
            v300 = pthread_self();
            v301 = pthread_mach_thread_np(v300);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v301;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "Sample_Format_Handler.h";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 103;
            LOWORD(v371) = 2080;
            *(_QWORD *)((char *)&v371 + 2) = "not (not (other.get_format().mFormatFlags & kAudioFormatFlagIsFloat) and ot"
                                             "her.get_format().mBitsPerChannel == 32)";
            _os_log_error_impl(&dword_1B57BA000, v297, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v365);
          v302 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v348, &v346);
          std::logic_error::logic_error(&v364, &v348);
          v364.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)v366, &v364);
          v367 = 0uLL;
          v368 = 0;
          v369 = -1;
          *(_QWORD *)v366 = off_1E69A1208;
          *(_QWORD *)&v366[16] = &unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v366);
          *((_QWORD *)&v371 + 1) = "DAL::Sample_Group<int32_t> AMCP::DAL::get_sample_data(const DAL::Container &, DAL::Sa"
                                   "mple_Time_Range)";
          *(_QWORD *)&v372 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
          DWORD2(v372) = 103;
          std::vector<void *>::vector(&v363);
          v303 = backtrace((void **)v363.__r_.__value_.__l.__data_, (v363.__r_.__value_.__l.__size_ - v363.__r_.__value_.__r.__words[0]) >> 3);
          std::vector<void *>::resize(&v363.__r_.__value_.__l.__data_, v303);
          *(std::string *)&v350[8] = v363;
          *(_QWORD *)v350 = off_1E69A20A0;
          memset(&v363, 0, sizeof(v363));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v350);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v302, (uint64_t)buf);
        }
        AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>(v86);
        length_in_frames = AMCP::DAL::PCM_Data_Handler::get_length_in_frames((AMCP::DAL::PCM_Data_Handler *)v86);
        v125 = round(length_in_frames);
        if (v125 > 0.0)
        {
          v126 = round(v93);
          v127 = round(v92);
          if (v126 < v127)
          {
            v101 = v126 <= 0.0;
            v128 = 0.0;
            if (!v101)
              v128 = v93;
            if (v127 < v125)
              length_in_frames = v92;
            if (round(v128) < round(length_in_frames))
            {
              *v96 = 0;
              v96[1] = 0;
              v96[2] = 0;
              v130 = *(_QWORD **)(v86 + 56);
              v129 = *(_QWORD **)(v86 + 64);
              if (v130 != v129)
              {
                v131 = 0;
                v132 = vcvtmd_s64_f64(v128);
                v133 = vcvtmd_s64_f64(length_in_frames - v128);
                v321 = v132;
                v323 = *(_QWORD **)(v86 + 64);
                v319 = v133;
                while (1)
                {
                  if ((*(_BYTE *)(v86 + 20) & 0x20) != 0)
                    v134 = 1;
                  else
                    v134 = *(unsigned int *)(v86 + 36);
                  v135 = *v130 + (*(_DWORD *)(v86 + 32) * v132);
                  v136 = v134 * v133;
                  v137 = *((_QWORD *)v95 + 3);
                  if ((unint64_t)v131 >= v137)
                  {
                    v138 = ((uint64_t)v131 - *v96) >> 4;
                    if ((unint64_t)(v138 + 1) >> 60)
                      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                    v139 = v137 - *v96;
                    v140 = v139 >> 3;
                    if (v139 >> 3 <= (unint64_t)(v138 + 1))
                      v140 = v138 + 1;
                    if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF0)
                      v141 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v141 = v140;
                    if (v141)
                    {
                      if (v141 >> 60 || !*MEMORY[0x1E0DDB4F0])
                      {
LABEL_394:
                        __break(1u);
                        return;
                      }
                      v142 = caulk::rt_safe_memory_resource::rt_allocate((caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0]);
                    }
                    else
                    {
                      v142 = 0;
                    }
                    v143 = (_QWORD *)(v142 + 16 * v138);
                    *v143 = v135;
                    v143[1] = v136;
                    v144 = *((_QWORD *)v95 + 1);
                    v145 = *((_QWORD *)v95 + 2);
                    if (v145 == v144)
                    {
                      *(_QWORD *)&v147 = vdupq_n_s64(v145).u64[0];
                      v146 = v142 + 16 * v138;
                    }
                    else
                    {
                      v146 = v142 + 16 * v138;
                      do
                      {
                        *(_OWORD *)(v146 - 16) = *(_OWORD *)(v145 - 16);
                        v146 -= 16;
                        v145 -= 16;
                      }
                      while (v145 != v144);
                      v147 = *(_OWORD *)v96;
                    }
                    v131 = v143 + 2;
                    *((_QWORD *)v95 + 1) = v146;
                    *((_QWORD *)v95 + 2) = v143 + 2;
                    v148 = *((_QWORD *)v95 + 3);
                    *((_QWORD *)v95 + 3) = v142 + 16 * v141;
                    if ((_QWORD)v147)
                      std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<int>>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)v147, (v148 - (uint64_t)v147) >> 4);
                    v132 = v321;
                    v129 = v323;
                    v133 = v319;
                  }
                  else
                  {
                    *v131 = v135;
                    v131[1] = v136;
                    v131 += 2;
                  }
                  *((_QWORD *)v95 + 2) = v131;
                  v130 += 3;
                  if (v130 == v129)
                    goto LABEL_175;
                }
              }
              goto LABEL_175;
            }
          }
        }
      }
      else
      {
        v94 = (AMCP::Log::Scope_Registry *)operator new();
        v95 = v94;
        *(_QWORD *)v94 = &off_1E697A5A0;
        v96 = (_QWORD *)((char *)v94 + 8);
        if ((*(_BYTE *)(v86 + 20) & 1) != 0 || *(_DWORD *)(v86 + 40) != 16)
        {
          AMCP::Log::Scope_Registry::get(v94);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          v288 = *(std::__shared_weak_count **)&buf[8];
          v289 = **(NSObject ***)buf;
          if (*(_QWORD *)&buf[8])
          {
            v290 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v291 = __ldaxr(v290);
            while (__stlxr(v291 - 1, v290));
            if (!v291)
            {
              ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
              std::__shared_weak_count::__release_weak(v288);
            }
          }
          if (os_log_type_enabled(v289, OS_LOG_TYPE_ERROR))
          {
            v292 = pthread_self();
            v293 = pthread_mach_thread_np(v292);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v293;
            *(_WORD *)&buf[8] = 2080;
            *(_QWORD *)&buf[10] = "Sample_Format_Handler.h";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 94;
            LOWORD(v371) = 2080;
            *(_QWORD *)((char *)&v371 + 2) = "not (not (other.get_format().mFormatFlags & kAudioFormatFlagIsFloat) and ot"
                                             "her.get_format().mBitsPerChannel == 16)";
            _os_log_error_impl(&dword_1B57BA000, v289, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v365);
          v294 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v348, &v346);
          std::logic_error::logic_error(&v364, &v348);
          v364.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error((std::logic_error *)v366, &v364);
          v367 = 0uLL;
          v368 = 0;
          v369 = -1;
          *(_QWORD *)v366 = off_1E69A1208;
          *(_QWORD *)&v366[16] = &unk_1E69A1230;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v366);
          *((_QWORD *)&v371 + 1) = "DAL::Sample_Group<int16_t> AMCP::DAL::get_sample_data(const DAL::Container &, DAL::Sa"
                                   "mple_Time_Range)";
          *(_QWORD *)&v372 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
          DWORD2(v372) = 94;
          std::vector<void *>::vector(&v363);
          v295 = backtrace((void **)v363.__r_.__value_.__l.__data_, (v363.__r_.__value_.__l.__size_ - v363.__r_.__value_.__r.__words[0]) >> 3);
          std::vector<void *>::resize(&v363.__r_.__value_.__l.__data_, v295);
          *(std::string *)&v350[8] = v363;
          *(_QWORD *)v350 = off_1E69A20A0;
          memset(&v363, 0, sizeof(v363));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)v350);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v294, (uint64_t)buf);
        }
        AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>(v86);
        v97 = AMCP::DAL::PCM_Data_Handler::get_length_in_frames((AMCP::DAL::PCM_Data_Handler *)v86);
        v98 = round(v97);
        if (v98 > 0.0)
        {
          v99 = round(v93);
          v100 = round(v92);
          if (v99 < v100)
          {
            v101 = v99 <= 0.0;
            v102 = 0.0;
            if (!v101)
              v102 = v93;
            if (v100 < v98)
              v97 = v92;
            if (round(v102) < round(v97))
            {
              *v96 = 0;
              v96[1] = 0;
              v96[2] = 0;
              v104 = *(_QWORD **)(v86 + 56);
              v103 = *(_QWORD **)(v86 + 64);
              if (v104 != v103)
              {
                v105 = 0;
                v106 = vcvtmd_s64_f64(v102);
                v107 = vcvtmd_s64_f64(v97 - v102);
                v320 = v106;
                v322 = *(_QWORD **)(v86 + 64);
                v318 = v107;
                while (1)
                {
                  if ((*(_BYTE *)(v86 + 20) & 0x20) != 0)
                    v108 = 1;
                  else
                    v108 = *(unsigned int *)(v86 + 36);
                  v109 = *v104 + (*(_DWORD *)(v86 + 32) * v106);
                  v110 = v108 * v107;
                  v111 = *((_QWORD *)v95 + 3);
                  if ((unint64_t)v105 >= v111)
                  {
                    v112 = ((uint64_t)v105 - *v96) >> 4;
                    if ((unint64_t)(v112 + 1) >> 60)
                      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                    v113 = v111 - *v96;
                    v114 = v113 >> 3;
                    if (v113 >> 3 <= (unint64_t)(v112 + 1))
                      v114 = v112 + 1;
                    if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF0)
                      v115 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v115 = v114;
                    if (v115)
                    {
                      if (v115 >> 60 || !*MEMORY[0x1E0DDB4F0])
                        goto LABEL_394;
                      v116 = caulk::rt_safe_memory_resource::rt_allocate((caulk::rt_safe_memory_resource *)*MEMORY[0x1E0DDB4F0]);
                    }
                    else
                    {
                      v116 = 0;
                    }
                    v117 = (_QWORD *)(v116 + 16 * v112);
                    *v117 = v109;
                    v117[1] = v110;
                    v118 = *((_QWORD *)v95 + 1);
                    v119 = *((_QWORD *)v95 + 2);
                    if (v119 == v118)
                    {
                      *(_QWORD *)&v121 = vdupq_n_s64(v119).u64[0];
                      v120 = v116 + 16 * v112;
                    }
                    else
                    {
                      v120 = v116 + 16 * v112;
                      do
                      {
                        *(_OWORD *)(v120 - 16) = *(_OWORD *)(v119 - 16);
                        v120 -= 16;
                        v119 -= 16;
                      }
                      while (v119 != v118);
                      v121 = *(_OWORD *)v96;
                    }
                    v105 = v117 + 2;
                    *((_QWORD *)v95 + 1) = v120;
                    *((_QWORD *)v95 + 2) = v117 + 2;
                    v122 = *((_QWORD *)v95 + 3);
                    *((_QWORD *)v95 + 3) = v116 + 16 * v115;
                    if ((_QWORD)v121)
                      std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<short>>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)v121, (v122 - (uint64_t)v121) >> 4);
                    v106 = v320;
                    v103 = v322;
                    v107 = v318;
                  }
                  else
                  {
                    *v105 = v109;
                    v105[1] = v110;
                    v105 += 2;
                  }
                  *((_QWORD *)v95 + 2) = v105;
                  v104 += 3;
                  if (v104 == v103)
                    goto LABEL_175;
                }
              }
              goto LABEL_175;
            }
          }
        }
      }
      *v96 = 0;
      v96[1] = 0;
      v96[2] = 0;
LABEL_175:
      AMCP::DAL::DAL_Timed_Segment::get_format((AMCP::DAL::DAL_Timed_Segment *)buf, (uint64_t)v382);
      v151 = 0;
      if ((buf[12] & 0x20) != 0)
        v152 = 1;
      else
        v152 = DWORD1(v371);
      while (1)
      {
        v153 = (*(uint64_t (**)(AMCP::Log::Scope_Registry *))(*(_QWORD *)v95 + 16))(v95);
        if (v151 >= v153)
        {
          v91 = v91 + v92 - v93;
          v86 = v324;
          goto LABEL_211;
        }
        v154 = (*(uint64_t (**)(AMCP::Log::Scope_Registry *))(*(_QWORD *)v95 + 24))(v95);
        if (v154 < v152)
          break;
        v155 = 0;
        v156 = 0;
        if (v154 / v152 <= 1)
          v157 = 1;
        else
          v157 = v154 / v152;
        while (2)
        {
          v158 = v91 + AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v328) + (double)v156;
          v159 = v89 / *((float *)v72 + 1);
          v160 = vcvtmd_s64_f64(v158);
          v161 = fmod((float)((float)((float)((float)v160 / v159) + (float)((float)v160 / v159)) * 3.1416), 6.28318531);
          v162 = *v72;
          v163 = v161;
          switch(*v72)
          {
            case 0:
              v166 = sinf(v163);
              goto LABEL_200;
            case 1:
              if (sinf(v163) <= 0.0)
                v166 = -1.0;
              else
                v166 = 1.0;
              goto LABEL_200;
            case 2:
            case 5:
              v164 = fmod((double)v160, v159);
              v165 = (float)((float)(v164 / v159) * 2.0) + -1.0;
              if (v162 == 5)
                v166 = v165 * 10000.0;
              else
                v166 = v165;
              goto LABEL_193;
            case 3:
              v167 = round(v158);
              v168 = *((double *)v72 + 2);
              v166 = 1.0;
              if (v167 != round(v168) && v167 != round(v168 + 10.0))
              {
                if (v167 == round(v168 + 20.0))
                  v166 = 1.0;
                else
                  v166 = 0.0;
              }
              goto LABEL_200;
            case 4:
              v166 = v158;
              goto LABEL_201;
            default:
              v166 = 0.0;
LABEL_193:
              if (v162 != 4)
LABEL_200:
                v166 = v166 * *((float *)v72 + 2);
LABEL_201:
              v169 = v155;
              v170 = v152;
              if ((_DWORD)v152)
              {
                do
                {
                  (*(void (**)(AMCP::Log::Scope_Registry *, unint64_t, uint64_t, float))(*(_QWORD *)v95 + 32))(v95, v151, v169++, v166);
                  --v170;
                }
                while (v170);
              }
              ++v156;
              v155 += v152;
              if (v156 != v157)
                continue;
              ++v151;
              break;
          }
          break;
        }
      }
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v154);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v171 = *(caulk::concurrent::messenger **)(*(_QWORD *)buf + 8);
      v172 = pthread_self();
      v173 = pthread_mach_thread_np(v172);
      v174 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
      v86 = v324;
      *(_DWORD *)(v174 + 16) = 0;
      *(_BYTE *)(v174 + 20) = 2;
      *(_DWORD *)(v174 + 24) = v173;
      *(_QWORD *)(v174 + 32) = "Tone_Generator.cpp";
      *(_DWORD *)(v174 + 40) = 104;
      *(_QWORD *)v174 = &off_1E697A6E8;
      *(_QWORD *)(v174 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v171, (caulk::concurrent::message *)v174);
      v175 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v176 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v177 = __ldaxr(v176);
        while (__stlxr(v177 - 1, v176));
        if (!v177)
        {
          ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
          std::__shared_weak_count::__release_weak(v175);
        }
      }
LABEL_211:
      v90 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(AMCP::Log::Scope_Registry *))(*(_QWORD *)v95 + 8))(v95);
      if (v151 >= v153)
      {
        v326 += 12;
        if (v326 != v325)
          continue;
      }
      break;
    }
  }
  *(_QWORD *)buf = &v361;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)buf);
  if (v316)
  {
    v178 = (unint64_t *)&v316->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
      std::__shared_weak_count::__release_weak(v316);
    }
  }
  v180 = *((_QWORD *)v72 + 3);
  *(_OWORD *)buf = v328;
  *(_QWORD *)&buf[16] = v329;
  v371 = v330;
  if (*((_QWORD *)&v330 + 1))
  {
    v181 = (unint64_t *)(*((_QWORD *)&v330 + 1) + 8);
    do
      v182 = __ldxr(v181);
    while (__stxr(v182 + 1, v181));
  }
  v372 = v331;
  v373 = v332;
  v374 = v333;
  v375 = v334;
  if (v334)
  {
    v183 = (unint64_t *)&v334->__shared_owners_;
    do
      v184 = __ldxr(v183);
    while (__stxr(v184 + 1, v183));
  }
  AMCP::DAL::Fixed_Buffer::create_readable_range(v180, buf, (uint64_t)v335);
  v185 = v375;
  if (v375)
  {
    v186 = (unint64_t *)&v375->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  v188 = (std::__shared_weak_count *)*((_QWORD *)&v371 + 1);
  if (*((_QWORD *)&v371 + 1))
  {
    v189 = (unint64_t *)(*((_QWORD *)&v371 + 1) + 8);
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  AMCP::DAL::DAL_Time::operator-((uint64_t)v366, (AMCP::DAL::DAL_Time *)&v337, (AMCP::DAL::DAL_Time *)v335);
  AMCP::DAL::DAL_Time::operator-((uint64_t)v350, (AMCP::DAL::DAL_Time *)&v331, (AMCP::DAL::DAL_Time *)&v328);
  v191 = AMCP::DAL::DAL_Time_Delta::operator==((AMCP::DAL::DAL_Time_Delta *)v366, (uint64_t)v350);
  v192 = v191;
  v193 = v351;
  if (v351)
  {
    v194 = (unint64_t *)&v351->__shared_owners_;
    do
      v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  v196 = (std::__shared_weak_count *)*((_QWORD *)&v367 + 1);
  if (*((_QWORD *)&v367 + 1))
  {
    v197 = (unint64_t *)(*((_QWORD *)&v367 + 1) + 8);
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  if (!v192)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v191);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v366, "com.apple.coreaudio", "AMCP");
    v311 = **(NSObject ***)v366;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v366);
    if (os_log_type_enabled(v311, OS_LOG_TYPE_ERROR))
    {
      v312 = pthread_self();
      v313 = pthread_mach_thread_np(v312);
      *(_DWORD *)v366 = 67109890;
      *(_DWORD *)&v366[4] = v313;
      *(_WORD *)&v366[8] = 2080;
      *(_QWORD *)&v366[10] = "Tone_Generator.cpp";
      *(_WORD *)&v366[18] = 1024;
      *(_DWORD *)&v366[20] = 232;
      LOWORD(v367) = 2080;
      *(_QWORD *)((char *)&v367 + 2) = "not (results.get_time_range().length() == range.length())";
      _os_log_error_impl(&dword_1B57BA000, v311, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", v366, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v365);
    v314 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v363, &v346);
    std::logic_error::logic_error(&v364, &v363);
    v364.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error((std::logic_error *)v350, &v364);
    *(_QWORD *)&v350[24] = 0;
    v351 = 0;
    v352 = 0;
    v353 = -1;
    *(_QWORD *)v350 = off_1E69A1208;
    *(_QWORD *)&v350[16] = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v366, (uint64_t)v350);
    *((_QWORD *)&v367 + 1) = "AMCP::DAL::Readable_Range AMCP::Tone_Generator_Buffer::generate_audio_in_buffer(const AMCP:"
                             ":DAL::DAL_Time_Range &)";
    v368 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Tone_Generator.cpp";
    v369 = 232;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v361);
    *(_OWORD *)&v348.__r_.__value_.__r.__words[1] = v361;
    v348.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
    v349 = v362;
    v361 = 0uLL;
    v362 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)v366, (uint64_t)&v348);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v314, (uint64_t)v366);
  }
  v199 = v381;
  if (v381)
  {
    v200 = (unint64_t *)&v381->__shared_owners_;
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
  v202 = (std::__shared_weak_count *)*((_QWORD *)&v377 + 1);
  if (*((_QWORD *)&v377 + 1))
  {
    v203 = (unint64_t *)(*((_QWORD *)&v377 + 1) + 8);
    do
      v204 = __ldaxr(v203);
    while (__stlxr(v204 - 1, v203));
    if (!v204)
    {
      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
      std::__shared_weak_count::__release_weak(v202);
    }
  }
  v205 = v334;
  if (v334)
  {
    v206 = (unint64_t *)&v334->__shared_owners_;
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
    }
  }
  v208 = (std::__shared_weak_count *)*((_QWORD *)&v330 + 1);
  if (*((_QWORD *)&v330 + 1))
  {
    v209 = (unint64_t *)(*((_QWORD *)&v330 + 1) + 8);
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 - 1, v209));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
  }
  AMCP::DAL::DAL_Timed_Segment::translate_range((double **)v376, v339, (uint64_t)v335);
  v211 = *(double **)v376;
  v212 = *(_DWORD *)(*((_QWORD *)v317 + 93) + 56);
  v214 = **(double **)v376;
  v213 = *(double *)(*(_QWORD *)v376 + 8);
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v339 + 56))(&v354);
  AMCP::DAL::PCM_Data_Handler::get_other_data_bytes((AMCP::Log::Scope_Registry *)v354, *v211, v211[1]);
  v216 = v215;
  v217 = v212 * vcvtmd_s64_f64(v213 - v214);
  v218 = (std::__shared_weak_count *)*((_QWORD *)&v354 + 1);
  if (*((_QWORD *)&v354 + 1))
  {
    v219 = (unint64_t *)(*((_QWORD *)&v354 + 1) + 8);
    do
      v220 = __ldaxr(v219);
    while (__stlxr(v220 - 1, v219));
    if (!v220)
    {
      ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
      std::__shared_weak_count::__release_weak(v218);
    }
  }
  memcpy(v315[1], v216, v217);
  v221 = *(_QWORD *)v376;
  if (*(_QWORD *)&v376[8] - *(_QWORD *)v376 == 192)
  {
    v222 = *(_DWORD *)(*((_QWORD *)v317 + 93) + 56);
    v224 = *(double *)(*(_QWORD *)v376 + 96);
    v223 = *(double *)(*(_QWORD *)v376 + 104);
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v339 + 56))(&v354);
    AMCP::DAL::PCM_Data_Handler::get_other_data_bytes((AMCP::Log::Scope_Registry *)v354, *(double *)(v221 + 96), *(double *)(v221 + 104));
    v226 = v225;
    v227 = v222 * vcvtmd_s64_f64(v223 - v224);
    v228 = (std::__shared_weak_count *)*((_QWORD *)&v354 + 1);
    if (*((_QWORD *)&v354 + 1))
    {
      v229 = (unint64_t *)(*((_QWORD *)&v354 + 1) + 8);
      do
        v230 = __ldaxr(v229);
      while (__stlxr(v230 - 1, v229));
      if (!v230)
      {
        ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
        std::__shared_weak_count::__release_weak(v228);
      }
    }
    memcpy((char *)v315[1] + (int)v217, v226, v227);
  }
  *(_QWORD *)&v354 = v376;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v354);
  v231 = v338;
  if (v338)
  {
    v232 = (unint64_t *)&v338->__shared_owners_;
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }
  v234 = v336;
  if (v336)
  {
    v235 = (unint64_t *)&v336->__shared_owners_;
    do
      v236 = __ldaxr(v235);
    while (__stlxr(v236 - 1, v235));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
      std::__shared_weak_count::__release_weak(v234);
    }
  }
  v237 = (std::__shared_weak_count *)*((_QWORD *)&v343 + 1);
  if (*((_QWORD *)&v343 + 1))
  {
    v238 = (unint64_t *)(*((_QWORD *)&v343 + 1) + 8);
    do
      v239 = __ldaxr(v238);
    while (__stlxr(v239 - 1, v238));
    if (!v239)
    {
      ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
      std::__shared_weak_count::__release_weak(v237);
    }
  }
  v240 = (std::__shared_weak_count *)*((_QWORD *)&v346 + 1);
  if (*((_QWORD *)&v346 + 1))
  {
    v241 = (unint64_t *)(*((_QWORD *)&v346 + 1) + 8);
    do
      v242 = __ldaxr(v241);
    while (__stlxr(v242 - 1, v241));
    if (!v242)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
  }
  v243 = (std::__shared_weak_count *)*((_QWORD *)&v347 + 1);
  if (*((_QWORD *)&v347 + 1))
  {
    v244 = (unint64_t *)(*((_QWORD *)&v347 + 1) + 8);
    do
      v245 = __ldaxr(v244);
    while (__stlxr(v245 - 1, v244));
    goto LABEL_356;
  }
}

void sub_1B5B954C8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t v53;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;

  if (a2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
    v55 = *(std::__shared_weak_count **)(v53 - 184);
    if (v55)
    {
      p_shared_owners = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldaxr(p_shared_owners);
      while (__stlxr(v57 - 1, p_shared_owners));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v53 - 232);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a9);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMCP::Null::Engine::end_reading(AMCP::Null::Engine *this, double a2)
{
  return 1;
}

uint64_t AMCP::Null::Engine::begin_writing(AMCP::Null::Engine *this, double a2)
{
  return 1;
}

uint64_t AMCP::Null::Engine::write_data_to_stream(AMCP::Log::Scope_Registry *a1, double a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  _QWORD *v8;
  uint64_t v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  AMCP::DAL::Ring_Buffer_Base *v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t *v21;
  unint64_t v22;
  double v23;
  unint64_t *v24;
  unint64_t v25;
  _BOOL8 v26;
  _BOOL4 v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  double *v50;
  double *v51;
  unsigned int v52;
  AMCP::Log::Scope_Registry *other_data_bytes;
  AMCP::Log::Scope_Registry *v54;
  void *v55;
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  size_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  NSObject *v94;
  _opaque_pthread_t *v95;
  mach_port_t v96;
  void *v97;
  NSObject *v98;
  _opaque_pthread_t *v99;
  mach_port_t v100;
  NSObject *v101;
  _opaque_pthread_t *v102;
  mach_port_t v103;
  void *exception;
  uint64_t v105;
  std::logic_error v106;
  void *v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  int v113;
  double v114;
  uint64_t v115;
  __int128 v116;
  int v117;
  double v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  AMCP::DAL::Ring_Buffer_Base *v122[2];
  std::logic_error v123;
  uint64_t v124;
  uint64_t (**v125)();
  std::logic_error v126;
  uint64_t v127;
  std::string v128;
  std::logic_error v129;
  void (**v130)();
  std::logic_error v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  uint64_t v134;
  int v135;
  char v136;
  _BYTE __p[24];
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  uint8_t buf[8];
  __int16 v144;
  char *v145;
  __int16 v146;
  int v147;
  __int128 v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  uint64_t v151;
  uint64_t v152;

  v152 = *MEMORY[0x1E0C80C00];
  v8 = (_QWORD *)*((_QWORD *)a1 + 92);
  if (v8)
  {
    if (a5 >= (unint64_t)((uint64_t)(v8[1] - *v8) >> 4))
    {
      AMCP::Log::Scope_Registry::get(a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v98 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
      {
        v99 = pthread_self();
        v100 = pthread_mach_thread_np(v99);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v100;
        v144 = 2080;
        v145 = "Null_Engine_Reflector.cpp";
        v146 = 1024;
        v147 = 121;
        LOWORD(v148) = 2080;
        *(_QWORD *)((char *)&v148 + 2) = "in_stream_index < m_stream_buffers.size()";
        _os_log_error_impl(&dword_1B57BA000, v98, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
      }
      abort();
    }
    v10 = *a8;
    v11 = *(_OWORD *)(*v8 + 16 * a5);
    *(_OWORD *)v122 = v11;
    if (*((_QWORD *)&v11 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)buf, v11);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
    v121 = v148;
    if (*((_QWORD *)&v148 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      do
        v17 = __ldaxr(v15);
      while (__stlxr(v17 - 1, v15));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v18 = v122[0];
    v19 = *((_QWORD *)v122[0] + 11);
    if (v19)
      LODWORD(v19) = *(_DWORD *)(v19 + 32);
    v20 = *(_DWORD *)v10 / v19;
    if (*((_QWORD *)&v121 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      v117 = 2;
      v118 = a2;
      v119 = 0;
      v120 = v121;
      v23 = (double)v20 + a2;
      v24 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    else
    {
      v117 = 2;
      v118 = a2;
      v119 = 0;
      v120 = (unint64_t)v121;
      v23 = (double)v20 + a2;
    }
    v113 = 2;
    v114 = v23;
    v115 = 0;
    v116 = v121;
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v106, (const AMCP::DAL::DAL_Time *)&v117, (const AMCP::DAL::DAL_Time *)&v113);
    AMCP::DAL::DAL_Time::operator-((uint64_t)__p, (AMCP::DAL::DAL_Time *)&v109, (AMCP::DAL::DAL_Time *)&v106);
    AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)&v130, (uint64_t)v18);
    v26 = AMCP::DAL::DAL_Time_Delta::operator<((AMCP::DAL::DAL_Time_Delta *)&v130, (uint64_t)__p);
    v27 = v26;
    v28 = v133;
    if (v133)
    {
      p_shared_owners = (unint64_t *)&v133->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
    if (*((_QWORD *)&v138 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (v27)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v26);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
      v101 = **(NSObject ***)__p;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
      {
        v102 = pthread_self();
        v103 = pthread_mach_thread_np(v102);
        *(_DWORD *)__p = 67109890;
        *(_DWORD *)&__p[4] = v103;
        *(_WORD *)&__p[8] = 2080;
        *(_QWORD *)&__p[10] = "DAL_Timed_Segment.cpp";
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&__p[20] = 279;
        LOWORD(v138) = 2080;
        *(_QWORD *)((char *)&v138 + 2) = "not (range.length() <= buffer.get_length_in_frames())";
        _os_log_error_impl(&dword_1B57BA000, v101, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", __p, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v136);
      exception = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v128);
      std::logic_error::logic_error(&v129, &v128);
      v129.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error((std::logic_error *)&v130, &v129);
      v132 = 0;
      v133 = 0;
      v134 = 0;
      v135 = -1;
      v130 = off_1E69A1208;
      v131.__imp_.__imp_ = (const char *)&unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v130);
      *((_QWORD *)&v138 + 1) = "Writable_Range AMCP::DAL::create_writable_range(const DAL_Time_Range &, Ring_Buffer_Base &)";
      *(_QWORD *)&v139 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Timed_Segment.cpp";
      DWORD2(v139) = 279;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v123);
      v126 = v123;
      v105 = v124;
      v124 = 0;
      v125 = off_1E69A20A0;
      v127 = v105;
      v123 = (std::logic_error)0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)&v125);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)__p);
    }
    *(std::logic_error *)__p = v106;
    *(_QWORD *)&__p[16] = v107;
    v138 = v108;
    if (*((_QWORD *)&v108 + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v139 = v109;
    v140 = v110;
    v141 = v111;
    v142 = v112;
    if (v112)
    {
      v36 = (unint64_t *)&v112->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    AMCP::DAL::Ring_Buffer_Base::create_writable_range((uint64_t)v18, __p, (uint64_t)buf);
    v38 = v142;
    if (v142)
    {
      v39 = (unint64_t *)&v142->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
    if (*((_QWORD *)&v138 + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = v112;
    if (v112)
    {
      v45 = (unint64_t *)&v112->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v47 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
    if (*((_QWORD *)&v108 + 1))
    {
      v48 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)buf, (AMCP::DAL::DAL_Time *)&v149))
    {
      AMCP::DAL::Writable_Range::get_direct_write_ranges((AMCP::DAL::Writable_Range *)&v125, (uint64_t)buf);
      v50 = (double *)v125;
      v51 = (double *)v126.__vftable;
      if (v125 != (uint64_t (**)())v126.__vftable)
      {
        v52 = 0;
        do
        {
          (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v151 + 56))(__p);
          other_data_bytes = (AMCP::Log::Scope_Registry *)AMCP::DAL::PCM_Data_Handler::get_other_data_bytes(*(AMCP::Log::Scope_Registry **)__p, *v50, v50[1]);
          v54 = other_data_bytes;
          v56 = v55;
          v57 = *(std::__shared_weak_count **)&__p[8];
          if (*(_QWORD *)&__p[8])
          {
            v58 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
          if (!v54)
          {
            AMCP::Log::Scope_Registry::get(other_data_bytes);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
            v94 = **(NSObject ***)__p;
            std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)__p);
            if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
            {
              v95 = pthread_self();
              v96 = pthread_mach_thread_np(v95);
              *(_DWORD *)__p = 67109890;
              *(_DWORD *)&__p[4] = v96;
              *(_WORD *)&__p[8] = 2080;
              *(_QWORD *)&__p[10] = "Null_Engine_Reflector.cpp";
              *(_WORD *)&__p[18] = 1024;
              *(_DWORD *)&__p[20] = 142;
              LOWORD(v138) = 2080;
              *(_QWORD *)((char *)&v138 + 2) = "not (not bytes.empty())";
              _os_log_error_impl(&dword_1B57BA000, v94, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", __p, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v136);
            v97 = __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"", (uint64_t)&v128);
            std::logic_error::logic_error(&v129, &v128);
            v129.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
            std::logic_error::logic_error(&v106, &v129);
            v108 = 0uLL;
            *(_QWORD *)&v109 = 0;
            DWORD2(v109) = -1;
            v106.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
            v107 = &unk_1E69A1230;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v106);
            *((_QWORD *)&v138 + 1) = "BOOL AMCP::Null::Null_Engine_Reflector::write_data_to_stream(uint32_t, float64_t, c"
                                     "onst gsl::span<std::byte> &)";
            *(_QWORD *)&v139 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Engine_Reflector.cpp";
            DWORD2(v139) = 142;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v123);
            v131 = v123;
            v130 = (void (**)())off_1E69A20A0;
            v132 = v124;
            v123 = (std::logic_error)0;
            v124 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)__p, (uint64_t)&v130);
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v97, (uint64_t)__p);
          }
          v60 = *((_QWORD *)v122[0] + 11);
          if (v60)
            LODWORD(v60) = *(_DWORD *)(v60 + 32);
          v61 = v60 * vcvtmd_s64_f64(v50[1] - *v50);
          memcpy(v56, (const void *)(*(_QWORD *)(v10 + 8) + v52), v61);
          *(_DWORD *)__p = 0;
          *(_OWORD *)&__p[8] = 0u;
          v138 = 0u;
          LODWORD(v139) = 0;
          AMCP::DAL::Writable_Range::commit_direct_write(v151, (uint64_t)__p, (uint64_t)v50);
          if (SBYTE7(v138) < 0)
            operator delete(*(void **)&__p[8]);
          v52 += v61;
          v50 += 14;
        }
        while (v50 != v51);
      }
      if (v8[4])
      {
        AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v106, (const AMCP::DAL::DAL_Time *)&v117, (const AMCP::DAL::DAL_Time *)&v113);
        AMCP::DAL::create_readable_range((AMCP::DAL *)__p, (const AMCP::DAL::DAL_Time_Range *)&v106, v122[0]);
        v62 = v112;
        if (v112)
        {
          v63 = (unint64_t *)&v112->__shared_owners_;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        v65 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
        if (*((_QWORD *)&v108 + 1))
        {
          v66 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        v68 = (_QWORD *)v8[4];
        v130 = 0;
        v131.__vftable = 0;
        AMCP::DAL::DAL_Settings::DAL_Settings((unint64_t)&v106, (uint64_t *)&v130);
        (*(void (**)(_QWORD, std::logic_error *, _BYTE *))(*(_QWORD *)*v68 + 16))(*v68, &v106, __p);
        std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table((uint64_t)&v106);
        v69 = v142;
        if (v142)
        {
          v70 = (unint64_t *)&v142->__shared_owners_;
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        v72 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
        if (*((_QWORD *)&v138 + 1))
        {
          v73 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
      }
      *(_QWORD *)__p = &v125;
      std::vector<AMCP::DAL::Writable_Range::Direct_Write_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range::Direct_Write_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)__p);
    }
    v75 = v150;
    if (v150)
    {
      v76 = (unint64_t *)&v150->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    v78 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
    if (*((_QWORD *)&v148 + 1))
    {
      v79 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    v81 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
    if (*((_QWORD *)&v116 + 1))
    {
      v82 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
    v84 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
    if (*((_QWORD *)&v120 + 1))
    {
      v85 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    v87 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
    if (*((_QWORD *)&v121 + 1))
    {
      v88 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    v90 = (std::__shared_weak_count *)v122[1];
    if (v122[1])
    {
      v91 = (unint64_t *)((char *)v122[1] + 8);
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }
  }
  return 1;
}

void sub_1B5B96814(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,char a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  uint64_t v55;

  if (a2)
  {
    a55 = (uint64_t)&a38;
    std::vector<AMCP::DAL::Writable_Range::Direct_Write_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range::Direct_Write_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&a55);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v55 - 144);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v55 - 184);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a10);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMCP::Null::Engine::end_writing(AMCP::Null::Engine *this, double a2)
{
  return 1;
}

double AMCP::Null::Engine::get_zero_time_stamp@<D0>(const __CFString **this@<X0>, uint64_t a2@<X8>)
{
  CFComparisonResult v4;
  uint64_t v5;
  char *v6;
  double result;
  __int128 v8;
  __int128 v9;
  CFTypeRef cf[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;

  if (((int (*)(const __CFString **))(*this)[4].info)(this) < 1)
    goto LABEL_8;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "fail_to_deliver_time_stamp");
  v4 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(this[90], (const __CFString **)cf);
  if (cf[0])
    CFRelease(cf[0]);
  if (v4)
  {
    v5 = mach_absolute_time();
    AMCP::IO_Clock::get_current_zts((AMCP::IO_Clock *)cf, (uint64_t)(this + 70));
    if (cf[1])
    {
      v6 = (char *)cf[1] + 24000000;
      if ((CFTypeRef)v5 <= (char *)cf[1] + 24000000)
      {
        v8 = v11;
        *(_OWORD *)a2 = *(_OWORD *)cf;
        *(_OWORD *)(a2 + 16) = v8;
        result = *(double *)&v12;
        v9 = v13;
        *(_OWORD *)(a2 + 32) = v12;
        *(_OWORD *)(a2 + 48) = v9;
        return result;
      }
      *(double *)a2 = *(double *)cf + *((double *)this + 4);
      *(_QWORD *)(a2 + 8) = v6;
    }
    else
    {
      *(double *)a2 = (float)((float)*((unsigned int *)this + 182) + (float)*((unsigned int *)this + 182));
      *(_QWORD *)(a2 + 8) = v5;
    }
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_QWORD *)(a2 + 48) = 0;
  }
  else
  {
LABEL_8:
    *(_QWORD *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  *(_QWORD *)&result = 3;
  *(_QWORD *)(a2 + 56) = 3;
  return result;
}

uint64_t AMCP::Null::Engine::update_time(AMCP::Null::Engine *this)
{
  return AMCP::IO_Clock::update_time((AMCP::Null::Engine *)((char *)this + 560));
}

BOOL AMCP::Null::Engine::reset_time(os_unfair_lock_s *this)
{
  return AMCP::IO_Clock::reset_time(this + 140);
}

BOOL AMCP::Null::Engine::has_time(os_unfair_lock_s *this)
{
  return AMCP::IO_Clock::has_time(this + 140);
}

void AMCP::Null::Engine::get_current_time(AMCP::Null::Engine *this@<X0>, AMCP::IO_Clock *a2@<X8>)
{
  AMCP::IO_Clock::get_current_time(a2, (uint64_t)this + 560);
}

double AMCP::Null::Engine::get_current_host_ticks_per_frame(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  double v3;

  v2 = this + 160;
  os_unfair_lock_lock(this + 160);
  v3 = *(double *)&this[156]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2);
  return v3;
}

unint64_t AMCP::Null::Engine::convert_sample_to_host_time(os_unfair_lock_s *this, double a2)
{
  return AMCP::IO_Clock::convert_sample_to_host_time(this + 140, a2);
}

double AMCP::Null::Engine::convert_host_to_sample_time(os_unfair_lock_s *this, unint64_t a2)
{
  AMCP::IO_Clock *v3;
  os_unfair_lock_s *v4;
  double v5;

  v3 = (AMCP::IO_Clock *)&this[140];
  v4 = this + 160;
  os_unfair_lock_lock(this + 160);
  v5 = AMCP::IO_Clock::convert_host_to_sample_time_internal(v3, a2);
  os_unfair_lock_unlock(v4);
  return v5;
}

uint64_t *AMCP::Null::Engine::take_power_assertions(AMCP::Null::Engine *this)
{
  return AMCP::Core::Implementation::Simple_Engine_IO_State::take_power_assertions((uint64_t *)this + 15);
}

uint64_t *AMCP::Null::Engine::release_power_assertions(AMCP::Null::Engine *this)
{
  return AMCP::Core::Implementation::Simple_Engine_IO_State::release_power_assertions((uint64_t *)this + 15);
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<AMCP::Null::Engine::set_transport_state(AMCP::Transport_State)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  unsigned int *v2;

  if ((int)MEMORY[0x1B5E5064C]() > *(_DWORD *)a1)
  {
    v2 = *(unsigned int **)(a1 + 8);
    atomic_store(0, v2 + 34);
    AMCP::Null::Engine::stop((AMCP::Null::Engine *)v2);
  }
  return a1;
}

uint64_t AMCP::Null::Engine::stop(AMCP::Null::Engine *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 92);
  if (v2 && *(_BYTE *)(v2 + 24))
    std::shared_ptr<AMCP::DAL::File>::reset[abi:ne180100]((_QWORD *)(v2 + 32));
  kdebug_trace();
  AMCP::IO_Clock::reset_time((os_unfair_lock_s *)this + 140);
  AMCP::Core::Implementation::Simple_Engine_IO_State::release_power_assertions((uint64_t *)this + 15);
  return kdebug_trace();
}

uint64_t *std::unique_ptr<AMCP::Tone_Generator_Buffer>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

void std::default_delete<AMCP::Null::Null_Engine_Reflector>::operator()[abi:ne180100](uint64_t a1)
{
  void *v2;
  void **v3;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 32);
  v3 = (void **)a1;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  JUMPOUT(0x1B5E50688);
}

void std::__function::__func<AMCP::Null::Engine::Engine(applesauce::CF::StringRef,double,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&,AMCP::Null::Input_Source,BOOL,unsigned int)::$_2,std::allocator<AMCP::Null::Engine::Engine(applesauce::CF::StringRef,double,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&,AMCP::Null::Input_Source,BOOL,unsigned int)::$_2>,CA::TimeStamp ()(void)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Null::Engine::Engine(applesauce::CF::StringRef,double,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&,AMCP::Null::Input_Source,BOOL,unsigned int)::$_2,std::allocator<AMCP::Null::Engine::Engine(applesauce::CF::StringRef,double,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&,AMCP::Null::Input_Source,BOOL,unsigned int)::$_2>,CA::TimeStamp ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6993480;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Null::Engine::Engine(applesauce::CF::StringRef,double,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&,AMCP::Null::Input_Source,BOOL,unsigned int)::$_2,std::allocator<AMCP::Null::Engine::Engine(applesauce::CF::StringRef,double,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&,AMCP::Null::Input_Source,BOOL,unsigned int)::$_2>,CA::TimeStamp ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6993480;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::Null::Engine::Engine(applesauce::CF::StringRef,double,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&,AMCP::Null::Input_Source,BOOL,unsigned int)::$_2,std::allocator<AMCP::Null::Engine::Engine(applesauce::CF::StringRef,double,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&,AMCP::Null::Input_Source,BOOL,unsigned int)::$_2>,CA::TimeStamp ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 304))(*(_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<AMCP::Null::Engine::Engine(applesauce::CF::StringRef,double,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&,AMCP::Null::Input_Source,BOOL,unsigned int)::$_2,std::allocator<AMCP::Null::Engine::Engine(applesauce::CF::StringRef,double,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&,AMCP::Null::Input_Source,BOOL,unsigned int)::$_2>,CA::TimeStamp ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP4Null6EngineC1EN10applesauce2CF9StringRefEdjbjjjjS4_RKNSt3__16vectorINS_4Core14Implementation18Simple_Engine_Data11Stream_InfoENS5_9allocatorISA_EEEESF_RKNS_7Utility14Dispatch_QueueENS0_12Input_SourceEbjE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Null::Engine::Engine(applesauce::CF::StringRef,double,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&,AMCP::Null::Input_Source,BOOL,unsigned int)::$_2,std::allocator<AMCP::Null::Engine::Engine(applesauce::CF::StringRef,double,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&,AMCP::Null::Input_Source,BOOL,unsigned int)::$_2>,CA::TimeStamp ()(void)>::target_type()
{
}

void AMCP::DAL::Mixing_Ring_Buffer::receive_data(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  _QWORD v89[4];
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  __int128 v100[2];
  std::__shared_weak_count *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count *v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  std::__shared_weak_count *v112;

  (*(void (**)(_QWORD *__return_ptr))(*a1 + 64))(v89);
  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::intersection((uint64_t)v100, a3, v89);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&v105, v100);
  v5 = v102;
  if (v102)
  {
    p_shared_owners = (unint64_t *)&v102->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v101;
  if (v101)
  {
    v9 = (unint64_t *)&v101->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v91;
  if (v91)
  {
    v12 = (unint64_t *)&v91->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v90;
  if (v90)
  {
    v15 = (unint64_t *)&v90->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::difference((uint64_t)v100, (uint64_t)a3, &v105);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&v92, v100);
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v105, (AMCP::DAL::DAL_Time *)&v109))
  {
    v81 = v105;
    v82 = v106;
    v83 = v107;
    v84 = v108;
    if (v108)
    {
      v17 = (unint64_t *)&v108->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v85 = v109;
    v86 = v110;
    v87 = v111;
    v88 = v112;
    if (v112)
    {
      v19 = (unint64_t *)&v112->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    AMCP::DAL::Readable_Range::Readable_Range((uint64_t)v89, (uint64_t)&v81, (uint64_t)a3);
    AMCP::DAL::Ring_Buffer_Base::receive_data_mix(a1, (uint64_t)v89);
    v21 = v91;
    if (v91)
    {
      v22 = (unint64_t *)&v91->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v90;
    if (v90)
    {
      v25 = (unint64_t *)&v90->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = v88;
    if (v88)
    {
      v28 = (unint64_t *)&v88->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v30 = v84;
    if (v84)
    {
      v31 = (unint64_t *)&v84->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v92, (AMCP::DAL::DAL_Time *)&v96))
  {
    v73 = v92;
    v74 = v93;
    v75 = v94;
    v76 = v95;
    if (v95)
    {
      v33 = (unint64_t *)&v95->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    v77 = v96;
    v78 = v97;
    v79 = v98;
    v80 = v99;
    if (v99)
    {
      v35 = (unint64_t *)&v99->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    AMCP::DAL::Readable_Range::Readable_Range((uint64_t)v89, (uint64_t)&v73, (uint64_t)a3);
    AMCP::DAL::Ring_Buffer_Base::receive_data_write(a1, (uint64_t)v89);
    v37 = v91;
    if (v91)
    {
      v38 = (unint64_t *)&v91->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = v90;
    if (v90)
    {
      v41 = (unint64_t *)&v90->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = v80;
    if (v80)
    {
      v44 = (unint64_t *)&v80->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = v76;
    if (v76)
    {
      v47 = (unint64_t *)&v76->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
  }
  v49 = v99;
  if (v99)
  {
    v50 = (unint64_t *)&v99->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = v95;
  if (v95)
  {
    v53 = (unint64_t *)&v95->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v104;
  if (v104)
  {
    v56 = (unint64_t *)&v104->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = v103;
  if (v103)
  {
    v59 = (unint64_t *)&v103->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = v102;
  if (v102)
  {
    v62 = (unint64_t *)&v102->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = v101;
  if (v101)
  {
    v65 = (unint64_t *)&v101->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v112;
  if (v112)
  {
    v68 = (unint64_t *)&v112->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = v108;
  if (v108)
  {
    v71 = (unint64_t *)&v108->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
}

void sub_1B5B97734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;
  uint64_t v52;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v51 + 64);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v51 + 24);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
  std::pair<caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>,caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>>::~pair((uint64_t)&a51);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v52 - 48);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v52 - 88);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Mixing_Ring_Buffer::receive_data_at_range(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  _QWORD v67[4];
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  _BYTE v70[32];
  std::__shared_weak_count *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  __int128 v74[2];
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;

  (*(void (**)(_QWORD *__return_ptr))(*a1 + 64))(v67);
  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::intersection((uint64_t)v74, a4, v67);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&v79, v74);
  v7 = v76;
  if (v76)
  {
    p_shared_owners = (unint64_t *)&v76->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v75;
  if (v75)
  {
    v11 = (unint64_t *)&v75->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v69;
  if (v69)
  {
    v14 = (unint64_t *)&v69->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v68;
  if (v68)
  {
    v17 = (unint64_t *)&v68->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::difference((uint64_t)v74, (uint64_t)a4, &v79);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)v70, v74);
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v79, (AMCP::DAL::DAL_Time *)&v83))
  {
    v59 = v79;
    v60 = v80;
    v61 = v81;
    v62 = v82;
    if (v82)
    {
      v19 = (unint64_t *)&v82->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v63 = v83;
    v64 = v84;
    v65 = v85;
    v66 = v86;
    if (v86)
    {
      v21 = (unint64_t *)&v86->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    AMCP::DAL::Readable_Range::Readable_Range((uint64_t)v67, (uint64_t)&v59, a3);
    AMCP::DAL::Ring_Buffer_Base::receive_data_mix(a1, (uint64_t)v67);
    v23 = v69;
    if (v69)
    {
      v24 = (unint64_t *)&v69->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = v68;
    if (v68)
    {
      v27 = (unint64_t *)&v68->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = v66;
    if (v66)
    {
      v30 = (unint64_t *)&v66->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = v62;
    if (v62)
    {
      v33 = (unint64_t *)&v62->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)v70, (AMCP::DAL::DAL_Time *)&v72))
    AMCP::DAL::Ring_Buffer_Base::receive_data_write_at_range(a1, a3, a4);
  v35 = v73;
  if (v73)
  {
    v36 = (unint64_t *)&v73->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v71;
  if (v71)
  {
    v39 = (unint64_t *)&v71->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v78;
  if (v78)
  {
    v42 = (unint64_t *)&v78->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v77;
  if (v77)
  {
    v45 = (unint64_t *)&v77->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = v76;
  if (v76)
  {
    v48 = (unint64_t *)&v76->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v75;
  if (v75)
  {
    v51 = (unint64_t *)&v75->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v86;
  if (v86)
  {
    v54 = (unint64_t *)&v86->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v82;
  if (v82)
  {
    v57 = (unint64_t *)&v82->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
}

void sub_1B5B97CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;
  uint64_t v42;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v41 + 64);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v41 + 24);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  std::pair<caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>,caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>>::~pair((uint64_t)&a41);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v42 - 64);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v42 - 104);
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Mixing_Ring_Buffer::get_allowed_read_range(AMCP::DAL::Mixing_Ring_Buffer *this)
{
  return (*(uint64_t (**)(AMCP::DAL::Mixing_Ring_Buffer *))(*(_QWORD *)this + 64))(this);
}

caulk::rt_safe_memory_resource *AMCP::DAL::Mixing_Ring_Buffer::get_direct_write_ranges@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t i;
  __int128 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __n128 v30;
  _OWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  uint64_t v40;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  AMCP::DAL::Ring_Buffer_Base::translate_range(a1, a2);
  v5 = v39;
  for (i = v40; v5 != i; v5 += 96)
  {
    v7 = *(_OWORD *)(v5 + 16);
    v31[0] = *(_OWORD *)v5;
    v8 = *(_QWORD *)(v5 + 40);
    v32 = *(_QWORD *)(v5 + 32);
    v31[1] = v7;
    v9 = *(std::__shared_weak_count **)(v5 + 48);
    v33 = v8;
    v34 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v12 = *(_OWORD *)(v5 + 56);
    v13 = *(_QWORD *)(v5 + 80);
    v36 = *(_QWORD *)(v5 + 72);
    v35 = v12;
    v14 = *(std::__shared_weak_count **)(v5 + 88);
    v37 = v13;
    v38 = v14;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v17 = *(_QWORD *)(a1 + 96);
    v30.n128_u64[0] = *(_QWORD *)(a1 + 88);
    v30.n128_u64[1] = v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    std::vector<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>,caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>::emplace_back<AMCP::DAL::Buffer_Time_Translator::Translation_Range&,AMCP::DAL::Container>(a3, (uint64_t)v31, &v30);
    v20 = (std::__shared_weak_count *)v30.n128_u64[1];
    if (v30.n128_u64[1])
    {
      v21 = (unint64_t *)(v30.n128_u64[1] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = v38;
    if (v38)
    {
      v24 = (unint64_t *)&v38->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = v34;
    if (v34)
    {
      v27 = (unint64_t *)&v34->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  *(_QWORD *)&v31[0] = &v39;
  return std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)v31);
}

void sub_1B5B97F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::vector<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>,caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)va);
  _Unwind_Resume(a1);
}

void caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::difference(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  __int128 *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  _OWORD *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v6 = (_QWORD *)(a1 + 64);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v7 = (_QWORD *)(a1 + 24);
  std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100]((_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32));
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v8 = (__int128 *)(a1 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](v6, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72));
  caulk::make_empty_time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>((uint64_t)&v80, a2);
  *(_OWORD *)(a1 + 80) = v80;
  *(_QWORD *)(a1 + 96) = v81;
  v79 = a1 + 104;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](a1 + 104, &v82);
  *(_OWORD *)(a1 + 120) = v83;
  *(_QWORD *)(a1 + 136) = v84;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](a1 + 144, &v85);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
  if (*((_QWORD *)&v85 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (__int128 *)(a3 + 5);
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a3, (AMCP::DAL::DAL_Time *)(a3 + 5))
    && caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::intersects((_QWORD *)a2, a3))
  {
    v77 = (_OWORD *)(a1 + 80);
    v78 = (_OWORD *)(a1 + 120);
    if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a2, (AMCP::DAL::DAL_Time *)a3))
    {
      if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a3 + 5), (AMCP::DAL::DAL_Time *)(a2 + 40)))
      {
        v80 = *(_OWORD *)a2;
        v16 = *(_QWORD *)(a2 + 24);
        v81 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)&v82 = v16;
        v17 = *(_QWORD *)(a2 + 32);
        *((_QWORD *)&v82 + 1) = v17;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        v83 = *(_OWORD *)a3;
        v20 = a3[3];
        v84 = a3[2];
        *(_QWORD *)&v85 = v20;
        v21 = a3[4];
        *((_QWORD *)&v85 + 1) = v21;
        if (v21)
        {
          v22 = (unint64_t *)(v21 + 8);
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        *(_OWORD *)a1 = v80;
        *(_QWORD *)(a1 + 16) = v81;
        std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)v7, &v82);
        *v8 = v83;
        *(_QWORD *)(a1 + 56) = v84;
        std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)v6, &v85);
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
        if (*((_QWORD *)&v85 + 1))
        {
          v25 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v27 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
        if (*((_QWORD *)&v82 + 1))
        {
          v28 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v80 = *v15;
        v31 = a3[8];
        v30 = a3[9];
        v81 = a3[7];
        *(_QWORD *)&v82 = v31;
        *((_QWORD *)&v82 + 1) = v30;
        if (v30)
        {
          v32 = (unint64_t *)(v30 + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        v83 = *(_OWORD *)(a2 + 40);
        v35 = *(_QWORD *)(a2 + 64);
        v34 = *(_QWORD *)(a2 + 72);
        v84 = *(_QWORD *)(a2 + 56);
        *(_QWORD *)&v85 = v35;
        *((_QWORD *)&v85 + 1) = v34;
        if (v34)
        {
          v36 = (unint64_t *)(v34 + 8);
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        *v77 = v80;
        *(_QWORD *)(a1 + 96) = v81;
        std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v79, &v82);
        *v78 = v83;
        *(_QWORD *)(a1 + 136) = v84;
        std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](a1 + 144, &v85);
        v38 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
        if (*((_QWORD *)&v85 + 1))
        {
          v39 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        v41 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
        if (!*((_QWORD *)&v82 + 1))
          goto LABEL_79;
        v42 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (v43)
          goto LABEL_79;
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        v44 = v41;
        goto LABEL_78;
      }
      v80 = *(_OWORD *)a2;
      v59 = *(_QWORD *)(a2 + 24);
      v81 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)&v82 = v59;
      v60 = *(_QWORD *)(a2 + 32);
      *((_QWORD *)&v82 + 1) = v60;
      if (v60)
      {
        v61 = (unint64_t *)(v60 + 8);
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
      v83 = *(_OWORD *)a3;
      v63 = a3[3];
      v84 = a3[2];
      *(_QWORD *)&v85 = v63;
      v64 = a3[4];
      *((_QWORD *)&v85 + 1) = v64;
      if (v64)
      {
        v65 = (unint64_t *)(v64 + 8);
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
      }
      *(_OWORD *)a1 = v80;
      *(_QWORD *)(a1 + 16) = v81;
      std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)v7, &v82);
      *v8 = v83;
      *(_QWORD *)(a1 + 56) = v84;
      std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)v6, &v85);
      v67 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
      if (*((_QWORD *)&v85 + 1))
      {
        v68 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v56 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
      if (!*((_QWORD *)&v82 + 1))
        goto LABEL_79;
      v70 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
      do
        v58 = __ldaxr(v70);
      while (__stlxr(v58 - 1, v70));
    }
    else
    {
      v80 = *v15;
      v46 = a3[8];
      v45 = a3[9];
      v81 = a3[7];
      *(_QWORD *)&v82 = v46;
      *((_QWORD *)&v82 + 1) = v45;
      if (v45)
      {
        v47 = (unint64_t *)(v45 + 8);
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      v83 = *v8;
      v50 = *(_QWORD *)(a1 + 64);
      v49 = *(_QWORD *)(a1 + 72);
      v84 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)&v85 = v50;
      *((_QWORD *)&v85 + 1) = v49;
      if (v49)
      {
        v51 = (unint64_t *)(v49 + 8);
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      *(_OWORD *)a1 = v80;
      *(_QWORD *)(a1 + 16) = v81;
      std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)v7, &v82);
      *v8 = v83;
      *(_QWORD *)(a1 + 56) = v84;
      std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)v6, &v85);
      v53 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
      if (*((_QWORD *)&v85 + 1))
      {
        v54 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      v56 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
      if (!*((_QWORD *)&v82 + 1))
        goto LABEL_79;
      v57 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
    }
    if (v58)
      goto LABEL_79;
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    v44 = v56;
LABEL_78:
    std::__shared_weak_count::__release_weak(v44);
LABEL_79:
    if (!AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a1, (AMCP::DAL::DAL_Time *)(a1 + 40)))
    {
      *(_DWORD *)a1 = *(_DWORD *)(a1 + 80);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a1 + 88);
      std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](v7, *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112));
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 120);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a1 + 128);
      std::shared_ptr<HALS_UCRemotePlugIn>::operator=[abi:ne180100](v6, *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152));
      caulk::make_empty_time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>((uint64_t)&v80, a2);
      *v77 = v80;
      *(_QWORD *)(a1 + 96) = v81;
      std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v79, &v82);
      *v78 = v83;
      *(_QWORD *)(a1 + 136) = v84;
      std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](a1 + 144, &v85);
      v71 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
      if (*((_QWORD *)&v85 + 1))
      {
        v72 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      v74 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
      if (*((_QWORD *)&v82 + 1))
      {
        v75 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
    }
  }
}

void sub_1B5B986A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::pair<caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>,caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>>::~pair(v1);
  _Unwind_Resume(a1);
}

void sub_1B5B987AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>,caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>>::~pair(uint64_t a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 144);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 104);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 64);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 24);
  return a1;
}

void caulk::make_empty_time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(std::__shared_weak_count **)(a2 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 24);
    v7 = *(std::__shared_weak_count **)(a2 + 32);
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    *(_DWORD *)a1 = 2;
    *(_QWORD *)(a1 + 12) = 0;
    *(_QWORD *)(a1 + 4) = 0;
    *(_DWORD *)(a1 + 20) = 0;
    v10 = (unint64_t *)&v3->__shared_owners_;
    *(_QWORD *)(a1 + 24) = v2;
    *(_QWORD *)(a1 + 32) = v3;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    *(_DWORD *)(a1 + 40) = 2;
    *(_QWORD *)(a1 + 52) = 0;
    *(_QWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 60) = 0;
    *(_QWORD *)(a1 + 64) = v6;
    *(_QWORD *)(a1 + 72) = v7;
    if (v7)
    {
      v12 = (unint64_t *)&v7->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    *(_DWORD *)a1 = 2;
    *(_QWORD *)(a1 + 12) = 0;
    *(_QWORD *)(a1 + 4) = 0;
    *(_DWORD *)(a1 + 20) = 0;
    *(_QWORD *)(a1 + 24) = v2;
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 2;
    *(_QWORD *)(a1 + 52) = 0;
    *(_QWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 60) = 0;
    *(_QWORD *)(a1 + 64) = v2;
    *(_QWORD *)(a1 + 72) = 0;
  }
}

BOOL caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::intersects(_QWORD *a1, _QWORD *a2)
{
  _BOOL8 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE v10[32];
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::intersection((uint64_t)v10, a1, a2);
  v2 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)v10, (AMCP::DAL::DAL_Time *)&v12);
  v3 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v2;
}

void sub_1B5B989FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1 + 64);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v1 + 24);
  _Unwind_Resume(a1);
}

void KaiserWindow::KaiserWindow(KaiserWindow *this, int a2, double a3)
{
  _DWORD *v6;
  uint64_t v7;
  char *v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;

  v6 = 0;
  *(_DWORD *)this = a2;
  *((double *)this + 1) = a3;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  v7 = (a2 + 1);
  if (a2 != -1)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100]((_QWORD *)this + 2, (a2 + 1));
    v8 = (char *)*((_QWORD *)this + 3);
    bzero(v8, 4 * v7);
    *((_QWORD *)this + 3) = &v8[4 * v7];
    v6 = (_DWORD *)*((_QWORD *)this + 2);
  }
  if (a3 >= 50.0)
  {
    v9 = (a3 + -8.7) * 0.1102;
  }
  else
  {
    v9 = 0.0;
    if (a3 > 21.0)
      v9 = (a3 + -21.0) * 0.07886 + pow(a3 + -21.0, 0.4) * 0.5842;
  }
  bessi0(v9);
  if (a2)
  {
    v11 = 0;
    v12 = 1.0 / v10;
    do
    {
      bessi0(v9* sqrt(1.0- ((double)v11 - (double)((a2 - 1) >> 1))/ (double)((a2 - 1) >> 1)* (((double)v11 - (double)((a2 - 1) >> 1))/ (double)((a2 - 1) >> 1))));
      *(float *)&v13 = v12 * v13;
      v6[++v11] = LODWORD(v13);
    }
    while (a2 != v11);
  }
  *v6 = 0;
}

void sub_1B5B98B78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<KaiserWindow>,std::reverse_iterator<KaiserWindow*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 + 16);
      if (v5)
      {
        *(_QWORD *)(v3 + 24) = v5;
        operator delete(v5);
      }
      v3 += 40;
    }
  }
  return a1;
}

void bessi0(double a1)
{
  double v1;

  v1 = fabs(a1);
  if (v1 >= 3.75)
    exp(v1);
}

void AMCP::DAL::STLI_Resampler::~STLI_Resampler(AMCP::DAL::STLI_Resampler *this)
{
  void **v1;

  v1 = (void **)((char *)this + 96);
  std::vector<std::unique_ptr<ShortTermLinearInterpolationResampler>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;

  v1 = (void **)((char *)this + 96);
  std::vector<std::unique_ptr<ShortTermLinearInterpolationResampler>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x1B5E50688);
}

double AMCP::DAL::STLI_Resampler::process(uint64_t a1, _QWORD *a2, uint64_t *a3, _QWORD *a4, double a5, double a6, double a7)
{
  unsigned __int8 *v14;
  double v15;
  double v16;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  int v20;
  AMCP::Log::Scope_Registry *v21;
  AMCP::Log::Scope_Registry *v22;
  unint64_t v23;
  AMCP::DAL::PCM_Data_Handler *v24;
  AMCP::Log::Scope_Registry *v25;
  uint64_t v26;
  int v27;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  AMCP::Log::Scope_Registry *v35;
  int v36;
  AMCP::Log::Scope_Registry *v37;
  int v38;
  NSObject *v39;
  _opaque_pthread_t *v40;
  mach_port_t v41;
  char *v42;
  void *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  AMCP::Log::Scope_Registry *v51;
  int v52;
  AMCP::Log::Scope_Registry *v53;
  int v54;
  NSObject *v56;
  _opaque_pthread_t *v57;
  mach_port_t v58;
  void *v59;
  NSObject *v60;
  _opaque_pthread_t *v61;
  mach_port_t v62;
  void *v63;
  NSObject *v64;
  _opaque_pthread_t *v65;
  mach_port_t v66;
  char *v67;
  void *v68;
  char *v69;
  NSObject *v70;
  _opaque_pthread_t *v71;
  mach_port_t v72;
  char *v73;
  void *v74;
  char *v75;
  NSObject *v76;
  _opaque_pthread_t *v77;
  mach_port_t v78;
  void *exception;
  NSObject *v80;
  _opaque_pthread_t *v81;
  mach_port_t v82;
  void *v83;
  NSObject *v84;
  _opaque_pthread_t *v85;
  mach_port_t v86;
  void *v87;
  NSObject *v88;
  _opaque_pthread_t *v89;
  mach_port_t v90;
  char *v91;
  void *v92;
  char *v93;
  unint64_t v94;
  char v95;
  unsigned int v96;
  unsigned int v97;
  std::logic_error v98;
  std::string::size_type v99;
  std::logic_error v100;
  std::string v101;
  uint64_t (**v102)();
  std::string v103;
  std::string v104;
  std::logic_error v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  NSObject **buf;
  __int16 v112;
  char *v113;
  __int16 v114;
  int v115;
  __int16 v116;
  _BYTE v117[22];
  int v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 96) == *(_QWORD *)(a1 + 104))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v76 = *buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
    {
      v77 = pthread_self();
      v78 = pthread_mach_thread_np(v77);
      LODWORD(buf) = 67109890;
      HIDWORD(buf) = v78;
      v112 = 2080;
      v113 = "STLI_Resampler.cpp";
      v114 = 1024;
      v115 = 37;
      v116 = 2080;
      *(_QWORD *)v117 = "not (not m_resamplers.empty())";
      _os_log_error_impl(&dword_1B57BA000, v76, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v100);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v104);
    std::logic_error::logic_error(&v98, &v104);
    v98.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v105, &v98);
    v108 = 0;
    v109 = 0;
    v110 = -1;
    v105.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v106 = &unk_1E69A1230;
    v107 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v105);
    *(_QWORD *)&v117[6] = "virtual Sample_Time_Range AMCP::DAL::STLI_Resampler::process(const Sample_Group<float> &, Samp"
                          "le_Time, Container, Sample_Time_Range, const DAL_Settings &)";
    *(_QWORD *)&v117[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/STLI_Resampler.cpp";
    v118 = 37;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v101.__r_.__value_.__l.__data_);
    v102 = off_1E69A20A0;
    v103 = v101;
    memset(&v101, 0, sizeof(v101));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v102);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)&buf);
  }
  if (*a2 == a2[1])
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v80 = *buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
    {
      v81 = pthread_self();
      v82 = pthread_mach_thread_np(v81);
      LODWORD(buf) = 67109890;
      HIDWORD(buf) = v82;
      v112 = 2080;
      v113 = "STLI_Resampler.cpp";
      v114 = 1024;
      v115 = 38;
      v116 = 2080;
      *(_QWORD *)v117 = "not (not source.empty())";
      _os_log_error_impl(&dword_1B57BA000, v80, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v100);
    v83 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v104);
    std::logic_error::logic_error(&v98, &v104);
    v98.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v105, &v98);
    v108 = 0;
    v109 = 0;
    v110 = -1;
    v105.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v106 = &unk_1E69A1230;
    v107 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v105);
    *(_QWORD *)&v117[6] = "virtual Sample_Time_Range AMCP::DAL::STLI_Resampler::process(const Sample_Group<float> &, Samp"
                          "le_Time, Container, Sample_Time_Range, const DAL_Settings &)";
    *(_QWORD *)&v117[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/STLI_Resampler.cpp";
    v118 = 38;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v101.__r_.__value_.__l.__data_);
    v102 = off_1E69A20A0;
    v103 = v101;
    memset(&v101, 0, sizeof(v101));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v102);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v83, (uint64_t)&buf);
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "scale ratio");
  v14 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a4, (unsigned __int8 *)&buf);
  if (v14)
    v15 = AMCP::Thing::convert_to<double>((uint64_t)(v14 + 40));
  else
    v15 = 1.0;
  if (SHIBYTE(v115) < 0)
    operator delete(buf);
  v16 = a7 - a6;
  v17 = *(uint64_t **)(a1 + 96);
  v18 = *(uint64_t **)(a1 + 104);
  if (v17 != v18)
  {
    v19 = vcvtmd_s64_f64(v16);
    v20 = vcvtmd_s64_f64(a5);
    do
    {
      ShortTermLinearInterpolationResampler::SetRate(*v17, v15);
      if (*(_DWORD *)(a1 + 88) == 1)
      {
        LODWORD(buf) = v20;
        LODWORD(v105.__vftable) = 100 * v20;
        v21 = ShortTermLinearInterpolationResampler::PreFlight(**(ShortTermLinearInterpolationResampler ***)(a1 + 96), (unsigned int *)&buf, (unsigned int *)&v105);
        if (!LODWORD(v105.__vftable))
        {
          AMCP::Log::Scope_Registry::get(v21);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
          v56 = *buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
          if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
          {
            v57 = pthread_self();
            v58 = pthread_mach_thread_np(v57);
            LODWORD(buf) = 67109890;
            HIDWORD(buf) = v58;
            v112 = 2080;
            v113 = "STLI_Resampler.cpp";
            v114 = 1024;
            v115 = 50;
            v116 = 2080;
            *(_QWORD *)v117 = "not (output_length > 0)";
            _os_log_error_impl(&dword_1B57BA000, v56, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v100);
          v59 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v104);
          std::logic_error::logic_error(&v98, &v104);
          v98.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error(&v105, &v98);
          v108 = 0;
          v109 = 0;
          v110 = -1;
          v105.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
          v106 = &unk_1E69A1230;
          v107 = 0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v105);
          *(_QWORD *)&v117[6] = "virtual Sample_Time_Range AMCP::DAL::STLI_Resampler::process(const Sample_Group<float> &"
                                ", Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
          *(_QWORD *)&v117[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/STLI_Resampler.cpp";
          v118 = 50;
          applesauce::backtrace::snapshot_N<64>::snapshot_N(&v101.__r_.__value_.__l.__data_);
          v102 = off_1E69A20A0;
          v103 = v101;
          memset(&v101, 0, sizeof(v101));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v102);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v59, (uint64_t)&buf);
        }
        v16 = (double)LODWORD(v105.__vftable);
      }
      else
      {
        LODWORD(buf) = v19;
        LODWORD(v105.__vftable) = 100 * v19;
        v22 = ShortTermLinearInterpolationResampler::PreFlight(**(ShortTermLinearInterpolationResampler ***)(a1 + 96), (unsigned int *)&v105, (unsigned int *)&buf);
        LODWORD(v23) = v105.__vftable;
        if (vabdd_f64((double)v23, a5) > 1.0)
        {
          AMCP::Log::Scope_Registry::get(v22);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
          v60 = *buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
          if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
          {
            v61 = pthread_self();
            v62 = pthread_mach_thread_np(v61);
            LODWORD(buf) = 67109890;
            HIDWORD(buf) = v62;
            v112 = 2080;
            v113 = "STLI_Resampler.cpp";
            v114 = 1024;
            v115 = 56;
            v116 = 2080;
            *(_QWORD *)v117 = "not (std::abs(static_cast<double>(actual_input_consumed) - number_of_samples.get_double()) <= 1.0)";
            _os_log_error_impl(&dword_1B57BA000, v60, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v100);
          v63 = __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v104);
          std::logic_error::logic_error(&v98, &v104);
          v98.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error(&v105, &v98);
          v108 = 0;
          v109 = 0;
          v110 = -1;
          v105.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
          v106 = &unk_1E69A1230;
          v107 = 0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v105);
          *(_QWORD *)&v117[6] = "virtual Sample_Time_Range AMCP::DAL::STLI_Resampler::process(const Sample_Group<float> &"
                                ", Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
          *(_QWORD *)&v117[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/STLI_Resampler.cpp";
          v118 = 56;
          applesauce::backtrace::snapshot_N<64>::snapshot_N(&v101.__r_.__value_.__l.__data_);
          v102 = off_1E69A20A0;
          v103 = v101;
          memset(&v101, 0, sizeof(v101));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v102);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v63, (uint64_t)&buf);
        }
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v24 = (AMCP::DAL::PCM_Data_Handler *)*a3;
  AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>(*a3);
  AMCP::DAL::PCM_Data_Handler::get_other_data<float>((unint64_t *)&v104, v24, a6, a6 + v16);
  v26 = *a3;
  if (*a3)
  {
    v27 = *(_DWORD *)(v26 + 20);
    LODWORD(v26) = *(_DWORD *)(v26 + 36);
  }
  else
  {
    LOBYTE(v27) = 0;
  }
  if ((v27 & 0x20) != 0)
    v28 = 1;
  else
    v28 = v26;
  v29 = a2[1] - *a2;
  if (v29 >> 4 != (uint64_t)(v104.__r_.__value_.__l.__size_ - v104.__r_.__value_.__r.__words[0]) >> 4)
  {
    AMCP::Log::Scope_Registry::get(v25);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v84 = *buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
    {
      v85 = pthread_self();
      v86 = pthread_mach_thread_np(v85);
      LODWORD(buf) = 67109890;
      HIDWORD(buf) = v86;
      v112 = 2080;
      v113 = "STLI_Resampler.cpp";
      v114 = 1024;
      v115 = 65;
      v116 = 2080;
      *(_QWORD *)v117 = "not (stream_count == dest.size())";
      _os_log_error_impl(&dword_1B57BA000, v84, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v97);
    v87 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v101);
    std::logic_error::logic_error(&v100, &v101);
    v100.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v105, &v100);
    v108 = 0;
    v109 = 0;
    v110 = -1;
    v105.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v106 = &unk_1E69A1230;
    v107 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v105);
    *(_QWORD *)&v117[6] = "virtual Sample_Time_Range AMCP::DAL::STLI_Resampler::process(const Sample_Group<float> &, Samp"
                          "le_Time, Container, Sample_Time_Range, const DAL_Settings &)";
    *(_QWORD *)&v117[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/STLI_Resampler.cpp";
    v118 = 65;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v98);
    v102 = off_1E69A20A0;
    *(std::logic_error *)&v103.__r_.__value_.__l.__data_ = v98;
    v103.__r_.__value_.__r.__words[2] = v99;
    v98.__vftable = 0;
    v98.__imp_.__imp_ = 0;
    v99 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v102);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v87, (uint64_t)&buf);
  }
  if ((*(_BYTE *)(a1 + 60) & 0x20) != 0)
  {
    v94 = v29 >> 4;
    if ((unint64_t)v29 >= 0x20)
    {
      v45 = 0;
      v46 = 0;
      v47 = vcvtmd_s64_f64(a5);
      v48 = vcvtmd_s64_f64(v16);
      if (v94 >> 1 <= 1)
        v49 = 1;
      else
        v49 = v94 >> 1;
      do
      {
        v96 = v48;
        v97 = v47;
        v50 = *(_QWORD *)(a1 + 96);
        if (v46 >= (*(_QWORD *)(a1 + 104) - v50) >> 3)
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        v51 = (AMCP::Log::Scope_Registry *)ShortTermLinearInterpolationResampler::PushConvertFloat(*(ShortTermLinearInterpolationResampler **)(v50 + 8 * v46), *(float **)(*a2 + v45), *(float **)(*a2 + v45 + 16), *(float **)(v104.__r_.__value_.__r.__words[0] + v45), *(float **)(v104.__r_.__value_.__r.__words[0] + v45 + 16), &v97, &v96, v28, v28);
        v52 = (int)v51;
        if ((_DWORD)v51)
        {
          AMCP::Log::Scope_Registry::get(v51);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
          v70 = *buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
          if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
          {
            v71 = pthread_self();
            v72 = pthread_mach_thread_np(v71);
            v73 = strerror(v52);
            LODWORD(buf) = 67110146;
            HIDWORD(buf) = v72;
            v112 = 2080;
            v113 = "STLI_Resampler.cpp";
            v114 = 1024;
            v115 = 98;
            v116 = 2080;
            *(_QWORD *)v117 = "not (err == noErr)";
            *(_WORD *)&v117[8] = 2080;
            *(_QWORD *)&v117[10] = v73;
            _os_log_error_impl(&dword_1B57BA000, v70, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s err:%s while calling STLI PushConvertFloat", (uint8_t *)&buf, 0x2Cu);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v95);
          v74 = __cxa_allocate_exception(0x40uLL);
          v75 = strerror(v52);
          caulk::make_string((caulk *)"err:%s while calling STLI PushConvertFloat", (uint64_t)&v101, v75);
          std::logic_error::logic_error(&v100, &v101);
          v100.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error(&v105, &v100);
          v108 = 0;
          v109 = 0;
          v110 = -1;
          v105.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
          v106 = &unk_1E69A1230;
          v107 = 0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v105);
          *(_QWORD *)&v117[6] = "virtual Sample_Time_Range AMCP::DAL::STLI_Resampler::process(const Sample_Group<float> &"
                                ", Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
          *(_QWORD *)&v117[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/STLI_Resampler.cpp";
          v118 = 98;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v98);
          v102 = off_1E69A20A0;
          *(std::logic_error *)&v103.__r_.__value_.__l.__data_ = v98;
          v103.__r_.__value_.__r.__words[2] = v99;
          v98.__vftable = 0;
          v98.__imp_.__imp_ = 0;
          v99 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v102);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v74, (uint64_t)&buf);
        }
        ++v46;
        v45 += 16;
      }
      while (v49 != v46);
    }
    if ((v29 & 0x10) != 0)
    {
      v96 = vcvtmd_s64_f64(v16);
      v97 = vcvtmd_s64_f64(a5);
      v53 = (AMCP::Log::Scope_Registry *)ShortTermLinearInterpolationResampler::PushConvertFloat(*(ShortTermLinearInterpolationResampler **)(*(_QWORD *)(a1 + 104) - 8), *(float **)(*a2 + 16 * v94 - 16), 0, *(float **)(v104.__r_.__value_.__r.__words[0] + 16 * v94 - 16), 0, &v97, &v96, v28, v28);
      v54 = (int)v53;
      if ((_DWORD)v53)
      {
        AMCP::Log::Scope_Registry::get(v53);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
        v88 = *buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
        if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
        {
          v89 = pthread_self();
          v90 = pthread_mach_thread_np(v89);
          v91 = strerror(v54);
          LODWORD(buf) = 67110146;
          HIDWORD(buf) = v90;
          v112 = 2080;
          v113 = "STLI_Resampler.cpp";
          v114 = 1024;
          v115 = 108;
          v116 = 2080;
          *(_QWORD *)v117 = "not (err == noErr)";
          *(_WORD *)&v117[8] = 2080;
          *(_QWORD *)&v117[10] = v91;
          _os_log_error_impl(&dword_1B57BA000, v88, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s err:%s while calling STLI PushConvertFloat", (uint8_t *)&buf, 0x2Cu);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v95);
        v92 = __cxa_allocate_exception(0x40uLL);
        v93 = strerror(v54);
        caulk::make_string((caulk *)"err:%s while calling STLI PushConvertFloat", (uint64_t)&v101, v93);
        std::logic_error::logic_error(&v100, &v101);
        v100.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error(&v105, &v100);
        v108 = 0;
        v109 = 0;
        v110 = -1;
        v105.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
        v106 = &unk_1E69A1230;
        v107 = 0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v105);
        *(_QWORD *)&v117[6] = "virtual Sample_Time_Range AMCP::DAL::STLI_Resampler::process(const Sample_Group<float> &, "
                              "Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
        *(_QWORD *)&v117[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/STLI_Resampler.cpp";
        v118 = 108;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v98);
        v102 = off_1E69A20A0;
        *(std::logic_error *)&v103.__r_.__value_.__l.__data_ = v98;
        v103.__r_.__value_.__r.__words[2] = v99;
        v98.__vftable = 0;
        v98.__imp_.__imp_ = 0;
        v99 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v102);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v92, (uint64_t)&buf);
      }
    }
  }
  else
  {
    if (v28 >= 2)
    {
      v30 = 0;
      v31 = vcvtmd_s64_f64(a5);
      v32 = vcvtmd_s64_f64(v16);
      v33 = 4;
      do
      {
        v96 = v32;
        v97 = v31;
        v34 = *(_QWORD *)(a1 + 96);
        if (v30 >= (*(_QWORD *)(a1 + 104) - v34) >> 3)
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        v35 = (AMCP::Log::Scope_Registry *)ShortTermLinearInterpolationResampler::PushConvertFloat(*(ShortTermLinearInterpolationResampler **)(v34 + 8 * v30), (float *)(*(_QWORD *)*a2 + v33 - 4), (float *)(*(_QWORD *)*a2 + v33), *(float **)v104.__r_.__value_.__l.__data_, (float *)(*(_QWORD *)v104.__r_.__value_.__l.__data_ + v33), &v97, &v96, v28, v28);
        v36 = (int)v35;
        if ((_DWORD)v35)
        {
          AMCP::Log::Scope_Registry::get(v35);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
          v64 = *buf;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
          if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
          {
            v65 = pthread_self();
            v66 = pthread_mach_thread_np(v65);
            v67 = strerror(v36);
            LODWORD(buf) = 67110146;
            HIDWORD(buf) = v66;
            v112 = 2080;
            v113 = "STLI_Resampler.cpp";
            v114 = 1024;
            v115 = 76;
            v116 = 2080;
            *(_QWORD *)v117 = "not (err == noErr)";
            *(_WORD *)&v117[8] = 2080;
            *(_QWORD *)&v117[10] = v67;
            _os_log_error_impl(&dword_1B57BA000, v64, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s err:%s while calling STLI PushConvertFloat", (uint8_t *)&buf, 0x2Cu);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v95);
          v68 = __cxa_allocate_exception(0x40uLL);
          v69 = strerror(v36);
          caulk::make_string((caulk *)"err:%s while calling STLI PushConvertFloat", (uint64_t)&v101, v69);
          std::logic_error::logic_error(&v100, &v101);
          v100.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
          std::logic_error::logic_error(&v105, &v100);
          v108 = 0;
          v109 = 0;
          v110 = -1;
          v105.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
          v106 = &unk_1E69A1230;
          v107 = 0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v105);
          *(_QWORD *)&v117[6] = "virtual Sample_Time_Range AMCP::DAL::STLI_Resampler::process(const Sample_Group<float> &"
                                ", Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
          *(_QWORD *)&v117[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/STLI_Resampler.cpp";
          v118 = 76;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v98);
          v102 = off_1E69A20A0;
          *(std::logic_error *)&v103.__r_.__value_.__l.__data_ = v98;
          v103.__r_.__value_.__r.__words[2] = v99;
          v98.__vftable = 0;
          v98.__imp_.__imp_ = 0;
          v99 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v102);
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v68, (uint64_t)&buf);
        }
        ++v30;
        v33 += 8;
      }
      while (v28 >> 1 != v30);
    }
    if ((v28 & 1) != 0)
    {
      v96 = vcvtmd_s64_f64(v16);
      v97 = vcvtmd_s64_f64(a5);
      v37 = (AMCP::Log::Scope_Registry *)ShortTermLinearInterpolationResampler::PushConvertFloat(*(ShortTermLinearInterpolationResampler **)(*(_QWORD *)(a1 + 104) - 8), (float *)(*(_QWORD *)*a2 + 4 * (v28 - 1)), 0, (float *)(*(_QWORD *)v104.__r_.__value_.__l.__data_+ 4 * (v28 - 1)), 0, &v97, &v96, v28, v28);
      v38 = (int)v37;
      if ((_DWORD)v37)
      {
        AMCP::Log::Scope_Registry::get(v37);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
        v39 = *buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          v40 = pthread_self();
          v41 = pthread_mach_thread_np(v40);
          v42 = strerror(v38);
          LODWORD(buf) = 67110146;
          HIDWORD(buf) = v41;
          v112 = 2080;
          v113 = "STLI_Resampler.cpp";
          v114 = 1024;
          v115 = 86;
          v116 = 2080;
          *(_QWORD *)v117 = "not (err == noErr)";
          *(_WORD *)&v117[8] = 2080;
          *(_QWORD *)&v117[10] = v42;
          _os_log_error_impl(&dword_1B57BA000, v39, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s err:%s while calling STLI PushConvertFloat", (uint8_t *)&buf, 0x2Cu);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v95);
        v43 = __cxa_allocate_exception(0x40uLL);
        v44 = strerror(v38);
        caulk::make_string((caulk *)"err:%s while calling STLI PushConvertFloat", (uint64_t)&v101, v44);
        std::logic_error::logic_error(&v100, &v101);
        v100.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
        std::logic_error::logic_error(&v105, &v100);
        v108 = 0;
        v109 = 0;
        v110 = -1;
        v105.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
        v106 = &unk_1E69A1230;
        v107 = 0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v105);
        *(_QWORD *)&v117[6] = "virtual Sample_Time_Range AMCP::DAL::STLI_Resampler::process(const Sample_Group<float> &, "
                              "Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
        *(_QWORD *)&v117[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/STLI_Resampler.cpp";
        v118 = 86;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v98);
        v102 = off_1E69A20A0;
        *(std::logic_error *)&v103.__r_.__value_.__l.__data_ = v98;
        v103.__r_.__value_.__r.__words[2] = v99;
        v98.__vftable = 0;
        v98.__imp_.__imp_ = 0;
        v99 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)&buf, (uint64_t)&v102);
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v43, (uint64_t)&buf);
      }
    }
  }
  if (v104.__r_.__value_.__r.__words[0])
  {
    v104.__r_.__value_.__l.__size_ = v104.__r_.__value_.__r.__words[0];
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)v104.__r_.__value_.__l.__data_, (uint64_t)(v104.__r_.__value_.__r.__words[2] - v104.__r_.__value_.__r.__words[0]) >> 4);
  }
  return a6;
}

void sub_1B5B9A0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,caulk::rt_safe_memory_resource *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (a34)
  {
    *(_QWORD *)(v52 + 8) = a34;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](a34, (uint64_t)(*(_QWORD *)(v52 + 16) - (_QWORD)a34) >> 4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::DAL::STLI_Resampler::get_required_input_samples_for_output_samples(ShortTermLinearInterpolationResampler ***this, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;

  v4 = a2;
  v3 = 100 * a2;
  ShortTermLinearInterpolationResampler::PreFlight(*this[12], &v3, &v4);
  return v3;
}

uint64_t AMCP::DAL::STLI_Resampler::get_expected_output_samples_for_input_samples(ShortTermLinearInterpolationResampler ***this, unsigned int a2, unint64_t *a3)
{
  uint64_t result;
  unsigned int v5;
  unsigned int v6;

  v5 = 100 * a2;
  v6 = a2;
  ShortTermLinearInterpolationResampler::PreFlight(*this[12], &v6, &v5);
  result = v5;
  *a3 = v6;
  return result;
}

uint64_t AMCP::DAL::STLI_Resampler::get_latency(AMCP::DAL::STLI_Resampler *this)
{
  return 0;
}

void std::vector<std::unique_ptr<ShortTermLinearInterpolationResampler>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          MEMORY[0x1B5E50688](v6, 0x1000C40AC875A91);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void HALS_IOUAUCDriver::properties_changed_callback(HALS_IOUAUCDriver *this, void *a2, int *a3, void *a4)
{
  _BYTE *v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _opaque_pthread_t *v23;
  mach_port_t v24;
  void *exception;
  int v26;
  __int128 v28;
  uint64_t v29;
  uint64_t (**v30)();
  __int128 v31;
  uint64_t v32;
  std::runtime_error v33;
  std::runtime_error v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char v40;
  void *__p;
  __int128 v42;
  const char *v43;
  const char *v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (((_DWORD)a4 - 1) <= 1)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    v19 = (std::__shared_weak_count *)v42;
    v20 = *(NSObject **)__p;
    if ((_QWORD)v42)
    {
      v21 = (unint64_t *)(v42 + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v23 = pthread_self();
      v24 = pthread_mach_thread_np(v23);
      LODWORD(__p) = 67109634;
      HIDWORD(__p) = v24;
      LOWORD(v42) = 2080;
      *(_QWORD *)((char *)&v42 + 2) = "HALS_IOUAUCDriver.cpp";
      WORD5(v42) = 1024;
      HIDWORD(v42) = 622;
      _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: properties changed, bad size", (uint8_t *)&__p, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v33, "properties changed, bad size");
    std::runtime_error::runtime_error(&v34, &v33);
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = -1;
    v34.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v35 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v34);
    v43 = "static void HALS_IOUAUCDriver::properties_changed_callback(void *, IOReturn, void *, uint32_t)";
    v44 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v45 = 622;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v28);
    v30 = off_1E69A20A0;
    v31 = v28;
    v32 = v29;
    v28 = 0uLL;
    v29 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&__p, (uint64_t)&v30);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)&__p);
  }
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = a3 + 2;
  v26 = *a3;
  v9 = ((_DWORD)a4 - 2);
  __p = 0;
  v42 = 0uLL;
  do
  {
    v10 = *(_QWORD *)&v8[2 * v7];
    if ((unint64_t)v6 >= v5)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - v4) >> 2) + 1;
      if (v11 > 0x1555555555555555)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(v5 - (_QWORD)v4) >> 2) > v11)
        v11 = 0x5555555555555556 * ((uint64_t)(v5 - (_QWORD)v4) >> 2);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)v4) >> 2) >= 0xAAAAAAAAAAAAAAALL)
        v12 = 0x1555555555555555;
      else
        v12 = v11;
      if (v12)
        v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v12);
      else
        v13 = 0;
      v14 = v12 + 4 * (((char *)v6 - v4) >> 2);
      *(_DWORD *)v14 = v10;
      *(_QWORD *)(v14 + 4) = 1735159650;
      v15 = (_DWORD *)v14;
      while (v6 != (_DWORD *)v4)
      {
        v16 = *(_QWORD *)(v6 - 3);
        v6 -= 3;
        v17 = v6[2];
        *(_QWORD *)(v15 - 3) = v16;
        v15 -= 3;
        v15[2] = v17;
      }
      v5 = v12 + 12 * v13;
      v6 = (_DWORD *)(v14 + 12);
      __p = v15;
      *((_QWORD *)&v42 + 1) = v5;
      if (v4)
        operator delete(v4);
      v4 = v15;
    }
    else
    {
      *v6 = v10;
      *(_QWORD *)(v6 + 1) = 1735159650;
      v6 += 3;
    }
    *(_QWORD *)&v42 = v6;
    ++v7;
  }
  while (v7 != v9);
  v18 = *((_QWORD *)this + 86);
  if (v18)
  {
    LODWORD(v34.__vftable) = v26;
    (*(void (**)(uint64_t, std::runtime_error *, void **))(*(_QWORD *)v18 + 48))(v18, &v34, &__p);
  }
  if (__p)
  {
    *(_QWORD *)&v42 = __p;
    operator delete(__p);
  }
}

void sub_1B5B9ACE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, std::runtime_error a19, std::runtime_error a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,_QWORD *__p,__int128 a31,uint64_t a32)
{
  AMCP::Log::Scope_Registry *v33;
  std::__shared_weak_count *v34;
  NSObject *v35;
  unint64_t *v36;
  unint64_t v37;
  _opaque_pthread_t *v38;
  mach_port_t v39;

  if (a2)
  {
    if (__p)
    {
      *(_QWORD *)&a31 = __p;
      operator delete(__p);
    }
    v33 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v33);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    v34 = (std::__shared_weak_count *)a31;
    v35 = *__p;
    if ((_QWORD)a31)
    {
      v36 = (unint64_t *)(a31 + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      v38 = pthread_self();
      v39 = pthread_mach_thread_np(v38);
      LODWORD(__p) = 67109634;
      HIDWORD(__p) = v39;
      LOWORD(a31) = 2080;
      *(_QWORD *)((char *)&a31 + 2) = "HALS_IOUAUCDriver.cpp";
      WORD5(a31) = 1024;
      HIDWORD(a31) = 647;
      _os_log_error_impl(&dword_1B57BA000, v35, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception handling properties changed callback", (uint8_t *)&__p, 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B5B9AAECLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOUAUCDriver::request_config_change_callback(HALS_IOUAUCDriver *this, void *a2, uint64_t a3, void *a4)
{
  unsigned int v5;
  _QWORD *v7;
  const std::locale::facet *v8;
  AMCP::Log::Scope_Registry *v9;
  uint64_t result;
  std::runtime_error_vtbl *v11;
  uint64_t (**v12)();
  std::__shared_weak_count *v13;
  NSObject *v14;
  unint64_t *v15;
  unint64_t v16;
  _opaque_pthread_t *v17;
  mach_port_t v18;
  void *v19;
  NSObject *v20;
  _opaque_pthread_t *v21;
  mach_port_t v22;
  void *exception;
  __int128 v24;
  uint64_t v25;
  uint64_t (**v26)();
  __int128 v27;
  uint64_t v28;
  std::runtime_error v29;
  std::runtime_error v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  uint8_t buf[8];
  _BYTE v38[10];
  __int16 v39;
  int v40;
  __int16 v41;
  _BYTE v42[14];
  const char *v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (!this)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v20 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v21 = pthread_self();
      v22 = pthread_mach_thread_np(v21);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v22;
      *(_WORD *)v38 = 2080;
      *(_QWORD *)&v38[2] = "HALS_IOUAUCDriver.cpp";
      v39 = 1024;
      v40 = 663;
      v41 = 2080;
      *(_QWORD *)v42 = "(uc_driver) == nullptr";
      _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s UC driver is null", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v29, "UC driver is null");
    std::runtime_error::runtime_error(&v30, &v29);
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = -1;
    v30.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v31 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v30);
    *(_QWORD *)&v42[6] = "static void HALS_IOUAUCDriver::request_config_change_callback(void *, IOReturn, void *, uint32_t)";
    v43 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v44 = 663;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v24);
    v26 = off_1E69A20A0;
    v27 = v24;
    v28 = v25;
    v24 = 0uLL;
    v25 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v26);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v5 = a4;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"request config change: size ", 28);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)));
  v8 = std::locale::use_facet((const std::locale *)&v30, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale((std::locale *)&v30);
  std::ostream::put();
  v9 = (AMCP::Log::Scope_Registry *)std::ostream::flush();
  if (v5 <= 2)
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v13 = *(std::__shared_weak_count **)v38;
    v14 = **(NSObject ***)buf;
    if (*(_QWORD *)v38)
    {
      v15 = (unint64_t *)(*(_QWORD *)v38 + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v17 = pthread_self();
      v18 = pthread_mach_thread_np(v17);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v18;
      *(_WORD *)v38 = 2080;
      *(_QWORD *)&v38[2] = "HALS_IOUAUCDriver.cpp";
      v39 = 1024;
      v40 = 669;
      _os_log_error_impl(&dword_1B57BA000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Incorrect size for request config change", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
    v19 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v29, "Incorrect size for request config change");
    std::runtime_error::runtime_error(&v30, &v29);
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = -1;
    v30.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v31 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v30);
    *(_QWORD *)&v42[6] = "static void HALS_IOUAUCDriver::request_config_change_callback(void *, IOReturn, void *, uint32_t)";
    v43 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v44 = 669;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v24);
    v26 = off_1E69A20A0;
    v27 = v24;
    v28 = v25;
    v24 = 0uLL;
    v25 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v26);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v19, (uint64_t)buf);
  }
  result = *((_QWORD *)this + 90);
  if (result)
  {
    v11 = *(std::runtime_error_vtbl **)(a3 + 8);
    v12 = *(uint64_t (***)())(a3 + 16);
    LODWORD(v24) = *(_DWORD *)a3;
    v30.__vftable = v11;
    v26 = v12;
    return (*(uint64_t (**)(uint64_t, __int128 *, std::runtime_error *, uint64_t (***)()))(*(_QWORD *)result + 48))(result, &v24, &v30, &v26);
  }
  return result;
}

void sub_1B5B9B398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::locale a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,NSObject **buf,std::__shared_weak_count *a30,__int16 a31,__int16 a32,int a33,uint64_t a34)
{
  uint64_t v34;
  AMCP::Log::Scope_Registry *v35;
  std::__shared_weak_count *v36;
  NSObject *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  _opaque_pthread_t *v40;
  mach_port_t v41;

  if (a2)
  {
    v35 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v35);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v36 = a30;
    v37 = *buf;
    if (a30)
    {
      p_shared_owners = (unint64_t *)&a30->__shared_owners_;
      do
        v39 = __ldaxr(p_shared_owners);
      while (__stlxr(v39 - 1, p_shared_owners));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      v40 = pthread_self();
      v41 = pthread_mach_thread_np(v40);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v41;
      LOWORD(a30) = 2080;
      *(_QWORD *)(v34 + 10) = "HALS_IOUAUCDriver.cpp";
      a32 = 1024;
      a33 = 684;
      _os_log_error_impl(&dword_1B57BA000, v37, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception handling config change request", (uint8_t *)&buf, 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B5B9B020);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOUAUCDriver::abort_configuration_change(HALS_IOUAUCDriver *this, unsigned int a2, uint64_t a3, uint64_t a4)
{
  AMCP::Log::Scope_Registry *v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  unint64_t *v8;
  unint64_t v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  uint8_t buf[8];
  _BYTE v13[10];
  __int16 v14;
  int v15;
  __int16 v16;
  unsigned int v17;
  uint64_t input[4];

  input[3] = *MEMORY[0x1E0C80C00];
  input[0] = a2;
  input[1] = a3;
  input[2] = a4;
  v5 = (AMCP::Log::Scope_Registry *)IOConnectCallMethod((mach_port_t)this, 5u, input, 3u, 0, 0, 0, 0, 0, 0);
  if ((_DWORD)v5)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = *(std::__shared_weak_count **)v13;
    v7 = **(NSObject ***)buf;
    if (*(_QWORD *)v13)
    {
      v8 = (unint64_t *)(*(_QWORD *)v13 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v11;
      *(_WORD *)v13 = 2080;
      *(_QWORD *)&v13[2] = "HALS_IOUAUCDriver.cpp";
      v14 = 1024;
      v15 = 598;
      v16 = 1024;
      v17 = a2;
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Failed to abort configuration change for device id %u", buf, 0x1Eu);
    }
  }
}

void sub_1B5B9B7BC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t HALS_IOUAUCDriver::GetPropertySize(HALS_IOUAUCDriver *this, const AudioObjectPropertyAddress *a2, unsigned int a3, const void *inputStruct, size_t inputStructCnt)
{
  __int128 v7;
  uint64_t mElement;
  AMCP::Log::Scope_Registry *v9;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  std::string *p_p;
  void *exception;
  __int128 v16;
  uint64_t v17;
  uint64_t (**v18)();
  __int128 v19;
  uint64_t v20;
  std::runtime_error v21;
  std::string __p;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  uint32_t outputCnt;
  uint64_t output;
  uint8_t buf[8];
  __int16 v31;
  char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  _BYTE v36[14];
  const char *v37;
  int v38;
  uint64_t input;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v7 = *(_QWORD *)&a2->mSelector;
  *((_QWORD *)&v7 + 1) = HIDWORD(*(_QWORD *)&a2->mSelector);
  v40 = v7;
  mElement = a2->mElement;
  input = a3;
  v41 = mElement;
  output = 0;
  outputCnt = 1;
  v9 = (AMCP::Log::Scope_Registry *)IOConnectCallMethod((mach_port_t)this, 0xDu, &input, 4u, inputStruct, inputStructCnt, &output, &outputCnt, 0, 0);
  if ((_DWORD)v9)
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v11 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      caulk::string_from_4cc(&__p, a2->mSelector);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v13;
      v31 = 2080;
      v32 = "HALS_IOUAUCDriver.cpp";
      v33 = 1024;
      v34 = 237;
      v35 = 2080;
      *(_QWORD *)v36 = p_p;
      *(_WORD *)&v36[8] = 1024;
      *(_DWORD *)&v36[10] = a3;
      _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Failed to get property size %s, object id %u", buf, 0x28u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v21, "Failed to get property size");
    std::runtime_error::runtime_error((std::runtime_error *)&__p, &v21);
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = -1;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E69A1FB8;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(_QWORD *)&v36[6] = "size_t HALS_IOUAUCDriver::GetPropertySize(const AudioObjectPropertyAddress *, AudioObjectID, co"
                         "nst void *, size_t)";
    v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v38 = 237;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    v19 = v16;
    v20 = v17;
    v16 = 0uLL;
    v17 = 0;
    v18 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v18);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return output;
}

void sub_1B5B9BA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, std::runtime_error a18, std::runtime_error a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,__int16 a25,char a26,char a27,uint64_t a28,std::runtime_error a29,void *a30,uint64_t a31)
{
  void *v31;
  int v32;

  if (__p)
    operator delete(__p);
  if (a11)
    operator delete(a11);
  a30 = &unk_1E69A2000;
  if (a31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a31 + 32))(a31))
    a31 = 0;
  std::runtime_error::~runtime_error(&a29);
  a20 = &unk_1E69A2000;
  if (a21 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a21 + 32))(a21))
    a21 = 0;
  std::runtime_error::~runtime_error(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (v32)
    __cxa_free_exception(v31);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a27);
  _Unwind_Resume(a1);
}

AMCP::Log::Scope_Registry *HALS_IOUAUCDriver::GetPropertyData(HALS_IOUAUCDriver *this, const AudioObjectPropertyAddress *a2, unsigned int a3, const void *inputStruct, size_t inputStructCnt, void *outputStruct, unint64_t *a7)
{
  __int128 v10;
  uint64_t mElement;
  AMCP::Log::Scope_Registry *result;
  NSObject *v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  std::string *p_p;
  void *exception;
  __int128 v18;
  uint64_t v19;
  uint64_t (**v20)();
  __int128 v21;
  uint64_t v22;
  std::runtime_error v23;
  std::string __p;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  uint32_t outputCnt;
  uint64_t output;
  uint8_t buf[8];
  __int16 v33;
  char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  _BYTE v38[14];
  const char *v39;
  int v40;
  uint64_t input;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v10 = *(_QWORD *)&a2->mSelector;
  *((_QWORD *)&v10 + 1) = HIDWORD(*(_QWORD *)&a2->mSelector);
  v42 = v10;
  mElement = a2->mElement;
  input = a3;
  v43 = mElement;
  output = 0;
  outputCnt = 1;
  result = (AMCP::Log::Scope_Registry *)IOConnectCallMethod((mach_port_t)this, 0xEu, &input, 4u, inputStruct, inputStructCnt, &output, &outputCnt, outputStruct, a7);
  if ((_DWORD)result)
  {
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v13 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = pthread_self();
      v15 = pthread_mach_thread_np(v14);
      caulk::string_from_4cc(&__p, a2->mSelector);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v15;
      v33 = 2080;
      v34 = "HALS_IOUAUCDriver.cpp";
      v35 = 1024;
      v36 = 183;
      v37 = 2080;
      *(_QWORD *)v38 = p_p;
      *(_WORD *)&v38[8] = 1024;
      *(_DWORD *)&v38[10] = a3;
      _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Failed to get property data list size %s, object id %u", buf, 0x28u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v23, "Failed to get property data list size");
    std::runtime_error::runtime_error((std::runtime_error *)&__p, &v23);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E69A1FB8;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(_QWORD *)&v38[6] = "void HALS_IOUAUCDriver::GetPropertyData(const AudioObjectPropertyAddress *, AudioObjectID, cons"
                         "t void *, size_t, void *, size_t *)";
    v39 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v40 = 183;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v18);
    v21 = v18;
    v22 = v19;
    v18 = 0uLL;
    v19 = 0;
    v20 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v20);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  *a7 = output;
  return result;
}

void sub_1B5B9BDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, std::runtime_error a18, std::runtime_error a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,__int16 a25,char a26,char a27,uint64_t a28,std::runtime_error a29,void *a30,uint64_t a31)
{
  void *v31;
  int v32;

  if (__p)
    operator delete(__p);
  if (a11)
    operator delete(a11);
  a30 = &unk_1E69A2000;
  if (a31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a31 + 32))(a31))
    a31 = 0;
  std::runtime_error::~runtime_error(&a29);
  a20 = &unk_1E69A2000;
  if (a21 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a21 + 32))(a21))
    a21 = 0;
  std::runtime_error::~runtime_error(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (v32)
    __cxa_free_exception(v31);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a27);
  _Unwind_Resume(a1);
}

void HALS_IOUAUCDriver::SetPropertyData(HALS_IOUAUCDriver *this, const AudioObjectPropertyAddress *a2, unsigned int a3, const void *a4, size_t a5, const void *a6, size_t a7)
{
  __int128 v9;
  uint64_t mElement;
  size_t v13;
  _BOOL4 v14;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  AMCP::Log::Scope_Registry *v21;
  _BOOL8 v22;
  NSObject *v23;
  const char *v24;
  std::__shared_weak_count *v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  _opaque_pthread_t *v29;
  mach_port_t v30;
  AudioObjectPropertySelector mSelector;
  int v32;
  std::string *v33;
  void *exception;
  std::__shared_weak_count *v35;
  NSObject *v36;
  unint64_t *v37;
  unint64_t v38;
  _opaque_pthread_t *v39;
  mach_port_t v40;
  AudioObjectPropertySelector v41;
  int v42;
  std::string *v43;
  void *v44;
  __int128 v45;
  uint64_t v46;
  std::runtime_error v47;
  std::string v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char v53;
  char __s[8];
  __int128 v55;
  uint64_t v56;
  _BYTE buf[18];
  __int16 v58;
  int v59;
  __int16 v60;
  _BYTE v61[14];
  const char *v62;
  int v63;
  uint64_t input;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v9 = *(_QWORD *)&a2->mSelector;
  *((_QWORD *)&v9 + 1) = HIDWORD(*(_QWORD *)&a2->mSelector);
  v65 = v9;
  mElement = a2->mElement;
  input = a3;
  v66 = mElement;
  if (!a6)
  {
    v22 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
    if (!v22)
      goto LABEL_20;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "serialize_qualifier_and_data";
    v23 = MEMORY[0x1E0C81028];
    v24 = "%s: Cannot serialize, data is null\n";
LABEL_19:
    _os_log_impl(&dword_1B57BA000, v23, OS_LOG_TYPE_DEFAULT, v24, buf, 0xCu);
    goto LABEL_20;
  }
  if (!a7)
  {
    v22 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
    if (!v22)
      goto LABEL_20;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "serialize_qualifier_and_data";
    v23 = MEMORY[0x1E0C81028];
    v24 = "%s: Cannot serialize, data size is 0\n";
    goto LABEL_19;
  }
  v13 = a7 + a5 + 16;
  v14 = __CFADD__(a7, a5 + 16);
  if (a5 >= 0xFFFFFFFFFFFFFFF0 || v14)
  {
    v22 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
    if (v22)
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "serialize_qualifier_and_data";
      v23 = MEMORY[0x1E0C81028];
      v24 = "%s: Cannot serialize, data overflow\n";
      goto LABEL_19;
    }
LABEL_20:
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v22);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v25 = *(std::__shared_weak_count **)&buf[8];
    v26 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v27 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      v29 = pthread_self();
      v30 = pthread_mach_thread_np(v29);
      mSelector = a2->mSelector;
      v32 = bswap32(a2->mSelector);
      *(_DWORD *)&buf[1] = v32;
      if (((char)v32 - 32) > 0x5E
        || (((__int16)v32 >> 8) - 32) > 0x5E
        || ((v32 << 8 >> 24) - 32) > 0x5E
        || ((v32 >> 24) - 32) > 0x5E)
      {
        std::to_string(&v48, mSelector);
      }
      else
      {
        strcpy(&buf[5], "'");
        buf[0] = 39;
        std::string::basic_string[abi:ne180100]<0>(&v48, buf);
      }
      v33 = &v48;
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v33 = (std::string *)v48.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v30;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_IOUAUCDriver.cpp";
      v58 = 1024;
      v59 = 210;
      v60 = 2080;
      *(_QWORD *)v61 = v33;
      *(_WORD *)&v61[8] = 1024;
      *(_DWORD *)&v61[10] = a3;
      _os_log_error_impl(&dword_1B57BA000, v26, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Failed to serialze qualifier and data %s, object id %u", buf, 0x28u);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v53);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v47, "Failed to serialze qualifier and data");
    std::runtime_error::runtime_error((std::runtime_error *)&v48, &v47);
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = -1;
    v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E69A1FB8;
    v48.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v48);
    *(_QWORD *)&v61[6] = "void HALS_IOUAUCDriver::SetPropertyData(const AudioObjectPropertyAddress *, AudioObjectID, cons"
                         "t void *, size_t, const void *, size_t)";
    v62 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v63 = 210;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v45);
    *(_QWORD *)__s = off_1E69A20A0;
    v55 = v45;
    v56 = v46;
    v45 = 0uLL;
    v46 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)__s);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v18 = malloc_type_malloc(v13, 0xAF020572uLL);
  v19 = v18;
  *v18 = a5;
  v18[1] = a7;
  v20 = v18 + 2;
  if (a4 && a5)
    memcpy(v18 + 2, a4, a5);
  memcpy((char *)v20 + a5, a6, a7);
  v21 = (AMCP::Log::Scope_Registry *)IOConnectCallMethod(*((_DWORD *)this + 1), 0xFu, &input, 4u, v19, v13, 0, 0, 0, 0);
  if ((_DWORD)v21)
  {
    AMCP::Log::Scope_Registry::get(v21);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v35 = *(std::__shared_weak_count **)&buf[8];
    v36 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v37 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      v39 = pthread_self();
      v40 = pthread_mach_thread_np(v39);
      v41 = a2->mSelector;
      v42 = bswap32(a2->mSelector);
      *(_DWORD *)&__s[1] = v42;
      if (((char)v42 - 32) > 0x5E
        || (((__int16)v42 >> 8) - 32) > 0x5E
        || ((v42 << 8 >> 24) - 32) > 0x5E
        || ((v42 >> 24) - 32) > 0x5E)
      {
        std::to_string(&v48, v41);
      }
      else
      {
        strcpy(&__s[5], "'");
        __s[0] = 39;
        std::string::basic_string[abi:ne180100]<0>(&v48, __s);
      }
      v43 = &v48;
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v43 = (std::string *)v48.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v40;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_IOUAUCDriver.cpp";
      v58 = 1024;
      v59 = 216;
      v60 = 2080;
      *(_QWORD *)v61 = v43;
      *(_WORD *)&v61[8] = 1024;
      *(_DWORD *)&v61[10] = a3;
      _os_log_error_impl(&dword_1B57BA000, v36, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Failed to set property data %s, object id %u", buf, 0x28u);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v53);
    v44 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v47, "Failed to set property data");
    std::runtime_error::runtime_error((std::runtime_error *)&v48, &v47);
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = -1;
    v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E69A1FB8;
    v48.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v48);
    *(_QWORD *)&v61[6] = "void HALS_IOUAUCDriver::SetPropertyData(const AudioObjectPropertyAddress *, AudioObjectID, cons"
                         "t void *, size_t, const void *, size_t)";
    v62 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v63 = 216;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v45);
    *(_QWORD *)__s = off_1E69A20A0;
    v55 = v45;
    v56 = v46;
    v45 = 0uLL;
    v46 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)__s);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v44, (uint64_t)buf);
  }
  free(v19);
}

void sub_1B5B9C560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, std::runtime_error a15, std::runtime_error a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,std::runtime_error a30,uint64_t a31,uint64_t a32)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL HALS_IOUAUCDriver::GetHasProperty(HALS_IOUAUCDriver *this, const AudioObjectPropertyAddress *a2, unsigned int a3)
{
  __int128 v5;
  uint64_t mElement;
  AMCP::Log::Scope_Registry *v7;
  NSObject *v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  std::string *p_p;
  void *exception;
  __int128 v14;
  uint64_t v15;
  uint64_t (**v16)();
  __int128 v17;
  uint64_t v18;
  std::runtime_error v19;
  std::string __p;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint32_t outputCnt;
  uint64_t output;
  uint8_t buf[8];
  __int16 v29;
  char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  _BYTE v34[14];
  const char *v35;
  int v36;
  uint64_t input;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v5 = *(_QWORD *)&a2->mSelector;
  *((_QWORD *)&v5 + 1) = HIDWORD(*(_QWORD *)&a2->mSelector);
  v38 = v5;
  mElement = a2->mElement;
  input = a3;
  v39 = mElement;
  output = 0;
  outputCnt = 1;
  v7 = (AMCP::Log::Scope_Registry *)IOConnectCallMethod((mach_port_t)this, 0xBu, &input, 4u, 0, 0, &output, &outputCnt, 0, 0);
  if ((_DWORD)v7)
  {
    AMCP::Log::Scope_Registry::get(v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      caulk::string_from_4cc(&__p, a2->mSelector);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v11;
      v29 = 2080;
      v30 = "HALS_IOUAUCDriver.cpp";
      v31 = 1024;
      v32 = 260;
      v33 = 2080;
      *(_QWORD *)v34 = p_p;
      *(_WORD *)&v34[8] = 1024;
      *(_DWORD *)&v34[10] = a3;
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Failed to get has property %s, object id %u", buf, 0x28u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v19, "Failed to get has property");
    std::runtime_error::runtime_error((std::runtime_error *)&__p, &v19);
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = -1;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E69A1FB8;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(_QWORD *)&v34[6] = "BOOL HALS_IOUAUCDriver::GetHasProperty(const AudioObjectPropertyAddress *, AudioObjectID)";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v36 = 260;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    v17 = v14;
    v18 = v15;
    v14 = 0uLL;
    v15 = 0;
    v16 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v16);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return output != 0;
}

void sub_1B5B9C9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, std::runtime_error a18, std::runtime_error a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,__int16 a25,char a26,char a27,uint64_t a28,std::runtime_error a29,void *a30,uint64_t a31)
{
  void *v31;
  int v32;

  if (__p)
    operator delete(__p);
  if (a11)
    operator delete(a11);
  a30 = &unk_1E69A2000;
  if (a31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a31 + 32))(a31))
    a31 = 0;
  std::runtime_error::~runtime_error(&a29);
  a20 = &unk_1E69A2000;
  if (a21 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a21 + 32))(a21))
    a21 = 0;
  std::runtime_error::~runtime_error(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (v32)
    __cxa_free_exception(v31);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a27);
  _Unwind_Resume(a1);
}

BOOL HALS_IOUAUCDriver::GetIsPropertySettable(HALS_IOUAUCDriver *this, const AudioObjectPropertyAddress *a2, unsigned int a3)
{
  __int128 v5;
  uint64_t mElement;
  AMCP::Log::Scope_Registry *v7;
  NSObject *v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  std::string *p_p;
  void *exception;
  __int128 v14;
  uint64_t v15;
  uint64_t (**v16)();
  __int128 v17;
  uint64_t v18;
  std::runtime_error v19;
  std::string __p;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint32_t outputCnt;
  uint64_t output;
  uint8_t buf[8];
  __int16 v29;
  char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  _BYTE v34[14];
  const char *v35;
  int v36;
  uint64_t input;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v5 = *(_QWORD *)&a2->mSelector;
  *((_QWORD *)&v5 + 1) = HIDWORD(*(_QWORD *)&a2->mSelector);
  v38 = v5;
  mElement = a2->mElement;
  input = a3;
  v39 = mElement;
  output = 0;
  outputCnt = 1;
  v7 = (AMCP::Log::Scope_Registry *)IOConnectCallMethod((mach_port_t)this, 0xCu, &input, 4u, 0, 0, &output, &outputCnt, 0, 0);
  if ((_DWORD)v7)
  {
    AMCP::Log::Scope_Registry::get(v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v9 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      caulk::string_from_4cc(&__p, a2->mSelector);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v11;
      v29 = 2080;
      v30 = "HALS_IOUAUCDriver.cpp";
      v31 = 1024;
      v32 = 284;
      v33 = 2080;
      *(_QWORD *)v34 = p_p;
      *(_WORD *)&v34[8] = 1024;
      *(_DWORD *)&v34[10] = a3;
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Failed to get is property settable %s, object_id %u", buf, 0x28u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v19, "Failed to get is property settable");
    std::runtime_error::runtime_error((std::runtime_error *)&__p, &v19);
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = -1;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E69A1FB8;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(_QWORD *)&v34[6] = "BOOL HALS_IOUAUCDriver::GetIsPropertySettable(const AudioObjectPropertyAddress *, AudioObjectID)";
    v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v36 = 284;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    v17 = v14;
    v18 = v15;
    v14 = 0uLL;
    v15 = 0;
    v16 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v16);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return output != 0;
}

void sub_1B5B9CD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, std::runtime_error a18, std::runtime_error a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,__int16 a25,char a26,char a27,uint64_t a28,std::runtime_error a29,void *a30,uint64_t a31)
{
  void *v31;
  int v32;

  if (__p)
    operator delete(__p);
  if (a11)
    operator delete(a11);
  a30 = &unk_1E69A2000;
  if (a31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a31 + 32))(a31))
    a31 = 0;
  std::runtime_error::~runtime_error(&a29);
  a20 = &unk_1E69A2000;
  if (a21 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a21 + 32))(a21))
    a21 = 0;
  std::runtime_error::~runtime_error(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (v32)
    __cxa_free_exception(v31);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a27);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOUAUCDriver::get_device_timestamp_buffer_id(HALS_IOUAUCDriver *this, unsigned int a2)
{
  AMCP::Log::Scope_Registry *v2;
  NSObject *v4;
  _opaque_pthread_t *v5;
  mach_port_t v6;
  void *exception;
  __int128 v8;
  uint64_t v9;
  uint64_t (**v10)();
  __int128 v11;
  uint64_t v12;
  std::runtime_error v13;
  std::runtime_error v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint32_t outputCnt;
  uint64_t output;
  uint8_t buf[8];
  __int16 v24;
  char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  _BYTE v29[14];
  const char *v30;
  int v31;
  uint64_t input[2];

  input[1] = *MEMORY[0x1E0C80C00];
  input[0] = a2;
  output = 0;
  outputCnt = 1;
  v2 = (AMCP::Log::Scope_Registry *)IOConnectCallMethod((mach_port_t)this, 6u, input, 1u, 0, 0, &output, &outputCnt, 0, 0);
  if ((_DWORD)v2)
  {
    AMCP::Log::Scope_Registry::get(v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v4 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = pthread_self();
      v6 = pthread_mach_thread_np(v5);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v6;
      v24 = 2080;
      v25 = "HALS_IOUAUCDriver.cpp";
      v26 = 1024;
      v27 = 300;
      v28 = 2080;
      *(_QWORD *)v29 = "ret != kIOReturnSuccess";
      _os_log_error_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to get timestamp buffer id", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v13, "Failed to get timestamp buffer id");
    std::runtime_error::runtime_error(&v14, &v13);
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = -1;
    v14.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v15 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    *(_QWORD *)&v29[6] = "uint64_t HALS_IOUAUCDriver::get_device_timestamp_buffer_id(AudioObjectID)";
    v30 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v31 = 300;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v8);
    v11 = v8;
    v12 = v9;
    v8 = 0uLL;
    v9 = 0;
    v10 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v10);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return output;
}

void sub_1B5B9D008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, std::runtime_error a18, std::runtime_error a19, void *a20,uint64_t a21)
{
  void *v21;
  int v22;
  uint64_t v23;
  uint64_t v25;

  if (__p)
    operator delete(__p);
  if (a11)
    operator delete(a11);
  *(_QWORD *)(v23 - 96) = &unk_1E69A2000;
  v25 = *(_QWORD *)(v23 - 88);
  if (v25 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25))
    *(_QWORD *)(v23 - 88) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(v23 - 112));
  a20 = &unk_1E69A2000;
  if (a21 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a21 + 32))(a21))
    a21 = 0;
  std::runtime_error::~runtime_error(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (v22)
    __cxa_free_exception(v21);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v23 - 125));
  _Unwind_Resume(a1);
}

uint64_t HALS_IOUAUCDriver::get_device_client_status_buffer_id(HALS_IOUAUCDriver *this, unsigned int a2)
{
  AMCP::Log::Scope_Registry *v2;
  NSObject *v4;
  _opaque_pthread_t *v5;
  mach_port_t v6;
  void *exception;
  __int128 v8;
  uint64_t v9;
  uint64_t (**v10)();
  __int128 v11;
  uint64_t v12;
  std::runtime_error v13;
  std::runtime_error v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint32_t outputCnt;
  uint64_t output;
  uint8_t buf[8];
  __int16 v24;
  char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  _BYTE v29[14];
  const char *v30;
  int v31;
  uint64_t input[2];

  input[1] = *MEMORY[0x1E0C80C00];
  input[0] = a2;
  output = 0;
  outputCnt = 1;
  v2 = (AMCP::Log::Scope_Registry *)IOConnectCallMethod((mach_port_t)this, 7u, input, 1u, 0, 0, &output, &outputCnt, 0, 0);
  if ((_DWORD)v2)
  {
    AMCP::Log::Scope_Registry::get(v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v4 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = pthread_self();
      v6 = pthread_mach_thread_np(v5);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v6;
      v24 = 2080;
      v25 = "HALS_IOUAUCDriver.cpp";
      v26 = 1024;
      v27 = 311;
      v28 = 2080;
      *(_QWORD *)v29 = "ret != kIOReturnSuccess";
      _os_log_error_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to get client status buffer id", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v13, "Failed to get client status buffer id");
    std::runtime_error::runtime_error(&v14, &v13);
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = -1;
    v14.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v15 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    *(_QWORD *)&v29[6] = "uint64_t HALS_IOUAUCDriver::get_device_client_status_buffer_id(AudioObjectID)";
    v30 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v31 = 311;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v8);
    v11 = v8;
    v12 = v9;
    v8 = 0uLL;
    v9 = 0;
    v10 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v10);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return output;
}

void sub_1B5B9D308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, std::runtime_error a18, std::runtime_error a19, void *a20,uint64_t a21)
{
  void *v21;
  int v22;
  uint64_t v23;
  uint64_t v25;

  if (__p)
    operator delete(__p);
  if (a11)
    operator delete(a11);
  *(_QWORD *)(v23 - 96) = &unk_1E69A2000;
  v25 = *(_QWORD *)(v23 - 88);
  if (v25 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25))
    *(_QWORD *)(v23 - 88) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(v23 - 112));
  a20 = &unk_1E69A2000;
  if (a21 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a21 + 32))(a21))
    a21 = 0;
  std::runtime_error::~runtime_error(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (v22)
    __cxa_free_exception(v21);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v23 - 125));
  _Unwind_Resume(a1);
}

uint64_t HALS_IOUAUCDriver::get_device_io_status_buffer_id(HALS_IOUAUCDriver *this, unsigned int a2)
{
  AMCP::Log::Scope_Registry *v2;
  NSObject *v4;
  _opaque_pthread_t *v5;
  mach_port_t v6;
  void *exception;
  __int128 v8;
  uint64_t v9;
  uint64_t (**v10)();
  __int128 v11;
  uint64_t v12;
  std::runtime_error v13;
  std::runtime_error v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint32_t outputCnt;
  uint64_t output;
  uint8_t buf[8];
  __int16 v24;
  char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  _BYTE v29[14];
  const char *v30;
  int v31;
  uint64_t input[2];

  input[1] = *MEMORY[0x1E0C80C00];
  input[0] = a2;
  output = 0;
  outputCnt = 1;
  v2 = (AMCP::Log::Scope_Registry *)IOConnectCallMethod((mach_port_t)this, 0x10u, input, 1u, 0, 0, &output, &outputCnt, 0, 0);
  if ((_DWORD)v2)
  {
    AMCP::Log::Scope_Registry::get(v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v4 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = pthread_self();
      v6 = pthread_mach_thread_np(v5);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v6;
      v24 = 2080;
      v25 = "HALS_IOUAUCDriver.cpp";
      v26 = 1024;
      v27 = 322;
      v28 = 2080;
      *(_QWORD *)v29 = "ret != kIOReturnSuccess";
      _os_log_error_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to get io status buffer id", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v13, "Failed to get io status buffer id");
    std::runtime_error::runtime_error(&v14, &v13);
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = -1;
    v14.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v15 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    *(_QWORD *)&v29[6] = "uint64_t HALS_IOUAUCDriver::get_device_io_status_buffer_id(AudioObjectID)";
    v30 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v31 = 322;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v8);
    v11 = v8;
    v12 = v9;
    v8 = 0uLL;
    v9 = 0;
    v10 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v10);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return output;
}

void sub_1B5B9D608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, std::runtime_error a18, std::runtime_error a19, void *a20,uint64_t a21)
{
  void *v21;
  int v22;
  uint64_t v23;
  uint64_t v25;

  if (__p)
    operator delete(__p);
  if (a11)
    operator delete(a11);
  *(_QWORD *)(v23 - 96) = &unk_1E69A2000;
  v25 = *(_QWORD *)(v23 - 88);
  if (v25 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25))
    *(_QWORD *)(v23 - 88) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(v23 - 112));
  a20 = &unk_1E69A2000;
  if (a21 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a21 + 32))(a21))
    a21 = 0;
  std::runtime_error::~runtime_error(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (v22)
    __cxa_free_exception(v21);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v23 - 125));
  _Unwind_Resume(a1);
}

uint64_t HALS_IOUAUCDriver::map_memory(HALS_IOUAUCDriver *this, uint64_t a2, _QWORD *a3, unint64_t *a4)
{
  AMCP::Log::Scope_Registry *v5;
  uint64_t result;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  void *exception;
  __int128 v11;
  uint64_t v12;
  uint64_t (**v13)();
  __int128 v14;
  uint64_t v15;
  std::runtime_error v16;
  std::runtime_error v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t buf[8];
  __int16 v27;
  char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  _BYTE v32[14];
  const char *v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v24 = 0;
  v25 = 0;
  v5 = (AMCP::Log::Scope_Registry *)MEMORY[0x1B5E4FAA0](this, a2, *MEMORY[0x1E0C83DA0], &v25, &v24, 1);
  if ((_DWORD)v5)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v7 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v9;
      v27 = 2080;
      v28 = "HALS_IOUAUCDriver.cpp";
      v29 = 1024;
      v30 = 332;
      v31 = 2080;
      *(_QWORD *)v32 = "ret != kIOReturnSuccess";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to map memory", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v23);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v16, "Failed to map memory");
    std::runtime_error::runtime_error(&v17, &v16);
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = -1;
    v17.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v18 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v17);
    *(_QWORD *)&v32[6] = "mach_vm_address_t HALS_IOUAUCDriver::map_memory(uint64_t, IOOptionBits, size_t &)";
    v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v34 = 332;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v11);
    v13 = off_1E69A20A0;
    v14 = v11;
    v15 = v12;
    v11 = 0uLL;
    v12 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v13);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  result = v25;
  *a3 = v24;
  return result;
}

void sub_1B5B9D8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, void *a19, uint64_t a20)
{
  void *v20;
  int v21;
  uint64_t v22;
  uint64_t v24;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v22 - 96) = &unk_1E69A2000;
  v24 = *(_QWORD *)(v22 - 88);
  if (v24 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24))
    *(_QWORD *)(v22 - 88) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(v22 - 112));
  a19 = &unk_1E69A2000;
  if (a20 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a20 + 32))(a20))
    a20 = 0;
  std::runtime_error::~runtime_error(&a18);
  std::runtime_error::~runtime_error(&a17);
  if (v21)
    __cxa_free_exception(v20);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v22 - 129));
  _Unwind_Resume(a1);
}

AMCP::Log::Scope_Registry *HALS_IOUAUCDriver::unmap_memory(HALS_IOUAUCDriver *this, uint64_t a2, uint64_t a3)
{
  AMCP::Log::Scope_Registry *result;
  NSObject *v4;
  _opaque_pthread_t *v5;
  mach_port_t v6;
  void *exception;
  __int128 v8;
  uint64_t v9;
  uint64_t (**v10)();
  __int128 v11;
  uint64_t v12;
  std::runtime_error v13;
  std::runtime_error v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint8_t buf[8];
  __int16 v22;
  char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  _BYTE v27[14];
  const char *v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  result = (AMCP::Log::Scope_Registry *)MEMORY[0x1B5E4FAE8](this, a2, *MEMORY[0x1E0C83DA0], a3);
  if ((_DWORD)result)
  {
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v4 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = pthread_self();
      v6 = pthread_mach_thread_np(v5);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v6;
      v22 = 2080;
      v23 = "HALS_IOUAUCDriver.cpp";
      v24 = 1024;
      v25 = 340;
      v26 = 2080;
      *(_QWORD *)v27 = "ret != kIOReturnSuccess";
      _os_log_error_impl(&dword_1B57BA000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to unmap memory", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v13, "Failed to unmap memory");
    std::runtime_error::runtime_error(&v14, &v13);
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = -1;
    v14.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v15 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    *(_QWORD *)&v27[6] = "void HALS_IOUAUCDriver::unmap_memory(uint64_t, mach_vm_address_t)";
    v28 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v29 = 340;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v8);
    v10 = off_1E69A20A0;
    v11 = v8;
    v12 = v9;
    v8 = 0uLL;
    v9 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v10);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  return result;
}

void sub_1B5B9DBD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, void *a19, uint64_t a20)
{
  void *v20;
  int v21;
  uint64_t v22;
  uint64_t v24;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v22 - 96) = &unk_1E69A2000;
  v24 = *(_QWORD *)(v22 - 88);
  if (v24 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24))
    *(_QWORD *)(v22 - 88) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(v22 - 112));
  a19 = &unk_1E69A2000;
  if (a20 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a20 + 32))(a20))
    a20 = 0;
  std::runtime_error::~runtime_error(&a18);
  std::runtime_error::~runtime_error(&a17);
  if (v21)
    __cxa_free_exception(v20);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v22 - 113));
  _Unwind_Resume(a1);
}

void HALS_IOUAUCDriver::get_string_property(HALS_IOUAUCDriver *this, uint64_t a2, __int128 a3, void *a4, void *inputStruct, size_t a6)
{
  unsigned int v8;
  uint64_t PropertySize;
  CFTypeRef v12;
  NSObject *v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  void *exception;
  NSObject *v17;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  void *v20;
  unsigned __int128 v21;
  uint64_t v22;
  std::runtime_error v23;
  char v24;
  CFStringRef errorString;
  char *buffer[2];
  uint64_t v27;
  uint64_t (**v28)();
  std::runtime_error v29;
  uint64_t v30;
  std::runtime_error v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  AudioObjectPropertyAddress v38;
  uint8_t buf[8];
  __int16 v40;
  char *v41;
  __int16 v42;
  int v43;
  __int16 v44;
  _BYTE v45[14];
  const char *v46;
  int v47;
  uint64_t v48;

  v8 = a3;
  v48 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v38.mSelector = *((_QWORD *)&a3 + 1);
  v38.mElement = a4;
  PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(a2 + 4), &v38, a3, inputStruct, a6);
  v37 = PropertySize;
  if (!PropertySize)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v13 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = pthread_self();
      v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v15;
      v40 = 2080;
      v41 = "HALS_IOUAUCDriver.cpp";
      v42 = 1024;
      v43 = 360;
      v44 = 2080;
      *(_QWORD *)v45 = "out_size == 0";
      _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to get_string_property size", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v23);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error((std::runtime_error *)&v21, "Failed to get_string_property size");
    std::runtime_error::runtime_error(&v31, (const std::runtime_error *)&v21);
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = -1;
    v31.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v32 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v31);
    *(_QWORD *)&v45[6] = "applesauce::CF::StringRef HALS_IOUAUCDriver::get_string_property(AudioObjectID, AudioObjectProp"
                         "ertyAddress, void *, size_t)";
    v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v47 = 360;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(buffer);
    v28 = off_1E69A20A0;
    v29 = *(std::runtime_error *)buffer;
    v30 = v27;
    buffer[0] = 0;
    buffer[1] = 0;
    v27 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v28);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  buf[0] = 0;
  std::vector<std::byte>::vector(buffer, PropertySize, buf);
  HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(a2 + 4), &v38, v8, inputStruct, a6, buffer[0], &v37);
  errorString = 0;
  v12 = IOCFUnserializeBinary(buffer[0], v37, (CFAllocatorRef)*MEMORY[0x1E0C9AE08], 0, &errorString);
  if (!v12)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v17 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = pthread_self();
      v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v19;
      v40 = 2080;
      v41 = "HALS_IOUAUCDriver.cpp";
      v42 = 1024;
      v43 = 367;
      v44 = 2080;
      *(_QWORD *)v45 = "(deserialized_object) == nullptr";
      _os_log_error_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to deserialize string object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v24);
    v20 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v23, "Failed to deserialize string object");
    std::runtime_error::runtime_error(&v31, &v23);
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = -1;
    v31.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v32 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v31);
    *(_QWORD *)&v45[6] = "applesauce::CF::StringRef HALS_IOUAUCDriver::get_string_property(AudioObjectID, AudioObjectProp"
                         "ertyAddress, void *, size_t)";
    v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v47 = 367;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
    v28 = off_1E69A20A0;
    v29 = (std::runtime_error)v21;
    v30 = v22;
    v21 = 0uLL;
    v22 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v28);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v20, (uint64_t)buf);
  }
  applesauce::CF::StringRef::StringRef(this, v12);
  if (buffer[0])
  {
    buffer[1] = buffer[0];
    operator delete(buffer[0]);
  }
}

void sub_1B5B9E0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,std::runtime_error a27,uint64_t a28,uint64_t a29)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const void ***applesauce::raii::v1::detail::ScopeGuard<HALS_IOUAUCDriver::get_custom_property_value(unsigned int,AudioObjectPropertyAddress,applesauce::CF::TypeRef)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(const void ***a1)
{
  const void *v2;

  v2 = **a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void ***applesauce::raii::v1::detail::ScopeGuard<HALS_IOUAUCDriver::set_custom_property_value(unsigned int,AudioObjectPropertyAddress,applesauce::CF::TypeRef,applesauce::CF::TypeRef)::$_1,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(const void ***a1)
{
  const void *v2;

  v2 = **a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

CFTypeRef **applesauce::raii::v1::detail::ScopeGuard<HALS_IOUAUCDriver::set_custom_property_value(unsigned int,AudioObjectPropertyAddress,applesauce::CF::TypeRef,applesauce::CF::TypeRef)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(CFTypeRef **a1)
{
  CFRelease(**a1);
  return a1;
}

void HALS_IOUAUCDriver::get_array_property(HALS_IOUAUCDriver *this, uint64_t a2, __int128 a3, void *a4, void *inputStruct, size_t a6)
{
  unsigned int v8;
  uint64_t PropertySize;
  AMCP::Log::Scope_Registry *v12;
  NSObject *v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  void *exception;
  NSObject *v17;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  void *v20;
  unsigned __int128 v21;
  uint64_t v22;
  std::runtime_error v23;
  char v24;
  CFStringRef errorString;
  char *buffer[2];
  uint64_t v27;
  uint64_t (**v28)();
  std::runtime_error v29;
  uint64_t v30;
  std::runtime_error v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  AudioObjectPropertyAddress v38;
  uint8_t buf[8];
  __int16 v40;
  char *v41;
  __int16 v42;
  int v43;
  __int16 v44;
  _BYTE v45[14];
  const char *v46;
  int v47;
  uint64_t v48;

  v8 = a3;
  v48 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v38.mSelector = *((_QWORD *)&a3 + 1);
  v38.mElement = a4;
  PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(a2 + 4), &v38, a3, inputStruct, a6);
  v37 = PropertySize;
  if (!PropertySize)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v13 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = pthread_self();
      v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v15;
      v40 = 2080;
      v41 = "HALS_IOUAUCDriver.cpp";
      v42 = 1024;
      v43 = 447;
      v44 = 2080;
      *(_QWORD *)v45 = "out_size == 0";
      _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to get_array_property size", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v23);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error((std::runtime_error *)&v21, "Failed to get_array_property size");
    std::runtime_error::runtime_error(&v31, (const std::runtime_error *)&v21);
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = -1;
    v31.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v32 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v31);
    *(_QWORD *)&v45[6] = "applesauce::CF::ArrayRef HALS_IOUAUCDriver::get_array_property(AudioObjectID, AudioObjectProper"
                         "tyAddress, void *, size_t)";
    v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v47 = 447;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(buffer);
    v28 = off_1E69A20A0;
    v29 = *(std::runtime_error *)buffer;
    v30 = v27;
    buffer[0] = 0;
    buffer[1] = 0;
    v27 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v28);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  buf[0] = 0;
  std::vector<std::byte>::vector(buffer, PropertySize, buf);
  HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(a2 + 4), &v38, v8, inputStruct, a6, buffer[0], &v37);
  errorString = 0;
  v12 = (AMCP::Log::Scope_Registry *)IOCFUnserializeBinary(buffer[0], v37, (CFAllocatorRef)*MEMORY[0x1E0C9AE08], 0, &errorString);
  if (errorString)
  {
    AMCP::Log::Scope_Registry::get(v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v17 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = pthread_self();
      v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v19;
      v40 = 2080;
      v41 = "HALS_IOUAUCDriver.cpp";
      v42 = 1024;
      v43 = 454;
      v44 = 2080;
      *(_QWORD *)v45 = "error != nullptr";
      _os_log_error_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to deserialize get_array_property object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v24);
    v20 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v23, "Failed to deserialize get_array_property object");
    std::runtime_error::runtime_error(&v31, &v23);
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = -1;
    v31.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v32 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v31);
    *(_QWORD *)&v45[6] = "applesauce::CF::ArrayRef HALS_IOUAUCDriver::get_array_property(AudioObjectID, AudioObjectProper"
                         "tyAddress, void *, size_t)";
    v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    v47 = 454;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
    v28 = off_1E69A20A0;
    v29 = (std::runtime_error)v21;
    v30 = v22;
    v21 = 0uLL;
    v22 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v28);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v20, (uint64_t)buf);
  }
  applesauce::CF::ArrayRef::ArrayRef(this, v12);
  if (buffer[0])
  {
    buffer[1] = buffer[0];
    operator delete(buffer[0]);
  }
}

void sub_1B5B9E784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,std::runtime_error a27,uint64_t a28,uint64_t a29)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOUAUCDriver::perform_config_change(HALS_IOUAUCDriver *this, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t input[4];

  input[3] = *MEMORY[0x1E0C80C00];
  input[0] = a2;
  input[1] = a3;
  input[2] = a4;
  return IOConnectCallMethod((mach_port_t)this, 4u, input, 3u, 0, 0, 0, 0, 0, 0);
}

void sub_1B5B9E9BC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void ADS::SelectorControl::~SelectorControl(ADS::SelectorControl *this)
{
  ADS::SelectorControl::~SelectorControl(this);
  JUMPOUT(0x1B5E50688);
}

{
  void **v2;

  *(_QWORD *)this = off_1E6993758;
  v2 = (void **)((char *)this + 144);
  std::vector<ADS::SelectorControl::SelectorItem>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(_QWORD *)this = off_1E69937F0;
  *((_QWORD *)this + 7) = &off_1E69985F8;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 80));
  ADS::BaseObject::~BaseObject(this);
}

BOOL ADS::SelectorControl::HasProperty(ADS::SelectorControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  AudioObjectPropertySelector mSelector;
  BOOL v5;
  int v6;

  mSelector = a4->mSelector;
  if ((int)a4->mSelector > 1935892840)
  {
    v5 = mSelector == 1935892841 || mSelector == 1935893353;
    v6 = 1935894894;
  }
  else
  {
    v5 = mSelector == 1667591277 || mSelector == 1668049771;
    v6 = 1668506480;
  }
  return v5 || mSelector == v6 || ADS::BaseObject::HasProperty(this, a2, a3, a4);
}

uint64_t ADS::SelectorControl::IsPropertySettable(ADS::SelectorControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  AudioObjectPropertySelector mSelector;
  uint64_t v5;
  int v6;

  mSelector = a4->mSelector;
  v5 = 1;
  if ((int)a4->mSelector > 1935892840)
  {
    if (mSelector == 1935894894 || mSelector == 1935893353)
      return v5;
    v6 = 1935892841;
  }
  else
  {
    if (mSelector == 1667591277)
      return 0;
    if (mSelector == 1668049771)
      return v5;
    v6 = 1668506480;
  }
  if (mSelector == v6)
    return 0;
  return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
}

uint64_t ADS::SelectorControl::GetPropertyDataSize(ADS::SelectorControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6)
{
  AudioObjectPropertySelector mSelector;
  uint64_t v8;
  uint64_t v9;
  int v10;
  OS::CF::UntypedObject *v11;
  OS::CF::UntypedObject *v12;
  uint64_t v13;
  int v14;
  _QWORD v15[3];
  unsigned __int8 v16;

  mSelector = a4->mSelector;
  if ((int)a4->mSelector <= 1935892840)
  {
    if (mSelector == 1667591277 || mSelector == 1668049771 || mSelector == 1668506480)
      return 4;
    return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
  }
  if (mSelector == 1935892841)
    return 858993460 * ((*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3);
  if (mSelector == 1935894894)
    return 8;
  if (mSelector != 1935893353)
    return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
  v8 = *((_QWORD *)this + 18);
  v9 = *((_QWORD *)this + 19);
  if (v8 == v9)
    return 0;
  v10 = 0;
  v11 = (OS::CF::UntypedObject *)v15;
  do
  {
    v12 = OS::CF::UntypedObject::UntypedObject(v11, *(CFTypeRef *)(v8 + 16));
    v15[0] = &off_1E69A0F60;
    v13 = *(_QWORD *)(v8 + 24);
    v16 = *(_BYTE *)(v8 + 32);
    v15[2] = v13;
    v14 = v16;
    OS::CF::UntypedObject::~UntypedObject(v12);
    v10 += v14;
    v8 += 40;
  }
  while (v8 != v9);
  return (4 * v10);
}

void ADS::SelectorControl::GetPropertyData(ADS::SelectorControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, int *a6, unsigned int a7, unsigned int *a8, char *a9)
{
  char *v13;
  AudioObjectPropertySelector mSelector;
  unint64_t v15;
  int *v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  OS::CF::UntypedObject *v23;
  OS::CF::UntypedObject *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  OS::CF::UntypedObject *v29;
  OS::CF::UntypedObject *v30;
  uint64_t v31;
  int v32;
  char *v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  int v39;
  _DWORD *v40;
  _DWORD *exception;
  _DWORD *v42;
  _DWORD *v43;
  _DWORD *v44;
  int v45;
  int v46;
  uint8_t buf[4];
  _BYTE v50[14];
  uint64_t v51;
  char v52;
  uint64_t v53;

  v13 = a9;
  v53 = *MEMORY[0x1E0C80C00];
  mSelector = a4->mSelector;
  if ((int)a4->mSelector <= 1935893352)
  {
    if (mSelector != 1668049771)
    {
      if (mSelector == 1935892841)
      {
        v15 = a7 >> 2;
        v16 = (int *)*((_QWORD *)this + 18);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 19) - (_QWORD)v16) >> 3) < v15)
          v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 19) - (_QWORD)v16) >> 3);
        if (v15)
        {
          v17 = v15;
          do
          {
            v18 = *v16;
            v16 += 10;
            *(_DWORD *)v13 = v18;
            v13 += 4;
            --v17;
          }
          while (v17);
          v19 = 4 * v15;
        }
        else
        {
          v19 = 0;
        }
        *a8 = v19;
        return;
      }
LABEL_22:
      ADS::Control::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, a9);
      return;
    }
    if (a7 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)v50 = "ADS_SelectorControl.cpp";
        *(_WORD *)&v50[8] = 1024;
        *(_DWORD *)&v50[10] = 229;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SelectorControl::GetPropertyData: not enough space for the return value of kAudioSelectorControlPropertyItemKind", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 561211770;
    }
    if (a5 != 4)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)v50 = "ADS_SelectorControl.cpp";
        *(_WORD *)&v50[8] = 1024;
        *(_DWORD *)&v50[10] = 230;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SelectorControl::GetPropertyData: qualifier for kAudioSelectorControlPropertyItemKind must be a UInt32 ID", buf, 0x12u);
      }
      v43 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v43 = &off_1E69A1B30;
      v43[2] = 561211770;
    }
    v20 = (char *)this + 56;
    v46 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 7) + 16))((char *)this + 56);
    v27 = *((_QWORD *)this + 18);
    v28 = *((_QWORD *)this + 19);
    if (v27 == v28)
      goto LABEL_69;
    v29 = (OS::CF::UntypedObject *)&v50[4];
    while (1)
    {
      *(_DWORD *)buf = *(_DWORD *)v27;
      v30 = OS::CF::UntypedObject::UntypedObject(v29, *(CFTypeRef *)(v27 + 16));
      *(_QWORD *)&v50[4] = &off_1E69A0F60;
      v31 = *(_QWORD *)(v27 + 24);
      v52 = *(_BYTE *)(v27 + 32);
      v51 = v31;
      v32 = *a6;
      OS::CF::UntypedObject::~UntypedObject(v30);
      if (*(_DWORD *)buf == v32)
        break;
      v27 += 40;
      if (v27 == v28)
      {
        v27 = v28;
        break;
      }
    }
    if (v27 == *((_QWORD *)this + 19))
    {
LABEL_69:
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)v50 = "ADS_SelectorControl.cpp";
        *(_WORD *)&v50[8] = 1024;
        *(_DWORD *)&v50[10] = 236;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SelectorControl::GetPropertyData: ID not found", buf, 0x12u);
      }
      v39 = 560947818;
    }
    else
    {
      if (*(_BYTE *)(v27 + 24))
      {
        *(_DWORD *)a9 = *(_DWORD *)(v27 + 28);
        *a8 = 4;
        if (!v46)
          return;
        goto LABEL_21;
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)v50 = "ADS_SelectorControl.cpp";
        *(_WORD *)&v50[8] = 1024;
        *(_DWORD *)&v50[10] = 237;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  This item does not have a kind.", buf, 0x12u);
      }
      v39 = 1852797029;
    }
    v44 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v44 = &off_1E69A1B30;
    v44[2] = v39;
  }
  if (mSelector == 1935893353)
  {
    v33 = (char *)this + 56;
    v34 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 7) + 16))((char *)this + 56);
    v35 = 0;
    if (a7)
    {
      v36 = *((_QWORD *)this + 18);
      v37 = *((_QWORD *)this + 19);
      do
      {
        if (v36 == v37)
          break;
        if (*(_BYTE *)(v36 + 32))
          *(_DWORD *)&a9[4 * v35++] = *(_DWORD *)v36;
        v36 += 40;
      }
      while (v35 < a7);
    }
    *a8 = 4 * v35;
    if (v34)
      (*(void (**)(char *))(*(_QWORD *)v33 + 24))((char *)this + 56);
  }
  else
  {
    if (mSelector != 1935894894)
      goto LABEL_22;
    if (a7 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)v50 = "ADS_SelectorControl.cpp";
        *(_WORD *)&v50[8] = 1024;
        *(_DWORD *)&v50[10] = 214;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SelectorControl::GetPropertyData: not enough space for the return value of kAudioSelectorControlPropertyItemName", buf, 0x12u);
      }
      v40 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v40 = &off_1E69A1B30;
      v40[2] = 561211770;
    }
    if (a5 != 4)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)v50 = "ADS_SelectorControl.cpp";
        *(_WORD *)&v50[8] = 1024;
        *(_DWORD *)&v50[10] = 215;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SelectorControl::GetPropertyData: qualifier for kAudioSelectorControlPropertyItemName must be a UInt32 ID", buf, 0x12u);
      }
      v42 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v42 = &off_1E69A1B30;
      v42[2] = 560947818;
    }
    v20 = (char *)this + 56;
    v45 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 7) + 16))((char *)this + 56);
    v21 = *((_QWORD *)this + 18);
    v22 = *((_QWORD *)this + 19);
    if (v21 == v22)
      goto LABEL_70;
    v23 = (OS::CF::UntypedObject *)&v50[4];
    while (1)
    {
      *(_DWORD *)buf = *(_DWORD *)v21;
      v24 = OS::CF::UntypedObject::UntypedObject(v23, *(CFTypeRef *)(v21 + 16));
      *(_QWORD *)&v50[4] = &off_1E69A0F60;
      v25 = *(_QWORD *)(v21 + 24);
      v52 = *(_BYTE *)(v21 + 32);
      v51 = v25;
      v26 = *a6;
      OS::CF::UntypedObject::~UntypedObject(v24);
      if (*(_DWORD *)buf == v26)
        break;
      v21 += 40;
      if (v21 == v22)
      {
        v21 = v22;
        break;
      }
    }
    if (v21 == *((_QWORD *)this + 19))
    {
LABEL_70:
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)v50 = "ADS_SelectorControl.cpp";
        *(_WORD *)&v50[8] = 1024;
        *(_DWORD *)&v50[10] = 221;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SelectorControl::GetPropertyData: ID not found", buf, 0x12u);
      }
      v38 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v38 = &off_1E69A1B30;
      v38[2] = 560947818;
    }
    *(_QWORD *)a9 = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE08], *(CFStringRef *)(v21 + 16));
    *a8 = 8;
    if (v45)
LABEL_21:
      (*(void (**)(char *))(*(_QWORD *)v20 + 24))((char *)this + 56);
  }
}

void sub_1B5B9F3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ADS::SelectorControl::SetPropertyData(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, int *a6, uint64_t a7, uint64_t a8, _DWORD *a9, unint64_t *a10, unsigned __int8 a11)
{
  unsigned int v12;
  int v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  OS::CF::UntypedObject *v27;
  OS::CF::UntypedObject *v28;
  uint64_t v29;
  int v30;
  int v31;
  _DWORD *v32;
  unint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  OS::CF::UntypedObject *v37;
  OS::CF::UntypedObject *v38;
  uint64_t v39;
  int v40;
  int v41;
  _DWORD *v42;
  unint64_t v43;
  _DWORD *v44;
  int v45;
  unint64_t v46;
  _DWORD *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _DWORD *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  _DWORD *v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  _DWORD *v66;
  _DWORD *v67;
  _DWORD *v68;
  _DWORD *exception;
  _DWORD *v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint8_t buf[4];
  _BYTE v77[14];
  uint64_t v78;
  char v79;
  uint64_t v80;

  v12 = a7;
  v80 = *MEMORY[0x1E0C80C00];
  v15 = *(_DWORD *)a4;
  if (*(_DWORD *)a4 == 1668049771)
  {
    if ((_DWORD)a7 != 4)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)v77 = "ADS_SelectorControl.cpp";
        *(_WORD *)&v77[8] = 1024;
        *(_DWORD *)&v77[10] = 297;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SelectorControl::SetPropertyData: wrong property data size for kAudioSelectorControlPropertyItemKind", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 561211770;
    }
    if ((_DWORD)a5 != 4)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)v77 = "ADS_SelectorControl.cpp";
        *(_WORD *)&v77[8] = 1024;
        *(_DWORD *)&v77[10] = 298;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SelectorControl::SetPropertyData: wrong qualifier data size for kAudioSelectorControlPropertyItemKind", buf, 0x12u);
      }
      v71 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v71 = &off_1E69A1B30;
      v71[2] = 561211770;
    }
    v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 16))(a1 + 56);
    v35 = *(_QWORD *)(a1 + 144);
    v36 = *(_QWORD *)(a1 + 152);
    v73 = a1 + 56;
    if (v35 == v36)
      goto LABEL_91;
    v37 = (OS::CF::UntypedObject *)&v77[4];
    while (1)
    {
      *(_DWORD *)buf = *(_DWORD *)v35;
      v38 = OS::CF::UntypedObject::UntypedObject(v37, *(CFTypeRef *)(v35 + 16));
      *(_QWORD *)&v77[4] = &off_1E69A0F60;
      v39 = *(_QWORD *)(v35 + 24);
      v79 = *(_BYTE *)(v35 + 32);
      v78 = v39;
      v40 = *a6;
      OS::CF::UntypedObject::~UntypedObject(v38);
      if (*(_DWORD *)buf == v40)
        break;
      v35 += 40;
      if (v35 == v36)
      {
        v35 = v36;
        break;
      }
    }
    if (v35 == *(_QWORD *)(a1 + 152))
    {
LABEL_91:
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)v77 = "ADS_SelectorControl.cpp";
        *(_WORD *)&v77[8] = 1024;
        *(_DWORD *)&v77[10] = 304;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SelectorControl::SetPropertyData: ID not found", buf, 0x12u);
      }
      v67 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v67 = &off_1E69A1B30;
      v67[2] = 560947818;
    }
    *(_DWORD *)(v35 + 28) = *(_DWORD *)a8;
    *a9 = 1;
    v41 = *(_DWORD *)(a1 + 52);
    v42 = (_DWORD *)a10[1];
    v43 = a10[2];
    if ((unint64_t)v42 >= v43)
    {
      v52 = 0x1555555555555555;
      v53 = (_DWORD *)*a10;
      v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v42 - *a10) >> 2);
      v55 = v54 + 1;
      if (v54 + 1 > 0x1555555555555555)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - (_QWORD)v53) >> 2);
      if (2 * v56 > v55)
        v55 = 2 * v56;
      if (v56 < 0xAAAAAAAAAAAAAAALL)
        v52 = v55;
      if (v52)
      {
        v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v52);
        v53 = (_DWORD *)*a10;
        v42 = (_DWORD *)a10[1];
      }
      else
      {
        v57 = 0;
      }
      v62 = (_DWORD *)(v52 + 12 * v54);
      v63 = v52 + 12 * v57;
      *v62 = 1668049771;
      v62[1] = v41;
      v62[2] = 0;
      v44 = v62 + 3;
      if (v42 == v53)
      {
        v45 = v75;
      }
      else
      {
        v45 = v75;
        do
        {
          v64 = *(_QWORD *)(v42 - 3);
          v42 -= 3;
          v65 = v42[2];
          *(_QWORD *)(v62 - 3) = v64;
          v62 -= 3;
          v62[2] = v65;
        }
        while (v42 != v53);
        v53 = (_DWORD *)*a10;
      }
      *a10 = (unint64_t)v62;
      a10[1] = (unint64_t)v44;
      a10[2] = v63;
      if (v53)
        operator delete(v53);
    }
    else
    {
      *v42 = 1668049771;
      v42[1] = v41;
      v42[2] = 0;
      v44 = v42 + 3;
      v45 = v75;
    }
    a10[1] = (unint64_t)v44;
    if (v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73);
  }
  else if (v15 == 1935894894)
  {
    if ((_DWORD)a7 != 8)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)v77 = "ADS_SelectorControl.cpp";
        *(_WORD *)&v77[8] = 1024;
        *(_DWORD *)&v77[10] = 279;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SelectorControl::SetPropertyData: wrong property data size for kAudioSelectorControlPropertyItemName", buf, 0x12u);
      }
      v68 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v68 = &off_1E69A1B30;
      v68[2] = 561211770;
    }
    if ((_DWORD)a5 != 4)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)v77 = "ADS_SelectorControl.cpp";
        *(_WORD *)&v77[8] = 1024;
        *(_DWORD *)&v77[10] = 280;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SelectorControl::SetPropertyData: wrong qualifier data size for kAudioSelectorControlPropertyItemName", buf, 0x12u);
      }
      v70 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v70 = &off_1E69A1B30;
      v70[2] = 561211770;
    }
    v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 16))(a1 + 56);
    v25 = *(_QWORD *)(a1 + 144);
    v26 = *(_QWORD *)(a1 + 152);
    v72 = a1 + 56;
    if (v25 == v26)
      goto LABEL_92;
    v27 = (OS::CF::UntypedObject *)&v77[4];
    while (1)
    {
      *(_DWORD *)buf = *(_DWORD *)v25;
      v28 = OS::CF::UntypedObject::UntypedObject(v27, *(CFTypeRef *)(v25 + 16));
      *(_QWORD *)&v77[4] = &off_1E69A0F60;
      v29 = *(_QWORD *)(v25 + 24);
      v79 = *(_BYTE *)(v25 + 32);
      v78 = v29;
      v30 = *a6;
      OS::CF::UntypedObject::~UntypedObject(v28);
      if (*(_DWORD *)buf == v30)
        break;
      v25 += 40;
      if (v25 == v26)
      {
        v25 = v26;
        break;
      }
    }
    if (v25 == *(_QWORD *)(a1 + 152))
    {
LABEL_92:
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)v77 = "ADS_SelectorControl.cpp";
        *(_WORD *)&v77[8] = 1024;
        *(_DWORD *)&v77[10] = 286;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SelectorControl::SetPropertyData: ID not found", buf, 0x12u);
      }
      v66 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v66 = &off_1E69A1B30;
      v66[2] = 560947818;
    }
    OS::CF::UntypedObject::operator=(v25 + 8, *(CFTypeRef *)(a8 + 8));
    *a9 = 1;
    v31 = *(_DWORD *)(a1 + 52);
    v32 = (_DWORD *)a10[1];
    v33 = a10[2];
    if ((unint64_t)v32 >= v33)
    {
      v46 = 0x1555555555555555;
      v47 = (_DWORD *)*a10;
      v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v32 - *a10) >> 2);
      v49 = v48 + 1;
      if (v48 + 1 > 0x1555555555555555)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (_QWORD)v47) >> 2);
      if (2 * v50 > v49)
        v49 = 2 * v50;
      if (v50 < 0xAAAAAAAAAAAAAAALL)
        v46 = v49;
      if (v46)
      {
        v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v46);
        v47 = (_DWORD *)*a10;
        v32 = (_DWORD *)a10[1];
      }
      else
      {
        v51 = 0;
      }
      v58 = (_DWORD *)(v46 + 12 * v48);
      v59 = v46 + 12 * v51;
      *v58 = 1935894894;
      v58[1] = v31;
      v58[2] = 0;
      v34 = v58 + 3;
      if (v32 != v47)
      {
        do
        {
          v60 = *(_QWORD *)(v32 - 3);
          v32 -= 3;
          v61 = v32[2];
          *(_QWORD *)(v58 - 3) = v60;
          v58 -= 3;
          v58[2] = v61;
        }
        while (v32 != v47);
        v47 = (_DWORD *)*a10;
      }
      *a10 = (unint64_t)v58;
      a10[1] = (unint64_t)v34;
      a10[2] = v59;
      if (v47)
        operator delete(v47);
    }
    else
    {
      *v32 = 1935894894;
      v32[1] = v31;
      v32[2] = 0;
      v34 = v32 + 3;
    }
    a10[1] = (unint64_t)v34;
    if (v74)
      (*(void (**)(uint64_t))(*(_QWORD *)v72 + 24))(v72);
  }
  else if (v15 == 1935893353)
  {
    v16 = (_QWORD *)(a1 + 56);
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 16))(a1 + 56);
    v18 = v16[11];
    v19 = v16[12];
    if (v18 != v19)
    {
      LODWORD(v20) = v12 >> 2;
      if (v12 >> 2 <= 1)
        v20 = 1;
      else
        v20 = v20;
      do
      {
        if (v12 >= 4)
        {
          v21 = 0;
          v22 = (int *)a8;
          v23 = v20;
          do
          {
            v24 = *v22++;
            v21 |= *(_DWORD *)v18 == v24;
            --v23;
          }
          while (v23);
        }
        else
        {
          v21 = 0;
        }
        *(_BYTE *)(v18 + 32) = v21 & 1;
        v18 += 40;
      }
      while (v18 != v19);
    }
    if (v17)
      (*(void (**)(_QWORD *))(*v16 + 24))(v16);
  }
  else
  {
    ADS::BaseObject::SetPropertyData(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8, a9, a10, a11);
  }
}

void sub_1B5B9FD18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::vector<ADS::SelectorControl::SelectorItem>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 40;
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v4 - 32));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

const __CFArray *ADS::SelectorControl::parseItems(_QWORD *a1, uint64_t a2)
{
  CFIndex i;
  const __CFArray *result;
  int v6;
  std::string *p_p;
  const __CFNumber *v8;
  unsigned __int8 v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::string __p;
  char v30[8];
  const __CFNumber *v31;
  char v32[8];
  uint64_t v33;
  char v34[8];
  const __CFNumber *v35;
  char v36[8];
  CFDictionaryRef theDict;
  int v38;
  void (**v39)(OS::CF::String *__hidden);
  CFTypeRef cf;
  uint64_t v41;
  unsigned __int8 v42;

  for (i = 0; ; ++i)
  {
    result = OS::CF::ArrayBase<__CFArray const*>::GetSize(*(const __CFArray **)(a2 + 8));
    if (i >= (int)result)
      break;
    v39 = &off_1E69A0F60;
    cf = 0;
    OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v36, a2, i);
    if (!theDict)
      goto LABEL_41;
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v34, theDict, CFSTR("id"));
    if (v35)
      v6 = OS::CF::Number::GetValue<int>(v35, 0);
    else
      v6 = i;
    v38 = v6;
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v32, theDict, CFSTR("name"));
    if (v33)
    {
      OS::CF::String::AsStdString(&__p, (uint64_t)v32);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      OS::CF::String::String((OS::CF::String *)v30, (const char *)p_p);
      v8 = (const __CFNumber *)cf;
      cf = v31;
      v31 = v8;
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v30);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(&__p, theDict, CFSTR("selected"));
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v30, theDict, CFSTR("kind"));
      v9 = __p.__r_.__value_.__s.__data_[8];
      if (__p.__r_.__value_.__l.__size_)
        v9 = OS::CF::Boolean::AsBool((const __CFBoolean *)__p.__r_.__value_.__l.__size_);
      v42 = v9;
      if (v31)
      {
        HIDWORD(v41) = OS::CF::Number::GetValue<unsigned int>(v31, 0);
        v10 = 1;
      }
      else
      {
        v10 = 0;
      }
      LOBYTE(v41) = v10;
      v12 = a1[19];
      v11 = a1[20];
      if (v12 < v11)
      {
        *(_DWORD *)v12 = v38;
        OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)(v12 + 8), cf);
        *(_QWORD *)(v12 + 8) = &off_1E69A0F60;
        v13 = v41;
        *(_BYTE *)(v12 + 32) = v42;
        *(_QWORD *)(v12 + 24) = v13;
        v14 = (char *)(v12 + 40);
LABEL_39:
        a1[19] = v14;
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v30);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&__p);
        goto LABEL_40;
      }
      v15 = a1[18];
      v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - v15) >> 3);
      v17 = v16 + 1;
      if (v16 + 1 > 0x666666666666666)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v15) >> 3);
      if (2 * v18 > v17)
        v17 = 2 * v18;
      if (v18 >= 0x333333333333333)
        v19 = 0x666666666666666;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 > 0x666666666666666)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v20 = (char *)operator new(40 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[40 * v16];
      v22 = &v20[40 * v19];
      *(_DWORD *)v21 = v38;
      OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)(v21 + 8), cf);
      *((_QWORD *)v21 + 1) = &off_1E69A0F60;
      *((_QWORD *)v21 + 3) = v41;
      v21[32] = v42;
      v14 = v21 + 40;
      v24 = a1[18];
      v23 = a1[19];
      if (v23 == v24)
      {
        a1[18] = v21;
        a1[19] = v14;
        a1[20] = v22;
      }
      else
      {
        do
        {
          v25 = *(_DWORD *)(v23 - 40);
          v23 -= 40;
          *((_DWORD *)v21 - 10) = v25;
          v21 -= 40;
          *((_QWORD *)v21 + 2) = *(_QWORD *)(v23 + 16);
          *(_QWORD *)(v23 + 16) = 0;
          *((_QWORD *)v21 + 1) = &off_1E69A0F60;
          v26 = *(_QWORD *)(v23 + 24);
          v21[32] = *(_BYTE *)(v23 + 32);
          *((_QWORD *)v21 + 3) = v26;
        }
        while (v23 != v24);
        v27 = a1[18];
        v23 = a1[19];
        a1[18] = v21;
        a1[19] = v14;
        a1[20] = v22;
        if (v23 != v27)
        {
          do
          {
            v28 = v23 - 40;
            OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v23 - 32));
            v23 = v28;
          }
          while (v28 != v27);
          v23 = v27;
          if (!v27)
            goto LABEL_39;
          goto LABEL_38;
        }
      }
      if (!v23)
        goto LABEL_39;
LABEL_38:
      operator delete((void *)v23);
      goto LABEL_39;
    }
LABEL_40:
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v32);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v34);
LABEL_41:
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v36);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v39);
  }
  return result;
}

void sub_1B5BA01C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  OS::CF::UntypedObject *v18;

  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a12);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a9);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a14);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a16);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a18);
  OS::CF::UntypedObject::~UntypedObject(v18);
  _Unwind_Resume(a1);
}

ADS::Control *ADS::SelectorControl::SelectorControl(ADS::Control *a1, int a2, int a3, int a4, int a5, uint64_t a6)
{
  ADS::Control *v8;
  _QWORD v10[3];

  v8 = ADS::Control::Control(a1, a2, a3, a4, a5, 1936483188);
  *(_QWORD *)v8 = off_1E6993758;
  *((_QWORD *)v8 + 18) = 0;
  *((_QWORD *)v8 + 19) = 0;
  *((_QWORD *)v8 + 20) = 0;
  OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v10, *(CFTypeRef *)(a6 + 8));
  v10[0] = &off_1E69A0EA8;
  ADS::SelectorControl::parseItems(a1, (uint64_t)v10);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v10);
  return a1;
}

void sub_1B5BA028C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va);
  std::vector<ADS::SelectorControl::SelectorItem>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  *(_QWORD *)v2 = off_1E69937F0;
  *(_QWORD *)(v2 + 56) = &off_1E69985F8;
  pthread_mutex_destroy((pthread_mutex_t *)(v2 + 80));
  ADS::BaseObject::~BaseObject((ADS::BaseObject *)v2);
  _Unwind_Resume(a1);
}

void HALB_CFPlugIn::~HALB_CFPlugIn(HALB_CFPlugIn *this)
{
  HALB_CFPlugIn::~HALB_CFPlugIn(this);
  JUMPOUT(0x1B5E50688);
}

{
  const void *v2;

  *(_QWORD *)this = &off_1E6993858;
  if (*((_BYTE *)this + 16))
  {
    v2 = (const void *)*((_QWORD *)this + 1);
    if (v2)
    {
      CFRelease(v2);
      *((_QWORD *)this + 1) = 0;
    }
  }
}

CFStringRef HALB_CFPlugIn::GetBundleID(HALB_CFPlugIn *this)
{
  __CFBundle *Bundle;

  if (this && (Bundle = CFPlugInGetBundle(this)) != 0)
    return CFBundleGetIdentifier(Bundle);
  else
    return 0;
}

double HALIO::HALIO_Graph_Builder::maybe_set_master_device(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef v4;
  uint64_t v6;
  int v7;
  double result;
  void **v9;
  std::runtime_error *exception;
  __int128 v11;
  uint64_t v12;
  CFTypeRef cf;

  if (*(_BYTE *)(a3 + 8))
  {
    v4 = *(CFTypeRef *)a3;
    if (*(_QWORD *)a3)
    {
      v6 = *a1;
      CFRetain(*(CFTypeRef *)a3);
      cf = v4;
      v7 = (*(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v6 + 24))(v6, &cf);
      if (cf)
        CFRelease(cf);
      if (v7)
      {
        if (!*(_QWORD *)a3)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          applesauce::CF::construct_error(exception);
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)&v11, *(const __CFString **)a3);
        v9 = (void **)(a2 + 40);
        if (*(char *)(a2 + 63) < 0)
          operator delete(*v9);
        result = *(double *)&v11;
        *(_OWORD *)v9 = v11;
        *(_QWORD *)(a2 + 56) = v12;
        *(_DWORD *)(a2 + 64) = 1;
      }
    }
  }
  return result;
}

void sub_1B5BA0448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  void *v12;

  __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

uint64_t HALIO::HALIO_Graph_Builder::create_graph_description_from_aggregate_description(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, CFDictionaryRef *a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t a9)
{
  const __CFNumber *v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  AMCP::Log::Scope_Registry *v23;
  _BOOL4 v24;
  AMCP::Log::Scope_Registry *v25;
  AMCP::Log::Scope_Registry *v26;
  const void *v27;
  const void *v28;
  CFTypeID v29;
  _BOOL4 v30;
  std::__shared_weak_count *size;
  NSObject *v32;
  unint64_t *v33;
  unint64_t v34;
  _opaque_pthread_t *v35;
  mach_port_t v36;
  char v37;
  std::string::size_type v38;
  CFArrayRef CFArray;
  _QWORD *v40;
  std::string *v41;
  std::string *p_cf;
  uint64_t v43;
  AMCP::Log::Scope_Registry *v44;
  const void *v45;
  std::string::size_type v46;
  BOOL v47;
  AMCP::Log::Scope_Registry *v48;
  AMCP::Log::Scope_Registry *v49;
  uint64_t v50;
  double v51;
  std::__shared_weak_count *v52;
  NSObject *v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  CFTypeRef *v57;
  const void *v58;
  const void *v59;
  int v60;
  const void *v61;
  int v62;
  const void *v63;
  int v64;
  const void *v65;
  int v66;
  uint64_t v67;
  CFTypeRef v68;
  uint64_t v69;
  uint64_t v70;
  std::string *v71;
  CFIndex v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  std::string::size_type v77;
  int v78;
  int v79;
  unsigned int v80;
  std::string::size_type v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 *v99;
  __int128 *v100;
  int64x2_t v101;
  unint64_t v102;
  int v103;
  void *v104;
  std::__shared_weak_count *v105;
  NSObject *v106;
  unint64_t *v107;
  unint64_t v108;
  _opaque_pthread_t *v109;
  mach_port_t v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  unint64_t v114;
  std::string *v115;
  uint64_t i;
  __int128 *v117;
  uint64_t v118;
  __int128 *v119;
  uint64_t v120;
  CFIndex v121;
  _QWORD *v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  std::string::size_type v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  std::string::size_type v131;
  int64x2_t v132;
  char *v133;
  double *v134;
  double v135;
  unint64_t v136;
  AMCP::Log::Scope_Registry *v137;
  const __CFString *v138;
  std::string *v139;
  uint64_t v140;
  AMCP::Log::Scope_Registry *v141;
  uint64_t v142;
  int v143;
  unsigned int *v144;
  AMCP::Log::Scope_Registry *v145;
  AMCP::Log::Scope_Registry *v146;
  unint64_t v147;
  std::string::value_type *v148;
  char v149;
  std::string::size_type v150;
  char v151;
  char *v152;
  int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  std::string::size_type v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  std::string::size_type v163;
  __int128 *v164;
  __int128 *v165;
  int64x2_t v166;
  unint64_t v167;
  uint64_t k;
  unsigned int v169;
  int v170;
  unsigned int v171;
  char v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  int v177;
  unint64_t v178;
  _QWORD *v179;
  std::__shared_weak_count *v180;
  NSObject *v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  AMCP::Log::Scope_Registry *v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  std::string::size_type v203;
  char v204;
  void *v205;
  char v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  __int128 *v214;
  __int128 *v215;
  int64x2_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int64x2_t v227;
  char *v228;
  uint64_t m;
  uint64_t n;
  _opaque_pthread_t *v231;
  mach_port_t v232;
  uint64_t j;
  std::__shared_weak_count *v235;
  NSObject *v236;
  unint64_t *v237;
  unint64_t v238;
  _opaque_pthread_t *v239;
  mach_port_t v240;
  std::__shared_weak_count *v241;
  NSObject *v242;
  unint64_t *v243;
  unint64_t v244;
  _opaque_pthread_t *v245;
  mach_port_t v246;
  _opaque_pthread_t *v247;
  mach_port_t v248;
  NSObject *v249;
  _opaque_pthread_t *v250;
  mach_port_t v251;
  NSObject *v252;
  _opaque_pthread_t *v253;
  mach_port_t v254;
  NSObject *v255;
  _opaque_pthread_t *v256;
  mach_port_t v257;
  const char *v258;
  _opaque_pthread_t *v259;
  mach_port_t v260;
  NSObject *v261;
  _opaque_pthread_t *v262;
  mach_port_t v263;
  NSObject *v264;
  _opaque_pthread_t *v265;
  mach_port_t v266;
  NSObject *v267;
  _opaque_pthread_t *v268;
  mach_port_t v269;
  const char *v270;
  _opaque_pthread_t *v271;
  mach_port_t v272;
  _opaque_pthread_t *v273;
  mach_port_t v274;
  NSObject *v275;
  _opaque_pthread_t *v276;
  mach_port_t v277;
  std::runtime_error *exception;
  std::runtime_error *v279;
  std::runtime_error *v280;
  std::runtime_error *v281;
  std::runtime_error *v282;
  std::runtime_error *v283;
  std::runtime_error *v284;
  std::runtime_error *v285;
  std::runtime_error *v286;
  std::runtime_error *v287;
  std::runtime_error *v288;
  std::runtime_error *v289;
  std::runtime_error *v290;
  std::runtime_error *v291;
  std::runtime_error *v292;
  uint64_t *v293;
  _QWORD *v294;
  CFIndex v295;
  BOOL v296;
  CFIndex v297;
  const void *v298;
  CFIndex v299;
  const __CFArray *v300;
  const __CFArray *v301;
  unint64_t v302;
  CFIndex Count;
  std::string::size_type v305;
  _BOOL4 v306;
  unsigned int *v307;
  const __CFArray *v309;
  unint64_t v310;
  uint64_t v311;
  _BOOL4 v312;
  _BOOL4 v313;
  int v314;
  unint64_t v315;
  std::string::size_type v316;
  int v317;
  std::string::value_type *v318;
  uint64_t v319;
  uint64_t *v320;
  int v321;
  const void *v322;
  char v323;
  CFTypeRef v324;
  char v325;
  int64x2_t v326;
  char *v327;
  int64x2_t v328;
  unint64_t v329;
  __int128 v330;
  uint64_t v331;
  _DWORD v332[2];
  __int128 v333;
  uint64_t v334;
  uint64_t v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  CFArrayRef v341;
  char v342;
  CFArrayRef theArray;
  char v344;
  const __CFNumber *v345;
  const __CFString *v346;
  char v347;
  uint64_t v348;
  std::string v349;
  std::string v350;
  std::string v351;
  std::string v352;
  __int128 v353;
  unint64_t v354;
  std::string v355;
  uint64_t v356;
  int v357;
  char v358;
  CFTypeRef v359;
  CFTypeRef v360;
  std::string v361;
  CFTypeRef v362;
  CFTypeRef v363;
  CFTypeRef v364;
  std::string v365;
  __int16 v366;
  std::string *v367;
  std::string cf;
  __int128 v369;
  void *__p;
  _BYTE v371[15];
  char v372;
  unint64_t v373;
  int v374;
  __int128 v375;
  _BYTE v376[44];
  __int128 v377;
  int v378;
  char v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  _BYTE valuePtr[32];
  unint64_t *v384;
  std::string v385;
  unint64_t v386;
  __int128 *v387;
  __int128 *v388;
  CFTypeRef v389;
  _BYTE v390[64];
  __int128 v391;
  __int128 v392;
  __int128 v393;
  std::string __src;
  unint64_t v395;
  unint64_t *v396;
  uint64_t v397;

  v397 = *MEMORY[0x1E0C80C00];
  if (!*a5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_638;
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "uid");
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v346, *a5, cf.__r_.__value_.__l.__data_);
  if (cf.__r_.__value_.__r.__words[0])
    CFRelease(cf.__r_.__value_.__l.__data_);
  if (!v347)
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v346);
  }
  if (!*a5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_638;
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "stacked channel policy");
  *(_DWORD *)valuePtr = 0;
  v389 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
  if (!v389)
  {
    v279 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v279, "Could not construct");
    __cxa_throw(v279, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v345, *a5, cf.__r_.__value_.__l.__data_, &v389);
  if (v389)
    CFRelease(v389);
  if (cf.__r_.__value_.__r.__words[0])
    CFRelease(cf.__r_.__value_.__l.__data_);
  v14 = v345;
  if (!v345 || (v15 = applesauce::CF::convert_to<BOOL,0>(v345), !*a5))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_638;
  }
  v16 = v15;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "subdevices");
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&theArray, *a5, cf.__r_.__value_.__l.__data_);
  if (cf.__r_.__value_.__r.__words[0])
    CFRelease(cf.__r_.__value_.__l.__data_);
  if (v344)
  {
    if (!theArray)
      goto LABEL_610;
    v17 = CFArrayGetCount(theArray) != 0;
  }
  else
  {
    v17 = 0;
  }
  if (!*a5)
  {
LABEL_610:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_638;
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "taps");
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v341, *a5, cf.__r_.__value_.__l.__data_);
  if (cf.__r_.__value_.__r.__words[0])
    CFRelease(cf.__r_.__value_.__l.__data_);
  if (v342)
  {
    if (!v341)
      goto LABEL_628;
    v18 = CFArrayGetCount(v341) != 0;
  }
  else
  {
    v18 = 0;
  }
  if (v17 || v18)
  {
    if (v346)
    {
      applesauce::CF::convert_to<std::string,0>((uint64_t)&v330, v346);
      v332[0] = 0;
      v333 = v330;
      v334 = v331;
      v330 = 0uLL;
      v331 = 0;
      v335 = 0x100000000;
      v336 = 0u;
      v337 = 0u;
      v338 = 0u;
      v339 = 0u;
      v340 = 0u;
      AMCP::Node_Description::Node_Description((AMCP::Node_Description *)&cf, (const AMCP::Node_Description *)v332);
      v319 = a6;
      v19 = a7;
      v20 = a4;
      v306 = v18;
      v326 = 0uLL;
      v327 = 0;
      v389 = &v326;
      v390[0] = 0;
      v326.i64[0] = (uint64_t)operator new(0x78uLL);
      v326.i64[1] = v326.i64[0];
      v21 = v326.i64[0] + 120;
      v327 = (char *)(v326.i64[0] + 120);
      AMCP::Node_Description::Node_Description((AMCP::Node_Description *)v326.i64[0], (const AMCP::Node_Description *)&cf);
      v314 = !v16;
      v326.i64[1] = v21;
      v328 = 0uLL;
      v22 = 96;
      v329 = 0;
      do
      {
        v389 = (char *)&cf + v22;
        std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v389);
        v22 -= 24;
      }
      while (v22 != 48);
      v24 = v18;
      if (v372 < 0)
        operator delete(__p);
      if (SBYTE7(v369) < 0)
      {
        operator delete((void *)cf.__r_.__value_.__l.__size_);
        if (!v17)
          goto LABEL_310;
      }
      else if (!v17)
      {
        goto LABEL_310;
      }
      v389 = 0;
      *((_QWORD *)&v392 + 1) = 0;
      memset(&v390[8], 0, 48);
      if (!*a5)
      {
        v288 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v288, "Could not construct");
        __cxa_throw(v288, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "subdevices");
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v355, *a5, cf.__r_.__value_.__l.__data_);
      v25 = (AMCP::Log::Scope_Registry *)cf.__r_.__value_.__r.__words[0];
      if (cf.__r_.__value_.__r.__words[0])
        CFRelease(cf.__r_.__value_.__l.__data_);
      if (!v355.__r_.__value_.__s.__data_[8])
      {
        AMCP::Log::Scope_Registry::get(v25);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
        v252 = *(NSObject **)cf.__r_.__value_.__l.__data_;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&cf);
        if (os_log_type_enabled(v252, OS_LOG_TYPE_ERROR))
        {
          v253 = pthread_self();
          v254 = pthread_mach_thread_np(v253);
          LODWORD(cf.__r_.__value_.__l.__data_) = 67109890;
          HIDWORD(cf.__r_.__value_.__r.__words[0]) = v254;
          LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
          WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf.__r_.__value_.__r.__words[2]) = 711;
          LOWORD(v369) = 2080;
          *(_QWORD *)((char *)&v369 + 2) = "subdevice_array_opt.has_value()";
          _os_log_error_impl(&dword_1B57BA000, v252, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s This should not be called if there are no subdevices", (uint8_t *)&cf, 0x22u);
        }
        abort();
      }
      if (!v355.__r_.__value_.__r.__words[0])
      {
        v289 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v289, "Could not construct");
        __cxa_throw(v289, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&__src, (CFArrayRef)v355.__r_.__value_.__l.__data_, 0);
      if (!v355.__r_.__value_.__s.__data_[8])
        std::__throw_bad_optional_access[abi:ne180100]();
      if (!v355.__r_.__value_.__r.__words[0])
      {
        v290 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v290, "Could not construct");
        __cxa_throw(v290, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::at_as<applesauce::CF::ArrayRef>(&v365, (CFArrayRef)v355.__r_.__value_.__l.__data_);
      if (!(__src.__r_.__value_.__s.__data_[8] | v365.__r_.__value_.__s.__data_[8]))
      {
        AMCP::Log::Scope_Registry::get(v26);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
        size = (std::__shared_weak_count *)cf.__r_.__value_.__l.__size_;
        v32 = *(NSObject **)cf.__r_.__value_.__l.__data_;
        if (cf.__r_.__value_.__l.__size_)
        {
          v33 = (unint64_t *)(cf.__r_.__value_.__l.__size_ + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          v35 = pthread_self();
          v36 = pthread_mach_thread_np(v35);
          LODWORD(cf.__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(cf.__r_.__value_.__r.__words[0]) = v36;
          LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
          WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf.__r_.__value_.__r.__words[2]) = 717;
          _os_log_debug_impl(&dword_1B57BA000, v32, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Invalid subdevice list", (uint8_t *)&cf, 0x18u);
        }
        goto LABEL_85;
      }
      v390[0] = __src.__r_.__value_.__s.__data_[8];
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v361, "stacked");
      if (*a5)
      {
        v27 = applesauce::CF::details::at_key<applesauce::CF::StringRef>(*a5, v361.__r_.__value_.__l.__data_);
        if (v27)
        {
          v28 = v27;
          CFRetain(v27);
          v29 = CFGetTypeID(v28);
          if (v29 == CFBooleanGetTypeID())
          {
            cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
            cf.__r_.__value_.__s.__data_[8] = 1;
            v30 = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)v28);
            goto LABEL_64;
          }
          CFRelease(v28);
        }
        cf.__r_.__value_.__s.__data_[0] = 0;
        cf.__r_.__value_.__s.__data_[8] = 0;
        if (*a5)
        {
          applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,applesauce::CF::StringRef>(valuePtr, *a5, v361.__r_.__value_.__l.__data_);
          if (!valuePtr[8])
          {
            v30 = 0;
            goto LABEL_63;
          }
          if (*(_QWORD *)valuePtr)
          {
            v30 = applesauce::CF::convert_to<BOOL,0>(*(const __CFNumber **)valuePtr);
LABEL_63:
            std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)valuePtr);
LABEL_64:
            std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
            if (v361.__r_.__value_.__r.__words[0])
              CFRelease(v361.__r_.__value_.__l.__data_);
            v390[56] = v30;
            if (__src.__r_.__value_.__s.__data_[8])
              v37 = v30;
            else
              v37 = 1;
            if ((v37 & 1) != 0)
            {
              if (__src.__r_.__value_.__s.__data_[8] && v30)
              {
                v38 = v355.__r_.__value_.__r.__words[0];
                if (v355.__r_.__value_.__r.__words[0])
                  CFRetain(v355.__r_.__value_.__l.__data_);
                *(_QWORD *)valuePtr = v38;
                std::vector<void const*>::vector(&cf, 1uLL);
                *(_QWORD *)cf.__r_.__value_.__l.__data_ = *(_QWORD *)valuePtr;
                CFArray = applesauce::CF::details::make_CFArrayRef<void const*>((const void **)cf.__r_.__value_.__l.__data_, cf.__r_.__value_.__l.__size_);
                if (cf.__r_.__value_.__r.__words[0])
                {
                  cf.__r_.__value_.__l.__size_ = cf.__r_.__value_.__r.__words[0];
                  operator delete(cf.__r_.__value_.__l.__data_);
                }
                if (*(_QWORD *)valuePtr)
                  CFRelease(*(CFTypeRef *)valuePtr);
                goto LABEL_84;
              }
              if (!v355.__r_.__value_.__s.__data_[8])
                std::__throw_bad_optional_access[abi:ne180100]();
              CFArray = (CFArrayRef)v355.__r_.__value_.__r.__words[0];
              if (v355.__r_.__value_.__r.__words[0])
              {
                CFRetain(v355.__r_.__value_.__l.__data_);
LABEL_84:
                v389 = CFArray;
                CFRetain(CFArray);
                CFRelease(CFArray);
                goto LABEL_85;
              }
              v389 = 0;
            }
            else
            {
              if (!v355.__r_.__value_.__s.__data_[8])
                std::__throw_bad_optional_access[abi:ne180100]();
              v389 = (CFTypeRef)v355.__r_.__value_.__r.__words[0];
              if (v355.__r_.__value_.__r.__words[0])
                CFRetain(v355.__r_.__value_.__l.__data_);
            }
LABEL_85:
            std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v365);
            std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__src);
            std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v355);
            std::vector<BOOL>::operator=((void **)&v390[8], v319);
            std::vector<BOOL>::operator=((void **)&v390[32], v19);
            v40 = (_QWORD *)a8[3];
            if (v40)
            {
              if (v40 == a8)
              {
                *(_QWORD *)&v369 = &cf;
                (*(void (**)(_QWORD *, std::string *))(*a8 + 24))(a8, &cf);
                v41 = (std::string *)v369;
              }
              else
              {
                v41 = (std::string *)(*(uint64_t (**)(_QWORD *))(*v40 + 16))(v40);
                *(_QWORD *)&v369 = v41;
              }
              p_cf = (std::string *)*((_QWORD *)&v392 + 1);
              if (v41 == &cf)
              {
                if (*((__int128 **)&v392 + 1) == &v391)
                {
                  (*(void (**)(std::string *, _BYTE *))(cf.__r_.__value_.__r.__words[0] + 24))(&cf, valuePtr);
                  (*(void (**)(_QWORD))(*(_QWORD *)v369 + 32))(v369);
                  *(_QWORD *)&v369 = 0;
                  (*(void (**)(_QWORD, std::string *))(**((_QWORD **)&v392 + 1) + 24))(*((_QWORD *)&v392 + 1), &cf);
                  (*(void (**)(_QWORD))(**((_QWORD **)&v392 + 1) + 32))(*((_QWORD *)&v392 + 1));
                  *((_QWORD *)&v392 + 1) = 0;
                  *(_QWORD *)&v369 = &cf;
                  (*(void (**)(_BYTE *, __int128 *))(*(_QWORD *)valuePtr + 24))(valuePtr, &v391);
                  (*(void (**)(_BYTE *))(*(_QWORD *)valuePtr + 32))(valuePtr);
                  *((_QWORD *)&v392 + 1) = &v391;
                  p_cf = (std::string *)v369;
                }
                else
                {
                  (*(void (**)(std::string *, __int128 *))(cf.__r_.__value_.__r.__words[0] + 24))(&cf, &v391);
                  (*(void (**)(_QWORD))(*(_QWORD *)v369 + 32))(v369);
                  p_cf = (std::string *)*((_QWORD *)&v392 + 1);
                  *(_QWORD *)&v369 = *((_QWORD *)&v392 + 1);
                  *((_QWORD *)&v392 + 1) = &v391;
                }
LABEL_98:
                if (p_cf == &cf)
                {
                  v43 = 4;
                  p_cf = &cf;
                }
                else
                {
                  if (!p_cf)
                    goto LABEL_103;
                  v43 = 5;
                }
LABEL_102:
                (*(void (**)(std::string *))(p_cf->__r_.__value_.__r.__words[0] + 8 * v43))(p_cf);
LABEL_103:
                *(_QWORD *)&v393 = a9;
                v44 = (AMCP::Log::Scope_Registry *)(*(_QWORD *(**)(std::string *__return_ptr, uint64_t, CFDictionaryRef *))(*(_QWORD *)*a2 + 96))(&v352, *a2, a5);
                if (v352.__r_.__value_.__s.__data_[16])
                {
                  v45 = (const void *)v352.__r_.__value_.__l.__size_;
                  v46 = v352.__r_.__value_.__r.__words[0];
                  if (v352.__r_.__value_.__l.__size_)
                  {
                    CFRetain((CFTypeRef)v352.__r_.__value_.__l.__size_);
                    v351.__r_.__value_.__r.__words[0] = v46;
                    v296 = v45 == 0;
LABEL_132:
                    CFRetain(v45);
                    v351.__r_.__value_.__l.__size_ = (std::string::size_type)v45;
                    if (v390[0] && !v390[56])
                    {
                      v44 = (AMCP::Log::Scope_Registry *)CFRetain(v45);
                      goto LABEL_146;
                    }
                    CFRetain(v45);
                    goto LABEL_152;
                  }
                  v351.__r_.__value_.__r.__words[0] = v352.__r_.__value_.__r.__words[0];
                  goto LABEL_144;
                }
                if (*a5)
                {
                  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "uid");
                  v47 = applesauce::CF::details::has_key<applesauce::CF::StringRef>(*a5, cf.__r_.__value_.__l.__data_);
                  v48 = (AMCP::Log::Scope_Registry *)cf.__r_.__value_.__r.__words[0];
                  if (cf.__r_.__value_.__r.__words[0])
                    CFRelease(cf.__r_.__value_.__l.__data_);
                  if (!v47)
                  {
                    AMCP::Log::Scope_Registry::get(v48);
                    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                    v275 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&cf);
                    if (os_log_type_enabled(v275, OS_LOG_TYPE_ERROR))
                    {
                      v276 = pthread_self();
                      v277 = pthread_mach_thread_np(v276);
                      LODWORD(cf.__r_.__value_.__l.__data_) = 67109890;
                      HIDWORD(cf.__r_.__value_.__r.__words[0]) = v277;
                      LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
                      *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                      WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
                      HIDWORD(cf.__r_.__value_.__r.__words[2]) = 511;
                      LOWORD(v369) = 2080;
                      *(_QWORD *)((char *)&v369 + 2) = "in_aggregate_description->has_key(AMCP::CF::String{kAudioAggregateDeviceUIDKey})";
                      _os_log_error_impl(&dword_1B57BA000, v275, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s We should have already exited if the aggregate UID were missing.", (uint8_t *)&cf, 0x22u);
                    }
                    abort();
                  }
                  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 48))(*a2, v20))
                  {
                    v49 = (AMCP::Log::Scope_Registry *)(*(_QWORD *(**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)*a2 + 72))(&cf, *a2, v20);
                    v45 = (const void *)cf.__r_.__value_.__r.__words[0];
LABEL_128:
                    if (v45)
                    {
                      v50 = *a2;
                      CFRetain(v45);
                      __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
                      v51 = (*(double (**)(uint64_t, std::string *))(*(_QWORD *)v50 + 80))(v50, &__src);
                      if (__src.__r_.__value_.__r.__words[0])
                        CFRelease(__src.__r_.__value_.__l.__data_);
                      CFRetain(v45);
                      CFRelease(v45);
                      v296 = 0;
                      *(double *)&v351.__r_.__value_.__l.__data_ = v51;
                      goto LABEL_132;
                    }
                    AMCP::Log::Scope_Registry::get(v49);
                    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                    v52 = (std::__shared_weak_count *)cf.__r_.__value_.__l.__size_;
                    v53 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                    if (cf.__r_.__value_.__l.__size_)
                    {
                      v54 = (unint64_t *)(cf.__r_.__value_.__l.__size_ + 8);
                      do
                        v55 = __ldaxr(v54);
                      while (__stlxr(v55 - 1, v54));
                      if (!v55)
                      {
                        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                        std::__shared_weak_count::__release_weak(v52);
                      }
                    }
                    v44 = (AMCP::Log::Scope_Registry *)os_log_type_enabled(v53, OS_LOG_TYPE_ERROR);
                    if ((_DWORD)v44)
                    {
                      v247 = pthread_self();
                      v248 = pthread_mach_thread_np(v247);
                      LODWORD(cf.__r_.__value_.__l.__data_) = 67109634;
                      HIDWORD(cf.__r_.__value_.__r.__words[0]) = v248;
                      LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
                      *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                      WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
                      HIDWORD(cf.__r_.__value_.__r.__words[2]) = 527;
                      _os_log_error_impl(&dword_1B57BA000, v53, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Unable to calculate clock and sample rate", (uint8_t *)&cf, 0x18u);
                    }
                    v45 = 0;
                    v351.__r_.__value_.__r.__words[0] = 0;
LABEL_144:
                    v351.__r_.__value_.__l.__size_ = 0;
                    v296 = 1;
                    if (v390[0] && !v390[56])
                    {
LABEL_146:
                      v324 = v45;
                      v325 = 1;
                      v56 = (_QWORD *)v326.i64[0];
                      if (v326.i64[1] - v326.i64[0] == 120)
                      {
                        if (*(_DWORD *)v326.i64[0])
                        {
                          AMCP::Log::Scope_Registry::get(v44);
                          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                          v267 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&cf);
                          if (!os_log_type_enabled(v267, OS_LOG_TYPE_ERROR))
                            goto LABEL_599;
                          v271 = pthread_self();
                          v272 = pthread_mach_thread_np(v271);
                          LODWORD(cf.__r_.__value_.__l.__data_) = 67109890;
                          HIDWORD(cf.__r_.__value_.__r.__words[0]) = v272;
                          LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
                          *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                          WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
                          HIDWORD(cf.__r_.__value_.__r.__words[2]) = 454;
                          LOWORD(v369) = 2080;
                          *(_QWORD *)((char *)&v369 + 2) = "in_out_graph.m_nodes[0].mNodeType == AMCP::Node_Type::IOContext";
                          v270 = "%6u %32s:%-5d Assertion Failed: %s The only node in the graph should be an IOC";
                        }
                        else
                        {
                          if (v328.i64[0] == v328.i64[1])
                          {
                            v353 = 0uLL;
                            v354 = 0;
                            HALIO::HALIO_Graph_Builder::connect_input_terminals(a2, (CFArrayRef *)&v389, &v390[8], v326.i64[0], (uint64_t)&v353, (double *)&v351, (uint64_t)&v391);
                            v320 = v56 + 9;
                            v349.__r_.__value_.__r.__words[0] = 0x4EC4EC4EC4EC4EC5
                                                              * ((uint64_t)(v56[10] - v56[9]) >> 3);
                            v315 = v393;
                            v309 = (const __CFArray *)v389;
                            if (v389)
                            {
                              Count = CFArrayGetCount((CFArrayRef)v389);
                              v301 = (const __CFArray *)v389;
                              v295 = v389 ? CFArrayGetCount((CFArrayRef)v389) : 0;
                              if (Count)
                              {
                                v311 = (uint64_t)(v56 + 1);
                                v310 = 0;
                                v298 = v45;
                                do
                                {
                                  if (v309 == v301 && v310 == v295)
                                    break;
                                  applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v364, v309, v310);
                                  if (!v364)
                                    goto LABEL_624;
                                  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "uid");
                                  *(_QWORD *)valuePtr = 0;
                                  applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v363, (const __CFDictionary *)v364, cf.__r_.__value_.__l.__data_, valuePtr);
                                  if (*(_QWORD *)valuePtr)
                                    CFRelease(*(CFTypeRef *)valuePtr);
                                  if (cf.__r_.__value_.__r.__words[0])
                                    CFRelease(cf.__r_.__value_.__l.__data_);
                                  if (!v364)
                                    goto LABEL_624;
                                  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)valuePtr, "latency-out");
                                  LODWORD(cf.__r_.__value_.__l.__data_) = 0;
                                  v365.__r_.__value_.__r.__words[0] = (std::string::size_type)CFNumberCreate(0, kCFNumberIntType, &cf);
                                  if (!v365.__r_.__value_.__r.__words[0])
                                  {
                                    v280 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                    std::runtime_error::runtime_error(v280, "Could not construct");
                                    __cxa_throw(v280, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                                  }
                                  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, (const __CFDictionary *)v364, *(const void **)valuePtr, &v365);
                                  v58 = (const void *)cf.__r_.__value_.__r.__words[0];
                                  if (!cf.__r_.__value_.__r.__words[0])
                                    goto LABEL_624;
                                  v317 = applesauce::CF::convert_to<int,0>((const __CFNumber *)cf.__r_.__value_.__l.__data_);
                                  CFRelease(v58);
                                  if (v365.__r_.__value_.__r.__words[0])
                                    CFRelease(v365.__r_.__value_.__l.__data_);
                                  if (*(_QWORD *)valuePtr)
                                    CFRelease(*(CFTypeRef *)valuePtr);
                                  if (!v364)
                                    goto LABEL_624;
                                  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)valuePtr, "don't pad");
                                  LODWORD(cf.__r_.__value_.__l.__data_) = 1;
                                  v365.__r_.__value_.__r.__words[0] = (std::string::size_type)CFNumberCreate(0, kCFNumberIntType, &cf);
                                  if (!v365.__r_.__value_.__r.__words[0])
                                  {
                                    v281 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                    std::runtime_error::runtime_error(v281, "Could not construct");
                                    __cxa_throw(v281, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                                  }
                                  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, (const __CFDictionary *)v364, *(const void **)valuePtr, &v365);
                                  v59 = (const void *)cf.__r_.__value_.__r.__words[0];
                                  if (!cf.__r_.__value_.__r.__words[0])
                                    goto LABEL_624;
                                  v60 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf.__r_.__value_.__l.__data_);
                                  CFRelease(v59);
                                  if (v365.__r_.__value_.__r.__words[0])
                                    CFRelease(v365.__r_.__value_.__l.__data_);
                                  if (*(_QWORD *)valuePtr)
                                    CFRelease(*(CFTypeRef *)valuePtr);
                                  if (!v364)
                                    goto LABEL_624;
                                  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)valuePtr, "drift");
                                  LODWORD(cf.__r_.__value_.__l.__data_) = 0;
                                  v365.__r_.__value_.__r.__words[0] = (std::string::size_type)CFNumberCreate(0, kCFNumberIntType, &cf);
                                  if (!v365.__r_.__value_.__r.__words[0])
                                  {
                                    v282 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                    std::runtime_error::runtime_error(v282, "Could not construct");
                                    __cxa_throw(v282, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                                  }
                                  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, (const __CFDictionary *)v364, *(const void **)valuePtr, &v365);
                                  v61 = (const void *)cf.__r_.__value_.__r.__words[0];
                                  if (!cf.__r_.__value_.__r.__words[0])
                                    goto LABEL_624;
                                  v62 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf.__r_.__value_.__l.__data_);
                                  CFRelease(v61);
                                  if (v365.__r_.__value_.__r.__words[0])
                                    CFRelease(v365.__r_.__value_.__l.__data_);
                                  if (*(_QWORD *)valuePtr)
                                    CFRelease(*(CFTypeRef *)valuePtr);
                                  if (!v364)
                                    goto LABEL_624;
                                  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)valuePtr, "drift algorithm");
                                  LODWORD(cf.__r_.__value_.__l.__data_) = 0;
                                  v365.__r_.__value_.__r.__words[0] = (std::string::size_type)CFNumberCreate(0, kCFNumberIntType, &cf);
                                  if (!v365.__r_.__value_.__r.__words[0])
                                  {
                                    v284 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                    std::runtime_error::runtime_error(v284, "Could not construct");
                                    __cxa_throw(v284, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                                  }
                                  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, (const __CFDictionary *)v364, *(const void **)valuePtr, &v365);
                                  v63 = (const void *)cf.__r_.__value_.__r.__words[0];
                                  if (!cf.__r_.__value_.__r.__words[0])
                                    goto LABEL_624;
                                  v64 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf.__r_.__value_.__l.__data_);
                                  CFRelease(v63);
                                  if (v365.__r_.__value_.__r.__words[0])
                                    CFRelease(v365.__r_.__value_.__l.__data_);
                                  if (*(_QWORD *)valuePtr)
                                    CFRelease(*(CFTypeRef *)valuePtr);
                                  if (!v364)
                                    goto LABEL_624;
                                  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)valuePtr, "drift quality");
                                  LODWORD(cf.__r_.__value_.__l.__data_) = 64;
                                  v365.__r_.__value_.__r.__words[0] = (std::string::size_type)CFNumberCreate(0, kCFNumberIntType, &cf);
                                  if (!v365.__r_.__value_.__r.__words[0])
                                  {
                                    v283 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                    std::runtime_error::runtime_error(v283, "Could not construct");
                                    __cxa_throw(v283, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                                  }
                                  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, (const __CFDictionary *)v364, *(const void **)valuePtr, &v365);
                                  v65 = (const void *)cf.__r_.__value_.__r.__words[0];
                                  if (!cf.__r_.__value_.__r.__words[0])
                                  {
LABEL_624:
                                    v285 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                    std::runtime_error::runtime_error(v285, "Could not construct");
                                    __cxa_throw(v285, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                                  }
                                  v66 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf.__r_.__value_.__l.__data_);
                                  CFRelease(v65);
                                  if (v365.__r_.__value_.__r.__words[0])
                                    CFRelease(v365.__r_.__value_.__l.__data_);
                                  if (*(_QWORD *)valuePtr)
                                    CFRelease(*(CFTypeRef *)valuePtr);
                                  v67 = *a2;
                                  v68 = v363;
                                  if (v363)
                                    CFRetain(v363);
                                  v362 = v68;
                                  v69 = (*(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v67 + 24))(v67, &v362);
                                  if (v362)
                                    CFRelease(v362);
                                  v70 = *a2;
                                  AMCP::create_device_node_uid_from_device_uid_and_direction((const __CFString **)&v363, 0, (void **)&cf.__r_.__value_.__l.__data_);
                                  if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                    v71 = &cf;
                                  else
                                    v71 = (std::string *)cf.__r_.__value_.__r.__words[0];
                                  if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                    v72 = HIBYTE(cf.__r_.__value_.__r.__words[2]);
                                  else
                                    v72 = cf.__r_.__value_.__l.__size_;
                                  v360 = CFStringCreateWithBytes(0, (const UInt8 *)v71, v72, 0x8000100u, 0);
                                  if (!v360)
                                  {
                                    v286 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                    std::runtime_error::runtime_error(v286, "Could not construct");
                                    __cxa_throw(v286, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                                  }
                                  v73 = (*(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v70 + 32))(v70, &v360);
                                  if (v360)
                                    CFRelease(v360);
                                  if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(cf.__r_.__value_.__l.__data_);
                                  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v69) & 1) == 0
                                    && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v73) & 1) == 0)
                                  {
                                    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)*a2 + 40))(&cf, *a2, v73);
                                    v359 = 0;
                                    v74 = *(_QWORD *)v376;
                                    if (*(_QWORD *)&v376[8] != *(_QWORD *)v376)
                                    {
                                      v75 = 0;
                                      v313 = v62 == 0;
                                      v312 = v60 != 0;
                                      do
                                      {
                                        v76 = v74 + 104 * v75;
                                        v77 = *(_QWORD *)v76;
                                        v78 = *(_DWORD *)(v76 + 8);
                                        v79 = *(_DWORD *)(v76 + 12);
                                        v350.__r_.__value_.__r.__words[0] = *(_QWORD *)(v76 + 16);
                                        v80 = *(_DWORD *)(v76 + 28);
                                        LODWORD(v350.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v76 + 24);
                                        v348 = *(_QWORD *)(v76 + 32);
                                        v81 = v351.__r_.__value_.__r.__words[0];
                                        if (*(double *)&v351.__r_.__value_.__l.__data_ == 0.0)
                                        {
                                          v351.__r_.__value_.__r.__words[0] = v77;
                                          v81 = v77;
                                        }
                                        v82 = v56[10];
                                        v83 = v56[11];
                                        if (v82 >= v83)
                                        {
                                          v85 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v82 - *v320) >> 3);
                                          v86 = v85 + 1;
                                          if ((unint64_t)(v85 + 1) > 0x276276276276276)
                                            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                                          v87 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v83 - *v320) >> 3);
                                          if (2 * v87 > v86)
                                            v86 = 2 * v87;
                                          if (v87 >= 0x13B13B13B13B13BLL)
                                            v88 = 0x276276276276276;
                                          else
                                            v88 = v86;
                                          v384 = v56 + 11;
                                          v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Terminal_Description>>(v88);
                                          v90 = &v89[104 * v85];
                                          *(_QWORD *)valuePtr = v89;
                                          *(_QWORD *)&valuePtr[8] = v90;
                                          *(_QWORD *)&valuePtr[24] = &v89[104 * v91];
                                          *(_QWORD *)v90 = v81;
                                          *((_DWORD *)v90 + 2) = v78;
                                          *((_DWORD *)v90 + 3) = v79;
                                          *((_QWORD *)v90 + 2) = v350.__r_.__value_.__r.__words[0];
                                          *((_DWORD *)v90 + 6) = v350.__r_.__value_.__r.__words[1];
                                          *((_DWORD *)v90 + 7) = v80;
                                          *((_QWORD *)v90 + 4) = v348;
                                          *(_OWORD *)(v90 + 72) = 0u;
                                          *(_OWORD *)(v90 + 56) = 0u;
                                          *(_OWORD *)(v90 + 40) = 0u;
                                          *((_QWORD *)v90 + 11) = 1;
                                          v90[96] = 0;
                                          *(_QWORD *)&valuePtr[16] = v90 + 104;
                                          std::vector<AMCP::Terminal_Description>::__swap_out_circular_buffer(v320, valuePtr);
                                          v84 = v56[10];
                                          std::__split_buffer<AMCP::Terminal_Description>::~__split_buffer((uint64_t)valuePtr);
                                        }
                                        else
                                        {
                                          *(_QWORD *)v82 = v81;
                                          *(_DWORD *)(v82 + 8) = v78;
                                          *(_DWORD *)(v82 + 12) = v79;
                                          *(_QWORD *)(v82 + 16) = v350.__r_.__value_.__r.__words[0];
                                          *(_DWORD *)(v82 + 24) = v350.__r_.__value_.__r.__words[1];
                                          *(_DWORD *)(v82 + 28) = v80;
                                          *(_QWORD *)(v82 + 32) = v348;
                                          *(_OWORD *)(v82 + 40) = 0u;
                                          *(_OWORD *)(v82 + 56) = 0u;
                                          *(_OWORD *)(v82 + 72) = 0u;
                                          *(_QWORD *)(v82 + 88) = 1;
                                          v84 = v82 + 104;
                                          *(_BYTE *)(v82 + 96) = 0;
                                        }
                                        v56[10] = v84;
                                        if (*(_QWORD *)&v390[40] <= v75
                                          || ((*(_QWORD *)(*(_QWORD *)&v390[32] + ((v75 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v75) & 1) != 0)
                                        {
                                          v92 = *((_QWORD *)&v353 + 1);
                                          if (*((_QWORD *)&v353 + 1) >= v354)
                                          {
                                            v94 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v353 + 1) - v353) >> 6);
                                            v95 = v94 + 1;
                                            if (v94 + 1 > 0x155555555555555)
                                              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                                            if (0x5555555555555556 * ((uint64_t)(v354 - v353) >> 6) > v95)
                                              v95 = 0x5555555555555556 * ((uint64_t)(v354 - v353) >> 6);
                                            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v354 - v353) >> 6) >= 0xAAAAAAAAAAAAAALL)
                                              v96 = 0x155555555555555;
                                            else
                                              v96 = v95;
                                            v384 = &v354;
                                            if (v96)
                                              v96 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Description>>(v96);
                                            else
                                              v97 = 0;
                                            *(_QWORD *)valuePtr = v96;
                                            *(_QWORD *)&valuePtr[8] = v96 + 192 * v94;
                                            *(_QWORD *)&valuePtr[16] = *(_QWORD *)&valuePtr[8];
                                            *(_QWORD *)&valuePtr[24] = v96 + 192 * v97;
                                            std::construct_at[abi:ne180100]<AMCP::Wire_Description,std::string &,unsigned long &,std::string const&,unsigned long &,AMCP::Wire_Description*>(*(uint64_t *)&valuePtr[8], v311, (uint64_t *)&v349, (uint64_t)&cf.__r_.__value_.__l.__size_, (uint64_t *)&v359);
                                            v98 = *(_QWORD *)&valuePtr[8];
                                            v93 = *(_QWORD *)&valuePtr[16] + 192;
                                            *(_QWORD *)&valuePtr[16] += 192;
                                            v99 = (__int128 *)*((_QWORD *)&v353 + 1);
                                            v100 = (__int128 *)v353;
                                            if (*((_QWORD *)&v353 + 1) == (_QWORD)v353)
                                            {
                                              v101 = vdupq_n_s64(*((unint64_t *)&v353 + 1));
                                            }
                                            else
                                            {
                                              do
                                              {
                                                v99 -= 12;
                                                std::construct_at[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description,AMCP::Wire_Description*>(v98 - 192, v99);
                                              }
                                              while (v99 != v100);
                                              v101 = (int64x2_t)v353;
                                              v93 = *(_QWORD *)&valuePtr[16];
                                            }
                                            *(_QWORD *)&v353 = v98;
                                            *((_QWORD *)&v353 + 1) = v93;
                                            *(int64x2_t *)&valuePtr[8] = v101;
                                            v102 = v354;
                                            v354 = *(_QWORD *)&valuePtr[24];
                                            *(_QWORD *)&valuePtr[24] = v102;
                                            *(_QWORD *)valuePtr = v101.i64[0];
                                            std::__split_buffer<AMCP::Wire_Description>::~__split_buffer((uint64_t)valuePtr);
                                          }
                                          else
                                          {
                                            std::construct_at[abi:ne180100]<AMCP::Wire_Description,std::string &,unsigned long &,std::string const&,unsigned long &,AMCP::Wire_Description*>(*((uint64_t *)&v353 + 1), v311, (uint64_t *)&v349, (uint64_t)&cf.__r_.__value_.__l.__size_, (uint64_t *)&v359);
                                            v93 = v92 + 192;
                                          }
                                          *((_QWORD *)&v353 + 1) = v93;
                                          *(_DWORD *)(v93 - 64) = v317;
                                          *(_DWORD *)(v93 - 48) = v313;
                                          *(_DWORD *)(v93 - 44) = v312;
                                          v103 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
                                          HALIO::Implementation::maybe_create_mono_mix_map(valuePtr, v103, v79, v80, v315);
                                          v104 = *(void **)(v93 - 88);
                                          if (v104)
                                          {
                                            *(_QWORD *)(v93 - 80) = v104;
                                            operator delete(v104);
                                          }
                                          *(_OWORD *)(v93 - 88) = *(_OWORD *)valuePtr;
                                          *(_QWORD *)(v93 - 72) = *(_QWORD *)&valuePtr[16];
                                          *(_BYTE *)(v93 - 32) = 1;
                                          *(_DWORD *)(v93 - 40) = v64;
                                          *(_DWORD *)(v93 - 36) = v66;
                                          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v104);
                                          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)valuePtr, "com.apple.coreaudio", "AMCP");
                                          v105 = *(std::__shared_weak_count **)&valuePtr[8];
                                          v106 = **(NSObject ***)valuePtr;
                                          if (*(_QWORD *)&valuePtr[8])
                                          {
                                            v107 = (unint64_t *)(*(_QWORD *)&valuePtr[8] + 8);
                                            do
                                              v108 = __ldaxr(v107);
                                            while (__stlxr(v108 - 1, v107));
                                            if (!v108)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                                              std::__shared_weak_count::__release_weak(v105);
                                            }
                                          }
                                          if (os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG))
                                          {
                                            v109 = pthread_self();
                                            v110 = pthread_mach_thread_np(v109);
                                            if (*(char *)(v93 - 169) < 0)
                                            {
                                              std::string::__init_copy_ctor_external(&v355, *(const std::string::value_type **)(v93 - 192), *(_QWORD *)(v93 - 184));
                                            }
                                            else
                                            {
                                              v111 = *(_OWORD *)(v93 - 192);
                                              v355.__r_.__value_.__r.__words[2] = *(_QWORD *)(v93 - 176);
                                              *(_OWORD *)&v355.__r_.__value_.__l.__data_ = v111;
                                            }
                                            v112 = *(_QWORD *)(v93 - 168);
                                            v357 = *(_DWORD *)(v93 - 160);
                                            v356 = v112;
                                            if (*(char *)(v93 - 129) < 0)
                                            {
                                              std::string::__init_copy_ctor_external(&__src, *(const std::string::value_type **)(v93 - 152), *(_QWORD *)(v93 - 144));
                                            }
                                            else
                                            {
                                              v113 = *(_OWORD *)(v93 - 152);
                                              __src.__r_.__value_.__r.__words[2] = *(_QWORD *)(v93 - 136);
                                              *(_OWORD *)&__src.__r_.__value_.__l.__data_ = v113;
                                            }
                                            v114 = *(_QWORD *)(v93 - 128);
                                            LODWORD(v396) = *(_DWORD *)(v93 - 120);
                                            v395 = v114;
                                            *(std::string *)valuePtr = v355;
                                            memset(&v355, 0, sizeof(v355));
                                            *(_QWORD *)&valuePtr[24] = v356;
                                            LODWORD(v384) = v357;
                                            v385 = __src;
                                            memset(&__src, 0, sizeof(__src));
                                            LODWORD(v387) = (_DWORD)v396;
                                            v386 = v114;
                                            AMCP::Wire_Identifier_to_string(&v361, (const void **)valuePtr);
                                            v115 = &v361;
                                            if ((v361.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                              v115 = (std::string *)v361.__r_.__value_.__r.__words[0];
                                            LODWORD(v365.__r_.__value_.__l.__data_) = 67109890;
                                            HIDWORD(v365.__r_.__value_.__r.__words[0]) = v110;
                                            LOWORD(v365.__r_.__value_.__r.__words[1]) = 2080;
                                            *(std::string::size_type *)((char *)&v365.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                                            WORD1(v365.__r_.__value_.__r.__words[2]) = 1024;
                                            HIDWORD(v365.__r_.__value_.__r.__words[2]) = 274;
                                            v366 = 2080;
                                            v367 = v115;
                                            _os_log_debug_impl(&dword_1B57BA000, v106, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d -- %s", (uint8_t *)&v365, 0x22u);
                                            if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
                                              operator delete(v361.__r_.__value_.__l.__data_);
                                            if (SHIBYTE(v385.__r_.__value_.__r.__words[2]) < 0)
                                              operator delete(v385.__r_.__value_.__l.__data_);
                                            if ((valuePtr[23] & 0x80000000) != 0)
                                              operator delete(*(void **)valuePtr);
                                          }
                                        }
                                        ++v349.__r_.__value_.__r.__words[0];
                                        v75 = (unint64_t)v359 + 1;
                                        v359 = (CFTypeRef)v75;
                                        v74 = *(_QWORD *)v376;
                                      }
                                      while (v75 < 0x4EC4EC4EC4EC4EC5
                                                  * ((uint64_t)(*(_QWORD *)&v376[8] - *(_QWORD *)v376) >> 3));
                                    }
                                    for (i = 96; i != 48; i -= 24)
                                    {
                                      *(_QWORD *)valuePtr = (char *)&cf + i;
                                      std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)valuePtr);
                                    }
                                    if (v372 < 0)
                                      operator delete(__p);
                                    if (SBYTE7(v369) < 0)
                                      operator delete((void *)cf.__r_.__value_.__l.__size_);
                                    v68 = v363;
                                  }
                                  if (v68)
                                    CFRelease(v68);
                                  v45 = v298;
                                  if (v364)
                                    CFRelease(v364);
                                  ++v310;
                                }
                                while (v310 != Count);
                              }
                            }
                            cf.__r_.__value_.__s.__data_[0] = 0;
                            cf.__r_.__value_.__s.__data_[8] = 0;
                            v24 = v306;
                            if (v325)
                            {
                              if (v324)
                                CFRetain(v324);
                              cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v324;
                              cf.__r_.__value_.__s.__data_[8] = 1;
                            }
                            HALIO::HALIO_Graph_Builder::maybe_set_master_device(a2, (uint64_t)v56, (uint64_t)&cf);
                            std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
                            std::vector<AMCP::Wire_Description>::__assign_with_size[abi:ne180100]<AMCP::Wire_Description*,AMCP::Wire_Description*>((uint64_t)&v328, v353, *((uint64_t *)&v353 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v353 + 1) - v353) >> 6));
                            *(_QWORD *)valuePtr = &v353;
                            std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)valuePtr);
                            v57 = &v324;
LABEL_287:
                            std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v57);
                            if (*(double *)&v351.__r_.__value_.__l.__data_ != 0.0)
                            {
                              if (v351.__r_.__value_.__l.__size_)
                                CFRelease((CFTypeRef)v351.__r_.__value_.__l.__size_);
                              if (!v296)
                                CFRelease(v45);
                              std::__optional_destruct_base<std::tuple<double,applesauce::CF::StringRef>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v352);
                              v117 = &v391;
                              if (*((__int128 **)&v392 + 1) == &v391)
                              {
                                v118 = 4;
                              }
                              else
                              {
                                if (!*((_QWORD *)&v392 + 1))
                                {
LABEL_304:
                                  if (*(_QWORD *)&v390[32])
                                    operator delete(*(void **)&v390[32]);
                                  if (*(_QWORD *)&v390[8])
                                    operator delete(*(void **)&v390[8]);
                                  v23 = (AMCP::Log::Scope_Registry *)v389;
                                  if (v389)
                                    CFRelease(v389);
LABEL_310:
                                  if (!v24)
                                  {
LABEL_536:
                                    *(int64x2_t *)a1 = v326;
                                    *(_QWORD *)(a1 + 16) = v327;
                                    v327 = 0;
                                    v326 = 0uLL;
                                    *(int64x2_t *)(a1 + 24) = v328;
                                    *(_QWORD *)(a1 + 40) = v329;
                                    v329 = 0;
                                    v328 = 0uLL;
LABEL_537:
                                    cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v328;
                                    std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
                                    cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v326;
                                    std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
                                    for (j = 24; j != 12; j -= 6)
                                    {
                                      cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v332[j];
                                      std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
                                    }
                                    if (SBYTE7(v337) < 0)
                                      operator delete((void *)v336);
                                    if (SHIBYTE(v334) < 0)
                                      operator delete((void *)v333);
                                    v14 = v345;
                                    goto LABEL_544;
                                  }
                                  if (v326.i64[1] - v326.i64[0] == 120)
                                  {
                                    if (!*(_DWORD *)v326.i64[0])
                                    {
                                      if (v341)
                                      {
                                        v121 = CFArrayGetCount(v341);
                                        v122 = (_QWORD *)v326.i64[0];
                                        v123 = 0xEEEEEEEEEEEEEEEFLL * ((v326.i64[1] - v326.i64[0]) >> 3);
                                        v124 = v123 + v121;
                                        if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v327[-v326.i64[0]] >> 3) < v124)
                                        {
                                          if (v124 > 0x222222222222222)
                                            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                                          *((_QWORD *)&v369 + 1) = &v327;
                                          v125 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Node_Description>>(v124);
                                          v126 = (std::string::size_type)&v125[120 * v123];
                                          cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v125;
                                          cf.__r_.__value_.__l.__size_ = v126;
                                          v128 = &v125[120 * v127];
                                          cf.__r_.__value_.__r.__words[2] = v126;
                                          *(_QWORD *)&v369 = v128;
                                          v129 = v326.i64[1];
                                          v130 = v326.i64[0];
                                          if (v326.i64[1] == v326.i64[0])
                                          {
                                            v132 = vdupq_n_s64(v326.u64[1]);
                                            v131 = v126;
                                          }
                                          else
                                          {
                                            v131 = v126;
                                            do
                                            {
                                              v129 -= 120;
                                              std::construct_at[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description,AMCP::Node_Description*>(v131 - 120, v129);
                                            }
                                            while (v129 != v130);
                                            v132 = v326;
                                            v126 = cf.__r_.__value_.__r.__words[2];
                                            v128 = (char *)v369;
                                          }
                                          v326.i64[0] = v131;
                                          v326.i64[1] = v126;
                                          *(int64x2_t *)&cf.__r_.__value_.__r.__words[1] = v132;
                                          v133 = v327;
                                          v327 = v128;
                                          *(_QWORD *)&v369 = v133;
                                          cf.__r_.__value_.__r.__words[0] = v132.i64[0];
                                          std::__split_buffer<AMCP::Node_Description>::~__split_buffer((uint64_t)&cf);
                                          v122 = (_QWORD *)v326.i64[0];
                                        }
                                        v134 = (double *)v122[12];
                                        v293 = v122 + 12;
                                        v294 = v122;
                                        if ((double *)v122[13] == v134
                                          && (v134 = (double *)v122[9], (double *)v122[10] == v134))
                                        {
                                          v135 = 0.0;
                                        }
                                        else
                                        {
                                          v135 = *v134;
                                        }
                                        v300 = v341;
                                        if (v341)
                                        {
                                          v299 = CFArrayGetCount(v341);
                                          v297 = CFArrayGetCount(v300);
                                          if (v299)
                                          {
                                            v136 = 0;
                                            do
                                            {
                                              if (v136 == v297)
                                                break;
                                              applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v364, v300, v136);
                                              if (!v364)
                                              {
                                                v287 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                std::runtime_error::runtime_error(v287, "Could not construct");
                                                __cxa_throw(v287, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                                              }
                                              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "uid");
                                              v389 = 0;
                                              applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v363, (const __CFDictionary *)v364, cf.__r_.__value_.__l.__data_, &v389);
                                              if (v389)
                                                CFRelease(v389);
                                              v137 = (AMCP::Log::Scope_Registry *)cf.__r_.__value_.__r.__words[0];
                                              if (cf.__r_.__value_.__r.__words[0])
                                                CFRelease(cf.__r_.__value_.__l.__data_);
                                              v138 = (const __CFString *)v363;
                                              if (!v363)
                                              {
                                                AMCP::Log::Scope_Registry::get(v137);
                                                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                                                v249 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                                                std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&cf);
                                                if (os_log_type_enabled(v249, OS_LOG_TYPE_ERROR))
                                                {
                                                  v250 = pthread_self();
                                                  v251 = pthread_mach_thread_np(v250);
                                                  LODWORD(cf.__r_.__value_.__l.__data_) = 67109890;
                                                  HIDWORD(cf.__r_.__value_.__r.__words[0]) = v251;
                                                  LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
                                                  *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1]
                                                                            + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                                                  WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
                                                  HIDWORD(cf.__r_.__value_.__r.__words[2]) = 624;
                                                  LOWORD(v369) = 2080;
                                                  *(_QWORD *)((char *)&v369 + 2) = "tap_object.is_valid()";
                                                  _os_log_error_impl(&dword_1B57BA000, v249, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Tap must have a UID", (uint8_t *)&cf, 0x22u);
                                                }
                                                abort();
                                              }
                                              CFRetain(v363);
                                              v362 = v138;
                                              applesauce::CF::convert_to<std::string,0>((uint64_t)&cf, v138);
                                              v139 = std::string::insert(&cf, 0, "Refl_", 5uLL);
                                              v316 = v139->__r_.__value_.__l.__size_;
                                              v318 = (std::string::value_type *)v139->__r_.__value_.__r.__words[0];
                                              LODWORD(v348) = v139->__r_.__value_.__r.__words[2];
                                              *(_DWORD *)((char *)&v348 + 3) = *(_DWORD *)((char *)&v139->__r_.__value_.__r.__words[2]
                                                                                         + 3);
                                              v321 = SHIBYTE(v139->__r_.__value_.__r.__words[2]);
                                              v139->__r_.__value_.__l.__size_ = 0;
                                              v139->__r_.__value_.__r.__words[2] = 0;
                                              v139->__r_.__value_.__r.__words[0] = 0;
                                              if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
                                                operator delete(cf.__r_.__value_.__l.__data_);
                                              CFRelease(v138);
                                              v302 = v136;
                                              if (v321 < 0)
                                              {
                                                std::string::__init_copy_ctor_external(&v365, v318, v316);
                                              }
                                              else
                                              {
                                                v365.__r_.__value_.__r.__words[0] = (std::string::size_type)v318;
                                                v365.__r_.__value_.__l.__size_ = v316;
                                                LODWORD(v365.__r_.__value_.__r.__words[2]) = v348;
                                                *(_DWORD *)((char *)&v365.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)&v348 + 3);
                                                *((_BYTE *)&v365.__r_.__value_.__s + 23) = v321;
                                              }
                                              LODWORD(v389) = 2;
                                              *(std::string *)v390 = v365;
                                              memset(&v365, 0, sizeof(v365));
                                              *(_QWORD *)&v390[24] = 0x100000000;
                                              v391 = 0u;
                                              v392 = 0u;
                                              v393 = 0u;
                                              memset(&v390[32], 0, 32);
                                              *(_DWORD *)&v390[56] = 2;
                                              v140 = *a2;
                                              CFRetain(v138);
                                              v360 = v138;
                                              (*(void (**)(std::string *__return_ptr, uint64_t, CFTypeRef *))(*(_QWORD *)v140 + 112))(&v361, v140, &v360);
                                              v141 = (AMCP::Log::Scope_Registry *)v360;
                                              if (v360)
                                                CFRelease(v360);
                                              if (v361.__r_.__value_.__r.__words[0] == v361.__r_.__value_.__l.__size_)
                                              {
                                                AMCP::Log::Scope_Registry::get(v141);
                                                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                                                v180 = (std::__shared_weak_count *)cf.__r_.__value_.__l.__size_;
                                                v181 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                                                if (cf.__r_.__value_.__l.__size_)
                                                {
                                                  v182 = (unint64_t *)(cf.__r_.__value_.__l.__size_ + 8);
                                                  do
                                                    v183 = __ldaxr(v182);
                                                  while (__stlxr(v183 - 1, v182));
                                                  if (!v183)
                                                  {
                                                    ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                                                    std::__shared_weak_count::__release_weak(v180);
                                                  }
                                                }
                                                if (os_log_type_enabled(v181, OS_LOG_TYPE_DEBUG))
                                                {
                                                  v231 = pthread_self();
                                                  v232 = pthread_mach_thread_np(v231);
                                                  LODWORD(cf.__r_.__value_.__l.__data_) = 67109634;
                                                  HIDWORD(cf.__r_.__value_.__r.__words[0]) = v232;
                                                  LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
                                                  *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1]
                                                                            + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                                                  WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
                                                  HIDWORD(cf.__r_.__value_.__r.__words[2]) = 634;
                                                  _os_log_debug_impl(&dword_1B57BA000, v181, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALIO_Graph_Builder::add_reflectors_to_graph_description - Tapped IOCs is empty.", (uint8_t *)&cf, 0x18u);
                                                }
                                                v169 = 7;
                                              }
                                              else
                                              {
                                                v142 = *a2;
                                                CFRetain(v138);
                                                v359 = v138;
                                                v143 = (*(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v142 + 120))(v142, &v359);
                                                if (v359)
                                                  CFRelease(v359);
                                                v355.__r_.__value_.__s.__data_[0] = 0;
                                                v358 = 0;
                                                v305 = v361.__r_.__value_.__l.__size_;
                                                v144 = (unsigned int *)v361.__r_.__value_.__r.__words[0];
                                                if (v361.__r_.__value_.__r.__words[0] == v361.__r_.__value_.__l.__size_)
                                                {
                                                  v169 = 1;
                                                }
                                                else
                                                {
                                                  do
                                                  {
                                                    v145 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *v144);
                                                    if ((_DWORD)v145)
                                                    {
                                                      AMCP::Log::Scope_Registry::get(v145);
                                                      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                                                      v241 = (std::__shared_weak_count *)cf.__r_.__value_.__l.__size_;
                                                      v242 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                                                      if (cf.__r_.__value_.__l.__size_)
                                                      {
                                                        v243 = (unint64_t *)(cf.__r_.__value_.__l.__size_ + 8);
                                                        do
                                                          v244 = __ldaxr(v243);
                                                        while (__stlxr(v244 - 1, v243));
                                                        if (!v244)
                                                        {
                                                          ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
                                                          std::__shared_weak_count::__release_weak(v241);
                                                        }
                                                      }
                                                      if (os_log_type_enabled(v242, OS_LOG_TYPE_ERROR))
                                                      {
                                                        v245 = pthread_self();
                                                        v246 = pthread_mach_thread_np(v245);
                                                        LODWORD(cf.__r_.__value_.__l.__data_) = 67109890;
                                                        HIDWORD(cf.__r_.__value_.__r.__words[0]) = v246;
                                                        LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
                                                        *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1]
                                                                                  + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                                                        WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
                                                        HIDWORD(cf.__r_.__value_.__r.__words[2]) = 647;
                                                        LOWORD(v369) = 2080;
                                                        *(_QWORD *)((char *)&v369 + 2) = "m_connection->object_has_expire"
                                                                                         "d(tapped) == false";
                                                        _os_log_error_impl(&dword_1B57BA000, v242, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s HALIO_Graph_Builder::add_reflectors_to_graph_description - object connection is expired.", (uint8_t *)&cf, 0x22u);
                                                      }
                                                      abort();
                                                    }
                                                    (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)*a2 + 40))(valuePtr, *a2, *v144);
                                                    v307 = v144;
                                                    v353 = 0uLL;
                                                    v354 = 0;
                                                    v146 = (AMCP::Log::Scope_Registry *)std::vector<AMCP::Terminal_Description>::__init_with_size[abi:ne180100]<AMCP::Terminal_Description*,AMCP::Terminal_Description*>(&v353, v387, v388, 0x4EC4EC4EC4EC4EC5* (((char *)v388 - (char *)v387) >> 3));
                                                    if (*((_QWORD *)&v353 + 1) != (_QWORD)v353)
                                                    {
                                                      v147 = 0;
                                                      do
                                                      {
                                                        if (!v358)
                                                        {
                                                          if (v147)
                                                          {
                                                            AMCP::Log::Scope_Registry::get(v146);
                                                            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                                                            v235 = (std::__shared_weak_count *)cf.__r_.__value_.__l.__size_;
                                                            v236 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                                                            if (cf.__r_.__value_.__l.__size_)
                                                            {
                                                              v237 = (unint64_t *)(cf.__r_.__value_.__l.__size_
                                                                                        + 8);
                                                              do
                                                                v238 = __ldaxr(v237);
                                                              while (__stlxr(v238 - 1, v237));
                                                              if (!v238)
                                                              {
                                                                ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
                                                                std::__shared_weak_count::__release_weak(v235);
                                                              }
                                                            }
                                                            if (os_log_type_enabled(v236, OS_LOG_TYPE_ERROR))
                                                            {
                                                              v239 = pthread_self();
                                                              v240 = pthread_mach_thread_np(v239);
                                                              LODWORD(cf.__r_.__value_.__l.__data_) = 67109890;
                                                              HIDWORD(cf.__r_.__value_.__r.__words[0]) = v240;
                                                              LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
                                                              *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1]
                                                                                        + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                                                              WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
                                                              HIDWORD(cf.__r_.__value_.__r.__words[2]) = 656;
                                                              LOWORD(v369) = 2080;
                                                              *(_QWORD *)((char *)&v369 + 2) = "index == 0";
                                                              _os_log_error_impl(&dword_1B57BA000, v236, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s We should hit this for the first terminal", (uint8_t *)&cf, 0x22u);
                                                            }
                                                            abort();
                                                          }
                                                          std::construct_at[abi:ne180100]<AMCP::Terminal_Description,AMCP::Terminal_Description&,AMCP::Terminal_Description*>((uint64_t)&v355, v387);
                                                          v358 = 1;
                                                        }
                                                        if ((valuePtr[31] & 0x80000000) != 0)
                                                          std::string::__init_copy_ctor_external(&v352, *(const std::string::value_type **)&valuePtr[8], *(std::string::size_type *)&valuePtr[16]);
                                                        else
                                                          v352 = *(std::string *)&valuePtr[8];
                                                        if (v321 < 0)
                                                        {
                                                          std::string::__init_copy_ctor_external(&v351, v318, v316);
                                                          v148 = (std::string::value_type *)v351.__r_.__value_.__r.__words[0];
                                                          v149 = HIBYTE(v351.__r_.__value_.__r.__words[2]);
                                                        }
                                                        else
                                                        {
                                                          v148 = v318;
                                                          v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v318;
                                                          v351.__r_.__value_.__l.__size_ = v316;
                                                          LODWORD(v351.__r_.__value_.__r.__words[2]) = v348;
                                                          *(_DWORD *)((char *)&v351.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)&v348 + 3);
                                                          v149 = v321;
                                                        }
                                                        cf.__r_.__value_.__l.__size_ = v352.__r_.__value_.__l.__size_;
                                                        v150 = v352.__r_.__value_.__r.__words[0];
                                                        *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1]
                                                                                  + 7) = *(std::string::size_type *)((char *)&v352.__r_.__value_.__r.__words[1] + 7);
                                                        v151 = HIBYTE(v352.__r_.__value_.__r.__words[2]);
                                                        memset(&v352, 0, sizeof(v352));
                                                        cf.__r_.__value_.__r.__words[0] = v150;
                                                        *((_BYTE *)&cf.__r_.__value_.__s + 23) = v151;
                                                        *(_QWORD *)&v369 = v147;
                                                        DWORD2(v369) = 0;
                                                        *(_QWORD *)v371 = v351.__r_.__value_.__l.__size_;
                                                        *(_QWORD *)&v371[7] = *(std::string::size_type *)((char *)&v351.__r_.__value_.__r.__words[1] + 7);
                                                        memset(&v351, 0, sizeof(v351));
                                                        __p = v148;
                                                        v372 = v149;
                                                        v373 = 0;
                                                        memset(v376, 0, sizeof(v376));
                                                        v375 = 0u;
                                                        v378 = 64;
                                                        v380 = 0;
                                                        v381 = 0;
                                                        v382 = 0;
                                                        v374 = 1;
                                                        *(_DWORD *)&v376[36] = 1;
                                                        v377 = xmmword_1B5D68B90;
                                                        v379 = 1;
                                                        v152 = (char *)v387 + 104 * v147;
                                                        v153 = *((_DWORD *)v152 + 3);
                                                        v154 = *((_DWORD *)v152 + 7);
                                                        if (v143)
                                                        {
                                                          HALIO::Implementation::maybe_create_mono_mix_map(&__src, 1, v153, v154, 0x200000001uLL);
                                                          if (*(_QWORD *)&v376[8])
                                                          {
                                                            *(_QWORD *)&v376[16] = *(_QWORD *)&v376[8];
                                                            operator delete(*(void **)&v376[8]);
                                                          }
                                                          *(std::string *)&v376[8] = __src;
                                                          LODWORD(__src.__r_.__value_.__l.__data_) = 0;
                                                          std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)&v375, (char *)&__src, (uint64_t)__src.__r_.__value_.__r.__words + 4, 1uLL);
                                                        }
                                                        else
                                                        {
                                                          if ((v153 & 0x20) != 0)
                                                            v155 = *((_DWORD *)v152 + 7);
                                                          else
                                                            v155 = 1;
                                                          if ((v153 & 0x20) != 0)
                                                            v156 = 1;
                                                          else
                                                            v156 = v154;
                                                          if (v155 <= v156)
                                                            v155 = v156;
                                                          if (v155 < 2)
                                                            __src.__r_.__value_.__r.__words[0] = 0;
                                                          else
                                                            __src.__r_.__value_.__r.__words[0] = 0x100000000;
                                                          std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)&v375, (char *)&__src, (uint64_t)&__src.__r_.__value_.__l.__size_, 2uLL);
                                                        }
                                                        v157 = v328.i64[1];
                                                        if (v328.i64[1] >= v329)
                                                        {
                                                          v159 = 0xAAAAAAAAAAAAAAABLL
                                                               * ((v328.i64[1] - v328.i64[0]) >> 6);
                                                          v160 = v159 + 1;
                                                          if (v159 + 1 > 0x155555555555555)
                                                            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                                                          if (0x5555555555555556
                                                             * ((uint64_t)(v329 - v328.i64[0]) >> 6) > v160)
                                                            v160 = 0x5555555555555556
                                                                 * ((uint64_t)(v329 - v328.i64[0]) >> 6);
                                                          if (0xAAAAAAAAAAAAAAABLL
                                                             * ((uint64_t)(v329 - v328.i64[0]) >> 6) >= 0xAAAAAAAAAAAAAALL)
                                                            v161 = 0x155555555555555;
                                                          else
                                                            v161 = v160;
                                                          v396 = &v329;
                                                          if (v161)
                                                            v161 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Description>>(v161);
                                                          else
                                                            v162 = 0;
                                                          __src.__r_.__value_.__r.__words[0] = v161;
                                                          __src.__r_.__value_.__l.__size_ = v161 + 192 * v159;
                                                          __src.__r_.__value_.__r.__words[2] = __src.__r_.__value_.__l.__size_;
                                                          v395 = v161 + 192 * v162;
                                                          AMCP::Wire_Description::Wire_Description((std::string *)__src.__r_.__value_.__l.__size_, (const AMCP::Wire_Description *)&cf);
                                                          v163 = __src.__r_.__value_.__l.__size_;
                                                          v158 = __src.__r_.__value_.__r.__words[2] + 192;
                                                          __src.__r_.__value_.__r.__words[2] += 192;
                                                          v164 = (__int128 *)v328.i64[1];
                                                          v165 = (__int128 *)v328.i64[0];
                                                          if (v328.i64[1] == v328.i64[0])
                                                          {
                                                            v166 = vdupq_n_s64(v328.u64[1]);
                                                          }
                                                          else
                                                          {
                                                            do
                                                            {
                                                              v164 -= 12;
                                                              std::construct_at[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description,AMCP::Wire_Description*>(v163 - 192, v164);
                                                            }
                                                            while (v164 != v165);
                                                            v166 = v328;
                                                            v158 = __src.__r_.__value_.__r.__words[2];
                                                          }
                                                          v328.i64[0] = v163;
                                                          v328.i64[1] = v158;
                                                          *(int64x2_t *)&__src.__r_.__value_.__r.__words[1] = v166;
                                                          v167 = v329;
                                                          v329 = v395;
                                                          v395 = v167;
                                                          __src.__r_.__value_.__r.__words[0] = v166.i64[0];
                                                          std::__split_buffer<AMCP::Wire_Description>::~__split_buffer((uint64_t)&__src);
                                                        }
                                                        else
                                                        {
                                                          AMCP::Wire_Description::Wire_Description((std::string *)v328.i64[1], (const AMCP::Wire_Description *)&cf);
                                                          v158 = v157 + 192;
                                                        }
                                                        v328.i64[1] = v158;
                                                        __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v380;
                                                        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
                                                        if (*(_QWORD *)&v376[8])
                                                        {
                                                          *(_QWORD *)&v376[16] = *(_QWORD *)&v376[8];
                                                          operator delete(*(void **)&v376[8]);
                                                        }
                                                        v146 = (AMCP::Log::Scope_Registry *)v375;
                                                        if ((_QWORD)v375)
                                                        {
                                                          *((_QWORD *)&v375 + 1) = v375;
                                                          operator delete((void *)v375);
                                                        }
                                                        if (v372 < 0)
                                                          operator delete(__p);
                                                        if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
                                                          operator delete(cf.__r_.__value_.__l.__data_);
                                                        ++v147;
                                                      }
                                                      while (v147 < 0x4EC4EC4EC4EC4EC5
                                                                   * ((uint64_t)(*((_QWORD *)&v353 + 1) - v353) >> 3));
                                                    }
                                                    cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v353;
                                                    std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
                                                    for (k = 96; k != 48; k -= 24)
                                                    {
                                                      cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&valuePtr[k];
                                                      std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
                                                    }
                                                    if (SHIBYTE(v385.__r_.__value_.__r.__words[2]) < 0)
                                                      operator delete(v385.__r_.__value_.__l.__data_);
                                                    if ((valuePtr[31] & 0x80000000) != 0)
                                                      operator delete(*(void **)&valuePtr[8]);
                                                    v144 = v307 + 1;
                                                  }
                                                  while (v307 + 1 != (unsigned int *)v305);
                                                  v169 = 1;
                                                  if (v358)
                                                  {
                                                    if (v143)
                                                      v170 = 1;
                                                    else
                                                      v170 = 2;
                                                    if ((v355.__r_.__value_.__s.__data_[12] & 0x20) != 0
                                                      || (v169 = HIDWORD(v356)) != 0)
                                                    {
                                                      v171 = v356 / v169;
                                                    }
                                                    else
                                                    {
                                                      v171 = (v357 + 7) >> 3;
                                                    }
                                                    HIDWORD(v356) = v170;
                                                    v172 = v143 ^ 1;
                                                    if ((v355.__r_.__value_.__s.__data_[12] & 0x20) != 0)
                                                      v172 = 0;
                                                    HIDWORD(v355.__r_.__value_.__r.__words[2]) = 1;
                                                    LODWORD(v356) = v171 << v172;
                                                    LODWORD(v355.__r_.__value_.__r.__words[2]) = v171 << v172;
                                                    v173 = v294[12];
                                                    v174 = v294[13];
                                                    v175 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v174 - v173) >> 3);
                                                    v176 = v294[14];
                                                    if (v174 >= v176)
                                                    {
                                                      v177 = v321;
                                                      if (v175 + 1 > 0x276276276276276)
                                                        goto LABEL_636;
                                                      v184 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v176 - v173) >> 3);
                                                      v185 = 2 * v184;
                                                      if (2 * v184 <= v175 + 1)
                                                        v185 = v175 + 1;
                                                      if (v184 >= 0x13B13B13B13B13BLL)
                                                        v186 = 0x276276276276276;
                                                      else
                                                        v186 = v185;
                                                      *((_QWORD *)&v369 + 1) = v294 + 14;
                                                      if (v186)
                                                        v186 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Terminal_Description>>(v186);
                                                      else
                                                        v187 = 0;
                                                      cf.__r_.__value_.__r.__words[0] = v186;
                                                      cf.__r_.__value_.__l.__size_ = v186 + 104 * v175;
                                                      cf.__r_.__value_.__r.__words[2] = cf.__r_.__value_.__l.__size_;
                                                      *(_QWORD *)&v369 = v186 + 104 * v187;
                                                      std::construct_at[abi:ne180100]<AMCP::Terminal_Description,AMCP::Terminal_Description const&,AMCP::Terminal_Description*>(cf.__r_.__value_.__l.__size_, (__int128 *)&v355);
                                                      cf.__r_.__value_.__r.__words[2] += 104;
                                                      std::vector<AMCP::Terminal_Description>::__swap_out_circular_buffer(v293, &cf);
                                                      v179 = v294;
                                                      v178 = v294[13];
                                                      std::__split_buffer<AMCP::Terminal_Description>::~__split_buffer((uint64_t)&cf);
                                                    }
                                                    else
                                                    {
                                                      std::construct_at[abi:ne180100]<AMCP::Terminal_Description,AMCP::Terminal_Description const&,AMCP::Terminal_Description*>(v294[13], (__int128 *)&v355);
                                                      v177 = v321;
                                                      v178 = v174 + 104;
                                                      v179 = v294;
                                                    }
                                                    v179[13] = v178;
                                                    v188 = v179[12];
                                                    v189 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v178 - v188) >> 3);
                                                    if (v135 == 0.0)
                                                    {
                                                      if (v189 <= v175)
                                                        goto LABEL_635;
                                                      v135 = *(double *)(v188 + 104 * v175);
                                                    }
                                                    if (v189 <= v175)
LABEL_635:
                                                      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
                                                    *(double *)(v188 + 104 * v175) = v135;
                                                    if (!v358)
                                                      goto LABEL_630;
                                                    v190 = *((_QWORD *)&v391 + 1);
                                                    if (*((_QWORD *)&v391 + 1) >= (unint64_t)v392)
                                                    {
                                                      v192 = 0x4EC4EC4EC4EC4EC5
                                                           * ((uint64_t)(*((_QWORD *)&v391 + 1) - v391) >> 3);
                                                      v193 = v192 + 1;
                                                      if ((unint64_t)(v192 + 1) > 0x276276276276276)
                                                        goto LABEL_636;
                                                      if (0x9D89D89D89D89D8ALL * ((uint64_t)(v392 - v391) >> 3) > v193)
                                                        v193 = 0x9D89D89D89D89D8ALL * ((uint64_t)(v392 - v391) >> 3);
                                                      v194 = (char *)((unint64_t)(0x4EC4EC4EC4EC4EC5
                                                                                       * ((uint64_t)(v392 - v391) >> 3)) >= 0x13B13B13B13B13BLL
                                                                    ? 0x276276276276276
                                                                    : v193);
                                                      *((_QWORD *)&v369 + 1) = &v392;
                                                      if (v194)
                                                        v194 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Terminal_Description>>((unint64_t)v194);
                                                      else
                                                        v195 = 0;
                                                      cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v194;
                                                      cf.__r_.__value_.__l.__size_ = (std::string::size_type)&v194[104 * v192];
                                                      cf.__r_.__value_.__r.__words[2] = cf.__r_.__value_.__l.__size_;
                                                      *(_QWORD *)&v369 = &v194[104 * v195];
                                                      std::construct_at[abi:ne180100]<AMCP::Terminal_Description,AMCP::Terminal_Description const&,AMCP::Terminal_Description*>(cf.__r_.__value_.__l.__size_, (__int128 *)&v355);
                                                      cf.__r_.__value_.__r.__words[2] += 104;
                                                      std::vector<AMCP::Terminal_Description>::__swap_out_circular_buffer((uint64_t *)&v391, &cf);
                                                      v191 = *((_QWORD *)&v391 + 1);
                                                      std::__split_buffer<AMCP::Terminal_Description>::~__split_buffer((uint64_t)&cf);
                                                    }
                                                    else
                                                    {
                                                      std::construct_at[abi:ne180100]<AMCP::Terminal_Description,AMCP::Terminal_Description const&,AMCP::Terminal_Description*>(*((uint64_t *)&v391 + 1), (__int128 *)&v355);
                                                      v191 = v190 + 104;
                                                    }
                                                    *((_QWORD *)&v391 + 1) = v191;
                                                    if (!v358)
LABEL_630:
                                                      std::__throw_bad_optional_access[abi:ne180100]();
                                                    v196 = v393;
                                                    if ((unint64_t)v393 >= *((_QWORD *)&v393 + 1))
                                                    {
                                                      v199 = 0x4EC4EC4EC4EC4EC5
                                                           * ((uint64_t)(v393 - *((_QWORD *)&v392 + 1)) >> 3);
                                                      v200 = v199 + 1;
                                                      if ((unint64_t)(v199 + 1) > 0x276276276276276)
LABEL_636:
                                                        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                                                      if (0x9D89D89D89D89D8ALL
                                                         * ((uint64_t)(*((_QWORD *)&v393 + 1) - *((_QWORD *)&v392 + 1)) >> 3) > v200)
                                                        v200 = 0x9D89D89D89D89D8ALL
                                                             * ((uint64_t)(*((_QWORD *)&v393 + 1) - *((_QWORD *)&v392 + 1)) >> 3);
                                                      if ((unint64_t)(0x4EC4EC4EC4EC4EC5
                                                                            * ((uint64_t)(*((_QWORD *)&v393 + 1)
                                                                                       - *((_QWORD *)&v392 + 1)) >> 3)) >= 0x13B13B13B13B13BLL)
                                                        v201 = 0x276276276276276;
                                                      else
                                                        v201 = v200;
                                                      *((_QWORD *)&v369 + 1) = (char *)&v393 + 8;
                                                      if (v201)
                                                        v201 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Terminal_Description>>(v201);
                                                      else
                                                        v202 = 0;
                                                      cf.__r_.__value_.__r.__words[0] = v201;
                                                      cf.__r_.__value_.__l.__size_ = v201 + 104 * v199;
                                                      cf.__r_.__value_.__r.__words[2] = cf.__r_.__value_.__l.__size_;
                                                      *(_QWORD *)&v369 = v201 + 104 * v202;
                                                      std::construct_at[abi:ne180100]<AMCP::Terminal_Description,AMCP::Terminal_Description const&,AMCP::Terminal_Description*>(cf.__r_.__value_.__l.__size_, (__int128 *)&v355);
                                                      cf.__r_.__value_.__r.__words[2] += 104;
                                                      std::vector<AMCP::Terminal_Description>::__swap_out_circular_buffer((uint64_t *)&v392 + 1, &cf);
                                                      v198 = v393;
                                                      v197 = (AMCP::Log::Scope_Registry *)std::__split_buffer<AMCP::Terminal_Description>::~__split_buffer((uint64_t)&cf);
                                                    }
                                                    else
                                                    {
                                                      v197 = (AMCP::Log::Scope_Registry *)std::construct_at[abi:ne180100]<AMCP::Terminal_Description,AMCP::Terminal_Description const&,AMCP::Terminal_Description*>(v393, (__int128 *)&v355);
                                                      v198 = v196 + 104;
                                                    }
                                                    *(_QWORD *)&v393 = v198;
                                                    if (*((_QWORD *)&v391 + 1) - (_QWORD)v391 != 104)
                                                    {
                                                      AMCP::Log::Scope_Registry::get(v197);
                                                      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                                                      v261 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                                                      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&cf);
                                                      if (os_log_type_enabled(v261, OS_LOG_TYPE_ERROR))
                                                      {
                                                        v262 = pthread_self();
                                                        v263 = pthread_mach_thread_np(v262);
                                                        LODWORD(cf.__r_.__value_.__l.__data_) = 67109890;
                                                        HIDWORD(cf.__r_.__value_.__r.__words[0]) = v263;
                                                        LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
                                                        *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1]
                                                                                  + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                                                        WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
                                                        HIDWORD(cf.__r_.__value_.__r.__words[2]) = 693;
                                                        LOWORD(v369) = 2080;
                                                        *(_QWORD *)((char *)&v369 + 2) = "reflector_description.mTerminal"
                                                                                         "s[AMCP::Direction::output].size() == 1";
                                                        _os_log_error_impl(&dword_1B57BA000, v261, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Reflector should have one output terminal", (uint8_t *)&cf, 0x22u);
                                                      }
                                                      abort();
                                                    }
                                                    if (v198 - *((_QWORD *)&v392 + 1) != 104)
                                                    {
                                                      AMCP::Log::Scope_Registry::get(v197);
                                                      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                                                      v264 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                                                      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&cf);
                                                      if (os_log_type_enabled(v264, OS_LOG_TYPE_ERROR))
                                                      {
                                                        v265 = pthread_self();
                                                        v266 = pthread_mach_thread_np(v265);
                                                        LODWORD(cf.__r_.__value_.__l.__data_) = 67109890;
                                                        HIDWORD(cf.__r_.__value_.__r.__words[0]) = v266;
                                                        LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
                                                        *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1]
                                                                                  + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                                                        WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
                                                        HIDWORD(cf.__r_.__value_.__r.__words[2]) = 694;
                                                        LOWORD(v369) = 2080;
                                                        *(_QWORD *)((char *)&v369 + 2) = "reflector_description.mTerminal"
                                                                                         "s[AMCP::Direction::input].size() == 1";
                                                        _os_log_error_impl(&dword_1B57BA000, v264, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Reflector should have one input terminal", (uint8_t *)&cf, 0x22u);
                                                      }
                                                      abort();
                                                    }
                                                    if (v177 < 0)
                                                    {
                                                      std::string::__init_copy_ctor_external(&v350, v318, v316);
                                                    }
                                                    else
                                                    {
                                                      v350.__r_.__value_.__r.__words[0] = (std::string::size_type)v318;
                                                      v350.__r_.__value_.__l.__size_ = v316;
                                                      LODWORD(v350.__r_.__value_.__r.__words[2]) = v348;
                                                      *(_DWORD *)((char *)&v350.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)&v348 + 3);
                                                      *((_BYTE *)&v350.__r_.__value_.__s + 23) = v177;
                                                    }
                                                    if (*((char *)v294 + 31) < 0)
                                                      std::string::__init_copy_ctor_external(&v349, (const std::string::value_type *)v294[1], v294[2]);
                                                    else
                                                      v349 = *(std::string *)(v294 + 1);
                                                    cf.__r_.__value_.__l.__size_ = v350.__r_.__value_.__l.__size_;
                                                    v203 = v350.__r_.__value_.__r.__words[0];
                                                    *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1]
                                                                              + 7) = *(std::string::size_type *)((char *)&v350.__r_.__value_.__r.__words[1] + 7);
                                                    v204 = HIBYTE(v350.__r_.__value_.__r.__words[2]);
                                                    memset(&v350, 0, sizeof(v350));
                                                    cf.__r_.__value_.__r.__words[0] = v203;
                                                    *((_BYTE *)&cf.__r_.__value_.__s + 23) = v204;
                                                    *(_QWORD *)&v369 = 0;
                                                    DWORD2(v369) = 0;
                                                    v205 = (void *)v349.__r_.__value_.__r.__words[0];
                                                    *(_QWORD *)&v371[7] = *(std::string::size_type *)((char *)&v349.__r_.__value_.__r.__words[1] + 7);
                                                    *(_QWORD *)v371 = v349.__r_.__value_.__l.__size_;
                                                    v206 = HIBYTE(v349.__r_.__value_.__r.__words[2]);
                                                    memset(&v349, 0, sizeof(v349));
                                                    __p = v205;
                                                    v372 = v206;
                                                    v373 = v175;
                                                    memset(v376, 0, sizeof(v376));
                                                    v375 = 0u;
                                                    v378 = 64;
                                                    v380 = 0;
                                                    v381 = 0;
                                                    v382 = 0;
                                                    v207 = v328.i64[1];
                                                    v374 = 1;
                                                    *(_DWORD *)&v376[36] = 1;
                                                    v377 = xmmword_1B5D68B90;
                                                    v379 = 1;
                                                    if (v328.i64[1] >= v329)
                                                    {
                                                      v209 = 0xAAAAAAAAAAAAAAABLL * ((v328.i64[1] - v328.i64[0]) >> 6);
                                                      v210 = v209 + 1;
                                                      if (v209 + 1 > 0x155555555555555)
                                                        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                                                      if (0x5555555555555556 * ((uint64_t)(v329 - v328.i64[0]) >> 6) > v210)
                                                        v210 = 0x5555555555555556
                                                             * ((uint64_t)(v329 - v328.i64[0]) >> 6);
                                                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v329 - v328.i64[0]) >> 6) >= 0xAAAAAAAAAAAAAALL)
                                                        v211 = 0x155555555555555;
                                                      else
                                                        v211 = v210;
                                                      v384 = &v329;
                                                      if (v211)
                                                        v211 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Description>>(v211);
                                                      else
                                                        v212 = 0;
                                                      *(_QWORD *)valuePtr = v211;
                                                      *(_QWORD *)&valuePtr[8] = v211 + 192 * v209;
                                                      *(_QWORD *)&valuePtr[16] = *(_QWORD *)&valuePtr[8];
                                                      *(_QWORD *)&valuePtr[24] = v211 + 192 * v212;
                                                      AMCP::Wire_Description::Wire_Description(*(std::string **)&valuePtr[8], (const AMCP::Wire_Description *)&cf);
                                                      v213 = *(_QWORD *)&valuePtr[8];
                                                      v208 = *(_QWORD *)&valuePtr[16] + 192;
                                                      *(_QWORD *)&valuePtr[16] += 192;
                                                      v214 = (__int128 *)v328.i64[1];
                                                      v215 = (__int128 *)v328.i64[0];
                                                      if (v328.i64[1] == v328.i64[0])
                                                      {
                                                        v216 = vdupq_n_s64(v328.u64[1]);
                                                      }
                                                      else
                                                      {
                                                        do
                                                        {
                                                          v214 -= 12;
                                                          std::construct_at[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description,AMCP::Wire_Description*>(v213 - 192, v214);
                                                        }
                                                        while (v214 != v215);
                                                        v216 = v328;
                                                        v208 = *(_QWORD *)&valuePtr[16];
                                                      }
                                                      v328.i64[0] = v213;
                                                      v328.i64[1] = v208;
                                                      *(int64x2_t *)&valuePtr[8] = v216;
                                                      v217 = v329;
                                                      v329 = *(_QWORD *)&valuePtr[24];
                                                      *(_QWORD *)&valuePtr[24] = v217;
                                                      *(_QWORD *)valuePtr = v216.i64[0];
                                                      std::__split_buffer<AMCP::Wire_Description>::~__split_buffer((uint64_t)valuePtr);
                                                    }
                                                    else
                                                    {
                                                      AMCP::Wire_Description::Wire_Description((std::string *)v328.i64[1], (const AMCP::Wire_Description *)&cf);
                                                      v208 = v207 + 192;
                                                    }
                                                    v328.i64[1] = v208;
                                                    v218 = v326.i64[1];
                                                    if (v326.i64[1] >= (unint64_t)v327)
                                                    {
                                                      v220 = 0xEEEEEEEEEEEEEEEFLL * ((v326.i64[1] - v326.i64[0]) >> 3);
                                                      v221 = v220 + 1;
                                                      if (v220 + 1 > 0x222222222222222)
                                                        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                                                      if (0xDDDDDDDDDDDDDDDELL * ((uint64_t)&v327[-v326.i64[0]] >> 3) > v221)
                                                        v221 = 0xDDDDDDDDDDDDDDDELL
                                                             * ((uint64_t)&v327[-v326.i64[0]] >> 3);
                                                      if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v327[-v326.i64[0]] >> 3) >= 0x111111111111111)
                                                        v222 = 0x222222222222222;
                                                      else
                                                        v222 = v221;
                                                      v384 = (unint64_t *)&v327;
                                                      if (v222)
                                                        v222 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Node_Description>>(v222);
                                                      else
                                                        v223 = 0;
                                                      *(_QWORD *)valuePtr = v222;
                                                      *(_QWORD *)&valuePtr[8] = v222 + 120 * v220;
                                                      *(_QWORD *)&valuePtr[16] = *(_QWORD *)&valuePtr[8];
                                                      *(_QWORD *)&valuePtr[24] = v222 + 120 * v223;
                                                      AMCP::Node_Description::Node_Description(*(AMCP::Node_Description **)&valuePtr[8], (const AMCP::Node_Description *)&v389);
                                                      v224 = *(_QWORD *)&valuePtr[8];
                                                      v219 = *(_QWORD *)&valuePtr[16] + 120;
                                                      *(_QWORD *)&valuePtr[16] += 120;
                                                      v225 = v326.i64[1];
                                                      v226 = v326.i64[0];
                                                      if (v326.i64[1] == v326.i64[0])
                                                      {
                                                        v227 = vdupq_n_s64(v326.u64[1]);
                                                      }
                                                      else
                                                      {
                                                        do
                                                        {
                                                          v225 -= 120;
                                                          std::construct_at[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description,AMCP::Node_Description*>(v224 - 120, v225);
                                                        }
                                                        while (v225 != v226);
                                                        v227 = v326;
                                                        v219 = *(_QWORD *)&valuePtr[16];
                                                      }
                                                      v326.i64[0] = v224;
                                                      v326.i64[1] = v219;
                                                      *(int64x2_t *)&valuePtr[8] = v227;
                                                      v228 = v327;
                                                      v327 = *(char **)&valuePtr[24];
                                                      *(_QWORD *)&valuePtr[24] = v228;
                                                      *(_QWORD *)valuePtr = v227.i64[0];
                                                      std::__split_buffer<AMCP::Node_Description>::~__split_buffer((uint64_t)valuePtr);
                                                    }
                                                    else
                                                    {
                                                      AMCP::Node_Description::Node_Description((AMCP::Node_Description *)v326.i64[1], (const AMCP::Node_Description *)&v389);
                                                      v219 = v218 + 120;
                                                    }
                                                    v326.i64[1] = v219;
                                                    *(_QWORD *)valuePtr = &v380;
                                                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)valuePtr);
                                                    if (*(_QWORD *)&v376[8])
                                                    {
                                                      *(_QWORD *)&v376[16] = *(_QWORD *)&v376[8];
                                                      operator delete(*(void **)&v376[8]);
                                                    }
                                                    if ((_QWORD)v375)
                                                    {
                                                      *((_QWORD *)&v375 + 1) = v375;
                                                      operator delete((void *)v375);
                                                    }
                                                    if (v372 < 0)
                                                      operator delete(__p);
                                                    if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
                                                      operator delete(cf.__r_.__value_.__l.__data_);
                                                    if (v358)
                                                    {
                                                      for (m = 64; m != 16; m -= 24)
                                                      {
                                                        cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v355
                                                                                        + m;
                                                        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
                                                      }
                                                    }
                                                    v169 = 0;
                                                  }
                                                }
                                              }
                                              if (v361.__r_.__value_.__r.__words[0])
                                              {
                                                v361.__r_.__value_.__l.__size_ = v361.__r_.__value_.__r.__words[0];
                                                operator delete(v361.__r_.__value_.__l.__data_);
                                              }
                                              for (n = 96; n != 48; n -= 24)
                                              {
                                                cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v390[n - 8];
                                                std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
                                              }
                                              if ((v390[55] & 0x80000000) != 0)
                                                operator delete(*(void **)&v390[32]);
                                              if ((v390[23] & 0x80000000) != 0)
                                                operator delete(*(void **)v390);
                                              if (v321 < 0)
                                                operator delete(v318);
                                              if (v363)
                                                CFRelease(v363);
                                              if (v364)
                                                CFRelease(v364);
                                              if (v169 != 7 && v169)
                                                break;
                                              v136 = v302 + 1;
                                            }
                                            while (v302 + 1 != v299);
                                          }
                                        }
                                        goto LABEL_536;
                                      }
                                      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                      std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_638:
                                      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                                    }
                                    AMCP::Log::Scope_Registry::get(v23);
                                    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                                    v255 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                                    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&cf);
                                    if (!os_log_type_enabled(v255, OS_LOG_TYPE_ERROR))
LABEL_584:
                                      abort();
                                    v259 = pthread_self();
                                    v260 = pthread_mach_thread_np(v259);
                                    LODWORD(cf.__r_.__value_.__l.__data_) = 67109890;
                                    HIDWORD(cf.__r_.__value_.__r.__words[0]) = v260;
                                    LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
                                    *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                                    WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
                                    HIDWORD(cf.__r_.__value_.__r.__words[2]) = 605;
                                    LOWORD(v369) = 2080;
                                    *(_QWORD *)((char *)&v369 + 2) = "graph.m_nodes[0].mNodeType == AMCP::Node_Type::IOContext";
                                    v258 = "%6u %32s:%-5d Assertion Failed: %s The only node in the graph should be an IOC";
                                  }
                                  else
                                  {
                                    AMCP::Log::Scope_Registry::get(v23);
                                    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                                    v255 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                                    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&cf);
                                    if (!os_log_type_enabled(v255, OS_LOG_TYPE_ERROR))
                                      goto LABEL_584;
                                    v256 = pthread_self();
                                    v257 = pthread_mach_thread_np(v256);
                                    LODWORD(cf.__r_.__value_.__l.__data_) = 67109890;
                                    HIDWORD(cf.__r_.__value_.__r.__words[0]) = v257;
                                    LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
                                    *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                                    WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
                                    HIDWORD(cf.__r_.__value_.__r.__words[2]) = 604;
                                    LOWORD(v369) = 2080;
                                    *(_QWORD *)((char *)&v369 + 2) = "graph.m_nodes.size() == 1";
                                    v258 = "%6u %32s:%-5d Assertion Failed: %s The only node already in this graph should be the IOC";
                                  }
                                  _os_log_error_impl(&dword_1B57BA000, v255, OS_LOG_TYPE_ERROR, v258, (uint8_t *)&cf, 0x22u);
                                  goto LABEL_584;
                                }
                                v118 = 5;
                                v117 = (__int128 *)*((_QWORD *)&v392 + 1);
                              }
                              (*(void (**)(void))(*(_QWORD *)v117 + 8 * v118))();
                              goto LABEL_304;
                            }
                            *(_OWORD *)(a1 + 16) = 0u;
                            *(_OWORD *)(a1 + 32) = 0u;
                            *(_OWORD *)a1 = 0u;
                            if (v351.__r_.__value_.__l.__size_)
                              CFRelease((CFTypeRef)v351.__r_.__value_.__l.__size_);
                            if (!v296)
                              CFRelease(v45);
                            std::__optional_destruct_base<std::tuple<double,applesauce::CF::StringRef>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v352);
                            v119 = &v391;
                            if (*((__int128 **)&v392 + 1) == &v391)
                            {
                              v120 = 4;
                            }
                            else
                            {
                              if (!*((_QWORD *)&v392 + 1))
                              {
LABEL_549:
                                if (*(_QWORD *)&v390[32])
                                  operator delete(*(void **)&v390[32]);
                                if (*(_QWORD *)&v390[8])
                                  operator delete(*(void **)&v390[8]);
                                if (v389)
                                  CFRelease(v389);
                                goto LABEL_537;
                              }
                              v120 = 5;
                              v119 = (__int128 *)*((_QWORD *)&v392 + 1);
                            }
                            (*(void (**)(void))(*(_QWORD *)v119 + 8 * v120))();
                            goto LABEL_549;
                          }
                          AMCP::Log::Scope_Registry::get(v44);
                          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                          v267 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&cf);
                          if (!os_log_type_enabled(v267, OS_LOG_TYPE_ERROR))
LABEL_599:
                            abort();
                          v273 = pthread_self();
                          v274 = pthread_mach_thread_np(v273);
                          LODWORD(cf.__r_.__value_.__l.__data_) = 67109890;
                          HIDWORD(cf.__r_.__value_.__r.__words[0]) = v274;
                          LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
                          *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                          WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
                          HIDWORD(cf.__r_.__value_.__r.__words[2]) = 455;
                          LOWORD(v369) = 2080;
                          *(_QWORD *)((char *)&v369 + 2) = "in_out_graph.m_wires.empty()";
                          v270 = "%6u %32s:%-5d Assertion Failed: %s There should not be any wires in the graph yet";
                        }
                      }
                      else
                      {
                        AMCP::Log::Scope_Registry::get(v44);
                        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                        v267 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&cf);
                        if (!os_log_type_enabled(v267, OS_LOG_TYPE_ERROR))
                          goto LABEL_599;
                        v268 = pthread_self();
                        v269 = pthread_mach_thread_np(v268);
                        LODWORD(cf.__r_.__value_.__l.__data_) = 67109890;
                        HIDWORD(cf.__r_.__value_.__r.__words[0]) = v269;
                        LOWORD(cf.__r_.__value_.__r.__words[1]) = 2080;
                        *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALIO_Graph_Builder.cpp";
                        WORD1(cf.__r_.__value_.__r.__words[2]) = 1024;
                        HIDWORD(cf.__r_.__value_.__r.__words[2]) = 453;
                        LOWORD(v369) = 2080;
                        *(_QWORD *)((char *)&v369 + 2) = "in_out_graph.m_nodes.size() == 1";
                        v270 = "%6u %32s:%-5d Assertion Failed: %s Graph should have exactly 1 node";
                      }
                      _os_log_error_impl(&dword_1B57BA000, v267, OS_LOG_TYPE_ERROR, v270, (uint8_t *)&cf, 0x22u);
                      goto LABEL_599;
                    }
LABEL_152:
                    v322 = v45;
                    v323 = 1;
                    v57 = &v322;
                    HALIO::HALIO_Graph_Builder::add_aggregate_subdevices_to_graph_description_gridways((AMCP::Log::Scope_Registry *)a2, &v326, (uint64_t)&v389, (double *)&v351, (uint64_t)&v322, v314);
                    goto LABEL_287;
                  }
                  if (*a5)
                  {
                    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "master");
                    v355.__r_.__value_.__r.__words[0] = 0;
                    applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(valuePtr, *a5, cf.__r_.__value_.__l.__data_, &v355);
                    if (v355.__r_.__value_.__r.__words[0])
                      CFRelease(v355.__r_.__value_.__l.__data_);
                    if (cf.__r_.__value_.__r.__words[0])
                      CFRelease(cf.__r_.__value_.__l.__data_);
                    if (*a5)
                    {
                      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v355, "clock");
                      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,applesauce::CF::StringRef>(&cf, *a5, v355.__r_.__value_.__l.__data_);
                      if (cf.__r_.__value_.__s.__data_[8])
                      {
                        v45 = (const void *)cf.__r_.__value_.__r.__words[0];
                        if (cf.__r_.__value_.__r.__words[0])
                          CFRetain(cf.__r_.__value_.__l.__data_);
                      }
                      else
                      {
                        v45 = *(const void **)valuePtr;
                        if (*(_QWORD *)valuePtr)
                          CFRetain(*(CFTypeRef *)valuePtr);
                      }
                      std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
                      if (v355.__r_.__value_.__r.__words[0])
                        CFRelease(v355.__r_.__value_.__l.__data_);
                      v49 = *(AMCP::Log::Scope_Registry **)valuePtr;
                      if (*(_QWORD *)valuePtr)
                        CFRelease(*(CFTypeRef *)valuePtr);
                      goto LABEL_128;
                    }
                  }
                }
                v292 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v292, "Could not construct");
                __cxa_throw(v292, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              if (*((__int128 **)&v392 + 1) != &v391)
              {
LABEL_93:
                *(_QWORD *)&v369 = p_cf;
                *((_QWORD *)&v392 + 1) = v41;
                goto LABEL_98;
              }
            }
            else
            {
              *(_QWORD *)&v369 = 0;
              p_cf = (std::string *)*((_QWORD *)&v392 + 1);
              if (*((__int128 **)&v392 + 1) != &v391)
              {
                v41 = 0;
                goto LABEL_93;
              }
            }
            p_cf = &cf;
            (*(void (**)(__int128 *, std::string *))(v391 + 24))(&v391, &cf);
            (*(void (**)(_QWORD))(**((_QWORD **)&v392 + 1) + 32))(*((_QWORD *)&v392 + 1));
            *((_QWORD *)&v392 + 1) = v369;
            *(_QWORD *)&v369 = &cf;
            v43 = 4;
            goto LABEL_102;
          }
        }
      }
      v291 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v291, "Could not construct");
      __cxa_throw(v291, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
LABEL_628:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_638;
  }
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
LABEL_544:
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v341);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theArray);
  if (v14)
    CFRelease(v14);
  return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v346);
}

void sub_1B5BA3E74(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49)
{
  uint64_t i;
  void *v51;
  uint64_t j;

  if (a2)
  {
    if (LOBYTE(STACK[0x368]))
    {
      for (i = 64; i != 16; i -= 24)
      {
        STACK[0x2E0] = (unint64_t)&STACK[0x300] + i;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2E0]);
      }
    }
    v51 = (void *)STACK[0x380];
    if (STACK[0x380])
    {
      STACK[0x388] = (unint64_t)v51;
      operator delete(v51);
    }
    for (j = 96; j != 48; j -= 24)
    {
      STACK[0x300] = (unint64_t)&STACK[0x518] + j;
      std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
    }
    if (SLOBYTE(STACK[0x557]) < 0)
      operator delete((void *)STACK[0x540]);
    if (SLOBYTE(STACK[0x537]) < 0)
      operator delete((void *)STACK[0x520]);
    if (a24)
      operator delete(a49);
    if (STACK[0x3A0])
      CFRelease((CFTypeRef)STACK[0x3A0]);
    if (STACK[0x3A8])
      CFRelease((CFTypeRef)STACK[0x3A8]);
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void **std::vector<BOOL>::operator=(void **a1, uint64_t a2)
{
  unint64_t v4;
  void *v5;
  void *v6;

  if (a1 != (void **)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      if (v4 > (_QWORD)a1[2] << 6)
      {
        v5 = *a1;
        if (*a1)
        {
          operator delete(v5);
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
          v4 = *(_QWORD *)(a2 + 8);
        }
        std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
        v4 = *(_QWORD *)(a2 + 8);
      }
      memmove(*a1, *(const void **)a2, (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      v6 = *(void **)(a2 + 8);
    }
    else
    {
      v6 = 0;
    }
    a1[1] = v6;
  }
  return a1;
}

void HALIO::HALIO_Graph_Builder::add_aggregate_subdevices_to_graph_description_gridways(AMCP::Log::Scope_Registry *a1, _QWORD *a2, uint64_t a3, double *a4, uint64_t a5, int a6)
{
  double v6;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  CFArrayRef v11;
  CFIndex v12;
  const __CFArray *v13;
  int v14;
  unint64_t v15;
  CFIndex v16;
  CFIndex v17;
  CFArrayRef v18;
  CFIndex v19;
  unint64_t v20;
  BOOL v21;
  int v22;
  double v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  const UInt8 *p_valuePtr;
  CFIndex v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t i;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  NSObject **v47;
  NSObject **v48;
  uint64_t v49;
  const __CFArray *v50;
  CFArrayRef v51;
  unint64_t v52;
  int v53;
  NSObject **v54;
  NSObject **v55;
  int v56;
  NSObject **v57;
  int v58;
  NSObject **v59;
  int v60;
  NSObject **v61;
  uint64_t v62;
  CFTypeRef v63;
  uint64_t v64;
  uint64_t v65;
  const UInt8 *v66;
  CFIndex v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  std::string::size_type v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  std::string::size_type v80;
  __int128 *v81;
  __int128 *v82;
  int64x2_t v83;
  char *v84;
  int v85;
  void *v86;
  std::__shared_weak_count *v87;
  NSObject *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  unint64_t v93;
  char *v94;
  _DWORD *v95;
  unint64_t v96;
  char *v97;
  _DWORD *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  BOOL v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  _DWORD *v109;
  int v110;
  int v111;
  unint64_t v112;
  _opaque_pthread_t *v113;
  mach_port_t v114;
  __int128 v115;
  char *v116;
  __int128 v117;
  uint64_t v118;
  std::string *v119;
  int v120;
  void *v121;
  std::__shared_weak_count *size;
  NSObject *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t j;
  _opaque_pthread_t *v127;
  mach_port_t v128;
  std::string *v129;
  unint64_t v130;
  NSObject *v131;
  _opaque_pthread_t *v132;
  mach_port_t v133;
  const char *v134;
  _opaque_pthread_t *v135;
  mach_port_t v136;
  _opaque_pthread_t *v137;
  mach_port_t v138;
  std::runtime_error *v139;
  std::runtime_error *exception;
  std::runtime_error *v141;
  std::runtime_error *v142;
  std::runtime_error *v143;
  std::runtime_error *v144;
  std::runtime_error *v145;
  std::runtime_error *v146;
  std::runtime_error *v147;
  char v148;
  _BOOL4 v149;
  _BOOL4 v150;
  uint64_t v151;
  int v152;
  CFIndex v153;
  __int128 *v154;
  const __CFArray *v156;
  const __CFArray *v157;
  CFIndex v158;
  unint64_t v159;
  int v160;
  int v161;
  int v162;
  CFIndex v163;
  NSObject *v164;
  int v165;
  int v166;
  int v167;
  int v168;
  unsigned int v171;
  unsigned int v172;
  CFArrayRef v173;
  CFIndex v174;
  _QWORD *v175;
  int v177;
  const __CFArray *theArray;
  unint64_t v179;
  uint64_t v180;
  char v181;
  CFArrayRef v182;
  __int128 v183;
  char *v184;
  std::string v185;
  uint64_t v186;
  int v187;
  std::string v188;
  char *v189;
  int v190;
  std::string v191;
  uint64_t v192;
  int v193;
  std::string v194;
  char *v195;
  int v196;
  std::string cf;
  char *v198;
  char **v199;
  std::string __p;
  uint64_t v201;
  int v202;
  std::string v203;
  uint64_t v204;
  CFTypeRef v205;
  CFTypeRef v206;
  CFTypeRef v207;
  CFTypeRef v208;
  CFTypeRef v209;
  CFTypeRef v210;
  __int16 v211;
  char *v212;
  __int16 v213;
  int v214;
  __int16 v215;
  std::string *v216;
  NSObject **valuePtr;
  __int128 v218;
  __int128 v219;
  void *v220;
  char v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;

  v224 = *MEMORY[0x1E0C80C00];
  if (a2[1] - *a2 != 120)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&valuePtr, "com.apple.coreaudio", "AMCP");
    v131 = *valuePtr;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&valuePtr);
    if (!os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
      goto LABEL_317;
    v132 = pthread_self();
    v133 = pthread_mach_thread_np(v132);
    LODWORD(valuePtr) = 67109890;
    HIDWORD(valuePtr) = v133;
    LOWORD(v218) = 2080;
    *(_QWORD *)((char *)&v218 + 2) = "HALIO_Graph_Builder.cpp";
    WORD5(v218) = 1024;
    HIDWORD(v218) = 473;
    LOWORD(v219) = 2080;
    *(_QWORD *)((char *)&v219 + 2) = "in_out_graph.m_nodes.size() == 1";
    v134 = "%6u %32s:%-5d Assertion Failed: %s Graph should have exactly 1 node";
    goto LABEL_316;
  }
  v175 = (_QWORD *)*a2;
  if (*(_DWORD *)*a2)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&valuePtr, "com.apple.coreaudio", "AMCP");
    v131 = *valuePtr;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&valuePtr);
    if (!os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
      goto LABEL_317;
    v135 = pthread_self();
    v136 = pthread_mach_thread_np(v135);
    LODWORD(valuePtr) = 67109890;
    HIDWORD(valuePtr) = v136;
    LOWORD(v218) = 2080;
    *(_QWORD *)((char *)&v218 + 2) = "HALIO_Graph_Builder.cpp";
    WORD5(v218) = 1024;
    HIDWORD(v218) = 474;
    LOWORD(v219) = 2080;
    *(_QWORD *)((char *)&v219 + 2) = "in_out_graph.m_nodes[0].mNodeType == AMCP::Node_Type::IOContext";
    v134 = "%6u %32s:%-5d Assertion Failed: %s The only node in the graph should be an IOC";
    goto LABEL_316;
  }
  v154 = (__int128 *)(a2 + 3);
  if (a2[3] != a2[4])
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&valuePtr, "com.apple.coreaudio", "AMCP");
    v131 = *valuePtr;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&valuePtr);
    if (!os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
      goto LABEL_317;
    v137 = pthread_self();
    v138 = pthread_mach_thread_np(v137);
    LODWORD(valuePtr) = 67109890;
    HIDWORD(valuePtr) = v138;
    LOWORD(v218) = 2080;
    *(_QWORD *)((char *)&v218 + 2) = "HALIO_Graph_Builder.cpp";
    WORD5(v218) = 1024;
    HIDWORD(v218) = 475;
    LOWORD(v219) = 2080;
    *(_QWORD *)((char *)&v219 + 2) = "in_out_graph.m_wires.empty()";
    v134 = "%6u %32s:%-5d Assertion Failed: %s There should not be any wires in the graph yet";
LABEL_316:
    _os_log_error_impl(&dword_1B57BA000, v131, OS_LOG_TYPE_ERROR, v134, (uint8_t *)&valuePtr, 0x22u);
LABEL_317:
    abort();
  }
  v183 = 0uLL;
  v184 = 0;
  if (!a6 && *(_BYTE *)(a3 + 64))
    goto LABEL_6;
  v8 = *(const __CFArray **)a3;
  if (!*(_QWORD *)a3)
    goto LABEL_297;
  Count = CFArrayGetCount(*(CFArrayRef *)a3);
  v10 = Count;
  v11 = *(CFArrayRef *)a3;
  if (*(_QWORD *)a3)
  {
    v12 = CFArrayGetCount(*(CFArrayRef *)a3);
    if (!v10)
      goto LABEL_6;
  }
  else
  {
    v12 = 0;
    if (!Count)
      goto LABEL_6;
  }
  v130 = 0;
  do
  {
    if (v8 == v11 && v12 == v130)
      break;
    applesauce::CF::details::at_to<applesauce::CF::ArrayRef>((applesauce::CF::ArrayRef *)&valuePtr, v8, v130);
    HALIO::HALIO_Graph_Builder::connect_input_terminals(a1, (CFArrayRef *)&valuePtr, (_QWORD *)(a3 + 16), v175, (uint64_t)&v183, a4, a3 + 72);
    if (valuePtr)
      CFRelease(valuePtr);
    ++v130;
  }
  while (v10 != v130);
LABEL_6:
  theArray = *(const __CFArray **)a3;
  if (*(_QWORD *)a3)
  {
    v174 = CFArrayGetCount(theArray);
    v173 = *(CFArrayRef *)a3;
    v163 = *(_QWORD *)a3 ? CFArrayGetCount(*(CFArrayRef *)a3) : 0;
    if (v174)
    {
      v177 = 0;
      v179 = 0;
      v151 = (uint64_t)(v175 + 1);
      while (1)
      {
        if (theArray == v173 && v179 == v163)
          goto LABEL_297;
        applesauce::CF::details::at_to<applesauce::CF::ArrayRef>((applesauce::CF::ArrayRef *)&v182, theArray, v179);
        v13 = v182;
        if (v182)
        {
          v14 = *(unsigned __int8 *)(a3 + 64);
          v15 = *(_QWORD *)(a3 + 104);
          v16 = CFArrayGetCount(v182);
          v17 = v16;
          v18 = v182;
          if (v182)
          {
            v19 = CFArrayGetCount(v182);
            if (v17)
              break;
            goto LABEL_84;
          }
          v19 = 0;
          if (v16)
            break;
        }
LABEL_84:
        v23 = v6;
LABEL_85:
        v177 = 0;
        *(_QWORD *)&v6 = *(_QWORD *)&v23 & 0xFFFFFFFFFFFFFF00;
LABEL_86:
        if (v182)
          CFRelease(v182);
        if (++v179 == v174)
          goto LABEL_297;
      }
      v159 = v15;
      v20 = 0;
      if (a6)
        v21 = 1;
      else
        v21 = v14 == 0;
      v22 = !v21;
      v161 = v22;
      v23 = v6;
      while (1)
      {
        if (v13 == v18 && v20 == v19)
          goto LABEL_85;
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v210, v13, v20);
        if (!v210)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "uid");
        cf.__r_.__value_.__r.__words[0] = 0;
        applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v203, (const __CFDictionary *)v210, valuePtr, &cf);
        if (cf.__r_.__value_.__r.__words[0])
          CFRelease(cf.__r_.__value_.__l.__data_);
        if (valuePtr)
          CFRelease(valuePtr);
        v24 = *(_QWORD *)a1;
        v25 = (const void *)v203.__r_.__value_.__r.__words[0];
        if (v203.__r_.__value_.__r.__words[0])
          CFRetain(v203.__r_.__value_.__l.__data_);
        v209 = v25;
        v26 = (*(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v24 + 24))(v24, &v209);
        if (v209)
          CFRelease(v209);
        v27 = *(_QWORD *)a1;
        AMCP::create_device_node_uid_from_device_uid_and_direction((const __CFString **)&v203, 0, (void **)&valuePtr);
        if (v218 >= 0)
          p_valuePtr = (const UInt8 *)&valuePtr;
        else
          p_valuePtr = (const UInt8 *)valuePtr;
        if (v218 >= 0)
          v29 = HIBYTE(v218);
        else
          v29 = v218;
        v208 = CFStringCreateWithBytes(0, p_valuePtr, v29, 0x8000100u, 0);
        if (!v208)
        {
          v139 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v139, "Could not construct");
          __cxa_throw(v139, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v30 = (*(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v27 + 32))(v27, &v208);
        if (v208)
          CFRelease(v208);
        if (SHIBYTE(v218) < 0)
          operator delete(valuePtr);
        if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)a1 + 16))(*(_QWORD *)a1, v26) & 1) != 0
          || ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)a1 + 16))(*(_QWORD *)a1, v30) & 1) != 0)
        {
          v31 = 3;
          goto LABEL_53;
        }
        (*(void (**)(NSObject ***__return_ptr, _QWORD, uint64_t))(**(_QWORD **)a1 + 40))(&valuePtr, *(_QWORD *)a1, v30);
        if (v222 == v223)
        {
          v31 = 3;
          goto LABEL_77;
        }
        v168 = *(_DWORD *)(v222 + 8);
        if (v168 == 1819304813)
        {
          v171 = *(_DWORD *)(v222 + 12);
          if ((v171 & 0x40) == 0)
          {
            v32 = 0x4EC4EC4EC4EC4EC5 * ((v223 - v222) >> 3);
            if (v32 < 2)
            {
              v35 = *(_DWORD *)(v222 + 28);
            }
            else
            {
              v33 = v32 - 1;
              v34 = v222 + 112;
              v35 = *(_DWORD *)(v222 + 28);
              do
              {
                if (*(_DWORD *)v34 != 1819304813)
                  break;
                if ((*(_BYTE *)(v34 + 4) & 0x40) != 0)
                  break;
                v35 += *(_DWORD *)(v34 + 20);
                v34 += 104;
                --v33;
              }
              while (v33);
            }
            v164 = *(NSObject **)(v222 + 32);
            v36 = *(_DWORD *)(v222 + 24) / *(_DWORD *)(v222 + 28);
            if (v161)
              v35 = 2;
            v172 = v35;
            v165 = v35 * v36;
            v166 = *(_DWORD *)(v222 + 20);
            v167 = v35 * v36 * v166;
            goto LABEL_76;
          }
        }
        else
        {
          v171 = *(_DWORD *)(v222 + 12);
        }
        v166 = *(_DWORD *)(v222 + 20);
        v167 = *(_DWORD *)(v222 + 16);
        v165 = *(_DWORD *)(v222 + 24);
        v172 = *(_DWORD *)(v222 + 28);
        v164 = *(NSObject **)(v222 + 32);
LABEL_76:
        v23 = *(double *)v222;
        v177 = 1;
        v31 = 1;
LABEL_77:
        for (i = 12; i != 6; i -= 3)
        {
          cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&(&valuePtr)[i];
          std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
        }
        if (v221 < 0)
          operator delete(v220);
        if (SBYTE7(v219) < 0)
          operator delete((void *)v218);
LABEL_53:
        if (v25)
          CFRelease(v25);
        if (v210)
          CFRelease(v210);
        if (v31 != 3)
        {
          if (v177)
          {
            v6 = *a4;
            if (*a4 == 0.0)
            {
              *a4 = v23;
              v6 = v23;
            }
            v39 = v175[9];
            v38 = v175[10];
            v40 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v38 - v39) >> 3);
            v209 = (CFTypeRef)v40;
            v41 = v175[11];
            if (v38 >= v41)
            {
              v44 = v40 + 1;
              if (v40 + 1 > 0x276276276276276)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v45 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v41 - v39) >> 3);
              if (2 * v45 > v44)
                v44 = 2 * v45;
              if (v45 >= 0x13B13B13B13B13BLL)
                v46 = 0x276276276276276;
              else
                v46 = v44;
              *((_QWORD *)&v219 + 1) = v175 + 11;
              v47 = (NSObject **)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Terminal_Description>>(v46);
              v48 = &v47[13 * v40];
              valuePtr = v47;
              *(_QWORD *)&v218 = v48;
              *(_QWORD *)&v219 = &v47[13 * v49];
              *(double *)v48 = v6;
              *((_DWORD *)v48 + 2) = v168;
              *((_DWORD *)v48 + 3) = v171;
              *((_DWORD *)v48 + 4) = v167;
              *((_DWORD *)v48 + 5) = v166;
              *((_DWORD *)v48 + 6) = v165;
              *((_DWORD *)v48 + 7) = v172;
              v48[4] = v164;
              *(_OWORD *)(v48 + 5) = 0u;
              *(_OWORD *)(v48 + 7) = 0u;
              *(_OWORD *)(v48 + 9) = 0u;
              v48[11] = 1;
              *((_BYTE *)v48 + 96) = 0;
              *((_QWORD *)&v218 + 1) = v48 + 13;
              std::vector<AMCP::Terminal_Description>::__swap_out_circular_buffer(v175 + 9, &valuePtr);
              v43 = v175;
              v42 = v175[10];
              std::__split_buffer<AMCP::Terminal_Description>::~__split_buffer((uint64_t)&valuePtr);
            }
            else
            {
              *(double *)v38 = v6;
              *(_DWORD *)(v38 + 8) = v168;
              *(_DWORD *)(v38 + 12) = v171;
              *(_DWORD *)(v38 + 16) = v167;
              *(_DWORD *)(v38 + 20) = v166;
              *(_DWORD *)(v38 + 24) = v165;
              *(_DWORD *)(v38 + 28) = v172;
              *(_QWORD *)(v38 + 32) = v164;
              *(_OWORD *)(v38 + 40) = 0u;
              *(_OWORD *)(v38 + 56) = 0u;
              *(_OWORD *)(v38 + 72) = 0u;
              *(_QWORD *)(v38 + 88) = 1;
              v42 = v38 + 104;
              *(_BYTE *)(v38 + 96) = 0;
              v43 = v175;
            }
            v43[10] = v42;
            if (*(_QWORD *)(a3 + 48) <= v40
              || ((*(_QWORD *)(*(_QWORD *)(a3 + 40) + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v40) & 1) != 0)
            {
              v50 = v182;
              if (v182)
              {
                v158 = CFArrayGetCount(v182);
                v51 = v182;
                v153 = v182 ? CFArrayGetCount(v182) : 0;
                if (v158)
                {
                  v52 = 0;
                  v53 = (v171 >> 6) & 1;
                  if (v168 != 1819304813)
                    LOBYTE(v53) = 1;
                  v148 = v53;
                  v156 = v51;
                  v157 = v50;
                  while (1)
                  {
                    if (v50 == v51 && v52 == v153)
                      goto LABEL_86;
                    applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v208, v50, v52);
                    if (!v208)
                      goto LABEL_334;
                    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "uid");
                    cf.__r_.__value_.__r.__words[0] = 0;
                    applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v207, (const __CFDictionary *)v208, valuePtr, &cf);
                    if (cf.__r_.__value_.__r.__words[0])
                      CFRelease(cf.__r_.__value_.__l.__data_);
                    if (valuePtr)
                      CFRelease(valuePtr);
                    if (!v208)
                      goto LABEL_334;
                    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "latency-in");
                    LODWORD(valuePtr) = 0;
                    v210 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                    if (!v210)
                    {
                      v142 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v142, "Could not construct");
                      __cxa_throw(v142, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                    }
                    applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, (const __CFDictionary *)v208, cf.__r_.__value_.__l.__data_, &v210);
                    v54 = valuePtr;
                    if (!valuePtr)
                      goto LABEL_334;
                    v162 = applesauce::CF::convert_to<int,0>((const __CFNumber *)valuePtr);
                    CFRelease(v54);
                    if (v210)
                      CFRelease(v210);
                    if (cf.__r_.__value_.__r.__words[0])
                      CFRelease(cf.__r_.__value_.__l.__data_);
                    if (!v208)
                      goto LABEL_334;
                    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "don't pad");
                    LODWORD(valuePtr) = 1;
                    v210 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                    if (!v210)
                    {
                      v141 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v141, "Could not construct");
                      __cxa_throw(v141, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                    }
                    applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, (const __CFDictionary *)v208, cf.__r_.__value_.__l.__data_, &v210);
                    v55 = valuePtr;
                    if (!valuePtr)
                      goto LABEL_334;
                    v56 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)valuePtr);
                    CFRelease(v55);
                    if (v210)
                      CFRelease(v210);
                    if (cf.__r_.__value_.__r.__words[0])
                      CFRelease(cf.__r_.__value_.__l.__data_);
                    if (!v208)
                      goto LABEL_334;
                    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "drift");
                    LODWORD(valuePtr) = 0;
                    v210 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                    if (!v210)
                    {
                      v144 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v144, "Could not construct");
                      __cxa_throw(v144, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                    }
                    applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, (const __CFDictionary *)v208, cf.__r_.__value_.__l.__data_, &v210);
                    v57 = valuePtr;
                    if (!valuePtr)
                      goto LABEL_334;
                    v58 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)valuePtr);
                    CFRelease(v57);
                    if (v210)
                      CFRelease(v210);
                    if (cf.__r_.__value_.__r.__words[0])
                      CFRelease(cf.__r_.__value_.__l.__data_);
                    if (!v208)
                      goto LABEL_334;
                    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "drift algorithm");
                    LODWORD(valuePtr) = 0;
                    v210 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                    if (!v210)
                    {
                      v147 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v147, "Could not construct");
                      __cxa_throw(v147, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                    }
                    applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, (const __CFDictionary *)v208, cf.__r_.__value_.__l.__data_, &v210);
                    v59 = valuePtr;
                    if (!valuePtr)
                      goto LABEL_334;
                    v60 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)valuePtr);
                    CFRelease(v59);
                    if (v210)
                      CFRelease(v210);
                    if (cf.__r_.__value_.__r.__words[0])
                      CFRelease(cf.__r_.__value_.__l.__data_);
                    if (!v208)
                      goto LABEL_334;
                    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "drift quality");
                    LODWORD(valuePtr) = 64;
                    v210 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                    if (!v210)
                    {
                      v143 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v143, "Could not construct");
                      __cxa_throw(v143, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                    }
                    applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, (const __CFDictionary *)v208, cf.__r_.__value_.__l.__data_, &v210);
                    v61 = valuePtr;
                    if (!valuePtr)
                    {
LABEL_334:
                      v146 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v146, "Could not construct");
                      __cxa_throw(v146, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                    }
                    v160 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)valuePtr);
                    CFRelease(v61);
                    if (v210)
                      CFRelease(v210);
                    if (cf.__r_.__value_.__r.__words[0])
                      CFRelease(cf.__r_.__value_.__l.__data_);
                    v62 = *(_QWORD *)a1;
                    v63 = v207;
                    if (v207)
                      CFRetain(v207);
                    v206 = v63;
                    v64 = (*(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v62 + 24))(v62, &v206);
                    if (v206)
                      CFRelease(v206);
                    v65 = *(_QWORD *)a1;
                    AMCP::create_device_node_uid_from_device_uid_and_direction((const __CFString **)&v207, 0, (void **)&valuePtr);
                    if (v218 >= 0)
                      v66 = (const UInt8 *)&valuePtr;
                    else
                      v66 = (const UInt8 *)valuePtr;
                    if (v218 >= 0)
                      v67 = HIBYTE(v218);
                    else
                      v67 = v218;
                    v205 = CFStringCreateWithBytes(0, v66, v67, 0x8000100u, 0);
                    if (!v205)
                    {
                      v145 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v145, "Could not construct");
                      __cxa_throw(v145, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                    }
                    v68 = (*(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v65 + 32))(v65, &v205);
                    if (v205)
                      CFRelease(v205);
                    if (SHIBYTE(v218) < 0)
                      operator delete(valuePtr);
                    if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)a1 + 16))(*(_QWORD *)a1, v64) & 1) == 0
                      && ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)a1 + 16))(*(_QWORD *)a1, v68) & 1) == 0)
                    {
                      (*(void (**)(NSObject ***__return_ptr, _QWORD, uint64_t))(**(_QWORD **)a1 + 40))(&valuePtr, *(_QWORD *)a1, v68);
                      if (v222 != v223)
                      {
                        if ((v148 & 1) != 0)
                        {
                          if (v6 == *(double *)v222
                            && v168 == *(_DWORD *)(v222 + 8)
                            && v171 == *(_DWORD *)(v222 + 12)
                            && v167 == *(_DWORD *)(v222 + 16)
                            && v166 == *(_DWORD *)(v222 + 20)
                            && v165 == *(_DWORD *)(v222 + 24)
                            && v172 == *(_DWORD *)(v222 + 28)
                            && *(_DWORD *)(v222 + 32) == (_DWORD)v164)
                          {
                            LODWORD(cf.__r_.__value_.__l.__data_) = 0;
                            v69 = *((_QWORD *)&v183 + 1);
                            if (*((_QWORD *)&v183 + 1) >= (unint64_t)v184)
                            {
                              v70 = std::vector<AMCP::Wire_Description>::__emplace_back_slow_path<std::string &,unsigned long &,std::string const&,int>((uint64_t)&v183, v151, (uint64_t *)&v209, (uint64_t)&v218, (int *)&cf);
                            }
                            else
                            {
                              std::construct_at[abi:ne180100]<AMCP::Wire_Description,std::string &,unsigned long &,std::string const&,int,AMCP::Wire_Description*>(*((uint64_t *)&v183 + 1), v151, (uint64_t *)&v209, (uint64_t)&v218, (int *)&cf);
                              v70 = v69 + 192;
                            }
                            *((_QWORD *)&v183 + 1) = v70;
                            *(_DWORD *)(v70 - 64) = v162;
                            *(_DWORD *)(v70 - 48) = v58 == 0;
                            *(_DWORD *)(v70 - 44) = v56 != 0;
                            v120 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 104))(*(_QWORD *)a1);
                            HALIO::Implementation::maybe_create_mono_mix_map(&cf, v120, v171, v172, v159);
                            v121 = *(void **)(v70 - 88);
                            if (v121)
                            {
                              *(_QWORD *)(v70 - 80) = v121;
                              operator delete(v121);
                            }
                            *(std::string *)(v70 - 88) = cf;
                            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v121);
                            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                            size = (std::__shared_weak_count *)cf.__r_.__value_.__l.__size_;
                            v123 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                            if (cf.__r_.__value_.__l.__size_)
                            {
                              v124 = (unint64_t *)(cf.__r_.__value_.__l.__size_ + 8);
                              do
                                v125 = __ldaxr(v124);
                              while (__stlxr(v125 - 1, v124));
                              if (!v125)
                              {
                                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                                std::__shared_weak_count::__release_weak(size);
                              }
                            }
                            if (os_log_type_enabled(v123, OS_LOG_TYPE_DEBUG))
                            {
                              v127 = pthread_self();
                              v128 = pthread_mach_thread_np(v127);
                              if (*(char *)(v70 - 169) < 0)
                                std::string::__init_copy_ctor_external(&v188, *(const std::string::value_type **)(v70 - 192), *(_QWORD *)(v70 - 184));
                              else
                                v188 = *(std::string *)(v70 - 192);
                              v189 = *(char **)(v70 - 168);
                              v190 = *(_DWORD *)(v70 - 160);
                              if (*(char *)(v70 - 129) < 0)
                                std::string::__init_copy_ctor_external(&v185, *(const std::string::value_type **)(v70 - 152), *(_QWORD *)(v70 - 144));
                              else
                                v185 = *(std::string *)(v70 - 152);
                              v186 = *(_QWORD *)(v70 - 128);
                              v187 = *(_DWORD *)(v70 - 120);
                              cf = v188;
                              memset(&v188, 0, sizeof(v188));
                              v198 = v189;
                              LODWORD(v199) = v190;
                              __p = v185;
                              memset(&v185, 0, sizeof(v185));
                              v202 = v187;
                              v201 = v186;
                              AMCP::Wire_Identifier_to_string(&v203, (const void **)&cf.__r_.__value_.__l.__data_);
                              v129 = &v203;
                              if ((v203.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                v129 = (std::string *)v203.__r_.__value_.__r.__words[0];
                              LODWORD(v210) = 67109890;
                              HIDWORD(v210) = v128;
                              v211 = 2080;
                              v212 = "HALIO_Graph_Builder.cpp";
                              v213 = 1024;
                              v214 = 443;
                              v215 = 2080;
                              v216 = v129;
                              _os_log_debug_impl(&dword_1B57BA000, v123, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d -- %s", (uint8_t *)&v210, 0x22u);
                              if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v203.__r_.__value_.__l.__data_);
                              AMCP::Wire_Identifier::~Wire_Identifier((void **)&cf.__r_.__value_.__l.__data_);
                            }
                          }
                        }
                        else
                        {
                          v204 = 0;
                          if (v172)
                          {
                            v71 = 0;
                            v72 = 0;
                            v149 = v56 != 0;
                            v150 = v58 == 0;
                            v152 = v60;
                            while (1)
                            {
                              if (v72 >= 0x4EC4EC4EC4EC4EC5 * ((v223 - v222) >> 3))
                                goto LABEL_273;
                              v73 = v222 + 104 * v72;
                              if (*(_DWORD *)(v73 + 8) != 1819304813 || (*(_BYTE *)(v73 + 12) & 0x40) != 0)
                                goto LABEL_273;
                              v74 = *((_QWORD *)&v183 + 1);
                              if (*((_QWORD *)&v183 + 1) >= (unint64_t)v184)
                              {
                                v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v183 + 1) - v183) >> 6);
                                v77 = v76 + 1;
                                if (v76 + 1 > 0x155555555555555)
                                  std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                                if (0x5555555555555556 * ((uint64_t)&v184[-v183] >> 6) > v77)
                                  v77 = 0x5555555555555556 * ((uint64_t)&v184[-v183] >> 6);
                                v78 = (char *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v184[-v183] >> 6) >= 0xAAAAAAAAAAAAAALL
                                             ? 0x155555555555555
                                             : v77);
                                v199 = &v184;
                                if (v78)
                                  v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Description>>((unint64_t)v78);
                                else
                                  v79 = 0;
                                cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v78;
                                cf.__r_.__value_.__l.__size_ = (std::string::size_type)&v78[192 * v76];
                                cf.__r_.__value_.__r.__words[2] = cf.__r_.__value_.__l.__size_;
                                v198 = &v78[192 * v79];
                                std::construct_at[abi:ne180100]<AMCP::Wire_Description,std::string &,unsigned long &,std::string const&,unsigned long &,AMCP::Wire_Description*>(cf.__r_.__value_.__l.__size_, v151, (uint64_t *)&v209, (uint64_t)&v218, &v204);
                                v80 = cf.__r_.__value_.__l.__size_;
                                v75 = cf.__r_.__value_.__r.__words[2] + 192;
                                cf.__r_.__value_.__r.__words[2] += 192;
                                v81 = (__int128 *)*((_QWORD *)&v183 + 1);
                                v82 = (__int128 *)v183;
                                if (*((_QWORD *)&v183 + 1) == (_QWORD)v183)
                                {
                                  v83 = vdupq_n_s64(*((unint64_t *)&v183 + 1));
                                }
                                else
                                {
                                  do
                                  {
                                    v81 -= 12;
                                    std::construct_at[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description,AMCP::Wire_Description*>(v80 - 192, v81);
                                  }
                                  while (v81 != v82);
                                  v83 = (int64x2_t)v183;
                                  v75 = cf.__r_.__value_.__r.__words[2];
                                }
                                *(_QWORD *)&v183 = v80;
                                *((_QWORD *)&v183 + 1) = v75;
                                *(int64x2_t *)&cf.__r_.__value_.__r.__words[1] = v83;
                                v84 = v184;
                                v184 = v198;
                                v198 = v84;
                                cf.__r_.__value_.__r.__words[0] = v83.i64[0];
                                std::__split_buffer<AMCP::Wire_Description>::~__split_buffer((uint64_t)&cf);
                                v60 = v152;
                              }
                              else
                              {
                                std::construct_at[abi:ne180100]<AMCP::Wire_Description,std::string &,unsigned long &,std::string const&,unsigned long &,AMCP::Wire_Description*>(*((uint64_t *)&v183 + 1), v151, (uint64_t *)&v209, (uint64_t)&v218, &v204);
                                v75 = v74 + 192;
                              }
                              *((_QWORD *)&v183 + 1) = v75;
                              *(_DWORD *)(v75 - 64) = v162;
                              *(_DWORD *)(v75 - 48) = v150;
                              *(_DWORD *)(v75 - 44) = v149;
                              v85 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 104))(*(_QWORD *)a1);
                              HALIO::Implementation::maybe_create_mono_mix_map(&cf, v85, v171, v172, v159);
                              v86 = *(void **)(v75 - 88);
                              if (v86)
                              {
                                *(_QWORD *)(v75 - 80) = v86;
                                operator delete(v86);
                              }
                              *(std::string *)(v75 - 88) = cf;
                              *(_DWORD *)(v75 - 40) = v60;
                              *(_DWORD *)(v75 - 36) = v160;
                              AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v86);
                              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                              v87 = (std::__shared_weak_count *)cf.__r_.__value_.__l.__size_;
                              v88 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                              if (cf.__r_.__value_.__l.__size_)
                              {
                                v89 = (unint64_t *)(cf.__r_.__value_.__l.__size_ + 8);
                                do
                                  v90 = __ldaxr(v89);
                                while (__stlxr(v90 - 1, v89));
                                if (!v90)
                                {
                                  ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                                  std::__shared_weak_count::__release_weak(v87);
                                }
                              }
                              if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
                              {
                                v113 = pthread_self();
                                v114 = pthread_mach_thread_np(v113);
                                if (*(char *)(v75 - 169) < 0)
                                {
                                  std::string::__init_copy_ctor_external(&v194, *(const std::string::value_type **)(v75 - 192), *(_QWORD *)(v75 - 184));
                                }
                                else
                                {
                                  v115 = *(_OWORD *)(v75 - 192);
                                  v194.__r_.__value_.__r.__words[2] = *(_QWORD *)(v75 - 176);
                                  *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v115;
                                }
                                v116 = *(char **)(v75 - 168);
                                v196 = *(_DWORD *)(v75 - 160);
                                v195 = v116;
                                if (*(char *)(v75 - 129) < 0)
                                {
                                  std::string::__init_copy_ctor_external(&v191, *(const std::string::value_type **)(v75 - 152), *(_QWORD *)(v75 - 144));
                                }
                                else
                                {
                                  v117 = *(_OWORD *)(v75 - 152);
                                  v191.__r_.__value_.__r.__words[2] = *(_QWORD *)(v75 - 136);
                                  *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v117;
                                }
                                v118 = *(_QWORD *)(v75 - 128);
                                v193 = *(_DWORD *)(v75 - 120);
                                v192 = v118;
                                cf = v194;
                                memset(&v194, 0, sizeof(v194));
                                v198 = v195;
                                LODWORD(v199) = v196;
                                __p = v191;
                                memset(&v191, 0, sizeof(v191));
                                v202 = v193;
                                v201 = v118;
                                AMCP::Wire_Identifier_to_string(&v203, (const void **)&cf.__r_.__value_.__l.__data_);
                                v119 = &v203;
                                if ((v203.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                  v119 = (std::string *)v203.__r_.__value_.__r.__words[0];
                                LODWORD(v210) = 67109890;
                                HIDWORD(v210) = v114;
                                v211 = 2080;
                                v212 = "HALIO_Graph_Builder.cpp";
                                v213 = 1024;
                                v214 = 410;
                                v215 = 2080;
                                v216 = v119;
                                _os_log_debug_impl(&dword_1B57BA000, v88, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d -- %s", (uint8_t *)&v210, 0x22u);
                                if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(v203.__r_.__value_.__l.__data_);
                                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(__p.__r_.__value_.__l.__data_);
                                if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(cf.__r_.__value_.__l.__data_);
                              }
                              if (*(_DWORD *)(v73 + 28))
                                break;
                              v112 = 0;
LABEL_248:
                              v71 += v112;
                              v72 = ++v204;
                              v60 = v152;
                              if (v71 >= v172)
                                goto LABEL_273;
                            }
                            v91 = 0;
                            while (2)
                            {
                              v92 = v91 + v71;
                              if (v91 + v71 >= v172)
                              {
                                v97 = *(char **)(v75 - 104);
                                v96 = *(_QWORD *)(v75 - 96);
                                if ((unint64_t)v97 >= v96)
                                {
                                  v99 = *(char **)(v75 - 112);
                                  v106 = (v97 - v99) >> 2;
                                  v107 = v106 + 1;
                                  if ((unint64_t)(v106 + 1) >> 62)
LABEL_320:
                                    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                                  v108 = v96 - (_QWORD)v99;
                                  if (v108 >> 1 > v107)
                                    v107 = v108 >> 1;
                                  v103 = (unint64_t)v108 >= 0x7FFFFFFFFFFFFFFCLL;
                                  v104 = 0x3FFFFFFFFFFFFFFFLL;
                                  if (!v103)
                                    v104 = v107;
                                  if (v104)
                                  {
                                    v104 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v104);
                                    v99 = *(char **)(v75 - 112);
                                    v97 = *(char **)(v75 - 104);
                                  }
                                  else
                                  {
                                    v105 = 0;
                                  }
                                  v109 = (_DWORD *)(v104 + 4 * v106);
                                  *v109 = -1;
                                  v98 = v109 + 1;
                                  while (v97 != v99)
                                  {
                                    v111 = *((_DWORD *)v97 - 1);
                                    v97 -= 4;
                                    *--v109 = v111;
                                  }
                                  goto LABEL_243;
                                }
                                *(_DWORD *)v97 = -1;
                                v95 = v97 + 4;
LABEL_220:
                                v98 = v95;
                              }
                              else
                              {
                                v94 = *(char **)(v75 - 104);
                                v93 = *(_QWORD *)(v75 - 96);
                                if ((unint64_t)v94 < v93)
                                {
                                  *(_DWORD *)v94 = v92;
                                  v95 = v94 + 4;
                                  goto LABEL_220;
                                }
                                v99 = *(char **)(v75 - 112);
                                v100 = (v94 - v99) >> 2;
                                v101 = v100 + 1;
                                if ((unint64_t)(v100 + 1) >> 62)
                                  goto LABEL_320;
                                v102 = v93 - (_QWORD)v99;
                                if (v102 >> 1 > v101)
                                  v101 = v102 >> 1;
                                v103 = (unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL;
                                v104 = 0x3FFFFFFFFFFFFFFFLL;
                                if (!v103)
                                  v104 = v101;
                                if (v104)
                                {
                                  v104 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v104);
                                  v99 = *(char **)(v75 - 112);
                                  v94 = *(char **)(v75 - 104);
                                }
                                else
                                {
                                  v105 = 0;
                                }
                                v109 = (_DWORD *)(v104 + 4 * v100);
                                *v109 = v92;
                                v98 = v109 + 1;
                                while (v94 != v99)
                                {
                                  v110 = *((_DWORD *)v94 - 1);
                                  v94 -= 4;
                                  *--v109 = v110;
                                }
LABEL_243:
                                *(_QWORD *)(v75 - 112) = v109;
                                *(_QWORD *)(v75 - 104) = v98;
                                *(_QWORD *)(v75 - 96) = v104 + 4 * v105;
                                if (v99)
                                  operator delete(v99);
                              }
                              *(_QWORD *)(v75 - 104) = v98;
                              ++v91;
                              v112 = *(unsigned int *)(v73 + 28);
                              if (v91 >= v112)
                                goto LABEL_248;
                              continue;
                            }
                          }
                        }
                      }
LABEL_273:
                      for (j = 12; j != 6; j -= 3)
                      {
                        cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&(&valuePtr)[j];
                        std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
                      }
                      if (v221 < 0)
                        operator delete(v220);
                      if (SBYTE7(v219) < 0)
                        operator delete((void *)v218);
                      v63 = v207;
                    }
                    if (v63)
                      CFRelease(v63);
                    v51 = v156;
                    v50 = v157;
                    if (v208)
                      CFRelease(v208);
                    if (++v52 == v158)
                      goto LABEL_86;
                  }
                }
              }
            }
          }
          else
          {
            v6 = v23;
          }
          goto LABEL_86;
        }
        if (++v20 == v17)
          goto LABEL_85;
      }
    }
  }
LABEL_297:
  LOBYTE(v180) = 0;
  v181 = 0;
  if (*(_BYTE *)(a5 + 8))
  {
    std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(&v180, *(CFTypeRef *)a5);
    v181 = 1;
  }
  HALIO::HALIO_Graph_Builder::maybe_set_master_device((uint64_t *)a1, (uint64_t)v175, (uint64_t)&v180);
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v180);
  if (v154 != &v183)
    std::vector<AMCP::Wire_Description>::__assign_with_size[abi:ne180100]<AMCP::Wire_Description*,AMCP::Wire_Description*>((uint64_t)v154, v183, *((uint64_t *)&v183 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v183 + 1) - v183) >> 6));
  valuePtr = (NSObject **)&v183;
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&valuePtr);
}

void sub_1B5BA60B4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<std::tuple<double,applesauce::CF::StringRef>,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 16))
  {
    v2 = *(const void **)(a1 + 8);
    if (v2)
      CFRelease(v2);
  }
  return a1;
}

_QWORD *HALIO::Implementation::maybe_create_mono_mix_map(_QWORD *result, int a2, char a3, unsigned int a4, unint64_t a5)
{
  _QWORD *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v10;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  NSObject *v14;
  _opaque_pthread_t *v15;
  mach_port_t v16;
  NSObject **v17;
  __int16 v18;
  char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v5 = result;
  v24 = *MEMORY[0x1E0C80C00];
  if ((a3 & 0x20) != 0)
    v6 = a4;
  else
    v6 = 1;
  if ((a3 & 0x20) != 0)
    v7 = 1;
  else
    v7 = a4;
  if (v6 <= v7)
    v6 = v7;
  if (v6 < 2 || a2 == 0)
  {
    *result = 0;
    result[1] = 0;
    result[2] = 0;
  }
  else
  {
    if (!(_DWORD)a5)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v17, "com.apple.coreaudio", "AMCP");
      v11 = *v17;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v17);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = pthread_self();
        v13 = pthread_mach_thread_np(v12);
        LODWORD(v17) = 67109890;
        HIDWORD(v17) = v13;
        v18 = 2080;
        v19 = "HALIO_Graph_Builder.cpp";
        v20 = 1024;
        v21 = 31;
        v22 = 2080;
        v23 = "default_stereo_pair[0] > 0";
        _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Channel numbers are indexed starting from 1", (uint8_t *)&v17, 0x22u);
      }
      abort();
    }
    if (!HIDWORD(a5))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v17, "com.apple.coreaudio", "AMCP");
      v14 = *v17;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v17);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v15 = pthread_self();
        v16 = pthread_mach_thread_np(v15);
        LODWORD(v17) = 67109890;
        HIDWORD(v17) = v16;
        v18 = 2080;
        v19 = "HALIO_Graph_Builder.cpp";
        v20 = 1024;
        v21 = 32;
        v22 = 2080;
        v23 = "default_stereo_pair[1] > 0";
        _os_log_error_impl(&dword_1B57BA000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Channel numbers are indexed starting from 1", (uint8_t *)&v17, 0x22u);
      }
      abort();
    }
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    v10 = operator new(8uLL);
    *v5 = v10;
    *v10 = (a5 & 0xFFFFFFFF00000000 | (a5 - 1)) - 0x100000000;
    result = v10 + 1;
    v5[1] = result;
    v5[2] = result;
  }
  return result;
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_15:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_15;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_17:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_18:
  *v12 = &v9[v17];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Description>>(unint64_t a1)
{
  if (a1 >= 0x155555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(192 * a1);
}

void std::vector<AMCP::Wire_Description>::__swap_out_circular_buffer(__int128 **a1, _QWORD *a2)
{
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = (__int128 *)a2[1];
  while (v4 != v5)
  {
    v4 -= 12;
    std::construct_at[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description,AMCP::Wire_Description*>((uint64_t)(v6 - 12), v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = (__int128 *)a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = (__int128 *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<AMCP::Wire_Description>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 192;
    std::__destroy_at[abi:ne180100]<AMCP::Wire_Description,0>(i - 192);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void HALIO::HALIO_Graph_Builder::connect_input_terminals(_QWORD *a1, CFArrayRef *a2, _QWORD *a3, _QWORD *a4, uint64_t a5, double *a6, uint64_t a7)
{
  const __CFArray *v7;
  const __CFArray *v12;
  unint64_t v13;
  CFTypeRef v14;
  CFTypeRef v15;
  int v16;
  CFTypeRef v17;
  int v18;
  CFTypeRef v19;
  CFTypeRef v20;
  int v21;
  uint64_t v22;
  const __CFString *v23;
  uint64_t v24;
  uint64_t v25;
  const UInt8 *p_valuePtr;
  CFIndex v27;
  uint64_t v28;
  unint64_t v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  __int128 v35;
  double v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  std::string::size_type v47;
  uint64_t v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  AMCP::Log::Scope_Registry *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *size;
  NSObject *v61;
  unint64_t *v62;
  unint64_t v63;
  _opaque_pthread_t *v64;
  mach_port_t v65;
  std::string *p_p;
  uint64_t i;
  std::runtime_error *exception;
  std::runtime_error *v69;
  std::runtime_error *v70;
  std::runtime_error *v71;
  std::runtime_error *v72;
  std::runtime_error *v73;
  std::runtime_error *v74;
  CFIndex v75;
  _QWORD *v76;
  const __CFArray *v77;
  const __CFArray *v78;
  CFIndex Count;
  uint64_t v80;
  _BOOL4 v81;
  uint64_t *v82;
  int v84;
  int v85;
  uint64_t v87;
  std::string v89;
  uint64_t v90;
  int v91;
  std::string v92;
  char *v93;
  int v94;
  std::string cf;
  char *v96;
  _QWORD *v97;
  std::string v98;
  uint64_t v99;
  int v100;
  std::string __p;
  __int128 v102;
  __int128 v103;
  unint64_t v104;
  CFTypeRef valuePtr;
  void *v106;
  unsigned __int8 v107;
  char v108;
  void *v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  CFStringRef v113;
  const __CFString *v114;
  const __CFString *v115;
  const __CFDictionary *v116;
  uint64_t v117;
  uint8_t buf[8];
  __int16 v119;
  char *v120;
  __int16 v121;
  int v122;
  __int16 v123;
  std::string *v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  v82 = a4 + 12;
  v117 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a4[13] - a4[12]) >> 3);
  v7 = *a2;
  if (*a2)
  {
    Count = CFArrayGetCount(*a2);
    v12 = *a2;
    v78 = v12;
    v75 = v12 ? CFArrayGetCount(v12) : 0;
    if (Count)
    {
      v13 = 0;
      v80 = (uint64_t)(a4 + 1);
      v76 = (_QWORD *)(a5 + 16);
      v77 = v7;
      v87 = a5;
      do
      {
        if (v7 == v78 && v13 == v75)
          break;
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v116, v7, v13);
        if (!v116)
          goto LABEL_148;
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, "uid");
        cf.__r_.__value_.__r.__words[0] = 0;
        applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v115, v116, valuePtr, &cf);
        if (cf.__r_.__value_.__r.__words[0])
          CFRelease(cf.__r_.__value_.__l.__data_);
        if (valuePtr)
          CFRelease(valuePtr);
        if (!v116)
          goto LABEL_148;
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "latency-in");
        LODWORD(valuePtr) = 0;
        *(_QWORD *)buf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        if (!*(_QWORD *)buf)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, v116, cf.__r_.__value_.__l.__data_, buf);
        v14 = valuePtr;
        if (!valuePtr)
          goto LABEL_148;
        v85 = applesauce::CF::convert_to<int,0>((const __CFNumber *)valuePtr);
        CFRelease(v14);
        if (*(_QWORD *)buf)
          CFRelease(*(CFTypeRef *)buf);
        if (cf.__r_.__value_.__r.__words[0])
          CFRelease(cf.__r_.__value_.__l.__data_);
        if (!v116)
          goto LABEL_148;
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "don't pad");
        LODWORD(valuePtr) = 1;
        *(_QWORD *)buf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        if (!*(_QWORD *)buf)
        {
          v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v69, "Could not construct");
          __cxa_throw(v69, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, v116, cf.__r_.__value_.__l.__data_, buf);
        v15 = valuePtr;
        if (!valuePtr)
          goto LABEL_148;
        v16 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)valuePtr);
        CFRelease(v15);
        if (*(_QWORD *)buf)
          CFRelease(*(CFTypeRef *)buf);
        if (cf.__r_.__value_.__r.__words[0])
          CFRelease(cf.__r_.__value_.__l.__data_);
        if (!v116)
          goto LABEL_148;
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "drift");
        LODWORD(valuePtr) = 0;
        *(_QWORD *)buf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        if (!*(_QWORD *)buf)
        {
          v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v70, "Could not construct");
          __cxa_throw(v70, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, v116, cf.__r_.__value_.__l.__data_, buf);
        v17 = valuePtr;
        if (!valuePtr)
          goto LABEL_148;
        v18 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)valuePtr);
        CFRelease(v17);
        if (*(_QWORD *)buf)
          CFRelease(*(CFTypeRef *)buf);
        if (cf.__r_.__value_.__r.__words[0])
          CFRelease(cf.__r_.__value_.__l.__data_);
        if (!v116)
          goto LABEL_148;
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "drift algorithm");
        LODWORD(valuePtr) = 0;
        *(_QWORD *)buf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        if (!*(_QWORD *)buf)
        {
          v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v72, "Could not construct");
          __cxa_throw(v72, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, v116, cf.__r_.__value_.__l.__data_, buf);
        v19 = valuePtr;
        if (!valuePtr)
          goto LABEL_148;
        v84 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)valuePtr);
        CFRelease(v19);
        if (*(_QWORD *)buf)
          CFRelease(*(CFTypeRef *)buf);
        if (cf.__r_.__value_.__r.__words[0])
          CFRelease(cf.__r_.__value_.__l.__data_);
        if (!v116)
          goto LABEL_148;
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "drift quality");
        LODWORD(valuePtr) = 64;
        *(_QWORD *)buf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        if (!*(_QWORD *)buf)
        {
          v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v71, "Could not construct");
          __cxa_throw(v71, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, v116, cf.__r_.__value_.__l.__data_, buf);
        v20 = valuePtr;
        if (!valuePtr)
        {
LABEL_148:
          v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v73, "Could not construct");
          __cxa_throw(v73, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v21 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)valuePtr);
        CFRelease(v20);
        if (*(_QWORD *)buf)
          CFRelease(*(CFTypeRef *)buf);
        if (cf.__r_.__value_.__r.__words[0])
          CFRelease(cf.__r_.__value_.__l.__data_);
        v22 = *a1;
        v23 = v115;
        if (v115)
          CFRetain(v115);
        v114 = v23;
        v24 = (*(uint64_t (**)(uint64_t, const __CFString **))(*(_QWORD *)v22 + 24))(v22, &v114);
        if (v114)
          CFRelease(v114);
        v25 = *a1;
        AMCP::create_device_node_uid_from_device_uid_and_direction(&v115, 1, (void **)&valuePtr);
        if ((v107 & 0x80u) == 0)
          p_valuePtr = (const UInt8 *)&valuePtr;
        else
          p_valuePtr = (const UInt8 *)valuePtr;
        if ((v107 & 0x80u) == 0)
          v27 = v107;
        else
          v27 = (CFIndex)v106;
        v113 = CFStringCreateWithBytes(0, p_valuePtr, v27, 0x8000100u, 0);
        if (!v113)
        {
          v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v74, "Could not construct");
          __cxa_throw(v74, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v28 = (*(uint64_t (**)(uint64_t, CFStringRef *))(*(_QWORD *)v25 + 32))(v25, &v113);
        if (v113)
          CFRelease(v113);
        if ((char)v107 < 0)
          operator delete((void *)valuePtr);
        if (((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, v24) & 1) == 0
          && ((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, v28) & 1) == 0)
        {
          (*(void (**)(CFTypeRef *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 40))(&valuePtr, *a1, v28);
          v104 = 0;
          if (v112 != v111)
          {
            v29 = 0;
            v81 = v18 == 0;
            v30 = v16 != 0;
            do
            {
              v31 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)*a1 + 56))(*a1, v24, 1, v29);
              if (v31)
              {
                LODWORD(cf.__r_.__value_.__l.__data_) = v31;
                v32 = *(_QWORD *)(a7 + 24);
                if (!v32)
                  std::__throw_bad_function_call[abi:ne180100]();
                if ((*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v32 + 48))(v32, &cf))
                {
                  if (0x4EC4EC4EC4EC4EC5 * ((v112 - v111) >> 3) <= v29)
                    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
                  v33 = v111 + 104 * v29;
                  v34 = *(double *)v33;
                  v35 = *(_OWORD *)(v33 + 24);
                  v102 = *(_OWORD *)(v33 + 8);
                  v103 = v35;
                  v36 = *a6;
                  if (*a6 == 0.0)
                  {
                    *a6 = v34;
                    v36 = v34;
                  }
                  v37 = a4[13];
                  v38 = a4[14];
                  if (v37 >= v38)
                  {
                    v42 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v37 - *v82) >> 3);
                    v43 = v42 + 1;
                    if ((unint64_t)(v42 + 1) > 0x276276276276276)
                      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                    v44 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v38 - *v82) >> 3);
                    if (2 * v44 > v43)
                      v43 = 2 * v44;
                    if (v44 >= 0x13B13B13B13B13BLL)
                      v45 = 0x276276276276276;
                    else
                      v45 = v43;
                    v97 = a4 + 14;
                    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Terminal_Description>>(v45);
                    v47 = (std::string::size_type)&v46[104 * v42];
                    cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
                    cf.__r_.__value_.__l.__size_ = v47;
                    v96 = &v46[104 * v48];
                    *(double *)v47 = v36;
                    v49 = v103;
                    *(_OWORD *)(v47 + 8) = v102;
                    *(_OWORD *)(v47 + 24) = v49;
                    *(_OWORD *)(v47 + 40) = 0u;
                    *(_OWORD *)(v47 + 56) = 0u;
                    *(_OWORD *)(v47 + 72) = 0u;
                    *(_QWORD *)(v47 + 88) = 1;
                    *(_BYTE *)(v47 + 96) = 0;
                    cf.__r_.__value_.__r.__words[2] = v47 + 104;
                    std::vector<AMCP::Terminal_Description>::__swap_out_circular_buffer(v82, &cf);
                    v41 = a4;
                    v40 = a4[13];
                    std::__split_buffer<AMCP::Terminal_Description>::~__split_buffer((uint64_t)&cf);
                  }
                  else
                  {
                    *(double *)v37 = v36;
                    v39 = v103;
                    *(_OWORD *)(v37 + 8) = v102;
                    *(_OWORD *)(v37 + 24) = v39;
                    *(_OWORD *)(v37 + 40) = 0u;
                    *(_OWORD *)(v37 + 56) = 0u;
                    *(_OWORD *)(v37 + 72) = 0u;
                    *(_QWORD *)(v37 + 88) = 1;
                    *(_BYTE *)(v37 + 96) = 0;
                    v40 = v37 + 104;
                    v41 = a4;
                  }
                  v41[13] = v40;
                  if (a3[1] <= v29 || ((*(_QWORD *)(*a3 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v29) & 1) != 0)
                  {
                    v51 = *(_QWORD *)(v87 + 8);
                    v50 = *(_QWORD *)(v87 + 16);
                    if (v51 >= v50)
                    {
                      v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - *(_QWORD *)v87) >> 6);
                      v56 = v55 + 1;
                      if (v55 + 1 > 0x155555555555555)
                        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                      v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - *(_QWORD *)v87) >> 6);
                      if (2 * v57 > v56)
                        v56 = 2 * v57;
                      if (v57 >= 0xAAAAAAAAAAAAAALL)
                        v58 = 0x155555555555555;
                      else
                        v58 = v56;
                      v97 = v76;
                      if (v58)
                        v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Description>>(v58);
                      else
                        v59 = 0;
                      cf.__r_.__value_.__r.__words[0] = v58;
                      cf.__r_.__value_.__l.__size_ = v58 + 192 * v55;
                      cf.__r_.__value_.__r.__words[2] = cf.__r_.__value_.__l.__size_;
                      v96 = (char *)(v58 + 192 * v59);
                      std::construct_at[abi:ne180100]<AMCP::Wire_Description,std::string const&,unsigned long &,std::string&,unsigned long &,AMCP::Wire_Description*>(cf.__r_.__value_.__l.__size_, (uint64_t)&v106, (uint64_t *)&v104, v80, &v117);
                      cf.__r_.__value_.__r.__words[2] += 192;
                      v54 = v87;
                      std::vector<AMCP::Wire_Description>::__swap_out_circular_buffer((__int128 **)v87, &cf);
                      v53 = *(_QWORD *)(v87 + 8);
                      v52 = (AMCP::Log::Scope_Registry *)std::__split_buffer<AMCP::Wire_Description>::~__split_buffer((uint64_t)&cf);
                    }
                    else
                    {
                      v52 = (AMCP::Log::Scope_Registry *)std::construct_at[abi:ne180100]<AMCP::Wire_Description,std::string const&,unsigned long &,std::string&,unsigned long &,AMCP::Wire_Description*>(*(_QWORD *)(v87 + 8), (uint64_t)&v106, (uint64_t *)&v104, v80, &v117);
                      v53 = v51 + 192;
                      v54 = v87;
                    }
                    *(_QWORD *)(v54 + 8) = v53;
                    *(_DWORD *)(v53 - 64) = v85;
                    *(_DWORD *)(v53 - 48) = v81;
                    *(_DWORD *)(v53 - 44) = v30;
                    *(_DWORD *)(v53 - 40) = v84;
                    *(_DWORD *)(v53 - 36) = v21;
                    AMCP::Log::Scope_Registry::get(v52);
                    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
                    size = (std::__shared_weak_count *)cf.__r_.__value_.__l.__size_;
                    v61 = *(NSObject **)cf.__r_.__value_.__l.__data_;
                    if (cf.__r_.__value_.__l.__size_)
                    {
                      v62 = (unint64_t *)(cf.__r_.__value_.__l.__size_ + 8);
                      do
                        v63 = __ldaxr(v62);
                      while (__stlxr(v63 - 1, v62));
                      if (!v63)
                      {
                        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                        std::__shared_weak_count::__release_weak(size);
                      }
                    }
                    if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
                    {
                      v64 = pthread_self();
                      v65 = pthread_mach_thread_np(v64);
                      if (*(char *)(v53 - 169) < 0)
                        std::string::__init_copy_ctor_external(&v92, *(const std::string::value_type **)(v53 - 192), *(_QWORD *)(v53 - 184));
                      else
                        v92 = *(std::string *)(v53 - 192);
                      v93 = *(char **)(v53 - 168);
                      v94 = *(_DWORD *)(v53 - 160);
                      if (*(char *)(v53 - 129) < 0)
                        std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)(v53 - 152), *(_QWORD *)(v53 - 144));
                      else
                        v89 = *(std::string *)(v53 - 152);
                      v90 = *(_QWORD *)(v53 - 128);
                      v91 = *(_DWORD *)(v53 - 120);
                      cf = v92;
                      memset(&v92, 0, sizeof(v92));
                      v96 = v93;
                      LODWORD(v97) = v94;
                      v98 = v89;
                      memset(&v89, 0, sizeof(v89));
                      v100 = *(_DWORD *)(v53 - 120);
                      v99 = *(_QWORD *)(v53 - 128);
                      AMCP::Wire_Identifier_to_string(&__p, (const void **)&cf.__r_.__value_.__l.__data_);
                      p_p = &__p;
                      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                      *(_DWORD *)buf = 67109890;
                      *(_DWORD *)&buf[4] = v65;
                      v119 = 2080;
                      v120 = "HALIO_Graph_Builder.cpp";
                      v121 = 1024;
                      v122 = 220;
                      v123 = 2080;
                      v124 = p_p;
                      _os_log_debug_impl(&dword_1B57BA000, v61, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d -- %s", buf, 0x22u);
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__p.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v98.__r_.__value_.__l.__data_);
                      if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(cf.__r_.__value_.__l.__data_);
                    }
                  }
                  ++v117;
                  v29 = v104;
                }
              }
              v104 = ++v29;
            }
            while (v29 < 0x4EC4EC4EC4EC4EC5 * ((v112 - v111) >> 3));
          }
          for (i = 96; i != 48; i -= 24)
          {
            cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&valuePtr + i;
            std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
          }
          if (v110 < 0)
            operator delete(v109);
          if (v108 < 0)
            operator delete(v106);
          v23 = v115;
        }
        if (v23)
          CFRelease(v23);
        v7 = v77;
        if (v116)
          CFRelease(v116);
        ++v13;
      }
      while (v13 != Count);
    }
  }
}

void sub_1B5BA74C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void std::vector<AMCP::Wire_Description>::__assign_with_size[abi:ne180100]<AMCP::Wire_Description*,AMCP::Wire_Description*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;

  v8 = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 6) < a4)
  {
    std::vector<AMCP::Wire_Description>::__vdeallocate((void **)a1);
    if (a4 > 0x155555555555555)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v9 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 6);
    if (v9 <= a4)
      v9 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 6) >= 0xAAAAAAAAAAAAAALL)
      v10 = 0x155555555555555;
    else
      v10 = v9;
    std::vector<AMCP::Wire_Description>::__vallocate[abi:ne180100]((_QWORD *)a1, v10);
    v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Wire_Description>,AMCP::Wire_Description*,AMCP::Wire_Description*,AMCP::Wire_Description*>(a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 6) < a4)
  {
    v12 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 6 << 6);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AMCP::Wire_Description *,AMCP::Wire_Description *,AMCP::Wire_Description *>(a2, v12, (uint64_t)v8);
    v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Wire_Description>,AMCP::Wire_Description*,AMCP::Wire_Description*,AMCP::Wire_Description*>(v12, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v11;
    return;
  }
  v13 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AMCP::Wire_Description *,AMCP::Wire_Description *,AMCP::Wire_Description *>(a2, a3, (uint64_t)v8);
  for (i = *(_QWORD *)(a1 + 8); i != v13; std::__destroy_at[abi:ne180100]<AMCP::Wire_Description,0>(i))
    i -= 192;
  *(_QWORD *)(a1 + 8) = v13;
}

void sub_1B5BA774C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B5BA7754(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AMCP::Wire_Description *,AMCP::Wire_Description *,AMCP::Wire_Description *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      v8 = a1 + v6;
      std::string::operator=((std::string *)(a3 + v6), (const std::string *)(a1 + v6));
      v9 = *(_DWORD *)(a1 + v6 + 32);
      *(_QWORD *)(v7 + 24) = *(_QWORD *)(a1 + v6 + 24);
      *(_DWORD *)(v7 + 32) = v9;
      std::string::operator=((std::string *)(a3 + v6 + 40), (const std::string *)(a1 + v6 + 40));
      v10 = *(_DWORD *)(a1 + v6 + 72);
      *(_QWORD *)(v7 + 64) = *(_QWORD *)(a1 + v6 + 64);
      *(_DWORD *)(v7 + 72) = v10;
      if (a3 != a1)
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v7 + 80), *(char **)(v8 + 80), *(_QWORD *)(v8 + 88), (uint64_t)(*(_QWORD *)(v8 + 88) - *(_QWORD *)(v8 + 80)) >> 2);
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v7 + 104), *(char **)(v8 + 104), *(_QWORD *)(v8 + 112), (uint64_t)(*(_QWORD *)(v8 + 112) - *(_QWORD *)(v8 + 104)) >> 2);
        v11 = *(_OWORD *)(v8 + 128);
        v12 = *(_OWORD *)(v8 + 144);
        *(_BYTE *)(v7 + 160) = *(_BYTE *)(v8 + 160);
        *(_OWORD *)(v7 + 128) = v11;
        *(_OWORD *)(v7 + 144) = v12;
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v7 + 168), *(std::string **)(v8 + 168), *(__int128 **)(v8 + 176), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v8 + 176) - *(_QWORD *)(v8 + 168)) >> 3));
      }
      v6 += 192;
    }
    while (v8 + 192 != a2);
    a3 += v6;
  }
  return a3;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Wire_Description>,AMCP::Wire_Description*,AMCP::Wire_Description*,AMCP::Wire_Description*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      AMCP::Wire_Description::Wire_Description((std::string *)(a3 + v6), (const AMCP::Wire_Description *)(a1 + v6));
      v6 += 192;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void std::vector<AMCP::Wire_Description>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 192;
        std::__destroy_at[abi:ne180100]<AMCP::Wire_Description,0>(v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<AMCP::Wire_Description>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x155555555555556)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Description>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[192 * v4];
  return result;
}

uint64_t std::construct_at[abi:ne180100]<AMCP::Wire_Description,std::string &,unsigned long &,std::string const&,unsigned long &,AMCP::Wire_Description*>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  char v11;
  std::string::size_type size;
  char v13;
  std::string::size_type v14;
  std::string v16;
  std::string v17;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v17 = *(std::string *)a2;
  v9 = *a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v16 = *(std::string *)a4;
  v10 = *a5;
  v11 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  size = v17.__r_.__value_.__l.__size_;
  *(_QWORD *)a1 = v17.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 8) = size;
  *(_QWORD *)(a1 + 15) = *(std::string::size_type *)((char *)&v17.__r_.__value_.__r.__words[1] + 7);
  *(_BYTE *)(a1 + 23) = v11;
  *(_QWORD *)(a1 + 24) = v9;
  *(_DWORD *)(a1 + 32) = 0;
  v13 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  *(_QWORD *)(a1 + 55) = *(std::string::size_type *)((char *)&v16.__r_.__value_.__r.__words[1] + 7);
  v14 = v16.__r_.__value_.__l.__size_;
  *(_QWORD *)(a1 + 40) = v16.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 48) = v14;
  *(_BYTE *)(a1 + 63) = v13;
  *(_QWORD *)(a1 + 64) = v10;
  *(_DWORD *)(a1 + 72) = 1;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 140) = xmmword_1B5D68B90;
  *(_DWORD *)(a1 + 156) = 64;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  return a1;
}

void sub_1B5BA7AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AMCP::Wire_Identifier_to_string(std::string *this, const void **a2)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *p_p;
  std::string::size_type size;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string __p;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;

  AMCP::Terminal_Identifier_to_string(&v14, a2);
  v4 = std::string::insert(&v14, 0, "{ ", 2uLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v15, " -> ", 4uLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  AMCP::Terminal_Identifier_to_string(&__p, a2 + 5);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v10 = std::string::append(&v16, (const std::string::value_type *)p_p, size);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v17, " }", 2uLL);
  *this = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_1B5BA7C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 25) < 0)
    operator delete(*(void **)(v33 - 48));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:ne180100]<AMCP::Wire_Description,std::string &,unsigned long &,std::string const&,int,AMCP::Wire_Description*>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int *a5)
{
  uint64_t v9;
  uint64_t v10;
  char v11;
  std::string::size_type size;
  char v13;
  std::string::size_type v14;
  std::string v16;
  std::string v17;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v17 = *(std::string *)a2;
  v9 = *a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v16 = *(std::string *)a4;
  v10 = *a5;
  v11 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  size = v17.__r_.__value_.__l.__size_;
  *(_QWORD *)a1 = v17.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 8) = size;
  *(_QWORD *)(a1 + 15) = *(std::string::size_type *)((char *)&v17.__r_.__value_.__r.__words[1] + 7);
  *(_BYTE *)(a1 + 23) = v11;
  *(_QWORD *)(a1 + 24) = v9;
  *(_DWORD *)(a1 + 32) = 0;
  v13 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  *(_QWORD *)(a1 + 55) = *(std::string::size_type *)((char *)&v16.__r_.__value_.__r.__words[1] + 7);
  v14 = v16.__r_.__value_.__l.__size_;
  *(_QWORD *)(a1 + 40) = v16.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 48) = v14;
  *(_BYTE *)(a1 + 63) = v13;
  *(_QWORD *)(a1 + 64) = v10;
  *(_DWORD *)(a1 + 72) = 1;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 140) = xmmword_1B5D68B90;
  *(_DWORD *)(a1 + 156) = 64;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  return a1;
}

void sub_1B5BA7D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<AMCP::Wire_Description>::__emplace_back_slow_path<std::string &,unsigned long &,std::string const&,int>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int *a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 6);
  v6 = v5 + 1;
  if (v5 + 1 > 0x155555555555555)
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  v12 = a1 + 16;
  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 6) > v6)
    v6 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 6);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 6) >= 0xAAAAAAAAAAAAAALL)
    v13 = 0x155555555555555;
  else
    v13 = v6;
  v21 = v12;
  if (v13)
    v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Description>>(v13);
  else
    v14 = 0;
  v17 = v13;
  v18 = v13 + 192 * v5;
  v20 = v13 + 192 * v14;
  std::construct_at[abi:ne180100]<AMCP::Wire_Description,std::string &,unsigned long &,std::string const&,int,AMCP::Wire_Description*>(v18, a2, a3, a4, a5);
  v19 = v18 + 192;
  std::vector<AMCP::Wire_Description>::__swap_out_circular_buffer((__int128 **)a1, &v17);
  v15 = *(_QWORD *)(a1 + 8);
  std::__split_buffer<AMCP::Wire_Description>::~__split_buffer((uint64_t)&v17);
  return v15;
}

void sub_1B5BA7EC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<AMCP::Wire_Description>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<AMCP::Wire_Description,std::string const&,unsigned long &,std::string&,unsigned long &,AMCP::Wire_Description*>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  char v11;
  std::string::size_type size;
  char v13;
  std::string::size_type v14;
  std::string v16;
  std::string v17;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v17 = *(std::string *)a2;
  v9 = *a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v16 = *(std::string *)a4;
  v10 = *a5;
  v11 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  size = v17.__r_.__value_.__l.__size_;
  *(_QWORD *)a1 = v17.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 8) = size;
  *(_QWORD *)(a1 + 15) = *(std::string::size_type *)((char *)&v17.__r_.__value_.__r.__words[1] + 7);
  *(_BYTE *)(a1 + 23) = v11;
  *(_QWORD *)(a1 + 24) = v9;
  *(_DWORD *)(a1 + 32) = 0;
  v13 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  *(_QWORD *)(a1 + 55) = *(std::string::size_type *)((char *)&v16.__r_.__value_.__r.__words[1] + 7);
  v14 = v16.__r_.__value_.__l.__size_;
  *(_QWORD *)(a1 + 40) = v16.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 48) = v14;
  *(_BYTE *)(a1 + 63) = v13;
  *(_QWORD *)(a1 + 64) = v10;
  *(_DWORD *)(a1 + 72) = 1;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 140) = xmmword_1B5D68B90;
  *(_DWORD *)(a1 + 156) = 64;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  return a1;
}

void sub_1B5BA7FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void HALIO::HALIO_Graph_Builder::Aggregate_Graph_Configuration::~Aggregate_Graph_Configuration(HALIO::HALIO_Graph_Builder::Aggregate_Graph_Configuration *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v2 = (char *)this + 72;
  v3 = (char *)*((_QWORD *)this + 12);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (void *)*((_QWORD *)this + 5);
  if (v5)
    operator delete(v5);
  v6 = (void *)*((_QWORD *)this + 2);
  if (v6)
    operator delete(v6);
  if (*(_QWORD *)this)
    CFRelease(*(CFTypeRef *)this);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<void const*>(const void **values, uint64_t a2)
{
  CFArrayRef result;
  std::runtime_error *exception;

  result = CFArrayCreate(0, values, (a2 - (uint64_t)values) >> 3, MEMORY[0x1E0C9B380]);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1B5BA80DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AMCP::Portal::IPC::IO_Receiver::~IO_Receiver(AMCP::Portal::IPC::IO_Receiver *this)
{
  AMCP::Portal::IPC::IO_Receiver::~IO_Receiver(this);
  JUMPOUT(0x1B5E50688);
}

{
  AMCP::Portal::IPC::IO_Receiver *v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_1E6993898;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 152);
  v2 = (AMCP::Portal::IPC::IO_Receiver *)*((_QWORD *)this + 18);
  if (v2 == (AMCP::Portal::IPC::IO_Receiver *)((char *)this + 120))
  {
    v3 = 4;
    v2 = (AMCP::Portal::IPC::IO_Receiver *)((char *)this + 120);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
  }
  std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::__unordered_map_hasher<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>>>::~__hash_table((uint64_t)this + 80);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  caulk::mach::details::release_os_object(*((caulk::mach::details **)this + 1), v4);
}

uint64_t std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::__unordered_map_hasher<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 4));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__shared_ptr_emplace<caulk::ipc::synchronous_messenger::semaphore_receiver>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6993918;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<caulk::ipc::synchronous_messenger::semaphore_receiver>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6993918;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<caulk::ipc::synchronous_messenger::semaphore_receiver>::__on_zero_shared(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = a1 + 22;
  v3 = (_QWORD *)a1[25];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[21];
  if (v5 == a1 + 18)
  {
    v6 = 4;
    v5 = a1 + 18;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[17];
  if (v7 == a1 + 14)
  {
    v8 = 4;
    v7 = a1 + 14;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  MEMORY[0x1B5E4FF2C](a1 + 13);
  MEMORY[0x1B5E4FF2C](a1 + 12);
  MEMORY[0x1B5E4FF2C](a1 + 11);
  caulk::ipc::mapped_memory::reset((caulk::ipc::mapped_memory *)(a1 + 8));
  caulk::ipc::mapped_memory::reset((caulk::ipc::mapped_memory *)(a1 + 5));
  v9 = (std::__shared_weak_count *)a1[4];
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

void std::__shared_ptr_emplace<caulk::ipc::synchronous_messenger::eventlink_receiver>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69938C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<caulk::ipc::synchronous_messenger::eventlink_receiver>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69938C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<caulk::ipc::synchronous_messenger::eventlink_receiver>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;

  v2 = (_QWORD *)(a1 + 168);
  v3 = *(_QWORD **)(a1 + 192);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD **)(a1 + 160);
  if (v5 == (_QWORD *)(a1 + 136))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 136);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = *(_QWORD **)(a1 + 128);
  if (v7 == (_QWORD *)(a1 + 104))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 104);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  MEMORY[0x1B5E4FF2C](a1 + 96);
  caulk::mach::details::release_os_object(*(caulk::mach::details **)(a1 + 88), v9);
  caulk::ipc::mapped_memory::reset((caulk::ipc::mapped_memory *)(a1 + 64));
  caulk::ipc::mapped_memory::reset((caulk::ipc::mapped_memory *)(a1 + 40));
  v10 = *(std::__shared_weak_count **)(a1 + 32);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
}

void std::__shared_ptr_emplace<caulk::mach::os_workgroup_managed>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6993968;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<caulk::mach::os_workgroup_managed>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6993968;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<caulk::mach::os_workgroup_managed>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void AMCP::Portal::IPC::IO_Receiver::register_buffer(uint64_t a1, void *a2)
{
  id v3;
  xpc_object_t v4;
  id v5;
  void *v6;
  xpc_object_t v7;
  id v8;
  caulk::mach::details *v9;
  void *v10;
  caulk::mach::details *v11;
  void *v12;
  unsigned int v13;
  int v14;
  void **v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t **v22;
  uint64_t *v23;
  unint64_t v24;
  std::runtime_error_vtbl *v25;
  void (__cdecl **v26)(std::runtime_error *__hidden);
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  int8x8_t prime;
  void *v33;
  void *v34;
  uint64_t v35;
  void (__cdecl *v36)(std::runtime_error *__hidden);
  unint64_t v37;
  uint8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  void (__cdecl *v42)(std::runtime_error *__hidden);
  unint64_t v43;
  void (__cdecl **v44)(std::runtime_error *__hidden);
  std::runtime_error_vtbl *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  xpc_object_t v49;
  xpc_object_t v50;
  xpc_object_t v51;
  xpc_object_t v52;
  void *v53;
  id v54;
  void *v55;
  unint64_t *v56;
  unint64_t v57;
  NSObject *v58;
  _opaque_pthread_t *v59;
  mach_port_t v60;
  void *exception;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  _BYTE v65[24];
  uint64_t v66;
  std::runtime_error v67;
  std::runtime_error v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  char v74;
  __int128 v75;
  xpc_object_t v76;
  xpc_object_t v77;
  xpc_object_t v78;
  xpc_object_t v79;
  caulk::mach::details *v80;
  xpc_object_t v81;
  id v82;
  _BYTE buf[40];
  const char *v84;
  int v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (!v3)
    v4 = xpc_null_create();

  v5 = v4;
  v6 = v5;
  v82 = v5;
  if (!v5 || MEMORY[0x1B5E5145C](v5) != MEMORY[0x1E0C812F8])
  {
    v7 = xpc_null_create();
    v8 = v82;
    v82 = v7;

  }
  *(_QWORD *)buf = &v82;
  *(_QWORD *)&buf[8] = "buffer shared memory";
  applesauce::xpc::dict::object_proxy::operator applesauce::xpc::object(&v81, (uint64_t)buf);
  v9 = v81;
  v11 = (caulk::mach::details *)caulk::mach::details::retain_os_object(v9, v10);

  v80 = v11;
  caulk::mach::details::release_os_object(0, v12);
  *(_QWORD *)buf = &v82;
  *(_QWORD *)&buf[8] = "buffer device id";
  applesauce::xpc::dict::object_proxy::operator applesauce::xpc::object(&v79, (uint64_t)buf);
  LODWORD(v11) = applesauce::xpc::dyn_cast_or_default((applesauce::xpc *)&v79, 0);
  *(_QWORD *)buf = &v82;
  *(_QWORD *)&buf[8] = "buffer client id";
  applesauce::xpc::dict::object_proxy::operator applesauce::xpc::object(&v78, (uint64_t)buf);
  v13 = applesauce::xpc::dyn_cast_or_default((applesauce::xpc *)&v78, 0);
  *(_QWORD *)buf = &v82;
  *(_QWORD *)&buf[8] = "buffer stream id";
  applesauce::xpc::dict::object_proxy::operator applesauce::xpc::object(&v77, (uint64_t)buf);
  v14 = applesauce::xpc::dyn_cast_or_default((applesauce::xpc *)&v77, 0);
  *(_QWORD *)buf = &v82;
  *(_QWORD *)&buf[8] = "buffer type";
  applesauce::xpc::dict::object_proxy::operator applesauce::xpc::object(&v76, (uint64_t)buf);
  *(_QWORD *)&v75 = __PAIR64__(v13, v11);
  v15 = (void **)(a1 + 80);
  DWORD2(v75) = v14;
  HIDWORD(v75) = applesauce::xpc::dyn_cast_or_default((applesauce::xpc *)&v76, 0);
  v16 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::__unordered_map_hasher<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>>>::find<AMCP::Portal::IPC::shared_buffer_info_t>((_QWORD *)(a1 + 80), (unsigned int *)&v75);
  if (v16)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v16);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v58 = **(NSObject ***)buf;
    AMCP::Log::Scope::get_os_log_t(**(id **)buf);
    objc_claimAutoreleasedReturnValue();
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      v59 = pthread_self();
      v60 = pthread_mach_thread_np(v59);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v60;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "IO_Receiver.mm";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 158;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "m_shared_memory_map.find(buffer_key) != m_shared_memory_map.end()";
      _os_log_error_impl(&dword_1B57BA000, v58, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s buffer key already exists in the map!", buf, 0x22u);
    }

    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v74);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v67, "buffer key already exists in the map!");
    std::runtime_error::runtime_error(&v68, &v67);
    v70 = 0;
    v71 = 0;
    v72 = 0;
    v73 = -1;
    v68.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v69 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v68);
    *(_QWORD *)&buf[32] = "void AMCP::Portal::IPC::IO_Receiver::register_buffer(__strong xpc_object_t)";
    v84 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Driver/IO_Receiver.mm";
    v85 = 158;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v63);
    *(_QWORD *)v65 = off_1E69A20A0;
    *(_OWORD *)&v65[8] = v63;
    v66 = v64;
    v63 = 0uLL;
    v64 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)v65);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v17 = (uint64_t)operator new(0x30uLL);
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)v17 = &off_1E69939B8;
  *(_QWORD *)v65 = MEMORY[0x1B5E4FD88](v17 + 24, &v80);
  *(_QWORD *)&v65[8] = v17;
  *(_OWORD *)buf = v75;
  *(_OWORD *)&buf[16] = *(_OWORD *)v65;
  v62 = *(_OWORD *)v65;
  *(_OWORD *)v65 = 0uLL;
  v18 = std::hash<AMCP::Portal::IPC::shared_buffer_info_t>::operator()((unsigned int *)buf);
  v19 = v18;
  v20 = *(_QWORD *)(a1 + 88);
  if (!v20)
    goto LABEL_27;
  v21 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
  v21.i16[0] = vaddlv_u8(v21);
  if (v21.u32[0] > 1uLL)
  {
    v17 = v18;
    if (v18 >= v20)
      v17 = v18 % v20;
  }
  else
  {
    v17 = (v20 - 1) & v18;
  }
  v22 = (uint64_t **)*((_QWORD *)*v15 + v17);
  if (!v22 || (v23 = *v22) == 0)
  {
LABEL_27:
    v25 = (std::runtime_error_vtbl *)operator new(0x30uLL);
    v26 = (void (__cdecl **)(std::runtime_error *__hidden))(a1 + 96);
    v68.__vftable = v25;
    v68.__imp_.__imp_ = (const char *)(a1 + 96);
    v25->~runtime_error = 0;
    v25->~runtime_error_0 = (void (__cdecl *)(std::runtime_error *__hidden))v19;
    *(_OWORD *)&v25->what = v75;
    *(_OWORD *)&v25[1].~runtime_error_0 = v62;
    *(_OWORD *)&buf[16] = 0uLL;
    LOBYTE(v69) = 1;
    v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 104) + 1);
    v28 = *(float *)(a1 + 112);
    if (v20 && (float)(v28 * (float)v20) >= v27)
    {
LABEL_73:
      v44 = (void (__cdecl **)(std::runtime_error *__hidden))*((_QWORD *)*v15 + v17);
      v45 = v68.__vftable;
      if (v44)
      {
        v68.~runtime_error = *v44;
      }
      else
      {
        v68.~runtime_error = *v26;
        *v26 = (void (__cdecl *)(std::runtime_error *__hidden))v45;
        *((_QWORD *)*v15 + v17) = v26;
        if (!v45->~runtime_error)
        {
LABEL_82:
          v68.__vftable = 0;
          ++*(_QWORD *)(a1 + 104);
          std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v68);
          goto LABEL_83;
        }
        v46 = *((_QWORD *)v45->~runtime_error + 1);
        if ((v20 & (v20 - 1)) != 0)
        {
          if (v46 >= v20)
            v46 %= v20;
        }
        else
        {
          v46 &= v20 - 1;
        }
        v44 = (void (__cdecl **)(std::runtime_error *__hidden))((char *)*v15 + 8 * v46);
      }
      *v44 = (void (__cdecl *)(std::runtime_error *__hidden))v45;
      goto LABEL_82;
    }
    v29 = 1;
    if (v20 >= 3)
      v29 = (v20 & (v20 - 1)) != 0;
    v30 = v29 | (2 * v20);
    v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31)
      prime = (int8x8_t)v31;
    else
      prime = (int8x8_t)v30;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v20 = *(_QWORD *)(a1 + 88);
    }
    if (*(_QWORD *)&prime > v20)
      goto LABEL_39;
    if (*(_QWORD *)&prime < v20)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 104) / *(float *)(a1 + 112));
      if (v20 < 3 || (v40 = (uint8x8_t)vcnt_s8((int8x8_t)v20), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (*(_QWORD *)&prime <= v39)
        prime = (int8x8_t)v39;
      if (*(_QWORD *)&prime >= v20)
      {
        v20 = *(_QWORD *)(a1 + 88);
      }
      else
      {
        if (prime)
        {
LABEL_39:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v33 = operator new(8 * *(_QWORD *)&prime);
          v34 = *v15;
          *v15 = v33;
          if (v34)
            operator delete(v34);
          v35 = 0;
          *(int8x8_t *)(a1 + 88) = prime;
          do
            *((_QWORD *)*v15 + v35++) = 0;
          while (*(_QWORD *)&prime != v35);
          v36 = *v26;
          if (*v26)
          {
            v37 = *((_QWORD *)v36 + 1);
            v38 = (uint8x8_t)vcnt_s8(prime);
            v38.i16[0] = vaddlv_u8(v38);
            if (v38.u32[0] > 1uLL)
            {
              if (v37 >= *(_QWORD *)&prime)
                v37 %= *(_QWORD *)&prime;
            }
            else
            {
              v37 &= *(_QWORD *)&prime - 1;
            }
            *((_QWORD *)*v15 + v37) = v26;
            v42 = *(void (__cdecl **)(std::runtime_error *__hidden))v36;
            if (*(_QWORD *)v36)
            {
              do
              {
                v43 = *((_QWORD *)v42 + 1);
                if (v38.u32[0] > 1uLL)
                {
                  if (v43 >= *(_QWORD *)&prime)
                    v43 %= *(_QWORD *)&prime;
                }
                else
                {
                  v43 &= *(_QWORD *)&prime - 1;
                }
                if (v43 != v37)
                {
                  if (!*((_QWORD *)*v15 + v43))
                  {
                    *((_QWORD *)*v15 + v43) = v36;
                    goto LABEL_64;
                  }
                  *(_QWORD *)v36 = *(_QWORD *)v42;
                  *(_QWORD *)v42 = **((_QWORD **)*v15 + v43);
                  **((_QWORD **)*v15 + v43) = v42;
                  v42 = v36;
                }
                v43 = v37;
LABEL_64:
                v36 = v42;
                v42 = *(void (__cdecl **)(std::runtime_error *__hidden))v42;
                v37 = v43;
              }
              while (v42);
            }
          }
          v20 = (unint64_t)prime;
          goto LABEL_68;
        }
        v55 = *v15;
        *v15 = 0;
        if (v55)
          operator delete(v55);
        v20 = 0;
        *(_QWORD *)(a1 + 88) = 0;
      }
    }
LABEL_68:
    if ((v20 & (v20 - 1)) != 0)
    {
      if (v19 >= v20)
        v17 = v19 % v20;
      else
        v17 = v19;
    }
    else
    {
      v17 = (v20 - 1) & v19;
    }
    goto LABEL_73;
  }
  while (1)
  {
    v24 = v23[1];
    if (v24 == v18)
      break;
    if (v21.u32[0] > 1uLL)
    {
      if (v24 >= v20)
        v24 %= v20;
    }
    else
    {
      v24 &= v20 - 1;
    }
    if (v24 != v17)
      goto LABEL_27;
LABEL_26:
    v23 = (uint64_t *)*v23;
    if (!v23)
      goto LABEL_27;
  }
  if (*((_DWORD *)v23 + 4) != *(_DWORD *)buf
    || *((_DWORD *)v23 + 5) != *(_DWORD *)&buf[4]
    || *((_DWORD *)v23 + 6) != *(_DWORD *)&buf[8]
    || *((_DWORD *)v23 + 7) != *(_DWORD *)&buf[12])
  {
    goto LABEL_26;
  }
  if (*((_QWORD *)&v62 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
    }
  }
LABEL_83:
  if (*(_QWORD *)&v65[8])
  {
    v47 = (unint64_t *)(*(_QWORD *)&v65[8] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v65[8] + 16))(*(_QWORD *)&v65[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v65[8]);
    }
  }
  v49 = v76;
  v76 = 0;

  v50 = v77;
  v77 = 0;

  v51 = v78;
  v78 = 0;

  v52 = v79;
  v79 = 0;

  caulk::mach::details::release_os_object(v80, v53);
  v54 = v82;
  v82 = 0;

}

void sub_1B5BA8D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,std::runtime_error a22,std::runtime_error a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *a35,void *a36,void *a37)
{
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v42;
  void *v43;
  void *v44;

  v42 = *(void **)(v40 - 208);
  *(_QWORD *)(v40 - 208) = 0;

  caulk::mach::details::release_os_object(*(caulk::mach::details **)(v40 - 200), v43);
  v44 = *(void **)(v40 - 184);
  *(_QWORD *)(v40 - 184) = 0;

  _Unwind_Resume(a1);
}

void applesauce::xpc::dict::object_proxy::operator applesauce::xpc::object(xpc_object_t *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;

  v4 = **(void ***)a2;
  AMCP::Log::Scope::get_os_log_t(v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  xpc_dictionary_get_value(v5, *(const char **)(a2 + 8));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = v6;
  *a1 = v7;
  v8 = v7;
  if (!v7)
    *a1 = xpc_null_create();

}

void sub_1B5BA8FFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::function<void ()(caulk::ipc::mapped_memory &)>::operator=(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v10 = v9;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v9);
    }
    else
    {
      v10 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v10 = 0;
  }
  if (v9 != a1)
  {
    v4 = v10;
    v5 = (_QWORD *)a1[3];
    if (v10 == v9)
    {
      if (v5 == a1)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v11);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a1[3] + 24))(a1[3], v9);
        (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        v10 = v9;
        (*(void (**)(_QWORD *, _QWORD *))(v11[0] + 24))(v11, a1);
        (*(void (**)(_QWORD *))(v11[0] + 32))(v11);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, a1);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = (_QWORD *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v5 == a1)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v9);
      (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
      a1[3] = v10;
      v10 = v9;
    }
    else
    {
      v10 = (_QWORD *)a1[3];
      a1[3] = v4;
    }
  }
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_19;
  }
  if (v10)
  {
    v7 = 5;
LABEL_19:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void sub_1B5BA9204(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t caulk::thread_proxy<std::tuple<caulk::thread::attributes,AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_1,std::tuple<>>>(caulk::thread::attributes *a1)
{
  caulk::mach *v1;
  const char *v2;
  unint64_t v3;
  double v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  void *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  AMCP::Log::Scope_Registry *v16;
  NSObject *v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  _opaque_pthread_t *v21;
  mach_port_t v22;
  std::runtime_error *exception;
  int v24;
  uint64_t v25;
  std::runtime_error v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  AMCP::Log::Scope_Registry *v31;
  NSObject *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _opaque_pthread_t *v36;
  mach_port_t v37;
  std::runtime_error *v38;
  int v39;
  uint64_t v40;
  std::runtime_error v41;
  AMCP::Log::Scope_Registry *v42;
  AMCP::Log::Scope_Registry *v43;
  NSObject *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _opaque_pthread_t *v48;
  mach_port_t v49;
  std::runtime_error *v50;
  int v51;
  uint64_t v52;
  std::runtime_error v53;
  AMCP::Log::Scope_Registry *v54;
  AMCP::Log::Scope_Registry *v55;
  NSObject *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  _opaque_pthread_t *v61;
  mach_port_t v62;
  std::runtime_error *v63;
  int v64;
  uint64_t v65;
  std::runtime_error v66;
  caulk::thread::attributes *v67;
  std::runtime_error v68;
  uint64_t v69;
  _BYTE v70[24];
  uint64_t v71;
  std::runtime_error v72;
  std::string __p;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  char v78;
  std::runtime_error v79;
  __int128 v80;
  _BYTE v81[25];
  std::string v82;
  _BYTE v83[28];
  char v84;
  int v85;
  char v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v67 = a1;
  v1 = (caulk::mach *)caulk::thread::attributes::apply_to_this_thread(a1);
  HIDWORD(v3) = 1098310496;
  LODWORD(v3) = *((_DWORD *)v67 + 26);
  v4 = 24000000.0 / *((double *)v67 + 12) * (double)v3;
  v5 = v4;
  v6 = (v4 * 0.5);
  if (v6 <= 0x4B0)
    v6 = 1200;
  if (v6 >= 0x124F80)
    v7 = 1200000;
  else
    v7 = v6;
  if (v7 > v5)
    caulk::mach::throw_if_mach_error(v1, v2);
  v8 = *((_QWORD *)v67 + 14);
  v9 = AMCP::Feature_Flags::access_event_link_oop_io(0, (const BOOL *)v2);
  if (v8)
  {
    if (v9)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "io receiver");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v82, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v82 = __p;
      v83[0] = 1;
      *(_DWORD *)&v83[8] = v5;
      *(_DWORD *)&v83[12] = v7;
      *(_DWORD *)&v83[16] = v5;
      *(_QWORD *)&v83[20] = 0x100000001;
      v84 = 1;
      v85 = 1;
      v86 = 1;
      v12 = *((_QWORD *)v67 + 14);
      v79.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DDB760] + 16);
      v79.__imp_.__imp_ = (const char *)caulk::mach::details::retain_os_object(*(caulk::mach::details **)(v12 + 8), v10);
      v13 = *(_OWORD *)(v12 + 41);
      v14 = *(_OWORD *)(v12 + 32);
      v80 = *(_OWORD *)(v12 + 16);
      *(_OWORD *)v81 = v14;
      *(_OWORD *)&v81[9] = v13;
      v15 = caulk::ipc::synchronous_messenger::eventlink_receiver::start();
      caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)&v79);
      if (v83[0] && SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v82.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((v15 & 0xFF00000000) == 0 || !(_BYTE)v15)
      {
        AMCP::Log::Scope_Registry::get(v16);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v82, "com.apple.coreaudio", "AMCP");
        v17 = *(NSObject **)v82.__r_.__value_.__l.__data_;
        AMCP::Log::Scope::get_os_log_t(*(id *)v82.__r_.__value_.__l.__data_);
        objc_claimAutoreleasedReturnValue();
        size = (std::__shared_weak_count *)v82.__r_.__value_.__l.__size_;
        if (v82.__r_.__value_.__l.__size_)
        {
          v19 = (unint64_t *)(v82.__r_.__value_.__l.__size_ + 8);
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          v21 = pthread_self();
          v22 = pthread_mach_thread_np(v21);
          LODWORD(v82.__r_.__value_.__l.__data_) = 67109890;
          HIDWORD(v82.__r_.__value_.__r.__words[0]) = v22;
          LOWORD(v82.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v82.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"IO_Receiver.mm";
          WORD1(v82.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v82.__r_.__value_.__r.__words[2]) = 330;
          *(_WORD *)v83 = 2080;
          *(_QWORD *)&v83[2] = "receiver_start_result.value_or(false) != true";
          _os_log_error_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to start IO receiver", (uint8_t *)&v82, 0x22u);
        }

        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v78);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
        std::runtime_error::runtime_error(&v72, "Failed to start IO receiver");
        std::runtime_error::runtime_error((std::runtime_error *)&__p, &v72);
        v74 = 0;
        v75 = 0;
        v76 = 0;
        v77 = -1;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E69A1FB8;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v82, (uint64_t)&__p);
        *(_QWORD *)&v83[8] = "auto AMCP::Portal::IPC::IO_Receiver::start_message_thread()::(anonymous class)::operator()() const";
        *(_QWORD *)&v83[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Driver/IO_Receiver.mm";
        *(_DWORD *)&v83[24] = 330;
        std::vector<void *>::vector(&v68);
        v24 = backtrace((void **)&v68.~runtime_error, (unint64_t)(v68.__imp_.__imp_ - (const char *)v68.__vftable) >> 3);
        std::vector<void *>::resize((char **)&v68, v24);
        *(_QWORD *)v70 = off_1E69A20A0;
        *(std::runtime_error *)&v70[8] = v68;
        v71 = v69;
        v68.__vftable = 0;
        v68.__imp_.__imp_ = 0;
        v69 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&v82, (uint64_t)v70);
        exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::runtime_error::runtime_error(exception, (const std::runtime_error *)&v82);
        exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
        v25 = *(_QWORD *)v83;
        exception[1].__imp_.__imp_ = *(const char **)v83;
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
        v26 = *(std::runtime_error *)&v83[8];
        LODWORD(exception[3].__vftable) = *(_DWORD *)&v83[24];
        exception[2] = v26;
        exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
        exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
        exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "io receiver");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v82, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v82 = __p;
      v83[0] = 1;
      *(_DWORD *)&v83[8] = v5;
      *(_DWORD *)&v83[12] = v7;
      *(_DWORD *)&v83[16] = v5;
      *(_QWORD *)&v83[20] = 0x100000001;
      v84 = 1;
      v85 = 1;
      v86 = 1;
      v27 = *((_QWORD *)v67 + 14);
      v79.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DDB760] + 16);
      v79.__imp_.__imp_ = (const char *)caulk::mach::details::retain_os_object(*(caulk::mach::details **)(v27 + 8), v11);
      v28 = *(_OWORD *)(v27 + 41);
      v29 = *(_OWORD *)(v27 + 32);
      v80 = *(_OWORD *)(v27 + 16);
      *(_OWORD *)v81 = v29;
      *(_OWORD *)&v81[9] = v28;
      v30 = caulk::ipc::synchronous_messenger::semaphore_receiver::start();
      caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)&v79);
      if (v83[0] && SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v82.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((v30 & 0xFF00000000) == 0 || !(_BYTE)v30)
      {
        AMCP::Log::Scope_Registry::get(v31);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v82, "com.apple.coreaudio", "AMCP");
        v32 = *(NSObject **)v82.__r_.__value_.__l.__data_;
        AMCP::Log::Scope::get_os_log_t(*(id *)v82.__r_.__value_.__l.__data_);
        objc_claimAutoreleasedReturnValue();
        v33 = (std::__shared_weak_count *)v82.__r_.__value_.__l.__size_;
        if (v82.__r_.__value_.__l.__size_)
        {
          v34 = (unint64_t *)(v82.__r_.__value_.__l.__size_ + 8);
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          v36 = pthread_self();
          v37 = pthread_mach_thread_np(v36);
          LODWORD(v82.__r_.__value_.__l.__data_) = 67109890;
          HIDWORD(v82.__r_.__value_.__r.__words[0]) = v37;
          LOWORD(v82.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v82.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"IO_Receiver.mm";
          WORD1(v82.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v82.__r_.__value_.__r.__words[2]) = 335;
          *(_WORD *)v83 = 2080;
          *(_QWORD *)&v83[2] = "receiver_start_result.value_or(false) != true";
          _os_log_error_impl(&dword_1B57BA000, v32, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to start IO receiver", (uint8_t *)&v82, 0x22u);
        }

        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v78);
        v38 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
        std::runtime_error::runtime_error(&v72, "Failed to start IO receiver");
        std::runtime_error::runtime_error((std::runtime_error *)&__p, &v72);
        v74 = 0;
        v75 = 0;
        v76 = 0;
        v77 = -1;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E69A1FB8;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E69A1FE0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v82, (uint64_t)&__p);
        *(_QWORD *)&v83[8] = "auto AMCP::Portal::IPC::IO_Receiver::start_message_thread()::(anonymous class)::operator()() const";
        *(_QWORD *)&v83[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Driver/IO_Receiver.mm";
        *(_DWORD *)&v83[24] = 335;
        std::vector<void *>::vector(&v68);
        v39 = backtrace((void **)&v68.~runtime_error, (unint64_t)(v68.__imp_.__imp_ - (const char *)v68.__vftable) >> 3);
        std::vector<void *>::resize((char **)&v68, v39);
        *(_QWORD *)v70 = off_1E69A20A0;
        *(std::runtime_error *)&v70[8] = v68;
        v71 = v69;
        v68.__vftable = 0;
        v68.__imp_.__imp_ = 0;
        v69 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&v82, (uint64_t)v70);
        v38[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
        std::runtime_error::runtime_error(v38, (const std::runtime_error *)&v82);
        v38[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
        v40 = *(_QWORD *)v83;
        v38[1].__imp_.__imp_ = *(const char **)v83;
        if (v40)
          (*(void (**)(uint64_t))(*(_QWORD *)v40 + 24))(v40);
        v41 = *(std::runtime_error *)&v83[8];
        LODWORD(v38[3].__vftable) = *(_DWORD *)&v83[24];
        v38[2] = v41;
        v38->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
        v38[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
        v38[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
      }
    }
  }
  else if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&v79, "io receiver");
    if (SBYTE7(v80) < 0)
    {
      std::string::__init_copy_ctor_external(&v82, (const std::string::value_type *)v79.__vftable, (std::string::size_type)v79.__imp_.__imp_);
    }
    else
    {
      *(std::runtime_error *)&v82.__r_.__value_.__l.__data_ = v79;
      v82.__r_.__value_.__r.__words[2] = v80;
    }
    v83[0] = 1;
    *(_DWORD *)&v83[8] = v5;
    *(_DWORD *)&v83[12] = v7;
    *(_DWORD *)&v83[16] = v5;
    *(_QWORD *)&v83[20] = 0x100000001;
    v84 = 1;
    v85 = 1;
    v86 = 1;
    v42 = (AMCP::Log::Scope_Registry *)caulk::ipc::synchronous_messenger::eventlink_receiver::start();
    v43 = v42;
    if (v83[0] && SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v82.__r_.__value_.__l.__data_);
    if (SBYTE7(v80) < 0)
      operator delete(v79.__vftable);
    if (((unint64_t)v43 & 0xFF00000000) == 0 || !(_BYTE)v43)
    {
      AMCP::Log::Scope_Registry::get(v42);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v82, "com.apple.coreaudio", "AMCP");
      v44 = *(NSObject **)v82.__r_.__value_.__l.__data_;
      AMCP::Log::Scope::get_os_log_t(*(id *)v82.__r_.__value_.__l.__data_);
      objc_claimAutoreleasedReturnValue();
      v45 = (std::__shared_weak_count *)v82.__r_.__value_.__l.__size_;
      if (v82.__r_.__value_.__l.__size_)
      {
        v46 = (unint64_t *)(v82.__r_.__value_.__l.__size_ + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        v48 = pthread_self();
        v49 = pthread_mach_thread_np(v48);
        LODWORD(v82.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(v82.__r_.__value_.__r.__words[0]) = v49;
        LOWORD(v82.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v82.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"IO_Receiver.mm";
        WORD1(v82.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v82.__r_.__value_.__r.__words[2]) = 343;
        *(_WORD *)v83 = 2080;
        *(_QWORD *)&v83[2] = "receiver_start_result.value_or(false) != true";
        _os_log_error_impl(&dword_1B57BA000, v44, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to start IO receiver", (uint8_t *)&v82, 0x22u);
      }

      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v72);
      v50 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v68, "Failed to start IO receiver");
      std::runtime_error::runtime_error(&v79, &v68);
      *((_QWORD *)&v80 + 1) = 0;
      *(_QWORD *)v81 = 0;
      *(_QWORD *)&v81[8] = 0;
      *(_DWORD *)&v81[16] = -1;
      v79.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      *(_QWORD *)&v80 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v82, (uint64_t)&v79);
      *(_QWORD *)&v83[8] = "auto AMCP::Portal::IPC::IO_Receiver::start_message_thread()::(anonymous class)::operator()() const";
      *(_QWORD *)&v83[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Driver/IO_Receiver.mm";
      *(_DWORD *)&v83[24] = 343;
      std::vector<void *>::vector(v70);
      v51 = backtrace(*(void ***)v70, (*(_QWORD *)&v70[8] - *(_QWORD *)v70) >> 3);
      std::vector<void *>::resize((char **)v70, v51);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)v70;
      v74 = *(_QWORD *)&v70[16];
      memset(v70, 0, sizeof(v70));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&v82, (uint64_t)&__p);
      v50[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::runtime_error::runtime_error(v50, (const std::runtime_error *)&v82);
      v50[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
      v52 = *(_QWORD *)v83;
      v50[1].__imp_.__imp_ = *(const char **)v83;
      if (v52)
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 24))(v52);
      v53 = *(std::runtime_error *)&v83[8];
      LODWORD(v50[3].__vftable) = *(_DWORD *)&v83[24];
      v50[2] = v53;
      v50->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
      v50[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
      v50[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v79, "io receiver");
    if (SBYTE7(v80) < 0)
    {
      std::string::__init_copy_ctor_external(&v82, (const std::string::value_type *)v79.__vftable, (std::string::size_type)v79.__imp_.__imp_);
    }
    else
    {
      *(std::runtime_error *)&v82.__r_.__value_.__l.__data_ = v79;
      v82.__r_.__value_.__r.__words[2] = v80;
    }
    v83[0] = 1;
    *(_DWORD *)&v83[8] = v5;
    *(_DWORD *)&v83[12] = v7;
    *(_DWORD *)&v83[16] = v5;
    *(_QWORD *)&v83[20] = 0x100000001;
    v84 = 1;
    v85 = 1;
    v86 = 1;
    v54 = (AMCP::Log::Scope_Registry *)caulk::ipc::synchronous_messenger::semaphore_receiver::start();
    v55 = v54;
    if (v83[0] && SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v82.__r_.__value_.__l.__data_);
    if (SBYTE7(v80) < 0)
      operator delete(v79.__vftable);
    if (((unint64_t)v55 & 0xFF00000000) == 0 || !(_BYTE)v55)
    {
      AMCP::Log::Scope_Registry::get(v54);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v82, "com.apple.coreaudio", "AMCP");
      v57 = *(NSObject **)v82.__r_.__value_.__l.__data_;
      AMCP::Log::Scope::get_os_log_t(*(id *)v82.__r_.__value_.__l.__data_);
      objc_claimAutoreleasedReturnValue();
      v58 = (std::__shared_weak_count *)v82.__r_.__value_.__l.__size_;
      if (v82.__r_.__value_.__l.__size_)
      {
        v59 = (unint64_t *)(v82.__r_.__value_.__l.__size_ + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
      {
        v61 = pthread_self();
        v62 = pthread_mach_thread_np(v61);
        LODWORD(v82.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(v82.__r_.__value_.__r.__words[0]) = v62;
        LOWORD(v82.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v82.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"IO_Receiver.mm";
        WORD1(v82.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v82.__r_.__value_.__r.__words[2]) = 348;
        *(_WORD *)v83 = 2080;
        *(_QWORD *)&v83[2] = "receiver_start_result.value_or(false) != true";
        _os_log_error_impl(&dword_1B57BA000, v57, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to start IO receiver", (uint8_t *)&v82, 0x22u);
      }

      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v72);
      v63 = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v68, "Failed to start IO receiver");
      std::runtime_error::runtime_error(&v79, &v68);
      *((_QWORD *)&v80 + 1) = 0;
      *(_QWORD *)v81 = 0;
      *(_QWORD *)&v81[8] = 0;
      *(_DWORD *)&v81[16] = -1;
      v79.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      *(_QWORD *)&v80 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v82, (uint64_t)&v79);
      *(_QWORD *)&v83[8] = "auto AMCP::Portal::IPC::IO_Receiver::start_message_thread()::(anonymous class)::operator()() const";
      *(_QWORD *)&v83[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Driver/IO_Receiver.mm";
      *(_DWORD *)&v83[24] = 348;
      std::vector<void *>::vector(v70);
      v64 = backtrace(*(void ***)v70, (*(_QWORD *)&v70[8] - *(_QWORD *)v70) >> 3);
      std::vector<void *>::resize((char **)v70, v64);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)v70;
      v74 = *(_QWORD *)&v70[16];
      memset(v70, 0, sizeof(v70));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&v82, (uint64_t)&__p);
      v63[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::runtime_error::runtime_error(v63, (const std::runtime_error *)&v82);
      v63[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
      v65 = *(_QWORD *)v83;
      v63[1].__imp_.__imp_ = *(const char **)v83;
      if (v65)
        (*(void (**)(uint64_t))(*(_QWORD *)v65 + 24))(v65);
      v66 = *(std::runtime_error *)&v83[8];
      LODWORD(v63[3].__vftable) = *(_DWORD *)&v83[24];
      v63[2] = v66;
      v63->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
      v63[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
      v63[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
    }
  }
  std::unique_ptr<std::tuple<caulk::thread::attributes,AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_1,std::tuple<>>>::~unique_ptr[abi:ne180100]((uint64_t *)&v67);
  return 0;
}

void sub_1B5BA9F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, std::runtime_error a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::runtime_error a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38)
{
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  AMCP::Log::Scope_Registry *v43;
  NSObject *v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  _opaque_pthread_t *v48;
  mach_port_t v49;
  int v50;

  if (a2)
  {

    v43 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v43);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)(v41 - 128), "com.apple.coreaudio", "AMCP");
    v44 = **(NSObject ***)(v41 - 128);
    AMCP::Log::Scope::get_os_log_t(v44);
    objc_claimAutoreleasedReturnValue();
    v45 = *(std::__shared_weak_count **)(v41 - 120);
    if (v45)
    {
      p_shared_owners = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldaxr(p_shared_owners);
      while (__stlxr(v47 - 1, p_shared_owners));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      v48 = pthread_self();
      v49 = pthread_mach_thread_np(v48);
      v50 = *(_DWORD *)(v40 + 128);
      *(_DWORD *)(v41 - 128) = 67109890;
      *(_DWORD *)(v41 - 124) = v49;
      *(_WORD *)(v41 - 120) = 2080;
      *(_QWORD *)(v39 + 74) = "IO_Receiver.mm";
      *(_WORD *)(v41 - 110) = 1024;
      *(_DWORD *)(v41 - 108) = 354;
      *(_WORD *)(v41 - 104) = 1024;
      *(_DWORD *)(v39 + 90) = v50;
      _os_log_error_impl(&dword_1B57BA000, v44, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception trying to start io receiver for device %u", (uint8_t *)(v41 - 128), 0x1Eu);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B5BA9CC8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<std::tuple<caulk::thread::attributes,AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_1,std::tuple<>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2 + 112);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2 + 80);
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v2 + 64);
    if (*(_BYTE *)(v2 + 24) && *(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1B5E50688](v2, 0x1032C40A80D4485);
  }
  return a1;
}

uint64_t AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_1::~$_1(uint64_t a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 16);
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1);
}

void caulk::mach::throw_if_mach_error(caulk::mach *this, const char *a2)
{
  const char *v2;
  std::runtime_error *exception;
  std::runtime_error *v4;
  std::runtime_error v5[2];
  _BYTE v6[24];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v6 = &off_1E6993B48;
  MEMORY[0x1B5E5022C](v5, 4, v6, "Constructing a thread with real time priority requires that the computation (quantum) is less than or equal to the constraint");
  std::error_category::~error_category((std::error_category *)v6);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v2 = std::runtime_error::what(v5);
    *(_DWORD *)v6 = 136315138;
    *(_QWORD *)&v6[4] = v2;
    _os_log_error_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Throwing: %s", v6, 0xCu);
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
  v4 = std::runtime_error::runtime_error(exception, v5);
  v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
  v4[1] = v5[1];
  __cxa_throw(v4, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
}

void sub_1B5BAA5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, uint64_t a10, uint64_t a11, std::error_category a12)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0,std::allocator<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0>,void ()(caulk::ipc::mapped_memory &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0,std::allocator<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0>,void ()(caulk::ipc::mapped_memory &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6993A08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0,std::allocator<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0>,void ()(caulk::ipc::mapped_memory &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6993A08;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0,std::allocator<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0>,void ()(caulk::ipc::mapped_memory &)>::operator()(uint64_t a1, caulk::ipc::mapped_memory *this)
{
  AMCP::Log::Scope_Registry *raw_ptr;
  const BOOL *v4;
  AMCP::Log::Scope_Registry *v5;
  AMCP::Log::Scope_Registry *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t (**v30)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *);
  int v31;
  uint64_t v32;
  uint64_t v33;
  void (__cdecl *v34)(std::runtime_error *__hidden);
  _opaque_pthread_t *v35;
  mach_port_t v36;
  uint64_t v37;
  std::__shared_weak_count *imp;
  unint64_t *v39;
  unint64_t v40;
  NSObject *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _opaque_pthread_t *v45;
  mach_port_t v46;
  std::runtime_error *exception;
  int v48;
  uint64_t v49;
  std::runtime_error v50;
  __int128 v51;
  uint64_t v52;
  uint64_t (**v53)();
  __int128 v54;
  uint64_t v55;
  std::runtime_error v56;
  std::runtime_error v57;
  void *v58;
  uint64_t (***v59)();
  uint64_t v60;
  uint64_t v61;
  int v62;
  char v63;
  _BYTE buf[48];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 1) <= 0x13FuLL)
  {
    _os_assert_log();
    raw_ptr = (AMCP::Log::Scope_Registry *)_os_crash();
    __break(1u);
    goto LABEL_29;
  }
  raw_ptr = (AMCP::Log::Scope_Registry *)caulk::ipc::mapped_memory::get_raw_ptr(this);
  if (!raw_ptr)
  {
LABEL_29:
    AMCP::Log::Scope_Registry::get(raw_ptr);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v41 = **(NSObject ***)buf;
    AMCP::Log::Scope::get_os_log_t(**(id **)buf);
    objc_claimAutoreleasedReturnValue();
    v42 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v43 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      v45 = pthread_self();
      v46 = pthread_mach_thread_np(v45);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v46;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "IO_Receiver.mm";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 192;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "(payload_ptr) == nullptr";
      _os_log_error_impl(&dword_1B57BA000, v41, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s IO Payload data is null", buf, 0x22u);
    }

    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v63);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v56, "IO Payload data is null");
    std::runtime_error::runtime_error(&v57, &v56);
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = -1;
    v57.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v58 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v57);
    *(_QWORD *)&buf[32] = "auto AMCP::Portal::IPC::IO_Receiver::start_message_thread()::(anonymous class)::operator()(cau"
                          "lk::ipc::mapped_memory &) const";
    *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Driver/IO_Receiver.mm";
    LODWORD(v65) = 192;
    std::vector<void *>::vector(&v51);
    v48 = backtrace((void **)v51, (*((_QWORD *)&v51 + 1) - (_QWORD)v51) >> 3);
    std::vector<void *>::resize((char **)&v51, v48);
    v53 = off_1E69A20A0;
    v54 = v51;
    v55 = v52;
    v51 = 0uLL;
    v52 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v53);
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v49 = *(_QWORD *)&buf[24];
    exception[1].__imp_.__imp_ = *(const char **)&buf[24];
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49);
    v50 = *(std::runtime_error *)&buf[32];
    LODWORD(exception[3].__vftable) = v65;
    exception[2] = v50;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
    exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
    exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
  }
  v5 = raw_ptr;
  v6 = (AMCP::Log::Scope_Registry *)AMCP::Feature_Flags::access_collect_io_perfdata(0, v4);
  if ((_DWORD)v6)
  {
    v6 = (AMCP::Log::Scope_Registry *)mach_absolute_time();
    *((_QWORD *)v5 + 39) = v6;
  }
  v7 = *(_QWORD *)v5;
  v8 = *((unsigned int *)v5 + 2);
  v10 = *((unsigned int *)v5 + 62);
  v9 = *((_DWORD *)v5 + 63);
  LODWORD(v53) = *((_DWORD *)v5 + 62);
  LODWORD(v51) = v9;
  v11 = *((_OWORD *)v5 + 3);
  v12 = *((_OWORD *)v5 + 4);
  v13 = *((_OWORD *)v5 + 6);
  v66 = *((_OWORD *)v5 + 5);
  v67 = v13;
  v14 = *((_OWORD *)v5 + 7);
  v15 = *((_OWORD *)v5 + 8);
  v16 = *((_OWORD *)v5 + 10);
  v70 = *((_OWORD *)v5 + 9);
  v71 = v16;
  v68 = v14;
  v69 = v15;
  v17 = *((_OWORD *)v5 + 11);
  v18 = *((_OWORD *)v5 + 12);
  v19 = *((_OWORD *)v5 + 14);
  v74 = *((_OWORD *)v5 + 13);
  v75 = v19;
  v72 = v17;
  v73 = v18;
  *(_OWORD *)&buf[32] = v11;
  v65 = v12;
  v20 = *((_OWORD *)v5 + 2);
  *(_OWORD *)buf = *((_OWORD *)v5 + 1);
  *(_OWORD *)&buf[16] = v20;
  v21 = *((unsigned int *)v5 + 60);
  v22 = *((_DWORD *)v5 + 64);
  v23 = *((_DWORD *)v5 + 65);
  v24 = *((_DWORD *)v5 + 66);
  v25 = *((_DWORD *)v5 + 67);
  v26 = *(_QWORD *)(a1 + 8);
  v27 = *(_QWORD *)(v26 + 48);
  v28 = *(unsigned int *)(v26 + 56);
  LODWORD(v56.__vftable) = *(_DWORD *)(v26 + 56);
  switch(v7)
  {
    case 3:
      kdebug_trace();
      v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27 + 144))(v27, v28, v10, (uint64_t)v5 + 280, (uint64_t)v5 + 288, (uint64_t)v5 + 296);
      kdebug_trace();
      break;
    case 4:
      v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27 + 152))(v27, v28, v10, v8, (uint64_t)v5 + 304, (uint64_t)v5 + 305);
      goto LABEL_15;
    case 5:
      v30 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v27 + 160);
      goto LABEL_9;
    case 6:
      v57.__vftable = (std::runtime_error_vtbl *)&v56;
      v57.__imp_.__imp_ = (const char *)&v51;
      v58 = (void *)(v26 + 80);
      v59 = &v53;
      v32 = AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0::operator() const(caulk::ipc::mapped_memory &)::{lambda(AMCP::Portal::IPC::shared_buffer_type,unsigned int)#1}::operator()((unsigned int **)&v57, v22, v23);
      v33 = AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0::operator() const(caulk::ipc::mapped_memory &)::{lambda(AMCP::Portal::IPC::shared_buffer_type,unsigned int)#1}::operator()((unsigned int **)&v57, v24, v25);
      if ((_DWORD)v8 == 1919513701 || (_DWORD)v8 == 1919246692 || (_DWORD)v8 == 1835628655)
        kdebug_trace();
      (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v27 + 160))(v27, LODWORD(v56.__vftable), v53, v8, v21, buf);
      v29 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v27 + 168))(v27, LODWORD(v56.__vftable), v51, v53, v8, v21, buf, v32, v33);
      (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v27 + 176))(v27, LODWORD(v56.__vftable), v53, v8, v21, buf);
      if ((_DWORD)v8 == 1919513701 || (_DWORD)v8 == 1919246692 || (_DWORD)v8 == 1835628655)
        kdebug_trace();
      break;
    case 7:
      v30 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v27 + 176);
LABEL_9:
      v31 = (*v30)(v27, v28, v10, v8, v21, buf);
LABEL_15:
      v29 = v31;
      break;
    default:
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v57, "com.apple.coreaudio", "AMCP");
      v34 = v57.~runtime_error_0;
      v35 = pthread_self();
      v36 = pthread_mach_thread_np(v35);
      v37 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
      *(_DWORD *)(v37 + 16) = 0;
      *(_BYTE *)(v37 + 20) = 16;
      *(_DWORD *)(v37 + 24) = v36;
      *(_QWORD *)(v37 + 32) = "IO_Receiver.mm";
      *(_DWORD *)(v37 + 40) = 285;
      *(_QWORD *)v37 = &off_1E6993A88;
      *(_QWORD *)(v37 + 8) = 0;
      caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)v34, (caulk::concurrent::message *)v37);
      imp = (std::__shared_weak_count *)v57.__imp_.__imp_;
      if (v57.__imp_.__imp_)
      {
        v39 = (unint64_t *)(v57.__imp_.__imp_ + 8);
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
          std::__shared_weak_count::__release_weak(imp);
        }
      }
      v29 = 1970171760;
      break;
  }
  *((_DWORD *)v5 + 68) = v29;
}

void sub_1B5BAAD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, std::runtime_error a19, std::runtime_error a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,std::runtime_error a30,uint64_t a31,uint64_t a32)
{
  void *v32;

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0,std::allocator<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0>,void ()(caulk::ipc::mapped_memory &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP6Portal3IPC11IO_Receiver20start_message_threadEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0,std::allocator<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0>,void ()(caulk::ipc::mapped_memory &)>::target_type()
{
}

uint64_t AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0::operator() const(caulk::ipc::mapped_memory &)::{lambda(AMCP::Portal::IPC::shared_buffer_type,unsigned int)#1}::operator()(unsigned int **a1, int a2, unsigned int a3)
{
  unsigned int *v4;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int **v9;
  int v10;
  uint64_t *v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;

  if (!a2)
    return 0;
  if (a2 == 1)
  {
    v6 = a1[1];
    v7 = **a1;
    v9 = a1 + 2;
    v8 = a1[2];
    v10 = *v9[1];
    v12 = v7;
    v13 = v10;
    v14 = *v6;
    v15 = 1;
  }
  else
  {
    if (a2 == 2)
    {
      v4 = a1[1];
      v12 = **a1;
      v13 = 0;
      v14 = *v4;
      v15 = 2;
    }
    else
    {
      v12 = **a1;
      v13 = 0;
      v14 = 0;
      v15 = a2;
    }
    v8 = a1[2];
  }
  v11 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::__unordered_map_hasher<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>>>::find<AMCP::Portal::IPC::shared_buffer_info_t>(v8, &v12);
  if (!v11)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return caulk::ipc::mapped_memory::get_raw_ptr((caulk::ipc::mapped_memory *)v11[4]) + a3;
}

void caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0::operator() const(caulk::ipc::mapped_memory &)::{lambda(std::tuple<unsigned int,char const*,int,unsigned long long,unsigned int> &)#1},std::tuple<unsigned int,char const*,int,unsigned long long,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0::operator() const(caulk::ipc::mapped_memory &)::{lambda(std::tuple<unsigned int,char const*,int,unsigned long long,unsigned int> &)#1},std::tuple<unsigned int,char const*,int,unsigned long long,unsigned int>>::perform(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  caulk::concurrent::message *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v15;
  if (*(_QWORD *)v15)
  {
    v4 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v15 = 2080;
    *(_QWORD *)&v15[2] = v8;
    v16 = 1024;
    v17 = v9;
    v18 = 2048;
    v19 = v10;
    v20 = 1024;
    v21 = v11;
    _os_log_impl(&dword_1B57BA000, v2, v6, "%6u %32s:%-5d Caught exception while doing io message operation %llu, device id %u", buf, 0x28u);
  }

  return caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0::operator() const(caulk::ipc::mapped_memory &)::{lambda(std::tuple<unsigned int,char const*,int,unsigned long long,unsigned int> &)#1},std::tuple<unsigned int,char const*,int,unsigned long long,unsigned int>>::rt_cleanup::~rt_cleanup(&v13);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0::operator() const(caulk::ipc::mapped_memory &)::{lambda(std::tuple<unsigned int,char const*,int,unsigned long long,unsigned int> &)#1},std::tuple<unsigned int,char const*,int,unsigned long long,unsigned int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 64, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0::operator() const(caulk::ipc::mapped_memory &)::{lambda(std::tuple<unsigned int,char const*,int> &)#1},std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0::operator() const(caulk::ipc::mapped_memory &)::{lambda(std::tuple<unsigned int,char const*,int> &)#1},std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  caulk::concurrent::message *v11;
  uint8_t buf[8];
  _BYTE v13[10];
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  v3 = *(std::__shared_weak_count **)v13;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v2, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    _os_log_impl(&dword_1B57BA000, v2, v6, "%6u %32s:%-5d Unknown IO message command", buf, 0x18u);
  }

  return caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0::operator() const(caulk::ipc::mapped_memory &)::{lambda(std::tuple<unsigned int,char const*,int> &)#1},std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(&v11);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Receiver::start_message_thread(void)::$_0::operator() const(caulk::ipc::mapped_memory &)::{lambda(std::tuple<unsigned int,char const*,int> &)#1},std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::__unordered_map_hasher<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>>>::find<AMCP::Portal::IPC::shared_buffer_info_t>(_QWORD *a1, unsigned int *a2)
{
  unint64_t v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t *i;
  unint64_t v9;

  v4 = std::hash<AMCP::Portal::IPC::shared_buffer_info_t>::operator()(a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v7 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & v4;
  }
  i = *(uint64_t **)(*a1 + 8 * v7);
  if (i)
  {
    for (i = (uint64_t *)*i; i; i = (uint64_t *)*i)
    {
      v9 = i[1];
      if (v4 == v9)
      {
        if (*((_DWORD *)i + 4) == *a2
          && *((_DWORD *)i + 5) == a2[1]
          && *((_DWORD *)i + 6) == a2[2]
          && *((_DWORD *)i + 7) == a2[3])
        {
          return i;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v9 >= *(_QWORD *)&v5)
            v9 %= *(_QWORD *)&v5;
        }
        else
        {
          v9 &= *(_QWORD *)&v5 - 1;
        }
        if (v9 != v7)
          return 0;
      }
    }
  }
  return i;
}

void HALS_IOContext_Manager::destroy_context_core_for_hal_object_id(HALS_IOContext_Manager *this, unsigned int a2)
{
  os_unfair_lock_s *v4;
  uint64_t *mcp_object;
  unsigned int v6;
  AMCP::Core::Core *v7;
  CFTypeRef v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unsigned __int8 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CFTypeRef cf[6];
  std::__shared_weak_count *v20;
  CFTypeRef v21;
  AMCP::Core::Core *v22;
  std::__shared_weak_count *v23;
  CFTypeRef v24;

  v4 = (os_unfair_lock_s *)((char *)this + 16);
  os_unfair_lock_lock((os_unfair_lock_t)this + 4);
  mcp_object = HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object((HALS_IOContext_Manager *)((char *)this + 40), a2);
  v6 = mcp_object;
  if ((unint64_t)mcp_object >> 32)
  {
    v24 = 0;
    AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v22, *((std::__shared_mutex_base **)this + 15), mcp_object);
    v7 = v22;
    if (v22)
    {
      AMCP::Core::Core::get_simple_required_property<1853188452u>(cf, v22);
      v8 = cf[0];
      v24 = cf[0];
    }
    else
    {
      v8 = 0;
    }
    v9 = *((_QWORD *)this + 32);
    cf[0] = (CFTypeRef)MEMORY[0x1E0C809B0];
    cf[1] = (CFTypeRef)1174405120;
    cf[2] = ___ZN27HALS_IOContext_Manager_Impl38destroy_context_core_for_hal_object_idEj_block_invoke;
    cf[3] = &__block_descriptor_tmp_13580;
    cf[4] = (char *)this + 24;
    cf[5] = v7;
    v20 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    if (v8)
      CFRetain(v8);
    v21 = v8;
    v12 = atomic_load((unsigned __int8 *)(v9 + 32));
    if ((v12 & 1) != 0)
      atomic_store(1u, (unsigned __int8 *)(v9 + 33));
    dispatch_async(*(dispatch_queue_t *)v9, cf);
    HALS_IOContext_Manager_Impl::Object_Map::remove_object((HALS_IOContext_Manager *)((char *)this + 40), v6, a2);
    AMCP::Core::Broker::destroy_core(*((std::__shared_mutex_base **)this + 15), v6);
    if (v21)
      CFRelease(v21);
    v13 = v20;
    if (v20)
    {
      v14 = (unint64_t *)&v20->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v23;
    if (v23)
    {
      v17 = (unint64_t *)&v23->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (v24)
      CFRelease(v24);
  }
  os_unfair_lock_unlock(v4);
}

void sub_1B5BAB764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, const void *a20)
{
  os_unfair_lock_s *v20;
  uint64_t v21;
  const void **v22;

  applesauce::CF::StringRef::~StringRef(v22);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v21);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  applesauce::CF::StringRef::~StringRef(&a20);
  os_unfair_lock_unlock(v20);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Manager::create_stream_info_for_device(HALS_IOContext_Manager *this, os_unfair_lock_s *a2, const HALS_IODevice *a3)
{
  os_unfair_lock_s *v5;

  v5 = a2 + 4;
  os_unfair_lock_lock(a2 + 4);
  HALS_IOContext_Manager_Impl::create_stream_info_for_device(this, a3);
  os_unfair_lock_unlock(v5);
}

void sub_1B5BAB7E4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Manager::device_arrived(os_unfair_lock_s *a1, unsigned int a2, unsigned int a3, const __CFString **a4, uint64_t a5, char a6)
{
  os_unfair_lock_s *v12;
  const __CFString *v13;
  const __CFString *v14;

  v12 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  v13 = *a4;
  if (v13)
    CFRetain(v13);
  v14 = v13;
  HALS_IOContext_Manager_Impl::device_arrived((uint64_t)&a1[6], a2, a3, &v14, a5, a6);
  if (v13)
    CFRelease(v13);
  os_unfair_lock_unlock(v12);
}

void sub_1B5BAB89C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  os_unfair_lock_s *v2;
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Manager::device_died(uint64_t a1, unsigned int a2, unsigned int a3, const __CFString **a4)
{
  os_unfair_lock_s *v8;
  const __CFString *v9;
  AMCP::Log::Scope_Registry *v10;
  std::__shared_weak_count *v11;
  NSObject *v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  uint64_t *mcp_object;
  unsigned int v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  _opaque_pthread_t *v21;
  mach_port_t v22;
  mach_port_t v23;
  void **v24;
  std::runtime_error *exception;
  void *__p[2];
  char v27;
  uint8_t buf[8];
  __int128 v29;
  _QWORD v30[3];

  v30[2] = *MEMORY[0x1E0C80C00];
  v8 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  v9 = *a4;
  if (v9)
    CFRetain(v9);
  std::mutex::lock((std::mutex *)(a1 + 192));
  AMCP::Log::Scope_Registry::get(v10);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v11 = (std::__shared_weak_count *)v29;
  v12 = **(NSObject ***)buf;
  if ((_QWORD)v29)
  {
    v13 = (unint64_t *)(v29 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    v21 = pthread_self();
    v22 = pthread_mach_thread_np(v21);
    if (!v9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v23 = v22;
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v9);
    if (v27 >= 0)
      v24 = __p;
    else
      v24 = (void **)__p[0];
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v23;
    LOWORD(v29) = 2080;
    *(_QWORD *)((char *)&v29 + 2) = "HALS_IOContext_Manager_Impl.cpp";
    WORD5(v29) = 1024;
    HIDWORD(v29) = 495;
    LOWORD(v30[0]) = 2080;
    *(_QWORD *)((char *)v30 + 2) = v24;
    _os_log_debug_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d device_died: %s", buf, 0x22u);
    if (v27 < 0)
      operator delete(__p[0]);
  }
  v15 = HALS_IOContext_Manager_Impl::demand_driver_object_for_id((std::__shared_mutex_base **)(a1 + 24), a3);
  mcp_object = HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object((HALS_IOContext_Manager_Impl::Object_Map *)(a1 + 40), a2);
  v17 = mcp_object;
  if ((unint64_t)mcp_object >> 32)
  {
    v18 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)buf = &off_1E699BFB8;
    *(_QWORD *)&v29 = a1 + 24;
    *((_QWORD *)&v29 + 1) = v17 | ((unint64_t)a2 << 32);
    v30[0] = buf;
    HALS_Graph_Manager::enqueue_config_change(v18, v15, v17, 1, (uint64_t)buf);
    v19 = (uint8_t *)v30[0];
    if ((uint8_t *)v30[0] == buf)
    {
      v20 = 4;
      v19 = buf;
    }
    else
    {
      if (!v30[0])
      {
LABEL_15:
        HALS_IOContext_Manager_Impl::garbage_collect((HALS_IOContext_Manager_Impl *)(a1 + 24));
        goto LABEL_16;
      }
      v20 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
    goto LABEL_15;
  }
LABEL_16:
  std::mutex::unlock((std::mutex *)(a1 + 192));
  if (v9)
    CFRelease(v9);
  os_unfair_lock_unlock(v8);
}

void sub_1B5BABB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  os_unfair_lock_s *v9;
  std::mutex *v10;
  void *v11;

  __cxa_free_exception(v11);
  std::mutex::unlock(v10);
  applesauce::CF::StringRef::~StringRef(&a9);
  os_unfair_lock_unlock(v9);
  _Unwind_Resume(a1);
}

uint64_t **HALS_IOContext_Manager::get_hal_object_id_for_device_uid(uint64_t a1, unsigned __int8 *a2)
{
  os_unfair_lock_s *v4;
  uint64_t **hal_object_id_for_device_uid;

  v4 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  hal_object_id_for_device_uid = HALS_IOContext_Manager_Impl::get_hal_object_id_for_device_uid(*(uint64_t ***)(a1 + 168), a2);
  os_unfair_lock_unlock(v4);
  return hal_object_id_for_device_uid;
}

void sub_1B5BABBF0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

BOOL HALS_IOContext_Manager::has_engine_for_device(HALS_IOContext_Manager *this, const HALS_IODevice *a2)
{
  os_unfair_lock_s *v4;
  _BOOL8 v5;

  if (!AMCP::Feature_Flags::run_hybrid_hal(this, (const BOOL *)a2))
    return 1;
  v4 = (os_unfair_lock_s *)((char *)this + 16);
  os_unfair_lock_lock((os_unfair_lock_t)this + 4);
  v5 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((_QWORD *)this + 19, *((_DWORD *)a2 + 4)) != 0;
  os_unfair_lock_unlock(v4);
  return v5;
}

void HALS_IOContext_Manager::create_engine_for_device(os_unfair_lock_s *this, const HALS_IODevice *a2)
{
  os_unfair_lock_s *v3;
  HALS_IOContext_Manager_Impl *v4;

  v3 = this + 4;
  v4 = (HALS_IOContext_Manager_Impl *)&this[6];
  os_unfair_lock_lock(this + 4);
  HALS_IOContext_Manager_Impl::create_engine_for_device(v4, a2);
  os_unfair_lock_unlock(v3);
}

void sub_1B5BABCAC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Manager::destroy_engine_for_device(os_unfair_lock_s *this, const HALS_IODevice *a2)
{
  if (AMCP::Feature_Flags::run_hybrid_hal((AMCP::Feature_Flags *)this, (const BOOL *)a2))
  {
    os_unfair_lock_lock(this + 4);
    HALS_IOContext_Manager_Impl::destroy_engine_for_device((HALS_IOContext_Manager_Impl *)&this[6], *((_DWORD *)a2 + 4));
    os_unfair_lock_unlock(this + 4);
  }
}

void HALS_IOContext_Manager::pause_contexts_for_device(os_unfair_lock_s *this, HALS_IODevice *a2)
{
  os_unfair_lock_s *v4;
  uint64_t *mcp_object;
  HALB_Mutex *v6;
  uint64_t *v7;
  _QWORD *v8[2];
  _BYTE v9[24];
  void **v10[6];

  v4 = this + 4;
  os_unfair_lock_lock(this + 4);
  mcp_object = HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object((HALS_IOContext_Manager_Impl::Object_Map *)&this[10], *((_DWORD *)a2 + 4));
  if ((unint64_t)mcp_object >> 32)
  {
    AMCP::IO_Core::Graph_Manager::find_timebases_from_object_id((AMCP::IO_Core::Graph_Manager *)v9, *(_QWORD **)&this[34]._os_unfair_lock_opaque, mcp_object);
    v8[0] = 0;
    v8[1] = 0;
    v7 = (uint64_t *)v8;
    AMCP::IO_Core::Graph_Manager::pause_iocontexts_for_timebases(*(_QWORD ***)&this[34]._os_unfair_lock_opaque, (uint64_t)v9, &v7);
    v10[0] = (void **)MEMORY[0x1E0C809B0];
    v10[1] = (void **)0x40000000;
    v10[2] = (void **)___ZN13HALS_IODevice22set_paused_io_contextsERKNSt3__13setIjNS0_4lessIjEENS0_9allocatorIjEEEE_block_invoke;
    v10[3] = (void **)&__block_descriptor_tmp_12_14906;
    v10[4] = (void **)a2;
    v10[5] = (void **)&v7;
    v6 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IODevice *))(*(_QWORD *)a2 + 56))(a2);
    HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v10);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v8[0]);
    v10[0] = (void **)v9;
    std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](v10);
  }
  os_unfair_lock_unlock(v4);
}

void sub_1B5BABE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, _QWORD *a10)
{
  os_unfair_lock_s *v10;

  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a10);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  os_unfair_lock_unlock(v10);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Manager::resume_contexts_for_device(os_unfair_lock_s *this, HALS_IODevice *a2)
{
  os_unfair_lock_s *v4;
  uint64_t *mcp_object;
  HALB_Mutex *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t *v11;
  const __CFString *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  const __CFString **data;
  uint64_t v17;
  const __CFString **v18;
  uint64_t v19;
  uint64_t *v20;
  BOOL v21;
  void *v22;
  __CFString *v23;
  __CFString *v24;
  const __CFString *v25;
  uint64_t *v26;
  _QWORD *v27;
  _QWORD **v28;
  unint64_t *v29;
  unint64_t v30;
  std::runtime_error *exception;
  std::__shared_mutex_base *v32;
  uint64_t v33;
  _QWORD *v34[2];
  _BYTE v35[24];
  AMCP::Core::Core *v36;
  std::__shared_weak_count *v37;
  uint64_t *v38;
  uint64_t v39;
  void (*v40)(AMCP::Log::Scope_Registry *);
  void *v41;
  void **v42;
  HALS_IODevice *v43;
  void *__p[2];
  uint64_t v45;
  _QWORD *(*v46)(_QWORD *, _QWORD *);
  void (*v47)(uint64_t);
  _QWORD **v48;
  _QWORD *v49[2];
  const __CFString *v50[2];

  v4 = this + 4;
  os_unfair_lock_lock(this + 4);
  mcp_object = HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object((HALS_IOContext_Manager_Impl::Object_Map *)&this[10], *((_DWORD *)a2 + 4));
  if ((unint64_t)mcp_object >> 32)
  {
    AMCP::IO_Core::Graph_Manager::find_timebases_from_object_id((AMCP::IO_Core::Graph_Manager *)v35, *(_QWORD **)&this[34]._os_unfair_lock_opaque, mcp_object);
    __p[0] = 0;
    __p[1] = __p;
    v45 = 0x4002000000;
    v46 = __Block_byref_object_copy__14916;
    v47 = __Block_byref_object_dispose__14917;
    v49[0] = 0;
    v49[1] = 0;
    v48 = v49;
    v38 = (uint64_t *)MEMORY[0x1E0C809B0];
    v39 = 0x40000000;
    v40 = ___ZN13HALS_IODevice32get_and_clear_paused_io_contextsEv_block_invoke;
    v41 = &unk_1E699F650;
    v42 = __p;
    v43 = a2;
    v6 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IODevice *))(*(_QWORD *)a2 + 56))(a2);
    HALB_CommandGate::ExecuteCommand(v6, (uint64_t)&v38);
    std::set<unsigned int>::set[abi:ne180100](&v33, (uint64_t)__p[1] + 40);
    _Block_object_dispose(__p, 8);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v49[0]);
    v39 = 0;
    v40 = 0;
    v38 = &v39;
    v7 = v33;
    v8 = *(std::__shared_weak_count **)&this[32]._os_unfair_lock_opaque;
    v32 = *(std::__shared_mutex_base **)&this[30]._os_unfair_lock_opaque;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    if ((_QWORD **)v7 != v34)
    {
      v11 = &v39;
      do
      {
        AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v36, v32, *(_DWORD *)(v7 + 28));
        if (v36)
        {
          AMCP::Core::Core::get_simple_required_property<1853188452u>(v50, v36);
          v12 = v50[0];
          if (!v50[0])
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v50[0]);
          CFRelease(v12);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "");
        }
        v13 = v37;
        if (v37)
        {
          v14 = (unint64_t *)&v37->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        if (&v39 == v11
          || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, v11 + 4) & 0x80) != 0)
        {
          v17 = *v11;
          v18 = (const __CFString **)v11;
          if (v38 == v11)
            goto LABEL_27;
          v19 = *v11;
          v20 = v11;
          if (v17)
          {
            do
            {
              v18 = (const __CFString **)v19;
              v19 = *(_QWORD *)(v19 + 8);
            }
            while (v19);
          }
          else
          {
            do
            {
              v18 = (const __CFString **)v20[2];
              v21 = *v18 == (const __CFString *)v20;
              v20 = (uint64_t *)v18;
            }
            while (v21);
          }
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v18 + 4, __p) & 0x80) != 0)
          {
LABEL_27:
            if (!v17)
            {
              v36 = (AMCP::Core::Core *)v11;
LABEL_42:
              v22 = operator new(0x38uLL);
              *((_OWORD *)v22 + 2) = *(_OWORD *)__p;
              *((_QWORD *)v22 + 6) = v45;
              __p[1] = 0;
              v45 = 0;
              __p[0] = 0;
              std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(&v38, (uint64_t)v36, (uint64_t **)v11, (uint64_t *)v22);
              goto LABEL_43;
            }
            v36 = (AMCP::Core::Core *)v18;
            data = v18 + 1;
            goto LABEL_29;
          }
        }
        else
        {
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11 + 4, __p) & 0x80) == 0)
          {
            v36 = (AMCP::Core::Core *)v11;
            v50[0] = (const __CFString *)v11;
            data = v50;
            goto LABEL_30;
          }
          v23 = (__CFString *)v11[1];
          v24 = v23;
          v25 = (const __CFString *)v11;
          if (v23)
          {
            do
            {
              data = (const __CFString **)v24;
              v24 = (__CFString *)v24->isa;
            }
            while (v24);
          }
          else
          {
            do
            {
              data = (const __CFString **)v25->data;
              v21 = *data == v25;
              v25 = (const __CFString *)data;
            }
            while (!v21);
          }
          if (data == (const __CFString **)&v39
            || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, data + 4) & 0x80) != 0)
          {
            if (v23)
            {
              v36 = (AMCP::Core::Core *)data;
            }
            else
            {
              v36 = (AMCP::Core::Core *)v11;
              data = (const __CFString **)(v11 + 1);
            }
            goto LABEL_29;
          }
        }
        data = (const __CFString **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)&v38, &v36, __p);
LABEL_29:
        v11 = (uint64_t *)*data;
LABEL_30:
        v22 = v11;
        v11 = (uint64_t *)data;
        if (!v22)
          goto LABEL_42;
LABEL_43:
        v26 = (uint64_t *)*((_QWORD *)v22 + 1);
        if (v26)
        {
          do
          {
            v11 = v26;
            v26 = (uint64_t *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            v11 = (uint64_t *)*((_QWORD *)v22 + 2);
            v21 = *v11 == (_QWORD)v22;
            v22 = v11;
          }
          while (!v21);
        }
        if (SHIBYTE(v45) < 0)
          operator delete(__p[0]);
        v27 = *(_QWORD **)(v7 + 8);
        if (v27)
        {
          do
          {
            v28 = (_QWORD **)v27;
            v27 = (_QWORD *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            v28 = *(_QWORD ***)(v7 + 16);
            v21 = *v28 == (_QWORD *)v7;
            v7 = (uint64_t)v28;
          }
          while (!v21);
        }
        v7 = (uint64_t)v28;
      }
      while (v28 != v34);
    }
    if (v8)
    {
      v29 = (unint64_t *)&v8->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    AMCP::IO_Core::Graph_Manager::resume_iocontexts_for_timebases(*(_QWORD ***)&this[34]._os_unfair_lock_opaque, &v33, (uint64_t)&v38);
    std::__tree<std::string>::destroy((char *)v39);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v34[0]);
    __p[0] = v35;
    std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  os_unfair_lock_unlock(v4);
}

void sub_1B5BAC2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, _QWORD *a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  os_unfair_lock_s *v34;

  std::__tree<std::string>::destroy(a20);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a12);
  a11 = &a14;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  os_unfair_lock_unlock(v34);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Manager::find_contexts_and_devices_with_timebases(HALS_IOContext_Manager *this, os_unfair_lock_s *a2, uint64_t a3)
{
  os_unfair_lock_s *v5;
  const AMCP::Graph::Timebase_Set *v6;

  v5 = a2 + 4;
  v6 = (const AMCP::Graph::Timebase_Set *)&a2[6];
  os_unfair_lock_lock(a2 + 4);
  HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases(this, v6, *(_QWORD **)(a3 + 16));
  os_unfair_lock_unlock(v5);
}

void sub_1B5BAC3A0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Manager::hog_mode_owner_changed(os_unfair_lock_s *this, HALS_IODevice *a2, int a3)
{
  os_unfair_lock_s *v6;
  uint64_t *mcp_object;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  unint64_t *v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  void *v22;
  void *__p;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  __int128 v34;
  __int128 v35;
  int v36;
  void *v37;
  void *v38;
  uint64_t v39;

  v6 = this + 4;
  os_unfair_lock_lock(this + 4);
  if (a3 != -1)
  {
    mcp_object = HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object((HALS_IOContext_Manager_Impl::Object_Map *)&this[10], *((_DWORD *)a2 + 4));
    if ((unint64_t)mcp_object >> 32)
    {
      v34 = 0u;
      v35 = 0u;
      v36 = 1065353216;
      v38 = 0;
      v39 = 0;
      v37 = 0;
      AMCP::IO_Core::Graph_Manager::find_timebases_from_object_id((AMCP::IO_Core::Graph_Manager *)&v19, *(_QWORD **)&this[34]._os_unfair_lock_opaque, mcp_object);
      v8 = v19;
      v9 = (unint64_t *)v20;
      while (v8 != v9)
      {
        v10 = *v8;
        v11 = v8[1];
        v32 = *v8;
        v33 = (std::__shared_weak_count *)v11;
        if (v11)
        {
          v12 = (unint64_t *)(v11 + 8);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__emplace_unique_key_args<std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase>>((uint64_t)&v34, v10, (uint64_t)&v32);
        v14 = v33;
        if (v33)
        {
          p_shared_owners = (unint64_t *)&v33->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v8 += 2;
      }
      v29 = &v19;
      std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
      HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases((HALS_IOContext_Manager_Impl *)&v29, (const AMCP::Graph::Timebase_Set *)&this[6], (_QWORD *)v35);
      v26 = 0;
      v27 = 0;
      v28 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v26, v29, v30, (v30 - (uint64_t)v29) >> 2);
      pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
      v17 = HALS_ObjectMap::sNormalPriorityQueue;
      v19 = (unint64_t *)MEMORY[0x1E0C809B0];
      v20 = 1174405120;
      v21 = ___ZN27HALS_IOContext_Manager_Impl22hog_mode_owner_changedEP13HALS_IODevicei_block_invoke;
      v22 = &__block_descriptor_tmp_20_13632;
      v24 = 0;
      v25 = 0;
      __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v26, v27, (v27 - (uint64_t)v26) >> 2);
      v18 = atomic_load((unsigned __int8 *)(v17 + 32));
      if ((v18 & 1) != 0)
        atomic_store(1u, (unsigned __int8 *)(v17 + 33));
      dispatch_async(*(dispatch_queue_t *)v17, &v19);
      if (__p)
      {
        v24 = __p;
        operator delete(__p);
      }
      if (v26)
        operator delete(v26);
      if (v31)
        operator delete(v31);
      if (v29)
        operator delete(v29);
      if (v37)
      {
        v38 = v37;
        operator delete(v37);
      }
      std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table((uint64_t)&v34);
    }
  }
  os_unfair_lock_unlock(v6);
}

void sub_1B5BAC5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  os_unfair_lock_s *v25;
  uint64_t v26;

  std::pair<std::vector<unsigned int>,std::vector<unsigned int>>::~pair((uint64_t)&a19);
  AMCP::Graph::Timebase_Set::~Timebase_Set((AMCP::Graph::Timebase_Set *)(v26 - 112));
  os_unfair_lock_unlock(v25);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Manager::rebuild_engine_for_device(HALS_IOContext_Manager *this, const HALS_IODevice *a2)
{
  os_unfair_lock_s *v4;
  HALS_IOContext_Manager_Impl *v5;
  unsigned int v6;
  unsigned int v7;
  const void *v8;
  char v9;
  CFTypeRef cf;
  void *__p[3];

  if (AMCP::Feature_Flags::run_hybrid_hal(this, (const BOOL *)a2))
  {
    v4 = (os_unfair_lock_s *)((char *)this + 16);
    v5 = (HALS_IOContext_Manager *)((char *)this + 24);
    os_unfair_lock_lock(v4);
    HALS_IOContext_Manager_Impl::create_engine_for_device(v5, a2);
    HALS_IOContext_Manager_Impl::create_stream_info_for_device((HALS_IOContext_Manager_Impl *)__p, a2);
    v6 = *((_DWORD *)a2 + 4);
    v7 = *((_DWORD *)a2 + 7);
    v8 = (const void *)(*(uint64_t (**)(const HALS_IODevice *))(*(_QWORD *)a2 + 208))(a2);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v8);
    v9 = (*(uint64_t (**)(const HALS_IODevice *))(*(_QWORD *)a2 + 224))(a2);
    HALS_IOContext_Manager_Impl::device_arrived((uint64_t)v5, v6, v7, (const __CFString **)&cf, (uint64_t)__p, v9 ^ 1);
    if (cf)
      CFRelease(cf);
    if (__p[0])
      operator delete(__p[0]);
    os_unfair_lock_unlock(v4);
  }
}

void sub_1B5BAC730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  os_unfair_lock_s *v10;

  applesauce::CF::StringRef::~StringRef((const void **)&a9);
  if (__p)
    operator delete(__p);
  os_unfair_lock_unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<HALIO::HALIO_Graph_Builder>::reset[abi:ne180100](uint64_t **result)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = *v1;
    *v1 = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

uint64_t *std::unique_ptr<HALS_DSPCaptureFiles>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = (void **)(v2 + 48);
    std::vector<std::pair<std::string const,HALS_IOEngineInfo const*>>::__destroy_vector::operator()[abi:ne180100](&v3);
    std::__tree<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>>>::destroy(*(_QWORD **)(v2 + 32));
    std::__tree<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>>>::destroy(*(_QWORD **)(v2 + 8));
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::CreateProcessorConfiguration>::description(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const __CFString *v4;
  const __CFString *v5;
  CFIndex Length;
  CFIndex v7;
  CFTypeRef v8;
  std::vector<char>::value_type __x;
  std::vector<char> cf;

  cf.__begin_ = (std::vector<char>::pointer)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, std::vector<char> *))(*(_QWORD *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v8, cf.__begin_);
  if (cf.__begin_)
    CFRelease(cf.__begin_);
  v4 = CFCopyDescription(v8);
  v5 = v4;
  if (v4)
  {
    Length = CFStringGetLength(v4);
    v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    __x = 0;
    std::vector<char>::vector(&cf, v7, &__x);
    LODWORD(v7) = CFStringGetCString(v5, cf.__begin_, v7, 0x8000100u);
    CFRelease(v5);
    if ((_DWORD)v7)
      std::string::basic_string[abi:ne180100]<0>(a2, cf.__begin_);
    else
      std::string::basic_string[abi:ne180100]<0>(a2, "<error>");
    if (cf.__begin_)
    {
      cf.__end_ = cf.__begin_;
      operator delete(cf.__begin_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<empty>");
  }
  if (v8)
    CFRelease(v8);
}

void sub_1B5BAC974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)&__p);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::CreateProcessorConfiguration>::add_to(uint64_t a1, __CFArray **a2)
{
  CFTypeRef v4;
  CFTypeRef cf;

  cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v4, cf);
  if (cf)
    CFRelease(cf);
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, v4);
  if (v4)
    CFRelease(v4);
}

void sub_1B5BACA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void HALS_IOContextHostedDSP::DSPStreamInstance::CustomPropertyListenerCallback(HALS_IOContextHostedDSP::DSPStreamInstance *this, const AudioObjectPropertyAddress *a2)
{
  uint64_t v4;
  const AudioObjectPropertyAddress *v5;
  HALS_ObjectMap *v6;
  uint64_t v7;
  HALS_NotificationManager *v8;
  AudioObjectPropertyElement mElement;
  const AudioObjectPropertyAddress *v10;
  HALS_NotificationManager *v11;
  AudioObjectPropertyElement v12;
  std::__shared_weak_count *v13;
  NSObject *v14;
  unint64_t *v15;
  unint64_t v16;
  HALS_Object *v17;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  AudioObjectPropertyScope mScope;
  int8x8_t v25;
  int8x8_t v26;
  int32x4_t v27;
  int32x4_t v28;
  uint32x4_t v29;
  int16x8_t v30;
  AudioObjectPropertyElement v31;
  void *__p;
  char v33;
  void *v34;
  char v35;
  uint8_t buf[8];
  _BYTE v37[10];
  __int16 v38;
  int v39;
  __int16 v40;
  HALS_IOContextHostedDSP::DSPStreamInstance *v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  void **v51;
  __int16 v52;
  void **p_p;
  __int16 v54;
  AudioObjectPropertyElement v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v4 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)this);
  v6 = (HALS_ObjectMap *)v4;
  if (v4)
    v7 = *(unsigned int *)(v4 + 16);
  else
    v7 = 0;
  v8 = (HALS_NotificationManager *)*((unsigned int *)this + 1);
  mElement = a2->mElement;
  *(_QWORD *)buf = *(_QWORD *)&a2->mSelector;
  *(_DWORD *)v37 = mElement;
  HALS_NotificationManager::PropertiesChanged(v8, v7, 1, (const AudioObjectPropertyAddress *)buf, v5);
  v11 = (HALS_NotificationManager *)*((unsigned int *)this + 2);
  if (*((_DWORD *)this + 1) != (_DWORD)v11)
  {
    v12 = a2->mElement;
    *(_QWORD *)buf = *(_QWORD *)&a2->mSelector;
    *(_DWORD *)v37 = v12;
    HALS_NotificationManager::PropertiesChanged(v11, v7, 1, (const AudioObjectPropertyAddress *)buf, v10);
  }
  AMCP::Log::Scope_Registry::get(v11);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v13 = *(std::__shared_weak_count **)v37;
  v14 = **(NSObject ***)buf;
  if (*(_QWORD *)v37)
  {
    v15 = (unint64_t *)(*(_QWORD *)v37 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v18 = pthread_self();
    v19 = pthread_mach_thread_np(v18);
    v20 = *((unsigned int *)this + 79);
    v21 = *(unsigned int *)this;
    v22 = *((unsigned int *)this + 1);
    v23 = *((unsigned int *)this + 2);
    mScope = a2->mScope;
    v25.i32[0] = bswap32(a2->mSelector);
    v26 = vzip1_s8(v25, v25);
    v27.i64[0] = 0x1F0000001FLL;
    v27.i64[1] = 0x1F0000001FLL;
    v28.i64[0] = 0x1F0000001FLL;
    v28.i64[1] = 0x1F0000001FLL;
    v29.i64[0] = 0x5F0000005FLL;
    v29.i64[1] = 0x5F0000005FLL;
    *(int8x8_t *)v30.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v29, (uint32x4_t)vsraq_n_s32(v28, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v26), 0x18uLL), 0x18uLL))), v26, (int8x8_t)0x2E002E002E002ELL);
    v35 = 4;
    *(int8x8_t *)v30.i8 = vmovn_s16(v30);
    LODWORD(v34) = v30.i32[0];
    BYTE4(v34) = 0;
    v30.i32[0] = bswap32(mScope);
    *(int8x8_t *)v30.i8 = vzip1_s8(*(int8x8_t *)v30.i8, *(int8x8_t *)v30.i8);
    v33 = 4;
    *(int8x8_t *)v30.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v29, (uint32x4_t)vsraq_n_s32(v27, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v30.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v30.i8, (int8x8_t)0x2E002E002E002ELL);
    LODWORD(__p) = vmovn_s16(v30).u32[0];
    BYTE4(__p) = 0;
    v31 = a2->mElement;
    *(_DWORD *)buf = 67111682;
    *(_DWORD *)&buf[4] = v19;
    *(_WORD *)v37 = 2080;
    *(_QWORD *)&v37[2] = "HALS_IOContextHostedDSP.cpp";
    v38 = 1024;
    v39 = 615;
    v40 = 2048;
    v41 = this;
    v42 = 2048;
    v43 = v20;
    v44 = 2048;
    v45 = v21;
    v46 = 2048;
    v47 = v22;
    v48 = 2048;
    v49 = v23;
    v50 = 2080;
    v51 = &v34;
    v52 = 2080;
    p_p = &__p;
    v54 = 1024;
    v55 = v31;
    _os_log_impl(&dword_1B57BA000, v14, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d [hal_dsp] %p (Context ID: %lu) (Client ID: %lu) (Device ID: %lu (%lu)) Sent Hosted DSP change notification sel:%s scope:%s el:%d", buf, 0x64u);
    if (v33 < 0)
      operator delete(__p);
    if (v35 < 0)
      operator delete(v34);
  }
  HALS_ObjectMap::ReleaseObject(v6, v17);
}

void sub_1B5BACCFC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void DSP_Host_ProcessorInitData::~DSP_Host_ProcessorInitData(DSP_Host_ProcessorInitData *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  DSP_Host_ProcessorInitData *v5;
  uint64_t v6;

  v2 = (char *)this + 40;
  v3 = (char *)*((_QWORD *)this + 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (DSP_Host_ProcessorInitData *)*((_QWORD *)this + 4);
  if (v5 == (DSP_Host_ProcessorInitData *)((char *)this + 8))
  {
    v6 = 4;
    v5 = (DSP_Host_ProcessorInitData *)((char *)this + 8);
  }
  else
  {
    if (!v5)
      return;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
}

void std::__shared_ptr_emplace<HALB_InstrumentedEvent_RealtimeDuration>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6993E68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HALB_InstrumentedEvent_RealtimeDuration>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6993E68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<HALB_InstrumentedEvent_RealtimeDuration>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::*)(AudioObjectPropertyAddress const&),HALS_IOContextHostedDSP::DSPStreamInstance*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::*)(AudioObjectPropertyAddress const&),HALS_IOContextHostedDSP::DSPStreamInstance*,std::placeholders::__ph<1> const&>>,void ()(AudioObjectPropertyAddress const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::*)(AudioObjectPropertyAddress const&),HALS_IOContextHostedDSP::DSPStreamInstance*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::*)(AudioObjectPropertyAddress const&),HALS_IOContextHostedDSP::DSPStreamInstance*,std::placeholders::__ph<1> const&>>,void ()(AudioObjectPropertyAddress const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E6993DA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::*)(AudioObjectPropertyAddress const&),HALS_IOContextHostedDSP::DSPStreamInstance*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::*)(AudioObjectPropertyAddress const&),HALS_IOContextHostedDSP::DSPStreamInstance*,std::placeholders::__ph<1> const&>>,void ()(AudioObjectPropertyAddress const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6993DA8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::*)(AudioObjectPropertyAddress const&),HALS_IOContextHostedDSP::DSPStreamInstance*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::*)(AudioObjectPropertyAddress const&),HALS_IOContextHostedDSP::DSPStreamInstance*,std::placeholders::__ph<1> const&>>,void ()(AudioObjectPropertyAddress const&)>::operator()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t std::__function::__func<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::*)(AudioObjectPropertyAddress const&),HALS_IOContextHostedDSP::DSPStreamInstance*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::*)(AudioObjectPropertyAddress const&),HALS_IOContextHostedDSP::DSPStreamInstance*,std::placeholders::__ph<1> const&>>,void ()(AudioObjectPropertyAddress const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__16__bindIMN23HALS_IOContextHostedDSP17DSPStreamInstanceEFvRK26AudioObjectPropertyAddressEJPS2_RKNS_12placeholders4__phILi1EEEEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::*)(AudioObjectPropertyAddress const&),HALS_IOContextHostedDSP::DSPStreamInstance*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::*)(AudioObjectPropertyAddress const&),HALS_IOContextHostedDSP::DSPStreamInstance*,std::placeholders::__ph<1> const&>>,void ()(AudioObjectPropertyAddress const&)>::target_type()
{
}

uint64_t *HALS_IOContextHostedDSP::DSPStreamInstance::ConfigureCaptureFiles(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t *result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t *v18;
  unsigned int v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t **v28;
  _DWORD *v29;
  _DWORD *v30;
  uint64_t *v31;
  uint64_t *v32;
  unsigned int v33;
  const std::string::value_type *v34;
  std::string::size_type v35;
  uint64_t *v36;
  uint64_t *v37;
  BOOL v38;
  std::string *v39;
  std::string::size_type size;
  uint64_t v41;
  std::string::value_type *v42;
  std::string::size_type v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  __int128 *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  std::string *v56;
  __int128 *v57;
  __int128 v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t **v65;
  uint64_t *v66;
  _QWORD *v67;
  __int128 **v68;
  unint64_t v69;
  uint64_t v70;
  std::string::value_type *__s;
  int v72;
  std::string v73;
  uint64_t v74;
  _DWORD v75[2];
  std::string v76;
  std::string v77;
  uint64_t v78;
  _QWORD v79[3];
  char v80;
  __int128 v81;
  __int128 v82;
  char __str[8];
  _BYTE v84[24];
  uint64_t v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  if ((a3 & 1) == 0)
    return std::unique_ptr<HALS_DSPCaptureFiles>::reset[abi:ne180100]((uint64_t *)(a1 + 328), 0);
  result = (uint64_t *)HALS_DSPCaptureFiles::isDSPCaptureEnabled((HALS_DSPCaptureFiles *)a1);
  if ((_DWORD)result)
  {
    v63 = a1;
    if (*(_DWORD *)(a1 + 12) != 1768845428)
      goto LABEL_35;
    v6 = a2 + 8;
    v7 = a2[8];
    if (!v7)
      goto LABEL_35;
    v8 = a2 + 8;
    v9 = a2 + 8;
    v10 = a2[8];
    do
    {
      v11 = *(_DWORD *)(v10 + 28);
      v12 = v11 >= 3;
      if (v11 >= 3)
        v13 = (uint64_t *)v10;
      else
        v13 = (uint64_t *)(v10 + 8);
      if (v12)
        v9 = (uint64_t *)v10;
      v10 = *v13;
    }
    while (*v13);
    if (v9 != v6 && *((_DWORD *)v9 + 7) < 4u)
      goto LABEL_36;
    v14 = a2 + 8;
    v15 = a2[8];
    do
    {
      v16 = *(_DWORD *)(v15 + 28);
      v17 = v16 >= 6;
      if (v16 >= 6)
        v18 = (uint64_t *)v15;
      else
        v18 = (uint64_t *)(v15 + 8);
      if (v17)
        v14 = (uint64_t *)v15;
      v15 = *v18;
    }
    while (*v18);
    if (v14 != v6 && *((_DWORD *)v14 + 7) < 7u)
      goto LABEL_36;
    do
    {
      v19 = *(_DWORD *)(v7 + 28);
      v20 = v19 >= 9;
      if (v19 >= 9)
        v21 = (uint64_t *)v7;
      else
        v21 = (uint64_t *)(v7 + 8);
      if (v20)
        v8 = (uint64_t *)v7;
      v7 = *v21;
    }
    while (*v21);
    if (v8 == v6 || *((_DWORD *)v8 + 7) >= 0xAu)
    {
LABEL_35:
      v22 = 0;
      v23 = 0;
    }
    else
    {
LABEL_36:
      HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)__str, a2);
      *(float *)&v24 = *(double *)__str;
      v23 = v24;
      v22 = 0x100000000;
    }
    v25 = (_QWORD *)operator new();
    v26 = v23 | v22;
    v27 = (uint64_t)v25;
    v25[2] = 0;
    v25[1] = 0;
    *v25 = v25 + 1;
    v25[4] = 0;
    v25[3] = v25 + 4;
    v28 = (uint64_t **)(v25 + 3);
    v25[5] = 0;
    v25[6] = 0;
    v67 = v25;
    v68 = (__int128 **)(v25 + 6);
    v25[7] = 0;
    v25[8] = 0;
    v78 = v26;
    if (HALS_DSPCaptureFiles::isDSPCaptureEnabled((HALS_DSPCaptureFiles *)v25))
    {
      v29 = (_DWORD *)*a2;
      v30 = (_DWORD *)a2[1];
      if ((_DWORD *)*a2 != v30)
      {
        v31 = a2 + 8;
        v70 = v27 + 64;
        v65 = v28;
        v66 = a2;
        v64 = a2[1];
        do
        {
          if (*(_QWORD *)v29 && *(_QWORD *)(*(_QWORD *)v29 + 288))
          {
            std::string::basic_string[abi:ne180100]<0>(&v77, "-");
            v32 = (uint64_t *)a2[7];
            if (v32 != v31)
            {
              do
              {
                v33 = *((_DWORD *)v32 + 7) - 1;
                if (v33 >= 6)
                {
                  v34 = "unk";
                  v35 = 3;
                }
                else
                {
                  v34 = off_1E6970150[v33];
                  v35 = qword_1B5D1ECB0[v33];
                }
                std::string::append(&v77, v34, v35);
                v36 = (uint64_t *)v32[1];
                if (v36)
                {
                  do
                  {
                    v37 = v36;
                    v36 = (uint64_t *)*v36;
                  }
                  while (v36);
                }
                else
                {
                  do
                  {
                    v37 = (uint64_t *)v32[2];
                    v38 = *v37 == (_QWORD)v32;
                    v32 = v37;
                  }
                  while (!v38);
                }
                v32 = v37;
              }
              while (v37 != v31);
            }
            snprintf(__str, 0x200uLL, "%s-%d", (const char *)(*(_QWORD *)v29 + 32), v29[24]);
            std::string::basic_string[abi:ne180100]<0>(&v76, __str);
            if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v39 = &v77;
            else
              v39 = (std::string *)v77.__r_.__value_.__r.__words[0];
            if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v77.__r_.__value_.__r.__words[2]);
            else
              size = v77.__r_.__value_.__l.__size_;
            std::string::append(&v76, (const std::string::value_type *)v39, size);
            HALS_DSPCaptureFiles::CreateDSPCaptureFiles(HALS_IODSPInfo const&,std::optional<float>)::$_0::operator()((uint64_t)&v78, (uint64_t **)v27, 0, (uint64_t)v29, &v76);
            HALS_DSPCaptureFiles::CreateDSPCaptureFiles(HALS_IODSPInfo const&,std::optional<float>)::$_0::operator()((uint64_t)&v78, v28, 1, (uint64_t)v29, &v76);
            if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v73, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
            else
              v73 = v76;
            v41 = *(_QWORD *)v29;
            v43 = v73.__r_.__value_.__l.__size_;
            v42 = (std::string::value_type *)v73.__r_.__value_.__r.__words[0];
            v75[0] = v73.__r_.__value_.__r.__words[2];
            *(_DWORD *)((char *)v75 + 3) = *(_DWORD *)((char *)&v73.__r_.__value_.__r.__words[2] + 3);
            v44 = SHIBYTE(v73.__r_.__value_.__r.__words[2]);
            memset(&v73, 0, sizeof(v73));
            v74 = v41;
            v46 = *(_QWORD *)(v27 + 56);
            v45 = *(_QWORD *)(v27 + 64);
            v72 = v44;
            if (v46 >= v45)
            {
              __s = v42;
              v47 = *v68;
              v48 = (uint64_t)(v46 - (_QWORD)*v68) >> 5;
              v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 59)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              v50 = v45 - (_QWORD)v47;
              if (v50 >> 4 > v49)
                v49 = v50 >> 4;
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFE0)
                v51 = 0x7FFFFFFFFFFFFFFLL;
              else
                v51 = v49;
              v85 = v70;
              if (v51)
              {
                if (v51 >> 59)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v52 = operator new(32 * v51);
              }
              else
              {
                v52 = 0;
              }
              v54 = (char *)&v52[4 * v48];
              *(double *)__str = *(double *)&v52;
              *(_QWORD *)v84 = v54;
              *(_QWORD *)&v84[8] = v54;
              *(_QWORD *)&v84[16] = &v52[4 * v51];
              if (v72 < 0)
              {
                v27 = (uint64_t)v67;
                std::string::__init_copy_ctor_external((std::string *)&v52[4 * v48], __s, v43);
                v47 = (__int128 *)v67[6];
                v46 = v67[7];
                v54 = *(char **)v84;
                v55 = *(char **)&v84[8];
              }
              else
              {
                *(_QWORD *)v54 = __s;
                *((_QWORD *)v54 + 1) = v43;
                *((_DWORD *)v54 + 4) = v75[0];
                *(_DWORD *)(v54 + 19) = *(_DWORD *)((char *)v75 + 3);
                v54[23] = v72;
                v55 = (char *)&v52[4 * v48];
                v27 = (uint64_t)v67;
              }
              v52[4 * v48 + 3] = v41;
              *(_QWORD *)&v84[8] = v55 + 32;
              *(_QWORD *)&v82 = v54;
              *((_QWORD *)&v82 + 1) = v54;
              v81 = v82;
              v79[0] = v70;
              v79[1] = &v81;
              v79[2] = &v82;
              v80 = 0;
              if ((__int128 *)v46 != v47)
              {
                do
                {
                  v56 = (std::string *)(v54 - 32);
                  v57 = (__int128 *)(v46 - 32);
                  if (*(char *)(v46 - 9) < 0)
                  {
                    std::string::__init_copy_ctor_external(v56, *(const std::string::value_type **)(v46 - 32), *(_QWORD *)(v46 - 24));
                    v59 = (char *)*((_QWORD *)&v82 + 1);
                  }
                  else
                  {
                    v58 = *v57;
                    *((_QWORD *)v54 - 2) = *(_QWORD *)(v46 - 16);
                    *(_OWORD *)&v56->__r_.__value_.__l.__data_ = v58;
                    v59 = v54;
                  }
                  *((_QWORD *)v54 - 1) = *(_QWORD *)(v46 - 8);
                  v54 = v59 - 32;
                  *((_QWORD *)&v82 + 1) = v59 - 32;
                  v46 -= 32;
                }
                while (v57 != v47);
              }
              v80 = 1;
              std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string const,HALS_IOEngineInfo const*>>,std::reverse_iterator<std::pair<std::string const,HALS_IOEngineInfo const*>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v79);
              v60 = *(_QWORD *)(v27 + 64);
              v69 = *(_QWORD *)&v84[8];
              v61 = *(_OWORD *)&v84[8];
              v62 = *(_OWORD *)(v27 + 48);
              *(_QWORD *)(v27 + 48) = v54;
              *(_OWORD *)v84 = v62;
              *(_OWORD *)(v27 + 56) = v61;
              *(_QWORD *)&v84[16] = v60;
              *(double *)__str = *(double *)&v62;
              std::__split_buffer<std::pair<std::string const,HALS_IOEngineInfo const*>>::~__split_buffer((uint64_t)__str);
              v53 = v69;
              v28 = v65;
              a2 = v66;
              v30 = (_DWORD *)v64;
              v42 = __s;
            }
            else
            {
              if (v44 < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v46, v42, v43);
              }
              else
              {
                *(_QWORD *)v46 = v42;
                *(_QWORD *)(v46 + 8) = v43;
                *(_DWORD *)(v46 + 16) = v75[0];
                *(_DWORD *)(v46 + 19) = *(_DWORD *)((char *)v75 + 3);
                *(_BYTE *)(v46 + 23) = v44;
              }
              *(_QWORD *)(v46 + 24) = v41;
              v53 = v46 + 32;
              *(_QWORD *)(v27 + 56) = v46 + 32;
            }
            *(_QWORD *)(v27 + 56) = v53;
            if (v72 < 0)
              operator delete(v42);
            if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v73.__r_.__value_.__l.__data_);
            if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v76.__r_.__value_.__l.__data_);
            if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v77.__r_.__value_.__l.__data_);
          }
          v29 += 32;
        }
        while (v29 != v30);
      }
    }
    return std::unique_ptr<HALS_DSPCaptureFiles>::reset[abi:ne180100]((uint64_t *)(v63 + 328), v27);
  }
  return result;
}

void sub_1B5BAD510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,int a22,int a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;
  void *v55;
  uint64_t v56;

  *(_QWORD *)(v54 + 56) = v56;
  operator delete(v55);
  if (a29 < 0)
    operator delete(a24);
  if (a37 < 0)
    operator delete(a32);
  if (a43 < 0)
    operator delete(a38);
  a45 = a16;
  std::vector<std::pair<std::string const,HALS_IOEngineInfo const*>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
  std::__tree<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>>>::destroy(*(_QWORD **)(a15 + 32));
  std::__tree<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>>>::destroy(*(_QWORD **)(a15 + 8));
  MEMORY[0x1B5E50688](a15, 0x1020C408C5B6129);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOContextHostedDSP::DSPStreamInstance::Negotiate_NP(uint64_t a1, uint64_t *a2, int a3, unsigned int a4, uint64_t a5)
{
  char v6;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  NSObject *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  uint64_t *v27;
  BOOL v28;
  int v29;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 v40;
  BOOL v41;
  std::__shared_weak_count *v42;
  NSObject *v43;
  unint64_t *v44;
  unint64_t v45;
  void **p_buf;
  std::__shared_weak_count *v47;
  NSObject *v48;
  unint64_t *v49;
  unint64_t v50;
  _BOOL4 v51;
  void *v52;
  std::__shared_weak_count *v53;
  NSObject *v54;
  unint64_t *v55;
  unint64_t v56;
  _BOOL8 v57;
  std::__shared_weak_count *v58;
  NSObject *v59;
  unint64_t *v60;
  unint64_t v61;
  _BOOL8 v62;
  std::__shared_weak_count *v63;
  NSObject *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v68;
  NSObject *v69;
  unint64_t *v70;
  unint64_t v71;
  _opaque_pthread_t *v72;
  mach_port_t v73;
  _opaque_pthread_t *v74;
  mach_port_t v75;
  _opaque_pthread_t *v76;
  mach_port_t v77;
  _opaque_pthread_t *v78;
  mach_port_t v79;
  const char *v80;
  void **v81;
  _opaque_pthread_t *v82;
  mach_port_t v83;
  _opaque_pthread_t *v84;
  mach_port_t v85;
  _opaque_pthread_t *v86;
  mach_port_t v87;
  void **v88;
  void *__p[2];
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  void **v95;
  void (**buf)(DSP_Host_Types::NegotiateResponse *__hidden);
  _BYTE buf_8[40];
  _QWORD v98[76];
  _BYTE v99[32];
  uint8_t v100[8];
  _BYTE v101[24];
  __int128 v102;
  _QWORD v103[76];
  _QWORD v104[6];

  v6 = a4;
  v104[3] = *MEMORY[0x1E0C80C00];
  v94 = a4;
  v10 = a2[8];
  if (!v10)
    goto LABEL_21;
  v11 = a2 + 8;
  do
  {
    v12 = *(_DWORD *)(v10 + 28);
    v13 = v12 >= 9;
    if (v12 >= 9)
      v14 = (uint64_t *)v10;
    else
      v14 = (uint64_t *)(v10 + 8);
    if (v13)
      v11 = (uint64_t *)v10;
    v10 = *v14;
  }
  while (*v14);
  if (v11 == a2 + 8 || *((_DWORD *)v11 + 7) > 9u)
  {
LABEL_21:
    v22 = a1 + 648;
    v23 = *(_QWORD *)(a1 + 648);
    if (!v23)
      goto LABEL_31;
    v24 = a1 + 648;
    do
    {
      v25 = *(_DWORD *)(v23 + 28);
      v26 = v25 == 0;
      if (v25)
        v27 = (uint64_t *)v23;
      else
        v27 = (uint64_t *)(v23 + 8);
      if (!v26)
        v24 = v23;
      v23 = *v27;
    }
    while (*v27);
    if (v24 == v22 || *(_DWORD *)(v24 + 28) >= 2u)
LABEL_31:
      v24 = a1 + 648;
    v28 = (a4 & 1) != 0 || v22 == v24;
    v29 = (a4 >> 2) & 1;
    if (!v28)
      v29 = 1;
    if (v29)
      v30 = 4;
    else
      v30 = 0;
    LOBYTE(v94) = v30 | a4 & 0xFB;
    *(_QWORD *)v100 = 0;
    *(_OWORD *)&v101[8] = 0u;
    *(_QWORD *)v101 = &v101[8];
    v102 = 0u;
    memset(v103, 0, 32);
    *(_WORD *)a5 = 0;
    v31 = (_QWORD *)(a5 + 16);
    std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(*(_QWORD **)(a5 + 16));
    v32 = *(_QWORD *)&v101[8];
    *(_QWORD *)(a5 + 8) = *(_QWORD *)v101;
    *v31 = v32;
    v33 = *(_QWORD *)&v101[16];
    *(_QWORD *)(a5 + 24) = *(_QWORD *)&v101[16];
    if (v33)
    {
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)v101 = &v101[8];
      *(_QWORD *)&v101[8] = 0;
      *(_QWORD *)&v101[16] = 0;
    }
    else
    {
      *(_QWORD *)(a5 + 8) = v31;
    }
    std::vector<MutationItinerary::Device>::__vdeallocate((void **)(a5 + 32));
    *(_OWORD *)(a5 + 32) = v102;
    v34 = *(void **)(a5 + 56);
    *(_QWORD *)(a5 + 48) = v103[0];
    v103[0] = 0;
    v102 = 0uLL;
    if (v34)
    {
      *(_QWORD *)(a5 + 64) = v34;
      operator delete(v34);
      *(_QWORD *)(a5 + 56) = 0;
      *(_QWORD *)(a5 + 64) = 0;
      *(_QWORD *)(a5 + 72) = 0;
    }
    *(_OWORD *)(a5 + 56) = *(_OWORD *)&v103[1];
    *(_QWORD *)(a5 + 72) = v103[3];
    memset(&v103[1], 0, 24);
    buf = (void (**)(DSP_Host_Types::NegotiateResponse *__hidden))&v102;
    std::vector<MutationItinerary::Device>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(*(_QWORD **)&v101[8]);
    HALS_IOContextHostedDSP::DSPStreamInstance::CreateRequest((DSP_Host_Types::ConfigurationChangeRequest *)&buf, *(_DWORD *)(a1 + 12), 1, a2, a3, (unsigned __int8 *)&v94);
    DSP_Host_Types::NegotiateRequest::NegotiateRequest((DSP_Host_Types::NegotiateRequest *)v100, (const DSP_Host_Types::ConfigurationChangeRequest *)&buf);
    buf = &off_1E699D0D8;
    __p[0] = v99;
    std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)&v98[3]);
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v98);
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&buf_8[16]);
    buf = (void (**)(DSP_Host_Types::NegotiateResponse *__hidden))off_1E699D128;
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf_8);
    if ((v6 & 2) != 0)
    {
      (*(void (**)(void (***__return_ptr)(DSP_Host_Types::NegotiateResponse *__hidden), _QWORD, uint8_t *))(**(_QWORD **)(a1 + 136) + 16))(&buf, *(_QWORD *)(a1 + 136), v100);
      p_buf = (void **)&buf;
      if (MutationItinerary::LoadFromNegotiateResponse_util((const __CFString ***)a5, (const DSP_Host_Types::NegotiateResponse *)&buf, 0))
      {
        v35 = 0;
      }
      else
      {
        v35 = 1685287013;
      }
      buf = &off_1E699E820;
      __p[0] = &v98[3];
      std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = v98;
      std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = &buf_8[16];
      std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      buf = (void (**)(DSP_Host_Types::NegotiateResponse *__hidden))off_1E699E860;
    }
    else
    {
      v35 = 1685287013;
      if ((v6 & 1) != 0 && v104[0] == v104[1])
        goto LABEL_117;
      v36 = DSP_Host_Types::ConfigurationChangeRequest::util_compare_request((unsigned __int8 **)(a1 + 544), (unsigned __int8 **)v100, 1);
      v37 = v36;
      if (v36 >= 0x20)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v36);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
        v47 = *(std::__shared_weak_count **)buf_8;
        v48 = *buf;
        if (*(_QWORD *)buf_8)
        {
          v49 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
        {
          v76 = pthread_self();
          v77 = pthread_mach_thread_np(v76);
          LODWORD(buf) = 67109634;
          HIDWORD(buf) = v77;
          *(_WORD *)buf_8 = 2080;
          *(_QWORD *)&buf_8[2] = "HALS_IOContextHostedDSP.cpp";
          *(_WORD *)&buf_8[10] = 1024;
          *(_DWORD *)&buf_8[12] = 204;
          _os_log_debug_impl(&dword_1B57BA000, v48, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] POLICY: Suppressing negotiate, new request is identical to last.", (uint8_t *)&buf, 0x18u);
        }
        if (*(_BYTE *)(a1 + 1224))
          v35 = 1685287789;
        else
          v35 = 1685287013;
        goto LABEL_117;
      }
      v38 = *(_QWORD *)(a1 + 336);
      if (!v38)
        goto LABEL_140;
      v39 = (unsigned __int8 *)(v38 + 77);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(0, v39));
      if ((v40 & 1) != 0)
      {
        v51 = 1;
      }
      else
      {
LABEL_140:
        if (*(_BYTE *)(a1 + 1224))
          v41 = (v36 & 0xF) == 15;
        else
          v41 = 0;
        if (v41)
        {
          v36 = MutationItinerary::AreChangesReconciled((MutationItinerary *)(a1 + 1224), (const DSP_Host_Types::ConfigurationChangeRequest *)v100, 0);
          if ((_DWORD)v36)
          {
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v36);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
            v42 = *(std::__shared_weak_count **)buf_8;
            v43 = *buf;
            if (*(_QWORD *)buf_8)
            {
              v44 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
              do
                v45 = __ldaxr(v44);
              while (__stlxr(v45 - 1, v44));
              if (!v45)
              {
                ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                std::__shared_weak_count::__release_weak(v42);
              }
            }
            if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
            {
              v86 = pthread_self();
              v87 = pthread_mach_thread_np(v86);
              DSP_Host_Types::ConfigurationChangeRequest::debug_stringify_compare_result(__p, v37);
              v88 = v90 >= 0 ? __p : (void **)__p[0];
              LODWORD(buf) = 67109890;
              HIDWORD(buf) = v87;
              *(_WORD *)buf_8 = 2080;
              *(_QWORD *)&buf_8[2] = "HALS_IOContextHostedDSP.cpp";
              *(_WORD *)&buf_8[10] = 1024;
              *(_DWORD *)&buf_8[12] = 219;
              *(_WORD *)&buf_8[16] = 2080;
              *(_QWORD *)&buf_8[18] = v88;
              _os_log_debug_impl(&dword_1B57BA000, v43, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] POLICY: Suppressing negotiate, new request is the resolution of DSP changes: %s", (uint8_t *)&buf, 0x22u);
              if (v90 < 0)
                operator delete(__p[0]);
            }
            v35 = 1685287789;
            goto LABEL_117;
          }
        }
        v51 = (v37 & 4) != 0 && (v37 & 8) == 0;
      }
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v36);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
      v53 = *(std::__shared_weak_count **)buf_8;
      v54 = *buf;
      if (*(_QWORD *)buf_8)
      {
        v55 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      v57 = os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG);
      if (v57)
      {
        v78 = pthread_self();
        v79 = pthread_mach_thread_np(v78);
        DSP_Host_Types::ConfigurationChangeRequest::debug_stringify_compare_result(__p, v37);
        v80 = "no";
        if (v51)
          v80 = "require";
        LODWORD(buf) = 67110146;
        if (v90 >= 0)
          v81 = __p;
        else
          v81 = (void **)__p[0];
        HIDWORD(buf) = v79;
        *(_WORD *)buf_8 = 2080;
        *(_QWORD *)&buf_8[2] = "HALS_IOContextHostedDSP.cpp";
        *(_WORD *)&buf_8[10] = 1024;
        *(_DWORD *)&buf_8[12] = 231;
        *(_WORD *)&buf_8[16] = 2080;
        *(_QWORD *)&buf_8[18] = v80;
        *(_WORD *)&buf_8[26] = 2080;
        *(_QWORD *)&buf_8[28] = v81;
        _os_log_debug_impl(&dword_1B57BA000, v54, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] POLICY: New negotiate request due to configuration changes, %s rebuild: %s", (uint8_t *)&buf, 0x2Cu);
        if (v90 < 0)
          operator delete(__p[0]);
      }
      if ((v94 & 1) == 0)
      {
        if (!*(_BYTE *)(a1 + 1224))
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v57);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
          v68 = *(std::__shared_weak_count **)buf_8;
          v69 = *buf;
          if (*(_QWORD *)buf_8)
          {
            v70 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 - 1, v70));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
          }
          if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
          {
            v72 = pthread_self();
            v73 = pthread_mach_thread_np(v72);
            LODWORD(buf) = 67109634;
            HIDWORD(buf) = v73;
            *(_WORD *)buf_8 = 2080;
            *(_QWORD *)&buf_8[2] = "HALS_IOContextHostedDSP.cpp";
            *(_WORD *)&buf_8[10] = 1024;
            *(_DWORD *)&buf_8[12] = 241;
            _os_log_debug_impl(&dword_1B57BA000, v69, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] POLICY: Deactivation requested with no previous activation, ignoring.", (uint8_t *)&buf, 0x18u);
          }
          goto LABEL_117;
        }
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v57);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
        v58 = *(std::__shared_weak_count **)buf_8;
        v59 = *buf;
        if (*(_QWORD *)buf_8)
        {
          v60 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
        {
          v84 = pthread_self();
          v85 = pthread_mach_thread_np(v84);
          LODWORD(buf) = 67109634;
          HIDWORD(buf) = v85;
          *(_WORD *)buf_8 = 2080;
          *(_QWORD *)&buf_8[2] = "HALS_IOContextHostedDSP.cpp";
          *(_WORD *)&buf_8[10] = 1024;
          *(_DWORD *)&buf_8[12] = 236;
          _os_log_debug_impl(&dword_1B57BA000, v59, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] POLICY: Deactivation requested but with a different context configuration, ignoring, using previous config.", (uint8_t *)&buf, 0x18u);
        }
        DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::operator=((uint64_t)v100, a1 + 544);
        WORD4(v102) = 256;
      }
      (*(void (**)(void **__return_ptr, _QWORD, uint8_t *))(**(_QWORD **)(a1 + 136) + 24))(__p, *(_QWORD *)(a1 + 136), v100);
      v62 = MutationItinerary::LoadFromNegotiateResponse_util((const __CFString ***)a5, (const DSP_Host_Types::NegotiateResponse *)__p, v51);
      if (v62)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v62);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
        v63 = *(std::__shared_weak_count **)buf_8;
        v64 = *buf;
        if (*(_QWORD *)buf_8)
        {
          v65 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
        {
          v82 = pthread_self();
          v83 = pthread_mach_thread_np(v82);
          LODWORD(buf) = 67109634;
          HIDWORD(buf) = v83;
          *(_WORD *)buf_8 = 2080;
          *(_QWORD *)&buf_8[2] = "HALS_IOContextHostedDSP.cpp";
          *(_WORD *)&buf_8[10] = 1024;
          *(_DWORD *)&buf_8[12] = 254;
          _os_log_debug_impl(&dword_1B57BA000, v64, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] POLICY: Negotiate allowed, and succeeded.", (uint8_t *)&buf, 0x18u);
        }
        DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::operator=(a1 + 544, (uint64_t)v100);
        *(_WORD *)(a1 + 1224) = *(_WORD *)a5;
        if (a1 + 1224 != a5)
        {
          std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__tree_node<std::__value_type<applesauce::CF::StringRef,BOOL>,void *> *,long>>(a1 + 1232, *(_QWORD **)(a5 + 8), (_QWORD *)(a5 + 16));
          std::vector<MutationItinerary::Device>::__assign_with_size[abi:ne180100]<MutationItinerary::Device*,MutationItinerary::Device*>(a1 + 1256, *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a5 + 40) - *(_QWORD *)(a5 + 32)) >> 4));
          std::vector<CAStreamBasicDescription>::__assign_with_size[abi:ne180100]<CAStreamBasicDescription*,CAStreamBasicDescription*>((_QWORD *)(a1 + 1280), *(char **)(a5 + 56), *(char **)(a5 + 64), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a5 + 64) - *(_QWORD *)(a5 + 56)) >> 3));
        }
        MutationItinerary::AreChangesReconciled((MutationItinerary *)(a1 + 1224), (const DSP_Host_Types::ConfigurationChangeRequest *)v100, (int *)(a1 + 1304));
        DSP_Host_Types::ConfigurationChangeRequest::ConfigurationChangeRequest((DSP_Host_Types::ConfigurationChangeRequest *)&buf);
        buf = &off_1E699A370;
        DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::operator=(a1 + 1312, (uint64_t)&buf);
        v95 = (void **)v99;
        buf = &off_1E699D0D8;
        std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v95);
        DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)&v98[3]);
        DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v98);
        DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&buf_8[16]);
        buf = (void (**)(DSP_Host_Types::NegotiateResponse *__hidden))off_1E699D128;
        std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf_8);
        v35 = 0;
        *(_DWORD *)(a1 + 312) = 0;
      }
      __p[0] = &off_1E699E820;
      p_buf = __p;
      buf = (void (**)(DSP_Host_Types::NegotiateResponse *__hidden))&v93;
      std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      buf = (void (**)(DSP_Host_Types::NegotiateResponse *__hidden))&v92;
      std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      buf = (void (**)(DSP_Host_Types::NegotiateResponse *__hidden))&v91;
      std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      __p[0] = off_1E699E860;
    }
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(p_buf + 1));
LABEL_117:
    *(_QWORD *)v100 = &off_1E699D0D8;
    buf = (void (**)(DSP_Host_Types::NegotiateResponse *__hidden))v104;
    std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)&v103[3]);
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v103);
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&v101[16]);
    *(_QWORD *)v100 = off_1E699D128;
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v101);
    return v35;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v100, "com.apple.coreaudio", "AMCP");
  v15 = *(std::__shared_weak_count **)v101;
  v16 = **(NSObject ***)v100;
  if (*(_QWORD *)v101)
  {
    v17 = (unint64_t *)(*(_QWORD *)v101 + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    v74 = pthread_self();
    v75 = pthread_mach_thread_np(v74);
    *(_DWORD *)v100 = 67109634;
    *(_DWORD *)&v100[4] = v75;
    *(_WORD *)v101 = 2080;
    *(_QWORD *)&v101[2] = "HALS_IOContextHostedDSP.cpp";
    *(_WORD *)&v101[10] = 1024;
    *(_DWORD *)&v101[12] = 157;
    _os_log_debug_impl(&dword_1B57BA000, v16, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] Skip negotiation for client-visible common reference stream.", v100, 0x18u);
  }
  HALS_IOContextHostedDSP::DSPStreamInstance::CreateRequest((DSP_Host_Types::ConfigurationChangeRequest *)&buf, *(_DWORD *)(a1 + 12), 1, a2, a3, (unsigned __int8 *)&v94);
  DSP_Host_Types::NegotiateRequest::NegotiateRequest((DSP_Host_Types::NegotiateRequest *)v100, (const DSP_Host_Types::ConfigurationChangeRequest *)&buf);
  buf = &off_1E699D0D8;
  __p[0] = v99;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)&v98[3]);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v98);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&buf_8[16]);
  buf = (void (**)(DSP_Host_Types::NegotiateResponse *__hidden))off_1E699D128;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf_8);
  DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::operator=(a1 + 544, (uint64_t)v100);
  buf = 0;
  memset(&buf_8[8], 0, 32);
  *(_QWORD *)buf_8 = &buf_8[8];
  memset(v98, 0, 32);
  *(_WORD *)(a1 + 1224) = 0;
  v19 = a1 + 1240;
  std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(*(_QWORD **)(a1 + 1240));
  v20 = *(_QWORD *)&buf_8[8];
  *(_QWORD *)(a1 + 1232) = *(_QWORD *)buf_8;
  *(_QWORD *)(a1 + 1240) = v20;
  v21 = *(_QWORD *)&buf_8[16];
  *(_QWORD *)(a1 + 1248) = *(_QWORD *)&buf_8[16];
  if (v21)
  {
    *(_QWORD *)(v20 + 16) = v19;
    *(_QWORD *)buf_8 = &buf_8[8];
    *(_QWORD *)&buf_8[8] = 0;
    *(_QWORD *)&buf_8[16] = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 1232) = v19;
  }
  std::vector<MutationItinerary::Device>::__vdeallocate((void **)(a1 + 1256));
  *(_OWORD *)(a1 + 1256) = *(_OWORD *)&buf_8[24];
  *(_QWORD *)(a1 + 1272) = v98[0];
  *(_QWORD *)&buf_8[32] = 0;
  v98[0] = 0;
  *(_QWORD *)&buf_8[24] = 0;
  v52 = *(void **)(a1 + 1280);
  if (v52)
  {
    *(_QWORD *)(a1 + 1288) = v52;
    operator delete(v52);
    *(_QWORD *)(a1 + 1280) = 0;
    *(_QWORD *)(a1 + 1288) = 0;
    *(_QWORD *)(a1 + 1296) = 0;
  }
  *(_OWORD *)(a1 + 1280) = *(_OWORD *)&v98[1];
  *(_QWORD *)(a1 + 1296) = v98[3];
  memset(&v98[1], 0, 24);
  __p[0] = &buf_8[24];
  std::vector<MutationItinerary::Device>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(*(_QWORD **)&buf_8[8]);
  *(_DWORD *)(a1 + 312) = 0;
  DSP_Host_Types::ConfigurationChangeRequest::debug_log_device_summary((DSP_Host_Types::ConfigurationChangeRequest *)(a1 + 544), "Client Reference Stream");
  *(_QWORD *)v100 = &off_1E699D0D8;
  buf = (void (**)(DSP_Host_Types::NegotiateResponse *__hidden))v104;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)&v103[3]);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v103);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&v101[16]);
  *(_QWORD *)v100 = off_1E699D128;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v101);
  return 1685283698;
}

void sub_1B5BAE380(_Unwind_Exception *a1)
{
  DSP_Host_Types::NegotiateRequest::~NegotiateRequest((DSP_Host_Types::NegotiateRequest *)&STACK[0x330]);
  _Unwind_Resume(a1);
}

void HALS_IOContextHostedDSP::DSPStreamInstance::CreateRequest(DSP_Host_Types::ConfigurationChangeRequest *a1, int a2, char a3, uint64_t *a4, int a5, unsigned __int8 *a6)
{
  unsigned int v11;
  std::string::size_type *p_size;
  uint64_t *v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  DSP_Host_OffloadDictionary *v18;
  const __CFDictionary *v19;
  BOOL has_all_id;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  BOOL v26;
  uint64_t *v27;
  BOOL v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  char *v40;
  __int128 v41;
  char *v42;
  uint64_t *v43;
  uint64_t *v44;
  HALS_ObjectMap *v45;
  HALS_Object *v46;
  BOOL v47;
  int v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  char *v55;
  __int128 v56;
  char *v57;
  uint64_t *v58;
  uint64_t *v59;
  unsigned int *v60;
  unsigned int *v61;
  HALS_ObjectMap *v62;
  std::string *p_cf;
  uint64_t v64;
  float v65;
  float v66;
  uint64_t v67;
  double v68;
  double v69;
  double v70;
  double v71;
  char *v72;
  const void *v73;
  const void *v74;
  unsigned int *v75;
  CFTypeRef v76;
  uint64_t DataSourceType;
  uint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *size;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 *first;
  std::__split_buffer<std::string>::pointer begin;
  char v91;
  uint64_t v92;
  char v93;
  std::string::size_type v94;
  __int128 *v95;
  uint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *p_shared_owners;
  std::string *v100;
  _QWORD *words;
  uint64_t v102;
  std::string *v103;
  _QWORD *p_v;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t shared_weak_owners;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  void (***v113)(_QWORD);
  void (***v114)(_QWORD);
  void (**v115)(_QWORD);
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  std::__shared_weak_count_vtbl *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t shared_owners;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (***v127)(_QWORD);
  void (***v128)(_QWORD);
  void (**v129)(_QWORD);
  unint64_t v130;
  _BOOL4 v131;
  char *v132;
  char *v133;
  char end_high;
  std::__split_buffer<std::string>::pointer v135;
  std::string::size_type v136;
  int v137;
  uint64_t v138;
  std::__split_buffer<std::string> *v139;
  int v140;
  int first_low;
  int v142;
  int v143;
  char v144;
  BOOL v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  unsigned int *v149;
  unsigned int *i;
  std::vector<std::string>::pointer end;
  __int128 v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  std::string *v157;
  __int128 v158;
  std::string *v159;
  std::runtime_error *exception;
  std::runtime_error *v161;
  _BYTE *v162;
  unsigned int *v164;
  HALS_ObjectMap *v165;
  char *__p;
  char *v167;
  std::string::size_type v168;
  char v169;
  void **v170;
  _QWORD v171[5];
  __int16 v172;
  __int16 v173;
  _QWORD **v174;
  _QWORD *v175[2];
  uint64_t v176;
  _DWORD v177[43];
  char v178;
  int v179;
  char v180;
  uint64_t v181;
  std::vector<std::string> v182;
  int v183;
  char v184;
  uint64_t v185;
  char *v186[3];
  int v187;
  char v188;
  uint64_t *v189;
  unsigned int *v190;
  unsigned int *v191;
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  std::string cf;
  const __CFString *v196;
  int v197;
  CFTypeRef v198;
  _BYTE buf[20];
  char v200;
  std::__split_buffer<std::string> __v;
  uint64_t v202;

  v202 = *MEMORY[0x1E0C80C00];
  DSP_Host_Types::ConfigurationChangeRequest::ConfigurationChangeRequest((DSP_Host_Types::ConfigurationChangeRequest *)v171);
  v171[0] = &off_1E6972BB0;
  v187 = a2;
  v188 = a3;
  v189 = a4;
  v190 = 0;
  v192 = 0;
  v191 = 0;
  v162 = a6;
  v11 = *a6;
  v172 = v11 & 1 | 0x100;
  v173 = (v11 >> 1) & 1 | 0x100;
  v177[42] = a5;
  v178 = 1;
  v179 = 4096;
  v180 = 1;
  *(_OWORD *)&cf.__r_.__value_.__r.__words[1] = 0uLL;
  cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&cf.__r_.__value_.__l.__size_;
  p_size = &cf.__r_.__value_.__l.__size_;
  v13 = (uint64_t *)a4[7];
  if (v13 != a4 + 8)
  {
    while (1)
    {
      v14 = *((_DWORD *)v13 + 7);
      if (v14 <= 9)
      {
        if (((1 << v14) & 0x3CC) != 0)
        {
          if (v187 != 1768845428)
            goto LABEL_11;
          goto LABEL_10;
        }
        if (((1 << v14) & 0x30) != 0)
        {
          if (v187 != 1869968496)
            goto LABEL_11;
LABEL_10:
          std::__tree<DSP_Host_Types::AudioProcessingType>::__emplace_unique_key_args<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::AudioProcessingType const&>((uint64_t **)&cf, v14, *((_DWORD *)v13 + 7));
          goto LABEL_11;
        }
        if (v14 == 1)
          goto LABEL_10;
      }
LABEL_11:
      v15 = (uint64_t *)v13[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (uint64_t *)v13[2];
          v28 = *v16 == (_QWORD)v13;
          v13 = v16;
        }
        while (!v28);
      }
      v13 = v16;
      if (v16 == a4 + 8)
      {
        p_size = (std::string::size_type *)cf.__r_.__value_.__r.__words[0];
        break;
      }
    }
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::__assign_multi<std::__tree_const_iterator<DSP_Host_Types::AudioProcessingType,std::__tree_node<DSP_Host_Types::AudioProcessingType,void *> *,long>>((uint64_t)&v174, p_size, &cf.__r_.__value_.__l.__size_);
  HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&__v, v189);
  if (v187 == 1869968496 || v187 == 1768845428)
  {
    DSP_Host_Types::FormatDescription::operator=((uint64_t)&v176, (uint64_t)&__v);
    DSP_Host_Types::FormatDescription::operator=((uint64_t)v177, (uint64_t)&__v);
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "HALS_DSPRequest.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 94;
    _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  [hal_dsp] Unrecognized scope applied to hosted DSP.", buf, 0x12u);
  }
  v17 = v189;
  if (*((_BYTE *)v189 + 136))
  {
    DSP_Host_Types::AudioChannelConfiguration::operator=((uint64_t)&v181, (_DWORD *)v189[14]);
    v17 = v189;
  }
  if (*((_BYTE *)v17 + 100))
  {
    v183 = *((_DWORD *)v17 + 24);
    v184 = 1;
  }
  v18 = (DSP_Host_OffloadDictionary *)v17[10];
  if (v18)
  {
    v19 = (const __CFDictionary *)*((_QWORD *)v18 + 2);
    if (v19)
    {
      if (CFDictionaryGetCount(v19))
      {
        has_all_id = DSP_Host_OffloadDictionary::has_all_id(v18);
        v17 = v189;
        if (!has_all_id)
        {
          DSP_Host_OffloadDictionary::deep_copy((DSP_Host_OffloadDictionary *)buf, v189[10]);
          std::shared_ptr<DSP_Host_OffloadDictionary>::operator=[abi:ne180100]<DSP_Host_OffloadDictionary,std::default_delete<DSP_Host_OffloadDictionary>,void>(&v185, buf);
          if (*(_QWORD *)buf)
            std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](*(uint64_t *)buf);
          goto LABEL_47;
        }
      }
      else
      {
        v17 = v189;
      }
    }
  }
  v23 = v17[8];
  v21 = v17 + 8;
  v22 = v23;
  if (v23)
  {
    v24 = v21;
    do
    {
      v25 = *(_DWORD *)(v22 + 28);
      v26 = v25 >= 8;
      if (v25 >= 8)
        v27 = (uint64_t *)v22;
      else
        v27 = (uint64_t *)(v22 + 8);
      if (v26)
        v24 = (uint64_t *)v22;
      v22 = *v27;
    }
    while (*v27);
    if (v24 != v21 && *((_DWORD *)v24 + 7) <= 8u && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "HALS_DSPRequest.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 109;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  [hal_dsp][offload] DSP Offloading specified but no offload information supplied.", buf, 0x12u);
    }
  }
LABEL_47:
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)cf.__r_.__value_.__l.__size_);
  if (v188)
    v28 = v187 == 1768845428;
  else
    v28 = 0;
  v29 = v28;
  v30 = v189;
  v31 = *v189;
  if (v189[1] != *v189)
  {
    __p = 0;
    v167 = 0;
    v32 = 0;
    v33 = 0;
    do
    {
      v34 = *(_DWORD *)(v31 + (v33 << 7) + 8);
      if ((unint64_t)v167 >= v32)
      {
        v35 = 0xAAAAAAAAAAAAAAABLL * ((v167 - __p) >> 3) + 1;
        if (v35 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v32 - (_QWORD)__p) >> 3) > v35)
          v35 = 0x5555555555555556 * ((uint64_t)(v32 - (_QWORD)__p) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - (_QWORD)__p) >> 3) >= 0x555555555555555)
          v36 = 0xAAAAAAAAAAAAAAALL;
        else
          v36 = v35;
        if (v36)
          v36 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v36);
        else
          v37 = 0;
        v38 = v167;
        v39 = v36 + 8 * ((v167 - __p) >> 3);
        *(_DWORD *)v39 = v34;
        *(_QWORD *)(v39 + 8) = v33;
        *(_BYTE *)(v39 + 16) = 1;
        if (v167 == __p)
        {
          v42 = v167;
          __p = (char *)(v36 + 8 * ((v167 - __p) >> 3));
        }
        else
        {
          v40 = (char *)(v36 + 8 * ((v167 - __p) >> 3));
          do
          {
            v41 = *(_OWORD *)(v38 - 24);
            *((_QWORD *)v40 - 1) = *((_QWORD *)v38 - 1);
            *(_OWORD *)(v40 - 24) = v41;
            v40 -= 24;
            v38 -= 24;
          }
          while (v38 != __p);
          v42 = __p;
          __p = v40;
        }
        v32 = v36 + 24 * v37;
        v167 = (char *)(v39 + 24);
        if (v42)
          operator delete(v42);
      }
      else
      {
        *(_DWORD *)v167 = v34;
        *((_QWORD *)v167 + 1) = v33;
        v167[16] = 1;
        *(_DWORD *)(v167 + 17) = __v.__first_;
        *((_DWORD *)v167 + 5) = *(_DWORD *)((char *)&__v.__first_ + 3);
        v167 += 24;
      }
      ++v33;
      v30 = v189;
      v31 = *v189;
    }
    while (v33 < (v189[1] - *v189) >> 7);
    if (!v29)
      goto LABEL_112;
LABEL_77:
    v43 = (uint64_t *)v30[3];
    v44 = v30 + 4;
    if (v43 != v30 + 4)
    {
      do
      {
        v45 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)v43 + 7));
        if (v45)
          v47 = *((_DWORD *)v45 + 5) == 1633773415;
        else
          v47 = 0;
        HALS_ObjectMap::ReleaseObject(v45, v46);
        if (!v47)
        {
          v48 = *((_DWORD *)v43 + 7);
          v49 = v167;
          if (__p != v167)
          {
            v49 = __p;
            while (*(_DWORD *)v49 != v48)
            {
              v49 += 24;
              if (v49 == v167)
                goto LABEL_88;
            }
          }
          if (v167 == v49)
          {
LABEL_88:
            if ((unint64_t)v167 >= v32)
            {
              v50 = 0xAAAAAAAAAAAAAAABLL * ((v167 - __p) >> 3) + 1;
              if (v50 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((uint64_t)(v32 - (_QWORD)__p) >> 3) > v50)
                v50 = 0x5555555555555556 * ((uint64_t)(v32 - (_QWORD)__p) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - (_QWORD)__p) >> 3) >= 0x555555555555555)
                v51 = 0xAAAAAAAAAAAAAAALL;
              else
                v51 = v50;
              if (v51)
                v51 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v51);
              else
                v52 = 0;
              v53 = v167;
              v54 = v51 + 8 * ((v167 - __p) >> 3);
              *(_DWORD *)v54 = v48;
              *(_BYTE *)(v54 + 8) = 0;
              *(_BYTE *)(v54 + 16) = 0;
              if (__p == v167)
              {
                v57 = v167;
                __p = (char *)(v51 + 8 * ((v167 - __p) >> 3));
              }
              else
              {
                v55 = (char *)(v51 + 8 * ((v167 - __p) >> 3));
                do
                {
                  v56 = *(_OWORD *)(v53 - 24);
                  *((_QWORD *)v55 - 1) = *((_QWORD *)v53 - 1);
                  *(_OWORD *)(v55 - 24) = v56;
                  v55 -= 24;
                  v53 -= 24;
                }
                while (v53 != __p);
                v57 = __p;
                __p = v55;
              }
              v32 = v51 + 24 * v52;
              v167 = (char *)(v54 + 24);
              if (v57)
                operator delete(v57);
            }
            else
            {
              *(_DWORD *)v167 = v48;
              v167[8] = 0;
              v167[16] = 0;
              v167 += 24;
            }
          }
        }
        v58 = (uint64_t *)v43[1];
        if (v58)
        {
          do
          {
            v59 = v58;
            v58 = (uint64_t *)*v58;
          }
          while (v58);
        }
        else
        {
          do
          {
            v59 = (uint64_t *)v43[2];
            v28 = *v59 == (_QWORD)v43;
            v43 = v59;
          }
          while (!v28);
        }
        v43 = v59;
      }
      while (v59 != v44);
    }
    goto LABEL_112;
  }
  __p = 0;
  v167 = 0;
  v32 = 0;
  if (v29)
    goto LABEL_77;
LABEL_112:
  v60 = (unsigned int *)v167;
  if (__p == v167)
    goto LABEL_313;
  v61 = (unsigned int *)__p;
  do
  {
    v62 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v61);
    if (!v62)
      goto LABEL_310;
    v165 = v62;
    *(_QWORD *)buf = v62;
    buf[16] = 0;
    v200 = 0;
    if (*((_BYTE *)v61 + 16))
      v64 = *v189 + (*((_QWORD *)v61 + 1) << 7);
    else
      v64 = 0;
    *(_QWORD *)&buf[8] = v64;
    if (v187 == 1768845428)
    {
      HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&__v, v189);
      v65 = *(double *)&__v.__first_;
      v66 = v65;
      v67 = 0x100000000;
      v62 = *(HALS_ObjectMap **)buf;
    }
    else
    {
      v66 = 0.0;
      v67 = 0;
    }
    v200 = BYTE4(v67);
    *(_DWORD *)&buf[16] = v67 | LODWORD(v66);
    v68 = (*(double (**)(HALS_ObjectMap *))(*(_QWORD *)v62 + 264))(v62);
    v69 = v68;
    if (v200)
    {
      v70 = *(float *)&buf[16];
      v71 = *(float *)&buf[16] / v68;
    }
    else
    {
      v71 = 1.0;
      v70 = v68;
    }
    v72 = (char *)operator new(0x310uLL);
    *((_QWORD *)v72 + 1) = 0;
    *((_QWORD *)v72 + 2) = 0;
    *(_QWORD *)v72 = &off_1E6994E20;
    bzero(v72 + 32, 0x2F0uLL);
    *((_QWORD *)v72 + 3) = &off_1E6994850;
    std::string::basic_string[abi:ne180100]<0>(&__v, "device uid");
    DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)v72 + 6, (const UInt8 *)&__v);
    v72[64] = 0;
    *((_QWORD *)v72 + 6) = off_1E6994AA8;
    v72[88] = 0;
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    std::string::basic_string[abi:ne180100]<0>(&__v, "device model uid");
    DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)v72 + 12, (const UInt8 *)&__v);
    v72[112] = 0;
    *((_QWORD *)v72 + 12) = off_1E6994AA8;
    v72[136] = 0;
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    std::string::basic_string[abi:ne180100]<0>(&__v, "is default device");
    DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)v72 + 18, (const UInt8 *)&__v);
    *((_QWORD *)v72 + 18) = &off_1E699D180;
    *((_WORD *)v72 + 80) = 0;
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    std::string::basic_string[abi:ne180100]<0>(&__v, "transport type");
    DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)v72 + 21, (const UInt8 *)&__v);
    *((_QWORD *)v72 + 21) = &off_1E699E950;
    v72[184] = 0;
    v72[188] = 0;
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    std::string::basic_string[abi:ne180100]<0>(&__v, "data source type in");
    DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)v72 + 24, (const UInt8 *)&__v);
    *((_QWORD *)v72 + 24) = &off_1E699E950;
    v72[208] = 0;
    v72[212] = 0;
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    std::string::basic_string[abi:ne180100]<0>(&__v, "data source type out");
    DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)v72 + 27, (const UInt8 *)&__v);
    *((_QWORD *)v72 + 27) = &off_1E699E950;
    v72[232] = 0;
    v72[236] = 0;
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    std::string::basic_string[abi:ne180100]<0>(&__v, "sample rate");
    DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)v72 + 30, (const UInt8 *)&__v);
    *((_QWORD *)v72 + 30) = &off_1E699D308;
    v72[256] = 0;
    v72[264] = 0;
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    std::string::basic_string[abi:ne180100]<0>(&__v, "hardware sample rate");
    DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)v72 + 34, (const UInt8 *)&__v);
    *((_QWORD *)v72 + 34) = &off_1E699D308;
    v72[288] = 0;
    v72[296] = 0;
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    std::string::basic_string[abi:ne180100]<0>(&__v, "latency in samples");
    DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)v72 + 38, (const UInt8 *)&__v);
    *((_QWORD *)v72 + 38) = &off_1E699E950;
    v72[320] = 0;
    v72[324] = 0;
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    std::string::basic_string[abi:ne180100]<0>(&__v, "latency out samples");
    DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)v72 + 41, (const UInt8 *)&__v);
    *((_QWORD *)v72 + 41) = &off_1E699E950;
    v72[344] = 0;
    v72[348] = 0;
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    std::string::basic_string[abi:ne180100]<0>(&__v, "safety offset in samples");
    DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)v72 + 44, (const UInt8 *)&__v);
    *((_QWORD *)v72 + 44) = &off_1E699E950;
    v72[368] = 0;
    v72[372] = 0;
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    std::string::basic_string[abi:ne180100]<0>(&__v, "safety offset out samples");
    DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)v72 + 47, (const UInt8 *)&__v);
    *((_QWORD *)v72 + 47) = &off_1E699E950;
    v72[392] = 0;
    v72[396] = 0;
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    std::string::basic_string[abi:ne180100]<0>(&__v, "bluetooth device category");
    DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)v72 + 50, (const UInt8 *)&__v);
    *((_QWORD *)v72 + 50) = &off_1E699E950;
    v72[416] = 0;
    v72[420] = 0;
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    v164 = v61;
    std::string::basic_string[abi:ne180100]<0>(&__v, "bluetooth ecnr enabled");
    DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)v72 + 53, (const UInt8 *)&__v);
    *((_QWORD *)v72 + 53) = &off_1E699D180;
    *((_WORD *)v72 + 220) = 0;
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    DSP_Host_Types::AudioChannelConfiguration::AudioChannelConfiguration((DSP_Host_Types::AudioChannelConfiguration *)(v72 + 448), "output preferred layout");
    DSP_Host_Types::AudioChannelConfiguration::AudioChannelConfiguration((DSP_Host_Types::AudioChannelConfiguration *)(v72 + 568), "output default layout");
    *((_OWORD *)v72 + 47) = 0u;
    *((_OWORD *)v72 + 48) = 0u;
    *((_OWORD *)v72 + 45) = 0u;
    *((_OWORD *)v72 + 46) = 0u;
    *((_OWORD *)v72 + 43) = 0u;
    *((_OWORD *)v72 + 44) = 0u;
    *(_QWORD *)&v193 = v72 + 24;
    *((_QWORD *)&v193 + 1) = v72;
    v73 = (const void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)buf + 200))(*(_QWORD *)buf);
    v74 = v73;
    if (v73)
      CFRetain(v73);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v74);
    if (!cf.__r_.__value_.__r.__words[0])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)&__v, (const __CFString *)cf.__r_.__value_.__l.__data_);
    std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>((std::string *)(v72 + 64), (const std::string *)&__v);
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    if (cf.__r_.__value_.__r.__words[0])
      CFRelease(cf.__r_.__value_.__l.__data_);
    v75 = *(unsigned int **)buf;
    std::string::basic_string[abi:ne180100]<0>(&cf, "");
    DWORD2(v194) = 0;
    *(_QWORD *)&v194 = *(_QWORD *)"diumbolg";
    if ((*(unsigned int (**)(unsigned int *, _QWORD, __int128 *, _QWORD))(*(_QWORD *)v75 + 88))(v75, v75[4], &v194, 0))
    {
      v198 = 0;
      v197 = 8;
      (*(void (**)(unsigned int *, _QWORD, __int128 *, uint64_t, int *, CFTypeRef *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v75 + 112))(v75, v75[4], &v194, 8, &v197, &v198, 0, 0, 0);
      v76 = v198;
      if (v198)
      {
        CFRetain(v198);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v196, v76);
        if (!v196)
        {
          v161 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v161, "Could not construct");
          __cxa_throw(v161, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)&__v, v196);
        if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(cf.__r_.__value_.__l.__data_);
        *(_OWORD *)&cf.__r_.__value_.__l.__data_ = *(_OWORD *)&__v.__first_;
        cf.__r_.__value_.__r.__words[2] = (std::string::size_type)__v.__end_;
        HIBYTE(__v.__end_) = 0;
        LOBYTE(__v.__first_) = 0;
        if (v196)
          CFRelease(v196);
        CFRelease(v198);
      }
    }
    std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>((std::string *)(v72 + 112), &cf);
    if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cf.__r_.__value_.__l.__data_);
    *((double *)v72 + 32) = v70;
    v72[264] = 1;
    *((double *)v72 + 36) = v69;
    v72[296] = 1;
    *((_DWORD *)v72 + 46) = HALS_IODevice::GetTransportType(*(HALS_IODevice **)buf);
    v72[188] = 1;
    DataSourceType = HALS_DSPRequest::GetDataSourceType(*(HALS_DSPRequest **)buf, (const HALS_Device *)0x696E7074);
    *((_DWORD *)v72 + 52) = DataSourceType;
    v72[212] = BYTE4(DataSourceType);
    v78 = HALS_DSPRequest::GetDataSourceType(*(HALS_DSPRequest **)buf, (const HALS_Device *)0x6F757470);
    *((_DWORD *)v72 + 58) = v78;
    v72[236] = BYTE4(v78);
    *((_DWORD *)v72 + 80) = (v71
                                         * (double)(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)buf + 304))(*(_QWORD *)buf, 1));
    v72[324] = 1;
    *((_DWORD *)v72 + 86) = (v71
                                         * (double)(*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)buf
                                                                                                  + 304))(*(_QWORD *)buf, 0));
    v72[348] = 1;
    *((_DWORD *)v72 + 92) = (v71
                                         * (double)(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)buf + 312))(*(_QWORD *)buf, 1));
    v72[372] = 1;
    *((_DWORD *)v72 + 98) = (v71
                                         * (double)(*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)buf
                                                                                                  + 312))(*(_QWORD *)buf, 0));
    v72[396] = 1;
    v194 = 0uLL;
    HALS_System::GetInstance(&cf, 0, (uint64_t *)&v194);
    v79 = *(_QWORD *)(cf.__r_.__value_.__r.__words[0] + 1264);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)v79;
    LODWORD(__v.__begin_) = HALB_Mutex::Lock((HALB_Mutex *)v79);
    LODWORD(v79) = *(_DWORD *)(v79 + 208);
    HALB_Mutex::Locker::~Locker((HALB_Mutex **)&__v);
    *((_WORD *)v72 + 80) = ((_DWORD)v79 == *(_DWORD *)(*(_QWORD *)buf + 16)) | 0x100;
    size = (std::__shared_weak_count *)cf.__r_.__value_.__l.__size_;
    if (cf.__r_.__value_.__l.__size_)
    {
      v81 = (unint64_t *)(cf.__r_.__value_.__l.__size_ + 8);
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v83 = (std::__shared_weak_count *)*((_QWORD *)&v194 + 1);
    if (*((_QWORD *)&v194 + 1))
    {
      v84 = (unint64_t *)(*((_QWORD *)&v194 + 1) + 8);
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    v86 = v193;
    if (!*(_BYTE *)(v193 + 164))
      std::__throw_bad_optional_access[abi:ne180100]();
    if (*(_DWORD *)(v193 + 160) == 1651275109)
    {
      v87 = *(unsigned int *)(*(_QWORD *)buf + 16);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)0x676C6F6265636E72;
      LODWORD(__v.__begin_) = 0;
      *(_WORD *)(v86 + 416) = (*(uint64_t (**)(_QWORD, uint64_t, std::__split_buffer<std::string> *, _QWORD))(**(_QWORD **)buf + 88))(*(_QWORD *)buf, v87, &__v, 0) | 0x100;
      v88 = *(unsigned int *)(*(_QWORD *)buf + 16);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)0x676C6F6264636174;
      LODWORD(__v.__begin_) = 0;
      LODWORD(cf.__r_.__value_.__l.__data_) = 0;
      LODWORD(v198) = 0;
      (*(void (**)(_QWORD, uint64_t, std::__split_buffer<std::string> *, uint64_t, CFTypeRef *, std::string *, _QWORD, _QWORD, _QWORD))(**(_QWORD **)buf + 112))(*(_QWORD *)buf, v88, &__v, 4, &v198, &cf, 0, 0, 0);
      *(_DWORD *)(v86 + 392) = cf.__r_.__value_.__l.__data_;
      *(_BYTE *)(v86 + 396) = 1;
    }
    __v.__first_ = (std::__split_buffer<std::string>::pointer)buf;
    HALS_DSPRequest::CreateDeviceDescription(HALS_DSPRequest::IODeviceInfo const&)const::$_2::operator()(&__v, 1936879204, v86 + 424);
    HALS_DSPRequest::CreateDeviceDescription(HALS_DSPRequest::IODeviceInfo const&)const::$_2::operator()(&__v, 1936876644, v86 + 544);
    if (v187 == 1768845428)
    {
      HALS_DSPRequest::CreateStreamConfiguration((uint64_t)&__v, (uint64_t)v171, (uint64_t)buf, 1768845428);
      first = (__int128 *)__v.__first_;
      begin = __v.__begin_;
      if (__v.__first_ == __v.__begin_)
      {
        v91 = 0;
      }
      else
      {
        v91 = 0;
        do
        {
          std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((char **)(v193 + 664), first);
          if (*(_BYTE *)(*(_QWORD *)first + 44))
            v92 = *(unsigned int *)(*(_QWORD *)first + 40) | 0x100000000;
          else
            v92 = 0;
          if ((_DWORD)v92 == 2)
            v93 = BYTE4(v92);
          else
            v93 = 0;
          v91 |= v93;
          ++first;
        }
        while (first != (__int128 *)begin);
      }
      cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__v;
      std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
    }
    else
    {
      v91 = 0;
    }
    HALS_DSPRequest::CreateStreamConfiguration((uint64_t)&cf, (uint64_t)v171, (uint64_t)buf, 1869968496);
    v94 = cf.__r_.__value_.__l.__size_;
    v95 = (__int128 *)cf.__r_.__value_.__r.__words[0];
    v169 = v91;
    v168 = cf.__r_.__value_.__l.__size_;
    if (cf.__r_.__value_.__r.__words[0] != cf.__r_.__value_.__l.__size_)
    {
      while (1)
      {
        v96 = *(_QWORD *)v95;
        *(_DWORD *)(v96 + 40) = 1;
        *(_BYTE *)(v96 + 44) = 1;
        std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((char **)(v193 + 688), v95);
        if ((v91 & 1) == 0)
          break;
LABEL_267:
        if (++v95 == (__int128 *)v94)
          goto LABEL_268;
      }
      v97 = *(_QWORD *)v95;
      v98 = (std::__shared_weak_count *)operator new(0x180uLL);
      v98->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v98->__shared_owners_;
      v98->__shared_weak_owners_ = 0;
      v98->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6994BE8;
      v98[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E6994678;
      LOBYTE(v98[1].__shared_owners_) = 0;
      LOBYTE(v98[1].__shared_weak_owners_) = 0;
      std::string::basic_string[abi:ne180100]<0>(&__v, "stream semantic");
      DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::StreamSemanticType,DSP_Host_Types::StringLookup_StreamSemantic,unsigned int>::StringifiedKvp(&v98[2].__vftable, (const UInt8 *)&__v);
      if (SHIBYTE(__v.__end_) < 0)
        operator delete(__v.__first_);
      DSP_Host_Types::FormatDescription::FormatDescription((DSP_Host_Types::FormatDescription *)&v98[5].__shared_weak_owners_, "current format");
      std::string::basic_string[abi:ne180100]<0>(&__v, "stream id");
      DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v98[12].__vftable, (const UInt8 *)&__v);
      v98[12].__vftable = (std::__shared_weak_count_vtbl *)off_1E6994AA8;
      LOBYTE(v98[12].__shared_weak_owners_) = 0;
      LOBYTE(v98[13].__shared_weak_owners_) = 0;
      if (SHIBYTE(__v.__end_) < 0)
        operator delete(__v.__first_);
      std::string::basic_string[abi:ne180100]<0>(&__v, "latency samples");
      DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v98[14].__vftable, (const UInt8 *)&__v);
      v98[14].__vftable = (std::__shared_weak_count_vtbl *)&off_1E699E950;
      LOBYTE(v98[14].__shared_weak_owners_) = 0;
      BYTE4(v98[14].__shared_weak_owners_) = 0;
      if (SHIBYTE(__v.__end_) < 0)
        operator delete(__v.__first_);
      v170 = (void **)&v98[15].__vftable;
      v98[15].__vftable = 0;
      v98[15].__shared_owners_ = 0;
      v98[15].__shared_weak_owners_ = 0;
      std::__optional_storage_base<applesauce::CF::StringRef,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<applesauce::CF::StringRef,false> const&>((uint64_t)&v98[1].__shared_owners_, *(CFTypeRef *)(v97 + 8), *(_BYTE *)(v97 + 16));
      DSP_Dictionariable::SingleKvp<unsigned int>::operator=((uint64_t)&v98[2], v97 + 24);
      v100 = *(std::string **)(v97 + 72);
      if (v100)
      {
        if (v100 == (std::string *)(v97 + 48))
        {
          __v.__end_cap_.__value_ = (std::string *)&__v;
          (*(void (**)(std::string *, std::__split_buffer<std::string> *))(v100->__r_.__value_.__r.__words[0]
                                                                                    + 24))(v100, &__v);
LABEL_209:
          std::__function::__value_func<DSP_Host_Types::StreamSemanticType ()(char const*)>::swap[abi:ne180100](&__v, &v98[3].__vftable);
          words = __v.__end_cap_.__value_->__r_.__value_.__r.__words;
          if ((std::__split_buffer<std::string> *)__v.__end_cap_.__value_ == &__v)
          {
            words = &__v;
            v102 = 4;
          }
          else
          {
            if (!__v.__end_cap_.__value_)
              goto LABEL_214;
            v102 = 5;
          }
          (*(void (**)(void))(*words + 8 * v102))();
LABEL_214:
          v103 = *(std::string **)(v97 + 104);
          if (v103)
          {
            if (v103 == (std::string *)(v97 + 80))
            {
              __v.__end_cap_.__value_ = (std::string *)&__v;
              (*(void (**)(std::string *, std::__split_buffer<std::string> *))(v103->__r_.__value_.__r.__words[0]
                                                                                        + 24))(v103, &__v);
LABEL_219:
              std::__function::__value_func<char const* ()(DSP_Host_Types::StreamSemanticType)>::swap[abi:ne180100](&__v, &v98[4].__shared_owners_);
              p_v = __v.__end_cap_.__value_->__r_.__value_.__r.__words;
              if ((std::__split_buffer<std::string> *)__v.__end_cap_.__value_ == &__v)
              {
                p_v = &__v;
                v105 = 4;
              }
              else
              {
                if (!__v.__end_cap_.__value_)
                  goto LABEL_224;
                v105 = 5;
              }
              (*(void (**)(void))(*p_v + 8 * v105))();
LABEL_224:
              DSP_Host_Types::FormatDescription::operator=((uint64_t)&v98[5].__shared_weak_owners_, v97 + 112);
              if (&v98[1] != (std::__shared_weak_count *)v97)
              {
                v107 = *(_QWORD *)(v97 + 336);
                v106 = *(_QWORD *)(v97 + 344);
                v108 = 0x86BCA1AF286BCA1BLL * ((v106 - v107) >> 3);
                shared_weak_owners = v98[15].__shared_weak_owners_;
                v110 = (uint64_t)v98[15].__vftable;
                if (0x86BCA1AF286BCA1BLL * ((shared_weak_owners - v110) >> 3) >= v108)
                {
                  shared_owners = v98[15].__shared_owners_;
                  v123 = 0x86BCA1AF286BCA1BLL * ((shared_owners - v110) >> 3);
                  if (v123 >= v108)
                  {
                    if (v107 != v106)
                    {
                      do
                      {
                        DSP_Host_Types::FormatDescription::operator=(v110, v107);
                        v107 += 152;
                        v110 += 152;
                      }
                      while (v107 != v106);
                      shared_owners = v98[15].__shared_owners_;
                    }
                    if (shared_owners != v110)
                    {
                      v127 = (void (***)(_QWORD))(shared_owners - 152);
                      v128 = (void (***)(_QWORD))(shared_owners - 152);
                      do
                      {
                        v129 = *v128;
                        v128 -= 19;
                        (*v129)(v127);
                        v28 = v127 == (void (***)(_QWORD))v110;
                        v127 = v128;
                      }
                      while (!v28);
                    }
                    v98[15].__shared_owners_ = v110;
                    goto LABEL_256;
                  }
                  if (shared_owners != v110)
                  {
                    v124 = 0x86BCA1AF286BCA1BLL * ((shared_owners - v110) >> 3);
                    v125 = 8 * ((shared_owners - v110) >> 3);
                    v126 = *(_QWORD *)(v97 + 336);
                    do
                    {
                      DSP_Host_Types::FormatDescription::operator=(v110, v126);
                      v126 += 152;
                      v110 += 152;
                      v125 -= 152;
                    }
                    while (v125);
                    v110 = v98[15].__shared_owners_;
                    v123 = v124;
                  }
                  v121 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<DSP_Host_Types::FormatDescription>,DSP_Host_Types::FormatDescription*,DSP_Host_Types::FormatDescription*,DSP_Host_Types::FormatDescription*>(v107 + 152 * v123, v106, v110);
                }
                else
                {
                  if (v110)
                  {
                    v111 = v98[15].__shared_owners_;
                    v112 = v98[15].__vftable;
                    if (v111 != v110)
                    {
                      v113 = (void (***)(_QWORD))(v111 - 152);
                      v114 = (void (***)(_QWORD))(v111 - 152);
                      do
                      {
                        v115 = *v114;
                        v114 -= 19;
                        (*v115)(v113);
                        v28 = v113 == (void (***)(_QWORD))v110;
                        v113 = v114;
                      }
                      while (!v28);
                      v112 = *v170;
                    }
                    v98[15].__shared_owners_ = v110;
                    operator delete(v112);
                    shared_weak_owners = 0;
                    *v170 = 0;
                    v98[15].__shared_owners_ = 0;
                    v98[15].__shared_weak_owners_ = 0;
                  }
                  if (v108 > 0x1AF286BCA1AF286)
                    goto LABEL_333;
                  v116 = 0x86BCA1AF286BCA1BLL * (shared_weak_owners >> 3);
                  v117 = 2 * v116;
                  if (2 * v116 <= v108)
                    v117 = 0x86BCA1AF286BCA1BLL * ((v106 - v107) >> 3);
                  v118 = v116 >= 0xD79435E50D7943 ? 0x1AF286BCA1AF286 : v117;
                  if (v118 > 0x1AF286BCA1AF286)
LABEL_333:
                    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                  v119 = (std::__shared_weak_count_vtbl *)std::__allocate_at_least[abi:ne180100]<std::allocator<DSP_Host_Types::FormatDescription>>(v118);
                  v98[15].__vftable = v119;
                  v98[15].__shared_owners_ = (uint64_t)v119;
                  v98[15].__shared_weak_owners_ = (uint64_t)v119 + 152 * v120;
                  v121 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<DSP_Host_Types::FormatDescription>,DSP_Host_Types::FormatDescription*,DSP_Host_Types::FormatDescription*,DSP_Host_Types::FormatDescription*>(v107, v106, (uint64_t)v119);
                }
                v98[15].__shared_owners_ = v121;
              }
LABEL_256:
              DSP_Dictionariable::SingleKvp<unsigned int>::operator=((uint64_t)&v98[14], v97 + 312);
              DSP_Dictionariable::SingleKvp<std::string>::operator=((uint64_t)&v98[12], v97 + 264);
              *(_QWORD *)&v194 = v98 + 1;
              *((_QWORD *)&v194 + 1) = v98;
              LODWORD(v98[2].__shared_weak_owners_) = 2;
              BYTE4(v98[2].__shared_weak_owners_) = 1;
              if (LOBYTE(v98[13].__shared_weak_owners_))
              {
                if (SHIBYTE(v98[13].__shared_owners_) < 0)
                  operator delete((void *)v98[12].__shared_weak_owners_);
                LOBYTE(v98[13].__shared_weak_owners_) = 0;
              }
              if (BYTE4(v98[14].__shared_weak_owners_))
                BYTE4(v98[14].__shared_weak_owners_) = 0;
              std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((char **)(v193 + 664), &v194);
              do
                v130 = __ldaxr(p_shared_owners);
              while (__stlxr(v130 - 1, p_shared_owners));
              if (!v130)
              {
                ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                std::__shared_weak_count::__release_weak(v98);
              }
              v91 = v169;
              v94 = v168;
              goto LABEL_267;
            }
            v103 = (std::string *)(*(uint64_t (**)(std::string *))(v103->__r_.__value_.__r.__words[0] + 16))(v103);
          }
          __v.__end_cap_.__value_ = v103;
          goto LABEL_219;
        }
        v100 = (std::string *)(*(uint64_t (**)(std::string *))(v100->__r_.__value_.__r.__words[0] + 16))(v100);
      }
      __v.__end_cap_.__value_ = v100;
      goto LABEL_209;
    }
LABEL_268:
    __v.__first_ = &cf;
    std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    v131 = *(_QWORD *)(v193 + 664) != *(_QWORD *)(v193 + 672)
        || *(_QWORD *)(v193 + 712) != *(_QWORD *)(v193 + 720)
        || *(_QWORD *)(v193 + 688) != *(_QWORD *)(v193 + 696);
    v132 = v186[0];
    v133 = v186[1];
    while (v132 != v133)
    {
      DSP_Dictionariable::SingleKvp<std::string>::value((std::string *)&__v, *(_QWORD *)v132 + 24);
      DSP_Dictionariable::SingleKvp<std::string>::value(&cf, v193 + 24);
      end_high = HIBYTE(__v.__end_);
      if (SHIBYTE(__v.__end_) >= 0)
        v135 = (std::__split_buffer<std::string>::pointer)HIBYTE(__v.__end_);
      else
        v135 = __v.__begin_;
      v136 = HIBYTE(cf.__r_.__value_.__r.__words[2]);
      v137 = SHIBYTE(cf.__r_.__value_.__r.__words[2]);
      if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v136 = cf.__r_.__value_.__l.__size_;
      if (v135 == (std::__split_buffer<std::string>::pointer)v136)
      {
        if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_cf = &cf;
        else
          p_cf = (std::string *)cf.__r_.__value_.__r.__words[0];
        if ((HIBYTE(__v.__end_) & 0x80) != 0)
        {
          v145 = memcmp(__v.__first_, p_cf, (size_t)__v.__begin_) == 0;
          if ((v137 & 0x80000000) == 0)
            goto LABEL_291;
        }
        else if (HIBYTE(__v.__end_))
        {
          v138 = HIBYTE(__v.__end_) - 1;
          v139 = &__v;
          do
          {
            first_low = LOBYTE(v139->__first_);
            v139 = (std::__split_buffer<std::string> *)((char *)v139 + 1);
            v140 = first_low;
            v143 = p_cf->__r_.__value_.__s.__data_[0];
            p_cf = (std::string *)((char *)p_cf + 1);
            v142 = v143;
            v26 = v138-- != 0;
            v144 = v26;
            v145 = v140 == v142;
          }
          while (v140 == v142 && (v144 & 1) != 0);
          if ((SHIBYTE(cf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_291:
            if ((end_high & 0x80) == 0)
              goto LABEL_292;
            goto LABEL_296;
          }
        }
        else
        {
          v145 = 1;
          if ((SHIBYTE(cf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_291;
        }
      }
      else
      {
        v145 = 0;
        if ((SHIBYTE(cf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_291;
      }
      operator delete(cf.__r_.__value_.__l.__data_);
      if ((end_high & 0x80) == 0)
      {
LABEL_292:
        if (v145)
          goto LABEL_304;
        goto LABEL_297;
      }
LABEL_296:
      operator delete(__v.__first_);
      if (v145)
        goto LABEL_304;
LABEL_297:
      v132 += 16;
    }
    if (v131)
      std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100](v186, &v193);
LABEL_304:
    v146 = (std::__shared_weak_count *)*((_QWORD *)&v193 + 1);
    v61 = v164;
    if (*((_QWORD *)&v193 + 1))
    {
      v147 = (unint64_t *)(*((_QWORD *)&v193 + 1) + 8);
      do
        v148 = __ldaxr(v147);
      while (__stlxr(v148 - 1, v147));
      if (!v148)
      {
        ((void (*)(std::__shared_weak_count *, std::string *))v146->__on_zero_shared)(v146, p_cf);
        std::__shared_weak_count::__release_weak(v146);
      }
    }
    v62 = v165;
    v60 = (unsigned int *)v167;
LABEL_310:
    HALS_ObjectMap::ReleaseObject(v62, (HALS_Object *)p_cf);
    v61 += 6;
  }
  while (v61 != v60);
LABEL_313:
  if (__p)
    operator delete(__p);
  v149 = v190;
  for (i = v191; v149 != i; ++v149)
  {
    std::to_string(&cf, *v149);
    end = v182.__end_;
    if (v182.__end_ >= v182.__end_cap_.__value_)
    {
      v153 = 0xAAAAAAAAAAAAAAABLL * (((char *)v182.__end_ - (char *)v182.__begin_) >> 3);
      v154 = v153 + 1;
      if (v153 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v182.__end_cap_.__value_ - (char *)v182.__begin_) >> 3) > v154)
        v154 = 0x5555555555555556 * (((char *)v182.__end_cap_.__value_ - (char *)v182.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v182.__end_cap_.__value_ - (char *)v182.__begin_) >> 3) >= 0x555555555555555)
        v155 = 0xAAAAAAAAAAAAAAALL;
      else
        v155 = v154;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v182.__end_cap_;
      if (v155)
        v155 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v155);
      else
        v156 = 0;
      v157 = (std::string *)(v155 + 24 * v153);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)v155;
      __v.__begin_ = v157;
      __v.__end_cap_.__value_ = (std::string *)(v155 + 24 * v156);
      v158 = *(_OWORD *)&cf.__r_.__value_.__l.__data_;
      v157->__r_.__value_.__r.__words[2] = cf.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v157->__r_.__value_.__l.__data_ = v158;
      memset(&cf, 0, sizeof(cf));
      __v.__end_ = v157 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v182, &__v);
      v159 = v182.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v182.__end_ = v159;
      if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(cf.__r_.__value_.__l.__data_);
    }
    else
    {
      v152 = *(_OWORD *)&cf.__r_.__value_.__l.__data_;
      v182.__end_->__r_.__value_.__r.__words[2] = cf.__r_.__value_.__r.__words[2];
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v152;
      v182.__end_ = end + 1;
    }
  }
  if ((*v162 & 4) != 0)
  {
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v175[0]);
    v175[0] = 0;
    v175[1] = 0;
    v174 = v175;
    std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v174, 1u, 1);
  }
  DSP_Host_Types::ConfigurationChangeRequest::ConfigurationChangeRequest(a1, (const DSP_Host_Types::ConfigurationChangeRequest *)v171);
  HALS_DSPRequest::~HALS_DSPRequest((HALS_DSPRequest *)v171);
}

void sub_1B5BAFE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, DSP_Dictionariable::DictionariableKvp *a15, uint64_t a16, uint64_t a17, HALS_ObjectMap *a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,DSP_Dictionariable::DictionariableKvp *a24,DSP_Dictionariable::DictionariableKvp *a25,DSP_Dictionariable::DictionariableKvp *a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v31;

  v31 = *(_QWORD *)(v29 - 224);
  if (v31)
    std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v31);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((_QWORD *)STACK[0x398]);
  HALS_DSPRequest::~HALS_DSPRequest((HALS_DSPRequest *)&a29);
  _Unwind_Resume(a1);
}

DSP_Host_Types::NegotiateRequest *DSP_Host_Types::NegotiateRequest::NegotiateRequest(DSP_Host_Types::NegotiateRequest *this, const DSP_Host_Types::ConfigurationChangeRequest *a2)
{
  DSP_Host_Types::ConfigurationChangeRequest *v4;

  v4 = DSP_Host_Types::ConfigurationChangeRequest::ConfigurationChangeRequest(this);
  *(_QWORD *)v4 = &off_1E69948D8;
  DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::operator=((uint64_t)v4, (uint64_t)a2);
  return this;
}

void sub_1B5BB0564(_Unwind_Exception *a1)
{
  DSP_Host_Types::ConfigurationChangeRequest *v1;

  DSP_Host_Types::ConfigurationChangeRequest::~ConfigurationChangeRequest(v1);
  _Unwind_Resume(a1);
}

uint64_t DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::operator=(uint64_t a1, uint64_t a2)
{
  CFTypeRef v5;
  CFTypeRef cf;

  std::__optional_storage_base<applesauce::CF::StringRef,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<applesauce::CF::StringRef,false> const&>(a1 + 8, *(CFTypeRef *)(a2 + 8), *(_BYTE *)(a2 + 16));
  cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)a2 + 24))(a2, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v5, cf);
  if (cf)
    CFRelease(cf);
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 32))(a1, &v5);
  if (v5)
    CFRelease(v5);
  return a1;
}

void sub_1B5BB0628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&a9);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::ConfigurationChangeRequest::~ConfigurationChangeRequest(DSP_Host_Types::ConfigurationChangeRequest *this)
{
  DSP_Dictionariable::DictionariableKvp *v2;
  void **v3;

  *(_QWORD *)this = &off_1E699D0D8;
  v2 = (DSP_Host_Types::ConfigurationChangeRequest *)((char *)this + 24);
  v3 = (void **)((char *)this + 656);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::ConfigurationChangeRequest *)((char *)this + 72));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::ConfigurationChangeRequest *)((char *)this + 48));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v2);
  *(_QWORD *)this = off_1E699D128;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

{
  DSP_Dictionariable::DictionariableKvp *v2;
  void **v3;

  *(_QWORD *)this = &off_1E699D0D8;
  v2 = (DSP_Host_Types::ConfigurationChangeRequest *)((char *)this + 24);
  v3 = (void **)((char *)this + 656);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::ConfigurationChangeRequest *)((char *)this + 72));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::ConfigurationChangeRequest *)((char *)this + 48));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v2);
  *(_QWORD *)this = off_1E699D128;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

{
  DSP_Dictionariable::DictionariableKvp *v2;
  void **v3;

  *(_QWORD *)this = &off_1E699D0D8;
  v2 = (DSP_Host_Types::ConfigurationChangeRequest *)((char *)this + 24);
  v3 = (void **)((char *)this + 656);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::ConfigurationChangeRequest *)((char *)this + 72));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::ConfigurationChangeRequest *)((char *)this + 48));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v2);
  *(_QWORD *)this = off_1E699D128;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1B5E50688);
}

void std::__optional_storage_base<applesauce::CF::StringRef,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<applesauce::CF::StringRef,false> const&>(uint64_t a1, CFTypeRef cf, unsigned __int8 a3)
{
  const void *v3;

  if (*(unsigned __int8 *)(a1 + 8) == a3)
  {
    if (*(_BYTE *)(a1 + 8))
    {
      v3 = *(const void **)a1;
      *(_QWORD *)a1 = cf;
      if (cf)
        CFRetain(cf);
      if (v3)
        CFRelease(v3);
    }
  }
  else if (*(_BYTE *)(a1 + 8))
  {
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::reset[abi:ne180100](a1);
  }
  else
  {
    *((_BYTE *)std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>((_QWORD *)a1, cf)+ 8) = 1;
  }
}

DSP_Host_Types::ConfigurationChangeRequest *DSP_Host_Types::ConfigurationChangeRequest::ConfigurationChangeRequest(DSP_Host_Types::ConfigurationChangeRequest *this, const DSP_Host_Types::ConfigurationChangeRequest *a2)
{
  void *__p[2];
  char v6;

  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 16) = 0;
  *(_QWORD *)this = &off_1E699D0D8;
  std::string::basic_string[abi:ne180100]<0>(__p, "is activation");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)this + 3, (const UInt8 *)__p);
  *((_QWORD *)this + 3) = &off_1E699D180;
  *((_WORD *)this + 20) = 0;
  if (v6 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "INTERNAL_is_simulated");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)this + 6, (const UInt8 *)__p);
  *((_QWORD *)this + 6) = &off_1E699D180;
  *((_WORD *)this + 32) = 0;
  if (v6 < 0)
    operator delete(__p[0]);
  DSP_Host_Types::IOContextDescription::IOContextDescription((DSP_Host_Types::ConfigurationChangeRequest *)((char *)this + 72), "io context description");
  *((_QWORD *)this + 84) = 0;
  *((_OWORD *)this + 41) = 0u;
  DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::operator=((uint64_t)this, (uint64_t)a2);
  return this;
}

void sub_1B5BB08A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  uint64_t v16;
  DSP_Dictionariable::DictionariableKvp *v17;
  DSP_Dictionariable::DictionariableKvp *v18;
  DSP_Host_Types::IOContextDescription *v19;

  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  DSP_Host_Types::IOContextDescription::~IOContextDescription(v19);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v18);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v17);
  *v15 = off_1E699D128;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void HALS_IOContextHostedDSP::DSPStreamInstance::MaybeConfigureHALBypass(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  AMCP::Log::Scope_Registry *v10;
  std::__shared_weak_count *v11;
  NSObject *v12;
  unint64_t *v13;
  unint64_t v14;
  _opaque_pthread_t *v15;
  mach_port_t v16;
  NSObject **v17;
  _BYTE v18[10];
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)(a1 + 384);
  v5 = operator new(0x158uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_1E6993EB8;
  v6 = (_QWORD *)(a1 + 368);
  v17 = (NSObject **)DSP_HAL_BypassCallbacks::DSP_HAL_BypassCallbacks((uint64_t)(v5 + 3), v4);
  *(_QWORD *)v18 = v5;
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)v6, (__int128 *)&v17);
  v7 = *(std::__shared_weak_count **)v18;
  if (*(_QWORD *)v18)
  {
    v8 = (unint64_t *)(*(_QWORD *)v18 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 16))(*v6, a2);
  if ((v10 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v17, "com.apple.coreaudio", "AMCP");
    v11 = *(std::__shared_weak_count **)v18;
    v12 = *v17;
    if (*(_QWORD *)v18)
    {
      v13 = (unint64_t *)(*(_QWORD *)v18 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v15 = pthread_self();
      v16 = pthread_mach_thread_np(v15);
      LODWORD(v17) = 67109634;
      HIDWORD(v17) = v16;
      *(_WORD *)v18 = 2080;
      *(_QWORD *)&v18[2] = "HALS_IOContextHostedDSP.cpp";
      v19 = 1024;
      v20 = 299;
      _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp] Unable to use HAL bypass processing with this format.", (uint8_t *)&v17, 0x18u);
    }
  }
}

void sub_1B5BB0AE8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<DSP_HAL_BypassCallbacks>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6993EB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DSP_HAL_BypassCallbacks>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6993EB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<DSP_HAL_BypassCallbacks>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

DSP_Host_Types::AdaptRequest *DSP_Host_Types::AdaptRequest::AdaptRequest(DSP_Host_Types::AdaptRequest *this, const DSP_Host_Types::NegotiateRequest *a2)
{
  DSP_Host_Types::ConfigurationChangeRequest *v4;

  v4 = DSP_Host_Types::ConfigurationChangeRequest::ConfigurationChangeRequest(this);
  *(_QWORD *)v4 = &off_1E699A370;
  DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::operator=((uint64_t)v4, (uint64_t)a2);
  return this;
}

void sub_1B5BB0B94(_Unwind_Exception *a1)
{
  DSP_Host_Types::ConfigurationChangeRequest *v1;

  DSP_Host_Types::ConfigurationChangeRequest::~ConfigurationChangeRequest(v1);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(HALS_IOContextHostedDSP::DSPStreamInstance *this, unsigned int a2, int a3)
{
  uint64_t result;
  char *v6;
  std::string *v7;
  uint64_t *v8;
  std::string *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  caulk::concurrent::messenger *v18;
  _opaque_pthread_t *v19;
  mach_port_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  std::__shared_weak_count *size;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  __int128 v58;
  __int128 v59;
  std::string __p;
  std::string v61;
  std::string *v62;
  uint64_t v63;
  int v64;
  char v65;
  char v66;
  char v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  result = *((_QWORD *)this + 249);
  if (a3)
  {
    if (result)
    {
LABEL_29:
LABEL_30:
      HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::SetCurrentSize(result, a2);
      return 0;
    }
    v6 = (char *)operator new(0xE0uLL);
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = 0;
    *((_QWORD *)v6 + 3) = &off_1E6993F58;
    *(_QWORD *)v6 = &off_1E6993F08;
    *((_QWORD *)v6 + 4) = this;
    *((_QWORD *)v6 + 5) = 0;
    *((_QWORD *)v6 + 6) = 850045863;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *((_QWORD *)v6 + 13) = 0;
    *((_QWORD *)v6 + 14) = 1018212795;
    *(_OWORD *)(v6 + 120) = 0u;
    *(_OWORD *)(v6 + 136) = 0u;
    *((_QWORD *)v6 + 20) = &off_1E6993F78;
    *((_QWORD *)v6 + 19) = 0;
    *((_QWORD *)v6 + 21) = 0;
    *((_DWORD *)v6 + 44) = 0;
    *((_QWORD *)v6 + 26) = 0;
    *((_DWORD *)v6 + 54) = 0;
    v7 = (std::string *)operator new(0x20uLL);
    v7->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E6993FB8;
    v7->__r_.__value_.__l.__size_ = (std::string::size_type)HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::AdaptNewSize;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7[1].__r_.__value_.__r.__words[0] = (std::string::size_type)(v6 + 24);
    v62 = v7;
    std::function<void ()>::operator=((_QWORD *)v6 + 23, (uint64_t)&v61);
    v8 = (uint64_t *)((char *)this + 1992);
    v9 = v62;
    if (v62 == &v61)
    {
      v10 = 4;
      v9 = &v61;
    }
    else
    {
      if (!v62)
        goto LABEL_23;
      v10 = 5;
    }
    (*(void (**)(void))(v9->__r_.__value_.__r.__words[0] + 8 * v10))();
LABEL_23:
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)(v6 + 24);
    v61.__r_.__value_.__l.__size_ = (std::string::size_type)v6;
    std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)this + 1992, (__int128 *)&v61);
    size = (std::__shared_weak_count *)v61.__r_.__value_.__l.__size_;
    if (v61.__r_.__value_.__l.__size_)
    {
      v29 = (unint64_t *)(v61.__r_.__value_.__l.__size_ + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    result = *v8;
    if (!*v8)
      goto LABEL_30;
    goto LABEL_29;
  }
  if (result)
  {
    v12 = v11 + 5;
    if (atomic_load(v11 + 5))
    {
      return 1;
    }
    else
    {
      v14 = v11;
      v15 = v11 + 4;
      v16 = atomic_load(v11 + 4);
      if (v16 != a2)
      {
        do
        {
          if (__ldaxr(v12))
          {
            __clrex();
            goto LABEL_70;
          }
        }
        while (__stlxr(1u, v12));
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v11);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v61, "com.apple.coreaudio", "AMCP");
        v18 = *(caulk::concurrent::messenger **)(v61.__r_.__value_.__r.__words[0] + 8);
        v19 = pthread_self();
        v20 = pthread_mach_thread_np(v19);
        v21 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
        *(_DWORD *)(v21 + 16) = 0;
        *(_BYTE *)(v21 + 20) = 2;
        *(_DWORD *)(v21 + 24) = v20;
        *(_QWORD *)(v21 + 32) = "HALS_IOContextHostedDSP.cpp";
        *(_DWORD *)(v21 + 40) = 491;
        *(_QWORD *)v21 = &off_1E6993BD0;
        *(_QWORD *)(v21 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v18, (caulk::concurrent::message *)v21);
        v22 = (std::__shared_weak_count *)v61.__r_.__value_.__l.__size_;
        if (v61.__r_.__value_.__l.__size_)
        {
          v23 = (unint64_t *)(v61.__r_.__value_.__l.__size_ + 8);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v52 = 0;
        v53 = 0;
        HALS_System::GetInstance(&v54, 0, &v52);
        v56 = 0;
        v57 = 0;
        v25 = *(_QWORD *)(v54 + 1504);
        if (v25)
        {
          v26 = *(_QWORD *)(v25 + 112);
          if (!v26)
          {
            std::mutex::lock((std::mutex *)(v25 + 48));
            v27 = operator new(0x28uLL);
            v27[1] = 0;
            v27[2] = 0;
            *v27 = &off_1E699EAF0;
            v27[3] = &off_1E699EB40;
            v27[4] = 0;
            std::string::basic_string[abi:ne180100]<0>(&__p, "DSP Concurrent Message Queue");
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v61, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            else
              v61 = __p;
            LOBYTE(v62) = 1;
            v63 = 0x10000003DLL;
            v64 = 2;
            v65 = 1;
            v66 = 0;
            v67 = 0;
            v31 = operator new();
            MEMORY[0x1B5E4FD34](v31, 1, &v61);
            std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v27 + 4, v31);
            if ((_BYTE)v62 && SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v61.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            *(_QWORD *)&v59 = v27 + 3;
            *((_QWORD *)&v59 + 1) = v27;
            std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v25 + 112, &v59);
            v32 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
            if (*((_QWORD *)&v59 + 1))
            {
              v33 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
              do
                v34 = __ldaxr(v33);
              while (__stlxr(v34 - 1, v33));
              if (!v34)
              {
                ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                std::__shared_weak_count::__release_weak(v32);
              }
            }
            std::mutex::unlock((std::mutex *)(v25 + 48));
            v26 = *(_QWORD *)(v25 + 112);
          }
          v35 = *(_QWORD *)(v25 + 120);
          *(_QWORD *)&v58 = v26;
          *((_QWORD *)&v58 + 1) = v35;
          if (v35)
          {
            v36 = (unint64_t *)(v35 + 8);
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
          }
          std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)&v56, &v58);
          v38 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
          if (*((_QWORD *)&v58 + 1))
          {
            v39 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
        }
        v41 = v55;
        if (v55)
        {
          p_shared_owners = (unint64_t *)&v55->__shared_owners_;
          do
            v43 = __ldaxr(p_shared_owners);
          while (__stlxr(v43 - 1, p_shared_owners));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        v44 = v53;
        if (v53)
        {
          v45 = (unint64_t *)&v53->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v47 = v56;
        if (v56)
        {
          v14[48] = a2;
          (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)v47 + 16))(v47, v14 + 34);
        }
        v48 = v57;
        if (v57)
        {
          v49 = (unint64_t *)&v57->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
      }
LABEL_70:
      v51 = atomic_load(v15);
      return v51 != a2;
    }
  }
  return result;
}

void sub_1B5BB1170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32)
{
  std::mutex *v32;
  std::__shared_weak_count *v33;
  uint64_t *v34;
  void *v36;

  if (a25 < 0)
    operator delete(__p);
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v34, 0);
  std::__shared_weak_count::~__shared_weak_count(v33);
  operator delete(v36);
  std::mutex::unlock(v32);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::AdaptNewSize(uint64_t a1, unsigned int a2)
{
  std::__shared_weak_count *v4;
  NSObject *v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void (**v14)();
  uint64_t v15;
  uint64_t v16;
  void *__p;
  void *v18;
  uint64_t v19;
  uint8_t buf[8];
  _BYTE v21[10];
  __int16 v22;
  int v23;
  __int16 v24;
  unsigned int v25;
  uint64_t v26;
  _DWORD v27[93];
  char v28;
  _QWORD v29[4];

  v29[3] = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v4 = *(std::__shared_weak_count **)v21;
  v5 = **(NSObject ***)buf;
  if (*(_QWORD *)v21)
  {
    v6 = (unint64_t *)(*(_QWORD *)v21 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v12 = pthread_self();
    v13 = pthread_mach_thread_np(v12);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v13;
    *(_WORD *)v21 = 2080;
    *(_QWORD *)&v21[2] = "HALS_IOContextHostedDSP.cpp";
    v22 = 1024;
    v23 = 505;
    v24 = 1024;
    v25 = a2;
    _os_log_debug_impl(&dword_1B57BA000, v5, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] Adapting a new buffer size %d.", buf, 0x1Eu);
  }
  v8 = (unsigned int *)(a1 + 20);
  do
  {
    v9 = __ldaxr(v8);
    if (v9 != 1)
    {
      __clrex();
      goto LABEL_20;
    }
  }
  while (__stlxr(2u, v8));
  std::mutex::lock((std::mutex *)(a1 + 24));
  v10 = atomic_load((unsigned int *)(a1 + 16));
  if (a2 && v10 != a2)
  {
    DSP_Host_Types::AdaptRequest::AdaptRequest((DSP_Host_Types::AdaptRequest *)buf, (const DSP_Host_Types::AdaptRequest *)(*(_QWORD *)(a1 + 8) + 1312));
    v27[92] = a2;
    v28 = 1;
    (*(void (**)(void (***__return_ptr)(), _QWORD, uint8_t *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 136) + 32))(&v14, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 136), buf, *(_QWORD *)(a1 + 8) + 152);
    if (!v19)
    {
      v11 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)(v11 + 1752) = a2;
      *(_BYTE *)(v11 + 1756) = 1;
      atomic_store(a2, (unsigned int *)(a1 + 16));
    }
    v14 = (void (**)())&off_1E699E8B8;
    if (__p)
    {
      v18 = __p;
      operator delete(__p);
    }
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&v16);
    v14 = off_1E699E8F8;
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v15);
    *(_QWORD *)buf = &off_1E699D0D8;
    v14 = (void (**)())v29;
    std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
    DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)v27);
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&v26);
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&v24);
    *(_QWORD *)buf = off_1E699D128;
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v21);
  }
  std::mutex::unlock((std::mutex *)(a1 + 24));
LABEL_20:
  std::condition_variable::notify_one((std::condition_variable *)(a1 + 88));
  atomic_store(0, (unsigned int *)(a1 + 20));
}

void sub_1B5BB155C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  std::mutex *v11;
  va_list va;

  va_start(va, a11);
  DSP_Host_Types::AdaptRequest::~AdaptRequest((DSP_Host_Types::AdaptRequest *)va);
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::SetCurrentSize(uint64_t a1, unsigned int a2)
{
  unsigned int *v4;
  unsigned int v5;
  std::unique_lock<std::mutex> v8;

  v8.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  v8.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  v4 = (unsigned int *)(a1 + 20);
  while (1)
  {
    v5 = __ldaxr(v4);
    if (v5 != 1)
      break;
    if (!__stlxr(3u, v4))
      goto LABEL_6;
  }
  __clrex();
LABEL_6:
  if (atomic_load((unsigned int *)(a1 + 20)))
  {
    do
      std::condition_variable::wait((std::condition_variable *)(a1 + 88), &v8);
    while (atomic_load(v4));
  }
  atomic_store(a2, (unsigned int *)(a1 + 16));
  atomic_store(0, (unsigned int *)(a1 + 20));
  if (v8.__owns_)
    std::mutex::unlock(v8.__m_);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::RT_MaybeEnqueueAdapt(unsigned int)::{lambda(std::tuple<unsigned int,char const*,int> &)#1},std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::RT_MaybeEnqueueAdapt(unsigned int)::{lambda(std::tuple<unsigned int,char const*,int> &)#1},std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  caulk::concurrent::message *v11;
  uint8_t buf[8];
  _BYTE v13[10];
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v13;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v13)
  {
    v4 = (unint64_t *)(*(_QWORD *)v13 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v13 = 2080;
    *(_QWORD *)&v13[2] = v8;
    v14 = 1024;
    v15 = v9;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d [hal_dsp] Enqueing buffer size change for hosted DSP.", buf, 0x18u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::RT_MaybeEnqueueAdapt::{lambda(std::tuple<unsigned int,char const*,int> &)#1},std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(&v11);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::RT_MaybeEnqueueAdapt(unsigned int)::{lambda(std::tuple<unsigned int,char const*,int> &)#1},std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

DSP_Host_Types::AdaptRequest *DSP_Host_Types::AdaptRequest::AdaptRequest(DSP_Host_Types::AdaptRequest *this, const DSP_Host_Types::AdaptRequest *a2)
{
  DSP_Host_Types::ConfigurationChangeRequest *v4;

  v4 = DSP_Host_Types::ConfigurationChangeRequest::ConfigurationChangeRequest(this);
  *(_QWORD *)v4 = &off_1E699A370;
  DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::operator=((uint64_t)v4, (uint64_t)a2);
  return this;
}

void sub_1B5BB1818(_Unwind_Exception *a1)
{
  DSP_Host_Types::ConfigurationChangeRequest *v1;

  DSP_Host_Types::ConfigurationChangeRequest::~ConfigurationChangeRequest(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::*)(unsigned int),HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::*)(unsigned int),HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler*,std::placeholders::__ph<1> const&>>,void ()(unsigned int)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::*)(unsigned int),HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::*)(unsigned int),HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler*,std::placeholders::__ph<1> const&>>,void ()(unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E6993FB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::*)(unsigned int),HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::*)(unsigned int),HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler*,std::placeholders::__ph<1> const&>>,void ()(unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6993FB8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::*)(unsigned int),HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::*)(unsigned int),HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler*,std::placeholders::__ph<1> const&>>,void ()(unsigned int)>::operator()(_QWORD *a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, _QWORD);
  _QWORD *v4;

  v2 = a1[2];
  v3 = (uint64_t (*)(_QWORD *, _QWORD))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v3);
  return v3(v4, *a2);
}

uint64_t std::__function::__func<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::*)(unsigned int),HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::*)(unsigned int),HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler*,std::placeholders::__ph<1> const&>>,void ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__16__bindIMZN23HALS_IOContextHostedDSP17DSPStreamInstance25RT_HandleBufferSizeChangeEjbE19BufferChangeHandlerFvjEJPS3_RKNS_12placeholders4__phILi1EEEEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::*)(unsigned int),HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::*)(unsigned int),HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler*,std::placeholders::__ph<1> const&>>,void ()(unsigned int)>::target_type()
{
}

void HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::simple_message_playload::~simple_message_playload(caulk::concurrent::message *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E6993F78;
  v2 = (char *)this + 24;
  v3 = (char *)*((_QWORD *)this + 6);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  caulk::concurrent::message::~message(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E6993F78;
  v2 = (char *)this + 24;
  v3 = (char *)*((_QWORD *)this + 6);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      caulk::concurrent::message::~message(this);
      JUMPOUT(0x1B5E50688);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  goto LABEL_6;
}

uint64_t HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::simple_message_playload::perform(uint64_t a1)
{
  uint64_t v1;
  int v3;

  v3 = *(_DWORD *)(a1 + 56);
  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

uint64_t HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::~BufferChangeHandler(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_1E6993F58;
  HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::SetCurrentSize(a1, 0);
  *(_QWORD *)(a1 + 136) = &off_1E6993F78;
  v2 = *(_QWORD **)(a1 + 184);
  if (v2 == (_QWORD *)(a1 + 160))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 160);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)(a1 + 136));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

void HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::~BufferChangeHandler(uint64_t a1)
{
  HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler::~BufferChangeHandler(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler,std::allocator<HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6993F08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler,std::allocator<HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6993F08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler,std::allocator<HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange(unsigned int,BOOL)::BufferChangeHandler>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t caulk::concurrent::messenger::enqueue_call<HALS_IOContextHostedDSP::DSPStreamInstance::DoIO(unsigned int,AudioBufferList *,AudioBufferList *,AudioTimeStamp const&)::$_0,std::tuple<unsigned int,char const*,int>>(caulk::concurrent::messenger *a1, _BYTE *a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;

  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 16))(*MEMORY[0x1E0DDB688], 48, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = &off_1E69940C0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 20) = *a2;
  v7 = *a3;
  *(_QWORD *)(v6 + 40) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)v6 = &off_1E6994068;
  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContextHostedDSP::DSPStreamInstance::DoIO(unsigned int,AudioBufferList *,AudioBufferList *,AudioTimeStamp const&)::$_0,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContextHostedDSP::DSPStreamInstance::DoIO(unsigned int,AudioBufferList *,AudioBufferList *,AudioTimeStamp const&)::$_0,std::tuple<unsigned int,char const*,int>>::perform(caulk::concurrent::message *a1)
{
  caulk::concurrent::message *v2;

  v2 = a1;
  caulk::concurrent::details::message_call<HALS_IOContextHostedDSP::DSPStreamInstance::DoIO(unsigned int,AudioBufferList *,AudioBufferList *,AudioTimeStamp const&)::$_0,std::tuple<unsigned int,char const*,int>>::perform((uint64_t)a1);
  return caulk::concurrent::details::rt_message_call<HALS_IOContextHostedDSP::DSPStreamInstance::DoIO(unsigned int,AudioBufferList *,AudioBufferList *,AudioTimeStamp const&)::$_0,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_1B5BB1BFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<HALS_IOContextHostedDSP::DSPStreamInstance::DoIO(unsigned int,AudioBufferList *,AudioBufferList *,AudioTimeStamp const&)::$_0,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::message_call<HALS_IOContextHostedDSP::DSPStreamInstance::DoIO(unsigned int,AudioBufferList *,AudioBufferList *,AudioTimeStamp const&)::$_0,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  NSObject **v10;
  _BYTE v11[10];
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v11;
  v3 = *v10;
  if (*(_QWORD *)v11)
  {
    v4 = (unint64_t *)(*(_QWORD *)v11 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    LODWORD(v10) = 67109634;
    HIDWORD(v10) = v7;
    *(_WORD *)v11 = 2080;
    *(_QWORD *)&v11[2] = v8;
    v12 = 1024;
    v13 = v9;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d [hal_dsp] Caught an error while calling hosted DSP.", (uint8_t *)&v10, 0x18u);
  }
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContextHostedDSP::DSPStreamInstance::DoIO(unsigned int,AudioBufferList *,AudioBufferList *,AudioTimeStamp const&)::$_0,std::tuple<unsigned int,char const*,int>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::message_call<HALS_IOContextHostedDSP::DSPStreamInstance::DoIO(unsigned int,AudioBufferList *,AudioBufferList *,AudioTimeStamp const&)::$_0,std::tuple<unsigned int,char const*,int>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<HALB_RealtimeDuration_Collection>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69940E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HALB_RealtimeDuration_Collection>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69940E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<HALB_RealtimeDuration_Collection>::__on_zero_shared(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *(void **)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v3 - 16);
      while ((void *)v3 != v1);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

uint64_t HALS_IOContextHostedDSP::HostedDSPList::find(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (result != a2)
  {
    while (*(_DWORD *)result != (_DWORD)a3 || *(_QWORD *)(result + 4) != __PAIR64__(a4, HIDWORD(a3)))
    {
      result += 24;
      if (result == a2)
        return a2;
    }
  }
  return result;
}

void HALS_IOContextHostedDSP::DSPStreamInstance::HALDSPBypass::~HALDSPBypass(HALS_IOContextHostedDSP::DSPStreamInstance::HALDSPBypass *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  HALS_IOContextHostedDSP::DSPStreamInstance::HALDSPBypass *v5;
  uint64_t v6;
  HALS_IOContextHostedDSP::DSPStreamInstance::HALDSPBypass *v7;
  uint64_t v8;
  HALS_IOContextHostedDSP::DSPStreamInstance::HALDSPBypass *v9;
  uint64_t v10;
  HALS_IOContextHostedDSP::DSPStreamInstance::HALDSPBypass *v11;
  uint64_t v12;

  v2 = (char *)this + 144;
  v3 = (char *)*((_QWORD *)this + 21);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (HALS_IOContextHostedDSP::DSPStreamInstance::HALDSPBypass *)*((_QWORD *)this + 17);
  if (v5 == (HALS_IOContextHostedDSP::DSPStreamInstance::HALDSPBypass *)((char *)this + 112))
  {
    v6 = 4;
    v5 = (HALS_IOContextHostedDSP::DSPStreamInstance::HALDSPBypass *)((char *)this + 112);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  v7 = (HALS_IOContextHostedDSP::DSPStreamInstance::HALDSPBypass *)*((_QWORD *)this + 13);
  if (v7 == (HALS_IOContextHostedDSP::DSPStreamInstance::HALDSPBypass *)((char *)this + 80))
  {
    v8 = 4;
    v7 = (HALS_IOContextHostedDSP::DSPStreamInstance::HALDSPBypass *)((char *)this + 80);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_16:
  v9 = (HALS_IOContextHostedDSP::DSPStreamInstance::HALDSPBypass *)*((_QWORD *)this + 9);
  if (v9 == (HALS_IOContextHostedDSP::DSPStreamInstance::HALDSPBypass *)((char *)this + 48))
  {
    v10 = 4;
    v9 = (HALS_IOContextHostedDSP::DSPStreamInstance::HALDSPBypass *)((char *)this + 48);
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_21:
  v11 = (HALS_IOContextHostedDSP::DSPStreamInstance::HALDSPBypass *)*((_QWORD *)this + 5);
  if (v11 == (HALS_IOContextHostedDSP::DSPStreamInstance::HALDSPBypass *)((char *)this + 16))
  {
    v12 = 4;
    v11 = (HALS_IOContextHostedDSP::DSPStreamInstance::HALDSPBypass *)((char *)this + 16);
    goto LABEL_25;
  }
  if (v11)
  {
    v12 = 5;
LABEL_25:
    (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
  }
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void DSP_Host_Types::CreateProcessorConfiguration::~CreateProcessorConfiguration(DSP_Host_Types::CreateProcessorConfiguration *this)
{
  DSP_Dictionariable::DictionariableKvp *v2;

  *(_QWORD *)this = off_1E6994770;
  *((_QWORD *)this + 9) = off_1E6994AA8;
  v2 = (DSP_Host_Types::CreateProcessorConfiguration *)((char *)this + 72);
  if (*((_BYTE *)this + 112) && *((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v2);
  *((_QWORD *)this + 3) = off_1E6994AA8;
  if (*((_BYTE *)this + 64) && *((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::CreateProcessorConfiguration *)((char *)this + 24));
  *(_QWORD *)this = off_1E6994C88;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

{
  DSP_Dictionariable::DictionariableKvp *v2;

  *(_QWORD *)this = off_1E6994770;
  *((_QWORD *)this + 9) = off_1E6994AA8;
  v2 = (DSP_Host_Types::CreateProcessorConfiguration *)((char *)this + 72);
  if (*((_BYTE *)this + 112) && *((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v2);
  *((_QWORD *)this + 3) = off_1E6994AA8;
  if (*((_BYTE *)this + 64) && *((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::CreateProcessorConfiguration *)((char *)this + 24));
  *(_QWORD *)this = off_1E6994C88;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1B5E50688);
}

void HALS_IOContextHostedDSP::HostedDSPList::remove_at(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = a1[1];
  v5 = HALS_IOContextHostedDSP::HostedDSPList::find(*a1, v4, a2, a3);
  if (v4 != v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      v8 = (uint64_t *)a1[3];
      v10 = *(_QWORD *)(v7 + 352);
      v9 = *(std::__shared_weak_count **)(v7 + 360);
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
        v13 = *v8;
        v16 = v8[1];
        v14 = v8 + 1;
        v15 = v16;
        v17 = (unint64_t *)&v9->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      else
      {
        v13 = *v8;
        v19 = v8[1];
        v14 = v8 + 1;
        v15 = v19;
      }
      if (v13 != v15)
      {
        while (1)
        {
          v21 = *(_QWORD *)v13;
          v20 = *(std::__shared_weak_count **)(v13 + 8);
          if (v20)
          {
            v22 = (unint64_t *)&v20->__shared_owners_;
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
            do
              v24 = __ldaxr(v22);
            while (__stlxr(v24 - 1, v22));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          if (v21 == v10)
            break;
          v13 += 16;
          if (v13 == v15)
          {
            v13 = v15;
            break;
          }
        }
      }
      if (v9)
      {
        v25 = (unint64_t *)&v9->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v27 = *v14;
      if (v13 != *v14)
      {
        if (v13 + 16 != v27)
        {
          do
          {
            v28 = v13;
            v13 += 16;
          }
          while (std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v28, (__int128 *)v13) + 32 != v27);
          v27 = *v14;
        }
        while (v27 != v13)
        {
          v27 -= 16;
          std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v27);
        }
        *v14 = v13;
      }
      if (v9)
      {
        v29 = (unint64_t *)&v9->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    v31 = v6 + 24;
    v32 = a1[1];
    if (v6 + 24 != v32)
    {
      v33 = v6;
      do
      {
        v34 = *(_QWORD *)(v33 + 24);
        v33 += 24;
        *(_QWORD *)v6 = v34;
        *(_DWORD *)(v6 + 8) = *(_DWORD *)(v6 + 32);
        v35 = *(_QWORD *)(v6 + 40);
        *(_QWORD *)(v6 + 40) = 0;
        std::unique_ptr<HALS_IOContextHostedDSP::DSPStreamInstance>::reset[abi:ne180100]((uint64_t *)(v6 + 16), v35);
        v36 = v6 + 48;
        v6 = v33;
      }
      while (v36 != v32);
      v31 = a1[1];
      v6 = v33;
    }
    if (v31 != v6)
    {
      do
      {
        v37 = v31 - 24;
        std::unique_ptr<HALS_IOContextHostedDSP::DSPStreamInstance>::reset[abi:ne180100]((uint64_t *)(v31 - 8), 0);
        v31 = v37;
      }
      while (v37 != v6);
    }
    a1[1] = v6;
  }
}

_QWORD *HALS_IOContextHostedDSP::Initialize(HALS_IOContextHostedDSP *this, HALS_IOContextDescription *a2, int a3, int a4)
{
  int v8;
  _DWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  _QWORD *result;
  uint64_t v14;
  _QWORD v15[2];
  _BYTE v16[24];
  _BYTE *v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v8 = *((_DWORD *)a2 + 4);
  v9 = operator new(0x20uLL);
  *(_QWORD *)v9 = &off_1E6994138;
  v9[2] = v8;
  v9[3] = a3;
  v9[4] = a4;
  *((_QWORD *)v9 + 3) = this;
  v19 = v9;
  HALS_IOContextDescription::ApplyToInput<>((uint64_t)a2, (uint64_t)v18);
  v10 = v19;
  if (v19 == v18)
  {
    v11 = 4;
    v10 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_6:
  v12 = operator new(0x20uLL);
  *(_QWORD *)v12 = &off_1E69941B8;
  v12[2] = v8;
  v12[3] = a3;
  v12[4] = a4;
  *((_QWORD *)v12 + 3) = this;
  v17 = v12;
  v15[0] = &off_1E6996590;
  v15[1] = a2;
  HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>((uint64_t)a2, (uint64_t)v16, (uint64_t)v15);
  result = v17;
  if (v17 == v16)
  {
    v14 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
}

void sub_1B5BB23C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContextDescription::ApplyToInput<>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v7, a2);
  v3 = VisitableVector<HALS_IOStreamInfo>::apply<>((uint64_t *)(a1 + 56), (uint64_t)v7);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v3;
}

void sub_1B5BB24C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_2,std::allocator<HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_2>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_2,std::allocator<HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_2>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E69941B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_2,std::allocator<HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_2>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E69941B8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_2,std::allocator<HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_2>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_0::operator()((unsigned int *)(a1 + 8), *(int64x2_t **)(a1 + 24), 1869968496, a6);
  return 0;
}

uint64_t std::__function::__func<HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_2,std::allocator<HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_2>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN23HALS_IOContextHostedDSP10InitializeER25HALS_IOContextDescriptionjjE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_2,std::allocator<HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_2>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::target_type()
{
}

void HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_0::operator()(unsigned int *a1, int64x2_t *a2, int a3, uint64_t a4)
{
  uint64_t v8;
  std::__shared_weak_count *size;
  NSObject *v11;
  unint64_t *v12;
  unint64_t v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  _DWORD *v22;
  _DWORD *v23;
  HALS_ObjectMap *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  size_t v31;
  std::string *v32;
  std::string *p_buf;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  std::string::size_type v41;
  std::string *v42;
  HALS_Object *v43;
  std::string::size_type v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  _DWORD *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int64x2_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  std::string::size_type v66;
  std::string *v67;
  std::string::size_type *p_size;
  char *v69;
  AMCP::Log::Scope_Registry *v70;
  __int128 v71;
  _QWORD *v72;
  uint64_t v73;
  void *v74;
  std::__shared_weak_count *v75;
  char *v76;
  __int128 v77;
  std::string::size_type v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  id *v82;
  DSP_HostCallbacks *v83;
  id v84;
  id v85;
  uint64_t v86;
  std::string *v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  std::string *v91;
  std::string::size_type v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::string::size_type v99;
  char *v100;
  std::string::size_type v101;
  uint64_t v102;
  void *v103;
  NSObject *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  void *v109;
  _QWORD *v110;
  id v111;
  NSObject *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  _QWORD *v119;
  id v120;
  AMCP::Log::Scope_Registry *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  NSObject *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  NSObject *v146;
  unint64_t *v147;
  unint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  _QWORD *v152;
  unint64_t *v153;
  unint64_t v154;
  std::string::size_type *v155;
  uint64_t v156;
  uint64_t v157;
  std::string *v158;
  uint64_t v159;
  int64x2_t *v160;
  std::__shared_weak_count *v161;
  std::string::size_type v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  uint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  NSObject *v178;
  unint64_t *v179;
  unint64_t v180;
  _opaque_pthread_t *v181;
  mach_port_t v182;
  unint64_t v183;
  std::string::size_type v184;
  unint64_t *v185;
  unint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  char *v192;
  char *v193;
  std::string::size_type v194;
  unint64_t *v195;
  unint64_t v196;
  _QWORD *v197;
  _QWORD *v198;
  char *v199;
  __int128 v200;
  int64x2_t v201;
  _opaque_pthread_t *v202;
  mach_port_t v203;
  int v204;
  int v205;
  int v206;
  int v207;
  uint64_t v208;
  void *v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  _opaque_pthread_t *v213;
  mach_port_t v214;
  _opaque_pthread_t *v215;
  mach_port_t v216;
  _opaque_pthread_t *v217;
  mach_port_t v218;
  NSObject *v219;
  _opaque_pthread_t *v220;
  mach_port_t v221;
  NSObject *v222;
  _opaque_pthread_t *v223;
  mach_port_t v224;
  std::string::size_type v225;
  __int128 v226;
  id v227;
  int v228;
  int v229;
  unsigned int v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  std::string v234;
  std::string v235;
  uint64_t v236;
  std::__shared_weak_count *v237;
  std::string __p;
  std::string v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  uint64_t v242;
  std::__shared_weak_count *v243;
  __int128 v244;
  std::string v245;
  _BYTE v246[10];
  __int16 v247;
  int v248;
  __int16 v249;
  int v250;
  __int16 v251;
  int v252;
  __int16 v253;
  int v254;
  std::string buf;
  __int16 v256;
  unsigned int v257;
  std::string *v258;
  _QWORD v259[3];
  _QWORD *v260;
  std::string v261;
  std::string *v262;
  __int128 v263;
  std::string v264;
  std::string *v265;
  uint64_t v266;

  v266 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a4 + 108))
  {
    v8 = *(_QWORD *)(a4 + 112);
    if (*(_QWORD *)(a4 + 120) == v8 || v8 == 0)
    {
      v17 = *a1;
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
      size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
      v11 = *(NSObject **)buf.__r_.__value_.__l.__data_;
      if (buf.__r_.__value_.__l.__size_)
      {
        v12 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        v14 = pthread_self();
        v15 = pthread_mach_thread_np(v14);
        v16 = *a1;
        LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v15;
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALS_IOContextHostedDSP.cpp";
        WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(buf.__r_.__value_.__r.__words[2]) = 898;
        v256 = 1024;
        v257 = v16;
        _os_log_debug_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] Creating DSP instance with no assigned engine (Device ID: %u).", (uint8_t *)&buf, 0x1Eu);
      }
    }
    else
    {
      v17 = *(_DWORD *)(v8 + 8);
    }
    v18 = *(_DWORD *)(a4 + 216);
    v19 = *(_DWORD *)(a4 + 12);
    v20 = a1[1];
    v21 = a1[2];
    v22 = (_DWORD *)a2->i64[0];
    v23 = (_DWORD *)a2->i64[1];
    if ((_DWORD *)a2->i64[0] != v23)
    {
      while (*v22 != a3 || v22[1] != v17 || v22[2] != v19)
      {
        v22 += 6;
        if (v22 == v23)
          goto LABEL_21;
      }
    }
    if (v23 == v22)
    {
LABEL_21:
      std::string::basic_string[abi:ne180100]<0>(&v239, "");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      v236 = 0;
      v237 = 0;
      v229 = v20;
      v230 = v21;
      v228 = v18;
      HALS_System::GetInstance(&buf, 0, &v236);
      v24 = (HALS_ObjectMap *)HALS_System::CopyClientByObjectID((HALS_System *)buf.__r_.__value_.__l.__data_, v20);
      v25 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_)
      {
        v26 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v28 = v237;
      if (!v237)
        goto LABEL_30;
      p_shared_owners = (unint64_t *)&v237->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
        if (!v24)
          goto LABEL_34;
      }
      else
      {
LABEL_30:
        if (!v24)
          goto LABEL_34;
      }
      HALS_Client::GetUniqueDebugString((HALS_Client *)&buf, (uint64_t)v24);
      std::string::operator=(&v239, &buf);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
LABEL_34:
      std::to_string(&buf, v21);
      std::to_string(&v245, v17);
      std::to_string(&v264, v19);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      else
        v31 = buf.__r_.__value_.__l.__size_;
      v32 = &v234;
      std::string::basic_string[abi:ne180100]((uint64_t)&v234, v31 + 1);
      if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v32 = (std::string *)v234.__r_.__value_.__r.__words[0];
      if (v31)
      {
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_buf = &buf;
        else
          p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        memmove(v32, p_buf, v31);
      }
      *(_WORD *)((char *)&v32->__r_.__value_.__l.__data_ + v31) = 46;
      if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = &v245;
      else
        v34 = (std::string *)v245.__r_.__value_.__r.__words[0];
      if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
      else
        v35 = v245.__r_.__value_.__l.__size_;
      v36 = std::string::append(&v234, (const std::string::value_type *)v34, v35);
      v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v235.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v235.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      v38 = std::string::append(&v235, ".", 1uLL);
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v261.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      if ((v264.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = &v264;
      else
        v40 = (std::string *)v264.__r_.__value_.__r.__words[0];
      if ((v264.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = HIBYTE(v264.__r_.__value_.__r.__words[2]);
      else
        v41 = v264.__r_.__value_.__l.__size_;
      v42 = std::string::append(&v261, (const std::string::value_type *)v40, v41);
      v44 = v42->__r_.__value_.__r.__words[0];
      *(_QWORD *)&v263 = v42->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)&v263 + 7) = *(std::string::size_type *)((char *)&v42->__r_.__value_.__r.__words[1] + 7);
      v45 = HIBYTE(v42->__r_.__value_.__r.__words[2]);
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p.__r_.__value_.__r.__words[0] = v44;
      __p.__r_.__value_.__l.__size_ = v263;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v263 + 7);
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v45;
      if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v261.__r_.__value_.__l.__data_);
      if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v235.__r_.__value_.__l.__data_);
      if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v234.__r_.__value_.__l.__data_);
      if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v264.__r_.__value_.__l.__data_);
      if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v245.__r_.__value_.__l.__data_);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      HALS_ObjectMap::ReleaseObject(v24, v43);
      LODWORD(v245.__r_.__value_.__l.__data_) = a3;
      HIDWORD(v245.__r_.__value_.__r.__words[0]) = v17;
      LODWORD(v245.__r_.__value_.__r.__words[1]) = v19;
      v46 = operator new();
      bzero((void *)v46, 0x7D8uLL);
      *(_QWORD *)(v46 + 16) = off_1E6994770;
      std::string::basic_string[abi:ne180100]<0>(&buf, "client bundle identifier");
      DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)(v46 + 40), (const UInt8 *)&buf);
      *(_QWORD *)(v46 + 40) = off_1E6994AA8;
      *(_BYTE *)(v46 + 56) = 0;
      *(_BYTE *)(v46 + 80) = 0;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&buf, "client unique identifier");
      DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)(v46 + 88), (const UInt8 *)&buf);
      *(_QWORD *)(v46 + 88) = off_1E6994AA8;
      *(_BYTE *)(v46 + 104) = 0;
      *(_BYTE *)(v46 + 128) = 0;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      *(_QWORD *)(v46 + 136) = 0;
      *(_QWORD *)(v46 + 144) = 0;
      *(_QWORD *)(v46 + 176) = 0;
      *(_QWORD *)(v46 + 208) = 0;
      *(_QWORD *)(v46 + 240) = 0;
      *(_QWORD *)(v46 + 272) = 0;
      *(_OWORD *)(v46 + 328) = 0u;
      *(_QWORD *)(v46 + 408) = 0;
      *(_QWORD *)(v46 + 440) = 0;
      *(_QWORD *)(v46 + 472) = 0;
      *(_QWORD *)(v46 + 504) = 0;
      *(_QWORD *)(v46 + 536) = 0;
      *(_QWORD *)(v46 + 304) = 0;
      *(_QWORD *)(v46 + 312) = 0;
      *(_DWORD *)(v46 + 320) = 0;
      *(_OWORD *)(v46 + 344) = 0u;
      *(_OWORD *)(v46 + 360) = 0u;
      *(_QWORD *)(v46 + 376) = 0;
      DSP_Host_Types::ConfigurationChangeRequest::ConfigurationChangeRequest((DSP_Host_Types::ConfigurationChangeRequest *)(v46 + 544));
      *(_QWORD *)(v46 + 544) = &off_1E69948D8;
      *(_WORD *)(v46 + 1224) = 0;
      *(_QWORD *)(v46 + 1248) = 0;
      *(_QWORD *)(v46 + 1240) = 0;
      *(_QWORD *)(v46 + 1232) = v46 + 1240;
      *(_DWORD *)(v46 + 1304) = 0;
      *(_OWORD *)(v46 + 1256) = 0u;
      *(_OWORD *)(v46 + 1272) = 0u;
      *(_OWORD *)(v46 + 1288) = 0u;
      DSP_Host_Types::ConfigurationChangeRequest::ConfigurationChangeRequest((DSP_Host_Types::ConfigurationChangeRequest *)(v46 + 1312));
      *(_QWORD *)(v46 + 1312) = &off_1E699A370;
      *(_OWORD *)(v46 + 1992) = 0u;
      v245.__r_.__value_.__r.__words[2] = v46;
      v48 = a2->u64[1];
      v47 = a2[1].u64[0];
      if (v48 >= v47)
      {
        v51 = (_DWORD *)a2->i64[0];
        v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - a2->i64[0]) >> 3);
        v53 = v52 + 1;
        if (v52 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - (_QWORD)v51) >> 3);
        if (2 * v54 > v53)
          v53 = 2 * v54;
        if (v54 >= 0x555555555555555)
          v55 = 0xAAAAAAAAAAAAAAALL;
        else
          v55 = v53;
        if (v55 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v56 = (char *)operator new(24 * v55);
        v57 = &v56[24 * v52];
        *(_QWORD *)v57 = v245.__r_.__value_.__r.__words[0];
        *((_DWORD *)v57 + 2) = v245.__r_.__value_.__r.__words[1];
        *((_QWORD *)v57 + 2) = v46;
        if ((_DWORD *)v48 == v51)
        {
          v62 = vdupq_n_s64(v48);
          v58 = &v56[24 * v52];
          v50 = v230;
        }
        else
        {
          v58 = &v56[24 * v52];
          v50 = v230;
          do
          {
            v59 = *(_QWORD *)(v48 - 24);
            v48 -= 24;
            v60 = *(_DWORD *)(v48 + 8);
            *((_QWORD *)v58 - 3) = v59;
            v58 -= 24;
            *((_DWORD *)v58 + 2) = v60;
            v61 = *(_QWORD *)(v48 + 16);
            *(_QWORD *)(v48 + 16) = 0;
            *((_QWORD *)v58 + 2) = v61;
          }
          while ((_DWORD *)v48 != v51);
          v62 = *a2;
        }
        v49 = (unint64_t)(v57 + 24);
        a2->i64[0] = (uint64_t)v58;
        a2->i64[1] = (uint64_t)(v57 + 24);
        a2[1].i64[0] = (uint64_t)&v56[24 * v55];
        v63 = v62.i64[1];
        v64 = (void *)v62.i64[0];
        if (v62.i64[1] != v62.i64[0])
        {
          do
          {
            v65 = (void *)(v63 - 24);
            std::unique_ptr<HALS_IOContextHostedDSP::DSPStreamInstance>::reset[abi:ne180100]((uint64_t *)(v63 - 8), 0);
            v63 = (uint64_t)v65;
          }
          while (v65 != v64);
        }
        if (v64)
          operator delete(v64);
      }
      else
      {
        *(_QWORD *)v48 = v245.__r_.__value_.__r.__words[0];
        *(_DWORD *)(v48 + 8) = v245.__r_.__value_.__r.__words[1];
        *(_QWORD *)(v48 + 16) = v46;
        v49 = v48 + 24;
        v50 = v230;
      }
      a2->i64[1] = v49;
      v66 = *(_QWORD *)(v49 - 8);
      if (!v66)
      {
        std::unique_ptr<HALS_IOContextHostedDSP::DSPStreamInstance>::reset[abi:ne180100]((uint64_t *)(v49 - 8), 0);
        a2->i64[1] = v49 - 24;
LABEL_292:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v239.__r_.__value_.__l.__data_);
        return;
      }
      std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>((std::string *)(v66 + 56), &v239);
      std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>((std::string *)(v66 + 104), &__p);
      v67 = (std::string *)operator new(0x20uLL);
      v67->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E6993DA8;
      v67->__r_.__value_.__l.__size_ = (std::string::size_type)HALS_IOContextHostedDSP::DSPStreamInstance::CustomPropertyListenerCallback;
      p_size = &v67->__r_.__value_.__l.__size_;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67[1].__r_.__value_.__r.__words[0] = v66;
      v262 = v67;
      buf.__r_.__value_.__r.__words[0] = v66 + 16;
      v258 = 0;
      v69 = (char *)operator new(0x20uLL);
      *(_QWORD *)v69 = &off_1E6993DA8;
      *(_OWORD *)(v69 + 8) = *(_OWORD *)p_size;
      *((_QWORD *)v69 + 3) = p_size[2];
      v260 = v69;
      v240 = 0;
      v241 = 0;
      HALS_System::GetInstance(&v242, 0, &v240);
      v71 = 0uLL;
      v244 = 0u;
      v72 = *(_QWORD **)(v242 + 1504);
      if (!v72)
      {
LABEL_183:
        LODWORD(v132) = v17;
        v244 = 0uLL;
        v133 = *(std::__shared_weak_count **)(v66 + 144);
        *(_OWORD *)(v66 + 136) = v71;
        if (v133)
        {
          v134 = (unint64_t *)&v133->__shared_owners_;
          do
            v135 = __ldaxr(v134);
          while (__stlxr(v135 - 1, v134));
          if (!v135)
          {
            ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
            std::__shared_weak_count::__release_weak(v133);
            LODWORD(v132) = v17;
          }
        }
        v136 = (std::__shared_weak_count *)*((_QWORD *)&v244 + 1);
        if (*((_QWORD *)&v244 + 1))
        {
          v137 = (unint64_t *)(*((_QWORD *)&v244 + 1) + 8);
          do
            v138 = __ldaxr(v137);
          while (__stlxr(v138 - 1, v137));
          if (!v138)
          {
            v231 = v132;
            ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
            std::__shared_weak_count::__release_weak(v136);
            LODWORD(v132) = v231;
          }
        }
        HIDWORD(v132) = v228;
        v139 = v243;
        if (v243)
        {
          v140 = (unint64_t *)&v243->__shared_owners_;
          do
            v141 = __ldaxr(v140);
          while (__stlxr(v141 - 1, v140));
          if (!v141)
          {
            v232 = v132;
            ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
            std::__shared_weak_count::__release_weak(v139);
            v132 = v232;
          }
        }
        v142 = v241;
        if (v241)
        {
          v143 = (unint64_t *)&v241->__shared_owners_;
          do
            v144 = __ldaxr(v143);
          while (__stlxr(v144 - 1, v143));
          if (!v144)
          {
            v233 = v132;
            ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
            std::__shared_weak_count::__release_weak(v142);
            v132 = v233;
          }
        }
        *(_QWORD *)(v66 + 4) = v132;
        *(_DWORD *)v66 = v229;
        *(_DWORD *)(v66 + 316) = v50;
        *(_DWORD *)(v66 + 12) = a3;
        *(_DWORD *)(v66 + 320) = v19;
        AMCP::Log::Scope_Registry::get(v70);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v245, "com.apple.coreaudio", "AMCP");
        v145 = (std::__shared_weak_count *)v245.__r_.__value_.__l.__size_;
        v146 = *(NSObject **)v245.__r_.__value_.__l.__data_;
        if (v245.__r_.__value_.__l.__size_)
        {
          v147 = (unint64_t *)(v245.__r_.__value_.__l.__size_ + 8);
          do
            v148 = __ldaxr(v147);
          while (__stlxr(v148 - 1, v147));
          if (!v148)
          {
            ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
            std::__shared_weak_count::__release_weak(v145);
          }
        }
        if (os_log_type_enabled(v146, OS_LOG_TYPE_DEBUG))
        {
          v202 = pthread_self();
          v203 = pthread_mach_thread_np(v202);
          v205 = *(_DWORD *)(v66 + 4);
          v204 = *(_DWORD *)(v66 + 8);
          v206 = *(_DWORD *)(v66 + 316);
          v207 = *(_DWORD *)v66;
          LODWORD(v245.__r_.__value_.__l.__data_) = 67110914;
          HIDWORD(v245.__r_.__value_.__r.__words[0]) = v203;
          LOWORD(v245.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v245.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALS_IOContextHostedDSP.cpp";
          WORD1(v245.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v245.__r_.__value_.__r.__words[2]) = 85;
          *(_WORD *)v246 = 2048;
          *(_QWORD *)&v246[2] = v66;
          v247 = 1024;
          v248 = v205;
          v249 = 1024;
          v250 = v204;
          v251 = 1024;
          v252 = v206;
          v253 = 1024;
          v254 = v207;
          _os_log_debug_impl(&dword_1B57BA000, v146, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] %p Creating IO processor for (Device ID: %u (%u)) (Context ID: %u) (Client ID: %u)", (uint8_t *)&v245, 0x3Au);
        }
        v149 = operator new(0x40uLL);
        v149[1] = 0;
        v149[2] = 0;
        *v149 = &off_1E6993E68;
        v149[3] = &off_1E698EBB0;
        *((_DWORD *)v149 + 8) = 0;
        v149[5] = 1;
        v150 = mach_absolute_time();
        v149[6] = v150;
        v149[7] = v150;
        v149[5] = 0;
        v245.__r_.__value_.__r.__words[0] = (std::string::size_type)(v149 + 3);
        v245.__r_.__value_.__l.__size_ = (std::string::size_type)v149;
        std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v66 + 352, (__int128 *)&v245);
        v151 = (std::__shared_weak_count *)v245.__r_.__value_.__l.__size_;
        v152 = v259;
        if (v245.__r_.__value_.__l.__size_)
        {
          v153 = (unint64_t *)(v245.__r_.__value_.__l.__size_ + 8);
          do
            v154 = __ldaxr(v153);
          while (__stlxr(v154 - 1, v153));
          if (!v154)
          {
            ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
            std::__shared_weak_count::__release_weak(v151);
          }
        }
        *(_DWORD *)(*(_QWORD *)(v66 + 352) + 8) = *(_DWORD *)(v66 + 316);
        if (v260 == v259)
        {
          v156 = 4;
          v155 = &buf.__r_.__value_.__l.__size_;
        }
        else
        {
          v155 = &buf.__r_.__value_.__l.__size_;
          if (!v260)
            goto LABEL_220;
          v156 = 5;
          v152 = v260;
        }
        (*(void (**)(_QWORD *))(*v152 + 8 * v156))(v152);
LABEL_220:
        if (v258 == (std::string *)&buf.__r_.__value_.__r.__words[1])
        {
          v157 = 4;
        }
        else
        {
          if (!v258)
            goto LABEL_225;
          v157 = 5;
          v155 = (std::string::size_type *)v258;
        }
        (*(void (**)(std::string::size_type *))(*v155 + 8 * v157))(v155);
LABEL_225:
        v158 = v262;
        if (v262 == &v261)
        {
          v159 = 4;
          v158 = &v261;
        }
        else
        {
          if (!v262)
          {
LABEL_230:
            v160 = (int64x2_t *)a2[1].i64[1];
            v162 = *(_QWORD *)(v66 + 352);
            v161 = *(std::__shared_weak_count **)(v66 + 360);
            v245.__r_.__value_.__r.__words[0] = v162;
            v245.__r_.__value_.__l.__size_ = (std::string::size_type)v161;
            if (v161)
            {
              v163 = (unint64_t *)&v161->__shared_owners_;
              do
                v164 = __ldxr(v163);
              while (__stxr(v164 + 1, v163));
              v165 = (uint64_t *)v160->i64[0];
              v166 = &v160->i64[1];
              v167 = (uint64_t *)v160->i64[1];
              v168 = (unint64_t *)&v161->__shared_owners_;
              do
                v169 = __ldxr(v168);
              while (__stxr(v169 + 1, v168));
            }
            else
            {
              v165 = (uint64_t *)v160->i64[0];
              v166 = &v160->i64[1];
              v167 = (uint64_t *)v160->i64[1];
            }
            if (v165 != v167)
            {
              while (1)
              {
                v171 = *v165;
                v170 = (std::__shared_weak_count *)v165[1];
                if (v170)
                {
                  v172 = (unint64_t *)&v170->__shared_owners_;
                  do
                    v173 = __ldxr(v172);
                  while (__stxr(v173 + 1, v172));
                  do
                    v174 = __ldaxr(v172);
                  while (__stlxr(v174 - 1, v172));
                  if (!v174)
                  {
                    ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                    std::__shared_weak_count::__release_weak(v170);
                  }
                }
                if (v171 == v162)
                  break;
                v165 += 2;
                if (v165 == v167)
                {
                  v165 = v167;
                  break;
                }
              }
            }
            if (v161)
            {
              v175 = (unint64_t *)&v161->__shared_owners_;
              do
                v176 = __ldaxr(v175);
              while (__stlxr(v176 - 1, v175));
              if (!v176)
              {
                ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                std::__shared_weak_count::__release_weak(v161);
              }
            }
            if (v165 == (uint64_t *)*v166)
            {
              if (v245.__r_.__value_.__r.__words[0])
              {
                v183 = v160[1].u64[0];
                if ((unint64_t)v165 >= v183)
                {
                  v188 = ((uint64_t)v165 - v160->i64[0]) >> 4;
                  if ((unint64_t)(v188 + 1) >> 60)
                    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                  v189 = v183 - v160->i64[0];
                  v190 = v189 >> 3;
                  if (v189 >> 3 <= (unint64_t)(v188 + 1))
                    v190 = v188 + 1;
                  if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFF0)
                    v191 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v191 = v190;
                  if (v191 >> 60)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v192 = (char *)operator new(16 * v191);
                  v193 = &v192[16 * v188];
                  v194 = v245.__r_.__value_.__l.__size_;
                  *(_OWORD *)v193 = *(_OWORD *)&v245.__r_.__value_.__l.__data_;
                  if (v194)
                  {
                    v195 = (unint64_t *)(v194 + 8);
                    do
                      v196 = __ldxr(v195);
                    while (__stxr(v196 + 1, v195));
                  }
                  v198 = (_QWORD *)v160->i64[0];
                  v197 = (_QWORD *)v160->i64[1];
                  if (v197 == (_QWORD *)v160->i64[0])
                  {
                    v201 = vdupq_n_s64((unint64_t)v197);
                    v199 = &v192[16 * v188];
                  }
                  else
                  {
                    v199 = &v192[16 * v188];
                    do
                    {
                      v200 = *((_OWORD *)v197 - 1);
                      v197 -= 2;
                      *((_OWORD *)v199 - 1) = v200;
                      v199 -= 16;
                      *v197 = 0;
                      v197[1] = 0;
                    }
                    while (v197 != v198);
                    v201 = *v160;
                  }
                  v187 = v193 + 16;
                  v160->i64[0] = (uint64_t)v199;
                  v160->i64[1] = (uint64_t)(v193 + 16);
                  v160[1].i64[0] = (uint64_t)&v192[16 * v191];
                  v208 = v201.i64[1];
                  v209 = (void *)v201.i64[0];
                  while ((void *)v208 != v209)
                    v208 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v208 - 16);
                  if (v209)
                    operator delete(v209);
                }
                else
                {
                  *v165 = v245.__r_.__value_.__r.__words[0];
                  v184 = v245.__r_.__value_.__l.__size_;
                  v165[1] = v245.__r_.__value_.__l.__size_;
                  if (v184)
                  {
                    v185 = (unint64_t *)(v184 + 8);
                    do
                      v186 = __ldxr(v185);
                    while (__stxr(v186 + 1, v185));
                  }
                  v187 = v165 + 2;
                }
                *v166 = (uint64_t)v187;
              }
            }
            else
            {
              AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v158);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
              v177 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
              v178 = *(NSObject **)buf.__r_.__value_.__l.__data_;
              if (buf.__r_.__value_.__l.__size_)
              {
                v179 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
                do
                  v180 = __ldaxr(v179);
                while (__stlxr(v180 - 1, v179));
                if (!v180)
                {
                  ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                  std::__shared_weak_count::__release_weak(v177);
                }
              }
              if (os_log_type_enabled(v178, OS_LOG_TYPE_ERROR))
              {
                v181 = pthread_self();
                v182 = pthread_mach_thread_np(v181);
                LODWORD(buf.__r_.__value_.__l.__data_) = 67109634;
                HIDWORD(buf.__r_.__value_.__r.__words[0]) = v182;
                LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALB_InstrumentedEvent.cpp";
                WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
                HIDWORD(buf.__r_.__value_.__r.__words[2]) = 71;
                _os_log_error_impl(&dword_1B57BA000, v178, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Adding an item that already exist is unsupported.", (uint8_t *)&buf, 0x18u);
              }
            }
            v210 = (std::__shared_weak_count *)v245.__r_.__value_.__l.__size_;
            if (v245.__r_.__value_.__l.__size_)
            {
              v211 = (unint64_t *)(v245.__r_.__value_.__l.__size_ + 8);
              do
                v212 = __ldaxr(v211);
              while (__stlxr(v212 - 1, v211));
              if (!v212)
              {
                ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                std::__shared_weak_count::__release_weak(v210);
              }
            }
            goto LABEL_292;
          }
          v159 = 5;
        }
        v158 = (std::string *)(*(uint64_t (**)(void))(v158->__r_.__value_.__r.__words[0] + 8 * v159))();
        goto LABEL_230;
      }
      v73 = v72[2];
      if (!v73 || (v74 = *(void **)(v73 + 8)) == 0)
      {
        v244 = 0uLL;
LABEL_182:
        v71 = v244;
        goto LABEL_183;
      }
      v227 = v74;
      v75 = (std::__shared_weak_count *)v72[1];
      *(_QWORD *)&v263 = *v72;
      if (!v75 || (*((_QWORD *)&v263 + 1) = std::__shared_weak_count::lock(v75)) == 0)
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v76 = (char *)operator new(0x50uLL);
      *(_OWORD *)(v76 + 8) = 0u;
      *(_QWORD *)v76 = &off_1E699EAA0;
      *(_OWORD *)&v235.__r_.__value_.__l.__data_ = v263;
      v77 = v263;
      v263 = 0u;
      *((_QWORD *)v76 + 3) = &off_1E699E700;
      v78 = (std::string::size_type)(v76 + 24);
      *((_OWORD *)v76 + 2) = v77;
      v79 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
      if (*((_QWORD *)&v77 + 1))
      {
        v80 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
        do
          v81 = __ldxr(v80);
        while (__stxr(v81 + 1, v80));
      }
      v225 = (std::string::size_type)v76;
      *((_OWORD *)v76 + 3) = 0uLL;
      *((_OWORD *)v76 + 4) = 0uLL;
      v82 = (id *)(v76 + 48);
      if (!(_QWORD)v77)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v76);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v245, "com.apple.coreaudio", "AMCP");
        v219 = *(NSObject **)v245.__r_.__value_.__l.__data_;
        AMCP::Log::Scope::get_os_log_t(*(id *)v245.__r_.__value_.__l.__data_);
        objc_claimAutoreleasedReturnValue();
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v245);
        if (os_log_type_enabled(v219, OS_LOG_TYPE_ERROR))
        {
          v220 = pthread_self();
          v221 = pthread_mach_thread_np(v220);
          LODWORD(v245.__r_.__value_.__l.__data_) = 67109890;
          HIDWORD(v245.__r_.__value_.__r.__words[0]) = v221;
          LOWORD(v245.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v245.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"DSP_Host.mm";
          WORD1(v245.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v245.__r_.__value_.__r.__words[2]) = 148;
          *(_WORD *)v246 = 2080;
          *(_QWORD *)&v246[2] = "nullptr != owner";
          _os_log_error_impl(&dword_1B57BA000, v219, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s DSP Host owner must not be null", (uint8_t *)&v245, 0x22u);
        }

        abort();
      }
      if (!*(_QWORD *)(v77 + 16))
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v76);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v245, "com.apple.coreaudio", "AMCP");
        v222 = *(NSObject **)v245.__r_.__value_.__l.__data_;
        AMCP::Log::Scope::get_os_log_t(*(id *)v245.__r_.__value_.__l.__data_);
        objc_claimAutoreleasedReturnValue();
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v245);
        if (os_log_type_enabled(v222, OS_LOG_TYPE_ERROR))
        {
          v223 = pthread_self();
          v224 = pthread_mach_thread_np(v223);
          LODWORD(v245.__r_.__value_.__l.__data_) = 67109890;
          HIDWORD(v245.__r_.__value_.__r.__words[0]) = v224;
          LOWORD(v245.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v245.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"DSP_Host.mm";
          WORD1(v245.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v245.__r_.__value_.__r.__words[2]) = 149;
          *(_WORD *)v246 = 2080;
          *(_QWORD *)&v246[2] = "nullptr != owner->m_objcFactory";
          _os_log_error_impl(&dword_1B57BA000, v222, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s DSP Host owner's factory reference must not be null", (uint8_t *)&v245, 0x22u);
        }

        abort();
      }
      v83 = objc_alloc_init(DSP_HostCallbacks);
      v84 = *v82;
      *v82 = v83;

      objc_msgSend(*v82, "setOwner:", v78);
      v85 = *v82;
      v86 = (uint64_t)v258;
      if (v258)
      {
        if (v258 == (std::string *)&buf.__r_.__value_.__r.__words[1])
        {
          *(_QWORD *)v246 = &v245;
          (*(void (**)(std::string::size_type *, std::string *))(buf.__r_.__value_.__l.__size_ + 24))(&buf.__r_.__value_.__l.__size_, &v245);
LABEL_110:
          objc_msgSend(v85, "setMutationRequestListener:", &v245);
          v87 = *(std::string **)v246;
          if (*(std::string **)v246 == &v245)
          {
            v88 = 4;
            v87 = &v245;
          }
          else
          {
            if (!*(_QWORD *)v246)
              goto LABEL_115;
            v88 = 5;
          }
          (*(void (**)(void))(v87->__r_.__value_.__r.__words[0] + 8 * v88))();
LABEL_115:
          v89 = *v82;
          v90 = (uint64_t)v260;
          if (v260)
          {
            if (v260 == v259)
            {
              v265 = &v264;
              (*(void (**)(_QWORD *, std::string *))(v259[0] + 24))(v259, &v264);
LABEL_120:
              objc_msgSend(v89, "setPropertyChangeListener:", &v264);
              v91 = v265;
              if (v265 == &v264)
              {
                v93 = 4;
                v91 = &v264;
                v92 = v225;
              }
              else
              {
                v92 = v225;
                if (!v265)
                {
LABEL_125:
                  if (v79)
                  {
                    v94 = (unint64_t *)&v79->__shared_owners_;
                    do
                      v95 = __ldaxr(v94);
                    while (__stlxr(v95 - 1, v94));
                    if (!v95)
                    {
                      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                      std::__shared_weak_count::__release_weak(v79);
                    }
                  }
                  v234.__r_.__value_.__r.__words[0] = v78;
                  v234.__r_.__value_.__l.__size_ = v92;
                  v96 = (std::__shared_weak_count *)*((_QWORD *)&v263 + 1);
                  if (*((_QWORD *)&v263 + 1))
                  {
                    v97 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
                    do
                      v98 = __ldaxr(v97);
                    while (__stlxr(v98 - 1, v97));
                    if (!v98)
                    {
                      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                      std::__shared_weak_count::__release_weak(v96);
                    }
                  }
                  v99 = buf.__r_.__value_.__r.__words[0];
                  v245.__r_.__value_.__r.__words[0] = (std::string::size_type)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
                  (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v99 + 24))(v99, &v245);
                  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v264, v245.__r_.__value_.__l.__data_);
                  if (v245.__r_.__value_.__r.__words[0])
                    CFRelease(v245.__r_.__value_.__l.__data_);
                  v100 = v264.__r_.__value_.__l.__data_;
                  v101 = v234.__r_.__value_.__r.__words[0];
                  objc_msgSend(v227, "createProcessor:withHost:", v100, *(_QWORD *)(v234.__r_.__value_.__r.__words[0] + 24));
                  v102 = objc_claimAutoreleasedReturnValue();
                  v103 = *(void **)(v101 + 32);
                  *(_QWORD *)(v101 + 32) = v102;

                  if (v264.__r_.__value_.__r.__words[0])
                    CFRelease(v264.__r_.__value_.__l.__data_);
                  if (!*(_QWORD *)(v101 + 32))
                  {
                    AMCP::Log::Scope_Registry::get(0);
                    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v245, "com.apple.coreaudio", "AMCP");
                    v104 = *(NSObject **)v245.__r_.__value_.__l.__data_;
                    AMCP::Log::Scope::get_os_log_t(*(id *)v245.__r_.__value_.__l.__data_);
                    objc_claimAutoreleasedReturnValue();
                    v105 = (std::__shared_weak_count *)v245.__r_.__value_.__l.__size_;
                    if (v245.__r_.__value_.__l.__size_)
                    {
                      v106 = (unint64_t *)(v245.__r_.__value_.__l.__size_ + 8);
                      do
                        v107 = __ldaxr(v106);
                      while (__stlxr(v107 - 1, v106));
                      if (!v107)
                      {
                        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                        std::__shared_weak_count::__release_weak(v105);
                      }
                    }
                    if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
                    {
                      v215 = pthread_self();
                      v216 = pthread_mach_thread_np(v215);
                      LODWORD(v245.__r_.__value_.__l.__data_) = 67109634;
                      HIDWORD(v245.__r_.__value_.__r.__words[0]) = v216;
                      LOWORD(v245.__r_.__value_.__r.__words[1]) = 2080;
                      *(std::string::size_type *)((char *)&v245.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"DSP_Host.mm";
                      WORD1(v245.__r_.__value_.__r.__words[2]) = 1024;
                      HIDWORD(v245.__r_.__value_.__r.__words[2]) = 463;
                      _os_log_error_impl(&dword_1B57BA000, v104, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp] Unable to allocate a processor from the Hosted DSP libary", (uint8_t *)&v245, 0x18u);
                    }

                    v101 = v234.__r_.__value_.__r.__words[0];
                    if (!*(_QWORD *)(v234.__r_.__value_.__r.__words[0] + 32))
                      goto LABEL_177;
                  }
                  v108 = objc_opt_respondsToSelector();
                  if ((v108 & 1) != 0)
                  {
                    objc_msgSend(*(id *)(v101 + 32), "getProcessorPropertySet");
                    v109 = (void *)objc_claimAutoreleasedReturnValue();
                    if (!v109)
                      goto LABEL_163;
                    v110 = operator new(0x30uLL);
                    v110[1] = 0;
                    v110[2] = 0;
                    *v110 = &off_1E699EA18;
                    v111 = *(id *)(v101 + 32);
                    v112 = v109;
                    v110[3] = &off_1E699E698;
                    v110[4] = v111;
                    v110[5] = v112;
                    v245.__r_.__value_.__r.__words[0] = (std::string::size_type)(v110 + 3);
                    v245.__r_.__value_.__l.__size_ = (std::string::size_type)v110;
                    std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v101 + 40, (__int128 *)&v245);
                    v113 = (std::__shared_weak_count *)v245.__r_.__value_.__l.__size_;
                    if (v245.__r_.__value_.__l.__size_)
                    {
                      v114 = (unint64_t *)(v245.__r_.__value_.__l.__size_ + 8);
                      do
                        v115 = __ldaxr(v114);
                      while (__stlxr(v115 - 1, v114));
                      if (!v115)
                      {
                        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                        std::__shared_weak_count::__release_weak(v113);
                      }
                    }
                  }
                  else
                  {
                    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v108);
                    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v245, "com.apple.coreaudio", "AMCP");
                    v112 = *(NSObject **)v245.__r_.__value_.__l.__data_;
                    AMCP::Log::Scope::get_os_log_t(*(id *)v245.__r_.__value_.__l.__data_);
                    objc_claimAutoreleasedReturnValue();
                    v116 = (std::__shared_weak_count *)v245.__r_.__value_.__l.__size_;
                    if (v245.__r_.__value_.__l.__size_)
                    {
                      v117 = (unint64_t *)(v245.__r_.__value_.__l.__size_ + 8);
                      do
                        v118 = __ldaxr(v117);
                      while (__stlxr(v118 - 1, v117));
                      if (!v118)
                      {
                        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                        std::__shared_weak_count::__release_weak(v116);
                      }
                    }
                    if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
                    {
                      v213 = pthread_self();
                      v214 = pthread_mach_thread_np(v213);
                      LODWORD(v245.__r_.__value_.__l.__data_) = 67109634;
                      HIDWORD(v245.__r_.__value_.__r.__words[0]) = v214;
                      LOWORD(v245.__r_.__value_.__r.__words[1]) = 2080;
                      *(std::string::size_type *)((char *)&v245.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"DSP_Host.mm";
                      WORD1(v245.__r_.__value_.__r.__words[2]) = 1024;
                      HIDWORD(v245.__r_.__value_.__r.__words[2]) = 262;
                      _os_log_error_impl(&dword_1B57BA000, v112, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp] Unable to acquire processor properties interface from the Hosted DSP processing instance", (uint8_t *)&v245, 0x18u);
                    }
                  }

LABEL_163:
                  if (!*(_QWORD *)(v101 + 40))
                  {
                    v119 = operator new(0x30uLL);
                    v119[1] = 0;
                    v119[2] = 0;
                    *v119 = &off_1E699EA18;
                    v120 = *(id *)(v101 + 32);
                    v119[3] = &off_1E699E698;
                    v119[4] = v120;
                    v119[5] = 0;
                    v245.__r_.__value_.__r.__words[0] = (std::string::size_type)(v119 + 3);
                    v245.__r_.__value_.__l.__size_ = (std::string::size_type)v119;
                    v121 = (AMCP::Log::Scope_Registry *)std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v101 + 40, (__int128 *)&v245);
                    v122 = (std::__shared_weak_count *)v245.__r_.__value_.__l.__size_;
                    if (v245.__r_.__value_.__l.__size_)
                    {
                      v123 = (unint64_t *)(v245.__r_.__value_.__l.__size_ + 8);
                      do
                        v124 = __ldaxr(v123);
                      while (__stlxr(v124 - 1, v123));
                      if (!v124)
                      {
                        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                        std::__shared_weak_count::__release_weak(v122);
                      }
                    }
                    AMCP::Log::Scope_Registry::get(v121);
                    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v245, "com.apple.coreaudio", "AMCP");
                    v125 = *(NSObject **)v245.__r_.__value_.__l.__data_;
                    AMCP::Log::Scope::get_os_log_t(*(id *)v245.__r_.__value_.__l.__data_);
                    objc_claimAutoreleasedReturnValue();
                    v126 = (std::__shared_weak_count *)v245.__r_.__value_.__l.__size_;
                    if (v245.__r_.__value_.__l.__size_)
                    {
                      v127 = (unint64_t *)(v245.__r_.__value_.__l.__size_ + 8);
                      do
                        v128 = __ldaxr(v127);
                      while (__stlxr(v128 - 1, v127));
                      if (!v128)
                      {
                        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                        std::__shared_weak_count::__release_weak(v126);
                      }
                    }
                    if (os_log_type_enabled(v125, OS_LOG_TYPE_DEBUG))
                    {
                      v217 = pthread_self();
                      v218 = pthread_mach_thread_np(v217);
                      LODWORD(v245.__r_.__value_.__l.__data_) = 67109634;
                      HIDWORD(v245.__r_.__value_.__r.__words[0]) = v218;
                      LOWORD(v245.__r_.__value_.__r.__words[1]) = 2080;
                      *(std::string::size_type *)((char *)&v245.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"DSP_Host.mm";
                      WORD1(v245.__r_.__value_.__r.__words[2]) = 1024;
                      HIDWORD(v245.__r_.__value_.__r.__words[2]) = 268;
                      _os_log_debug_impl(&dword_1B57BA000, v125, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] Using legacy custom properties methods from the Hosted DSP processing instance", (uint8_t *)&v245, 0x18u);
                    }

                  }
LABEL_177:
                  v226 = *(_OWORD *)&v234.__r_.__value_.__l.__data_;

                  v129 = (std::__shared_weak_count *)*((_QWORD *)&v244 + 1);
                  v244 = v226;
                  v50 = v230;
                  if (v129)
                  {
                    v130 = (unint64_t *)&v129->__shared_owners_;
                    do
                      v131 = __ldaxr(v130);
                    while (__stlxr(v131 - 1, v130));
                    if (!v131)
                    {
                      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                      std::__shared_weak_count::__release_weak(v129);
                    }
                  }
                  goto LABEL_182;
                }
                v93 = 5;
              }
              (*(void (**)(void))(v91->__r_.__value_.__r.__words[0] + 8 * v93))();
              goto LABEL_125;
            }
            v90 = (*(uint64_t (**)(void))(*v260 + 16))();
          }
          v265 = (std::string *)v90;
          goto LABEL_120;
        }
        v86 = (*(uint64_t (**)(void))(v258->__r_.__value_.__r.__words[0] + 16))();
      }
      *(_QWORD *)v246 = v86;
      goto LABEL_110;
    }
  }
}

void sub_1B5BB3D98(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, void *a13, uint64_t a14, _Unwind_Exception *exception_objecta, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,char a43,uint64_t a44,char a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t buf,__int128 a56)
{
  void *v56;
  uint64_t v57;
  void *v58;
  _QWORD *v59;
  uint64_t v60;
  AMCP::Log::Scope_Registry *v61;
  NSObject *v62;
  _opaque_pthread_t *v63;
  mach_port_t v64;

  if (!a2)
    _Unwind_Resume(a1);

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11[2].__shared_weak_owners_);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::__shared_weak_count::~__shared_weak_count(a11);
  operator delete(v58);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v57 - 160);

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  DSP_Host_ProcessorInitData::~DSP_Host_ProcessorInitData((DSP_Host_ProcessorInitData *)&buf);
  v59 = *(_QWORD **)(v57 - 168);
  if (v59 == (_QWORD *)(v57 - 192))
  {
    v60 = 4;
    v59 = (_QWORD *)(v57 - 192);
  }
  else
  {
    if (!v59)
      goto LABEL_7;
    v60 = 5;
  }
  (*(void (**)(_QWORD *))(*v59 + 8 * v60))(v59);
LABEL_7:
  if (a34 < 0)
    operator delete(__p);
  if (a40 < 0)
    operator delete(a35);
  v61 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(a1);
  AMCP::Log::Scope_Registry::get(v61);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
  v62 = *(NSObject **)buf;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
  if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
  {
    v63 = pthread_self();
    v64 = pthread_mach_thread_np(v63);
    LODWORD(buf) = 67109634;
    HIDWORD(buf) = v64;
    LOWORD(a56) = 2080;
    *(_QWORD *)((char *)&a56 + 2) = "HALS_IOContextHostedDSP.cpp";
    WORD5(a56) = 1024;
    HIDWORD(a56) = 907;
    _os_log_error_impl(&dword_1B57BA000, v62, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp] Initialize/create encountered an unknown error.", (uint8_t *)&buf, 0x18u);
  }
  __cxa_end_catch();
  JUMPOUT(0x1B5BB3A6CLL);
}

void std::__function::__func<HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_1,std::allocator<HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_1>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_1,std::allocator<HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_1>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E6994138;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_1,std::allocator<HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_1>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6994138;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_1,std::allocator<HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_1>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::operator()(uint64_t a1, uint64_t *a2)
{
  HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_0::operator()((unsigned int *)(a1 + 8), *(int64x2_t **)(a1 + 24), 1768845428, *a2);
  return 0;
}

uint64_t std::__function::__func<HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_1,std::allocator<HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_1>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN23HALS_IOContextHostedDSP10InitializeER25HALS_IOContextDescriptionjjE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_1,std::allocator<HALS_IOContextHostedDSP::Initialize(HALS_IOContextDescription &,unsigned int,unsigned int)::$_1>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target_type()
{
}

void HALS_IOContextHostedDSP::Remove(HALS_IOContextHostedDSP *this, HALS_IOContextDescription *a2, int a3, int a4, int a5, HALS_MutationChangeSynchronizer *a6, HALS_MutationChangeSynchronizer *a7)
{
  HALS_MutationChangeSynchronizer *v7;
  _QWORD v8[3];
  __int16 v9;
  _QWORD *v10;
  _QWORD v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  int v16;

  v11[0] = 0;
  v11[1] = 0;
  v7 = (HALS_MutationChangeSynchronizer *)v8;
  memset(v8, 0, sizeof(v8));
  v9 = 0;
  v10 = v11;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  if (a6)
    v7 = a6;
  v15 = a4;
  v16 = a5;
  HALS_IOContextHostedDSP::Remove_Internal(this, a2, a3, v7);
  HALS_MutationChangeSynchronizer::~HALS_MutationChangeSynchronizer((HALS_MutationChangeSynchronizer *)v8);
}

void sub_1B5BB4458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HALS_MutationChangeSynchronizer::~HALS_MutationChangeSynchronizer((HALS_MutationChangeSynchronizer *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextHostedDSP *this, HALS_IOContextDescription *a2, int a3, HALS_MutationChangeSynchronizer *a4)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  result = (_QWORD *)HALS_IOContextHostedDSP::Negotiate_Internal((uint64_t)this, (uint64_t)a2, a3, (uint64_t)a4, 0);
  if ((_DWORD)result == 1685286515)
    return result;
  HALS_IOContextDescription::HostedDSPDescription::ResetRequests((HALS_IOContextDescription *)((char *)a2 + 256));
  v13[0] = &off_1E6994438;
  v13[1] = this;
  v14 = v13;
  HALS_IOContextDescription::ApplyToInput<>((uint64_t)a2, (uint64_t)v13);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
    goto LABEL_6;
  }
  if (v14)
  {
    v8 = 5;
LABEL_6:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  v11[0] = &off_1E69944B8;
  v11[1] = this;
  v12 = v11;
  v10[0] = &off_1E6996590;
  v10[1] = a2;
  HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>((uint64_t)a2, (uint64_t)v11, (uint64_t)v10);
  result = v12;
  if (v12 == v11)
  {
    v9 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_1B5BB4590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a15;
  if (a15 == v19)
  {
    v22 = 4;
    v21 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContextHostedDSP::Negotiate_Internal(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5)
{
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t result;
  char v19;
  _QWORD v20[2];
  _BYTE v21[4];
  __int128 v22;
  _BYTE v23[4];
  __int128 v24;
  _BYTE v25[24];
  _BYTE *v26;
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v23[0] = a5 & 1;
  v24 = xmmword_1B5D68DE0;
  v21[0] = a5 & 1;
  v22 = xmmword_1B5D68DF0;
  v10 = (char *)operator new(0x40uLL);
  *(_QWORD *)v10 = &off_1E6994238;
  *((_QWORD *)v10 + 1) = a1;
  *((_QWORD *)v10 + 2) = a2;
  *((_QWORD *)v10 + 3) = a4;
  v10[32] = a5;
  v10[35] = 0;
  *(_WORD *)(v10 + 33) = 0;
  *((_QWORD *)v10 + 5) = v23;
  *((_DWORD *)v10 + 12) = a3;
  *((_QWORD *)v10 + 7) = a1;
  v28 = v10;
  HALS_IOContextDescription::ApplyToInput(a2, (uint64_t)v27);
  v11 = v28;
  if (v28 == v27)
  {
    v12 = 4;
    v11 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  if (!(DWORD1(v24) | HIDWORD(v24)))
    HIDWORD(v24) = 1685286515;
  v13 = (char *)operator new(0x40uLL);
  *(_QWORD *)v13 = &off_1E69942B8;
  *((_QWORD *)v13 + 1) = a1;
  *((_QWORD *)v13 + 2) = a2;
  *((_QWORD *)v13 + 3) = a4;
  v13[32] = a5;
  v13[35] = 0;
  *(_WORD *)(v13 + 33) = 0;
  *((_QWORD *)v13 + 5) = v21;
  *((_QWORD *)v13 + 6) = a1;
  *((_DWORD *)v13 + 14) = a3;
  v26 = v13;
  HALS_IOContextDescription::ApplyToOutput<>(a2, (uint64_t)v25);
  v14 = v26;
  if (v26 == v25)
  {
    v15 = 4;
    v14 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_13;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_13:
  if (!(DWORD1(v22) | HIDWORD(v22)))
    HIDWORD(v22) = 1685286515;
  v16 = 0;
  v17 = 0;
  v20[0] = v23;
  v20[1] = v21;
  result = 1685286515;
  do
  {
    v19 = v16;
    if (*(_DWORD *)(v20[v17] + 16) != 1685286515 && ((_DWORD)result == 1685286515 || !(_DWORD)result))
      result = *(unsigned int *)(v20[v17] + 16);
    v16 = 1;
    v17 = 1;
  }
  while ((v19 & 1) == 0);
  return result;
}

void sub_1B5BB47E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a19;
  if (a19 == v23)
  {
    v26 = 4;
    v25 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &)::$_1,std::allocator<HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &)::$_1>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &)::$_1,std::allocator<HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &)::$_1>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E69944B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &)::$_1,std::allocator<HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &)::$_1>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E69944B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &)::$_1,std::allocator<HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &)::$_1>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::operator()(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unsigned int v8;
  std::__shared_weak_count *v10;
  NSObject *v11;
  unint64_t *v12;
  unint64_t v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  NSObject **v16;
  _BYTE v17[10];
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a6 + 416) = 0;
  if (*(_DWORD *)(a6 + 108))
  {
    v6 = *(_QWORD *)(a6 + 112);
    if (*(_QWORD *)(a6 + 120) != v6 && v6 != 0)
    {
      v8 = *(_DWORD *)(v6 + 96);
      if (v8 != *(_DWORD *)(a6 + 12))
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v16, "com.apple.coreaudio", "AMCP");
        v10 = *(std::__shared_weak_count **)v17;
        v11 = *v16;
        if (*(_QWORD *)v17)
        {
          v12 = (unint64_t *)(*(_QWORD *)v17 + 8);
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          v14 = pthread_self();
          v15 = pthread_mach_thread_np(v14);
          LODWORD(v16) = 67109890;
          HIDWORD(v16) = v15;
          *(_WORD *)v17 = 2080;
          *(_QWORD *)&v17[2] = "HALS_IOContextHostedDSP.cpp";
          v18 = 1024;
          v19 = 1400;
          v20 = 2080;
          v21 = "kDeviceStreamIndex == ioStreamInfo.mStreamIndex";
          _os_log_error_impl(&dword_1B57BA000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Primary DSP engine and stream device indicies do not match!", (uint8_t *)&v16, 0x22u);
        }
        abort();
      }
      HALS_IOContextHostedDSP::HostedDSPList::remove_at(a1[1], ((unint64_t)*(unsigned int *)(v6 + 8) << 32) | 0x6F757470, v8);
    }
  }
  return 0;
}

void sub_1B5BB4A20(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B5BB4910);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &)::$_1,std::allocator<HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &)::$_1>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN23HALS_IOContextHostedDSP15Remove_InternalER25HALS_IOContextDescriptionjR31HALS_MutationChangeSynchronizerE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &)::$_1,std::allocator<HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &)::$_1>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::target_type()
{
}

void std::__function::__func<HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &)::$_0,std::allocator<HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &)::$_0,std::allocator<HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6994438;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &)::$_0,std::allocator<HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6994438;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &)::$_0,std::allocator<HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::operator()(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *v9;
  unint64_t v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  NSObject **v13;
  _BYTE v14[10];
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  *(_BYTE *)(v2 + 416) = 0;
  if (*(_DWORD *)(v2 + 108))
  {
    v3 = *(_QWORD *)(v2 + 112);
    if (*(_QWORD *)(v2 + 120) != v3 && v3 != 0)
    {
      v5 = *(_DWORD *)(v3 + 96);
      if (v5 != *(_DWORD *)(v2 + 12))
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
        v7 = *(std::__shared_weak_count **)v14;
        v8 = *v13;
        if (*(_QWORD *)v14)
        {
          v9 = (unint64_t *)(*(_QWORD *)v14 + 8);
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          v11 = pthread_self();
          v12 = pthread_mach_thread_np(v11);
          LODWORD(v13) = 67109890;
          HIDWORD(v13) = v12;
          *(_WORD *)v14 = 2080;
          *(_QWORD *)&v14[2] = "HALS_IOContextHostedDSP.cpp";
          v15 = 1024;
          v16 = 1384;
          v17 = 2080;
          v18 = "kDeviceStreamIndex == item.m_item.mStreamIndex";
          _os_log_error_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Primary DSP engine and stream device indicies do not match!", (uint8_t *)&v13, 0x22u);
        }
        abort();
      }
      HALS_IOContextHostedDSP::HostedDSPList::remove_at(a1[1], ((unint64_t)*(unsigned int *)(v3 + 8) << 32) | 0x696E7074, v5);
    }
  }
  return 0;
}

void sub_1B5BB4C68(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B5BB4B58);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &)::$_0,std::allocator<HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN23HALS_IOContextHostedDSP15Remove_InternalER25HALS_IOContextDescriptionjR31HALS_MutationChangeSynchronizerE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &)::$_0,std::allocator<HALS_IOContextHostedDSP::Remove_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &)::$_0>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target_type()
{
}

void std::__function::__func<HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2,std::allocator<HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2,std::allocator<HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E69942B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2,std::allocator<HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E69942B8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2,std::allocator<HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  result = HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_0::operator()(a1 + 8, *(_QWORD *)(a1 + 40), *(_QWORD **)(a1 + 48), a6, *(_DWORD *)(a1 + 56));
  *(_DWORD *)(*(_QWORD *)(a1 + 40) + 16) = result;
  return result;
}

uint64_t std::__function::__func<HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2,std::allocator<HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN23HALS_IOContextHostedDSP18Negotiate_InternalER25HALS_IOContextDescriptionjR31HALS_MutationChangeSynchronizerNS_17DSPStreamInstance12RequestFlagsEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2,std::allocator<HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::target_type()
{
}

uint64_t HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_0::operator()(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, int a5)
{
  uint64_t v10;
  int v11;
  int NumberActiveStreams;
  BOOL v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  int v18;
  _DWORD *v19;
  _DWORD *v20;
  int v21;
  int v22;
  _DWORD *v23;
  int v25;
  uint64_t v26;
  HALS_IOContextDescription *v27;
  void **v28;
  const __CFString **v29[2];
  _QWORD *v30[2];
  __int128 v31;
  void *__p[2];
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v10 = 1685286515;
  v11 = *(_DWORD *)(a2 + 4);
  NumberActiveStreams = HALS_IOContextDescription::GetNumberActiveStreams(*(HALS_IOContextDescription **)(a1 + 8), v11 == 1768845428);
  if (*(_BYTE *)a2)
    v13 = NumberActiveStreams == 0;
  else
    v13 = 0;
  if (v13)
    return 1685286515;
  v14 = *(_QWORD *)(a4 + 112);
  if (*(_QWORD *)(a4 + 120) == v14 || v14 == 0)
    return 1685286515;
  v17 = *(_DWORD *)(a4 + 108);
  v18 = *(_DWORD *)(a2 + 12);
  if (v17)
    ++v18;
  *(_DWORD *)(a2 + 12) = v18;
  if (!v17)
    return v10;
  v19 = (_DWORD *)*a3;
  v20 = (_DWORD *)a3[1];
  if ((_DWORD *)*a3 == v20)
    return v10;
  v21 = *(_DWORD *)(v14 + 8);
  v22 = *(_DWORD *)(v14 + 96);
  v23 = (_DWORD *)*a3;
  while (*v23 != v11 || v23[1] != v21 || v23[2] != v22)
  {
    v23 += 6;
    if (v23 == v20)
      return v10;
  }
  if (v20 == v23)
    return v10;
  LOWORD(v29[0]) = 0;
  v30[0] = 0;
  v30[1] = 0;
  v29[1] = (const __CFString **)v30;
  v31 = 0u;
  *(_OWORD *)__p = 0u;
  v33 = 0u;
  ++*(_DWORD *)(a2 + 8);
  while (*v19 != v11 || v19[1] != v21 || v19[2] != v22)
  {
    v19 += 6;
    if (v19 == v20)
      goto LABEL_28;
  }
  if (v20 == v19 || (v26 = *((_QWORD *)v19 + 2)) == 0)
  {
LABEL_28:
    HALS_MutationChangeSynchronizer::SetItinerary(*(_QWORD **)(a1 + 16), (const MutationItinerary *)v29);
    v25 = 0;
    v16 = 1685286515;
    goto LABEL_29;
  }
  v16 = HALS_IOContextHostedDSP::DSPStreamInstance::Negotiate_NP(*((_QWORD *)v19 + 2), (uint64_t *)(a4 + 112), a5, *(_DWORD *)(a1 + 24), (uint64_t)v29);
  v10 = 1685283698;
  if ((_DWORD)v16 == 1685283698)
  {
    v25 = 0;
    v16 = 0;
  }
  else
  {
    if ((*(_BYTE *)(a1 + 24) & 4) == 0 && *(_DWORD *)(a2 + 4) == 1768845428)
      HALS_IOContextHostedDSP::UpdateDSPReferenceRequestInDescription((HALS_IOContextHostedDSP *)(v26 + 544), v29, *(int64x2_t **)(a1 + 8), v27);
    if ((_DWORD)v16)
    {
      v25 = 1;
      v10 = v16;
    }
    else
    {
      HALS_MutationChangeSynchronizer::SetItinerary(*(_QWORD **)(a1 + 16), (const MutationItinerary *)v29);
      v10 = 0;
      v25 = 1;
    }
  }
LABEL_29:
  if (__p[1])
  {
    *(void **)&v33 = __p[1];
    operator delete(__p[1]);
  }
  v28 = (void **)&v31;
  std::vector<MutationItinerary::Device>::__destroy_vector::operator()[abi:ne180100](&v28);
  std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(v30[0]);
  if (v25)
    return v10;
  return v16;
}

void sub_1B5BB5058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, NSObject **buf, __int128 a12, __int128 a13, uint64_t a14, __int128 a15, __int128 a16)
{
  uint64_t v16;
  AMCP::Log::Scope_Registry *v18;
  NSObject *v19;
  _QWORD *v20;
  _opaque_pthread_t *v21;
  mach_port_t v22;

  if (a2)
  {
    MutationItinerary::~MutationItinerary((MutationItinerary *)&buf);
    v18 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v18);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v19 = *buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v21 = pthread_self();
      v22 = pthread_mach_thread_np(v21);
      LODWORD(buf) = 67109891;
      HIDWORD(buf) = v22;
      LOWORD(a12) = 2080;
      *(_QWORD *)((char *)&a12 + 2) = "HALS_IOContextHostedDSP.cpp";
      WORD5(a12) = 1024;
      HIDWORD(a12) = 1150;
      LOWORD(a13) = 2081;
      *(_QWORD *)((char *)&a13 + 2) = "[hal_dsp] Negotiate_Internal encountered an unknown error.";
      _os_log_error_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d %{private}s", (uint8_t *)&buf, 0x22u);
    }
    v20 = *(_QWORD **)(v16 + 16);
    buf = 0;
    *(__int128 *)((char *)&a12 + 8) = 0u;
    *(_QWORD *)&a12 = (char *)&a12 + 8;
    *(__int128 *)((char *)&a13 + 8) = 0u;
    a15 = 0u;
    a16 = 0u;
    HALS_MutationChangeSynchronizer::SetItinerary(v20, (const MutationItinerary *)&buf);
    MutationItinerary::~MutationItinerary((MutationItinerary *)&buf);
    __cxa_end_catch();
    JUMPOUT(0x1B5BB4EE4);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOContextHostedDSP::UpdateDSPReferenceRequestInDescription(HALS_IOContextHostedDSP *this, const __CFString ***a2, int64x2_t *a3, HALS_IOContextDescription *a4)
{
  unsigned int v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD **v10;
  _BOOL4 v11;
  _QWORD *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int64x2_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  _QWORD *v27;
  _QWORD **v28;
  BOOL v29;
  _QWORD **v30;
  _QWORD *v31[2];
  int v32;
  uint64_t v33;
  _QWORD *v34;

  v32 = 0;
  MutationItinerary::AreChangesReconciled((MutationItinerary *)a2, this, &v32);
  v6 = v32;
  std::map<applesauce::CF::StringRef,BOOL>::map[abi:ne180100]((uint64_t)&v30, a2 + 1);
  v8 = (char *)a3[16].i64[0];
  v7 = (char *)a3[16].i64[1];
  if (v7 != v8)
  {
    do
    {
      v9 = v7 - 16;
      std::__destroy_at[abi:ne180100]<HALS_IOContextDescription::HostedDSPDescription::ReferenceStreamRequest,0>(*((const void **)v7 - 1));
      v7 = v9;
    }
    while (v9 != v8);
  }
  a3[16].i64[1] = (uint64_t)v8;
  if (v31[1])
  {
    v10 = v30;
    if (v30 != v31)
    {
      v11 = ((v6 >> 2) & 1) == 0;
      do
      {
        LOBYTE(v33) = *((_BYTE *)v10 + 40);
        HIDWORD(v33) = v11;
        v12 = v10[4];
        if (v12)
        {
          CFRetain(v10[4]);
          v8 = (char *)a3[16].i64[1];
        }
        v34 = v12;
        v13 = a3[17].u64[0];
        if ((unint64_t)v8 >= v13)
        {
          v14 = (char *)a3[16].i64[0];
          v15 = (v8 - v14) >> 4;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 60)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v17 = v13 - (_QWORD)v14;
          if (v17 >> 3 > v16)
            v16 = v17 >> 3;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
            v18 = 0xFFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v19 = (char *)operator new(16 * v18);
          v20 = &v19[16 * v15];
          *(_QWORD *)v20 = v33;
          *((_QWORD *)v20 + 1) = v12;
          if (v8 == v14)
          {
            v23 = vdupq_n_s64((unint64_t)v8);
            v21 = &v19[16 * v15];
          }
          else
          {
            v21 = &v19[16 * v15];
            do
            {
              v22 = *((_QWORD *)v8 - 2);
              v8 -= 16;
              *((_QWORD *)v21 - 2) = v22;
              v21 -= 16;
              *((_QWORD *)v21 + 1) = *((_QWORD *)v8 + 1);
              *((_QWORD *)v8 + 1) = 0;
            }
            while (v8 != v14);
            v23 = a3[16];
          }
          v8 = v20 + 16;
          a3[16].i64[0] = (uint64_t)v21;
          a3[16].i64[1] = (uint64_t)(v20 + 16);
          a3[17].i64[0] = (uint64_t)&v19[16 * v18];
          v24 = v23.i64[1];
          v25 = (void *)v23.i64[0];
          if (v23.i64[1] != v23.i64[0])
          {
            do
            {
              v26 = (void *)(v24 - 16);
              std::__destroy_at[abi:ne180100]<HALS_IOContextDescription::HostedDSPDescription::ReferenceStreamRequest,0>(*(const void **)(v24 - 8));
              v24 = (uint64_t)v26;
            }
            while (v26 != v25);
          }
          if (v25)
            operator delete(v25);
        }
        else
        {
          *(_QWORD *)v8 = v33;
          *((_QWORD *)v8 + 1) = v12;
          v8 += 16;
        }
        a3[16].i64[1] = (uint64_t)v8;
        v27 = v10[1];
        if (v27)
        {
          do
          {
            v28 = (_QWORD **)v27;
            v27 = (_QWORD *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            v28 = (_QWORD **)v10[2];
            v29 = *v28 == v10;
            v10 = v28;
          }
          while (!v29);
        }
        v10 = v28;
      }
      while (v28 != v31);
    }
  }
  std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(v31[0]);
}

void sub_1B5BB53C4(_Unwind_Exception *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  HALS_IOContextDescription::HostedDSPDescription::ReferenceStreamRequest::~ReferenceStreamRequest((HALS_IOContextDescription::HostedDSPDescription::ReferenceStreamRequest *)va);
  std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(a3);
  _Unwind_Resume(a1);
}

uint64_t std::map<applesauce::CF::StringRef,BOOL>::map[abi:ne180100](uint64_t a1, const __CFString ***a2)
{
  uint64_t **v3;
  const __CFString ***v4;
  const __CFString **v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  BOOL v9;
  uint64_t **v10;
  uint64_t *v11;
  const __CFString *v12;
  const __CFString ***v13;
  _QWORD v15[2];
  char v16;
  _QWORD *v17;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = *a2;
  if (*a2 != (const __CFString **)(a2 + 1))
  {
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 8);
      if (*(uint64_t ***)a1 == v3)
        break;
      v7 = v3;
      if (v6)
      {
        do
        {
          v8 = v6;
          v6 = *(_QWORD *)(v6 + 8);
        }
        while (v6);
      }
      else
      {
        do
        {
          v8 = (uint64_t)v7[2];
          v9 = *(_QWORD *)v8 == (_QWORD)v7;
          v7 = (uint64_t **)v8;
        }
        while (v9);
      }
      if ((unint64_t)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)(v8 + 32), v5 + 4) >= 2)
      {
        if (!*v3)
          goto LABEL_9;
LABEL_11:
        v17 = (_QWORD *)v8;
        v10 = (uint64_t **)(v8 + 8);
        goto LABEL_13;
      }
      v10 = (uint64_t **)std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::__find_equal<applesauce::CF::StringRef>(a1, &v17, v5 + 4);
LABEL_13:
      if (!*v10)
        goto LABEL_14;
LABEL_15:
      v12 = v5[1];
      if (v12)
      {
        do
        {
          v13 = (const __CFString ***)v12;
          v12 = (const __CFString *)v12->isa;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (const __CFString ***)v5[2];
          v9 = *v13 == v5;
          v5 = (const __CFString **)v13;
        }
        while (!v9);
      }
      v5 = (const __CFString **)v13;
      if (v13 == v4)
        return a1;
    }
    v8 = (uint64_t)v3;
    if (!v6)
    {
LABEL_9:
      v17 = v3;
      v10 = v3;
LABEL_14:
      v11 = (uint64_t *)operator new(0x30uLL);
      v15[1] = v3;
      std::pair<applesauce::CF::StringRef const,BOOL>::pair[abi:ne180100]((uint64_t)(v11 + 4), (uint64_t)(v5 + 4));
      v16 = 1;
      std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v17, v10, v11);
      v15[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,BOOL>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,BOOL>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  return a1;
}

void sub_1B5BB555C(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::__find_equal<applesauce::CF::StringRef>(uint64_t a1, _QWORD *a2, const __CFString **a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  const __CFString **v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = (_QWORD *)v4;
        v8 = (const __CFString **)(v4 + 32);
        if ((unint64_t)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*a3, (const __CFString **)(v4 + 32)) < 2)break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((unint64_t)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v8, a3) < 2)
        break;
      v5 = v7 + 1;
      v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::__function::__func<HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_1,std::allocator<HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_1>,int ()(unsigned int,HALS_IOStreamInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_1,std::allocator<HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_1>,int ()(unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E6994238;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_1,std::allocator<HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_1>,int ()(unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E6994238;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_1,std::allocator<HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_1>,int ()(unsigned int,HALS_IOStreamInfo &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_0::operator()(a1 + 8, *(_QWORD *)(a1 + 40), *(_QWORD **)(a1 + 56), a3, *(_DWORD *)(a1 + 48));
  *(_DWORD *)(*(_QWORD *)(a1 + 40) + 16) = result;
  return result;
}

uint64_t std::__function::__func<HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_1,std::allocator<HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_1>,int ()(unsigned int,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN23HALS_IOContextHostedDSP18Negotiate_InternalER25HALS_IOContextDescriptionjR31HALS_MutationChangeSynchronizerNS_17DSPStreamInstance12RequestFlagsEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_1,std::allocator<HALS_IOContextHostedDSP::Negotiate_Internal(HALS_IOContextDescription &,unsigned int,HALS_MutationChangeSynchronizer &,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_1>,int ()(unsigned int,HALS_IOStreamInfo &)>::target_type()
{
}

void std::__function::__func<HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2,std::allocator<HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2,std::allocator<HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E69943B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2,std::allocator<HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E69943B8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2,std::allocator<HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_0::operator()(a1 + 8, *(uint64_t **)(a1 + 32), 1869968496, a6, *(_DWORD *)(a1 + 40));
}

uint64_t std::__function::__func<HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2,std::allocator<HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN23HALS_IOContextHostedDSP14Adapt_InternalER25HALS_IOContextDescriptionjNS_17DSPStreamInstance12RequestFlagsEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2,std::allocator<HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_2>,int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::target_type()
{
}

uint64_t HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_0::operator()(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, int a5)
{
  uint64_t v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint64_t *v23;
  AMCP::Log::Scope_Registry *v24;
  std::__shared_weak_count *v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  uint64_t *v35;
  int v36;
  char v37;
  int v38;
  _BOOL8 v39;
  AMCP::Log::Scope_Registry *v40;
  std::__shared_weak_count *v41;
  NSObject *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  NSObject *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  NSObject *v50;
  unint64_t *v51;
  unint64_t v52;
  AMCP::Log::Scope_Registry *v53;
  unsigned int v54;
  AMCP::Log::Scope_Registry *v55;
  std::__shared_weak_count *v56;
  NSObject *v57;
  unint64_t *v58;
  unint64_t v59;
  NSObject *v60;
  int v61;
  int v62;
  HALS_DSPCaptureFiles *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  BOOL v70;
  uint64_t *v71;
  BOOL v72;
  uint64_t v73;
  unsigned int v74;
  BOOL v75;
  uint64_t *v76;
  char v77;
  int v78;
  char v79;
  std::__shared_weak_count *v80;
  NSObject *v81;
  unint64_t *v82;
  unint64_t v83;
  _opaque_pthread_t *v84;
  mach_port_t v85;
  int8x8_t v86;
  int8x8_t v87;
  int32x4_t v88;
  uint32x4_t v89;
  int16x8_t v90;
  _opaque_pthread_t *v91;
  mach_port_t v92;
  _opaque_pthread_t *v93;
  int v94;
  std::string::size_type v95;
  std::string *v96;
  void **v97;
  _opaque_pthread_t *v98;
  mach_port_t v99;
  _opaque_pthread_t *v100;
  mach_port_t v101;
  _opaque_pthread_t *v102;
  mach_port_t v103;
  int8x8_t v104;
  int8x8_t v105;
  int32x4_t v106;
  uint32x4_t v107;
  int16x8_t v108;
  void **v109;
  _opaque_pthread_t *v110;
  mach_port_t v111;
  mach_port_t v112;
  void *v113[2];
  char v114;
  std::string v115;
  _DWORD v116[5];
  char v117;
  void *__p;
  void *v119;
  uint64_t v120;
  void *v121[2];
  char v122;
  unsigned int v123;
  uint8_t v124[8];
  _BYTE v125[10];
  __int16 v126;
  int v127;
  __int16 v128;
  void **p_data;
  __int16 v130;
  void **v131;
  _BYTE v132[24];
  _BYTE v133[584];
  _BYTE v134[32];
  uint8_t buf[8];
  _BYTE v136[10];
  __int16 v137;
  int v138;
  __int16 v139;
  uint8_t *v140;
  _BYTE v141[24];
  _BYTE v142[584];
  _QWORD v143[6];

  v143[3] = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a4 + 108))
    return 0;
  v6 = *(_QWORD *)(a4 + 112);
  v7 = (uint64_t *)(a4 + 112);
  v8 = *(_QWORD *)(a4 + 120) == v6 || v6 == 0;
  if (v8)
    goto LABEL_36;
  v10 = a1;
  v11 = *a2;
  v12 = a2[1];
  if (*a2 != v12)
  {
    v13 = *(_DWORD *)(v6 + 8);
    v14 = *(_DWORD *)(v6 + 96);
    while (*(_DWORD *)v11 != a3 || *(_DWORD *)(v11 + 4) != v13 || *(_DWORD *)(v11 + 8) != v14)
    {
      v11 += 24;
      if (v11 == v12)
        goto LABEL_36;
    }
  }
  if (v12 == v11 || (v16 = *(_QWORD *)(v11 + 16)) == 0)
  {
LABEL_36:
    v15 = 1685287013;
    *(_BYTE *)(a4 + 416) = 0;
    return v15;
  }
  v17 = *(_DWORD *)(a1 + 16);
  v123 = v17;
  v18 = 1685287013;
  if ((v17 & 1) != 0)
  {
    v19 = *(_QWORD *)(a4 + 176);
    if (!v19)
      goto LABEL_167;
    v20 = a4 + 176;
    do
    {
      v21 = *(_DWORD *)(v19 + 28);
      v22 = v21 >= 9;
      if (v21 >= 9)
        v23 = (uint64_t *)v19;
      else
        v23 = (uint64_t *)(v19 + 8);
      if (v22)
        v20 = v19;
      v19 = *v23;
    }
    while (*v23);
    if (v20 == a4 + 176 || *(_DWORD *)(v20 + 28) > 9u)
    {
LABEL_167:
      if (*(_BYTE *)(v16 + 1224))
      {
        v30 = v16 + 648;
        v31 = *(_QWORD *)(v16 + 648);
        if (!v31)
          goto LABEL_49;
        v32 = v16 + 648;
        do
        {
          v33 = *(_DWORD *)(v31 + 28);
          v34 = v33 == 0;
          if (v33)
            v35 = (uint64_t *)v31;
          else
            v35 = (uint64_t *)(v31 + 8);
          if (!v34)
            v32 = v31;
          v31 = *v35;
        }
        while (*v35);
        if (v32 == v30 || *(_DWORD *)(v32 + 28) >= 2u)
LABEL_49:
          v32 = v16 + 648;
        v8 = v30 == v32;
        v36 = (v17 >> 2) & 1;
        if (!v8)
          v36 = 1;
        if (v36)
          v37 = 4;
        else
          v37 = 0;
        LOBYTE(v123) = v37 | v17 & 0xFB;
        HALS_IOContextHostedDSP::DSPStreamInstance::CreateRequest((DSP_Host_Types::ConfigurationChangeRequest *)v124, *(_DWORD *)(v16 + 12), 0, (uint64_t *)(a4 + 112), a5, (unsigned __int8 *)&v123);
        DSP_Host_Types::ConfigurationChangeRequest::ConfigurationChangeRequest((DSP_Host_Types::ConfigurationChangeRequest *)buf);
        *(_QWORD *)buf = &off_1E699A370;
        DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::operator=((uint64_t)buf, (uint64_t)v124);
        *(_QWORD *)v124 = &off_1E699D0D8;
        v115.__r_.__value_.__r.__words[0] = (std::string::size_type)v134;
        std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
        DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)v133);
        DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v132);
        DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&v128);
        *(_QWORD *)v124 = off_1E699D128;
        std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v125);
        v38 = DSP_Host_Types::ConfigurationChangeRequest::util_compare_request((unsigned __int8 **)(v16 + 544), (unsigned __int8 **)buf, 0);
        v39 = MutationItinerary::AreChangesReconciled((MutationItinerary *)(v16 + 1224), (const DSP_Host_Types::ConfigurationChangeRequest *)buf, (int *)(v16 + 1304));
        if (v39)
        {
          v40 = (AMCP::Log::Scope_Registry *)DSP_Host_Types::ConfigurationChangeRequest::hash_equal((unsigned __int8 **)(v16 + 1312), (const DSP_Host_Types::ConfigurationChangeRequest *)buf);
          if ((_DWORD)v40)
          {
            AMCP::Log::Scope_Registry::get(v40);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v124, "com.apple.coreaudio", "AMCP");
            v41 = *(std::__shared_weak_count **)v125;
            v42 = **(NSObject ***)v124;
            if (*(_QWORD *)v125)
            {
              v43 = (unint64_t *)(*(_QWORD *)v125 + 8);
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 - 1, v43));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
            if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
            {
              v100 = pthread_self();
              v101 = pthread_mach_thread_np(v100);
              *(_DWORD *)v124 = 67109634;
              *(_DWORD *)&v124[4] = v101;
              *(_WORD *)v125 = 2080;
              *(_QWORD *)&v125[2] = "HALS_IOContextHostedDSP.cpp";
              v126 = 1024;
              v127 = 362;
              _os_log_debug_impl(&dword_1B57BA000, v42, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] POLICY: Suppressing adapt, request is identical.", v124, 0x18u);
            }
            v18 = 1685287789;
          }
          else
          {
            v53 = (AMCP::Log::Scope_Registry *)(*(_QWORD *(**)(std::string *__return_ptr, _QWORD, uint8_t *, uint64_t))(**(_QWORD **)(v16 + 136) + 32))(&v115, *(_QWORD *)(v16 + 136), buf, v16 + 152);
            v54 = v120;
            if (v120)
            {
              DSP_Host_Types::ConfigurationChangeRequest::ConfigurationChangeRequest((DSP_Host_Types::ConfigurationChangeRequest *)v124);
              *(_QWORD *)v124 = &off_1E699A370;
              DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::operator=(v16 + 1312, (uint64_t)v124);
              *(_QWORD *)v124 = &off_1E699D0D8;
              v121[0] = v134;
              std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v121);
              DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)v133);
              DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v132);
              DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&v128);
              *(_QWORD *)v124 = off_1E699D128;
              v55 = (AMCP::Log::Scope_Registry *)std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v125);
              *(_DWORD *)(v16 + 312) = 0;
              AMCP::Log::Scope_Registry::get(v55);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v124, "com.apple.coreaudio", "AMCP");
              v56 = *(std::__shared_weak_count **)v125;
              v57 = **(NSObject ***)v124;
              if (*(_QWORD *)v125)
              {
                v58 = (unint64_t *)(*(_QWORD *)v125 + 8);
                do
                  v59 = __ldaxr(v58);
                while (__stlxr(v59 - 1, v58));
                if (!v59)
                {
                  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                  std::__shared_weak_count::__release_weak(v56);
                }
              }
              if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
              {
                v102 = pthread_self();
                v103 = pthread_mach_thread_np(v102);
                v104.i32[0] = bswap32(v54);
                v105 = vzip1_s8(v104, v104);
                v106.i64[0] = 0x1F0000001FLL;
                v106.i64[1] = 0x1F0000001FLL;
                v107.i64[0] = 0x5F0000005FLL;
                v107.i64[1] = 0x5F0000005FLL;
                *(int8x8_t *)v108.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v107, (uint32x4_t)vsraq_n_s32(v106, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v105), 0x18uLL), 0x18uLL))), v105, (int8x8_t)0x2E002E002E002ELL);
                v122 = 4;
                LODWORD(v121[0]) = vmovn_s16(v108).u32[0];
                BYTE4(v121[0]) = 0;
                DSP_Host_Types::ConfigurationChangeRequest::debug_device_list((DSP_Host_Types::ConfigurationChangeRequest *)buf, v113);
                if (v114 >= 0)
                  v109 = v113;
                else
                  v109 = (void **)v113[0];
                *(_DWORD *)v124 = 67110146;
                *(_DWORD *)&v124[4] = v103;
                *(_WORD *)v125 = 2080;
                *(_QWORD *)&v125[2] = "HALS_IOContextHostedDSP.cpp";
                v126 = 1024;
                v127 = 402;
                v128 = 2080;
                p_data = v121;
                v130 = 2080;
                v131 = v109;
                _os_log_error_impl(&dword_1B57BA000, v57, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp] Adapt_NP : DSP was unable to Adapt to IO configuration (%s) using %s.", v124, 0x2Cu);
                if (v114 < 0)
                  operator delete(v113[0]);
                if (v122 < 0)
                  operator delete(v121[0]);
              }
              HALS_IOContextHostedDSP::DSPStreamInstance::MaybeConfigureHALBypass(v16, (uint64_t)buf);
              v18 = 1685275225;
            }
            else
            {
              AMCP::Log::Scope_Registry::get(v53);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v124, "com.apple.coreaudio", "AMCP");
              v60 = **(NSObject ***)v124;
              std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v124);
              if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
              {
                v110 = pthread_self();
                v111 = pthread_mach_thread_np(v110);
                *(_DWORD *)v124 = 67109634;
                *(_DWORD *)&v124[4] = v111;
                *(_WORD *)v125 = 2080;
                *(_QWORD *)&v125[2] = "HALS_IOContextHostedDSP.cpp";
                v126 = 1024;
                v127 = 374;
                _os_log_debug_impl(&dword_1B57BA000, v60, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] POLICY: Adapt allowed, and succeeded.", v124, 0x18u);
              }
              *(_QWORD *)v124 = 0;
              *(_QWORD *)v125 = 0;
              std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v16 + 368, (__int128 *)v124);
              std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)v124);
              DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::operator=(v16 + 1312, (uint64_t)buf);
              v61 = *(_DWORD *)(v16 + 312);
              if (v117)
                v62 = v116[4];
              else
                v62 = 0;
              *(_DWORD *)(v16 + 312) = v62;
              if (!*(_BYTE *)(v16 + 1756))
                std::__throw_bad_optional_access[abi:ne180100]();
              v63 = (HALS_DSPCaptureFiles *)HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange((HALS_IOContextHostedDSP::DSPStreamInstance *)v16, *(_DWORD *)(v16 + 1752), 1);
              if (HALS_DSPCaptureFiles::isDSPCaptureEnabled(v63))
                HALS_IOContextHostedDSP::DSPStreamInstance::ConfigureCaptureFiles(v16, v7, v123);
              v64 = *(_QWORD *)(v16 + 176);
              if (v64)
              {
                *(_DWORD *)v124 = *(_DWORD *)(v16 + 316);
                (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v64 + 48))(v64, v124);
              }
              if (v61 == v62)
                v18 = 0;
              else
                v18 = 1685285985;
            }
            v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E699E8B8;
            if (__p)
            {
              v119 = __p;
              operator delete(__p);
            }
            DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v116);
            v115.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E699E8F8;
            std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v115.__r_.__value_.__l.__size_);
          }
        }
        else
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v39);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v124, "com.apple.coreaudio", "AMCP");
          v49 = *(std::__shared_weak_count **)v125;
          v50 = **(NSObject ***)v124;
          if (*(_QWORD *)v125)
          {
            v51 = (unint64_t *)(*(_QWORD *)v125 + 8);
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
          if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
          {
            v93 = pthread_self();
            v112 = pthread_mach_thread_np(v93);
            MutationItinerary::util_ChangeBitmaskToString(&v115, *(_DWORD *)(v16 + 1304));
            v94 = SHIBYTE(v115.__r_.__value_.__r.__words[2]);
            v95 = v115.__r_.__value_.__r.__words[0];
            DSP_Host_Types::ConfigurationChangeRequest::debug_stringify_compare_result(v121, v38);
            v96 = &v115;
            if (v94 < 0)
              v96 = (std::string *)v95;
            if (v122 >= 0)
              v97 = v121;
            else
              v97 = (void **)v121[0];
            *(_DWORD *)v124 = 67110146;
            *(_DWORD *)&v124[4] = v112;
            *(_WORD *)v125 = 2080;
            *(_QWORD *)&v125[2] = "HALS_IOContextHostedDSP.cpp";
            v126 = 1024;
            v127 = 352;
            v128 = 2080;
            p_data = (void **)&v96->__r_.__value_.__l.__data_;
            v130 = 2080;
            v131 = v97;
            _os_log_debug_impl(&dword_1B57BA000, v50, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] POLICY: Suppressing adapt, changes are incomplete (%s) or incompatible (%s).", v124, 0x2Cu);
            if (v122 < 0)
              operator delete(v121[0]);
            if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v115.__r_.__value_.__l.__data_);
          }
          HALS_IOContextHostedDSP::DSPStreamInstance::MaybeConfigureHALBypass(v16, (uint64_t)buf);
          v18 = 1685275225;
        }
        *(_QWORD *)buf = &off_1E699D0D8;
        *(_QWORD *)v124 = v143;
        std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v124);
        DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)v142);
        DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v141);
        DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&v139);
        *(_QWORD *)buf = off_1E699D128;
        a1 = std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v136);
      }
      else
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v45 = *(std::__shared_weak_count **)v136;
        v46 = **(NSObject ***)buf;
        if (*(_QWORD *)v136)
        {
          v47 = (unint64_t *)(*(_QWORD *)v136 + 8);
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
        {
          v91 = pthread_self();
          v92 = pthread_mach_thread_np(v91);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v92;
          *(_WORD *)v136 = 2080;
          *(_QWORD *)&v136[2] = "HALS_IOContextHostedDSP.cpp";
          v137 = 1024;
          v138 = 328;
          _os_log_debug_impl(&dword_1B57BA000, v46, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] POLICY: Suppressing adapt, previous negotiate failed or was never performed.", buf, 0x18u);
        }
        DSP_Host_Types::AdaptRequest::AdaptRequest((DSP_Host_Types::AdaptRequest *)buf, (const DSP_Host_Types::NegotiateRequest *)(v16 + 544));
        HALS_IOContextHostedDSP::DSPStreamInstance::MaybeConfigureHALBypass(v16, (uint64_t)buf);
        *(_QWORD *)buf = &off_1E699D0D8;
        *(_QWORD *)v124 = v143;
        std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v124);
        DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)v142);
        DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v141);
        DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&v139);
        *(_QWORD *)buf = off_1E699D128;
        a1 = std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v136);
        v18 = 1685275225;
      }
    }
    else
    {
      DSP_Host_Types::AdaptRequest::AdaptRequest((DSP_Host_Types::AdaptRequest *)buf, (const DSP_Host_Types::NegotiateRequest *)(v16 + 544));
      HALS_IOContextHostedDSP::DSPStreamInstance::MaybeConfigureHALBypass(v16, (uint64_t)buf);
      *(_QWORD *)buf = &off_1E699D0D8;
      *(_QWORD *)v124 = v143;
      std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v124);
      DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)v142);
      DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v141);
      DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&v139);
      *(_QWORD *)buf = off_1E699D128;
      v24 = (AMCP::Log::Scope_Registry *)std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v136);
      AMCP::Log::Scope_Registry::get(v24);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v25 = *(std::__shared_weak_count **)v136;
      v26 = **(NSObject ***)buf;
      if (*(_QWORD *)v136)
      {
        v27 = (unint64_t *)(*(_QWORD *)v136 + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      a1 = os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG);
      if ((_DWORD)a1)
      {
        v98 = pthread_self();
        v99 = pthread_mach_thread_np(v98);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v99;
        *(_WORD *)v136 = 2080;
        *(_QWORD *)&v136[2] = "HALS_IOContextHostedDSP.cpp";
        v137 = 1024;
        v138 = 318;
        _os_log_debug_impl(&dword_1B57BA000, v26, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] Client-visible reference stream will be processed with HAL bypass.", buf, 0x18u);
      }
      v18 = 0;
    }
  }
  v65 = v16 + 648;
  v66 = *(_QWORD *)(v16 + 648);
  if (!v66)
  {
LABEL_126:
    v73 = v16 + 648;
LABEL_127:
    v72 = v65 != v73;
    goto LABEL_128;
  }
  v67 = v16 + 648;
  v68 = *(_QWORD *)(v16 + 648);
  do
  {
    v69 = *(_DWORD *)(v68 + 28);
    v70 = v69 == 0;
    if (v69)
      v71 = (uint64_t *)v68;
    else
      v71 = (uint64_t *)(v68 + 8);
    if (!v70)
      v67 = v68;
    v68 = *v71;
  }
  while (*v71);
  if (v67 == v65 || *(_DWORD *)(v67 + 28) >= 2u)
  {
    v73 = v16 + 648;
    do
    {
      v74 = *(_DWORD *)(v66 + 28);
      v75 = v74 >= 9;
      if (v74 >= 9)
        v76 = (uint64_t *)v66;
      else
        v76 = (uint64_t *)(v66 + 8);
      if (v75)
        v73 = v66;
      v66 = *v76;
    }
    while (*v76);
    if (v73 != v65 && *(_DWORD *)(v73 + 28) < 0xAu)
      goto LABEL_127;
    goto LABEL_126;
  }
  v72 = 1;
LABEL_128:
  if (!(_DWORD)v18 || (_DWORD)v18 == 1685285985 || (_DWORD)v18 == 1685287789)
  {
    **(_BYTE **)(v10 + 8) |= (_DWORD)v18 == 1685285985;
    ++**(_DWORD **)v10;
    v77 = 1;
    *(_BYTE *)(a4 + 416) = 1;
    v78 = *(_DWORD *)(v16 + 312);
  }
  else
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v80 = *(std::__shared_weak_count **)v136;
    v81 = **(NSObject ***)buf;
    if (*(_QWORD *)v136)
    {
      v82 = (unint64_t *)(*(_QWORD *)v136 + 8);
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
    {
      v84 = pthread_self();
      v85 = pthread_mach_thread_np(v84);
      v86.i32[0] = bswap32(v18);
      v87 = vzip1_s8(v86, v86);
      v88.i64[0] = 0x1F0000001FLL;
      v88.i64[1] = 0x1F0000001FLL;
      v89.i64[0] = 0x5F0000005FLL;
      v89.i64[1] = 0x5F0000005FLL;
      *(int8x8_t *)v90.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v89, (uint32x4_t)vsraq_n_s32(v88, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v87), 0x18uLL), 0x18uLL))), v87, (int8x8_t)0x2E002E002E002ELL);
      HIBYTE(v127) = 4;
      *(_DWORD *)v124 = vmovn_s16(v90).u32[0];
      v124[4] = 0;
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v85;
      *(_WORD *)v136 = 2080;
      *(_QWORD *)&v136[2] = "HALS_IOContextHostedDSP.cpp";
      v137 = 1024;
      v138 = 1280;
      v139 = 2080;
      v140 = v124;
      _os_log_debug_impl(&dword_1B57BA000, v81, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] Hosted DSP Adapt is unfinished, with status '%s'.", buf, 0x22u);
      if (SHIBYTE(v127) < 0)
        operator delete(*(void **)v124);
    }
    if ((_DWORD)v18 != 1685275225)
    {
      v77 = 0;
      v15 = v18;
      goto LABEL_133;
    }
    v77 = 0;
    v78 = 0;
    ++**(_DWORD **)v10;
    *(_BYTE *)(a4 + 416) = 1;
  }
  v15 = 0;
  *(_DWORD *)(a4 + 160) = v78;
  *(_BYTE *)(a4 + 164) = 1;
LABEL_133:
  *(_BYTE *)(a4 + 256) = v77;
  v79 = (_DWORD)v18 == 1685275225 || v72;
  *(_BYTE *)(a4 + 257) = v79;
  *(_DWORD *)(a4 + 260) = a5;
  return v15;
}

void sub_1B5BB65D0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list __p;

  va_start(__p, a6);
  if (a2)
  {
    DSP_Host_Types::AdaptResponse::~AdaptResponse((DSP_Host_Types::AdaptResponse *)__p);
    DSP_Host_Types::AdaptRequest::~AdaptRequest((DSP_Host_Types::AdaptRequest *)&STACK[0x340]);
    __cxa_begin_catch(a1);
    *(_BYTE *)(v6 + 416) = 0;
    __cxa_end_catch();
    JUMPOUT(0x1B5BB5A20);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_1,std::allocator<HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_1>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_1,std::allocator<HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_1>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E6994338;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_1,std::allocator<HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_1>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E6994338;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_1,std::allocator<HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_1>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::operator()(uint64_t a1, uint64_t *a2)
{
  return HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_0::operator()(a1 + 8, *(uint64_t **)(a1 + 40), 1768845428, *a2, *(_DWORD *)(a1 + 32));
}

uint64_t std::__function::__func<HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_1,std::allocator<HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_1>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN23HALS_IOContextHostedDSP14Adapt_InternalER25HALS_IOContextDescriptionjNS_17DSPStreamInstance12RequestFlagsEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_1,std::allocator<HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_1>,int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::target_type()
{
}

void HALS_IOContextHostedDSP::ProcessStream(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int *a6, unsigned int *a7, _OWORD *a8, _OWORD *a9)
{
  HALS_DSPCaptureFiles *v14;
  uint64_t v15;
  _BOOL8 isDSPCaptureEnabled;
  uint64_t **v17;
  uint64_t i;
  _BYTE *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unsigned int v23;
  _BYTE *v24;
  _BYTE *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  _OWORD v38[12];
  uint64_t v39;
  _BYTE v40[72];
  _OWORD v41[4];
  unsigned int v42;
  unsigned int *v43;
  _OWORD v44[4];
  unsigned int v45;
  char v46;
  unsigned int *v47;
  int64x2_t v48;

  v14 = (HALS_DSPCaptureFiles *)HALS_IOContextHostedDSP::HostedDSPList::find(a1, a2, a3, a4);
  if (v14 != (HALS_DSPCaptureFiles *)a2)
  {
    v15 = *((_QWORD *)v14 + 2);
    if (v15)
    {
      isDSPCaptureEnabled = HALS_DSPCaptureFiles::isDSPCaptureEnabled(v14);
      if (isDSPCaptureEnabled)
      {
        v17 = *(uint64_t ***)(v15 + 328);
        if (v17)
        {
          if (HALS_DSPCaptureFiles::isDSPCaptureEnabled((HALS_DSPCaptureFiles *)isDSPCaptureEnabled))
            HALS_DSPCaptureFiles::WriteBufferToCaptureFile((uint64_t)v17, a5, a6, a8, a9, v17);
        }
      }
      for (i = 0; i != 240; i += 80)
      {
        v19 = &v40[i];
        *((_QWORD *)v19 + 18) = 0;
        *(_OWORD *)(v19 + 72) = 0uLL;
        *(_OWORD *)(v19 + 88) = 0uLL;
        *(_OWORD *)(v19 + 104) = 0uLL;
        *(_OWORD *)(v19 + 120) = 0uLL;
        *(_QWORD *)(v19 + 133) = 0;
      }
      v48 = vdupq_n_s64(1uLL);
      v46 = 0;
      v20 = a8[1];
      v44[0] = *a8;
      v44[1] = v20;
      v21 = a8[3];
      v44[2] = a8[2];
      v44[3] = v21;
      v45 = a5;
      v47 = a7;
      if (*a6 - 1 > 2)
      {
        v30 = a8[1];
        v41[0] = *a8;
        v41[1] = v30;
        v31 = a8[3];
        v41[2] = a8[2];
        v41[3] = v31;
        v42 = a5;
        v43 = a6;
        v28 = 1;
      }
      else
      {
        v22 = 0;
        v48.i64[0] = *a6;
        v23 = 1;
        do
        {
          v24 = &v40[24 * v22];
          *(_OWORD *)(v24 + 8) = *(_OWORD *)&a6[4 * v22 + 2];
          v25 = &v40[80 * v22];
          v26 = a8[2];
          *(_OWORD *)(v25 + 120) = a8[3];
          *(_OWORD *)(v25 + 104) = v26;
          v27 = *a8;
          *(_OWORD *)(v25 + 88) = a8[1];
          *(_DWORD *)v24 = 1;
          *(_OWORD *)(v25 + 72) = v27;
          *((_DWORD *)v25 + 34) = a5;
          *((_QWORD *)v25 + 18) = v24;
          v22 = v23;
          v28 = v48.i64[0];
        }
        while (v48.i64[0] > (unint64_t)v23++);
      }
      v39 = 0;
      memset(v38, 0, sizeof(v38));
      if (*(_QWORD *)(v15 + 368))
      {
        v32 = std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator()(*(_QWORD *)(v15 + 440), *(_DWORD *)(v15 + 316), (uint64_t)v38, v28, (uint64_t)v41, v48.i64[1], (uint64_t)v44);
      }
      else
      {
        v32 = HALS_IOContextHostedDSP::DSPStreamInstance::RT_HandleBufferSizeChange((HALS_IOContextHostedDSP::DSPStreamInstance *)v15, a5, 0);
        if ((v32 & 1) == 0)
        {
          v33 = *(_QWORD **)(v15 + 352);
          ++v33[2];
          v34 = mach_absolute_time();
          v33[3] = v34;
          v33[4] = v34;
          std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator()(*(_QWORD *)(v15 + 208), *(_DWORD *)(v15 + 316), (uint64_t)v38, v48.i64[0], (uint64_t)v41, v48.i64[1], (uint64_t)v44);
          v35 = *(_QWORD *)(v15 + 352);
          v32 = mach_absolute_time();
          *(_QWORD *)(v35 + 32) = v32;
        }
      }
      v36 = HALS_DSPCaptureFiles::isDSPCaptureEnabled((HALS_DSPCaptureFiles *)v32);
      if (v36)
      {
        v37 = *(_QWORD *)(v15 + 328);
        if (v37)
        {
          if (HALS_DSPCaptureFiles::isDSPCaptureEnabled((HALS_DSPCaptureFiles *)v36))
            HALS_DSPCaptureFiles::WriteBufferToCaptureFile(v37, a5, a7, a8, a9, (uint64_t **)(v37 + 24));
        }
      }
    }
  }
}

void sub_1B5BB6A30(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,__int128 a39)
{
  uint64_t v39;
  AMCP::Log::Scope_Registry *v40;
  caulk::concurrent::messenger *v41;
  _opaque_pthread_t *v42;

  v40 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(a1);
  AMCP::Log::Scope_Registry::get(v40);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a14, "com.apple.coreaudio", "AMCP");
  v41 = *(caulk::concurrent::messenger **)(a14 + 8);
  a13 = 2;
  v42 = pthread_self();
  *(_DWORD *)(v39 + 200) = pthread_mach_thread_np(v42);
  *(_QWORD *)(v39 + 208) = "HALS_IOContextHostedDSP.cpp";
  *(_DWORD *)(v39 + 216) = 706;
  caulk::concurrent::messenger::enqueue_call<HALS_IOContextHostedDSP::DSPStreamInstance::DoIO(unsigned int,AudioBufferList *,AudioBufferList *,AudioTimeStamp const&)::$_0,std::tuple<unsigned int,char const*,int>>(v41, &a13, &a39);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  __cxa_end_catch();
  JUMPOUT(0x1B5BB69C0);
}

void sub_1B5BB6AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_2,std::tuple<unsigned int,char const*,int,int,int,long long,long long>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_2,std::tuple<unsigned int,char const*,int,int,int,long long,long long>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  caulk::concurrent::message *v15;
  uint8_t buf[8];
  _BYTE v17[10];
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v15 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v17;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v17)
  {
    v4 = (unint64_t *)(*(_QWORD *)v17 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_DWORD *)(a1 + 48);
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 67110658;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v17 = 2080;
    *(_QWORD *)&v17[2] = v8;
    v18 = 1024;
    v19 = v9;
    v20 = 1024;
    v21 = v10;
    v22 = 1024;
    v23 = v11;
    v24 = 2048;
    v25 = v12;
    v26 = 2048;
    v27 = v13;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d [hal_dsp][overload] (Context ID: %d) Input Hosted DSP Processing used more than %d%% of the IO cycle (Budgeted Time: %lld) (Processing Time: %lld).", buf, 0x38u);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_2,std::tuple<unsigned int,char const*,int,int,int,long long,long long>>::rt_cleanup::~rt_cleanup(&v15);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_2,std::tuple<unsigned int,char const*,int,int,int,long long,long long>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 72, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_1,std::tuple<unsigned int,char const*,int,int,unsigned long long,long long,long long>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x1B5E50688);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_1,std::tuple<unsigned int,char const*,int,int,unsigned long long,long long,long long>>::perform(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  unint64_t *v4;
  unint64_t v5;
  os_log_type_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  caulk::concurrent::message *v15;
  uint8_t buf[8];
  _BYTE v17[10];
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v15 = (caulk::concurrent::message *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  v2 = *(std::__shared_weak_count **)v17;
  v3 = **(NSObject ***)buf;
  if (*(_QWORD *)v17)
  {
    v4 = (unint64_t *)(*(_QWORD *)v17 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(_BYTE *)(a1 + 20);
  if (os_log_type_enabled(v3, v6))
  {
    v7 = *(_DWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    v10 = *(_DWORD *)(a1 + 44);
    v11 = *(_QWORD *)(a1 + 48);
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 67110658;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v17 = 2080;
    *(_QWORD *)&v17[2] = v8;
    v18 = 1024;
    v19 = v9;
    v20 = 1024;
    v21 = v10;
    v22 = 2048;
    v23 = v11;
    v24 = 2048;
    v25 = v12;
    v26 = 2048;
    v27 = v13;
    _os_log_impl(&dword_1B57BA000, v3, v6, "%6u %32s:%-5d [hal_dsp][overload] (Context ID: %d) (%llu) Hosted DSP processing overloaded the IO cycle (Budgeted Time: %lld) (Processing Time: %lld).", buf, 0x3Cu);
  }
  return caulk::concurrent::details::rt_message_call<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_1,std::tuple<unsigned int,char const*,int,int,unsigned long long,long long,long long>>::rt_cleanup::~rt_cleanup(&v15);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_1,std::tuple<unsigned int,char const*,int,int,unsigned long long,long long,long long>>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x1E0DDB688] + 24))(*MEMORY[0x1E0DDB688], v2, 72, 8);
  return a1;
}

void std::__function::__func<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_0,std::allocator<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_0>,void ()(std::shared_ptr<HALB_InstrumentedEvent_RealtimeDuration const>)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

__n128 std::__function::__func<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_0,std::allocator<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_0>,void ()(std::shared_ptr<HALB_InstrumentedEvent_RealtimeDuration const>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E6994538;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_0,std::allocator<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_0>,void ()(std::shared_ptr<HALB_InstrumentedEvent_RealtimeDuration const>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E6994538;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_0,std::allocator<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_0>,void ()(std::shared_ptr<HALB_InstrumentedEvent_RealtimeDuration const>)>::operator()(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v5 = *(_QWORD *)(v4 + 24);
  v6 = *(_QWORD *)(v4 + 32);
  v7 = __udivti3();
  if (v6 >= v5)
    v8 = v7;
  else
    v8 = -v7;
  v9 = *(uint64_t **)(a1 + 16);
  if (v8 <= *v9)
    goto LABEL_12;
  *v9 = v8;
  v10 = *(_QWORD **)(a1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = (std::__shared_weak_count *)v10[1];
  *v10 = v4;
  v10[1] = v3;
  if (!v13)
    goto LABEL_12;
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (!v3)
      return;
  }
  else
  {
LABEL_12:
    if (!v3)
      return;
  }
  v16 = (unint64_t *)&v3->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t std::__function::__func<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_0,std::allocator<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_0>,void ()(std::shared_ptr<HALB_InstrumentedEvent_RealtimeDuration const>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK23HALS_IOContextHostedDSP29CheckForDSPProcessingOverloadExE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_0,std::allocator<HALS_IOContextHostedDSP::CheckForDSPProcessingOverload(long long)::$_0>,void ()(std::shared_ptr<HALB_InstrumentedEvent_RealtimeDuration const>)>::target_type()
{
}

applesauce::CF::StringRef *applesauce::CF::details::find_at_key<applesauce::CF::StringRef,__CFString const*&>(applesauce::CF::StringRef *a1, CFDictionaryRef theDict, const void *a3)
{
  const void *v4;
  const void *v5;
  std::runtime_error *exception;

  v4 = applesauce::CF::details::at_key<__CFString const*&>(theDict, a3);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = v4;
  CFRetain(v4);
  return applesauce::CF::StringRef::StringRef(a1, v5);
}

void sub_1B5BB7094(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

applesauce::CF::NumberRef *applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*&>(applesauce::CF::NumberRef *a1, CFDictionaryRef theDict, const void *a3)
{
  const void *v4;
  const void *v5;
  std::runtime_error *exception;

  v4 = applesauce::CF::details::at_key<__CFString const*&>(theDict, a3);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = v4;
  CFRetain(v4);
  return applesauce::CF::NumberRef::NumberRef(a1, v5);
}

void sub_1B5BB7110(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mcp_applesauce::CF::Dictionary_Builder::set_value<__CFString const*,applesauce::CF::StringRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1)
    CFDictionarySetValue(a1, a2, a3);
}

void mcp_applesauce::CF::Dictionary_Builder::set_value<__CFString const*,applesauce::CF::NumberRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1)
    CFDictionarySetValue(a1, a2, a3);
}

void Aggregate_Device_Description::fill_out_optional_strings(Aggregate_Device_Description *this, CFDictionaryRef *a2)
{
  const void *v4;
  const void *v5;
  const void *v6;
  uint64_t v7;

  Aggregate_Description_Dictionary::get_or_empty<applesauce::CF::StringRef>(&v7, *a2, CFSTR("name"));
  v4 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v7;
  if (v4)
    CFRelease(v4);
  Aggregate_Description_Dictionary::get_or_empty<applesauce::CF::StringRef>(&v7, *a2, CFSTR("master"));
  v5 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v7;
  if (v5)
    CFRelease(v5);
  Aggregate_Description_Dictionary::get_or_empty<applesauce::CF::StringRef>(&v7, *a2, CFSTR("clock"));
  v6 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v7;
  if (v6)
    CFRelease(v6);
}

void Aggregate_Device_Description::fill_out_optional_BOOLeans(Aggregate_Device_Description *this, const __CFString *a2)
{
  const void *v4;
  const void *v5;
  const void *v6;
  uint64_t v7;

  if (applesauce::CF::details::has_key<__CFString const*&>((CFDictionaryRef)a2->isa, CFSTR("private")))
  {
    Aggregate_Description_Dictionary::get_BOOLean((Aggregate_Description_Dictionary *)&v7, a2, CFSTR("private"));
    v4 = (const void *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v7;
    if (v4)
      CFRelease(v4);
  }
  else
  {
    v5 = (const void *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v5)
      CFRelease(v5);
  }
  if (applesauce::CF::details::has_key<__CFString const*&>((CFDictionaryRef)a2->isa, CFSTR("stacked")))
  {
    Aggregate_Description_Dictionary::get_BOOLean((Aggregate_Description_Dictionary *)&v7, a2, CFSTR("stacked"));
    v6 = (const void *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v7;
    if (!v6)
      return;
  }
  else
  {
    v6 = (const void *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = *MEMORY[0x1E0C9AE48];
    if (!v6)
      return;
  }
  CFRelease(v6);
}

uint64_t Aggregate_Device_Description::fill_out_subdevice_list(uint64_t *a1, const __CFDictionary *a2, uint64_t *a3)
{
  CFTypeRef v4;
  CFIndex Count;
  unint64_t v6;
  const __CFString *v7;
  CFTypeRef v8;
  const __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  const __CFString *v13;
  CFTypeRef v14;
  const void *v15;
  CFTypeRef v16;
  const void *v17;
  CFTypeRef v18;
  const void *v19;
  __int128 v20;
  _BOOL8 v21;
  const void *v22;
  const void *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  NSObject *v34;
  _opaque_pthread_t *v35;
  mach_port_t v36;
  std::runtime_error *v37;
  std::runtime_error *v38;
  std::runtime_error *v39;
  std::runtime_error *v40;
  std::runtime_error *exception;
  uint64_t *v42;
  CFIndex v44;
  _BYTE v45[48];
  BOOL v46;
  CFTypeRef cf;
  CFTypeRef v48;
  CFTypeRef v49;
  CFTypeRef v50;
  __int128 v51;
  char v52;
  char v53;
  CFTypeRef v54[2];
  CFTypeRef v55[2];
  CFTypeRef v56;
  char v57;
  uint8_t buf[8];
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>(&v56, a2, CFSTR("subdevices"));
  if (v57)
  {
    v4 = v56;
    if (v56)
    {
      CFRetain(v56);
      v55[1] = v4;
      Count = CFArrayGetCount((CFArrayRef)v4);
      v44 = CFArrayGetCount((CFArrayRef)v4);
      if (Count)
      {
        v6 = 0;
        v42 = a1 + 2;
        v7 = CFSTR("uid");
        do
        {
          if (v6 == v44)
            break;
          applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)v55, (CFArrayRef)v4, v6);
          v8 = v55[0];
          if (v55[0])
          {
            CFRetain(v55[0]);
            v54[1] = v8;
            if (applesauce::CF::details::has_key<__CFString const*&>((CFDictionaryRef)v8, v7))
            {
              v9 = v7;
              applesauce::CF::details::find_at_key<applesauce::CF::StringRef,__CFString const*&>((applesauce::CF::StringRef *)v54, (CFDictionaryRef)v8, v7);
              LOBYTE(cf) = 0;
              v53 = 0;
              v10 = *a3;
              v11 = a3[1];
              while (v10 != v11)
              {
                if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)v10, (const __CFString **)v54) == kCFCompareEqualTo)
                {
                  if (v53)
                  {
                    v12 = cf;
                    v13 = *(const __CFString **)v10;
                    cf = v13;
                    if (v13)
                      CFRetain(v13);
                    if (v12)
                      CFRelease(v12);
                    v14 = v48;
                    v15 = *(const void **)(v10 + 8);
                    v48 = v15;
                    if (v15)
                      CFRetain(v15);
                    if (v14)
                      CFRelease(v14);
                    v16 = v49;
                    v17 = *(const void **)(v10 + 16);
                    v49 = v17;
                    if (v17)
                      CFRetain(v17);
                    if (v16)
                      CFRelease(v16);
                    v18 = v50;
                    v19 = *(const void **)(v10 + 24);
                    v50 = v19;
                    if (v19)
                      CFRetain(v19);
                    if (v18)
                      CFRelease(v18);
                    v20 = *(_OWORD *)(v10 + 32);
                    v52 = *(_BYTE *)(v10 + 48);
                    v51 = v20;
                  }
                  else
                  {
                    Audio_Sub_Device_Description::Audio_Sub_Device_Description((uint64_t)&cf, v10);
                    v53 = 1;
                  }
                }
                v10 += 56;
              }
              memset(v45, 0, 41);
              *(_DWORD *)&v45[44] = 127;
              v46 = 1;
              v21 = applesauce::CF::details::has_key<__CFString const*&>((CFDictionaryRef)v8, v9);
              if (!v21)
              {
                AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v21);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
                v34 = **(NSObject ***)buf;
                std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
                if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
                {
                  v35 = pthread_self();
                  v36 = pthread_mach_thread_np(v35);
                  *(_DWORD *)buf = 67109890;
                  *(_DWORD *)&buf[4] = v36;
                  LOWORD(v59) = 2080;
                  *(_QWORD *)((char *)&v59 + 2) = "Aggregate_Device_Description.cpp";
                  WORD5(v59) = 1024;
                  HIDWORD(v59) = 14;
                  LOWORD(v60) = 2080;
                  *(_QWORD *)((char *)&v60 + 2) = "subdevice_dictionary.has_key(AMCP_CFSTR(kAudioSubDeviceUIDKey))";
                  _os_log_error_impl(&dword_1B57BA000, v34, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Subdevices must have UIDs", buf, 0x22u);
                }
                abort();
              }
              applesauce::CF::details::find_at_key<applesauce::CF::StringRef,__CFString const*&>((applesauce::CF::StringRef *)buf, (CFDictionaryRef)v8, v9);
              v22 = *(const void **)v45;
              *(_QWORD *)v45 = *(_QWORD *)buf;
              *(_QWORD *)buf = v22;
              if (v22)
                CFRelease(v22);
              if (v53)
              {
                *(_QWORD *)&v45[8] = v48;
                if (v48)
                  CFRetain(v48);
                if (!v53)
                  goto LABEL_110;
                v23 = *(const void **)&v45[16];
                *(_QWORD *)&v45[16] = v49;
                if (v49)
                  CFRetain(v49);
                if (v23)
                  CFRelease(v23);
                if (!v53)
LABEL_110:
                  std::__throw_bad_optional_access[abi:ne180100]();
                *(_QWORD *)&v45[24] = v50;
                if (v50)
                  CFRetain(v50);
              }
              if (applesauce::CF::details::has_key<__CFString const*&>((CFDictionaryRef)v8, CFSTR("latency-in")))
              {
                applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*&>((applesauce::CF::NumberRef *)buf, (CFDictionaryRef)v8, CFSTR("latency-in"));
                if (!*(_QWORD *)buf)
                {
                  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(exception, "Could not construct");
                  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                *(_DWORD *)&v45[32] = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)buf);
                if (*(_QWORD *)buf)
                  CFRelease(*(CFTypeRef *)buf);
              }
              else if (v53)
              {
                *(_DWORD *)&v45[32] = v51;
              }
              if (applesauce::CF::details::has_key<__CFString const*&>((CFDictionaryRef)v8, CFSTR("latency-out")))
              {
                applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*&>((applesauce::CF::NumberRef *)buf, (CFDictionaryRef)v8, CFSTR("latency-out"));
                if (!*(_QWORD *)buf)
                {
                  v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v40, "Could not construct");
                  __cxa_throw(v40, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                *(_DWORD *)&v45[36] = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)buf);
                if (*(_QWORD *)buf)
                  CFRelease(*(CFTypeRef *)buf);
              }
              else if (v53)
              {
                *(_DWORD *)&v45[36] = DWORD1(v51);
              }
              if (applesauce::CF::details::has_key<__CFString const*&>((CFDictionaryRef)v8, CFSTR("drift")))
              {
                applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*&>((applesauce::CF::NumberRef *)buf, (CFDictionaryRef)v8, CFSTR("drift"));
                if (!*(_QWORD *)buf)
                {
                  v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v39, "Could not construct");
                  __cxa_throw(v39, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                v45[40] = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)buf) != 0;
                if (*(_QWORD *)buf)
                  CFRelease(*(CFTypeRef *)buf);
              }
              else if (v53)
              {
                v45[40] = BYTE8(v51);
              }
              if (applesauce::CF::details::has_key<__CFString const*&>((CFDictionaryRef)v8, CFSTR("drift quality")))
              {
                applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*&>((applesauce::CF::NumberRef *)buf, (CFDictionaryRef)v8, CFSTR("drift quality"));
                if (!*(_QWORD *)buf)
                {
                  v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v38, "Could not construct");
                  __cxa_throw(v38, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                *(_DWORD *)&v45[44] = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)buf);
                if (*(_QWORD *)buf)
                  CFRelease(*(CFTypeRef *)buf);
              }
              else if (v53)
              {
                *(_DWORD *)&v45[44] = HIDWORD(v51);
              }
              if (applesauce::CF::details::has_key<__CFString const*&>((CFDictionaryRef)v8, CFSTR("don't pad")))
              {
                applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*&>((applesauce::CF::NumberRef *)buf, (CFDictionaryRef)v8, CFSTR("don't pad"));
                if (!*(_QWORD *)buf)
                {
                  v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v37, "Could not construct");
                  __cxa_throw(v37, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                v46 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)buf) == 0;
                if (*(_QWORD *)buf)
                  CFRelease(*(CFTypeRef *)buf);
              }
              else if (v53)
              {
                v46 = v52;
              }
              v24 = a1[3];
              v25 = a1[4];
              if (v24 >= v25)
              {
                v26 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v24 - *v42) >> 3);
                v27 = v26 + 1;
                if ((unint64_t)(v26 + 1) > 0x492492492492492)
                  std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                v28 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v25 - *v42) >> 3);
                if (2 * v28 > v27)
                  v27 = 2 * v28;
                if (v28 >= 0x249249249249249)
                  v29 = 0x492492492492492;
                else
                  v29 = v27;
                *((_QWORD *)&v60 + 1) = a1 + 4;
                if (v29)
                  v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v29);
                else
                  v30 = 0;
                v7 = v9;
                v31 = v29 + 56 * v26;
                *(_QWORD *)buf = v29;
                *(_QWORD *)&v59 = v31;
                *(_QWORD *)&v60 = v29 + 56 * v30;
                *(_QWORD *)v31 = *(_QWORD *)v45;
                *(_QWORD *)v45 = 0;
                *(_OWORD *)(v31 + 8) = *(_OWORD *)&v45[8];
                *(_QWORD *)&v45[8] = 0;
                *(_QWORD *)(v31 + 24) = *(_QWORD *)&v45[24];
                *(_BYTE *)(v31 + 48) = v46;
                *(_OWORD *)(v31 + 32) = *(_OWORD *)&v45[32];
                *((_QWORD *)&v59 + 1) = v31 + 56;
                std::vector<Audio_Sub_Device_Description>::__swap_out_circular_buffer(v42, buf);
                v32 = a1[3];
                std::__split_buffer<Audio_Sub_Device_Description>::~__split_buffer((uint64_t)buf);
                a1[3] = v32;
              }
              else
              {
                *(_QWORD *)v24 = *(_QWORD *)v45;
                *(_OWORD *)(v24 + 8) = *(_OWORD *)&v45[8];
                *(_QWORD *)(v24 + 24) = *(_QWORD *)&v45[24];
                *(_OWORD *)v45 = 0u;
                *(_OWORD *)(v24 + 32) = *(_OWORD *)&v45[32];
                *(_BYTE *)(v24 + 48) = v46;
                a1[3] = v24 + 56;
                v7 = v9;
              }
              if (*(_QWORD *)&v45[8])
                CFRelease(*(CFTypeRef *)&v45[8]);
              if (*(_QWORD *)v45)
                CFRelease(*(CFTypeRef *)v45);
              if (v53)
              {
                if (v50)
                  CFRelease(v50);
                if (v49)
                  CFRelease(v49);
                if (v48)
                  CFRelease(v48);
                if (cf)
                  CFRelease(cf);
              }
              if (v54[0])
                CFRelease(v54[0]);
            }
            CFRelease(v8);
            if (v55[0])
              CFRelease(v55[0]);
          }
          ++v6;
        }
        while (v6 != Count);
      }
      CFRelease(v4);
    }
  }
  return std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v56);
}

void sub_1B5BB7B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, const void **a9, const void **a10, const void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, const void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,int a33,const void *a34)
{
  uint64_t v34;

  applesauce::CF::NumberRef::~NumberRef(a9);
  applesauce::CF::NumberRef::~NumberRef(a10);
  applesauce::CF::StringRef::~StringRef(a11);
  applesauce::CF::StringRef::~StringRef(&a17);
  if (a32)
    Audio_Sub_Device_Description::~Audio_Sub_Device_Description((Audio_Sub_Device_Description *)&a25);
  applesauce::CF::StringRef::~StringRef(&a34);
  Aggregate_Description_Dictionary::~Aggregate_Description_Dictionary((const void **)(v34 - 184));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v34 - 176));
  applesauce::CF::ArrayRef::~ArrayRef((const void **)(v34 - 168));
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](v34 - 160);
  _Unwind_Resume(a1);
}

void Aggregate_Description_Dictionary::~Aggregate_Description_Dictionary(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>(_BYTE *a1, CFDictionaryRef theDict, const void *a3)
{
  const void *v4;
  const void *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<__CFString const*&>(theDict, a3);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFArrayGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = v5;
  v7 = 1;
LABEL_6:
  a1[8] = v7;
}

uint64_t *std::vector<Audio_Sub_Device_Description>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_QWORD *)(v2 - 56);
    v2 -= 56;
    *(_QWORD *)(v4 - 56) = v5;
    v4 -= 56;
    *(_QWORD *)v2 = 0;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v4 + 24) = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    v6 = *(_OWORD *)(v2 + 32);
    *(_BYTE *)(v4 + 48) = *(_BYTE *)(v2 + 48);
    *(_OWORD *)(v4 + 32) = v6;
  }
  a2[1] = v4;
  v7 = *result;
  *result = v4;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<Audio_Sub_Device_Description>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    Audio_Sub_Device_Description::~Audio_Sub_Device_Description((Audio_Sub_Device_Description *)(i - 56));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t Aggregate_Description_Dictionary::get_BOOLean(Aggregate_Description_Dictionary *this, const __CFString *a2, const void *a3)
{
  const void *v6;
  const void *v7;
  CFTypeID v8;
  _BOOL4 v9;
  uint64_t result;
  int v11;
  _QWORD *v12;
  std::runtime_error *exception;
  std::runtime_error *v14;
  std::runtime_error *v15;
  const __CFNumber *v16;
  unsigned __int8 v17;
  const void *v18;
  char v19;

  if (!a2->isa)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = applesauce::CF::details::at_key<__CFString const*&>((CFDictionaryRef)a2->isa, a3);
  if (v6)
  {
    v7 = v6;
    CFRetain(v6);
    v8 = CFGetTypeID(v7);
    if (v8 == CFBooleanGetTypeID())
    {
      v18 = v7;
      v19 = 1;
      v9 = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)v7);
      result = std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v18);
      goto LABEL_12;
    }
    CFRelease(v7);
  }
  LOBYTE(v18) = 0;
  v19 = 0;
  if (!a2->isa)
  {
    v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Could not construct");
    __cxa_throw(v14, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*&>(&v16, (CFDictionaryRef)a2->isa, a3);
  v11 = v17;
  if (v17)
  {
    if (!v16)
    {
      v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v15, "Could not construct");
      __cxa_throw(v15, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v9 = applesauce::CF::convert_to<BOOL,0>(v16);
  }
  else
  {
    v9 = 0;
  }
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v16);
  result = std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v18);
  if (!v11)
  {
    v12 = (_QWORD *)MEMORY[0x1E0C9AE48];
    goto LABEL_16;
  }
LABEL_12:
  v12 = (_QWORD *)MEMORY[0x1E0C9AE58];
  if (!v9)
    v12 = (_QWORD *)MEMORY[0x1E0C9AE48];
LABEL_16:
  *(_QWORD *)this = *v12;
  return result;
}

void sub_1B5BB8030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  __cxa_free_exception(v11);
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a9);
  std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t Aggregate_Description_Dictionary::get_or_empty<applesauce::CF::StringRef>(_QWORD *a1, CFDictionaryRef theDict, const void *a3)
{
  const void *v4;
  const void *v5;
  CFTypeID v6;
  uint64_t v8;
  char v9;

  v4 = applesauce::CF::details::at_key<__CFString const*&>(theDict, a3);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFStringGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v5 = 0;
    LOBYTE(v8) = 0;
    v9 = 0;
    goto LABEL_6;
  }
  v9 = 1;
  v8 = 0;
LABEL_6:
  *a1 = v5;
  return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v8);
}

uint64_t std::vector<Audio_Sub_Device_Description>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;

  v4 = a1 + 2;
  v5 = a1[2];
  v6 = a1[1];
  if (v6 >= v5)
  {
    v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - *a1) >> 3);
    if ((unint64_t)(v9 + 1) > 0x492492492492492)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x249249249249249)
      v12 = 0x492492492492492;
    else
      v12 = v11;
    v18 = v4;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v12);
    else
      v13 = 0;
    v14 = v12;
    v15 = v12 + 56 * v9;
    v17 = v12 + 56 * v13;
    Audio_Sub_Device_Description::Audio_Sub_Device_Description(v15, a2);
    v16 = v15 + 56;
    std::vector<Audio_Sub_Device_Description>::__swap_out_circular_buffer(a1, &v14);
    v8 = a1[1];
    result = std::__split_buffer<Audio_Sub_Device_Description>::~__split_buffer((uint64_t)&v14);
  }
  else
  {
    result = Audio_Sub_Device_Description::Audio_Sub_Device_Description(v6, a2);
    v8 = result + 56;
  }
  a1[1] = v8;
  return result;
}

void Aggregate_Device_Description::get_composition_dictionary(Aggregate_Device_Description *this, uint64_t a2)
{
  __CFDictionary *Mutable;
  __CFDictionary *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  __CFArray *v11;
  uint64_t v12;
  uint64_t i;
  __CFDictionary *v14;
  __CFDictionary *v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  std::runtime_error *exception;
  std::runtime_error *v22;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  applesauce::CF::DictionaryRef *v26;
  CFTypeRef cf;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef v31;
  int v32;
  int v33;
  unsigned __int8 v34;
  int v35;
  char v36;
  __CFArray *v37;
  __CFDictionary *v38;
  __CFDictionary *v39;
  int valuePtr;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  v5 = Mutable;
  v38 = Mutable;
  if (!*(_QWORD *)a2)
  {
    *(_QWORD *)this = 0;
    if (!Mutable)
      return;
    goto LABEL_45;
  }
  mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::StringRef>(Mutable, CFSTR("uid"), *(const void **)a2);
  v6 = *(const void **)(a2 + 8);
  if (v6)
    mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::StringRef>(v5, CFSTR("name"), v6);
  v7 = *(const void **)(a2 + 40);
  if (v7)
    mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::StringRef>(v5, CFSTR("master"), v7);
  v8 = *(const void **)(a2 + 48);
  if (v8)
    mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::StringRef>(v5, CFSTR("clock"), v8);
  v9 = *(const void **)(a2 + 56);
  if (v9)
    mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::BooleanRef>(v5, CFSTR("private"), v9);
  v10 = *(const void **)(a2 + 64);
  if (v10)
    mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::BooleanRef>(v5, CFSTR("stacked"), v10);
  v26 = this;
  v11 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  v37 = v11;
  v12 = *(_QWORD *)(a2 + 16);
  for (i = *(_QWORD *)(a2 + 24); v12 != i; v12 += 56)
  {
    Audio_Sub_Device_Description::Audio_Sub_Device_Description((uint64_t)&v28, v12);
    v14 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
    v15 = v14;
    v39 = v14;
    if (!v28)
      __assert_rtn("get_composition_dictionary", "Aggregate_Device_Description.cpp", 74, "m_real_device_uid.is_valid()");
    mcp_applesauce::CF::Dictionary_Builder::set_value<__CFString const*,applesauce::CF::StringRef>(v14, CFSTR("uid"), v28);
    if (v29)
      mcp_applesauce::CF::Dictionary_Builder::set_value<__CFString const*,applesauce::CF::StringRef>(v15, CFSTR("name"), v29);
    if (v30)
      mcp_applesauce::CF::Dictionary_Builder::set_value<__CFString const*,applesauce::CF::NumberRef>(v15, CFSTR("channels-in"), v30);
    if (v31)
      mcp_applesauce::CF::Dictionary_Builder::set_value<__CFString const*,applesauce::CF::NumberRef>(v15, CFSTR("channels-out"), v31);
    valuePtr = v32;
    v16 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!v16)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    mcp_applesauce::CF::Dictionary_Builder::set_value<__CFString const*,applesauce::CF::NumberRef>(v15, CFSTR("latency-in"), v16);
    CFRelease(v16);
    valuePtr = v33;
    v17 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!v17)
    {
      v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v22, "Could not construct");
      __cxa_throw(v22, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    mcp_applesauce::CF::Dictionary_Builder::set_value<__CFString const*,applesauce::CF::NumberRef>(v15, CFSTR("latency-out"), v17);
    CFRelease(v17);
    valuePtr = v34;
    v18 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!v18)
    {
      v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v23, "Could not construct");
      __cxa_throw(v23, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    mcp_applesauce::CF::Dictionary_Builder::set_value<__CFString const*,applesauce::CF::NumberRef>(v15, CFSTR("drift"), v18);
    CFRelease(v18);
    valuePtr = v35;
    v19 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!v19)
    {
      v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v24, "Could not construct");
      __cxa_throw(v24, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    mcp_applesauce::CF::Dictionary_Builder::set_value<__CFString const*,applesauce::CF::NumberRef>(v15, CFSTR("drift quality"), v19);
    CFRelease(v19);
    valuePtr = v36 == 0;
    v20 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!v20)
    {
      v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v25, "Could not construct");
      __cxa_throw(v25, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    mcp_applesauce::CF::Dictionary_Builder::set_value<__CFString const*,applesauce::CF::NumberRef>(v15, CFSTR("don't pad"), v20);
    CFRelease(v20);
    mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&cf, v15);
    if (v15)
      CFRelease(v15);
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(v11, cf);
    if (cf)
      CFRelease(cf);
    if (v31)
      CFRelease(v31);
    if (v30)
      CFRelease(v30);
    if (v29)
      CFRelease(v29);
    if (v28)
      CFRelease(v28);
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&v28, v11);
  mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::ArrayRef>(v5, CFSTR("subdevices"), v28);
  if (v28)
    CFRelease(v28);
  if (v11)
    CFRelease(v11);
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary(v26, v5);
  if (v5)
LABEL_45:
    CFRelease(v5);
}

void sub_1B5BB8754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va);
  _Unwind_Resume(a1);
}

void mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::ArrayRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1)
    CFDictionaryAddValue(a1, a2, a3);
}

void DSP_Host_Types::StreamConfiguration::~StreamConfiguration(DSP_Host_Types::StreamConfiguration *this)
{
  DSP_Host_Types::StreamConfiguration::~StreamConfiguration(this);
  JUMPOUT(0x1B5E50688);
}

{
  void *v2;
  DSP_Host_Types::StreamConfiguration *v3;
  uint64_t v4;
  DSP_Host_Types::StreamConfiguration *v5;
  uint64_t v6;
  void **v7;

  *(_QWORD *)this = &off_1E6994678;
  v7 = (void **)((char *)this + 336);
  std::vector<DSP_Host_Types::FormatDescription>::__destroy_vector::operator()[abi:ne180100](&v7);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::StreamConfiguration *)((char *)this + 312));
  *((_QWORD *)this + 33) = off_1E6994AA8;
  if (*((_BYTE *)this + 304) && *((char *)this + 303) < 0)
    operator delete(*((void **)this + 35));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::StreamConfiguration *)((char *)this + 264));
  *((_QWORD *)this + 14) = &off_1E699D270;
  v2 = (void *)*((_QWORD *)this + 30);
  if (v2)
  {
    *((_QWORD *)this + 31) = v2;
    operator delete(v2);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::StreamConfiguration *)((char *)this + 216));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::StreamConfiguration *)((char *)this + 192));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::StreamConfiguration *)((char *)this + 168));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::StreamConfiguration *)((char *)this + 136));
  *((_QWORD *)this + 14) = off_1E699D2B0;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 120);
  *((_QWORD *)this + 3) = &off_1E6994B00;
  v3 = (DSP_Host_Types::StreamConfiguration *)*((_QWORD *)this + 13);
  if (v3 == (DSP_Host_Types::StreamConfiguration *)((char *)this + 80))
  {
    v4 = 4;
    v3 = (DSP_Host_Types::StreamConfiguration *)((char *)this + 80);
  }
  else
  {
    if (!v3)
      goto LABEL_11;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_11:
  v5 = (DSP_Host_Types::StreamConfiguration *)*((_QWORD *)this + 9);
  if (v5 == (DSP_Host_Types::StreamConfiguration *)((char *)this + 48))
  {
    v6 = 4;
    v5 = (DSP_Host_Types::StreamConfiguration *)((char *)this + 48);
    goto LABEL_15;
  }
  if (v5)
  {
    v6 = 5;
LABEL_15:
    (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::StreamConfiguration *)((char *)this + 24));
  *(_QWORD *)this = off_1E6994A68;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

void DSP_Host_Types::StreamConfiguration::add_to(DSP_Host_Types::StreamConfiguration *this, __CFDictionary **a2)
{
  const void **v4;
  const void *v5;
  CFTypeRef v6;
  CFMutableArrayRef Mutable;
  uint64_t v8;
  uint64_t v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef cf;

  DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::StreamSemanticType,DSP_Host_Types::StringLookup_StreamSemantic,unsigned int>::add_to((uint64_t)this + 24, a2);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "current format");
  v4 = (const void **)((char *)this + 120);
  if (*((_BYTE *)this + 128))
  {
    v5 = *v4;
    v6 = cf;
    *v4 = cf;
    if (v6)
      CFRetain(v6);
    if (v5)
      CFRelease(v5);
  }
  else
  {
    std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>((_QWORD *)this + 15, cf);
    *((_BYTE *)this + 128) = 1;
  }
  if (cf)
    CFRelease(cf);
  DSP_Host_Types::FormatDescription::init_set((DSP_Host_Types::StreamConfiguration *)((char *)this + 112));
  DSP_Dictionariable::DictionarySet::maybe_add_under_key((uint64_t **)this + 30, a2, (uint64_t)this + 120);
  if (*((_QWORD *)this + 42) != *((_QWORD *)this + 43))
  {
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
    cf = Mutable;
    v8 = *((_QWORD *)this + 42);
    v9 = *((_QWORD *)this + 43);
    if (v8 == v9)
    {
      v10 = Mutable;
    }
    else
    {
      do
      {
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v8 + 40))(v8, &cf);
        v8 += 152;
      }
      while (v8 != v9);
      v10 = cf;
    }
    mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)&v11, v10);
    mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::ArrayRef>(*a2, CFSTR("supported formats"), v11);
    if (v11)
      CFRelease(v11);
    if (cf)
      CFRelease(cf);
  }
  DSP_Dictionariable::SingleKvp<unsigned int>::add_to((uint64_t)this + 312, a2);
  DSP_Dictionariable::SingleKvp<std::string>::add_to((uint64_t)this + 264, a2);
}

void sub_1B5BB89B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t DSP_Host_Types::StreamConfiguration::load_from(DSP_Host_Types::StreamConfiguration *this, CFDictionaryRef *a2)
{
  int v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (***v10)(_QWORD);
  void (***v11)(_QWORD);
  void (**v12)(_QWORD);
  const __CFArray *v13;
  _BOOL4 v14;
  unint64_t v15;
  BOOL v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  CFDictionaryRef *v29;
  int v30;
  uint64_t *v31;
  CFIndex v32;
  CFArrayRef v33;
  CFIndex Count;
  CFArrayRef theArray;
  char v36;
  _QWORD v37[3];
  CFTypeRef cf;
  void (**v39)();
  _BYTE v40[16];
  _BYTE v41[32];
  _BYTE v42[24];
  _BYTE v43[24];
  _BYTE v44[24];
  void *__p;
  void *v46;
  unint64_t v47;
  DSP_Host_Types::FormatDescription *v48;
  DSP_Host_Types::FormatDescription *v49;
  unint64_t v50;
  char *v51;

  v4 = DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::StreamSemanticType,DSP_Host_Types::StringLookup_StreamSemantic,unsigned int>::load_from((uint64_t)this + 24, a2);
  DSP_Host_Types::FormatDescription::init_set((DSP_Host_Types::StreamConfiguration *)((char *)this + 112));
  v29 = a2;
  v5 = DSP_Dictionariable::DictionarySet::maybe_load_from_under_key((uint64_t **)this + 30, a2, (uint64_t)this + 120);
  v6 = (_QWORD *)*((_QWORD *)this + 30);
  v7 = (_QWORD *)*((_QWORD *)this + 31);
  if (v6 == v7)
    goto LABEL_7;
  while (!*v6 || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6) & 1) == 0)
  {
    if (++v6 == v7)
    {
      v6 = v7;
      break;
    }
  }
  if (v6 == *((_QWORD **)this + 31))
  {
LABEL_7:
    DSP_Host_Types::FormatDescription::FormatDescription((DSP_Host_Types::FormatDescription *)&v39, "current format");
    DSP_Host_Types::FormatDescription::operator=((uint64_t)this + 112, (uint64_t)&v39);
    v39 = (void (**)())&off_1E699D270;
    if (__p)
    {
      v46 = __p;
      operator delete(__p);
    }
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v44);
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v43);
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v42);
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v41);
    v39 = off_1E699D2B0;
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v40);
  }
  v9 = (void (***)(_QWORD))*((_QWORD *)this + 42);
  v8 = (void (***)(_QWORD))*((_QWORD *)this + 43);
  if (v8 != v9)
  {
    v10 = v8 - 19;
    v11 = v8 - 19;
    do
    {
      v12 = *v11;
      v11 -= 19;
      (*v12)(v10);
      v16 = v10 == v9;
      v10 = v11;
    }
    while (!v16);
  }
  v30 = v4 & v5;
  *((_QWORD *)this + 43) = v9;
  v37[0] = &off_1E699E9F8;
  v37[1] = 0;
  v37[2] = v29;
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>(&theArray, *v29, CFSTR("supported formats"));
  if (v36)
  {
    v13 = theArray;
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      v33 = theArray;
      if (theArray)
        v32 = CFArrayGetCount(theArray);
      else
        v32 = 0;
      v15 = 0;
      v31 = (uint64_t *)((char *)this + 336);
      while (1)
      {
        v16 = v13 == v33 && v32 == v15;
        v17 = v16;
        if (Count == v15 || v17)
          break;
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&cf, v13, v15);
        DSP_Host_Types::FormatDescription::FormatDescription((DSP_Host_Types::FormatDescription *)&v39, "");
        DSP_Host_Types::FormatDescription::init_set((DSP_Host_Types::FormatDescription *)&v39);
        DSP_Dictionariable::DictionarySet::maybe_load_from_under_key((uint64_t **)&__p, (CFDictionaryRef *)&cf, (uint64_t)v40);
        v19 = *((_QWORD *)this + 43);
        v18 = *((_QWORD *)this + 44);
        if (v19 >= v18)
        {
          v21 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v19 - *v31) >> 3);
          v22 = v21 + 1;
          if (v21 + 1 > 0x1AF286BCA1AF286)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v23 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v18 - *v31) >> 3);
          if (2 * v23 > v22)
            v22 = 2 * v23;
          if (v23 >= 0xD79435E50D7943)
            v24 = 0x1AF286BCA1AF286;
          else
            v24 = v22;
          v51 = (char *)this + 352;
          if (v24)
            v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<DSP_Host_Types::FormatDescription>>(v24);
          else
            v25 = 0;
          v47 = v24;
          v48 = (DSP_Host_Types::FormatDescription *)(v24 + 152 * v21);
          v49 = v48;
          v50 = v24 + 152 * v25;
          DSP_Host_Types::FormatDescription::FormatDescription(v48, (const DSP_Host_Types::FormatDescription *)&v39);
          v49 = (DSP_Host_Types::FormatDescription *)((char *)v49 + 152);
          std::vector<DSP_Host_Types::FormatDescription>::__swap_out_circular_buffer(v31, &v47);
          v20 = *((_QWORD *)this + 43);
          std::__split_buffer<DSP_Host_Types::FormatDescription>::~__split_buffer((uint64_t)&v47);
        }
        else
        {
          DSP_Host_Types::FormatDescription::FormatDescription(*((DSP_Host_Types::FormatDescription **)this + 43), (const DSP_Host_Types::FormatDescription *)&v39);
          v20 = v19 + 152;
          *((_QWORD *)this + 43) = v20;
        }
        *((_QWORD *)this + 43) = v20;
        v39 = (void (**)())&off_1E699D270;
        if (__p)
        {
          v46 = __p;
          operator delete(__p);
        }
        DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v44);
        DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v43);
        DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v42);
        DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v41);
        v39 = off_1E699D2B0;
        std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v40);
        if (cf)
          CFRelease(cf);
        ++v15;
      }
      v14 = *((_QWORD *)this + 42) != *((_QWORD *)this + 43);
    }
    else
    {
      v14 = 0;
    }
    v30 &= v14;
  }
  v26 = DSP_Dictionariable::SingleKvp<unsigned int>::load_from((uint64_t)this + 312, v29);
  v27 = v30 & v26 & DSP_Dictionariable::SingleKvp<std::string>::load_from((uint64_t)this + 264, v29);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theArray);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v37);
  return v27;
}

void sub_1B5BB8DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)va1);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::StreamConfiguration::add_to(DSP_Host_Types::StreamConfiguration *this, __CFArray **a2)
{
  CFTypeRef cf;
  CFTypeRef Mutable;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(DSP_Host_Types::StreamConfiguration *, CFTypeRef *))(*(_QWORD *)this + 24))(this, &Mutable);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&cf, Mutable);
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, cf);
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1B5BB8ED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::FormatDescription::init_set(DSP_Host_Types::FormatDescription *this)
{
  DSP_Dictionariable::DictionarySet *v1;

  v1 = (DSP_Host_Types::FormatDescription *)((char *)this + 128);
  if (*((_QWORD *)this + 16) == *((_QWORD *)this + 17))
  {
    DSP_Dictionariable::DictionarySet::add_kvp((DSP_Host_Types::FormatDescription *)((char *)this + 128), (DSP_Host_Types::FormatDescription *)((char *)this + 24));
    DSP_Dictionariable::DictionarySet::add_kvp(v1, (DSP_Host_Types::FormatDescription *)((char *)this + 56));
    DSP_Dictionariable::DictionarySet::add_kvp(v1, (DSP_Host_Types::FormatDescription *)((char *)this + 80));
    DSP_Dictionariable::DictionarySet::add_kvp(v1, (DSP_Host_Types::FormatDescription *)((char *)this + 104));
  }
}

void DSP_Host_Types::FormatDescription::add_to(uint64_t **this, __CFDictionary **a2)
{
  DSP_Host_Types::FormatDescription::init_set((DSP_Host_Types::FormatDescription *)this);
  DSP_Dictionariable::DictionarySet::maybe_add_under_key(this + 16, a2, (uint64_t)(this + 1));
}

uint64_t DSP_Host_Types::FormatDescription::load_from(uint64_t **this, CFDictionaryRef *a2)
{
  DSP_Host_Types::FormatDescription::init_set((DSP_Host_Types::FormatDescription *)this);
  return DSP_Dictionariable::DictionarySet::maybe_load_from_under_key(this + 16, a2, (uint64_t)(this + 1));
}

void DSP_Host_Types::FormatDescription::add_to(DSP_Host_Types::FormatDescription *this, __CFArray **a2)
{
  DSP_Host_Types::FormatDescription::init_set(this);
  DSP_Dictionariable::DictionarySet::add_to((DSP_Host_Types::FormatDescription *)((char *)this + 128), a2);
}

void DSP_Dictionariable::DictionarySet::add_kvp(DSP_Dictionariable::DictionarySet *this, DSP_Dictionariable::DictionariableKvp *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  if ((unint64_t)v5 >= v4)
  {
    v7 = *(_QWORD **)this;
    v8 = ((uint64_t)v5 - *(_QWORD *)this) >> 3;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = a2;
    v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        v14 = *--v5;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      v5 = *(_QWORD **)this;
    }
    *(_QWORD *)this = v13;
    *((_QWORD *)this + 1) = v6;
    *((_QWORD *)this + 2) = &v12[8 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  *((_QWORD *)this + 1) = v6;
}

void std::vector<DSP_Host_Types::FormatDescription>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 152;
      v7 = v4 - 152;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 152;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void DSP_Host_Types::AudioChannelConfiguration::add_to(DSP_Host_Types::AudioChannelConfiguration *this, __CFDictionary **a2)
{
  __CFDictionary *Mutable;
  CFTypeRef cf;
  __CFDictionary *v6;

  if (*((_BYTE *)this + 16) && *((_QWORD *)this + 1))
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
    v6 = Mutable;
    DSP_Host_Types::AudioChannelConfiguration::add_to(mcp_applesauce::CF::Dictionary_Builder &)const::$_0::operator()((uint64_t)this, &v6);
    if (!*((_BYTE *)this + 16))
      std::__throw_bad_optional_access[abi:ne180100]();
    mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&cf, Mutable);
    mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::DictionaryRef>(*a2, *((const void **)this + 1), cf);
    if (cf)
      CFRelease(cf);
    if (Mutable)
      CFRelease(Mutable);
  }
  else
  {
    DSP_Host_Types::AudioChannelConfiguration::add_to(mcp_applesauce::CF::Dictionary_Builder &)const::$_0::operator()((uint64_t)this, a2);
  }
}

void sub_1B5BB9488(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t DSP_Host_Types::AudioChannelConfiguration::load_from(DSP_Host_Types::AudioChannelConfiguration *this, CFDictionaryRef *a2)
{
  const void *v3;
  CFTypeRef v4;
  uint64_t v5;
  CFTypeRef v7;
  CFTypeRef cf;
  char v9;
  _QWORD v10[3];

  if (!*((_BYTE *)this + 16))
    return DSP_Host_Types::AudioChannelConfiguration::load_from(applesauce::CF::DictionaryRef const&)::$_0::operator()((uint64_t)this, a2);
  v3 = (const void *)*((_QWORD *)this + 1);
  if (!v3)
    return DSP_Host_Types::AudioChannelConfiguration::load_from(applesauce::CF::DictionaryRef const&)::$_0::operator()((uint64_t)this, a2);
  v10[0] = &off_1E699E9F8;
  v10[1] = 0;
  v10[2] = a2;
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,__CFString const*&>(&cf, *a2, v3);
  if (v9)
  {
    v4 = cf;
    if (cf)
      CFRetain(cf);
    v7 = v4;
    v5 = DSP_Host_Types::AudioChannelConfiguration::load_from(applesauce::CF::DictionaryRef const&)::$_0::operator()((uint64_t)this, (CFDictionaryRef *)&v7);
    if (v7)
      CFRelease(v7);
  }
  else
  {
    v5 = 0;
  }
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v10);
  return v5;
}

void sub_1B5BB955C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&a9);
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a10);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)&a12);
  _Unwind_Resume(a1);
}

uint64_t DSP_Host_Types::AudioChannelConfiguration::load_from(applesauce::CF::DictionaryRef const&)::$_0::operator()(uint64_t a1, CFDictionaryRef *a2)
{
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  const __CFArray *v11;
  CFArrayRef v12;
  _BOOL4 v13;
  unint64_t j;
  BOOL v15;
  BOOL v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v21;
  CFIndex v22;
  CFIndex Count;
  char **v24;
  CFArrayRef theArray;
  char v26;
  _QWORD v27[3];
  CFTypeRef v28;
  __int128 v29;
  CFTypeRef cf[2];
  char v31;

  v4 = DSP_Dictionariable::SingleKvp<unsigned int>::load_from(a1 + 24, a2);
  v5 = v4 & DSP_Dictionariable::SingleKvp<unsigned int>::load_from(a1 + 48, a2);
  v6 = DSP_Dictionariable::SingleKvp<unsigned int>::load_from(a1 + 72, a2);
  v21 = a1;
  v7 = a1 + 96;
  v8 = *(_QWORD *)(a1 + 96);
  v24 = (char **)v7;
  for (i = *(_QWORD *)(v7 + 8); i != v8; i = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](i - 16))
    ;
  v10 = v5 & v6;
  *(_QWORD *)(v21 + 104) = v8;
  v27[0] = &off_1E699E9F8;
  v27[1] = 0;
  v27[2] = a2;
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>(&theArray, *a2, CFSTR("channel descriptions"));
  if (v26)
  {
    v11 = theArray;
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      v12 = theArray;
      if (theArray)
        v22 = CFArrayGetCount(theArray);
      else
        v22 = 0;
      for (j = 0; ; ++j)
      {
        v15 = v11 == v12 && j == v22;
        v16 = v15;
        if (j == Count || v16)
          break;
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v28, v11, j);
        v17 = (std::__shared_weak_count *)operator new(0x78uLL);
        v17->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        v17->__shared_weak_owners_ = 0;
        v17->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6994B58;
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "");
        v17[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E6994BA8;
        std::__optional_destruct_base<applesauce::CF::StringRef,false>::__optional_destruct_base[abi:ne180100]<applesauce::CF::StringRef const&>((uint64_t)&v17[1].__shared_owners_, cf[0]);
        if (cf[0])
          CFRelease(cf[0]);
        v17[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E69946B8;
        std::string::basic_string[abi:ne180100]<0>(cf, "channel label");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v17[2].__vftable, (const UInt8 *)cf);
        v17[2].__vftable = (std::__shared_weak_count_vtbl *)&off_1E699E950;
        LOBYTE(v17[2].__shared_weak_owners_) = 0;
        BYTE4(v17[2].__shared_weak_owners_) = 0;
        if (v31 < 0)
          operator delete((void *)cf[0]);
        std::string::basic_string[abi:ne180100]<0>(cf, "channel flags");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v17[3].__vftable, (const UInt8 *)cf);
        v17[3].__vftable = (std::__shared_weak_count_vtbl *)&off_1E699E950;
        LOBYTE(v17[3].__shared_weak_owners_) = 0;
        BYTE4(v17[3].__shared_weak_owners_) = 0;
        if (v31 < 0)
          operator delete((void *)cf[0]);
        v17[4].__vftable = 0;
        v17[4].__shared_owners_ = 0;
        v17[4].__shared_weak_owners_ = 0;
        *(_QWORD *)&v29 = v17 + 1;
        *((_QWORD *)&v29 + 1) = v17;
        ((void (*)(std::__shared_weak_count *, CFTypeRef *))v17[1].__on_zero_shared_weak)(&v17[1], &v28);
        std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100](v24, &v29);
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        if (v28)
          CFRelease(v28);
      }
      v13 = *(_QWORD *)(v21 + 96) != *(_QWORD *)(v21 + 104);
    }
    else
    {
      v13 = 0;
    }
    v10 = v10 & v13;
  }
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theArray);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v27);
  return v10;
}

void sub_1B5BB9848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, const void *a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  DSP_Dictionariable::DictionariableKvp *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  _QWORD *v32;
  void *v34;

  if (a29 < 0)
    operator delete(__p);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v29);
  *v32 = off_1E6994BA8;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100](v31);
  std::__shared_weak_count::~__shared_weak_count(v30);
  operator delete(v34);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a19);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a14);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)&a16);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::AudioChannelConfiguration::ChannelDescription::~ChannelDescription(DSP_Host_Types::AudioChannelConfiguration::ChannelDescription *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E69946B8;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::AudioChannelConfiguration::ChannelDescription *)((char *)this + 48));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::AudioChannelConfiguration::ChannelDescription *)((char *)this + 24));
  *(_QWORD *)this = off_1E6994BA8;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E69946B8;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::AudioChannelConfiguration::ChannelDescription *)((char *)this + 48));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::AudioChannelConfiguration::ChannelDescription *)((char *)this + 24));
  *(_QWORD *)this = off_1E6994BA8;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1B5E50688);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>::description(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const __CFString *v4;
  const __CFString *v5;
  CFIndex Length;
  CFIndex v7;
  CFTypeRef v8;
  std::vector<char>::value_type __x;
  std::vector<char> cf;

  cf.__begin_ = (std::vector<char>::pointer)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, std::vector<char> *))(*(_QWORD *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v8, cf.__begin_);
  if (cf.__begin_)
    CFRelease(cf.__begin_);
  v4 = CFCopyDescription(v8);
  v5 = v4;
  if (v4)
  {
    Length = CFStringGetLength(v4);
    v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    __x = 0;
    std::vector<char>::vector(&cf, v7, &__x);
    LODWORD(v7) = CFStringGetCString(v5, cf.__begin_, v7, 0x8000100u);
    CFRelease(v5);
    if ((_DWORD)v7)
      std::string::basic_string[abi:ne180100]<0>(a2, cf.__begin_);
    else
      std::string::basic_string[abi:ne180100]<0>(a2, "<error>");
    if (cf.__begin_)
    {
      cf.__end_ = cf.__begin_;
      operator delete(cf.__begin_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<empty>");
  }
  if (v8)
    CFRelease(v8);
}

void sub_1B5BB9AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)&__p);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::AudioChannelConfiguration::ChannelDescription::add_to(DSP_Host_Types::AudioChannelConfiguration::ChannelDescription *this, __CFDictionary **a2)
{
  CFMutableArrayRef Mutable;
  _DWORD *v5;
  _DWORD *v6;
  CFNumberRef v7;
  std::runtime_error *exception;
  CFTypeRef cf[2];

  DSP_Dictionariable::SingleKvp<unsigned int>::add_to((uint64_t)this + 24, a2);
  DSP_Dictionariable::SingleKvp<unsigned int>::add_to((uint64_t)this + 48, a2);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  cf[1] = Mutable;
  v5 = (_DWORD *)*((_QWORD *)this + 9);
  v6 = (_DWORD *)*((_QWORD *)this + 10);
  while (v5 != v6)
  {
    LODWORD(cf[0]) = *v5;
    v7 = CFNumberCreate(0, kCFNumberFloatType, cf);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)cf, Mutable);
  mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::ArrayRef>(*a2, CFSTR("coordinates"), cf[0]);
  if (cf[0])
    CFRelease(cf[0]);
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1B5BB9C5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t DSP_Host_Types::AudioChannelConfiguration::ChannelDescription::load_from(DSP_Host_Types::AudioChannelConfiguration::ChannelDescription *this, CFDictionaryRef *a2)
{
  int v4;
  unsigned int v5;
  const __CFArray *v6;
  CFIndex Count;
  unint64_t v8;
  uint64_t v9;
  CFArrayRef v11;
  CFIndex v12;
  const __CFNumber *ValueAtIndex;
  float v15;
  float v16;
  unint64_t v17;
  float *v18;
  float *v19;
  float *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  float *v26;
  int v27;
  std::runtime_error *exception;
  CFArrayRef theArray;
  char v30;
  _QWORD v31[3];

  v4 = DSP_Dictionariable::SingleKvp<unsigned int>::load_from((uint64_t)this + 24, a2);
  v5 = DSP_Dictionariable::SingleKvp<unsigned int>::load_from((uint64_t)this + 48, a2);
  *((_QWORD *)this + 10) = *((_QWORD *)this + 9);
  v31[0] = &off_1E699E9F8;
  v31[1] = 0;
  v31[2] = a2;
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>(&theArray, *a2, CFSTR("coordinates"));
  if (v30)
  {
    v6 = theArray;
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      if (!v30)
LABEL_40:
        std::__throw_bad_optional_access[abi:ne180100]();
    }
    else
    {
      Count = 0;
    }
    v8 = 0;
    while (1)
    {
      v11 = theArray;
      if (theArray)
      {
        v12 = CFArrayGetCount(theArray);
        if (!v6)
          break;
      }
      else
      {
        v12 = 0;
        if (!v6)
          break;
      }
      if (v8 == Count)
        break;
      if (v6 == v11 && v8 == v12)
        break;
      if (CFArrayGetCount(v6) <= v8 || (ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v6, v8)) == 0)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not find item");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v15 = applesauce::CF::convert_to<float,0>(ValueAtIndex);
      v16 = v15;
      v18 = (float *)*((_QWORD *)this + 10);
      v17 = *((_QWORD *)this + 11);
      if ((unint64_t)v18 >= v17)
      {
        v20 = (float *)*((_QWORD *)this + 9);
        v21 = v18 - v20;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 62)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v23 = v17 - (_QWORD)v20;
        if (v23 >> 1 > v22)
          v22 = v23 >> 1;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
          v24 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v24);
          v20 = (float *)*((_QWORD *)this + 9);
          v18 = (float *)*((_QWORD *)this + 10);
        }
        else
        {
          v25 = 0;
        }
        v26 = (float *)(v24 + 4 * v21);
        *v26 = v16;
        v19 = v26 + 1;
        while (v18 != v20)
        {
          v27 = *((_DWORD *)v18-- - 1);
          *((_DWORD *)v26-- - 1) = v27;
        }
        *((_QWORD *)this + 9) = v26;
        *((_QWORD *)this + 10) = v19;
        *((_QWORD *)this + 11) = v24 + 4 * v25;
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v18 = v15;
        v19 = v18 + 1;
      }
      ++v8;
      *((_QWORD *)this + 10) = v19;
      if (!v30)
        goto LABEL_40;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v8 == 3)
    v9 = v4 & v5;
  else
    v9 = 0;
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theArray);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v31);
  return v9;
}

void sub_1B5BB9EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)va1);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::AudioChannelConfiguration::ChannelDescription::add_to(DSP_Host_Types::AudioChannelConfiguration::ChannelDescription *this, __CFArray **a2)
{
  CFTypeRef cf;
  CFTypeRef Mutable;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(DSP_Host_Types::AudioChannelConfiguration::ChannelDescription *, CFTypeRef *))(*(_QWORD *)this + 24))(this, &Mutable);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&cf, Mutable);
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, cf);
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1B5BB9FA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>::add_to(uint64_t a1, __CFArray **a2)
{
  CFTypeRef v4;
  CFTypeRef cf;

  cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v4, cf);
  if (cf)
    CFRelease(cf);
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, v4);
  if (v4)
    CFRelease(v4);
}

void sub_1B5BBA050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6994B58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6994B58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void DSP_Host_Types::AudioChannelConfiguration::add_to(mcp_applesauce::CF::Dictionary_Builder &)const::$_0::operator()(uint64_t a1, __CFDictionary **a2)
{
  CFMutableArrayRef Mutable;
  _QWORD *v5;
  _QWORD *v6;
  CFTypeRef v7;
  CFTypeRef cf;
  CFTypeRef v9;

  DSP_Dictionariable::SingleKvp<unsigned int>::add_to(a1 + 24, a2);
  DSP_Dictionariable::SingleKvp<unsigned int>::add_to(a1 + 48, a2);
  DSP_Dictionariable::SingleKvp<unsigned int>::add_to(a1 + 72, a2);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  v9 = Mutable;
  v6 = *(_QWORD **)(a1 + 96);
  v5 = *(_QWORD **)(a1 + 104);
  if (v6 == v5)
  {
    v7 = Mutable;
  }
  else
  {
    do
    {
      if (*v6)
        (*(void (**)(_QWORD, CFTypeRef *))(*(_QWORD *)*v6 + 40))(*v6, &v9);
      v6 += 2;
    }
    while (v6 != v5);
    v7 = v9;
  }
  mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)&cf, v7);
  mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::ArrayRef>(*a2, CFSTR("channel descriptions"), cf);
  if (cf)
    CFRelease(cf);
  if (v9)
    CFRelease(v9);
}

void sub_1B5BBA19C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::CreateProcessorConfiguration::add_to(DSP_Host_Types::CreateProcessorConfiguration *this, __CFDictionary **a2)
{
  DSP_Dictionariable::SingleKvp<std::string>::add_to((uint64_t)this + 24, a2);
  DSP_Dictionariable::SingleKvp<std::string>::add_to((uint64_t)this + 72, a2);
}

uint64_t DSP_Host_Types::CreateProcessorConfiguration::load_from(DSP_Host_Types::CreateProcessorConfiguration *this, CFDictionaryRef *a2)
{
  int v4;

  v4 = DSP_Dictionariable::SingleKvp<std::string>::load_from((uint64_t)this + 24, a2);
  return v4 & DSP_Dictionariable::SingleKvp<std::string>::load_from((uint64_t)this + 72, a2);
}

void DSP_Host_Types::DeviceDSPOffloadInfo::add_to(DSP_Host_Types::DeviceDSPOffloadInfo *this, __CFDictionary **a2)
{
  DSP_Dictionariable::SingleKvp<std::string>::add_to((uint64_t)this + 24, a2);
}

uint64_t DSP_Host_Types::DeviceDSPOffloadInfo::load_from(DSP_Host_Types::DeviceDSPOffloadInfo *this, CFDictionaryRef *a2)
{
  return DSP_Dictionariable::SingleKvp<std::string>::load_from((uint64_t)this + 24, a2);
}

void DSP_Host_Types::DeviceDescription::~DeviceDescription(DSP_Host_Types::DeviceDescription *this)
{
  DSP_Host_Types::DeviceDescription::~DeviceDescription(this);
  JUMPOUT(0x1B5E50688);
}

{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1E6994850;
  v2 = (void *)*((_QWORD *)this + 92);
  if (v2)
  {
    *((_QWORD *)this + 93) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 712);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 688);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 664);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *((_QWORD *)this + 68) = &off_1E699D360;
  v3 = (void **)((char *)this + 640);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 616));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 592));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 568));
  *((_QWORD *)this + 68) = off_1E699D3A0;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 552);
  *((_QWORD *)this + 53) = &off_1E699D360;
  v3 = (void **)((char *)this + 520);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 496));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 472));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 448));
  *((_QWORD *)this + 53) = off_1E699D3A0;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 432);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 400));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 376));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 352));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 328));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 304));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 280));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 248));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 216));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 192));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 168));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 144));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 120));
  *((_QWORD *)this + 9) = off_1E6994AA8;
  if (*((_BYTE *)this + 112) && *((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 72));
  *((_QWORD *)this + 3) = off_1E6994AA8;
  if (*((_BYTE *)this + 64) && *((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceDescription *)((char *)this + 24));
  *(_QWORD *)this = off_1E6994D08;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

void DSP_Host_Types::DeviceDescription::add_to(uint64_t **this, __CFDictionary **a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  const void *v11;
  uint64_t *v12;
  uint64_t *v13;
  CFTypeRef v14;
  CFTypeRef cf;
  CFTypeRef Mutable;

  DSP_Host_Types::DeviceDescription::init_set((DSP_Host_Types::DeviceDescription *)this);
  v4 = this[92];
  v5 = this[93];
  while (v4 != v5)
  {
    v6 = *v4++;
    (*(void (**)(uint64_t, __CFDictionary **))(*(_QWORD *)v6 + 16))(v6, a2);
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  v7 = this[83];
  v8 = this[84];
  while (v7 != v8)
  {
    if (*v7)
      (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)*v7 + 40))(*v7, &Mutable);
    v7 += 2;
  }
  v9 = this[89];
  v10 = this[90];
  while (v9 != v10)
  {
    if (*v9)
      (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)*v9 + 40))(*v9, &Mutable);
    v9 += 2;
  }
  mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)&cf, Mutable);
  mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::ArrayRef>(*a2, CFSTR("hw streams input"), cf);
  if (cf)
    CFRelease(cf);
  v11 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  cf = v11;
  v12 = this[86];
  v13 = this[87];
  if (v12 != v13)
  {
    do
    {
      if (*v12)
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)*v12 + 40))(*v12, &cf);
      v12 += 2;
    }
    while (v12 != v13);
    v11 = cf;
  }
  mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)&v14, v11);
  mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::ArrayRef>(*a2, CFSTR("hw streams output"), v14);
  if (v14)
    CFRelease(v14);
  if (this[86] != this[87])
  {
    DSP_Host_Types::AudioChannelConfiguration::add_to((DSP_Host_Types::AudioChannelConfiguration *)(this + 53), a2);
    DSP_Host_Types::AudioChannelConfiguration::add_to((DSP_Host_Types::AudioChannelConfiguration *)(this + 68), a2);
  }
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1B5BBA558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t DSP_Host_Types::DeviceDescription::load_from(char **this, CFDictionaryRef *a2)
{
  char *v4;
  char *v5;
  int v6;
  uint64_t v7;
  CFDictionaryRef v8;
  uint64_t v9;
  char *v10;
  _BOOL4 v11;
  uint64_t v12;
  char *v13;
  __int128 *v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  _BOOL4 v25;
  int v27;
  int v28;
  CFTypeRef cf;
  CFArrayRef v30;
  char v31;
  void (**v32)(DSP_Dictionariable::TooledDictionary *__hidden);
  uint64_t v33;
  CFTypeRef *p_cf;

  DSP_Host_Types::DeviceDescription::init_set((DSP_Host_Types::DeviceDescription *)this);
  v4 = this[92];
  v5 = this[93];
  v6 = 1;
  while (v4 != v5)
  {
    v7 = *(_QWORD *)v4;
    v4 += 8;
    v6 &= (*(uint64_t (**)(uint64_t, CFDictionaryRef *))(*(_QWORD *)v7 + 24))(v7, a2);
  }
  v28 = DSP_Host_Types::AudioChannelConfiguration::load_from((DSP_Host_Types::AudioChannelConfiguration *)(this + 53), a2);
  v27 = DSP_Host_Types::AudioChannelConfiguration::load_from((DSP_Host_Types::AudioChannelConfiguration *)(this + 68), a2);
  v8 = *a2;
  if (v8)
    CFRetain(v8);
  cf = v8;
  v9 = (uint64_t)this[84];
  v10 = this[83];
  while ((char *)v9 != v10)
    v9 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v9 - 16);
  this[84] = v10;
  v32 = &off_1E699E9F8;
  v33 = 0;
  p_cf = &cf;
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>(&v30, v8, CFSTR("hw streams input"));
  if (v31)
    v11 = DSP_Host_Types::load_list_from<DSP_Host_Types::StreamConfiguration>((uint64_t)(this + 83), &v30);
  else
    v11 = 0;
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v30);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)&v32);
  v12 = (uint64_t)this[90];
  v13 = this[89];
  while ((char *)v12 != v13)
    v12 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v12 - 16);
  this[90] = v13;
  v14 = (__int128 *)this[83];
  v15 = (__int128 *)this[84];
  while (v14 != v15)
  {
    v16 = *(_QWORD *)v14;
    if (*(_QWORD *)v14 && *(_BYTE *)(v16 + 44) && *(_DWORD *)(v16 + 40) == 2)
    {
      std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100](this + 89, v14);
      v17 = (uint64_t)(v14 + 1);
      v18 = (__int128 *)this[84];
      v15 = v14;
      if (v14 + 1 != v18)
      {
        do
        {
          v19 = *(_OWORD *)v17;
          *(_QWORD *)v17 = 0;
          *(_QWORD *)(v17 + 8) = 0;
          v20 = (std::__shared_weak_count *)*((_QWORD *)v15 + 1);
          *v15 = v19;
          if (v20)
          {
            p_shared_owners = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldaxr(p_shared_owners);
            while (__stlxr(v22 - 1, p_shared_owners));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          v17 += 16;
          ++v15;
        }
        while ((__int128 *)v17 != v18);
        v17 = (uint64_t)this[84];
      }
      while ((__int128 *)v17 != v15)
      {
        v17 -= 16;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v17);
      }
      this[84] = (char *)v15;
    }
    else
    {
      ++v14;
    }
  }
  v23 = (uint64_t)this[87];
  v24 = this[86];
  while ((char *)v23 != v24)
    v23 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v23 - 16);
  this[87] = v24;
  v32 = &off_1E699E9F8;
  v33 = 0;
  p_cf = &cf;
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>(&v30, (CFDictionaryRef)cf, CFSTR("hw streams output"));
  if (v31)
    v25 = DSP_Host_Types::load_list_from<DSP_Host_Types::StreamConfiguration>((uint64_t)(this + 86), &v30);
  else
    v25 = 0;
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v30);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)&v32);
  if (cf)
    CFRelease(cf);
  return v6 & v28 & v27 & v11 & v25;
}

void sub_1B5BBA838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void *v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va1);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)va2);
  DSP_Host_Types::DeviceDescription::load_from(applesauce::CF::DictionaryRef const&)::$_0::~$_0((const void **)va);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::DeviceDescription::add_to(DSP_Host_Types::DeviceDescription *this, __CFArray **a2)
{
  CFTypeRef cf;
  CFTypeRef Mutable;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  (*(void (**)(DSP_Host_Types::DeviceDescription *, CFTypeRef *))(*(_QWORD *)this + 24))(this, &Mutable);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&cf, Mutable);
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, cf);
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1B5BBA900(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::DeviceDescription::init_set(DSP_Host_Types::DeviceDescription *this)
{
  DSP_Dictionariable::DictionarySet *v2;

  if (*((_QWORD *)this + 92) == *((_QWORD *)this + 93))
  {
    v2 = (DSP_Host_Types::DeviceDescription *)((char *)this + 736);
    DSP_Dictionariable::DictionarySet::add_kvp((DSP_Host_Types::DeviceDescription *)((char *)this + 736), (DSP_Host_Types::DeviceDescription *)((char *)this + 24));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DeviceDescription *)((char *)this + 72));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DeviceDescription *)((char *)this + 120));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DeviceDescription *)((char *)this + 144));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DeviceDescription *)((char *)this + 168));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DeviceDescription *)((char *)this + 192));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DeviceDescription *)((char *)this + 216));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DeviceDescription *)((char *)this + 248));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DeviceDescription *)((char *)this + 280));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DeviceDescription *)((char *)this + 304));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DeviceDescription *)((char *)this + 328));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DeviceDescription *)((char *)this + 352));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DeviceDescription *)((char *)this + 376));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DeviceDescription *)((char *)this + 400));
  }
}

BOOL DSP_Host_Types::load_list_from<DSP_Host_Types::StreamConfiguration>(uint64_t a1, CFArrayRef *a2)
{
  const __CFArray *v2;
  CFArrayRef v4;
  unint64_t i;
  BOOL v7;
  BOOL v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  CFIndex v12;
  CFIndex Count;
  CFTypeRef v15;
  __int128 v16;
  CFTypeRef cf[2];
  char v18;

  v2 = *a2;
  if (!*a2)
    return 0;
  Count = CFArrayGetCount(*a2);
  v4 = *a2;
  if (*a2)
    v12 = CFArrayGetCount(*a2);
  else
    v12 = 0;
  for (i = 0; ; ++i)
  {
    v7 = v2 == v4 && i == v12;
    v8 = v7;
    if (i == Count || v8)
      break;
    applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v15, v2, i);
    v9 = (std::__shared_weak_count *)operator new(0x180uLL);
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6994BE8;
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "");
    v9[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E6994A68;
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::__optional_destruct_base[abi:ne180100]<applesauce::CF::StringRef const&>((uint64_t)&v9[1].__shared_owners_, cf[0]);
    if (cf[0])
      CFRelease(cf[0]);
    v9[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E6994678;
    std::string::basic_string[abi:ne180100]<0>(cf, "stream semantic");
    DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::StreamSemanticType,DSP_Host_Types::StringLookup_StreamSemantic,unsigned int>::StringifiedKvp(&v9[2].__vftable, (const UInt8 *)cf);
    if (v18 < 0)
      operator delete((void *)cf[0]);
    DSP_Host_Types::FormatDescription::FormatDescription((DSP_Host_Types::FormatDescription *)&v9[5].__shared_weak_owners_, "current format");
    std::string::basic_string[abi:ne180100]<0>(cf, "stream id");
    DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v9[12].__vftable, (const UInt8 *)cf);
    v9[12].__vftable = (std::__shared_weak_count_vtbl *)off_1E6994AA8;
    LOBYTE(v9[12].__shared_weak_owners_) = 0;
    LOBYTE(v9[13].__shared_weak_owners_) = 0;
    if (v18 < 0)
      operator delete((void *)cf[0]);
    std::string::basic_string[abi:ne180100]<0>(cf, "latency samples");
    DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v9[14].__vftable, (const UInt8 *)cf);
    v9[14].__vftable = (std::__shared_weak_count_vtbl *)&off_1E699E950;
    LOBYTE(v9[14].__shared_weak_owners_) = 0;
    BYTE4(v9[14].__shared_weak_owners_) = 0;
    if (v18 < 0)
      operator delete((void *)cf[0]);
    v9[15].__vftable = 0;
    v9[15].__shared_owners_ = 0;
    v9[15].__shared_weak_owners_ = 0;
    *(_QWORD *)&v16 = v9 + 1;
    *((_QWORD *)&v16 + 1) = v9;
    ((void (*)(std::__shared_weak_count *, CFTypeRef *))v9[1].__on_zero_shared_weak)(&v9[1], &v15);
    std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((char **)a1, &v16);
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    if (v15)
      CFRelease(v15);
  }
  return *(_QWORD *)a1 != *(_QWORD *)(a1 + 8);
}

void sub_1B5BBAC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void **v23;
  DSP_Host_Types::FormatDescription *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  DSP_Dictionariable::DictionariableKvp *v27;
  _QWORD *v28;
  void *v30;

  if (a23 < 0)
    operator delete(__p);
  DSP_Dictionariable::SingleKvp<std::string>::~SingleKvp(v23);
  DSP_Host_Types::FormatDescription::~FormatDescription(v24);
  DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::StreamSemanticType,DSP_Host_Types::StringLookup_StreamSemantic,unsigned int>::~StringifiedKvp(v27);
  *v28 = off_1E6994A68;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100](v26);
  std::__shared_weak_count::~__shared_weak_count(v25);
  operator delete(v30);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a13);
  _Unwind_Resume(a1);
}

const void **DSP_Host_Types::DeviceDescription::load_from(applesauce::CF::DictionaryRef const&)::$_0::~$_0(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void DSP_Host_Types::IOContextDescription::add_to(DSP_Host_Types::IOContextDescription *this, __CFDictionary **a2)
{
  CFTypeRef cf;
  CFTypeRef Mutable;

  if (*((_BYTE *)this + 16) && *((_QWORD *)this + 1))
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
    DSP_Host_Types::IOContextDescription::add_to(mcp_applesauce::CF::Dictionary_Builder &)const::$_0::operator()((uint64_t)this, (__CFDictionary **)&Mutable);
    if (!*((_BYTE *)this + 16))
      std::__throw_bad_optional_access[abi:ne180100]();
    mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&cf, Mutable);
    mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::DictionaryRef>(*a2, *((const void **)this + 1), cf);
    if (cf)
      CFRelease(cf);
    if (Mutable)
      CFRelease(Mutable);
  }
  else
  {
    DSP_Host_Types::IOContextDescription::add_to(mcp_applesauce::CF::Dictionary_Builder &)const::$_0::operator()((uint64_t)this, a2);
  }
}

void sub_1B5BBB018(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t DSP_Host_Types::IOContextDescription::load_from(DSP_Host_Types::IOContextDescription *this, CFDictionaryRef *a2)
{
  const void *v3;
  CFTypeRef v4;
  uint64_t v5;
  CFTypeRef v7;
  CFTypeRef cf;
  char v9;
  _QWORD v10[3];

  if (!*((_BYTE *)this + 16))
    return DSP_Host_Types::IOContextDescription::load_from(applesauce::CF::DictionaryRef const&)::$_0::operator()((uint64_t)this, a2);
  v3 = (const void *)*((_QWORD *)this + 1);
  if (!v3)
    return DSP_Host_Types::IOContextDescription::load_from(applesauce::CF::DictionaryRef const&)::$_0::operator()((uint64_t)this, a2);
  v10[0] = &off_1E699E9F8;
  v10[1] = 0;
  v10[2] = a2;
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,__CFString const*&>(&cf, *a2, v3);
  if (v9)
  {
    v4 = cf;
    if (cf)
      CFRetain(cf);
    v7 = v4;
    v5 = DSP_Host_Types::IOContextDescription::load_from(applesauce::CF::DictionaryRef const&)::$_0::operator()((uint64_t)this, (CFDictionaryRef *)&v7);
    if (v7)
      CFRelease(v7);
  }
  else
  {
    v5 = 0;
  }
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v10);
  return v5;
}

void sub_1B5BBB0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&a9);
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a10);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)&a12);
  _Unwind_Resume(a1);
}

uint64_t DSP_Host_Types::IOContextDescription::load_from(applesauce::CF::DictionaryRef const&)::$_0::operator()(uint64_t a1, CFDictionaryRef *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  DSP_Host_OffloadDictionary **v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  CFIndex Count;
  unint64_t v24;
  uint64_t v25;
  int v26;
  void **v27;
  unsigned int v28;
  std::runtime_error *v29;
  _QWORD *v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  CFIndex v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  struct type_info *v38;
  void (*v39)(void *);
  void *v40;
  char v41;
  unint64_t v42;
  __int128 v43;
  std::vector<std::string>::pointer v44;
  std::runtime_error *v45;
  std::runtime_error *exception;
  std::runtime_error *v48;
  std::runtime_error *v49;
  unsigned int v50;
  CFArrayRef v51;
  char v52;
  void *v53[2];
  CFDictionaryRef *v54;
  unsigned __int8 v55;
  void *__p[2];
  CFDictionaryRef *v57;
  CFArrayRef theArray;
  char v59;
  _QWORD v60[3];
  __CFDictionary *v61;
  char v62;
  void **v63;
  __int128 v64;
  CFDictionaryRef *v65;
  __int128 *v66;
  _BYTE v67[24];
  _BYTE *v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  DSP_Host_Types::FormatDescription::init_set((DSP_Host_Types::FormatDescription *)(a1 + 48));
  v4 = DSP_Dictionariable::DictionarySet::maybe_load_from_under_key((uint64_t **)(a1 + 176), a2, a1 + 56);
  DSP_Host_Types::FormatDescription::init_set((DSP_Host_Types::FormatDescription *)(a1 + 200));
  v5 = DSP_Dictionariable::DictionarySet::maybe_load_from_under_key((uint64_t **)(a1 + 328), a2, a1 + 208);
  v6 = DSP_Dictionariable::SingleKvp<unsigned int>::load_from(a1 + 352, a2);
  v7 = DSP_Dictionariable::SingleKvp<unsigned int>::load_from(a1 + 376, a2);
  v8 = DSP_Host_Types::AudioChannelConfiguration::load_from((DSP_Host_Types::AudioChannelConfiguration *)(a1 + 400), a2);
  v9 = DSP_Dictionariable::SingleKvp<unsigned int>::load_from(a1 + 544, a2);
  v10 = (DSP_Host_OffloadDictionary **)(a1 + 568);
  v11 = *(std::__shared_weak_count **)(a1 + 576);
  *(_OWORD *)(a1 + 568) = 0u;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,__CFString const*>(&v61, *a2, CFSTR("dsp offload description"));
  if (v62)
  {
    v14 = operator new(0x30uLL);
    *(_OWORD *)((char *)v14 + 8) = 0u;
    *(_QWORD *)v14 = &off_1E6994C38;
    v14[2] = 0u;
    *((_QWORD *)v14 + 3) = 0;
    *(_QWORD *)&v64 = (char *)v14 + 24;
    *((_QWORD *)&v64 + 1) = v14;
    std::shared_ptr<AMCP::ASP::Engine>::__enable_weak_this[abi:ne180100]<AMCP::Core::Engine,AMCP::ASP::Engine,void>((uint64_t)&v64, (_QWORD *)v14 + 3, (uint64_t)v14 + 24);
    v15 = v64;
    v64 = 0u;
    v16 = *(std::__shared_weak_count **)(a1 + 576);
    *(_OWORD *)v10 = v15;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
    if (*((_QWORD *)&v64 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    DSP_Host_OffloadDictionary::deep_copy_from(*v10, (const __CFString *)v61);
  }
  v22 = v4 & v5 & v6 & v7 & v8 & v9;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)(a1 + 32));
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v60[0] = &off_1E699E9F8;
  v60[1] = 0;
  v60[2] = a2;
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>(&theArray, *a2, CFSTR("io context semantic list"));
  if (!v59)
    goto LABEL_56;
  if (!theArray)
  {
    v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v48, "Could not construct");
    __cxa_throw(v48, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Count = CFArrayGetCount(theArray);
  DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing((DSP_Host_Types::StringLookup_AudioProcessing *)&v64);
  v50 = v22;
  if (Count)
  {
    v24 = 0;
    v25 = 0;
    do
    {
      if (!v59)
        std::__throw_bad_optional_access[abi:ne180100]();
      if (!theArray)
      {
        v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v29, "Could not construct");
        __cxa_throw(v29, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::details::at_as<std::string>(v53, theArray, v24);
      v26 = v55;
      if (v55)
      {
        *(_OWORD *)__p = *(_OWORD *)v53;
        v57 = v54;
        v53[1] = 0;
        v54 = 0;
        v53[0] = 0;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "");
      }
      if (SHIBYTE(v57) >= 0)
        v27 = __p;
      else
        v27 = (void **)__p[0];
      v63 = v27;
      if (!v66)
        std::__throw_bad_function_call[abi:ne180100]();
      v28 = (*(uint64_t (**)(__int128 *, void ***))(*(_QWORD *)v66 + 48))(v66, &v63);
      if (SHIBYTE(v57) < 0)
        operator delete(__p[0]);
      if (v26 && SHIBYTE(v54) < 0)
        operator delete(v53[0]);
      std::__tree<DSP_Host_Types::AudioProcessingType>::__emplace_unique_key_args<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::AudioProcessingType const&>((uint64_t **)(a1 + 24), v28, v28);
      ++v25;
      ++v24;
    }
    while (Count != v24);
  }
  else
  {
    v25 = 0;
  }
  if (Count == v25)
    v22 = v50;
  else
    v22 = 0;
  v30 = v68;
  if (v68 == v67)
  {
    v31 = 4;
    v30 = v67;
    goto LABEL_50;
  }
  if (v68)
  {
    v31 = 5;
LABEL_50:
    (*(void (**)(void))(*v30 + 8 * v31))();
  }
  v32 = v66;
  if (v66 == &v64)
  {
    v33 = 4;
    v32 = &v64;
  }
  else
  {
    if (!v66)
      goto LABEL_56;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_56:
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 520));
  v53[0] = &off_1E699E9F8;
  v53[1] = 0;
  v54 = a2;
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>(&v51, *a2, CFSTR("io context stream id list"));
  if (v52)
  {
    if (!v51)
    {
      v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v49, "Could not construct");
      __cxa_throw(v49, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v34 = CFArrayGetCount(v51);
    v35 = v22;
    if (v34)
    {
      v36 = 0;
      v37 = 0;
      v38 = (struct type_info *)MEMORY[0x1E0DE4E80];
      v39 = (void (*)(void *))MEMORY[0x1E0DE4338];
      do
      {
        if (!v52)
          std::__throw_bad_optional_access[abi:ne180100]();
        if (!v51)
        {
          v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v45, "Could not construct");
          __cxa_throw(v45, v38, v39);
        }
        applesauce::CF::details::at_as<std::string>(&v64, v51, v36);
        if ((_BYTE)v66)
        {
          *(_OWORD *)__p = v64;
          v57 = v65;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "");
        }
        v40 = (void *)HIBYTE(v57);
        v41 = HIBYTE(v57);
        if (SHIBYTE(v57) < 0)
          v40 = __p[1];
        if (v40)
        {
          v42 = *(_QWORD *)(a1 + 528);
          if (v42 >= *(_QWORD *)(a1 + 536))
          {
            v44 = std::vector<std::string>::__push_back_slow_path<std::string const&>((std::vector<std::string> *)(a1 + 520), (__int128 *)__p);
          }
          else
          {
            if (SHIBYTE(v57) < 0)
            {
              std::string::__init_copy_ctor_external(*(std::string **)(a1 + 528), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
            }
            else
            {
              v43 = *(_OWORD *)__p;
              *(_QWORD *)(v42 + 16) = v57;
              *(_OWORD *)v42 = v43;
            }
            v44 = (std::vector<std::string>::pointer)(v42 + 24);
            *(_QWORD *)(a1 + 528) = v42 + 24;
          }
          *(_QWORD *)(a1 + 528) = v44;
          v41 = HIBYTE(v57);
        }
        if (v41 < 0)
          operator delete(__p[0]);
        ++v37;
        ++v36;
      }
      while (v34 != v36);
    }
    else
    {
      v37 = 0;
    }
    if (v34 == v37)
      v22 = v35;
    else
      v22 = 0;
  }
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v51);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v53);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theArray);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v60);
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v61);
  return v22;
}

void sub_1B5BBB838()
{
  uint64_t v0;
  uint64_t v1;

  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](&v0);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)&v1);
  JUMPOUT(0x1B5BBB88CLL);
}

void sub_1B5BBB840(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;

  __cxa_free_exception(v11);
  JUMPOUT(0x1B5BBB84CLL);
}

void sub_1B5BBB860()
{
  uint64_t v0;
  uint64_t v1;

  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v0);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)&v1);
  JUMPOUT(0x1B5BBB8B8);
}

void sub_1B5BBB8B0()
{
  JUMPOUT(0x1B5BBB8B8);
}

const __CFString *applesauce::CF::details::at_as<std::string>(_BYTE *a1, CFArrayRef theArray, unint64_t a3)
{
  const __CFString *result;

  result = (const __CFString *)CFArrayGetCount(theArray);
  if ((unint64_t)result > a3)
  {
    result = (const __CFString *)CFArrayGetValueAtIndex(theArray, a3);
    if (result)
      return (const __CFString *)applesauce::CF::convert_as<std::string,0>((uint64_t)a1, result);
  }
  *a1 = 0;
  a1[24] = 0;
  return result;
}

void DSP_Host_Types::StringLookup_AudioProcessing::~StringLookup_AudioProcessing(DSP_Host_Types::StringLookup_AudioProcessing *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  DSP_Host_Types::StringLookup_AudioProcessing *v5;
  uint64_t v6;

  v2 = (char *)this + 32;
  v3 = (char *)*((_QWORD *)this + 7);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (DSP_Host_Types::StringLookup_AudioProcessing *)*((_QWORD *)this + 3);
  if (v5 == this)
  {
    v6 = 4;
    v5 = this;
  }
  else
  {
    if (!v5)
      return;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
}

CFTypeID applesauce::CF::convert_as<std::string,0>(uint64_t a1, const __CFString *a2)
{
  CFTypeID TypeID;
  CFTypeID result;
  char v6;
  __int128 v7;
  uint64_t v8;

  TypeID = CFStringGetTypeID();
  result = CFGetTypeID(a2);
  if (TypeID == result)
  {
    result = (CFTypeID)applesauce::CF::details::CFString_get_value<false>((uint64_t)&v7, a2);
    *(_OWORD *)a1 = v7;
    *(_QWORD *)(a1 + 16) = v8;
    v6 = 1;
  }
  else
  {
    v6 = 0;
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 24) = v6;
  return result;
}

void DSP_Host_Types::IOContextDescription::add_to(mcp_applesauce::CF::Dictionary_Builder &)const::$_0::operator()(uint64_t a1, __CFDictionary **a2)
{
  uint64_t v4;
  const __CFDictionary *v5;
  __CFArray *Mutable;
  _QWORD *v7;
  CFTypeRef *v8;
  CFIndex v9;
  CFStringRef v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  CFMutableArrayRef v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  const UInt8 *v22;
  CFIndex v23;
  CFStringRef v24;
  std::runtime_error *exception;
  std::runtime_error *v26;
  CFTypeRef cf[2];
  unsigned __int8 v28;
  __CFArray *v29;
  CFTypeRef v30[2];
  int v31;
  char v32;
  _BYTE v33[24];
  _BYTE *v34;
  _BYTE v35[24];
  _BYTE *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  DSP_Host_Types::FormatDescription::init_set((DSP_Host_Types::FormatDescription *)(a1 + 48));
  DSP_Dictionariable::DictionarySet::maybe_add_under_key((uint64_t **)(a1 + 176), a2, a1 + 56);
  DSP_Host_Types::FormatDescription::init_set((DSP_Host_Types::FormatDescription *)(a1 + 200));
  DSP_Dictionariable::DictionarySet::maybe_add_under_key((uint64_t **)(a1 + 328), a2, a1 + 208);
  DSP_Dictionariable::SingleKvp<unsigned int>::add_to(a1 + 352, a2);
  DSP_Dictionariable::SingleKvp<unsigned int>::add_to(a1 + 376, a2);
  DSP_Host_Types::AudioChannelConfiguration::add_to((DSP_Host_Types::AudioChannelConfiguration *)(a1 + 400), a2);
  DSP_Dictionariable::SingleKvp<unsigned int>::add_to(a1 + 544, a2);
  v4 = *(_QWORD *)(a1 + 568);
  if (v4)
  {
    v5 = *(const __CFDictionary **)(v4 + 16);
    if (v5)
    {
      if (CFDictionaryGetCount(v5))
      {
        v30[0] = 0;
        DSP_Host_OffloadDictionary::create_into(*(DSP_Host_OffloadDictionary **)(a1 + 568), (const __CFDictionary **)v30);
        applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)cf, v30[0]);
        mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::DictionaryRef>(*a2, CFSTR("dsp offload description"), cf[0]);
        if (cf[0])
          CFRelease(cf[0]);
      }
    }
  }
  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_39;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  v29 = Mutable;
  std::string::basic_string[abi:ne180100]<0>(cf, "");
  DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::StringLookup_AudioProcessing,unsigned int>::StringifiedKvp(v30, (const UInt8 *)cf);
  if ((char)v28 < 0)
    operator delete((void *)cf[0]);
  v7 = *(_QWORD **)(a1 + 24);
  if (v7 != (_QWORD *)(a1 + 32))
  {
    do
    {
      v31 = *((_DWORD *)v7 + 7);
      v32 = 1;
      DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::StringLookup_AudioProcessing,unsigned int>::get_string(cf, (uint64_t)v30);
      if ((v28 & 0x80u) == 0)
        v8 = cf;
      else
        v8 = (CFTypeRef *)cf[0];
      if ((v28 & 0x80u) == 0)
        v9 = v28;
      else
        v9 = (CFIndex)cf[1];
      v10 = CFStringCreateWithBytes(0, (const UInt8 *)v8, v9, 0x8000100u, 0);
      if (!v10)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if ((char)v28 < 0)
        operator delete((void *)cf[0]);
      mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::StringRef>(Mutable, v10);
      CFRelease(v10);
      v11 = (_QWORD *)v7[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v7[2];
          v13 = *v12 == (_QWORD)v7;
          v7 = v12;
        }
        while (!v13);
      }
      v7 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 32));
  }
  mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)cf, Mutable);
  mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::ArrayRef>(*a2, CFSTR("io context semantic list"), cf[0]);
  if (cf[0])
    CFRelease(cf[0]);
  v30[0] = &off_1E6996630;
  v14 = v36;
  if (v36 == v35)
  {
    v15 = 4;
    v14 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_32;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_32:
  v16 = v34;
  if (v34 == v33)
  {
    v17 = 4;
    v16 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_37;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_37:
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v30);
  if (Mutable)
    CFRelease(Mutable);
LABEL_39:
  if (*(_QWORD *)(a1 + 520) == *(_QWORD *)(a1 + 528))
    return;
  v18 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  v30[0] = v18;
  v19 = *(_QWORD *)(a1 + 520);
  v20 = *(_QWORD *)(a1 + 528);
  while (v19 != v20)
  {
    v21 = *(_BYTE *)(v19 + 23);
    if (v21 < 0)
    {
      if (!*(_QWORD *)(v19 + 8))
        goto LABEL_54;
    }
    else if (!*(_BYTE *)(v19 + 23))
    {
      goto LABEL_54;
    }
    if (v21 >= 0)
      v22 = (const UInt8 *)v19;
    else
      v22 = *(const UInt8 **)v19;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(v19 + 23);
    else
      v23 = *(_QWORD *)(v19 + 8);
    v24 = CFStringCreateWithBytes(0, v22, v23, 0x8000100u, 0);
    if (!v24)
    {
      v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v26, "Could not construct");
      __cxa_throw(v26, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::StringRef>(v18, v24);
    CFRelease(v24);
LABEL_54:
    v19 += 24;
  }
  mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)cf, v18);
  mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::ArrayRef>(*a2, CFSTR("io context stream id list"), cf[0]);
  if (cf[0])
    CFRelease(cf[0]);
  if (v18)
    CFRelease(v18);
}

void sub_1B5BBBE5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::StringLookup_AudioProcessing,unsigned int>::StringifiedKvp(_QWORD *a1, const UInt8 *a2)
{
  _QWORD *v3;

  v3 = DSP_Dictionariable::DictionariableKvp::DictionariableKvp(a1, a2);
  *((_BYTE *)v3 + 16) = 0;
  *((_BYTE *)v3 + 20) = 0;
  *v3 = &off_1E6996630;
  DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing((DSP_Host_Types::StringLookup_AudioProcessing *)(v3 + 3));
  return a1;
}

void sub_1B5BBBF50(_Unwind_Exception *a1)
{
  DSP_Dictionariable::DictionariableKvp *v1;

  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v1);
  _Unwind_Resume(a1);
}

_QWORD *DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::StringLookup_AudioProcessing,unsigned int>::get_string(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  int v6;

  if (!*(_BYTE *)(a2 + 20))
    std::__throw_bad_optional_access[abi:ne180100]();
  v6 = *(_DWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 80);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  v4 = (char *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v3 + 48))(v3, &v6);
  return std::string::basic_string[abi:ne180100]<0>(a1, v4);
}

void DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::StringLookup_AudioProcessing,unsigned int>::~StringifiedKvp(DSP_Dictionariable::DictionariableKvp *this)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E6996630;
  v2 = (char *)this + 24;
  v3 = (char *)this + 56;
  v4 = (char *)*((_QWORD *)this + 10);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  v6 = (char *)*((_QWORD *)this + 6);
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(this);
}

{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E6996630;
  v2 = (char *)this + 24;
  v3 = (char *)this + 56;
  v4 = (char *)*((_QWORD *)this + 10);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  v6 = (char *)*((_QWORD *)this + 6);
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
    {
LABEL_11:
      DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(this);
      JUMPOUT(0x1B5E50688);
    }
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  goto LABEL_11;
}

void DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::StringLookup_AudioProcessing,unsigned int>::add_to(uint64_t a1, __CFDictionary **a2)
{
  uint64_t v3;
  char *v5;
  unsigned __int8 v6;
  CFIndex v7;
  void **v8;
  CFStringRef v9;
  std::runtime_error *exception;
  void *__p[2];
  unsigned __int8 v12;
  int v13;

  if (*(_BYTE *)(a1 + 20))
  {
    v13 = *(_DWORD *)(a1 + 16);
    v3 = *(_QWORD *)(a1 + 80);
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    v5 = (char *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v3 + 48))(v3, &v13);
    std::string::basic_string[abi:ne180100]<0>(__p, v5);
    v6 = v12;
    if ((v12 & 0x80u) == 0)
      v7 = v12;
    else
      v7 = (CFIndex)__p[1];
    if (v7)
    {
      if ((v12 & 0x80u) == 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      v9 = CFStringCreateWithBytes(0, (const UInt8 *)v8, v7, 0x8000100u, 0);
      if (!v9)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(*a2, *(const void **)(a1 + 8), v9);
      CFRelease(v9);
      v6 = v12;
    }
    if ((v6 & 0x80) != 0)
      operator delete(__p[0]);
  }
}

void sub_1B5BBC1F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::StringLookup_AudioProcessing,unsigned int>::load_from(uint64_t a1, CFDictionaryRef *a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  char v9;
  _QWORD v10[3];
  void **v11;

  if (*(_BYTE *)(a1 + 20))
    *(_BYTE *)(a1 + 20) = 0;
  v10[0] = &off_1E699E9F8;
  v10[1] = 0;
  v10[2] = a2;
  if (applesauce::CF::details::has_key<__CFString const*&>(*a2, *(const void **)(a1 + 8)))
  {
    applesauce::CF::details::find_at_key<std::string,__CFString const*&>((uint64_t)__p, *a2, *(const void **)(a1 + 8));
    if (v9 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    v11 = v4;
    v5 = *(_QWORD *)(a1 + 48);
    if (!v5)
      std::__throw_bad_function_call[abi:ne180100]();
    *(_DWORD *)(a1 + 16) = (*(uint64_t (**)(uint64_t, void ***))(*(_QWORD *)v5 + 48))(v5, &v11);
    *(_BYTE *)(a1 + 20) = 1;
    if (v9 < 0)
      operator delete(__p[0]);
    v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v10);
  return v6;
}

void DSP_Host_Types::ConfigurationChangeRequest::add_to(DSP_Host_Types::ConfigurationChangeRequest *this, __CFDictionary **a2)
{
  uint64_t v4;
  uint64_t v5;
  const void **v6;
  const void *v7;
  const void **v8;
  const void *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  CFMutableArrayRef Mutable;
  char *v25;
  char *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  CFTypeRef cf;
  __int128 v31;
  __int128 v32;
  char *v33;
  char *v34;
  uint64_t v35;

  v4 = MEMORY[0x1E0C9AE58];
  v5 = MEMORY[0x1E0C9AE48];
  if (*((_BYTE *)this + 41))
  {
    v6 = (const void **)(*((_BYTE *)this + 40) ? MEMORY[0x1E0C9AE58] : MEMORY[0x1E0C9AE48]);
    v7 = *v6;
    mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::BooleanRef>(*a2, *((const void **)this + 4), *v6);
    if (v7)
      CFRelease(v7);
  }
  if (*((_BYTE *)this + 65))
  {
    v8 = (const void **)(*((_BYTE *)this + 64) ? v4 : v5);
    v9 = *v8;
    mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::BooleanRef>(*a2, *((const void **)this + 7), *v8);
    if (v9)
      CFRelease(v9);
  }
  DSP_Host_Types::IOContextDescription::add_to((DSP_Host_Types::ConfigurationChangeRequest *)((char *)this + 72), a2);
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v32 = 0uLL;
  v10 = (uint64_t *)*((_QWORD *)this + 82);
  v11 = (uint64_t *)*((_QWORD *)this + 83);
  while (v10 != v11)
  {
    v12 = *v10;
    v13 = v10[1];
    *(_QWORD *)&v31 = *v10;
    *((_QWORD *)&v31 + 1) = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    if (v12)
    {
      if (*(_BYTE *)(v12 + 137) && *(_BYTE *)(v12 + 136))
      {
        if (v13)
        {
          v16 = (unint64_t *)(v13 + 8);
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
        }
        v18 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
        *(_QWORD *)&v32 = v12;
        *((_QWORD *)&v32 + 1) = v13;
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
      }
      else
      {
        std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100](&v33, &v31);
      }
    }
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    if (*((_QWORD *)&v31 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v10 += 2;
  }
  std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100](&v33, &v32);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  *(_QWORD *)&v31 = Mutable;
  v25 = v33;
  v26 = v34;
  if (v33 != v34)
  {
    do
    {
      if (*(_QWORD *)v25)
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)v25 + 40))(*(_QWORD *)v25, &v31);
      v25 += 16;
    }
    while (v25 != v26);
    Mutable = (CFMutableArrayRef)v31;
  }
  mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)&cf, Mutable);
  mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::ArrayRef>(*a2, CFSTR("device descriptions"), cf);
  if (cf)
    CFRelease(cf);
  if ((_QWORD)v31)
    CFRelease((CFTypeRef)v31);
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  *(_QWORD *)&v32 = &v33;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
}

void sub_1B5BBC664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  a12 = (void **)&a14;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t DSP_Host_Types::ConfigurationChangeRequest::load_from(DSP_Host_Types::ConfigurationChangeRequest *this, CFDictionaryRef *a2)
{
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFArray *v10;
  CFArrayRef v11;
  _BOOL4 v12;
  unint64_t v13;
  BOOL v14;
  BOOL v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  DSP_Host_Types::ConfigurationChangeRequest *v20;
  const __CFArray *v21;
  const __CFArray *v22;
  CFIndex v23;
  CFIndex Count;
  CFArrayRef theArray;
  char v26;
  _QWORD v27[3];
  CFTypeRef v28;
  __int128 v29;
  void *v30[2];
  char v31;

  v4 = DSP_Dictionariable::SingleKvp<BOOL>::load_from((uint64_t)this + 24, a2);
  v5 = v4 & DSP_Dictionariable::SingleKvp<BOOL>::load_from((uint64_t)this + 48, a2);
  v6 = DSP_Host_Types::IOContextDescription::load_from((DSP_Host_Types::ConfigurationChangeRequest *)((char *)this + 72), a2);
  v7 = *((_QWORD *)this + 83);
  v20 = this;
  v8 = *((_QWORD *)this + 82);
  while (v7 != v8)
    v7 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v7 - 16);
  v9 = v5 & v6;
  *((_QWORD *)v20 + 83) = v8;
  v27[0] = &off_1E699E9F8;
  v27[1] = 0;
  v27[2] = a2;
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>(&theArray, *a2, CFSTR("device descriptions"));
  if (v26)
  {
    v10 = theArray;
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      v11 = theArray;
      if (theArray)
        v23 = CFArrayGetCount(theArray);
      else
        v23 = 0;
      v13 = 0;
      v22 = v10;
      v21 = v11;
      while (1)
      {
        v14 = v10 == v11 && v13 == v23;
        v15 = v14;
        if (v13 == Count || v15)
          break;
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v28, v10, v13);
        v16 = (std::__shared_weak_count *)operator new(0x310uLL);
        v16->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        v16->__shared_weak_owners_ = 0;
        v16->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6994E20;
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v30, "");
        v16[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E6994D08;
        std::__optional_destruct_base<applesauce::CF::StringRef,false>::__optional_destruct_base[abi:ne180100]<applesauce::CF::StringRef const&>((uint64_t)&v16[1].__shared_owners_, v30[0]);
        if (v30[0])
          CFRelease(v30[0]);
        v16[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E6994850;
        std::string::basic_string[abi:ne180100]<0>(v30, "device uid");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v16[2].__vftable, (const UInt8 *)v30);
        v16[2].__vftable = (std::__shared_weak_count_vtbl *)off_1E6994AA8;
        LOBYTE(v16[2].__shared_weak_owners_) = 0;
        LOBYTE(v16[3].__shared_weak_owners_) = 0;
        if (v31 < 0)
          operator delete(v30[0]);
        std::string::basic_string[abi:ne180100]<0>(v30, "device model uid");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v16[4].__vftable, (const UInt8 *)v30);
        v16[4].__vftable = (std::__shared_weak_count_vtbl *)off_1E6994AA8;
        LOBYTE(v16[4].__shared_weak_owners_) = 0;
        LOBYTE(v16[5].__shared_weak_owners_) = 0;
        if (v31 < 0)
          operator delete(v30[0]);
        std::string::basic_string[abi:ne180100]<0>(v30, "is default device");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v16[6].__vftable, (const UInt8 *)v30);
        v16[6].__vftable = (std::__shared_weak_count_vtbl *)&off_1E699D180;
        LOWORD(v16[6].__shared_weak_owners_) = 0;
        if (v31 < 0)
          operator delete(v30[0]);
        std::string::basic_string[abi:ne180100]<0>(v30, "transport type");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v16[7].__vftable, (const UInt8 *)v30);
        v16[7].__vftable = (std::__shared_weak_count_vtbl *)&off_1E699E950;
        LOBYTE(v16[7].__shared_weak_owners_) = 0;
        BYTE4(v16[7].__shared_weak_owners_) = 0;
        if (v31 < 0)
          operator delete(v30[0]);
        std::string::basic_string[abi:ne180100]<0>(v30, "data source type in");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v16[8].__vftable, (const UInt8 *)v30);
        v16[8].__vftable = (std::__shared_weak_count_vtbl *)&off_1E699E950;
        LOBYTE(v16[8].__shared_weak_owners_) = 0;
        BYTE4(v16[8].__shared_weak_owners_) = 0;
        if (v31 < 0)
          operator delete(v30[0]);
        std::string::basic_string[abi:ne180100]<0>(v30, "data source type out");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v16[9].__vftable, (const UInt8 *)v30);
        v16[9].__vftable = (std::__shared_weak_count_vtbl *)&off_1E699E950;
        LOBYTE(v16[9].__shared_weak_owners_) = 0;
        BYTE4(v16[9].__shared_weak_owners_) = 0;
        if (v31 < 0)
          operator delete(v30[0]);
        std::string::basic_string[abi:ne180100]<0>(v30, "sample rate");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v16[10].__vftable, (const UInt8 *)v30);
        v16[10].__vftable = (std::__shared_weak_count_vtbl *)&off_1E699D308;
        LOBYTE(v16[10].__shared_weak_owners_) = 0;
        LOBYTE(v16[11].__vftable) = 0;
        if (v31 < 0)
          operator delete(v30[0]);
        std::string::basic_string[abi:ne180100]<0>(v30, "hardware sample rate");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v16[11].__shared_owners_, (const UInt8 *)v30);
        v16[11].__shared_owners_ = (uint64_t)&off_1E699D308;
        LOBYTE(v16[12].__vftable) = 0;
        LOBYTE(v16[12].__shared_owners_) = 0;
        if (v31 < 0)
          operator delete(v30[0]);
        std::string::basic_string[abi:ne180100]<0>(v30, "latency in samples");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v16[12].__shared_weak_owners_, (const UInt8 *)v30);
        v16[12].__shared_weak_owners_ = (uint64_t)&off_1E699E950;
        LOBYTE(v16[13].__shared_owners_) = 0;
        BYTE4(v16[13].__shared_owners_) = 0;
        if (v31 < 0)
          operator delete(v30[0]);
        std::string::basic_string[abi:ne180100]<0>(v30, "latency out samples");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v16[13].__shared_weak_owners_, (const UInt8 *)v30);
        v16[13].__shared_weak_owners_ = (uint64_t)&off_1E699E950;
        LOBYTE(v16[14].__shared_owners_) = 0;
        BYTE4(v16[14].__shared_owners_) = 0;
        if (v31 < 0)
          operator delete(v30[0]);
        std::string::basic_string[abi:ne180100]<0>(v30, "safety offset in samples");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v16[14].__shared_weak_owners_, (const UInt8 *)v30);
        v16[14].__shared_weak_owners_ = (uint64_t)&off_1E699E950;
        LOBYTE(v16[15].__shared_owners_) = 0;
        BYTE4(v16[15].__shared_owners_) = 0;
        if (v31 < 0)
          operator delete(v30[0]);
        std::string::basic_string[abi:ne180100]<0>(v30, "safety offset out samples");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v16[15].__shared_weak_owners_, (const UInt8 *)v30);
        v16[15].__shared_weak_owners_ = (uint64_t)&off_1E699E950;
        LOBYTE(v16[16].__shared_owners_) = 0;
        BYTE4(v16[16].__shared_owners_) = 0;
        if (v31 < 0)
          operator delete(v30[0]);
        std::string::basic_string[abi:ne180100]<0>(v30, "bluetooth device category");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v16[16].__shared_weak_owners_, (const UInt8 *)v30);
        v16[16].__shared_weak_owners_ = (uint64_t)&off_1E699E950;
        LOBYTE(v16[17].__shared_owners_) = 0;
        BYTE4(v16[17].__shared_owners_) = 0;
        if (v31 < 0)
          operator delete(v30[0]);
        std::string::basic_string[abi:ne180100]<0>(v30, "bluetooth ecnr enabled");
        DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v16[17].__shared_weak_owners_, (const UInt8 *)v30);
        v16[17].__shared_weak_owners_ = (uint64_t)&off_1E699D180;
        LOWORD(v16[18].__shared_owners_) = 0;
        if (v31 < 0)
          operator delete(v30[0]);
        DSP_Host_Types::AudioChannelConfiguration::AudioChannelConfiguration((DSP_Host_Types::AudioChannelConfiguration *)&v16[18].__shared_weak_owners_, "output preferred layout");
        DSP_Host_Types::AudioChannelConfiguration::AudioChannelConfiguration((DSP_Host_Types::AudioChannelConfiguration *)&v16[23].__shared_weak_owners_, "output default layout");
        *(_OWORD *)&v16[31].__shared_owners_ = 0u;
        v16[32].std::__shared_count = 0u;
        v16[30].std::__shared_count = 0u;
        *(_OWORD *)&v16[30].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v16[28].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v16[29].__shared_owners_ = 0u;
        DSP_Host_Types::DeviceDescription::init_set((DSP_Host_Types::DeviceDescription *)&v16[1]);
        *(_QWORD *)&v29 = v16 + 1;
        *((_QWORD *)&v29 + 1) = v16;
        ((void (*)(std::__shared_weak_count *, CFTypeRef *))v16[1].__on_zero_shared_weak)(&v16[1], &v28);
        std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((char **)v20 + 82, &v29);
        v11 = v21;
        v10 = v22;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        if (v28)
          CFRelease(v28);
        ++v13;
      }
      v12 = *((_QWORD *)v20 + 82) != *((_QWORD *)v20 + 83);
    }
    else
    {
      v12 = 0;
    }
    v9 = v9 & v12;
  }
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theArray);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v27);
  return v9;
}

void sub_1B5BBCD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, DSP_Dictionariable::DictionariableKvp *a10, uint64_t a11, DSP_Dictionariable::DictionariableKvp *a12, void **a13, void **a14, DSP_Dictionariable::DictionariableKvp *a15, DSP_Dictionariable::DictionariableKvp *a16, DSP_Dictionariable::DictionariableKvp *a17, DSP_Dictionariable::DictionariableKvp *a18, DSP_Dictionariable::DictionariableKvp *a19, DSP_Dictionariable::DictionariableKvp *a20,DSP_Dictionariable::DictionariableKvp *a21,DSP_Dictionariable::DictionariableKvp *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  DSP_Dictionariable::DictionariableKvp *v29;
  DSP_Dictionariable::DictionariableKvp *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  _QWORD *v33;
  DSP_Host_Types::AudioChannelConfiguration *v34;
  DSP_Host_Types::AudioChannelConfiguration *v35;
  uint64_t v36;
  std::__shared_weak_count_vtbl *shared_weak_owners;
  void *v39;

  shared_weak_owners = (std::__shared_weak_count_vtbl *)v31[31].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    v31[32].__vftable = shared_weak_owners;
    operator delete(shared_weak_owners);
  }
  *(_QWORD *)(v36 - 112) = (char *)v31 + 736;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 112));
  *(_QWORD *)(v36 - 112) = (char *)v31 + 712;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 112));
  *(_QWORD *)(v36 - 112) = v32;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 112));
  DSP_Host_Types::AudioChannelConfiguration::~AudioChannelConfiguration(v34);
  DSP_Host_Types::AudioChannelConfiguration::~AudioChannelConfiguration(v35);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v29);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v30);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(a10);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(a15);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(a16);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(a17);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(a18);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(a19);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(a20);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(a21);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(a22);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(a12);
  DSP_Dictionariable::SingleKvp<std::string>::~SingleKvp(a13);
  DSP_Dictionariable::SingleKvp<std::string>::~SingleKvp(a14);
  *v33 = off_1E6994D08;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100](a11);
  std::__shared_weak_count::~__shared_weak_count(v31);
  operator delete(v39);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v36 - 136));
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a29);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)(v36 - 160));
  _Unwind_Resume(a1);
}

void sub_1B5BBCE4C()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  JUMPOUT(0x1B5BBCDA0);
}

void sub_1B5BBCE64()
{
  JUMPOUT(0x1B5BBCDA0);
}

void sub_1B5BBCE6C()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  JUMPOUT(0x1B5BBCDA8);
}

void sub_1B5BBCE84()
{
  JUMPOUT(0x1B5BBCDA8);
}

void sub_1B5BBCE8C()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  JUMPOUT(0x1B5BBCDB8);
}

void sub_1B5BBCEC8()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  JUMPOUT(0x1B5BBCDC0);
}

void sub_1B5BBCF04()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  JUMPOUT(0x1B5BBCDCCLL);
}

void sub_1B5BBCF48()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  JUMPOUT(0x1B5BBCDD4);
}

void sub_1B5BBCF88()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  JUMPOUT(0x1B5BBCDDCLL);
}

void sub_1B5BBCFC8()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  JUMPOUT(0x1B5BBCDE4);
}

void sub_1B5BBD004()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  JUMPOUT(0x1B5BBCDECLL);
}

void sub_1B5BBD040()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  JUMPOUT(0x1B5BBCDF4);
}

void sub_1B5BBD07C()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  JUMPOUT(0x1B5BBCDFCLL);
}

void sub_1B5BBD0A0()
{
  JUMPOUT(0x1B5BBCDFCLL);
}

void sub_1B5BBD0B4()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  JUMPOUT(0x1B5BBCE04);
}

void sub_1B5BBD0D4()
{
  JUMPOUT(0x1B5BBCE04);
}

void sub_1B5BBD0E4()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  JUMPOUT(0x1B5BBCE0CLL);
}

void sub_1B5BBD100()
{
  JUMPOUT(0x1B5BBCE0CLL);
}

void sub_1B5BBD10C()
{
  JUMPOUT(0x1B5BBCE20);
}

void sub_1B5BBD114()
{
  JUMPOUT(0x1B5BBCE2CLL);
}

void sub_1B5BBD11C()
{
  JUMPOUT(0x1B5BBCE34);
}

void sub_1B5BBD124()
{
  uint64_t v0;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v0 - 128);
  JUMPOUT(0x1B5BBCE2CLL);
}

uint64_t DSP_Host_Types::ConfigurationChangeRequest::debug_device_list@<X0>(DSP_Host_Types::ConfigurationChangeRequest *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  uint64_t *i;
  uint64_t v6;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v9;
  std::string __p;
  _QWORD v12[2];
  uint64_t v13;
  _QWORD v14[10];
  char v15;
  uint64_t v16;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  v4 = (uint64_t *)*((_QWORD *)this + 82);
  for (i = (uint64_t *)*((_QWORD *)this + 83); v4 != i; v4 += 2)
  {
    v6 = *v4;
    if (*(_BYTE *)(*v4 + 64))
    {
      if (*(char *)(v6 + 63) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v6 + 40), *(_QWORD *)(v6 + 48));
      else
        __p = *(std::string *)(v6 + 40);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "<no id>");
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)p_p, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"  ", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a2, (uint64_t)v14);
  v12[0] = *MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v13 = v9;
  v14[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v15 < 0)
    operator delete((void *)v14[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B5E50598](&v16);
}

void sub_1B5BBD2AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t DSP_Host_Types::ConfigurationChangeRequest::debug_log_device_summary(DSP_Host_Types::ConfigurationChangeRequest *this, const char *a2)
{
  size_t v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  BOOL v17;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  int16x8_t v23;
  int32x4_t v24;
  uint32x4_t v25;
  std::string *v26;
  std::string::size_type v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned int v30;
  BOOL v31;
  uint64_t *v32;
  std::string *v33;
  std::string::size_type v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  _QWORD *v47;
  AMCP::Log::Scope_Registry *v48;
  std::__shared_weak_count *v49;
  NSObject *v50;
  unint64_t *v51;
  unint64_t v52;
  _opaque_pthread_t *v53;
  mach_port_t v54;
  unint64_t v55;
  char *v56;
  int v57;
  char *v58;
  const char *v59;
  std::string *p_dst;
  std::string::size_type v61;
  std::string::size_type v62;
  unint64_t v63;
  _QWORD *v64;
  std::__shared_weak_count **v65;
  std::__shared_weak_count *v66;
  int shared_weak_owners_low;
  std::__shared_weak_count **v68;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::string *v80;
  std::string::size_type v81;
  std::string *v82;
  std::string::size_type v83;
  const char *v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  int16x8_t v88;
  unsigned int shared_weak_owners;
  int32x4_t v90;
  uint32x4_t v91;
  int16x8_t v92;
  unsigned int v93;
  int32x4_t v94;
  uint32x4_t v95;
  std::string::size_type v96;
  std::string *v97;
  std::string::size_type v98;
  char *v99;
  AMCP::Log::Scope_Registry *v100;
  std::string::size_type v101;
  std::string *v102;
  std::string::size_type v103;
  std::__shared_weak_count *v104;
  std::string *v105;
  std::string::size_type v106;
  std::string *v107;
  std::string::size_type v108;
  std::string *v109;
  std::string::size_type v110;
  std::string *v111;
  std::string::size_type v112;
  void **v113;
  uint64_t v114;
  void **v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  NSObject *v118;
  unint64_t *v119;
  unint64_t v120;
  _opaque_pthread_t *v121;
  mach_port_t v122;
  unint64_t v123;
  char *v124;
  int v125;
  char *v126;
  const char *v127;
  std::string *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v143;
  DSP_Host_Types::ConfigurationChangeRequest *v144;
  std::string::size_type v145;
  std::string::size_type v146;
  void *v147[2];
  unsigned __int8 v148;
  std::string v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count *v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count *v155;
  _QWORD v156[2];
  std::string::size_type v157;
  _QWORD v158[10];
  char v159;
  uint64_t v160;
  void *v161[2];
  unsigned __int8 v162;
  std::string __dst;
  _QWORD v164[2];
  int v165;
  char v166;
  _BYTE v167[24];
  _BYTE *v168;
  _BYTE v169[24];
  _BYTE *v170;
  std::string __p;
  _BYTE v172[60];
  void *v173;
  char v174;
  _QWORD v175[22];

  v175[19] = *MEMORY[0x1E0C80C00];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v156);
  if (a2 && *a2)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)"\n[hal_dsp] ", 11);
    v4 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)a2, v4);
    v5 = " - debug_log_device_summary\n";
    v6 = 28;
  }
  else
  {
    v5 = "\n[hal_dsp] ConfigurationChangeRequest::debug_log_device_summary\n";
    v6 = 64;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)"[hal_dsp] \t", 11);
  v7 = "DEACTIVATION\n";
  if (*((_BYTE *)this + 41) && *((_BYTE *)this + 40))
    v7 = "ACTIVATION\n";
  v8 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)"[hal_dsp] \tIO Context Frame Size: ", 34);
  v9 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)"[hal_dsp] \tIO Context Channel Count (in/out): ", 46);
  v10 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" / ", 3);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)"[hal_dsp] \tIO Context Sample Rate (in/out): ", 44);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" / ", 3);
  v13 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)"[hal_dsp] \tIO Context Processing Type(s): ", 42);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::StringLookup_AudioProcessing,unsigned int>::StringifiedKvp(v164, (const UInt8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v14 = (_QWORD *)*((_QWORD *)this + 12);
  v15 = (_QWORD *)((char *)this + 104);
  v144 = this;
  if (v14 == (_QWORD *)((char *)this + 104))
  {
    if (!*((_BYTE *)this + 636))
      goto LABEL_33;
  }
  else
  {
    v16 = 0;
    do
    {
      v165 = *((_DWORD *)v14 + 7);
      v166 = 1;
      v17 = v165 == 7;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)" [ ", 3);
      DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::StringLookup_AudioProcessing,unsigned int>::get_string(&__p, (uint64_t)v164);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v20 = (_QWORD *)v14[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v14[2];
          v22 = *v21 == (_QWORD)v14;
          v14 = v21;
        }
        while (!v22);
      }
      v16 |= v17;
      v14 = v21;
    }
    while (v21 != v15);
    this = v144;
    if (!*((_BYTE *)v144 + 636))
    {
      if ((v16 & 1) != 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)" | use case id: n/a", 19);
      goto LABEL_33;
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)" | use case id: ", 16);
  if (!*((_BYTE *)this + 636))
    std::__throw_bad_optional_access[abi:ne180100]();
  v23.i32[0] = bswap32(*((_DWORD *)this + 158));
  *(int8x8_t *)v23.i8 = vzip1_s8(*(int8x8_t *)v23.i8, *(int8x8_t *)v23.i8);
  v24.i64[0] = 0x1F0000001FLL;
  v24.i64[1] = 0x1F0000001FLL;
  v25.i64[0] = 0x5F0000005FLL;
  v25.i64[1] = 0x5F0000005FLL;
  *(int8x8_t *)v23.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v25, (uint32x4_t)vsraq_n_s32(v24, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v23.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v23.i8, (int8x8_t)0x2E002E002E002ELL);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 4;
  LODWORD(__p.__r_.__value_.__l.__data_) = vmovn_s16(v23).u32[0];
  __p.__r_.__value_.__s.__data_[4] = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)&__p, 4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_33:
  if (*((_QWORD *)this + 80))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)" | offload ids: ", 16);
    DSP_Host_OffloadDictionary::get_debug_string((DSP_Host_OffloadDictionary *)&__p, *((_QWORD *)this + 80));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &__p;
    else
      v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v27 = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)v26, v27);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v28 = *v15;
    if (*v15)
    {
      v29 = v15;
      do
      {
        v30 = *(_DWORD *)(v28 + 28);
        v31 = v30 >= 8;
        if (v30 >= 8)
          v32 = (uint64_t *)v28;
        else
          v32 = (uint64_t *)(v28 + 8);
        if (v31)
          v29 = (_QWORD *)v28;
        v28 = *v32;
      }
      while (*v32);
      if (v29 != v15 && *((_DWORD *)v29 + 7) <= 8u)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)" | offload ids: <null>", 22);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)"[hal_dsp] \tIO Context Client-Supplied Virtual Layout: ", 54);
  DSP_Host_Types::AudioChannelConfiguration::debug_summary_string((DSP_Host_Types::AudioChannelConfiguration *)&__p, (const char *)this + 472, "");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = &__p;
  else
    v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v34 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)v33, v34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)"\n", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v35 = *((_QWORD *)this + 75);
  v36 = *((_QWORD *)this + 74);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)"[hal_dsp} \tIO Context Stream Order (", 36);
  v37 = (v35 - v36) / 24;
  v38 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"): ", 3);
  v39 = 0;
  v40 = 0;
  while (v37 != v40)
  {
    v41 = *((_QWORD *)this + 74) + v39;
    v42 = *(char *)(v41 + 23);
    if (v42 >= 0)
      v43 = *((_QWORD *)this + 74) + v39;
    else
      v43 = *(_QWORD *)v41;
    if (v42 >= 0)
      v44 = *(unsigned __int8 *)(v41 + 23);
    else
      v44 = *(_QWORD *)(v41 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, v43, v44);
    if (++v40 >= v37)
      v45 = "\n";
    else
      v45 = ", ";
    if (v40 >= v37)
      v46 = 1;
    else
      v46 = 2;
    v39 += 24;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)v45, v46);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)"[hal_dsp] \t", 11);
  v47 = (_QWORD *)std::ostream::operator<<();
  v48 = (AMCP::Log::Scope_Registry *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" devices described...\n", 22);
  AMCP::Log::Scope_Registry::get(v48);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
  v49 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  v50 = *(NSObject **)__p.__r_.__value_.__l.__data_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v51 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
  {
    v53 = pthread_self();
    v54 = pthread_mach_thread_np(v53);
    v55 = 0;
    v56 = 0;
    v57 = 47;
    do
    {
      v58 = &aLibraryCachesC_139[v55];
      if (v57 == 47)
        v56 = &aLibraryCachesC_139[v55];
      v57 = v58[1];
      if (!v58[1])
        break;
      v31 = v55++ >= 0xFFF;
    }
    while (!v31);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(&__dst, (uint64_t)v158);
    if (v56)
      v59 = v56 + 1;
    else
      v59 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/DSP/API Types/DSP_Host_API_MethodTypes.cpp";
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    LODWORD(__p.__r_.__value_.__l.__data_) = 67109891;
    HIDWORD(__p.__r_.__value_.__r.__words[0]) = v54;
    LOWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v59;
    WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(__p.__r_.__value_.__r.__words[2]) = 1061;
    *(_WORD *)v172 = 2081;
    *(_QWORD *)&v172[2] = p_dst;
    _os_log_impl(&dword_1B57BA000, v50, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d %{private}s", (uint8_t *)&__p, 0x22u);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::operator=();
  v61 = *MEMORY[0x1E0DE4F50];
  __p.__r_.__value_.__r.__words[0] = v61;
  v62 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  v145 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v61 - 24)) = v145;
  v146 = v62;
  __p.__r_.__value_.__r.__words[2] = v62;
  *(_QWORD *)v172 = MEMORY[0x1E0DE4FB8] + 16;
  if (v174 < 0)
    operator delete(v173);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B5E50598]();
  if (*((_QWORD *)this + 83) != *((_QWORD *)this + 82))
  {
    v63 = 0;
    v143 = MEMORY[0x1E0DE4FB8] + 16;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)"[hal_dsp] \tIndex ", 17);
      v64 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)":\n", 2);
      v65 = (std::__shared_weak_count **)(*((_QWORD *)v144 + 82) + 16 * v63);
      v66 = *v65;
      if (BYTE1((*v65)[5].__shared_weak_owners_))
        shared_weak_owners_low = LOBYTE(v66[5].__shared_weak_owners_);
      else
        shared_weak_owners_low = 0;
      v154 = *v65;
      v68 = v65 + 1;
      v69 = v65[1];
      v155 = v69;
      if (v69)
      {
        p_shared_owners = (unint64_t *)&v69->__shared_owners_;
        do
          v71 = __ldxr(p_shared_owners);
        while (__stxr(v71 + 1, p_shared_owners));
        v72 = *v65;
        v73 = *v68;
        v152 = *v65;
        v153 = v73;
        if (v73)
        {
          v74 = (unint64_t *)&v73->__shared_owners_;
          do
            v75 = __ldxr(v74);
          while (__stxr(v75 + 1, v74));
          v76 = *v65;
          v77 = *v68;
          v150 = *v65;
          v151 = v77;
          if (v77)
          {
            v78 = (unint64_t *)&v77->__shared_owners_;
            do
              v79 = __ldxr(v78);
            while (__stxr(v79 + 1, v78));
          }
          goto LABEL_116;
        }
      }
      else
      {
        v152 = v66;
        v153 = 0;
        v72 = v66;
      }
      v150 = v72;
      v151 = 0;
      v76 = v72;
LABEL_116:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)"[hal_dsp] \t\t", 12);
      std::optional<std::string>::value_or[abi:ne180100]<char const(&)[10]>(&__p, (uint64_t)&(*v65)[1].__shared_weak_owners_);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v80 = &__p;
      else
        v80 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v81 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v81 = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)v80, v81);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)" [", 2);
      std::optional<std::string>::value_or[abi:ne180100]<char const(&)[10]>(&__dst, (uint64_t)&(*v65)[3].__shared_weak_owners_);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v82 = &__dst;
      else
        v82 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v83 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        v83 = __dst.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)v82, v83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)"]\n", 2);
      if (shared_weak_owners_low)
        v84 = "[hal_dsp] \t\tIs Default: YES\n";
      else
        v84 = "";
      if (shared_weak_owners_low)
        v85 = 28;
      else
        v85 = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)v84, v85);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)"[hal_dsp] \t\tSample Rate: ", 25);
      v86 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)" (", 2);
      v87 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)")\n", 2);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
      if (BYTE4(v66[7].__shared_weak_owners_))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)" IN: ", 5);
        shared_weak_owners = 774778414;
        if (BYTE4(v66[7].__shared_weak_owners_))
          shared_weak_owners = v66[7].__shared_weak_owners_;
        v88.i32[0] = bswap32(shared_weak_owners);
        *(int8x8_t *)v88.i8 = vzip1_s8(*(int8x8_t *)v88.i8, *(int8x8_t *)v88.i8);
        v90.i64[0] = 0x1F0000001FLL;
        v90.i64[1] = 0x1F0000001FLL;
        v91.i64[0] = 0x5F0000005FLL;
        v91.i64[1] = 0x5F0000005FLL;
        *(int8x8_t *)v88.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v91, (uint32x4_t)vsraq_n_s32(v90, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v88.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v88.i8, (int8x8_t)0x2E002E002E002ELL);
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 4;
        LODWORD(__dst.__r_.__value_.__l.__data_) = vmovn_s16(v88).u32[0];
        __dst.__r_.__value_.__s.__data_[4] = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)&__dst, 4);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (BYTE4(v66[8].__shared_weak_owners_))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)" OUT: ", 6);
        v93 = 774778414;
        if (BYTE4(v66[8].__shared_weak_owners_))
          v93 = v66[8].__shared_weak_owners_;
        v92.i32[0] = bswap32(v93);
        *(int8x8_t *)v92.i8 = vzip1_s8(*(int8x8_t *)v92.i8, *(int8x8_t *)v92.i8);
        v94.i64[0] = 0x1F0000001FLL;
        v94.i64[1] = 0x1F0000001FLL;
        v95.i64[0] = 0x5F0000005FLL;
        v95.i64[1] = 0x5F0000005FLL;
        *(int8x8_t *)v92.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v95, (uint32x4_t)vsraq_n_s32(v94, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v92.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v92.i8, (int8x8_t)0x2E002E002E002ELL);
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 4;
        LODWORD(__dst.__r_.__value_.__l.__data_) = vmovn_s16(v92).u32[0];
        __dst.__r_.__value_.__s.__data_[4] = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)&__dst, 4);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
      }
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>(&v149, (uint64_t)v172);
      __p.__r_.__value_.__r.__words[0] = v61;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v61 - 24)) = v145;
      __p.__r_.__value_.__r.__words[2] = v146;
      *(_QWORD *)v172 = v143;
      if (v174 < 0)
        operator delete(v173);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1B5E50598](v175);
      v96 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
      if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v96 = v149.__r_.__value_.__l.__size_;
      if (v96)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)"[hal_dsp] \t\tData Source Type: ", 30);
        if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v97 = &v149;
        else
          v97 = (std::string *)v149.__r_.__value_.__r.__words[0];
        if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v98 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
        else
          v98 = v149.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)v97, v98);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)"\n", 1);
      }
      if (BYTE1(v76[17].__shared_owners_))
      {
        if (LOBYTE(v76[17].__shared_owners_))
          v99 = "encr on";
        else
          v99 = "encr off";
      }
      else
      {
        v99 = "";
      }
      v100 = (AMCP::Log::Scope_Registry *)std::string::basic_string[abi:ne180100]<0>(&__p, v99);
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v149.__r_.__value_.__l.__data_);
      v149 = __p;
      v101 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v101 = __p.__r_.__value_.__l.__size_;
      if (v101)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)"[hal_dsp] \t\tBT ECNR: ", 21);
        if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v102 = &v149;
        else
          v102 = (std::string *)v149.__r_.__value_.__r.__words[0];
        if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v103 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
        else
          v103 = v149.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)v102, v103);
        v100 = (AMCP::Log::Scope_Registry *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)"\n", 1);
      }
      v104 = *v65;
      if ((std::__shared_weak_count_vtbl *)(*v65)[27].__shared_weak_owners_ != (*v65)[28].__vftable)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)"[hal_dsp] \t\tInput Streams: ", 27);
        DSP_Host_Types::ConfigurationChangeRequest::debug_log_device_summary(char const*)const::$_3::operator()(&__p, (uint64_t **)&(*v65)[27].__shared_weak_owners_);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v105 = &__p;
        else
          v105 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v106 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v106 = __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)v105, v106);
        v100 = (AMCP::Log::Scope_Registry *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)"\n", 1);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v104 = *v65;
      }
      if ((std::__shared_weak_count_vtbl *)v104[29].__shared_weak_owners_ != v104[30].__vftable)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)"[hal_dsp] \t\tReference Streams: ", 31);
        DSP_Host_Types::ConfigurationChangeRequest::debug_log_device_summary(char const*)const::$_3::operator()(&__p, (uint64_t **)&(*v65)[29].__shared_weak_owners_);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v107 = &__p;
        else
          v107 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v108 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v108 = __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)v107, v108);
        v100 = (AMCP::Log::Scope_Registry *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)"\n", 1);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v104 = *v65;
      }
      if ((std::__shared_weak_count_vtbl *)v104[28].__shared_weak_owners_ != v104[29].__vftable)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)"[hal_dsp] \t\tOutput Streams: ", 28);
        DSP_Host_Types::ConfigurationChangeRequest::debug_log_device_summary(char const*)const::$_3::operator()(&__p, (uint64_t **)&(*v65)[28].__shared_weak_owners_);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v109 = &__p;
        else
          v109 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v110 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v110 = __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)v109, v110);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)"\n", 1);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)"[hal_dsp] \t\tDevice AC Layouts: ", 31);
        if ((std::__shared_weak_count_vtbl *)v72[28].__shared_weak_owners_ == v72[29].__vftable)
        {
          std::string::basic_string[abi:ne180100]<0>(v147, "N/A");
        }
        else
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
          DSP_Host_Types::AudioChannelConfiguration::debug_summary_string((DSP_Host_Types::AudioChannelConfiguration *)&__dst, (const char *)&v72[17].__shared_weak_owners_, "pref - ");
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v111 = &__dst;
          else
            v111 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v112 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          else
            v112 = __dst.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)v111, v112);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)" | ", 3);
          DSP_Host_Types::AudioChannelConfiguration::debug_summary_string((DSP_Host_Types::AudioChannelConfiguration *)v161, (const char *)&v72[22].__shared_weak_owners_, "dflt - ");
          if ((v162 & 0x80u) == 0)
            v113 = v161;
          else
            v113 = (void **)v161[0];
          if ((v162 & 0x80u) == 0)
            v114 = v162;
          else
            v114 = (uint64_t)v161[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)v113, v114);
          if ((char)v162 < 0)
            operator delete(v161[0]);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>(v147, (uint64_t)v172);
          __p.__r_.__value_.__r.__words[0] = v61;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v61 - 24)) = v145;
          __p.__r_.__value_.__r.__words[2] = v146;
          *(_QWORD *)v172 = MEMORY[0x1E0DE4FB8] + 16;
          if (v174 < 0)
            operator delete(v173);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1B5E50598](v175);
        }
        if ((v148 & 0x80u) == 0)
          v115 = v147;
        else
          v115 = (void **)v147[0];
        if ((v148 & 0x80u) == 0)
          v116 = v148;
        else
          v116 = (uint64_t)v147[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)v115, v116);
        v100 = (AMCP::Log::Scope_Registry *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v157, (uint64_t)"\n", 1);
        if ((char)v148 < 0)
          operator delete(v147[0]);
      }
      AMCP::Log::Scope_Registry::get(v100);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
      v117 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      v118 = *(NSObject **)__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v119 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v120 = __ldaxr(v119);
        while (__stlxr(v120 - 1, v119));
        if (!v120)
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
        }
      }
      if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
      {
        v121 = pthread_self();
        v122 = pthread_mach_thread_np(v121);
        v123 = 0;
        v124 = 0;
        v125 = 47;
        do
        {
          v126 = &aLibraryCachesC_139[v123];
          if (v125 == 47)
            v124 = &aLibraryCachesC_139[v123];
          v125 = v126[1];
          if (!v126[1])
            break;
          v31 = v123++ >= 0xFFF;
        }
        while (!v31);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>(&__dst, (uint64_t)v158);
        if (v124)
          v127 = v124 + 1;
        else
          v127 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/DSP/API Types/DSP_Host_API_MethodTypes.cpp";
        v128 = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v128 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        LODWORD(__p.__r_.__value_.__l.__data_) = 67109891;
        HIDWORD(__p.__r_.__value_.__r.__words[0]) = v122;
        LOWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v127;
        WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(__p.__r_.__value_.__r.__words[2]) = 1148;
        *(_WORD *)v172 = 2081;
        *(_QWORD *)&v172[2] = v128;
        _os_log_impl(&dword_1B57BA000, v118, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d %{private}s", (uint8_t *)&__p, 0x22u);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::operator=();
      __p.__r_.__value_.__r.__words[0] = v61;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v61 - 24)) = v145;
      __p.__r_.__value_.__r.__words[2] = v146;
      *(_QWORD *)v172 = MEMORY[0x1E0DE4FB8] + 16;
      if (v174 < 0)
        operator delete(v173);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1B5E50598](v175);
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v149.__r_.__value_.__l.__data_);
      v129 = v151;
      if (v151)
      {
        v130 = (unint64_t *)&v151->__shared_owners_;
        do
          v131 = __ldaxr(v130);
        while (__stlxr(v131 - 1, v130));
        if (!v131)
        {
          ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
          std::__shared_weak_count::__release_weak(v129);
        }
      }
      v132 = v153;
      if (v153)
      {
        v133 = (unint64_t *)&v153->__shared_owners_;
        do
          v134 = __ldaxr(v133);
        while (__stlxr(v134 - 1, v133));
        if (!v134)
        {
          ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
          std::__shared_weak_count::__release_weak(v132);
        }
      }
      v135 = v155;
      if (v155)
      {
        v136 = (unint64_t *)&v155->__shared_owners_;
        do
          v137 = __ldaxr(v136);
        while (__stlxr(v137 - 1, v136));
        if (!v137)
        {
          ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
          std::__shared_weak_count::__release_weak(v135);
        }
      }
      ++v63;
    }
    while (v63 < (uint64_t)(*((_QWORD *)v144 + 83) - *((_QWORD *)v144 + 82)) >> 4);
  }
  v164[0] = &off_1E6996630;
  v138 = v170;
  if (v170 == v169)
  {
    v139 = 4;
    v138 = v169;
  }
  else
  {
    if (!v170)
      goto LABEL_279;
    v139 = 5;
  }
  (*(void (**)(void))(*v138 + 8 * v139))();
LABEL_279:
  v140 = v168;
  if (v168 == v167)
  {
    v141 = 4;
    v140 = v167;
  }
  else
  {
    if (!v168)
      goto LABEL_284;
    v141 = 5;
  }
  (*(void (**)(void))(*v140 + 8 * v141))();
LABEL_284:
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v164);
  v156[0] = v61;
  *(_QWORD *)((char *)v156 + *(_QWORD *)(v61 - 24)) = v145;
  v157 = v146;
  v158[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v159 < 0)
    operator delete((void *)v158[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B5E50598](&v160);
}

void sub_1B5BBE6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::StringLookup_AudioProcessing,unsigned int>::~StringifiedKvp((DSP_Dictionariable::DictionariableKvp *)&STACK[0x208]);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a33);
  _Unwind_Resume(a1);
}

uint64_t DSP_Host_Types::AudioChannelConfiguration::debug_summary_string(DSP_Host_Types::AudioChannelConfiguration *this, const char *a2, const char *a3)
{
  size_t v6;
  void *p_p;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *__p;
  uint64_t v14;
  unsigned __int8 v15;
  _QWORD v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
  if (a3 && *a3)
  {
    v6 = strlen(a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)a3, v6);
  }
  if (a2[44])
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)" tag: ", 6);
    DSP_Host_Types::AudioChannelConfiguration::debug_summary_string(char const*)const::$_0::operator()(&__p, *((_QWORD *)a2 + 5));
    if ((v15 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = v14;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)p_p, v8);
    if ((char)v15 < 0)
      operator delete(__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)" bit: ", 6);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)" num: ", 6);
    std::ostream::operator<<();
  }
  else
  {
    DSP_Host_Types::AudioChannelConfiguration::debug_summary_string(char const*)const::$_0::operator()(&__p, *((_QWORD *)a2 + 5));
    if ((v15 & 0x80u) == 0)
      v9 = &__p;
    else
      v9 = __p;
    if ((v15 & 0x80u) == 0)
      v10 = v15;
    else
      v10 = v14;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)v9, v10);
    if ((char)v15 < 0)
      operator delete(__p);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(this, (uint64_t)v18);
  v16[0] = *MEMORY[0x1E0DE4F50];
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v17 = v11;
  v18[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B5E50598](&v20);
}

void sub_1B5BBEAAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void std::optional<std::string>::value_or[abi:ne180100]<char const(&)[10]>(std::string *a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a1->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, "<missing>");
  }
}

uint64_t DSP_Host_Types::ConfigurationChangeRequest::debug_log_device_summary(char const*)const::$_3::operator()(_QWORD *a1, uint64_t **a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::string __p;
  std::string v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  _QWORD v25[2];
  uint64_t v26;
  _QWORD v27[10];
  char v28;
  uint64_t v29;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Count ", 6);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"  ", 2);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      v6 = *v4;
      v7 = (std::__shared_weak_count *)v4[1];
      v23 = *v4;
      v24 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"{", 1);
      v10 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)",", 1);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)",", 1);
      if (*(_BYTE *)(v6 + 332))
        std::to_string(&v22, *(_DWORD *)(v6 + 328));
      else
        std::string::basic_string[abi:ne180100]<0>(&v22, "<n/a>");
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v22;
      else
        v12 = (std::string *)v22.__r_.__value_.__r.__words[0];
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
      else
        size = v22.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)",", 1);
      if (*(_BYTE *)(v6 + 304))
        DSP_Dictionariable::SingleKvp<std::string>::value(&__p, v6 + 264);
      else
        std::string::basic_string[abi:ne180100]<0>(&__p, "<n/a>");
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v15 = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)p_p, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"}", 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v22.__r_.__value_.__l.__data_);
        if (v7)
        {
LABEL_29:
          v16 = (unint64_t *)&v7->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
      }
      else if (v7)
      {
        goto LABEL_29;
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1, (uint64_t)v27);
  v25[0] = *MEMORY[0x1E0DE4F50];
  v18 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v25 + *(_QWORD *)(v25[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v26 = v18;
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v28 < 0)
    operator delete((void *)v27[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B5E50598](&v29);
}

void sub_1B5BBEDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a25);
  _Unwind_Resume(a1);
}

_QWORD *DSP_Host_Types::AudioChannelConfiguration::debug_summary_string(char const*)const::$_0::operator()(_QWORD *a1, uint64_t a2)
{
  char *v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  uint64_t v10;
  _QWORD v11[10];
  char v12;
  uint64_t v13;

  if ((a2 & 0xFF00000000) == 0)
  {
    v3 = "<none>";
    return std::string::basic_string[abi:ne180100]<0>(a1, v3);
  }
  if ((_DWORD)a2 == 0x10000)
  {
    v3 = "'bitmap'";
    return std::string::basic_string[abi:ne180100]<0>(a1, v3);
  }
  if (!(_DWORD)a2)
  {
    v3 = "'ch desc'";
    return std::string::basic_string[abi:ne180100]<0>(a1, v3);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)v5 + *(_QWORD *)(v10 - 24) + 8) |= 0x4000u;
  v6 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, 48);
  v7 = v10;
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v10 - 24) + 24) = 8;
  *(_DWORD *)((char *)v6 + *(_QWORD *)(v7 - 24) + 8) = *(_DWORD *)((_BYTE *)v6 + *(_QWORD *)(v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1, (uint64_t)v11);
  v9[0] = *MEMORY[0x1E0DE4F50];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v10 = v8;
  v11[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v12 < 0)
    operator delete((void *)v11[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return (_QWORD *)MEMORY[0x1B5E50598](&v13);
}

void sub_1B5BBEFB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::operator<<[abi:ne180100]<std::char_traits<char>>(_QWORD *a1, char a2)
{
  char *v4;
  const std::locale::facet *v5;
  int v6;
  std::locale v8;

  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (*((_DWORD *)v4 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v5 = std::locale::use_facet(&v8, MEMORY[0x1E0DE4A90]);
    v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v4 + 36) = v6;
  }
  *((_DWORD *)v4 + 36) = a2;
  return a1;
}

void sub_1B5BBF060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t DSP_Host_Types::NegotiateRequest::debug_log_device_summary(DSP_Host_Types::NegotiateRequest *this, const char *a2)
{
  if (!a2)
    a2 = "NegotiateRequest";
  return DSP_Host_Types::ConfigurationChangeRequest::debug_log_device_summary(this, a2);
}

uint64_t DSP_Host_Types::AdaptRequest::debug_log_device_summary(DSP_Host_Types::AdaptRequest *this, const char *a2)
{
  if (!a2)
    a2 = "AdaptRequest";
  return DSP_Host_Types::ConfigurationChangeRequest::debug_log_device_summary(this, a2);
}

void DSP_Host_Types::DeviceConfiguration::~DeviceConfiguration(DSP_Host_Types::DeviceConfiguration *this)
{
  DSP_Host_Types::DeviceConfiguration::~DeviceConfiguration(this);
  JUMPOUT(0x1B5E50688);
}

{
  DSP_Dictionariable::DictionariableKvp *v2;
  void *v3;

  *(_QWORD *)this = &off_1E6994940;
  v2 = (DSP_Host_Types::DeviceConfiguration *)((char *)this + 256);
  *((_QWORD *)this + 32) = off_1E6994AA8;
  if (*((_BYTE *)this + 296) && *((char *)this + 295) < 0)
    operator delete(*((void **)this + 34));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v2);
  v3 = (void *)*((_QWORD *)this + 29);
  if (v3)
  {
    *((_QWORD *)this + 30) = v3;
    operator delete(v3);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceConfiguration *)((char *)this + 208));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceConfiguration *)((char *)this + 184));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceConfiguration *)((char *)this + 152));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceConfiguration *)((char *)this + 128));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceConfiguration *)((char *)this + 104));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceConfiguration *)((char *)this + 72));
  *((_QWORD *)this + 3) = off_1E6994AA8;
  if (*((_BYTE *)this + 64) && *((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DeviceConfiguration *)((char *)this + 24));
  *(_QWORD *)this = off_1E6994D48;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

void DSP_Host_Types::DeviceConfiguration::add_to(DSP_Host_Types::DeviceConfiguration *this, __CFDictionary **a2)
{
  _QWORD v4[4];
  char v5;
  char v6;

  DSP_Host_Types::BluetoothLookup::toString((uint64_t)v4, *((_QWORD *)this + 22));
  DSP_Dictionariable::SingleKvp<std::string>::operator=((uint64_t)this + 256, (uint64_t)v4);
  v4[0] = off_1E6994AA8;
  if (v6 && v5 < 0)
    operator delete((void *)v4[2]);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v4);
  DSP_Host_Types::DeviceConfiguration::init_set(this);
  DSP_Dictionariable::DictionarySet::maybe_add_under_key((uint64_t **)this + 29, a2, (uint64_t)this + 8);
}

void sub_1B5BBF250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  DSP_Dictionariable::SingleKvp<std::string>::~SingleKvp(&a9);
  _Unwind_Resume(a1);
}

uint64_t DSP_Host_Types::DeviceConfiguration::load_from(uint64_t **this, CFDictionaryRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  int v9;
  char v10;
  int v11;
  unsigned int v12;
  std::string __s2;
  _DWORD v15[2];
  const char *v16;
  int v17;
  const char *v18;
  int v19;
  const char *v20;
  int v21;
  const char *v22;

  DSP_Host_Types::DeviceConfiguration::init_set((DSP_Host_Types::DeviceConfiguration *)this);
  v4 = DSP_Dictionariable::DictionarySet::maybe_load_from_under_key(this + 29, a2, (uint64_t)(this + 1));
  if (((unsigned int (*)(char *))this[32][4])((char *)this + 256))
  {
    v5 = 0;
    v16 = "automatic";
    v17 = 1;
    v18 = "sco";
    v19 = 2;
    v20 = "a2dp";
    v21 = 3;
    v22 = "lea";
    v6 = 2;
    v15[0] = 0;
    do
    {
      v7 = *(const char **)&v15[v6];
      DSP_Dictionariable::SingleKvp<std::string>::value(&__s2, (uint64_t)(this + 32));
      if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
      {
        v8 = (void *)__s2.__r_.__value_.__r.__words[0];
        v9 = strcmp(v7, __s2.__r_.__value_.__l.__data_);
        operator delete(v8);
        if (!v9)
        {
LABEL_9:
          v11 = v15[4 * v5];
          v12 = v11 & 0xFFFFFF00;
          v10 = 1;
          goto LABEL_10;
        }
      }
      else if (!strcmp(v7, (const char *)&__s2))
      {
        goto LABEL_9;
      }
      ++v5;
      v6 += 4;
    }
    while (v5 != 4);
  }
  v10 = 0;
  LOBYTE(v11) = 0;
  v12 = 0;
LABEL_10:
  *((_DWORD *)this + 44) = v12 & 0xFFFFFF00 | v11;
  *((_BYTE *)this + 180) = v10;
  return v4;
}

void DSP_Host_Types::DeviceConfiguration::add_to(DSP_Host_Types::DeviceConfiguration *this, __CFArray **a2)
{
  _QWORD v4[4];
  char v5;
  char v6;

  DSP_Host_Types::BluetoothLookup::toString((uint64_t)v4, *((_QWORD *)this + 22));
  DSP_Dictionariable::SingleKvp<std::string>::operator=((uint64_t)this + 256, (uint64_t)v4);
  v4[0] = off_1E6994AA8;
  if (v6 && v5 < 0)
    operator delete((void *)v4[2]);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v4);
  DSP_Host_Types::DeviceConfiguration::init_set(this);
  DSP_Dictionariable::DictionarySet::add_to((DSP_Host_Types::DeviceConfiguration *)((char *)this + 232), a2);
}

void sub_1B5BBF440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  DSP_Dictionariable::SingleKvp<std::string>::~SingleKvp(&a9);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::BluetoothLookup::toString(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  int v6;
  std::string v7;
  void *__p[2];
  int v9;
  char v10;
  const char *v11;
  int v12;
  const char *v13;
  int v14;
  const char *v15;

  std::string::basic_string[abi:ne180100]<0>(__p, "bluetooth format");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((_QWORD *)a1, (const UInt8 *)__p);
  *(_QWORD *)a1 = off_1E6994AA8;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (v10 < 0)
    operator delete(__p[0]);
  if ((a2 & 0xFF00000000) != 0)
  {
    v4 = 0;
    __p[1] = "automatic";
    v9 = 1;
    v11 = "sco";
    v12 = 2;
    v13 = "a2dp";
    v14 = 3;
    v15 = "lea";
    v5 = __p;
    LODWORD(__p[0]) = 0;
    while (1)
    {
      v6 = *(_DWORD *)v5;
      v5 += 2;
      if (v6 == (_DWORD)a2)
        break;
      if (++v4 == 4)
        return;
    }
    std::string::basic_string[abi:ne180100]<0>(&v7, (char *)__p[2 * v4 + 1]);
    std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>((std::string *)(a1 + 16), &v7);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
  }
}

void sub_1B5BBF570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void **v21;

  if (a15 < 0)
    operator delete(__p);
  DSP_Dictionariable::SingleKvp<std::string>::~SingleKvp(v21);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::DeviceConfiguration::init_set(DSP_Host_Types::DeviceConfiguration *this)
{
  DSP_Dictionariable::DictionarySet *v1;

  v1 = (DSP_Host_Types::DeviceConfiguration *)((char *)this + 232);
  if (*((_QWORD *)this + 29) == *((_QWORD *)this + 30))
  {
    DSP_Dictionariable::DictionarySet::add_kvp((DSP_Host_Types::DeviceConfiguration *)((char *)this + 232), (DSP_Host_Types::DeviceConfiguration *)((char *)this + 24));
    DSP_Dictionariable::DictionarySet::add_kvp(v1, (DSP_Host_Types::DeviceConfiguration *)((char *)this + 72));
    DSP_Dictionariable::DictionarySet::add_kvp(v1, (DSP_Host_Types::DeviceConfiguration *)((char *)this + 104));
    DSP_Dictionariable::DictionarySet::add_kvp(v1, (DSP_Host_Types::DeviceConfiguration *)((char *)this + 128));
    DSP_Dictionariable::DictionarySet::add_kvp(v1, (DSP_Host_Types::DeviceConfiguration *)((char *)this + 152));
    DSP_Dictionariable::DictionarySet::add_kvp(v1, (DSP_Host_Types::DeviceConfiguration *)((char *)this + 256));
    DSP_Dictionariable::DictionarySet::add_kvp(v1, (DSP_Host_Types::DeviceConfiguration *)((char *)this + 184));
    DSP_Dictionariable::DictionarySet::add_kvp(v1, (DSP_Host_Types::DeviceConfiguration *)((char *)this + 208));
  }
}

void DSP_Host_Types::NegotiateResponse::add_to(DSP_Host_Types::NegotiateResponse *this, __CFDictionary **a2)
{
  CFMutableDictionaryRef Mutable;
  const void *v5;
  _QWORD *v6;
  _QWORD *v7;
  const void *v8;
  _QWORD *v9;
  _QWORD *v10;
  CFMutableArrayRef v11;
  _QWORD *v12;
  _QWORD *v13;
  CFTypeRef v14;
  CFTypeRef cf;
  CFTypeRef v16;
  CFTypeRef v17;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  v17 = Mutable;
  v5 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  v16 = v5;
  v6 = (_QWORD *)*((_QWORD *)this + 3);
  v7 = (_QWORD *)*((_QWORD *)this + 4);
  if (v6 != v7)
  {
    do
    {
      if (*v6)
        (*(void (**)(_QWORD, CFTypeRef *))(*(_QWORD *)*v6 + 40))(*v6, &v16);
      v6 += 2;
    }
    while (v6 != v7);
    v5 = v16;
  }
  mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)&cf, v5);
  mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::ArrayRef>(Mutable, CFSTR("io context supported input formats"), cf);
  if (cf)
    CFRelease(cf);
  if (v16)
    CFRelease(v16);
  v8 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  v16 = v8;
  v9 = (_QWORD *)*((_QWORD *)this + 6);
  v10 = (_QWORD *)*((_QWORD *)this + 7);
  if (v9 != v10)
  {
    do
    {
      if (*v9)
        (*(void (**)(_QWORD, CFTypeRef *))(*(_QWORD *)*v9 + 40))(*v9, &v16);
      v9 += 2;
    }
    while (v9 != v10);
    v8 = v16;
  }
  mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)&cf, v8);
  mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::ArrayRef>(Mutable, CFSTR("io context supported output formats"), cf);
  if (cf)
    CFRelease(cf);
  if (v16)
    CFRelease(v16);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v16, Mutable);
  mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::DictionaryRef>(*a2, CFSTR("io context configuration"), v16);
  if (v16)
    CFRelease(v16);
  if (Mutable)
    CFRelease(Mutable);
  v11 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  v17 = v11;
  v13 = (_QWORD *)*((_QWORD *)this + 9);
  v12 = (_QWORD *)*((_QWORD *)this + 10);
  if (v13 == v12)
  {
    v14 = v11;
  }
  else
  {
    do
    {
      if (*v13)
        (*(void (**)(_QWORD, CFTypeRef *))(*(_QWORD *)*v13 + 40))(*v13, &v17);
      v13 += 2;
    }
    while (v13 != v12);
    v14 = v17;
  }
  mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)&v16, v14);
  mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::ArrayRef>(*a2, CFSTR("device configurations"), v16);
  if (v16)
    CFRelease(v16);
  if (v17)
    CFRelease(v17);
}

void sub_1B5BBF9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t DSP_Host_Types::NegotiateResponse::load_from(DSP_Host_Types::NegotiateResponse *this, CFDictionaryRef *a2)
{
  const void *v4;
  const void *v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t j;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t k;
  uint64_t v13;
  const __CFArray *v14;
  CFIndex Count;
  CFArrayRef v16;
  CFIndex v17;
  _BOOL4 v18;
  unint64_t m;
  BOOL v20;
  BOOL v21;
  CFDictionaryRef v22;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::runtime_error *exception;
  CFArrayRef theArray;
  char v51;
  void (**v52)(DSP_Dictionariable::TooledDictionary *__hidden);
  uint64_t v53;
  CFDictionaryRef *v54;
  _QWORD v55[3];
  CFTypeRef v56;
  CFDictionaryRef cf[3];
  void (**v58)(DSP_Dictionariable::TooledDictionary *__hidden);
  int64x2_t v59;
  uint64_t v60;
  char *v61;

  v55[0] = &off_1E699E9F8;
  v55[1] = 0;
  v55[2] = a2;
  if (applesauce::CF::details::has_key<__CFString const*&>(*a2, CFSTR("io context configuration")))
  {
    v4 = applesauce::CF::details::at_key<__CFString const*&>(*a2, CFSTR("io context configuration"));
    if (!v4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not find item");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v5 = v4;
    CFRetain(v4);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)cf, v5);
    v7 = *((_QWORD *)this + 3);
    for (i = *((_QWORD *)this + 4); i != v7; i = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](i - 16))
      ;
    *((_QWORD *)this + 4) = v7;
    v58 = &off_1E699E9F8;
    v59.i64[0] = 0;
    v59.i64[1] = (uint64_t)cf;
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>(&v52, cf[0], CFSTR("io context supported input formats"));
    if ((_BYTE)v53)
      v8 = DSP_Host_Types::load_list_from<DSP_Host_Types::FormatDescription>((char **)this + 3, (CFArrayRef *)&v52);
    else
      v8 = 1;
    std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v52);
    DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)&v58);
    v10 = *((_QWORD *)this + 6);
    for (j = *((_QWORD *)this + 7); j != v10; j = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](j - 16))
      ;
    *((_QWORD *)this + 7) = v10;
    v58 = &off_1E699E9F8;
    v59.i64[0] = 0;
    v59.i64[1] = (uint64_t)cf;
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>(&v52, cf[0], CFSTR("io context supported output formats"));
    if ((_BYTE)v53)
    {
      v11 = DSP_Host_Types::load_list_from<DSP_Host_Types::FormatDescription>((char **)this + 6, (CFArrayRef *)&v52);
      if ((_DWORD)v8)
        v8 = v11;
      else
        v8 = 0;
    }
    std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v52);
    DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)&v58);
    if (cf[0])
      CFRelease(cf[0]);
  }
  else
  {
    v8 = 1;
  }
  v13 = *((_QWORD *)this + 9);
  for (k = *((_QWORD *)this + 10); k != v13; k = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](k - 16))
    ;
  *((_QWORD *)this + 10) = v13;
  v52 = &off_1E699E9F8;
  v53 = 0;
  v54 = a2;
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>(&theArray, *a2, CFSTR("device configurations"));
  if (v51)
  {
    v14 = theArray;
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      v16 = theArray;
      if (theArray)
        v17 = CFArrayGetCount(theArray);
      else
        v17 = 0;
      for (m = 0; ; ++m)
      {
        v20 = v14 == v16 && m == v17;
        v21 = v20;
        if (m == Count || v21)
          break;
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v56, v14, m);
        std::allocate_shared[abi:ne180100]<DSP_Host_Types::DeviceConfiguration,std::allocator<DSP_Host_Types::DeviceConfiguration>,char const(&)[1],void>(cf, "");
        v22 = cf[0];
        (*(void (**)(CFDictionaryRef, CFTypeRef *))(*(_QWORD *)cf[0] + 32))(cf[0], &v56);
        v23 = *((_QWORD *)this + 10);
        v24 = *((_QWORD *)this + 11);
        if (v23 >= v24)
        {
          v29 = *((_QWORD *)this + 9);
          v30 = (uint64_t)(v23 - v29) >> 4;
          v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 60)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v32 = v24 - v29;
          if (v32 >> 3 > v31)
            v31 = v32 >> 3;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
            v33 = 0xFFFFFFFFFFFFFFFLL;
          else
            v33 = v31;
          v61 = (char *)this + 88;
          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v33);
          v36 = &v34[16 * v30];
          v37 = (char *)cf[1];
          *(_OWORD *)v36 = *(_OWORD *)cf;
          if (v37)
          {
            v38 = (unint64_t *)(v37 + 8);
            do
              v39 = __ldxr(v38);
            while (__stxr(v39 + 1, v38));
          }
          v41 = (_QWORD *)*((_QWORD *)this + 9);
          v40 = (_QWORD *)*((_QWORD *)this + 10);
          if (v40 == v41)
          {
            v44 = vdupq_n_s64((unint64_t)v40);
            v42 = &v34[16 * v30];
          }
          else
          {
            v42 = &v34[16 * v30];
            do
            {
              v43 = *((_OWORD *)v40 - 1);
              v40 -= 2;
              *((_OWORD *)v42 - 1) = v43;
              v42 -= 16;
              *v40 = 0;
              v40[1] = 0;
            }
            while (v40 != v41);
            v44 = *(int64x2_t *)((char *)this + 72);
          }
          v28 = v36 + 16;
          *((_QWORD *)this + 9) = v42;
          *((_QWORD *)this + 10) = v36 + 16;
          v59 = v44;
          v45 = *((_QWORD *)this + 11);
          *((_QWORD *)this + 11) = &v34[16 * v35];
          v60 = v45;
          v58 = (void (**)(DSP_Dictionariable::TooledDictionary *__hidden))v44.i64[0];
          std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v58);
          v25 = (std::__shared_weak_count *)cf[1];
        }
        else
        {
          *(_QWORD *)v23 = v22;
          v25 = (std::__shared_weak_count *)cf[1];
          *(CFDictionaryRef *)(v23 + 8) = cf[1];
          if (v25)
          {
            p_shared_owners = (unint64_t *)&v25->__shared_owners_;
            do
              v27 = __ldxr(p_shared_owners);
            while (__stxr(v27 + 1, p_shared_owners));
          }
          v28 = (_OWORD *)(v23 + 16);
        }
        *((_QWORD *)this + 10) = v28;
        if (v25)
        {
          v46 = (unint64_t *)&v25->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        if (v56)
          CFRelease(v56);
      }
      v18 = *((_QWORD *)this + 9) != *((_QWORD *)this + 10);
    }
    else
    {
      v18 = 0;
    }
    v8 = v8 & v18;
  }
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theArray);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)&v52);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v55);
  return v8;
}

void sub_1B5BBFE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;

  __cxa_free_exception(v25);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)&a15);
  _Unwind_Resume(a1);
}

BOOL DSP_Host_Types::load_list_from<DSP_Host_Types::FormatDescription>(char **a1, CFArrayRef *a2)
{
  const __CFArray *v2;
  CFIndex Count;
  const __CFArray *v6;
  CFIndex v7;
  unint64_t i;
  BOOL v10;
  BOOL v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  int64x2_t v31;
  char *v32;
  char *v33;
  unint64_t *v34;
  unint64_t v35;
  CFTypeRef cf;
  __int128 v37;
  uint64_t v38;
  int64x2_t v39;
  char *v40;
  _QWORD *v41;

  v2 = *a2;
  if (!*a2)
    return 0;
  Count = CFArrayGetCount(*a2);
  v6 = *a2;
  if (v6)
    v7 = CFArrayGetCount(v6);
  else
    v7 = 0;
  for (i = 0; ; ++i)
  {
    v10 = v2 == v6 && i == v7;
    v11 = v10;
    if (i == Count || v11)
      break;
    applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&cf, v2, i);
    v12 = (std::__shared_weak_count *)operator new(0xB0uLL);
    v12->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    v12->__shared_weak_owners_ = 0;
    v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6994E70;
    *(_QWORD *)&v37 = DSP_Host_Types::FormatDescription::FormatDescription((DSP_Host_Types::FormatDescription *)&v12[1], "");
    *((_QWORD *)&v37 + 1) = v12;
    ((void (*)(_QWORD, CFTypeRef *))v12[1].__on_zero_shared_weak)(v37, &cf);
    v14 = a1[1];
    v15 = (unint64_t)a1[2];
    if ((unint64_t)v14 < v15)
    {
      *(_QWORD *)v14 = v37;
      *((_QWORD *)v14 + 1) = v12;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      a1[1] = v14 + 16;
LABEL_34:
      v34 = (unint64_t *)&v12->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      goto LABEL_38;
    }
    v17 = (v14 - *a1) >> 4;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 60)
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    v19 = v15 - (_QWORD)*a1;
    if (v19 >> 3 > v18)
      v18 = v19 >> 3;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
      v20 = 0xFFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    v41 = a1 + 2;
    v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v20);
    v23 = &v21[16 * v17];
    v24 = *((_QWORD *)&v37 + 1);
    *(_OWORD *)v23 = v37;
    if (v24)
    {
      v25 = (unint64_t *)(v24 + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v28 = *a1;
    v27 = a1[1];
    if (v27 == *a1)
    {
      v31 = vdupq_n_s64((unint64_t)v27);
      v29 = &v21[16 * v17];
    }
    else
    {
      v29 = &v21[16 * v17];
      do
      {
        v30 = *((_OWORD *)v27 - 1);
        v27 -= 16;
        *((_OWORD *)v29 - 1) = v30;
        v29 -= 16;
        *(_QWORD *)v27 = 0;
        *((_QWORD *)v27 + 1) = 0;
      }
      while (v27 != v28);
      v31 = *(int64x2_t *)a1;
    }
    v32 = v23 + 16;
    *a1 = v29;
    a1[1] = v23 + 16;
    v39 = v31;
    v33 = a1[2];
    a1[2] = &v21[16 * v22];
    v40 = v33;
    v38 = v31.i64[0];
    std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v38);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
    a1[1] = v32;
    if (v12)
      goto LABEL_34;
LABEL_38:
    if (cf)
      CFRelease(cf);
  }
  return *a1 != a1[1];
}

void sub_1B5BC0134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::AdaptResponse::add_to(DSP_Host_Types::AdaptResponse *this, __CFDictionary **a2)
{
  uint64_t **v4;

  v4 = (uint64_t **)((char *)this + 48);
  if (*((_QWORD *)this + 6) == *((_QWORD *)this + 7))
    DSP_Dictionariable::DictionarySet::add_kvp((DSP_Host_Types::AdaptResponse *)((char *)this + 48), (DSP_Host_Types::AdaptResponse *)((char *)this + 24));
  DSP_Dictionariable::DictionarySet::maybe_add_under_key(v4, a2, (uint64_t)this + 8);
}

uint64_t DSP_Host_Types::AdaptResponse::load_from(DSP_Host_Types::AdaptResponse *this, CFDictionaryRef *a2)
{
  uint64_t **v4;

  v4 = (uint64_t **)((char *)this + 48);
  if (*((_QWORD *)this + 6) == *((_QWORD *)this + 7))
    DSP_Dictionariable::DictionarySet::add_kvp((DSP_Host_Types::AdaptResponse *)((char *)this + 48), (DSP_Host_Types::AdaptResponse *)((char *)this + 24));
  return DSP_Dictionariable::DictionarySet::maybe_load_from_under_key(v4, a2, (uint64_t)this + 8);
}

void DSP_Host_Types::DSPPropertyInfo::~DSPPropertyInfo(DSP_Host_Types::DSPPropertyInfo *this)
{
  DSP_Host_Types::DSPPropertyInfo::~DSPPropertyInfo(this);
  JUMPOUT(0x1B5E50688);
}

{
  void *v2;
  DSP_Host_Types::DSPPropertyInfo *v3;
  uint64_t v4;
  DSP_Host_Types::DSPPropertyInfo *v5;
  uint64_t v6;
  DSP_Host_Types::DSPPropertyInfo *v7;
  uint64_t v8;
  DSP_Host_Types::DSPPropertyInfo *v9;
  uint64_t v10;

  *(_QWORD *)this = &off_1E69949E0;
  v2 = (void *)*((_QWORD *)this + 37);
  if (v2)
  {
    *((_QWORD *)this + 38) = v2;
    operator delete(v2);
  }
  *((_QWORD *)this + 26) = &off_1E6994D88;
  v3 = (DSP_Host_Types::DSPPropertyInfo *)*((_QWORD *)this + 36);
  if (v3 == (DSP_Host_Types::DSPPropertyInfo *)((char *)this + 264))
  {
    v4 = 4;
    v3 = (DSP_Host_Types::DSPPropertyInfo *)((char *)this + 264);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_8:
  v5 = (DSP_Host_Types::DSPPropertyInfo *)*((_QWORD *)this + 32);
  if (v5 == (DSP_Host_Types::DSPPropertyInfo *)((char *)this + 232))
  {
    v6 = 4;
    v5 = (DSP_Host_Types::DSPPropertyInfo *)((char *)this + 232);
  }
  else
  {
    if (!v5)
      goto LABEL_13;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_13:
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DSPPropertyInfo *)((char *)this + 208));
  *((_QWORD *)this + 15) = &off_1E6994D88;
  v7 = (DSP_Host_Types::DSPPropertyInfo *)*((_QWORD *)this + 25);
  if (v7 == (DSP_Host_Types::DSPPropertyInfo *)((char *)this + 176))
  {
    v8 = 4;
    v7 = (DSP_Host_Types::DSPPropertyInfo *)((char *)this + 176);
  }
  else
  {
    if (!v7)
      goto LABEL_18;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_18:
  v9 = (DSP_Host_Types::DSPPropertyInfo *)*((_QWORD *)this + 21);
  if (v9 == (DSP_Host_Types::DSPPropertyInfo *)((char *)this + 144))
  {
    v10 = 4;
    v9 = (DSP_Host_Types::DSPPropertyInfo *)((char *)this + 144);
    goto LABEL_22;
  }
  if (v9)
  {
    v10 = 5;
LABEL_22:
    (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DSPPropertyInfo *)((char *)this + 120));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DSPPropertyInfo *)((char *)this + 96));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DSPPropertyInfo *)((char *)this + 72));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DSPPropertyInfo *)((char *)this + 48));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::DSPPropertyInfo *)((char *)this + 24));
  *(_QWORD *)this = off_1E6994DE0;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

void DSP_Host_Types::DSPPropertyInfo::add_to(uint64_t **this, __CFDictionary **a2)
{
  DSP_Host_Types::DSPPropertyInfo::init_set((DSP_Host_Types::DSPPropertyInfo *)this);
  DSP_Dictionariable::DictionarySet::maybe_add_under_key(this + 37, a2, (uint64_t)(this + 1));
}

uint64_t DSP_Host_Types::DSPPropertyInfo::load_from(uint64_t **this, CFDictionaryRef *a2)
{
  DSP_Host_Types::DSPPropertyInfo::init_set((DSP_Host_Types::DSPPropertyInfo *)this);
  return DSP_Dictionariable::DictionarySet::maybe_load_from_under_key(this + 37, a2, (uint64_t)(this + 1));
}

void DSP_Host_Types::DSPPropertyInfo::add_to(DSP_Host_Types::DSPPropertyInfo *this, __CFArray **a2)
{
  DSP_Host_Types::DSPPropertyInfo::init_set(this);
  DSP_Dictionariable::DictionarySet::add_to((DSP_Host_Types::DSPPropertyInfo *)((char *)this + 296), a2);
}

void DSP_Host_Types::DSPPropertyInfo::init_set(DSP_Host_Types::DSPPropertyInfo *this)
{
  DSP_Dictionariable::DictionarySet *v2;

  if (*((_QWORD *)this + 37) == *((_QWORD *)this + 38))
  {
    v2 = (DSP_Host_Types::DSPPropertyInfo *)((char *)this + 296);
    DSP_Dictionariable::DictionarySet::add_kvp((DSP_Host_Types::DSPPropertyInfo *)((char *)this + 296), (DSP_Host_Types::DSPPropertyInfo *)((char *)this + 24));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DSPPropertyInfo *)((char *)this + 48));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DSPPropertyInfo *)((char *)this + 72));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DSPPropertyInfo *)((char *)this + 96));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DSPPropertyInfo *)((char *)this + 120));
    DSP_Dictionariable::DictionarySet::add_kvp(v2, (DSP_Host_Types::DSPPropertyInfo *)((char *)this + 208));
  }
}

void DSP_Host_Types::DSPPropertyInfoArray::add_to(DSP_Host_Types::DSPPropertyInfoArray *this, __CFDictionary **a2)
{
  CFMutableArrayRef Mutable;
  _QWORD *v5;
  _QWORD *v6;
  CFTypeRef v7;
  CFTypeRef cf;
  CFTypeRef v9;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  v9 = Mutable;
  v6 = (_QWORD *)*((_QWORD *)this + 3);
  v5 = (_QWORD *)*((_QWORD *)this + 4);
  if (v6 == v5)
  {
    v7 = Mutable;
  }
  else
  {
    do
    {
      if (*v6)
        (*(void (**)(_QWORD, CFTypeRef *))(*(_QWORD *)*v6 + 40))(*v6, &v9);
      v6 += 2;
    }
    while (v6 != v5);
    v7 = v9;
  }
  mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)&cf, v7);
  mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::ArrayRef>(*a2, CFSTR("custom property info array"), cf);
  if (cf)
    CFRelease(cf);
  if (v9)
    CFRelease(v9);
}

void sub_1B5BC0634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  _Unwind_Resume(a1);
}

BOOL DSP_Host_Types::DSPPropertyInfoArray::load_from(DSP_Host_Types::DSPPropertyInfoArray *this, CFDictionaryRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  const __CFArray *v6;
  CFIndex Count;
  CFArrayRef v8;
  CFIndex v9;
  _BOOL8 v10;
  unint64_t i;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  char *v34;
  __int128 v35;
  int64x2_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  CFArrayRef theArray;
  char v42;
  _QWORD v43[3];
  CFTypeRef cf;
  __int128 v45;
  uint64_t v46;
  int64x2_t v47;
  uint64_t v48;
  char *v49;

  v4 = *((_QWORD *)this + 4);
  v5 = *((_QWORD *)this + 3);
  while (v4 != v5)
    v4 = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v4 - 16);
  *((_QWORD *)this + 4) = v5;
  v43[0] = &off_1E699E9F8;
  v43[1] = 0;
  v43[2] = a2;
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>(&theArray, *a2, CFSTR("custom property info array"));
  if (v42)
  {
    v6 = theArray;
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      v8 = theArray;
      if (theArray)
        v9 = CFArrayGetCount(theArray);
      else
        v9 = 0;
      for (i = 0; ; ++i)
      {
        v12 = v6 == v8 && i == v9;
        v13 = v12;
        if (i == Count || v13)
          break;
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&cf, v6, i);
        std::allocate_shared[abi:ne180100]<DSP_Host_Types::DSPPropertyInfo,std::allocator<DSP_Host_Types::DSPPropertyInfo>,char const(&)[1],void>(&v45, "");
        v14 = v45;
        (*(void (**)(_QWORD, CFTypeRef *))(*(_QWORD *)v45 + 32))(v45, &cf);
        v15 = (_QWORD *)*((_QWORD *)this + 4);
        v16 = *((_QWORD *)this + 5);
        if ((unint64_t)v15 >= v16)
        {
          v21 = *((_QWORD *)this + 3);
          v22 = ((uint64_t)v15 - v21) >> 4;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 60)
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          v24 = v16 - v21;
          if (v24 >> 3 > v23)
            v23 = v24 >> 3;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
            v25 = 0xFFFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          v49 = (char *)this + 40;
          v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v25);
          v28 = &v26[16 * v22];
          v29 = *((_QWORD *)&v45 + 1);
          *(_OWORD *)v28 = v45;
          if (v29)
          {
            v30 = (unint64_t *)(v29 + 8);
            do
              v31 = __ldxr(v30);
            while (__stxr(v31 + 1, v30));
          }
          v33 = (_QWORD *)*((_QWORD *)this + 3);
          v32 = (_QWORD *)*((_QWORD *)this + 4);
          if (v32 == v33)
          {
            v36 = vdupq_n_s64((unint64_t)v32);
            v34 = &v26[16 * v22];
          }
          else
          {
            v34 = &v26[16 * v22];
            do
            {
              v35 = *((_OWORD *)v32 - 1);
              v32 -= 2;
              *((_OWORD *)v34 - 1) = v35;
              v34 -= 16;
              *v32 = 0;
              v32[1] = 0;
            }
            while (v32 != v33);
            v36 = *(int64x2_t *)((char *)this + 24);
          }
          v20 = v28 + 16;
          *((_QWORD *)this + 3) = v34;
          *((_QWORD *)this + 4) = v28 + 16;
          v47 = v36;
          v37 = *((_QWORD *)this + 5);
          *((_QWORD *)this + 5) = &v26[16 * v27];
          v48 = v37;
          v46 = v36.i64[0];
          std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v46);
          v17 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
        }
        else
        {
          *v15 = v14;
          v17 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
          v15[1] = *((_QWORD *)&v45 + 1);
          if (v17)
          {
            p_shared_owners = (unint64_t *)&v17->__shared_owners_;
            do
              v19 = __ldxr(p_shared_owners);
            while (__stxr(v19 + 1, p_shared_owners));
          }
          v20 = v15 + 2;
        }
        *((_QWORD *)this + 4) = v20;
        if (v17)
        {
          v38 = (unint64_t *)&v17->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        if (cf)
          CFRelease(cf);
      }
      v10 = *((_QWORD *)this + 3) != *((_QWORD *)this + 4);
    }
    else
    {
      v10 = 0;
    }
  }
  else
  {
    v10 = 1;
  }
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theArray);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v43);
  return v10;
}

void sub_1B5BC08F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, const void *a14, char a15)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a14);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a9);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)&a11);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<DSP_Host_Types::FormatDescription>,DSP_Host_Types::FormatDescription*,DSP_Host_Types::FormatDescription*,DSP_Host_Types::FormatDescription*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      DSP_Host_Types::FormatDescription::FormatDescription((DSP_Host_Types::FormatDescription *)(a3 + v6), (const DSP_Host_Types::FormatDescription *)(a1 + v6));
      v6 += 152;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

_QWORD *std::__function::__value_func<char const* ()(DSP_Host_Types::StreamSemanticType)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B5BC0B38(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__value_func<DSP_Host_Types::StreamSemanticType ()(char const*)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B5BC0CAC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t DSP_Host_Types::AudioChannelConfiguration::operator=(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  char **v5;
  uint64_t i;
  unint64_t v7;
  _DWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  std::__shared_weak_count_vtbl *v11;
  uint64_t shared_owners;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  __int128 v19;
  void *__p[2];
  char v21;

  v5 = (char **)(a1 + 96);
  v4 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 40) = *a2;
  *(_BYTE *)(a1 + 44) = 1;
  *(_DWORD *)(a1 + 64) = a2[1];
  *(_BYTE *)(a1 + 68) = 1;
  *(_DWORD *)(a1 + 88) = a2[2];
  *(_BYTE *)(a1 + 92) = 1;
  for (i = *(_QWORD *)(a1 + 104); i != v4; i = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](i - 16))
    ;
  v18 = a1;
  *(_QWORD *)(a1 + 104) = v4;
  if (a2[2])
  {
    v7 = 0;
    v8 = a2 + 5;
    do
    {
      v9 = (std::__shared_weak_count *)operator new(0x78uLL);
      v9->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      v9->__shared_weak_owners_ = 0;
      v9->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6994B58;
      v9[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E69946B8;
      LOBYTE(v9[1].__shared_owners_) = 0;
      LOBYTE(v9[1].__shared_weak_owners_) = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, "channel label");
      DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v9[2].__vftable, (const UInt8 *)__p);
      v9[2].__vftable = (std::__shared_weak_count_vtbl *)&off_1E699E950;
      LOBYTE(v9[2].__shared_weak_owners_) = 0;
      BYTE4(v9[2].__shared_weak_owners_) = 0;
      if (v21 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "channel flags");
      DSP_Dictionariable::DictionariableKvp::DictionariableKvp(&v9[3].__vftable, (const UInt8 *)__p);
      v9[3].__vftable = (std::__shared_weak_count_vtbl *)&off_1E699E950;
      LOBYTE(v9[3].__shared_weak_owners_) = 0;
      BYTE4(v9[3].__shared_weak_owners_) = 0;
      if (v21 < 0)
        operator delete(__p[0]);
      v9[4].__vftable = 0;
      v9[4].__shared_owners_ = 0;
      v9[4].__shared_weak_owners_ = 0;
      LODWORD(v9[2].__shared_weak_owners_) = a2[5 * v7 + 3];
      BYTE4(v9[2].__shared_weak_owners_) = 1;
      LODWORD(v9[3].__shared_weak_owners_) = a2[5 * v7 + 4];
      BYTE4(v9[3].__shared_weak_owners_) = 1;
      LODWORD(__p[0]) = 0;
      std::vector<float>::resize((char **)&v9[4], 3uLL, __p);
      v11 = v9[4].__vftable;
      shared_owners = v9[4].__shared_owners_;
      v13 = shared_owners - (_QWORD)v11;
      if ((std::__shared_weak_count_vtbl *)shared_owners != v11)
      {
        v14 = 0;
        v15 = v13 >> 2;
        do
        {
          *((_DWORD *)&v11->~__shared_weak_count + v14) = v8[v14];
          ++v14;
        }
        while (v15 > v14);
      }
      *(_QWORD *)&v19 = v9 + 1;
      *((_QWORD *)&v19 + 1) = v9;
      std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100](v5, &v19);
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      ++v7;
      v8 += 5;
    }
    while (v7 < a2[2]);
  }
  return v18;
}

void sub_1B5BC0EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::__shared_weak_count *v17;
  void *v19;

  if (a17 < 0)
    operator delete(__p);
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E6994BA8;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v17[1].__shared_owners_);
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v19);
  _Unwind_Resume(a1);
}

uint64_t DSP_Host_Types::AudioChannelConfiguration::hash_equal(DSP_Host_Types::AudioChannelConfiguration *this, const DSP_Host_Types::AudioChannelConfiguration *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  DSP_Host_Types::IDSP_Host_DictionaryData **v11;
  unint64_t v12;
  float *v13;
  float *v14;
  float *v15;

  v4 = DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description(this);
  if (v4 != DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description(a2))
    return 0;
  v5 = *((_QWORD *)this + 12);
  v6 = *((_QWORD *)this + 13);
  if (v6 - v5 != *((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12) || v6 == v5)
    return 1;
  v9 = 0;
  do
  {
    v10 = v5 + 16 * v9;
    result = *(_QWORD *)v10;
    if (!*(_QWORD *)v10)
      break;
    v11 = (DSP_Host_Types::IDSP_Host_DictionaryData **)(*((_QWORD *)a2 + 12) + 16 * v9);
    if (!*v11)
      return 0;
    v12 = DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((DSP_Host_Types::IDSP_Host_DictionaryData *)result);
    if (v12 != DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description(*v11))
      return 0;
    v14 = *(float **)(*(_QWORD *)v10 + 72);
    v13 = *(float **)(*(_QWORD *)v10 + 80);
    v15 = (float *)*((_QWORD *)*v11 + 9);
    if ((char *)v13 - (char *)v14 != *((_QWORD *)*v11 + 10) - (_QWORD)v15)
      return 0;
    while (v14 != v13)
    {
      if (*v14 != *v15)
        return 0;
      ++v14;
      ++v15;
    }
    ++v9;
    v5 = *((_QWORD *)this + 12);
    result = 1;
  }
  while (v9 < (*((_QWORD *)this + 13) - v5) >> 4);
  return result;
}

uint64_t DSP_Host_Types::DeviceDescription::hash_equal(DSP_Host_Types::DeviceDescription const&)const::$_0::operator()(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  DSP_Host_Types::IDSP_Host_DictionaryData *v14;
  unint64_t v15;

  v2 = *a1;
  if (a1[1] == *a1)
    return 1;
  v5 = 0;
  while (1)
  {
    v6 = *(_QWORD **)(v2 + 16 * v5);
    if (!v6)
      return 0;
    v7 = *(_QWORD **)(*a2 + 16 * v5);
    if (!v7)
      return 0;
    v8 = DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((DSP_Host_Types::IDSP_Host_DictionaryData *)v6);
    if (v8 != DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((DSP_Host_Types::IDSP_Host_DictionaryData *)v7))
      return 0;
    v9 = DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((DSP_Host_Types::IDSP_Host_DictionaryData *)(v6 + 14));
    if (v9 != DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((DSP_Host_Types::IDSP_Host_DictionaryData *)(v7 + 14)))
      return 0;
    v10 = v6[42];
    v11 = v6[43];
    if (v11 - v10 != v7[43] - v7[42])
      return 0;
    if (v11 != v10)
    {
      v12 = 0;
      v13 = 0;
      do
      {
        v14 = (DSP_Host_Types::IDSP_Host_DictionaryData *)(v7[42] + v12);
        v15 = DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((DSP_Host_Types::IDSP_Host_DictionaryData *)(v10 + v12));
        if (v15 != DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description(v14))
          return 0;
        ++v13;
        v10 = v6[42];
        v12 += 152;
      }
      while (v13 < 0x86BCA1AF286BCA1BLL * ((v6[43] - v10) >> 3));
    }
    ++v5;
    v2 = *a1;
    if (v5 >= (a1[1] - *a1) >> 4)
      return 1;
  }
}

_QWORD *DSP_Host_Types::ConfigurationChangeRequest::debug_stringify_compare_result(_QWORD *a1, int a2)
{
  char v2;
  _QWORD *v4;
  uint64_t v5;
  char *v7;
  _QWORD v8[2];
  uint64_t v9;
  _QWORD v10[10];
  char v11;
  uint64_t v12;

  v2 = a2;
  if ((a2 & 0x20) != 0)
  {
    v7 = "identical";
    return std::string::basic_string[abi:ne180100]<0>(a1, v7);
  }
  if (!a2)
  {
    v7 = "different";
    return std::string::basic_string[abi:ne180100]<0>(a1, v7);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v8);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"same ", 5);
  if ((v2 & 1) != 0)
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"activation ", 11);
  if ((v2 & 2) != 0)
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"processing ", 11);
  if ((v2 & 4) != 0)
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"device list ", 12);
  if ((v2 & 8) != 0)
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"device traits ", 14);
  if ((v2 & 0x10) != 0)
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"streams used ", 13);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a1, (uint64_t)v10);
  v8[0] = *MEMORY[0x1E0DE4F50];
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v9 = v5;
  v10[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return (_QWORD *)MEMORY[0x1B5E50598](&v12);
}

void sub_1B5BC133C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t DSP_Host_Types::ConfigurationChangeRequest::util_compare_request(unsigned __int8 **this, unsigned __int8 **a2, int a3)
{
  unsigned __int8 v5;
  BOOL v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  char v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  BOOL v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;

  if (a3
    && (DSP_Host_Types::ConfigurationChangeRequest::hash_equal(this, (const DSP_Host_Types::ConfigurationChangeRequest *)a2) & 1) != 0)
  {
    return 63;
  }
  v6 = DSP_Dictionariable::SingleKvp<BOOL>::operator==((uint64_t)(this + 3), (uint64_t)(a2 + 3));
  if (this[14] == a2[14])
  {
    v7 = this[12];
    if (v7 == (unsigned __int8 *)(this + 13))
    {
LABEL_19:
      v13 = 2;
      goto LABEL_21;
    }
    v8 = a2[12];
    while (*((_DWORD *)v7 + 7) == *((_DWORD *)v8 + 7))
    {
      v9 = (unsigned __int8 *)*((_QWORD *)v7 + 1);
      v10 = v7;
      if (v9)
      {
        do
        {
          v7 = v9;
          v9 = *(unsigned __int8 **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v7 = (unsigned __int8 *)*((_QWORD *)v10 + 2);
          v26 = *(_QWORD *)v7 == (_QWORD)v10;
          v10 = v7;
        }
        while (!v26);
      }
      v11 = (unsigned __int8 *)*((_QWORD *)v8 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(unsigned __int8 **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (unsigned __int8 *)*((_QWORD *)v8 + 2);
          v26 = *(_QWORD *)v12 == (_QWORD)v8;
          v8 = v12;
        }
        while (!v26);
      }
      v8 = v12;
      if (v7 == (unsigned __int8 *)(this + 13))
        goto LABEL_19;
    }
  }
  v13 = 0;
LABEL_21:
  v5 = v13 | v6;
  v14 = this[83];
  v15 = this[82];
  if (v14 - v15 == a2[83] - a2[82])
  {
    v5 |= 0xCu;
    if (v14 != v15)
    {
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = *(_QWORD *)&v15[v16];
        if (!v18)
          break;
        v19 = a2[82];
        v20 = *(_QWORD *)&v19[v16];
        if (!v20)
          break;
        v21 = DSP_Dictionariable::SingleKvp<std::string>::operator==(v18 + 24, v20 + 24);
        v22 = DSP_Dictionariable::SingleKvp<std::string>::operator==(*(_QWORD *)&v15[v16] + 72, *(_QWORD *)&v19[v16] + 72);
        if (!v21 || (v22 & 1) == 0)
          break;
        v23 = *(_QWORD *)&v15[v16];
        v24 = *(_QWORD *)&v19[v16];
        if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)(v23 + 256), (const __CFString **)(v24 + 256)))
        {
          v25 = 0;
        }
        else
        {
          if (*(_BYTE *)(v23 + 272))
            v26 = *(_BYTE *)(v24 + 272) == 0;
          else
            v26 = 1;
          if (v26)
            v25 = (*(_BYTE *)(v23 + 272) != 0) == (*(_BYTE *)(v24 + 272) != 0);
          else
            v25 = *(double *)(v23 + 264) == *(double *)(v24 + 264);
        }
        if ((v25 & DSP_Dictionariable::SingleKvp<BOOL>::operator==(*(_QWORD *)&v15[v16] + 400, *(_QWORD *)&v19[v16] + 400)) == 0)v5 &= ~8u;
        ++v17;
        v15 = this[82];
        v16 += 16;
        if (v17 >= (this[83] - v15) >> 4)
          goto LABEL_41;
      }
      v5 &= 0xF3u;
    }
  }
LABEL_41:
  v27 = this[75];
  v28 = this[74];
  v29 = a2[75];
  v30 = a2[74];
  if (v27 - v28 == v29 - v30)
  {
    while (v28 != v27)
    {
      if (!std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v28, v30))
        return v5;
      v28 += 24;
      v30 += 24;
    }
    v5 |= 0x10u;
  }
  return v5;
}

uint64_t DSP_Host_Types::ConfigurationChangeRequest::hash_equal(unsigned __int8 **this, const DSP_Host_Types::ConfigurationChangeRequest *a2)
{
  unint64_t v4;
  unsigned __int8 **v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  unsigned __int8 **v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  unint64_t v25;

  v4 = DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((DSP_Host_Types::IDSP_Host_DictionaryData *)this);
  if (v4 == DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description(a2)
    && this[14] == *((unsigned __int8 **)a2 + 14))
  {
    v5 = (unsigned __int8 **)this[12];
    if (v5 == this + 13)
    {
LABEL_17:
      v12 = this[75];
      v13 = this[74];
      v14 = (unsigned __int8 *)*((_QWORD *)a2 + 74);
      if (v12 - v13 == *((_QWORD *)a2 + 75) - (_QWORD)v14)
      {
        while (v13 != v12)
        {
          result = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v13, v14);
          if (!(_DWORD)result)
            return result;
          v13 += 24;
          v14 += 24;
        }
        v16 = DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((DSP_Host_Types::IDSP_Host_DictionaryData *)(this + 9));
        if (v16 == DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((const DSP_Host_Types::ConfigurationChangeRequest *)((char *)a2 + 72)))
        {
          v17 = DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((DSP_Host_Types::IDSP_Host_DictionaryData *)(this + 15));
          if (v17 == DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((const DSP_Host_Types::ConfigurationChangeRequest *)((char *)a2 + 120)))
          {
            v18 = DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((DSP_Host_Types::IDSP_Host_DictionaryData *)(this + 34));
            if (v18 == DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((const DSP_Host_Types::ConfigurationChangeRequest *)((char *)a2 + 272)))
            {
              result = DSP_Host_Types::AudioChannelConfiguration::hash_equal((DSP_Host_Types::AudioChannelConfiguration *)(this + 59), (const DSP_Host_Types::ConfigurationChangeRequest *)((char *)a2 + 472));
              if (!(_DWORD)result)
                return result;
              v19 = this[83];
              v20 = this[82];
              if (v19 - v20 == *((_QWORD *)a2 + 83) - *((_QWORD *)a2 + 82))
              {
                if (v19 == v20)
                  return 1;
                v21 = 0;
                v22 = 0;
                while (1)
                {
                  v23 = *(uint64_t **)&v20[v21];
                  if (!v23)
                    break;
                  v24 = *(_QWORD **)(*((_QWORD *)a2 + 82) + v21);
                  if (!v24)
                    break;
                  v25 = DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((DSP_Host_Types::IDSP_Host_DictionaryData *)v23);
                  if (v25 != DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description((DSP_Host_Types::IDSP_Host_DictionaryData *)v24))
                    break;
                  result = DSP_Host_Types::AudioChannelConfiguration::hash_equal((DSP_Host_Types::AudioChannelConfiguration *)(v23 + 53), (const DSP_Host_Types::AudioChannelConfiguration *)(v24 + 53));
                  if ((_DWORD)result)
                  {
                    result = DSP_Host_Types::AudioChannelConfiguration::hash_equal((DSP_Host_Types::AudioChannelConfiguration *)(v23 + 68), (const DSP_Host_Types::AudioChannelConfiguration *)(v24 + 68));
                    if ((_DWORD)result)
                    {
                      if (v23[84] - v23[83] != v24[84] - v24[83]
                        || v23[87] - v23[86] != v24[87] - v24[86]
                        || v23[90] - v23[89] != v24[90] - v24[89])
                      {
                        return 0;
                      }
                      result = DSP_Host_Types::DeviceDescription::hash_equal(DSP_Host_Types::DeviceDescription const&)const::$_0::operator()(v23 + 83, v24 + 83);
                      if ((_DWORD)result)
                      {
                        result = DSP_Host_Types::DeviceDescription::hash_equal(DSP_Host_Types::DeviceDescription const&)const::$_0::operator()(v23 + 86, v24 + 86);
                        if ((_DWORD)result)
                        {
                          if ((DSP_Host_Types::DeviceDescription::hash_equal(DSP_Host_Types::DeviceDescription const&)const::$_0::operator()(v23 + 89, v24 + 89) & 1) == 0)return 0;
                          ++v22;
                          v20 = this[82];
                          v21 += 16;
                          result = 1;
                          if (v22 < (this[83] - v20) >> 4)
                            continue;
                        }
                      }
                    }
                  }
                  return result;
                }
              }
            }
          }
        }
      }
    }
    else
    {
      v6 = (_QWORD *)*((_QWORD *)a2 + 12);
      while (*((_DWORD *)v5 + 7) == *((_DWORD *)v6 + 7))
      {
        v7 = v5[1];
        v8 = v5;
        if (v7)
        {
          do
          {
            v5 = (unsigned __int8 **)v7;
            v7 = *(unsigned __int8 **)v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v5 = (unsigned __int8 **)v8[2];
            v9 = *v5 == (unsigned __int8 *)v8;
            v8 = v5;
          }
          while (!v9);
        }
        v10 = (_QWORD *)v6[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v6[2];
            v9 = *v11 == (_QWORD)v6;
            v6 = v11;
          }
          while (!v9);
        }
        v6 = v11;
        if (v5 == this + 13)
          goto LABEL_17;
      }
    }
  }
  return 0;
}

BOOL DSP_Dictionariable::SingleKvp<BOOL>::operator==(uint64_t a1, uint64_t a2)
{
  BOOL v5;

  if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)(a1 + 8), (const __CFString **)(a2 + 8)))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 17))
    v5 = *(_BYTE *)(a2 + 17) == 0;
  else
    v5 = 1;
  if (v5)
    return (*(_BYTE *)(a1 + 17) != 0) == (*(_BYTE *)(a2 + 17) != 0);
  else
    return *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
}

uint64_t DSP_Dictionariable::SingleKvp<std::string>::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const void **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v18;

  if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)(a1 + 8), (const __CFString **)(a2 + 8)))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 40))
    v5 = *(_BYTE *)(a2 + 40) == 0;
  else
    v5 = 1;
  if (v5)
    return (*(_BYTE *)(a1 + 40) != 0) == (*(_BYTE *)(a2 + 40) != 0);
  v6 = *(unsigned __int8 *)(a1 + 39);
  if ((v6 & 0x80u) == 0)
    v7 = *(unsigned __int8 *)(a1 + 39);
  else
    v7 = *(_QWORD *)(a1 + 24);
  v8 = *(unsigned __int8 *)(a2 + 39);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 24);
  if (v7 != v8)
    return 0;
  v10 = (const void **)(a1 + 16);
  if (v9 >= 0)
    v11 = (unsigned __int8 *)(a2 + 16);
  else
    v11 = *(unsigned __int8 **)(a2 + 16);
  if ((v6 & 0x80) != 0)
    return memcmp(*v10, v11, *(_QWORD *)(a1 + 24)) == 0;
  if (!*(_BYTE *)(a1 + 39))
    return 1;
  v12 = v6 - 1;
  do
  {
    v14 = *(unsigned __int8 *)v10;
    v10 = (const void **)((char *)v10 + 1);
    v13 = v14;
    v16 = *v11++;
    v15 = v16;
    v18 = v12-- != 0;
    result = v13 == v15;
  }
  while (v13 == v15 && v18);
  return result;
}

uint64_t AMCP::Core::Engine::register_io_buffer()
{
  return 0;
}

void AMCP::Core::update_time_for_all(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 *v4;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (a2 != a3)
  {
    v4 = a2;
    do
    {
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v4 + 312))(*(_QWORD *)v4))
        std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((char **)a1, v4);
      ++v4;
    }
    while (v4 != a3);
  }
}

uint64_t std::vector<std::shared_ptr<AMCP::Core::Engine>>::erase(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a2 != a3)
  {
    v3 = a2;
    v4 = result;
    result = a3;
    v5 = *(_QWORD *)(v4 + 8);
    if (a3 != v5)
    {
      v6 = 16 * ((a3 - a2) >> 4);
      do
      {
        std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100](v3, (__int128 *)(v3 + v6));
        v3 += 16;
      }
      while (v3 + v6 != v5);
      result = *(_QWORD *)(v4 + 8);
    }
    while (result != v3)
      result = std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](result - 16);
    *(_QWORD *)(v4 + 8) = v3;
  }
  return result;
}

double AMCP::Core::Engine::calculate_safety_violation_read(AMCP::Core::Engine *this, double a2)
{
  uint64_t v4;
  double v5;
  double v6;
  double v8[8];

  v4 = mach_absolute_time();
  (*(void (**)(double *__return_ptr, AMCP::Core::Engine *))(*(_QWORD *)this + 304))(v8, this);
  v5 = (*(double (**)(AMCP::Core::Engine *))(*(_QWORD *)this + 344))(this);
  v6 = v8[0] + floor((double)(v4 - *(_QWORD *)&v8[1]) / v5);
  return v6 - (double)(*(unsigned int (**)(AMCP::Core::Engine *))(*(_QWORD *)this + 80))(this) - a2;
}

double AMCP::Core::Engine::calculate_safety_violation_write(AMCP::Core::Engine *this, double a2)
{
  uint64_t v4;
  double v5;
  double v6;
  double v8[8];

  v4 = mach_absolute_time();
  (*(void (**)(double *__return_ptr, AMCP::Core::Engine *))(*(_QWORD *)this + 304))(v8, this);
  v5 = (*(double (**)(AMCP::Core::Engine *))(*(_QWORD *)this + 344))(this);
  v6 = v8[0] + floor((double)(v4 - *(_QWORD *)&v8[1]) / v5);
  return a2 - (v6 + (double)(*(unsigned int (**)(AMCP::Core::Engine *))(*(_QWORD *)this + 88))(this));
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        else
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void std::allocate_shared[abi:ne180100]<AMCP::Utility::Power_Assertion,std::allocator<AMCP::Utility::Power_Assertion>,applesauce::CF::StringRef &,applesauce::CF::StringRef &,applesauce::CF::ArrayRef,int &,void>(IOPMAssertionID **a1, const void **a2, const void **a3, const void **a4, uint64_t a5)
{
  char *v10;
  IOPMAssertionID *v11;
  void **v12;
  const __CFDictionary *Mutable;
  CFNumberRef v14;
  const void *v15;
  CFNumberRef v16;
  AMCP::Utility::Kernel_Error_Category *v17;
  unsigned int v18;
  AMCP::Log::Scope_Registry *v19;
  const __CFString *v20;
  uint64_t v21;
  std::runtime_error_vtbl *v22;
  std::runtime_error_vtbl *v23;
  const __CFString *v24;
  uint64_t v25;
  std::runtime_error_vtbl *p_valuePtr;
  std::runtime_error_vtbl *p_p;
  NSObject *v28;
  _opaque_pthread_t *v29;
  mach_port_t v30;
  void *v31;
  std::runtime_error *v32;
  std::runtime_error *exception;
  std::runtime_error *v34;
  std::runtime_error *v35;
  std::runtime_error *v36;
  std::runtime_error *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t (**v40)();
  __int128 v41;
  uint64_t v42;
  std::runtime_error __p;
  __int128 v44;
  std::runtime_error valuePtr;
  __int128 v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char v52;
  CFDictionaryRef AssertionProperties[2];
  _BYTE buf[24];
  __int16 v55;
  const char *v56;
  const char *v57;
  const char *v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v10 = (char *)operator new(0x38uLL);
  *(_OWORD *)(v10 + 8) = 0u;
  *(_QWORD *)v10 = &off_1E6994F70;
  *((_DWORD *)v10 + 6) = 0;
  v11 = (IOPMAssertionID *)(v10 + 24);
  *((_QWORD *)v10 + 4) = 0;
  v12 = (void **)(v10 + 32);
  *(_OWORD *)(v10 + 40) = 0u;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  AssertionProperties[1] = Mutable;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, CFSTR("AssertType"));
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(Mutable, *(const void **)buf, *a2);
  if (*(_QWORD *)buf)
    CFRelease(*(CFTypeRef *)buf);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, CFSTR("AssertName"));
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(Mutable, *(const void **)buf, *a3);
  if (*(_QWORD *)buf)
    CFRelease(*(CFTypeRef *)buf);
  if ((_DWORD)a5 != -1)
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, CFSTR("AssertionOnBehalfOfPID"));
    LODWORD(valuePtr.__vftable) = a5;
    v14 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!v14)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, *(const void **)buf, v14);
    CFRelease(v14);
    if (*(_QWORD *)buf)
      CFRelease(*(CFTypeRef *)buf);
  }
  if (*a4)
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, CFSTR("ResourcesUsed"));
    mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(Mutable, *(const void **)buf, *a4);
    if (*(_QWORD *)buf)
      CFRelease(*(CFTypeRef *)buf);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, CFSTR("AllowsDeviceRestart"));
  v15 = (const void *)*MEMORY[0x1E0C9AE48];
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::BooleanRef>(Mutable, *(const void **)buf, (const void *)*MEMORY[0x1E0C9AE48]);
  if (v15)
    CFRelease(v15);
  if (*(_QWORD *)buf)
    CFRelease(*(CFTypeRef *)buf);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, CFSTR("AssertLevel"));
  LODWORD(valuePtr.__vftable) = 0;
  v16 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v16)
  {
    v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v32, "Could not construct");
    __cxa_throw(v32, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, *(const void **)buf, v16);
  CFRelease(v16);
  if (*(_QWORD *)buf)
    CFRelease(*(CFTypeRef *)buf);
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)AssertionProperties, Mutable);
  v17 = (AMCP::Utility::Kernel_Error_Category *)IOPMAssertionCreateWithProperties(AssertionProperties[0], v11);
  v18 = v17;
  AMCP::Utility::Kernel_Error_Category::get(v17);
  if (v18)
  {
    AMCP::Log::Scope_Registry::get(v19);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v28 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v29 = pthread_self();
      v30 = pthread_mach_thread_np(v29);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v30;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Power_Assertion.h";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 92;
      v55 = 2080;
      v56 = "error.operator BOOL()";
      _os_log_error_impl(&dword_1B57BA000, v28, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to create the power assertion", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v52);
    v31 = __cxa_allocate_exception(0x50uLL);
    MEMORY[0x1B5E50220](&__p, v18, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
    std::runtime_error::runtime_error(&valuePtr, &__p);
    v46 = v44;
    v49 = 0;
    v50 = 0;
    v51 = -1;
    valuePtr.__vftable = (std::runtime_error_vtbl *)&off_1E69A12F8;
    v47 = &unk_1E69A1320;
    v48 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&valuePtr);
    v57 = "AMCP::Utility::Power_Assertion::Power_Assertion(const CF::String &, const CF::String &, const CF::Array &, pid"
          "_t, Device_Restart)";
    v58 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Utility/Power_Assertion.h";
    v59 = 92;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v38);
    v40 = off_1E69A20A0;
    v41 = v38;
    v42 = v39;
    v38 = 0uLL;
    v39 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>((uint64_t)buf, (uint64_t)&v40);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)v31, (uint64_t)buf);
  }
  if ((_DWORD)a5 == -1)
  {
    v24 = (const __CFString *)*a2;
    if (!*a2)
    {
      v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v36, "Could not construct");
      __cxa_throw(v36, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v25 = *v11;
    p_valuePtr = (std::runtime_error_vtbl *)&valuePtr;
    applesauce::CF::convert_to<std::string,0>((uint64_t)&valuePtr, v24);
    if (SBYTE7(v46) < 0)
      p_valuePtr = valuePtr.__vftable;
    if (!*a3)
    {
      v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v37, "Could not construct");
      __cxa_throw(v37, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, (const __CFString *)*a3);
    if ((SBYTE7(v44) & 0x80u) == 0)
      p_p = (std::runtime_error_vtbl *)&__p;
    else
      p_p = __p.__vftable;
    caulk::make_string((caulk *)"power assertion ID %d of type '%s' with name: '%s'", (uint64_t)buf, v25, p_valuePtr, p_p);
  }
  else
  {
    v20 = (const __CFString *)*a2;
    if (!*a2)
    {
      v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v34, "Could not construct");
      __cxa_throw(v34, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v21 = *v11;
    v22 = (std::runtime_error_vtbl *)&valuePtr;
    applesauce::CF::convert_to<std::string,0>((uint64_t)&valuePtr, v20);
    if (SBYTE7(v46) < 0)
      v22 = valuePtr.__vftable;
    if (!*a3)
    {
      v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v35, "Could not construct");
      __cxa_throw(v35, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, (const __CFString *)*a3);
    if ((SBYTE7(v44) & 0x80u) == 0)
      v23 = (std::runtime_error_vtbl *)&__p;
    else
      v23 = __p.__vftable;
    caulk::make_string((caulk *)"power assertion ID %d of type '%s' with name: '%s' on behalf of %d", (uint64_t)buf, v21, v22, v23, a5);
  }
  if (v10[55] < 0)
    operator delete(*v12);
  *(_OWORD *)v12 = *(_OWORD *)buf;
  *((_QWORD *)v10 + 6) = *(_QWORD *)&buf[16];
  buf[23] = 0;
  buf[0] = 0;
  if (SBYTE7(v44) < 0)
    operator delete(__p.__vftable);
  if (SBYTE7(v46) < 0)
    operator delete(valuePtr.__vftable);
  if (AssertionProperties[0])
    CFRelease(AssertionProperties[0]);
  if (Mutable)
    CFRelease(Mutable);
  *a1 = v11;
  a1[1] = (IOPMAssertionID *)v10;
}

void sub_1B5BC2384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,std::runtime_error a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,const void *a40)
{
  uint64_t v40;
  void **v41;
  uint64_t v42;
  void *v44;

  applesauce::CF::DictionaryRef::~DictionaryRef(&a40);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)(v42 - 200));
  if (*(char *)(v40 + 55) < 0)
    operator delete(*v41);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v40);
  operator delete(v44);
  _Unwind_Resume(a1);
}

void mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::BooleanRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1)
    CFDictionarySetValue(a1, a2, a3);
}

void std::__shared_ptr_emplace<AMCP::Utility::Power_Assertion>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6994F70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Utility::Power_Assertion>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6994F70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<AMCP::Utility::Power_Assertion>::__on_zero_shared(uint64_t a1)
{
  IOPMAssertionID v2;

  v2 = *(_DWORD *)(a1 + 24);
  if (v2)
    IOPMAssertionRelease(v2);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

AMCP::Core::Implementation::Simple_Engine_IO_State *AMCP::Core::Implementation::Simple_Engine_IO_State::Simple_Engine_IO_State(AMCP::Core::Implementation::Simple_Engine_IO_State *this, const __CFString **a2, unint64_t a3, unint64_t a4, int a5, dispatch_queue_t *a6, const AMCP::Utility::Dispatch_Queue *a7)
{
  dispatch_object_t *v12;
  NSObject *v13;
  NSObject **v14;
  CFTypeRef *v15;
  void **v16;
  CFIndex v17;
  __CFArray *Mutable;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  CFTypeRef *v22;
  void **v23;
  CFIndex v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v29;
  NSObject *isa;
  unint64_t *v31;
  unint64_t v32;
  _opaque_pthread_t *v33;
  mach_port_t v34;
  std::runtime_error *exception;
  std::runtime_error *v36;
  std::runtime_error *v37;
  std::runtime_error *v38;
  CFTypeRef v39;
  CFTypeRef v40;
  CFTypeRef cf[2];
  char v42;
  void *__p[2];
  unsigned __int8 v44;
  CFTypeRef v45;
  CFTypeRef v46;
  dispatch_object_t object;
  _BYTE v48[10];
  __int16 v49;
  int v50;
  __int16 v51;
  const char *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = a3;
  *((_QWORD *)this + 1) = a4;
  *((_QWORD *)this + 2) = 0;
  LOBYTE(object) = 0;
  std::vector<BOOL>::vector((_QWORD *)this + 3, a3, (unsigned __int8 *)&object);
  *((_DWORD *)this + 12) = 0;
  LOBYTE(object) = 0;
  std::vector<BOOL>::vector((_QWORD *)this + 7, a4, (unsigned __int8 *)&object);
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 20) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  v12 = (dispatch_object_t *)((char *)this + 120);
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_WORD *)this + 76) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 850045863;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_QWORD *)this + 34) = 850045863;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((_QWORD *)this + 45) = 850045863;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_QWORD *)this + 54) = dispatch_semaphore_create(0);
  v13 = dispatch_queue_create("AMCP Scratch Queue", 0);
  v14 = AMCP::Utility::Dispatch_Queue::operator=((NSObject **)this + 15, v13);
  if (v13)
    dispatch_release(v13);
  if (!*v12)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&object, "com.apple.coreaudio", "AMCP");
    v29 = *(std::__shared_weak_count **)v48;
    isa = object->isa;
    if (*(_QWORD *)v48)
    {
      v31 = (unint64_t *)(*(_QWORD *)v48 + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (os_log_type_enabled(isa, OS_LOG_TYPE_ERROR))
    {
      v33 = pthread_self();
      v34 = pthread_mach_thread_np(v33);
      LODWORD(object) = 67109890;
      HIDWORD(object) = v34;
      *(_WORD *)v48 = 2080;
      *(_QWORD *)&v48[2] = "Engine.cpp";
      v49 = 1024;
      v50 = 224;
      v51 = 2080;
      v52 = "m_power_assertion_queue.operator BOOL() == true";
      _os_log_error_impl(&dword_1B57BA000, isa, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", (uint8_t *)&object, 0x22u);
    }
    abort();
  }
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&object, *v12);
  dispatch_set_target_queue(object, *a6);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&object);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v46, CFSTR("PreventUserIdleSystemSleep"));
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::convert_to<std::string,0>((uint64_t)cf, *a2);
  if (v42 >= 0)
    v15 = cf;
  else
    v15 = (CFTypeRef *)cf[0];
  caulk::make_string((caulk *)"com.apple.audio.%s.preventuseridlesleep", (uint64_t)__p, v15);
  if ((v44 & 0x80u) == 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if ((v44 & 0x80u) == 0)
    v17 = v44;
  else
    v17 = (CFIndex)__p[1];
  v45 = CFStringCreateWithBytes(0, (const UInt8 *)v16, v17, 0x8000100u, 0);
  if (!v45)
  {
    v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v36, "Could not construct");
    __cxa_throw(v36, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if ((char)v44 < 0)
    operator delete(__p[0]);
  if (v42 < 0)
    operator delete((void *)cf[0]);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B380]);
  if (*(_QWORD *)this)
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)__p, CFSTR("audio-in"));
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::StringRef>(Mutable, __p[0]);
    if (__p[0])
      CFRelease(__p[0]);
  }
  if (*((_QWORD *)this + 1))
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)__p, CFSTR("audio-out"));
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::StringRef>(Mutable, __p[0]);
    if (__p[0])
      CFRelease(__p[0]);
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)cf, Mutable);
  std::allocate_shared[abi:ne180100]<AMCP::Utility::Power_Assertion,std::allocator<AMCP::Utility::Power_Assertion>,applesauce::CF::StringRef &,applesauce::CF::StringRef &,applesauce::CF::ArrayRef,int &,void>((IOPMAssertionID **)__p, &v46, &v45, cf, 0xFFFFFFFFLL);
  std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)this + 88, (__int128 *)__p);
  v19 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v20 = (unint64_t *)((char *)__p[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (cf[0])
    CFRelease(cf[0]);
  if (a5)
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v40, CFSTR("PreventUserIdleDisplaySleep"));
    if (!*a2)
    {
      v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v37, "Could not construct");
      __cxa_throw(v37, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)cf, *a2);
    if (v42 >= 0)
      v22 = cf;
    else
      v22 = (CFTypeRef *)cf[0];
    caulk::make_string((caulk *)"com.apple.audio.%s.preventuseridledisplaysleep", (uint64_t)__p, v22);
    if ((v44 & 0x80u) == 0)
      v23 = __p;
    else
      v23 = (void **)__p[0];
    if ((v44 & 0x80u) == 0)
      v24 = v44;
    else
      v24 = (CFIndex)__p[1];
    v39 = CFStringCreateWithBytes(0, (const UInt8 *)v23, v24, 0x8000100u, 0);
    if (!v39)
    {
      v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v38, "Could not construct");
      __cxa_throw(v38, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if ((char)v44 < 0)
      operator delete(__p[0]);
    if (v42 < 0)
      operator delete((void *)cf[0]);
    mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)cf, Mutable);
    std::allocate_shared[abi:ne180100]<AMCP::Utility::Power_Assertion,std::allocator<AMCP::Utility::Power_Assertion>,applesauce::CF::StringRef &,applesauce::CF::StringRef &,applesauce::CF::ArrayRef,int &,void>((IOPMAssertionID **)__p, &v40, &v39, cf, 0xFFFFFFFFLL);
    std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)this + 104, (__int128 *)__p);
    v25 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v26 = (unint64_t *)((char *)__p[1] + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (cf[0])
      CFRelease(cf[0]);
    if (v39)
      CFRelease(v39);
    if (v40)
      CFRelease(v40);
  }
  if (Mutable)
    CFRelease(Mutable);
  if (v45)
    CFRelease(v45);
  if (v46)
    CFRelease(v46);
  return this;
}

void sub_1B5BC2C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, CFTypeRef a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,CFTypeRef a25,CFTypeRef a26)
{
  void **v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  AMCP::Utility::Dispatch_Queue *v30;

  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v30);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v29);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v28);
  if (*v27)
    operator delete(*v27);
  if (*v26)
    operator delete(*v26);
  _Unwind_Resume(a1);
}

void AMCP::Core::Implementation::Simple_Engine_IO_State::get_input_stream_active_list(AMCP::Core::Implementation::Simple_Engine_IO_State *this, os_unfair_lock_s *a2)
{
  os_unfair_lock_s *v4;

  v4 = a2 + 5;
  os_unfair_lock_lock(a2 + 5);
  std::vector<BOOL>::vector(this, (uint64_t)&a2[6]);
  os_unfair_lock_unlock(v4);
}

void AMCP::Core::Implementation::Simple_Engine_IO_State::set_input_stream_active_list(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;

  v5 = std::vector<BOOL>::vector(a1, a3);
  std::vector<BOOL>::resize((uint64_t)v5, *(_QWORD *)a2, 0);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 20));
  std::vector<BOOL>::operator=((void **)(a2 + 24), (uint64_t)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 20));
}

void sub_1B5BC2E98(_Unwind_Exception *a1)
{
  void **v1;
  os_unfair_lock_s *v2;

  os_unfair_lock_unlock(v2);
  if (*v1)
    operator delete(*v1);
  _Unwind_Resume(a1);
}

void AMCP::Core::Implementation::Simple_Engine_IO_State::get_output_stream_active_list(AMCP::Core::Implementation::Simple_Engine_IO_State *this, os_unfair_lock_s *a2)
{
  os_unfair_lock_s *v4;

  v4 = a2 + 12;
  os_unfair_lock_lock(a2 + 12);
  std::vector<BOOL>::vector(this, (uint64_t)&a2[14]);
  os_unfair_lock_unlock(v4);
}

void AMCP::Core::Implementation::Simple_Engine_IO_State::set_output_stream_active_list(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;

  v5 = std::vector<BOOL>::vector(a1, a3);
  std::vector<BOOL>::resize((uint64_t)v5, *(_QWORD *)(a2 + 8), 0);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 48));
  std::vector<BOOL>::operator=((void **)(a2 + 56), (uint64_t)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 48));
}

void sub_1B5BC2F60(_Unwind_Exception *a1)
{
  void **v1;
  os_unfair_lock_s *v2;

  os_unfair_lock_unlock(v2);
  if (*v1)
    operator delete(*v1);
  _Unwind_Resume(a1);
}

uint64_t *AMCP::Core::Implementation::Simple_Engine_IO_State::take_power_assertions(uint64_t *this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  _QWORD *v13;
  NSObject *v14;
  _opaque_pthread_t *v15;
  mach_port_t v16;
  void *exception;
  __int128 v18;
  uint64_t v19;
  uint64_t (**v20)();
  __int128 v21;
  uint64_t v22;
  std::string v23;
  std::logic_error v24;
  std::logic_error v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  uint8_t buf[8];
  __int16 v33;
  char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  _BYTE v38[14];
  const char *v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v1 = (unsigned int *)(this + 10);
  v2 = atomic_load((unsigned int *)this + 20);
  if ((v2 & 0x80000000) != 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v14 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = pthread_self();
      v16 = pthread_mach_thread_np(v15);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v16;
      v33 = 2080;
      v34 = "Engine.cpp";
      v35 = 1024;
      v36 = 292;
      v37 = 2080;
      *(_QWORD *)v38 = "not (m_power_assertion_refcount >= 0)";
      _os_log_error_impl(&dword_1B57BA000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v31);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v23);
    std::logic_error::logic_error(&v24, &v23);
    v24.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v25, &v24);
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = -1;
    v25.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v26 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v25);
    *(_QWORD *)&v38[6] = "void AMCP::Core::Implementation::Simple_Engine_IO_State::take_power_assertions()";
    v39 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Engine.cpp";
    v40 = 292;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v18);
    v21 = v18;
    v22 = v19;
    v18 = 0uLL;
    v19 = 0;
    v20 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v20);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  do
    v3 = __ldaxr(v1);
  while (__stlxr(v3 + 1, v1));
  if (!v3)
  {
    v4 = this[11];
    v5 = this[12];
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    v8 = this[13];
    v9 = this[14];
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = this[15];
    v13 = (_QWORD *)operator new();
    *v13 = v4;
    v13[1] = v5;
    v13[2] = v8;
    v13[3] = v9;
    *(_QWORD *)buf = 0;
    dispatch_async_f(v12, v13, (dispatch_function_t)applesauce::dispatch::v1::async<AMCP::Core::Implementation::Simple_Engine_IO_State::take_power_assertions(void)::$_0>(dispatch_queue_s *,AMCP::Core::Implementation::Simple_Engine_IO_State::take_power_assertions(void)::$_0 &&)::{lambda(void *)#1}::__invoke);
    return std::unique_ptr<-[Core_Audio_Driver_Service_Client connect_to_driver_service:]::$_2::operator() const(void)::{lambda(void)#1},std::default_delete<-[Core_Audio_Driver_Service_Client connect_to_driver_service:]::$_2::operator() const(void)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
  }
  return this;
}

void sub_1B5BC3224(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t *applesauce::dispatch::v1::async<AMCP::Core::Implementation::Simple_Engine_IO_State::take_power_assertions(void)::$_0>(dispatch_queue_s *,AMCP::Core::Implementation::Simple_Engine_IO_State::take_power_assertions(void)::$_0 &&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  IOPMAssertionID *v2;
  IOPMAssertionID *v3;
  uint64_t v5;

  v5 = a1;
  v2 = *(IOPMAssertionID **)a1;
  if (v2)
    AMCP::Utility::Power_Assertion::take(v2);
  v3 = *(IOPMAssertionID **)(a1 + 16);
  if (v3)
    AMCP::Utility::Power_Assertion::take(v3);
  return std::unique_ptr<-[Core_Audio_Driver_Service_Client connect_to_driver_service:]::$_2::operator() const(void)::{lambda(void)#1},std::default_delete<-[Core_Audio_Driver_Service_Client connect_to_driver_service:]::$_2::operator() const(void)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&v5);
}

void sub_1B5BC327C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<-[Core_Audio_Driver_Service_Client connect_to_driver_service:]::$_2::operator() const(void)::{lambda(void)#1},std::default_delete<-[Core_Audio_Driver_Service_Client connect_to_driver_service:]::$_2::operator() const(void)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void AMCP::Utility::Power_Assertion::take(IOPMAssertionID *this)
{
  CFNumberRef v2;
  AMCP::Utility::Kernel_Error_Category *v3;
  unsigned int v4;
  AMCP::Log::Scope_Registry *v5;
  NSObject *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  std::runtime_error *exception;
  __int128 v13;
  uint64_t v14;
  uint64_t (**v15)();
  __int128 v16;
  uint64_t v17;
  std::runtime_error v18;
  __int128 v19;
  std::runtime_error v20;
  __int128 v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  CFNumberRef v28;
  NSObject **valuePtr;
  __int16 v30;
  char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  _QWORD *v37;
  const char *v38;
  const char *v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (*this)
  {
    LODWORD(valuePtr) = 255;
    v2 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    v28 = v2;
    if (!v2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v3 = (AMCP::Utility::Kernel_Error_Category *)IOPMAssertionSetProperty(*this, CFSTR("AssertLevel"), v2);
    v4 = v3;
    AMCP::Utility::Kernel_Error_Category::get(v3);
    if (v4)
    {
      AMCP::Log::Scope_Registry::get(v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&valuePtr, "com.apple.coreaudio", "AMCP");
      v6 = *valuePtr;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&valuePtr);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v7 = pthread_self();
        v8 = pthread_mach_thread_np(v7);
        v9 = this + 2;
        if (*((char *)this + 31) < 0)
          v9 = (_QWORD *)*v9;
        LODWORD(valuePtr) = 67110146;
        HIDWORD(valuePtr) = v8;
        v30 = 2080;
        v31 = "Power_Assertion.h";
        v32 = 1024;
        v33 = 125;
        v34 = 2080;
        v35 = "error.operator BOOL()";
        v36 = 2080;
        v37 = v9;
        _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to take %s", (uint8_t *)&valuePtr, 0x2Cu);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
      v10 = v4;
      v11 = __cxa_allocate_exception(0x50uLL);
      MEMORY[0x1B5E50220](&v18, v10, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
      std::runtime_error::runtime_error(&v20, &v18);
      v21 = v19;
      v24 = 0;
      v25 = 0;
      v26 = -1;
      v20.__vftable = (std::runtime_error_vtbl *)&off_1E69A12F8;
      v22 = &unk_1E69A1320;
      v23 = 0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)&valuePtr, (uint64_t)&v20);
      v38 = "void AMCP::Utility::Power_Assertion::take()";
      v39 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Utility/Power_Assertion.h";
      v40 = 125;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
      v16 = v13;
      v17 = v14;
      v13 = 0uLL;
      v14 = 0;
      v15 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>((uint64_t)&valuePtr, (uint64_t)&v15);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)v11, (uint64_t)&valuePtr);
    }
    CFRelease(v2);
  }
}

void sub_1B5BC3524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, std::runtime_error a16, uint64_t a17, uint64_t a18, std::runtime_error a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  applesauce::CF::NumberRef::~NumberRef((const void **)(v23 - 136));
  _Unwind_Resume(a1);
}

uint64_t *AMCP::Core::Implementation::Simple_Engine_IO_State::release_power_assertions(uint64_t *this)
{
  unsigned int *v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  _QWORD *v14;
  NSObject *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  void *exception;
  __int128 v19;
  uint64_t v20;
  uint64_t (**v21)();
  __int128 v22;
  uint64_t v23;
  std::string v24;
  std::logic_error v25;
  std::logic_error v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  uint8_t buf[8];
  __int16 v34;
  char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  _BYTE v39[14];
  const char *v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v1 = (unsigned int *)(this + 10);
  v2 = atomic_load((unsigned int *)this + 20);
  if (v2 < 1)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v15 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v17;
      v34 = 2080;
      v35 = "Engine.cpp";
      v36 = 1024;
      v37 = 312;
      v38 = 2080;
      *(_QWORD *)v39 = "not (m_power_assertion_refcount > 0)";
      _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v24);
    std::logic_error::logic_error(&v25, &v24);
    v25.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v26, &v25);
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = -1;
    v26.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v27 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v26);
    *(_QWORD *)&v39[6] = "void AMCP::Core::Implementation::Simple_Engine_IO_State::release_power_assertions()";
    v40 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Engine.cpp";
    v41 = 312;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
    v22 = v19;
    v23 = v20;
    v19 = 0uLL;
    v20 = 0;
    v21 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v21);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  do
  {
    v3 = __ldaxr(v1);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v1));
  if (!v4)
  {
    v5 = this[11];
    v6 = this[12];
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = this[13];
    v10 = this[14];
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = this[15];
    v14 = (_QWORD *)operator new();
    *v14 = v5;
    v14[1] = v6;
    v14[2] = v9;
    v14[3] = v10;
    *(_QWORD *)buf = 0;
    dispatch_async_f(v13, v14, (dispatch_function_t)applesauce::dispatch::v1::async<AMCP::Core::Implementation::Simple_Engine_IO_State::release_power_assertions(void)::$_0>(dispatch_queue_s *,AMCP::Core::Implementation::Simple_Engine_IO_State::release_power_assertions(void)::$_0 &&)::{lambda(void *)#1}::__invoke);
    return std::unique_ptr<-[Core_Audio_Driver_Service_Client connect_to_driver_service:]::$_2::operator() const(void)::{lambda(void)#1},std::default_delete<-[Core_Audio_Driver_Service_Client connect_to_driver_service:]::$_2::operator() const(void)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100]((uint64_t *)buf);
  }
  return this;
}

void sub_1B5BC38CC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t *applesauce::dispatch::v1::async<AMCP::Core::Implementation::Simple_Engine_IO_State::release_power_assertions(void)::$_0>(dispatch_queue_s *,AMCP::Core::Implementation::Simple_Engine_IO_State::release_power_assertions(void)::$_0 &&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  IOPMAssertionID *v2;
  IOPMAssertionID *v3;
  uint64_t v5;

  v5 = a1;
  v2 = *(IOPMAssertionID **)a1;
  if (v2)
    AMCP::Utility::Power_Assertion::release(v2);
  v3 = *(IOPMAssertionID **)(a1 + 16);
  if (v3)
    AMCP::Utility::Power_Assertion::release(v3);
  return std::unique_ptr<-[Core_Audio_Driver_Service_Client connect_to_driver_service:]::$_2::operator() const(void)::{lambda(void)#1},std::default_delete<-[Core_Audio_Driver_Service_Client connect_to_driver_service:]::$_2::operator() const(void)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&v5);
}

void AMCP::Utility::Power_Assertion::release(IOPMAssertionID *this)
{
  CFNumberRef v2;
  AMCP::Utility::Kernel_Error_Category *v3;
  int v4;
  AMCP::Log::Scope_Registry *v5;
  NSObject *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  _QWORD *v9;
  std::string *v10;
  std::runtime_error *exception;
  std::string v12;
  std::error_code v13;
  NSObject **valuePtr;
  __int16 v15;
  char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  _QWORD *v22;
  __int16 v23;
  std::string *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*this)
  {
    LODWORD(valuePtr) = 0;
    v2 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!v2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v3 = (AMCP::Utility::Kernel_Error_Category *)IOPMAssertionSetProperty(*this, CFSTR("AssertLevel"), v2);
    v4 = (int)v3;
    AMCP::Utility::Kernel_Error_Category::get(v3);
    v13.__val_ = v4;
    v13.__cat_ = (const std::error_category *)&AMCP::Utility::Kernel_Error_Category::get(void)::s_category;
    if (v4)
    {
      AMCP::Log::Scope_Registry::get(v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&valuePtr, "com.apple.coreaudio", "AMCP");
      v6 = *valuePtr;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&valuePtr);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v7 = pthread_self();
        v8 = pthread_mach_thread_np(v7);
        v9 = this + 2;
        if (*((char *)this + 31) < 0)
          v9 = (_QWORD *)*v9;
        std::error_code::message(&v12, &v13);
        if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &v12;
        else
          v10 = (std::string *)v12.__r_.__value_.__r.__words[0];
        LODWORD(valuePtr) = 67110402;
        HIDWORD(valuePtr) = v8;
        v15 = 2080;
        v16 = "Power_Assertion.h";
        v17 = 1024;
        v18 = 136;
        v19 = 2080;
        v20 = "error.value() == 0";
        v21 = 2080;
        v22 = v9;
        v23 = 2080;
        v24 = v10;
        _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s failed to take %s: %s", (uint8_t *)&valuePtr, 0x36u);
        if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v12.__r_.__value_.__l.__data_);
      }
      abort();
    }
    CFRelease(v2);
  }
}

void sub_1B5BC3B14(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void HALS_AHPPlugIn::~HALS_AHPPlugIn(HALS_AHPPlugIn *this)
{
  HALS_AHPPlugIn::~HALS_AHPPlugIn(this);
  JUMPOUT(0x1B5E50688);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6994FC0;
  v2 = *((_QWORD *)this + 4);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  HALB_CFPlugIn::~HALB_CFPlugIn((HALS_AHPPlugIn *)((char *)this + 8));
}

BOOL HALS_AHPPlugIn::ObjectIsPropertySettable(HALS_AHPPlugIn *this, uint64_t a2, const AudioObjectPropertyAddress *a3)
{
  int v4;
  uint8x8_t v5;
  int16x8_t v7;
  int16x8_t v8;
  uint64_t mElement;
  _DWORD *exception;
  int v11;
  _BYTE v12[5];
  unsigned __int32 v13;
  char v14;
  __int32 v15;
  char v16;
  char v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  __int32 *v23;
  __int16 v24;
  unsigned __int32 *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  __int16 v30;
  _BYTE *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  v4 = (*(uint64_t (**)(HALS_AHPPlugIn *, uint64_t, const AudioObjectPropertyAddress *, char *))(*(_QWORD *)this + 192))(this, a2, a3, &v17);
  if (v4)
  {
    v5.i32[0] = a3->mSelector;
    v7 = (int16x8_t)vmovl_u8(v5);
    *(int16x4_t *)v7.i8 = vrev64_s16(*(int16x4_t *)v7.i8);
    *(int8x8_t *)v7.i8 = vmovn_s16(v7);
    v15 = v7.i32[0];
    v16 = 0;
    v7.i32[0] = a3->mScope;
    v8 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v7.i8);
    *(int16x4_t *)v8.i8 = vrev64_s16(*(int16x4_t *)v8.i8);
    v13 = vmovn_s16(v8).u32[0];
    v14 = 0;
    v12[0] = HIBYTE(v4);
    v12[1] = BYTE2(v4);
    v12[2] = BYTE1(v4);
    v11 = v4;
    v12[3] = v4;
    v12[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      mElement = a3->mElement;
      *(_DWORD *)buf = 136316674;
      v19 = "HALS_AHPPlugIn.cpp";
      v20 = 1024;
      v21 = 102;
      v22 = 2080;
      v23 = &v15;
      v24 = 2080;
      v25 = &v13;
      v26 = 2048;
      v27 = mElement;
      v28 = 1024;
      v29 = v11;
      v30 = 2080;
      v31 = v12;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_AHPPlugIn::ObjectIsPropertySettable: got an error from the plug-in routine [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v11;
  }
  return v17 != 0;
}

uint64_t HALS_AHPPlugIn::ObjectGetPropertyDataSize(HALS_AHPPlugIn *this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5)
{
  int v6;
  uint8x8_t v7;
  int16x8_t v9;
  int16x8_t v10;
  uint64_t mElement;
  _DWORD *exception;
  int v13;
  _BYTE v14[5];
  unsigned __int32 v15;
  char v16;
  __int32 v17;
  char v18;
  unsigned int v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  __int32 *v25;
  __int16 v26;
  unsigned __int32 *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  __int16 v32;
  _BYTE *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  v6 = (*(uint64_t (**)(HALS_AHPPlugIn *, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, unsigned int *))(*(_QWORD *)this + 200))(this, a2, a3, a4, a5, &v19);
  if (v6)
  {
    v7.i32[0] = a3->mSelector;
    v9 = (int16x8_t)vmovl_u8(v7);
    *(int16x4_t *)v9.i8 = vrev64_s16(*(int16x4_t *)v9.i8);
    *(int8x8_t *)v9.i8 = vmovn_s16(v9);
    v17 = v9.i32[0];
    v18 = 0;
    v9.i32[0] = a3->mScope;
    v10 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v9.i8);
    *(int16x4_t *)v10.i8 = vrev64_s16(*(int16x4_t *)v10.i8);
    v15 = vmovn_s16(v10).u32[0];
    v16 = 0;
    v14[0] = HIBYTE(v6);
    v14[1] = BYTE2(v6);
    v14[2] = BYTE1(v6);
    v13 = v6;
    v14[3] = v6;
    v14[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      mElement = a3->mElement;
      *(_DWORD *)buf = 136316674;
      v21 = "HALS_AHPPlugIn.cpp";
      v22 = 1024;
      v23 = 110;
      v24 = 2080;
      v25 = &v17;
      v26 = 2080;
      v27 = &v15;
      v28 = 2048;
      v29 = mElement;
      v30 = 1024;
      v31 = v13;
      v32 = 2080;
      v33 = v14;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_AHPPlugIn::ObjectGetPropertyDataSize: got an error from the plug-in routine [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v13;
  }
  return v19;
}

uint64_t HALS_AHPPlugIn::ObjectGetPropertyData(HALS_AHPPlugIn *this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, unsigned int *a6, void *a7)
{
  uint64_t result;
  uint8x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  uint64_t mElement;
  _DWORD *exception;
  int v14;
  _BYTE v15[5];
  unsigned __int32 v16;
  char v17;
  __int32 v18;
  char v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  __int32 *v25;
  __int16 v26;
  unsigned __int32 *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  __int16 v32;
  _BYTE *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(HALS_AHPPlugIn *, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, unsigned int *, void *))(*(_QWORD *)this + 208))(this, a2, a3, a4, a5, a6, a7);
  if ((_DWORD)result)
  {
    v9.i32[0] = a3->mSelector;
    v10 = (int16x8_t)vmovl_u8(v9);
    *(int16x4_t *)v10.i8 = vrev64_s16(*(int16x4_t *)v10.i8);
    *(int8x8_t *)v10.i8 = vmovn_s16(v10);
    v18 = v10.i32[0];
    v19 = 0;
    v10.i32[0] = a3->mScope;
    v11 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v10.i8);
    *(int16x4_t *)v11.i8 = vrev64_s16(*(int16x4_t *)v11.i8);
    v16 = vmovn_s16(v11).u32[0];
    v17 = 0;
    v15[0] = BYTE3(result);
    v15[1] = BYTE2(result);
    v15[2] = BYTE1(result);
    v14 = result;
    v15[3] = result;
    v15[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      mElement = a3->mElement;
      *(_DWORD *)buf = 136316674;
      v21 = "HALS_AHPPlugIn.cpp";
      v22 = 1024;
      v23 = 119;
      v24 = 2080;
      v25 = &v18;
      v26 = 2080;
      v27 = &v16;
      v28 = 2048;
      v29 = mElement;
      v30 = 1024;
      v31 = v14;
      v32 = 2080;
      v33 = v15;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_AHPPlugIn::ObjectGetPropertyData: got an error from the plug-in routine [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v14;
  }
  return result;
}

uint64_t HALS_AHPPlugIn::ObjectSetPropertyData(HALS_AHPPlugIn *this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, uint64_t a6, const void *a7)
{
  uint64_t result;
  uint8x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  uint64_t mElement;
  _DWORD *exception;
  int v14;
  _BYTE v15[5];
  unsigned __int32 v16;
  char v17;
  __int32 v18;
  char v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  __int32 *v25;
  __int16 v26;
  unsigned __int32 *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  __int16 v32;
  _BYTE *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(HALS_AHPPlugIn *, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, const void *))(*(_QWORD *)this + 216))(this, a2, a3, a4, a5, a6, a7);
  if ((_DWORD)result)
  {
    v9.i32[0] = a3->mSelector;
    v10 = (int16x8_t)vmovl_u8(v9);
    *(int16x4_t *)v10.i8 = vrev64_s16(*(int16x4_t *)v10.i8);
    *(int8x8_t *)v10.i8 = vmovn_s16(v10);
    v18 = v10.i32[0];
    v19 = 0;
    v10.i32[0] = a3->mScope;
    v11 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v10.i8);
    *(int16x4_t *)v11.i8 = vrev64_s16(*(int16x4_t *)v11.i8);
    v16 = vmovn_s16(v11).u32[0];
    v17 = 0;
    v15[0] = BYTE3(result);
    v15[1] = BYTE2(result);
    v15[2] = BYTE1(result);
    v14 = result;
    v15[3] = result;
    v15[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      mElement = a3->mElement;
      *(_DWORD *)buf = 136316674;
      v21 = "HALS_AHPPlugIn.cpp";
      v22 = 1024;
      v23 = 126;
      v24 = 2080;
      v25 = &v18;
      v26 = 2080;
      v27 = &v16;
      v28 = 2048;
      v29 = mElement;
      v30 = 1024;
      v31 = v14;
      v32 = 2080;
      v33 = v15;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_AHPPlugIn::ObjectSetPropertyData: got an error from the plug-in routine [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = v14;
  }
  return result;
}

std::thread *std::unique_ptr<std::thread>::reset[abi:ne180100](std::thread **a1, std::thread *a2)
{
  std::thread *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::thread::~thread(result);
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

_QWORD *std::__function::__func<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0>,void ()(unsigned long long)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6995040;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0>,void ()(unsigned long long)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E6995040;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0>,void ()(unsigned long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E6995040;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0>,void ()(unsigned long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E6995040;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0>,void ()(unsigned long long)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0>,void ()(unsigned long long)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0>,void ()(unsigned long long)>::operator()(uint64_t a1, uint64_t *a2)
{
  AMCP::IO_Core::Thread_Control_State::sleep_until_time(*(AMCP::IO_Core::Thread_Control_State **)(a1 + 8), *a2);
}

uint64_t std::__function::__func<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0>,void ()(unsigned long long)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core9IO_ThreadC1ENSt3__110shared_ptrINS_5Graph14Manifest_QueueEEENS_11Power_StateEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::IO_Thread(std::shared_ptr<AMCP::Graph::Manifest_Queue>,AMCP::Power_State)::$_0>,void ()(unsigned long long)>::target_type()
{
}

void std::__shared_ptr_emplace<AMCP::IO_Core::Thread_Control_State>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6994FF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::IO_Core::Thread_Control_State>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6994FF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E5067CLL);
}

void std::__shared_ptr_emplace<AMCP::IO_Core::Thread_Control_State>::__on_zero_shared(uint64_t a1)
{
  AMCP::Utility::Kernel_Error_Category *v2;
  unsigned int v3;
  AMCP::Log::Scope_Registry *v4;
  AMCP::Utility::Kernel_Error_Category *v5;
  unsigned int v6;
  AMCP::Log::Scope_Registry *v7;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  uint64_t v14;
  std::runtime_error *exception;
  int v16;
  const char *v17;
  std::__shared_weak_count *v18;
  NSObject *v19;
  unint64_t *v20;
  unint64_t v21;
  _opaque_pthread_t *v22;
  mach_port_t v23;
  uint64_t v24;
  int v25;
  std::runtime_error v26;
  __int128 v27;
  uint64_t v28;
  uint64_t (**v29)();
  __int128 v30;
  uint64_t v31;
  std::runtime_error v32;
  __int128 v33;
  std::runtime_error v34;
  __int128 v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  uint8_t buf[8];
  _BYTE v43[26];
  const char *v44;
  std::runtime_error v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v2 = (AMCP::Utility::Kernel_Error_Category *)pthread_cond_destroy((pthread_cond_t *)(a1 + 256));
  v3 = v2;
  AMCP::Utility::Kernel_Error_Category::get(v2);
  if (v3)
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v8 = *(std::__shared_weak_count **)v43;
    v9 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v10 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v13;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Thread_Control_State.cpp";
      *(_WORD *)&v43[10] = 1024;
      *(_DWORD *)&v43[12] = 36;
      *(_WORD *)&v43[16] = 2080;
      *(_QWORD *)&v43[18] = "kernel_error.operator BOOL()";
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to set the destroy the condition variable", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    v14 = v3;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x50uLL);
    MEMORY[0x1B5E50220](&v32, v14, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
    std::runtime_error::runtime_error(&v34, &v32);
    v35 = v33;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v34.__vftable = (std::runtime_error_vtbl *)&off_1E69A12F8;
    v36 = &unk_1E69A1320;
    v37 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
    v45.__vftable = (std::runtime_error_vtbl *)"AMCP::IO_Core::Thread_Control_State::~Thread_Control_State()";
    v45.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Thread_Control_State.cpp";
    v46 = 36;
    std::vector<void *>::vector(&v27);
    v16 = backtrace((void **)v27, (*((_QWORD *)&v27 + 1) - (_QWORD)v27) >> 3);
    std::vector<void *>::resize((char **)&v27, v16);
    v29 = off_1E69A20A0;
    v30 = v27;
    v31 = v28;
    v27 = 0uLL;
    v28 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>((uint64_t)buf, (uint64_t)&v29);
    exception[4].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
    exception[1] = *(std::runtime_error *)&v43[8];
    exception[2].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v17 = v44;
    exception[2].__imp_.__imp_ = v44;
    if (v17)
      goto LABEL_21;
    goto LABEL_22;
  }
  v5 = (AMCP::Utility::Kernel_Error_Category *)pthread_mutex_destroy((pthread_mutex_t *)(a1 + 304));
  v6 = v5;
  AMCP::Utility::Kernel_Error_Category::get(v5);
  if (v6)
  {
    AMCP::Log::Scope_Registry::get(v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v18 = *(std::__shared_weak_count **)v43;
    v19 = **(NSObject ***)buf;
    if (*(_QWORD *)v43)
    {
      v20 = (unint64_t *)(*(_QWORD *)v43 + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v22 = pthread_self();
      v23 = pthread_mach_thread_np(v22);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v23;
      *(_WORD *)v43 = 2080;
      *(_QWORD *)&v43[2] = "Thread_Control_State.cpp";
      *(_WORD *)&v43[10] = 1024;
      *(_DWORD *)&v43[12] = 39;
      *(_WORD *)&v43[16] = 2080;
      *(_QWORD *)&v43[18] = "kernel_error.operator BOOL()";
      _os_log_error_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to set the destroy the mutex", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    v24 = v6;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x50uLL);
    MEMORY[0x1B5E50220](&v32, v24, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
    std::runtime_error::runtime_error(&v34, &v32);
    v35 = v33;
    v38 = 0;
    v39 = 0;
    v40 = -1;
    v34.__vftable = (std::runtime_error_vtbl *)&off_1E69A12F8;
    v36 = &unk_1E69A1320;
    v37 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
    v45.__vftable = (std::runtime_error_vtbl *)"AMCP::IO_Core::Thread_Control_State::~Thread_Control_State()";
    v45.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Thread_Control_State.cpp";
    v46 = 39;
    std::vector<void *>::vector(&v27);
    v25 = backtrace((void **)v27, (*((_QWORD *)&v27 + 1) - (_QWORD)v27) >> 3);
    std::vector<void *>::resize((char **)&v27, v25);
    v29 = off_1E69A20A0;
    v30 = v27;
    v31 = v28;
    v27 = 0uLL;
    v28 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>((uint64_t)buf, (uint64_t)&v29);
    exception[4].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
    exception[1] = *(std::runtime_error *)&v43[8];
    exception[2].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v17 = v44;
    exception[2].__imp_.__imp_ = v44;
    if (v17)
LABEL_21:
      (*(void (**)(const char *))(*(_QWORD *)v17 + 24))(v17);
LABEL_22:
    v26 = v45;
    LODWORD(exception[4].__vftable) = v46;
    exception[3] = v26;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1258;
    exception[2].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1290;
    exception[4].__imp_.__imp_ = (const char *)&unk_1E69A12C8;
  }
}

void sub_1B5BC48E4(_Unwind_Exception *exception_object, int a2)
{
  std::runtime_error *v2;

  if (a2)
  {
    std::runtime_error::~runtime_error(v2);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<AMCP::IO_Core::Thread_Control_State>::__on_zero_shared_weak()
{
  JUMPOUT(0x1B5E5067CLL);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_1>>(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v1;
  const void *v2;
  AMCP::Log::Scope_Registry *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  char v15;
  pthread_cond_t *v16;
  char v17;
  AMCP::Utility::Kernel_Error_Category *v18;
  unsigned int v19;
  AMCP::Log::Scope_Registry *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v28;
  _opaque_pthread_t *v29;
  mach_port_t v30;
  void *exception;
  NSObject *v32;
  _opaque_pthread_t *v33;
  mach_port_t v34;
  void *v35;
  uint64_t v36;
  uint64_t *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int16 v42;
  char v43;
  std::logic_error v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  std::string v48;
  uint64_t v49;
  uint64_t (**v50)();
  _BYTE v51[24];
  std::logic_error v52;
  __int128 v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint8_t buf[8];
  _BYTE v60[10];
  __int16 v61;
  int v62;
  __int16 v63;
  _BYTE v64[14];
  const char *v65;
  const char *v66;
  const char *v67;
  int v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v37 = a1;
  v1 = std::__thread_local_data();
  v2 = (const void *)*v37;
  *v37 = 0;
  v3 = (AMCP::Log::Scope_Registry *)pthread_setspecific(v1->__key_, v2);
  v4 = (uint64_t *)v37[1];
  v6 = *v4;
  v5 = v4[1];
  *(_QWORD *)&v39 = v6;
  *((_QWORD *)&v39 + 1) = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (uint64_t *)v37[2];
  v11 = *v9;
  v10 = v9[1];
  *(_QWORD *)&v38 = v11;
  *((_QWORD *)&v38 + 1) = v10;
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = v39;
  v39 = 0uLL;
  v40 = v14;
  v41 = v38;
  v38 = 0uLL;
  v15 = *((_BYTE *)v37 + 26);
  v42 = *((_WORD *)v37 + 12);
  v43 = v15;
  if (!(_QWORD)v14)
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v28 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v29 = pthread_self();
      v30 = pthread_mach_thread_np(v29);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v30;
      *(_WORD *)v60 = 2080;
      *(_QWORD *)&v60[2] = "IO_Thread_Realtime.h";
      v61 = 1024;
      v62 = 40;
      v63 = 2080;
      *(_QWORD *)v64 = "not ((m_manifest_queue) != nullptr)";
      _os_log_error_impl(&dword_1B57BA000, v28, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v45);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v48);
    std::logic_error::logic_error(&v44, &v48);
    v44.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v52, &v44);
    *((_QWORD *)&v53 + 1) = 0;
    v54 = 0;
    v55 = 0;
    LODWORD(v56) = -1;
    v52.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    *(_QWORD *)&v53 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v52);
    *(_QWORD *)&v64[6] = "AMCP::IO_Core::IO_Thread_Realtime::IO_Thread_Realtime(std::shared_ptr<Graph::Manifest_Queue>, T"
                         "hread_Control, const IOThread_Realtime_Power_Settings &)";
    v65 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IO_Thread_Realtime.h";
    LODWORD(v66) = 40;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v46);
    *(_OWORD *)v51 = v46;
    v50 = off_1E69A20A0;
    *(_QWORD *)&v51[16] = v47;
    v46 = 0uLL;
    v47 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v50);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  if (AMCP::IO_Core::IO_Thread_Realtime::run((int **)&v40) == 1)
  {
    v16 = *(pthread_cond_t **)v37[2];
    *(_DWORD *)buf = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)v16);
    *(_WORD *)&buf[4] = 0;
    *(_DWORD *)v60 = 4;
    caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)v16);
    v60[4] = v17 & 1;
    caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::store((uint64_t)v16, buf);
    v18 = (AMCP::Utility::Kernel_Error_Category *)pthread_cond_broadcast(v16 + 4);
    v19 = v18;
    AMCP::Utility::Kernel_Error_Category::get(v18);
    if (v19)
    {
      AMCP::Log::Scope_Registry::get(v20);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v32 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        v33 = pthread_self();
        v34 = pthread_mach_thread_np(v33);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v34;
        *(_WORD *)v60 = 2080;
        *(_QWORD *)&v60[2] = "Thread_Control_State.cpp";
        v61 = 1024;
        v62 = 123;
        v63 = 2080;
        *(_QWORD *)v64 = "kernel_error.operator BOOL()";
        _os_log_error_impl(&dword_1B57BA000, v32, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to set the signaling the condition variable", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v44);
      v35 = __cxa_allocate_exception(0x50uLL);
      MEMORY[0x1B5E50220](&v50, v19, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
      std::runtime_error::runtime_error((std::runtime_error *)&v52, (const std::runtime_error *)&v50);
      v53 = *(_OWORD *)&v51[8];
      v56 = 0;
      v57 = 0;
      v58 = -1;
      v52.__vftable = (std::logic_error_vtbl *)&off_1E69A12F8;
      v54 = &unk_1E69A1320;
      v55 = 0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&v52);
      v66 = "void AMCP::IO_Core::Thread_Control_State::devices_failed_to_start()";
      v67 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Thread_Control_State.cpp";
      v68 = 123;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v46);
      *(_OWORD *)&v48.__r_.__value_.__r.__words[1] = v46;
      v36 = v47;
      v47 = 0;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E69A20A0;
      v49 = v36;
      v46 = 0uLL;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>((uint64_t)buf, (uint64_t)&v48);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)v35, (uint64_t)buf);
    }
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_1>>::~unique_ptr[abi:ne180100](&v37);
  return 0;
}

void sub_1B5BC4E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, __int16 a11, char a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,uint64_t a30,void *a31,void *__p,int a33,__int16 a34,char a35,char a36,uint64_t a37,std::runtime_error a38,uint64_t a39,uint64_t a40,std::runtime_error a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v45);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_1>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_1>>::~unique_ptr[abi:ne180100](uint64_t **a1)
{
  uint64_t *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v2);
    MEMORY[0x1B5E50688](v2, 0x1020C40AEE4956FLL);
  }
  return a1;
}

_QWORD *std::__function::__func<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69950D0;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E69950D0;
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E69950D0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E69950D0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  pthread_cond_t *v1;
  char v2;
  AMCP::Utility::Kernel_Error_Category *v3;
  unsigned int v4;
  AMCP::Log::Scope_Registry *v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  unint64_t *v8;
  unint64_t v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  uint64_t v12;
  std::runtime_error *exception;
  int v14;
  const char *v15;
  std::runtime_error v16;
  __int128 v17;
  uint64_t v18;
  uint64_t (**v19)();
  __int128 v20;
  uint64_t v21;
  std::runtime_error v22;
  __int128 v23;
  std::runtime_error v24;
  __int128 v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  uint8_t buf[8];
  _BYTE v33[26];
  const char *v34;
  std::runtime_error v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v1 = *(pthread_cond_t **)(a1 + 8);
  *(_DWORD *)buf = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)v1);
  *(_WORD *)&buf[4] = 1;
  *(_DWORD *)v33 = 4;
  caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)v1);
  v33[4] = v2 & 1;
  caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::store((uint64_t)v1, buf);
  v3 = (AMCP::Utility::Kernel_Error_Category *)pthread_cond_broadcast(v1 + 4);
  v4 = v3;
  AMCP::Utility::Kernel_Error_Category::get(v3);
  if (v4)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = *(std::__shared_weak_count **)v33;
    v7 = **(NSObject ***)buf;
    if (*(_QWORD *)v33)
    {
      v8 = (unint64_t *)(*(_QWORD *)v33 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v10 = pthread_self();
      v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v11;
      *(_WORD *)v33 = 2080;
      *(_QWORD *)&v33[2] = "Thread_Control_State.cpp";
      *(_WORD *)&v33[10] = 1024;
      *(_DWORD *)&v33[12] = 112;
      *(_WORD *)&v33[16] = 2080;
      *(_QWORD *)&v33[18] = "kernel_error.operator BOOL()";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to set the signaling the condition variable", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v31);
    v12 = v4;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x50uLL);
    MEMORY[0x1B5E50220](&v22, v12, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
    std::runtime_error::runtime_error(&v24, &v22);
    v25 = v23;
    v28 = 0;
    v29 = 0;
    v30 = -1;
    v24.__vftable = (std::runtime_error_vtbl *)&off_1E69A12F8;
    v26 = &unk_1E69A1320;
    v27 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    v35.__vftable = (std::runtime_error_vtbl *)"void AMCP::IO_Core::Thread_Control_State::devices_have_started()";
    v35.__imp_.__imp_ = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Thread_Control_State.cpp";
    v36 = 112;
    std::vector<void *>::vector(&v17);
    v14 = backtrace((void **)v17, (*((_QWORD *)&v17 + 1) - (_QWORD)v17) >> 3);
    std::vector<void *>::resize((char **)&v17, v14);
    v19 = off_1E69A20A0;
    v20 = v17;
    v21 = v18;
    v17 = 0uLL;
    v18 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>((uint64_t)buf, (uint64_t)&v19);
    exception[4].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
    std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
    exception->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
    exception[1] = *(std::runtime_error *)&v33[8];
    exception[2].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
    v15 = v34;
    exception[2].__imp_.__imp_ = v34;
    if (v15)
      (*(void (**)(const char *))(*(_QWORD *)v15 + 24))(v15);
    v16 = v35;
    LODWORD(exception[4].__vftable) = v36;
    exception[3] = v16;
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1258;
    exception[2].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1290;
    exception[4].__imp_.__imp_ = (const char *)&unk_1E69A12C8;
  }
}

void sub_1B5BC54AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, uint64_t a18, uint64_t a19, std::runtime_error a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  std::runtime_error *v24;
  uint64_t v25;
  uint64_t v27;

  std::runtime_error::~runtime_error(v24);
  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v25 - 96) = &unk_1E69A2000;
  v27 = *(_QWORD *)(v25 - 88);
  if (v27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27))
    *(_QWORD *)(v25 - 88) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(v25 - 128));
  a23 = &unk_1E69A2000;
  if (a24)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a24 + 32))(a24))
      a24 = 0;
  }
  std::runtime_error::~runtime_error(&a20);
  std::runtime_error::~runtime_error(&a17);
  __cxa_free_exception(v24);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core9IO_Thread5startENS0_18Play_State_Manager12Play_RequestEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IO_Thread::start(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::target_type()
{
}

unint64_t AMCP::IO_Core::IO_Thread::wait_for_start(AMCP::IO_Core::IO_Thread *this)
{
  uint64_t v2;

  if ((caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)this) & 0x100000000) == 0)
  {
    v2 = mach_absolute_time();
    AMCP::IO_Core::Thread_Control_State::sleep_until_time(this, v2 + 360000000);
  }
  return ((unint64_t)caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)this) >> 32) & 1;
}

void AMCP::IO_Core::IO_Thread::get_state_snapshot(AMCP::IO_Core::Play_State_Manager *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;

  AMCP::IO_Core::Play_State_Manager::get_state_snapshot(a1, (unint64_t *)(a2 + 16));
  if ((a3 & 0xFF00000000) != 0)
  {
    v6 = (_DWORD *)*((_QWORD *)a1 + 1);
    v5 = *((_QWORD *)a1 + 2);
    if ((unint64_t)v6 >= v5)
    {
      v8 = *(_DWORD **)a1;
      v9 = ((uint64_t)v6 - *(_QWORD *)a1) >> 2;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 62)
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      v11 = v5 - (_QWORD)v8;
      if (v11 >> 1 > v10)
        v10 = v11 >> 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
        v12 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
        v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v12);
      else
        v13 = 0;
      v14 = (_DWORD *)(v12 + 4 * v9);
      *v14 = a3;
      v7 = v14 + 1;
      while (v6 != v8)
      {
        v15 = *--v6;
        *--v14 = v15;
      }
      *(_QWORD *)a1 = v14;
      *((_QWORD *)a1 + 1) = v7;
      *((_QWORD *)a1 + 2) = v12 + 4 * v13;
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v6 = a3;
      v7 = v6 + 1;
    }
    *((_QWORD *)a1 + 1) = v7;
  }
}

void sub_1B5BC5710(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Driver::~Driver(AMCP::Driver *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

AMCP::Driver *AMCP::Driver::Driver(AMCP::Driver *this, AMCP::System_Context *a2, unsigned int a3)
{
  AMCP::Object *v4;
  uint64_t v5;
  NSObject *v7;
  _opaque_pthread_t *v8;
  mach_port_t v9;
  NSObject **v10;
  __int16 v11;
  char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = (AMCP::Object *)AMCP::Object::Object((uint64_t)this, (uint64_t)a2, a3);
  *(_QWORD *)v4 = &off_1E6995150;
  v5 = AMCP::Object::constructed_correct_class(v4, (AMCP *)0x61706C67);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    v7 = *v10;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v10);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = pthread_self();
      v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      v11 = 2080;
      v12 = "Driver.cpp";
      v13 = 1024;
      v14 = 26;
      v15 = 2080;
      v16 = "constructed_correct_class(k_class_id_driver)";
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return this;
}

void sub_1B5BC58D4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  *v1 = &off_1E696F358;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Driver::Driver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_mutex_base *v5;
  uint64_t v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v17;
  _opaque_pthread_t *v18;
  mach_port_t v19;
  _QWORD v20[2];
  uint8_t buf[8];
  _BYTE v22[10];
  __int16 v23;
  int v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  v5 = *(std::__shared_mutex_base **)(**(_QWORD **)a2 + 16);
  *(_QWORD *)buf = &off_1E6995170;
  *(_QWORD *)v22 = a3;
  v25[0] = buf;
  AMCP::Core::Broker::fetch_first_core_if (v20, v5, (uint64_t)buf);
  *(_QWORD *)a1 = &off_1E696F358;
  v6 = v20[0];
  if (v20[0])
    v7 = *(_DWORD *)v20[0];
  else
    v7 = 0;
  *(_DWORD *)(a1 + 8) = v7;
  v8 = (std::__shared_weak_count *)v20[1];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v8;
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 32) = a2;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = a2;
  }
  v13 = (uint8_t *)v25[0];
  if ((uint8_t *)v25[0] == buf)
  {
    v14 = 4;
    v13 = buf;
  }
  else
  {
    if (!v25[0])
      goto LABEL_17;
    v14 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_17:
  *(_QWORD *)a1 = &off_1E6995150;
  v15 = AMCP::Object::constructed_correct_class((AMCP::Object *)a1, (AMCP *)0x61706C67);
  if ((v15 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v15);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v17 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = pthread_self();
      v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v19;
      *(_WORD *)v22 = 2080;
      *(_QWORD *)&v22[2] = "Driver.cpp";
      v23 = 1024;
      v24 = 42;
      LOWORD(v25[0]) = 2080;
      *(_QWORD *)((char *)v25 + 2) = "constructed_correct_class(k_class_id_driver)";
      _os_log_error_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", buf, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1B5BC5B10(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  *v1 = v2;
  v4 = (std::__shared_weak_count *)v1[3];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::Driver::Driver(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Driver::Driver(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::Driver::Driver(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Driver::Driver(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6995170;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::Driver::Driver(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Driver::Driver(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6995170;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<AMCP::Driver::Driver(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Driver::Driver(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  unsigned int simple_required;
  _BOOL8 v5;
  CFTypeRef cf;

  simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
  if (!AMCP::is_base_of((AMCP *)0x61706C67, simple_required))
    return 0;
  AMCP::Core::Core::get_simple_required_property<1885956452u>(&cf, *a2);
  v5 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(**(const __CFString ***)(a1 + 8), (const __CFString **)&cf) == kCFCompareEqualTo;
  if (cf)
    CFRelease(cf);
  return v5;
}

uint64_t std::__function::__func<AMCP::Driver::Driver(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Driver::Driver(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN4AMCP6DriverC1ERNS_14System_ContextEN10applesauce2CF9StringRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Driver::Driver(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Driver::Driver(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

uint64_t AMCP::Core::Core::get_simple_required_property<1885956452u>(_QWORD *a1, AMCP::Core::Core *a2)
{
  AMCP::Log::Scope_Registry *v3;
  CFTypeRef v4;
  NSObject *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  void *__p[2];
  char v10;
  CFTypeRef cf;
  char v12;
  _BYTE buf[10];
  char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  void **v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  strcpy(buf, "diipbolg");
  buf[9] = 0;
  LOWORD(v14) = 0;
  AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(&cf, a2, (const AMCP::Address *)buf);
  if (!v12)
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = pthread_self();
      v8 = pthread_mach_thread_np(v7);
      v10 = 4;
      strcpy((char *)__p, "piid");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v8;
      *(_WORD *)&buf[8] = 2080;
      v14 = "Core.h";
      v15 = 1024;
      v16 = 391;
      v17 = 2080;
      v18 = "optional_value.operator BOOL() == true";
      v19 = 2080;
      v20 = __p;
      v21 = 1024;
      v22 = 1735159650;
      v23 = 1024;
      v24 = 0;
      _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v10 < 0)
        operator delete(__p[0]);
    }
    abort();
  }
  v4 = cf;
  if (cf)
    CFRetain(cf);
  *a1 = v4;
  return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

void sub_1B5BC5DF0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void AMCP::Driver::get_bundle_id(AMCP::Driver *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
      AMCP::Core::Core::get_simple_required_property<1885956452u>(a2, v7);
    else
      *a2 = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
  }
}

void AMCP::Driver::get_device_list(AMCP::Driver *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
    {
      AMCP::Core::Core::get_simple_required_property<1684370979u>(a2, v7);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void AMCP::Driver::get_clock_list(AMCP::Driver *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
    {
      AMCP::Core::Core::get_simple_required_property<1668049699u>(a2, v7);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void AMCP::Core::Core::get_simple_required_property<1668049699u>(_QWORD *a1, AMCP::Core::Core *a2)
{
  AMCP::Log::Scope_Registry *v3;
  void *v4;
  NSObject *v5;
  _opaque_pthread_t *v6;
  mach_port_t v7;
  void *__p[2];
  char v9;
  void *v10;
  uint64_t v11;
  char v12;
  _BYTE buf[10];
  char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  void **v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  strcpy(buf, "#klcbolg");
  buf[9] = 0;
  LOWORD(v14) = 0;
  AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>((uint64_t)&v10, a2, (AMCP::Address *)buf);
  if (!v12)
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v5 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = pthread_self();
      v7 = pthread_mach_thread_np(v6);
      v9 = 4;
      strcpy((char *)__p, "clk#");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v7;
      *(_WORD *)&buf[8] = 2080;
      v14 = "Core.h";
      v15 = 1024;
      v16 = 391;
      v17 = 2080;
      v18 = "optional_value.operator BOOL() == true";
      v19 = 2080;
      v20 = __p;
      v21 = 1024;
      v22 = 1735159650;
      v23 = 1024;
      v24 = 0;
      _os_log_error_impl(&dword_1B57BA000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v9 < 0)
        operator delete(__p[0]);
    }
    abort();
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = v10;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1, v10, v11, (v11 - (uint64_t)v10) >> 2);
  if (v4)
    operator delete(v4);
}

void sub_1B5BC61D8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMCP::Driver::get_box_list(AMCP::Driver *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
    {
      AMCP::Core::Core::get_simple_required_property<1651472419u>(a2, v7);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void AMCP::Core::Core::get_simple_required_property<1651472419u>(_QWORD *a1, AMCP::Core::Core *a2)
{
  AMCP::Log::Scope_Registry *v3;
  void *v4;
  NSObject *v5;
  _opaque_pthread_t *v6;
  mach_port_t v7;
  void *__p[2];
  char v9;
  void *v10;
  uint64_t v11;
  char v12;
  _BYTE buf[10];
  char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  void **v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  strcpy(buf, "#xobbolg");
  buf[9] = 0;
  LOWORD(v14) = 0;
  AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>((uint64_t)&v10, a2, (AMCP::Address *)buf);
  if (!v12)
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v5 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = pthread_self();
      v7 = pthread_mach_thread_np(v6);
      v9 = 4;
      strcpy((char *)__p, "box#");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v7;
      *(_WORD *)&buf[8] = 2080;
      v14 = "Core.h";
      v15 = 1024;
      v16 = 391;
      v17 = 2080;
      v18 = "optional_value.operator BOOL() == true";
      v19 = 2080;
      v20 = __p;
      v21 = 1024;
      v22 = 1735159650;
      v23 = 1024;
      v24 = 0;
      _os_log_error_impl(&dword_1B57BA000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v9 < 0)
        operator delete(__p[0]);
    }
    abort();
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = v10;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1, v10, v11, (v11 - (uint64_t)v10) >> 2);
  if (v4)
    operator delete(v4);
}

void sub_1B5BC6448(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMCP::System::~System(AMCP::System *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1B5E50688);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E696F358;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

AMCP::System *AMCP::System::System(AMCP::System *this, AMCP::System_Context *a2)
{
  AMCP::Object *v3;
  uint64_t v4;
  NSObject *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  NSObject **v9;
  __int16 v10;
  char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = (AMCP::Object *)AMCP::Object::Object((uint64_t)this, (uint64_t)a2, 1u);
  *(_QWORD *)v3 = &off_1E69951F0;
  v4 = AMCP::Object::constructed_correct_class(v3, (AMCP *)0x61737973);
  if ((v4 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
    v6 = *v9;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&v9);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = pthread_self();
      v8 = pthread_mach_thread_np(v7);
      LODWORD(v9) = 67109890;
      HIDWORD(v9) = v8;
      v10 = 2080;
      v11 = "System.cpp";
      v12 = 1024;
      v13 = 34;
      v14 = 2080;
      v15 = "constructed_correct_class(k_class_id_system)";
      _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v9, 0x22u);
    }
    abort();
  }
  return this;
}

void sub_1B5BC6600(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  *v1 = &off_1E696F358;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void AMCP::System::get_device_list(AMCP::System *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
    {
      AMCP::Core::Core::get_simple_required_property<1684370979u>(a2, v7);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void AMCP::System::get_clock_list(AMCP::System *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
    {
      AMCP::Core::Core::get_simple_required_property<1668049699u>(a2, v7);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void AMCP::System::get_box_list(AMCP::System *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
    {
      AMCP::Core::Core::get_simple_required_property<1651472419u>(a2, v7);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void AMCP::System::get_driver_list(AMCP::System *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  AMCP::Log::Scope_Registry *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *__p[2];
  char v16;
  void *v17;
  uint64_t v18;
  char v19;
  _BYTE buf[10];
  char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  void **v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
    {
      strcpy(buf, "#glpbolg");
      buf[9] = 0;
      LOWORD(v21) = 0;
      AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>((uint64_t)&v17, v7, (AMCP::Address *)buf);
      if (!v19)
      {
        AMCP::Log::Scope_Registry::get(v8);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v12 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          v13 = pthread_self();
          v14 = pthread_mach_thread_np(v13);
          v16 = 4;
          strcpy((char *)__p, "plg#");
          *(_DWORD *)buf = 67110658;
          *(_DWORD *)&buf[4] = v14;
          *(_WORD *)&buf[8] = 2080;
          v21 = "Core.h";
          v22 = 1024;
          v23 = 391;
          v24 = 2080;
          v25 = "optional_value.operator BOOL() == true";
          v26 = 2080;
          v27 = __p;
          v28 = 1024;
          v29 = 1735159650;
          v30 = 1024;
          v31 = 0;
          _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v16 < 0)
            operator delete(__p[0]);
        }
        abort();
      }
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v9 = v17;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2, v17, v18, (v18 - (uint64_t)v17) >> 2);
      if (v9)
        operator delete(v9);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_1B5BC6A7C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMCP::System::get_io_context_list(AMCP::System *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  AMCP::Log::Scope_Registry *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *__p[2];
  char v16;
  void *v17;
  uint64_t v18;
  char v19;
  _BYTE buf[10];
  char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  void **v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
    {
      strcpy(buf, "#xtcbolg");
      buf[9] = 0;
      LOWORD(v21) = 0;
      AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>((uint64_t)&v17, v7, (AMCP::Address *)buf);
      if (!v19)
      {
        AMCP::Log::Scope_Registry::get(v8);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v12 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          v13 = pthread_self();
          v14 = pthread_mach_thread_np(v13);
          v16 = 4;
          strcpy((char *)__p, "ctx#");
          *(_DWORD *)buf = 67110658;
          *(_DWORD *)&buf[4] = v14;
          *(_WORD *)&buf[8] = 2080;
          v21 = "Core.h";
          v22 = 1024;
          v23 = 391;
          v24 = 2080;
          v25 = "optional_value.operator BOOL() == true";
          v26 = 2080;
          v27 = __p;
          v28 = 1024;
          v29 = 1735159650;
          v30 = 1024;
          v31 = 0;
          _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v16 < 0)
            operator delete(__p[0]);
        }
        abort();
      }
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v9 = v17;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2, v17, v18, (v18 - (uint64_t)v17) >> 2);
      if (v9)
        operator delete(v9);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_1B5BC6CC0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMCP::System::get_node_list(AMCP::System *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  AMCP::Core::Core *v7;
  AMCP::Log::Scope_Registry *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  _opaque_pthread_t *v13;
  mach_port_t v14;
  void *__p[2];
  char v16;
  void *v17;
  uint64_t v18;
  char v19;
  _BYTE buf[10];
  char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  void **v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = (AMCP::Core::Core *)*((_QWORD *)this + 2);
    if (v7)
    {
      strcpy(buf, "#donbolg");
      buf[9] = 0;
      LOWORD(v21) = 0;
      AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>((uint64_t)&v17, v7, (AMCP::Address *)buf);
      if (!v19)
      {
        AMCP::Log::Scope_Registry::get(v8);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v12 = **(NSObject ***)buf;
        std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          v13 = pthread_self();
          v14 = pthread_mach_thread_np(v13);
          v16 = 4;
          strcpy((char *)__p, "nod#");
          *(_DWORD *)buf = 67110658;
          *(_DWORD *)&buf[4] = v14;
          *(_WORD *)&buf[8] = 2080;
          v21 = "Core.h";
          v22 = 1024;
          v23 = 391;
          v24 = 2080;
          v25 = "optional_value.operator BOOL() == true";
          v26 = 2080;
          v27 = __p;
          v28 = 1024;
          v29 = 1735159650;
          v30 = 1024;
          v31 = 0;
          _os_log_error_impl(&dword_1B57BA000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v16 < 0)
            operator delete(__p[0]);
        }
        abort();
      }
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v9 = v17;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2, v17, v18, (v18 - (uint64_t)v17) >> 2);
      if (v9)
        operator delete(v9);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_1B5BC6F04(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMCP::System::modify_graph(AMCP::System *this, const AMCP::Graph_Description *a2, const AMCP::Modify_Graph_Destroy_List *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  int8x8_t *v8;
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v10;
  uint64_t v11;
  std::string::size_type v12;
  unint64_t v13;
  AMCP::Log::Scope_Registry *v14;
  AMCP::Log::Scope_Registry *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  _opaque_pthread_t *v28;
  mach_port_t v29;
  void *v30;
  std::__shared_weak_count *v31;
  NSObject *v32;
  unint64_t *v33;
  unint64_t v34;
  _opaque_pthread_t *v35;
  mach_port_t v36;
  void *exception;
  std::__shared_weak_count *v38;
  NSObject *v39;
  unint64_t *v40;
  unint64_t v41;
  _opaque_pthread_t *v42;
  mach_port_t v43;
  void *v44;
  std::__shared_weak_count *v45;
  NSObject *v46;
  unint64_t *v47;
  unint64_t v48;
  _opaque_pthread_t *v49;
  mach_port_t v50;
  void *v51;
  std::string v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  const char *v58;
  uint64_t v59;
  int v60;
  std::string v61;
  __int128 v62;
  uint64_t v63;
  _BYTE v64[24];
  __int128 v65;
  const char *v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  __int128 v69;
  uint64_t v70;
  _BYTE v71[24];
  uint64_t v72;
  std::string v73;
  std::runtime_error v74;
  std::runtime_error v75;
  void *v76;
  __int128 v77;
  uint64_t v78;
  int v79;
  char v80;
  _BYTE buf[24];
  __int128 v82;
  const char *v83;
  int v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v4
    || (v4 = std::__shared_weak_count::lock(v4), (v7 = v4) == 0)
    || (v8 = (int8x8_t *)*((_QWORD *)this + 2)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v31 = *(std::__shared_weak_count **)&buf[8];
    v32 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v33 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      v35 = pthread_self();
      v36 = pthread_mach_thread_np(v35);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v36;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "System.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 102;
      LOWORD(v82) = 2080;
      *(_QWORD *)((char *)&v82 + 2) = "!core_ptr";
      _os_log_error_impl(&dword_1B57BA000, v32, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v73);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error((std::runtime_error *)v71, "No underlying object");
    std::runtime_error::runtime_error(&v75, (const std::runtime_error *)v71);
    v77 = 0uLL;
    v78 = 0;
    v79 = -1;
    v75.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v76 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v75);
    *((_QWORD *)&v82 + 1) = "Modify_Graph_Result AMCP::System::modify_graph(const Graph_Description &, const Modify_Graph"
                            "_Destroy_List &)";
    v83 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/System.cpp";
    v84 = 102;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v61.__r_.__value_.__l.__data_);
    *(_OWORD *)&v64[8] = *(_OWORD *)&v61.__r_.__value_.__l.__data_;
    *(_QWORD *)v64 = off_1E69A20A0;
    *(_QWORD *)&v65 = *((_QWORD *)&v61.__r_.__value_.__l + 2);
    memset(&v61, 0, sizeof(v61));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)v64);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v59 = 0x676C6F626D646772;
  v60 = 0;
  v56 = 0;
  v55 = 0uLL;
  std::vector<AMCP::Node_Description>::__init_with_size[abi:ne180100]<AMCP::Node_Description*,AMCP::Node_Description*>(&v55, *(_QWORD *)a2, *((_QWORD *)a2 + 1), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3));
  v57 = 0uLL;
  v58 = 0;
  std::vector<AMCP::Wire_Description>::__init_with_size[abi:ne180100]<AMCP::Wire_Description*,AMCP::Wire_Description*>(&v57, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 6));
  memset(&v52, 0, sizeof(v52));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v52, *(__int128 **)a3, *((__int128 **)a3 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a3 + 1) - *(_QWORD *)a3) >> 3));
  v53 = 0uLL;
  v54 = 0;
  std::vector<AMCP::Wire_Identifier>::__init_with_size[abi:ne180100]<AMCP::Wire_Identifier*,AMCP::Wire_Identifier*>(&v53, *((_QWORD *)a3 + 3), *((_QWORD *)a3 + 4), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a3 + 4) - *((_QWORD *)a3 + 3)) >> 4));
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v67, v8, (unsigned int *)&v59);
  v10 = v67;
  if (!v67)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v38 = *(std::__shared_weak_count **)&buf[8];
    v39 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v40 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      v42 = pthread_self();
      v43 = pthread_mach_thread_np(v42);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v43;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Core.h";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 202;
      _os_log_error_impl(&dword_1B57BA000, v39, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v69);
    v44 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v61);
    std::runtime_error::runtime_error((std::runtime_error *)&v73, &v61);
    std::runtime_error::runtime_error(&v75, (const std::runtime_error *)&v73);
    v77 = 0uLL;
    v78 = 0;
    v79 = -1;
    v75.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v76 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v75);
    *((_QWORD *)&v82 + 1) = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) co"
                            "nst [Return_Type = std::optional<std::vector<unsigned int>>, Argument_Types = <AMCP::Graph_D"
                            "escription, AMCP::Modify_Graph_Destroy_List>]";
    v83 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    v84 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v71);
    *(_OWORD *)&v64[8] = *(_OWORD *)v71;
    *(_QWORD *)v64 = off_1E69A20A0;
    *(_QWORD *)&v65 = *(_QWORD *)&v71[16];
    memset(v71, 0, sizeof(v71));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)v64);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v44, (uint64_t)buf);
  }
  *(_OWORD *)v64 = v55;
  v11 = v56;
  v56 = 0;
  v55 = 0uLL;
  v65 = v57;
  *(_QWORD *)&v64[16] = v11;
  v66 = v58;
  v58 = 0;
  v57 = 0uLL;
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
  v12 = v52.__r_.__value_.__r.__words[2];
  memset(&v52, 0, sizeof(v52));
  v62 = v53;
  v61.__r_.__value_.__r.__words[2] = v12;
  v63 = v54;
  v53 = 0uLL;
  v54 = 0;
  v13 = AMCP::Implementation::get_type_marker<std::function<std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>>();
  v14 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v10, v13);
  if (!v14)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v45 = *(std::__shared_weak_count **)&buf[8];
    v46 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v47 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      v49 = pthread_self();
      v50 = pthread_mach_thread_np(v49);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v50;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Operation.h";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 154;
      _os_log_error_impl(&dword_1B57BA000, v46, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v80);
    v51 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v73);
    std::runtime_error::runtime_error(&v74, &v73);
    std::runtime_error::runtime_error(&v75, &v74);
    v77 = 0uLL;
    v78 = 0;
    v79 = -1;
    v75.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v76 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v75);
    *((_QWORD *)&v82 + 1) = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std"
                            "::optional<std::vector<unsigned int>>, Argument_Types = <AMCP::Graph_Description, AMCP::Modi"
                            "fy_Graph_Destroy_List>]";
    v83 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v84 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v69);
    *(_OWORD *)&v71[8] = v69;
    *(_QWORD *)v71 = off_1E69A20A0;
    v72 = v70;
    v69 = 0uLL;
    v70 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)v71);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v51, (uint64_t)buf);
  }
  v15 = v14;
  if (!*((_QWORD *)v14 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>>(),
        (v14 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, _BYTE *))v15 + 7))(4, (uint64_t)v15 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v24 = *(std::__shared_weak_count **)&buf[8];
    v25 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v26 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v28 = pthread_self();
      v29 = pthread_mach_thread_np(v28);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v29;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Operation.h";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 161;
      _os_log_error_impl(&dword_1B57BA000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v80);
    v30 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v73);
    std::runtime_error::runtime_error(&v74, &v73);
    std::runtime_error::runtime_error(&v75, &v74);
    v77 = 0uLL;
    v78 = 0;
    v79 = -1;
    v75.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v76 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v75);
    *((_QWORD *)&v82 + 1) = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std"
                            "::optional<std::vector<unsigned int>>, Argument_Types = <AMCP::Graph_Description, AMCP::Modi"
                            "fy_Graph_Destroy_List>]";
    v83 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v84 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v69);
    *(_OWORD *)&v71[8] = v69;
    *(_QWORD *)v71 = off_1E69A20A0;
    v72 = v70;
    v69 = 0uLL;
    v70 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)v71);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v30, (uint64_t)buf);
  }
  *(_OWORD *)buf = *(_OWORD *)v64;
  v82 = v65;
  v16 = *(_QWORD *)&v64[16];
  memset(v64, 0, sizeof(v64));
  *(_QWORD *)&buf[16] = v16;
  v83 = v66;
  v66 = 0;
  v65 = 0uLL;
  v75 = *(std::runtime_error *)&v61.__r_.__value_.__l.__data_;
  v17 = (void *)v61.__r_.__value_.__r.__words[2];
  memset(&v61, 0, sizeof(v61));
  v77 = v62;
  v76 = v17;
  v78 = v63;
  v62 = 0uLL;
  v63 = 0;
  v18 = *((_QWORD *)v14 + 3);
  if (!v18)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, _BYTE *, std::runtime_error *))(*(_QWORD *)v18 + 48))(v18, buf, &v75);
  *(_QWORD *)v71 = &v77;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
  *(_QWORD *)v71 = &v75;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
  *(_QWORD *)v71 = &v82;
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
  *(_QWORD *)v71 = buf;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
  *(_QWORD *)buf = &v62;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v65;
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v64;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  v19 = v68;
  if (v68)
  {
    p_shared_owners = (unint64_t *)&v68->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  *(_QWORD *)buf = &v53;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v52;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v57;
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v55;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  v22 = (unint64_t *)&v7->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1B5BC79C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,std::runtime_error a44,uint64_t a45,uint64_t a46,uint64_t a47,std::runtime_error a48,int a49,__int16 a50,char a51,char a52)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<AMCP::Wire_Description>::__init_with_size[abi:ne180100]<AMCP::Wire_Description*,AMCP::Wire_Description*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<AMCP::Wire_Description>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Wire_Description>,AMCP::Wire_Description*,AMCP::Wire_Description*,AMCP::Wire_Description*>(a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B5BC7E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t AMCP::System::node_uid_is_unique(AMCP::System *this, const void **a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  int8x8_t *v6;
  const void *v7;
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v9;
  unint64_t v10;
  AMCP::Log::Scope_Registry *v11;
  AMCP::Log::Scope_Registry *v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _opaque_pthread_t *v25;
  mach_port_t v26;
  void *v27;
  std::__shared_weak_count *v28;
  NSObject *v29;
  unint64_t *v30;
  unint64_t v31;
  _opaque_pthread_t *v32;
  mach_port_t v33;
  void *exception;
  std::__shared_weak_count *v35;
  NSObject *v36;
  unint64_t *v37;
  unint64_t v38;
  _opaque_pthread_t *v39;
  mach_port_t v40;
  void *v41;
  std::__shared_weak_count *v42;
  NSObject *v43;
  unint64_t *v44;
  unint64_t v45;
  _opaque_pthread_t *v46;
  mach_port_t v47;
  void *v48;
  uint64_t v49;
  int v50;
  _QWORD *v51;
  std::__shared_weak_count *v52;
  std::runtime_error v53;
  std::string::size_type v54;
  uint64_t (**v55)();
  std::string v56;
  std::string v57;
  std::runtime_error v58;
  std::runtime_error v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  char v65;
  uint8_t buf[8];
  _BYTE v67[10];
  __int16 v68;
  int v69;
  __int16 v70;
  _BYTE v71[14];
  const char *v72;
  int v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3
    || (v3 = std::__shared_weak_count::lock(v3), (v5 = v3) == 0)
    || (v6 = (int8x8_t *)*((_QWORD *)this + 2)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v28 = *(std::__shared_weak_count **)v67;
    v29 = **(NSObject ***)buf;
    if (*(_QWORD *)v67)
    {
      v30 = (unint64_t *)(*(_QWORD *)v67 + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      v32 = pthread_self();
      v33 = pthread_mach_thread_np(v32);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v33;
      *(_WORD *)v67 = 2080;
      *(_QWORD *)&v67[2] = "System.cpp";
      v68 = 1024;
      v69 = 109;
      v70 = 2080;
      *(_QWORD *)v71 = "!core_ptr";
      _os_log_error_impl(&dword_1B57BA000, v29, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v58);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v53, "No underlying object");
    std::runtime_error::runtime_error(&v59, &v53);
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = -1;
    v59.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v60 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v59);
    *(_QWORD *)&v71[6] = "BOOL AMCP::System::node_uid_is_unique(const CF::String &)";
    v72 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/System.cpp";
    v73 = 109;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v57.__r_.__value_.__l.__data_);
    v55 = off_1E69A20A0;
    v56 = v57;
    memset(&v57, 0, sizeof(v57));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v55);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v49 = 0x676C6F626E647571;
  v50 = 0;
  v7 = *a2;
  if (v7)
    CFRetain(v7);
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v51, v6, (unsigned int *)&v49);
  v9 = v51;
  if (!v51)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v35 = *(std::__shared_weak_count **)v67;
    v36 = **(NSObject ***)buf;
    if (*(_QWORD *)v67)
    {
      v37 = (unint64_t *)(*(_QWORD *)v67 + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      v39 = pthread_self();
      v40 = pthread_mach_thread_np(v39);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v40;
      *(_WORD *)v67 = 2080;
      *(_QWORD *)&v67[2] = "Core.h";
      v68 = 1024;
      v69 = 202;
      _os_log_error_impl(&dword_1B57BA000, v36, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v65);
    v41 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v57);
    std::runtime_error::runtime_error(&v58, &v57);
    std::runtime_error::runtime_error(&v59, &v58);
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = -1;
    v59.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v60 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v59);
    *(_QWORD *)&v71[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = BOOL, Argument_Types = <applesauce::CF::StringRef>]";
    v72 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    v73 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v53);
    v55 = off_1E69A20A0;
    *(std::runtime_error *)&v56.__r_.__value_.__l.__data_ = v53;
    v56.__r_.__value_.__r.__words[2] = v54;
    v53.__vftable = 0;
    v53.__imp_.__imp_ = 0;
    v54 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v55);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v41, (uint64_t)buf);
  }
  v10 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(applesauce::CF::StringRef)>>();
  v11 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10);
  if (!v11)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v42 = *(std::__shared_weak_count **)v67;
    v43 = **(NSObject ***)buf;
    if (*(_QWORD *)v67)
    {
      v44 = (unint64_t *)(*(_QWORD *)v67 + 8);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      v46 = pthread_self();
      v47 = pthread_mach_thread_np(v46);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v47;
      *(_WORD *)v67 = 2080;
      *(_QWORD *)&v67[2] = "Operation.h";
      v68 = 1024;
      v69 = 154;
      _os_log_error_impl(&dword_1B57BA000, v43, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v65);
    v48 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v57);
    std::runtime_error::runtime_error(&v58, &v57);
    std::runtime_error::runtime_error(&v59, &v58);
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = -1;
    v59.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v60 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v59);
    *(_QWORD *)&v71[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = BOOL, "
                         "Argument_Types = <applesauce::CF::StringRef>]";
    v72 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v73 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v53);
    v55 = off_1E69A20A0;
    *(std::runtime_error *)&v56.__r_.__value_.__l.__data_ = v53;
    v56.__r_.__value_.__r.__words[2] = v54;
    v53.__vftable = 0;
    v53.__imp_.__imp_ = 0;
    v54 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v55);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v48, (uint64_t)buf);
  }
  v12 = v11;
  if (!*((_QWORD *)v11 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<BOOL ()(applesauce::CF::StringRef)>>(),
        (v11 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v12 + 7))(4, (uint64_t)v12 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v21 = *(std::__shared_weak_count **)v67;
    v22 = **(NSObject ***)buf;
    if (*(_QWORD *)v67)
    {
      v23 = (unint64_t *)(*(_QWORD *)v67 + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v25 = pthread_self();
      v26 = pthread_mach_thread_np(v25);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v26;
      *(_WORD *)v67 = 2080;
      *(_QWORD *)&v67[2] = "Operation.h";
      v68 = 1024;
      v69 = 161;
      _os_log_error_impl(&dword_1B57BA000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v65);
    v27 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v57);
    std::runtime_error::runtime_error(&v58, &v57);
    std::runtime_error::runtime_error(&v59, &v58);
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = -1;
    v59.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v60 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v59);
    *(_QWORD *)&v71[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = BOOL, "
                         "Argument_Types = <applesauce::CF::StringRef>]";
    v72 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v73 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v53);
    v55 = off_1E69A20A0;
    *(std::runtime_error *)&v56.__r_.__value_.__l.__data_ = v53;
    v56.__r_.__value_.__r.__words[2] = v54;
    v53.__vftable = 0;
    v53.__imp_.__imp_ = 0;
    v54 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v55);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v27, (uint64_t)buf);
  }
  *(_QWORD *)buf = v7;
  v13 = *((_QWORD *)v11 + 3);
  if (!v13)
    std::__throw_bad_function_call[abi:ne180100]();
  v14 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v13 + 48))(v13, buf);
  if (*(_QWORD *)buf)
    CFRelease(*(CFTypeRef *)buf);
  v15 = v52;
  if (v52)
  {
    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (unint64_t *)&v5->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v14;
}

void sub_1B5BC8730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::runtime_error a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,std::runtime_error a29,std::runtime_error a30,uint64_t a31,uint64_t a32)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::System::get_node_id(AMCP::System *this, const void **a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  int8x8_t *v6;
  const void *v7;
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v9;
  unint64_t v10;
  AMCP::Log::Scope_Registry *v11;
  AMCP::Log::Scope_Registry *v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _opaque_pthread_t *v25;
  mach_port_t v26;
  void *v27;
  std::__shared_weak_count *v28;
  NSObject *v29;
  unint64_t *v30;
  unint64_t v31;
  _opaque_pthread_t *v32;
  mach_port_t v33;
  void *exception;
  std::__shared_weak_count *v35;
  NSObject *v36;
  unint64_t *v37;
  unint64_t v38;
  _opaque_pthread_t *v39;
  mach_port_t v40;
  void *v41;
  std::__shared_weak_count *v42;
  NSObject *v43;
  unint64_t *v44;
  unint64_t v45;
  _opaque_pthread_t *v46;
  mach_port_t v47;
  void *v48;
  uint64_t v49;
  int v50;
  _QWORD *v51;
  std::__shared_weak_count *v52;
  std::runtime_error v53;
  std::string::size_type v54;
  uint64_t (**v55)();
  std::string v56;
  std::string v57;
  std::runtime_error v58;
  std::runtime_error v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  char v65;
  uint8_t buf[8];
  _BYTE v67[10];
  __int16 v68;
  int v69;
  __int16 v70;
  _BYTE v71[14];
  const char *v72;
  int v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3
    || (v3 = std::__shared_weak_count::lock(v3), (v5 = v3) == 0)
    || (v6 = (int8x8_t *)*((_QWORD *)this + 2)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v28 = *(std::__shared_weak_count **)v67;
    v29 = **(NSObject ***)buf;
    if (*(_QWORD *)v67)
    {
      v30 = (unint64_t *)(*(_QWORD *)v67 + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      v32 = pthread_self();
      v33 = pthread_mach_thread_np(v32);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v33;
      *(_WORD *)v67 = 2080;
      *(_QWORD *)&v67[2] = "System.cpp";
      v68 = 1024;
      v69 = 116;
      v70 = 2080;
      *(_QWORD *)v71 = "!core_ptr";
      _os_log_error_impl(&dword_1B57BA000, v29, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v58);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v53, "No underlying object");
    std::runtime_error::runtime_error(&v59, &v53);
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = -1;
    v59.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v60 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v59);
    *(_QWORD *)&v71[6] = "std::optional<Object_ID> AMCP::System::get_node_id(const CF::String &)";
    v72 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/System.cpp";
    v73 = 116;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v57.__r_.__value_.__l.__data_);
    v55 = off_1E69A20A0;
    v56 = v57;
    memset(&v57, 0, sizeof(v57));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v55);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v49 = 0x676C6F62676E6469;
  v50 = 0;
  v7 = *a2;
  if (v7)
    CFRetain(v7);
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v51, v6, (unsigned int *)&v49);
  v9 = v51;
  if (!v51)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v35 = *(std::__shared_weak_count **)v67;
    v36 = **(NSObject ***)buf;
    if (*(_QWORD *)v67)
    {
      v37 = (unint64_t *)(*(_QWORD *)v67 + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      v39 = pthread_self();
      v40 = pthread_mach_thread_np(v39);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v40;
      *(_WORD *)v67 = 2080;
      *(_QWORD *)&v67[2] = "Core.h";
      v68 = 1024;
      v69 = 202;
      _os_log_error_impl(&dword_1B57BA000, v36, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v65);
    v41 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v57);
    std::runtime_error::runtime_error(&v58, &v57);
    std::runtime_error::runtime_error(&v59, &v58);
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = -1;
    v59.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v60 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v59);
    *(_QWORD *)&v71[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = std::optional<unsigned int>, Argument_Types = <applesauce::CF::StringRef>]";
    v72 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    v73 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v53);
    v55 = off_1E69A20A0;
    *(std::runtime_error *)&v56.__r_.__value_.__l.__data_ = v53;
    v56.__r_.__value_.__r.__words[2] = v54;
    v53.__vftable = 0;
    v53.__imp_.__imp_ = 0;
    v54 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v55);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v41, (uint64_t)buf);
  }
  v10 = AMCP::Implementation::get_type_marker<std::function<std::optional<unsigned int> ()(applesauce::CF::StringRef)>>();
  v11 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10);
  if (!v11)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v42 = *(std::__shared_weak_count **)v67;
    v43 = **(NSObject ***)buf;
    if (*(_QWORD *)v67)
    {
      v44 = (unint64_t *)(*(_QWORD *)v67 + 8);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      v46 = pthread_self();
      v47 = pthread_mach_thread_np(v46);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v47;
      *(_WORD *)v67 = 2080;
      *(_QWORD *)&v67[2] = "Operation.h";
      v68 = 1024;
      v69 = 154;
      _os_log_error_impl(&dword_1B57BA000, v43, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v65);
    v48 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v57);
    std::runtime_error::runtime_error(&v58, &v57);
    std::runtime_error::runtime_error(&v59, &v58);
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = -1;
    v59.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v60 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v59);
    *(_QWORD *)&v71[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::o"
                         "ptional<unsigned int>, Argument_Types = <applesauce::CF::StringRef>]";
    v72 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v73 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v53);
    v55 = off_1E69A20A0;
    *(std::runtime_error *)&v56.__r_.__value_.__l.__data_ = v53;
    v56.__r_.__value_.__r.__words[2] = v54;
    v53.__vftable = 0;
    v53.__imp_.__imp_ = 0;
    v54 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v55);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v48, (uint64_t)buf);
  }
  v12 = v11;
  if (!*((_QWORD *)v11 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<std::optional<unsigned int> ()(applesauce::CF::StringRef)>>(),
        (v11 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v12 + 7))(4, (uint64_t)v12 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v21 = *(std::__shared_weak_count **)v67;
    v22 = **(NSObject ***)buf;
    if (*(_QWORD *)v67)
    {
      v23 = (unint64_t *)(*(_QWORD *)v67 + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v25 = pthread_self();
      v26 = pthread_mach_thread_np(v25);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v26;
      *(_WORD *)v67 = 2080;
      *(_QWORD *)&v67[2] = "Operation.h";
      v68 = 1024;
      v69 = 161;
      _os_log_error_impl(&dword_1B57BA000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v65);
    v27 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v57);
    std::runtime_error::runtime_error(&v58, &v57);
    std::runtime_error::runtime_error(&v59, &v58);
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = -1;
    v59.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v60 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v59);
    *(_QWORD *)&v71[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::o"
                         "ptional<unsigned int>, Argument_Types = <applesauce::CF::StringRef>]";
    v72 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v73 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v53);
    v55 = off_1E69A20A0;
    *(std::runtime_error *)&v56.__r_.__value_.__l.__data_ = v53;
    v56.__r_.__value_.__r.__words[2] = v54;
    v53.__vftable = 0;
    v53.__imp_.__imp_ = 0;
    v54 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v55);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v27, (uint64_t)buf);
  }
  *(_QWORD *)buf = v7;
  v13 = *((_QWORD *)v11 + 3);
  if (!v13)
    std::__throw_bad_function_call[abi:ne180100]();
  v14 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v13 + 48))(v13, buf);
  if (*(_QWORD *)buf)
    CFRelease(*(CFTypeRef *)buf);
  v15 = v52;
  if (v52)
  {
    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (unint64_t *)&v5->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v14;
}

void sub_1B5BC93B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::runtime_error a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,std::runtime_error a29,std::runtime_error a30,uint64_t a31,uint64_t a32)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMCP::System::get_wires(AMCP::System *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  int8x8_t *v4;
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v6;
  unint64_t v7;
  AMCP::Log::Scope_Registry *v8;
  AMCP::Log::Scope_Registry *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  NSObject *v17;
  unint64_t *v18;
  unint64_t v19;
  _opaque_pthread_t *v20;
  mach_port_t v21;
  void *v22;
  std::__shared_weak_count *v23;
  NSObject *v24;
  unint64_t *v25;
  unint64_t v26;
  _opaque_pthread_t *v27;
  mach_port_t v28;
  void *exception;
  std::__shared_weak_count *v30;
  NSObject *v31;
  unint64_t *v32;
  unint64_t v33;
  _opaque_pthread_t *v34;
  mach_port_t v35;
  void *v36;
  std::__shared_weak_count *v37;
  NSObject *v38;
  unint64_t *v39;
  unint64_t v40;
  _opaque_pthread_t *v41;
  mach_port_t v42;
  void *v43;
  uint64_t v44;
  int v45;
  _QWORD *v46;
  std::__shared_weak_count *v47;
  std::runtime_error v48;
  std::string::size_type v49;
  uint64_t (**v50)();
  std::string v51;
  std::string v52;
  std::runtime_error v53;
  std::runtime_error v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  char v60;
  uint8_t buf[8];
  _BYTE v62[10];
  __int16 v63;
  int v64;
  __int16 v65;
  _BYTE v66[14];
  const char *v67;
  int v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2
    || (v2 = std::__shared_weak_count::lock(v2), (v3 = v2) == 0)
    || (v4 = (int8x8_t *)*((_QWORD *)this + 2)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v23 = *(std::__shared_weak_count **)v62;
    v24 = **(NSObject ***)buf;
    if (*(_QWORD *)v62)
    {
      v25 = (unint64_t *)(*(_QWORD *)v62 + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v27 = pthread_self();
      v28 = pthread_mach_thread_np(v27);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v28;
      *(_WORD *)v62 = 2080;
      *(_QWORD *)&v62[2] = "System.cpp";
      v63 = 1024;
      v64 = 123;
      v65 = 2080;
      *(_QWORD *)v66 = "!core_ptr";
      _os_log_error_impl(&dword_1B57BA000, v24, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v53);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v48, "No underlying object");
    std::runtime_error::runtime_error(&v54, &v48);
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = -1;
    v54.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v55 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v54);
    *(_QWORD *)&v66[6] = "Wire_Set AMCP::System::get_wires()";
    v67 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/System.cpp";
    v68 = 123;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v52.__r_.__value_.__l.__data_);
    v50 = off_1E69A20A0;
    v51 = v52;
    memset(&v52, 0, sizeof(v52));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v50);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v44 = 0x676C6F6267747772;
  v45 = 0;
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v46, v4, (unsigned int *)&v44);
  v6 = v46;
  if (!v46)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v30 = *(std::__shared_weak_count **)v62;
    v31 = **(NSObject ***)buf;
    if (*(_QWORD *)v62)
    {
      v32 = (unint64_t *)(*(_QWORD *)v62 + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      v34 = pthread_self();
      v35 = pthread_mach_thread_np(v34);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v35;
      *(_WORD *)v62 = 2080;
      *(_QWORD *)&v62[2] = "Core.h";
      v63 = 1024;
      v64 = 202;
      _os_log_error_impl(&dword_1B57BA000, v31, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v60);
    v36 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v52);
    std::runtime_error::runtime_error(&v53, &v52);
    std::runtime_error::runtime_error(&v54, &v53);
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = -1;
    v54.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v55 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v54);
    *(_QWORD *)&v66[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = std::unordered_set<AMCP::Wire_Description>, Argument_Types = <>]";
    v67 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    v68 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v48);
    v50 = off_1E69A20A0;
    *(std::runtime_error *)&v51.__r_.__value_.__l.__data_ = v48;
    v51.__r_.__value_.__r.__words[2] = v49;
    v48.__vftable = 0;
    v48.__imp_.__imp_ = 0;
    v49 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v50);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v36, (uint64_t)buf);
  }
  v7 = AMCP::Implementation::get_type_marker<std::function<std::unordered_set<AMCP::Wire_Description> ()(void)>>();
  v8 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v7);
  if (!v8)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v37 = *(std::__shared_weak_count **)v62;
    v38 = **(NSObject ***)buf;
    if (*(_QWORD *)v62)
    {
      v39 = (unint64_t *)(*(_QWORD *)v62 + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      v41 = pthread_self();
      v42 = pthread_mach_thread_np(v41);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v42;
      *(_WORD *)v62 = 2080;
      *(_QWORD *)&v62[2] = "Operation.h";
      v63 = 1024;
      v64 = 154;
      _os_log_error_impl(&dword_1B57BA000, v38, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v60);
    v43 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v52);
    std::runtime_error::runtime_error(&v53, &v52);
    std::runtime_error::runtime_error(&v54, &v53);
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = -1;
    v54.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v55 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v54);
    *(_QWORD *)&v66[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::u"
                         "nordered_set<AMCP::Wire_Description>, Argument_Types = <>]";
    v67 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v68 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v48);
    v50 = off_1E69A20A0;
    *(std::runtime_error *)&v51.__r_.__value_.__l.__data_ = v48;
    v51.__r_.__value_.__r.__words[2] = v49;
    v48.__vftable = 0;
    v48.__imp_.__imp_ = 0;
    v49 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v50);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v43, (uint64_t)buf);
  }
  v9 = v8;
  if (!*((_QWORD *)v8 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<std::unordered_set<AMCP::Wire_Description> ()(void)>>(),
        (v8 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v9 + 7))(4, (uint64_t)v9 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v16 = *(std::__shared_weak_count **)v62;
    v17 = **(NSObject ***)buf;
    if (*(_QWORD *)v62)
    {
      v18 = (unint64_t *)(*(_QWORD *)v62 + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v20 = pthread_self();
      v21 = pthread_mach_thread_np(v20);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v21;
      *(_WORD *)v62 = 2080;
      *(_QWORD *)&v62[2] = "Operation.h";
      v63 = 1024;
      v64 = 161;
      _os_log_error_impl(&dword_1B57BA000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v60);
    v22 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v52);
    std::runtime_error::runtime_error(&v53, &v52);
    std::runtime_error::runtime_error(&v54, &v53);
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = -1;
    v54.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v55 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v54);
    *(_QWORD *)&v66[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::u"
                         "nordered_set<AMCP::Wire_Description>, Argument_Types = <>]";
    v67 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v68 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v48);
    v50 = off_1E69A20A0;
    *(std::runtime_error *)&v51.__r_.__value_.__l.__data_ = v48;
    v51.__r_.__value_.__r.__words[2] = v49;
    v48.__vftable = 0;
    v48.__imp_.__imp_ = 0;
    v49 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v50);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v22, (uint64_t)buf);
  }
  v10 = *((_QWORD *)v8 + 3);
  if (!v10)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
  v11 = v47;
  if (v47)
  {
    p_shared_owners = (unint64_t *)&v47->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (unint64_t *)&v3->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_1B5BC9FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,std::runtime_error a27,std::runtime_error a28,uint64_t a29,uint64_t a30)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AMCP::System::get_wires_for_node(AMCP::System *this, int a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  int8x8_t *v6;
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v8;
  unint64_t v9;
  AMCP::Log::Scope_Registry *v10;
  AMCP::Log::Scope_Registry *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  NSObject *v19;
  unint64_t *v20;
  unint64_t v21;
  _opaque_pthread_t *v22;
  mach_port_t v23;
  void *v24;
  std::__shared_weak_count *v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  _opaque_pthread_t *v29;
  mach_port_t v30;
  void *exception;
  std::__shared_weak_count *v32;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  _opaque_pthread_t *v36;
  mach_port_t v37;
  void *v38;
  std::__shared_weak_count *v39;
  NSObject *v40;
  unint64_t *v41;
  unint64_t v42;
  _opaque_pthread_t *v43;
  mach_port_t v44;
  void *v45;
  uint64_t v46;
  int v47;
  _QWORD *v48;
  std::__shared_weak_count *v49;
  std::runtime_error v50;
  std::string::size_type v51;
  uint64_t (**v52)();
  std::string v53;
  std::string v54;
  std::runtime_error v55;
  std::runtime_error v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  char v62;
  uint8_t buf[8];
  _BYTE v64[10];
  __int16 v65;
  int v66;
  __int16 v67;
  _BYTE v68[14];
  const char *v69;
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3
    || (v3 = std::__shared_weak_count::lock(v3), (v5 = v3) == 0)
    || (v6 = (int8x8_t *)*((_QWORD *)this + 2)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v25 = *(std::__shared_weak_count **)v64;
    v26 = **(NSObject ***)buf;
    if (*(_QWORD *)v64)
    {
      v27 = (unint64_t *)(*(_QWORD *)v64 + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      v29 = pthread_self();
      v30 = pthread_mach_thread_np(v29);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v30;
      *(_WORD *)v64 = 2080;
      *(_QWORD *)&v64[2] = "System.cpp";
      v65 = 1024;
      v66 = 130;
      v67 = 2080;
      *(_QWORD *)v68 = "!core_ptr";
      _os_log_error_impl(&dword_1B57BA000, v26, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v55);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v50, "No underlying object");
    std::runtime_error::runtime_error(&v56, &v50);
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v61 = -1;
    v56.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v57 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v56);
    *(_QWORD *)&v68[6] = "Wire_Set AMCP::System::get_wires_for_node(Object_ID)";
    v69 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/System.cpp";
    v70 = 130;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v54.__r_.__value_.__l.__data_);
    v52 = off_1E69A20A0;
    v53 = v54;
    memset(&v54, 0, sizeof(v54));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v52);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v46 = 0x676C6F626777666ELL;
  v47 = 0;
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v48, v6, (unsigned int *)&v46);
  v8 = v48;
  if (!v48)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v32 = *(std::__shared_weak_count **)v64;
    v33 = **(NSObject ***)buf;
    if (*(_QWORD *)v64)
    {
      v34 = (unint64_t *)(*(_QWORD *)v64 + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      v36 = pthread_self();
      v37 = pthread_mach_thread_np(v36);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v37;
      *(_WORD *)v64 = 2080;
      *(_QWORD *)&v64[2] = "Core.h";
      v65 = 1024;
      v66 = 202;
      _os_log_error_impl(&dword_1B57BA000, v33, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v62);
    v38 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v54);
    std::runtime_error::runtime_error(&v55, &v54);
    std::runtime_error::runtime_error(&v56, &v55);
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v61 = -1;
    v56.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v57 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v56);
    *(_QWORD *)&v68[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = std::unordered_set<AMCP::Wire_Description>, Argument_Types = <unsigned int>]";
    v69 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    v70 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v50);
    v52 = off_1E69A20A0;
    *(std::runtime_error *)&v53.__r_.__value_.__l.__data_ = v50;
    v53.__r_.__value_.__r.__words[2] = v51;
    v50.__vftable = 0;
    v50.__imp_.__imp_ = 0;
    v51 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v52);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v38, (uint64_t)buf);
  }
  v9 = AMCP::Implementation::get_type_marker<std::function<std::unordered_set<AMCP::Wire_Description> ()>>();
  v10 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9);
  if (!v10)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v39 = *(std::__shared_weak_count **)v64;
    v40 = **(NSObject ***)buf;
    if (*(_QWORD *)v64)
    {
      v41 = (unint64_t *)(*(_QWORD *)v64 + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      v43 = pthread_self();
      v44 = pthread_mach_thread_np(v43);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v44;
      *(_WORD *)v64 = 2080;
      *(_QWORD *)&v64[2] = "Operation.h";
      v65 = 1024;
      v66 = 154;
      _os_log_error_impl(&dword_1B57BA000, v40, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v62);
    v45 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v54);
    std::runtime_error::runtime_error(&v55, &v54);
    std::runtime_error::runtime_error(&v56, &v55);
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v61 = -1;
    v56.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v57 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v56);
    *(_QWORD *)&v68[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::u"
                         "nordered_set<AMCP::Wire_Description>, Argument_Types = <unsigned int>]";
    v69 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v70 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v50);
    v52 = off_1E69A20A0;
    *(std::runtime_error *)&v53.__r_.__value_.__l.__data_ = v50;
    v53.__r_.__value_.__r.__words[2] = v51;
    v50.__vftable = 0;
    v50.__imp_.__imp_ = 0;
    v51 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v52);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v45, (uint64_t)buf);
  }
  v11 = v10;
  if (!*((_QWORD *)v10 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<std::unordered_set<AMCP::Wire_Description> ()>>(),
        (v10 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v11 + 7))(4, (uint64_t)v11 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v18 = *(std::__shared_weak_count **)v64;
    v19 = **(NSObject ***)buf;
    if (*(_QWORD *)v64)
    {
      v20 = (unint64_t *)(*(_QWORD *)v64 + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v22 = pthread_self();
      v23 = pthread_mach_thread_np(v22);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v23;
      *(_WORD *)v64 = 2080;
      *(_QWORD *)&v64[2] = "Operation.h";
      v65 = 1024;
      v66 = 161;
      _os_log_error_impl(&dword_1B57BA000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v62);
    v24 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v54);
    std::runtime_error::runtime_error(&v55, &v54);
    std::runtime_error::runtime_error(&v56, &v55);
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v61 = -1;
    v56.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v57 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v56);
    *(_QWORD *)&v68[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::u"
                         "nordered_set<AMCP::Wire_Description>, Argument_Types = <unsigned int>]";
    v69 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    v70 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v50);
    v52 = off_1E69A20A0;
    *(std::runtime_error *)&v53.__r_.__value_.__l.__data_ = v50;
    v53.__r_.__value_.__r.__words[2] = v51;
    v50.__vftable = 0;
    v50.__imp_.__imp_ = 0;
    v51 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v52);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v24, (uint64_t)buf);
  }
  *(_DWORD *)buf = a2;
  v12 = *((_QWORD *)v10 + 3);
  if (!v12)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v12 + 48))(v12, buf);
  v13 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (unint64_t *)&v5->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1B5BCABC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,std::runtime_error a27,std::runtime_error a28,uint64_t a29,uint64_t a30)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AMCP::System::set_volume_for_wire(uint64_t a1, uint64_t a2, __int128 *a3, float a4)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v9;
  int8x8_t *v10;
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v12;
  unint64_t v13;
  AMCP::Log::Scope_Registry *v14;
  AMCP::Log::Scope_Registry *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  NSObject *v23;
  unint64_t *v24;
  unint64_t v25;
  _opaque_pthread_t *v26;
  mach_port_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  NSObject *v30;
  unint64_t *v31;
  unint64_t v32;
  _opaque_pthread_t *v33;
  mach_port_t v34;
  void *exception;
  std::__shared_weak_count *v36;
  NSObject *v37;
  unint64_t *v38;
  unint64_t v39;
  _opaque_pthread_t *v40;
  mach_port_t v41;
  void *v42;
  std::__shared_weak_count *v43;
  NSObject *v44;
  unint64_t *v45;
  unint64_t v46;
  _opaque_pthread_t *v47;
  mach_port_t v48;
  void *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  _QWORD *v56;
  std::__shared_weak_count *v57;
  std::runtime_error v58;
  std::string::size_type v59;
  uint64_t (**v60)();
  std::string v61;
  std::string v62;
  std::runtime_error v63;
  std::runtime_error v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  char v70;
  _BYTE buf[48];
  __int128 v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v5 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v5 || (v5 = std::__shared_weak_count::lock(v5), (v9 = v5) == 0) || (v10 = *(int8x8_t **)(a1 + 16)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v29 = *(std::__shared_weak_count **)&buf[8];
    v30 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v31 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v33 = pthread_self();
      v34 = pthread_mach_thread_np(v33);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v34;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "System.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 137;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "!core_ptr";
      _os_log_error_impl(&dword_1B57BA000, v30, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v63);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v58, "No underlying object");
    std::runtime_error::runtime_error(&v64, &v58);
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v69 = -1;
    v64.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v65 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v64);
    *(_QWORD *)&buf[32] = "void AMCP::System::set_volume_for_wire(const Wire_Identifier &, float, CA::TimeStamp)";
    *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/System.cpp";
    LODWORD(v72) = 137;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v62.__r_.__value_.__l.__data_);
    v61 = v62;
    v60 = off_1E69A20A0;
    memset(&v62, 0, sizeof(v62));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v60);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v54 = 0x676C6F6273766677;
  v55 = 0;
  v50 = *a3;
  v51 = a3[1];
  v52 = a3[2];
  v53 = a3[3];
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v56, v10, (unsigned int *)&v54);
  v12 = v56;
  if (!v56)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v36 = *(std::__shared_weak_count **)&buf[8];
    v37 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v38 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      v40 = pthread_self();
      v41 = pthread_mach_thread_np(v40);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v41;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Core.h";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 202;
      _os_log_error_impl(&dword_1B57BA000, v37, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v70);
    v42 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v62);
    std::runtime_error::runtime_error(&v63, &v62);
    std::runtime_error::runtime_error(&v64, &v63);
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v69 = -1;
    v64.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v65 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v64);
    *(_QWORD *)&buf[32] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) cons"
                          "t [Return_Type = void, Argument_Types = <const AMCP::Wire_Identifier &, float, CA::TimeStamp>]";
    *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    LODWORD(v72) = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v58);
    *(std::runtime_error *)&v61.__r_.__value_.__l.__data_ = v58;
    v60 = off_1E69A20A0;
    v61.__r_.__value_.__r.__words[2] = v59;
    v58.__vftable = 0;
    v58.__imp_.__imp_ = 0;
    v59 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v60);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v42, (uint64_t)buf);
  }
  v13 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>>();
  v14 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v12, v13);
  if (!v14)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v43 = *(std::__shared_weak_count **)&buf[8];
    v44 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v45 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      v47 = pthread_self();
      v48 = pthread_mach_thread_np(v47);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v48;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Operation.h";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 154;
      _os_log_error_impl(&dword_1B57BA000, v44, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v70);
    v49 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v62);
    std::runtime_error::runtime_error(&v63, &v62);
    std::runtime_error::runtime_error(&v64, &v63);
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v69 = -1;
    v64.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v65 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v64);
    *(_QWORD *)&buf[32] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void,"
                          " Argument_Types = <const AMCP::Wire_Identifier &, float, CA::TimeStamp>]";
    *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    LODWORD(v72) = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v58);
    *(std::runtime_error *)&v61.__r_.__value_.__l.__data_ = v58;
    v60 = off_1E69A20A0;
    v61.__r_.__value_.__r.__words[2] = v59;
    v58.__vftable = 0;
    v58.__imp_.__imp_ = 0;
    v59 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v60);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v49, (uint64_t)buf);
  }
  v15 = v14;
  if (!*((_QWORD *)v14 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>>(),
        (v14 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, _BYTE *))v15 + 7))(4, (uint64_t)v15 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v22 = *(std::__shared_weak_count **)&buf[8];
    v23 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v24 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v26 = pthread_self();
      v27 = pthread_mach_thread_np(v26);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v27;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Operation.h";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 161;
      _os_log_error_impl(&dword_1B57BA000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v70);
    v28 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v62);
    std::runtime_error::runtime_error(&v63, &v62);
    std::runtime_error::runtime_error(&v64, &v63);
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v69 = -1;
    v64.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v65 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v64);
    *(_QWORD *)&buf[32] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void,"
                          " Argument_Types = <const AMCP::Wire_Identifier &, float, CA::TimeStamp>]";
    *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    LODWORD(v72) = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v58);
    *(std::runtime_error *)&v61.__r_.__value_.__l.__data_ = v58;
    v60 = off_1E69A20A0;
    v61.__r_.__value_.__r.__words[2] = v59;
    v58.__vftable = 0;
    v58.__imp_.__imp_ = 0;
    v59 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v60);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v28, (uint64_t)buf);
  }
  *(_OWORD *)buf = v50;
  *(_OWORD *)&buf[16] = v51;
  *(_OWORD *)&buf[32] = v52;
  v72 = v53;
  *(float *)&v64.__vftable = a4;
  v16 = *((_QWORD *)v14 + 3);
  if (!v16)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t, std::runtime_error *, _BYTE *))(*(_QWORD *)v16 + 48))(v16, a2, &v64, buf);
  v17 = v57;
  if (v57)
  {
    p_shared_owners = (unint64_t *)&v57->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (unint64_t *)&v9->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_1B5BCB7C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::runtime_error a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,std::runtime_error a35,std::runtime_error a36,uint64_t a37,uint64_t a38)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AMCP::System::set_volume_ramp_for_wire(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, float a5)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v11;
  int8x8_t *v12;
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v14;
  unint64_t v15;
  AMCP::Log::Scope_Registry *v16;
  AMCP::Log::Scope_Registry *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  _opaque_pthread_t *v28;
  mach_port_t v29;
  void *v30;
  std::__shared_weak_count *v31;
  NSObject *v32;
  unint64_t *v33;
  unint64_t v34;
  _opaque_pthread_t *v35;
  mach_port_t v36;
  void *exception;
  std::__shared_weak_count *v38;
  NSObject *v39;
  unint64_t *v40;
  unint64_t v41;
  _opaque_pthread_t *v42;
  mach_port_t v43;
  void *v44;
  std::__shared_weak_count *v45;
  NSObject *v46;
  unint64_t *v47;
  unint64_t v48;
  _opaque_pthread_t *v49;
  mach_port_t v50;
  void *v51;
  std::runtime_error v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  _QWORD *v62;
  std::__shared_weak_count *v63;
  std::runtime_error v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  std::runtime_error v68;
  std::string::size_type v69;
  uint64_t (**v70)();
  std::string v71;
  std::string v72;
  std::runtime_error v73;
  char v74;
  _BYTE buf[48];
  __int128 v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v6 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v6 || (v6 = std::__shared_weak_count::lock(v6), (v11 = v6) == 0) || (v12 = *(int8x8_t **)(a1 + 16)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v31 = *(std::__shared_weak_count **)&buf[8];
    v32 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v33 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      v35 = pthread_self();
      v36 = pthread_mach_thread_np(v35);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v36;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "System.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 144;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = "!core_ptr";
      _os_log_error_impl(&dword_1B57BA000, v32, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v73);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v68, "No underlying object");
    std::runtime_error::runtime_error(&v64, &v68);
    *((_QWORD *)&v65 + 1) = 0;
    v66 = 0uLL;
    LODWORD(v67) = -1;
    v64.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    *(_QWORD *)&v65 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v64);
    *(_QWORD *)&buf[32] = "void AMCP::System::set_volume_ramp_for_wire(const Wire_Identifier &, float, CA::TimeStamp, CA::TimeStamp)";
    *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/System.cpp";
    LODWORD(v76) = 144;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v72.__r_.__value_.__l.__data_);
    v71 = v72;
    v70 = off_1E69A20A0;
    memset(&v72, 0, sizeof(v72));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v70);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v60 = 0x676C6F6273767277;
  v61 = 0;
  v56 = *a3;
  v57 = a3[1];
  v58 = a3[2];
  v59 = a3[3];
  v52 = *(std::runtime_error *)a4;
  v53 = *(_OWORD *)(a4 + 16);
  v54 = *(_OWORD *)(a4 + 32);
  v55 = *(_OWORD *)(a4 + 48);
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v62, v12, (unsigned int *)&v60);
  v14 = v62;
  if (!v62)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v38 = *(std::__shared_weak_count **)&buf[8];
    v39 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v40 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      v42 = pthread_self();
      v43 = pthread_mach_thread_np(v42);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v43;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Core.h";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 202;
      _os_log_error_impl(&dword_1B57BA000, v39, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v74);
    v44 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v72);
    std::runtime_error::runtime_error(&v73, &v72);
    std::runtime_error::runtime_error(&v64, &v73);
    *((_QWORD *)&v65 + 1) = 0;
    v66 = 0uLL;
    LODWORD(v67) = -1;
    v64.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    *(_QWORD *)&v65 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v64);
    *(_QWORD *)&buf[32] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) cons"
                          "t [Return_Type = void, Argument_Types = <const AMCP::Wire_Identifier &, float, CA::TimeStamp, CA::TimeStamp>]";
    *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    LODWORD(v76) = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v68);
    *(std::runtime_error *)&v71.__r_.__value_.__l.__data_ = v68;
    v70 = off_1E69A20A0;
    v71.__r_.__value_.__r.__words[2] = v69;
    v68.__vftable = 0;
    v68.__imp_.__imp_ = 0;
    v69 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v70);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v44, (uint64_t)buf);
  }
  v15 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>>();
  v16 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v14, v15);
  if (!v16)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v45 = *(std::__shared_weak_count **)&buf[8];
    v46 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v47 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      v49 = pthread_self();
      v50 = pthread_mach_thread_np(v49);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v50;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Operation.h";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 154;
      _os_log_error_impl(&dword_1B57BA000, v46, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v74);
    v51 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v72);
    std::runtime_error::runtime_error(&v73, &v72);
    std::runtime_error::runtime_error(&v64, &v73);
    *((_QWORD *)&v65 + 1) = 0;
    v66 = 0uLL;
    LODWORD(v67) = -1;
    v64.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    *(_QWORD *)&v65 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v64);
    *(_QWORD *)&buf[32] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void,"
                          " Argument_Types = <const AMCP::Wire_Identifier &, float, CA::TimeStamp, CA::TimeStamp>]";
    *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    LODWORD(v76) = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v68);
    *(std::runtime_error *)&v71.__r_.__value_.__l.__data_ = v68;
    v70 = off_1E69A20A0;
    v71.__r_.__value_.__r.__words[2] = v69;
    v68.__vftable = 0;
    v68.__imp_.__imp_ = 0;
    v69 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v70);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v51, (uint64_t)buf);
  }
  v17 = v16;
  if (!*((_QWORD *)v16 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>>(),
        (v16 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, _BYTE *))v17 + 7))(4, (uint64_t)v17 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v16);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v24 = *(std::__shared_weak_count **)&buf[8];
    v25 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v26 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v28 = pthread_self();
      v29 = pthread_mach_thread_np(v28);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v29;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "Operation.h";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 161;
      _os_log_error_impl(&dword_1B57BA000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v74);
    v30 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v72);
    std::runtime_error::runtime_error(&v73, &v72);
    std::runtime_error::runtime_error(&v64, &v73);
    *((_QWORD *)&v65 + 1) = 0;
    v66 = 0uLL;
    LODWORD(v67) = -1;
    v64.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    *(_QWORD *)&v65 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v64);
    *(_QWORD *)&buf[32] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void,"
                          " Argument_Types = <const AMCP::Wire_Identifier &, float, CA::TimeStamp, CA::TimeStamp>]";
    *(_QWORD *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    LODWORD(v76) = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v68);
    *(std::runtime_error *)&v71.__r_.__value_.__l.__data_ = v68;
    v70 = off_1E69A20A0;
    v71.__r_.__value_.__r.__words[2] = v69;
    v68.__vftable = 0;
    v68.__imp_.__imp_ = 0;
    v69 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v70);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v30, (uint64_t)buf);
  }
  *(_OWORD *)buf = v56;
  *(_OWORD *)&buf[16] = v57;
  *(_OWORD *)&buf[32] = v58;
  v76 = v59;
  v64 = v52;
  v65 = v53;
  v66 = v54;
  v67 = v55;
  *(float *)&v70 = a5;
  v18 = *((_QWORD *)v16 + 3);
  if (!v18)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t, uint64_t (***)(), _BYTE *, std::runtime_error *))(*(_QWORD *)v18 + 48))(v18, a2, &v70, buf, &v64);
  v19 = v63;
  if (v63)
  {
    p_shared_owners = (unint64_t *)&v63->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (unint64_t *)&v11->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_1B5BCC3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::runtime_error a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AMCP::System::get_wire_connection_properties(AMCP::System *this, const AMCP::Wire_Identifier *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  int8x8_t *v6;
  AMCP::Log::Scope_Registry *operation;
  _QWORD *v8;
  std::string::size_type v9;
  char v10;
  char *v11;
  char v12;
  unint64_t v13;
  AMCP::Log::Scope_Registry *v14;
  AMCP::Log::Scope_Registry *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  NSObject *v23;
  unint64_t *v24;
  unint64_t v25;
  _opaque_pthread_t *v26;
  mach_port_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  NSObject *v30;
  unint64_t *v31;
  unint64_t v32;
  _opaque_pthread_t *v33;
  mach_port_t v34;
  void *exception;
  std::__shared_weak_count *v36;
  NSObject *v37;
  unint64_t *v38;
  unint64_t v39;
  _opaque_pthread_t *v40;
  mach_port_t v41;
  void *v42;
  std::__shared_weak_count *v43;
  NSObject *v44;
  unint64_t *v45;
  unint64_t v46;
  _opaque_pthread_t *v47;
  mach_port_t v48;
  void *v49;
  std::string v50;
  uint64_t v51;
  int v52;
  std::string __p;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  _QWORD *v62;
  std::__shared_weak_count *v63;
  std::runtime_error v64;
  std::string::size_type v65;
  uint64_t (**v66)();
  std::string v67;
  std::string v68;
  std::runtime_error v69;
  std::runtime_error v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  char v76;
  _QWORD v77[2];
  _QWORD v78[2];
  uint8_t buf[8];
  __int128 v80;
  __int128 v81;
  char *v82;
  _BYTE v83[15];
  char v84;
  uint64_t v85;
  int v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3
    || (v3 = std::__shared_weak_count::lock(v3), (v5 = v3) == 0)
    || (v6 = (int8x8_t *)*((_QWORD *)this + 2)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v29 = (std::__shared_weak_count *)v80;
    v30 = **(NSObject ***)buf;
    if ((_QWORD)v80)
    {
      v31 = (unint64_t *)(v80 + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v33 = pthread_self();
      v34 = pthread_mach_thread_np(v33);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v34;
      LOWORD(v80) = 2080;
      *(_QWORD *)((char *)&v80 + 2) = "System.cpp";
      WORD5(v80) = 1024;
      HIDWORD(v80) = 152;
      LOWORD(v81) = 2080;
      *(_QWORD *)((char *)&v81 + 2) = "!core_ptr";
      _os_log_error_impl(&dword_1B57BA000, v30, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v69);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v64, "No underlying object");
    std::runtime_error::runtime_error(&v70, &v64);
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v75 = -1;
    v70.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v71 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v70);
    *((_QWORD *)&v81 + 1) = "std::optional<Wire_Connection_Properties> AMCP::System::get_wire_connection_properties(const"
                            " Wire_Identifier &)";
    v82 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/System.cpp";
    *(_DWORD *)v83 = 152;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v68.__r_.__value_.__l.__data_);
    v67 = v68;
    v66 = off_1E69A20A0;
    memset(&v68, 0, sizeof(v68));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v66);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v56 = 0x676C6F6267776370;
  v57 = 0;
  if (*((char *)a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  else
    v50 = *(std::string *)a2;
  v51 = *((_QWORD *)a2 + 3);
  v52 = *((_DWORD *)a2 + 8);
  if (*((char *)a2 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
  else
    __p = *(std::string *)((char *)a2 + 40);
  v54 = *((_QWORD *)a2 + 8);
  v55 = *((_DWORD *)a2 + 18);
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v62, v6, (unsigned int *)&v56);
  v8 = v62;
  if (!v62)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v36 = (std::__shared_weak_count *)v80;
    v37 = **(NSObject ***)buf;
    if ((_QWORD)v80)
    {
      v38 = (unint64_t *)(v80 + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      v40 = pthread_self();
      v41 = pthread_mach_thread_np(v40);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v41;
      LOWORD(v80) = 2080;
      *(_QWORD *)((char *)&v80 + 2) = "Core.h";
      WORD5(v80) = 1024;
      HIDWORD(v80) = 202;
      _os_log_error_impl(&dword_1B57BA000, v37, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)v78);
    v42 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v68);
    std::runtime_error::runtime_error(&v69, &v68);
    std::runtime_error::runtime_error(&v70, &v69);
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v75 = -1;
    v70.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v71 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v70);
    *((_QWORD *)&v81 + 1) = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) co"
                            "nst [Return_Type = std::optional<AMCP::Wire_Connection_Properties>, Argument_Types = <AMCP::"
                            "Wire_Identifier>]";
    v82 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    *(_DWORD *)v83 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v64);
    *(std::runtime_error *)&v67.__r_.__value_.__l.__data_ = v64;
    v66 = off_1E69A20A0;
    v67.__r_.__value_.__r.__words[2] = v65;
    v64.__vftable = 0;
    v64.__imp_.__imp_ = 0;
    v65 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v66);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v42, (uint64_t)buf);
  }
  v78[0] = v50.__r_.__value_.__l.__size_;
  v9 = v50.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)v78 + 7) = *(std::string::size_type *)((char *)&v50.__r_.__value_.__r.__words[1] + 7);
  v10 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
  memset(&v50, 0, sizeof(v50));
  v60 = v51;
  v61 = v52;
  v11 = (char *)__p.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)v77 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
  v77[0] = __p.__r_.__value_.__l.__size_;
  v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  memset(&__p, 0, sizeof(__p));
  v59 = v55;
  v58 = v54;
  v13 = AMCP::Implementation::get_type_marker<std::function<std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>>();
  v14 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v13);
  if (!v14)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v43 = (std::__shared_weak_count *)v80;
    v44 = **(NSObject ***)buf;
    if ((_QWORD)v80)
    {
      v45 = (unint64_t *)(v80 + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      v47 = pthread_self();
      v48 = pthread_mach_thread_np(v47);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v48;
      LOWORD(v80) = 2080;
      *(_QWORD *)((char *)&v80 + 2) = "Operation.h";
      WORD5(v80) = 1024;
      HIDWORD(v80) = 154;
      _os_log_error_impl(&dword_1B57BA000, v44, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v76);
    v49 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v68);
    std::runtime_error::runtime_error(&v69, &v68);
    std::runtime_error::runtime_error(&v70, &v69);
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v75 = -1;
    v70.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v71 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v70);
    *((_QWORD *)&v81 + 1) = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std"
                            "::optional<AMCP::Wire_Connection_Properties>, Argument_Types = <AMCP::Wire_Identifier>]";
    v82 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    *(_DWORD *)v83 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v64);
    *(std::runtime_error *)&v67.__r_.__value_.__l.__data_ = v64;
    v66 = off_1E69A20A0;
    v67.__r_.__value_.__r.__words[2] = v65;
    v64.__vftable = 0;
    v64.__imp_.__imp_ = 0;
    v65 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v66);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v49, (uint64_t)buf);
  }
  v15 = v14;
  if (!*((_QWORD *)v14 + 7)
    || (*(_QWORD *)buf = AMCP::Implementation::get_type_marker<std::function<std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>>(),
        (v14 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, _QWORD, uint8_t *))v15 + 7))(4, (uint64_t)v15 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v22 = (std::__shared_weak_count *)v80;
    v23 = **(NSObject ***)buf;
    if ((_QWORD)v80)
    {
      v24 = (unint64_t *)(v80 + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v26 = pthread_self();
      v27 = pthread_mach_thread_np(v26);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v27;
      LOWORD(v80) = 2080;
      *(_QWORD *)((char *)&v80 + 2) = "Operation.h";
      WORD5(v80) = 1024;
      HIDWORD(v80) = 161;
      _os_log_error_impl(&dword_1B57BA000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v76);
    v28 = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v68);
    std::runtime_error::runtime_error(&v69, &v68);
    std::runtime_error::runtime_error(&v70, &v69);
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v75 = -1;
    v70.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v71 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v70);
    *((_QWORD *)&v81 + 1) = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std"
                            "::optional<AMCP::Wire_Connection_Properties>, Argument_Types = <AMCP::Wire_Identifier>]";
    v82 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    *(_DWORD *)v83 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v64);
    *(std::runtime_error *)&v67.__r_.__value_.__l.__data_ = v64;
    v66 = off_1E69A20A0;
    v67.__r_.__value_.__r.__words[2] = v65;
    v64.__vftable = 0;
    v64.__imp_.__imp_ = 0;
    v65 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v66);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v28, (uint64_t)buf);
  }
  *(_QWORD *)buf = v9;
  *(_QWORD *)&v80 = v78[0];
  *(_QWORD *)((char *)&v80 + 7) = *(_QWORD *)((char *)v78 + 7);
  HIBYTE(v80) = v10;
  v78[0] = 0;
  *(_QWORD *)((char *)v78 + 7) = 0;
  *(_QWORD *)&v81 = v60;
  DWORD2(v81) = v61;
  v82 = v11;
  *(_QWORD *)v83 = v77[0];
  *(_QWORD *)&v83[7] = *(_QWORD *)((char *)v77 + 7);
  v84 = v12;
  *(_QWORD *)((char *)v77 + 7) = 0;
  v77[0] = 0;
  v86 = v59;
  v85 = v58;
  v16 = *((_QWORD *)v14 + 3);
  if (!v16)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v16 + 48))(v16, buf);
  if (v84 < 0)
    operator delete(v82);
  if (SHIBYTE(v80) < 0)
    operator delete(*(void **)buf);
  v17 = v63;
  if (v63)
  {
    p_shared_owners = (unint64_t *)&v63->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  v20 = (unint64_t *)&v5->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1B5BCD134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::runtime_error a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,std::runtime_error a44,std::runtime_error a45,uint64_t a46,uint64_t a47)
{
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v50;

  if (a14 < 0)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v47->__shared_owners_;
  do
    v50 = __ldaxr(p_shared_owners);
  while (__stlxr(v50 - 1, p_shared_owners));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::System::Config_Change_Observer::Config_Change_Observer(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;

  v5 = **a2;
  v6 = (std::__shared_weak_count *)(*a2)[1];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = 0;
  }
  *(_QWORD *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 24) = 0;
  return a1;
}

uint64_t AMCP::System::Config_Change_Observer::Config_Change_Observer(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t v13;

  v7 = **a2;
  v8 = (std::__shared_weak_count *)(*a2)[1];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = 0;
  }
  *(_QWORD *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 24) = a4;
  return a1;
}

void AMCP::System::Config_Change_Observer::~Config_Change_Observer(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;

  AMCP::System::Config_Change_Observer::reset((AMCP::System::Config_Change_Observer *)this);
  v2 = this[1];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void AMCP::System::Config_Change_Observer::reset(AMCP::System::Config_Change_Observer *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  char v25;
  void **v26;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v2 && (v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    v4 = v3;
    v5 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v6 = *((_QWORD *)this + 2);
      if (v6)
      {
        v7 = *(_QWORD *)(v5 + 32);
        if (*((_BYTE *)this + 24))
        {
          AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::deregister_observer(v7 + 1568, v6);
        }
        else
        {
          AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::deregister_observer(v7 + 2000, v6);
          v8 = *(_QWORD *)(v5 + 32);
          v9 = *((_QWORD *)this + 2);
          v24 = v8 + 1784;
          v25 = 1;
          std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v8 + 1784));
          if (*(_BYTE *)(v8 + 1952))
          {
            v10 = *(_QWORD **)(v8 + 1960);
            v11 = *(_QWORD **)(v8 + 1968);
            while (v10 != v11)
            {
              v12 = (_QWORD *)v10[2];
              if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>::find((_QWORD *)v10[1], v12, v9))
              {
                v14 = v13;
                if (v13 + 9 != v12)
                {
                  do
                  {
                    v15 = v14;
                    v16 = v14[9];
                    v14 += 9;
                    *v15 = v16;
                    std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>::operator=[abi:ne180100](v15 + 1, (uint64_t)(v15 + 10));
                  }
                  while (v15 + 18 != v12);
                  v12 = (_QWORD *)v10[2];
                }
                while (v12 != v14)
                {
                  v12 -= 9;
                  std::__destroy_at[abi:ne180100]<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,0>(v12);
                }
                v10[2] = v14;
                if ((_QWORD *)v10[1] == v14)
                {
                  v17 = v10 + 5;
                  v18 = *(_QWORD **)(v8 + 1968);
                  if (v10 + 5 != v18)
                  {
                    do
                    {
                      v10 = v17;
                      *((_DWORD *)v17 - 10) = *(_DWORD *)v17;
                      v19 = *((_OWORD *)v17 - 2);
                      *((_OWORD *)v17 - 2) = *(_OWORD *)(v17 + 1);
                      *(_OWORD *)(v17 + 1) = v19;
                      v20 = *(v17 - 2);
                      *(v10 - 2) = v10[3];
                      v10[3] = v20;
                      v17 = v10 + 5;
                    }
                    while (v10 + 5 != v18);
                    v17 = *(_QWORD **)(v8 + 1968);
                  }
                  if (v17 != v10)
                  {
                    do
                    {
                      v21 = v17 - 5;
                      v26 = (void **)(v17 - 4);
                      std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__destroy_vector::operator()[abi:ne180100](&v26);
                      v17 = v21;
                    }
                    while (v21 != v10);
                  }
                  *(_QWORD *)(v8 + 1968) = v10;
                }
                break;
              }
              v10 += 5;
            }
          }
          std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v24);
        }
      }
    }
    *((_QWORD *)this + 2) = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

_QWORD *AMCP::System::create_begin_config_change_observer@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v11, a2);
  v14 = 0;
  v5 = operator new(0x28uLL);
  *v5 = &off_1E6995580;
  v6 = (uint64_t)v12;
  if (!v12)
    goto LABEL_4;
  if (v12 != v11)
  {
    v6 = (*(uint64_t (**)(void))(*v12 + 16))();
LABEL_4:
    v5[4] = v6;
    goto LABEL_6;
  }
  v5[4] = v5 + 1;
  (*(void (**)(_QWORD *))(v11[0] + 24))(v11);
LABEL_6:
  v14 = v5;
  AMCP::System::create_begin_config_change_observer(a1, (uint64_t)v13, a3);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_11;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_11:
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_1B5BCD9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  void *v17;
  char *v19;
  uint64_t v20;

  operator delete(v17);
  v19 = a13;
  if (a13 == &a10)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(a1);
}

void AMCP::System::create_begin_config_change_observer(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  uint64_t **v8;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  void *exception;
  __int128 v19;
  uint64_t v20;
  uint64_t (**v21)();
  __int128 v22;
  uint64_t v23;
  std::runtime_error v24;
  std::runtime_error v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  uint8_t buf[8];
  _BYTE v33[10];
  __int16 v34;
  int v35;
  __int16 v36;
  _BYTE v37[14];
  const char *v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v5 = (std::__shared_weak_count *)a1[3];
  if (!v5 || (v5 = std::__shared_weak_count::lock(v5), (v7 = v5) == 0) || !a1[2])
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = *(std::__shared_weak_count **)v33;
    v13 = **(NSObject ***)buf;
    if (*(_QWORD *)v33)
    {
      v14 = (unint64_t *)(*(_QWORD *)v33 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v17;
      *(_WORD *)v33 = 2080;
      *(_QWORD *)&v33[2] = "System.cpp";
      v34 = 1024;
      v35 = 212;
      v36 = 2080;
      *(_QWORD *)v37 = "!core_ptr";
      _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v31);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v24, "No underlying object");
    std::runtime_error::runtime_error(&v25, &v24);
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = -1;
    v25.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v26 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v25);
    *(_QWORD *)&v37[6] = "System::Config_Change_Observer AMCP::System::create_begin_config_change_observer(const Config_C"
                         "hange_Observer_Proc &) const";
    v38 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/System.cpp";
    v39 = 212;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
    v21 = off_1E69A20A0;
    v22 = v19;
    v23 = v20;
    v19 = 0uLL;
    v20 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v21);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v8 = (uint64_t **)a1[4];
  v9 = AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::register_observer(*(_QWORD *)(**v8 + 32) + 1568, (unsigned int *)(*(_QWORD *)(**v8 + 32) + 1776), a2);
  AMCP::System::Config_Change_Observer::Config_Change_Observer(a3, v8, v9, 1);
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1B5BCDD54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20)
{
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v23;

  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0,std::allocator<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6995580;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0,std::allocator<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6995580;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0,std::allocator<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6995580;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B5BCDF7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0,std::allocator<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6995580;
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0,std::allocator<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0,std::allocator<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0,std::allocator<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::operator()(uint64_t a1, int *a2)
{
  uint64_t v2;
  int v4;

  v4 = *a2;
  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v2 + 48))(v2, &v4);
}

uint64_t std::__function::__func<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0,std::allocator<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK4AMCP6System35create_begin_config_change_observerERKNSt3__18functionIFvjEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0,std::allocator<AMCP::System::create_begin_config_change_observer(std::function<void ()(unsigned int)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::target_type()
{
}

_QWORD *AMCP::System::create_end_config_change_observer@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v11, a2);
  v14 = 0;
  v5 = operator new(0x28uLL);
  *v5 = &off_1E6995610;
  v6 = (uint64_t)v12;
  if (!v12)
    goto LABEL_4;
  if (v12 != v11)
  {
    v6 = (*(uint64_t (**)(void))(*v12 + 16))();
LABEL_4:
    v5[4] = v6;
    goto LABEL_6;
  }
  v5[4] = v5 + 1;
  (*(void (**)(_QWORD *))(v11[0] + 24))(v11);
LABEL_6:
  v14 = v5;
  AMCP::System::create_end_config_change_observer(a1, (uint64_t)v13, a3);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_11;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_11:
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_1B5BCE1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  void *v17;
  char *v19;
  uint64_t v20;

  operator delete(v17);
  v19 = a13;
  if (a13 == &a10)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(a1);
}

void AMCP::System::create_end_config_change_observer(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  uint64_t **v8;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  void *exception;
  __int128 v19;
  uint64_t v20;
  uint64_t (**v21)();
  __int128 v22;
  uint64_t v23;
  std::runtime_error v24;
  std::runtime_error v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  uint8_t buf[8];
  _BYTE v33[10];
  __int16 v34;
  int v35;
  __int16 v36;
  _BYTE v37[14];
  const char *v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v5 = (std::__shared_weak_count *)a1[3];
  if (!v5 || (v5 = std::__shared_weak_count::lock(v5), (v7 = v5) == 0) || !a1[2])
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = *(std::__shared_weak_count **)v33;
    v13 = **(NSObject ***)buf;
    if (*(_QWORD *)v33)
    {
      v14 = (unint64_t *)(*(_QWORD *)v33 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v17;
      *(_WORD *)v33 = 2080;
      *(_QWORD *)&v33[2] = "System.cpp";
      v34 = 1024;
      v35 = 226;
      v36 = 2080;
      *(_QWORD *)v37 = "!core_ptr";
      _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v31);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v24, "No underlying object");
    std::runtime_error::runtime_error(&v25, &v24);
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = -1;
    v25.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v26 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v25);
    *(_QWORD *)&v37[6] = "System::Config_Change_Observer AMCP::System::create_end_config_change_observer(const Config_Cha"
                         "nge_Observer_Proc &) const";
    v38 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/System.cpp";
    v39 = 226;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
    v21 = off_1E69A20A0;
    v22 = v19;
    v23 = v20;
    v19 = 0uLL;
    v20 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v21);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v8 = (uint64_t **)a1[4];
  v9 = AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::register_observer(*(_QWORD *)(**v8 + 32) + 2000, (unsigned int *)(*(_QWORD *)(**v8 + 32) + 2208), a2);
  AMCP::System::Config_Change_Observer::Config_Change_Observer(a3, v8, v9, 0);
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1B5BCE544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20)
{
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v23;

  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0,std::allocator<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6995610;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0,std::allocator<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6995610;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0,std::allocator<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E6995610;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B5BCE76C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0,std::allocator<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E6995610;
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0,std::allocator<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0,std::allocator<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0,std::allocator<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::operator()(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v6;

  v6 = *a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v4 + 48))(v4, &v6, a4);
}

uint64_t std::__function::__func<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0,std::allocator<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK4AMCP6System33create_end_config_change_observerERKNSt3__18functionIFvjRKNS1_5tupleIJNS1_6vectorIjNS1_9allocatorIjEEEES7_N5boost9container8flat_mapIjNS3_IJNSA_INS_7AddressENS_5ThingENSB_15Is_Exact_BeforeEvEESE_SE_EEENS1_4lessIjEEvEEEEEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0,std::allocator<AMCP::System::create_end_config_change_observer(std::function<void ()(unsigned int,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)> const&)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::target_type()
{
}

void AMCP::System::create_continuing_config_change_observer(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  uint64_t **v8;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  void *exception;
  __int128 v19;
  uint64_t v20;
  uint64_t (**v21)();
  __int128 v22;
  uint64_t v23;
  std::runtime_error v24;
  std::runtime_error v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  uint8_t buf[8];
  _BYTE v33[10];
  __int16 v34;
  int v35;
  __int16 v36;
  _BYTE v37[14];
  const char *v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v5 = (std::__shared_weak_count *)a1[3];
  if (!v5 || (v5 = std::__shared_weak_count::lock(v5), (v7 = v5) == 0) || !a1[2])
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = *(std::__shared_weak_count **)v33;
    v13 = **(NSObject ***)buf;
    if (*(_QWORD *)v33)
    {
      v14 = (unint64_t *)(*(_QWORD *)v33 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v17;
      *(_WORD *)v33 = 2080;
      *(_QWORD *)&v33[2] = "System.cpp";
      v34 = 1024;
      v35 = 205;
      v36 = 2080;
      *(_QWORD *)v37 = "!core_ptr";
      _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v31);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v24, "No underlying object");
    std::runtime_error::runtime_error(&v25, &v24);
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = -1;
    v25.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v26 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v25);
    *(_QWORD *)&v37[6] = "System::Config_Change_Observer AMCP::System::create_continuing_config_change_observer(const Con"
                         "fig_Change_Observer_Proc &) const";
    v38 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/System.cpp";
    v39 = 205;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
    v21 = off_1E69A20A0;
    v22 = v19;
    v23 = v20;
    v19 = 0uLL;
    v20 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v21);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v8 = (uint64_t **)a1[4];
  v9 = AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::register_observer(*(_QWORD *)(**v8 + 32) + 2216, (unsigned int *)(*(_QWORD *)(**v8 + 32) + 2424), a2);
  AMCP::System::Config_Change_Observer::Config_Change_Observer(a3, v8, v9, 1);
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1B5BCEB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20)
{
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v23;

  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::System::create_ioc_graph_update_observer(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  uint64_t **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  unint64_t *v18;
  unint64_t *v19;
  std::runtime_error_vtbl *v20;
  const char *v21;
  std::runtime_error_vtbl *v22;
  int v23;
  _DWORD *v24;
  unint64_t v25;
  BOOL v26;
  _DWORD *v27;
  unint64_t v28;
  uint64_t *v29;
  const char **v30;
  uint64_t v31;
  unint64_t v32;
  _DWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  NSObject *v39;
  unint64_t *v40;
  unint64_t v41;
  _opaque_pthread_t *v42;
  mach_port_t v43;
  void *exception;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  int v57;
  int64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  std::runtime_error_vtbl *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  std::runtime_error v69;
  __int128 v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t *p_shared_owners;
  unint64_t v86;
  uint64_t v87;
  std::runtime_error v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  std::runtime_error v93;
  std::runtime_error_vtbl *v94;
  _BYTE v95[24];
  std::runtime_error_vtbl *v96;
  __int16 v97;
  uint64_t v98;
  char v99;
  _BYTE v100[32];
  uint64_t v101;
  uint8_t buf[8];
  _BYTE v103[10];
  __int16 v104;
  int v105;
  __int16 v106;
  _BYTE v107[14];
  const char *v108;
  int v109;
  const char **v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v5 = (std::__shared_weak_count *)a1[3];
  if (!v5 || (v5 = std::__shared_weak_count::lock(v5), (v7 = v5) == 0) || !a1[2])
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v38 = *(std::__shared_weak_count **)v103;
    v39 = **(NSObject ***)buf;
    if (*(_QWORD *)v103)
    {
      v40 = (unint64_t *)(*(_QWORD *)v103 + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      v42 = pthread_self();
      v43 = pthread_mach_thread_np(v42);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v43;
      *(_WORD *)v103 = 2080;
      *(_QWORD *)&v103[2] = "System.cpp";
      v104 = 1024;
      v105 = 219;
      v106 = 2080;
      *(_QWORD *)v107 = "!core_ptr";
      _os_log_error_impl(&dword_1B57BA000, v39, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v98);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v93, "No underlying object");
    std::runtime_error::runtime_error(&v88, &v93);
    *((_QWORD *)&v89 + 1) = 0;
    v90 = 0;
    v91 = 0;
    v92 = -1;
    v88.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    *(_QWORD *)&v89 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v88);
    *(_QWORD *)&v107[6] = "System::Config_Change_Observer AMCP::System::create_ioc_graph_update_observer(const IOC_Graph_"
                          "Update_Proc_Pair &) const";
    v108 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/System.cpp";
    v109 = 219;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v95);
    *(_OWORD *)&v100[8] = *(_OWORD *)v95;
    *(_QWORD *)v100 = off_1E69A20A0;
    *(_QWORD *)&v100[24] = *(_QWORD *)&v95[16];
    memset(v95, 0, sizeof(v95));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)v100);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v8 = (uint64_t **)a1[4];
  v9 = *(_QWORD *)(**v8 + 32);
  v98 = v9 + 1784;
  v99 = 1;
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v9 + 1784));
  if (!*(_BYTE *)(v9 + 1952))
  {
    v10 = 0;
    goto LABEL_78;
  }
  do
    v10 = __ldaxr(&AMCP::Observer::Implementation::get_next_token(void)::s_next_token);
  while (__stlxr(v10 + 1, &AMCP::Observer::Implementation::get_next_token(void)::s_next_token));
  if (!AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(*(_DWORD **)(v9 + 1960), *(_DWORD **)(v9 + 1968), *(_DWORD *)(v9 + 1992)))
  {
    *(_QWORD *)buf = v10;
    v93.__vftable = 0;
    v93.__imp_.__imp_ = 0;
    v94 = 0;
    v87 = std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>::pair[abi:ne180100]((uint64_t)v103, a2);
    v88.__vftable = (std::runtime_error_vtbl *)&v93;
    LOBYTE(v88.__imp_.__imp_) = 0;
    v20 = (std::runtime_error_vtbl *)operator new(0x48uLL);
    v93.__vftable = v20;
    v93.__imp_.__imp_ = (const char *)v20;
    v21 = (const char *)&v20[3];
    v94 = v20 + 3;
    v20->~runtime_error = *(void (__cdecl **)(std::runtime_error *__hidden))buf;
    std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>::pair[abi:ne180100]((uint64_t)&v20->~runtime_error_0, v87);
    v22 = v94;
    v93.__imp_.__imp_ = v21;
    v94 = 0;
    *(_DWORD *)v95 = *(_DWORD *)(v9 + 1992);
    v23 = *(_DWORD *)v95;
    *(std::runtime_error *)&v95[8] = v93;
    v93.__vftable = 0;
    v93.__imp_.__imp_ = 0;
    v96 = v22;
    v24 = *(_DWORD **)(v9 + 1960);
    v25 = *(_QWORD *)(v9 + 1968);
    v26 = AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(v24, (_DWORD *)v25, *(unsigned int *)v95);
    v28 = (unint64_t)v27;
    if (v26)
    {
      *v27 = v23;
      v29 = (uint64_t *)&v95[8];
    }
    else
    {
      v32 = *(_QWORD *)(v9 + 1976);
      if (v25 >= v32)
      {
        v45 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v25 - (_QWORD)v24) >> 3) + 1;
        if (v45 > 0x666666666666666)
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        v46 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v32 - (_QWORD)v24) >> 3);
        if (2 * v46 > v45)
          v45 = 2 * v46;
        if (v46 >= 0x333333333333333)
          v47 = 0x666666666666666;
        else
          v47 = v45;
        v101 = v9 + 1976;
        if (v47)
          v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v47);
        else
          v48 = 0;
        v58 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v28 - (_QWORD)v24) >> 3);
        v59 = v47 + 8 * ((uint64_t)(v28 - (_QWORD)v24) >> 3);
        *(_QWORD *)v100 = v47;
        *(_QWORD *)&v100[8] = v59;
        *(_QWORD *)&v100[16] = v59;
        *(_QWORD *)&v100[24] = v47 + 40 * v48;
        if (v58 == v48)
        {
          if ((uint64_t)(v28 - (_QWORD)v24) < 1)
          {
            if ((_DWORD *)v28 == v24)
              v61 = 1;
            else
              v61 = 0x999999999999999ALL * ((uint64_t)(v28 - (_QWORD)v24) >> 3);
            v90 = v101;
            v62 = (std::runtime_error_vtbl *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v61);
            v63 = (char *)v62 + 40 * (v61 >> 2);
            v88.__vftable = v62;
            v88.__imp_.__imp_ = v63;
            *(_QWORD *)&v89 = v63;
            *((_QWORD *)&v89 + 1) = (char *)v62 + 40 * v64;
            v65 = *(_QWORD *)&v100[8];
            if (*(_QWORD *)&v100[16] != *(_QWORD *)&v100[8])
            {
              v66 = &v63[*(_QWORD *)&v100[16] - *(_QWORD *)&v100[8]];
              do
              {
                *(_DWORD *)v63 = *(_DWORD *)v65;
                *((_QWORD *)v63 + 2) = 0;
                *((_QWORD *)v63 + 3) = 0;
                *((_QWORD *)v63 + 1) = 0;
                *((_QWORD *)v63 + 1) = *(_QWORD *)(v65 + 8);
                *(_QWORD *)(v65 + 8) = 0;
                v67 = *((_QWORD *)v63 + 2);
                *((_QWORD *)v63 + 2) = *(_QWORD *)(v65 + 16);
                *(_QWORD *)(v65 + 16) = v67;
                v68 = *((_QWORD *)v63 + 3);
                *((_QWORD *)v63 + 3) = *(_QWORD *)(v65 + 24);
                *(_QWORD *)(v65 + 24) = v68;
                v63 += 40;
                v65 += 40;
              }
              while (v63 != v66);
              v63 = v66;
            }
            *(_QWORD *)&v89 = v63;
            v69 = *(std::runtime_error *)v100;
            v70 = *(_OWORD *)&v100[16];
            *(std::runtime_error *)v100 = v88;
            *(_OWORD *)&v100[16] = v89;
            v88 = v69;
            v89 = v70;
            std::__split_buffer<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>::~__split_buffer((uint64_t)&v88);
            v59 = *(_QWORD *)&v100[16];
          }
          else
          {
            if (v58 >= -1)
              v60 = v58 + 1;
            else
              v60 = v58 + 2;
            v59 -= 40 * (v60 >> 1);
            *(_QWORD *)&v100[8] = v59;
            *(_QWORD *)&v100[16] = v59;
          }
        }
        *(_DWORD *)v59 = *(_DWORD *)v95;
        *(_QWORD *)(v59 + 16) = 0;
        *(_QWORD *)(v59 + 24) = 0;
        *(_QWORD *)(v59 + 8) = 0;
        std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__init_with_size[abi:ne180100]<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*>((_QWORD *)(v59 + 8), *(uint64_t *)&v95[8], *(uint64_t *)&v95[16], 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)&v95[16] - *(_QWORD *)&v95[8]) >> 3));
        *(_WORD *)(v59 + 32) = v97;
        v71 = *(_QWORD **)&v100[8];
        v72 = *(_QWORD *)&v100[16] + 40;
        *(_QWORD *)&v100[16] += 40;
        v73 = *(_QWORD **)(v9 + 1960);
        if ((_QWORD *)v28 != v73)
        {
          v74 = (_QWORD *)v28;
          do
          {
            v75 = *((_DWORD *)v74 - 10);
            v74 -= 5;
            *((_DWORD *)v71 - 10) = v75;
            v71 -= 5;
            v71[2] = 0;
            v71[3] = 0;
            v71[1] = 0;
            v71[1] = v74[1];
            v74[1] = 0;
            v76 = v71[2];
            v71[2] = v74[2];
            v74[2] = v76;
            v77 = v71[3];
            v71[3] = v74[3];
            v74[3] = v77;
          }
          while (v74 != v73);
          v72 = *(_QWORD *)&v100[16];
        }
        *(_QWORD *)&v100[8] = v71;
        v78 = *(_QWORD *)(v9 + 1968);
        if (v28 != v78)
        {
          do
          {
            *(_DWORD *)v72 = *(_DWORD *)v28;
            *(_QWORD *)(v72 + 16) = 0;
            *(_QWORD *)(v72 + 24) = 0;
            *(_QWORD *)(v72 + 8) = 0;
            *(_QWORD *)(v72 + 8) = *(_QWORD *)(v28 + 8);
            *(_QWORD *)(v28 + 8) = 0;
            v79 = *(_QWORD *)(v72 + 16);
            *(_QWORD *)(v72 + 16) = *(_QWORD *)(v28 + 16);
            *(_QWORD *)(v28 + 16) = v79;
            v80 = *(_QWORD *)(v72 + 24);
            *(_QWORD *)(v72 + 24) = *(_QWORD *)(v28 + 24);
            *(_QWORD *)(v28 + 24) = v80;
            v72 += 40;
            v28 += 40;
          }
          while (v28 != v78);
          v71 = *(_QWORD **)&v100[8];
        }
        v81 = *(_QWORD *)(v9 + 1960);
        *(_QWORD *)(v9 + 1960) = v71;
        *(_QWORD *)&v100[8] = v81;
        *(_QWORD *)&v100[16] = v72;
        v82 = *(_OWORD *)(v9 + 1968);
        *(_QWORD *)(v9 + 1968) = v72;
        v83 = *(_QWORD *)&v100[8];
        *(_QWORD *)(v9 + 1976) = *(_QWORD *)&v100[24];
        *(_OWORD *)&v100[16] = v82;
        *(_QWORD *)v100 = v83;
        std::__split_buffer<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>::~__split_buffer((uint64_t)v100);
        goto LABEL_67;
      }
      if (v27 == (_DWORD *)v25)
      {
        *(_DWORD *)v25 = v23;
        *(_QWORD *)(v25 + 16) = 0;
        *(_QWORD *)(v25 + 24) = 0;
        *(_QWORD *)(v25 + 8) = 0;
        std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__init_with_size[abi:ne180100]<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*>((_QWORD *)(v25 + 8), *(uint64_t *)&v95[8], *(uint64_t *)&v95[16], 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)&v95[16] - *(_QWORD *)&v95[8]) >> 3));
        *(_WORD *)(v25 + 32) = v97;
        *(_QWORD *)(v9 + 1968) = v25 + 40;
        goto LABEL_67;
      }
      v33 = v27 + 10;
      v34 = v25 - 40;
      v35 = v25;
      while (v34 < v25)
      {
        *(_DWORD *)v35 = *(_DWORD *)v34;
        *(_QWORD *)(v35 + 16) = 0;
        *(_QWORD *)(v35 + 24) = 0;
        *(_QWORD *)(v35 + 8) = 0;
        *(_QWORD *)(v35 + 8) = *(_QWORD *)(v34 + 8);
        *(_QWORD *)(v34 + 8) = 0;
        v36 = *(_QWORD *)(v35 + 16);
        *(_QWORD *)(v35 + 16) = *(_QWORD *)(v34 + 16);
        *(_QWORD *)(v34 + 16) = v36;
        v37 = *(_QWORD *)(v35 + 24);
        *(_QWORD *)(v35 + 24) = *(_QWORD *)(v34 + 24);
        *(_QWORD *)(v34 + 24) = v37;
        v35 += 40;
        v34 += 40;
      }
      *(_QWORD *)(v9 + 1968) = v35;
      if ((_DWORD *)v25 != v33)
      {
        v49 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v25 - (_QWORD)v33) >> 3);
        v50 = (_QWORD *)(v25 - 16);
        v51 = 10 * v49;
        do
        {
          v52 = &v27[v51];
          *((_DWORD *)v50 - 6) = v27[v51 - 10];
          v53 = *(v50 - 2);
          *(v50 - 2) = *(_QWORD *)&v27[v51 - 8];
          *((_QWORD *)v52 - 4) = v53;
          v54 = *(v50 - 1);
          *(v50 - 1) = *(_QWORD *)&v27[v51 - 6];
          *((_QWORD *)v52 - 3) = v54;
          v55 = *v50;
          *v50 = *(_QWORD *)&v27[v51 - 4];
          v50 -= 5;
          *((_QWORD *)v52 - 2) = v55;
          v51 -= 10;
        }
        while (v51 * 4);
      }
      v56 = v95;
      if (v28 <= (unint64_t)v95)
        v56 = &v95[40 * (*(_QWORD *)(v9 + 1968) > (unint64_t)v95)];
      v57 = *(_DWORD *)v56;
      v29 = (uint64_t *)(v56 + 8);
      *(_DWORD *)v28 = v57;
    }
    AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>::operator=((uint64_t *)(v28 + 8), v29);
LABEL_67:
    v88.__vftable = (std::runtime_error_vtbl *)&v95[8];
    std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
    v88.__vftable = (std::runtime_error_vtbl *)&v93;
    std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
    v30 = v110;
    if (v110 == &v108)
    {
      v31 = 4;
      v30 = &v108;
      v13 = (_QWORD *)v87;
      goto LABEL_72;
    }
    v13 = (_QWORD *)v87;
    goto LABEL_69;
  }
  v12 = v11;
  *(_QWORD *)buf = v10;
  v13 = v103;
  std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>::pair[abi:ne180100]((uint64_t)v103, a2);
  v14 = *(_QWORD **)(v12 + 8);
  v15 = *(_QWORD **)(v12 + 16);
  v16 = (_QWORD *)(v12 + 8);
  v17 = AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>::find(v14, v15, v10);
  v19 = v18;
  if (v17)
  {
    *v18 = v10;
    std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::operator=(v18 + 1, (uint64_t)v103);
    std::function<void ()(AMCP::Graph_Description const&)>::operator=(v19 + 5, (uint64_t)&v108);
  }
  else
  {
    std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::insert(v16, v18, buf);
  }
  v30 = v110;
  if (v110 == &v108)
  {
    v31 = 4;
    v30 = &v108;
LABEL_72:
    (*(void (**)(void))&(*v30)[8 * v31])();
    goto LABEL_73;
  }
LABEL_69:
  if (v30)
  {
    v31 = 5;
    goto LABEL_72;
  }
LABEL_73:
  if (*(_QWORD **)&v107[6] == v13)
  {
    v84 = 4;
    goto LABEL_77;
  }
  if (*(_QWORD *)&v107[6])
  {
    v84 = 5;
    v13 = *(_QWORD **)&v107[6];
LABEL_77:
    (*(void (**)(_QWORD *))(*v13 + 8 * v84))(v13);
  }
LABEL_78:
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v98);
  AMCP::System::Config_Change_Observer::Config_Change_Observer(a3, v8, v10, 0);
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v86 = __ldaxr(p_shared_owners);
  while (__stlxr(v86 - 1, p_shared_owners));
  if (!v86)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1B5BCF5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, std::runtime_error a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,std::runtime_error *a28,char a29,void *__p)
{
  std::__shared_weak_count *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  *(_QWORD *)(v32 + 1968) = v31;
  std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = &a18;
  std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  v35 = *(_QWORD **)(v33 - 112);
  if (v35 == (_QWORD *)(v33 - 136))
  {
    v36 = 4;
    v35 = (_QWORD *)(v33 - 136);
  }
  else
  {
    if (!v35)
      goto LABEL_6;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_6:
  v37 = *(_QWORD **)(v33 - 144);
  if (v37 == a10)
  {
    v38 = 4;
  }
  else
  {
    if (!v37)
      goto LABEL_11;
    v38 = 5;
    a10 = *(_QWORD **)(v33 - 144);
  }
  (*(void (**)(_QWORD *))(*a10 + 8 * v38))(a10);
LABEL_11:
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a26);
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  _Unwind_Resume(a1);
}

void AMCP::System::execute_task_against_config_changes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD block[5];
  dispatch_queue_t queue[41];

  queue[40] = *(dispatch_queue_t *)MEMORY[0x1E0C80C00];
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)queue, *(dispatch_object_t *)(*(_QWORD *)(***(_QWORD ***)(a1 + 32) + 32) + 32));
  v3 = a2;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN10applesauce8dispatch2v19sync_implIZN4AMCP4Core9Conductor11handle_taskERKNSt3__18functionIFvvEEEEUlvE_EEvP16dispatch_queue_sOT_NS6_17integral_constantIbLb1EEE_block_invoke;
  block[3] = &__block_descriptor_tmp_11107;
  block[4] = &v3;
  dispatch_sync(queue[0], block);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)queue);
}

uint64_t ___ZN10applesauce8dispatch2v19sync_implIZN4AMCP4Core9Conductor11handle_taskERKNSt3__18functionIFvvEEEEUlvE_EEvP16dispatch_queue_sOT_NS6_17integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 24);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

void sub_1B5BCF910(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5BCF900);
}

void AMCP::System::execute_task_against_config_changes_async(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[41];

  v11[40] = *MEMORY[0x1E0C80C00];
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v11, *(dispatch_object_t *)(*(_QWORD *)(***(_QWORD ***)(a1 + 32) + 32) + 32));
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
  v3 = v11[0];
  v4 = (_QWORD *)operator new();
  v5 = (uint64_t)v10;
  if (!v10)
    goto LABEL_4;
  if (v10 != v9)
  {
    v5 = (*(uint64_t (**)(void))(*v10 + 16))();
LABEL_4:
    v4[3] = v5;
    goto LABEL_6;
  }
  v4[3] = v4;
  (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v4);
LABEL_6:
  v8 = 0;
  dispatch_async_f(v3, v4, (dispatch_function_t)applesauce::dispatch::v1::async<AMCP::Core::Conductor::handle_task_async(std::function<void ()(void)> const&)::{lambda(void)#1}>(dispatch_queue_s *,AMCP::Core::Conductor::handle_task_async(std::function<void ()(void)> const&)::{lambda(void)#1} &&)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<AMCP::Core::Conductor::handle_task_async(std::function<void ()(void)> const&)::{lambda(void)#1},std::default_delete<AMCP::Core::Conductor::handle_task_async(std::function<void ()(void)> const&)::{lambda(void)#1}>>::reset[abi:ne180100](&v8);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_10;
  }
  if (v10)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(_QWORD *))(*v6 + 8 * v7))(v6);
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v11);
}

void sub_1B5BCFA58(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *applesauce::dispatch::v1::async<AMCP::Core::Conductor::handle_task_async(std::function<void ()(void)> const&)::{lambda(void)#1}>(dispatch_queue_s *,AMCP::Core::Conductor::handle_task_async(std::function<void ()(void)> const&)::{lambda(void)#1} &&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = a1;
  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  return std::unique_ptr<AMCP::Core::Conductor::handle_task_async(std::function<void ()(void)> const&)::{lambda(void)#1},std::default_delete<AMCP::Core::Conductor::handle_task_async(std::function<void ()(void)> const&)::{lambda(void)#1}>>::reset[abi:ne180100](&v3);
}

void sub_1B5BCFAA8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5BCFA8CLL);
}

_QWORD *std::unique_ptr<AMCP::Core::Conductor::handle_task_async(std::function<void ()(void)> const&)::{lambda(void)#1},std::default_delete<AMCP::Core::Conductor::handle_task_async(std::function<void ()(void)> const&)::{lambda(void)#1}>>::reset[abi:ne180100](_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)*result;
  *result = 0;
  if (v1)
  {
    v2 = (_QWORD *)v1[3];
    if (v2 == v1)
    {
      v3 = 4;
      v2 = v1;
    }
    else
    {
      if (!v2)
        goto LABEL_8;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_8:
    JUMPOUT(0x1B5E50688);
  }
  return result;
}

void AMCP::System::wait_for_notification_quiesence(AMCP::System *this, double a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  std::__shared_weak_count *v11[4];
  uint64_t v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 <= 0.0)
    return;
  v12 = mach_absolute_time();
  v13[0] = &off_1E6995690;
  v13[1] = &v12;
  v14 = v13;
  AMCP::System::create_end_config_change_observer(this, (uint64_t)v13, (uint64_t)v11);
  v4 = v14;
  if (v14 == v13)
  {
    v5 = 4;
    v4 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_7;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_7:
  v6 = mach_absolute_time();
  v7 = (uint64_t)(a2 * 24000000.0);
  v8 = atomic_load(&v12);
  if (!v8 || v6 - v8 < v7)
  {
    do
    {
      mach_wait_until(v6 + (uint64_t)(a2 * 0.25 * 24000000.0));
      v6 = mach_absolute_time();
      v9 = atomic_load(&v12);
      if (v9)
        v10 = v6 - v9 >= v7;
      else
        v10 = 0;
    }
    while (!v10);
  }
  AMCP::System::Config_Change_Observer::~Config_Change_Observer(v11);
}

void sub_1B5BCFC54(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::System::wait_for_notification_quiesence(double)::$_0,std::allocator<AMCP::System::wait_for_notification_quiesence(double)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__func()
{
  JUMPOUT(0x1B5E50688);
}

_QWORD *std::__function::__func<AMCP::System::wait_for_notification_quiesence(double)::$_0,std::allocator<AMCP::System::wait_for_notification_quiesence(double)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E6995690;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMCP::System::wait_for_notification_quiesence(double)::$_0,std::allocator<AMCP::System::wait_for_notification_quiesence(double)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E6995690;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMCP::System::wait_for_notification_quiesence(double)::$_0,std::allocator<AMCP::System::wait_for_notification_quiesence(double)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::operator()(uint64_t a1)
{
  unint64_t *v1;
  uint64_t result;

  v1 = *(unint64_t **)(a1 + 8);
  result = mach_absolute_time();
  atomic_store(result, v1);
  return result;
}

uint64_t std::__function::__func<AMCP::System::wait_for_notification_quiesence(double)::$_0,std::allocator<AMCP::System::wait_for_notification_quiesence(double)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK4AMCP6System31wait_for_notification_quiesenceEdE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::System::wait_for_notification_quiesence(double)::$_0,std::allocator<AMCP::System::wait_for_notification_quiesence(double)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::target_type()
{
}

void AMCP::System::find_devices_to_stop_for_config_change(AMCP::System *this@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  std::__shared_mutex_base *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  AMCP::Core::Core *v11;
  unsigned int simple_required;
  unsigned int *v13;
  void *v14;
  unsigned int *v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_mutex_base *v20;
  uint64_t v21;
  unsigned int v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _DWORD *v29;
  std::__shared_mutex_base *v30;
  AMCP::Core::Core *v31;
  AMCP::Log::Scope_Registry *has_property;
  _QWORD *v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  const __CFArray *v40;
  CFIndex Count;
  CFIndex v42;
  CFIndex v43;
  unint64_t v44;
  std::__shared_mutex_base *v45;
  CFTypeRef v46;
  uint8_t *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unsigned int v58;
  _QWORD *v59;
  _QWORD **v60;
  BOOL v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  NSObject *v66;
  unint64_t *v67;
  unint64_t v68;
  _opaque_pthread_t *v69;
  mach_port_t v70;
  unsigned int v71;
  _QWORD *v72;
  uint64_t *v73;
  _DWORD *v74;
  _DWORD *v75;
  _DWORD *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  _BYTE v82[24];
  _QWORD v83[3];
  AMCP::Core::Core *v84;
  std::__shared_weak_count *v85;
  _QWORD *v86;
  _QWORD *v87[2];
  const __CFArray *v88;
  AMCP::Core::Core *v89;
  std::__shared_weak_count *v90;
  void *__p;
  std::__shared_weak_count *v92;
  char v93;
  uint64_t v94;
  int v95;
  AMCP::Address *v96;
  char v97;
  AMCP::Address *v98;
  uint8_t buf[8];
  _BYTE v100[10];
  __int16 v101;
  int v102;
  _BYTE v103[20];
  __int16 v104;
  int v105;
  __int16 v106;
  int v107;
  uint64_t v108;

  v4 = a3;
  v108 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(***((_QWORD ***)this + 4) + 32);
  v6 = (_QWORD *)(v5 + 2648);
  v87[0] = 0;
  v87[1] = 0;
  v86 = v87;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = (uint64_t)(a3 + 1);
  (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(_QWORD *)(v5 + 2648) + 16))(buf, v5 + 2648);
  v7 = (std::__shared_mutex_base *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)buf + 16))(*(_QWORD *)buf);
  v71 = a2;
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v84, v7, a2);
  v8 = *(std::__shared_weak_count **)v100;
  if (*(_QWORD *)v100)
  {
    v9 = (unint64_t *)(*(_QWORD *)v100 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v84;
  if (v84)
  {
    simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(v84);
    if (AMCP::is_base_of((AMCP *)0x61646576, simple_required))
    {
      std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v86, v71, v71);
    }
    else if (AMCP::is_base_of((AMCP *)0x61706C67, simple_required))
    {
      AMCP::Core::Core::get_simple_required_property<1684370979u>(buf, v11);
      v14 = *(void **)buf;
      v13 = *(unsigned int **)v100;
      if (*(_QWORD *)buf != *(_QWORD *)v100)
      {
        v15 = *(unsigned int **)buf;
        do
        {
          std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v86, (uint64_t *)v87, *v15, *v15);
          ++v15;
        }
        while (v15 != v13);
      }
      if (v14)
        operator delete(v14);
    }
    std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(v4, v86, v87);
    AMCP::Graph::Graph::get_nodes(v83, *(_QWORD **)(v5 + 2848));
    v16 = v86;
    if (v86 != v87)
    {
      v72 = v6;
      v73 = v4;
      while (1)
      {
        v17 = *((_DWORD *)v16 + 7);
        AMCP::IO_Core::Graph_Manager::find_timebases_from_object_id((AMCP::IO_Core::Graph_Manager *)v82, v6, v17);
        v18 = v83[0];
        v19 = v83[1];
        while (v18 != v19)
        {
          (*(void (**)(void **__return_ptr, _QWORD *))(*v6 + 16))(&__p, v6);
          v20 = (std::__shared_mutex_base *)(*(uint64_t (**)(void *))(*(_QWORD *)__p + 16))(__p);
          v21 = *(_QWORD *)(*(_QWORD *)v18 + 176);
          if (v21)
            v22 = *(_DWORD *)(v21 + 8);
          else
            v22 = 0;
          AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)buf, v20, v22);
          v23 = v92;
          if (v92)
          {
            p_shared_owners = (unint64_t *)&v92->__shared_owners_;
            do
              v25 = __ldaxr(p_shared_owners);
            while (__stlxr(v25 - 1, p_shared_owners));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          if (*(_QWORD *)buf)
          {
            __p = (void *)0x676C6F6269757462;
            LODWORD(v92) = 0;
            if (AMCP::Core::Core::call_operation_function<BOOL,std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&>(*(AMCP::Address **)buf, (unsigned int *)&__p, (uint64_t)v82))std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(v4, v17, v17);
          }
          v26 = *(std::__shared_weak_count **)v100;
          if (*(_QWORD *)v100)
          {
            v27 = (unint64_t *)(*(_QWORD *)v100 + 8);
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          v18 += 16;
        }
        (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*v6 + 16))(&v77, v6);
        (*(void (**)(_DWORD **__return_ptr, _QWORD *))(*v6 + 48))(&v75, v6);
        v80 = 0;
        v81 = 0;
        v79 = &v80;
        v29 = v75;
        v74 = v76;
        if (v75 != v76)
          break;
LABEL_92:
        if (v29)
        {
          v76 = v29;
          operator delete(v29);
        }
        v55 = v78;
        v6 = v72;
        v4 = v73;
        if (v78)
        {
          v56 = (unint64_t *)&v78->__shared_owners_;
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        if (v81)
          std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(v73, v79, &v80);
        v58 = AMCP::Core::Core::get_simple_required_property<1650682995u>(v84);
        if (AMCP::is_base_of((AMCP *)0x61616767, v58))
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(v73, v71, v71);
        std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v80);
        *(_QWORD *)buf = v82;
        std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        v59 = (_QWORD *)v16[1];
        if (v59)
        {
          do
          {
            v60 = (_QWORD **)v59;
            v59 = (_QWORD *)*v59;
          }
          while (v59);
        }
        else
        {
          do
          {
            v60 = (_QWORD **)v16[2];
            v61 = *v60 == v16;
            v16 = v60;
          }
          while (!v61);
        }
        v16 = v60;
        if (v60 == v87)
          goto LABEL_109;
      }
LABEL_37:
      v30 = (std::__shared_mutex_base *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 16))(v77);
      AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v89, v30, *v29);
      v31 = v89;
      if (!v89 || AMCP::Core::Core::get_simple_required_property<1650682995u>(v89) != 1633773415)
        goto LABEL_85;
      v94 = 0x676C6F6267727570;
      v95 = 0;
      has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::has_property(v31, (const AMCP::Address *)&v94);
      if (!(_DWORD)has_property)
      {
LABEL_116:
        LOBYTE(v96) = 0;
        v97 = 0;
LABEL_117:
        AMCP::Log::Scope_Registry::get(has_property);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v65 = *(std::__shared_weak_count **)v100;
        v66 = **(NSObject ***)buf;
        if (*(_QWORD *)v100)
        {
          v67 = (unint64_t *)(*(_QWORD *)v100 + 8);
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
        {
          v69 = pthread_self();
          v70 = pthread_mach_thread_np(v69);
          v93 = 4;
          strcpy((char *)&__p, "grup");
          *(_DWORD *)buf = 67110658;
          *(_DWORD *)&buf[4] = v70;
          *(_WORD *)v100 = 2080;
          *(_QWORD *)&v100[2] = "Core.h";
          v101 = 1024;
          v102 = 391;
          *(_WORD *)v103 = 2080;
          *(_QWORD *)&v103[2] = "optional_value.operator BOOL() == true";
          *(_WORD *)&v103[10] = 2080;
          *(_QWORD *)&v103[12] = &__p;
          v104 = 1024;
          v105 = 1735159650;
          v106 = 1024;
          v107 = 0;
          _os_log_error_impl(&dword_1B57BA000, v66, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v93 < 0)
            operator delete(__p);
        }
        abort();
      }
      has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&__p, (int8x8_t *)v31, (unsigned int *)&v94);
      v33 = __p;
      if (__p)
      {
        v34 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::ArrayRef ()(void)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v33, v34))
        {
          has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Operation::call_function<applesauce::CF::ArrayRef>((uint64_t)buf, v33);
          v35 = 0;
          v96 = *(AMCP::Address **)buf;
          v97 = 1;
          goto LABEL_48;
        }
        v36 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
        has_property = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v33, v36);
        if (has_property)
        {
          AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)buf, v33);
          has_property = (AMCP::Log::Scope_Registry *)AMCP::Thing::convert_to<applesauce::CF::ArrayRef>(&v98, (uint64_t)buf);
          v96 = v98;
          v97 = 1;
          if (*(_QWORD *)&v103[8])
            has_property = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(_QWORD, uint8_t *, _QWORD, _QWORD))&v103[8])(0, buf, 0, 0);
          v35 = 0;
          goto LABEL_48;
        }
      }
      v35 = 1;
LABEL_48:
      v37 = v92;
      if (v92)
      {
        v38 = (unint64_t *)&v92->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      if (v35)
        goto LABEL_116;
      if (!v97)
        goto LABEL_117;
      v40 = v96;
      if (!v96)
      {
        v88 = 0;
        std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v96);
        goto LABEL_85;
      }
      CFRetain(v96);
      v88 = v40;
      std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v96);
      Count = CFArrayGetCount(v40);
      v42 = CFArrayGetCount(v40);
      if (!Count)
        goto LABEL_83;
      v43 = v42;
      v44 = 0;
      while (1)
      {
        if (v44 == v43)
        {
LABEL_82:
          v40 = v88;
          if (v88)
LABEL_83:
            CFRelease(v40);
LABEL_85:
          v52 = v90;
          if (v90)
          {
            v53 = (unint64_t *)&v90->__shared_owners_;
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
          }
          if (++v29 == v74)
          {
            v29 = v75;
            goto LABEL_92;
          }
          goto LABEL_37;
        }
        applesauce::CF::details::at_to<applesauce::CF::TypeRef>(&v96, v40, v44);
        applesauce::CF::TypeRef::operator applesauce::CF::StringRef((applesauce::CF::StringRef *)&v94, (CFTypeRef *)&v96);
        v45 = (std::__shared_mutex_base *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 16))(v77);
        v46 = (CFTypeRef)v94;
        if (v94)
        {
          CFRetain((CFTypeRef)v94);
          *(_QWORD *)v103 = 0;
          *(_QWORD *)buf = &off_1E6976B50;
          CFRetain(v46);
        }
        else
        {
          *(_QWORD *)buf = &off_1E6976B50;
        }
        *(_QWORD *)v100 = v46;
        *(_QWORD *)v103 = buf;
        AMCP::Core::Broker::fetch_first_core_if (&__p, v45, (uint64_t)buf);
        v47 = *(uint8_t **)v103;
        if (*(uint8_t **)v103 == buf)
          break;
        if (*(_QWORD *)v103)
        {
          v48 = 5;
LABEL_66:
          (*(void (**)(void))(*(_QWORD *)v47 + 8 * v48))();
        }
        if (v46)
          CFRelease(v46);
        if (__p && *(_DWORD *)__p == v17)
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v79, *v29, *v29);
        v49 = v92;
        if (v92)
        {
          v50 = (unint64_t *)&v92->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        if (v94)
          CFRelease((CFTypeRef)v94);
        if (v96)
          CFRelease(v96);
        if (++v44 == Count)
          goto LABEL_82;
      }
      v47 = buf;
      v48 = 4;
      goto LABEL_66;
    }
LABEL_109:
    *(_QWORD *)buf = v83;
    std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  v62 = v85;
  if (v85)
  {
    v63 = (unint64_t *)&v85->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v87[0]);
}

void sub_1B5BD063C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,_QWORD *a34,uint64_t a35,char a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42)
{
  if (a2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*a10);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a34);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *AMCP::System::All_Control_Value_Observer::All_Control_Value_Observer(_QWORD *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;

  v5 = **a2;
  v6 = (std::__shared_weak_count *)(*a2)[1];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *a1 = v5;
    a1[1] = v6;
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a1 = v5;
    a1[1] = 0;
  }
  a1[2] = a3;
  return a1;
}

void AMCP::System::All_Control_Value_Observer::~All_Control_Value_Observer(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;

  AMCP::System::All_Control_Value_Observer::reset((AMCP::System::All_Control_Value_Observer *)this);
  v2 = this[1];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void AMCP::System::All_Control_Value_Observer::reset(AMCP::System::All_Control_Value_Observer *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v2 && (v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    v4 = v3;
    if (*(_QWORD *)this)
    {
      v5 = *((_QWORD *)this + 2);
      if (v5)
        AMCP::Core::Conductor::destroy_control_value_observer(*(AMCP::Core::Conductor **)(*(_QWORD *)this + 32), v5);
    }
    *((_QWORD *)this + 2) = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

void AMCP::System::create_all_control_value_observer(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  uint64_t **v8;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;
  void *exception;
  __int128 v19;
  uint64_t v20;
  uint64_t (**v21)();
  __int128 v22;
  uint64_t v23;
  std::runtime_error v24;
  std::runtime_error v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  uint8_t buf[8];
  _BYTE v33[10];
  __int16 v34;
  int v35;
  __int16 v36;
  _BYTE v37[14];
  const char *v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v5 = (std::__shared_weak_count *)a1[3];
  if (!v5 || (v5 = std::__shared_weak_count::lock(v5), (v7 = v5) == 0) || !a1[2])
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v12 = *(std::__shared_weak_count **)v33;
    v13 = **(NSObject ***)buf;
    if (*(_QWORD *)v33)
    {
      v14 = (unint64_t *)(*(_QWORD *)v33 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v17;
      *(_WORD *)v33 = 2080;
      *(_QWORD *)&v33[2] = "System.cpp";
      v34 = 1024;
      v35 = 295;
      v36 = 2080;
      *(_QWORD *)v37 = "!core_ptr";
      _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v31);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v24, "No underlying object");
    std::runtime_error::runtime_error(&v25, &v24);
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = -1;
    v25.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v26 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v25);
    *(_QWORD *)&v37[6] = "System::All_Control_Value_Observer AMCP::System::create_all_control_value_observer(const All_Co"
                         "ntrol_Value_Observer_Proc &)";
    v38 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/System.cpp";
    v39 = 295;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
    v21 = off_1E69A20A0;
    v22 = v19;
    v23 = v20;
    v19 = 0uLL;
    v20 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v21);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v8 = (uint64_t **)a1[4];
  v9 = AMCP::Observer::Map<std::function<void ()>,unsigned int,true,std::less<unsigned int>>::register_observer(*(_QWORD *)(**v8 + 32) + 2432, (unsigned int *)(*(_QWORD *)(**v8 + 32) + 2640), a2);
  AMCP::System::All_Control_Value_Observer::All_Control_Value_Observer(a3, v8, v9);
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1B5BD0BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20)
{
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v23;

  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::System::update_power_state(uint64_t a1, int a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  void *exception;
  __int128 v15;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  uint64_t v19;
  std::runtime_error v20;
  std::runtime_error v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  _BYTE buf[18];
  __int16 v29;
  int v30;
  __int16 v31;
  _BYTE v32[14];
  const char *v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3
    || (v3 = std::__shared_weak_count::lock(v3), (v5 = v3) == 0)
    || (v3 = *(std::__shared_weak_count **)(a1 + 16)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v8 = *(std::__shared_weak_count **)&buf[8];
    v9 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v10 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v12 = pthread_self();
      v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v13;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "System.cpp";
      v29 = 1024;
      v30 = 304;
      v31 = 2080;
      *(_QWORD *)v32 = "!core_ptr";
      _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v20, "No underlying object");
    std::runtime_error::runtime_error(&v21, &v20);
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
    v22 = &unk_1E69A1FE0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(_QWORD *)&v32[6] = "void AMCP::System::update_power_state(AMCP::Power_State)";
    v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/System.cpp";
    v34 = 304;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    v17 = off_1E69A20A0;
    v18 = v15;
    v19 = v16;
    v15 = 0uLL;
    v16 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v17);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  strcpy(buf, "sppubolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  AMCP::Core::Core::call_operation_function<void,AMCP::Power_State>((AMCP::Address *)v3, (unsigned int *)buf, a2);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1B5BD0F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B5BD0D40);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B5BD115C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B5BD11D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B5BD1248(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B5BD12C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B5BD1344(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B5BD140C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B5BD14E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B5BD18E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t check_posix_error(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  const std::error_category *v4;
  const char *v5;
  std::runtime_error *exception;
  std::runtime_error *v7;
  std::runtime_error v8[2];
  uint8_t buf[4];
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v2 = result;
    v3 = *__error();
    v4 = std::generic_category();
    MEMORY[0x1B5E5022C](v8, v3, v4, v2);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v5 = std::runtime_error::what(v8);
      *(_DWORD *)buf = 136315138;
      v10 = v5;
      _os_log_error_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
    v7 = std::runtime_error::runtime_error(exception, v8);
    v7->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
    v7[1] = v8[1];
    __cxa_throw(v7, MEMORY[0x1E0DE4E38], (void (*)(void *))MEMORY[0x1E0DE4580]);
  }
  return result;
}

void sub_1B5BD1A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

void sub_1B5BD1E24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B5BD1F2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B5BD1FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)Core_Audio_Driver;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B5BD20C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B5BD2478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,std::__shared_weak_count *a29)
{
  os_unfair_lock_s *v29;
  void *v30;
  unint64_t *p_shared_owners;
  unint64_t v33;

  if (a29)
  {
    p_shared_owners = (unint64_t *)&a29->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))a29->__on_zero_shared)(a29);
      std::__shared_weak_count::__release_weak(a29);
    }
  }
  os_unfair_lock_unlock(v29);
  _Unwind_Resume(a1);
}

void sub_1B5BD26BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, __int128 a10, __int16 a11, int a12)
{
  void *v12;
  AMCP::Log::Scope_Registry *v14;
  NSObject *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;

  if (a2)
  {

    v14 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a9, "com.apple.coreaudio", "AMCP");
    v15 = *a9;
    AMCP::Log::Scope::get_os_log_t(*a9);
    objc_claimAutoreleasedReturnValue();
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      LODWORD(a9) = 67109634;
      HIDWORD(a9) = v17;
      LOWORD(a10) = 2080;
      *(_QWORD *)((char *)&a10 + 2) = "Core_Audio_Driver.mm";
      WORD5(a10) = 1024;
      HIDWORD(a10) = 161;
      _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Initialize: Caught exception", (uint8_t *)&a9, 0x18u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B5BD2670);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B5BD28D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B5BD29CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B5BD45A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23,os_unfair_lock_t lock,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,std::runtime_error a33,uint64_t a34,uint64_t a35,std::runtime_error a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,std::runtime_error a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,void *a56)
{
  void *v56;
  _QWORD *v58;
  uint64_t v59;
  void *v60;
  void *v61;

  if (!a2)
    _Unwind_Resume(exception_object);

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a17);
  v58 = a23;
  if ((_QWORD *)*a16 == a23)
  {
    v59 = 4;
  }
  else
  {
    if (!*a16)
    {
LABEL_7:
      std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::__unordered_map_hasher<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::shared_ptr<caulk::ipc::mapped_memory>>>>::~__hash_table(a18);
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a20);
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](a21);
      caulk::mach::details::release_os_object(*(caulk::mach::details **)(a26 + 32), v60);

      std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)a26);
      operator delete(v61);

      os_unfair_lock_unlock(lock);
      __cxa_begin_catch(exception_object);
      __cxa_end_catch();
      JUMPOUT(0x1B5BD3B48);
    }
    v59 = 5;
    v58 = (_QWORD *)*a16;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
  goto LABEL_7;
}

void sub_1B5BD4E98(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1B5BD50E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
  os_unfair_lock_s *v10;

  os_unfair_lock_unlock(v10);
  _Unwind_Resume(a1);
}

void sub_1B5BD51E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, __int128 a10, __int16 a11, int a12)
{
  AMCP::Log::Scope_Registry *v12;
  NSObject *v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;

  if (a2)
  {
    v12 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a9, "com.apple.coreaudio", "AMCP");
    v13 = *a9;
    AMCP::Log::Scope::get_os_log_t(*a9);
    objc_claimAutoreleasedReturnValue();
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = pthread_self();
      v15 = pthread_mach_thread_np(v14);
      LODWORD(a9) = 67109634;
      HIDWORD(a9) = v15;
      LOWORD(a10) = 2080;
      *(_QWORD *)((char *)&a10 + 2) = "Core_Audio_Driver.mm";
      WORD5(a10) = 1024;
      HIDWORD(a10) = 366;
      _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d AddDeviceClient: Caught exception", (uint8_t *)&a9, 0x18u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B5BD519CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B5BD53C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, __int128 a10, __int16 a11, int a12)
{
  AMCP::Log::Scope_Registry *v12;
  NSObject *v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;

  if (a2)
  {
    v12 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a9, "com.apple.coreaudio", "AMCP");
    v13 = *a9;
    AMCP::Log::Scope::get_os_log_t(*a9);
    objc_claimAutoreleasedReturnValue();
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = pthread_self();
      v15 = pthread_mach_thread_np(v14);
      LODWORD(a9) = 67109634;
      HIDWORD(a9) = v15;
      LOWORD(a10) = 2080;
      *(_QWORD *)((char *)&a10 + 2) = "Core_Audio_Driver.mm";
      WORD5(a10) = 1024;
      HIDWORD(a10) = 395;
      _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d RemoveDeviceClient: Caught exception", (uint8_t *)&a9, 0x18u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B5BD5374);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B5BD55B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *buf, __int128 a12, __int16 a13, int a14)
{
  AMCP::Log::Scope_Registry *v14;
  NSObject *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;

  if (a2)
  {
    v14 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v15 = *buf;
    AMCP::Log::Scope::get_os_log_t(*buf);
    objc_claimAutoreleasedReturnValue();
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v17;
      LOWORD(a12) = 2080;
      *(_QWORD *)((char *)&a12 + 2) = "Core_Audio_Driver.mm";
      WORD5(a12) = 1024;
      HIDWORD(a12) = 424;
      _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d CreateDevice: Caught exception", (uint8_t *)&buf, 0x18u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B5BD555CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B5BD5760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, __int128 a10, __int16 a11, int a12)
{
  AMCP::Log::Scope_Registry *v12;
  NSObject *v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;

  if (a2)
  {
    v12 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a9, "com.apple.coreaudio", "AMCP");
    v13 = *a9;
    AMCP::Log::Scope::get_os_log_t(*a9);
    objc_claimAutoreleasedReturnValue();
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = pthread_self();
      v15 = pthread_mach_thread_np(v14);
      LODWORD(a9) = 67109634;
      HIDWORD(a9) = v15;
      LOWORD(a10) = 2080;
      *(_QWORD *)((char *)&a10 + 2) = "Core_Audio_Driver.mm";
      WORD5(a10) = 1024;
      HIDWORD(a10) = 442;
      _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d DestroyDevice: Caught exception", (uint8_t *)&a9, 0x18u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B5BD571CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B5BD5930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, __int128 a10, __int16 a11, int a12)
{
  AMCP::Log::Scope_Registry *v13;
  NSObject *v14;
  _opaque_pthread_t *v15;
  mach_port_t v16;

  if (a2)
  {
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    v13 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v13);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a9, "com.apple.coreaudio", "AMCP");
    v14 = *a9;
    AMCP::Log::Scope::get_os_log_t(*a9);
    objc_claimAutoreleasedReturnValue();
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = pthread_self();
      v16 = pthread_mach_thread_np(v15);
      LODWORD(a9) = 67109634;
      HIDWORD(a9) = v16;
      LOWORD(a10) = 2080;
      *(_QWORD *)((char *)&a10 + 2) = "Core_Audio_Driver.mm";
      WORD5(a10) = 1024;
      HIDWORD(a10) = 459;
      _os_log_error_impl(&dword_1B57BA000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d DestroyDevice: Caught exception", (uint8_t *)&a9, 0x18u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B5BD58F0);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B5BD6034(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1B5BD6A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,void *a31,void *a32,void *a33,void *a34)
{
  os_unfair_lock_s *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v39;

  v39 = *(void **)(v37 - 184);
  *(_QWORD *)(v37 - 184) = 0;

  os_unfair_lock_unlock(v34);
  _Unwind_Resume(a1);
}

void sub_1B5BD6D50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B5BD6EA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B5BD6F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, id *buf, __int128 a17, __int128 a18, uint64_t a19)
{
  AMCP::Log::Scope_Registry *v19;
  NSObject *v20;
  _opaque_pthread_t *v21;
  mach_port_t v22;

  if (a2)
  {
    v19 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v19);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v20 = *buf;
    AMCP::Log::Scope::get_os_log_t(*buf);
    objc_claimAutoreleasedReturnValue();
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v21 = pthread_self();
      v22 = pthread_mach_thread_np(v21);
      a15 = 4;
      strcpy((char *)&__p, "....");
      LODWORD(buf) = 67109890;
      HIDWORD(buf) = v22;
      LOWORD(a17) = 2080;
      *(_QWORD *)((char *)&a17 + 2) = "Core_Audio_Driver.mm";
      WORD5(a17) = 1024;
      HIDWORD(a17) = 586;
      LOWORD(a18) = 2080;
      *(_QWORD *)((char *)&a18 + 2) = &__p;
      _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d start_io result failed: %s", (uint8_t *)&buf, 0x22u);
      if (a15 < 0)
        operator delete(__p);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B5BD6F40);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B5BD7168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B5BD7264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, __int128 a10, uint64_t a11, int a12, int a13, __int16 a14, int a15)
{
  int v15;
  int v16;
  AMCP::Log::Scope_Registry *v17;
  NSObject *v18;
  _opaque_pthread_t *v19;
  mach_port_t v20;

  if (a2)
  {
    v17 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v17);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a9, "com.apple.coreaudio", "AMCP");
    v18 = *a9;
    AMCP::Log::Scope::get_os_log_t(*a9);
    objc_claimAutoreleasedReturnValue();
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v19 = pthread_self();
      v20 = pthread_mach_thread_np(v19);
      LODWORD(a9) = 67110146;
      HIDWORD(a9) = v20;
      LOWORD(a10) = 2080;
      *(_QWORD *)((char *)&a10 + 2) = "Core_Audio_Driver.mm";
      WORD5(a10) = 1024;
      HIDWORD(a10) = 630;
      LOWORD(a11) = 1024;
      *(_DWORD *)((char *)&a11 + 2) = v16;
      HIWORD(a11) = 1024;
      a12 = v15;
      _os_log_error_impl(&dword_1B57BA000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught expection while trying to start io receiver for device id %u, client id %u", (uint8_t *)&a9, 0x24u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B5BD7210);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B5BD7538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, __int128 a10, uint64_t a11, int a12, int a13, __int16 a14, int a15)
{
  int v15;
  int v16;
  os_unfair_lock_s *v17;
  AMCP::Log::Scope_Registry *v19;
  NSObject *v20;
  _opaque_pthread_t *v21;
  mach_port_t v22;

  if (a2)
  {
    os_unfair_lock_unlock(v17);
    v19 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v19);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a9, "com.apple.coreaudio", "AMCP");
    v20 = *a9;
    AMCP::Log::Scope::get_os_log_t(*a9);
    objc_claimAutoreleasedReturnValue();
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v21 = pthread_self();
      v22 = pthread_mach_thread_np(v21);
      LODWORD(a9) = 67110146;
      HIDWORD(a9) = v22;
      LOWORD(a10) = 2080;
      *(_QWORD *)((char *)&a10 + 2) = "Core_Audio_Driver.mm";
      WORD5(a10) = 1024;
      HIDWORD(a10) = 651;
      LOWORD(a11) = 1024;
      *(_DWORD *)((char *)&a11 + 2) = v16;
      HIWORD(a11) = 1024;
      a12 = v15;
      _os_log_error_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught expection while trying to stop io receiver for device id %u, client id %u", (uint8_t *)&a9, 0x24u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B5BD74E0);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B5BD7714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, __int128 a10, __int16 a11, int a12)
{
  AMCP::Log::Scope_Registry *v12;
  NSObject *v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;

  if (a2)
  {
    v12 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a9, "com.apple.coreaudio", "AMCP");
    v13 = *a9;
    AMCP::Log::Scope::get_os_log_t(*a9);
    objc_claimAutoreleasedReturnValue();
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = pthread_self();
      v15 = pthread_mach_thread_np(v14);
      LODWORD(a9) = 67109634;
      HIDWORD(a9) = v15;
      LOWORD(a10) = 2080;
      *(_QWORD *)((char *)&a10 + 2) = "Core_Audio_Driver.mm";
      WORD5(a10) = 1024;
      HIDWORD(a10) = 703;
      _os_log_error_impl(&dword_1B57BA000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HasProperty: caught exception", (uint8_t *)&a9, 0x18u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B5BD76D4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B5BD7928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B5BD79F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *buf, __int128 a12, __int16 a13, int a14)
{
  AMCP::Log::Scope_Registry *v14;
  NSObject *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;

  if (a2)
  {
    v14 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v15 = *buf;
    AMCP::Log::Scope::get_os_log_t(*buf);
    objc_claimAutoreleasedReturnValue();
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v17;
      LOWORD(a12) = 2080;
      *(_QWORD *)((char *)&a12 + 2) = "Core_Audio_Driver.mm";
      WORD5(a12) = 1024;
      HIDWORD(a12) = 746;
      _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d GetPropertyDataSize: caught exception", (uint8_t *)&buf, 0x18u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B5BD79ACLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B5BD7C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *buf, __int128 a12, __int16 a13, int a14)
{
  AMCP::Log::Scope_Registry *v14;
  NSObject *v15;
  _opaque_pthread_t *v16;
  mach_port_t v17;

  if (a2)
  {
    v14 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v15 = *buf;
    AMCP::Log::Scope::get_os_log_t(*buf);
    objc_claimAutoreleasedReturnValue();
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v17;
      LOWORD(a12) = 2080;
      *(_QWORD *)((char *)&a12 + 2) = "Core_Audio_Driver.mm";
      WORD5(a12) = 1024;
      HIDWORD(a12) = 772;
      _os_log_error_impl(&dword_1B57BA000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d GetPropertyDataSize: caught exception", (uint8_t *)&buf, 0x18u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B5BD7C04);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B5BD81B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id *buf,__int128 a22,__int16 a23,int a24)
{
  AMCP::Log::Scope_Registry *v24;
  NSObject *v25;
  _opaque_pthread_t *v26;
  mach_port_t v27;

  if (a2)
  {
    v24 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v24);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v25 = *buf;
    AMCP::Log::Scope::get_os_log_t(*buf);
    objc_claimAutoreleasedReturnValue();
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v26 = pthread_self();
      v27 = pthread_mach_thread_np(v26);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v27;
      LOWORD(a22) = 2080;
      *(_QWORD *)((char *)&a22 + 2) = "Core_Audio_Driver.mm";
      WORD5(a22) = 1024;
      HIDWORD(a22) = 821;
      _os_log_error_impl(&dword_1B57BA000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d GetPropertyData: caught exception", (uint8_t *)&buf, 0x18u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B5BD811CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B5BD8930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int16 a17, char a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,std::runtime_error a28,std::runtime_error a29,uint64_t a30,uint64_t a31)
{
  void *v31;
  void *v32;
  uint64_t v33;
  AMCP::Log::Scope_Registry *v35;
  NSObject *v36;
  _opaque_pthread_t *v37;
  mach_port_t v38;
  uint64_t v39;

  if (a2)
  {

    v35 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v35);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)(v33 - 176), "com.apple.coreaudio", "AMCP");
    v36 = **(NSObject ***)(v33 - 176);
    AMCP::Log::Scope::get_os_log_t(v36);
    objc_claimAutoreleasedReturnValue();
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v33 - 176);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      v37 = pthread_self();
      v38 = pthread_mach_thread_np(v37);
      v39 = v33 - 176;
      *(_DWORD *)v39 = 67109634;
      *(_DWORD *)(v39 + 4) = v38;
      *(_WORD *)(v39 + 8) = 2080;
      *(_QWORD *)(v39 + 10) = "Core_Audio_Driver.mm";
      *(_WORD *)(v39 + 18) = 1024;
      *(_DWORD *)(v39 + 20) = 855;
      _os_log_error_impl(&dword_1B57BA000, v36, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d SetPropertyData: caught exception", (uint8_t *)(v33 - 176), 0x18u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B5BD8564);
  }
  _Unwind_Resume(exception_object);
}

void unpack_data_from_qualifier(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v5;
  id v6;
  AMCP::Log::Scope_Registry *v7;
  NSObject *v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  void *exception;
  id v12;
  __int128 v13;
  uint64_t v14;
  uint64_t (**v15)();
  __int128 v16;
  uint64_t v17;
  std::runtime_error v18;
  std::runtime_error v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  unsigned int v26;
  uint8_t buf[8];
  __int16 v28;
  char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  _BYTE v33[14];
  const char *v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v12 = a3;
  if (a2)
  {
    if (a2 >= 0x13)
    {
      LODWORD(v5) = 4;
    }
    else
    {
      v5 = qword_1B5D53210[a2] | qword_1B5D53178[a2];
      if ((v5 & 0xFF00000000) == 0)
        LODWORD(v5) = objc_msgSend(v12, "length");
    }
    v26 = v5;
    v6 = objc_retainAutorelease((id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DF8]), "initWithLength:", objc_msgSend(v12, "length")));
    v7 = (AMCP::Log::Scope_Registry *)AMCP::HAL::unpack_property_data(v12, a2, &v26, (_QWORD *)objc_msgSend(v6, "mutableBytes"));
    if ((_DWORD)v7)
    {
      AMCP::Log::Scope_Registry::get(v7);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v8 = **(NSObject ***)buf;
      AMCP::Log::Scope::get_os_log_t(**(id **)buf);
      objc_claimAutoreleasedReturnValue();
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v9 = pthread_self();
        v10 = pthread_mach_thread_np(v9);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v10;
        v28 = 2080;
        v29 = "Core_Audio_Driver.mm";
        v30 = 1024;
        v31 = 676;
        v32 = 2080;
        *(_QWORD *)v33 = "qualifier_error != kAudioHardwareNoError";
        _os_log_error_impl(&dword_1B57BA000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to unpack qualifier", buf, 0x22u);
      }

      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
      exception = __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v18, "Failed to unpack qualifier");
      std::runtime_error::runtime_error(&v19, &v18);
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = -1;
      v19.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v20 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
      *(_QWORD *)&v33[6] = "std::tuple<NSData *, UInt32, AMCP::HAL::HAL_Property_Type_Code> unpack_data_from_qualifier(AM"
                           "CP::HAL::HAL_Property_Type_Code, NSData *__strong)";
      v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Driver/Core_Audio_Driver.mm";
      v35 = 676;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
      v15 = off_1E69A20A0;
      v16 = v13;
      v17 = v14;
      v13 = 0uLL;
      v14 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v15);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
    }
    *(_QWORD *)a1 = v6;
    *(_DWORD *)(a1 + 8) = v26;
    *(_DWORD *)(a1 + 12) = a2;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }

}

void sub_1B5BD93A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, std::runtime_error a19, std::runtime_error a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Receiver>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Receiver>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Receiver>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Receiver>>>>::__erase_unique<AMCP::Portal::IPC::io_messenger_id_t>(_QWORD *a1, unsigned int a2, unsigned int a3)
{
  uint64_t *v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  char v15;

  v4 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>(a1, a2, a3);
  if (v4)
  {
    v5 = (int8x8_t)a1[1];
    v6 = v4[1];
    v7 = (uint8x8_t)vcnt_s8(v5);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v5)
        v6 %= *(_QWORD *)&v5;
    }
    else
    {
      v6 &= *(_QWORD *)&v5 - 1;
    }
    v8 = *(uint64_t **)(*a1 + 8 * v6);
    do
    {
      v9 = v8;
      v8 = (uint64_t *)*v8;
    }
    while (v8 != v4);
    if (v9 == a1 + 2)
      goto LABEL_19;
    v10 = v9[1];
    if (v7.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v5)
        v10 %= *(_QWORD *)&v5;
    }
    else
    {
      v10 &= *(_QWORD *)&v5 - 1;
    }
    if (v10 != v6)
    {
LABEL_19:
      if (!*v4)
        goto LABEL_20;
      v11 = *(_QWORD *)(*v4 + 8);
      if (v7.u32[0] > 1uLL)
      {
        if (v11 >= *(_QWORD *)&v5)
          v11 %= *(_QWORD *)&v5;
      }
      else
      {
        v11 &= *(_QWORD *)&v5 - 1;
      }
      if (v11 != v6)
LABEL_20:
        *(_QWORD *)(*a1 + 8 * v6) = 0;
    }
    v12 = *v4;
    if (*v4)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v7.u32[0] > 1uLL)
      {
        if (v13 >= *(_QWORD *)&v5)
          v13 %= *(_QWORD *)&v5;
      }
      else
      {
        v13 &= *(_QWORD *)&v5 - 1;
      }
      if (v13 != v6)
      {
        *(_QWORD *)(*a1 + 8 * v13) = v9;
        v12 = *v4;
      }
    }
    *v9 = v12;
    *v4 = 0;
    --a1[3];
    v14[0] = v4;
    v14[1] = a1 + 2;
    v15 = 1;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
  }
}

unint64_t get_buffer_key(const dict *a1)
{
  unsigned int v2;
  uint64_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  const dict *v13;
  const char *v14;
  xpc_object_t v15;

  v13 = a1;
  v14 = "buffer shared memory";
  applesauce::xpc::dict::object_proxy::operator applesauce::xpc::object(&v15, (uint64_t)&v13);
  v13 = a1;
  v14 = "buffer device id";
  applesauce::xpc::dict::object_proxy::operator applesauce::xpc::object(&v12, (uint64_t)&v13);
  v2 = applesauce::xpc::dyn_cast_or_default((applesauce::xpc *)&v12, 0);
  v13 = a1;
  v14 = "buffer client id";
  applesauce::xpc::dict::object_proxy::operator applesauce::xpc::object(&v11, (uint64_t)&v13);
  v3 = applesauce::xpc::dyn_cast_or_default((applesauce::xpc *)&v11, 0);
  v13 = a1;
  v14 = "buffer stream id";
  applesauce::xpc::dict::object_proxy::operator applesauce::xpc::object(&v10, (uint64_t)&v13);
  applesauce::xpc::dyn_cast_or_default((applesauce::xpc *)&v10, 0);
  v13 = a1;
  v14 = "buffer type";
  applesauce::xpc::dict::object_proxy::operator applesauce::xpc::object(&v9, (uint64_t)&v13);
  applesauce::xpc::dyn_cast_or_default((applesauce::xpc *)&v9, 0);
  v4 = v9;
  v9 = 0;

  v5 = v10;
  v10 = 0;

  v6 = v11;
  v11 = 0;

  v7 = v12;
  v12 = 0;

  return v2 | (unint64_t)(v3 << 32);
}

void sub_1B5BD9758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  uint64_t v13;

  _Unwind_Resume(a1);
}

void sub_1B5BD97E0()
{
  JUMPOUT(0x1B5BD97D0);
}

void std::vector<std::pair<AMCP::Portal::IPC::shared_buffer_info_t,applesauce::xpc::dict>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 24)
  {
    v5 = *(void **)(i - 8);
    *(_QWORD *)(i - 8) = 0;

  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t std::pair<AMCP::Portal::IPC::shared_buffer_info_t,applesauce::xpc::dict>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  xpc_object_t v4;
  void *v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(id *)(a2 + 16);
  v4 = xpc_null_create();
  v5 = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v4;

  return a1;
}

void std::__shared_ptr_emplace<AMCP::Portal::IPC::IO_Receiver>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6995A18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Portal::IPC::IO_Receiver>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6995A18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::Portal::IPC::IO_Receiver>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1B5BD9AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *buf, __int128 a12)
{
  os_unfair_lock_s *v12;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  AMCP::Log::Scope_Registry *v17;
  NSObject *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _opaque_pthread_t *v22;
  mach_port_t v23;

  if (a2)
  {
    os_unfair_lock_unlock(v12);
    v14 = (std::__shared_weak_count *)a12;
    if ((_QWORD)a12)
    {
      v15 = (unint64_t *)(a12 + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v17);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v18 = *buf;
    AMCP::Log::Scope::get_os_log_t(*buf);
    objc_claimAutoreleasedReturnValue();
    v19 = (std::__shared_weak_count *)a12;
    if ((_QWORD)a12)
    {
      v20 = (unint64_t *)(a12 + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v22 = pthread_self();
      v23 = pthread_mach_thread_np(v22);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v23;
      LOWORD(a12) = 2080;
      *(_QWORD *)((char *)&a12 + 2) = "Core_Audio_Driver.mm";
      WORD5(a12) = 1024;
      HIDWORD(a12) = 254;
      _os_log_error_impl(&dword_1B57BA000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d AbortDeviceConfigurationChange: Caught exception", (uint8_t *)&buf, 0x18u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B5BD99F0);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_ea8_32c89_ZTSKZ75__Core_Audio_Driver_abort_device_configuration_change_action_change_reply__E4__10(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  result = _Block_copy(*(const void **)(a2 + 64));
  *(_QWORD *)(a1 + 64) = result;
  return result;
}

void __destroy_helper_block_ea8_32c89_ZTSKZ75__Core_Audio_Driver_abort_device_configuration_change_action_change_reply__E4__10(uint64_t a1)
{

}

void sub_1B5BD9EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *buf, __int128 a12)
{
  os_unfair_lock_s *v12;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  AMCP::Log::Scope_Registry *v17;
  NSObject *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _opaque_pthread_t *v22;
  mach_port_t v23;

  if (a2)
  {
    os_unfair_lock_unlock(v12);
    v14 = (std::__shared_weak_count *)a12;
    if ((_QWORD)a12)
    {
      v15 = (unint64_t *)(a12 + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v17);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v18 = *buf;
    AMCP::Log::Scope::get_os_log_t(*buf);
    objc_claimAutoreleasedReturnValue();
    v19 = (std::__shared_weak_count *)a12;
    if ((_QWORD)a12)
    {
      v20 = (unint64_t *)(a12 + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v22 = pthread_self();
      v23 = pthread_mach_thread_np(v22);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v23;
      LOWORD(a12) = 2080;
      *(_QWORD *)((char *)&a12 + 2) = "Core_Audio_Driver.mm";
      WORD5(a12) = 1024;
      HIDWORD(a12) = 207;
      _os_log_error_impl(&dword_1B57BA000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d PerformDeviceConfigurationChange: Caught exception", (uint8_t *)&buf, 0x18u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B5BD9DD0);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_ea8_32c90_ZTSKZ77__Core_Audio_Driver_perform_device_configuration_change_action_change_reply__E3__9(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  result = _Block_copy(*(const void **)(a2 + 64));
  *(_QWORD *)(a1 + 64) = result;
  return result;
}

void __destroy_helper_block_ea8_32c90_ZTSKZ77__Core_Audio_Driver_perform_device_configuration_change_action_change_reply__E3__9(uint64_t a1)
{

}

void sub_1B5BDA140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<std::vector<std::pair<AMCP::Portal::IPC::shared_buffer_info_t,applesauce::xpc::dict>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6995978;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::pair<AMCP::Portal::IPC::shared_buffer_info_t,applesauce::xpc::dict>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6995978;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<std::vector<std::pair<AMCP::Portal::IPC::shared_buffer_info_t,applesauce::xpc::dict>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  void **v2;

  v2 = (void **)(a1 + 24);
  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    std::vector<std::pair<AMCP::Portal::IPC::shared_buffer_info_t,applesauce::xpc::dict>>::__base_destruct_at_end[abi:ne180100](a1 + 24, v1);
    operator delete(*v2);
  }
}

void std::__shared_ptr_emplace<std::unordered_map<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Receiver>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6995928;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::unordered_map<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Receiver>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6995928;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<std::unordered_map<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Receiver>>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
    operator delete(v4);
}

void std::__shared_ptr_emplace<std::map<unsigned long long,void *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69958D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::map<unsigned long long,void *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E69958D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

void std::__shared_ptr_emplace<std::map<unsigned long long,void *>>::__on_zero_shared(uint64_t a1)
{
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(_QWORD **)(a1 + 32));
}

BOOL HALS_Control::HasProperty(uint64_t a1, uint64_t a2, int *a3)
{
  int v3;
  char v4;
  int v5;
  unsigned __int16 v6;
  int v7;
  int v8;
  _BOOL4 v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v21;
  BOOL v22;
  char v23;
  BOOL v24;
  HALB_Info *v26;
  unsigned int v27;
  BOOL IsSubClass;

  v3 = *a3;
  v4 = 1;
  if (*a3 > 1818456949)
  {
    if (v3 > 1935893352)
    {
      if (v3 > 1935962741)
      {
        if (v3 <= 1936745333)
        {
          if (v3 != 1935962742)
          {
            if (v3 != 1936745315)
              goto LABEL_66;
            goto LABEL_83;
          }
LABEL_25:
          v7 = *(_DWORD *)(a1 + 20);
          v8 = *(_DWORD *)(a1 + 24);
          v9 = v7 == v8;
          v10 = 1936483442;
LABEL_84:
          if (v7 == v10)
            v9 = 1;
          v4 = v7 != v8 || v7 == v10;
          v24 = v8 == v10;
          if (!v9)
            v4 = v24;
          return v4 & 1;
        }
        if (v3 == 1936745334)
        {
LABEL_83:
          v7 = *(_DWORD *)(a1 + 20);
          v8 = *(_DWORD *)(a1 + 24);
          v9 = v7 == v8;
          v10 = 1936744814;
          goto LABEL_84;
        }
        v11 = 1937007734;
LABEL_65:
        if (v3 != v11)
          goto LABEL_66;
        return v4 & 1;
      }
      if (v3 != 1935893353 && v3 != 1935894894)
      {
        if (v3 == 1935962738)
          goto LABEL_25;
LABEL_66:
        v4 = 0;
        return v4 & 1;
      }
      goto LABEL_33;
    }
    if (v3 > 1869638758)
    {
      if (v3 == 1869638759 || v3 == 1870098020)
        return v4 & 1;
      v5 = 1935892841;
LABEL_32:
      if (v3 != v5)
        goto LABEL_66;
LABEL_33:
      v13 = *(_DWORD *)(a1 + 20);
      v12 = *(_DWORD *)(a1 + 24);
      v4 = 1;
      goto LABEL_34;
    }
    if (v3 != 1818456950 && v3 != 1818457190)
    {
      v5 = 1852400499;
      goto LABEL_32;
    }
    goto LABEL_42;
  }
  if (v3 > 1668049770)
  {
    if (v3 > 1818453106)
    {
      if (v3 == 1818453107 || v3 == 1818453110)
        goto LABEL_42;
      v6 = 29540;
    }
    else
    {
      if (v3 == 1668049771)
      {
        v13 = *(_DWORD *)(a1 + 20);
        v12 = *(_DWORD *)(a1 + 24);
LABEL_34:
        if (v13 > 1751740517)
        {
          if (v13 == 1751740518 || v13 == 1852601964)
            return v4 & 1;
          v14 = 1936483188;
        }
        else
        {
          if (v13 == 1668047723 || v13 == 1684370292)
            return v4 & 1;
          v14 = 1685287523;
        }
        if (v13 == v14)
          return v4 & 1;
        v4 = v13 != v12;
        if (v13 == v12)
          return v4 & 1;
        v4 = 0;
        if (v12 > 1751740517)
        {
          if (v12 == 1751740518 || v12 == 1936483188)
            goto LABEL_105;
          v17 = 1852601964;
        }
        else
        {
          if (v12 == 1668047723 || v12 == 1684370292)
            goto LABEL_105;
          v17 = 1685287523;
        }
        goto LABEL_104;
      }
      if (v3 == 1668506480)
        return v4 & 1;
      v6 = 25714;
    }
    if (v3 != (v6 | 0x6C630000))
      goto LABEL_66;
LABEL_42:
    v15 = *(_DWORD *)(a1 + 20);
    v12 = *(_DWORD *)(a1 + 24);
    v4 = 1;
    if (v15 <= 1936028006)
    {
      if (v15 == 1818588780)
        return v4 & 1;
      v16 = 1886544237;
    }
    else
    {
      if (v15 == 1936028007 || v15 == 1937072758)
        return v4 & 1;
      v16 = 1986817381;
    }
    if (v15 == v16)
      return v4 & 1;
    v4 = v15 != v12;
    if (v15 == v12)
      return v4 & 1;
    v4 = 0;
    if (v12 <= 1936028006)
    {
      if (v12 == 1818588780)
        goto LABEL_105;
      v17 = 1886544237;
    }
    else
    {
      if (v12 == 1936028007 || v12 == 1986817381)
        goto LABEL_105;
      v17 = 1937072758;
    }
LABEL_104:
    if (v12 != v17)
      return v4 & 1;
LABEL_105:
    v4 = 1;
    return v4 & 1;
  }
  if (v3 > 1651272547)
  {
    if (v3 != 1651272548)
    {
      if (v3 == 1667591277)
        return v4 & 1;
      v11 = 1668047219;
      goto LABEL_65;
    }
LABEL_67:
    v18 = *(_DWORD *)(a1 + 20);
    v19 = *(_DWORD *)(a1 + 24);
    v21 = v18 == 1651273579 || v18 == 1936028002;
    v4 = v21 || v18 != v19;
    if (v18 != v19 && v18 != 1651273579)
    {
      v22 = v19 == 1651273579 || v19 == 1936028002;
      v23 = v22;
      if (v18 != 1936028002)
        v4 = v23;
    }
    return v4 & 1;
  }
  if (v3 == 1650682995)
    return v4 & 1;
  if (v3 != 1650685548)
  {
    if (v3 != 1651272546)
      goto LABEL_66;
    goto LABEL_67;
  }
  v27 = *(_DWORD *)(a1 + 20);
  v26 = (HALB_Info *)*(unsigned int *)(a1 + 24);
  IsSubClass = HALB_Info::IsSubClass((HALB_Info *)v27, 1953458028);
  v4 = v27 != (_DWORD)v26 || IsSubClass;
  if (v27 == (_DWORD)v26 || IsSubClass)
    return v4 & 1;
  return HALB_Info::IsSubClass(v26, 1953458028);
}

uint64_t HALS_Control::IsPropertySettable(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v4;
  BOOL v5;
  int v6;
  int v10;

  result = 0;
  v4 = *a3;
  if (*a3 > 1818456949)
  {
    if (v4 > 1935894893)
    {
      if (v4 <= 1935962741)
      {
        v5 = v4 == 1935894894;
        v6 = 1935962738;
        goto LABEL_34;
      }
      if (v4 == 1936745334)
        return 1;
      if (v4 == 1936745315)
        return result;
      v10 = 1935962742;
    }
    else if (v4 <= 1852400498)
    {
      if (v4 == 1818456950)
        return 1;
      v10 = 1818457190;
    }
    else
    {
      if (v4 == 1852400499 || v4 == 1935892841)
        return result;
      v10 = 1935893353;
    }
LABEL_39:
    if (v4 == v10)
      return 1;
    return HALS_Object::IsPropertySettable(0, a2, a3);
  }
  if (v4 > 1668506479)
  {
    if (v4 <= 1818453109)
    {
      if ((v4 - 1818453106) >= 2 && v4 != 1668506480)
        return HALS_Object::IsPropertySettable(0, a2, a3);
      return result;
    }
    if (v4 != 1818453110)
    {
      if (v4 == 1818456932)
        return result;
      return HALS_Object::IsPropertySettable(0, a2, a3);
    }
    return 1;
  }
  if (v4 <= 1651272547)
  {
    if (v4 != 1650685548)
    {
      v10 = 1651272546;
      goto LABEL_39;
    }
    return 1;
  }
  v5 = v4 == 1651272548 || v4 == 1667591277;
  v6 = 1668049771;
LABEL_34:
  if (!v5 && v4 != v6)
    return HALS_Object::IsPropertySettable(0, a2, a3);
  return result;
}

uint64_t HALS_Control::GetPropertyDataSize(uint64_t a1, uint64_t a2, int *a3)
{
  int v3;
  uint64_t result;
  int v5;
  unsigned __int16 v6;

  v3 = *a3;
  result = 4;
  if (*a3 > 1818456949)
  {
    if (v3 > 1935894893)
    {
      if (v3 <= 1935962741)
      {
        if (v3 != 1935894894 && v3 != 1935962738)
          return HALS_Object::GetPropertyDataSize(4, a2, a3);
      }
      else
      {
        if (v3 == 1935962742)
          return result;
        if (v3 != 1936745315)
        {
          v5 = 1936745334;
          goto LABEL_26;
        }
      }
      return 8;
    }
    if (v3 > 1852400498)
    {
      if (v3 == 1852400499)
        return 8;
      if (v3 != 1935892841)
      {
        v5 = 1935893353;
        goto LABEL_26;
      }
      return 0;
    }
    if (v3 == 1818456950)
      return result;
    v6 = 29798;
LABEL_25:
    v5 = v6 | 0x6C630000;
    goto LABEL_26;
  }
  if (v3 <= 1668506479)
  {
    if (v3 > 1651272547)
    {
      if (v3 != 1651272548)
      {
        if (v3 == 1667591277)
          return result;
        v5 = 1668049771;
LABEL_26:
        if (v3 == v5)
          return result;
        return HALS_Object::GetPropertyDataSize(4, a2, a3);
      }
      return 8;
    }
    if (v3 == 1650685548)
      return result;
    if (v3 != 1651272546)
      return HALS_Object::GetPropertyDataSize(4, a2, a3);
    return 0;
  }
  if (v3 <= 1818453106)
  {
    if (v3 != 1668506480)
    {
      if (v3 == 1818453106)
        return 16;
      return HALS_Object::GetPropertyDataSize(4, a2, a3);
    }
  }
  else if (v3 != 1818453107 && v3 != 1818453110)
  {
    v6 = 29540;
    goto LABEL_25;
  }
  return result;
}

uint64_t HALS_Control::GetPropertyData(uint64_t this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, uint64_t *a6, unsigned int a7, const void *a8, HALS_Client *a9)
{
  signed int mSelector;
  NSObject *v10;
  const char *v11;
  unsigned int v12;
  int v13;
  _DWORD *exception;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1818456949)
  {
    if (mSelector > 1935894893)
    {
      if (mSelector > 1935962741)
      {
        switch(mSelector)
        {
          case 1935962742:
            if (a4 <= 3)
            {
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                goto LABEL_96;
              v15 = 136315394;
              v16 = "HALS_Control.cpp";
              v17 = 1024;
              v18 = 424;
              v10 = MEMORY[0x1E0C81028];
              v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioSliderControlPropertyValue";
              goto LABEL_95;
            }
            break;
          case 1936745315:
            if (a4 <= 7)
            {
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                goto LABEL_96;
              v15 = 136315394;
              v16 = "HALS_Control.cpp";
              v17 = 1024;
              v18 = 551;
              v10 = MEMORY[0x1E0C81028];
              v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioStereoPanControlPropertyPanningChannels";
              goto LABEL_95;
            }
            goto LABEL_63;
          case 1936745334:
            if (a4 <= 3)
            {
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                goto LABEL_96;
              v15 = 136315394;
              v16 = "HALS_Control.cpp";
              v17 = 1024;
              v18 = 542;
              v10 = MEMORY[0x1E0C81028];
              v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioStereoPanControlPropertyValue";
              goto LABEL_95;
            }
            break;
          default:
            return HALS_Object::GetPropertyData(this, a2, (int *)a3, a4, (int *)a5, a6);
        }
        goto LABEL_74;
      }
      if (mSelector != 1935894894)
      {
        if (mSelector != 1935962738)
          return HALS_Object::GetPropertyData(this, a2, (int *)a3, a4, (int *)a5, a6);
        if (a4 <= 7)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_96;
          v15 = 136315394;
          v16 = "HALS_Control.cpp";
          v17 = 1024;
          v18 = 433;
          v10 = MEMORY[0x1E0C81028];
          v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioSliderControlPropertyRange";
          goto LABEL_95;
        }
LABEL_63:
        *a6 = 0;
        v12 = 8;
LABEL_76:
        *a5 = v12;
        return this;
      }
    }
    else
    {
      if (mSelector <= 1852400498)
      {
        if (mSelector == 1818456950)
        {
          if (a4 <= 3)
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_96;
            v15 = 136315394;
            v16 = "HALS_Control.cpp";
            v17 = 1024;
            v18 = 443;
            v10 = MEMORY[0x1E0C81028];
            v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioLevelControlPropertyScalarValue";
            goto LABEL_95;
          }
        }
        else
        {
          if (mSelector != 1818457190)
            return HALS_Object::GetPropertyData(this, a2, (int *)a3, a4, (int *)a5, a6);
          if (a4 <= 3)
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_96;
            v15 = 136315394;
            v16 = "HALS_Control.cpp";
            v17 = 1024;
            v18 = 489;
            v10 = MEMORY[0x1E0C81028];
            v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioLevelControlPropertyDecibel"
                  "sToScalarTransferFunction";
            goto LABEL_95;
          }
        }
        goto LABEL_74;
      }
      if (mSelector != 1852400499)
      {
        if (mSelector == 1935892841)
          goto LABEL_34;
        if (mSelector != 1935893353)
          return HALS_Object::GetPropertyData(this, a2, (int *)a3, a4, (int *)a5, a6);
        if (a4 <= 3)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_96;
          v15 = 136315394;
          v16 = "HALS_Control.cpp";
          v17 = 1024;
          v18 = 507;
          v10 = MEMORY[0x1E0C81028];
          v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioSelectorControlPropertyCurrentItem";
          goto LABEL_95;
        }
        goto LABEL_74;
      }
    }
    if (a4 <= 7)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_96;
      v15 = 136315394;
      v16 = "HALS_Control.cpp";
      v17 = 1024;
      v18 = 523;
      v10 = MEMORY[0x1E0C81028];
      v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioSelectorControlPropertyItemName";
      goto LABEL_95;
    }
    if (a7 <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_96;
      v15 = 136315394;
      v16 = "HALS_Control.cpp";
      v17 = 1024;
      v18 = 524;
      v10 = MEMORY[0x1E0C81028];
      v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad qualifier data size for kAudioSelectorControlPropertyItemName";
      goto LABEL_95;
    }
    goto LABEL_63;
  }
  if (mSelector > 1668506479)
  {
    if (mSelector <= 1818453106)
    {
      if (mSelector != 1668506480)
      {
        if (mSelector == 1818453106)
        {
          if (a4 <= 0xF)
          {
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_96;
            v15 = 136315394;
            v16 = "HALS_Control.cpp";
            v17 = 1024;
            v18 = 461;
            v10 = MEMORY[0x1E0C81028];
            v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioLevelControlPropertyDecibelRange";
            goto LABEL_95;
          }
          *a6 = 0;
          a6[1] = 0;
          v12 = 16;
          goto LABEL_76;
        }
        return HALS_Object::GetPropertyData(this, a2, (int *)a3, a4, (int *)a5, a6);
      }
      if (a4 <= 3)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_96;
        v15 = 136315394;
        v16 = "HALS_Control.cpp";
        v17 = 1024;
        v18 = 406;
        v10 = MEMORY[0x1E0C81028];
        v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioControlPropertyScope";
LABEL_95:
        _os_log_impl(&dword_1B57BA000, v10, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v15, 0x12u);
LABEL_96:
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69A1B30;
        exception[2] = 561211770;
      }
      v13 = *(_DWORD *)(this + 48);
LABEL_79:
      *(_DWORD *)a6 = v13;
      goto LABEL_75;
    }
    switch(mSelector)
    {
      case 1818453107:
        if (a4 <= 3)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_96;
          v15 = 136315394;
          v16 = "HALS_Control.cpp";
          v17 = 1024;
          v18 = 480;
          v10 = MEMORY[0x1E0C81028];
          v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioLevelControlPropertyConvertDecibelsToScalar";
          goto LABEL_95;
        }
        break;
      case 1818453110:
        if (a4 <= 3)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_96;
          v15 = 136315394;
          v16 = "HALS_Control.cpp";
          v17 = 1024;
          v18 = 452;
          v10 = MEMORY[0x1E0C81028];
          v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioLevelControlPropertyDecibelValue";
          goto LABEL_95;
        }
        break;
      case 1818456932:
        if (a4 <= 3)
        {
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_96;
          v15 = 136315394;
          v16 = "HALS_Control.cpp";
          v17 = 1024;
          v18 = 471;
          v10 = MEMORY[0x1E0C81028];
          v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioLevelControlPropertyConvertScalarToDecibels";
          goto LABEL_95;
        }
        break;
      default:
        return HALS_Object::GetPropertyData(this, a2, (int *)a3, a4, (int *)a5, a6);
    }
    goto LABEL_74;
  }
  if (mSelector <= 1651272547)
  {
    if (mSelector != 1650685548)
    {
      if (mSelector != 1651272546)
        return HALS_Object::GetPropertyData(this, a2, (int *)a3, a4, (int *)a5, a6);
LABEL_34:
      *a5 = 0;
      return this;
    }
    if (a4 <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_96;
      v15 = 136315394;
      v16 = "HALS_Control.cpp";
      v17 = 1024;
      v18 = 498;
      v10 = MEMORY[0x1E0C81028];
      v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioBooleanControlPropertyValue";
      goto LABEL_95;
    }
LABEL_74:
    *(_DWORD *)a6 = 0;
LABEL_75:
    v12 = 4;
    goto LABEL_76;
  }
  switch(mSelector)
  {
    case 1651272548:
      if (a4 <= 7)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_96;
        v15 = 136315394;
        v16 = "HALS_Control.cpp";
        v17 = 1024;
        v18 = 567;
        v10 = MEMORY[0x1E0C81028];
        v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioBlockControlPropertyDescriptor";
        goto LABEL_95;
      }
      if (a7 <= 3)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_96;
        v15 = 136315394;
        v16 = "HALS_Control.cpp";
        v17 = 1024;
        v18 = 568;
        v10 = MEMORY[0x1E0C81028];
        v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad qualifier data size for kAudioBlockControlPropertyDescriptor";
        goto LABEL_95;
      }
      goto LABEL_63;
    case 1667591277:
      if (a4 <= 3)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_96;
        v15 = 136315394;
        v16 = "HALS_Control.cpp";
        v17 = 1024;
        v18 = 415;
        v10 = MEMORY[0x1E0C81028];
        v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioControlPropertyElement";
        goto LABEL_95;
      }
      v13 = *(_DWORD *)(this + 52);
      goto LABEL_79;
    case 1668049771:
      if (a4 <= 3)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_96;
        v15 = 136315394;
        v16 = "HALS_Control.cpp";
        v17 = 1024;
        v18 = 533;
        v10 = MEMORY[0x1E0C81028];
        v11 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioSelectorControlPropertyItemKind";
        goto LABEL_95;
      }
      goto LABEL_74;
  }
  return HALS_Object::GetPropertyData(this, a2, (int *)a3, a4, (int *)a5, a6);
}

uint64_t HALS_Control::SetPropertyData(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  NSObject *v9;
  const char *v10;
  _DWORD *exception;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v8 = *a3;
  if (*a3 <= 1818457189)
  {
    if (v8 <= 1818453109)
    {
      if (v8 != 1650685548)
      {
        if (v8 != 1651272546)
LABEL_33:
          HALS_Object::SetPropertyData(result, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        return result;
      }
      if (a4 > 3)
        return result;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v12 = 136315394;
        v13 = "HALS_Control.cpp";
        v14 = 1024;
        v15 = 617;
        v9 = MEMORY[0x1E0C81028];
        v10 = "%25s:%-5d  HALS_Control::SetPropertyData: bad property data size for kAudioBooleanControlPropertyValue";
        goto LABEL_36;
      }
LABEL_37:
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      exception[2] = 561211770;
    }
    if (v8 == 1818453110)
    {
      if (a4 > 3)
        return result;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v12 = 136315394;
        v13 = "HALS_Control.cpp";
        v14 = 1024;
        v15 = 603;
        v9 = MEMORY[0x1E0C81028];
        v10 = "%25s:%-5d  HALS_Control::SetPropertyData: bad property data size for kAudioLevelControlPropertyDecibelValue";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (v8 != 1818456950)
      goto LABEL_33;
    if (a4 > 3)
      return result;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_37;
    v12 = 136315394;
    v13 = "HALS_Control.cpp";
    v14 = 1024;
    v15 = 596;
    v9 = MEMORY[0x1E0C81028];
    v10 = "%25s:%-5d  HALS_Control::SetPropertyData: bad property data size for kAudioLevelControlPropertyScalarValue";
    goto LABEL_36;
  }
  if (v8 <= 1935962741)
  {
    if (v8 == 1818457190)
    {
      if (a4 > 3)
        return result;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v12 = 136315394;
        v13 = "HALS_Control.cpp";
        v14 = 1024;
        v15 = 610;
        v9 = MEMORY[0x1E0C81028];
        v10 = "%25s:%-5d  HALS_Control::SetPropertyData: bad property data size for kAudioLevelControlPropertyDecibelsToS"
              "calarTransferFunction";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (v8 != 1935893353)
      goto LABEL_33;
    if (a4 > 3)
      return result;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_37;
    v12 = 136315394;
    v13 = "HALS_Control.cpp";
    v14 = 1024;
    v15 = 624;
    v9 = MEMORY[0x1E0C81028];
    v10 = "%25s:%-5d  HALS_Control::SetPropertyData: bad property data size for kAudioSelectorControlPropertyCurrentItem";
LABEL_36:
    _os_log_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&v12, 0x12u);
    goto LABEL_37;
  }
  if (v8 == 1936745334)
  {
    if (a4 > 3)
      return result;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v12 = 136315394;
      v13 = "HALS_Control.cpp";
      v14 = 1024;
      v15 = 631;
      v9 = MEMORY[0x1E0C81028];
      v10 = "%25s:%-5d  HALS_Control::SetPropertyData: bad property data size for kAudioStereoPanControlPropertyValue";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (v8 != 1935962742)
    goto LABEL_33;
  if (a4 <= 3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_37;
    v12 = 136315394;
    v13 = "HALS_Control.cpp";
    v14 = 1024;
    v15 = 589;
    v9 = MEMORY[0x1E0C81028];
    v10 = "%25s:%-5d  HALS_Control::SetPropertyData: bad property data size for kAudioSliderControlPropertyValue";
    goto LABEL_36;
  }
  return result;
}

uint64_t HALS_Control::AllowClientAccessToProperty()
{
  return 1;
}

void HALS_Control::GetValueChangedAddresses(HALS_Control *this, CAPropertyAddressList *a2, const AudioObjectPropertyAddress *a3)
{
  int v4;
  HALB_Info *v5;
  BOOL v6;
  int v7;
  const AudioObjectPropertyAddress *v9;
  uint64_t v10;
  int v11;
  int v12;
  BOOL IsSubClass;
  int v14;
  AudioObjectPropertyAddress v15;

  v4 = *((_DWORD *)this + 5);
  v5 = (HALB_Info *)*((unsigned int *)this + 6);
  if (v4 <= 1936028006)
  {
    v6 = v4 == 1818588780;
    v7 = 1886544237;
  }
  else
  {
    v6 = v4 == 1936028007 || v4 == 1937072758;
    v7 = 1986817381;
  }
  if (v6 || v4 == v7)
    goto LABEL_12;
  if (v4 == (_DWORD)v5)
  {
    if (!HALB_Info::IsSubClass((HALB_Info *)*((unsigned int *)this + 5), 1953458028))
      goto LABEL_17;
    goto LABEL_31;
  }
  if ((int)v5 <= 1936028006)
  {
    if ((_DWORD)v5 == 1818588780)
    {
LABEL_12:
      *(_QWORD *)&v15.mSelector = 0x676C6F626C637376;
      v15.mElement = 0;
      CAPropertyAddressList::AppendUniqueItem(a2, &v15, a3);
      v10 = 0x676C6F626C636476;
LABEL_13:
      *(_QWORD *)&v15.mSelector = v10;
      v15.mElement = 0;
      CAPropertyAddressList::AppendUniqueItem(a2, &v15, v9);
      return;
    }
    v12 = 1886544237;
  }
  else
  {
    if ((_DWORD)v5 == 1936028007 || (_DWORD)v5 == 1986817381)
      goto LABEL_12;
    v12 = 1937072758;
  }
  if ((_DWORD)v5 == v12)
    goto LABEL_12;
  IsSubClass = HALB_Info::IsSubClass((HALB_Info *)*((unsigned int *)this + 5), 1953458028);
  if (v4 == (_DWORD)v5 || IsSubClass || HALB_Info::IsSubClass(v5, 1953458028))
  {
LABEL_31:
    v10 = 0x676C6F626263766CLL;
    goto LABEL_13;
  }
LABEL_17:
  if (v4 > 1751740517)
  {
    if (v4 == 1751740518 || v4 == 1852601964)
      goto LABEL_36;
    v11 = 1936483188;
  }
  else
  {
    if (v4 == 1668047723 || v4 == 1684370292)
      goto LABEL_36;
    v11 = 1685287523;
  }
  if (v4 == v11)
    goto LABEL_36;
  if (v4 != (_DWORD)v5)
  {
    if ((int)v5 > 1751740517)
    {
      if ((_DWORD)v5 == 1751740518 || (_DWORD)v5 == 1936483188)
        goto LABEL_36;
      v14 = 1852601964;
    }
    else
    {
      if ((_DWORD)v5 == 1668047723 || (_DWORD)v5 == 1684370292)
        goto LABEL_36;
      v14 = 1685287523;
    }
    if ((_DWORD)v5 == v14)
    {
LABEL_36:
      v10 = 0x676C6F6273636369;
      goto LABEL_13;
    }
    if (v4 != (_DWORD)v5 && v4 != 1936744814 && (_DWORD)v5 != 1936744814)
    {
      if (v4 == 1651273579 || v4 == 1936028002 || (_DWORD)v5 == 1651273579 || (_DWORD)v5 == 1936028002)
        goto LABEL_42;
      return;
    }
LABEL_59:
    v10 = 0x676C6F6273706376;
    goto LABEL_13;
  }
  if (v4 == 1936744814 || v4 != (_DWORD)v5)
    goto LABEL_59;
  if (v4 == 1936028002 || v4 == 1651273579)
  {
LABEL_42:
    v10 = 0x676C6F62626C6B62;
    goto LABEL_13;
  }
}

void HALS_Control::GetRangeChangedAddresses(HALS_Control *this, CAPropertyAddressList *a2, const AudioObjectPropertyAddress *a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v6;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  AudioObjectPropertyAddress v12;

  v3 = *((_DWORD *)this + 5);
  v4 = *((_DWORD *)this + 6);
  if (v3 <= 1936028006)
  {
    v5 = v3 == 1818588780;
    v6 = 1886544237;
  }
  else
  {
    v5 = v3 == 1936028007 || v3 == 1937072758;
    v6 = 1986817381;
  }
  if (v5 || v3 == v6)
    goto LABEL_12;
  if (v3 == v4)
    goto LABEL_16;
  if (v4 <= 1936028006)
  {
    if (v4 == 1818588780)
    {
LABEL_12:
      v8 = 0x676C6F626C636472;
LABEL_13:
      *(_QWORD *)&v12.mSelector = v8;
      v12.mElement = 0;
      CAPropertyAddressList::AppendUniqueItem(a2, &v12, a3);
      return;
    }
    v10 = 1886544237;
  }
  else
  {
    if (v4 == 1936028007 || v4 == 1986817381)
      goto LABEL_12;
    v10 = 1937072758;
  }
  if (v4 == v10)
    goto LABEL_12;
LABEL_16:
  if (v3 > 1751740517)
  {
    if (v3 == 1751740518 || v3 == 1852601964)
      goto LABEL_28;
    v9 = 1936483188;
  }
  else
  {
    if (v3 == 1668047723 || v3 == 1684370292)
      goto LABEL_28;
    v9 = 1685287523;
  }
  if (v3 == v9)
    goto LABEL_28;
  if (v3 != v4)
  {
    if (v4 > 1751740517)
    {
      if (v4 == 1751740518 || v4 == 1936483188)
        goto LABEL_28;
      v11 = 1852601964;
    }
    else
    {
      if (v4 == 1668047723 || v4 == 1684370292)
        goto LABEL_28;
      v11 = 1685287523;
    }
    if (v4 == v11)
    {
LABEL_28:
      v8 = 0x676C6F6273636169;
      goto LABEL_13;
    }
    if (v3 != v4 && v3 != 1936744814 && v4 != 1936744814)
    {
      if (v3 == 1651273579 || v3 == 1936028002 || v4 == 1651273579 || v4 == 1936028002)
        goto LABEL_38;
      return;
    }
LABEL_55:
    v8 = 0x676C6F6273706363;
    goto LABEL_13;
  }
  if (v3 == 1936744814 || v3 != v4)
    goto LABEL_55;
  if (v3 == 1936028002 || v3 == 1651273579)
  {
LABEL_38:
    v8 = 0x676C6F62626C6B64;
    goto LABEL_13;
  }
}

HALS_Object *HALS_Control::HALS_Control(HALS_Object *a1, uint64_t a2, int a3, int a4, HALS_Object *a5, int a6, int a7)
{
  int v9;
  uint64_t v12;
  uint64_t v13;

  v9 = (int)a5;
  HALS_Object::HALS_Object(a1, a3, a4, a2, a5);
  *(_QWORD *)v12 = off_1E6995A68;
  *(_DWORD *)(v12 + 48) = v9;
  *(_DWORD *)(v12 + 52) = a6;
  *(_DWORD *)(v12 + 56) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(v12 + 60) = a7;
  v13 = operator new();
  *(_QWORD *)v13 = &off_1E696F458;
  *(_QWORD *)(v13 + 8) = a1;
  *(_BYTE *)(v13 + 16) = 0;
  *((_QWORD *)a1 + 8) = v13;
  return a1;
}

void sub_1B5BDBF34(_Unwind_Exception *a1)
{
  HALS_Object *v1;

  HALS_Object::~HALS_Object(v1);
  _Unwind_Resume(a1);
}

void HALS_MetaSubTap::~HALS_MetaSubTap(HALS_MetaSubTap *this)
{
  *(_QWORD *)this = off_1E6995B60;
  CACFString::~CACFString((HALS_MetaSubTap *)((char *)this + 56));
  HALS_Object::~HALS_Object(this);
}

{
  *(_QWORD *)this = off_1E6995B60;
  CACFString::~CACFString((HALS_MetaSubTap *)((char *)this + 56));
  HALS_Object::~HALS_Object(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t HALS_MetaSubTap::_Deactivate(uint64_t this)
{
  *(_DWORD *)(this + 8) = 0;
  return this;
}

uint64_t HALS_MetaSubTap::HasProperty(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t result;
  int v6;
  int v7;

  result = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 176))(a1, a3, a4);
  if ((_DWORD)result)
  {
    v6 = *a3;
    if (*a3 > 1685218931)
    {
      if (v6 == 1685218932)
      {
        return 1;
      }
      else if (v6 == 2020373603)
      {
        v7 = a3[1];
        return v7 == 1768845428 || v7 == 1869968496;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return v6 == 1685218913 || v6 == 1685218929;
    }
  }
  return result;
}

uint64_t HALS_MetaSubTap::IsPropertySettable(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  _DWORD *exception;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  result = 1;
  if (((*a3 - 1685218913) > 0x13 || ((1 << (*a3 - 97)) & 0x90001) == 0) && *a3 != 2020373603)
    return 0;
  return result;
}

uint64_t HALS_MetaSubTap::GetPropertyDataSize(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  _DWORD *exception;

  if (((*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, a3, a6) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  v7 = *a3;
  if (*a3 == 2020373603)
    v8 = 8;
  else
    v8 = 0;
  if (v7 == 1685218932)
    v9 = 4;
  else
    v9 = v8;
  if (v7 == 1685218929)
    v10 = 4;
  else
    v10 = 0;
  if (v7 == 1685218913)
    v11 = 4;
  else
    v11 = v10;
  if (v7 <= 1685218931)
    return v11;
  else
    return v9;
}

void HALS_MetaSubTap::GetPropertyData(HALS_MetaSubTap *this, uint64_t a2, const AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, void *a6, uint64_t a7, const void *a8, HALS_Client *a9)
{
  AudioObjectPropertySelector mSelector;
  unsigned int v15;
  _QWORD *v16;
  HALB_Mutex *v17;
  _DWORD *exception;
  int v19;
  NSObject *v20;
  const char *v21;
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[7];
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_MetaSubTap *, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *, unsigned int *, void *, uint64_t, const void *))(*(_QWORD *)this + 88))(this, a2, a3, a9, a5, a6, a7, a8) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    v19 = 2003332927;
    goto LABEL_28;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1685218931)
  {
    if (mSelector == 1685218932)
    {
      if (a4 > 3)
      {
        v24[0] = MEMORY[0x1E0C809B0];
        v24[1] = 0x40000000;
        v24[2] = ___ZNK15HALS_MetaSubTap15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2;
        v24[3] = &__block_descriptor_tmp_3_11510;
        v24[4] = this;
        v24[5] = a6;
        v15 = 4;
        v16 = v24;
        goto LABEL_15;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_27;
      *(_DWORD *)buf = 136315394;
      v27 = "HALS_MetaSubTap.cpp";
      v28 = 1024;
      v29 = 170;
      v20 = MEMORY[0x1E0C81028];
      v21 = "%25s:%-5d  HALS_MetaSubTap::_GetPropertyData: bad property data size for kAudioSubDevicePropertyDriftCompensation";
    }
    else
    {
      if (mSelector != 2020373603)
        return;
      if (a4 > 7)
      {
        v25[0] = MEMORY[0x1E0C809B0];
        v25[1] = 0x40000000;
        v25[2] = ___ZNK15HALS_MetaSubTap15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
        v25[3] = &__block_descriptor_tmp_11508;
        v25[4] = this;
        v25[5] = a6;
        v25[6] = a3;
        v15 = 8;
        v16 = v25;
        goto LABEL_15;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_27;
      *(_DWORD *)buf = 136315394;
      v27 = "HALS_MetaSubTap.cpp";
      v28 = 1024;
      v29 = 161;
      v20 = MEMORY[0x1E0C81028];
      v21 = "%25s:%-5d  HALS_MetaSubTap::_GetPropertyData: bad property data size for kAudioSubDevicePropertyExtraLatency";
    }
    goto LABEL_26;
  }
  if (mSelector == 1685218913)
  {
    if (a4 > 3)
    {
      v23[0] = MEMORY[0x1E0C809B0];
      v23[1] = 0x40000000;
      v23[2] = ___ZNK15HALS_MetaSubTap15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_4;
      v23[3] = &__block_descriptor_tmp_5_11512;
      v23[4] = this;
      v23[5] = a6;
      v15 = 4;
      v16 = v23;
      goto LABEL_15;
    }
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_27;
    *(_DWORD *)buf = 136315394;
    v27 = "HALS_MetaSubTap.cpp";
    v28 = 1024;
    v29 = 179;
    v20 = MEMORY[0x1E0C81028];
    v21 = "%25s:%-5d  HALS_MetaSubTap::_GetPropertyData: bad property data size for kAudioSubDevicePropertyDriftCompensationAlgorithm";
    goto LABEL_26;
  }
  if (mSelector != 1685218929)
    return;
  if (a4 <= 3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
LABEL_27:
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E69A1B30;
      v19 = 561211770;
LABEL_28:
      exception[2] = v19;
    }
    *(_DWORD *)buf = 136315394;
    v27 = "HALS_MetaSubTap.cpp";
    v28 = 1024;
    v29 = 188;
    v20 = MEMORY[0x1E0C81028];
    v21 = "%25s:%-5d  HALS_MetaSubTap::_GetPropertyData: bad property data size for kAudioSubDevicePropertyDriftCompensationQuality";
LABEL_26:
    _os_log_impl(&dword_1B57BA000, v20, OS_LOG_TYPE_ERROR, v21, buf, 0x12u);
    goto LABEL_27;
  }
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 0x40000000;
  v22[2] = ___ZNK15HALS_MetaSubTap15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_6;
  v22[3] = &__block_descriptor_tmp_7_11514;
  v22[4] = this;
  v22[5] = a6;
  v15 = 4;
  v16 = v22;
LABEL_15:
  v17 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubTap *))(*(_QWORD *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v17, (uint64_t)v16);
  *a5 = v15;
}

void HALS_MetaSubTap::SetPropertyData(HALS_MetaSubTap *this, uint64_t a2, const AudioObjectPropertyAddress *a3, unsigned int a4, const void *a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  HALS_Object *v13;
  HALS_ObjectMap *v14;
  AudioObjectPropertySelector mSelector;
  HALB_Mutex *v16;
  HALS_NotificationManager *v17;
  uint64_t v18;
  HALB_Mutex *v19;
  HALS_NotificationManager *v20;
  uint64_t v21;
  HALB_Mutex *v22;
  HALS_NotificationManager *v23;
  uint64_t v24;
  HALB_Mutex *v25;
  HALS_NotificationManager *v26;
  uint64_t v27;
  AudioObjectPropertyScope mScope;
  _DWORD *exception;
  NSObject *v30;
  const char *v31;
  _DWORD *v32;
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[7];
  AudioObjectPropertyAddress buf;
  __int16 v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_MetaSubTap *, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *, const void *, uint64_t, const void *))(*(_QWORD *)this + 96))(this, a2, a3, a8, a5, a6, a7) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  v14 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1685218931)
  {
    if (mSelector == 1685218932)
    {
      if (a4 <= 3)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_38;
        buf.mSelector = 136315394;
        *(_QWORD *)&buf.mScope = "HALS_MetaSubTap.cpp";
        v38 = 1024;
        v39 = 226;
        v30 = MEMORY[0x1E0C81028];
        v31 = "%25s:%-5d  HALS_MetaSubTap::_SetPropertyData: bad property data size for kAudioSubDevicePropertyDriftCompensation";
        goto LABEL_37;
      }
      v35[0] = MEMORY[0x1E0C809B0];
      v35[1] = 0x40000000;
      v35[2] = ___ZN15HALS_MetaSubTap15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_9;
      v35[3] = &__block_descriptor_tmp_10_11501;
      v35[4] = this;
      v35[5] = a5;
      v25 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubTap *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v25, (uint64_t)v35);
      v26 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
      if (a8)
        v27 = *((unsigned int *)a8 + 4);
      else
        v27 = 0;
      strcpy((char *)&buf, "tfrdbolg");
      BYTE1(buf.mElement) = 0;
      HIWORD(buf.mElement) = 0;
      HALS_Object::PropertiesChanged(this, v26, v27, 1, &buf);
    }
    else
    {
      if (mSelector != 2020373603)
        goto LABEL_27;
      if (a4 <= 7)
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_38;
        buf.mSelector = 136315394;
        *(_QWORD *)&buf.mScope = "HALS_MetaSubTap.cpp";
        v38 = 1024;
        v39 = 213;
        v30 = MEMORY[0x1E0C81028];
        v31 = "%25s:%-5d  HALS_MetaSubTap::_SetPropertyData: bad property data size for kAudioSubDevicePropertyExtraLatency";
        goto LABEL_37;
      }
      v36[0] = MEMORY[0x1E0C809B0];
      v36[1] = 0x40000000;
      v36[2] = ___ZN15HALS_MetaSubTap15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
      v36[3] = &__block_descriptor_tmp_8_11499;
      v36[4] = this;
      v36[5] = a3;
      v36[6] = a5;
      v19 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubTap *))(*(_QWORD *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v19, (uint64_t)v36);
      v20 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
      if (a8)
        v21 = *((unsigned int *)a8 + 4);
      else
        v21 = 0;
      mScope = a3->mScope;
      buf.mSelector = 2020373603;
      *(_QWORD *)&buf.mScope = mScope;
      HALS_Object::PropertiesChanged(this, v20, v21, 1, &buf);
    }
  }
  else
  {
    if (mSelector != 1685218913)
    {
      if (mSelector != 1685218929)
        goto LABEL_27;
      if (a4 > 3)
      {
        v33[0] = MEMORY[0x1E0C809B0];
        v33[1] = 0x40000000;
        v33[2] = ___ZN15HALS_MetaSubTap15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_13;
        v33[3] = &__block_descriptor_tmp_14_11505;
        v33[4] = this;
        v33[5] = a5;
        v16 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubTap *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v16, (uint64_t)v33);
        v17 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
        if (a8)
          v18 = *((unsigned int *)a8 + 4);
        else
          v18 = 0;
        strcpy((char *)&buf, "qfrdbolg");
        BYTE1(buf.mElement) = 0;
        HIWORD(buf.mElement) = 0;
        HALS_Object::PropertiesChanged(this, v17, v18, 1, &buf);
        goto LABEL_27;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
LABEL_38:
        v32 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v32 = &off_1E69A1B30;
        v32[2] = 561211770;
      }
      buf.mSelector = 136315394;
      *(_QWORD *)&buf.mScope = "HALS_MetaSubTap.cpp";
      v38 = 1024;
      v39 = 252;
      v30 = MEMORY[0x1E0C81028];
      v31 = "%25s:%-5d  HALS_MetaSubTap::_SetPropertyData: bad property data size for kAudioSubDevicePropertyDriftCompensationQuality";
LABEL_37:
      _os_log_impl(&dword_1B57BA000, v30, OS_LOG_TYPE_ERROR, v31, (uint8_t *)&buf, 0x12u);
      goto LABEL_38;
    }
    if (a4 <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_38;
      buf.mSelector = 136315394;
      *(_QWORD *)&buf.mScope = "HALS_MetaSubTap.cpp";
      v38 = 1024;
      v39 = 239;
      v30 = MEMORY[0x1E0C81028];
      v31 = "%25s:%-5d  HALS_MetaSubTap::_SetPropertyData: bad property data size for kAudioSubDevicePropertyDriftCompensationAlgorithm";
      goto LABEL_37;
    }
    v34[0] = MEMORY[0x1E0C809B0];
    v34[1] = 0x40000000;
    v34[2] = ___ZN15HALS_MetaSubTap15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_11;
    v34[3] = &__block_descriptor_tmp_12_11503;
    v34[4] = this;
    v34[5] = a5;
    v22 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubTap *))(*(_QWORD *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v22, (uint64_t)v34);
    v23 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
    if (a8)
      v24 = *((unsigned int *)a8 + 4);
    else
      v24 = 0;
    strcpy((char *)&buf, "afrdbolg");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    HALS_Object::PropertiesChanged(this, v23, v24, 1, &buf);
  }
LABEL_27:
  HALS_ObjectMap::ReleaseObject(v14, v13);
}

void sub_1B5BDCABC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t ___ZN15HALS_MetaSubTap15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 32) + 4 * (**(_DWORD **)(result + 40) == 1768845428) + 80) = **(double **)(result + 48);
  return result;
}

uint64_t ___ZN15HALS_MetaSubTap15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_9(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 89) = **(_DWORD **)(result + 40) != 0;
  return result;
}

uint64_t ___ZN15HALS_MetaSubTap15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_11(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 32) + 92) = **(_DWORD **)(result + 40);
  return result;
}

uint64_t ___ZN15HALS_MetaSubTap15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_13(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 32) + 96) = **(_DWORD **)(result + 40);
  return result;
}

double ___ZNK15HALS_MetaSubTap15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t a1, double a2)
{
  double result;

  LODWORD(a2) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * (**(_DWORD **)(a1 + 48) == 1768845428) + 80);
  result = (double)*(unint64_t *)&a2;
  **(double **)(a1 + 40) = result;
  return result;
}

uint64_t ___ZNK15HALS_MetaSubTap15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(unsigned __int8 *)(*(_QWORD *)(result + 32) + 89);
  return result;
}

uint64_t ___ZNK15HALS_MetaSubTap15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_4(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(_DWORD *)(*(_QWORD *)(result + 32) + 92);
  return result;
}

uint64_t ___ZNK15HALS_MetaSubTap15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_6(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(_DWORD *)(*(_QWORD *)(result + 32) + 96);
  return result;
}

void HALS_PDPControl::Activate(HALS_PDPControl *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  HALS_Object *v6;
  AudioObjectPropertyAddress v7;
  unsigned int v8;

  v7.mElement = 0;
  v8 = 4;
  v2 = *((_QWORD *)this + 9);
  v3 = *((unsigned int *)this + 4);
  *(_QWORD *)&v7.mSelector = 0x676C6F6263736370;
  HALS_PDPUCPlugIn::ObjectGetPropertyData(*(HALS_PDPUCPlugIn **)(v2 + 72), v3, &v7, 0, 0, &v8, (char *)this + 48);
  v7.mElement = 0;
  v8 = 4;
  v4 = *((_QWORD *)this + 9);
  v5 = *((unsigned int *)this + 4);
  *(_QWORD *)&v7.mSelector = 0x676C6F6263656C6DLL;
  HALS_PDPUCPlugIn::ObjectGetPropertyData(*(HALS_PDPUCPlugIn **)(v4 + 72), v5, &v7, 0, 0, &v8, (char *)this + 52);
  HALS_Object::Activate(this, v6);
}

void HALS_PDPControl::~HALS_PDPControl(HALS_PDPControl *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6995A68;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  HALS_Object::~HALS_Object(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E6995A68;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  HALS_Object::~HALS_Object(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t HALS_PDPControl::HasProperty(_QWORD *a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t result;
  int v8;
  BOOL v9;
  int v10;

  result = (*(uint64_t (**)(_QWORD *, int *, uint64_t))(*a1 + 176))(a1, a3, a4);
  if ((_DWORD)result)
  {
    v8 = *a3;
    if (*a3 <= 1852400498)
    {
      v9 = v8 == 1650682995;
      v10 = 1668047219;
    }
    else
    {
      v9 = v8 == 1852400499 || v8 == 1937007734;
      v10 = 1869638759;
    }
    if (v9 || v8 == v10)
      return HALS_Control::HasProperty((uint64_t)a1, a2, a3);
    else
      return (*(unsigned int (**)(uint64_t, int *))(a1[9] + 48))(a2, a3) != 0;
  }
  return result;
}

uint64_t HALS_PDPControl::IsPropertySettable(_QWORD *a1, uint64_t a2, AudioObjectPropertyAddress *a3)
{
  int mSelector;
  BOOL v7;
  int v8;
  _DWORD *exception;

  if (((*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1852400498)
  {
    v7 = mSelector == 1650682995;
    v8 = 1668047219;
  }
  else
  {
    v7 = mSelector == 1852400499 || mSelector == 1937007734;
    v8 = 1869638759;
  }
  if (v7 || mSelector == v8)
    return HALS_Control::IsPropertySettable((uint64_t)a1, a2, (int *)a3);
  else
    return HALS_PDPUCPlugIn::ObjectIsPropertySettable(*(HALS_PDPUCPlugIn **)(a1[9] + 56), a2, a3);
}

uint64_t HALS_PDPControl::GetPropertyDataSize(_QWORD *a1, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, uint64_t a6)
{
  int mSelector;
  BOOL v12;
  int v13;
  _DWORD *exception;

  if (((*(uint64_t (**)(_QWORD *, uint64_t, AudioObjectPropertyAddress *, uint64_t))(*a1 + 88))(a1, a2, a3, a6) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1852400498)
  {
    v12 = mSelector == 1650682995;
    v13 = 1668047219;
  }
  else
  {
    v12 = mSelector == 1852400499 || mSelector == 1937007734;
    v13 = 1869638759;
  }
  if (v12 || mSelector == v13)
    return HALS_Control::GetPropertyDataSize((uint64_t)a1, a2, (int *)a3);
  else
    return HALS_PDPUCPlugIn::ObjectGetPropertyDataSize(*(HALS_PDPUCPlugIn **)(a1[9] + 64), a2, a3, a4, a5);
}

uint64_t HALS_PDPControl::GetPropertyData(HALS_PDPControl *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, uint64_t *a6, uint64_t a7, const void *a8, HALS_Client *a9)
{
  AudioObjectPropertySelector mSelector;
  uint64_t v20;
  _DWORD *exception;
  AudioObjectPropertyAddress v22;

  if (((*(uint64_t (**)(HALS_PDPControl *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 88))(this, a2, a3, a9) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1852400498)
  {
    if (mSelector != 1650682995 && mSelector != 1668047219)
      goto LABEL_6;
    return HALS_Control::GetPropertyData((uint64_t)this, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  if (mSelector != 1852400499)
  {
    if (mSelector != 1937007734 && mSelector != 1869638759)
    {
LABEL_6:
      *a5 = a4;
      return HALS_PDPUCPlugIn::ObjectGetPropertyData(*(HALS_PDPUCPlugIn **)(*((_QWORD *)this + 9) + 72), a2, a3, a7, a8, a5, a6);
    }
    return HALS_Control::GetPropertyData((uint64_t)this, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  *a5 = a4;
  v20 = *((_QWORD *)this + 9);
  *(_QWORD *)&v22.mSelector = 0x676C6F626C6E616DLL;
  v22.mElement = 0;
  return HALS_PDPUCPlugIn::ObjectGetPropertyData(*(HALS_PDPUCPlugIn **)(v20 + 72), a2, &v22, a7, a8, a5, a6);
}

uint64_t HALS_PDPControl::SetPropertyData(HALS_PDPControl *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, void *a5, unsigned int a6, uint64_t a7, HALS_Client *a8)
{
  const AudioObjectPropertyAddress *v16;
  signed int mSelector;
  unint64_t v18;
  AudioObjectPropertyElement mElement;
  unsigned int v20;
  unsigned int v21;
  int v22;
  HALS_ObjectMap *v23;
  const char *v24;
  char *v25;
  _DWORD *exception;
  _DWORD *v28;
  int v29;
  unsigned int v30;
  void *v31;
  void *__p[2];
  char v33;
  void *v34[2];
  char v35;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(HALS_PDPControl *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(_QWORD *)this + 96))(this, a2, a3, a8) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E69A1B30;
    exception[2] = 2003332927;
  }
  v30 = a6;
  v31 = (void *)a7;
  if (HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 14)))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v37 = "HALS_PDPControl.cpp";
      v38 = 1024;
      v39 = 146;
      _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPControl::SetPropertyData: owning device is missing", buf, 0x12u);
    }
    v28 = __cxa_allocate_exception(0x10uLL);
    v29 = 560947818;
LABEL_31:
    *(_QWORD *)v28 = &off_1E69A1B30;
    v28[2] = v29;
  }
  mSelector = a3->mSelector;
  if (!HALB_Info::PropertyRequiresHogMode((HALB_Info *)a3->mSelector, v16))
    goto LABEL_6;
  if (!HALS_Device::IsHogModeOwnerOrFree(0, a8))
  {
    v28 = __cxa_allocate_exception(0x10uLL);
    v29 = 560492391;
    goto LABEL_31;
  }
  mSelector = a3->mSelector;
LABEL_6:
  if (mSelector > 1818456949)
  {
    if (mSelector == 1818456950)
      goto LABEL_15;
    if (mSelector != 1937007734 && mSelector != 1869638759)
      goto LABEL_24;
  }
  else if (mSelector != 1650682995 && mSelector != 1668047219)
  {
    if (mSelector != 1818453110)
    {
LABEL_24:
      HALS_PDPUCPlugIn::ObjectSetPropertyData(*(HALS_PDPUCPlugIn **)(*((_QWORD *)this + 9) + 80), a2, a3, v30, v31, a4, a5);
      return pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
    }
LABEL_15:
    std::string::basic_string[abi:ne180100]<0>(v34, "HALS_PDPControl::SetPropertyData");
    v18 = *(_QWORD *)&a3->mSelector;
    mElement = a3->mElement;
    v21 = *((_DWORD *)this + 12);
    v20 = *((_DWORD *)this + 13);
    v23 = (HALS_ObjectMap *)*((unsigned int *)this + 14);
    v22 = *((_DWORD *)this + 15);
    v24 = "no control type";
    if (v22 == 1)
      v24 = "software control";
    if (v22)
      v25 = (char *)v24;
    else
      v25 = "external driver";
    std::string::basic_string[abi:ne180100]<0>(__p, v25);
    LogVolumeChangeForServerSideControl((uint64_t)v34, a2, v18, mElement, a4, (float *)a5, v23, v21, v20, (uint64_t)__p);
    if (v33 < 0)
      operator delete(__p[0]);
    if (v35 < 0)
      operator delete(v34[0]);
    goto LABEL_24;
  }
  kdebug_trace();
  HALS_Control::SetPropertyData((uint64_t)this, a2, (int *)a3, a4, (uint64_t)a5, a6, a7, (uint64_t)a8);
  kdebug_trace();
  return pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
}

void sub_1B5BDD508(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, HALS_ObjectMap *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  HALS_ObjectMap::ReleaseObject(a12, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_PDPControl::GetHardwareReferenceStreamControlValue()
{
  return 0;
}

uint64_t AMCP::get_system_property_traits_list(AMCP *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  char v4;
  char **v5;
  char *v6;

  if ((v1 & 1) == 0
  {
    AMCP::get_system_property_traits_list(void)::s_indesctructible_property_traits_list_ptr = 0;
  }
  v2 = atomic_load(&AMCP::get_system_property_traits_list(void)::once);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&AMCP::get_system_property_traits_list(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_system_property_traits_list(void)::$_0 &&>>);
  }
  return AMCP::get_system_property_traits_list(void)::s_indesctructible_property_traits_list_ptr;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_system_property_traits_list(void)::$_0 &&>>()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  void *v3;
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;
  void **v7[2];
  char v8;
  int v9[12];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v9, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v17, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v18, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v19, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v20, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v21, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v22, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v23, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v24, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v25, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v26, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v27, 1886152483, 1, 0, 0, &AMCP::Property_Traits<1886152483u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668577315u>::k_valid_scopes, 0, 1886152483, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v28, 1651472419, 1, 0, 0, &AMCP::Property_Traits<1651472419u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668049699u>::k_valid_scopes, 0, 1651472419, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v29, 1668049699, 1, 0, 0, &AMCP::Property_Traits<1668049699u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1684370979u>::k_valid_scopes, 0, 1668049699, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v30, 1684370979, 1, 0, 0, &AMCP::Property_Traits<1684370979u>::k_valid_scopes, (uint64_t)"N14mcp_applesauce2CF15PropertyListRefE", 0, 1684370979, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v31, 1668577315, 1, 0, 0, &AMCP::Property_Traits<1668577315u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1852793891u>::k_valid_scopes, 0, 0, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v32, 1852793891, 1, 0, 0, &AMCP::Property_Traits<1852793891u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651861860u>::k_valid_scopes, 0, 0, 14);
  v0 = operator new();
  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  v7[1] = (void **)v0;
  v8 = 0;
  v1 = (char *)operator new(0x480uLL);
  *(_QWORD *)v0 = v1;
  *(_QWORD *)(v0 + 8) = v1;
  *(_QWORD *)(v0 + 16) = v1 + 1152;
  *(_QWORD *)(v0 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Live_Property_Traits>,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits*>(v0 + 16, v9, (int *)&v33, (uint64_t)v1);
  v7[0] = 0;
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100]((void ***)&AMCP::get_system_property_traits_list(void)::s_indesctructible_property_traits_list_ptr, (void **)v0);
  std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100](v7, 0);
  v2 = 288;
  do
  {
    v3 = *(void **)&v9[v2 - 10];
    if (v3)
    {
      *(_QWORD *)&v9[v2 - 8] = v3;
      operator delete(v3);
    }
    v2 -= 12;
  }
  while (v2 * 4);
  v4 = *(unsigned int **)(AMCP::get_system_property_traits_list(void)::s_indesctructible_property_traits_list_ptr + 8);
  v5 = 126
     - 2
     * __clz(0xAAAAAAAAAAAAAAABLL* (((uint64_t)v4- *(_QWORD *)AMCP::get_system_property_traits_list(void)::s_indesctructible_property_traits_list_ptr) >> 4));
  if (v4 == *(unsigned int **)AMCP::get_system_property_traits_list(void)::s_indesctructible_property_traits_list_ptr)
    v6 = 0;
  else
    v6 = v5;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *,false>(*(unsigned int **)AMCP::get_system_property_traits_list(void)::s_indesctructible_property_traits_list_ptr, v4, v6, 1);
}

void sub_1B5BDDC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;

  v16 = v15;
  *(_QWORD *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1B5E50688](v14, 0x20C40960023A9);
  v18 = 1152;
  while (1)
  {
    v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(_QWORD *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18)
      _Unwind_Resume(a1);
  }
}

std::string *AMCP::IO_Core::Stream_Connection::Stream_Connection(std::string *this, __int128 *a2, std::string::size_type a3, int a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  __int128 v14;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  std::string::size_type v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  const AudioStreamBasicDescription *v26;
  const AudioStreamBasicDescription *v27;
  AMCP::Log::Scope_Registry *v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v34;
  NSObject *v35;
  unint64_t *v36;
  unint64_t v37;
  _opaque_pthread_t *v38;
  mach_port_t v39;
  std::runtime_error *exception;
  int v41;
  uint64_t v42;
  std::runtime_error v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  __int128 v46;
  uint64_t v47;
  uint64_t (**v48)();
  __int128 v49;
  uint64_t v50;
  std::runtime_error v51;
  std::runtime_error v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char v58;
  AudioConverterRef outAudioConverter;
  uint8_t buf[8];
  _BYTE v61[10];
  __int16 v62;
  int v63;
  _BYTE v64[24];
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v14 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v14;
  }
  v15 = *((_QWORD *)a2 + 3);
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 8);
  this[1].__r_.__value_.__r.__words[0] = v15;
  this[1].__r_.__value_.__r.__words[2] = a3;
  LODWORD(this[2].__r_.__value_.__l.__data_) = a4;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  v44 = 0;
  v45 = 0;
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&this[3], &v44);
  v16 = v45;
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = *a5;
  v20 = a5[1];
  this[7].__r_.__value_.__r.__words[2] = *((_QWORD *)a5 + 4);
  *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = v20;
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[1] = v19;
  *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = *(_OWORD *)a7;
  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a7 + 8) = 0;
  this[8].__r_.__value_.__r.__words[2] = 0;
  this[11].__r_.__value_.__s.__data_[0] = 0;
  this[11].__r_.__value_.__l.__size_ = 0;
  this[11].__r_.__value_.__r.__words[2] = 0;
  this[9].__r_.__value_.__r.__words[0] = 0;
  this[9].__r_.__value_.__s.__data_[8] = 0;
  v21 = *(_OWORD *)(a6 + 16);
  v22 = *(_QWORD *)(a6 + 32);
  *(_OWORD *)&this[12].__r_.__value_.__l.__data_ = *(_OWORD *)a6;
  *(_OWORD *)&this[12].__r_.__value_.__r.__words[2] = v21;
  this[13].__r_.__value_.__l.__size_ = v22;
  this[13].__r_.__value_.__r.__words[2] = 0;
  this[14].__r_.__value_.__r.__words[0] = 0;
  this[14].__r_.__value_.__l.__size_ = 0;
  if (*(double *)a5 == *(double *)a6
    && *((_DWORD *)a5 + 2) == *(_DWORD *)(a6 + 8)
    && *((_DWORD *)a5 + 3) == *(_DWORD *)(a6 + 12)
    && *((_DWORD *)a5 + 4) == *(_DWORD *)(a6 + 16)
    && *((_DWORD *)a5 + 5) == *(_DWORD *)(a6 + 20)
    && *((_DWORD *)a5 + 6) == *(_DWORD *)(a6 + 24)
    && *((_DWORD *)a5 + 7) == *(_DWORD *)(a6 + 28)
    && *((_DWORD *)a5 + 8) == *(_DWORD *)(a6 + 32))
  {
    std::unique_ptr<OpaqueAudioConverter,AMCP::IO_Core::Stream_Connection::AudioConverter_Deleter>::reset[abi:ne180100]((OpaqueAudioConverter **)&this[14].__r_.__value_.__l.__size_, 0);
    *(_QWORD *)buf = 0;
    *(_QWORD *)v61 = 0;
    std::shared_ptr<AMCP::Log::Scope>::operator=[abi:ne180100]((uint64_t)&this[13].__r_.__value_.__r.__words[2], (__int128 *)buf);
    v23 = *(std::__shared_weak_count **)v61;
    if (*(_QWORD *)v61)
    {
      v24 = (unint64_t *)(*(_QWORD *)v61 + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  else
  {
    outAudioConverter = 0;
    if (a4)
      v26 = (const AudioStreamBasicDescription *)a6;
    else
      v26 = (const AudioStreamBasicDescription *)a5;
    if (a4)
      v27 = (const AudioStreamBasicDescription *)a5;
    else
      v27 = (const AudioStreamBasicDescription *)a6;
    v28 = (AMCP::Log::Scope_Registry *)AudioConverterNew(v26, v27, &outAudioConverter);
    if ((_DWORD)v28)
    {
      AMCP::Log::Scope_Registry::get(v28);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v34 = *(std::__shared_weak_count **)v61;
      v35 = **(NSObject ***)buf;
      if (*(_QWORD *)v61)
      {
        v36 = (unint64_t *)(*(_QWORD *)v61 + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        v38 = pthread_self();
        v39 = pthread_mach_thread_np(v38);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v39;
        *(_WORD *)v61 = 2080;
        *(_QWORD *)&v61[2] = "Stream_Connection.cpp";
        v62 = 1024;
        v63 = 261;
        *(_WORD *)v64 = 2080;
        *(_QWORD *)&v64[2] = "err";
        _os_log_error_impl(&dword_1B57BA000, v35, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to create audio format converter for stream connection", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v58);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v51, "Failed to create audio format converter for stream connection");
      std::runtime_error::runtime_error(&v52, &v51);
      v54 = 0;
      v55 = 0;
      v56 = 0;
      v57 = -1;
      v52.__vftable = (std::runtime_error_vtbl *)&off_1E69A1FB8;
      v53 = &unk_1E69A1FE0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v52);
      *(_QWORD *)&v64[8] = "void AMCP::IO_Core::Stream_Connection::configure_audio_converter(AMCP::Direction, const CA::S"
                           "treamDescription &, const CA::StreamDescription &)";
      *(_QWORD *)&v64[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Stream_Connection.cpp";
      v65 = 261;
      std::vector<void *>::vector(&v46);
      v41 = backtrace((void **)v46, (*((_QWORD *)&v46 + 1) - (_QWORD)v46) >> 3);
      std::vector<void *>::resize((char **)&v46, v41);
      v49 = v46;
      v50 = v47;
      v46 = 0uLL;
      v47 = 0;
      v48 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)buf, (uint64_t)&v48);
      exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F88;
      std::runtime_error::runtime_error(exception, (const std::runtime_error *)buf);
      exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A2000;
      v42 = *(_QWORD *)v64;
      exception[1].__imp_.__imp_ = *(const char **)v64;
      if (v42)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
      v43 = *(std::runtime_error *)&v64[8];
      LODWORD(exception[3].__vftable) = v65;
      exception[2] = v43;
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E69A1EE8;
      exception[1].__vftable = (std::runtime_error_vtbl *)&unk_1E69A1F20;
      exception[3].__imp_.__imp_ = (const char *)&unk_1E69A1F58;
    }
    v29 = (_QWORD *)operator new();
    AMCP::DAL::DAL_Buffer::get_timebase((AMCP::DAL::DAL_Buffer *)buf, (uint64_t)this[8].__r_.__value_.__l.__data_);
    AMCP::DAL::Fixed_Buffer::Fixed_Buffer(v29, a6, buf, 8192.0);
    std::shared_ptr<AMCP::DAL::DAL_Buffer>::reset[abi:ne180100]<AMCP::DAL::Fixed_Buffer,void>((uint64_t)&this[13].__r_.__value_.__r.__words[2], (uint64_t)v29);
    v30 = *(std::__shared_weak_count **)v61;
    if (*(_QWORD *)v61)
    {
      v31 = (unint64_t *)(*(_QWORD *)v61 + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    std::unique_ptr<OpaqueAudioConverter,AMCP::IO_Core::Stream_Connection::AudioConverter_Deleter>::reset[abi:ne180100]((OpaqueAudioConverter **)&this[14].__r_.__value_.__l.__size_, outAudioConverter);
  }
  return this;
}

void sub_1B5BDE214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, std::runtime_error a18, std::runtime_error a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;

  v34 = *(std::__shared_weak_count **)(v32 - 136);
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  std::unique_ptr<OpaqueAudioConverter,AMCP::IO_Core::Stream_Connection::AudioConverter_Deleter>::reset[abi:ne180100]((OpaqueAudioConverter **)(v28 + 344), 0);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v31);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v30 + 64);
  if (*(_BYTE *)(v28 + 264))
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v28 + 248);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v30);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v29);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v28 + 136);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v28 + 96);
  if (*(char *)(v28 + 23) < 0)
    operator delete(*(void **)v28);
  _Unwind_Resume(a1);
}

void AMCP::IO_Core::Stream_Connection::get_unique_read_range(AMCP::IO_Core::Stream_Connection *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  _QWORD v15[4];
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v2 = *((_QWORD *)this + 24);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  v14 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v2 + 72))(v15);
  AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v15);
  AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v17);
  v6 = v18;
  if (v18)
  {
    v7 = (unint64_t *)&v18->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v14)
  {
    v12 = (unint64_t *)&v14->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1B5BDE5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void AMCP::IO_Core::Stream_Connection::maybe_capture_audio(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  _QWORD *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  _opaque_pthread_t *v10;
  mach_port_t v11;
  void *exception;
  __int128 v13;
  uint64_t v14;
  uint64_t (**v15)();
  __int128 v16;
  uint64_t v17;
  std::string v18;
  std::logic_error v19;
  std::logic_error v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  uint8_t buf[8];
  __int16 v30;
  char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  _BYTE v35[14];
  const char *v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)(a1 + 272);
  v3 = *(std::__shared_weak_count **)(a1 + 280);
  v27 = v4;
  v28 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (v4)
  {
    if (!*(_BYTE *)(a1 + 264))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v9 = **(NSObject ***)buf;
      std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = pthread_self();
        v11 = pthread_mach_thread_np(v10);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v11;
        v30 = 2080;
        v31 = "Stream_Connection.cpp";
        v32 = 1024;
        v33 = 204;
        v34 = 2080;
        *(_QWORD *)v35 = "not (m_current_time_for_audio_capture)";
        _os_log_error_impl(&dword_1B57BA000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s cycle data must have been captured for this cycle before we can write to the file", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
      exception = __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"cycle data must have been captured for this cycle before we can write to the file", (uint64_t)&v18);
      std::logic_error::logic_error(&v19, &v18);
      v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
      std::logic_error::logic_error(&v20, &v19);
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = -1;
      v20.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
      v21 = &unk_1E69A1230;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
      *(_QWORD *)&v35[6] = "void AMCP::IO_Core::Stream_Connection::maybe_capture_audio(const DAL::Readable_Range &)";
      v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Stream_Connection.cpp";
      v37 = 204;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
      v16 = v13;
      v17 = v14;
      v13 = 0uLL;
      v14 = 0;
      v15 = off_1E69A20A0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v15);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
    }
    AMCP::DAL::create_timestamp_data((AMCP::DAL *)buf, (const AMCP::DAL::DAL_Time *)(a1 + 224), *(const AMCP::DAL::DAL_Timed_Segment **)(a2 + 24), *(std::__shared_weak_count **)(a2 + 32));
    (*(void (**)(_QWORD, uint8_t *, uint64_t))(*(_QWORD *)*v4 + 16))(*v4, buf, a2);
    std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table((uint64_t)buf);
  }
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1B5BDE870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;

  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100](v27 - 128);
  _Unwind_Resume(a1);
}

AMCP::Log::Scope_Registry *AMCP::IO_Core::Stream_Connection::get_converter_buffer(AMCP::Log::Scope_Registry *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  NSObject *v6;
  _opaque_pthread_t *v7;
  mach_port_t v8;
  void *exception;
  __int128 v10;
  uint64_t v11;
  uint64_t (**v12)();
  __int128 v13;
  uint64_t v14;
  std::string v15;
  std::logic_error v16;
  std::logic_error v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  uint8_t buf[8];
  __int16 v25;
  char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  _BYTE v30[14];
  const char *v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a2 + 328);
  if (!v2)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = **(NSObject ***)buf;
    std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = pthread_self();
      v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v8;
      v25 = 2080;
      v26 = "Stream_Connection.cpp";
      v27 = 1024;
      v28 = 220;
      v29 = 2080;
      *(_QWORD *)v30 = "not (m_converter_buffer)";
      _os_log_error_impl(&dword_1B57BA000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s no converter buffer", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v23);
    exception = __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"no converter buffer", (uint64_t)&v15);
    std::logic_error::logic_error(&v16, &v15);
    v16.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
    std::logic_error::logic_error(&v17, &v16);
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = -1;
    v17.__vftable = (std::logic_error_vtbl *)off_1E69A1208;
    v18 = &unk_1E69A1230;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v17);
    *(_QWORD *)&v30[6] = "std::shared_ptr<DAL::DAL_Buffer> AMCP::IO_Core::Stream_Connection::get_converter_buffer() const";
    v31 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Stream_Connection.cpp";
    v32 = 220;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v10);
    v13 = v10;
    v14 = v11;
    v10 = 0uLL;
    v11 = 0;
    v12 = off_1E69A20A0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>((uint64_t)buf, (uint64_t)&v12);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, (uint64_t)buf);
  }
  v3 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 1) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return this;
}

void sub_1B5BDEBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  *(_QWORD *)(v29 - 96) = &unk_1E69A2000;
  v31 = *(_QWORD *)(v29 - 88);
  if (v31 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31))
    *(_QWORD *)(v29 - 88) = 0;
  MEMORY[0x1B5E500E8](v29 - 112);
  a26 = &unk_1E69A2000;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  MEMORY[0x1B5E500E8](&a24);
  MEMORY[0x1B5E500DC](&a22);
  if (a21 < 0)
    operator delete(a16);
  if (v28)
    __cxa_free_exception(v27);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v29 - 113));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AMCP::DAL::DAL_Settings>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6995EC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::DAL::DAL_Settings>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6995EC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E50688);
}

uint64_t std::__shared_ptr_emplace<AMCP::DAL::DAL_Settings>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table(a1 + 24);
}

void sub_1B5BDED5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void HALS_Stream::~HALS_Stream(HALS_Stream *this)
{
  HALS_Object::~HALS_Object(this);
  JUMPOUT(0x1B5E50688);
}

uint64_t HALS_Stream::HasProperty(HALS_Stream *this, unsigned int a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  signed int mSelector;
  uint64_t v5;
  unsigned int v8;
  int v9;
  uint64_t v12;
  HALS_Object *v13;
  HALS_ObjectMap *v14;
  uint64_t v16;
  int v17;

  mSelector = a3->mSelector;
  v5 = 1;
  if ((int)a3->mSelector > 1935762291)
  {
    if (mSelector <= 1936092478)
    {
      if (mSelector > 1935960433)
      {
        if (mSelector == 1935960434)
          return v5;
        v9 = 1936092451;
      }
      else
      {
        if (mSelector == 1935762292)
          return v5;
        v9 = 1935894638;
      }
      goto LABEL_33;
    }
    if (mSelector > 1937007733)
    {
      if (mSelector == 1937007734)
        return v5;
      if (mSelector != 1952542835)
      {
        v9 = 1952805485;
LABEL_33:
        if (mSelector == v9)
          return v5;
      }
    }
    else
    {
      v8 = mSelector - 1936092479;
      if (v8 <= 0x35 && ((1 << v8) & 0x20400400000001) != 0)
        return v5;
    }
    return 0;
  }
  if (mSelector <= 1870098019)
  {
    if (mSelector <= 1819107690)
    {
      if (mSelector == 1650682995)
        return v5;
      v9 = 1668047219;
    }
    else
    {
      if (mSelector == 1819107691)
      {
        v12 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 7));
        v14 = (HALS_ObjectMap *)v12;
        if (v12)
        {
          v16 = 0x676C6F626C6D616BLL;
          v17 = 0;
          v5 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t *, HALS_Client *))(*(_QWORD *)v12 + 88))(v12, *((unsigned int *)this + 7), &v16, a4);
        }
        else
        {
          v5 = 0;
        }
        HALS_ObjectMap::ReleaseObject(v14, v13);
        return v5;
      }
      if (mSelector == 1819569763)
        return v5;
      v9 = 1869638759;
    }
    goto LABEL_33;
  }
  if (mSelector > 1885762656)
  {
    if (mSelector == 1885762657)
      return v5;
    v9 = 1885762669;
    goto LABEL_33;
  }
  if (((mSelector - 1885762592) > 0x1F || ((1 << (mSelector - 32)) & 0x80000009) == 0)
    && mSelector != 1870098020)
  {
    return 0;
  }
  return v5;
}

void sub_1B5BDEFDC(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_Stream::IsPropertySettable(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v4;
  BOOL v6;
  int v7;
  unsigned __int16 v8;

  result = 0;
  v4 = *a3;
  if (*a3 > 1935894637)
  {
    if (v4 <= 1936092512)
    {
      if (v4 <= 1936092450)
      {
        v6 = v4 == 1935894638;
        v7 = 1935960434;
        goto LABEL_24;
      }
      v6 = v4 == 1936092451;
      v8 = 27967;
    }
    else
    {
      if (v4 > 1936092531)
      {
        if (v4 != 1952805485 && v4 != 1952542835)
        {
          if (v4 != 1936092532)
            return HALS_Object::IsPropertySettable(0, a2, a3);
          return 1;
        }
        return result;
      }
      v6 = v4 == 1936092513;
      v8 = 28013;
    }
    v7 = v8 | 0x73660000;
LABEL_24:
    if (!v6 && v4 != v7)
      return HALS_Object::IsPropertySettable(0, a2, a3);
    return result;
  }
  if (v4 > 1885762622)
  {
    if (v4 > 1885762668)
    {
      v6 = v4 == 1885762669;
      v7 = 1935762292;
    }
    else
    {
      v6 = v4 == 1885762623;
      v7 = 1885762657;
    }
    goto LABEL_24;
  }
  if (v4 <= 1885762591)
  {
    v6 = v4 == 1819107691;
    v7 = 1819569763;
    goto LABEL_24;
  }
  if (v4 == 1885762592)
    return 1;
  if (v4 != 1885762595)
    return HALS_Object::IsPropertySettable(0, a2, a3);
  return result;
}

uint64_t HALS_Stream::GetPropertyDataSize(uint64_t a1, uint64_t a2, int *a3)
{
  int v3;
  int v4;
  unsigned __int16 v5;
  unsigned __int16 v6;

  v3 = *a3;
  if (*a3 <= 1935894637)
  {
    if (v3 > 1885762622)
    {
      if (v3 > 1885762668)
      {
        if (v3 == 1885762669)
          return 40;
        v4 = 1935762292;
LABEL_25:
        if (v3 == v4)
          return 4;
        return HALS_Object::GetPropertyDataSize(a1, a2, a3);
      }
      if (v3 == 1885762623)
        return 40;
      v5 = 29793;
    }
    else
    {
      if (v3 <= 1885762591)
      {
        if (v3 == 1819107691)
          return 8;
        v4 = 1819569763;
        goto LABEL_25;
      }
      if (v3 == 1885762592)
        return 40;
      v5 = 29731;
    }
    if (v3 != (v5 | 0x70660000))
      return HALS_Object::GetPropertyDataSize(a1, a2, a3);
    return 0;
  }
  if (v3 <= 1936092512)
  {
    if (v3 <= 1936092450)
    {
      if (v3 == 1935894638)
        return 4;
      v4 = 1935960434;
      goto LABEL_25;
    }
    if (v3 != 1936092451)
    {
      v6 = 27967;
      goto LABEL_29;
    }
    return 0;
  }
  if (v3 > 1936092531)
  {
    if (v3 != 1936092532)
    {
      if (v3 != 1952542835)
      {
        v4 = 1952805485;
        goto LABEL_25;
      }
      return 4;
    }
    return 40;
  }
  if (v3 == 1936092513)
    return 0;
  v6 = 28013;
LABEL_29:
  if (v3 == (v6 | 0x73660000))
    return 40;
  return HALS_Object::GetPropertyDataSize(a1, a2, a3);
}

void HALS_Stream::GetPropertyData(HALS_Stream *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, unsigned int *a5, uint64_t *a6, uint64_t a7, const void *a8, HALS_Client *a9)
{
  signed int mSelector;
  _DWORD *v14;
  _DWORD *v15;
  HALB_Mutex *v16;
  unsigned __int16 v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  unsigned int v21;
  uint64_t v24;
  HALS_Object *v25;
  HALS_ObjectMap *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *exception;
  _DWORD *v33;
  _QWORD v34[6];
  _BYTE buf[12];
  __int16 v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1935894637)
  {
    if (mSelector > 1936092512)
    {
      if (mSelector > 1936092531)
      {
        if (mSelector != 1936092532)
        {
          if (mSelector == 1952542835)
          {
            if (a4 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_Stream.cpp";
                v36 = 1024;
                v37 = 395;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Stream::_GetPropertyData: bad property data size for kAudioStreamPropertyIsReferenceStream", buf, 0x12u);
              }
              exception = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)exception = &off_1E69A1B30;
              exception[2] = 561211770;
            }
            goto LABEL_53;
          }
          if (mSelector == 1952805485)
          {
            if (a4 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "HALS_Stream.cpp";
                v36 = 1024;
                v37 = 290;
                _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Stream::_GetPropertyData: bad property data size for kAudioStreamPropertyTerminalType", buf, 0x12u);
              }
              v14 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v14 = &off_1E69A1B30;
              v14[2] = 561211770;
            }
LABEL_53:
            *(_DWORD *)a6 = 0;
            goto LABEL_54;
          }
LABEL_74:
          HALS_Object::GetPropertyData((uint64_t)this, a2, (int *)a3, a4, (int *)a5, a6);
          return;
        }
        if (a4 <= 0x27)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_Stream.cpp";
            v36 = 1024;
            v37 = 317;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Stream::_GetPropertyData: bad property data size for kAudioStreamPropertyVirtualFormat", buf, 0x12u);
          }
          v33 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v33 = &off_1E69A1B30;
          v33[2] = 561211770;
        }
LABEL_71:
        a6[4] = 0;
        *(_OWORD *)a6 = 0u;
        *((_OWORD *)a6 + 1) = 0u;
        v21 = 40;
        goto LABEL_72;
      }
      if (mSelector != 1936092513)
      {
        if (mSelector != 1936092525)
          goto LABEL_74;
        if (a4 <= 0x27)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_Stream.cpp";
            v36 = 1024;
            v37 = 347;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Stream::_GetPropertyData: bad property data size for kAudioDevicePropertyStreamFormatMatch", buf, 0x12u);
          }
          v20 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v20 = &off_1E69A1B30;
          v20[2] = 561211770;
        }
        goto LABEL_71;
      }
      goto LABEL_49;
    }
    if (mSelector > 1936092450)
    {
      if (mSelector != 1936092451)
      {
        if (mSelector != 1936092479)
          goto LABEL_74;
        if (a4 <= 0x27)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_Stream.cpp";
            v36 = 1024;
            v37 = 338;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Stream::_GetPropertyData: bad property data size for kAudioDevicePropertyStreamFormatSupported", buf, 0x12u);
          }
          v18 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v18 = &off_1E69A1B30;
          v18[2] = 561211770;
        }
        goto LABEL_71;
      }
LABEL_49:
      *a5 = 0;
      return;
    }
    if (mSelector != 1935894638)
    {
      if (mSelector == 1935960434)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_Stream.cpp";
            v36 = 1024;
            v37 = 281;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Stream::_GetPropertyData: bad property data size for kAudioStreamPropertyDirection", buf, 0x12u);
          }
          v31 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v31 = &off_1E69A1B30;
          v31[2] = 561211770;
        }
        v34[0] = MEMORY[0x1E0C809B0];
        v34[1] = 0x40000000;
        v34[2] = ___ZNK11HALS_Stream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
        v34[3] = &__block_descriptor_tmp_11612;
        v34[4] = this;
        v34[5] = a6;
        v16 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Stream *))(*(_QWORD *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v16, (uint64_t)v34);
        goto LABEL_54;
      }
      goto LABEL_74;
    }
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "HALS_Stream.cpp";
        v36 = 1024;
        v37 = 299;
        _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Stream::_GetPropertyData: bad property data size for kAudioStreamPropertyStartingChannel", buf, 0x12u);
      }
      v30 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v30 = &off_1E69A1B30;
      v30[2] = 561211770;
    }
LABEL_51:
    *(_DWORD *)a6 = 1;
LABEL_54:
    v21 = 4;
LABEL_72:
    *a5 = v21;
    return;
  }
  if (mSelector > 1885762622)
  {
    if (mSelector > 1885762668)
    {
      if (mSelector == 1885762669)
      {
        if (a4 <= 0x27)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "HALS_Stream.cpp";
            v36 = 1024;
            v37 = 386;
            _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Stream::_GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormatMatch", buf, 0x12u);
          }
          v29 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v29 = &off_1E69A1B30;
          v29[2] = 561211770;
        }
        goto LABEL_71;
      }
      if (mSelector != 1935762292)
        goto LABEL_74;
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_Stream.cpp";
          v36 = 1024;
          v37 = 272;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Stream::_GetPropertyData: bad property data size for kAudioStreamPropertyIsActive", buf, 0x12u);
        }
        v19 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v19 = &off_1E69A1B30;
        v19[2] = 561211770;
      }
      goto LABEL_51;
    }
    if (mSelector == 1885762623)
    {
      if (a4 <= 0x27)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_Stream.cpp";
          v36 = 1024;
          v37 = 377;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Stream::_GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormatSupported", buf, 0x12u);
        }
        v27 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v27 = &off_1E69A1B30;
        v27[2] = 561211770;
      }
      goto LABEL_71;
    }
    v17 = 29793;
LABEL_35:
    if (mSelector != (v17 | 0x70660000))
      goto LABEL_74;
    goto LABEL_49;
  }
  if (mSelector > 1885762591)
  {
    if (mSelector == 1885762592)
    {
      if (a4 <= 0x27)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_Stream.cpp";
          v36 = 1024;
          v37 = 356;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Stream::_GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormat", buf, 0x12u);
        }
        v28 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v28 = &off_1E69A1B30;
        v28[2] = 561211770;
      }
      goto LABEL_71;
    }
    v17 = 29731;
    goto LABEL_35;
  }
  if (mSelector != 1819107691)
  {
    if (mSelector == 1819569763)
    {
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_Stream.cpp";
          v36 = 1024;
          v37 = 308;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Stream::_GetPropertyData: bad property data size for kAudioStreamPropertyLatency", buf, 0x12u);
        }
        v15 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v15 = &off_1E69A1B30;
        v15[2] = 561211770;
      }
      goto LABEL_53;
    }
    goto LABEL_74;
  }
  v24 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 7));
  v26 = (HALS_ObjectMap *)v24;
  if (v24)
  {
    strcpy(buf, "kamlbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    (*(void (**)(uint64_t, _QWORD, _BYTE *, uint64_t, unsigned int *, uint64_t *, uint64_t, const void *, HALS_Client *))(*(_QWORD *)v24 + 112))(v24, *((unsigned int *)this + 7), buf, a4, a5, a6, a7, a8, a9);
  }
  HALS_ObjectMap::ReleaseObject(v26, v25);
}

void sub_1B5BDFDC0(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap *v2;

  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_Stream::AllowClientAccessToProperty()
{
  return 1;
}

uint64_t ___ZNK11HALS_Stream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(unsigned __int8 *)(*(_QWORD *)(result + 32) + 52);
  return result;
}

void HALS_Stream::GetCurrentVirtualFormat(HALS_Stream *this, AudioStreamBasicDescription *a2)
{
  uint64_t v4;
  AMCP::Log::Scope_Registry *v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  HALS_Object *v11;
  HALS_ObjectMap *v12;
  HALB_Mutex *v13;
  uint64_t v14;
  AudioFormatFlags mFormatFlags;
  UInt32 mChannelsPerFrame;
  UInt32 v17;
  UInt32 v18;
  _opaque_pthread_t *v19;
  mach_port_t v20;
  int v21;
  _QWORD v22[6];
  _BYTE buf[24];
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t (*v25)();
  char v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = *((unsigned int *)this + 4);
  strcpy(buf, "tmfsbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  LODWORD(v22[0]) = 0;
  v5 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(HALS_Stream *, uint64_t, _BYTE *, uint64_t, _QWORD *, AudioStreamBasicDescription *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, v4, buf, 40, v22, a2, 0, 0, 0);
  if (a2->mSampleRate <= 0.0)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v6 = *(std::__shared_weak_count **)&buf[8];
    v7 = **(NSObject ***)buf;
    if (*(_QWORD *)&buf[8])
    {
      v8 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v19 = pthread_self();
      v20 = pthread_mach_thread_np(v19);
      v21 = *((_DWORD *)this + 4);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v20;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = "HALS_Stream.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 441;
      LOWORD(v24) = 1024;
      *(_DWORD *)((char *)&v24 + 2) = v21;
      _os_log_error_impl(&dword_1B57BA000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Invalid stream virtual format %u sample rate is 0", buf, 0x1Eu);
    }
  }
  v10 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
  v12 = (HALS_ObjectMap *)v10;
  if (v10)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3002000000;
    v24 = __Block_byref_object_copy__54_14483;
    v25 = __Block_byref_object_dispose__55_14484;
    v26 = 0;
    v27 = 0;
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 0x40000000;
    v22[2] = ___ZNK11HALS_Device39GetClientChannelCountFromDSPDescriptionEv_block_invoke;
    v22[3] = &unk_1E699D8F8;
    v22[4] = buf;
    v22[5] = v10;
    v13 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
    HALB_CommandGate::ExecuteCommand(v13, (uint64_t)v22);
    v14 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
    _Block_object_dispose(buf, 8);
    if ((v14 & 0xFF00000000) != 0)
    {
      mFormatFlags = a2->mFormatFlags;
      if ((mFormatFlags & 0x20) != 0)
      {
        mChannelsPerFrame = 1;
      }
      else
      {
        mChannelsPerFrame = a2->mChannelsPerFrame;
        if (!mChannelsPerFrame)
        {
          v17 = (a2->mBitsPerChannel + 7) >> 3;
LABEL_16:
          v18 = v17 * v14;
          a2->mFormatFlags = mFormatFlags & 0xFFFFFFDF;
          a2->mBytesPerPacket = v18;
          a2->mFramesPerPacket = 1;
          a2->mBytesPerFrame = v18;
          a2->mChannelsPerFrame = v14;
          goto LABEL_17;
        }
      }
      v17 = a2->mBytesPerFrame / mChannelsPerFrame;
      goto LABEL_16;
    }
  }
LABEL_17:
  HALS_ObjectMap::ReleaseObject(v12, v11);
}

void sub_1B5BE0078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void DSP_Host_OffloadDictionary::make_empty(DSP_Host_OffloadDictionary *this)
{
  CFMutableDictionaryRef Mutable;
  CFTypeRef v3;
  const void *v4;
  CFTypeRef cf;
  _QWORD v6[2];

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
  v6[1] = Mutable;
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&cf, Mutable);
  v3 = cf;
  cf = 0;
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)v6, v3);
  v4 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v6[0];
  v6[0] = v4;
  if (v4)
    CFRelease(v4);
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1B5BE0170(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  v5 = va_arg(va1, _QWORD);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va1);
  _Unwind_Resume(a1);
}

uint64_t DSP_Host_OffloadDictionary::get_debug_string(DSP_Host_OffloadDictionary *this, uint64_t a2)
{
  const __CFDictionary *v4;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer end;
  const char *v7;
  __int128 v8;
  size_t v9;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v12;
  std::string __p;
  std::vector<std::string> v15;
  _QWORD v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
  v4 = *(const __CFDictionary **)(a2 + 16);
  if (v4 && CFDictionaryGetCount(v4))
  {
    DSP_Host_OffloadDictionary::get_offload_id_list(&v15, a2);
    begin = v15.__begin_;
    end = v15.__end_;
    if (v15.__begin_ != v15.__end_)
    {
      v7 = "'";
      do
      {
        if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
        }
        else
        {
          v8 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        v9 = strlen(v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)v7, v9);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)p_p, size);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"'", 1);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        ++begin;
        v7 = " '";
      }
      while (begin != end);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"<no offloads>", 13);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(this, (uint64_t)v18);
  v16[0] = *MEMORY[0x1E0DE4F50];
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v17 = v12;
  v18[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B5E50598](&v20);
}

void sub_1B5BE0350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void DSP_Host_OffloadDictionary::get_offload_id_list(std::vector<std::string> *this, uint64_t a2)
{
  const __CFDictionary *v3;
  const __CFDictionary *v5;
  CFIndex Count;
  CFTypeRef *v7;
  void **v8;
  CFTypeRef v9;
  std::vector<std::string>::pointer end;
  char v11;
  std::vector<std::string>::pointer v12;
  std::runtime_error *v13;
  std::runtime_error *exception;
  CFTypeRef cf;
  void *__p[2];
  std::string::size_type v17;
  char v18;
  void **keys;
  void **v20;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  v3 = *(const __CFDictionary **)(a2 + 16);
  if (v3 && CFDictionaryGetCount(v3))
  {
    v5 = *(const __CFDictionary **)(a2 + 16);
    if (!v5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    Count = CFDictionaryGetCount(v5);
    __p[0] = 0;
    std::vector<__CFString const*>::vector(&keys, Count, __p);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a2 + 16), (const void **)keys, 0);
    v7 = (CFTypeRef *)keys;
    v8 = v20;
    if (keys != v20)
    {
      do
      {
        v9 = *v7;
        if (*v7)
          CFRetain(*v7);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v9);
        if (!cf)
        {
          v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v13, "Could not construct");
          __cxa_throw(v13, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        applesauce::CF::convert_as<std::string,0>((uint64_t)__p, (const __CFString *)cf);
        if (cf)
          CFRelease(cf);
        if (v18)
        {
          end = this->__end_;
          if (end >= this->__end_cap_.__value_)
          {
            v12 = std::vector<std::string>::__push_back_slow_path<std::string const&>(this, (__int128 *)__p);
            v11 = HIBYTE(v17);
          }
          else
          {
            v11 = HIBYTE(v17);
            if (SHIBYTE(v17) < 0)
            {
              std::string::__init_copy_ctor_external(this->__end_, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
            }
            else
            {
              *(_OWORD *)&end->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
              end->__r_.__value_.__r.__words[2] = v17;
            }
            v12 = end + 1;
            this->__end_ = end + 1;
          }
          this->__end_ = v12;
          if (v11 < 0)
            operator delete(__p[0]);
        }
        ++v7;
      }
      while (v7 != (CFTypeRef *)v8);
      v7 = (CFTypeRef *)keys;
    }
    if (v7)
    {
      v20 = (void **)v7;
      operator delete(v7);
    }
  }
}

void sub_1B5BE054C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  void *v18;

  __cxa_free_exception(v18);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<__CFString const*>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<__CFString const*>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B5BE0648(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL DSP_Host_OffloadDictionary::has_all_id(DSP_Host_OffloadDictionary *this)
{
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  std::runtime_error *exception;

  v2 = (const __CFDictionary *)*((_QWORD *)this + 2);
  if (!v2 || !CFDictionaryGetCount(v2))
    return 0;
  v3 = (const __CFDictionary *)*((_QWORD *)this + 2);
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return applesauce::CF::details::has_key<__CFString const*>(v3, CFSTR("all available"));
}

void sub_1B5BE06D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

DSP_Host_OffloadDictionary *DSP_Host_OffloadDictionary::remove(DSP_Host_OffloadDictionary *this, const DSP_Host_OffloadDictionary *a2)
{
  const __CFDictionary *v3;
  const __CFDictionary *v5;
  __CFDictionary *Mutable;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer i;
  __int128 v9;
  std::string *v10;
  CFIndex size;
  __CFString *v12;
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  CFTypeRef v15;
  const void *v16;
  std::runtime_error *exception;
  std::runtime_error *v19;
  std::runtime_error *v20;
  CFTypeRef cf;
  char v22;
  __CFString *v23;
  std::string v24;
  __CFDictionary *v25;
  std::vector<std::string> v26;

  v3 = (const __CFDictionary *)*((_QWORD *)this + 2);
  if (v3)
  {
    if (CFDictionaryGetCount(v3))
    {
      v5 = (const __CFDictionary *)*((_QWORD *)a2 + 2);
      if (v5)
      {
        if (CFDictionaryGetCount(v5))
        {
          if (DSP_Host_OffloadDictionary::has_all_id(a2))
          {
            DSP_Host_OffloadDictionary::make_empty(this);
          }
          else
          {
            DSP_Host_OffloadDictionary::get_offload_id_list(&v26, (uint64_t)this);
            Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B398], MEMORY[0x1E0C9B3A8]);
            v25 = Mutable;
            begin = v26.__begin_;
            for (i = v26.__end_; begin != i; ++begin)
            {
              if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v24, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
              }
              else
              {
                v9 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
                v24.__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v9;
              }
              if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v10 = &v24;
              else
                v10 = (std::string *)v24.__r_.__value_.__r.__words[0];
              if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
              else
                size = v24.__r_.__value_.__l.__size_;
              v12 = (__CFString *)CFStringCreateWithBytes(0, (const UInt8 *)v10, size, 0x8000100u, 0);
              v23 = v12;
              if (!v12)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(exception, "Could not construct");
                __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              v13 = (const __CFDictionary *)*((_QWORD *)a2 + 2);
              if (!v13)
              {
                v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v19, "Could not construct");
                __cxa_throw(v19, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              if (!applesauce::CF::details::has_key<applesauce::CF::StringRef &>(v13, v12))
              {
                v14 = (const __CFDictionary *)*((_QWORD *)this + 2);
                if (!v14)
                {
                  v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v20, "Could not construct");
                  __cxa_throw(v20, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,applesauce::CF::StringRef &>(&cf, v14, v12);
                if (v22)
                  mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::DictionaryRef>(Mutable, v12, cf);
                std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
              }
              CFRelease(v12);
              if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v24.__r_.__value_.__l.__data_);
            }
            mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&cf, Mutable);
            v15 = cf;
            cf = 0;
            applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v24, v15);
            v16 = (const void *)*((_QWORD *)this + 2);
            *((_QWORD *)this + 2) = v24.__r_.__value_.__r.__words[0];
            v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
            if (v16)
              CFRelease(v16);
            if (cf)
              CFRelease(cf);
            if (Mutable)
              CFRelease(Mutable);
            v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
          }
        }
      }
    }
  }
  return this;
}

void sub_1B5BE0978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, uint64_t a11, char a12, __int16 *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, const void *a20,__int16 a21,char a22,char a23)
{
  applesauce::CF::DictionaryRef::~DictionaryRef(&a10);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder(&a20);
  __p = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL applesauce::CF::details::has_key<applesauce::CF::StringRef &>(const __CFDictionary *a1, const void *a2)
{
  return a2 && CFDictionaryContainsKey(a1, a2) != 0;
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,applesauce::CF::StringRef &>(_BYTE *a1, CFDictionaryRef theDict, void *key)
{
  const void *Value;
  const void *v5;
  CFTypeID v6;
  char v7;

  if (!key)
    goto LABEL_6;
  Value = CFDictionaryGetValue(theDict, key);
  v5 = Value;
  if (!Value)
    goto LABEL_6;
  CFRetain(Value);
  v6 = CFGetTypeID(v5);
  if (v6 != CFDictionaryGetTypeID())
  {
    CFRelease(v5);
LABEL_6:
    v7 = 0;
    *a1 = 0;
    goto LABEL_7;
  }
  *(_QWORD *)a1 = v5;
  v7 = 1;
LABEL_7:
  a1[8] = v7;
}

BOOL DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary *this, const DSP_Host_OffloadDictionary *a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer end;
  std::vector<std::string>::pointer v9;
  _BOOL8 v10;
  std::vector<std::string> v12;
  std::vector<std::string> v13;
  std::vector<std::string> *v14;

  DSP_Host_OffloadDictionary::get_offload_id_list(&v13, (uint64_t)this);
  DSP_Host_OffloadDictionary::get_offload_id_list(&v12, (uint64_t)a2);
  v3 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v13.__end_ - (char *)v13.__begin_) >> 3));
  if (v13.__end_ == v13.__begin_)
    v4 = 0;
  else
    v4 = v3;
  std::__introsort<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_0 &,std::string *,false>((__n128 *)v13.__begin_, (__n128 *)v13.__end_, v4, 1);
  v5 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v12.__end_ - (char *)v12.__begin_) >> 3));
  if (v12.__end_ == v12.__begin_)
    v6 = 0;
  else
    v6 = v5;
  std::__introsort<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *,false>((__n128 *)v12.__begin_, (__n128 *)v12.__end_, v6, 1);
  begin = v13.__begin_;
  end = v13.__end_;
  v9 = v12.__begin_;
  if ((char *)v13.__end_ - (char *)v13.__begin_ == (char *)v12.__end_ - (char *)v12.__begin_)
  {
    if (v13.__begin_ == v13.__end_)
    {
      v10 = 1;
    }
    else
    {
      do
      {
        v10 = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>((unsigned __int8 *)begin, (unsigned __int8 *)v9);
        if (!v10)
          break;
        ++begin;
        ++v9;
      }
      while (begin != end);
    }
  }
  else
  {
    v10 = 0;
  }
  v14 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  v12.__begin_ = (std::vector<std::string>::pointer)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  return v10;
}

void sub_1B5BE0BE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_0 &,std::string *,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4)
{
  unint64_t *v8;
  unint64_t *v9;
  __n128 *v10;
  uint64_t v11;
  unint64_t v12;
  __n128 *v13;
  uint64_t v14;
  _QWORD *v15;
  __n128 v16;
  unint64_t v17;
  __n128 v18;
  __n128 v19;
  __n128 *v20;
  __n128 *v21;
  __n128 *v22;
  __n128 *v23;
  __n128 v24;
  unint64_t v25;
  unint64_t v26;
  __int8 *v27;
  __n128 v28;
  __n128 v29;
  BOOL v30;
  __n128 v31;
  __n128 *v32;
  char v33;
  __n128 *v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __int8 *v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 *v44;
  __n128 *v45;
  __n128 *v46;
  __n128 v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __n128 v51;
  unint64_t v52;
  __n128 v53;
  __n128 v54;
  __n128 *v55;
  BOOL v57;
  uint64_t v58;
  __n128 *v59;
  __n128 *v60;
  __n128 v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  __n128 v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  char *v70;
  unint64_t *v71;
  __n128 v72;
  unint64_t *v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  int64_t v78;
  __n128 *v79;
  uint64_t v80;
  __n128 *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __n128 v86;
  __n128 v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  __n128 v92;
  uint64_t v93;
  __int128 v94;
  __n128 v95;
  uint64_t v96;
  __n128 *v98;
  __n128 v99;
  __n128 *v100;
  __n128 *v101;
  char v102;
  __n128 v103;
  __n128 *v104;
  unint64_t v105;
  __n128 *v106;
  unsigned __int8 v107;
  __n128 v108;
  unint64_t v109;
  __n128 v110;
  unint64_t v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
LABEL_2:
  v8 = &a2[-2].n128_u64[1];
  v104 = a2 - 3;
  v106 = a2;
  v9 = &a2[-5].n128_u64[1];
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 3);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a1) & 0x80) != 0)
        {
          v41 = *a1;
          v109 = a1[1].n128_u64[0];
          v108 = v41;
          v42 = *(__n128 *)v8;
          a1[1].n128_u64[0] = v8[2];
          *a1 = v42;
          v43 = v108;
          v8[2] = v109;
          *(__n128 *)v8 = v43;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], v8);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, v8);
        return;
      case 5uLL:
        v44 = (__n128 *)((char *)a1 + 24);
        v45 = a1 + 3;
        v46 = (__n128 *)((char *)a1 + 72);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1]);
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, &a1[4].n128_u64[1]) & 0x80) != 0)
        {
          v108 = *v46;
          v47 = v108;
          v109 = a1[5].n128_u64[1];
          v48 = v109;
          v49 = v8[2];
          *v46 = *(__n128 *)v8;
          a1[5].n128_u64[1] = v49;
          v8[2] = v48;
          *(__n128 *)v8 = v47;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1[4].n128_u64[1], (__n128 *)a1[3].n128_u64) & 0x80) != 0)
          {
            v50 = a1[4].n128_u64[0];
            v51 = *v45;
            *v45 = *v46;
            a1[4].n128_u64[0] = a1[5].n128_u64[1];
            *v46 = v51;
            a1[5].n128_u64[1] = v50;
            if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((__n128 *)a1[3].n128_u64, &a1[1].n128_u64[1]) & 0x80) != 0)
            {
              v52 = a1[2].n128_u64[1];
              v53 = *v44;
              *v44 = *v45;
              a1[2].n128_u64[1] = a1[4].n128_u64[0];
              *v45 = v53;
              a1[4].n128_u64[0] = v52;
              if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1[1].n128_u64[1], a1) & 0x80) != 0)
              {
                v54 = *a1;
                v109 = a1[1].n128_u64[0];
                v108 = v54;
                *a1 = *v44;
                a1[1].n128_u64[0] = a1[2].n128_u64[1];
                *v44 = v108;
                a1[2].n128_u64[1] = v109;
              }
            }
          }
        }
        return;
      default:
        if (v11 <= 575)
        {
          v55 = (__n128 *)((char *)a1 + 24);
          v57 = a1 == a2 || v55 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v57)
            {
              v58 = 0;
              v59 = a1;
              do
              {
                v60 = v59;
                v59 = v55;
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, v60) & 0x80) != 0)
                {
                  v61 = *v59;
                  v109 = v59[1].n128_u64[0];
                  v108 = v61;
                  v59->n128_u64[1] = 0;
                  v59[1].n128_u64[0] = 0;
                  v59->n128_u64[0] = 0;
                  v62 = v58;
                  while (1)
                  {
                    v63 = (char *)a1 + v62;
                    *(__n128 *)(v63 + 24) = *(__n128 *)((char *)a1 + v62);
                    *((_QWORD *)v63 + 5) = *(unint64_t *)((char *)a1[1].n128_u64 + v62);
                    v63[23] = 0;
                    *v63 = 0;
                    if (!v62)
                      break;
                    v62 -= 24;
                    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v108, (unint64_t *)((char *)a1->n128_u64 + v62)) & 0x80) == 0)
                    {
                      v64 = (uint64_t)&a1[1].n128_i64[1] + v62;
                      goto LABEL_84;
                    }
                  }
                  v64 = (uint64_t)a1;
LABEL_84:
                  v65 = v108;
                  *(_QWORD *)(v64 + 16) = v109;
                  *(__n128 *)v64 = v65;
                }
                v55 = (__n128 *)((char *)v59 + 24);
                v58 += 24;
              }
              while (&v59[1].n128_i8[8] != (__int8 *)a2);
            }
          }
          else if (!v57)
          {
            do
            {
              v98 = a1;
              a1 = v55;
              if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, v98) & 0x80) != 0)
              {
                v99 = *a1;
                v109 = a1[1].n128_u64[0];
                v108 = v99;
                a1->n128_u64[1] = 0;
                a1[1].n128_u64[0] = 0;
                a1->n128_u64[0] = 0;
                v100 = a1;
                do
                {
                  v101 = (__n128 *)((char *)v100 - 24);
                  *v100 = *(__n128 *)((char *)v100 - 24);
                  v100[1].n128_u64[0] = v100[-1].n128_u64[1];
                  v100[-1].n128_u8[15] = 0;
                  v100[-2].n128_u8[8] = 0;
                  v102 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v108, (__n128 *)v100[-3].n128_u64);
                  v100 = v101;
                }
                while (v102 < 0);
                v103 = v108;
                v101[1].n128_u64[0] = v109;
                *v101 = v103;
              }
              v55 = (__n128 *)((char *)a1 + 24);
            }
            while (&a1[1].n128_i8[8] != (__int8 *)a2);
          }
          return;
        }
        if (!a3)
        {
          if (a1 != a2)
          {
            v66 = (v12 - 2) >> 1;
            v67 = v66;
            do
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = (char *)a1 + 24 * v69;
                if (2 * v67 + 2 < (uint64_t)v12
                  && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1->n128_u64[3 * v69], (_QWORD *)v70 + 3) & 0x80u) != 0)
                {
                  v70 += 24;
                  v69 = 2 * v68 + 2;
                }
                v71 = &a1->n128_u64[3 * v68];
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v70, v71) & 0x80) == 0)
                {
                  v72 = *(__n128 *)v71;
                  v109 = v71[2];
                  v108 = v72;
                  v71[1] = 0;
                  v71[2] = 0;
                  *v71 = 0;
                  do
                  {
                    v73 = (unint64_t *)v70;
                    v74 = *(_OWORD *)v70;
                    v71[2] = *((_QWORD *)v70 + 2);
                    *(_OWORD *)v71 = v74;
                    v70[23] = 0;
                    *v70 = 0;
                    if (v66 < v69)
                      break;
                    v75 = (2 * v69) | 1;
                    v70 = (char *)a1 + 24 * v75;
                    v76 = 2 * v69 + 2;
                    if (v76 < (uint64_t)v12
                      && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1->n128_u64[3 * v75], (_QWORD *)v70 + 3) & 0x80u) != 0)
                    {
                      v70 += 24;
                      v75 = v76;
                    }
                    v71 = v73;
                    v69 = v75;
                  }
                  while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v70, &v108) & 0x80) == 0);
                  v77 = v108;
                  v73[2] = v109;
                  *(__n128 *)v73 = v77;
                }
              }
              v67 = v68 - 1;
            }
            while (v68);
            v78 = v11 / 0x18uLL;
            v79 = v106;
            do
            {
              v80 = 0;
              v81 = v79;
              v105 = a1->n128_u64[0];
              v110.n128_u64[0] = a1->n128_u64[1];
              *(unint64_t *)((char *)v110.n128_u64 + 7) = *(unint64_t *)((char *)&a1->n128_u64[1] + 7);
              v107 = a1[1].n128_u8[7];
              a1->n128_u64[1] = 0;
              a1[1].n128_u64[0] = 0;
              a1->n128_u64[0] = 0;
              v82 = (uint64_t)a1;
              do
              {
                v83 = v82 + 24 * v80 + 24;
                v84 = 2 * v80;
                v80 = (2 * v80) | 1;
                v85 = v84 + 2;
                if (v84 + 2 < v78
                  && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v83, (_QWORD *)(v83 + 24)) & 0x80u) != 0)
                {
                  v83 += 24;
                  v80 = v85;
                }
                if (*(char *)(v82 + 23) < 0)
                  operator delete(*(void **)v82);
                v86 = *(__n128 *)v83;
                *(_QWORD *)(v82 + 16) = *(_QWORD *)(v83 + 16);
                *(__n128 *)v82 = v86;
                *(_BYTE *)(v83 + 23) = 0;
                *(_BYTE *)v83 = 0;
                v82 = v83;
              }
              while (v80 <= (uint64_t)((unint64_t)(v78 - 2) >> 1));
              v79 = (__n128 *)((char *)v79 - 24);
              if ((__int8 *)v83 == &v81[-2].n128_i8[8])
              {
                *(_QWORD *)v83 = v105;
                v96 = *(uint64_t *)((char *)v110.n128_i64 + 7);
                *(_QWORD *)(v83 + 8) = v110.n128_u64[0];
                *(_QWORD *)(v83 + 15) = v96;
                *(_BYTE *)(v83 + 23) = v107;
              }
              else
              {
                v87 = *v79;
                *(_QWORD *)(v83 + 16) = v81[-1].n128_u64[1];
                *(__n128 *)v83 = v87;
                v81[-2].n128_u64[1] = v105;
                v88 = v110.n128_u64[0];
                *(unint64_t *)((char *)v81[-1].n128_u64 + 7) = *(unint64_t *)((char *)v110.n128_u64 + 7);
                v81[-1].n128_u64[0] = v88;
                v81[-1].n128_u8[15] = v107;
                v89 = v83 - (_QWORD)a1 + 24;
                if (v89 >= 25)
                {
                  v90 = (v89 / 0x18uLL - 2) >> 1;
                  v91 = (char *)a1 + 24 * v90;
                  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v91, (_QWORD *)v83) & 0x80) != 0)
                  {
                    v92 = *(__n128 *)v83;
                    v109 = *(_QWORD *)(v83 + 16);
                    v108 = v92;
                    *(_QWORD *)(v83 + 8) = 0;
                    *(_QWORD *)(v83 + 16) = 0;
                    *(_QWORD *)v83 = 0;
                    do
                    {
                      v93 = (uint64_t)v91;
                      v94 = *(_OWORD *)v91;
                      *(_QWORD *)(v83 + 16) = *((_QWORD *)v91 + 2);
                      *(_OWORD *)v83 = v94;
                      v91[23] = 0;
                      *v91 = 0;
                      if (!v90)
                        break;
                      v90 = (v90 - 1) >> 1;
                      v91 = (char *)a1 + 24 * v90;
                      v83 = v93;
                    }
                    while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v91, &v108) & 0x80) != 0);
                    v95 = v108;
                    *(_QWORD *)(v93 + 16) = v109;
                    *(__n128 *)v93 = v95;
                  }
                }
              }
            }
            while (v78-- > 2);
          }
          return;
        }
        v13 = (__n128 *)((char *)a1 + 24 * (v12 >> 1));
        if ((unint64_t)v11 < 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(&a1->n128_u64[3 * (v12 >> 1)], a1, v8);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1->n128_u64[3 * (v12 >> 1)], v8);
          v14 = 3 * (v12 >> 1);
          v15 = (_QWORD *)&a1[-1] + 3 * (v12 >> 1) - 1;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(&a1[1].n128_u64[1], v15, v104);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((__n128 *)a1[3].n128_u64, &a1[1].n128_u64[v14 + 1], v9);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(v15, v13, &a1[1].n128_u64[v14 + 1]);
          v16 = *a1;
          v109 = a1[1].n128_u64[0];
          v108 = v16;
          v17 = v13[1].n128_u64[0];
          *a1 = *v13;
          a1[1].n128_u64[0] = v17;
          v18 = v108;
          v13[1].n128_u64[0] = v109;
          *v13 = v18;
        }
        --a3;
        a2 = v106;
        if ((a4 & 1) == 0
          && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1[-2].n128_u64[1], a1) & 0x80) == 0)
        {
          v31 = *a1;
          v111 = a1[1].n128_u64[0];
          v110 = v31;
          a1->n128_u64[1] = 0;
          a1[1].n128_u64[0] = 0;
          a1->n128_u64[0] = 0;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v8) & 0x80) != 0)
          {
            v10 = a1;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v10) & 0x80) == 0);
          }
          else
          {
            v32 = (__n128 *)((char *)a1 + 24);
            do
            {
              v10 = v32;
              if (v32 >= v106)
                break;
              v33 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v32);
              v32 = (__n128 *)((char *)v10 + 24);
            }
            while ((v33 & 0x80) == 0);
          }
          v34 = v106;
          if (v10 < v106)
          {
            v34 = v106;
            do
              v34 = (__n128 *)((char *)v34 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v34) & 0x80) != 0);
          }
          while (v10 < v34)
          {
            v35 = *v10;
            v109 = v10[1].n128_u64[0];
            v108 = v35;
            v36 = *v34;
            v10[1].n128_u64[0] = v34[1].n128_u64[0];
            *v10 = v36;
            v37 = v108;
            v34[1].n128_u64[0] = v109;
            *v34 = v37;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v10) & 0x80) == 0);
            do
              v34 = (__n128 *)((char *)v34 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v34) & 0x80) != 0);
          }
          v38 = &v10[-2].n128_i8[8];
          if (&v10[-2].n128_i8[8] == (__int8 *)a1)
          {
            if (v10[-1].n128_i8[15] < 0)
              operator delete((void *)a1->n128_u64[0]);
          }
          else
          {
            if (a1[1].n128_i8[7] < 0)
              operator delete((void *)a1->n128_u64[0]);
            v39 = *(__n128 *)v38;
            a1[1].n128_u64[0] = v10[-1].n128_u64[1];
            *a1 = v39;
            v10[-1].n128_u8[15] = 0;
            v10[-2].n128_u8[8] = 0;
          }
          a4 = 0;
          v40 = v110;
          v10[-1].n128_u64[1] = v111;
          *(__n128 *)v38 = v40;
          continue;
        }
        v19 = *a1;
        v111 = a1[1].n128_u64[0];
        v110 = v19;
        a1->n128_u64[1] = 0;
        a1[1].n128_u64[0] = 0;
        a1->n128_u64[0] = 0;
        v20 = a1;
        do
        {
          v21 = v20;
          v20 = (__n128 *)((char *)v20 + 24);
        }
        while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20, &v110) & 0x80) != 0);
        v22 = v106;
        if (v21 == a1)
        {
          v22 = v106;
          do
          {
            if (v20 >= v22)
              break;
            v22 = (__n128 *)((char *)v22 - 24);
          }
          while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, &v110) & 0x80) == 0);
        }
        else
        {
          do
            v22 = (__n128 *)((char *)v22 - 24);
          while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, &v110) & 0x80) == 0);
        }
        v10 = v20;
        if (v20 < v22)
        {
          v23 = v22;
          do
          {
            v108 = *v10;
            v24 = v108;
            v109 = v10[1].n128_u64[0];
            v25 = v109;
            v26 = v23[1].n128_u64[0];
            *v10 = *v23;
            v10[1].n128_u64[0] = v26;
            v23[1].n128_u64[0] = v25;
            *v23 = v24;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, &v110) & 0x80) != 0);
            do
              v23 = (__n128 *)((char *)v23 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v23, &v110) & 0x80) == 0);
          }
          while (v10 < v23);
        }
        v27 = &v10[-2].n128_i8[8];
        if (&v10[-2].n128_i8[8] == (__int8 *)a1)
        {
          if (v10[-1].n128_i8[15] < 0)
            operator delete((void *)a1->n128_u64[0]);
        }
        else
        {
          if (a1[1].n128_i8[7] < 0)
            operator delete((void *)a1->n128_u64[0]);
          v28 = *(__n128 *)v27;
          a1[1].n128_u64[0] = v10[-1].n128_u64[1];
          *a1 = v28;
          v10[-1].n128_u8[15] = 0;
          v10[-2].n128_u8[8] = 0;
        }
        v29 = v110;
        v10[-1].n128_u64[1] = v111;
        *(__n128 *)v27 = v29;
        if (v20 < v22)
        {
LABEL_34:
          std::__introsort<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_0 &,std::string *,false>(a1, &v10[-2].n128_i8[8], a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_0 &,std::string *>(a1, (__n128 *)((char *)v10 - 24));
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_0 &,std::string *>(v10, v106))
        {
          if (v30)
            continue;
          goto LABEL_34;
        }
        a2 = (__n128 *)((char *)v10 - 24);
        if (!v30)
          goto LABEL_2;
        return;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4)
{
  unint64_t *v8;
  unint64_t *v9;
  __n128 *v10;
  uint64_t v11;
  unint64_t v12;
  __n128 *v13;
  uint64_t v14;
  _QWORD *v15;
  __n128 v16;
  unint64_t v17;
  __n128 v18;
  __n128 v19;
  __n128 *v20;
  __n128 *v21;
  __n128 *v22;
  __n128 *v23;
  __n128 v24;
  unint64_t v25;
  unint64_t v26;
  __int8 *v27;
  __n128 v28;
  __n128 v29;
  BOOL v30;
  __n128 v31;
  __n128 *v32;
  char v33;
  __n128 *v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __int8 *v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 *v44;
  __n128 *v45;
  __n128 *v46;
  __n128 v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __n128 v51;
  unint64_t v52;
  __n128 v53;
  __n128 v54;
  __n128 *v55;
  BOOL v57;
  uint64_t v58;
  __n128 *v59;
  __n128 *v60;
  __n128 v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  __n128 v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  char *v70;
  unint64_t *v71;
  __n128 v72;
  unint64_t *v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  int64_t v78;
  __n128 *v79;
  uint64_t v80;
  __n128 *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __n128 v86;
  __n128 v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  __n128 v92;
  uint64_t v93;
  __int128 v94;
  __n128 v95;
  uint64_t v96;
  __n128 *v98;
  __n128 v99;
  __n128 *v100;
  __n128 *v101;
  char v102;
  __n128 v103;
  __n128 *v104;
  unint64_t v105;
  __n128 *v106;
  unsigned __int8 v107;
  __n128 v108;
  unint64_t v109;
  __n128 v110;
  unint64_t v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
LABEL_2:
  v8 = &a2[-2].n128_u64[1];
  v104 = a2 - 3;
  v106 = a2;
  v9 = &a2[-5].n128_u64[1];
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 3);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a1) & 0x80) != 0)
        {
          v41 = *a1;
          v109 = a1[1].n128_u64[0];
          v108 = v41;
          v42 = *(__n128 *)v8;
          a1[1].n128_u64[0] = v8[2];
          *a1 = v42;
          v43 = v108;
          v8[2] = v109;
          *(__n128 *)v8 = v43;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], v8);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, v8);
        return;
      case 5uLL:
        v44 = (__n128 *)((char *)a1 + 24);
        v45 = a1 + 3;
        v46 = (__n128 *)((char *)a1 + 72);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1]);
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, &a1[4].n128_u64[1]) & 0x80) != 0)
        {
          v108 = *v46;
          v47 = v108;
          v109 = a1[5].n128_u64[1];
          v48 = v109;
          v49 = v8[2];
          *v46 = *(__n128 *)v8;
          a1[5].n128_u64[1] = v49;
          v8[2] = v48;
          *(__n128 *)v8 = v47;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1[4].n128_u64[1], (__n128 *)a1[3].n128_u64) & 0x80) != 0)
          {
            v50 = a1[4].n128_u64[0];
            v51 = *v45;
            *v45 = *v46;
            a1[4].n128_u64[0] = a1[5].n128_u64[1];
            *v46 = v51;
            a1[5].n128_u64[1] = v50;
            if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((__n128 *)a1[3].n128_u64, &a1[1].n128_u64[1]) & 0x80) != 0)
            {
              v52 = a1[2].n128_u64[1];
              v53 = *v44;
              *v44 = *v45;
              a1[2].n128_u64[1] = a1[4].n128_u64[0];
              *v45 = v53;
              a1[4].n128_u64[0] = v52;
              if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1[1].n128_u64[1], a1) & 0x80) != 0)
              {
                v54 = *a1;
                v109 = a1[1].n128_u64[0];
                v108 = v54;
                *a1 = *v44;
                a1[1].n128_u64[0] = a1[2].n128_u64[1];
                *v44 = v108;
                a1[2].n128_u64[1] = v109;
              }
            }
          }
        }
        return;
      default:
        if (v11 <= 575)
        {
          v55 = (__n128 *)((char *)a1 + 24);
          v57 = a1 == a2 || v55 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v57)
            {
              v58 = 0;
              v59 = a1;
              do
              {
                v60 = v59;
                v59 = v55;
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, v60) & 0x80) != 0)
                {
                  v61 = *v59;
                  v109 = v59[1].n128_u64[0];
                  v108 = v61;
                  v59->n128_u64[1] = 0;
                  v59[1].n128_u64[0] = 0;
                  v59->n128_u64[0] = 0;
                  v62 = v58;
                  while (1)
                  {
                    v63 = (char *)a1 + v62;
                    *(__n128 *)(v63 + 24) = *(__n128 *)((char *)a1 + v62);
                    *((_QWORD *)v63 + 5) = *(unint64_t *)((char *)a1[1].n128_u64 + v62);
                    v63[23] = 0;
                    *v63 = 0;
                    if (!v62)
                      break;
                    v62 -= 24;
                    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v108, (unint64_t *)((char *)a1->n128_u64 + v62)) & 0x80) == 0)
                    {
                      v64 = (uint64_t)&a1[1].n128_i64[1] + v62;
                      goto LABEL_84;
                    }
                  }
                  v64 = (uint64_t)a1;
LABEL_84:
                  v65 = v108;
                  *(_QWORD *)(v64 + 16) = v109;
                  *(__n128 *)v64 = v65;
                }
                v55 = (__n128 *)((char *)v59 + 24);
                v58 += 24;
              }
              while (&v59[1].n128_i8[8] != (__int8 *)a2);
            }
          }
          else if (!v57)
          {
            do
            {
              v98 = a1;
              a1 = v55;
              if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, v98) & 0x80) != 0)
              {
                v99 = *a1;
                v109 = a1[1].n128_u64[0];
                v108 = v99;
                a1->n128_u64[1] = 0;
                a1[1].n128_u64[0] = 0;
                a1->n128_u64[0] = 0;
                v100 = a1;
                do
                {
                  v101 = (__n128 *)((char *)v100 - 24);
                  *v100 = *(__n128 *)((char *)v100 - 24);
                  v100[1].n128_u64[0] = v100[-1].n128_u64[1];
                  v100[-1].n128_u8[15] = 0;
                  v100[-2].n128_u8[8] = 0;
                  v102 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v108, (__n128 *)v100[-3].n128_u64);
                  v100 = v101;
                }
                while (v102 < 0);
                v103 = v108;
                v101[1].n128_u64[0] = v109;
                *v101 = v103;
              }
              v55 = (__n128 *)((char *)a1 + 24);
            }
            while (&a1[1].n128_i8[8] != (__int8 *)a2);
          }
          return;
        }
        if (!a3)
        {
          if (a1 != a2)
          {
            v66 = (v12 - 2) >> 1;
            v67 = v66;
            do
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = (char *)a1 + 24 * v69;
                if (2 * v67 + 2 < (uint64_t)v12
                  && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1->n128_u64[3 * v69], (_QWORD *)v70 + 3) & 0x80u) != 0)
                {
                  v70 += 24;
                  v69 = 2 * v68 + 2;
                }
                v71 = &a1->n128_u64[3 * v68];
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v70, v71) & 0x80) == 0)
                {
                  v72 = *(__n128 *)v71;
                  v109 = v71[2];
                  v108 = v72;
                  v71[1] = 0;
                  v71[2] = 0;
                  *v71 = 0;
                  do
                  {
                    v73 = (unint64_t *)v70;
                    v74 = *(_OWORD *)v70;
                    v71[2] = *((_QWORD *)v70 + 2);
                    *(_OWORD *)v71 = v74;
                    v70[23] = 0;
                    *v70 = 0;
                    if (v66 < v69)
                      break;
                    v75 = (2 * v69) | 1;
                    v70 = (char *)a1 + 24 * v75;
                    v76 = 2 * v69 + 2;
                    if (v76 < (uint64_t)v12
                      && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1->n128_u64[3 * v75], (_QWORD *)v70 + 3) & 0x80u) != 0)
                    {
                      v70 += 24;
                      v75 = v76;
                    }
                    v71 = v73;
                    v69 = v75;
                  }
                  while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v70, &v108) & 0x80) == 0);
                  v77 = v108;
                  v73[2] = v109;
                  *(__n128 *)v73 = v77;
                }
              }
              v67 = v68 - 1;
            }
            while (v68);
            v78 = v11 / 0x18uLL;
            v79 = v106;
            do
            {
              v80 = 0;
              v81 = v79;
              v105 = a1->n128_u64[0];
              v110.n128_u64[0] = a1->n128_u64[1];
              *(unint64_t *)((char *)v110.n128_u64 + 7) = *(unint64_t *)((char *)&a1->n128_u64[1] + 7);
              v107 = a1[1].n128_u8[7];
              a1->n128_u64[1] = 0;
              a1[1].n128_u64[0] = 0;
              a1->n128_u64[0] = 0;
              v82 = (uint64_t)a1;
              do
              {
                v83 = v82 + 24 * v80 + 24;
                v84 = 2 * v80;
                v80 = (2 * v80) | 1;
                v85 = v84 + 2;
                if (v84 + 2 < v78
                  && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v83, (_QWORD *)(v83 + 24)) & 0x80u) != 0)
                {
                  v83 += 24;
                  v80 = v85;
                }
                if (*(char *)(v82 + 23) < 0)
                  operator delete(*(void **)v82);
                v86 = *(__n128 *)v83;
                *(_QWORD *)(v82 + 16) = *(_QWORD *)(v83 + 16);
                *(__n128 *)v82 = v86;
                *(_BYTE *)(v83 + 23) = 0;
                *(_BYTE *)v83 = 0;
                v82 = v83;
              }
              while (v80 <= (uint64_t)((unint64_t)(v78 - 2) >> 1));
              v79 = (__n128 *)((char *)v79 - 24);
              if ((__int8 *)v83 == &v81[-2].n128_i8[8])
              {
                *(_QWORD *)v83 = v105;
                v96 = *(uint64_t *)((char *)v110.n128_i64 + 7);
                *(_QWORD *)(v83 + 8) = v110.n128_u64[0];
                *(_QWORD *)(v83 + 15) = v96;
                *(_BYTE *)(v83 + 23) = v107;
              }
              else
              {
                v87 = *v79;
                *(_QWORD *)(v83 + 16) = v81[-1].n128_u64[1];
                *(__n128 *)v83 = v87;
                v81[-2].n128_u64[1] = v105;
                v88 = v110.n128_u64[0];
                *(unint64_t *)((char *)v81[-1].n128_u64 + 7) = *(unint64_t *)((char *)v110.n128_u64 + 7);
                v81[-1].n128_u64[0] = v88;
                v81[-1].n128_u8[15] = v107;
                v89 = v83 - (_QWORD)a1 + 24;
                if (v89 >= 25)
                {
                  v90 = (v89 / 0x18uLL - 2) >> 1;
                  v91 = (char *)a1 + 24 * v90;
                  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v91, (_QWORD *)v83) & 0x80) != 0)
                  {
                    v92 = *(__n128 *)v83;
                    v109 = *(_QWORD *)(v83 + 16);
                    v108 = v92;
                    *(_QWORD *)(v83 + 8) = 0;
                    *(_QWORD *)(v83 + 16) = 0;
                    *(_QWORD *)v83 = 0;
                    do
                    {
                      v93 = (uint64_t)v91;
                      v94 = *(_OWORD *)v91;
                      *(_QWORD *)(v83 + 16) = *((_QWORD *)v91 + 2);
                      *(_OWORD *)v83 = v94;
                      v91[23] = 0;
                      *v91 = 0;
                      if (!v90)
                        break;
                      v90 = (v90 - 1) >> 1;
                      v91 = (char *)a1 + 24 * v90;
                      v83 = v93;
                    }
                    while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v91, &v108) & 0x80) != 0);
                    v95 = v108;
                    *(_QWORD *)(v93 + 16) = v109;
                    *(__n128 *)v93 = v95;
                  }
                }
              }
            }
            while (v78-- > 2);
          }
          return;
        }
        v13 = (__n128 *)((char *)a1 + 24 * (v12 >> 1));
        if ((unint64_t)v11 < 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(&a1->n128_u64[3 * (v12 >> 1)], a1, v8);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1->n128_u64[3 * (v12 >> 1)], v8);
          v14 = 3 * (v12 >> 1);
          v15 = (_QWORD *)&a1[-1] + 3 * (v12 >> 1) - 1;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(&a1[1].n128_u64[1], v15, v104);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((__n128 *)a1[3].n128_u64, &a1[1].n128_u64[v14 + 1], v9);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(v15, v13, &a1[1].n128_u64[v14 + 1]);
          v16 = *a1;
          v109 = a1[1].n128_u64[0];
          v108 = v16;
          v17 = v13[1].n128_u64[0];
          *a1 = *v13;
          a1[1].n128_u64[0] = v17;
          v18 = v108;
          v13[1].n128_u64[0] = v109;
          *v13 = v18;
        }
        --a3;
        a2 = v106;
        if ((a4 & 1) == 0
          && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1[-2].n128_u64[1], a1) & 0x80) == 0)
        {
          v31 = *a1;
          v111 = a1[1].n128_u64[0];
          v110 = v31;
          a1->n128_u64[1] = 0;
          a1[1].n128_u64[0] = 0;
          a1->n128_u64[0] = 0;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v8) & 0x80) != 0)
          {
            v10 = a1;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v10) & 0x80) == 0);
          }
          else
          {
            v32 = (__n128 *)((char *)a1 + 24);
            do
            {
              v10 = v32;
              if (v32 >= v106)
                break;
              v33 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v32);
              v32 = (__n128 *)((char *)v10 + 24);
            }
            while ((v33 & 0x80) == 0);
          }
          v34 = v106;
          if (v10 < v106)
          {
            v34 = v106;
            do
              v34 = (__n128 *)((char *)v34 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v34) & 0x80) != 0);
          }
          while (v10 < v34)
          {
            v35 = *v10;
            v109 = v10[1].n128_u64[0];
            v108 = v35;
            v36 = *v34;
            v10[1].n128_u64[0] = v34[1].n128_u64[0];
            *v10 = v36;
            v37 = v108;
            v34[1].n128_u64[0] = v109;
            *v34 = v37;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v10) & 0x80) == 0);
            do
              v34 = (__n128 *)((char *)v34 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v34) & 0x80) != 0);
          }
          v38 = &v10[-2].n128_i8[8];
          if (&v10[-2].n128_i8[8] == (__int8 *)a1)
          {
            if (v10[-1].n128_i8[15] < 0)
              operator delete((void *)a1->n128_u64[0]);
          }
          else
          {
            if (a1[1].n128_i8[7] < 0)
              operator delete((void *)a1->n128_u64[0]);
            v39 = *(__n128 *)v38;
            a1[1].n128_u64[0] = v10[-1].n128_u64[1];
            *a1 = v39;
            v10[-1].n128_u8[15] = 0;
            v10[-2].n128_u8[8] = 0;
          }
          a4 = 0;
          v40 = v110;
          v10[-1].n128_u64[1] = v111;
          *(__n128 *)v38 = v40;
          continue;
        }
        v19 = *a1;
        v111 = a1[1].n128_u64[0];
        v110 = v19;
        a1->n128_u64[1] = 0;
        a1[1].n128_u64[0] = 0;
        a1->n128_u64[0] = 0;
        v20 = a1;
        do
        {
          v21 = v20;
          v20 = (__n128 *)((char *)v20 + 24);
        }
        while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20, &v110) & 0x80) != 0);
        v22 = v106;
        if (v21 == a1)
        {
          v22 = v106;
          do
          {
            if (v20 >= v22)
              break;
            v22 = (__n128 *)((char *)v22 - 24);
          }
          while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, &v110) & 0x80) == 0);
        }
        else
        {
          do
            v22 = (__n128 *)((char *)v22 - 24);
          while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, &v110) & 0x80) == 0);
        }
        v10 = v20;
        if (v20 < v22)
        {
          v23 = v22;
          do
          {
            v108 = *v10;
            v24 = v108;
            v109 = v10[1].n128_u64[0];
            v25 = v109;
            v26 = v23[1].n128_u64[0];
            *v10 = *v23;
            v10[1].n128_u64[0] = v26;
            v23[1].n128_u64[0] = v25;
            *v23 = v24;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, &v110) & 0x80) != 0);
            do
              v23 = (__n128 *)((char *)v23 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v23, &v110) & 0x80) == 0);
          }
          while (v10 < v23);
        }
        v27 = &v10[-2].n128_i8[8];
        if (&v10[-2].n128_i8[8] == (__int8 *)a1)
        {
          if (v10[-1].n128_i8[15] < 0)
            operator delete((void *)a1->n128_u64[0]);
        }
        else
        {
          if (a1[1].n128_i8[7] < 0)
            operator delete((void *)a1->n128_u64[0]);
          v28 = *(__n128 *)v27;
          a1[1].n128_u64[0] = v10[-1].n128_u64[1];
          *a1 = v28;
          v10[-1].n128_u8[15] = 0;
          v10[-2].n128_u8[8] = 0;
        }
        v29 = v110;
        v10[-1].n128_u64[1] = v111;
        *(__n128 *)v27 = v29;
        if (v20 < v22)
        {
LABEL_34:
          std::__introsort<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *,false>(a1, &v10[-2].n128_i8[8], a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, (__n128 *)((char *)v10 - 24));
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(v10, v106))
        {
          if (v30)
            continue;
          goto LABEL_34;
        }
        a2 = (__n128 *)((char *)v10 - 24);
        if (!v30)
          goto LABEL_2;
        return;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  char v6;
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, a1);
  result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, a2);
  if (v6 < 0)
  {
    if ((char)result < 0)
    {
      v17 = a1[2];
      v18 = *(_OWORD *)a1;
      v20 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v20;
    }
    else
    {
      v14 = a1[2];
      v15 = *(_OWORD *)a1;
      v16 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v16;
      *(_OWORD *)a2 = v15;
      a2[2] = v14;
      result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, a2);
      if ((result & 0x80) == 0)
        return result;
      v17 = a2[2];
      v18 = *(_OWORD *)a2;
      v19 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v19;
    }
    *(_OWORD *)a3 = v18;
    a3[2] = v17;
  }
  else if ((char)result < 0)
  {
    v8 = a2[2];
    v9 = *(_OWORD *)a2;
    v10 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v10;
    *(_OWORD *)a3 = v9;
    a3[2] = v8;
    result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, a1);
    if ((result & 0x80) != 0)
    {
      v11 = a1[2];
      v12 = *(_OWORD *)a1;
      v13 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v13;
      *(_OWORD *)a2 = v12;
      a2[2] = v11;
    }
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(__n128 *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  __n128 result;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, a2, a3);
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a4, a3) & 0x80) != 0)
  {
    v9 = a3[2];
    v10 = *(_OWORD *)a3;
    v11 = a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v11;
    *(_OWORD *)a4 = v10;
    a4[2] = v9;
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, a2) & 0x80) != 0)
    {
      v12 = a2[2];
      v13 = *(_OWORD *)a2;
      v14 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v14;
      *(_OWORD *)a3 = v13;
      a3[2] = v12;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, a1) & 0x80) != 0)
      {
        v15 = a1[1].n128_u64[0];
        result = *a1;
        v16 = a2[2];
        *a1 = *(__n128 *)a2;
        a1[1].n128_u64[0] = v16;
        *(__n128 *)a2 = result;
        a2[2] = v15;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(__n128 *a1, __n128 *a2)
{
  unint64_t v4;
  _BOOL8 result;
  __n128 *v6;
  unint64_t v7;
  __n128 v8;
  unint64_t v9;
  __n128 *v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 *v17;
  __n128 *v18;
  __int8 *v19;
  unint64_t *v20;
  unint64_t v21;
  __n128 v22;
  unint64_t v23;
  unint64_t v24;
  __n128 v25;
  unint64_t v26;
  __n128 v27;
  unint64_t v28;
  __n128 v29;
  __int128 v30;
  unint64_t v31;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__n128 *)((char *)a2 - 24);
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a2[-2].n128_u64[1], a1) & 0x80) != 0)
      {
        v7 = a1[1].n128_u64[0];
        v8 = *a1;
        v9 = v6[1].n128_u64[0];
        *a1 = *v6;
        a1[1].n128_u64[0] = v9;
        *v6 = v8;
        v6[1].n128_u64[0] = v7;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a2[-2].n128_u64[1]);
      return 1;
    case 5uLL:
      v17 = (__n128 *)((char *)a1 + 24);
      v18 = a1 + 3;
      v19 = &a1[4].n128_i8[8];
      v20 = &a2[-2].n128_u64[1];
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1]);
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20, &a1[4].n128_u64[1]) & 0x80) != 0)
      {
        v21 = a1[5].n128_u64[1];
        v22 = *(__n128 *)v19;
        v23 = v20[2];
        *(_OWORD *)v19 = *(_OWORD *)v20;
        a1[5].n128_u64[1] = v23;
        *(__n128 *)v20 = v22;
        v20[2] = v21;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1[4].n128_u64[1], (__n128 *)a1[3].n128_u64) & 0x80) != 0)
        {
          v24 = a1[4].n128_u64[0];
          v25 = *v18;
          *v18 = *(__n128 *)v19;
          a1[4].n128_u64[0] = a1[5].n128_u64[1];
          *(__n128 *)v19 = v25;
          a1[5].n128_u64[1] = v24;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((__n128 *)a1[3].n128_u64, &a1[1].n128_u64[1]) & 0x80) != 0)
          {
            v26 = a1[2].n128_u64[1];
            v27 = *v17;
            *v17 = *v18;
            a1[2].n128_u64[1] = a1[4].n128_u64[0];
            *v18 = v27;
            a1[4].n128_u64[0] = v26;
            if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1[1].n128_u64[1], a1) & 0x80) != 0)
            {
              v28 = a1[1].n128_u64[0];
              v29 = *a1;
              *a1 = *v17;
              a1[1].n128_u64[0] = a1[2].n128_u64[1];
              *v17 = v29;
              a1[2].n128_u64[1] = v28;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 3;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64);
      v11 = &a1[4].n128_u64[1];
      if (&a1[4].n128_i8[8] == (__int8 *)a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, v10) & 0x80) != 0)
    {
      v30 = *(_OWORD *)v11;
      v31 = v11[2];
      v11[1] = 0;
      v11[2] = 0;
      *v11 = 0;
      v14 = v12;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(__n128 *)(v15 + 72) = *(__n128 *)((char *)a1 + v14 + 48);
        *((_QWORD *)v15 + 11) = *(unint64_t *)((char *)a1[4].n128_u64 + v14);
        v15[71] = 0;
        v15[48] = 0;
        if (v14 == -48)
          break;
        v14 -= 24;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v30, (_QWORD *)v15 + 3) & 0x80) == 0)
        {
          v16 = (uint64_t)&a1[4].n128_i64[1] + v14;
          goto LABEL_12;
        }
      }
      v16 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)v16 = v30;
      *(_QWORD *)(v16 + 16) = v31;
      if (++v13 == 8)
        return v11 + 3 == (unint64_t *)a2;
    }
    v10 = (__n128 *)v11;
    v12 += 24;
    v11 += 3;
    if (v11 == (unint64_t *)a2)
      return 1;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_0 &,std::string *>(__n128 *a1, __n128 *a2)
{
  unint64_t v4;
  _BOOL8 result;
  __n128 *v6;
  unint64_t v7;
  __n128 v8;
  unint64_t v9;
  __n128 *v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 *v17;
  __n128 *v18;
  __int8 *v19;
  unint64_t *v20;
  unint64_t v21;
  __n128 v22;
  unint64_t v23;
  unint64_t v24;
  __n128 v25;
  unint64_t v26;
  __n128 v27;
  unint64_t v28;
  __n128 v29;
  __int128 v30;
  unint64_t v31;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__n128 *)((char *)a2 - 24);
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a2[-2].n128_u64[1], a1) & 0x80) != 0)
      {
        v7 = a1[1].n128_u64[0];
        v8 = *a1;
        v9 = v6[1].n128_u64[0];
        *a1 = *v6;
        a1[1].n128_u64[0] = v9;
        *v6 = v8;
        v6[1].n128_u64[0] = v7;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a2[-2].n128_u64[1]);
      return 1;
    case 5uLL:
      v17 = (__n128 *)((char *)a1 + 24);
      v18 = a1 + 3;
      v19 = &a1[4].n128_i8[8];
      v20 = &a2[-2].n128_u64[1];
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1]);
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20, &a1[4].n128_u64[1]) & 0x80) != 0)
      {
        v21 = a1[5].n128_u64[1];
        v22 = *(__n128 *)v19;
        v23 = v20[2];
        *(_OWORD *)v19 = *(_OWORD *)v20;
        a1[5].n128_u64[1] = v23;
        *(__n128 *)v20 = v22;
        v20[2] = v21;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1[4].n128_u64[1], (__n128 *)a1[3].n128_u64) & 0x80) != 0)
        {
          v24 = a1[4].n128_u64[0];
          v25 = *v18;
          *v18 = *(__n128 *)v19;
          a1[4].n128_u64[0] = a1[5].n128_u64[1];
          *(__n128 *)v19 = v25;
          a1[5].n128_u64[1] = v24;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((__n128 *)a1[3].n128_u64, &a1[1].n128_u64[1]) & 0x80) != 0)
          {
            v26 = a1[2].n128_u64[1];
            v27 = *v17;
            *v17 = *v18;
            a1[2].n128_u64[1] = a1[4].n128_u64[0];
            *v18 = v27;
            a1[4].n128_u64[0] = v26;
            if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1[1].n128_u64[1], a1) & 0x80) != 0)
            {
              v28 = a1[1].n128_u64[0];
              v29 = *a1;
              *a1 = *v17;
              a1[1].n128_u64[0] = a1[2].n128_u64[1];
              *v17 = v29;
              a1[2].n128_u64[1] = v28;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 3;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64);
      v11 = &a1[4].n128_u64[1];
      if (&a1[4].n128_i8[8] == (__int8 *)a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, v10) & 0x80) != 0)
    {
      v30 = *(_OWORD *)v11;
      v31 = v11[2];
      v11[1] = 0;
      v11[2] = 0;
      *v11 = 0;
      v14 = v12;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(__n128 *)(v15 + 72) = *(__n128 *)((char *)a1 + v14 + 48);
        *((_QWORD *)v15 + 11) = *(unint64_t *)((char *)a1[4].n128_u64 + v14);
        v15[71] = 0;
        v15[48] = 0;
        if (v14 == -48)
          break;
        v14 -= 24;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v30, (_QWORD *)v15 + 3) & 0x80) == 0)
        {
          v16 = (uint64_t)&a1[4].n128_i64[1] + v14;
          goto LABEL_12;
        }
      }
      v16 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)v16 = v30;
      *(_QWORD *)(v16 + 16) = v31;
      if (++v13 == 8)
        return v11 + 3 == (unint64_t *)a2;
    }
    v10 = (__n128 *)v11;
    v12 += 24;
    v11 += 3;
    if (v11 == (unint64_t *)a2)
      return 1;
  }
}

void DSP_Host_OffloadDictionary::deep_copy(DSP_Host_OffloadDictionary *this, uint64_t a2)
{
  DSP_Host_OffloadDictionary *v4;
  const __CFDictionary *v5;
  CFIndex Count;
  const __CFString *v7;

  v4 = (DSP_Host_OffloadDictionary *)operator new();
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = 0;
  *(_QWORD *)this = v4;
  v5 = *(const __CFDictionary **)(a2 + 16);
  if (v5)
  {
    Count = CFDictionaryGetCount(v5);
    v7 = *(const __CFString **)(a2 + 16);
    if (Count)
    {
      DSP_Host_OffloadDictionary::deep_copy_from(v4, v7);
    }
    else if (v7)
    {
      DSP_Host_OffloadDictionary::make_empty(v4);
    }
  }
}

void sub_1B5BE2814(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

DSP_Host_OffloadDictionary *DSP_Host_OffloadDictionary::deep_copy_from(DSP_Host_OffloadDictionary *this, const __CFString *a2)
{
  const void *v4;
  CFDictionaryRef v5;
  const void *v6;
  const void *v8;

  v4 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(v4);
  if (a2)
  {
    v5 = PropertyListDeepImmutableCopy(a2);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v8, v5);
    v6 = (const void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v8;
    v8 = v6;
    if (v6)
      CFRelease(v6);
  }
  return this;
}

void std::__introsort<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::deep_copy_from_changed(__CFDictionary const*)::$_0 &,std::string *,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4)
{
  unint64_t *v8;
  unint64_t *v9;
  __n128 *v10;
  uint64_t v11;
  unint64_t v12;
  __n128 *v13;
  uint64_t v14;
  _QWORD *v15;
  __n128 v16;
  unint64_t v17;
  __n128 v18;
  __n128 v19;
  __n128 *v20;
  __n128 *v21;
  __n128 *v22;
  __n128 *v23;
  __n128 v24;
  unint64_t v25;
  unint64_t v26;
  __int8 *v27;
  __n128 v28;
  __n128 v29;
  BOOL v30;
  __n128 v31;
  __n128 *v32;
  char v33;
  __n128 *v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __int8 *v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 *v44;
  __n128 *v45;
  __n128 *v46;
  __n128 v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __n128 v51;
  unint64_t v52;
  __n128 v53;
  __n128 v54;
  __n128 *v55;
  BOOL v57;
  uint64_t v58;
  __n128 *v59;
  __n128 *v60;
  __n128 v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  __n128 v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  char *v70;
  unint64_t *v71;
  __n128 v72;
  unint64_t *v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  int64_t v78;
  __n128 *v79;
  uint64_t v80;
  __n128 *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __n128 v86;
  __n128 v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  __n128 v92;
  uint64_t v93;
  __int128 v94;
  __n128 v95;
  uint64_t v96;
  __n128 *v98;
  __n128 v99;
  __n128 *v100;
  __n128 *v101;
  char v102;
  __n128 v103;
  __n128 *v104;
  unint64_t v105;
  __n128 *v106;
  unsigned __int8 v107;
  __n128 v108;
  unint64_t v109;
  __n128 v110;
  unint64_t v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
LABEL_2:
  v8 = &a2[-2].n128_u64[1];
  v104 = a2 - 3;
  v106 = a2;
  v9 = &a2[-5].n128_u64[1];
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 3);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a1) & 0x80) != 0)
        {
          v41 = *a1;
          v109 = a1[1].n128_u64[0];
          v108 = v41;
          v42 = *(__n128 *)v8;
          a1[1].n128_u64[0] = v8[2];
          *a1 = v42;
          v43 = v108;
          v8[2] = v109;
          *(__n128 *)v8 = v43;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], v8);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, v8);
        return;
      case 5uLL:
        v44 = (__n128 *)((char *)a1 + 24);
        v45 = a1 + 3;
        v46 = (__n128 *)((char *)a1 + 72);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1]);
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, &a1[4].n128_u64[1]) & 0x80) != 0)
        {
          v108 = *v46;
          v47 = v108;
          v109 = a1[5].n128_u64[1];
          v48 = v109;
          v49 = v8[2];
          *v46 = *(__n128 *)v8;
          a1[5].n128_u64[1] = v49;
          v8[2] = v48;
          *(__n128 *)v8 = v47;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1[4].n128_u64[1], (__n128 *)a1[3].n128_u64) & 0x80) != 0)
          {
            v50 = a1[4].n128_u64[0];
            v51 = *v45;
            *v45 = *v46;
            a1[4].n128_u64[0] = a1[5].n128_u64[1];
            *v46 = v51;
            a1[5].n128_u64[1] = v50;
            if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((__n128 *)a1[3].n128_u64, &a1[1].n128_u64[1]) & 0x80) != 0)
            {
              v52 = a1[2].n128_u64[1];
              v53 = *v44;
              *v44 = *v45;
              a1[2].n128_u64[1] = a1[4].n128_u64[0];
              *v45 = v53;
              a1[4].n128_u64[0] = v52;
              if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1[1].n128_u64[1], a1) & 0x80) != 0)
              {
                v54 = *a1;
                v109 = a1[1].n128_u64[0];
                v108 = v54;
                *a1 = *v44;
                a1[1].n128_u64[0] = a1[2].n128_u64[1];
                *v44 = v108;
                a1[2].n128_u64[1] = v109;
              }
            }
          }
        }
        return;
      default:
        if (v11 <= 575)
        {
          v55 = (__n128 *)((char *)a1 + 24);
          v57 = a1 == a2 || v55 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v57)
            {
              v58 = 0;
              v59 = a1;
              do
              {
                v60 = v59;
                v59 = v55;
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, v60) & 0x80) != 0)
                {
                  v61 = *v59;
                  v109 = v59[1].n128_u64[0];
                  v108 = v61;
                  v59->n128_u64[1] = 0;
                  v59[1].n128_u64[0] = 0;
                  v59->n128_u64[0] = 0;
                  v62 = v58;
                  while (1)
                  {
                    v63 = (char *)a1 + v62;
                    *(__n128 *)(v63 + 24) = *(__n128 *)((char *)a1 + v62);
                    *((_QWORD *)v63 + 5) = *(unint64_t *)((char *)a1[1].n128_u64 + v62);
                    v63[23] = 0;
                    *v63 = 0;
                    if (!v62)
                      break;
                    v62 -= 24;
                    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v108, (unint64_t *)((char *)a1->n128_u64 + v62)) & 0x80) == 0)
                    {
                      v64 = (uint64_t)&a1[1].n128_i64[1] + v62;
                      goto LABEL_84;
                    }
                  }
                  v64 = (uint64_t)a1;
LABEL_84:
                  v65 = v108;
                  *(_QWORD *)(v64 + 16) = v109;
                  *(__n128 *)v64 = v65;
                }
                v55 = (__n128 *)((char *)v59 + 24);
                v58 += 24;
              }
              while (&v59[1].n128_i8[8] != (__int8 *)a2);
            }
          }
          else if (!v57)
          {
            do
            {
              v98 = a1;
              a1 = v55;
              if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, v98) & 0x80) != 0)
              {
                v99 = *a1;
                v109 = a1[1].n128_u64[0];
                v108 = v99;
                a1->n128_u64[1] = 0;
                a1[1].n128_u64[0] = 0;
                a1->n128_u64[0] = 0;
                v100 = a1;
                do
                {
                  v101 = (__n128 *)((char *)v100 - 24);
                  *v100 = *(__n128 *)((char *)v100 - 24);
                  v100[1].n128_u64[0] = v100[-1].n128_u64[1];
                  v100[-1].n128_u8[15] = 0;
                  v100[-2].n128_u8[8] = 0;
                  v102 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v108, (__n128 *)v100[-3].n128_u64);
                  v100 = v101;
                }
                while (v102 < 0);
                v103 = v108;
                v101[1].n128_u64[0] = v109;
                *v101 = v103;
              }
              v55 = (__n128 *)((char *)a1 + 24);
            }
            while (&a1[1].n128_i8[8] != (__int8 *)a2);
          }
          return;
        }
        if (!a3)
        {
          if (a1 != a2)
          {
            v66 = (v12 - 2) >> 1;
            v67 = v66;
            do
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = (char *)a1 + 24 * v69;
                if (2 * v67 + 2 < (uint64_t)v12
                  && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1->n128_u64[3 * v69], (_QWORD *)v70 + 3) & 0x80u) != 0)
                {
                  v70 += 24;
                  v69 = 2 * v68 + 2;
                }
                v71 = &a1->n128_u64[3 * v68];
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v70, v71) & 0x80) == 0)
                {
                  v72 = *(__n128 *)v71;
                  v109 = v71[2];
                  v108 = v72;
                  v71[1] = 0;
                  v71[2] = 0;
                  *v71 = 0;
                  do
                  {
                    v73 = (unint64_t *)v70;
                    v74 = *(_OWORD *)v70;
                    v71[2] = *((_QWORD *)v70 + 2);
                    *(_OWORD *)v71 = v74;
                    v70[23] = 0;
                    *v70 = 0;
                    if (v66 < v69)
                      break;
                    v75 = (2 * v69) | 1;
                    v70 = (char *)a1 + 24 * v75;
                    v76 = 2 * v69 + 2;
                    if (v76 < (uint64_t)v12
                      && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1->n128_u64[3 * v75], (_QWORD *)v70 + 3) & 0x80u) != 0)
                    {
                      v70 += 24;
                      v75 = v76;
                    }
                    v71 = v73;
                    v69 = v75;
                  }
                  while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v70, &v108) & 0x80) == 0);
                  v77 = v108;
                  v73[2] = v109;
                  *(__n128 *)v73 = v77;
                }
              }
              v67 = v68 - 1;
            }
            while (v68);
            v78 = v11 / 0x18uLL;
            v79 = v106;
            do
            {
              v80 = 0;
              v81 = v79;
              v105 = a1->n128_u64[0];
              v110.n128_u64[0] = a1->n128_u64[1];
              *(unint64_t *)((char *)v110.n128_u64 + 7) = *(unint64_t *)((char *)&a1->n128_u64[1] + 7);
              v107 = a1[1].n128_u8[7];
              a1->n128_u64[1] = 0;
              a1[1].n128_u64[0] = 0;
              a1->n128_u64[0] = 0;
              v82 = (uint64_t)a1;
              do
              {
                v83 = v82 + 24 * v80 + 24;
                v84 = 2 * v80;
                v80 = (2 * v80) | 1;
                v85 = v84 + 2;
                if (v84 + 2 < v78
                  && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v83, (_QWORD *)(v83 + 24)) & 0x80u) != 0)
                {
                  v83 += 24;
                  v80 = v85;
                }
                if (*(char *)(v82 + 23) < 0)
                  operator delete(*(void **)v82);
                v86 = *(__n128 *)v83;
                *(_QWORD *)(v82 + 16) = *(_QWORD *)(v83 + 16);
                *(__n128 *)v82 = v86;
                *(_BYTE *)(v83 + 23) = 0;
                *(_BYTE *)v83 = 0;
                v82 = v83;
              }
              while (v80 <= (uint64_t)((unint64_t)(v78 - 2) >> 1));
              v79 = (__n128 *)((char *)v79 - 24);
              if ((__int8 *)v83 == &v81[-2].n128_i8[8])
              {
                *(_QWORD *)v83 = v105;
                v96 = *(uint64_t *)((char *)v110.n128_i64 + 7);
                *(_QWORD *)(v83 + 8) = v110.n128_u64[0];
                *(_QWORD *)(v83 + 15) = v96;
                *(_BYTE *)(v83 + 23) = v107;
              }
              else
              {
                v87 = *v79;
                *(_QWORD *)(v83 + 16) = v81[-1].n128_u64[1];
                *(__n128 *)v83 = v87;
                v81[-2].n128_u64[1] = v105;
                v88 = v110.n128_u64[0];
                *(unint64_t *)((char *)v81[-1].n128_u64 + 7) = *(unint64_t *)((char *)v110.n128_u64 + 7);
                v81[-1].n128_u64[0] = v88;
                v81[-1].n128_u8[15] = v107;
                v89 = v83 - (_QWORD)a1 + 24;
                if (v89 >= 25)
                {
                  v90 = (v89 / 0x18uLL - 2) >> 1;
                  v91 = (char *)a1 + 24 * v90;
                  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v91, (_QWORD *)v83) & 0x80) != 0)
                  {
                    v92 = *(__n128 *)v83;
                    v109 = *(_QWORD *)(v83 + 16);
                    v108 = v92;
                    *(_QWORD *)(v83 + 8) = 0;
                    *(_QWORD *)(v83 + 16) = 0;
                    *(_QWORD *)v83 = 0;
                    do
                    {
                      v93 = (uint64_t)v91;
                      v94 = *(_OWORD *)v91;
                      *(_QWORD *)(v83 + 16) = *((_QWORD *)v91 + 2);
                      *(_OWORD *)v83 = v94;
                      v91[23] = 0;
                      *v91 = 0;
                      if (!v90)
                        break;
                      v90 = (v90 - 1) >> 1;
                      v91 = (char *)a1 + 24 * v90;
                      v83 = v93;
                    }
                    while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v91, &v108) & 0x80) != 0);
                    v95 = v108;
                    *(_QWORD *)(v93 + 16) = v109;
                    *(__n128 *)v93 = v95;
                  }
                }
              }
            }
            while (v78-- > 2);
          }
          return;
        }
        v13 = (__n128 *)((char *)a1 + 24 * (v12 >> 1));
        if ((unint64_t)v11 < 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(&a1->n128_u64[3 * (v12 >> 1)], a1, v8);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1->n128_u64[3 * (v12 >> 1)], v8);
          v14 = 3 * (v12 >> 1);
          v15 = (_QWORD *)&a1[-1] + 3 * (v12 >> 1) - 1;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(&a1[1].n128_u64[1], v15, v104);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((__n128 *)a1[3].n128_u64, &a1[1].n128_u64[v14 + 1], v9);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(v15, v13, &a1[1].n128_u64[v14 + 1]);
          v16 = *a1;
          v109 = a1[1].n128_u64[0];
          v108 = v16;
          v17 = v13[1].n128_u64[0];
          *a1 = *v13;
          a1[1].n128_u64[0] = v17;
          v18 = v108;
          v13[1].n128_u64[0] = v109;
          *v13 = v18;
        }
        --a3;
        a2 = v106;
        if ((a4 & 1) == 0
          && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1[-2].n128_u64[1], a1) & 0x80) == 0)
        {
          v31 = *a1;
          v111 = a1[1].n128_u64[0];
          v110 = v31;
          a1->n128_u64[1] = 0;
          a1[1].n128_u64[0] = 0;
          a1->n128_u64[0] = 0;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v8) & 0x80) != 0)
          {
            v10 = a1;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v10) & 0x80) == 0);
          }
          else
          {
            v32 = (__n128 *)((char *)a1 + 24);
            do
            {
              v10 = v32;
              if (v32 >= v106)
                break;
              v33 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v32);
              v32 = (__n128 *)((char *)v10 + 24);
            }
            while ((v33 & 0x80) == 0);
          }
          v34 = v106;
          if (v10 < v106)
          {
            v34 = v106;
            do
              v34 = (__n128 *)((char *)v34 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v34) & 0x80) != 0);
          }
          while (v10 < v34)
          {
            v35 = *v10;
            v109 = v10[1].n128_u64[0];
            v108 = v35;
            v36 = *v34;
            v10[1].n128_u64[0] = v34[1].n128_u64[0];
            *v10 = v36;
            v37 = v108;
            v34[1].n128_u64[0] = v109;
            *v34 = v37;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v10) & 0x80) == 0);
            do
              v34 = (__n128 *)((char *)v34 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v34) & 0x80) != 0);
          }
          v38 = &v10[-2].n128_i8[8];
          if (&v10[-2].n128_i8[8] == (__int8 *)a1)
          {
            if (v10[-1].n128_i8[15] < 0)
              operator delete((void *)a1->n128_u64[0]);
          }
          else
          {
            if (a1[1].n128_i8[7] < 0)
              operator delete((void *)a1->n128_u64[0]);
            v39 = *(__n128 *)v38;
            a1[1].n128_u64[0] = v10[-1].n128_u64[1];
            *a1 = v39;
            v10[-1].n128_u8[15] = 0;
            v10[-2].n128_u8[8] = 0;
          }
          a4 = 0;
          v40 = v110;
          v10[-1].n128_u64[1] = v111;
          *(__n128 *)v38 = v40;
          continue;
        }
        v19 = *a1;
        v111 = a1[1].n128_u64[0];
        v110 = v19;
        a1->n128_u64[1] = 0;
        a1[1].n128_u64[0] = 0;
        a1->n128_u64[0] = 0;
        v20 = a1;
        do
        {
          v21 = v20;
          v20 = (__n128 *)((char *)v20 + 24);
        }
        while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20, &v110) & 0x80) != 0);
        v22 = v106;
        if (v21 == a1)
        {
          v22 = v106;
          do
          {
            if (v20 >= v22)
              break;
            v22 = (__n128 *)((char *)v22 - 24);
          }
          while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, &v110) & 0x80) == 0);
        }
        else
        {
          do
            v22 = (__n128 *)((char *)v22 - 24);
          while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, &v110) & 0x80) == 0);
        }
        v10 = v20;
        if (v20 < v22)
        {
          v23 = v22;
          do
          {
            v108 = *v10;
            v24 = v108;
            v109 = v10[1].n128_u64[0];
            v25 = v109;
            v26 = v23[1].n128_u64[0];
            *v10 = *v23;
            v10[1].n128_u64[0] = v26;
            v23[1].n128_u64[0] = v25;
            *v23 = v24;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, &v110) & 0x80) != 0);
            do
              v23 = (__n128 *)((char *)v23 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v23, &v110) & 0x80) == 0);
          }
          while (v10 < v23);
        }
        v27 = &v10[-2].n128_i8[8];
        if (&v10[-2].n128_i8[8] == (__int8 *)a1)
        {
          if (v10[-1].n128_i8[15] < 0)
            operator delete((void *)a1->n128_u64[0]);
        }
        else
        {
          if (a1[1].n128_i8[7] < 0)
            operator delete((void *)a1->n128_u64[0]);
          v28 = *(__n128 *)v27;
          a1[1].n128_u64[0] = v10[-1].n128_u64[1];
          *a1 = v28;
          v10[-1].n128_u8[15] = 0;
          v10[-2].n128_u8[8] = 0;
        }
        v29 = v110;
        v10[-1].n128_u64[1] = v111;
        *(__n128 *)v27 = v29;
        if (v20 < v22)
        {
LABEL_34:
          std::__introsort<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::deep_copy_from_changed(__CFDictionary const*)::$_0 &,std::string *,false>(a1, &v10[-2].n128_i8[8], a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::deep_copy_from_changed(__CFDictionary const*)::$_0 &,std::string *>(a1, (__n128 *)((char *)v10 - 24));
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::deep_copy_from_changed(__CFDictionary const*)::$_0 &,std::string *>(v10, v106))
        {
          if (v30)
            continue;
          goto LABEL_34;
        }
        a2 = (__n128 *)((char *)v10 - 24);
        if (!v30)
          goto LABEL_2;
        return;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::deep_copy_from_changed(__CFDictionary const*)::$_1 &,std::string *,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4)
{
  unint64_t *v8;
  unint64_t *v9;
  __n128 *v10;
  uint64_t v11;
  unint64_t v12;
  __n128 *v13;
  uint64_t v14;
  _QWORD *v15;
  __n128 v16;
  unint64_t v17;
  __n128 v18;
  __n128 v19;
  __n128 *v20;
  __n128 *v21;
  __n128 *v22;
  __n128 *v23;
  __n128 v24;
  unint64_t v25;
  unint64_t v26;
  __int8 *v27;
  __n128 v28;
  __n128 v29;
  BOOL v30;
  __n128 v31;
  __n128 *v32;
  char v33;
  __n128 *v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __int8 *v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 *v44;
  __n128 *v45;
  __n128 *v46;
  __n128 v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __n128 v51;
  unint64_t v52;
  __n128 v53;
  __n128 v54;
  __n128 *v55;
  BOOL v57;
  uint64_t v58;
  __n128 *v59;
  __n128 *v60;
  __n128 v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  __n128 v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  char *v70;
  unint64_t *v71;
  __n128 v72;
  unint64_t *v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  int64_t v78;
  __n128 *v79;
  uint64_t v80;
  __n128 *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __n128 v86;
  __n128 v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  __n128 v92;
  uint64_t v93;
  __int128 v94;
  __n128 v95;
  uint64_t v96;
  __n128 *v98;
  __n128 v99;
  __n128 *v100;
  __n128 *v101;
  char v102;
  __n128 v103;
  __n128 *v104;
  unint64_t v105;
  __n128 *v106;
  unsigned __int8 v107;
  __n128 v108;
  unint64_t v109;
  __n128 v110;
  unint64_t v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
LABEL_2:
  v8 = &a2[-2].n128_u64[1];
  v104 = a2 - 3;
  v106 = a2;
  v9 = &a2[-5].n128_u64[1];
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 3);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a1) & 0x80) != 0)
        {
          v41 = *a1;
          v109 = a1[1].n128_u64[0];
          v108 = v41;
          v42 = *(__n128 *)v8;
          a1[1].n128_u64[0] = v8[2];
          *a1 = v42;
          v43 = v108;
          v8[2] = v109;
          *(__n128 *)v8 = v43;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], v8);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, v8);
        return;
      case 5uLL:
        v44 = (__n128 *)((char *)a1 + 24);
        v45 = a1 + 3;
        v46 = (__n128 *)((char *)a1 + 72);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1]);
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, &a1[4].n128_u64[1]) & 0x80) != 0)
        {
          v108 = *v46;
          v47 = v108;
          v109 = a1[5].n128_u64[1];
          v48 = v109;
          v49 = v8[2];
          *v46 = *(__n128 *)v8;
          a1[5].n128_u64[1] = v49;
          v8[2] = v48;
          *(__n128 *)v8 = v47;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1[4].n128_u64[1], (__n128 *)a1[3].n128_u64) & 0x80) != 0)
          {
            v50 = a1[4].n128_u64[0];
            v51 = *v45;
            *v45 = *v46;
            a1[4].n128_u64[0] = a1[5].n128_u64[1];
            *v46 = v51;
            a1[5].n128_u64[1] = v50;
            if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((__n128 *)a1[3].n128_u64, &a1[1].n128_u64[1]) & 0x80) != 0)
            {
              v52 = a1[2].n128_u64[1];
              v53 = *v44;
              *v44 = *v45;
              a1[2].n128_u64[1] = a1[4].n128_u64[0];
              *v45 = v53;
              a1[4].n128_u64[0] = v52;
              if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1[1].n128_u64[1], a1) & 0x80) != 0)
              {
                v54 = *a1;
                v109 = a1[1].n128_u64[0];
                v108 = v54;
                *a1 = *v44;
                a1[1].n128_u64[0] = a1[2].n128_u64[1];
                *v44 = v108;
                a1[2].n128_u64[1] = v109;
              }
            }
          }
        }
        return;
      default:
        if (v11 <= 575)
        {
          v55 = (__n128 *)((char *)a1 + 24);
          v57 = a1 == a2 || v55 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v57)
            {
              v58 = 0;
              v59 = a1;
              do
              {
                v60 = v59;
                v59 = v55;
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, v60) & 0x80) != 0)
                {
                  v61 = *v59;
                  v109 = v59[1].n128_u64[0];
                  v108 = v61;
                  v59->n128_u64[1] = 0;
                  v59[1].n128_u64[0] = 0;
                  v59->n128_u64[0] = 0;
                  v62 = v58;
                  while (1)
                  {
                    v63 = (char *)a1 + v62;
                    *(__n128 *)(v63 + 24) = *(__n128 *)((char *)a1 + v62);
                    *((_QWORD *)v63 + 5) = *(unint64_t *)((char *)a1[1].n128_u64 + v62);
                    v63[23] = 0;
                    *v63 = 0;
                    if (!v62)
                      break;
                    v62 -= 24;
                    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v108, (unint64_t *)((char *)a1->n128_u64 + v62)) & 0x80) == 0)
                    {
                      v64 = (uint64_t)&a1[1].n128_i64[1] + v62;
                      goto LABEL_84;
                    }
                  }
                  v64 = (uint64_t)a1;
LABEL_84:
                  v65 = v108;
                  *(_QWORD *)(v64 + 16) = v109;
                  *(__n128 *)v64 = v65;
                }
                v55 = (__n128 *)((char *)v59 + 24);
                v58 += 24;
              }
              while (&v59[1].n128_i8[8] != (__int8 *)a2);
            }
          }
          else if (!v57)
          {
            do
            {
              v98 = a1;
              a1 = v55;
              if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, v98) & 0x80) != 0)
              {
                v99 = *a1;
                v109 = a1[1].n128_u64[0];
                v108 = v99;
                a1->n128_u64[1] = 0;
                a1[1].n128_u64[0] = 0;
                a1->n128_u64[0] = 0;
                v100 = a1;
                do
                {
                  v101 = (__n128 *)((char *)v100 - 24);
                  *v100 = *(__n128 *)((char *)v100 - 24);
                  v100[1].n128_u64[0] = v100[-1].n128_u64[1];
                  v100[-1].n128_u8[15] = 0;
                  v100[-2].n128_u8[8] = 0;
                  v102 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v108, (__n128 *)v100[-3].n128_u64);
                  v100 = v101;
                }
                while (v102 < 0);
                v103 = v108;
                v101[1].n128_u64[0] = v109;
                *v101 = v103;
              }
              v55 = (__n128 *)((char *)a1 + 24);
            }
            while (&a1[1].n128_i8[8] != (__int8 *)a2);
          }
          return;
        }
        if (!a3)
        {
          if (a1 != a2)
          {
            v66 = (v12 - 2) >> 1;
            v67 = v66;
            do
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = (char *)a1 + 24 * v69;
                if (2 * v67 + 2 < (uint64_t)v12
                  && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1->n128_u64[3 * v69], (_QWORD *)v70 + 3) & 0x80u) != 0)
                {
                  v70 += 24;
                  v69 = 2 * v68 + 2;
                }
                v71 = &a1->n128_u64[3 * v68];
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v70, v71) & 0x80) == 0)
                {
                  v72 = *(__n128 *)v71;
                  v109 = v71[2];
                  v108 = v72;
                  v71[1] = 0;
                  v71[2] = 0;
                  *v71 = 0;
                  do
                  {
                    v73 = (unint64_t *)v70;
                    v74 = *(_OWORD *)v70;
                    v71[2] = *((_QWORD *)v70 + 2);
                    *(_OWORD *)v71 = v74;
                    v70[23] = 0;
                    *v70 = 0;
                    if (v66 < v69)
                      break;
                    v75 = (2 * v69) | 1;
                    v70 = (char *)a1 + 24 * v75;
                    v76 = 2 * v69 + 2;
                    if (v76 < (uint64_t)v12
                      && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1->n128_u64[3 * v75], (_QWORD *)v70 + 3) & 0x80u) != 0)
                    {
                      v70 += 24;
                      v75 = v76;
                    }
                    v71 = v73;
                    v69 = v75;
                  }
                  while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v70, &v108) & 0x80) == 0);
                  v77 = v108;
                  v73[2] = v109;
                  *(__n128 *)v73 = v77;
                }
              }
              v67 = v68 - 1;
            }
            while (v68);
            v78 = v11 / 0x18uLL;
            v79 = v106;
            do
            {
              v80 = 0;
              v81 = v79;
              v105 = a1->n128_u64[0];
              v110.n128_u64[0] = a1->n128_u64[1];
              *(unint64_t *)((char *)v110.n128_u64 + 7) = *(unint64_t *)((char *)&a1->n128_u64[1] + 7);
              v107 = a1[1].n128_u8[7];
              a1->n128_u64[1] = 0;
              a1[1].n128_u64[0] = 0;
              a1->n128_u64[0] = 0;
              v82 = (uint64_t)a1;
              do
              {
                v83 = v82 + 24 * v80 + 24;
                v84 = 2 * v80;
                v80 = (2 * v80) | 1;
                v85 = v84 + 2;
                if (v84 + 2 < v78
                  && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v83, (_QWORD *)(v83 + 24)) & 0x80u) != 0)
                {
                  v83 += 24;
                  v80 = v85;
                }
                if (*(char *)(v82 + 23) < 0)
                  operator delete(*(void **)v82);
                v86 = *(__n128 *)v83;
                *(_QWORD *)(v82 + 16) = *(_QWORD *)(v83 + 16);
                *(__n128 *)v82 = v86;
                *(_BYTE *)(v83 + 23) = 0;
                *(_BYTE *)v83 = 0;
                v82 = v83;
              }
              while (v80 <= (uint64_t)((unint64_t)(v78 - 2) >> 1));
              v79 = (__n128 *)((char *)v79 - 24);
              if ((__int8 *)v83 == &v81[-2].n128_i8[8])
              {
                *(_QWORD *)v83 = v105;
                v96 = *(uint64_t *)((char *)v110.n128_i64 + 7);
                *(_QWORD *)(v83 + 8) = v110.n128_u64[0];
                *(_QWORD *)(v83 + 15) = v96;
                *(_BYTE *)(v83 + 23) = v107;
              }
              else
              {
                v87 = *v79;
                *(_QWORD *)(v83 + 16) = v81[-1].n128_u64[1];
                *(__n128 *)v83 = v87;
                v81[-2].n128_u64[1] = v105;
                v88 = v110.n128_u64[0];
                *(unint64_t *)((char *)v81[-1].n128_u64 + 7) = *(unint64_t *)((char *)v110.n128_u64 + 7);
                v81[-1].n128_u64[0] = v88;
                v81[-1].n128_u8[15] = v107;
                v89 = v83 - (_QWORD)a1 + 24;
                if (v89 >= 25)
                {
                  v90 = (v89 / 0x18uLL - 2) >> 1;
                  v91 = (char *)a1 + 24 * v90;
                  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v91, (_QWORD *)v83) & 0x80) != 0)
                  {
                    v92 = *(__n128 *)v83;
                    v109 = *(_QWORD *)(v83 + 16);
                    v108 = v92;
                    *(_QWORD *)(v83 + 8) = 0;
                    *(_QWORD *)(v83 + 16) = 0;
                    *(_QWORD *)v83 = 0;
                    do
                    {
                      v93 = (uint64_t)v91;
                      v94 = *(_OWORD *)v91;
                      *(_QWORD *)(v83 + 16) = *((_QWORD *)v91 + 2);
                      *(_OWORD *)v83 = v94;
                      v91[23] = 0;
                      *v91 = 0;
                      if (!v90)
                        break;
                      v90 = (v90 - 1) >> 1;
                      v91 = (char *)a1 + 24 * v90;
                      v83 = v93;
                    }
                    while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v91, &v108) & 0x80) != 0);
                    v95 = v108;
                    *(_QWORD *)(v93 + 16) = v109;
                    *(__n128 *)v93 = v95;
                  }
                }
              }
            }
            while (v78-- > 2);
          }
          return;
        }
        v13 = (__n128 *)((char *)a1 + 24 * (v12 >> 1));
        if ((unint64_t)v11 < 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(&a1->n128_u64[3 * (v12 >> 1)], a1, v8);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1->n128_u64[3 * (v12 >> 1)], v8);
          v14 = 3 * (v12 >> 1);
          v15 = (_QWORD *)&a1[-1] + 3 * (v12 >> 1) - 1;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(&a1[1].n128_u64[1], v15, v104);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((__n128 *)a1[3].n128_u64, &a1[1].n128_u64[v14 + 1], v9);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(v15, v13, &a1[1].n128_u64[v14 + 1]);
          v16 = *a1;
          v109 = a1[1].n128_u64[0];
          v108 = v16;
          v17 = v13[1].n128_u64[0];
          *a1 = *v13;
          a1[1].n128_u64[0] = v17;
          v18 = v108;
          v13[1].n128_u64[0] = v109;
          *v13 = v18;
        }
        --a3;
        a2 = v106;
        if ((a4 & 1) == 0
          && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1[-2].n128_u64[1], a1) & 0x80) == 0)
        {
          v31 = *a1;
          v111 = a1[1].n128_u64[0];
          v110 = v31;
          a1->n128_u64[1] = 0;
          a1[1].n128_u64[0] = 0;
          a1->n128_u64[0] = 0;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v8) & 0x80) != 0)
          {
            v10 = a1;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v10) & 0x80) == 0);
          }
          else
          {
            v32 = (__n128 *)((char *)a1 + 24);
            do
            {
              v10 = v32;
              if (v32 >= v106)
                break;
              v33 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v32);
              v32 = (__n128 *)((char *)v10 + 24);
            }
            while ((v33 & 0x80) == 0);
          }
          v34 = v106;
          if (v10 < v106)
          {
            v34 = v106;
            do
              v34 = (__n128 *)((char *)v34 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v34) & 0x80) != 0);
          }
          while (v10 < v34)
          {
            v35 = *v10;
            v109 = v10[1].n128_u64[0];
            v108 = v35;
            v36 = *v34;
            v10[1].n128_u64[0] = v34[1].n128_u64[0];
            *v10 = v36;
            v37 = v108;
            v34[1].n128_u64[0] = v109;
            *v34 = v37;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v10) & 0x80) == 0);
            do
              v34 = (__n128 *)((char *)v34 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v110, v34) & 0x80) != 0);
          }
          v38 = &v10[-2].n128_i8[8];
          if (&v10[-2].n128_i8[8] == (__int8 *)a1)
          {
            if (v10[-1].n128_i8[15] < 0)
              operator delete((void *)a1->n128_u64[0]);
          }
          else
          {
            if (a1[1].n128_i8[7] < 0)
              operator delete((void *)a1->n128_u64[0]);
            v39 = *(__n128 *)v38;
            a1[1].n128_u64[0] = v10[-1].n128_u64[1];
            *a1 = v39;
            v10[-1].n128_u8[15] = 0;
            v10[-2].n128_u8[8] = 0;
          }
          a4 = 0;
          v40 = v110;
          v10[-1].n128_u64[1] = v111;
          *(__n128 *)v38 = v40;
          continue;
        }
        v19 = *a1;
        v111 = a1[1].n128_u64[0];
        v110 = v19;
        a1->n128_u64[1] = 0;
        a1[1].n128_u64[0] = 0;
        a1->n128_u64[0] = 0;
        v20 = a1;
        do
        {
          v21 = v20;
          v20 = (__n128 *)((char *)v20 + 24);
        }
        while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20, &v110) & 0x80) != 0);
        v22 = v106;
        if (v21 == a1)
        {
          v22 = v106;
          do
          {
            if (v20 >= v22)
              break;
            v22 = (__n128 *)((char *)v22 - 24);
          }
          while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, &v110) & 0x80) == 0);
        }
        else
        {
          do
            v22 = (__n128 *)((char *)v22 - 24);
          while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, &v110) & 0x80) == 0);
        }
        v10 = v20;
        if (v20 < v22)
        {
          v23 = v22;
          do
          {
            v108 = *v10;
            v24 = v108;
            v109 = v10[1].n128_u64[0];
            v25 = v109;
            v26 = v23[1].n128_u64[0];
            *v10 = *v23;
            v10[1].n128_u64[0] = v26;
            v23[1].n128_u64[0] = v25;
            *v23 = v24;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, &v110) & 0x80) != 0);
            do
              v23 = (__n128 *)((char *)v23 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v23, &v110) & 0x80) == 0);
          }
          while (v10 < v23);
        }
        v27 = &v10[-2].n128_i8[8];
        if (&v10[-2].n128_i8[8] == (__int8 *)a1)
        {
          if (v10[-1].n128_i8[15] < 0)
            operator delete((void *)a1->n128_u64[0]);
        }
        else
        {
          if (a1[1].n128_i8[7] < 0)
            operator delete((void *)a1->n128_u64[0]);
          v28 = *(__n128 *)v27;
          a1[1].n128_u64[0] = v10[-1].n128_u64[1];
          *a1 = v28;
          v10[-1].n128_u8[15] = 0;
          v10[-2].n128_u8[8] = 0;
        }
        v29 = v110;
        v10[-1].n128_u64[1] = v111;
        *(__n128 *)v27 = v29;
        if (v20 < v22)
        {
LABEL_34:
          std::__introsort<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::deep_copy_from_changed(__CFDictionary const*)::$_1 &,std::string *,false>(a1, &v10[-2].n128_i8[8], a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::deep_copy_from_changed(__CFDictionary const*)::$_1 &,std::string *>(a1, (__n128 *)((char *)v10 - 24));
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::deep_copy_from_changed(__CFDictionary const*)::$_1 &,std::string *>(v10, v106))
        {
          if (v30)
            continue;
          goto LABEL_34;
        }
        a2 = (__n128 *)((char *)v10 - 24);
        if (!v30)
          goto LABEL_2;
        return;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::deep_copy_from_changed(__CFDictionary const*)::$_1 &,std::string *>(__n128 *a1, __n128 *a2)
{
  unint64_t v4;
  _BOOL8 result;
  __n128 *v6;
  unint64_t v7;
  __n128 v8;
  unint64_t v9;
  __n128 *v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 *v17;
  __n128 *v18;
  __int8 *v19;
  unint64_t *v20;
  unint64_t v21;
  __n128 v22;
  unint64_t v23;
  unint64_t v24;
  __n128 v25;
  unint64_t v26;
  __n128 v27;
  unint64_t v28;
  __n128 v29;
  __int128 v30;
  unint64_t v31;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__n128 *)((char *)a2 - 24);
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a2[-2].n128_u64[1], a1) & 0x80) != 0)
      {
        v7 = a1[1].n128_u64[0];
        v8 = *a1;
        v9 = v6[1].n128_u64[0];
        *a1 = *v6;
        a1[1].n128_u64[0] = v9;
        *v6 = v8;
        v6[1].n128_u64[0] = v7;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a2[-2].n128_u64[1]);
      return 1;
    case 5uLL:
      v17 = (__n128 *)((char *)a1 + 24);
      v18 = a1 + 3;
      v19 = &a1[4].n128_i8[8];
      v20 = &a2[-2].n128_u64[1];
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1]);
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20, &a1[4].n128_u64[1]) & 0x80) != 0)
      {
        v21 = a1[5].n128_u64[1];
        v22 = *(__n128 *)v19;
        v23 = v20[2];
        *(_OWORD *)v19 = *(_OWORD *)v20;
        a1[5].n128_u64[1] = v23;
        *(__n128 *)v20 = v22;
        v20[2] = v21;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1[4].n128_u64[1], (__n128 *)a1[3].n128_u64) & 0x80) != 0)
        {
          v24 = a1[4].n128_u64[0];
          v25 = *v18;
          *v18 = *(__n128 *)v19;
          a1[4].n128_u64[0] = a1[5].n128_u64[1];
          *(__n128 *)v19 = v25;
          a1[5].n128_u64[1] = v24;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((__n128 *)a1[3].n128_u64, &a1[1].n128_u64[1]) & 0x80) != 0)
          {
            v26 = a1[2].n128_u64[1];
            v27 = *v17;
            *v17 = *v18;
            a1[2].n128_u64[1] = a1[4].n128_u64[0];
            *v18 = v27;
            a1[4].n128_u64[0] = v26;
            if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1[1].n128_u64[1], a1) & 0x80) != 0)
            {
              v28 = a1[1].n128_u64[0];
              v29 = *a1;
              *a1 = *v17;
              a1[1].n128_u64[0] = a1[2].n128_u64[1];
              *v17 = v29;
              a1[2].n128_u64[1] = v28;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 3;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64);
      v11 = &a1[4].n128_u64[1];
      if (&a1[4].n128_i8[8] == (__int8 *)a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, v10) & 0x80) != 0)
    {
      v30 = *(_OWORD *)v11;
      v31 = v11[2];
      v11[1] = 0;
      v11[2] = 0;
      *v11 = 0;
      v14 = v12;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(__n128 *)(v15 + 72) = *(__n128 *)((char *)a1 + v14 + 48);
        *((_QWORD *)v15 + 11) = *(unint64_t *)((char *)a1[4].n128_u64 + v14);
        v15[71] = 0;
        v15[48] = 0;
        if (v14 == -48)
          break;
        v14 -= 24;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v30, (_QWORD *)v15 + 3) & 0x80) == 0)
        {
          v16 = (uint64_t)&a1[4].n128_i64[1] + v14;
          goto LABEL_12;
        }
      }
      v16 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)v16 = v30;
      *(_QWORD *)(v16 + 16) = v31;
      if (++v13 == 8)
        return v11 + 3 == (unint64_t *)a2;
    }
    v10 = (__n128 *)v11;
    v12 += 24;
    v11 += 3;
    if (v11 == (unint64_t *)a2)
      return 1;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::deep_copy_from_changed(__CFDictionary const*)::$_0 &,std::string *>(__n128 *a1, __n128 *a2)
{
  unint64_t v4;
  _BOOL8 result;
  __n128 *v6;
  unint64_t v7;
  __n128 v8;
  unint64_t v9;
  __n128 *v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 *v17;
  __n128 *v18;
  __int8 *v19;
  unint64_t *v20;
  unint64_t v21;
  __n128 v22;
  unint64_t v23;
  unint64_t v24;
  __n128 v25;
  unint64_t v26;
  __n128 v27;
  unint64_t v28;
  __n128 v29;
  __int128 v30;
  unint64_t v31;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__n128 *)((char *)a2 - 24);
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a2[-2].n128_u64[1], a1) & 0x80) != 0)
      {
        v7 = a1[1].n128_u64[0];
        v8 = *a1;
        v9 = v6[1].n128_u64[0];
        *a1 = *v6;
        a1[1].n128_u64[0] = v9;
        *v6 = v8;
        v6[1].n128_u64[0] = v7;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a2[-2].n128_u64[1]);
      return 1;
    case 5uLL:
      v17 = (__n128 *)((char *)a1 + 24);
      v18 = a1 + 3;
      v19 = &a1[4].n128_i8[8];
      v20 = &a2[-2].n128_u64[1];
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1]);
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20, &a1[4].n128_u64[1]) & 0x80) != 0)
      {
        v21 = a1[5].n128_u64[1];
        v22 = *(__n128 *)v19;
        v23 = v20[2];
        *(_OWORD *)v19 = *(_OWORD *)v20;
        a1[5].n128_u64[1] = v23;
        *(__n128 *)v20 = v22;
        v20[2] = v21;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1[4].n128_u64[1], (__n128 *)a1[3].n128_u64) & 0x80) != 0)
        {
          v24 = a1[4].n128_u64[0];
          v25 = *v18;
          *v18 = *(__n128 *)v19;
          a1[4].n128_u64[0] = a1[5].n128_u64[1];
          *(__n128 *)v19 = v25;
          a1[5].n128_u64[1] = v24;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((__n128 *)a1[3].n128_u64, &a1[1].n128_u64[1]) & 0x80) != 0)
          {
            v26 = a1[2].n128_u64[1];
            v27 = *v17;
            *v17 = *v18;
            a1[2].n128_u64[1] = a1[4].n128_u64[0];
            *v18 = v27;
            a1[4].n128_u64[0] = v26;
            if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a1[1].n128_u64[1], a1) & 0x80) != 0)
            {
              v28 = a1[1].n128_u64[0];
              v29 = *a1;
              *a1 = *v17;
              a1[1].n128_u64[0] = a1[2].n128_u64[1];
              *v17 = v29;
              a1[2].n128_u64[1] = v28;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 3;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64);
      v11 = &a1[4].n128_u64[1];
      if (&a1[4].n128_i8[8] == (__int8 *)a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, v10) & 0x80) != 0)
    {
      v30 = *(_OWORD *)v11;
      v31 = v11[2];
      v11[1] = 0;
      v11[2] = 0;
      *v11 = 0;
      v14 = v12;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(__n128 *)(v15 + 72) = *(__n128 *)((char *)a1 + v14 + 48);
        *((_QWORD *)v15 + 11) = *(unint64_t *)((char *)a1[4].n128_u64 + v14);
        v15[71] = 0;
        v15[48] = 0;
        if (v14 == -48)
          break;
        v14 -= 24;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v30, (_QWORD *)v15 + 3) & 0x80) == 0)
        {
          v16 = (uint64_t)&a1[4].n128_i64[1] + v14;
          goto LABEL_12;
        }
      }
      v16 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)v16 = v30;
      *(_QWORD *)(v16 + 16) = v31;
      if (++v13 == 8)
        return v11 + 3 == (unint64_t *)a2;
    }
    v10 = (__n128 *)v11;
    v12 += 24;
    v11 += 3;
    if (v11 == (unint64_t *)a2)
      return 1;
  }
}

uint64_t DSP_Host_OffloadDictionary::create_into(DSP_Host_OffloadDictionary *this, const __CFDictionary **a2)
{
  uint64_t result;
  const __CFDictionary *v4;
  uint64_t v5;

  DSP_Host_OffloadDictionary::deep_copy((DSP_Host_OffloadDictionary *)&v5, (uint64_t)this);
  result = v5;
  if (v5)
  {
    v4 = *(const __CFDictionary **)(v5 + 16);
    if (v4)
      *(_QWORD *)(v5 + 16) = 0;
    *a2 = v4;
    return std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](result);
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void OS::CF::MutableDictionary::SetValueForKey<OS::CF::Dictionary>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1)
  {
    if (a3)
      CFDictionarySetValue(a1, a2, a3);
  }
}

BOOL HALS_PlugInObject::IsCustomProperty(HALS_PlugInObject *this, int a2)
{
  unint64_t v2;
  _DWORD *v3;
  unint64_t v5;
  int *v6;
  int v7;

  v2 = *((unsigned int *)this + 8);
  if (!(_DWORD)v2)
    return 0;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  if (*v3 == a2)
    return 1;
  v5 = 0;
  v6 = v3 + 3;
  while (v2 - 1 != v5)
  {
    v7 = *v6;
    v6 += 3;
    ++v5;
    if (v7 == a2)
      return v5 < v2;
  }
  v5 = *((unsigned int *)this + 8);
  return v5 < v2;
}

void HALS_PlugInObject::CacheCustomPropertyInfo(HALS_PlugInObject *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t *v21;
  unint64_t v22;
  int *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t *v32;
  unint64_t v33;
  unsigned int v34;
  int *v35;
  int v36;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  std::__shared_weak_count *v46;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    MEMORY[0x1B5E50664](v2, 0x1000C803E1C8BA9);
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  v3 = *((_QWORD *)this + 1);
  v4 = *(_QWORD *)(v3 + 400);
  v5 = *(std::__shared_weak_count **)(v3 + 408);
  v45 = v4;
  v46 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = *((unsigned int *)this + 5);
  v43 = 0x676C6F6263757374;
  v44 = 0;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(*(_QWORD *)v4 + 544))(v4, v8, 0, &v43);
  v10 = v9;
  if (!v5)
    goto LABEL_10;
  v11 = (unint64_t *)&v5->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v10)
      return;
  }
  else
  {
LABEL_10:
    if (!v9)
      return;
  }
  v42 = 0;
  v13 = *((_QWORD *)this + 1);
  v14 = *(_QWORD *)(v13 + 400);
  v15 = *(std::__shared_weak_count **)(v13 + 408);
  v45 = v14;
  v46 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *((unsigned int *)this + 5);
  v43 = 0x676C6F6263757374;
  v44 = 0;
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)v14 + 560))(v14, v18, 0, &v43, 0, 0);
  v20 = v19 / 0xC;
  if (v15)
  {
    v21 = (unint64_t *)&v15->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v42 = v19 / 0xC;
  if (v19 >= 0xC)
  {
    v23 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v20);
    v24 = v23;
    do
    {
      *(_QWORD *)v24 = 0;
      v24[2] = 0;
      v24 += 3;
    }
    while (v24 != &v23[3 * v20]);
    *((_QWORD *)this + 3) = operator new[]();
    v25 = *((_QWORD *)this + 1);
    v26 = *(_QWORD *)(v25 + 400);
    v27 = *(std::__shared_weak_count **)(v25 + 408);
    v45 = v26;
    v46 = v27;
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v30 = *((unsigned int *)this + 5);
    v43 = 0x676C6F6263757374;
    v44 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD, _QWORD, unsigned int *, int *))(*(_QWORD *)v26 + 568))(v26, v30, 0, &v43, 0, 0, 12 * v20, &v42, v23);
    LODWORD(i) = v42 / 0xC;
    v42 /= 0xCu;
    if (v27)
    {
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
      LODWORD(i) = v42;
    }
    *((_DWORD *)this + 8) = 0;
    if ((_DWORD)i)
    {
      v34 = 0;
      v35 = v23 + 2;
      for (i = i; i; --i)
      {
        v36 = *(v35 - 1);
        if (v36 != 1667658612 && v36 != 1918990199 && v36 != 1886155636)
          goto LABEL_48;
        v39 = *v35;
        if (*v35 > 1886155635)
        {
          if (v39 != 1918990199 && v39 != 1886155636)
            goto LABEL_48;
        }
        else if (v39 && v39 != 1667658612)
        {
          goto LABEL_48;
        }
        v40 = *((_QWORD *)this + 3) + 12 * v34;
        v41 = *((_QWORD *)v35 - 1);
        *(_DWORD *)(v40 + 8) = *v35;
        *(_QWORD *)v40 = v41;
        v34 = *((_DWORD *)this + 8) + 1;
        *((_DWORD *)this + 8) = v34;
LABEL_48:
        v35 += 3;
      }
    }
    if (v23)
      operator delete(v23);
  }
}

void sub_1B5BE4674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v5)
    operator delete(v5);
  _Unwind_Resume(a1);
}

void HALS_PlugInObject::~HALS_PlugInObject(HALS_PlugInObject *this)
{
  uint64_t v2;
  HALS_PlugInObject *v3;
  uint64_t v4;
  HALS_Object *v5;
  HALS_ObjectMap *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  NSObject *v14;
  unint64_t *v15;
  unint64_t v16;
  HALS_Object *v17;
  uint64_t v18;
  _opaque_pthread_t *v19;
  mach_port_t v20;
  NSObject **v21;
  _BYTE v22[10];
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E6996080;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    v3 = (HALS_PlugInObject *)(v2 + 328);
  else
    v3 = 0;
  if (v3 != this)
  {
    v4 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 4));
    v6 = (HALS_ObjectMap *)v4;
    if (v4)
    {
      v7 = *(_QWORD *)(v4 + 400);
      v8 = (std::__shared_weak_count *)*((_QWORD *)v6 + 51);
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (v7)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 128))(v7, *((unsigned int *)this + 5));
      if (v8)
      {
        v11 = (unint64_t *)&v8->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    else
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v21, "com.apple.coreaudio", "AMCP");
      v13 = *(std::__shared_weak_count **)v22;
      v14 = *v21;
      if (*(_QWORD *)v22)
      {
        v15 = (unint64_t *)(*(_QWORD *)v22 + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v19 = pthread_self();
        v20 = pthread_mach_thread_np(v19);
        LODWORD(v21) = 67109634;
        HIDWORD(v21) = v20;
        *(_WORD *)v22 = 2080;
        *(_QWORD *)&v22[2] = "HALS_PlugInObject.cpp";
        v23 = 1024;
        v24 = 52;
        _os_log_error_impl(&dword_1B57BA000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Could not retrieve the owning plugin from the object map", (uint8_t *)&v21, 0x18u);
      }
    }
    HALS_ObjectMap::ReleaseObject(*((HALS_ObjectMap **)this + 1), v5);
    HALS_ObjectMap::ReleaseObject(v6, v17);
  }
  v18 = *((_QWORD *)this + 3);
  if (v18)
    MEMORY[0x1B5E50664](v18, 0x1000C803E1C8BA9);
}

void sub_1B5BE48A0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugInObject::HasResourceBundle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v23;
  int v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 400);
  v6 = *(std::__shared_weak_count **)(v4 + 408);
  v25 = v5;
  v26 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  v10 = v9;
  if (v6)
  {
    v11 = (unint64_t *)&v6->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v10)
        goto LABEL_9;
      return 0;
    }
  }
  if (!v9)
    return 0;
LABEL_9:
  v23 = 0x676C6F6272737263;
  v24 = 0;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(v13 + 400);
  v15 = *(std::__shared_weak_count **)(v13 + 408);
  v25 = v14;
  v26 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  if (a2)
    v18 = *(unsigned int *)(a2 + 232);
  else
    v18 = 0;
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v14 + 544))(v14, 1, v18, &v23);
  if (v15)
  {
    v20 = (unint64_t *)&v15->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v19;
}

void sub_1B5BE49EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *HALS_PlugInObject::CopyResourceBundlePath(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  const __CFURL *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  const __CFString *v20;
  unint64_t *v21;
  unint64_t v22;
  int HasPrefix;
  CFTypeRef v24;
  _DWORD *exception;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CFTypeRef cf;
  char v31;
  int v32;
  const __CFString *v33;
  _BYTE buf[18];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 400);
  v6 = *(std::__shared_weak_count **)(v4 + 408);
  *(_QWORD *)buf = v5;
  *(_QWORD *)&buf[8] = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  v10 = (const __CFURL *)v9;
  if (!v6)
    goto LABEL_8;
  v11 = (unint64_t *)&v6->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v10)
    {
LABEL_9:
      cf = CFURLCopyFileSystemPath(v10, kCFURLPOSIXPathStyle);
      v31 = 1;
      if (!cf)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "HALS_PlugInObject.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 150;
          _os_log_impl(&dword_1B57BA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: couldn't allocate the plug-in's path for kAudioDevicePropertyResourceBundle", buf, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E69A1B30;
        exception[2] = 1852797029;
      }
      v28 = 0x676C6F6272737263;
      LODWORD(v29) = 0;
      v13 = *(_QWORD *)(a1 + 8);
      v14 = *(_QWORD *)(v13 + 400);
      v15 = *(std::__shared_weak_count **)(v13 + 408);
      v27 = v14;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      if (a2)
        v18 = *(unsigned int *)(a2 + 232);
      else
        v18 = 0;
      v33 = 0;
      v32 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, uint64_t, int *, const __CFString **))(*(_QWORD *)v14 + 568))(v14, 1, v18, &v28, 0, 0, 8, &v32, &v33);
      v20 = v33;
      *(_QWORD *)buf = v33;
      buf[8] = 1;
      if (v15)
      {
        v21 = (unint64_t *)&v15->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        v20 = *(const __CFString **)buf;
      }
      if (v20 && CFStringGetLength(v20))
      {
        HasPrefix = CFStringHasPrefix(*(CFStringRef *)buf, CFSTR("/"));
        v24 = cf;
        if (!HasPrefix)
        {
          v19 = (void *)CFStringCreateWithFormat(0, 0, CFSTR("%@/%@"), cf, *(_QWORD *)buf, v27, v15, v28, v29);
          goto LABEL_33;
        }
        if (cf)
          goto LABEL_30;
      }
      else
      {
        v24 = cf;
        if (cf)
        {
LABEL_30:
          CFRetain(v24);
          v19 = (void *)cf;
LABEL_33:
          CACFString::~CACFString((CACFString *)buf);
          CACFString::~CACFString((CACFString *)&cf);
          return v19;
        }
      }
      v19 = 0;
      goto LABEL_33;
    }
  }
  else
  {
LABEL_8:
    if (v9)
      goto LABEL_9;
  }
  return 0;
}

void sub_1B5BE4CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<AMCP::Log::Scope>::~shared_ptr[abi:ne180100]((uint64_t)va);
  CACFString::~CACFString((CACFString *)va1);
  _Unwind_Resume(a1);
}

void HALS_MetaDeviceDescription::UpdateRawDescription(CFDictionaryRef *this)
{
  const __CFArray *Size;
  const __CFArray *v3;
  CFIndex v4;
  const void *TypeID;
  CFTypeRef v6;
  const void *v7;
  const __CFArray *v8;
  const __CFArray *v9;
  CFIndex i;
  CFTypeRef v11;
  CFArrayRef Copy;
  CFDictionaryRef v13;
  _QWORD v14[2];
  _QWORD v15[2];
  void (**v16)(OS::CF::Array *__hidden);
  CFTypeRef v17;
  _QWORD v18[2];
  uint64_t v19;
  const __CFArray *v20;
  uint64_t v21;
  CFTypeRef cf;
  _BYTE v23[8];
  OS::CF::UntypedObject *v24;
  _BYTE v25[8];
  const __CFArray *v26;
  _BYTE v27[8];
  __CFArray *v28;
  _BYTE v29[8];
  __CFDictionary *v30;

  OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)v29, this[2]);
  OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)v27);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v25, this[2], CFSTR("subdevices"));
  Size = OS::CF::ArrayBase<__CFArray const*>::GetSize(v26);
  if (Size)
  {
    v3 = Size;
    v4 = 0;
    while (1)
    {
      OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::UntypedObject>((const __CFArray *)v23, (uint64_t)v25, v4);
      TypeID = OS::CF::UntypedObject::GetTypeID(v24);
      if (TypeID == (const void *)CFDictionaryGetTypeID())
        break;
      v7 = OS::CF::UntypedObject::GetTypeID(v24);
      if (v7 == (const void *)CFArrayGetTypeID())
      {
        OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)&v21);
        OS::CF::UntypedObject::As<OS::CF::Array>(&v19, (uint64_t)v23);
        v8 = OS::CF::ArrayBase<__CFArray const*>::GetSize(v20);
        if (v8)
        {
          v9 = v8;
          for (i = 0; (const __CFArray *)i != v9; ++i)
          {
            OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)&v16, (uint64_t)&v19, i);
            v11 = v17;
            if (v17)
            {
              v14[0] = &off_1E69A0E58;
              CFRetain(v17);
              v14[0] = &off_1E69A0DE0;
              v14[1] = v11;
              HALS_MetaDeviceDescription::UpdateSubDevice(v15, (uint64_t)this, (uint64_t)v14);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v14);
              OS::CF::MutableArray::AppendValue<OS::CF::Dictionary>((__CFArray *)cf, (const void *)v15[1]);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v15);
            }
            OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v16);
          }
        }
        if (cf)
        {
          Copy = CFArrayCreateCopy(0, (CFArrayRef)cf);
          v16 = &off_1E69A0EA8;
          v17 = Copy;
          if (v28 && Copy)
            CFArrayAppendValue(v28, Copy);
        }
        else
        {
          v16 = &off_1E69A0EA8;
          v17 = 0;
        }
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v16);
LABEL_18:
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v19);
LABEL_19:
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v21);
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v23);
      if ((const __CFArray *)++v4 == v3)
        goto LABEL_21;
    }
    OS::CF::UntypedObject::As<OS::CF::Dictionary>(&v21, (uint64_t)v23);
    v6 = cf;
    if (cf)
    {
      v18[0] = &off_1E69A0E58;
      CFRetain(cf);
      v18[0] = &off_1E69A0DE0;
      v18[1] = v6;
      HALS_MetaDeviceDescription::UpdateSubDevice(&v19, (uint64_t)this, (uint64_t)v18);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v18);
      OS::CF::MutableArray::AppendValue<OS::CF::Dictionary>(v28, v20);
      goto LABEL_18;
    }
    goto LABEL_19;
  }
LABEL_21:
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>(v30, CFSTR("subdevices"), v28);
  v13 = v30;
  if (v30)
    v13 = CFDictionaryCreateCopy(0, v30);
  OS::CF::UntypedObject::operator=((uint64_t)(this + 1), (uint64_t)v13);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v25);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v27);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v29);
}

void sub_1B5BE4F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  va_list va2;
  uint64_t v19;
  va_list va3;

  va_start(va3, a7);
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v17 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va1);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va2);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va3);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v7 - 112));
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v7 - 96));
  _Unwind_Resume(a1);
}

void HALS_MetaDeviceDescription::UpdateSubDeviceList(CFDictionaryRef *this, HALS_Device *a2)
{
  const __CFArray *Size;
  CFIndex v5;
  unsigned int v6;
  _BYTE *v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  CFIndex v12;
  unsigned int v13;
  const void *TypeID;
  const void *v15;
  const __CFArray *v16;
  const __CFArray *v17;
  CFIndex i;
  _BYTE *v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  void **v23;
  const __CFDictionary *v24;
  HALS_MetaSubDevice ***v25;
  CFDictionaryRef v26;
  HALS_MetaSubDevice **v27;
  HALS_MetaSubDevice **v28;
  OS::CF::UntypedObject *v29;
  HALS_MetaSubDevice *v30;
  _QWORD **v31;
  OS::CF::UntypedObject *v32;
  const __CFDictionary *ClockSubDevice;
  _QWORD v34[2];
  __int128 v35;
  const __CFDictionary *v36;
  __int128 v37;
  const __CFDictionary *v38;
  char v39[8];
  const __CFArray *v40;
  uint64_t v41;
  const __CFString *v42;
  void (**v43)(OS::CF::UntypedObject *__hidden);
  OS::CF::UntypedObject *v44;
  char v45[8];
  CFTypeRef cf;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v39, this[2], CFSTR("subdevices"));
  Size = OS::CF::ArrayBase<__CFArray const*>::GetSize(v40);
  v37 = 0uLL;
  v38 = 0;
  v35 = 0uLL;
  v36 = 0;
  if ((HALS_MetaDeviceDescription::IsStackRequested(this) & 1) == 0)
  {
    if (!Size)
      goto LABEL_36;
    v12 = 0;
    v13 = 0;
    while (1)
    {
      *(_QWORD *)v45 = 0;
      cf = 0;
      v47 = 0;
      OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::UntypedObject>((const __CFArray *)&v43, (uint64_t)v39, v12);
      TypeID = OS::CF::UntypedObject::GetTypeID(v44);
      if (TypeID == (const void *)CFDictionaryGetTypeID())
        break;
      v15 = OS::CF::UntypedObject::GetTypeID(v44);
      if (v15 == (const void *)CFArrayGetTypeID())
      {
        OS::CF::UntypedObject::As<OS::CF::Array>(&v41, (uint64_t)&v43);
        if (v42)
        {
          v16 = OS::CF::ArrayBase<__CFArray const*>::GetSize((const __CFArray *)v42);
          if (v16)
          {
            v17 = v16;
            for (i = 0; (const __CFArray *)i != v17; ++i)
            {
              OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v34, (uint64_t)&v41, i);
              if (v34[1])
                HALS_MetaDeviceDescription::AddOrUpdateSubDevice((uint64_t)this, a2, (uint64_t)v34, (void **)v45, (void **)&v35);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v34);
            }
          }
        }
        goto LABEL_22;
      }
LABEL_23:
      v20 = *(void **)v45;
      v19 = cf;
      if (*(CFTypeRef *)v45 != cf)
      {
        v21 = (_QWORD *)*((_QWORD *)&v37 + 1);
        if (*((_QWORD *)&v37 + 1) >= (unint64_t)v38)
        {
          v22 = std::vector<std::vector<HALS_MetaSubDevice *>>::__push_back_slow_path<std::vector<HALS_MetaSubDevice *> const&>((uint64_t *)&v37, (uint64_t)v45);
        }
        else
        {
          **((_QWORD **)&v37 + 1) = 0;
          v21[1] = 0;
          v21[2] = 0;
          std::vector<HALS_MetaSubDevice *>::__init_with_size[abi:ne180100]<HALS_MetaSubDevice **,HALS_MetaSubDevice **>(v21, v20, (uint64_t)v19, (v19 - (_BYTE *)v20) >> 3);
          v22 = (uint64_t)(v21 + 3);
        }
        *((_QWORD *)&v37 + 1) = v22;
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v43);
      if (v20)
        operator delete(v20);
      v12 = ++v13;
      if ((unint64_t)Size <= v13)
        goto LABEL_36;
    }
    OS::CF::UntypedObject::As<OS::CF::Dictionary>(&v41, (uint64_t)&v43);
    if (v42)
      HALS_MetaDeviceDescription::AddOrUpdateSubDevice((uint64_t)this, a2, (uint64_t)&v41, (void **)v45, (void **)&v35);
LABEL_22:
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v41);
    goto LABEL_23;
  }
  *(_QWORD *)v45 = 0;
  cf = 0;
  v47 = 0;
  if (Size)
  {
    v5 = 0;
    v6 = 1;
    do
    {
      OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)&v43, (uint64_t)v39, v5);
      if (v44)
        HALS_MetaDeviceDescription::AddOrUpdateSubDevice((uint64_t)this, a2, (uint64_t)&v43, (void **)v45, (void **)&v35);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v43);
      v5 = v6;
    }
    while ((unint64_t)Size > v6++);
    v9 = *(void **)v45;
    v8 = cf;
    if (*(CFTypeRef *)v45 != cf)
    {
      v10 = (_QWORD *)*((_QWORD *)&v37 + 1);
      if (*((_QWORD *)&v37 + 1) >= (unint64_t)v38)
      {
        v11 = std::vector<std::vector<HALS_MetaSubDevice *>>::__push_back_slow_path<std::vector<HALS_MetaSubDevice *> const&>((uint64_t *)&v37, (uint64_t)v45);
      }
      else
      {
        **((_QWORD **)&v37 + 1) = 0;
        v10[1] = 0;
        v10[2] = 0;
        std::vector<HALS_MetaSubDevice *>::__init_with_size[abi:ne180100]<HALS_MetaSubDevice **,HALS_MetaSubDevice **>(v10, v9, (uint64_t)v8, (v8 - (_BYTE *)v9) >> 3);
        v11 = (uint64_t)(v10 + 3);
      }
      *((_QWORD *)&v37 + 1) = v11;
    }
    if (v9)
      operator delete(v9);
  }
LABEL_36:
  HALS_MetaDeviceDescription::TeardownSubDeviceList((HALS_MetaDeviceDescription *)this);
  v23 = (void **)(this + 3);
  if (this[3])
  {
    std::vector<std::vector<std::byte>>::__clear[abi:ne180100]((uint64_t *)this + 3);
    operator delete(*v23);
    *v23 = 0;
    this[4] = 0;
    this[5] = 0;
  }
  v24 = this[6];
  *(_OWORD *)(this + 3) = v37;
  this[5] = v38;
  v38 = 0;
  v37 = 0uLL;
  this[7] = v24;
  if (v24)
  {
    operator delete(v24);
    this[6] = 0;
    this[7] = 0;
    this[8] = 0;
  }
  *((_OWORD *)this + 3) = v35;
  this[8] = v36;
  v36 = 0;
  v35 = 0uLL;
  this[12] = 0;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)&v41, this[2], CFSTR("master"));
  OS::CF::String::AsCString((CFIndex)&v41, (UInt8 *)v45, 256);
  if (v42)
  {
    v25 = (HALS_MetaSubDevice ***)this[3];
    v26 = this[4];
    while (v25 != (HALS_MetaSubDevice ***)v26)
    {
      v27 = *v25;
      v28 = v25[1];
      while (v27 != v28)
      {
        v29 = (OS::CF::UntypedObject *)HALS_MetaSubDevice::CopyRealDeviceUID(*v27);
        v43 = &off_1E69A0F60;
        v44 = v29;
        if (OS::CF::operator==((CFStringRef)v29, v42))
        {
          v30 = *v27;
          this[12] = *v27;
        }
        else
        {
          v30 = this[12];
        }
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v43);
        if (v30)
          goto LABEL_51;
        ++v27;
      }
      v25 += 3;
    }
  }
LABEL_51:
  if (!this[12])
  {
    v31 = (_QWORD **)this[3];
    if (this[4] != (CFDictionaryRef)v31)
      this[12] = (CFDictionaryRef)**v31;
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v41);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v45, this[2], CFSTR("clock"));
  v43 = &off_1E69A0E58;
  v32 = (OS::CF::UntypedObject *)cf;
  if (cf)
    CFRetain(cf);
  v43 = &off_1E69A0F60;
  v44 = v32;
  ClockSubDevice = (const __CFDictionary *)HALS_MetaDeviceDescription::AllocateClockSubDevice(this, (uint64_t)&v43);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v43);
  if (ClockSubDevice)
  {
    this[13] = ClockSubDevice;
    (**(void (***)(const __CFDictionary *))ClockSubDevice)(ClockSubDevice);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v45);
  *(_QWORD *)v45 = &v37;
  std::vector<std::vector<std::byte>>::__destroy_vector::operator()[abi:ne180100]((void ***)v45);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v39);
}

